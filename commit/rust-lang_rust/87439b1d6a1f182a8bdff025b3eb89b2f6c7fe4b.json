{"sha": "87439b1d6a1f182a8bdff025b3eb89b2f6c7fe4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NDM5YjFkNmExZjE4MmE4YmRmZjAyNWIzZWI4OWIyZjZjN2ZlNGI=", "commit": {"author": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-08-21T08:59:15Z"}, "committer": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-08-21T08:59:15Z"}, "message": "func gen: seperate generation form position(1)", "tree": {"sha": "5d02ed549118fb8efd5483018c1ba338926ed2f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d02ed549118fb8efd5483018c1ba338926ed2f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87439b1d6a1f182a8bdff025b3eb89b2f6c7fe4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87439b1d6a1f182a8bdff025b3eb89b2f6c7fe4b", "html_url": "https://github.com/rust-lang/rust/commit/87439b1d6a1f182a8bdff025b3eb89b2f6c7fe4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87439b1d6a1f182a8bdff025b3eb89b2f6c7fe4b/comments", "author": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2c233a42b204e7e7fa3d4fbabbb429a6a51fc91", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2c233a42b204e7e7fa3d4fbabbb429a6a51fc91", "html_url": "https://github.com/rust-lang/rust/commit/e2c233a42b204e7e7fa3d4fbabbb429a6a51fc91"}], "stats": {"total": 82, "additions": 33, "deletions": 49}, "files": [{"sha": "720b239098935070f0f5cd1e92527d52348af721", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 33, "deletions": 49, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/87439b1d6a1f182a8bdff025b3eb89b2f6c7fe4b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87439b1d6a1f182a8bdff025b3eb89b2f6c7fe4b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=87439b1d6a1f182a8bdff025b3eb89b2f6c7fe4b", "patch": "@@ -1,4 +1,4 @@\n-use hir::{HasSource, HirDisplay, InFile, Module, TypeInfo};\n+use hir::{HasSource, HirDisplay, Module, TypeInfo};\n use ide_db::{base_db::FileId, helpers::SnippetCap};\n use rustc_hash::{FxHashMap, FxHashSet};\n use stdx::to_lower_snake_case;\n@@ -8,7 +8,7 @@ use syntax::{\n         edit::{AstNodeEdit, IndentLevel},\n         make, ArgListOwner, AstNode, ModuleItemOwner,\n     },\n-    SyntaxKind, SyntaxNode, TextSize,\n+    SyntaxKind, SyntaxNode, TextRange, TextSize,\n };\n \n use crate::{\n@@ -87,21 +87,7 @@ fn gen_fn(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n \n     let function_builder = FunctionBuilder::from_call(ctx, &call, &path, target_module)?;\n     let target = call.syntax().text_range();\n-\n-    acc.add(\n-        AssistId(\"generate_function\", AssistKind::Generate),\n-        format!(\"Generate `{}` function\", function_builder.fn_name),\n-        target,\n-        |builder| {\n-            let function_template = function_builder.render();\n-            builder.edit_file(function_template.file);\n-            let new_fn = function_template.to_string(ctx.config.snippet_cap);\n-            match ctx.config.snippet_cap {\n-                Some(cap) => builder.insert_snippet(cap, function_template.insert_offset, new_fn),\n-                None => builder.insert(function_template.insert_offset, new_fn),\n-            }\n-        },\n-    )\n+    add_func_to_accumulator(acc, ctx, target, function_builder, None)\n }\n \n fn gen_method(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n@@ -132,50 +118,46 @@ fn gen_method(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n         current_module,\n     )?;\n     let target = call.syntax().text_range();\n+    let adt_name = if impl_.is_none() { Some(adt.name(ctx.sema.db)) } else { None };\n+    add_func_to_accumulator(acc, ctx, target, function_builder, adt_name)\n+}\n \n+fn add_func_to_accumulator(\n+    acc: &mut Assists,\n+    ctx: &AssistContext,\n+    target: TextRange,\n+    function_builder: FunctionBuilder,\n+    adt_name: Option<hir::Name>,\n+) -> Option<()> {\n     acc.add(\n         AssistId(\"generate_function\", AssistKind::Generate),\n         format!(\"Generate `{}` method\", function_builder.fn_name),\n         target,\n         |builder| {\n-            let function_template = function_builder.render();\n-            builder.edit_file(function_template.file);\n-            let mut new_fn = function_template.to_string(ctx.config.snippet_cap);\n-            if impl_.is_none() {\n-                new_fn = format!(\"\\nimpl {} {{\\n{}\\n}}\", adt.name(ctx.sema.db), new_fn,);\n+            let (function_template, insert_offset, file) = function_builder.render();\n+            let mut func = function_template.to_string(ctx.config.snippet_cap);\n+            if let Some(name) = adt_name {\n+                func = format!(\"\\nimpl {} {{\\n{}\\n}}\", name, func);\n             }\n+            builder.edit_file(file);\n             match ctx.config.snippet_cap {\n-                Some(cap) => builder.insert_snippet(cap, function_template.insert_offset, new_fn),\n-                None => builder.insert(function_template.insert_offset, new_fn),\n+                Some(cap) => builder.insert_snippet(cap, insert_offset, func),\n+                None => builder.insert(insert_offset, func),\n             }\n         },\n     )\n }\n \n-fn get_impl(\n-    adt: InFile<&SyntaxNode>,\n-    fn_name: &ast::NameRef,\n-    ctx: &AssistContext,\n-) -> Option<(Option<ast::Impl>, FileId)> {\n-    let file = adt.file_id.original_file(ctx.sema.db);\n-    let adt = adt.value;\n-    let adt = ast::Adt::cast(adt.clone())?;\n-    let r = find_struct_impl(ctx, &adt, fn_name.text().as_str())?;\n-    Some((r, file))\n-}\n-\n fn current_module(current_node: &SyntaxNode, ctx: &AssistContext) -> Option<Module> {\n     ctx.sema.scope(current_node).module()\n }\n \n struct FunctionTemplate {\n-    insert_offset: TextSize,\n     leading_ws: String,\n     fn_def: ast::Fn,\n     ret_type: Option<ast::RetType>,\n     should_focus_return_type: bool,\n     trailing_ws: String,\n-    file: FileId,\n     tail_expr: ast::Expr,\n }\n \n@@ -300,7 +282,7 @@ impl FunctionBuilder {\n         })\n     }\n \n-    fn render(self) -> FunctionTemplate {\n+    fn render(self) -> (FunctionTemplate, TextSize, FileId) {\n         let placeholder_expr = make::ext::expr_todo();\n         let fn_body = make::block_expr(vec![], Some(placeholder_expr));\n         let visibility = if self.needs_pub { Some(make::visibility_pub_crate()) } else { None };\n@@ -333,17 +315,19 @@ impl FunctionBuilder {\n             }\n         };\n \n-        FunctionTemplate {\n+        (\n+            FunctionTemplate {\n+                leading_ws,\n+                ret_type: fn_def.ret_type(),\n+                // PANIC: we guarantee we always create a function body with a tail expr\n+                tail_expr: fn_def.body().unwrap().tail_expr().unwrap(),\n+                should_focus_return_type: self.should_focus_return_type,\n+                fn_def,\n+                trailing_ws,\n+            },\n             insert_offset,\n-            leading_ws,\n-            ret_type: fn_def.ret_type(),\n-            // PANIC: we guarantee we always create a function body with a tail expr\n-            tail_expr: fn_def.body().unwrap().tail_expr().unwrap(),\n-            should_focus_return_type: self.should_focus_return_type,\n-            fn_def,\n-            trailing_ws,\n-            file: self.file,\n-        }\n+            self.file,\n+        )\n     }\n }\n "}]}