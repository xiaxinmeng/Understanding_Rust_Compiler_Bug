{"sha": "2c6f911463efa6c2d87e5566fc1cd77a7d26509a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNmY5MTE0NjNlZmE2YzJkODdlNTU2NmZjMWNkNzdhN2QyNjUwOWE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-22T15:22:38Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-22T15:22:38Z"}, "message": "Rollup merge of #49038 - canndrew:replace-infallible-with-never, r=SimonSapin\n\nreplace `convert::Infallible` with `!`", "tree": {"sha": "a08e85fbbc28f60e993fb753d94e652b15ddb94a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a08e85fbbc28f60e993fb753d94e652b15ddb94a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c6f911463efa6c2d87e5566fc1cd77a7d26509a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlqzyj4ACgkQ/vbIBR0O\nATzkKA//aOe9/ZHvyjlisaiEfqkiZtvGOpsckCzLvlIXwtfaLoRrFfV6a9V8nB5D\nI/M07mOSjFi9TXIRrsy1YKcMgqFryiDs0mwxDUK03fSawnfTi1nztt03jdVDy/4d\n6PeaB8D4NoYd5mLRG2pDA/UeFN4ha+ySlMDLtm6cJ3sMESchUlwglXMbAjSXjGqx\n/JdwUgXRabjQfoc3wCE17NCUINISUNpMTrsVqnwN31AhIW9zTOSU0zn7mwd5haiA\nRvWLA7AVkpQcfVrwzcYPLCKbykKwVTC8Pge41c5ICFsPGOvvxKEnPtgjo9UFQ/js\nBbNvXYmRjVGeSUCEFkkT/MruNKqsgzxV8C0DBIdzy/KMTJ0AuyURARb80hM+zvpy\nllI9ZIwL0xaeJyXhrbRVfao7Tg9JRi78mDmyfPZpoABagBa9y/inTLTBy+Gw2EeY\nBPBqrjbHMV+6lGzDWxZ9+rgf+bfd334mxsaEawy2rVTKM3eeMvLUuuWTjqlwfvpz\nU+W4HhWVFqolth8DNlLkw5cO3qWY4YH3uMQMxUfGnifsMU+chjpim7uweGZVVMrw\npLJwbjTPgxrU4uuo5JKBKbHZAq4atHempA1pmzEifE3uSyep0XaQfT23XtQm66tf\nlLG+vVaFM46WYD08Xli459GvqTkjmC4eXxxfrTIdpGpImPhsgFc=\n=0yf5\n-----END PGP SIGNATURE-----", "payload": "tree a08e85fbbc28f60e993fb753d94e652b15ddb94a\nparent 2b9674d2b1f0e2caa95f64bb37107063d3d95863\nparent 15bab452f30ce6cb67a849f13e9de80586a8b180\nauthor kennytm <kennytm@gmail.com> 1521732158 +0800\ncommitter kennytm <kennytm@gmail.com> 1521732158 +0800\n\nRollup merge of #49038 - canndrew:replace-infallible-with-never, r=SimonSapin\n\nreplace `convert::Infallible` with `!`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c6f911463efa6c2d87e5566fc1cd77a7d26509a", "html_url": "https://github.com/rust-lang/rust/commit/2c6f911463efa6c2d87e5566fc1cd77a7d26509a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c6f911463efa6c2d87e5566fc1cd77a7d26509a/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b9674d2b1f0e2caa95f64bb37107063d3d95863", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b9674d2b1f0e2caa95f64bb37107063d3d95863", "html_url": "https://github.com/rust-lang/rust/commit/2b9674d2b1f0e2caa95f64bb37107063d3d95863"}, {"sha": "15bab452f30ce6cb67a849f13e9de80586a8b180", "url": "https://api.github.com/repos/rust-lang/rust/commits/15bab452f30ce6cb67a849f13e9de80586a8b180", "html_url": "https://github.com/rust-lang/rust/commit/15bab452f30ce6cb67a849f13e9de80586a8b180"}], "stats": {"total": 47, "additions": 9, "deletions": 38}, "files": [{"sha": "7324df95bc5d5691306ba78924148e593abb4ed4", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2c6f911463efa6c2d87e5566fc1cd77a7d26509a/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6f911463efa6c2d87e5566fc1cd77a7d26509a/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=2c6f911463efa6c2d87e5566fc1cd77a7d26509a", "patch": "@@ -48,25 +48,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use fmt;\n-\n-/// A type used as the error type for implementations of fallible conversion\n-/// traits in cases where conversions cannot actually fail.\n-///\n-/// Because `Infallible` has no variants, a value of this type can never exist.\n-/// It is used only to satisfy trait signatures that expect an error type, and\n-/// signals to both the compiler and the user that the error case is impossible.\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n-#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]\n-pub enum Infallible {}\n-\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n-impl fmt::Display for Infallible {\n-    fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {\n-        match *self {\n-        }\n-    }\n-}\n /// A cheap reference-to-reference conversion. Used to convert a value to a\n /// reference value within generic code.\n ///\n@@ -438,7 +419,7 @@ impl<T, U> TryInto<U> for T where U: TryFrom<T>\n // with an uninhabited error type.\n #[unstable(feature = \"try_from\", issue = \"33417\")]\n impl<T, U> TryFrom<U> for T where T: From<U> {\n-    type Error = Infallible;\n+    type Error = !;\n \n     fn try_from(value: U) -> Result<Self, Self::Error> {\n         Ok(T::from(value))"}, {"sha": "4583e45bb12ebeebe3008fc1eeaaa8cd2941f737", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2c6f911463efa6c2d87e5566fc1cd77a7d26509a/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6f911463efa6c2d87e5566fc1cd77a7d26509a/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=2c6f911463efa6c2d87e5566fc1cd77a7d26509a", "patch": "@@ -12,7 +12,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use convert::{Infallible, TryFrom};\n+use convert::TryFrom;\n use fmt;\n use intrinsics;\n use ops;\n@@ -3596,10 +3596,9 @@ impl fmt::Display for TryFromIntError {\n }\n \n #[unstable(feature = \"try_from\", issue = \"33417\")]\n-impl From<Infallible> for TryFromIntError {\n-    fn from(infallible: Infallible) -> TryFromIntError {\n-        match infallible {\n-        }\n+impl From<!> for TryFromIntError {\n+    fn from(never: !) -> TryFromIntError {\n+        never\n     }\n }\n \n@@ -3608,7 +3607,7 @@ macro_rules! try_from_unbounded {\n     ($source:ty, $($target:ty),*) => {$(\n         #[unstable(feature = \"try_from\", issue = \"33417\")]\n         impl TryFrom<$source> for $target {\n-            type Error = Infallible;\n+            type Error = !;\n \n             #[inline]\n             fn try_from(value: $source) -> Result<Self, Self::Error> {\n@@ -3719,7 +3718,7 @@ try_from_lower_bounded!(isize, usize);\n #[cfg(target_pointer_width = \"16\")]\n mod ptr_try_from_impls {\n     use super::TryFromIntError;\n-    use convert::{Infallible, TryFrom};\n+    use convert::TryFrom;\n \n     try_from_upper_bounded!(usize, u8);\n     try_from_unbounded!(usize, u16, u32, u64, u128);\n@@ -3745,7 +3744,7 @@ mod ptr_try_from_impls {\n #[cfg(target_pointer_width = \"32\")]\n mod ptr_try_from_impls {\n     use super::TryFromIntError;\n-    use convert::{Infallible, TryFrom};\n+    use convert::TryFrom;\n \n     try_from_upper_bounded!(usize, u8, u16);\n     try_from_unbounded!(usize, u32, u64, u128);\n@@ -3771,7 +3770,7 @@ mod ptr_try_from_impls {\n #[cfg(target_pointer_width = \"64\")]\n mod ptr_try_from_impls {\n     use super::TryFromIntError;\n-    use convert::{Infallible, TryFrom};\n+    use convert::TryFrom;\n \n     try_from_upper_bounded!(usize, u8, u16, u32);\n     try_from_unbounded!(usize, u64, u128);"}, {"sha": "79bb6af168fa022d4113c432c10c5757ac759159", "filename": "src/libstd/error.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2c6f911463efa6c2d87e5566fc1cd77a7d26509a/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6f911463efa6c2d87e5566fc1cd77a7d26509a/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=2c6f911463efa6c2d87e5566fc1cd77a7d26509a", "patch": "@@ -56,7 +56,6 @@ use any::TypeId;\n use borrow::Cow;\n use cell;\n use char;\n-use convert;\n use core::array;\n use fmt::{self, Debug, Display};\n use mem::transmute;\n@@ -371,14 +370,6 @@ impl Error for char::ParseCharError {\n     }\n }\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n-impl Error for convert::Infallible {\n-    fn description(&self) -> &str {\n-        match *self {\n-        }\n-    }\n-}\n-\n // copied from any.rs\n impl Error + 'static {\n     /// Returns true if the boxed type is the same as `T`"}]}