{"sha": "6f5fd6c9de07a2bcc315acae59845ffb79990bc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNWZkNmM5ZGUwN2EyYmNjMzE1YWNhZTU5ODQ1ZmZiNzk5OTBiYzU=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-26T16:56:04Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-26T17:30:17Z"}, "message": "Add new type HoverResult to contain the results of hovering\n\nThis makes testing hovers easier as well as allows us to do more things with the\nresults if needed.", "tree": {"sha": "e57fb232aa4d4f22c04da309853548c1bb1acc56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e57fb232aa4d4f22c04da309853548c1bb1acc56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f5fd6c9de07a2bcc315acae59845ffb79990bc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f5fd6c9de07a2bcc315acae59845ffb79990bc5", "html_url": "https://github.com/rust-lang/rust/commit/6f5fd6c9de07a2bcc315acae59845ffb79990bc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f5fd6c9de07a2bcc315acae59845ffb79990bc5/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ec25841488f9d4325ec25d737c488c18419787c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ec25841488f9d4325ec25d737c488c18419787c", "html_url": "https://github.com/rust-lang/rust/commit/3ec25841488f9d4325ec25d737c488c18419787c"}], "stats": {"total": 165, "additions": 149, "deletions": 16}, "files": [{"sha": "91d8e2ffaf28eb33ac75a86ffa53da69384fd2c3", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 146, "deletions": 14, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/6f5fd6c9de07a2bcc315acae59845ffb79990bc5/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5fd6c9de07a2bcc315acae59845ffb79990bc5/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=6f5fd6c9de07a2bcc315acae59845ffb79990bc5", "patch": "@@ -6,9 +6,69 @@ use ra_syntax::{\n \n use crate::{db::RootDatabase, RangeInfo, FilePosition, FileRange, NavigationTarget};\n \n-pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo<String>> {\n+/// Contains the results when hovering over an item\n+#[derive(Debug, Clone)]\n+pub struct HoverResult {\n+    results: Vec<String>,\n+    exact: bool,\n+}\n+\n+impl HoverResult {\n+    pub fn new() -> HoverResult {\n+        HoverResult {\n+            results: Vec::new(),\n+            // We assume exact by default\n+            exact: true,\n+        }\n+    }\n+\n+    pub fn extend(&mut self, item: Option<String>) {\n+        self.results.extend(item);\n+    }\n+\n+    pub fn is_exact(&self) -> bool {\n+        self.exact\n+    }\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.results.is_empty()\n+    }\n+\n+    pub fn len(&self) -> usize {\n+        self.results.len()\n+    }\n+\n+    pub fn first(&self) -> Option<&str> {\n+        self.results.first().map(String::as_str)\n+    }\n+\n+    pub fn results(&self) -> &[String] {\n+        &self.results\n+    }\n+\n+    /// Returns the results converted into markup\n+    /// for displaying in a UI\n+    pub fn to_markup(&self) -> String {\n+        let mut markup = if !self.exact {\n+            let mut msg = String::from(\"Failed to exactly resolve the symbol. This is probably because rust_analyzer does not yet support glob imports or traits.\");\n+            if !self.results.is_empty() {\n+                msg.push_str(\"  \\nThese items were found instead:\");\n+            }\n+            msg.push_str(\"\\n\\n---\\n\");\n+            msg\n+        } else {\n+            String::new()\n+        };\n+\n+        markup.push_str(&self.results.join(\"\\n\\n---\\n\"));\n+\n+        markup\n+    }\n+}\n+\n+pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo<HoverResult>> {\n     let file = db.parse(position.file_id);\n-    let mut res = Vec::new();\n+    let mut res = HoverResult::new();\n \n     let mut range = None;\n     if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset) {\n@@ -17,11 +77,9 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         match ref_result {\n             Exact(nav) => res.extend(doc_text_for(db, nav)),\n             Approximate(navs) => {\n-                let mut msg = String::from(\"Failed to exactly resolve the symbol. This is probably because rust_analyzer does not yet support glob imports or traits.\");\n-                if !navs.is_empty() {\n-                    msg.push_str(\"  \\nThese items were found instead:\");\n-                }\n-                res.push(msg);\n+                // We are no longer exact\n+                res.exact = false;\n+\n                 for nav in navs {\n                     res.extend(doc_text_for(db, nav))\n                 }\n@@ -31,6 +89,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n             range = Some(name_ref.syntax().range())\n         }\n     }\n+\n     if range.is_none() {\n         let node = find_leaf_at_offset(file.syntax(), position.offset).find_map(|leaf| {\n             leaf.ancestors().find(|n| ast::Expr::cast(*n).is_some() || ast::Pat::cast(*n).is_some())\n@@ -44,7 +103,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n     if res.is_empty() {\n         return None;\n     }\n-    let res = RangeInfo::new(range, res.join(\"\\n\\n---\\n\"));\n+    let res = RangeInfo::new(range, res);\n     Some(res)\n }\n \n@@ -136,6 +195,7 @@ impl NavigationTarget {\n             }\n         }\n \n+        // FIXME: This is also partially copied from `structure.rs`\n         fn visit_fn(node: &ast::FnDef) -> Option<String> {\n             let mut detail =\n                 node.visibility().map(|v| format!(\"{} \", v.syntax().text())).unwrap_or_default();\n@@ -185,7 +245,24 @@ impl NavigationTarget {\n #[cfg(test)]\n mod tests {\n     use ra_syntax::TextRange;\n-    use crate::mock_analysis::{single_file_with_position, single_file_with_range};\n+    use crate::mock_analysis::{single_file_with_position, single_file_with_range, analysis_and_position};\n+\n+    fn trim_markup(s: &str) -> &str {\n+        s.trim_start_matches(\"```rust\\n\").trim_end_matches(\"\\n```\")\n+    }\n+\n+    fn check_hover_result(fixture: &str, expected: &[&str]) {\n+        let (analysis, position) = analysis_and_position(fixture);\n+        let hover = analysis.hover(position).unwrap().unwrap();\n+\n+        for (markup, expected) in\n+            hover.info.results().iter().zip(expected.iter().chain(std::iter::repeat(&\"<missing>\")))\n+        {\n+            assert_eq!(trim_markup(&markup), *expected);\n+        }\n+\n+        assert_eq!(hover.info.len(), expected.len());\n+    }\n \n     #[test]\n     fn hover_shows_type_of_an_expression() {\n@@ -200,7 +277,62 @@ mod tests {\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(hover.range, TextRange::from_to(95.into(), 100.into()));\n-        assert_eq!(hover.info, \"u32\");\n+        assert_eq!(hover.info.first(), Some(\"u32\"));\n+    }\n+\n+    #[test]\n+    fn hover_shows_fn_signature() {\n+        // Single file with result\n+        check_hover_result(\n+            r#\"\n+            //- /main.rs\n+            pub fn foo() -> u32 { 1 }\n+\n+            fn main() {\n+                let foo_test = fo<|>o();\n+            }\n+        \"#,\n+            &[\"pub fn foo() -> u32\"],\n+        );\n+\n+        // Multiple results\n+        check_hover_result(\n+            r#\"\n+            //- /a.rs\n+            pub fn foo() -> u32 { 1 }\n+\n+            //- /b.rs\n+            pub fn foo() -> &str { \"\" }\n+\n+            //- /c.rs\n+            pub fn foo(a: u32, b: u32) {}\n+\n+            //- /main.rs\n+            mod a;\n+            mod b;\n+            mod c;\n+\n+            fn main() {\n+                let foo_test = fo<|>o();\n+            }\n+        \"#,\n+            &[\"pub fn foo() -> &str\", \"pub fn foo() -> u32\", \"pub fn foo(a: u32, b: u32)\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn hover_shows_fn_signature_with_type_params() {\n+        check_hover_result(\n+            r#\"\n+            //- /main.rs\n+            pub fn foo<'a, T: AsRef<str>>(b: &'a T) -> &'a str { }\n+\n+            fn main() {\n+                let foo_test = fo<|>o();\n+            }\n+        \"#,\n+            &[\"pub fn foo<'a, T: AsRef<str>>(b: &'a T) -> &'a str\"],\n+        );\n     }\n \n     #[test]\n@@ -217,21 +349,21 @@ mod tests {\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         // not the nicest way to show it currently\n-        assert_eq!(hover.info, \"Some<i32>(T) -> Option<T>\");\n+        assert_eq!(hover.info.first(), Some(\"Some<i32>(T) -> Option<T>\"));\n     }\n \n     #[test]\n     fn hover_for_local_variable() {\n         let (analysis, position) = single_file_with_position(\"fn func(foo: i32) { fo<|>o; }\");\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(hover.info, \"i32\");\n+        assert_eq!(hover.info.first(), Some(\"i32\"));\n     }\n \n     #[test]\n     fn hover_for_local_variable_pat() {\n         let (analysis, position) = single_file_with_position(\"fn func(fo<|>o: i32) {}\");\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(hover.info, \"i32\");\n+        assert_eq!(hover.info.first(), Some(\"i32\"));\n     }\n \n     #[test]\n@@ -298,6 +430,6 @@ mod tests {\n             \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(hover.info, \"Thing\");\n+        assert_eq!(hover.info.first(), Some(\"Thing\"));\n     }\n }"}, {"sha": "6546d064479db33a084b9f8ab04d48b30f343b04", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f5fd6c9de07a2bcc315acae59845ffb79990bc5/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5fd6c9de07a2bcc315acae59845ffb79990bc5/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=6f5fd6c9de07a2bcc315acae59845ffb79990bc5", "patch": "@@ -58,6 +58,7 @@ pub use crate::{\n     navigation_target::NavigationTarget,\n     references::ReferenceSearchResult,\n     assists::{Assist, AssistId},\n+    hover::{HoverResult},\n };\n pub use ra_ide_api_light::{\n     Fold, FoldKind, HighlightedRange, Severity, StructureNode, LocalEdit,\n@@ -328,7 +329,7 @@ impl Analysis {\n     }\n \n     /// Returns a short text describing element at position.\n-    pub fn hover(&self, position: FilePosition) -> Cancelable<Option<RangeInfo<String>>> {\n+    pub fn hover(&self, position: FilePosition) -> Cancelable<Option<RangeInfo<HoverResult>>> {\n         self.with_db(|db| hover::hover(db, position))\n     }\n "}, {"sha": "dce6fcc679dfdea44e00c3136bcc56a9bc659ba6", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f5fd6c9de07a2bcc315acae59845ffb79990bc5/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5fd6c9de07a2bcc315acae59845ffb79990bc5/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=6f5fd6c9de07a2bcc315acae59845ffb79990bc5", "patch": "@@ -441,7 +441,7 @@ pub fn handle_hover(\n     let res = Hover {\n         contents: HoverContents::Markup(MarkupContent {\n             kind: MarkupKind::Markdown,\n-            value: info.info,\n+            value: info.info.to_markup(),\n         }),\n         range: Some(range),\n     };"}]}