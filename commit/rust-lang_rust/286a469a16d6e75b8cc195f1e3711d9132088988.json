{"sha": "286a469a16d6e75b8cc195f1e3711d9132088988", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NmE0NjlhMTZkNmU3NWI4Y2MxOTVmMWUzNzExZDkxMzIwODg5ODg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-04-19T20:32:26Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-04-21T11:16:44Z"}, "message": "Introduce query `static_mutability`", "tree": {"sha": "85f5951579167bd0e3136bd52cd1d7445889803e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85f5951579167bd0e3136bd52cd1d7445889803e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/286a469a16d6e75b8cc195f1e3711d9132088988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/286a469a16d6e75b8cc195f1e3711d9132088988", "html_url": "https://github.com/rust-lang/rust/commit/286a469a16d6e75b8cc195f1e3711d9132088988", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/286a469a16d6e75b8cc195f1e3711d9132088988/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d9c6cd7226e1839a195f1b6e7d40a3ccf9bb062", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d9c6cd7226e1839a195f1b6e7d40a3ccf9bb062", "html_url": "https://github.com/rust-lang/rust/commit/4d9c6cd7226e1839a195f1b6e7d40a3ccf9bb062"}], "stats": {"total": 61, "additions": 33, "deletions": 28}, "files": [{"sha": "8c1e345cdaec5c94e6b64f91a39b430c660eef5c", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/286a469a16d6e75b8cc195f1e3711d9132088988/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/286a469a16d6e75b8cc195f1e3711d9132088988/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=286a469a16d6e75b8cc195f1e3711d9132088988", "patch": "@@ -238,6 +238,9 @@ rustc_queries! {\n         /// True if this is a foreign item (i.e., linked via `extern { ... }`).\n         query is_foreign_item(_: DefId) -> bool {}\n \n+        /// Returns `Some(mutability)` if the node pointed to by `def_id` is a static item.\n+        query static_mutability(_: DefId) -> Option<hir::Mutability> {}\n+\n         /// Get a map with the variance of every item; use `item_variance`\n         /// instead.\n         query crate_variances(_: CrateNum) -> Lrc<ty::CrateVariancesMap> {"}, {"sha": "d808387e269fd594fbe7e21da16bb245de22a787", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/286a469a16d6e75b8cc195f1e3711d9132088988/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/286a469a16d6e75b8cc195f1e3711d9132088988/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=286a469a16d6e75b8cc195f1e3711d9132088988", "patch": "@@ -1,9 +1,8 @@\n //! Miscellaneous type-system utilities that are too small to deserve their own modules.\n \n-use crate::hir::def::Def;\n+use crate::hir;\n use crate::hir::def_id::DefId;\n use crate::hir::map::DefPathData;\n-use crate::hir::{self, Node};\n use crate::mir::interpret::{sign_extend, truncate};\n use crate::ich::NodeIdHashingMode;\n use crate::traits::{self, ObligationCause};\n@@ -615,32 +614,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     /// Returns `true` if the node pointed to by `def_id` is a static item, and its mutability.\n     pub fn is_static(&self, def_id: DefId) -> Option<hir::Mutability> {\n-        if let Some(node) = self.hir().get_if_local(def_id) {\n-            match node {\n-                Node::Item(&hir::Item {\n-                    node: hir::ItemKind::Static(_, mutbl, _), ..\n-                }) => Some(mutbl),\n-                Node::ForeignItem(&hir::ForeignItem {\n-                    node: hir::ForeignItemKind::Static(_, is_mutbl), ..\n-                }) =>\n-                    Some(if is_mutbl {\n-                        hir::Mutability::MutMutable\n-                    } else {\n-                        hir::Mutability::MutImmutable\n-                    }),\n-                _ => None\n-            }\n-        } else {\n-            match self.describe_def(def_id) {\n-                Some(Def::Static(_, is_mutbl)) =>\n-                    Some(if is_mutbl {\n-                        hir::Mutability::MutMutable\n-                    } else {\n-                        hir::Mutability::MutImmutable\n-                    }),\n-                _ => None\n-            }\n-        }\n+        self.static_mutability(def_id)\n     }\n \n     /// Expands the given impl trait type, stopping if the type is recursive."}, {"sha": "1a1b933ccf311683a958838cc42500b7c3ecf6b1", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/286a469a16d6e75b8cc195f1e3711d9132088988/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/286a469a16d6e75b8cc195f1e3711d9132088988/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=286a469a16d6e75b8cc195f1e3711d9132088988", "patch": "@@ -137,6 +137,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     inherent_impls => { Lrc::new(cdata.get_inherent_implementations_for_type(def_id.index)) }\n     is_const_fn_raw => { cdata.is_const_fn_raw(def_id.index) }\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n+    static_mutability => { cdata.static_mutability(def_id.index) }\n     describe_def => { cdata.get_def(def_id.index) }\n     def_span => { cdata.get_span(def_id.index, &tcx.sess) }\n     lookup_stability => {"}, {"sha": "3ac91ae718328be3b8e46d959321082033a7c411", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/286a469a16d6e75b8cc195f1e3711d9132088988/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/286a469a16d6e75b8cc195f1e3711d9132088988/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=286a469a16d6e75b8cc195f1e3711d9132088988", "patch": "@@ -1163,6 +1163,16 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n+    crate fn static_mutability(&self, id: DefIndex) -> Option<hir::Mutability> {\n+        match self.entry(id).kind {\n+            EntryKind::ImmStatic |\n+            EntryKind::ForeignImmStatic => Some(hir::MutImmutable),\n+            EntryKind::MutStatic |\n+            EntryKind::ForeignMutStatic => Some(hir::MutMutable),\n+            _ => None,\n+        }\n+    }\n+\n     pub fn fn_sig(&self,\n                   id: DefIndex,\n                   tcx: TyCtxt<'a, 'tcx, 'tcx>)"}, {"sha": "5c0c2fece3dd5a102976235886bcc5685b44202e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/286a469a16d6e75b8cc195f1e3711d9132088988/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/286a469a16d6e75b8cc195f1e3711d9132088988/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=286a469a16d6e75b8cc195f1e3711d9132088988", "patch": "@@ -78,6 +78,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n         impl_trait_ref,\n         impl_polarity,\n         is_foreign_item,\n+        static_mutability,\n         codegen_fn_attrs,\n         collect_mod_item_types,\n         ..*providers\n@@ -2361,6 +2362,22 @@ fn is_foreign_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool\n     }\n }\n \n+fn static_mutability<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    def_id: DefId,\n+) -> Option<hir::Mutability> {\n+    match tcx.hir().get_if_local(def_id) {\n+        Some(Node::Item(&hir::Item {\n+            node: hir::ItemKind::Static(_, mutbl, _), ..\n+        })) => Some(mutbl),\n+        Some(Node::ForeignItem( &hir::ForeignItem {\n+            node: hir::ForeignItemKind::Static(_, mutbl), ..\n+        })) => Some(if mutbl { hir::MutMutable } else { hir::MutImmutable }),\n+        Some(_) => None,\n+        _ => bug!(\"static_mutability applied to non-local def-id {:?}\", def_id),\n+    }\n+}\n+\n fn from_target_feature(\n     tcx: TyCtxt<'_, '_, '_>,\n     id: DefId,"}]}