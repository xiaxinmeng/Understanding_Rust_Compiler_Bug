{"sha": "66be735aa98c32fb062d1c756fa9303ff2d13002", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YmU3MzVhYTk4YzMyZmIwNjJkMWM3NTZmYTkzMDNmZjJkMTMwMDI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-12T15:50:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-12T15:50:16Z"}, "message": "flip comma", "tree": {"sha": "d679bef9b4005f969cfa5a369c6804195de6c779", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d679bef9b4005f969cfa5a369c6804195de6c779"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66be735aa98c32fb062d1c756fa9303ff2d13002", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66be735aa98c32fb062d1c756fa9303ff2d13002", "html_url": "https://github.com/rust-lang/rust/commit/66be735aa98c32fb062d1c756fa9303ff2d13002", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66be735aa98c32fb062d1c756fa9303ff2d13002/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56aa6e20e0279c69e0130905573b1607056cfaf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/56aa6e20e0279c69e0130905573b1607056cfaf9", "html_url": "https://github.com/rust-lang/rust/commit/56aa6e20e0279c69e0130905573b1607056cfaf9"}], "stats": {"total": 330, "additions": 273, "deletions": 57}, "files": [{"sha": "21858dfd312aba6d11ae6429af633a9cc8e58f3b", "filename": "crates/assert_eq_text/Cargo.toml", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Fassert_eq_text%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Fassert_eq_text%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassert_eq_text%2FCargo.toml?ref=66be735aa98c32fb062d1c756fa9303ff2d13002", "patch": "@@ -0,0 +1,7 @@\n+[package]\n+name = \"assert_eq_text\"\n+version = \"0.1.0\"\n+authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n+\n+[dependencies]\n+difference = \"2.0.0\""}, {"sha": "ed942d81a23c23251acb5e0aad8952d36ae6ba83", "filename": "crates/assert_eq_text/src/lib.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Fassert_eq_text%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Fassert_eq_text%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassert_eq_text%2Fsrc%2Flib.rs?ref=66be735aa98c32fb062d1c756fa9303ff2d13002", "patch": "@@ -0,0 +1,25 @@\n+extern crate difference;\n+pub use self::difference::Changeset as __Changeset;\n+\n+#[macro_export]\n+macro_rules! assert_eq_text {\n+    ($expected:expr, $actual:expr) => {{\n+        let expected = $expected;\n+        let actual = $actual;\n+        if expected != actual {\n+            let changeset = $crate::__Changeset::new(actual, expected, \"\\n\");\n+            println!(\"Expected:\\n{}\\n\\nActual:\\n{}\\nDiff:{}\\n\", expected, actual, changeset);\n+            panic!(\"text differs\");\n+        }\n+    }};\n+    ($expected:expr, $actual:expr, $($tt:tt)*) => {{\n+        let expected = $expected;\n+        let actual = $actual;\n+        if expected != actual {\n+            let changeset = $crate::__Changeset::new(actual, expected, \"\\n\");\n+            println!(\"Expected:\\n{}\\n\\nActual:\\n{}\\n\\nDiff:\\n{}\\n\", expected, actual, changeset);\n+            println!($($tt)*);\n+            panic!(\"text differs\");\n+        }\n+    }};\n+}"}, {"sha": "fe688bc201def81ecd72997a816df042cd042cff", "filename": "crates/libeditor/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Flibeditor%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Flibeditor%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2FCargo.toml?ref=66be735aa98c32fb062d1c756fa9303ff2d13002", "patch": "@@ -7,4 +7,6 @@ publish = false\n [dependencies]\n itertools = \"0.7.8\"\n superslice = \"0.1.0\"\n+\n libsyntax2 = { path = \"../libsyntax2\" }\n+assert_eq_text = { path = \"../assert_eq_text\" }"}, {"sha": "7c987458858e183acf910822d52d56f1683aa9af", "filename": "crates/libeditor/src/code_actions.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs?ref=66be735aa98c32fb062d1c756fa9303ff2d13002", "patch": "@@ -0,0 +1,33 @@\n+use {TextUnit, File, EditBuilder, Edit};\n+use libsyntax2::{\n+    ast::AstNode,\n+    SyntaxKind::COMMA,\n+    SyntaxNodeRef,\n+    algo::{\n+        Direction, siblings,\n+        find_leaf_at_offset,\n+    },\n+};\n+\n+pub fn flip_comma<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce() -> Edit + 'a> {\n+    let syntax = file.syntax();\n+    let syntax = syntax.as_ref();\n+\n+    let comma = find_leaf_at_offset(syntax, offset).find(|leaf| leaf.kind() == COMMA)?;\n+    let left = non_trivia_sibling(comma, Direction::Backward)?;\n+    let right = non_trivia_sibling(comma, Direction::Forward)?;\n+    Some(move || {\n+        let mut edit = EditBuilder::new();\n+        edit.replace(left.range(), right.text());\n+        edit.replace(right.range(), left.text());\n+        edit.finish()\n+    })\n+}\n+\n+fn non_trivia_sibling(node: SyntaxNodeRef, direction: Direction) -> Option<SyntaxNodeRef> {\n+    siblings(node, direction)\n+        .skip(1)\n+        .find(|node| !node.kind().is_trivia())\n+}\n+\n+"}, {"sha": "163ecf6dee862e8badeba42acd87399f3b278aee", "filename": "crates/libeditor/src/edit.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Flibeditor%2Fsrc%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Flibeditor%2Fsrc%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fedit.rs?ref=66be735aa98c32fb062d1c756fa9303ff2d13002", "patch": "@@ -0,0 +1,93 @@\n+use {TextRange, TextUnit};\n+\n+#[derive(Debug)]\n+pub struct Edit {\n+    pub atoms: Vec<AtomEdit>,\n+}\n+\n+#[derive(Debug)]\n+pub struct AtomEdit {\n+    pub delete: TextRange,\n+    pub insert: String,\n+}\n+\n+#[derive(Debug)]\n+pub struct EditBuilder {\n+    atoms: Vec<AtomEdit>\n+}\n+\n+impl EditBuilder {\n+    pub fn new() -> EditBuilder {\n+        EditBuilder { atoms: Vec::new() }\n+    }\n+\n+    pub fn replace(&mut self, range: TextRange, replacement: String) {\n+        let range = self.translate(range);\n+        self.atoms.push(AtomEdit { delete: range, insert: replacement })\n+    }\n+\n+    pub fn delete(&mut self, range: TextRange) {\n+        self.replace(range, String::new());\n+    }\n+\n+    pub fn insert(&mut self, offset: TextUnit, text: String) {\n+        self.replace(TextRange::offset_len(offset, 0.into()), text)\n+    }\n+\n+    pub fn finish(self) -> Edit {\n+        Edit { atoms: self.atoms }\n+    }\n+\n+    fn translate(&self, range: TextRange) -> TextRange {\n+        let mut range = range;\n+        for atom in self.atoms.iter() {\n+            range = atom.apply_to_range(range)\n+                .expect(\"conflicting edits\");\n+        }\n+        range\n+    }\n+}\n+\n+impl Edit {\n+    pub fn apply(&self, text: &str) -> String {\n+        let mut text = text.to_owned();\n+        for atom in self.atoms.iter() {\n+            text = atom.apply(&text);\n+        }\n+        text\n+    }\n+}\n+\n+impl AtomEdit {\n+    fn apply(&self, text: &str) -> String {\n+        let prefix = &text[\n+            TextRange::from_to(0.into(), self.delete.start())\n+        ];\n+        let suffix = &text[\n+            TextRange::from_to(self.delete.end(), TextUnit::of_str(text))\n+        ];\n+        let mut res = String::with_capacity(prefix.len() + self.insert.len() + suffix.len());\n+        res.push_str(prefix);\n+        res.push_str(&self.insert);\n+        res.push_str(suffix);\n+        res\n+    }\n+\n+    fn apply_to_position(&self, pos: TextUnit) -> Option<TextUnit> {\n+        if pos <= self.delete.start() {\n+            return Some(pos);\n+        }\n+        if pos < self.delete.end() {\n+            return None;\n+        }\n+        Some(pos - self.delete.len() + TextUnit::of_str(&self.insert))\n+    }\n+\n+    fn apply_to_range(&self, range: TextRange) -> Option<TextRange> {\n+        Some(TextRange::from_to(\n+            self.apply_to_position(range.start())?,\n+            self.apply_to_position(range.end())?,\n+        ))\n+    }\n+}\n+"}, {"sha": "103f3219054433464581c3bcb25085e88b16efc8", "filename": "crates/libeditor/src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Flibeditor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Flibeditor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Flib.rs?ref=66be735aa98c32fb062d1c756fa9303ff2d13002", "patch": "@@ -1,9 +1,12 @@\n extern crate libsyntax2;\n extern crate superslice;\n+extern crate itertools;\n \n mod extend_selection;\n mod symbols;\n mod line_index;\n+mod edit;\n+mod code_actions;\n \n use libsyntax2::{\n     ast::{self, NameOwner},\n@@ -15,7 +18,9 @@ pub use libsyntax2::{File, TextRange, TextUnit};\n pub use self::{\n     line_index::{LineIndex, LineCol},\n     extend_selection::extend_selection,\n-    symbols::{FileSymbol, file_symbols}\n+    symbols::{FileSymbol, file_symbols},\n+    edit::{EditBuilder, Edit},\n+    code_actions::{flip_comma},\n };\n \n #[derive(Debug)]"}, {"sha": "369854fed526875fc8d0ac15f42cf13918073e18", "filename": "crates/libeditor/tests/test.rs", "status": "modified", "additions": 45, "deletions": 7, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Flibeditor%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Flibeditor%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Ftests%2Ftest.rs?ref=66be735aa98c32fb062d1c756fa9303ff2d13002", "patch": "@@ -1,9 +1,16 @@\n extern crate libeditor;\n+extern crate libsyntax2;\n extern crate itertools;\n+#[macro_use]\n+extern crate assert_eq_text;\n \n use std::fmt;\n use itertools::Itertools;\n-use libeditor::{File, highlight, runnables, extend_selection, TextRange, file_symbols};\n+use libsyntax2::AstNode;\n+use libeditor::{\n+    File, TextUnit, TextRange,\n+    highlight, runnables, extend_selection, file_symbols, flip_comma,\n+};\n \n #[test]\n fn test_extend_selection() {\n@@ -27,13 +34,13 @@ fn main() {}\n \"#);\n     let hls = highlight(&file);\n     dbg_eq(\n-        &hls,\n         r#\"[HighlightedRange { range: [1; 11), tag: \"comment\" },\n             HighlightedRange { range: [12; 14), tag: \"keyword\" },\n             HighlightedRange { range: [15; 19), tag: \"function\" },\n             HighlightedRange { range: [29; 36), tag: \"text\" },\n             HighlightedRange { range: [38; 50), tag: \"string\" },\n-            HighlightedRange { range: [52; 54), tag: \"literal\" }]\"#\n+            HighlightedRange { range: [52; 54), tag: \"literal\" }]\"#,\n+        &hls,\n     );\n }\n \n@@ -51,10 +58,10 @@ fn test_foo() {}\n \"#);\n     let runnables = runnables(&file);\n     dbg_eq(\n-        &runnables,\n         r#\"[Runnable { range: [1; 13), kind: Bin },\n             Runnable { range: [15; 39), kind: Test { name: \"test_foo\" } },\n             Runnable { range: [41; 75), kind: Test { name: \"test_foo\" } }]\"#,\n+        &runnables,\n     )\n }\n \n@@ -76,23 +83,54 @@ const C: i32 = 92;\n \"#);\n     let symbols = file_symbols(&file);\n     dbg_eq(\n-        &symbols,\n         r#\"[FileSymbol { parent: None, name: \"Foo\", name_range: [8; 11), node_range: [1; 26), kind: STRUCT },\n             FileSymbol { parent: None, name: \"m\", name_range: [32; 33), node_range: [28; 53), kind: MODULE },\n             FileSymbol { parent: Some(1), name: \"bar\", name_range: [43; 46), node_range: [40; 51), kind: FUNCTION },\n             FileSymbol { parent: None, name: \"E\", name_range: [60; 61), node_range: [55; 75), kind: ENUM },\n             FileSymbol { parent: None, name: \"T\", name_range: [81; 82), node_range: [76; 88), kind: TYPE_ITEM },\n             FileSymbol { parent: None, name: \"S\", name_range: [96; 97), node_range: [89; 108), kind: STATIC_ITEM },\n             FileSymbol { parent: None, name: \"C\", name_range: [115; 116), node_range: [109; 127), kind: CONST_ITEM }]\"#,\n+        &symbols,\n+    )\n+}\n+\n+#[test]\n+fn test_swap_comma() {\n+    check_modification(\n+        \"fn foo(x: i32,<|> y: Result<(), ()>) {}\",\n+        \"fn foo(y: Result<(), ()>, x: i32) {}\",\n+        &|file, offset| {\n+            let edit = flip_comma(file, offset).unwrap()();\n+            edit.apply(&file.syntax().text())\n+        },\n     )\n }\n \n fn file(text: &str) -> File {\n     File::parse(text)\n }\n \n-fn dbg_eq(actual: &impl fmt::Debug, expected: &str) {\n+fn dbg_eq(expected: &str, actual: &impl fmt::Debug) {\n     let actual = format!(\"{:?}\", actual);\n     let expected = expected.lines().map(|l| l.trim()).join(\" \");\n-    assert_eq!(actual, expected);\n+    assert_eq!(expected, actual);\n+}\n+\n+fn check_modification(\n+    before: &str,\n+    after: &str,\n+    f: &impl Fn(&File, TextUnit) -> String,\n+) {\n+    let cursor = \"<|>\";\n+    let cursor_pos = match before.find(cursor) {\n+        None => panic!(\"before text should contain cursor marker\"),\n+        Some(pos) => pos,\n+    };\n+    let mut text = String::with_capacity(before.len() - cursor.len());\n+    text.push_str(&before[..cursor_pos]);\n+    text.push_str(&before[cursor_pos + cursor.len()..]);\n+    let cursor_pos = TextUnit::from(cursor_pos as u32);\n+    let file = file(&text);\n+    let actual = f(&file, cursor_pos);\n+    assert_eq_text!(after, &actual);\n }"}, {"sha": "4c4040fe592c3c196068f58faa53f62042e51d6a", "filename": "crates/libsyntax2/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Flibsyntax2%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Flibsyntax2%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2FCargo.toml?ref=66be735aa98c32fb062d1c756fa9303ff2d13002", "patch": "@@ -12,4 +12,4 @@ drop_bomb = \"0.1.4\"\n parking_lot = \"0.6.0\"\n \n [dev-dependencies]\n-difference = \"2.0.0\"\n+assert_eq_text = { path = \"../assert_eq_text\" }"}, {"sha": "6efdff12f7da724a1bccaaac63827ff1bed20983", "filename": "crates/libsyntax2/src/algo/mod.rs", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Flibsyntax2%2Fsrc%2Falgo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Flibsyntax2%2Fsrc%2Falgo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Falgo%2Fmod.rs?ref=66be735aa98c32fb062d1c756fa9303ff2d13002", "patch": "@@ -74,7 +74,6 @@ impl<'f> Iterator for LeafAtOffset<'f> {\n     }\n }\n \n-\n pub fn find_covering_node(root: SyntaxNodeRef, range: TextRange) -> SyntaxNodeRef {\n     assert!(is_subrange(root.range(), range));\n     let (left, right) = match (\n@@ -88,31 +87,33 @@ pub fn find_covering_node(root: SyntaxNodeRef, range: TextRange) -> SyntaxNodeRe\n     common_ancestor(left, right)\n }\n \n-fn common_ancestor<'a>(n1: SyntaxNodeRef<'a>, n2: SyntaxNodeRef<'a>) -> SyntaxNodeRef<'a> {\n-    for p in ancestors(n1) {\n-        if ancestors(n2).any(|a| a == p) {\n-            return p;\n-        }\n-    }\n-    panic!(\"Can't find common ancestor of {:?} and {:?}\", n1, n2)\n-}\n-\n pub fn ancestors<'a>(node: SyntaxNodeRef<'a>) -> impl Iterator<Item=SyntaxNodeRef<'a>> {\n-    Ancestors(Some(node))\n+    generate(Some(node), |&node| node.parent())\n }\n \n #[derive(Debug)]\n-struct Ancestors<'a>(Option<SyntaxNodeRef<'a>>);\n+pub enum Direction {\n+    Forward,\n+    Backward,\n+}\n \n-impl<'a> Iterator for Ancestors<'a> {\n-    type Item = SyntaxNodeRef<'a>;\n+pub fn siblings<'a>(\n+    node: SyntaxNodeRef<'a>,\n+    direction: Direction\n+) -> impl Iterator<Item=SyntaxNodeRef<'a>> {\n+    generate(Some(node), move |&node| match direction {\n+        Direction::Forward => node.next_sibling(),\n+        Direction::Backward => node.prev_sibling(),\n+    })\n+}\n \n-    fn next(&mut self) -> Option<Self::Item> {\n-        self.0.take().map(|n| {\n-            self.0 = n.parent();\n-            n\n-        })\n+fn common_ancestor<'a>(n1: SyntaxNodeRef<'a>, n2: SyntaxNodeRef<'a>) -> SyntaxNodeRef<'a> {\n+    for p in ancestors(n1) {\n+        if ancestors(n2).any(|a| a == p) {\n+            return p;\n+        }\n     }\n+    panic!(\"Can't find common ancestor of {:?} and {:?}\", n1, n2)\n }\n \n fn contains_offset_nonstrict(range: TextRange, offset: TextUnit) -> bool {\n@@ -122,3 +123,12 @@ fn contains_offset_nonstrict(range: TextRange, offset: TextUnit) -> bool {\n fn is_subrange(range: TextRange, subrange: TextRange) -> bool {\n     range.start() <= subrange.start() && subrange.end() <= range.end()\n }\n+\n+fn generate<T>(seed: Option<T>, step: impl Fn(&T) -> Option<T>) -> impl Iterator<Item=T> {\n+    ::itertools::unfold(seed, move |slot| {\n+        slot.take().map(|curr| {\n+            *slot = step(&curr);\n+            curr\n+        })\n+    })\n+}"}, {"sha": "332cd13ac5f170eec836ea2c16ceff64acd27a88", "filename": "crates/libsyntax2/src/syntax_kinds/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Flibsyntax2%2Fsrc%2Fsyntax_kinds%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Flibsyntax2%2Fsrc%2Fsyntax_kinds%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fsyntax_kinds%2Fmod.rs?ref=66be735aa98c32fb062d1c756fa9303ff2d13002", "patch": "@@ -17,7 +17,7 @@ pub(crate) struct SyntaxInfo {\n }\n \n impl SyntaxKind {\n-    pub(crate) fn is_trivia(self) -> bool {\n+    pub fn is_trivia(self) -> bool {\n         match self {\n             WHITESPACE | COMMENT | DOC_COMMENT => true,\n             _ => false,"}, {"sha": "00f76e51ce0a2e0c334bf1c79f95cee02ceddcac", "filename": "crates/libsyntax2/src/yellow/syntax.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax.rs?ref=66be735aa98c32fb062d1c756fa9303ff2d13002", "patch": "@@ -101,6 +101,17 @@ impl<R: TreeRoot> SyntaxNode<R> {\n         })\n     }\n \n+    pub fn prev_sibling(&self) -> Option<SyntaxNode<R>> {\n+        let red = self.red();\n+        let parent = self.parent()?;\n+        let prev_sibling_idx = red.index_in_parent()?.checked_sub(1)?;\n+        let sibling_red = parent.red().get_child(prev_sibling_idx)?;\n+        Some(SyntaxNode {\n+            root: self.root.clone(),\n+            red: sibling_red,\n+        })\n+    }\n+\n     pub fn is_leaf(&self) -> bool {\n         self.first_child().is_none()\n     }"}, {"sha": "64d080dfdba18455c82707ea4a07b7569618ee45", "filename": "crates/libsyntax2/tests/test/main.rs", "status": "modified", "additions": 20, "deletions": 28, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Flibsyntax2%2Ftests%2Ftest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66be735aa98c32fb062d1c756fa9303ff2d13002/crates%2Flibsyntax2%2Ftests%2Ftest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Ftest%2Fmain.rs?ref=66be735aa98c32fb062d1c756fa9303ff2d13002", "patch": "@@ -1,14 +1,13 @@\n extern crate libsyntax2;\n-extern crate difference;\n+#[macro_use]\n+extern crate assert_eq_text;\n \n use std::{\n     fs,\n     path::{Path, PathBuf},\n     fmt::Write,\n };\n \n-use difference::Changeset;\n-\n #[test]\n fn lexer_tests() {\n     dir_tests(&[\"lexer\"], |text| {\n@@ -63,10 +62,26 @@ pub fn dir_tests<F>(paths: &[&str], f: F)\n     }\n }\n \n+const REWRITE: bool = false;\n+\n fn assert_equal_text(expected: &str, actual: &str, path: &Path) {\n-    if expected != actual {\n-        print_difference(expected, actual, path)\n+    if expected == actual {\n+        return;\n+    }\n+    let dir = project_dir();\n+    let path = path.strip_prefix(&dir).unwrap_or_else(|_| path);\n+    if expected.trim() == actual.trim() {\n+        println!(\"whitespace difference, rewriting\");\n+        println!(\"file: {}\\n\", path.display());\n+        fs::write(path, actual).unwrap();\n+        return;\n+    }\n+    if REWRITE {\n+        println!(\"rewriting {}\", path.display());\n+        fs::write(path, actual).unwrap();\n+        return;\n     }\n+    assert_eq_text!(expected, actual, \"file: {}\", path.display());\n }\n \n fn collect_tests(paths: &[&str]) -> Vec<PathBuf> {\n@@ -92,29 +107,6 @@ fn test_from_dir(dir: &Path) -> Vec<PathBuf> {\n     acc\n }\n \n-const REWRITE: bool = false;\n-\n-fn print_difference(expected: &str, actual: &str, path: &Path) {\n-    let dir = project_dir();\n-    let path = path.strip_prefix(&dir).unwrap_or_else(|_| path);\n-    if expected.trim() == actual.trim() {\n-        println!(\"whitespace difference, rewriting\");\n-        println!(\"file: {}\\n\", path.display());\n-        fs::write(path, actual).unwrap();\n-        return;\n-    }\n-    if REWRITE {\n-        println!(\"rewriting {}\", path.display());\n-        fs::write(path, actual).unwrap();\n-        return;\n-    }\n-    let changeset = Changeset::new(actual, expected, \"\\n\");\n-    println!(\"Expected:\\n{}\\n\\nActual:\\n{}\\n\", expected, actual);\n-    print!(\"{}\", changeset);\n-    println!(\"file: {}\\n\", path.display());\n-    panic!(\"Comparison failed\")\n-}\n-\n fn project_dir() -> PathBuf {\n     let dir = env!(\"CARGO_MANIFEST_DIR\");\n     PathBuf::from(dir)"}]}