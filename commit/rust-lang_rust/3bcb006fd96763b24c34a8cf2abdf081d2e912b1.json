{"sha": "3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiY2IwMDZmZDk2NzYzYjI0YzM0YThjZjJhYmRmMDgxZDJlOTEyYjE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-27T19:07:09Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:21:52Z"}, "message": "Rename structures in ast", "tree": {"sha": "4531bf75371d131e2b14b4fcbd8de02aaeaa8b23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4531bf75371d131e2b14b4fcbd8de02aaeaa8b23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "html_url": "https://github.com/rust-lang/rust/commit/3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f457b3d10aa2db4104402e2d04f72fab64a3c62e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f457b3d10aa2db4104402e2d04f72fab64a3c62e", "html_url": "https://github.com/rust-lang/rust/commit/f457b3d10aa2db4104402e2d04f72fab64a3c62e"}], "stats": {"total": 272, "additions": 136, "deletions": 136}, "files": [{"sha": "71b0b66b59a29c176984ed911bac7bd5401fdda4", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "patch": "@@ -325,7 +325,7 @@ impl<'a> LoweringContext<'a> {\n                             .params\n                             .iter()\n                             .filter(|param| match param.kind {\n-                                ast::GenericParamKindAST::Lifetime { .. } => true,\n+                                ast::GenericParamKind::Lifetime { .. } => true,\n                                 _ => false,\n                             })\n                             .count();\n@@ -758,13 +758,13 @@ impl<'a> LoweringContext<'a> {\n     // This is used to track which lifetimes have already been defined, and\n     // which are new in-band lifetimes that need to have a definition created\n     // for them.\n-    fn with_in_scope_lifetime_defs<T, F>(&mut self, params: &Vec<GenericParamAST>, f: F) -> T\n+    fn with_in_scope_lifetime_defs<T, F>(&mut self, params: &Vec<GenericParam>, f: F) -> T\n     where\n         F: FnOnce(&mut LoweringContext) -> T,\n     {\n         let old_len = self.in_scope_lifetimes.len();\n         let lt_def_names = params.iter().filter_map(|param| match param.kind {\n-            GenericParamKindAST::Lifetime { .. } => Some(param.ident.name),\n+            GenericParamKind::Lifetime { .. } => Some(param.ident.name),\n             _ => None,\n         });\n         self.in_scope_lifetimes.extend(lt_def_names);\n@@ -1044,12 +1044,12 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_generic_arg(&mut self,\n-                        arg: &ast::GenericArgAST,\n+                        arg: &ast::GenericArg,\n                         itctx: ImplTraitContext)\n                         -> hir::GenericArg {\n         match arg {\n-            ast::GenericArgAST::Lifetime(lt) => GenericArg::Lifetime(self.lower_lifetime(&lt)),\n-            ast::GenericArgAST::Type(ty) => GenericArg::Type(self.lower_ty(&ty, itctx)),\n+            ast::GenericArg::Lifetime(lt) => GenericArg::Lifetime(self.lower_lifetime(&lt)),\n+            ast::GenericArg::Type(ty) => GenericArg::Type(self.lower_ty(&ty, itctx)),\n         }\n     }\n \n@@ -1745,7 +1745,7 @@ impl<'a> LoweringContext<'a> {\n     ) -> (hir::GenericArgs, bool) {\n         let &AngleBracketedArgs { ref args, ref bindings, .. } = data;\n         let has_types = args.iter().any(|arg| match arg {\n-            GenericArgAST::Type(_) => true,\n+            ast::GenericArg::Type(_) => true,\n             _ => false,\n         });\n         (hir::GenericArgs {\n@@ -1934,20 +1934,20 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_generic_params(\n         &mut self,\n-        params: &Vec<GenericParamAST>,\n+        params: &Vec<GenericParam>,\n         add_bounds: &NodeMap<Vec<TyParamBound>>,\n         itctx: ImplTraitContext,\n     ) -> hir::HirVec<hir::GenericParam> {\n         params.iter().map(|param| self.lower_generic_param(param, add_bounds, itctx)).collect()\n     }\n \n     fn lower_generic_param(&mut self,\n-                           param: &GenericParamAST,\n+                           param: &GenericParam,\n                            add_bounds: &NodeMap<Vec<TyParamBound>>,\n                            itctx: ImplTraitContext)\n                            -> hir::GenericParam {\n         match param.kind {\n-            GenericParamKindAST::Lifetime { ref bounds, ref lifetime, .. } => {\n+            GenericParamKind::Lifetime { ref bounds, ref lifetime, .. } => {\n                 let was_collecting_in_band = self.is_collecting_in_band_lifetimes;\n                 self.is_collecting_in_band_lifetimes = false;\n \n@@ -1968,7 +1968,7 @@ impl<'a> LoweringContext<'a> {\n \n                 param\n             }\n-            GenericParamKindAST::Type { ref bounds, ref default } => {\n+            GenericParamKind::Type { ref bounds, ref default } => {\n                 let mut name = self.lower_ident(param.ident);\n \n                 // Don't expose `Self` (recovered \"keyword used as ident\" parse error).\n@@ -2044,7 +2044,7 @@ impl<'a> LoweringContext<'a> {\n                                     {\n                                         for param in &generics.params {\n                                             match param.kind {\n-                                                GenericParamKindAST::Type { .. } => {\n+                                                GenericParamKind::Type { .. } => {\n                                                     if node_id == param.id {\n                                                         add_bounds.entry(param.id)\n                                                             .or_insert(Vec::new())"}, {"sha": "8aa5dd4ad80fd36c6a2a1fa54395bd62bbcba6ba", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "patch": "@@ -170,11 +170,11 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         }\n     }\n \n-    fn visit_generic_param(&mut self, param: &'a GenericParamAST) {\n+    fn visit_generic_param(&mut self, param: &'a GenericParam) {\n         let name = param.ident.name.as_interned_str();\n         let def_path_data = match param.kind {\n-            GenericParamKindAST::Lifetime { .. } => DefPathData::LifetimeParam(name),\n-            GenericParamKindAST::Type { .. } => DefPathData::TypeParam(name),\n+            GenericParamKind::Lifetime { .. } => DefPathData::LifetimeParam(name),\n+            GenericParamKind::Type { .. } => DefPathData::TypeParam(name),\n         };\n         self.create_def(param.id, def_path_data, REGULAR_SPACE, param.ident.span);\n "}, {"sha": "824930a7eb00007766e052d0992bbaf0ff494032", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "patch": "@@ -990,7 +990,7 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContext<'a> {\n         run_lints!(self, check_expr_post, early_passes, e);\n     }\n \n-    fn visit_generic_param(&mut self, param: &'a ast::GenericParamAST) {\n+    fn visit_generic_param(&mut self, param: &'a ast::GenericParam) {\n         run_lints!(self, check_generic_param, early_passes, param);\n         ast_visit::walk_generic_param(self, param);\n     }"}, {"sha": "9338e235c534df2f9fd7afd9a9a5d72e47023606", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "patch": "@@ -254,7 +254,7 @@ pub trait EarlyLintPass: LintPass {\n     fn check_expr(&mut self, _: &EarlyContext, _: &ast::Expr) { }\n     fn check_expr_post(&mut self, _: &EarlyContext, _: &ast::Expr) { }\n     fn check_ty(&mut self, _: &EarlyContext, _: &ast::Ty) { }\n-    fn check_generic_param(&mut self, _: &EarlyContext, _: &ast::GenericParamAST) { }\n+    fn check_generic_param(&mut self, _: &EarlyContext, _: &ast::GenericParam) { }\n     fn check_generics(&mut self, _: &EarlyContext, _: &ast::Generics) { }\n     fn check_where_predicate(&mut self, _: &EarlyContext, _: &ast::WherePredicate) { }\n     fn check_poly_trait_ref(&mut self, _: &EarlyContext, _: &ast::PolyTraitRef,"}, {"sha": "67720e61e91af3eb16fbeb930a5ca2128f948cf8", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "patch": "@@ -681,7 +681,7 @@ impl<'a> ReplaceBodyWithLoop<'a> {\n                             None => false,\n                             Some(&ast::GenericArgs::AngleBracketed(ref data)) => {\n                                 let types = data.args.iter().filter_map(|arg| match arg {\n-                                    ast::GenericArgAST::Type(ty) => Some(ty),\n+                                    ast::GenericArg::Type(ty) => Some(ty),\n                                     _ => None,\n                                 });\n                                 any_involves_impl_trait(types.into_iter()) ||"}, {"sha": "dfcdb688b00cd4cf50a9536378237d02981ed190", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "patch": "@@ -138,11 +138,11 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn check_late_bound_lifetime_defs(&self, params: &Vec<GenericParamAST>) {\n+    fn check_late_bound_lifetime_defs(&self, params: &Vec<GenericParam>) {\n         // Check only lifetime parameters are present and that the lifetime\n         // parameters that are present have no bounds.\n         let non_lt_param_spans: Vec<_> = params.iter().filter_map(|param| match param.kind {\n-                GenericParamKindAST::Lifetime { ref bounds, .. } => {\n+                GenericParamKind::Lifetime { ref bounds, .. } => {\n                     if !bounds.is_empty() {\n                         let spans: Vec<_> = bounds.iter().map(|b| b.ident.span).collect();\n                         self.err_handler()\n@@ -329,8 +329,8 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             ItemKind::TraitAlias(Generics { ref params, .. }, ..) => {\n                 for param in params {\n                     match param.kind {\n-                        GenericParamKindAST::Lifetime { .. } => {}\n-                        GenericParamKindAST::Type { ref bounds, ref default, .. } => {\n+                        GenericParamKind::Lifetime { .. } => {}\n+                        GenericParamKind::Type { ref bounds, ref default, .. } => {\n                             if !bounds.is_empty() {\n                                 self.err_handler()\n                                     .span_err(param.ident.span, \"type parameters on the left \\\n@@ -404,12 +404,12 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         let mut seen_default = None;\n         for param in &generics.params {\n             match (&param.kind, seen_non_lifetime_param) {\n-                (GenericParamKindAST::Lifetime { .. }, true) => {\n+                (GenericParamKind::Lifetime { .. }, true) => {\n                     self.err_handler()\n                         .span_err(param.ident.span, \"lifetime parameters must be leading\");\n                 },\n-                (GenericParamKindAST::Lifetime { .. }, false) => {}\n-                (GenericParamKindAST::Type { ref default, .. }, _) => {\n+                (GenericParamKind::Lifetime { .. }, false) => {}\n+                (GenericParamKind::Type { ref default, .. }, _) => {\n                     seen_non_lifetime_param = true;\n                     if default.is_some() {\n                         seen_default = Some(param.ident.span);\n@@ -514,7 +514,7 @@ impl<'a> Visitor<'a> for NestedImplTraitVisitor<'a> {\n         match *generic_args {\n             GenericArgs::AngleBracketed(ref data) => {\n                 data.args.iter().for_each(|arg| match arg {\n-                    GenericArgAST::Type(ty) => self.visit_ty(ty),\n+                    GenericArg::Type(ty) => self.visit_ty(ty),\n                     _ => {}\n                 });\n                 for type_binding in &data.bindings {"}, {"sha": "6561202be51b3c4e2c6d84690180074165619a04", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "patch": "@@ -56,7 +56,7 @@ use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::visit::{self, FnKind, Visitor};\n use syntax::attr;\n use syntax::ast::{Arm, BindingMode, Block, Crate, Expr, ExprKind};\n-use syntax::ast::{FnDecl, ForeignItem, ForeignItemKind, GenericParamKindAST, Generics};\n+use syntax::ast::{FnDecl, ForeignItem, ForeignItemKind, GenericParamKind, Generics};\n use syntax::ast::{Item, ItemKind, ImplItem, ImplItemKind};\n use syntax::ast::{Label, Local, Mutability, Pat, PatKind, Path};\n use syntax::ast::{QSelf, TraitItemKind, TraitRef, Ty, TyKind};\n@@ -800,8 +800,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n         let mut found_default = false;\n         default_ban_rib.bindings.extend(generics.params.iter()\n             .filter_map(|param| match param.kind {\n-                GenericParamKindAST::Lifetime { .. } => None,\n-                GenericParamKindAST::Type { ref default, .. } => {\n+                GenericParamKind::Lifetime { .. } => None,\n+                GenericParamKind::Type { ref default, .. } => {\n                     if found_default || default.is_some() {\n                         found_default = true;\n                         return Some((Ident::with_empty_ctxt(param.ident.name), Def::Err));\n@@ -812,8 +812,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n \n         for param in &generics.params {\n             match param.kind {\n-                GenericParamKindAST::Lifetime { .. } => self.visit_generic_param(param),\n-                GenericParamKindAST::Type { ref bounds, ref default, .. } => {\n+                GenericParamKind::Lifetime { .. } => self.visit_generic_param(param),\n+                GenericParamKind::Type { ref bounds, ref default, .. } => {\n                     for bound in bounds {\n                         self.visit_ty_param_bound(bound);\n                     }\n@@ -2208,7 +2208,7 @@ impl<'a> Resolver<'a> {\n                 let mut function_type_rib = Rib::new(rib_kind);\n                 let mut seen_bindings = FxHashMap();\n                 generics.params.iter().for_each(|param| match param.kind {\n-                        GenericParamKindAST::Type { .. } => {\n+                        GenericParamKind::Type { .. } => {\n                             let ident = param.ident.modern();\n                             debug!(\"with_type_parameter_rib: {}\", param.id);\n "}, {"sha": "6cfec57f80e65ba23b64be183870f1883ce49665", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "patch": "@@ -371,8 +371,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n     ) {\n         for param in &generics.params {\n             match param.kind {\n-                ast::GenericParamKindAST::Lifetime { .. } => {}\n-                ast::GenericParamKindAST::Type { .. } => {\n+                ast::GenericParamKind::Lifetime { .. } => {}\n+                ast::GenericParamKind::Type { .. } => {\n                     let param_ss = param.ident.span;\n                     let name = escape(self.span.snippet(param_ss));\n                     // Append $id to name to make sure each one is unique.\n@@ -827,7 +827,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                 match **generic_args {\n                     ast::GenericArgs::AngleBracketed(ref data) => {\n                         data.args.iter().for_each(|arg| match arg {\n-                            ast::GenericArgAST::Type(ty) => self.visit_ty(ty),\n+                            ast::GenericArg::Type(ty) => self.visit_ty(ty),\n                             _ => {}\n                         });\n                     }\n@@ -914,7 +914,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         if let Some(ref generic_args) = seg.args {\n             if let ast::GenericArgs::AngleBracketed(ref data) = **generic_args {\n                 data.args.iter().for_each(|arg| match arg {\n-                    ast::GenericArgAST::Type(ty) => self.visit_ty(ty),\n+                    ast::GenericArg::Type(ty) => self.visit_ty(ty),\n                     _ => {}\n                 });\n             }\n@@ -1486,8 +1486,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n \n     fn visit_generics(&mut self, generics: &'l ast::Generics) {\n         generics.params.iter().for_each(|param| match param.kind {\n-            ast::GenericParamKindAST::Lifetime { .. } => {}\n-            ast::GenericParamKindAST::Type { ref bounds, ref default, .. } => {\n+            ast::GenericParamKind::Lifetime { .. } => {}\n+            ast::GenericParamKind::Type { ref bounds, ref default, .. } => {\n                 for bound in bounds {\n                     if let ast::TraitTyParamBound(ref trait_ref, _) = *bound {\n                         self.process_path(trait_ref.trait_ref.ref_id, &trait_ref.trait_ref.path)"}, {"sha": "528f6ba96fa82faad773a294237b8bea71de7792", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "patch": "@@ -935,8 +935,8 @@ fn make_signature(decl: &ast::FnDecl, generics: &ast::Generics) -> String {\n             .params\n             .iter()\n             .map(|param| match param.kind {\n-                ast::GenericParamKindAST::Lifetime { .. } => param.ident.name.to_string(),\n-                ast::GenericParamKindAST::Type { .. } => param.ident.to_string(),\n+                ast::GenericParamKind::Lifetime { .. } => param.ident.name.to_string(),\n+                ast::GenericParamKind::Type { .. } => param.ident.to_string(),\n             })\n             .collect::<Vec<_>>()\n             .join(\", \"));"}, {"sha": "6a63995c0fd5fa0ca2dc6cf712594fdf54b0ab41", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "patch": "@@ -224,7 +224,7 @@ impl Sig for ast::Ty {\n                     text.push_str(&f.generic_params\n                         .iter()\n                         .filter_map(|param| match param.kind {\n-                            ast::GenericParamKindAST::Lifetime { .. } => {\n+                            ast::GenericParamKind::Lifetime { .. } => {\n                                 Some(param.ident.to_string())\n                             }\n                             _ => None,\n@@ -624,7 +624,7 @@ impl Sig for ast::Generics {\n                 end: offset + text.len() + param_text.len(),\n             });\n             match param.kind {\n-                ast::GenericParamKindAST::Lifetime { ref bounds, .. } => {\n+                ast::GenericParamKind::Lifetime { ref bounds, .. } => {\n                     if !bounds.is_empty() {\n                         param_text.push_str(\": \");\n                         let bounds = bounds.iter()\n@@ -635,7 +635,7 @@ impl Sig for ast::Generics {\n                         // FIXME add lifetime bounds refs.\n                     }\n                 }\n-                ast::GenericParamKindAST::Type { ref bounds, .. } => {\n+                ast::GenericParamKind::Type { ref bounds, .. } => {\n                     if !bounds.is_empty() {\n                         param_text.push_str(\": \");\n                         param_text.push_str(&pprust::bounds_to_string(bounds));"}, {"sha": "f589057218c80996a314714925333e0b15988c7d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "patch": "@@ -160,7 +160,7 @@ impl GenericArgs {\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum GenericArgAST {\n+pub enum GenericArg {\n     Lifetime(Lifetime),\n     Type(P<Ty>),\n }\n@@ -171,7 +171,7 @@ pub struct AngleBracketedArgs {\n     /// Overall span\n     pub span: Span,\n     /// The arguments for this path segment.\n-    pub args: Vec<GenericArgAST>,\n+    pub args: Vec<GenericArg>,\n     /// Bindings (equality constraints) on associated types, if present.\n     ///\n     /// E.g., `Foo<A=Bar>`.\n@@ -299,7 +299,7 @@ pub enum TraitBoundModifier {\n pub type TyParamBounds = Vec<TyParamBound>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum GenericParamKindAST {\n+pub enum GenericParamKind {\n     /// A lifetime definition, e.g. `'a: 'b+'c+'d`.\n     Lifetime {\n         bounds: Vec<Lifetime>,\n@@ -312,19 +312,19 @@ pub enum GenericParamKindAST {\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub struct GenericParamAST {\n+pub struct GenericParam {\n     pub ident: Ident,\n     pub id: NodeId,\n     pub attrs: ThinVec<Attribute>,\n \n-    pub kind: GenericParamKindAST,\n+    pub kind: GenericParamKind,\n }\n \n /// Represents lifetime, type and const parameters attached to a declaration of\n /// a function, enum, trait, etc.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Generics {\n-    pub params: Vec<GenericParamAST>,\n+    pub params: Vec<GenericParam>,\n     pub where_clause: WhereClause,\n     pub span: Span,\n }\n@@ -380,7 +380,7 @@ impl WherePredicate {\n pub struct WhereBoundPredicate {\n     pub span: Span,\n     /// Any generics from a `for` binding\n-    pub bound_generic_params: Vec<GenericParamAST>,\n+    pub bound_generic_params: Vec<GenericParam>,\n     /// The type being bounded\n     pub bounded_ty: P<Ty>,\n     /// Trait and lifetime bounds (`Clone+Send+'static`)\n@@ -1512,7 +1512,7 @@ impl fmt::Debug for Ty {\n pub struct BareFnTy {\n     pub unsafety: Unsafety,\n     pub abi: Abi,\n-    pub generic_params: Vec<GenericParamAST>,\n+    pub generic_params: Vec<GenericParam>,\n     pub decl: P<FnDecl>\n }\n \n@@ -1891,7 +1891,7 @@ pub struct TraitRef {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct PolyTraitRef {\n     /// The `'a` in `<'a> Foo<&'a T>`\n-    pub bound_generic_params: Vec<GenericParamAST>,\n+    pub bound_generic_params: Vec<GenericParam>,\n \n     /// The `Foo<&'a T>` in `<'a> Foo<&'a T>`\n     pub trait_ref: TraitRef,\n@@ -1900,7 +1900,7 @@ pub struct PolyTraitRef {\n }\n \n impl PolyTraitRef {\n-    pub fn new(generic_params: Vec<GenericParamAST>, path: Path, span: Span) -> Self {\n+    pub fn new(generic_params: Vec<GenericParam>, path: Path, span: Span) -> Self {\n         PolyTraitRef {\n             bound_generic_params: generic_params,\n             trait_ref: TraitRef { path: path, ref_id: DUMMY_NODE_ID },"}, {"sha": "695ad9c233f2e8f0837f886f83a1ba614e95e1b2", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "patch": "@@ -31,7 +31,7 @@ pub trait AstBuilder {\n     fn path_all(&self, sp: Span,\n                 global: bool,\n                 idents: Vec<ast::Ident>,\n-                args: Vec<ast::GenericArgAST>,\n+                args: Vec<ast::GenericArg>,\n                 bindings: Vec<ast::TypeBinding>)\n         -> ast::Path;\n \n@@ -42,7 +42,7 @@ pub trait AstBuilder {\n     fn qpath_all(&self, self_type: P<ast::Ty>,\n                 trait_path: ast::Path,\n                 ident: ast::Ident,\n-                args: Vec<ast::GenericArgAST>,\n+                args: Vec<ast::GenericArg>,\n                 bindings: Vec<ast::TypeBinding>)\n                 -> (ast::QSelf, ast::Path);\n \n@@ -69,7 +69,7 @@ pub trait AstBuilder {\n                id: ast::Ident,\n                attrs: Vec<ast::Attribute>,\n                bounds: ast::TyParamBounds,\n-               default: Option<P<ast::Ty>>) -> ast::GenericParamAST;\n+               default: Option<P<ast::Ty>>) -> ast::GenericParam;\n \n     fn trait_ref(&self, path: ast::Path) -> ast::TraitRef;\n     fn poly_trait_ref(&self, span: Span, path: ast::Path) -> ast::PolyTraitRef;\n@@ -80,7 +80,7 @@ pub trait AstBuilder {\n                     ident: ast::Ident,\n                     attrs: Vec<ast::Attribute>,\n                     bounds: Vec<ast::Lifetime>)\n-                    -> ast::GenericParamAST;\n+                    -> ast::GenericParam;\n \n     // statements\n     fn stmt_expr(&self, expr: P<ast::Expr>) -> ast::Stmt;\n@@ -314,7 +314,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                 span: Span,\n                 global: bool,\n                 mut idents: Vec<ast::Ident> ,\n-                args: Vec<ast::GenericArgAST>,\n+                args: Vec<ast::GenericArg>,\n                 bindings: Vec<ast::TypeBinding> )\n                 -> ast::Path {\n         let last_ident = idents.pop().unwrap();\n@@ -356,7 +356,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                  self_type: P<ast::Ty>,\n                  trait_path: ast::Path,\n                  ident: ast::Ident,\n-                 args: Vec<ast::GenericArgAST>,\n+                 args: Vec<ast::GenericArg>,\n                  bindings: Vec<ast::TypeBinding>)\n                  -> (ast::QSelf, ast::Path) {\n         let mut path = trait_path;\n@@ -424,7 +424,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             self.path_all(DUMMY_SP,\n                           true,\n                           self.std_path(&[\"option\", \"Option\"]),\n-                          vec![ast::GenericArgAST::Type(ty)],\n+                          vec![ast::GenericArg::Type(ty)],\n                           Vec::new()))\n     }\n \n@@ -437,12 +437,12 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                ident: ast::Ident,\n                attrs: Vec<ast::Attribute>,\n                bounds: ast::TyParamBounds,\n-               default: Option<P<ast::Ty>>) -> ast::GenericParamAST {\n-        ast::GenericParamAST {\n+               default: Option<P<ast::Ty>>) -> ast::GenericParam {\n+        ast::GenericParam {\n             ident: ident.with_span_pos(span),\n             id: ast::DUMMY_NODE_ID,\n             attrs: attrs.into(),\n-            kind: ast::GenericParamKindAST::Type {\n+            kind: ast::GenericParamKind::Type {\n                 bounds,\n                 default,\n             }\n@@ -477,13 +477,13 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                     ident: ast::Ident,\n                     attrs: Vec<ast::Attribute>,\n                     bounds: Vec<ast::Lifetime>)\n-                    -> ast::GenericParamAST {\n+                    -> ast::GenericParam {\n         let lifetime = self.lifetime(span, ident);\n-        ast::GenericParamAST {\n+        ast::GenericParam {\n             ident: lifetime.ident,\n             id: lifetime.id,\n             attrs: attrs.into(),\n-            kind: ast::GenericParamKindAST::Lifetime {\n+            kind: ast::GenericParamKind::Lifetime {\n                 lifetime,\n                 bounds,\n             }"}, {"sha": "ea147186b187e12b18aba060f571431f6dbd4e59", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "patch": "@@ -132,10 +132,10 @@ pub trait Folder : Sized {\n         noop_fold_exprs(es, self)\n     }\n \n-    fn fold_generic_arg(&mut self, arg: GenericArgAST) -> GenericArgAST {\n+    fn fold_generic_arg(&mut self, arg: GenericArg) -> GenericArg {\n         match arg {\n-            GenericArgAST::Lifetime(lt) => GenericArgAST::Lifetime(self.fold_lifetime(lt)),\n-            GenericArgAST::Type(ty) => GenericArgAST::Type(self.fold_ty(ty)),\n+            GenericArg::Lifetime(lt) => GenericArg::Lifetime(self.fold_lifetime(lt)),\n+            GenericArg::Type(ty) => GenericArg::Type(self.fold_ty(ty)),\n         }\n     }\n \n@@ -244,11 +244,11 @@ pub trait Folder : Sized {\n         noop_fold_ty_param(tp, self)\n     }\n \n-    fn fold_generic_param(&mut self, param: GenericParamAST) -> GenericParamAST {\n+    fn fold_generic_param(&mut self, param: GenericParam) -> GenericParam {\n         noop_fold_generic_param(param, self)\n     }\n \n-    fn fold_generic_params(&mut self, params: Vec<GenericParamAST>) -> Vec<GenericParamAST> {\n+    fn fold_generic_params(&mut self, params: Vec<GenericParam>) -> Vec<GenericParam> {\n         noop_fold_generic_params(params, self)\n     }\n \n@@ -687,11 +687,11 @@ pub fn noop_fold_ty_param_bound<T>(tpb: TyParamBound, fld: &mut T)\n     }\n }\n \n-pub fn noop_fold_generic_param<T: Folder>(param: GenericParamAST, fld: &mut T) -> GenericParamAST {\n-    match param {\n-        GenericParamAST::Lifetime { bounds, lifetime } => {\n+pub fn noop_fold_generic_param<T: Folder>(param: GenericParam, fld: &mut T) -> GenericParam {\n+    match param.kind {\n+        GenericParamKind::Lifetime { bounds, lifetime } => {\n             let attrs: Vec<_> = param.attrs.into();\n-            GenericParamAST::Lifetime(LifetimeDef {\n+            GenericParamKind::Lifetime(LifetimeDef {\n                 attrs: attrs.into_iter()\n                     .flat_map(|x| fld.fold_attribute(x).into_iter())\n                     .collect::<Vec<_>>()\n@@ -703,14 +703,14 @@ pub fn noop_fold_generic_param<T: Folder>(param: GenericParamAST, fld: &mut T) -\n                 bounds: bounds.move_map(|l| noop_fold_lifetime(l, fld)),\n             })\n         }\n-        GenericParamAST::Type { .. } => GenericParamAST::Type(fld.fold_ty_param(param)),\n+        GenericParamKind::Type { .. } => GenericParamKind::Type(fld.fold_ty_param(param)),\n     }\n }\n \n pub fn noop_fold_generic_params<T: Folder>(\n-    params: Vec<GenericParamAST>,\n+    params: Vec<GenericParam>,\n     fld: &mut T\n-) -> Vec<GenericParamAST> {\n+) -> Vec<GenericParam> {\n     params.move_map(|p| fld.fold_generic_param(p))\n }\n "}, {"sha": "203b529222d15ad2235989a0c37e6deef552c3d6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "patch": "@@ -21,8 +21,8 @@ use ast::EnumDef;\n use ast::{Expr, ExprKind, RangeLimits};\n use ast::{Field, FnDecl};\n use ast::{ForeignItem, ForeignItemKind, FunctionRetTy};\n-use ast::{GenericParamAST, GenericParamKindAST};\n-use ast::GenericArgAST;\n+use ast::{GenericParam, GenericParamKind};\n+use ast::GenericArg;\n use ast::{Ident, ImplItem, IsAuto, Item, ItemKind};\n use ast::{Label, Lifetime, Lit, LitKind};\n use ast::Local;\n@@ -1246,7 +1246,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// parse a TyKind::BareFn type:\n-    fn parse_ty_bare_fn(&mut self, generic_params: Vec<GenericParamAST>) -> PResult<'a, TyKind> {\n+    fn parse_ty_bare_fn(&mut self, generic_params: Vec<GenericParam>) -> PResult<'a, TyKind> {\n         /*\n \n         [unsafe] [extern \"ABI\"] fn (S) -> T\n@@ -1563,7 +1563,7 @@ impl<'a> Parser<'a> {\n         Ok(P(ty))\n     }\n \n-    fn parse_remaining_bounds(&mut self, generic_params: Vec<GenericParamAST>, path: ast::Path,\n+    fn parse_remaining_bounds(&mut self, generic_params: Vec<GenericParam>, path: ast::Path,\n                               lo: Span, parse_plus: bool) -> PResult<'a, TyKind> {\n         let poly_trait_ref = PolyTraitRef::new(generic_params, path, lo.to(self.prev_span));\n         let mut bounds = vec![TraitTyParamBound(poly_trait_ref, TraitBoundModifier::None)];\n@@ -4805,7 +4805,7 @@ impl<'a> Parser<'a> {\n     /// Matches typaram = IDENT (`?` unbound)? optbounds ( EQ ty )?\n     fn parse_ty_param(&mut self,\n                       preceding_attrs: Vec<Attribute>)\n-                      -> PResult<'a, GenericParamAST> {\n+                      -> PResult<'a, GenericParam> {\n         let ident = self.parse_ident()?;\n \n         // Parse optional colon and param bounds.\n@@ -4821,11 +4821,11 @@ impl<'a> Parser<'a> {\n             None\n         };\n \n-        Ok(GenericParamAST {\n+        Ok(GenericParam {\n             ident,\n             attrs: preceding_attrs.into(),\n             id: ast::DUMMY_NODE_ID,\n-            kind: GenericParamKindAST::Type {\n+            kind: GenericParamKind::Type {\n                 bounds,\n                 default,\n             }\n@@ -4859,7 +4859,7 @@ impl<'a> Parser<'a> {\n \n     /// Parses (possibly empty) list of lifetime and type parameters, possibly including\n     /// trailing comma and erroneous trailing attributes.\n-    crate fn parse_generic_params(&mut self) -> PResult<'a, Vec<ast::GenericParamAST>> {\n+    crate fn parse_generic_params(&mut self) -> PResult<'a, Vec<ast::GenericParam>> {\n         let mut params = Vec::new();\n         let mut seen_ty_param = false;\n         loop {\n@@ -4872,11 +4872,11 @@ impl<'a> Parser<'a> {\n                 } else {\n                     Vec::new()\n                 };\n-                params.push(ast::GenericParamAST {\n+                params.push(ast::GenericParam {\n                     ident: lifetime.ident,\n                     id: lifetime.id,\n                     attrs: attrs.into(),\n-                    kind: ast::GenericParamKindAST::Lifetime {\n+                    kind: ast::GenericParamKind::Lifetime {\n                         lifetime,\n                         bounds,\n                     }\n@@ -4937,15 +4937,15 @@ impl<'a> Parser<'a> {\n     /// Parses (possibly empty) list of lifetime and type arguments and associated type bindings,\n     /// possibly including trailing comma.\n     fn parse_generic_args(&mut self)\n-                          -> PResult<'a, (Vec<GenericArgAST>, Vec<TypeBinding>)> {\n+                          -> PResult<'a, (Vec<GenericArg>, Vec<TypeBinding>)> {\n         let mut args = Vec::new();\n         let mut bindings = Vec::new();\n         let mut seen_type = false;\n         let mut seen_binding = false;\n         loop {\n             if self.check_lifetime() && self.look_ahead(1, |t| !t.is_like_plus()) {\n                 // Parse lifetime argument.\n-                args.push(GenericArgAST::Lifetime(self.expect_lifetime()));\n+                args.push(GenericArg::Lifetime(self.expect_lifetime()));\n                 if seen_type || seen_binding {\n                     self.span_err(self.prev_span,\n                         \"lifetime parameters must be declared prior to type parameters\");\n@@ -4970,7 +4970,7 @@ impl<'a> Parser<'a> {\n                     self.span_err(ty_param.span,\n                         \"type parameters must be declared prior to associated type bindings\");\n                 }\n-                args.push(GenericArgAST::Type(ty_param));\n+                args.push(GenericArg::Type(ty_param));\n                 seen_type = true;\n             } else {\n                 break\n@@ -5692,7 +5692,7 @@ impl<'a> Parser<'a> {\n         Ok((keywords::Invalid.ident(), item_kind, Some(attrs)))\n     }\n \n-    fn parse_late_bound_lifetime_defs(&mut self) -> PResult<'a, Vec<GenericParamAST>> {\n+    fn parse_late_bound_lifetime_defs(&mut self) -> PResult<'a, Vec<GenericParam>> {\n         if self.eat_keyword(keywords::For) {\n             self.expect_lt()?;\n             let params = self.parse_generic_params()?;"}, {"sha": "84a4a51b716009927c42ec63f5c085a5961e8246", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "patch": "@@ -13,7 +13,7 @@ pub use self::AnnNode::*;\n use rustc_target::spec::abi::{self, Abi};\n use ast::{self, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n use ast::{SelfKind, RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n-use ast::{Attribute, MacDelimiter, GenericArgAST};\n+use ast::{Attribute, MacDelimiter, GenericArg};\n use util::parser::{self, AssocOp, Fixity};\n use attr;\n use codemap::{self, CodeMap};\n@@ -344,7 +344,7 @@ pub fn trait_item_to_string(i: &ast::TraitItem) -> String {\n     to_string(|s| s.print_trait_item(i))\n }\n \n-pub fn generic_params_to_string(generic_params: &[ast::GenericParamAST]) -> String {\n+pub fn generic_params_to_string(generic_params: &[ast::GenericParam]) -> String {\n     to_string(|s| s.print_generic_params(generic_params))\n }\n \n@@ -1017,10 +1017,10 @@ impl<'a> State<'a> {\n         Ok(())\n     }\n \n-    pub fn print_generic_arg(&mut self, generic_arg: &GenericArgAST) -> io::Result<()> {\n+    pub fn print_generic_arg(&mut self, generic_arg: &GenericArg) -> io::Result<()> {\n         match generic_arg {\n-            GenericArgAST::Lifetime(lt) => self.print_lifetime(lt),\n-            GenericArgAST::Type(ty) => self.print_type(ty),\n+            GenericArg::Lifetime(lt) => self.print_lifetime(lt),\n+            GenericArg::Type(ty) => self.print_type(ty),\n         }\n     }\n \n@@ -1443,7 +1443,7 @@ impl<'a> State<'a> {\n \n     fn print_formal_generic_params(\n         &mut self,\n-        generic_params: &[ast::GenericParamAST]\n+        generic_params: &[ast::GenericParam]\n     ) -> io::Result<()> {\n         if !generic_params.is_empty() {\n             self.s.word(\"for\")?;\n@@ -2869,7 +2869,7 @@ impl<'a> State<'a> {\n \n     pub fn print_generic_params(\n         &mut self,\n-        generic_params: &[ast::GenericParamAST]\n+        generic_params: &[ast::GenericParam]\n     ) -> io::Result<()> {\n         if generic_params.is_empty() {\n             return Ok(());\n@@ -2879,11 +2879,11 @@ impl<'a> State<'a> {\n \n         self.commasep(Inconsistent, &generic_params, |s, param| {\n             match param.kind {\n-                ast::GenericParamKindAST::Lifetime { ref bounds, ref lifetime } => {\n+                ast::GenericParamKind::Lifetime { ref bounds, ref lifetime } => {\n                     s.print_outer_attributes_inline(&param.attrs)?;\n                     s.print_lifetime_bounds(lifetime, bounds)\n                 },\n-                ast::GenericParamKindAST::Type { ref bounds, ref default } => {\n+                ast::GenericParamKind::Type { ref bounds, ref default } => {\n                     s.print_outer_attributes_inline(&param.attrs)?;\n                     s.print_ident(param.ident)?;\n                     s.print_bounds(\":\", bounds)?;\n@@ -3045,7 +3045,7 @@ impl<'a> State<'a> {\n                        unsafety: ast::Unsafety,\n                        decl: &ast::FnDecl,\n                        name: Option<ast::Ident>,\n-                       generic_params: &Vec<ast::GenericParamAST>)\n+                       generic_params: &Vec<ast::GenericParam>)\n                        -> io::Result<()> {\n         self.ibox(INDENT_UNIT)?;\n         if !generic_params.is_empty() {"}, {"sha": "95ae9f9bcf80247e4d8c3d8ca986a4cbea666feb", "filename": "src/libsyntax/util/node_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax%2Futil%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax%2Futil%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fnode_count.rs?ref=3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "patch": "@@ -71,7 +71,7 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_ty(self, t)\n     }\n-    fn visit_generic_param(&mut self, param: &GenericParamAST) {\n+    fn visit_generic_param(&mut self, param: &GenericParam) {\n         self.count += 1;\n         walk_generic_param(self, param)\n     }"}, {"sha": "3a81796bae4a3f85d6afefe6539b4af877bae736", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "patch": "@@ -73,7 +73,7 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_expr(&mut self, ex: &'ast Expr) { walk_expr(self, ex) }\n     fn visit_expr_post(&mut self, _ex: &'ast Expr) { }\n     fn visit_ty(&mut self, t: &'ast Ty) { walk_ty(self, t) }\n-    fn visit_generic_param(&mut self, param: &'ast GenericParamAST) {\n+    fn visit_generic_param(&mut self, param: &'ast GenericParam) {\n         walk_generic_param(self, param)\n     }\n     fn visit_generics(&mut self, g: &'ast Generics) { walk_generics(self, g) }\n@@ -133,10 +133,10 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_generic_args(&mut self, path_span: Span, generic_args: &'ast GenericArgs) {\n         walk_generic_args(self, path_span, generic_args)\n     }\n-    fn visit_generic_arg(&mut self, generic_arg: &'ast GenericArgAST) {\n+    fn visit_generic_arg(&mut self, generic_arg: &'ast GenericArg) {\n         match generic_arg {\n-            GenericArgAST::Lifetime(lt) => self.visit_lifetime(lt),\n-            GenericArgAST::Type(ty)     => self.visit_ty(ty),\n+            GenericArg::Lifetime(lt) => self.visit_lifetime(lt),\n+            GenericArg::Type(ty)     => self.visit_ty(ty),\n         }\n     }\n     fn visit_assoc_type_binding(&mut self, type_binding: &'ast TypeBinding) {\n@@ -490,14 +490,14 @@ pub fn walk_ty_param_bound<'a, V: Visitor<'a>>(visitor: &mut V, bound: &'a TyPar\n     }\n }\n \n-pub fn walk_generic_param<'a, V: Visitor<'a>>(visitor: &mut V, param: &'a GenericParamAST) {\n+pub fn walk_generic_param<'a, V: Visitor<'a>>(visitor: &mut V, param: &'a GenericParam) {\n     match param.kind {\n-        GenericParamKindAST::Lifetime { ref bounds, ref lifetime, .. } => {\n+        GenericParamKind::Lifetime { ref bounds, ref lifetime, .. } => {\n             visitor.visit_ident(param.ident);\n             walk_list!(visitor, visit_lifetime, bounds);\n             walk_list!(visitor, visit_attribute, param.attrs.iter());\n         }\n-        GenericParamKindAST::Type { ref bounds, ref default, .. } => {\n+        GenericParamKind::Type { ref bounds, ref default, .. } => {\n             visitor.visit_ident(t.ident);\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n             walk_list!(visitor, visit_ty, default);"}, {"sha": "9aeac5b1ddb2ae9937cb952897cde1b90e4cda49", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "patch": "@@ -13,7 +13,7 @@ use deriving::generic::*;\n use deriving::generic::ty::*;\n \n use syntax::ast::{self, Expr, Generics, ItemKind, MetaItem, VariantData};\n-use syntax::ast::GenericArgAST;\n+use syntax::ast::GenericArg;\n use syntax::attr;\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n@@ -50,7 +50,7 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n                 ItemKind::Enum(_, Generics { ref params, .. }) => {\n                     if attr::contains_name(&annitem.attrs, \"rustc_copy_clone_marker\") &&\n                         !params.iter().any(|param| match param.kind {\n-                            ast::GenericParamKindAST::Type { .. } => true,\n+                            ast::GenericParamKind::Type { .. } => true,\n                             _ => false,\n                         })\n                     {\n@@ -127,7 +127,7 @@ fn cs_clone_shallow(name: &str,\n         let span = span.with_ctxt(cx.backtrace());\n         let assert_path = cx.path_all(span, true,\n                                         cx.std_path(&[\"clone\", helper_name]),\n-                                        vec![GenericArgAST::Type(ty)], vec![]);\n+                                        vec![GenericArg::Type(ty)], vec![]);\n         stmts.push(cx.stmt_let_type_only(span, cx.ty_path(assert_path)));\n     }\n     fn process_variant(cx: &mut ExtCtxt, stmts: &mut Vec<ast::Stmt>, variant: &VariantData) {"}, {"sha": "00ab39032acbd2489dbdc6273ca1812d1a8f9259", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "patch": "@@ -12,7 +12,7 @@ use deriving::path_std;\n use deriving::generic::*;\n use deriving::generic::ty::*;\n \n-use syntax::ast::{self, Expr, MetaItem, GenericArgAST};\n+use syntax::ast::{self, Expr, MetaItem, GenericArg};\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::ptr::P;\n@@ -62,7 +62,7 @@ fn cs_total_eq_assert(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n         let span = span.with_ctxt(cx.backtrace());\n         let assert_path = cx.path_all(span, true,\n                                         cx.std_path(&[\"cmp\", helper_name]),\n-                                        vec![GenericArgAST::Type(ty)], vec![]);\n+                                        vec![GenericArg::Type(ty)], vec![]);\n         stmts.push(cx.stmt_let_type_only(span, cx.ty_path(assert_path)));\n     }\n     fn process_variant(cx: &mut ExtCtxt, stmts: &mut Vec<ast::Stmt>, variant: &ast::VariantData) {"}, {"sha": "6c9aea51c7ca60d2e5297f94199adc1f7fbd8797", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "patch": "@@ -193,7 +193,7 @@ use std::vec;\n \n use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n-use syntax::ast::{VariantData, GenericParamKindAST, GenericArgAST};\n+use syntax::ast::{VariantData, GenericParamKind, GenericArg};\n use syntax::attr;\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n@@ -423,7 +423,7 @@ impl<'a> TraitDef<'a> {\n                     ast::ItemKind::Enum(_, ref generics) |\n                     ast::ItemKind::Union(_, ref generics) => {\n                         !generics.params.iter().any(|param| match param.kind {\n-                            ast::GenericParamKindAST::Type { .. } => true,\n+                            ast::GenericParamKind::Type { .. } => true,\n                             _ => false,\n                         })\n                     }\n@@ -550,8 +550,8 @@ impl<'a> TraitDef<'a> {\n \n         // Create the generic parameters\n         params.extend(generics.params.iter().map(|param| match param.kind {\n-            GenericParamKindAST::Lifetime { .. } => param.clone(),\n-            GenericParamKindAST::Type { bounds: ref ty_bounds, .. } => {\n+            GenericParamKind::Lifetime { .. } => param.clone(),\n+            GenericParamKind::Type { bounds: ref ty_bounds, .. } => {\n                 // I don't think this can be moved out of the loop, since\n                 // a TyParamBound requires an ast id\n                 let mut bounds: Vec<_> =\n@@ -608,7 +608,7 @@ impl<'a> TraitDef<'a> {\n \n             let mut ty_params = params.iter()\n                 .filter_map(|param| match param.kind {\n-                    ast::GenericParamKindAST::Type { .. } => Some(param),\n+                    ast::GenericParamKind::Type { .. } => Some(param),\n                     _ => None,\n                 })\n                 .peekable();\n@@ -669,23 +669,23 @@ impl<'a> TraitDef<'a> {\n         let self_ty_params: Vec<P<ast::Ty>> = generics.params\n             .iter()\n             .filter_map(|param| match param.kind {\n-                GenericParamKindAST::Type { .. } => Some(cx.ty_ident(self.span, param.ident)),\n+                GenericParamKind::Type { .. } => Some(cx.ty_ident(self.span, param.ident)),\n                 _ => None,\n             })\n             .collect();\n \n         let self_lifetimes: Vec<ast::Lifetime> = generics.params\n             .iter()\n             .filter_map(|param| match param.kind {\n-                GenericParamKindAST::Lifetime { ref lifetime, .. } => Some(*lifetime),\n+                GenericParamKind::Lifetime { ref lifetime, .. } => Some(*lifetime),\n                 _ => None,\n             })\n             .collect();\n \n         let self_params = self_lifetimes.into_iter()\n-                                        .map(|lt| GenericArgAST::Lifetime(lt))\n+                                        .map(|lt| GenericArg::Lifetime(lt))\n                                         .chain(self_ty_params.into_iter().map(|ty|\n-                                            GenericArgAST::Type(ty)))\n+                                            GenericArg::Type(ty)))\n                                         .collect();\n \n         // Create the type of `self`."}, {"sha": "78f6a9b9137119eddf434bc729222e59b067da06", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "patch": "@@ -15,7 +15,7 @@ pub use self::PtrTy::*;\n pub use self::Ty::*;\n \n use syntax::ast;\n-use syntax::ast::{Expr, GenericParamKindAST, Generics, Ident, SelfKind, GenericArgAST};\n+use syntax::ast::{Expr, GenericParamKind, Generics, Ident, SelfKind, GenericArg};\n use syntax::ext::base::ExtCtxt;\n use syntax::ext::build::AstBuilder;\n use syntax::codemap::{respan, DUMMY_SP};\n@@ -89,8 +89,8 @@ impl<'a> Path<'a> {\n         let tys: Vec<P<ast::Ty>> =\n             self.params.iter().map(|t| t.to_ty(cx, span, self_ty, self_generics)).collect();\n         let params = lt.into_iter()\n-                       .map(|lt| GenericArgAST::Lifetime(lt))\n-                       .chain(tys.into_iter().map(|ty| GenericArgAST::Type(ty)))\n+                       .map(|lt| GenericArg::Lifetime(lt))\n+                       .chain(tys.into_iter().map(|ty| GenericArg::Type(ty)))\n                        .collect();\n \n         match self.kind {\n@@ -192,7 +192,7 @@ impl<'a> Ty<'a> {\n                 let ty_params: Vec<P<ast::Ty>> = self_generics.params\n                     .iter()\n                     .filter_map(|param| match param.kind {\n-                        GenericParamKindAST::Type { .. } => {\n+                        GenericParamKind::Type { .. } => {\n                             Some(cx.ty_ident(span, param.ident))\n                         }\n                         _ => None,\n@@ -202,15 +202,15 @@ impl<'a> Ty<'a> {\n                 let lifetimes: Vec<ast::Lifetime> = self_generics.params\n                     .iter()\n                     .filter_map(|param| match param.kind {\n-                        GenericParamKindAST::Lifetime { ref lifetime, .. } => Some(*lifetime),\n+                        GenericParamKind::Lifetime { ref lifetime, .. } => Some(*lifetime),\n                         _ => None,\n                     })\n                     .collect();\n \n                 let params = lifetimes.into_iter()\n-                                      .map(|lt| GenericArgAST::Lifetime(lt))\n+                                      .map(|lt| GenericArg::Lifetime(lt))\n                                       .chain(ty_params.into_iter().map(|ty|\n-                                            GenericArgAST::Type(ty)))\n+                                            GenericArg::Type(ty)))\n                                       .collect();\n \n                 cx.path_all(span,\n@@ -234,7 +234,7 @@ fn mk_ty_param(cx: &ExtCtxt,\n                bounds: &[Path],\n                self_ident: Ident,\n                self_generics: &Generics)\n-               -> ast::GenericParamAST {\n+               -> ast::GenericParam {\n     let bounds = bounds.iter()\n         .map(|b| {\n             let path = b.to_path(cx, span, self_ident, self_generics);\n@@ -244,7 +244,7 @@ fn mk_ty_param(cx: &ExtCtxt,\n     cx.typaram(span, cx.ident_of(name), attrs.to_owned(), bounds, None)\n }\n \n-fn mk_generics(params: Vec<ast::GenericParamAST>, span: Span) -> Generics {\n+fn mk_generics(params: Vec<ast::GenericParam>, span: Span) -> Generics {\n     Generics {\n         params,\n         where_clause: ast::WhereClause {"}, {"sha": "6ff385b18e8bf41187de2b5511db7c3d973b6c90", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "patch": "@@ -136,7 +136,7 @@ fn hygienic_type_parameter(item: &Annotatable, base: &str) -> String {\n             ast::ItemKind::Enum(_, ast::Generics { ref params, .. }) => {\n                 for param in params {\n                     match param.kind {\n-                        ast::GenericParamKindAST::Type { .. } => {\n+                        ast::GenericParamKind::Type { .. } => {\n                             typaram.push_str(&param.ident.as_str());\n                         }\n                         _ => {}"}, {"sha": "5c3080260ccd5de184e81af303ba08c7ee31ad1c", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bcb006fd96763b24c34a8cf2abdf081d2e912b1/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "patch": "@@ -13,7 +13,7 @@\n // interface.\n //\n \n-use syntax::ast::{self, Ident, GenericArgAST};\n+use syntax::ast::{self, Ident, GenericArg};\n use syntax::ext::base::*;\n use syntax::ext::base;\n use syntax::ext::build::AstBuilder;\n@@ -39,7 +39,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt,\n             cx.expr_path(cx.path_all(sp,\n                                      true,\n                                      cx.std_path(&[\"option\", \"Option\", \"None\"]),\n-                                     vec![GenericArgAST::Type(cx.ty_rptr(sp,\n+                                     vec![GenericArg::Type(cx.ty_rptr(sp,\n                                                      cx.ty_ident(sp, Ident::from_str(\"str\")),\n                                                      Some(lt),\n                                                      ast::Mutability::Immutable))],"}]}