{"sha": "75fd1bf1e60dd140f2ba46a4252195ea2a9b9c89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZmQxYmYxZTYwZGQxNDBmMmJhNDZhNDI1MjE5NWVhMmE5YjljODk=", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-08-12T19:33:19Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-08-23T11:58:18Z"}, "message": "Account for tabs when highlighting multiline code suggestions", "tree": {"sha": "32f6be36a9355624b61881031919242dbc29bbb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32f6be36a9355624b61881031919242dbc29bbb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75fd1bf1e60dd140f2ba46a4252195ea2a9b9c89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75fd1bf1e60dd140f2ba46a4252195ea2a9b9c89", "html_url": "https://github.com/rust-lang/rust/commit/75fd1bf1e60dd140f2ba46a4252195ea2a9b9c89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75fd1bf1e60dd140f2ba46a4252195ea2a9b9c89/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33fdb797f59421c7bbecaa4588ed5d7a31a9494a", "url": "https://api.github.com/repos/rust-lang/rust/commits/33fdb797f59421c7bbecaa4588ed5d7a31a9494a", "html_url": "https://github.com/rust-lang/rust/commit/33fdb797f59421c7bbecaa4588ed5d7a31a9494a"}], "stats": {"total": 70, "additions": 45, "deletions": 25}, "files": [{"sha": "645b81b9540122fc7cf0cb70b34e14dab1829272", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/75fd1bf1e60dd140f2ba46a4252195ea2a9b9c89/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fd1bf1e60dd140f2ba46a4252195ea2a9b9c89/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=75fd1bf1e60dd140f2ba46a4252195ea2a9b9c89", "patch": "@@ -1623,7 +1623,7 @@ impl EmitterWriter {\n             let line_start = sm.lookup_char_pos(parts[0].span.lo()).line;\n             draw_col_separator_no_space(&mut buffer, 1, max_line_num_len + 1);\n             let mut lines = complete.lines();\n-            for (line_pos, (line, parts)) in\n+            for (line_pos, (line, highlight_parts)) in\n                 lines.by_ref().zip(highlights).take(MAX_SUGGESTION_HIGHLIGHT_LINES).enumerate()\n             {\n                 // Print the span column to avoid confusion\n@@ -1658,7 +1658,7 @@ impl EmitterWriter {\n                     );\n                     buffer.puts(row_num, max_line_num_len + 1, \"+ \", Style::Addition);\n                 } else if is_multiline {\n-                    match &parts[..] {\n+                    match &highlight_parts[..] {\n                         [SubstitutionHighlight { start: 0, end }] if *end == line.len() => {\n                             buffer.puts(row_num, max_line_num_len + 1, \"+ \", Style::Addition);\n                         }\n@@ -1676,16 +1676,33 @@ impl EmitterWriter {\n                 // print the suggestion\n                 buffer.append(row_num, &replace_tabs(line), Style::NoStyle);\n \n-                if is_multiline {\n-                    for SubstitutionHighlight { start, end } in parts {\n-                        buffer.set_style_range(\n-                            row_num,\n-                            max_line_num_len + 3 + start,\n-                            max_line_num_len + 3 + end,\n-                            Style::Addition,\n-                            true,\n-                        );\n-                    }\n+                // Colorize addition/replacements with green.\n+                for &SubstitutionHighlight { start, end } in highlight_parts {\n+                    // Account for tabs when highlighting (#87972).\n+                    let start: usize = line\n+                        .chars()\n+                        .take(start)\n+                        .map(|ch| match ch {\n+                            '\\t' => 4,\n+                            _ => 1,\n+                        })\n+                        .sum();\n+\n+                    let end: usize = line\n+                        .chars()\n+                        .take(end)\n+                        .map(|ch| match ch {\n+                            '\\t' => 4,\n+                            _ => 1,\n+                        })\n+                        .sum();\n+                    buffer.set_style_range(\n+                        row_num,\n+                        max_line_num_len + 3 + start,\n+                        max_line_num_len + 3 + end,\n+                        Style::Addition,\n+                        true,\n+                    );\n                 }\n                 row_num += 1;\n             }\n@@ -1723,13 +1740,6 @@ impl EmitterWriter {\n                     assert!(underline_start >= 0 && underline_end >= 0);\n                     let padding: usize = max_line_num_len + 3;\n                     for p in underline_start..underline_end {\n-                        // Colorize addition/replacements with green.\n-                        buffer.set_style(\n-                            row_num - 1,\n-                            (padding as isize + p) as usize,\n-                            Style::Addition,\n-                            true,\n-                        );\n                         if !show_diff {\n                             // If this is a replacement, underline with `^`, if this is an addition\n                             // underline with `+`."}, {"sha": "cae4a6b472367949db636997d6e09e4b69155fb8", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/75fd1bf1e60dd140f2ba46a4252195ea2a9b9c89/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fd1bf1e60dd140f2ba46a4252195ea2a9b9c89/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=75fd1bf1e60dd140f2ba46a4252195ea2a9b9c89", "patch": "@@ -283,20 +283,25 @@ impl CodeSuggestion {\n                 let mut buf = String::new();\n \n                 let mut line_highlight = vec![];\n+                // We need to keep track of the difference between the existing code and the added\n+                // or deleted code in order to point at the correct column *after* substitution.\n+                let mut acc = 0;\n                 for part in &substitution.parts {\n                     let cur_lo = sm.lookup_char_pos(part.span.lo());\n                     if prev_hi.line == cur_lo.line {\n                         let mut count =\n                             push_trailing(&mut buf, prev_line.as_ref(), &prev_hi, Some(&cur_lo));\n                         while count > 0 {\n                             highlights.push(std::mem::take(&mut line_highlight));\n+                            acc = 0;\n                             count -= 1;\n                         }\n                     } else {\n                         highlights.push(std::mem::take(&mut line_highlight));\n                         let mut count = push_trailing(&mut buf, prev_line.as_ref(), &prev_hi, None);\n                         while count > 0 {\n                             highlights.push(std::mem::take(&mut line_highlight));\n+                            acc = 0;\n                             count -= 1;\n                         }\n                         // push lines between the previous and current span (if any)\n@@ -305,6 +310,7 @@ impl CodeSuggestion {\n                                 buf.push_str(line.as_ref());\n                                 buf.push('\\n');\n                                 highlights.push(std::mem::take(&mut line_highlight));\n+                                acc = 0;\n                             }\n                         }\n                         if let Some(cur_line) = sf.get_line(cur_lo.line - 1) {\n@@ -316,18 +322,22 @@ impl CodeSuggestion {\n                         }\n                     }\n                     // Add a whole line highlight per line in the snippet.\n+                    let len = part.snippet.split('\\n').next().unwrap_or(&part.snippet).len();\n                     line_highlight.push(SubstitutionHighlight {\n-                        start: cur_lo.col.0,\n-                        end: cur_lo.col.0\n-                            + part.snippet.split('\\n').next().unwrap_or(&part.snippet).len(),\n+                        start: (cur_lo.col.0 as isize + acc) as usize,\n+                        end: (cur_lo.col.0 as isize + acc + len as isize) as usize,\n                     });\n+                    buf.push_str(&part.snippet);\n+                    prev_hi = sm.lookup_char_pos(part.span.hi());\n+                    if prev_hi.line == cur_lo.line {\n+                        acc += len as isize - (prev_hi.col.0 - cur_lo.col.0) as isize;\n+                    }\n+                    prev_line = sf.get_line(prev_hi.line - 1);\n                     for line in part.snippet.split('\\n').skip(1) {\n+                        acc = 0;\n                         highlights.push(std::mem::take(&mut line_highlight));\n                         line_highlight.push(SubstitutionHighlight { start: 0, end: line.len() });\n                     }\n-                    buf.push_str(&part.snippet);\n-                    prev_hi = sm.lookup_char_pos(part.span.hi());\n-                    prev_line = sf.get_line(prev_hi.line - 1);\n                 }\n                 highlights.push(std::mem::take(&mut line_highlight));\n                 let only_capitalization = is_case_difference(sm, &buf, bounding_span);"}]}