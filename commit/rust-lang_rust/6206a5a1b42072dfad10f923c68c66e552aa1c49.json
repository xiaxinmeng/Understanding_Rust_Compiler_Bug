{"sha": "6206a5a1b42072dfad10f923c68c66e552aa1c49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMDZhNWExYjQyMDcyZGZhZDEwZjkyM2M2OGM2NmU1NTJhYTFjNDk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-18T17:33:25Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-26T22:26:08Z"}, "message": "Use heuristics to suggest assignment\n\nWhen detecting a possible `=` -> `:` typo in a `let` binding, suggest\nassigning instead of setting the type.", "tree": {"sha": "4ca88b2e4ed349a33ff0f8a21374ae1febdb774c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ca88b2e4ed349a33ff0f8a21374ae1febdb774c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6206a5a1b42072dfad10f923c68c66e552aa1c49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6206a5a1b42072dfad10f923c68c66e552aa1c49", "html_url": "https://github.com/rust-lang/rust/commit/6206a5a1b42072dfad10f923c68c66e552aa1c49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6206a5a1b42072dfad10f923c68c66e552aa1c49/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46e6c533d08a2c6d22083a2756a0b569e001c3c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/46e6c533d08a2c6d22083a2756a0b569e001c3c4", "html_url": "https://github.com/rust-lang/rust/commit/46e6c533d08a2c6d22083a2756a0b569e001c3c4"}], "stats": {"total": 92, "additions": 89, "deletions": 3}, "files": [{"sha": "048d4cefa574b8cbaf3fcfff9e97c860a7579bc0", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6206a5a1b42072dfad10f923c68c66e552aa1c49/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6206a5a1b42072dfad10f923c68c66e552aa1c49/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=6206a5a1b42072dfad10f923c68c66e552aa1c49", "patch": "@@ -350,6 +350,9 @@ struct LateResolutionVisitor<'a, 'b> {\n \n     /// Only used for better errors on `fn(): fn()`.\n     current_type_ascription: Vec<Span>,\n+\n+    /// Only used for better errors on `let <pat>: <expr, not type>;`.\n+    current_let_binding: Option<(Span, Span)>,\n }\n \n /// Walks the whole crate in DFS order, visiting each item, resolving names as it goes.\n@@ -373,7 +376,18 @@ impl<'a, 'tcx> Visitor<'tcx> for LateResolutionVisitor<'a, '_> {\n         self.resolve_expr(expr, None);\n     }\n     fn visit_local(&mut self, local: &'tcx Local) {\n+        debug!(\"visit_local {:?} {:?} {:?}\", local, local.pat, local.pat.kind);\n+        let val = match local {\n+            Local { pat, ty: Some(ty), init: None, .. } => match pat.kind {\n+                // We check for this to avoid tuple struct fields.\n+                PatKind::Wild => None,\n+                _ => Some((pat.span, ty.span)),\n+            },\n+            _ => None,\n+        };\n+        let original = replace(&mut self.current_let_binding, val);\n         self.resolve_local(local);\n+        self.current_let_binding = original;\n     }\n     fn visit_ty(&mut self, ty: &'tcx Ty) {\n         match ty.kind {\n@@ -533,6 +547,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n             current_function: None,\n             unused_labels: Default::default(),\n             current_type_ascription: Vec::new(),\n+            current_let_binding: None,\n         }\n     }\n "}, {"sha": "1912649f8b57c96701d8ad4776016040b59a9bec", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6206a5a1b42072dfad10f923c68c66e552aa1c49/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6206a5a1b42072dfad10f923c68c66e552aa1c49/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=6206a5a1b42072dfad10f923c68c66e552aa1c49", "patch": "@@ -72,10 +72,14 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n         let path_str = Segment::names_to_string(path);\n         let item_str = path.last().unwrap().ident;\n         let code = source.error_code(res.is_some());\n-        let (base_msg, fallback_label, base_span) = if let Some(res) = res {\n+        let (base_msg, fallback_label, base_span, is_local) = if let Some(res) = res {\n             (format!(\"expected {}, found {} `{}`\", expected, res.descr(), path_str),\n                 format!(\"not a {}\", expected),\n-                span)\n+                span,\n+                match res {\n+                    Res::Local(_) => true,\n+                    _ => false,\n+                })\n         } else {\n             let item_span = path.last().unwrap().ident.span;\n             let (mod_prefix, mod_str) = if path.len() == 1 {\n@@ -94,7 +98,8 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n             };\n             (format!(\"cannot find {} `{}` in {}{}\", expected, item_str, mod_prefix, mod_str),\n                 format!(\"not found in {}\", mod_str),\n-                item_span)\n+                item_span,\n+                false)\n         };\n \n         let code = DiagnosticId::Error(code.into());\n@@ -257,6 +262,20 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n         if !levenshtein_worked {\n             err.span_label(base_span, fallback_label);\n             self.type_ascription_suggestion(&mut err, base_span);\n+            if let Some(span) = self.current_let_binding.and_then(|(pat_sp, ty_sp)| {\n+                if ty_sp.contains(base_span) && is_local {\n+                    Some(pat_sp.between(ty_sp))\n+                } else {\n+                    None\n+                }\n+            }) {\n+                err.span_suggestion(\n+                    span,\n+                    \"maybe you meant to assign a value instead of defining this let binding's type\",\n+                    \" = \".to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n         }\n         (err, candidates)\n     }"}, {"sha": "4b572d6255bc63213d7e13444e6a3fe8acfe8a5e", "filename": "src/test/ui/suggestions/let-binding-init-expr-as-ty.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6206a5a1b42072dfad10f923c68c66e552aa1c49/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6206a5a1b42072dfad10f923c68c66e552aa1c49/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.rs?ref=6206a5a1b42072dfad10f923c68c66e552aa1c49", "patch": "@@ -0,0 +1,11 @@\n+pub fn foo(num: i32) -> i32 { //~ ERROR mismatched types\n+    let foo: i32::from_be(num);\n+    //~^ ERROR expected type, found local variable `num`\n+    //~| ERROR parenthesized type parameters may only be used with a `Fn` trait\n+    //~| ERROR ambiguous associated type\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+}\n+\n+fn main() {\n+    let _ = foo(42);\n+}"}, {"sha": "b472c267987a999540b6179b6b87254e60895c4a", "filename": "src/test/ui/suggestions/let-binding-init-expr-as-ty.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6206a5a1b42072dfad10f923c68c66e552aa1c49/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6206a5a1b42072dfad10f923c68c66e552aa1c49/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr?ref=6206a5a1b42072dfad10f923c68c66e552aa1c49", "patch": "@@ -0,0 +1,41 @@\n+error[E0573]: expected type, found local variable `num`\n+  --> $DIR/let-binding-init-expr-as-ty.rs:2:27\n+   |\n+LL |     let foo: i32::from_be(num);\n+   |                           ^^^ not a type\n+help: maybe you meant to assign a value instead of defining this let binding's type\n+   |\n+LL |     let foo = i32::from_be(num);\n+   |             ^\n+\n+error: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/let-binding-init-expr-as-ty.rs:2:19\n+   |\n+LL |     let foo: i32::from_be(num);\n+   |                   ^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/let-binding-init-expr-as-ty.rs:2:14\n+   |\n+LL |     let foo: i32::from_be(num);\n+   |              ^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<i32 as Trait>::from_be`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/let-binding-init-expr-as-ty.rs:1:25\n+   |\n+LL | pub fn foo(num: i32) -> i32 {\n+   |        ---              ^^^ expected i32, found ()\n+   |        |\n+   |        implicitly returns `()` as its body has no tail or `return` expression\n+   |\n+   = note: expected type `i32`\n+              found type `()`\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0223, E0308, E0573.\n+For more information about an error, try `rustc --explain E0223`."}]}