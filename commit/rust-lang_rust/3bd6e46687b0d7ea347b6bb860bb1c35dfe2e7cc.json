{"sha": "3bd6e46687b0d7ea347b6bb860bb1c35dfe2e7cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZDZlNDY2ODdiMGQ3ZWEzNDdiNmJiODYwYmIxYzM1ZGZlMmU3Y2M=", "commit": {"author": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2017-02-08T11:19:50Z"}, "committer": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2017-02-08T11:19:50Z"}, "message": "Specialize `PartialOrd<A> for [A] where A: Ord`\n\nThis way we can call `cmp` instead of `partial_cmp` in the loop,\nremoving some burden of optimizing `Option`s away from the compiler.\n\nPR #39538 introduced a regression where sorting slices suddenly became\nslower, since `slice1.lt(slice2)` was much slower than\n`slice1.cmp(slice2) == Less`. This problem is now fixed.\n\nTo verify, I benchmarked this simple program:\n```rust\nfn main() {\n    let mut v = (0..2_000_000).map(|x| x * x * x * 18913515181).map(|x| vec![x, x ^ 3137831591]).collect::<Vec<_>>();\n    v.sort();\n}\n```\n\nBefore this PR, it would take 0.95 sec, and now it takes 0.58 sec.\nI also tried changing the `is_less` lambda to use `cmp` and\n`partial_cmp`. Now all three versions (`lt`, `cmp`, `partial_cmp`) are\nequally performant for sorting slices - all of them take 0.58 sec on the\nbenchmark.", "tree": {"sha": "791dad2f3630c043267ec212cfb694a5a486456f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/791dad2f3630c043267ec212cfb694a5a486456f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bd6e46687b0d7ea347b6bb860bb1c35dfe2e7cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bd6e46687b0d7ea347b6bb860bb1c35dfe2e7cc", "html_url": "https://github.com/rust-lang/rust/commit/3bd6e46687b0d7ea347b6bb860bb1c35dfe2e7cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bd6e46687b0d7ea347b6bb860bb1c35dfe2e7cc/comments", "author": null, "committer": null, "parents": [{"sha": "4711ac314c3380f992e218879b7c94b26ba4102b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4711ac314c3380f992e218879b7c94b26ba4102b", "html_url": "https://github.com/rust-lang/rust/commit/4711ac314c3380f992e218879b7c94b26ba4102b"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "18244cec7c78b91782654801f95bf7054afb6383", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3bd6e46687b0d7ea347b6bb860bb1c35dfe2e7cc/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd6e46687b0d7ea347b6bb860bb1c35dfe2e7cc/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=3bd6e46687b0d7ea347b6bb860bb1c35dfe2e7cc", "patch": "@@ -2290,6 +2290,28 @@ impl<A> SlicePartialOrd<A> for [A]\n     }\n }\n \n+impl<A> SlicePartialOrd<A> for [A]\n+    where A: Ord\n+{\n+    default fn partial_compare(&self, other: &[A]) -> Option<Ordering> {\n+        let l = cmp::min(self.len(), other.len());\n+\n+        // Slice to the loop iteration range to enable bound check\n+        // elimination in the compiler\n+        let lhs = &self[..l];\n+        let rhs = &other[..l];\n+\n+        for i in 0..l {\n+            match lhs[i].cmp(&rhs[i]) {\n+                Ordering::Equal => (),\n+                non_eq => return Some(non_eq),\n+            }\n+        }\n+\n+        self.len().partial_cmp(&other.len())\n+    }\n+}\n+\n impl SlicePartialOrd<u8> for [u8] {\n     #[inline]\n     fn partial_compare(&self, other: &[u8]) -> Option<Ordering> {"}]}