{"sha": "a9dd6063872a0d309862d57b04b9ac5864934578", "node_id": "C_kwDOAAsO6NoAKGE5ZGQ2MDYzODcyYTBkMzA5ODYyZDU3YjA0YjlhYzU4NjQ5MzQ1Nzg", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-11T15:49:41Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-11T16:08:30Z"}, "message": "fix: Show what file paths were expected for unresolved modules", "tree": {"sha": "cd426993974745fa633e967043f87d8558ab8adb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd426993974745fa633e967043f87d8558ab8adb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9dd6063872a0d309862d57b04b9ac5864934578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9dd6063872a0d309862d57b04b9ac5864934578", "html_url": "https://github.com/rust-lang/rust/commit/a9dd6063872a0d309862d57b04b9ac5864934578", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9dd6063872a0d309862d57b04b9ac5864934578/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c8c02f625165bb397068ca0adecd93f49289d6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c8c02f625165bb397068ca0adecd93f49289d6b", "html_url": "https://github.com/rust-lang/rust/commit/6c8c02f625165bb397068ca0adecd93f49289d6b"}], "stats": {"total": 192, "additions": 133, "deletions": 59}, "files": [{"sha": "1a17831dc19beaaaeb5dea21b8ae111c1816fecb", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd6063872a0d309862d57b04b9ac5864934578/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd6063872a0d309862d57b04b9ac5864934578/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a9dd6063872a0d309862d57b04b9ac5864934578", "patch": "@@ -504,6 +504,7 @@ name = \"hir_def\"\n version = \"0.0.0\"\n dependencies = [\n  \"anymap\",\n+ \"arrayvec\",\n  \"base_db\",\n  \"cfg\",\n  \"cov-mark\","}, {"sha": "b5e7d5db638697b1dc76d158ca80297aaf6e15d2", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd6063872a0d309862d57b04b9ac5864934578/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd6063872a0d309862d57b04b9ac5864934578/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=a9dd6063872a0d309862d57b04b9ac5864934578", "patch": "@@ -54,7 +54,7 @@ diagnostics![\n #[derive(Debug)]\n pub struct UnresolvedModule {\n     pub decl: InFile<AstPtr<ast::Module>>,\n-    pub candidate: String,\n+    pub candidates: Box<[String]>,\n }\n \n #[derive(Debug)]"}, {"sha": "cf93a3b9f44fe5916f93b9607a3cadc85bb33551", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd6063872a0d309862d57b04b9ac5864934578/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd6063872a0d309862d57b04b9ac5864934578/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=a9dd6063872a0d309862d57b04b9ac5864934578", "patch": "@@ -593,12 +593,12 @@ impl Module {\n \n fn emit_def_diagnostic(db: &dyn HirDatabase, acc: &mut Vec<AnyDiagnostic>, diag: &DefDiagnostic) {\n     match &diag.kind {\n-        DefDiagnosticKind::UnresolvedModule { ast: declaration, candidate } => {\n+        DefDiagnosticKind::UnresolvedModule { ast: declaration, candidates } => {\n             let decl = declaration.to_node(db.upcast());\n             acc.push(\n                 UnresolvedModule {\n                     decl: InFile::new(declaration.file_id, AstPtr::new(&decl)),\n-                    candidate: candidate.clone(),\n+                    candidates: candidates.clone(),\n                 }\n                 .into(),\n             )"}, {"sha": "8a886f4a962741ca2c3a50453c5c9ea2cbf46945", "filename": "crates/hir_def/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd6063872a0d309862d57b04b9ac5864934578/crates%2Fhir_def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd6063872a0d309862d57b04b9ac5864934578/crates%2Fhir_def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2FCargo.toml?ref=a9dd6063872a0d309862d57b04b9ac5864934578", "patch": "@@ -24,6 +24,7 @@ fst = { version = \"0.4\", default-features = false }\n itertools = \"0.10.0\"\n indexmap = \"1.7.0\"\n smallvec = \"1.4.0\"\n+arrayvec = \"0.7.2\"\n la-arena = { version = \"0.3.0\", path = \"../../lib/arena\" }\n \n stdx = { path = \"../stdx\", version = \"0.0.0\" }"}, {"sha": "2b89ac5613acd81b4008bb51d35a9c97e4587b76", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd6063872a0d309862d57b04b9ac5864934578/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd6063872a0d309862d57b04b9ac5864934578/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=a9dd6063872a0d309862d57b04b9ac5864934578", "patch": "@@ -709,7 +709,7 @@ pub enum ModKind {\n     Inline { items: Box<[ModItem]> },\n \n     /// `mod m;`\n-    Outline {},\n+    Outline,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]"}, {"sha": "516a16bcf0de87e629d81bc13d91a92de7115168", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd6063872a0d309862d57b04b9ac5864934578/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd6063872a0d309862d57b04b9ac5864934578/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=a9dd6063872a0d309862d57b04b9ac5864934578", "patch": "@@ -401,7 +401,7 @@ impl<'a> Ctx<'a> {\n         let name = module.name()?.as_name();\n         let visibility = self.lower_visibility(module);\n         let kind = if module.semicolon_token().is_some() {\n-            ModKind::Outline {}\n+            ModKind::Outline\n         } else {\n             ModKind::Inline {\n                 items: module"}, {"sha": "ca164148a1d493e9761986db8bbac46b938035f0", "filename": "crates/hir_def/src/item_tree/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd6063872a0d309862d57b04b9ac5864934578/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd6063872a0d309862d57b04b9ac5864934578/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs?ref=a9dd6063872a0d309862d57b04b9ac5864934578", "patch": "@@ -423,7 +423,7 @@ impl<'a> Printer<'a> {\n                         });\n                         wln!(self, \"}}\");\n                     }\n-                    ModKind::Outline {} => {\n+                    ModKind::Outline => {\n                         wln!(self, \";\");\n                     }\n                 }"}, {"sha": "95a50d942e6e84a9733c6159aa6735fa3ab3b8b8", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd6063872a0d309862d57b04b9ac5864934578/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd6063872a0d309862d57b04b9ac5864934578/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=a9dd6063872a0d309862d57b04b9ac5864934578", "patch": "@@ -1713,7 +1713,7 @@ impl ModCollector<'_, '_> {\n                 }\n             }\n             // out of line module, resolve, parse and recurse\n-            ModKind::Outline {} => {\n+            ModKind::Outline => {\n                 let ast_id = AstId::new(self.tree_id.file_id(), module.ast_id);\n                 let db = self.def_collector.db;\n                 match self.mod_dir.resolve_declaration(db, self.file_id(), &module.name, path_attr)\n@@ -1751,9 +1751,9 @@ impl ModCollector<'_, '_> {\n                             }\n                         }\n                     }\n-                    Err(candidate) => {\n+                    Err(candidates) => {\n                         self.def_collector.def_map.diagnostics.push(\n-                            DefDiagnostic::unresolved_module(self.module_id, ast_id, candidate),\n+                            DefDiagnostic::unresolved_module(self.module_id, ast_id, candidates),\n                         );\n                     }\n                 };"}, {"sha": "ab7a368268abae1f86de5dcbc0a62838b6963ce5", "filename": "crates/hir_def/src/nameres/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd6063872a0d309862d57b04b9ac5864934578/crates%2Fhir_def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd6063872a0d309862d57b04b9ac5864934578/crates%2Fhir_def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fdiagnostics.rs?ref=a9dd6063872a0d309862d57b04b9ac5864934578", "patch": "@@ -15,7 +15,7 @@ use crate::{\n \n #[derive(Debug, PartialEq, Eq)]\n pub enum DefDiagnosticKind {\n-    UnresolvedModule { ast: AstId<ast::Module>, candidate: String },\n+    UnresolvedModule { ast: AstId<ast::Module>, candidates: Box<[String]> },\n \n     UnresolvedExternCrate { ast: AstId<ast::ExternCrate> },\n \n@@ -46,11 +46,11 @@ impl DefDiagnostic {\n     pub(super) fn unresolved_module(\n         container: LocalModuleId,\n         declaration: AstId<ast::Module>,\n-        candidate: String,\n+        candidates: Box<[String]>,\n     ) -> Self {\n         Self {\n             in_module: container,\n-            kind: DefDiagnosticKind::UnresolvedModule { ast: declaration, candidate },\n+            kind: DefDiagnosticKind::UnresolvedModule { ast: declaration, candidates },\n         }\n     }\n "}, {"sha": "52a620fe22f6e2669bc9ea4a55fd197ddd12f76f", "filename": "crates/hir_def/src/nameres/mod_resolution.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd6063872a0d309862d57b04b9ac5864934578/crates%2Fhir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd6063872a0d309862d57b04b9ac5864934578/crates%2Fhir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs?ref=a9dd6063872a0d309862d57b04b9ac5864934578", "patch": "@@ -1,4 +1,5 @@\n //! This module resolves `mod foo;` declaration to file.\n+use arrayvec::ArrayVec;\n use base_db::{AnchoredPath, FileId};\n use hir_expand::name::Name;\n use limit::Limit;\n@@ -63,22 +64,21 @@ impl ModDir {\n         file_id: HirFileId,\n         name: &Name,\n         attr_path: Option<&SmolStr>,\n-    ) -> Result<(FileId, bool, ModDir), String> {\n+    ) -> Result<(FileId, bool, ModDir), Box<[String]>> {\n         let orig_file_id = file_id.original_file(db.upcast());\n \n-        let mut candidate_files = Vec::new();\n+        let mut candidate_files = ArrayVec::<_, 2>::new();\n         match attr_path {\n             Some(attr_path) => {\n                 candidate_files.push(self.dir_path.join_attr(attr_path, self.root_non_dir_owner))\n             }\n+            None if file_id.is_include_macro(db.upcast()) => {\n+                candidate_files.push(format!(\"{}.rs\", name));\n+                candidate_files.push(format!(\"{}/mod.rs\", name));\n+            }\n             None => {\n-                if file_id.is_include_macro(db.upcast()) {\n-                    candidate_files.push(format!(\"{}.rs\", name));\n-                    candidate_files.push(format!(\"{}/mod.rs\", name));\n-                } else {\n-                    candidate_files.push(format!(\"{}{}.rs\", self.dir_path.0, name));\n-                    candidate_files.push(format!(\"{}{}/mod.rs\", self.dir_path.0, name));\n-                }\n+                candidate_files.push(format!(\"{}{}.rs\", self.dir_path.0, name));\n+                candidate_files.push(format!(\"{}{}/mod.rs\", self.dir_path.0, name));\n             }\n         };\n \n@@ -97,7 +97,7 @@ impl ModDir {\n                 }\n             }\n         }\n-        Err(candidate_files.remove(0))\n+        Err(candidate_files.into_iter().collect())\n     }\n }\n "}, {"sha": "640ba38a28296862f9441a75705ad75920912868", "filename": "crates/ide_diagnostics/src/handlers/unresolved_module.rs", "status": "modified", "additions": 60, "deletions": 16, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd6063872a0d309862d57b04b9ac5864934578/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd6063872a0d309862d57b04b9ac5864934578/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funresolved_module.rs?ref=a9dd6063872a0d309862d57b04b9ac5864934578", "patch": "@@ -1,5 +1,6 @@\n use hir::db::AstDatabase;\n use ide_db::{assists::Assist, base_db::AnchoredPathBuf, source_change::FileSystemEdit};\n+use itertools::Itertools;\n use syntax::AstNode;\n \n use crate::{fix, Diagnostic, DiagnosticsContext};\n@@ -13,7 +14,17 @@ pub(crate) fn unresolved_module(\n ) -> Diagnostic {\n     Diagnostic::new(\n         \"unresolved-module\",\n-        \"unresolved module\",\n+        match &*d.candidates {\n+            [] => \"unresolved module\".to_string(),\n+            [candidate] => format!(\"unresolved module, can't find module file: {}\", candidate),\n+            [candidates @ .., last] => {\n+                format!(\n+                    \"unresolved module, can't find module file: {}, or {}\",\n+                    candidates.iter().format(\", \"),\n+                    last\n+                )\n+            }\n+        },\n         ctx.sema.diagnostics_display_range(d.decl.clone().map(|it| it.into())).range,\n     )\n     .with_fixes(fixes(ctx, d))\n@@ -22,19 +33,26 @@ pub(crate) fn unresolved_module(\n fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::UnresolvedModule) -> Option<Vec<Assist>> {\n     let root = ctx.sema.db.parse_or_expand(d.decl.file_id)?;\n     let unresolved_module = d.decl.value.to_node(&root);\n-    Some(vec![fix(\n-        \"create_module\",\n-        \"Create module\",\n-        FileSystemEdit::CreateFile {\n-            dst: AnchoredPathBuf {\n-                anchor: d.decl.file_id.original_file(ctx.sema.db),\n-                path: d.candidate.clone(),\n-            },\n-            initial_contents: \"\".to_string(),\n-        }\n-        .into(),\n-        unresolved_module.syntax().text_range(),\n-    )])\n+    Some(\n+        d.candidates\n+            .iter()\n+            .map(|candidate| {\n+                fix(\n+                    \"create_module\",\n+                    \"Create module\",\n+                    FileSystemEdit::CreateFile {\n+                        dst: AnchoredPathBuf {\n+                            anchor: d.decl.file_id.original_file(ctx.sema.db),\n+                            path: candidate.clone(),\n+                        },\n+                        initial_contents: \"\".to_string(),\n+                    }\n+                    .into(),\n+                    unresolved_module.syntax().text_range(),\n+                )\n+            })\n+            .collect(),\n+    )\n }\n \n #[cfg(test)]\n@@ -50,7 +68,7 @@ mod tests {\n //- /lib.rs\n mod foo;\n   mod bar;\n-//^^^^^^^^ \ud83d\udca1 error: unresolved module\n+//^^^^^^^^ \ud83d\udca1 error: unresolved module, can't find module file: bar.rs, or bar/mod.rs\n mod baz {}\n //- /foo.rs\n \"#,\n@@ -67,7 +85,7 @@ mod baz {}\n                         code: DiagnosticCode(\n                             \"unresolved-module\",\n                         ),\n-                        message: \"unresolved module\",\n+                        message: \"unresolved module, can't find module file: foo.rs, or foo/mod.rs\",\n                         range: 0..8,\n                         severity: Error,\n                         unused: false,\n@@ -100,6 +118,32 @@ mod baz {}\n                                         },\n                                     ),\n                                 },\n+                                Assist {\n+                                    id: AssistId(\n+                                        \"create_module\",\n+                                        QuickFix,\n+                                    ),\n+                                    label: \"Create module\",\n+                                    group: None,\n+                                    target: 0..8,\n+                                    source_change: Some(\n+                                        SourceChange {\n+                                            source_file_edits: {},\n+                                            file_system_edits: [\n+                                                CreateFile {\n+                                                    dst: AnchoredPathBuf {\n+                                                        anchor: FileId(\n+                                                            0,\n+                                                        ),\n+                                                        path: \"foo/mod.rs\",\n+                                                    },\n+                                                    initial_contents: \"\",\n+                                                },\n+                                            ],\n+                                            is_snippet: false,\n+                                        },\n+                                    ),\n+                                },\n                             ],\n                         ),\n                     },"}, {"sha": "9e839954847cd539d26bdd0ec75cfbebfcd2d1aa", "filename": "crates/rust-analyzer/tests/slow-tests/main.rs", "status": "modified", "additions": 49, "deletions": 21, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd6063872a0d309862d57b04b9ac5864934578/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd6063872a0d309862d57b04b9ac5864934578/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs?ref=a9dd6063872a0d309862d57b04b9ac5864934578", "patch": "@@ -463,18 +463,32 @@ fn main() {}\n             partial_result_params: PartialResultParams::default(),\n             work_done_progress_params: WorkDoneProgressParams::default(),\n         },\n-        json!([{\n-            \"edit\": {\n-              \"documentChanges\": [\n-                {\n-                  \"kind\": \"create\",\n-                  \"uri\": \"file:///[..]/src/bar.rs\"\n+        json!([\n+            {\n+                \"title\": \"Create module\",\n+                \"kind\": \"quickfix\",\n+                \"edit\": {\n+                \"documentChanges\": [\n+                    {\n+                    \"kind\": \"create\",\n+                    \"uri\": \"file://[..]/src/bar.rs\"\n+                    }\n+                ]\n                 }\n-              ]\n             },\n-            \"kind\": \"quickfix\",\n-            \"title\": \"Create module\"\n-        }]),\n+            {\n+                \"title\": \"Create module\",\n+                \"kind\": \"quickfix\",\n+                \"edit\": {\n+                \"documentChanges\": [\n+                    {\n+                    \"kind\": \"create\",\n+                    \"uri\": \"file://[..]src/bar/mod.rs\"\n+                    }\n+                ]\n+                }\n+            }\n+        ]),\n     );\n \n     server.request::<CodeActionRequest>(\n@@ -492,7 +506,7 @@ fn main() {}\n #[test]\n fn test_missing_module_code_action_in_json_project() {\n     if skip_slow_tests() {\n-        return;\n+        // return;\n     }\n \n     let tmp_dir = TestDir::new();\n@@ -533,18 +547,32 @@ fn main() {{}}\n             partial_result_params: PartialResultParams::default(),\n             work_done_progress_params: WorkDoneProgressParams::default(),\n         },\n-        json!([{\n-            \"edit\": {\n-              \"documentChanges\": [\n-                {\n-                  \"kind\": \"create\",\n-                  \"uri\": \"file://[..]/src/bar.rs\"\n+        json!([\n+            {\n+                \"title\": \"Create module\",\n+                \"kind\": \"quickfix\",\n+                \"edit\": {\n+                \"documentChanges\": [\n+                    {\n+                    \"kind\": \"create\",\n+                    \"uri\": \"file://[..]/src/bar.rs\"\n+                    }\n+                ]\n                 }\n-              ]\n             },\n-            \"kind\": \"quickfix\",\n-            \"title\": \"Create module\"\n-        }]),\n+            {\n+                \"title\": \"Create module\",\n+                \"kind\": \"quickfix\",\n+                \"edit\": {\n+                \"documentChanges\": [\n+                    {\n+                    \"kind\": \"create\",\n+                    \"uri\": \"file://[..]src/bar/mod.rs\"\n+                    }\n+                ]\n+                }\n+            }\n+        ]),\n     );\n \n     server.request::<CodeActionRequest>("}]}