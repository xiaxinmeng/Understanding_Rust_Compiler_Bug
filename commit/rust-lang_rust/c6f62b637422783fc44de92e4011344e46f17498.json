{"sha": "c6f62b637422783fc44de92e4011344e46f17498", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZjYyYjYzNzQyMjc4M2ZjNDRkZTkyZTQwMTEzNDRlNDZmMTc0OTg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-15T01:02:49Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-15T01:02:51Z"}, "message": "bench: Update shootout-binarytrees to use unique boxes\n\nShared boxes have a huge performance overhead due to #1493", "tree": {"sha": "675e4085185031e0b69af8d4766b19b4f8ee54d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/675e4085185031e0b69af8d4766b19b4f8ee54d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6f62b637422783fc44de92e4011344e46f17498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6f62b637422783fc44de92e4011344e46f17498", "html_url": "https://github.com/rust-lang/rust/commit/c6f62b637422783fc44de92e4011344e46f17498", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6f62b637422783fc44de92e4011344e46f17498/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "793e3b231c52e588c6783f5e0965eb0562f550b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/793e3b231c52e588c6783f5e0965eb0562f550b5", "html_url": "https://github.com/rust-lang/rust/commit/793e3b231c52e588c6783f5e0965eb0562f550b5"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "a65377c144252d9a21b517f74026d8f4b1f108a1", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6f62b637422783fc44de92e4011344e46f17498/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f62b637422783fc44de92e4011344e46f17498/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=c6f62b637422783fc44de92e4011344e46f17498", "patch": "@@ -1,9 +1,9 @@\n use std;\n import int;\n \n-tag tree { nil; node(@tree, @tree, int); }\n+tag tree { nil; node(~tree, ~tree, int); }\n \n-fn item_check(t: @tree) -> int {\n+fn item_check(t: ~tree) -> int {\n     alt *t {\n       nil. { ret 0; }\n       node(left, right, item) {\n@@ -12,11 +12,11 @@ fn item_check(t: @tree) -> int {\n     }\n }\n \n-fn bottom_up_tree(item: int, depth: int) -> @tree {\n+fn bottom_up_tree(item: int, depth: int) -> ~tree {\n     if depth > 0 {\n-        ret @node(bottom_up_tree(2 * item - 1, depth - 1),\n+        ret ~node(bottom_up_tree(2 * item - 1, depth - 1),\n                   bottom_up_tree(2 * item, depth - 1), item);\n-    } else { ret @nil; }\n+    } else { ret ~nil; }\n }\n \n fn main() {"}]}