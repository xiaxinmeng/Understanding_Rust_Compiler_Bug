{"sha": "ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNzMzMGMxY2M1MGUyMTBmOGU0OGM4YzhhMzhjNzk0Y2FhMDg3ZTA=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-05-09T16:03:59Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-13T13:37:09Z"}, "message": "Start implementation of RFC 1216 (make ! a type)\n\nAdd `TyKind::Empty` and fix resulting build errors.", "tree": {"sha": "966fbb3667ecc111db22e17c1b203dcf67fd1de9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/966fbb3667ecc111db22e17c1b203dcf67fd1de9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "html_url": "https://github.com/rust-lang/rust/commit/ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e64f68817d850ccbe642d7f067083bc655115d84", "url": "https://api.github.com/repos/rust-lang/rust/commits/e64f68817d850ccbe642d7f067083bc655115d84", "html_url": "https://github.com/rust-lang/rust/commit/e64f68817d850ccbe642d7f067083bc655115d84"}], "stats": {"total": 86, "additions": 69, "deletions": 17}, "files": [{"sha": "822a603fbb867af288fc43053b45b8cc904398de", "filename": "src/librustc/hir/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fhir%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fhir%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Ffold.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -353,6 +353,7 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n                         }\n                     }))\n                 }\n+                TyEmpty => node,\n                 TyTup(tys) => TyTup(tys.move_map(|ty| fld.fold_ty(ty))),\n                 TyPath(qself, path) => {\n                     let qself = qself.map(|QSelf { ty, position }| {"}, {"sha": "0c24d1315f1a2dca72ef621cfc30b20628ca1939", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -403,6 +403,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n             walk_list!(visitor, visit_lifetime, opt_lifetime);\n             visitor.visit_ty(&mutable_type.ty)\n         }\n+        TyEmpty => {},\n         TyTup(ref tuple_element_types) => {\n             walk_list!(visitor, visit_ty, tuple_element_types);\n         }"}, {"sha": "3170dd1884a51274e7128ad9bfe802e83ec82211", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -270,6 +270,7 @@ impl<'a> LoweringContext<'a> {\n                         decl: self.lower_fn_decl(&f.decl),\n                     }))\n                 }\n+                Empty => hir::TyEmpty,\n                 Tup(ref tys) => hir::TyTup(tys.iter().map(|ty| self.lower_ty(ty)).collect()),\n                 Paren(ref ty) => {\n                     return self.lower_ty(ty);"}, {"sha": "366b0100bda86dd92bdf64f50bfeccba9bf42538", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -1112,6 +1112,7 @@ pub struct BareFnTy {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n /// The different kinds of types recognized by the compiler\n pub enum Ty_ {\n+    /// A variable length array (`[T]`)\n     TyVec(P<Ty>),\n     /// A fixed length array (`[T; n]`)\n     TyFixedLengthVec(P<Ty>, P<Expr>),\n@@ -1121,6 +1122,8 @@ pub enum Ty_ {\n     TyRptr(Option<Lifetime>, MutTy),\n     /// A bare function (e.g. `fn(usize) -> bool`)\n     TyBareFn(P<BareFnTy>),\n+    /// The empty type (`!`)\n+    TyEmpty,\n     /// A tuple (`(A, B, C, D,...)`)\n     TyTup(HirVec<P<Ty>>),\n     /// A path (`module::module::...::Type`), optionally"}, {"sha": "71694bc4e7dfc922bc6827940b38f1c5ebc4f870", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -504,6 +504,9 @@ impl<'a> State<'a> {\n                 self.print_opt_lifetime(lifetime)?;\n                 self.print_mt(mt)?;\n             }\n+            hir::TyEmpty => {\n+                word(&mut self.s, \"!\")?;\n+            },\n             hir::TyTup(ref elts) => {\n                 self.popen()?;\n                 self.commasep(Inconsistent, &elts[..], |s, ty| s.print_type(&ty))?;"}, {"sha": "7e7953aa258f398032e3fc9f2c75becf7617a267", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -168,6 +168,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n             ty::TyTrait(..) |\n             ty::TyStruct(..) |\n             ty::TyClosure(..) |\n+            ty::TyEmpty |\n             ty::TyTuple(..) |\n             ty::TyProjection(..) |\n             ty::TyParam(..) |"}, {"sha": "291c7c6426a40f4be280c5e832ce4fc56a23749b", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -253,6 +253,7 @@ fn ty_is_local_constructor(tcx: TyCtxt, ty: Ty, infer_is_local: InferIsLocal)->\n         ty::TySlice(..) |\n         ty::TyRawPtr(..) |\n         ty::TyRef(..) |\n+        ty::TyEmpty |\n         ty::TyTuple(..) |\n         ty::TyParam(..) |\n         ty::TyProjection(..) => {"}, {"sha": "4ee173fbb1c557e1626a9bf09f739e193566edf4", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -212,6 +212,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 ty::TyProjection(..) => Some(13),\n                 ty::TyParam(..) => Some(14),\n                 ty::TyAnon(..) => Some(15),\n+                ty::TyEmpty => Some(16),\n                 ty::TyInfer(..) | ty::TyError => None\n             }\n         }"}, {"sha": "131074443b43b95e6a4833ac545d632aca18b26c", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -1772,7 +1772,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             ty::TyUint(_) | ty::TyInt(_) | ty::TyBool | ty::TyFloat(_) |\n             ty::TyFnDef(..) | ty::TyFnPtr(_) | ty::TyRawPtr(..) |\n             ty::TyChar | ty::TyBox(_) | ty::TyRef(..) |\n-            ty::TyArray(..) | ty::TyClosure(..) |\n+            ty::TyArray(..) | ty::TyClosure(..) | ty::TyEmpty |\n             ty::TyError => {\n                 // safe for everything\n                 Where(ty::Binder(Vec::new()))\n@@ -1820,7 +1820,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             ty::TyInfer(ty::IntVar(_)) | ty::TyInfer(ty::FloatVar(_)) |\n             ty::TyUint(_) | ty::TyInt(_) | ty::TyBool | ty::TyFloat(_) |\n             ty::TyFnDef(..) | ty::TyFnPtr(_) | ty::TyChar |\n-            ty::TyRawPtr(..) | ty::TyError |\n+            ty::TyRawPtr(..) | ty::TyError | ty::TyEmpty |\n             ty::TyRef(_, ty::TypeAndMut { ty: _, mutbl: hir::MutImmutable }) => {\n                 Where(ty::Binder(Vec::new()))\n             }\n@@ -1886,6 +1886,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             ty::TyError |\n             ty::TyInfer(ty::IntVar(_)) |\n             ty::TyInfer(ty::FloatVar(_)) |\n+            ty::TyEmpty |\n             ty::TyChar => {\n                 Vec::new()\n             }"}, {"sha": "67a2624eaad6cde1c64dbb0c923c520054cbf775", "filename": "src/librustc/ty/contents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Fcontents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Fcontents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontents.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -185,7 +185,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n \n                 // Scalar and unique types are sendable, and durable\n                 ty::TyInfer(ty::FreshIntTy(_)) | ty::TyInfer(ty::FreshFloatTy(_)) |\n-                ty::TyBool | ty::TyInt(_) | ty::TyUint(_) | ty::TyFloat(_) |\n+                ty::TyBool | ty::TyInt(_) | ty::TyUint(_) | ty::TyFloat(_) | ty::TyEmpty |\n                 ty::TyFnDef(..) | ty::TyFnPtr(_) | ty::TyChar => {\n                     TC::None\n                 }"}, {"sha": "6babd124665b1c1cef1c5552a2a45ffcc7280c7d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -190,6 +190,7 @@ pub struct CommonTypes<'tcx> {\n     pub u64: Ty<'tcx>,\n     pub f32: Ty<'tcx>,\n     pub f64: Ty<'tcx>,\n+    pub empty: Ty<'tcx>,\n     pub err: Ty<'tcx>,\n }\n \n@@ -256,6 +257,7 @@ impl<'tcx> CommonTypes<'tcx> {\n         CommonTypes {\n             bool: mk(TyBool),\n             char: mk(TyChar),\n+            empty: mk(TyEmpty),\n             err: mk(TyError),\n             isize: mk(TyInt(ast::IntTy::Is)),\n             i8: mk(TyInt(ast::IntTy::I8)),\n@@ -975,7 +977,7 @@ macro_rules! sty_debug_print {\n                 for &Interned(t) in tcx.interners.type_.borrow().iter() {\n                     let variant = match t.sty {\n                         ty::TyBool | ty::TyChar | ty::TyInt(..) | ty::TyUint(..) |\n-                            ty::TyFloat(..) | ty::TyStr => continue,\n+                            ty::TyFloat(..) | ty::TyStr | ty::TyEmpty => continue,\n                         ty::TyError => /* unimportant */ continue,\n                         $(ty::$variant(..) => &mut $variant,)*\n                     };\n@@ -1256,6 +1258,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_ty(TySlice(ty))\n     }\n \n+    pub fn mk_empty(&self) -> Ty<'tcx> {\n+        self.mk_ty(TyEmpty)\n+    }\n+\n     pub fn mk_tup(self, ts: Vec<Ty<'tcx>>) -> Ty<'tcx> {\n         self.mk_ty(TyTuple(self.mk_type_list(ts)))\n     }"}, {"sha": "e43b23ef3c450929bda892e88d71ee4d96af5413", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -214,7 +214,7 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n     fn sort_string(&self, tcx: TyCtxt<'a, 'gcx, 'lcx>) -> String {\n         match self.sty {\n             ty::TyBool | ty::TyChar | ty::TyInt(_) |\n-            ty::TyUint(_) | ty::TyFloat(_) | ty::TyStr => self.to_string(),\n+            ty::TyUint(_) | ty::TyFloat(_) | ty::TyStr | ty::TyEmpty => self.to_string(),\n             ty::TyTuple(ref tys) if tys.is_empty() => self.to_string(),\n \n             ty::TyEnum(def, _) => format!(\"enum `{}`\", tcx.item_path_str(def.did)),"}, {"sha": "a90c90e99ed5b3208009aa789e210192406d4c3a", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -26,6 +26,7 @@ pub enum SimplifiedType {\n     StrSimplifiedType,\n     VecSimplifiedType,\n     PtrSimplifiedType,\n+    EmptySimplifiedType,\n     TupleSimplifiedType(usize),\n     TraitSimplifiedType(DefId),\n     StructSimplifiedType(DefId),\n@@ -81,6 +82,7 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         ty::TyClosure(def_id, _) => {\n             Some(ClosureSimplifiedType(def_id))\n         }\n+        ty::TyEmpty => Some(EmptySimplifiedType),\n         ty::TyTuple(ref tys) => {\n             Some(TupleSimplifiedType(tys.len()))\n         }"}, {"sha": "981b029da9bfdcbdcab0c898efe01bfcd5c39895", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -60,6 +60,7 @@ impl FlagComputation {\n             &ty::TyInt(_) |\n             &ty::TyFloat(_) |\n             &ty::TyUint(_) |\n+            &ty::TyEmpty |\n             &ty::TyStr => {\n             }\n "}, {"sha": "a31893707075e4ba8e4dfde5761d2e0d5670b1ae", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -349,6 +349,7 @@ pub fn characteristic_def_id_of_type(ty: Ty) -> Option<DefId> {\n         ty::TyAnon(..) |\n         ty::TyInfer(_) |\n         ty::TyError |\n+        ty::TyEmpty |\n         ty::TyFloat(_) => None,\n     }\n }"}, {"sha": "79631bff9647771751b7dd28cb01bf93c69b5bdc", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -795,6 +795,9 @@ impl<'a, 'gcx, 'tcx> Layout {\n             ty::TyFloat(FloatTy::F64) => Scalar { value: F64, non_zero: false },\n             ty::TyFnPtr(_) => Scalar { value: Pointer, non_zero: true },\n \n+            // The empty type.\n+            ty::TyEmpty => Univariant { variant: Struct::new(dl, false), non_zero: false },\n+\n             // Potentially-fat pointers.\n             ty::TyBox(pointee) |\n             ty::TyRef(_, ty::TypeAndMut { ty: pointee, .. }) |"}, {"sha": "29bbb8680e253818b2d4f34c3223337815d90af6", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -1854,7 +1854,7 @@ impl<'a, 'tcx> AdtDefData<'tcx, 'tcx> {\n         let result = match ty.sty {\n             TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) |\n             TyBox(..) | TyRawPtr(..) | TyRef(..) | TyFnDef(..) | TyFnPtr(_) |\n-            TyArray(..) | TyClosure(..) => {\n+            TyArray(..) | TyClosure(..) | TyEmpty => {\n                 vec![]\n             }\n "}, {"sha": "bc90c18856fcb5d6cd2b22467079d10e3215b5c9", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -171,6 +171,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             ty::TyInt(..) |         // OutlivesScalar\n             ty::TyUint(..) |        // OutlivesScalar\n             ty::TyFloat(..) |       // OutlivesScalar\n+            ty::TyEmpty |           // ...\n             ty::TyEnum(..) |        // OutlivesNominalType\n             ty::TyStruct(..) |      // OutlivesNominalType\n             ty::TyBox(..) |         // OutlivesNominalType (ish)"}, {"sha": "a7713bdfcb3fbe034b926b1b8553e173f096c8b7", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -498,7 +498,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::TyAnon(did, substs) => ty::TyAnon(did, substs.fold_with(folder)),\n             ty::TyBool | ty::TyChar | ty::TyStr | ty::TyInt(_) |\n             ty::TyUint(_) | ty::TyFloat(_) | ty::TyError | ty::TyInfer(_) |\n-            ty::TyParam(..) => self.sty.clone(),\n+            ty::TyParam(..) | ty::TyEmpty => self.sty.clone(),\n         };\n         folder.tcx().mk_ty(sty)\n     }\n@@ -527,7 +527,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::TyAnon(_, ref substs) => substs.visit_with(visitor),\n             ty::TyBool | ty::TyChar | ty::TyStr | ty::TyInt(_) |\n             ty::TyUint(_) | ty::TyFloat(_) | ty::TyError | ty::TyInfer(_) |\n-            ty::TyParam(..) => false,\n+            ty::TyParam(..) | ty::TyEmpty => false,\n         }\n     }\n "}, {"sha": "d693f7f0b830dbfff4b1d0c1f1ba5b5bfd18608a", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -159,6 +159,9 @@ pub enum TypeVariants<'tcx> {\n     /// `|a| a`.\n     TyClosure(DefId, ClosureSubsts<'tcx>),\n \n+    /// The empty type `!`\n+    TyEmpty,\n+\n     /// A tuple type.  For example, `(i32, bool)`.\n     TyTuple(&'tcx [Ty<'tcx>]),\n \n@@ -1260,6 +1263,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             TyArray(_, _) |\n             TySlice(_) |\n             TyRawPtr(_) |\n+            TyEmpty |\n             TyTuple(_) |\n             TyParam(_) |\n             TyInfer(_) |"}, {"sha": "eae97a9c49ec2237e481ba18a2a9c093b1b01236", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -485,6 +485,7 @@ impl<'a, 'gcx, 'tcx> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx> {\n                 self.def_id(data.trait_ref.def_id);\n                 self.hash(data.item_name.as_str());\n             }\n+            TyEmpty |\n             TyBool |\n             TyChar |\n             TyStr |\n@@ -550,7 +551,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n \n         // Fast-path for primitive types\n         let result = match self.sty {\n-            TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) |\n+            TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) | TyEmpty |\n             TyRawPtr(..) | TyFnDef(..) | TyFnPtr(_) | TyRef(_, TypeAndMut {\n                 mutbl: hir::MutImmutable, ..\n             }) => Some(false),\n@@ -596,7 +597,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n         let result = match self.sty {\n             TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) |\n             TyBox(..) | TyRawPtr(..) | TyRef(..) | TyFnDef(..) | TyFnPtr(_) |\n-            TyArray(..) | TyTuple(..) | TyClosure(..) => Some(true),\n+            TyArray(..) | TyTuple(..) | TyClosure(..) | TyEmpty => Some(true),\n \n             TyStr | TyTrait(..) | TySlice(_) => Some(false),\n "}, {"sha": "d46de6f7993cf72dba77e6e3f94a7a659cdb9c32", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -70,7 +70,7 @@ pub fn walk_shallow<'tcx>(ty: Ty<'tcx>) -> IntoIter<Ty<'tcx>> {\n fn push_subtypes<'tcx>(stack: &mut Vec<Ty<'tcx>>, parent_ty: Ty<'tcx>) {\n     match parent_ty.sty {\n         ty::TyBool | ty::TyChar | ty::TyInt(_) | ty::TyUint(_) | ty::TyFloat(_) |\n-        ty::TyStr | ty::TyInfer(_) | ty::TyParam(_) | ty::TyError => {\n+        ty::TyStr | ty::TyInfer(_) | ty::TyParam(_) | ty::TyEmpty | ty::TyError => {\n         }\n         ty::TyBox(ty) | ty::TyArray(ty, _) | ty::TySlice(ty) => {\n             stack.push(ty);"}, {"sha": "6e138db74c97fbf851f7bb39c3949b516f2ee4b7", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -321,6 +321,7 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n                 ty::TyFloat(..) |\n                 ty::TyError |\n                 ty::TyStr |\n+                ty::TyEmpty |\n                 ty::TyParam(_) => {\n                     // WfScalar, WfParameter, etc\n                 }"}, {"sha": "fa1d1e0a9019ac2af28ddadacb2f6975ed6884f3", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -14,7 +14,7 @@ use ty::subst::{self, Subst};\n use ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n use ty::{TyBool, TyChar, TyStruct, TyEnum};\n use ty::{TyError, TyStr, TyArray, TySlice, TyFloat, TyFnDef, TyFnPtr};\n-use ty::{TyParam, TyRawPtr, TyRef, TyTuple};\n+use ty::{TyParam, TyRawPtr, TyRef, TyEmpty, TyTuple};\n use ty::TyClosure;\n use ty::{TyBox, TyTrait, TyInt, TyUint, TyInfer};\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n@@ -847,6 +847,7 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n                 }\n                 write!(f, \"{}\", tm)\n             }\n+            TyEmpty => write!(f, \"!\"),\n             TyTuple(ref tys) => {\n                 write!(f, \"(\")?;\n                 let mut tys = tys.iter();"}, {"sha": "27da78eceb4a7b4673f4e737b2993ca6ae3c429e", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -523,7 +523,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n             // Primitive types with a stable representation.\n             ty::TyBool | ty::TyInt(..) | ty::TyUint(..) |\n-            ty::TyFloat(..) => FfiSafe,\n+            ty::TyFloat(..) | ty::TyEmpty => FfiSafe,\n \n             ty::TyBox(..) => {\n                 FfiUnsafe(\"found Rust type Box<_> in foreign module, \\"}, {"sha": "96cf3b7e91ceb3731716d1053e8d9237df0fe71d", "filename": "src/librustc_metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc_metadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc_metadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftydecode.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -311,6 +311,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n         let tcx = self.tcx;\n         match self.next() {\n             'b' => return tcx.types.bool,\n+            '!' => return tcx.types.empty,\n             'i' => { /* eat the s of is */ self.next(); return tcx.types.isize },\n             'u' => { /* eat the s of us */ self.next(); return tcx.types.usize },\n             'M' => {"}, {"sha": "26fcb9b1f9f95eaaad04e2099d287e5d2e532c8f", "filename": "src/librustc_metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc_metadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc_metadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftyencode.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -74,6 +74,7 @@ pub fn enc_ty<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>, t: Ty<'tcx\n     match t.sty {\n         ty::TyBool => { write!(w, \"b\"); }\n         ty::TyChar => { write!(w, \"c\"); }\n+        ty::TyEmpty => { write!(w, \"!\"); }\n         ty::TyInt(t) => {\n             match t {\n                 ast::IntTy::Is => write!(w, \"is\"),"}, {"sha": "4df96a3b685d349cca38514a83703c0b201ba23e", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -753,6 +753,7 @@ fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n         ty::TyRef(..)   |\n         ty::TyFnDef(..) |\n         ty::TyFnPtr(_)  |\n+        ty::TyEmpty     |\n         ty::TyTrait(_)  => {\n             /* nothing to do */\n         }"}, {"sha": "efd4acfeaa27b0e916c4e37dea6e2a4929264d4c", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -40,6 +40,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::TyBool => output.push_str(\"bool\"),\n         ty::TyChar => output.push_str(\"char\"),\n         ty::TyStr => output.push_str(\"str\"),\n+        ty::TyEmpty => output.push_str(\"!\"),\n         ty::TyInt(int_ty) => output.push_str(int_ty.ty_to_string()),\n         ty::TyUint(uint_ty) => output.push_str(uint_ty.ty_to_string()),\n         ty::TyFloat(float_ty) => output.push_str(float_ty.ty_to_string()),"}, {"sha": "ef756a7addd2dd35b41b0f400be96df2c5b28797", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -412,6 +412,7 @@ pub fn push_unique_type_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         ty::TyBool              => output.push_str(\"bool\"),\n         ty::TyChar              => output.push_str(\"char\"),\n         ty::TyStr               => output.push_str(\"str\"),\n+        ty::TyEmpty             => output.push_str(\"!\"),\n         ty::TyInt(ast::IntTy::Is)    => output.push_str(\"isize\"),\n         ty::TyInt(ast::IntTy::I8)    => output.push_str(\"i8\"),\n         ty::TyInt(ast::IntTy::I16)   => output.push_str(\"i16\"),"}, {"sha": "6224bb76166734776c9655466ae42727b9a8d0b1", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -64,6 +64,7 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n         ty::TyInt(t) => Type::int_from_ty(cx, t),\n         ty::TyUint(t) => Type::uint_from_ty(cx, t),\n         ty::TyFloat(t) => Type::float_from_ty(cx, t),\n+        ty::TyEmpty => Type::nil(cx),\n \n         ty::TyBox(ty) |\n         ty::TyRef(_, ty::TypeAndMut{ty, ..}) |\n@@ -249,6 +250,7 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n       ty::TyInt(t) => Type::int_from_ty(cx, t),\n       ty::TyUint(t) => Type::uint_from_ty(cx, t),\n       ty::TyFloat(t) => Type::float_from_ty(cx, t),\n+      ty::TyEmpty => Type::nil(cx),\n       ty::TyEnum(def, ref substs) => {\n           // Only create the named struct, but don't fill it in. We\n           // fill it in *after* placing it into the type cache. This"}, {"sha": "1af171eb468c3886f5c3fa8c6728b6ab2de05869", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -1700,6 +1700,9 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 let t = self.ast_ty_to_ty(rscope1, &mt.ty);\n                 tcx.mk_ref(tcx.mk_region(r), ty::TypeAndMut {ty: t, mutbl: mt.mutbl})\n             }\n+            hir::TyEmpty => {\n+                tcx.mk_empty()\n+            },\n             hir::TyTup(ref fields) => {\n                 let flds = fields.iter()\n                                  .map(|t| self.ast_ty_to_ty(rscope, &t))"}, {"sha": "b526d2dcbede4347ebe7dafef75458ccf9bea5ff", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -433,7 +433,7 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'b, 'gcx, 'tcx>(\n     // We still need to ensure all referenced data is safe.\n     match ty.sty {\n         ty::TyBool | ty::TyChar | ty::TyInt(_) | ty::TyUint(_) |\n-        ty::TyFloat(_) | ty::TyStr => {\n+        ty::TyFloat(_) | ty::TyStr | ty::TyEmpty => {\n             // primitive - definitely safe\n             Ok(())\n         }"}, {"sha": "2ac74e2e7f88deb9b7a84e5b0d3d6346a3ab4767", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -24,7 +24,7 @@ use rustc::ty::{ImplOrTraitItemId, ConstTraitItemId};\n use rustc::ty::{MethodTraitItemId, TypeTraitItemId, ParameterEnvironment};\n use rustc::ty::{Ty, TyBool, TyChar, TyEnum, TyError};\n use rustc::ty::{TyParam, TyRawPtr};\n-use rustc::ty::{TyRef, TyStruct, TyTrait, TyTuple};\n+use rustc::ty::{TyRef, TyStruct, TyTrait, TyEmpty, TyTuple};\n use rustc::ty::{TyStr, TyArray, TySlice, TyFloat, TyInfer, TyInt};\n use rustc::ty::{TyUint, TyClosure, TyBox, TyFnDef, TyFnPtr};\n use rustc::ty::{TyProjection, TyAnon};\n@@ -84,7 +84,7 @@ impl<'a, 'gcx, 'tcx> CoherenceChecker<'a, 'gcx, 'tcx> {\n \n             TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) |\n             TyStr | TyArray(..) | TySlice(..) | TyFnDef(..) | TyFnPtr(_) |\n-            TyTuple(..) | TyParam(..) | TyError |\n+            TyTuple(..) | TyParam(..) | TyError | TyEmpty |\n             TyRawPtr(_) | TyRef(_, _) | TyProjection(..) => {\n                 None\n             }"}, {"sha": "918e0386a6818e096cd5a859b466e7062978df2c", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -322,7 +322,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n         match ty.sty {\n             ty::TyBool |\n             ty::TyChar | ty::TyInt(_) | ty::TyUint(_) |\n-            ty::TyFloat(_) | ty::TyStr => {\n+            ty::TyFloat(_) | ty::TyStr | ty::TyEmpty => {\n                 /* leaf type -- noop */\n             }\n "}, {"sha": "6ba5eccc5cf6b0683f3c3626ff6bac2638a39779", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -1348,6 +1348,7 @@ pub struct BareFnTy {\n /// The different kinds of types recognized by the compiler\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum TyKind {\n+    /// A variable-length array (`[T]`)\n     Vec(P<Ty>),\n     /// A fixed length array (`[T; n]`)\n     FixedLengthVec(P<Ty>, P<Expr>),\n@@ -1357,6 +1358,8 @@ pub enum TyKind {\n     Rptr(Option<Lifetime>, MutTy),\n     /// A bare function (e.g. `fn(usize) -> bool`)\n     BareFn(P<BareFnTy>),\n+    /// The empty type (`!`)\n+    Empty,\n     /// A tuple (`(A, B, C, D,...)`)\n     Tup(Vec<P<Ty>> ),\n     /// A path (`module::module::...::Type`), optionally"}, {"sha": "47addd8aba55d5e7df60a43376426decdd3db726", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -373,6 +373,7 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n                     decl: fld.fold_fn_decl(decl)\n                 }))\n             }\n+            TyKind::Empty => node,\n             TyKind::Tup(tys) => TyKind::Tup(tys.move_map(|ty| fld.fold_ty(ty))),\n             TyKind::Paren(ty) => TyKind::Paren(fld.fold_ty(ty)),\n             TyKind::Path(qself, path) => {"}, {"sha": "6214dc5301b24d9729257b3297fe2752e2d63c66", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -976,6 +976,9 @@ impl<'a> State<'a> {\n                 try!(self.print_opt_lifetime(lifetime));\n                 try!(self.print_mt(mt));\n             }\n+            ast::TyKind::Empty => {\n+                word(&mut self.s, \"!\")?;\n+            },\n             ast::TyKind::Tup(ref elts) => {\n                 try!(self.popen());\n                 try!(self.commasep(Inconsistent, &elts[..],"}, {"sha": "1d40e3e395e2948fc73ef3489b2a6e214aec690d", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7330c1cc50e210f8e48c8c8a38c794caa087e0/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=ba7330c1cc50e210f8e48c8c8a38c794caa087e0", "patch": "@@ -319,6 +319,7 @@ pub fn walk_ty<V: Visitor>(visitor: &mut V, typ: &Ty) {\n             walk_list!(visitor, visit_lifetime, opt_lifetime);\n             visitor.visit_ty(&mutable_type.ty)\n         }\n+        TyKind::Empty => {},\n         TyKind::Tup(ref tuple_element_types) => {\n             walk_list!(visitor, visit_ty, tuple_element_types);\n         }"}]}