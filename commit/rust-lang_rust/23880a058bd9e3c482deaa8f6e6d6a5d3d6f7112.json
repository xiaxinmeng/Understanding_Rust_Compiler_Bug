{"sha": "23880a058bd9e3c482deaa8f6e6d6a5d3d6f7112", "node_id": "C_kwDOAAsO6NoAKDIzODgwYTA1OGJkOWUzYzQ4MmRlYWE4ZjZlNmQ2YTVkM2Q2ZjcxMTI", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-01T07:20:56Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-07T23:22:23Z"}, "message": "Add `try_fold_uenevaluted`.\n\nWe already have `visit_unevaluated`, so this improves consistency.\n\nAlso, define `TypeFoldable for Unevaluated<'tcx, ()>` in terms of\n`TypeFoldable for Unevaluated<'tcx>`, which is neater.", "tree": {"sha": "35a6bc984e4aaeb33b04d68c8412f19b642a55e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35a6bc984e4aaeb33b04d68c8412f19b642a55e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23880a058bd9e3c482deaa8f6e6d6a5d3d6f7112", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23880a058bd9e3c482deaa8f6e6d6a5d3d6f7112", "html_url": "https://github.com/rust-lang/rust/commit/23880a058bd9e3c482deaa8f6e6d6a5d3d6f7112", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23880a058bd9e3c482deaa8f6e6d6a5d3d6f7112/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ba2dfd3305e44af7ab3a1a7f6085a236c009caa", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ba2dfd3305e44af7ab3a1a7f6085a236c009caa", "html_url": "https://github.com/rust-lang/rust/commit/6ba2dfd3305e44af7ab3a1a7f6085a236c009caa"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "4b3ab62f27f7872c9bb2951f11edbcbe664ed5ac", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/23880a058bd9e3c482deaa8f6e6d6a5d3d6f7112/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23880a058bd9e3c482deaa8f6e6d6a5d3d6f7112/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=23880a058bd9e3c482deaa8f6e6d6a5d3d6f7112", "patch": "@@ -263,6 +263,13 @@ pub trait TypeFolder<'tcx>: Sized {\n         c.super_fold_with(self)\n     }\n \n+    fn fold_unevaluated(&mut self, uv: ty::Unevaluated<'tcx>) -> ty::Unevaluated<'tcx>\n+    where\n+        Self: TypeFolder<'tcx, Error = !>,\n+    {\n+        uv.super_fold_with(self)\n+    }\n+\n     fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx>\n     where\n         Self: TypeFolder<'tcx, Error = !>,\n@@ -305,6 +312,13 @@ pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {\n         c.try_super_fold_with(self)\n     }\n \n+    fn try_fold_unevaluated(\n+        &mut self,\n+        c: ty::Unevaluated<'tcx>,\n+    ) -> Result<ty::Unevaluated<'tcx>, Self::Error> {\n+        c.try_super_fold_with(self)\n+    }\n+\n     fn try_fold_predicate(\n         &mut self,\n         p: ty::Predicate<'tcx>,"}, {"sha": "53e058f205abf9c8840af39a902035881657990d", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/23880a058bd9e3c482deaa8f6e6d6a5d3d6f7112/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23880a058bd9e3c482deaa8f6e6d6a5d3d6f7112/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=23880a058bd9e3c482deaa8f6e6d6a5d3d6f7112", "patch": "@@ -1228,6 +1228,10 @@ impl<'tcx> TypeFoldable<'tcx> for InferConst<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        folder.try_fold_unevaluated(self)\n+    }\n+\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n@@ -1253,19 +1257,11 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx, ()> {\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n-        Ok(ty::Unevaluated {\n-            def: self.def,\n-            substs: self.substs.try_fold_with(folder)?,\n-            promoted: self.promoted,\n-        })\n-    }\n-\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        visitor.visit_unevaluated(self.expand())\n+        Ok(self.expand().try_fold_with(folder)?.shrink())\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.substs.visit_with(visitor)\n+        self.expand().visit_with(visitor)\n     }\n }\n "}]}