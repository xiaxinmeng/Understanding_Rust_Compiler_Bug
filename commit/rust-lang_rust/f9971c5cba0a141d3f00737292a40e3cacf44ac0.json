{"sha": "f9971c5cba0a141d3f00737292a40e3cacf44ac0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5OTcxYzVjYmEwYTE0MWQzZjAwNzM3MjkyYTQwZTNjYWNmNDRhYzA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-11-17T17:54:13Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-02-04T17:22:59Z"}, "message": "Remove unused feature gates from cg_llvm\n\nAlso turns a few `box` into `Box::new`", "tree": {"sha": "add1e02ea12e9f289105a7f0dd141d72723d02a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/add1e02ea12e9f289105a7f0dd141d72723d02a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9971c5cba0a141d3f00737292a40e3cacf44ac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9971c5cba0a141d3f00737292a40e3cacf44ac0", "html_url": "https://github.com/rust-lang/rust/commit/f9971c5cba0a141d3f00737292a40e3cacf44ac0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9971c5cba0a141d3f00737292a40e3cacf44ac0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "095963f91d525951cb0183648c47c427fb69f16d", "url": "https://api.github.com/repos/rust-lang/rust/commits/095963f91d525951cb0183648c47c427fb69f16d", "html_url": "https://github.com/rust-lang/rust/commit/095963f91d525951cb0183648c47c427fb69f16d"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "98a3e695fa0797bddf7fa4bcb8fbb554a0ee21a4", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f9971c5cba0a141d3f00737292a40e3cacf44ac0/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9971c5cba0a141d3f00737292a40e3cacf44ac0/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=f9971c5cba0a141d3f00737292a40e3cacf44ac0", "patch": "@@ -6,18 +6,11 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(bool_to_option)]\n-#![feature(box_patterns)]\n-#![feature(box_syntax)]\n #![feature(const_cstr_unchecked)]\n #![feature(crate_visibility_modifier)]\n #![feature(extern_types)]\n #![feature(in_band_lifetimes)]\n-#![feature(libc)]\n #![feature(nll)]\n-#![feature(optin_builtin_traits)]\n-#![feature(concat_idents)]\n-#![feature(link_args)]\n-#![feature(static_nobundle)]\n #![feature(trusted_len)]\n #![recursion_limit = \"256\"]\n \n@@ -196,7 +189,7 @@ unsafe impl Sync for LlvmCodegenBackend {}\n \n impl LlvmCodegenBackend {\n     pub fn new() -> Box<dyn CodegenBackend> {\n-        box LlvmCodegenBackend(())\n+        Box::new(LlvmCodegenBackend(()))\n     }\n }\n \n@@ -245,7 +238,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n     }\n \n     fn metadata_loader(&self) -> Box<MetadataLoaderDyn> {\n-        box metadata::LlvmMetadataLoader\n+        Box::new(metadata::LlvmMetadataLoader)\n     }\n \n     fn provide(&self, providers: &mut ty::query::Providers<'_>) {\n@@ -262,12 +255,12 @@ impl CodegenBackend for LlvmCodegenBackend {\n         metadata: EncodedMetadata,\n         need_metadata_module: bool,\n     ) -> Box<dyn Any> {\n-        box rustc_codegen_ssa::base::codegen_crate(\n+        Box::new(rustc_codegen_ssa::base::codegen_crate(\n             LlvmCodegenBackend(()),\n             tcx,\n             metadata,\n             need_metadata_module,\n-        )\n+        ))\n     }\n \n     fn join_codegen("}, {"sha": "36b12f1a7b184a78535ec559a6dae336441ef72d", "filename": "src/librustc_codegen_llvm/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9971c5cba0a141d3f00737292a40e3cacf44ac0/src%2Flibrustc_codegen_llvm%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9971c5cba0a141d3f00737292a40e3cacf44ac0/src%2Flibrustc_codegen_llvm%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmetadata.rs?ref=f9971c5cba0a141d3f00737292a40e3cacf44ac0", "patch": "@@ -22,7 +22,7 @@ impl MetadataLoader for LlvmMetadataLoader {\n         // Use ArchiveRO for speed here, it's backed by LLVM and uses mmap\n         // internally to read the file. We also avoid even using a memcpy by\n         // just keeping the archive along while the metadata is in use.\n-        let archive = ArchiveRO::open(filename).map(|ar| OwningRef::new(box ar)).map_err(|e| {\n+        let archive = ArchiveRO::open(filename).map(|ar| OwningRef::new(Box::new(ar))).map_err(|e| {\n             debug!(\"llvm didn't like `{}`: {}\", filename.display(), e);\n             format!(\"failed to read rlib metadata in '{}': {}\", filename.display(), e)\n         })?;\n@@ -44,7 +44,7 @@ impl MetadataLoader for LlvmMetadataLoader {\n             let buf = path_to_c_string(filename);\n             let mb = llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf.as_ptr())\n                 .ok_or_else(|| format!(\"error reading library: '{}'\", filename.display()))?;\n-            let of = ObjectFile::new(mb).map(|of| OwningRef::new(box of)).ok_or_else(|| {\n+            let of = ObjectFile::new(mb).map(|of| OwningRef::new(Box::new(of))).ok_or_else(|| {\n                 format!(\"provided path not an object file: '{}'\", filename.display())\n             })?;\n             let buf = of.try_map(|of| search_meta_section(of, target, filename))?;"}]}