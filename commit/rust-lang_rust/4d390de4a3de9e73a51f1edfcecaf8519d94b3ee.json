{"sha": "4d390de4a3de9e73a51f1edfcecaf8519d94b3ee", "node_id": "C_kwDOAAsO6NoAKDRkMzkwZGU0YTNkZTllNzNhNTFmMWVkZmNlY2FmODUxOWQ5NGIzZWU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-11T16:02:20Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-30T08:52:25Z"}, "message": "Add a helper function for checking whether a default function in a trait can be treated as `const`", "tree": {"sha": "a8346c48e62d287cbf50406924bbc923d509473b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8346c48e62d287cbf50406924bbc923d509473b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d390de4a3de9e73a51f1edfcecaf8519d94b3ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d390de4a3de9e73a51f1edfcecaf8519d94b3ee", "html_url": "https://github.com/rust-lang/rust/commit/4d390de4a3de9e73a51f1edfcecaf8519d94b3ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d390de4a3de9e73a51f1edfcecaf8519d94b3ee/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "257f06587c7cb271517ca9a02c4ed3fd4581f71e", "url": "https://api.github.com/repos/rust-lang/rust/commits/257f06587c7cb271517ca9a02c4ed3fd4581f71e", "html_url": "https://github.com/rust-lang/rust/commit/257f06587c7cb271517ca9a02c4ed3fd4581f71e"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "ac529bf152f2ba448a0cc07ae3bf9a3b618a9f4e", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d390de4a3de9e73a51f1edfcecaf8519d94b3ee/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d390de4a3de9e73a51f1edfcecaf8519d94b3ee/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=4d390de4a3de9e73a51f1edfcecaf8519d94b3ee", "patch": "@@ -278,8 +278,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n             // at all.\n             if !ecx.tcx.is_const_fn_raw(def.did) {\n                 // allow calling functions inside a trait marked with #[const_trait].\n-                if !matches!(ecx.tcx.trait_of_item(def.did), Some(trait_id) if ecx.tcx.has_attr(trait_id, sym::const_trait))\n-                {\n+                if !ecx.tcx.is_const_default_method(def.did) {\n                     // We certainly do *not* want to actually call the fn\n                     // though, so be sure we return here.\n                     throw_unsup_format!(\"calling non-const function `{}`\", instance)"}, {"sha": "458f733df10e03c199db151d8a769096a4def53b", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d390de4a3de9e73a51f1edfcecaf8519d94b3ee/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d390de4a3de9e73a51f1edfcecaf8519d94b3ee/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=4d390de4a3de9e73a51f1edfcecaf8519d94b3ee", "patch": "@@ -872,13 +872,11 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                 let is_intrinsic = tcx.is_intrinsic(callee);\n \n                 if !tcx.is_const_fn_raw(callee) {\n-                    if tcx.trait_of_item(callee).is_some() {\n-                        if let Some(callee_trait) = tcx.trait_of_item(callee) && tcx.has_attr(callee_trait, sym::const_trait) {\n-                            // To get to here we must have already found a const impl for the\n-                            // trait, but for it to still be non-const can be that the impl is\n-                            // using default method bodies.\n-                            nonconst_call_permission = true;\n-                        }\n+                    if tcx.is_const_default_method(callee) {\n+                        // To get to here we must have already found a const impl for the\n+                        // trait, but for it to still be non-const can be that the impl is\n+                        // using default method bodies.\n+                        nonconst_call_permission = true;\n                     }\n \n                     if !nonconst_call_permission {"}, {"sha": "25b420bed1766b2d999d3de8ddde4498400ca246", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d390de4a3de9e73a51f1edfcecaf8519d94b3ee/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d390de4a3de9e73a51f1edfcecaf8519d94b3ee/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=4d390de4a3de9e73a51f1edfcecaf8519d94b3ee", "patch": "@@ -9,7 +9,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::mir;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_span::{sym, Symbol};\n+use rustc_span::Symbol;\n \n pub use self::qualifs::Qualif;\n \n@@ -87,7 +87,7 @@ pub fn is_const_stable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     // A default body in a `#[const_trait]` is not const-stable because const\n     // trait fns currently cannot be const-stable. We shouldn't\n     // restrict default bodies to only call const-stable functions.\n-    if let Some(trait_id) = tcx.trait_of_item(def_id) && tcx.has_attr(trait_id, sym::const_trait) {\n+    if tcx.is_const_default_method(def_id) {\n         return false;\n     }\n "}, {"sha": "dad5247b2c4b6abdc63ae2c09ef0049be9281a78", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d390de4a3de9e73a51f1edfcecaf8519d94b3ee/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d390de4a3de9e73a51f1edfcecaf8519d94b3ee/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=4d390de4a3de9e73a51f1edfcecaf8519d94b3ee", "patch": "@@ -892,10 +892,8 @@ fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {\n                 || tcx.codegen_fn_attrs(def_id).requests_inline())\n                 && tcx.sess.opts.output_types.should_codegen();\n             // The function has a `const` modifier or is in a `#[const_trait]`.\n-            let mut is_const_fn = tcx.is_const_fn_raw(def_id.to_def_id());\n-            if let Some(trait_) = tcx.trait_of_item(def_id.to_def_id()) {\n-                is_const_fn = is_const_fn || tcx.has_attr(trait_, sym::const_trait);\n-            }\n+            let is_const_fn = tcx.is_const_fn_raw(def_id.to_def_id())\n+                || tcx.is_const_default_method(def_id.to_def_id());\n             let always_encode_mir = tcx.sess.opts.debugging_opts.always_encode_mir;\n             (is_const_fn, needs_inline || always_encode_mir)\n         }"}, {"sha": "97f429cfd3fa6df2ec2b7d6c70df1e8088002b1a", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d390de4a3de9e73a51f1edfcecaf8519d94b3ee/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d390de4a3de9e73a51f1edfcecaf8519d94b3ee/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=4d390de4a3de9e73a51f1edfcecaf8519d94b3ee", "patch": "@@ -494,7 +494,7 @@ impl<'hir> Map<'hir> {\n             BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(def_id.to_def_id()) => {\n                 ConstContext::ConstFn\n             }\n-            BodyOwnerKind::Fn if matches!(self.tcx.trait_of_item(def_id.to_def_id()), Some(trait_id) if self.tcx.has_attr(trait_id, sym::const_trait)) => {\n+            BodyOwnerKind::Fn if self.tcx.is_const_default_method(def_id.to_def_id()) => {\n                 ConstContext::ConstFn\n             }\n             BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,"}, {"sha": "831a788343d4acd870f9e1a98386936f53eb8ac4", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d390de4a3de9e73a51f1edfcecaf8519d94b3ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d390de4a3de9e73a51f1edfcecaf8519d94b3ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=4d390de4a3de9e73a51f1edfcecaf8519d94b3ee", "patch": "@@ -2301,6 +2301,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         matches!(self.def_kind(def_id), DefKind::Fn | DefKind::AssocFn | DefKind::Ctor(..))\n             && self.impl_constness(def_id) == hir::Constness::Const\n     }\n+\n+    #[inline]\n+    pub fn is_const_default_method(self, def_id: DefId) -> bool {\n+        matches!(self.trait_of_item(def_id), Some(trait_id) if self.has_attr(trait_id, sym::const_trait))\n+    }\n }\n \n /// Yields the parent function's `LocalDefId` if `def_id` is an `impl Trait` definition."}, {"sha": "a18ddd42183aa11530969f613440e9521e115ef1", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d390de4a3de9e73a51f1edfcecaf8519d94b3ee/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d390de4a3de9e73a51f1edfcecaf8519d94b3ee/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=4d390de4a3de9e73a51f1edfcecaf8519d94b3ee", "patch": "@@ -5,7 +5,7 @@ use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{\n     self, Binder, EarlyBinder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt,\n };\n-use rustc_span::{sym, Span};\n+use rustc_span::Span;\n use rustc_trait_selection::traits;\n \n fn sized_constraint_for_ty<'tcx>(\n@@ -152,7 +152,9 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n \n     let constness = match hir_id {\n         Some(hir_id) => match tcx.hir().get(hir_id) {\n-            hir::Node::TraitItem(hir::TraitItem { kind: hir::TraitItemKind::Fn(..), .. }) if matches!(tcx.trait_of_item(def_id), Some(trait_id) if tcx.has_attr(trait_id, sym::const_trait)) => {\n+            hir::Node::TraitItem(hir::TraitItem { kind: hir::TraitItemKind::Fn(..), .. })\n+                if tcx.is_const_default_method(def_id) =>\n+            {\n                 hir::Constness::Const\n             }\n "}]}