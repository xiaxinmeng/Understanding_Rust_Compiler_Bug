{"sha": "111fbe7921a7de649a9b76b3f247fc8762217819", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMWZiZTc5MjFhN2RlNjQ5YTliNzZiM2YyNDdmYzg3NjIyMTc4MTk=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-03-03T19:39:11Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-03-03T19:39:11Z"}, "message": "Let `-Crelocation-model` better control `-pie` linking\n\nPrior to this, if relocation model in the target options was \"pic\", as\nmost targets have it, then the user's `-Crelocation-model` had no effect\non whether `-pie` would be used.  Only `-Clink-arg=-static` would have a\nfurther override here.\n\nNow we use `context::get_reloc_model`, which gives precedence to the\nuser's option, and if it's `RelocMode::PIC` we enable `-pie`.  This is\nthe same test as `context::is_pie_binary`, except that folds across all\n`sess.crate_types`, not just the current one.", "tree": {"sha": "a1cc5206bc301cef503184d3f1f0f7f492e2ecb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1cc5206bc301cef503184d3f1f0f7f492e2ecb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/111fbe7921a7de649a9b76b3f247fc8762217819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/111fbe7921a7de649a9b76b3f247fc8762217819", "html_url": "https://github.com/rust-lang/rust/commit/111fbe7921a7de649a9b76b3f247fc8762217819", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/111fbe7921a7de649a9b76b3f247fc8762217819/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0b514524fed8c8cca369a51feece8be50f8b82b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0b514524fed8c8cca369a51feece8be50f8b82b", "html_url": "https://github.com/rust-lang/rust/commit/f0b514524fed8c8cca369a51feece8be50f8b82b"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "b58f96033bf5b5dc2404c31657ac89dda25ea00e", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/111fbe7921a7de649a9b76b3f247fc8762217819/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111fbe7921a7de649a9b76b3f247fc8762217819/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=111fbe7921a7de649a9b76b3f247fc8762217819", "patch": "@@ -31,6 +31,8 @@ use rustc::hir::svh::Svh;\n use rustc_back::tempdir::TempDir;\n use rustc_back::PanicStrategy;\n use rustc_incremental::IncrementalHashesMap;\n+use context::get_reloc_model;\n+use llvm;\n \n use std::ascii;\n use std::char;\n@@ -859,13 +861,11 @@ fn link_args(cmd: &mut Linker,\n     if crate_type == config::CrateTypeExecutable &&\n        t.options.position_independent_executables {\n         let empty_vec = Vec::new();\n-        let empty_str = String::new();\n         let args = sess.opts.cg.link_args.as_ref().unwrap_or(&empty_vec);\n         let more_args = &sess.opts.cg.link_arg;\n         let mut args = args.iter().chain(more_args.iter()).chain(used_link_args.iter());\n-        let relocation_model = sess.opts.cg.relocation_model.as_ref()\n-                                   .unwrap_or(&empty_str);\n-        if (t.options.relocation_model == \"pic\" || *relocation_model == \"pic\")\n+\n+        if get_reloc_model(sess) == llvm::RelocMode::PIC\n             && !args.any(|x| *x == \"-static\") {\n             cmd.position_independent_executable();\n         }"}]}