{"sha": "be0e77837a1abaf5668bd247ed683ccabb293f16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMGU3NzgzN2ExYWJhZjU2NjhiZDI0N2VkNjgzY2NhYmIyOTNmMTY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-29T10:38:56Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-01T09:24:16Z"}, "message": "use `WorkQueue` to track dirty bits in liveness", "tree": {"sha": "6b73bfe8f491d718d4add4100c6a045b5555f55d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b73bfe8f491d718d4add4100c6a045b5555f55d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be0e77837a1abaf5668bd247ed683ccabb293f16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be0e77837a1abaf5668bd247ed683ccabb293f16", "html_url": "https://github.com/rust-lang/rust/commit/be0e77837a1abaf5668bd247ed683ccabb293f16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be0e77837a1abaf5668bd247ed683ccabb293f16/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "388ff03248f15b6266f8614e1a3f10e28fcbb1e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/388ff03248f15b6266f8614e1a3f10e28fcbb1e3", "html_url": "https://github.com/rust-lang/rust/commit/388ff03248f15b6266f8614e1a3f10e28fcbb1e3"}], "stats": {"total": 41, "additions": 24, "deletions": 17}, "files": [{"sha": "938eb72654abce2d426c2fc87a1b532b0fd50fba", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/be0e77837a1abaf5668bd247ed683ccabb293f16/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0e77837a1abaf5668bd247ed683ccabb293f16/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=be0e77837a1abaf5668bd247ed683ccabb293f16", "patch": "@@ -37,6 +37,7 @@ use rustc::mir::*;\n use rustc::mir::visit::{PlaceContext, Visitor};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::indexed_set::IdxSetBuf;\n+use rustc_data_structures::work_queue::WorkQueue;\n use util::pretty::{dump_enabled, write_basic_block, write_mir_intro};\n use rustc::ty::item_path;\n use rustc::mir::visit::MirVisitable;\n@@ -130,26 +131,32 @@ pub fn liveness_of_locals<'tcx>(mir: &Mir<'tcx>, mode: LivenessMode) -> Liveness\n         .collect();\n     let mut outs = ins.clone();\n \n-    let mut changed = true;\n     let mut bits = LocalSet::new_empty(locals);\n-    while changed {\n-        changed = false;\n-\n-        for b in mir.basic_blocks().indices().rev() {\n-            // outs[b] = \u222a {ins of successors}\n-            bits.clear();\n-            for &successor in mir.basic_blocks()[b].terminator().successors() {\n-                bits.union(&ins[successor]);\n-            }\n-            outs[b].overwrite(&bits);\n \n-            // bits = use \u222a (bits - def)\n-            def_use[b].apply(&mut bits);\n+    // queue of things that need to be re-processed, and a set containing\n+    // the things currently in the queue\n+    let mut dirty_queue: WorkQueue<BasicBlock> = WorkQueue::with_all(mir.basic_blocks().len());\n+\n+    let predecessors = mir.predecessors();\n+\n+    while let Some(bb) = dirty_queue.pop() {\n+        // outs[b] = \u222a {ins of successors}\n+        bits.clear();\n+        for &successor in mir[bb].terminator().successors() {\n+            bits.union(&ins[successor]);\n+        }\n+        outs[bb].overwrite(&bits);\n+\n+        // bits = use \u222a (bits - def)\n+        def_use[bb].apply(&mut bits);\n+\n+        // update bits on entry and, if they have changed, enqueue all\n+        // of our predecessors, since their inputs have now changed\n+        if ins[bb] != bits {\n+            ins[bb].overwrite(&bits);\n \n-            // update bits on entry and flag if they have changed\n-            if ins[b] != bits {\n-                ins[b].overwrite(&bits);\n-                changed = true;\n+            for &pred_bb in &predecessors[bb] {\n+                dirty_queue.insert(pred_bb);\n             }\n         }\n     }"}]}