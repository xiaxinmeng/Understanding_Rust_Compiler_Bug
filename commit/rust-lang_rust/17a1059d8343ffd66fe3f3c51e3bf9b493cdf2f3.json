{"sha": "17a1059d8343ffd66fe3f3c51e3bf9b493cdf2f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YTEwNTlkODM0M2ZmZDY2ZmUzZjNjNTFlM2JmOWI0OTNjZGYyZjM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-11T01:45:48Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-17T16:07:16Z"}, "message": "std: Stabilize the `iter_{once,empty}` features\n\nThis commit stabilizes these two iterator primitives as they have gone through\nthe RFC process and had some time to bake now.", "tree": {"sha": "b9d1230c835c1ce6117767a66ff970027e56ac47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9d1230c835c1ce6117767a66ff970027e56ac47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17a1059d8343ffd66fe3f3c51e3bf9b493cdf2f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17a1059d8343ffd66fe3f3c51e3bf9b493cdf2f3", "html_url": "https://github.com/rust-lang/rust/commit/17a1059d8343ffd66fe3f3c51e3bf9b493cdf2f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17a1059d8343ffd66fe3f3c51e3bf9b493cdf2f3/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3580879b90f451b24b9d6008f571745fc6cbd6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3580879b90f451b24b9d6008f571745fc6cbd6c", "html_url": "https://github.com/rust-lang/rust/commit/f3580879b90f451b24b9d6008f571745fc6cbd6c"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "2f45ffd14182089d1e91a8c65e1236f7b9c43957", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/17a1059d8343ffd66fe3f3c51e3bf9b493cdf2f3/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a1059d8343ffd66fe3f3c51e3bf9b493cdf2f3/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=17a1059d8343ffd66fe3f3c51e3bf9b493cdf2f3", "patch": "@@ -3043,10 +3043,10 @@ pub fn repeat<T: Clone>(elt: T) -> Repeat<T> {\n }\n \n /// An iterator that yields nothing.\n-#[unstable(feature=\"iter_empty\", reason = \"new addition\")]\n+#[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n pub struct Empty<T>(marker::PhantomData<T>);\n \n-#[unstable(feature=\"iter_empty\", reason = \"new addition\")]\n+#[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n impl<T> Iterator for Empty<T> {\n     type Item = T;\n \n@@ -3059,14 +3059,14 @@ impl<T> Iterator for Empty<T> {\n     }\n }\n \n-#[unstable(feature=\"iter_empty\", reason = \"new addition\")]\n+#[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n impl<T> DoubleEndedIterator for Empty<T> {\n     fn next_back(&mut self) -> Option<T> {\n         None\n     }\n }\n \n-#[unstable(feature=\"iter_empty\", reason = \"new addition\")]\n+#[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n impl<T> ExactSizeIterator for Empty<T> {\n     fn len(&self) -> usize {\n         0\n@@ -3075,7 +3075,7 @@ impl<T> ExactSizeIterator for Empty<T> {\n \n // not #[derive] because that adds a Clone bound on T,\n // which isn't necessary.\n-#[unstable(feature=\"iter_empty\", reason = \"new addition\")]\n+#[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n impl<T> Clone for Empty<T> {\n     fn clone(&self) -> Empty<T> {\n         Empty(marker::PhantomData)\n@@ -3084,27 +3084,27 @@ impl<T> Clone for Empty<T> {\n \n // not #[derive] because that adds a Default bound on T,\n // which isn't necessary.\n-#[unstable(feature=\"iter_empty\", reason = \"new addition\")]\n+#[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n impl<T> Default for Empty<T> {\n     fn default() -> Empty<T> {\n         Empty(marker::PhantomData)\n     }\n }\n \n /// Creates an iterator that yields nothing.\n-#[unstable(feature=\"iter_empty\", reason = \"new addition\")]\n+#[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n pub fn empty<T>() -> Empty<T> {\n     Empty(marker::PhantomData)\n }\n \n /// An iterator that yields an element exactly once.\n #[derive(Clone)]\n-#[unstable(feature=\"iter_once\", reason = \"new addition\")]\n+#[stable(feature = \"iter_once\", since = \"1.2.0\")]\n pub struct Once<T> {\n     inner: ::option::IntoIter<T>\n }\n \n-#[unstable(feature=\"iter_once\", reason = \"new addition\")]\n+#[stable(feature = \"iter_once\", since = \"1.2.0\")]\n impl<T> Iterator for Once<T> {\n     type Item = T;\n \n@@ -3117,22 +3117,22 @@ impl<T> Iterator for Once<T> {\n     }\n }\n \n-#[unstable(feature=\"iter_once\", reason = \"new addition\")]\n+#[stable(feature = \"iter_once\", since = \"1.2.0\")]\n impl<T> DoubleEndedIterator for Once<T> {\n     fn next_back(&mut self) -> Option<T> {\n         self.inner.next_back()\n     }\n }\n \n-#[unstable(feature=\"iter_once\", reason = \"new addition\")]\n+#[stable(feature = \"iter_once\", since = \"1.2.0\")]\n impl<T> ExactSizeIterator for Once<T> {\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n \n /// Creates an iterator that yields an element exactly once.\n-#[unstable(feature=\"iter_once\", reason = \"new addition\")]\n+#[stable(feature = \"iter_once\", since = \"1.2.0\")]\n pub fn once<T>(value: T) -> Once<T> {\n     Once { inner: Some(value).into_iter() }\n }"}]}