{"sha": "8af4e096054bc97866feb9ac34a3cc11310d9d41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZjRlMDk2MDU0YmM5Nzg2NmZlYjlhYzM0YTNjYzExMzEwZDlkNDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-09T14:55:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-09T14:55:33Z"}, "message": "Auto merge of #4458 - flip1995:block_in_if_ext_macro, r=phansch\n\nAllow block_in_if_{stmt,expr} in external macro\n\nI found this by running `cargo fix --clippy` on quite a big codebase.\n\nYou could refactor this assert to\n```rust\nlet block_expr = _;\nassert!(block_expr);\n```\n\nbut,\n1. it doesn't increase the readability IMO\n2. That isn't possible in a `debug_assert!`\n\nI'm not sure though, if we should allow this for macros in general or just for external macros.\n\nchangelog: Allow `block_in_if_{stmt,expr}` in external macros", "tree": {"sha": "674fa413c112c14b63c87fb23e787ab51410daf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/674fa413c112c14b63c87fb23e787ab51410daf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8af4e096054bc97866feb9ac34a3cc11310d9d41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8af4e096054bc97866feb9ac34a3cc11310d9d41", "html_url": "https://github.com/rust-lang/rust/commit/8af4e096054bc97866feb9ac34a3cc11310d9d41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8af4e096054bc97866feb9ac34a3cc11310d9d41/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "144d940c2fc1055fd9e2bcbd0bd21bf5591a5381", "url": "https://api.github.com/repos/rust-lang/rust/commits/144d940c2fc1055fd9e2bcbd0bd21bf5591a5381", "html_url": "https://github.com/rust-lang/rust/commit/144d940c2fc1055fd9e2bcbd0bd21bf5591a5381"}, {"sha": "e7d8cf85117c680f3e6dccc87b210a85512b9850", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7d8cf85117c680f3e6dccc87b210a85512b9850", "html_url": "https://github.com/rust-lang/rust/commit/e7d8cf85117c680f3e6dccc87b210a85512b9850"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "f9660ce5efed7954260f531a1767a7b9ec6a6a88", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8af4e096054bc97866feb9ac34a3cc11310d9d41/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af4e096054bc97866feb9ac34a3cc11310d9d41/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=8af4e096054bc97866feb9ac34a3cc11310d9d41", "patch": "@@ -2,7 +2,7 @@ use crate::utils::*;\n use matches::matches;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -72,6 +72,9 @@ const COMPLEX_BLOCK_MESSAGE: &str = \"in an 'if' condition, avoid complex blocks\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if in_external_macro(cx.sess(), expr.span) {\n+            return;\n+        }\n         if let Some((check, then, _)) = higher::if_block(&expr) {\n             if let ExprKind::Block(block, _) = &check.node {\n                 if block.rules == DefaultBlock {"}, {"sha": "50f238814a31e4f366b127feb5c40c107131484d", "filename": "tests/ui/block_in_if_condition.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8af4e096054bc97866feb9ac34a3cc11310d9d41/tests%2Fui%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af4e096054bc97866feb9ac34a3cc11310d9d41/tests%2Fui%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition.rs?ref=8af4e096054bc97866feb9ac34a3cc11310d9d41", "patch": "@@ -103,3 +103,15 @@ fn macro_in_closure() {\n         unimplemented!()\n     }\n }\n+\n+fn block_in_assert() {\n+    let opt = Some(42);\n+    assert!(opt\n+        .as_ref()\n+        .and_then(|val| {\n+            let mut v = val * 2;\n+            v -= 1;\n+            Some(v * 3)\n+        })\n+        .is_some());\n+}"}]}