{"sha": "b5c70e92f326ba4edd11432920f11730b7f4e05e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YzcwZTkyZjMyNmJhNGVkZDExNDMyOTIwZjExNzMwYjdmNGUwNWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-18T05:48:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-18T05:48:20Z"}, "message": "Auto merge of #911 - RalfJung:typed-op, r=RalfJung\n\nAdjust for typed binops", "tree": {"sha": "7a28c4bdd5bafe8b29087b5e5e5057f89ed384bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a28c4bdd5bafe8b29087b5e5e5057f89ed384bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5c70e92f326ba4edd11432920f11730b7f4e05e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5c70e92f326ba4edd11432920f11730b7f4e05e", "html_url": "https://github.com/rust-lang/rust/commit/b5c70e92f326ba4edd11432920f11730b7f4e05e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5c70e92f326ba4edd11432920f11730b7f4e05e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfd6181d3477563777ff0a5403a40caac538215b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfd6181d3477563777ff0a5403a40caac538215b", "html_url": "https://github.com/rust-lang/rust/commit/bfd6181d3477563777ff0a5403a40caac538215b"}, {"sha": "d7ff7ccbad89c4fe9eb84b3b22f4b994f7f169a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7ff7ccbad89c4fe9eb84b3b22f4b994f7f169a0", "html_url": "https://github.com/rust-lang/rust/commit/d7ff7ccbad89c4fe9eb84b3b22f4b994f7f169a0"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "f90b8945180fe35f236ec38ff1390458da99bf42", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5c70e92f326ba4edd11432920f11730b7f4e05e/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/b5c70e92f326ba4edd11432920f11730b7f4e05e/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=b5c70e92f326ba4edd11432920f11730b7f4e05e", "patch": "@@ -1 +1 @@\n-1cdcea920e56a5d0587307a4c9cf8fff5c77c4bc\n+2111aed0a38c819acb140c7153e9366964a37f2f"}, {"sha": "9d50c77c7c4c4ef8a16040826f00ec25e383245e", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5c70e92f326ba4edd11432920f11730b7f4e05e/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c70e92f326ba4edd11432920f11730b7f4e05e/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=b5c70e92f326ba4edd11432920f11730b7f4e05e", "patch": "@@ -10,7 +10,7 @@ use rand::rngs::StdRng;\n use syntax::attr;\n use syntax::symbol::sym;\n use rustc::hir::def_id::DefId;\n-use rustc::ty::{self, layout::{Size, LayoutOf}, TyCtxt};\n+use rustc::ty::{self, Ty, TyCtxt, layout::{Size, LayoutOf}};\n use rustc::mir;\n \n use crate::*;\n@@ -191,7 +191,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         bin_op: mir::BinOp,\n         left: ImmTy<'tcx, Tag>,\n         right: ImmTy<'tcx, Tag>,\n-    ) -> InterpResult<'tcx, (Scalar<Tag>, bool)> {\n+    ) -> InterpResult<'tcx, (Scalar<Tag>, bool, Ty<'tcx>)> {\n         ecx.binary_ptr_op(bin_op, left, right)\n     }\n "}, {"sha": "45bf1e453744cb26f723495b989b6934537889b9", "filename": "src/operator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b5c70e92f326ba4edd11432920f11730b7f4e05e/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c70e92f326ba4edd11432920f11730b7f4e05e/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=b5c70e92f326ba4edd11432920f11730b7f4e05e", "patch": "@@ -14,7 +14,7 @@ pub trait EvalContextExt<'tcx> {\n         bin_op: mir::BinOp,\n         left: ImmTy<'tcx, Tag>,\n         right: ImmTy<'tcx, Tag>,\n-    ) -> InterpResult<'tcx, (Scalar<Tag>, bool)>;\n+    ) -> InterpResult<'tcx, (Scalar<Tag>, bool, Ty<'tcx>)>;\n \n     fn ptr_eq(\n         &self,\n@@ -43,7 +43,7 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n         bin_op: mir::BinOp,\n         left: ImmTy<'tcx, Tag>,\n         right: ImmTy<'tcx, Tag>,\n-    ) -> InterpResult<'tcx, (Scalar<Tag>, bool)> {\n+    ) -> InterpResult<'tcx, (Scalar<Tag>, bool, Ty<'tcx>)> {\n         use rustc::mir::BinOp::*;\n \n         trace!(\"ptr_op: {:?} {:?} {:?}\", *left, bin_op, *right);\n@@ -59,7 +59,7 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n                         self.ptr_eq(left2.not_undef()?, right2.not_undef()?)?,\n                     _ => bug!(\"Type system should not allow comparing Scalar with ScalarPair\"),\n                 };\n-                (Scalar::from_bool(if bin_op == Eq { eq } else { !eq }), false)\n+                (Scalar::from_bool(if bin_op == Eq { eq } else { !eq }), false, self.tcx.types.bool)\n             }\n \n             Lt | Le | Gt | Ge => {\n@@ -74,7 +74,7 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n                     Ge => left >= right,\n                     _ => bug!(\"We already established it has to be one of these operators.\"),\n                 };\n-                (Scalar::from_bool(res), false)\n+                (Scalar::from_bool(res), false, self.tcx.types.bool)\n             }\n \n             Offset => {\n@@ -87,7 +87,7 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n                     pointee_ty,\n                     right.to_scalar()?.to_isize(self)?,\n                 )?;\n-                (ptr, false)\n+                (ptr, false, left.layout.ty)\n             }\n \n             _ => bug!(\"Invalid operator on pointers: {:?}\", bin_op)"}, {"sha": "8656962761713c08e11d7a0ff9a223d98554e6ce", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b5c70e92f326ba4edd11432920f11730b7f4e05e/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c70e92f326ba4edd11432920f11730b7f4e05e/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=b5c70e92f326ba4edd11432920f11730b7f4e05e", "patch": "@@ -5,7 +5,7 @@ use rustc::ty::layout::{self, LayoutOf, Size, Align};\n use rustc::ty;\n \n use crate::{\n-    PlaceTy, OpTy, ImmTy, Immediate, Scalar, Tag,\n+    PlaceTy, OpTy, Immediate, Scalar, Tag,\n     OperatorEvalContextExt\n };\n \n@@ -120,7 +120,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.memory().check_ptr_access(place.ptr, place.layout.size, align)?;\n \n                 // binary_op will bail if either of them is not a scalar\n-                let (eq, _) = this.binary_op(mir::BinOp::Eq, old, expect_old)?;\n+                let eq = this.overflowing_binary_op(mir::BinOp::Eq, old, expect_old)?.0;\n                 let res = Immediate::ScalarPair(old.to_scalar_or_undef(), eq.into());\n                 this.write_immediate(res, dest)?; // old value is returned\n                 // update ptr depending on comparison\n@@ -183,13 +183,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     _ => bug!(),\n                 };\n                 // Atomics wrap around on overflow.\n-                let (val, _overflowed) = this.binary_op(op, old, rhs)?;\n+                let val = this.binary_op(op, old, rhs)?;\n                 let val = if neg {\n-                    this.unary_op(mir::UnOp::Not, ImmTy::from_scalar(val, old.layout))?\n+                    this.unary_op(mir::UnOp::Not, val)?\n                 } else {\n                     val\n                 };\n-                this.write_scalar(val, place.into())?;\n+                this.write_immediate(*val, place.into())?;\n             }\n \n             \"breakpoint\" => unimplemented!(), // halt miri\n@@ -312,7 +312,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let a = this.read_immediate(args[0])?;\n                 let b = this.read_immediate(args[1])?;\n                 // check x % y != 0\n-                if this.binary_op(mir::BinOp::Rem, a, b)?.0.to_bits(dest.layout.size)? != 0 {\n+                if this.overflowing_binary_op(mir::BinOp::Rem, a, b)?.0.to_bits(dest.layout.size)? != 0 {\n                     // Check if `b` is -1, which is the \"min_value / -1\" case.\n                     let minus1 = Scalar::from_int(-1, dest.layout.size);\n                     return Err(if b.to_scalar().unwrap() == minus1 {\n@@ -515,7 +515,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     \"unchecked_mul\" => mir::BinOp::Mul,\n                     _ => bug!(),\n                 };\n-                let (res, overflowed) = this.binary_op(op, l, r)?;\n+                let (res, overflowed, _ty) = this.overflowing_binary_op(op, l, r)?;\n                 if overflowed {\n                     throw_ub_format!(\"Overflowing arithmetic in {}\", intrinsic_name.get());\n                 }"}]}