{"sha": "656a2af98975edea682831c8483ac534cec7825a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NmEyYWY5ODk3NWVkZWE2ODI4MzFjODQ4M2FjNTM0Y2VjNzgyNWE=", "commit": {"author": {"name": "Elly Jones", "email": "elly@leptoquark.net", "date": "2011-11-07T23:24:44Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-07T23:44:43Z"}, "message": "json: betterify for brson\n\nSigned-off-by: Elly Jones <ellyjones@google.com>", "tree": {"sha": "53cd94aadc83c374a739221db12f89e33c311a27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53cd94aadc83c374a739221db12f89e33c311a27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/656a2af98975edea682831c8483ac534cec7825a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/656a2af98975edea682831c8483ac534cec7825a", "html_url": "https://github.com/rust-lang/rust/commit/656a2af98975edea682831c8483ac534cec7825a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/656a2af98975edea682831c8483ac534cec7825a/comments", "author": null, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd7262624ca7b396cfb254dc638f62d07e381681", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd7262624ca7b396cfb254dc638f62d07e381681", "html_url": "https://github.com/rust-lang/rust/commit/bd7262624ca7b396cfb254dc638f62d07e381681"}], "stats": {"total": 199, "additions": 106, "deletions": 93}, "files": [{"sha": "2fa38da2c1011b9b7a77e9f45ad512477fe664a4", "filename": "src/lib/json.rs", "status": "modified", "additions": 50, "deletions": 86, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/656a2af98975edea682831c8483ac534cec7825a/src%2Flib%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656a2af98975edea682831c8483ac534cec7825a/src%2Flib%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fjson.rs?ref=656a2af98975edea682831c8483ac534cec7825a", "patch": "@@ -1,10 +1,5 @@\n-#[link(name = \"json\",\n-       vers = \"0.1\",\n-       uuid = \"09d7f2fc-1fad-48b2-9f9d-a65512342f16\",\n-       url = \"http://www.leptoquark.net/~elly/rust/\")];\n-#[copyright = \"Google Inc. 2011\"];\n-#[comment = \"JSON serialization format library\"];\n-#[license = \"BSD\"];\n+// Rust JSON serialization library\n+// Copyright (c) 2011 Google Inc.\n \n import float;\n import map;\n@@ -14,18 +9,39 @@ import str;\n import vec;\n \n export json;\n-export tostr;\n-export fromstr;\n+export to_str;\n+export from_str;\n \n+export num;\n+export string;\n+export boolean;\n+export list;\n+export dict;\n+\n+/*\n+Tag: json\n+\n+Represents a json value.\n+*/\n tag json {\n+    /* Variant: num */\n     num(float);\n+    /* Variant: string */\n     string(str);\n+    /* Variant: boolean */\n     boolean(bool);\n+    /* Variant: list */\n     list(@[json]);\n+    /* Variant: dict */\n     dict(map::hashmap<str,json>);\n }\n \n-fn tostr(j: json) -> str {\n+/*\n+Function: to_str\n+\n+Serializes a json value into a string.\n+*/\n+fn to_str(j: json) -> str {\n     alt j {\n         num(f) { float::to_str(f, 6u) }\n         string(s) { #fmt[\"\\\"%s\\\"\", s] } // XXX: escape\n@@ -34,15 +50,15 @@ fn tostr(j: json) -> str {\n         list(@js) {\n             str::concat([\"[\",\n                     str::connect(\n-                        vec::map::<json,str>({ |e| tostr(e) }, js),\n+                        vec::map::<json,str>({ |e| to_str(e) }, js),\n                         \", \"),\n                     \"]\"])\n         }\n         dict(m) {\n             let parts = [];\n             m.items({ |k, v|\n                         vec::grow(parts, 1u,\n-                                  str::concat([\"\\\"\", k, \"\\\": \", tostr(v)])\n+                                  str::concat([\"\\\"\", k, \"\\\": \", to_str(v)])\n                         )\n             });\n             str::concat([\"{ \", str::connect(parts, \", \"), \" }\"])\n@@ -51,10 +67,11 @@ fn tostr(j: json) -> str {\n }\n \n fn rest(s: str) -> str {\n+    assert(str::char_len(s) >= 1u);\n     str::char_slice(s, 1u, str::char_len(s))\n }\n \n-fn fromstr_str(s: str) -> (option::t<json>, str) {\n+fn from_str_str(s: str) -> (option::t<json>, str) {\n     let pos = 0u;\n     let len = str::byte_len(s);\n     let escape = false;\n@@ -86,15 +103,15 @@ fn fromstr_str(s: str) -> (option::t<json>, str) {\n     ret (none, s);\n }\n \n-fn fromstr_list(s: str) -> (option::t<json>, str) {\n+fn from_str_list(s: str) -> (option::t<json>, str) {\n     if str::char_at(s, 0u) != '[' { ret (none, s); }\n     let s0 = str::trim_left(rest(s));\n     let vals = [];\n     if str::is_empty(s0) { ret (none, s0); }\n     if str::char_at(s0, 0u) == ']' { ret (some(list(@[])), rest(s0)); }\n     while str::is_not_empty(s0) {\n         s0 = str::trim_left(s0);\n-        let (next, s1) = fromstr_helper(s0);\n+        let (next, s1) = from_str_helper(s0);\n         s0 = s1;\n         alt next {\n             some(j) { vec::grow(vals, 1u, j); }\n@@ -112,15 +129,15 @@ fn fromstr_list(s: str) -> (option::t<json>, str) {\n     ret (none, s0);\n }\n \n-fn fromstr_dict(s: str) -> (option::t<json>, str) {\n+fn from_str_dict(s: str) -> (option::t<json>, str) {\n     if str::char_at(s, 0u) != '{' { ret (none, s); }\n     let s0 = str::trim_left(rest(s));\n     let vals = map::new_str_hash::<json>();\n     if str::is_empty(s0) { ret (none, s0); }\n     if str::char_at(s0, 0u) == '}' { ret (some(dict(vals)), rest(s0)); }\n     while str::is_not_empty(s0) {\n         s0 = str::trim_left(s0);\n-        let (next, s1) = fromstr_helper(s0);    // key\n+        let (next, s1) = from_str_helper(s0);    // key\n         let key = \"\";\n         s0 = s1;\n         alt next {\n@@ -131,7 +148,7 @@ fn fromstr_dict(s: str) -> (option::t<json>, str) {\n         if str::is_empty(s0) { ret (none, s0); }\n         if str::char_at(s0, 0u) != ':' { ret (none, s0); }\n         s0 = str::trim_left(rest(s0));\n-        let (next, s1) = fromstr_helper(s0);    // value\n+        let (next, s1) = from_str_helper(s0);    // value\n         s0 = s1;\n         alt next {\n             some(j) { vals.insert(key, j); }\n@@ -149,7 +166,7 @@ fn fromstr_dict(s: str) -> (option::t<json>, str) {\n     (none, s)\n }\n \n-fn fromstr_float(s: str) -> (option::t<json>, str) {\n+fn from_str_float(s: str) -> (option::t<json>, str) {\n     let pos = 0u;\n     let len = str::byte_len(s);\n     let res = 0f;\n@@ -205,7 +222,7 @@ fn fromstr_float(s: str) -> (option::t<json>, str) {\n     ret (some(num(neg * res)), str::char_slice(s, pos, str::char_len(s)));\n }\n \n-fn fromstr_bool(s: str) -> (option::t<json>, str) {\n+fn from_str_bool(s: str) -> (option::t<json>, str) {\n     if (str::starts_with(s, \"true\")) {\n         (some(boolean(true)), str::slice(s, 4u, str::byte_len(s)))\n     } else if (str::starts_with(s, \"false\")) {\n@@ -215,79 +232,26 @@ fn fromstr_bool(s: str) -> (option::t<json>, str) {\n     }\n }\n \n-fn fromstr_helper(s: str) -> (option::t<json>, str) {\n+fn from_str_helper(s: str) -> (option::t<json>, str) {\n     let s = str::trim_left(s);\n     if str::is_empty(s) { ret (none, s); }\n     let start = str::char_at(s, 0u);\n     alt start {\n-        '\"' { fromstr_str(s) }\n-        '[' { fromstr_list(s) }\n-        '{' { fromstr_dict(s) }\n-        '0' to '9' | '-' | '+' | '.' { fromstr_float(s) }\n-        't' | 'f' { fromstr_bool(s) }\n+        '\"' { from_str_str(s) }\n+        '[' { from_str_list(s) }\n+        '{' { from_str_dict(s) }\n+        '0' to '9' | '-' | '+' | '.' { from_str_float(s) }\n+        't' | 'f' { from_str_bool(s) }\n         _ { ret (none, s); }\n     }\n }\n \n-fn fromstr(s: str) -> option::t<json> {\n-    let (j, _) = fromstr_helper(s);\n-    j\n-}\n-\n-fn main() {\n-    let j = fromstr(\"{ \\\"foo\\\": [ 4, 5 ], \\\"bar\\\": { \\\"baz\\\": true}}\");\n-    alt j {\n-        some(j0) {\n-            log tostr(j0);\n-        }\n-        _ { }\n-    }\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    #[test]\n-    fn test_fromstr_num() {\n-        assert(fromstr(\"3\") == some(num(3f)));\n-        assert(fromstr(\"3.1\") == some(num(3.1f)));\n-        assert(fromstr(\"-1.2\") == some(num(-1.2f)));\n-        assert(fromstr(\".4\") == some(num(0.4f)));\n-    }\n-\n-    #[test]\n-    fn test_fromstr_str() {\n-        assert(fromstr(\"\\\"foo\\\"\") == some(string(\"foo\")));\n-        assert(fromstr(\"\\\"\\\\\\\"\\\"\") == some(string(\"\\\"\")));\n-        assert(fromstr(\"\\\"lol\") == none);\n-    }\n-\n-    #[test]\n-    fn test_fromstr_bool() {\n-        assert(fromstr(\"true\") == some(boolean(true)));\n-        assert(fromstr(\"false\") == some(boolean(false)));\n-        assert(fromstr(\"truz\") == none);\n-    }\n-\n-    #[test]\n-    fn test_fromstr_list() {\n-        assert(fromstr(\"[]\") == some(list(@[])));\n-        assert(fromstr(\"[true]\") == some(list(@[boolean(true)])));\n-        assert(fromstr(\"[3, 1]\") == some(list(@[num(3f), num(1f)])));\n-        assert(fromstr(\"[2, [4, 1]]\") ==\n-            some(list(@[num(2f), list(@[num(4f), num(1f)])])));\n-        assert(fromstr(\"[2, ]\") == none);\n-        assert(fromstr(\"[5, \") == none);\n-        assert(fromstr(\"[6 7]\") == none);\n-        assert(fromstr(\"[3\") == none);\n-    }\n+/*\n+Function: from_str\n \n-    #[test]\n-    fn test_fromstr_dict() {\n-        assert(fromstr(\"{}\") != none);\n-        assert(fromstr(\"{\\\"a\\\": 3}\") != none);\n-        assert(fromstr(\"{\\\"a\\\": }\") == none);\n-        assert(fromstr(\"{\\\"a\\\" }\") == none);\n-        assert(fromstr(\"{\\\"a\\\"\") == none);\n-        assert(fromstr(\"{\") == none);\n-    }\n+Deserializes a json value from a string.\n+*/\n+fn from_str(s: str) -> option::t<json> {\n+    let (j, _) = from_str_helper(s);\n+    j\n }"}, {"sha": "bc085c1803fe217e7661fd1000a66e2737334fa5", "filename": "src/lib/std.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/656a2af98975edea682831c8483ac534cec7825a/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/656a2af98975edea682831c8483ac534cec7825a/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=656a2af98975edea682831c8483ac534cec7825a", "patch": "@@ -12,7 +12,7 @@ export aio, comm, fs, io, net, run, sio, sys, task;\n export ctypes, either, option, result, util;\n export bitv, deque, fun_treemap, list, map, smallintmap, sort, treemap, ufind;\n export rope;\n-export ebml, dbg, getopts, math, rand, sha1, term, time, unsafe;\n+export ebml, dbg, getopts, json, math, rand, sha1, term, time, unsafe;\n export extfmt, test;\n // FIXME: generic_os and os_fs shouldn't be exported\n export generic_os, os, os_fs;"}, {"sha": "a19ddec5e7d6c39547e730a8aff7e73f98027f5b", "filename": "src/test/stdtest/json.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/656a2af98975edea682831c8483ac534cec7825a/src%2Ftest%2Fstdtest%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656a2af98975edea682831c8483ac534cec7825a/src%2Ftest%2Fstdtest%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fjson.rs?ref=656a2af98975edea682831c8483ac534cec7825a", "patch": "@@ -0,0 +1,48 @@\n+use std;\n+import std::json::*;\n+import std::option::{none, some};\n+\n+#[test]\n+fn test_from_str_num() {\n+    assert(from_str(\"3\") == some(num(3f)));\n+    assert(from_str(\"3.1\") == some(num(3.1f)));\n+    assert(from_str(\"-1.2\") == some(num(-1.2f)));\n+    assert(from_str(\".4\") == some(num(0.4f)));\n+}\n+\n+#[test]\n+fn test_from_str_str() {\n+    assert(from_str(\"\\\"foo\\\"\") == some(string(\"foo\")));\n+    assert(from_str(\"\\\"\\\\\\\"\\\"\") == some(string(\"\\\"\")));\n+    assert(from_str(\"\\\"lol\") == none);\n+}\n+\n+#[test]\n+fn test_from_str_bool() {\n+    assert(from_str(\"true\") == some(boolean(true)));\n+    assert(from_str(\"false\") == some(boolean(false)));\n+    assert(from_str(\"truz\") == none);\n+}\n+\n+#[test]\n+fn test_from_str_list() {\n+    assert(from_str(\"[]\") == some(list(@[])));\n+    assert(from_str(\"[true]\") == some(list(@[boolean(true)])));\n+    assert(from_str(\"[3, 1]\") == some(list(@[num(3f), num(1f)])));\n+    assert(from_str(\"[2, [4, 1]]\") ==\n+        some(list(@[num(2f), list(@[num(4f), num(1f)])])));\n+    assert(from_str(\"[2, ]\") == none);\n+    assert(from_str(\"[5, \") == none);\n+    assert(from_str(\"[6 7]\") == none);\n+    assert(from_str(\"[3\") == none);\n+}\n+\n+#[test]\n+fn test_from_str_dict() {\n+    assert(from_str(\"{}\") != none);\n+    assert(from_str(\"{\\\"a\\\": 3}\") != none);\n+    assert(from_str(\"{\\\"a\\\": }\") == none);\n+    assert(from_str(\"{\\\"a\\\" }\") == none);\n+    assert(from_str(\"{\\\"a\\\"\") == none);\n+    assert(from_str(\"{\") == none);\n+}"}, {"sha": "09eabb632d6b7a872f086ab562599654fccc3eac", "filename": "src/test/stdtest/stdtest.rc", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/656a2af98975edea682831c8483ac534cec7825a/src%2Ftest%2Fstdtest%2Fstdtest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/656a2af98975edea682831c8483ac534cec7825a/src%2Ftest%2Fstdtest%2Fstdtest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fstdtest.rc?ref=656a2af98975edea682831c8483ac534cec7825a", "patch": "@@ -6,14 +6,15 @@ mod char;\n mod comm;\n mod deque;\n mod either;\n+mod float;\n mod fs;\n mod getopts;\n mod int;\n mod io;\n-mod vec;\n+mod json;\n mod list;\n mod map;\n-mod treemap;\n+mod math;\n mod net;\n mod option;\n mod os;\n@@ -22,18 +23,18 @@ mod ptr;\n mod qsort3;\n mod qsort;\n mod rand;\n+mod result;\n+mod rope;\n mod run;\n mod sha1;\n mod sort;\n mod str;\n mod sys;\n mod task;\n mod test;\n+mod treemap;\n mod uint;\n-mod float;\n-mod math;\n-mod result;\n-mod rope;\n+mod vec;\n \n // Local Variables:\n // mode: rust"}]}