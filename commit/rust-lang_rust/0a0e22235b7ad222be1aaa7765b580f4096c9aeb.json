{"sha": "0a0e22235b7ad222be1aaa7765b580f4096c9aeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMGUyMjIzNWI3YWQyMjJiZTFhYWE3NzY1YjU4MGY0MDk2YzlhZWI=", "commit": {"author": {"name": "Kevin Mehall", "email": "km@kevinmehall.net", "date": "2021-03-20T18:18:57Z"}, "committer": {"name": "Kevin Mehall", "email": "km@kevinmehall.net", "date": "2021-03-20T18:28:44Z"}, "message": "Make bare underscore token an Ident rather than Punct in proc-macro", "tree": {"sha": "1742dd3512904541543f1b7a929cbc77cad14402", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1742dd3512904541543f1b7a929cbc77cad14402"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a0e22235b7ad222be1aaa7765b580f4096c9aeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a0e22235b7ad222be1aaa7765b580f4096c9aeb", "html_url": "https://github.com/rust-lang/rust/commit/0a0e22235b7ad222be1aaa7765b580f4096c9aeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a0e22235b7ad222be1aaa7765b580f4096c9aeb/comments", "author": {"login": "kevinmehall", "id": 119951, "node_id": "MDQ6VXNlcjExOTk1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/119951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevinmehall", "html_url": "https://github.com/kevinmehall", "followers_url": "https://api.github.com/users/kevinmehall/followers", "following_url": "https://api.github.com/users/kevinmehall/following{/other_user}", "gists_url": "https://api.github.com/users/kevinmehall/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevinmehall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevinmehall/subscriptions", "organizations_url": "https://api.github.com/users/kevinmehall/orgs", "repos_url": "https://api.github.com/users/kevinmehall/repos", "events_url": "https://api.github.com/users/kevinmehall/events{/privacy}", "received_events_url": "https://api.github.com/users/kevinmehall/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kevinmehall", "id": 119951, "node_id": "MDQ6VXNlcjExOTk1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/119951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevinmehall", "html_url": "https://github.com/kevinmehall", "followers_url": "https://api.github.com/users/kevinmehall/followers", "following_url": "https://api.github.com/users/kevinmehall/following{/other_user}", "gists_url": "https://api.github.com/users/kevinmehall/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevinmehall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevinmehall/subscriptions", "organizations_url": "https://api.github.com/users/kevinmehall/orgs", "repos_url": "https://api.github.com/users/kevinmehall/repos", "events_url": "https://api.github.com/users/kevinmehall/events{/privacy}", "received_events_url": "https://api.github.com/users/kevinmehall/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cc8ad0c4afda0c8b6222156b0c725cfb61892c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cc8ad0c4afda0c8b6222156b0c725cfb61892c0", "html_url": "https://github.com/rust-lang/rust/commit/5cc8ad0c4afda0c8b6222156b0c725cfb61892c0"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "3c53960cedc4c47b932b0750615d227ae2bf881a", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a0e22235b7ad222be1aaa7765b580f4096c9aeb/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0e22235b7ad222be1aaa7765b580f4096c9aeb/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=0a0e22235b7ad222be1aaa7765b580f4096c9aeb", "patch": "@@ -710,6 +710,7 @@ fn match_meta_var(kind: &str, input: &mut TtIter) -> ExpandResult<Option<Fragmen\n             let tt_result = match kind {\n                 \"ident\" => input\n                     .expect_ident()\n+                    .and_then(|ident| if ident.text == \"_\" { Err(()) } else { Ok(ident) })\n                     .map(|ident| Some(tt::Leaf::from(ident.clone()).into()))\n                     .map_err(|()| err!(\"expected ident\")),\n                 \"tt\" => input.expect_tt().map(Some).map_err(|()| err!()),"}, {"sha": "c88387653dd25bbf8f250b83c69600c2c1ada9d2", "filename": "crates/mbe/src/parser.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a0e22235b7ad222be1aaa7765b580f4096c9aeb/crates%2Fmbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0e22235b7ad222be1aaa7765b580f4096c9aeb/crates%2Fmbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fparser.rs?ref=0a0e22235b7ad222be1aaa7765b580f4096c9aeb", "patch": "@@ -177,16 +177,8 @@ fn next_op<'a>(first: &tt::TokenTree, src: &mut TtIter<'a>, mode: Mode) -> Resul\n                     Op::Repeat { tokens: MetaTemplate(tokens), separator, kind }\n                 }\n                 tt::TokenTree::Leaf(leaf) => match leaf {\n-                    tt::Leaf::Punct(punct) => {\n-                        static UNDERSCORE: SmolStr = SmolStr::new_inline(\"_\");\n-\n-                        if punct.char != '_' {\n-                            return Err(ParseError::Expected(\"_\".to_string()));\n-                        }\n-                        let name = UNDERSCORE.clone();\n-                        let kind = eat_fragment_kind(src, mode)?;\n-                        let id = punct.id;\n-                        Op::Var { name, kind, id }\n+                    tt::Leaf::Punct(_) => {\n+                        return Err(ParseError::Expected(\"ident\".to_string()));\n                     }\n                     tt::Leaf::Ident(ident) if ident.text == \"crate\" => {\n                         // We simply produce identifier `$crate` here. And it will be resolved when lowering ast to Path."}, {"sha": "a05cab0f373de92a6342d346df3eab19789cd1f8", "filename": "crates/mbe/src/subtree_source.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a0e22235b7ad222be1aaa7765b580f4096c9aeb/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0e22235b7ad222be1aaa7765b580f4096c9aeb/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs?ref=0a0e22235b7ad222be1aaa7765b580f4096c9aeb", "patch": "@@ -150,6 +150,7 @@ fn convert_ident(ident: &tt::Ident) -> TtToken {\n     let kind = match ident.text.as_ref() {\n         \"true\" => T![true],\n         \"false\" => T![false],\n+        \"_\" => UNDERSCORE,\n         i if i.starts_with('\\'') => LIFETIME_IDENT,\n         _ => SyntaxKind::from_keyword(ident.text.as_str()).unwrap_or(IDENT),\n     };"}, {"sha": "8bba3d3d5288d7ba84c463e34ee6c48a23174cb1", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a0e22235b7ad222be1aaa7765b580f4096c9aeb/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0e22235b7ad222be1aaa7765b580f4096c9aeb/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=0a0e22235b7ad222be1aaa7765b580f4096c9aeb", "patch": "@@ -350,7 +350,7 @@ trait TokenConvertor {\n             return;\n         }\n \n-        result.push(if k.is_punct() {\n+        result.push(if k.is_punct() && k != UNDERSCORE {\n             assert_eq!(range.len(), TextSize::of('.'));\n             let delim = match k {\n                 T!['('] => Some((tt::DelimiterKind::Parenthesis, T![')'])),\n@@ -395,7 +395,9 @@ trait TokenConvertor {\n                     {\n                         tt::Spacing::Alone\n                     }\n-                    Some(next) if next.kind().is_punct() => tt::Spacing::Joint,\n+                    Some(next) if next.kind().is_punct() && next.kind() != UNDERSCORE => {\n+                        tt::Spacing::Joint\n+                    }\n                     _ => tt::Spacing::Alone,\n                 };\n                 let char = match token.to_char() {\n@@ -415,6 +417,7 @@ trait TokenConvertor {\n             let leaf: tt::Leaf = match k {\n                 T![true] | T![false] => make_leaf!(Ident),\n                 IDENT => make_leaf!(Ident),\n+                UNDERSCORE => make_leaf!(Ident),\n                 k if k.is_keyword() => make_leaf!(Ident),\n                 k if k.is_literal() => make_leaf!(Literal),\n                 LIFETIME_IDENT => {"}, {"sha": "2cce62781a41f3aee6dfef8e3679822aa492dd89", "filename": "crates/mbe/src/tests/expand.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a0e22235b7ad222be1aaa7765b580f4096c9aeb/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0e22235b7ad222be1aaa7765b580f4096c9aeb/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs?ref=0a0e22235b7ad222be1aaa7765b580f4096c9aeb", "patch": "@@ -1079,6 +1079,12 @@ macro_rules! q {\n     .assert_expand_items(r#\"q![_]\"#, r#\"0\"#);\n }\n \n+#[test]\n+fn test_underscore_lifetime() {\n+    parse_macro(r#\"macro_rules! q { ($a:lifetime) => {0}; }\"#)\n+        .assert_expand_items(r#\"q!['_]\"#, r#\"0\"#);\n+}\n+\n #[test]\n fn test_vertical_bar_with_pat() {\n     parse_macro("}, {"sha": "c147484c0e0f65518b54e427fdc03203a2c1482a", "filename": "crates/proc_macro_srv/src/rustc_server.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0a0e22235b7ad222be1aaa7765b580f4096c9aeb/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0e22235b7ad222be1aaa7765b580f4096c9aeb/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs?ref=0a0e22235b7ad222be1aaa7765b580f4096c9aeb", "patch": "@@ -805,5 +805,14 @@ mod tests {\n         let t2 = TokenStream::from_str(\"(a);\").unwrap();\n         assert_eq!(t2.token_trees.len(), 2);\n         assert_eq!(t2.token_trees[0], subtree_paren_a);\n+\n+        let underscore = TokenStream::from_str(\"_\").unwrap();\n+        assert_eq!(\n+            underscore.token_trees[0],\n+            tt::TokenTree::Leaf(tt::Leaf::Ident(tt::Ident {\n+                text: \"_\".into(),\n+                id: tt::TokenId::unspecified(),\n+            }))\n+        );\n     }\n }"}]}