{"sha": "5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "node_id": "C_kwDOAAsO6NoAKDViZjZhNDYwMzJiNmM3NDZkYTVhOTVkYzVjNmUwYWM0NmFjOWIwNzU", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-02-15T17:39:43Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-02-16T15:26:03Z"}, "message": "Replace some `then`s with some `then_some`s", "tree": {"sha": "6567488546972f2ee2ee3ac91c0e22e794c51ffc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6567488546972f2ee2ee3ac91c0e22e794c51ffc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "html_url": "https://github.com/rust-lang/rust/commit/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8751fa1a9abda9fc7ced6b03315efbd82310830d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8751fa1a9abda9fc7ced6b03315efbd82310830d", "html_url": "https://github.com/rust-lang/rust/commit/8751fa1a9abda9fc7ced6b03315efbd82310830d"}], "stats": {"total": 53, "additions": 27, "deletions": 26}, "files": [{"sha": "1535837fd052562128e658f9f2f08a5b6a88d9f8", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -271,7 +271,7 @@ impl<'a> AstValidator<'a> {\n \n         self.session.emit_err(InvalidVisibility {\n             span: vis.span,\n-            implied: vis.kind.is_pub().then(|| vis.span),\n+            implied: vis.kind.is_pub().then_some(vis.span),\n             note,\n         });\n     }"}, {"sha": "9e90ca3b92c8131ee054b829d9a335ab81ba9cee", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -1186,7 +1186,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 return None;\n             };\n             debug!(\"checking call args for uses of inner_param: {:?}\", args);\n-            args.contains(&Operand::Move(inner_param)).then(|| (loc, term))\n+            args.contains(&Operand::Move(inner_param)).then_some((loc, term))\n         }) else {\n             debug!(\"no uses of inner_param found as a by-move call arg\");\n             return;"}, {"sha": "e67c0dba68597087f4e2d6800646a6ebb61031be", "filename": "compiler/rustc_builtin_macros/src/standard_library_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -62,7 +62,7 @@ pub fn inject(\n     // the one with the prelude.\n     let name = names[0];\n \n-    let root = (edition == Edition2015).then(|| kw::PathRoot);\n+    let root = (edition == Edition2015).then_some(kw::PathRoot);\n \n     let import_path = root\n         .iter()"}, {"sha": "cc8ff947fc31f9eb67fea52c3c57dce7aa63b0b4", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -154,7 +154,7 @@ fn struct_llfields<'a, 'tcx>(\n     } else {\n         debug!(\"struct_llfields: offset: {:?} stride: {:?}\", offset, layout.size);\n     }\n-    let field_remapping = padding_used.then(|| field_remapping);\n+    let field_remapping = padding_used.then_some(field_remapping);\n     (result, packed, field_remapping)\n }\n "}, {"sha": "8aa744ce93531e4c578d4d88c4592b8c7a2c44c9", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -2024,7 +2024,7 @@ fn linker_with_args<'a>(\n         .native_libraries\n         .iter()\n         .filter_map(|(cnum, libraries)| {\n-            (dependency_linkage[cnum.as_usize() - 1] != Linkage::Static).then(|| libraries)\n+            (dependency_linkage[cnum.as_usize() - 1] != Linkage::Static).then_some(libraries)\n         })\n         .flatten();\n     for (raw_dylib_name, raw_dylib_imports) in"}, {"sha": "5c845ae6d0bef4e8977fa1d690dc2eea22f7493b", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -255,7 +255,7 @@ impl<'a> StripUnconfigured<'a> {\n \n     fn configure_krate_attrs(&self, mut attrs: ast::AttrVec) -> Option<ast::AttrVec> {\n         attrs.flat_map_in_place(|attr| self.process_cfg_attr(attr));\n-        self.in_cfg(&attrs).then(|| attrs)\n+        self.in_cfg(&attrs).then_some(attrs)\n     }\n \n     /// Performs cfg-expansion on `stream`, producing a new `AttrTokenStream`."}, {"sha": "a0f738a279907422a703e2038972b360d1d4d901", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -204,7 +204,7 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n         match tcx.hir().find(hir_id) {\n             Some(Node::Item(hir::Item { kind: hir::ItemKind::Fn(_, generics, _), .. })) => {\n-                generics.params.is_empty().not().then(|| generics.span)\n+                generics.params.is_empty().not().then_some(generics.span)\n             }\n             _ => {\n                 span_bug!(tcx.def_span(def_id), \"main has a non-function type\");"}, {"sha": "ba503bf47e70eb63b26cd95f7cf4d8cc0855ad0e", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -1046,7 +1046,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.param_env,\n                 )\n                 .may_apply()\n-                .then(|| deref_ty)\n+                .then_some(deref_ty)\n         })\n     }\n "}, {"sha": "34cf17d25a964cc385eaf0a6beb4116f01441d49", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -2308,7 +2308,8 @@ impl EarlyLintPass for IncompleteFeatures {\n             .for_each(|(&name, &span)| {\n                 let note = rustc_feature::find_feature_issue(name, GateIssue::Language)\n                     .map(|n| BuiltinIncompleteFeaturesNote { n });\n-                let help = HAS_MIN_FEATURES.contains(&name).then(|| BuiltinIncompleteFeaturesHelp);\n+                let help =\n+                    HAS_MIN_FEATURES.contains(&name).then_some(BuiltinIncompleteFeaturesHelp);\n                 cx.emit_spanned_lint(\n                     INCOMPLETE_FEATURES,\n                     span,"}, {"sha": "9a9e2de7b5c7f561cfcf5890b0b19ba4a2e0dc76", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -487,7 +487,7 @@ impl LintStore {\n         let mut groups: Vec<_> = self\n             .lint_groups\n             .iter()\n-            .filter_map(|(k, LintGroup { depr, .. })| depr.is_none().then(|| k))\n+            .filter_map(|(k, LintGroup { depr, .. })| depr.is_none().then_some(k))\n             .collect();\n         groups.sort();\n         let groups = groups.iter().map(|k| Symbol::intern(k));"}, {"sha": "3cb07b5b41eb8c9b4ec8a00d26375267511b4094", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -414,7 +414,7 @@ impl<'tcx> Body<'tcx> {\n         (self.arg_count + 1..self.local_decls.len()).filter_map(move |index| {\n             let local = Local::new(index);\n             let decl = &self.local_decls[local];\n-            (decl.is_user_variable() && decl.mutability.is_mut()).then(|| local)\n+            (decl.is_user_variable() && decl.mutability.is_mut()).then_some(local)\n         })\n     }\n "}, {"sha": "c6c3c1f08deabc80210671e239d1fe237ef96e87", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -584,7 +584,7 @@ impl<'tcx> Instance<'tcx> {\n     /// this function returns `None`, then the MIR body does not require substitution during\n     /// codegen.\n     fn substs_for_mir_body(&self) -> Option<SubstsRef<'tcx>> {\n-        self.def.has_polymorphic_mir_body().then(|| self.substs)\n+        self.def.has_polymorphic_mir_body().then_some(self.substs)\n     }\n \n     pub fn subst_mir<T>(&self, tcx: TyCtxt<'tcx>, v: &T) -> T"}, {"sha": "41306dd80fbdd4b83d8833f00adcf35a310f22b6", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -203,7 +203,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 if !lower_overflow && !higher_overflow {\n                     self.tcx.sess.emit_err(LowerRangeBoundMustBeLessThanOrEqualToUpper {\n                         span,\n-                        teach: self.tcx.sess.teach(&error_code!(E0030)).then(|| ()),\n+                        teach: self.tcx.sess.teach(&error_code!(E0030)).then_some(()),\n                     });\n                 }\n                 PatKind::Wild"}, {"sha": "633a5674f1f96da223c3fe6527fd805d2b445e17", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -254,7 +254,7 @@ impl<'a, 'tcx> Analysis<'tcx> for MaybeTransitiveLiveLocals<'a> {\n     ) {\n         // Compute the place that we are storing to, if any\n         let destination = match &statement.kind {\n-            StatementKind::Assign(assign) => assign.1.is_safe_to_remove().then(|| assign.0),\n+            StatementKind::Assign(assign) => assign.1.is_safe_to_remove().then_some(assign.0),\n             StatementKind::SetDiscriminant { place, .. } | StatementKind::Deinit(place) => {\n                 Some(**place)\n             }"}, {"sha": "4f4252b532edf7c07cb379755e2149d93f416cdb", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -870,7 +870,7 @@ impl<'a> Parser<'a> {\n             None\n         };\n \n-        let maybe = self.eat(&token::Question).then(|| self.prev_token.span);\n+        let maybe = self.eat(&token::Question).then_some(self.prev_token.span);\n \n         Ok(BoundModifiers { maybe, maybe_const })\n     }"}, {"sha": "8a3cedfee7952997ec427ac1e748c39991213404", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -835,7 +835,7 @@ impl<'a> Parser<'a> {\n             );\n         }\n \n-        found.then(|| cur)\n+        found.then_some(cur)\n     }\n \n     fn suggest_format(&mut self) {"}, {"sha": "13a576014a2ee1787273d775906b480f535ba5ec", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -281,7 +281,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         self.recurse_with_stability_attrs(\n             depr.map(|(d, _)| DeprecationEntry::local(d, def_id)),\n             stab,\n-            inherit_const_stability.yes().then(|| const_stab).flatten(),\n+            inherit_const_stability.yes().then_some(const_stab).flatten(),\n             visit_children,\n         );\n     }"}, {"sha": "4da6acad2c02148ced4638c1228e1229a7c56514", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -2544,7 +2544,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         }\n \n         // Only use this directory if it has a file we can expect to always find.\n-        candidate.join(\"library/std/src/lib.rs\").is_file().then(|| candidate)\n+        candidate.join(\"library/std/src/lib.rs\").is_file().then_some(candidate)\n     };\n \n     let working_dir = std::env::current_dir().unwrap_or_else(|e| {"}, {"sha": "2075ed57a94db4b73ac2d9b42a3e723f5acd51a8", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -217,7 +217,7 @@ pub fn get_or_default_sysroot() -> Result<PathBuf, String> {\n                 // Look for the target rustlib directory in the suspected sysroot.\n                 let mut rustlib_path = rustc_target::target_rustlib_path(&p, \"dummy\");\n                 rustlib_path.pop(); // pop off the dummy target.\n-                rustlib_path.exists().then(|| p)\n+                rustlib_path.exists().then_some(p)\n             }\n             None => None,\n         }"}, {"sha": "c784582012a471e33e6dbe1ad8d78c724906db25", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -809,7 +809,7 @@ mod parse {\n         if v.is_some() {\n             let mut bool_arg = None;\n             if parse_opt_bool(&mut bool_arg, v) {\n-                *slot = bool_arg.unwrap().then(|| MirSpanview::Statement);\n+                *slot = bool_arg.unwrap().then_some(MirSpanview::Statement);\n                 return true;\n             }\n         }\n@@ -850,7 +850,7 @@ mod parse {\n         if v.is_some() {\n             let mut bool_arg = None;\n             if parse_opt_bool(&mut bool_arg, v) {\n-                *slot = bool_arg.unwrap().then(|| InstrumentCoverage::All);\n+                *slot = bool_arg.unwrap().then_some(InstrumentCoverage::All);\n                 return true;\n             }\n         }"}, {"sha": "2340d501d5a6600c4343d171fbf45b0c33f1ed1c", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -320,7 +320,7 @@ impl DefId {\n \n     #[inline]\n     pub fn as_crate_root(self) -> Option<CrateNum> {\n-        self.is_crate_root().then(|| self.krate)\n+        self.is_crate_root().then_some(self.krate)\n     }\n \n     #[inline]"}, {"sha": "8041066d5d573ad07a68b45a93b42d1f27837fe2", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -771,7 +771,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             .iter()\n                             .chain([&obligation])\n                             .all(|obligation| self.predicate_may_hold(obligation))\n-                            .then(|| steps);\n+                            .then_some(steps);\n \n                         may_hold\n                     })"}, {"sha": "c6b99d72ce4294323efad0896faec1bc494f63ef", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -307,7 +307,7 @@ fn predicate_references_self<'tcx>(\n     match predicate.kind().skip_binder() {\n         ty::PredicateKind::Clause(ty::Clause::Trait(ref data)) => {\n             // In the case of a trait predicate, we can skip the \"self\" type.\n-            data.trait_ref.substs[1..].iter().any(has_self_ty).then(|| sp)\n+            data.trait_ref.substs[1..].iter().any(has_self_ty).then_some(sp)\n         }\n         ty::PredicateKind::Clause(ty::Clause::Projection(ref data)) => {\n             // And similarly for projections. This should be redundant with\n@@ -325,7 +325,7 @@ fn predicate_references_self<'tcx>(\n             //\n             // This is ALT2 in issue #56288, see that for discussion of the\n             // possible alternatives.\n-            data.projection_ty.substs[1..].iter().any(has_self_ty).then(|| sp)\n+            data.projection_ty.substs[1..].iter().any(has_self_ty).then_some(sp)\n         }\n         ty::PredicateKind::AliasEq(..) => bug!(\"`AliasEq` not allowed as assumption\"),\n "}, {"sha": "c3dcd64b2c2461438ce5b0edf44177f9979b5f4d", "filename": "compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "patch": "@@ -113,7 +113,7 @@ impl<'tcx> ChildrenExt<'tcx> for Children {\n                     // Only report the `Self` type if it has at least\n                     // some outer concrete shell; otherwise, it's\n                     // not adding much information.\n-                    self_ty: self_ty.has_concrete_skeleton().then(|| self_ty),\n+                    self_ty: self_ty.has_concrete_skeleton().then_some(self_ty),\n                     intercrate_ambiguity_causes: overlap.intercrate_ambiguity_causes,\n                     involves_placeholder: overlap.involves_placeholder,\n                 }"}]}