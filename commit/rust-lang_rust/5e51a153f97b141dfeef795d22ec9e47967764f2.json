{"sha": "5e51a153f97b141dfeef795d22ec9e47967764f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNTFhMTUzZjk3YjE0MWRmZWVmNzk1ZDIyZWM5ZTQ3OTY3NzY0ZjI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-01T09:02:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-02T08:03:16Z"}, "message": "fix init_allocation_extra", "tree": {"sha": "b252cd3d7d053cd91ba67f97b5db2f909eb122c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b252cd3d7d053cd91ba67f97b5db2f909eb122c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e51a153f97b141dfeef795d22ec9e47967764f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e51a153f97b141dfeef795d22ec9e47967764f2", "html_url": "https://github.com/rust-lang/rust/commit/5e51a153f97b141dfeef795d22ec9e47967764f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e51a153f97b141dfeef795d22ec9e47967764f2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a52543aaebe0cd426debd8ba748d171547ec500", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a52543aaebe0cd426debd8ba748d171547ec500", "html_url": "https://github.com/rust-lang/rust/commit/9a52543aaebe0cd426debd8ba748d171547ec500"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "ff0cf6f4fdd218dc3b1abf68aeb1109c8fa141ae", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e51a153f97b141dfeef795d22ec9e47967764f2/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e51a153f97b141dfeef795d22ec9e47967764f2/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=5e51a153f97b141dfeef795d22ec9e47967764f2", "patch": "@@ -462,9 +462,9 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         _id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         _kind: Option<MemoryKind<!>>,\n-    ) -> Cow<'b, Allocation<Self::PointerTag>> {\n+    ) -> (Cow<'b, Allocation<Self::PointerTag>>, Self::PointerTag) {\n         // We do not use a tag so we can just cheaply forward the allocation\n-        alloc\n+        (alloc, ())\n     }\n \n     #[inline(always)]"}, {"sha": "8250cadb01d443a1aa2133b59af731d1b327c7ee", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e51a153f97b141dfeef795d22ec9e47967764f2/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e51a153f97b141dfeef795d22ec9e47967764f2/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=5e51a153f97b141dfeef795d22ec9e47967764f2", "patch": "@@ -251,9 +251,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     }\n \n     /// Call this to turn untagged \"global\" pointers (obtained via `tcx`) into\n-    /// the *canonical* machine pointer to the allocation. This represents a *direct*\n-    /// access to that memory, as opposed to access through a pointer that was created\n-    /// by the program. Must never be used for derived (program-created) pointers!\n+    /// the *canonical* machine pointer to the allocation.  Must never be used\n+    /// for any other pointers!\n+    ///\n+    /// This represents a *direct* access to that memory, as opposed to access\n+    /// through a pointer that was created by the program.\n     #[inline(always)]\n     pub fn tag_static_base_pointer(&self, ptr: Pointer) -> Pointer<M::PointerTag> {\n         self.memory.tag_static_base_pointer(ptr)"}, {"sha": "2ecc8d88ad398c6e0a59231a71024f8acd54f43f", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e51a153f97b141dfeef795d22ec9e47967764f2/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e51a153f97b141dfeef795d22ec9e47967764f2/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=5e51a153f97b141dfeef795d22ec9e47967764f2", "patch": "@@ -240,18 +240,20 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// allocation (because a copy had to be done to add tags or metadata), machine memory will\n     /// cache the result. (This relies on `AllocMap::get_or` being able to add the\n     /// owned allocation to the map even when the map is shared.)\n+    ///\n+    /// Also return the \"base\" tag to use for this allocation: the one that is used for direct\n+    /// accesses to this allocation. If `kind == STATIC_KIND`, this tag must be consistent\n+    /// with `tag_static_base_pointer`.\n     fn init_allocation_extra<'b>(\n         memory_extra: &Self::MemoryExtra,\n         id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         kind: Option<MemoryKind<Self::MemoryKinds>>,\n-    ) -> Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>;\n+    ) -> (Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>, Self::PointerTag);\n \n-    /// Return the \"base\" tag for the given static allocation: the one that is used for direct\n-    /// accesses to this static/const/fn allocation.\n-    ///\n-    /// Be aware that requesting the `Allocation` for that `id` will lead to cycles\n-    /// for cyclic statics!\n+    /// Return the \"base\" tag for the given *static* allocation: the one that is used for direct\n+    /// accesses to this static/const/fn allocation. If `id` is not a static allocation,\n+    /// this will return an unusable tag (i.e., accesses will be UB)!\n     fn tag_static_base_pointer(\n         memory_extra: &Self::MemoryExtra,\n         id: AllocId,"}, {"sha": "ee7fb18fd05a544fb5133f32c1094ff04b68f8be", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5e51a153f97b141dfeef795d22ec9e47967764f2/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e51a153f97b141dfeef795d22ec9e47967764f2/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=5e51a153f97b141dfeef795d22ec9e47967764f2", "patch": "@@ -144,9 +144,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     }\n \n     /// Call this to turn untagged \"global\" pointers (obtained via `tcx`) into\n-    /// the *canonical* machine pointer to the allocation. This represents a *direct*\n-    /// access to that memory, as opposed to access through a pointer that was created\n-    /// by the program. Must never be used for derived (program-created) pointers!\n+    /// the *canonical* machine pointer to the allocation.  Must never be used\n+    /// for any other pointers!\n+    ///\n+    /// This represents a *direct* access to that memory, as opposed to access\n+    /// through a pointer that was created by the program.\n     #[inline]\n     pub fn tag_static_base_pointer(&self, ptr: Pointer) -> Pointer<M::PointerTag> {\n         ptr.with_tag(M::tag_static_base_pointer(&self.extra, ptr.alloc_id))\n@@ -195,9 +197,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         kind: MemoryKind<M::MemoryKinds>,\n     ) -> Pointer<M::PointerTag> {\n         let id = self.tcx.alloc_map.lock().reserve();\n-        let alloc = M::init_allocation_extra(&self.extra, id, Cow::Owned(alloc), Some(kind));\n+        debug_assert_ne!(Some(kind), M::STATIC_KIND.map(MemoryKind::Machine),\n+            \"dynamically allocating static memory\");\n+        let (alloc, tag) = M::init_allocation_extra(&self.extra, id, Cow::Owned(alloc), Some(kind));\n         self.alloc_map.insert(id, (kind, alloc.into_owned()));\n-        self.tag_static_base_pointer(Pointer::from(id))\n+        Pointer::from(id).with_tag(tag)\n     }\n \n     pub fn reallocate(\n@@ -478,12 +482,14 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             }\n         };\n         // We got tcx memory. Let the machine initialize its \"extra\" stuff.\n-        Ok(M::init_allocation_extra(\n+        let (alloc, tag) = M::init_allocation_extra(\n             memory_extra,\n             id, // always use the ID we got as input, not the \"hidden\" one.\n             alloc,\n             M::STATIC_KIND.map(MemoryKind::Machine),\n-        ))\n+        );\n+        debug_assert_eq!(tag, M::tag_static_base_pointer(memory_extra, id));\n+        Ok(alloc)\n     }\n \n     /// Gives raw access to the `Allocation`, without bounds or alignment checks."}, {"sha": "bbbaac145f559028991ca4adb4d7cbbf3fc910e6", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e51a153f97b141dfeef795d22ec9e47967764f2/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e51a153f97b141dfeef795d22ec9e47967764f2/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=5e51a153f97b141dfeef795d22ec9e47967764f2", "patch": "@@ -196,9 +196,9 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n         _id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         _kind: Option<MemoryKind<!>>,\n-    ) -> Cow<'b, Allocation<Self::PointerTag>> {\n+    ) -> (Cow<'b, Allocation<Self::PointerTag>>, Self::PointerTag) {\n         // We do not use a tag so we can just cheaply forward the allocation\n-        alloc\n+        (alloc, ())\n     }\n \n     #[inline(always)]"}]}