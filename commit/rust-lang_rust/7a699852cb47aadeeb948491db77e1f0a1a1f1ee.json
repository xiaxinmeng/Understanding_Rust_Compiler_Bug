{"sha": "7a699852cb47aadeeb948491db77e1f0a1a1f1ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNjk5ODUyY2I0N2FhZGVlYjk0ODQ5MWRiNzdlMWYwYTFhMWYxZWU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-06-08T23:41:38Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-06-08T23:41:38Z"}, "message": "Pass names of fields and variants when reflecting.", "tree": {"sha": "7904dc4c7c7e966fad35f7cc615f4c5732d30575", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7904dc4c7c7e966fad35f7cc615f4c5732d30575"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a699852cb47aadeeb948491db77e1f0a1a1f1ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a699852cb47aadeeb948491db77e1f0a1a1f1ee", "html_url": "https://github.com/rust-lang/rust/commit/7a699852cb47aadeeb948491db77e1f0a1a1f1ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a699852cb47aadeeb948491db77e1f0a1a1f1ee/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d182c14247b05316f38809276098dc3bcf7b7f02", "url": "https://api.github.com/repos/rust-lang/rust/commits/d182c14247b05316f38809276098dc3bcf7b7f02", "html_url": "https://github.com/rust-lang/rust/commit/d182c14247b05316f38809276098dc3bcf7b7f02"}], "stats": {"total": 87, "additions": 46, "deletions": 41}, "files": [{"sha": "674436bcfafe03e20f99cf98d61d222f35ab82a0", "filename": "src/rustc/front/intrinsic.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7a699852cb47aadeeb948491db77e1f0a1a1f1ee/src%2Frustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a699852cb47aadeeb948491db77e1f0a1a1f1ee/src%2Frustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fintrinsic.rs?ref=7a699852cb47aadeeb948491db77e1f0a1a1f1ee", "patch": "@@ -56,17 +56,17 @@ mod intrinsic {\n         fn visit_leave_evec_fixed(mtbl: uint, sz: uint) -> bool;\n \n         fn visit_enter_rec(n_fields: uint) -> bool;\n-        fn visit_enter_rec_field(mtbl: uint, i: uint\n-                                 /*, name: str/& */) -> bool;\n-        fn visit_leave_rec_field(mtbl: uint, i: uint\n-                                 /*, name: str/& */) -> bool;\n+        fn visit_enter_rec_field(mtbl: uint, i: uint,\n+                                 name: str/&) -> bool;\n+        fn visit_leave_rec_field(mtbl: uint, i: uint,\n+                                 name: str/&) -> bool;\n         fn visit_leave_rec(n_fields: uint) -> bool;\n \n         fn visit_enter_class(n_fields: uint) -> bool;\n-        fn visit_enter_class_field(mtbl: uint, i: uint\n-                                   /*, name: str/& */) -> bool;\n-        fn visit_leave_class_field(mtbl: uint, i: uint\n-                                   /*, name: str/& */) -> bool;\n+        fn visit_enter_class_field(mtbl: uint, i: uint,\n+                                   name: str/&) -> bool;\n+        fn visit_leave_class_field(mtbl: uint, i: uint,\n+                                   name: str/&) -> bool;\n         fn visit_leave_class(n_fields: uint) -> bool;\n \n         fn visit_enter_tup(n_fields: uint) -> bool;\n@@ -77,12 +77,14 @@ mod intrinsic {\n         fn visit_enter_enum(n_variants: uint) -> bool;\n         fn visit_enter_enum_variant(variant: uint,\n                                     disr_val: int,\n-                                    n_fields: uint) -> bool;\n+                                    n_fields: uint,\n+                                    name: str/&) -> bool;\n         fn visit_enter_enum_variant_field(i: uint) -> bool;\n         fn visit_leave_enum_variant_field(i: uint) -> bool;\n         fn visit_leave_enum_variant(variant: uint,\n                                     disr_val: int,\n-                                    n_fields: uint) -> bool;\n+                                    n_fields: uint,\n+                                    name: str/&) -> bool;\n         fn visit_leave_enum(n_variants: uint) -> bool;\n \n         fn visit_enter_fn(purity: uint, proto: uint,"}, {"sha": "253ea154fb8028c606b45da5eabb4c49709ec0a7", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7a699852cb47aadeeb948491db77e1f0a1a1f1ee/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a699852cb47aadeeb948491db77e1f0a1a1f1ee/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=7a699852cb47aadeeb948491db77e1f0a1a1f1ee", "patch": "@@ -26,15 +26,30 @@ impl methods for reflector {\n         C_int(self.bcx.ccx(), i)\n     }\n \n+    fn c_slice(s: str) -> ValueRef {\n+        let ss = C_estr_slice(self.bcx.ccx(), s);\n+        do_spill_noroot(self.bcx, ss)\n+    }\n+\n     fn visit(ty_name: str, args: [ValueRef]) {\n         let tcx = self.bcx.tcx();\n         let mth_idx = option::get(ty::method_idx(\"visit_\" + ty_name,\n                                                  *self.visitor_methods));\n         let mth_ty = ty::mk_fn(tcx, self.visitor_methods[mth_idx].fty);\n         let v = self.visitor_val;\n         let get_lval = {|bcx|\n-            impl::trans_iface_callee(bcx, v, mth_ty, mth_idx)\n+            let callee =\n+                impl::trans_iface_callee(bcx, v, mth_ty, mth_idx);\n+            #debug(\"calling mth ty %s, lltype %s\",\n+                   ty_to_str(bcx.ccx().tcx, mth_ty),\n+                   val_str(bcx.ccx().tn, callee.val));\n+            callee\n         };\n+        #debug(\"passing %u args:\", vec::len(args));\n+        let bcx = self.bcx;\n+        for args.eachi {|i, a|\n+            #debug(\"arg %u: %s\", i, val_str(bcx.ccx().tn, a));\n+        }\n         self.bcx =\n             trans_call_inner(self.bcx, none, mth_ty, ty::mk_bool(tcx),\n                              get_lval, arg_vals(args), ignore);\n@@ -118,13 +133,8 @@ impl methods for reflector {\n             self.visit(\"enter_rec\", [self.c_uint(vec::len(fields))]);\n             for fields.eachi {|i, field|\n                 self.bracketed_mt(\"rec_field\", field.mt,\n-                                  [self.c_uint(i)\n-                                   /*\n-                                   FIXME: doesn't work presently.\n-                                   C_estr_slice(self.bcx.ccx(),\n-                                                field.ident)\n-                                   */\n-                                  ]);\n+                                  [self.c_uint(i),\n+                                   self.c_slice(field.ident)]);\n             }\n             self.visit(\"leave_rec\", [self.c_uint(vec::len(fields))]);\n           }\n@@ -190,13 +200,8 @@ impl methods for reflector {\n             self.visit(\"enter_class\", [self.c_uint(vec::len(fields))]);\n             for fields.eachi {|i, field|\n                 self.bracketed_mt(\"class_field\", field.mt,\n-                                  [self.c_uint(i)\n-                                   /*\n-                                   FIXME: doesn't work presently.\n-                                   C_estr_slice(self.bcx.ccx(),\n-                                                field.ident)\n-                                   */\n-                                  ]);\n+                                  [self.c_uint(i),\n+                                   self.c_slice(field.ident)]);\n             }\n             self.visit(\"leave_class\", [self.c_uint(vec::len(fields))]);\n           }\n@@ -214,12 +219,8 @@ impl methods for reflector {\n             for variants.eachi {|i, v|\n                 let extra = [self.c_uint(i),\n                              self.c_int(v.disr_val),\n-                             self.c_uint(vec::len(v.args))\n-                             /*\n-                             FIXME: doesn't work presently.\n-                             C_estr_slice(self.bcx.ccx(),\n-                             v.name)\n-                             */];\n+                             self.c_uint(vec::len(v.args)),\n+                             self.c_slice(v.name)];\n                 self.visit(\"enter_enum_variant\", extra);\n                 for v.args.eachi {|j, a|\n                     self.bracketed_t(\"enum_variant_field\", a,"}, {"sha": "a9ec335e5f03a1e3665cb82be93d498620aba783", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7a699852cb47aadeeb948491db77e1f0a1a1f1ee/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a699852cb47aadeeb948491db77e1f0a1a1f1ee/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=7a699852cb47aadeeb948491db77e1f0a1a1f1ee", "patch": "@@ -81,17 +81,17 @@ impl of intrinsic::ty_visitor for my_visitor {\n     fn visit_leave_evec_fixed(_mtbl: uint, _sz: uint) -> bool { true }\n \n     fn visit_enter_rec(_n_fields: uint) -> bool { true }\n-    fn visit_enter_rec_field(_mtbl: uint, _i: uint\n-                             /*,name: str/&*/) -> bool { true }\n-    fn visit_leave_rec_field(_mtbl: uint, _i: uint\n-                             /*,name: str/&*/) -> bool { true }\n+    fn visit_enter_rec_field(_mtbl: uint, _i: uint,\n+                             _name: str/&) -> bool { true }\n+    fn visit_leave_rec_field(_mtbl: uint, _i: uint,\n+                             _name: str/&) -> bool { true }\n     fn visit_leave_rec(_n_fields: uint) -> bool { true }\n \n     fn visit_enter_class(_n_fields: uint) -> bool { true }\n-    fn visit_enter_class_field(_mtbl: uint, _i: uint\n-                             /*,name: str/&*/) -> bool { true }\n-    fn visit_leave_class_field(_mtbl: uint, _i: uint\n-                             /*,name: str/&*/) -> bool { true }\n+    fn visit_enter_class_field(_mtbl: uint, _i: uint,\n+                               _name: str/&) -> bool { true }\n+    fn visit_leave_class_field(_mtbl: uint, _i: uint,\n+                               _name: str/&) -> bool { true }\n     fn visit_leave_class(_n_fields: uint) -> bool { true }\n \n     fn visit_enter_tup(_n_fields: uint) -> bool { true }\n@@ -111,12 +111,14 @@ impl of intrinsic::ty_visitor for my_visitor {\n     fn visit_enter_enum(_n_variants: uint) -> bool { true }\n     fn visit_enter_enum_variant(_variant: uint,\n                                 _disr_val: int,\n-                                _n_fields: uint) -> bool { true }\n+                                _n_fields: uint,\n+                                _name: str/&) -> bool { true }\n     fn visit_enter_enum_variant_field(_i: uint) -> bool { true }\n     fn visit_leave_enum_variant_field(_i: uint) -> bool { true }\n     fn visit_leave_enum_variant(_variant: uint,\n                                 _disr_val: int,\n-                                _n_fields: uint) -> bool { true }\n+                                _n_fields: uint,\n+                                _name: str/&) -> bool { true }\n     fn visit_leave_enum(_n_variants: uint) -> bool { true }\n \n     fn visit_iface() -> bool { true }"}]}