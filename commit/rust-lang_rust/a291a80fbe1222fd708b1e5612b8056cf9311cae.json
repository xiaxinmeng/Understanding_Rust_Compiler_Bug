{"sha": "a291a80fbe1222fd708b1e5612b8056cf9311cae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyOTFhODBmYmUxMjIyZmQ3MDhiMWU1NjEyYjgwNTZjZjkzMTFjYWU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T13:34:44Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T22:22:11Z"}, "message": "register snapshot", "tree": {"sha": "0c5ee99f3a6845a83d089910de69427c1c271288", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c5ee99f3a6845a83d089910de69427c1c271288"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a291a80fbe1222fd708b1e5612b8056cf9311cae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a291a80fbe1222fd708b1e5612b8056cf9311cae", "html_url": "https://github.com/rust-lang/rust/commit/a291a80fbe1222fd708b1e5612b8056cf9311cae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a291a80fbe1222fd708b1e5612b8056cf9311cae/comments", "author": null, "committer": null, "parents": [{"sha": "f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "html_url": "https://github.com/rust-lang/rust/commit/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e"}], "stats": {"total": 202, "additions": 9, "deletions": 193}, "files": [{"sha": "c092e000215d3ffdc1858c3bbf5762a2abf2b8a2", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a291a80fbe1222fd708b1e5612b8056cf9311cae/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a291a80fbe1222fd708b1e5612b8056cf9311cae/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=a291a80fbe1222fd708b1e5612b8056cf9311cae", "patch": "@@ -164,21 +164,6 @@ pub struct Bitv {\n     nbits: uint\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-// FIXME(Gankro): NopeNopeNopeNopeNope (wait for IndexGet to be a thing)\n-impl Index<uint,bool> for Bitv {\n-    #[inline]\n-    fn index(&self, i: &uint) -> &bool {\n-        if self.get(*i).expect(\"index out of bounds\") {\n-            &TRUE\n-        } else {\n-            &FALSE\n-        }\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n // FIXME(Gankro): NopeNopeNopeNopeNope (wait for IndexGet to be a thing)\n impl Index<uint> for Bitv {\n     type Output = bool;"}, {"sha": "ea504530c4b21309b2660a5f1449c29742b855fe", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a291a80fbe1222fd708b1e5612b8056cf9311cae/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a291a80fbe1222fd708b1e5612b8056cf9311cae/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=a291a80fbe1222fd708b1e5612b8056cf9311cae", "patch": "@@ -877,18 +877,6 @@ impl<K: Show, V: Show> Show for BTreeMap<K, V> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-#[stable]\n-impl<K: Ord, Sized? Q, V> Index<Q, V> for BTreeMap<K, V>\n-    where Q: BorrowFrom<K> + Ord\n-{\n-    fn index(&self, key: &Q) -> &V {\n-        self.get(key).expect(\"no entry found for key\")\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable]\n impl<K: Ord, Sized? Q, V> Index<Q> for BTreeMap<K, V>\n     where Q: BorrowFrom<K> + Ord\n@@ -900,18 +888,6 @@ impl<K: Ord, Sized? Q, V> Index<Q> for BTreeMap<K, V>\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-#[stable]\n-impl<K: Ord, Sized? Q, V> IndexMut<Q, V> for BTreeMap<K, V>\n-    where Q: BorrowFrom<K> + Ord\n-{\n-    fn index_mut(&mut self, key: &Q) -> &mut V {\n-        self.get_mut(key).expect(\"no entry found for key\")\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable]\n impl<K: Ord, Sized? Q, V> IndexMut<Q> for BTreeMap<K, V>\n     where Q: BorrowFrom<K> + Ord"}, {"sha": "ce9643b3b439199b30f7866e9d24dec588134677", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a291a80fbe1222fd708b1e5612b8056cf9311cae/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a291a80fbe1222fd708b1e5612b8056cf9311cae/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=a291a80fbe1222fd708b1e5612b8056cf9311cae", "patch": "@@ -1360,17 +1360,6 @@ impl<S: Writer, A: Hash<S>> Hash<S> for RingBuf<A> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-#[stable]\n-impl<A> Index<uint, A> for RingBuf<A> {\n-    #[inline]\n-    fn index<'a>(&'a self, i: &uint) -> &'a A {\n-        self.get(*i).expect(\"Out of bounds access\")\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable]\n impl<A> Index<uint> for RingBuf<A> {\n     type Output = A;\n@@ -1381,17 +1370,6 @@ impl<A> Index<uint> for RingBuf<A> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-#[stable]\n-impl<A> IndexMut<uint, A> for RingBuf<A> {\n-    #[inline]\n-    fn index_mut<'a>(&'a mut self, i: &uint) -> &'a mut A {\n-        self.get_mut(*i).expect(\"Out of bounds access\")\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable]\n impl<A> IndexMut<uint> for RingBuf<A> {\n     type Output = A;"}, {"sha": "4e3fd44072784b7094d6278500a35c44f35cfa82", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a291a80fbe1222fd708b1e5612b8056cf9311cae/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a291a80fbe1222fd708b1e5612b8056cf9311cae/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=a291a80fbe1222fd708b1e5612b8056cf9311cae", "patch": "@@ -1190,17 +1190,6 @@ impl<S: hash::Writer, T: Hash<S>> Hash<S> for Vec<T> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-#[experimental = \"waiting on Index stability\"]\n-impl<T> Index<uint,T> for Vec<T> {\n-    #[inline]\n-    fn index<'a>(&'a self, index: &uint) -> &'a T {\n-        &self.as_slice()[*index]\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[experimental = \"waiting on Index stability\"]\n impl<T> Index<uint> for Vec<T> {\n     type Output = T;\n@@ -1211,16 +1200,6 @@ impl<T> Index<uint> for Vec<T> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<T> IndexMut<uint,T> for Vec<T> {\n-    #[inline]\n-    fn index_mut<'a>(&'a mut self, index: &uint) -> &'a mut T {\n-        &mut self.as_mut_slice()[*index]\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<T> IndexMut<uint> for Vec<T> {\n     type Output = T;\n "}, {"sha": "cc757b656238e978512314af45b1ee05bbe2437f", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a291a80fbe1222fd708b1e5612b8056cf9311cae/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a291a80fbe1222fd708b1e5612b8056cf9311cae/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=a291a80fbe1222fd708b1e5612b8056cf9311cae", "patch": "@@ -517,17 +517,6 @@ impl<V> Extend<(uint, V)> for VecMap<V> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-#[stable]\n-impl<V> Index<uint, V> for VecMap<V> {\n-    #[inline]\n-    fn index<'a>(&'a self, i: &uint) -> &'a V {\n-        self.get(i).expect(\"key not present\")\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<V> Index<uint> for VecMap<V> {\n     type Output = V;\n \n@@ -537,17 +526,6 @@ impl<V> Index<uint> for VecMap<V> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-#[stable]\n-impl<V> IndexMut<uint, V> for VecMap<V> {\n-    #[inline]\n-    fn index_mut<'a>(&'a mut self, i: &uint) -> &'a mut V {\n-        self.get_mut(i).expect(\"key not present\")\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable]\n impl<V> IndexMut<uint> for VecMap<V> {\n     type Output = V;"}, {"sha": "17e4c5f8215a8a2314b61aceedc738a6e950ecdb", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a291a80fbe1222fd708b1e5612b8056cf9311cae/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a291a80fbe1222fd708b1e5612b8056cf9311cae/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=a291a80fbe1222fd708b1e5612b8056cf9311cae", "patch": "@@ -717,15 +717,6 @@ macro_rules! shr_impl {\n \n shr_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n \n-// NOTE(stage0) remove trait after a snapshot\n-#[cfg(stage0)]\n-#[allow(missing_docs)]\n-#[lang=\"index\"]\n-pub trait Index<Sized? Index, Sized? Result> for Sized? {\n-    /// The method for the indexing (`Foo[Bar]`) operation\n-    fn index<'a>(&'a self, index: &Index) -> &'a Result;\n-}\n-\n /// The `Index` trait is used to specify the functionality of indexing operations\n /// like `arr[idx]` when used in an immutable context.\n ///\n@@ -755,7 +746,6 @@ pub trait Index<Sized? Index, Sized? Result> for Sized? {\n ///     Foo[Foo];\n /// }\n /// ```\n-#[cfg(not(stage0))]  // NOTE(stage0) remove cfg after a snapshot\n #[lang=\"index\"]\n pub trait Index<Sized? Index> for Sized? {\n     type Sized? Output;\n@@ -764,15 +754,6 @@ pub trait Index<Sized? Index> for Sized? {\n     fn index<'a>(&'a self, index: &Index) -> &'a Self::Output;\n }\n \n-// NOTE(stage0) remove trait after a snapshot\n-#[cfg(stage0)]\n-#[allow(missing_docs)]\n-#[lang=\"index_mut\"]\n-pub trait IndexMut<Sized? Index, Sized? Result> for Sized? {\n-    /// The method for the indexing (`Foo[Bar]`) operation\n-    fn index_mut<'a>(&'a mut self, index: &Index) -> &'a mut Result;\n-}\n-\n /// The `IndexMut` trait is used to specify the functionality of indexing\n /// operations like `arr[idx]`, when used in a mutable context.\n ///\n@@ -802,7 +783,6 @@ pub trait IndexMut<Sized? Index, Sized? Result> for Sized? {\n ///     &mut Foo[Foo];\n /// }\n /// ```\n-#[cfg(not(stage0))]  // NOTE(stage0) remove cfg after a snapshot\n #[lang=\"index_mut\"]\n pub trait IndexMut<Sized? Index> for Sized? {\n     type Sized? Output;"}, {"sha": "7aed16173e988bbd852cc1fd1566de977f297eb5", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a291a80fbe1222fd708b1e5612b8056cf9311cae/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a291a80fbe1222fd708b1e5612b8056cf9311cae/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=a291a80fbe1222fd708b1e5612b8056cf9311cae", "patch": "@@ -531,17 +531,6 @@ impl<T> SliceExt for [T] {\n     }\n }\n \n-// NOTE(stage0) remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<T> ops::Index<uint, T> for [T] {\n-    fn index(&self, &index: &uint) -> &T {\n-        assert!(index < self.len());\n-\n-        unsafe { mem::transmute(self.repr().data.offset(index as int)) }\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0) remove cfg after a snapshot\n impl<T> ops::Index<uint> for [T] {\n     type Output = T;\n \n@@ -552,17 +541,6 @@ impl<T> ops::Index<uint> for [T] {\n     }\n }\n \n-// NOTE(stage0) remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<T> ops::IndexMut<uint, T> for [T] {\n-    fn index_mut(&mut self, &index: &uint) -> &mut T {\n-        assert!(index < self.len());\n-\n-        unsafe { mem::transmute(self.repr().data.offset(index as int)) }\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0) remove cfg after a snapshot\n impl<T> ops::IndexMut<uint> for [T] {\n     type Output = T;\n "}, {"sha": "bd4cb1884a69a5b6708de57a5c575ff371877c8b", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a291a80fbe1222fd708b1e5612b8056cf9311cae/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a291a80fbe1222fd708b1e5612b8056cf9311cae/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=a291a80fbe1222fd708b1e5612b8056cf9311cae", "patch": "@@ -1125,15 +1125,6 @@ impl Json {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a> ops::Index<&'a str, Json>  for Json {\n-    fn index(&self, idx: & &str) -> &Json {\n-        self.find(*idx).unwrap()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<'a> ops::Index<&'a str>  for Json {\n     type Output = Json;\n \n@@ -1142,18 +1133,6 @@ impl<'a> ops::Index<&'a str>  for Json {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl ops::Index<uint, Json> for Json {\n-    fn index<'a>(&'a self, idx: &uint) -> &'a Json {\n-        match self {\n-            &Json::Array(ref v) => v.index(idx),\n-            _ => panic!(\"can only index Json with uint if it is an array\")\n-        }\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl ops::Index<uint> for Json {\n     type Output = Json;\n "}, {"sha": "c35be86420de87e1ca2849e1309195904190346f", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a291a80fbe1222fd708b1e5612b8056cf9311cae/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a291a80fbe1222fd708b1e5612b8056cf9311cae/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=a291a80fbe1222fd708b1e5612b8056cf9311cae", "patch": "@@ -1226,19 +1226,6 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S> + Default> Default for HashMap<K, V, H>\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-#[stable]\n-impl<K: Hash<S> + Eq, Sized? Q, V, S, H: Hasher<S>> Index<Q, V> for HashMap<K, V, H>\n-    where Q: BorrowFrom<K> + Hash<S> + Eq\n-{\n-    #[inline]\n-    fn index<'a>(&'a self, index: &Q) -> &'a V {\n-        self.get(index).expect(\"no entry found for key\")\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable]\n impl<K: Hash<S> + Eq, Sized? Q, V, S, H: Hasher<S>> Index<Q> for HashMap<K, V, H>\n     where Q: BorrowFrom<K> + Hash<S> + Eq\n@@ -1251,19 +1238,6 @@ impl<K: Hash<S> + Eq, Sized? Q, V, S, H: Hasher<S>> Index<Q> for HashMap<K, V, H\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-#[stable]\n-impl<K: Hash<S> + Eq, Sized? Q, V, S, H: Hasher<S>> IndexMut<Q, V> for HashMap<K, V, H>\n-    where Q: BorrowFrom<K> + Hash<S> + Eq\n-{\n-    #[inline]\n-    fn index_mut<'a>(&'a mut self, index: &Q) -> &'a mut V {\n-        self.get_mut(index).expect(\"no entry found for key\")\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable]\n impl<K: Hash<S> + Eq, Sized? Q, V, S, H: Hasher<S>> IndexMut<Q> for HashMap<K, V, H>\n     where Q: BorrowFrom<K> + Hash<S> + Eq"}, {"sha": "5c21a8a8abfb0c3615031b8bc01b7f7044abfdc9", "filename": "src/snapshots.txt", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a291a80fbe1222fd708b1e5612b8056cf9311cae/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a291a80fbe1222fd708b1e5612b8056cf9311cae/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=a291a80fbe1222fd708b1e5612b8056cf9311cae", "patch": "@@ -1,3 +1,12 @@\n+S 2015-01-04 b2085d9\n+  freebsd-x86_64 50ccb6bf9c0645d0746a5167493a39b2be40c2d4\n+  linux-i386 b880b98d832c9a049b8ef6a50df50061e363de5a\n+  linux-x86_64 82a09c162474b69d2d1e4e8399086f3f0f4e31c3\n+  macos-i386 569055bb10d96ab25f78ecf2c80ffbccd5e69b8d\n+  macos-x86_64 cff1f9ebd63dae6890359b7d353bd9486d8ecdfc\n+  winnt-i386 553790fe493413287a19d17a42bf7225d3e2272d\n+  winnt-x86_64 bab0d13960afb7ccdd6bf11452de1b9c457cc3e9\n+\n S 2015-01-02 c894171\n   freebsd-x86_64 ea8bcf75eada3539f5cbab51708eecf40d436b77\n   linux-i386 646ae265721e3cbe19404aae4fea4ffa1f1d90cf"}]}