{"sha": "74e9a29f6e96f63035aed3026374921c1ba57c00", "node_id": "C_kwDOAAsO6NoAKDc0ZTlhMjlmNmU5NmY2MzAzNWFlZDMwMjYzNzQ5MjFjMWJhNTdjMDA", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-29T01:28:51Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-29T05:30:12Z"}, "message": "Remove some late `check_*` functions.\n\nThey're not used by rustc or clippy.", "tree": {"sha": "7b401582029c18d5bb6e0d64437332edb35612e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b401582029c18d5bb6e0d64437332edb35612e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74e9a29f6e96f63035aed3026374921c1ba57c00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74e9a29f6e96f63035aed3026374921c1ba57c00", "html_url": "https://github.com/rust-lang/rust/commit/74e9a29f6e96f63035aed3026374921c1ba57c00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74e9a29f6e96f63035aed3026374921c1ba57c00/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dced80b86942e577ed820bc47845d1c9b50af6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dced80b86942e577ed820bc47845d1c9b50af6c", "html_url": "https://github.com/rust-lang/rust/commit/6dced80b86942e577ed820bc47845d1c9b50af6c"}], "stats": {"total": 36, "additions": 2, "deletions": 34}, "files": [{"sha": "a329b37519d98a04ec661f9c194918b0c8614b5b", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/74e9a29f6e96f63035aed3026374921c1ba57c00/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e9a29f6e96f63035aed3026374921c1ba57c00/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=74e9a29f6e96f63035aed3026374921c1ba57c00", "patch": "@@ -81,7 +81,6 @@ impl<'tcx, T: LateLintPass<'tcx>> LateContextAndPass<'tcx, T> {\n     fn process_mod(&mut self, m: &'tcx hir::Mod<'tcx>, s: Span, n: hir::HirId) {\n         lint_callback!(self, check_mod, m, s, n);\n         hir_visit::walk_mod(self, m, n);\n-        lint_callback!(self, check_mod_post, m, s, n);\n     }\n }\n \n@@ -118,7 +117,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n         self.with_lint_attrs(param.hir_id, |cx| {\n-            lint_callback!(cx, check_param, param);\n             hir_visit::walk_param(cx, param);\n         });\n     }\n@@ -151,7 +149,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n             cx.with_param_env(it.hir_id(), |cx| {\n                 lint_callback!(cx, check_foreign_item, it);\n                 hir_visit::walk_foreign_item(cx, it);\n-                lint_callback!(cx, check_foreign_item_post, it);\n             });\n         })\n     }\n@@ -193,7 +190,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         let body = self.context.tcx.hir().body(body_id);\n         lint_callback!(self, check_fn, fk, decl, body, span, id);\n         hir_visit::walk_fn(self, fk, decl, body_id, span, id);\n-        lint_callback!(self, check_fn_post, fk, decl, body, span, id);\n         self.context.enclosing_body = old_enclosing_body;\n         self.context.cached_typeck_results.set(old_cached_typeck_results);\n     }\n@@ -208,7 +204,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     ) {\n         lint_callback!(self, check_struct_def, s);\n         hir_visit::walk_struct_def(self, s);\n-        lint_callback!(self, check_struct_def_post, s);\n     }\n \n     fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {\n@@ -227,7 +222,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         self.with_lint_attrs(v.id, |cx| {\n             lint_callback!(cx, check_variant, v);\n             hir_visit::walk_variant(cx, v, g, item_id);\n-            lint_callback!(cx, check_variant_post, v);\n         })\n     }\n \n@@ -237,14 +231,9 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     }\n \n     fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n-        lint_callback!(self, check_infer, inf);\n         hir_visit::walk_inf(self, inf);\n     }\n \n-    fn visit_name(&mut self, sp: Span, name: Symbol) {\n-        lint_callback!(self, check_name, sp, name);\n-    }\n-\n     fn visit_mod(&mut self, m: &'tcx hir::Mod<'tcx>, s: Span, n: hir::HirId) {\n         if !self.context.only_module {\n             self.process_mod(m, s, n);\n@@ -280,7 +269,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     }\n \n     fn visit_where_predicate(&mut self, p: &'tcx hir::WherePredicate<'tcx>) {\n-        lint_callback!(self, check_where_predicate, p);\n         hir_visit::walk_where_predicate(self, p);\n     }\n \n@@ -300,7 +288,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n             cx.with_param_env(trait_item.hir_id(), |cx| {\n                 lint_callback!(cx, check_trait_item, trait_item);\n                 hir_visit::walk_trait_item(cx, trait_item);\n-                lint_callback!(cx, check_trait_item_post, trait_item);\n             });\n         });\n         self.context.generics = generics;\n@@ -320,7 +307,6 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     }\n \n     fn visit_lifetime(&mut self, lt: &'tcx hir::Lifetime) {\n-        lint_callback!(self, check_lifetime, lt);\n         hir_visit::walk_lifetime(self, lt);\n     }\n "}, {"sha": "ec96f354021fa1c2f2158ae4c931dd72a73d3205", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74e9a29f6e96f63035aed3026374921c1ba57c00/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e9a29f6e96f63035aed3026374921c1ba57c00/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=74e9a29f6e96f63035aed3026374921c1ba57c00", "patch": "@@ -75,7 +75,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::{\n     BARE_TRAIT_OBJECTS, ELIDED_LIFETIMES_IN_PATHS, EXPLICIT_OUTLIVES_REQUIREMENTS,\n };\n-use rustc_span::symbol::{Ident, Symbol};\n+use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n use array_into_iter::ArrayIntoIter;"}, {"sha": "cb7bd407ed4c8670168f71f30a270de693004f9e", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/74e9a29f6e96f63035aed3026374921c1ba57c00/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e9a29f6e96f63035aed3026374921c1ba57c00/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=74e9a29f6e96f63035aed3026374921c1ba57c00", "patch": "@@ -5,23 +5,19 @@ use rustc_data_structures::sync;\n use rustc_hir as hir;\n use rustc_session::lint::builtin::HardwiredLints;\n use rustc_session::lint::LintPass;\n-use rustc_span::symbol::{Ident, Symbol};\n+use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n #[macro_export]\n macro_rules! late_lint_methods {\n     ($macro:path, $args:tt, [$hir:tt]) => (\n         $macro!($args, [$hir], [\n-            fn check_param(a: &$hir hir::Param<$hir>);\n             fn check_body(a: &$hir hir::Body<$hir>);\n             fn check_body_post(a: &$hir hir::Body<$hir>);\n-            fn check_name(a: Span, b: Symbol);\n             fn check_crate();\n             fn check_crate_post();\n             fn check_mod(a: &$hir hir::Mod<$hir>, b: Span, c: hir::HirId);\n-            fn check_mod_post(a: &$hir hir::Mod<$hir>, b: Span, c: hir::HirId);\n             fn check_foreign_item(a: &$hir hir::ForeignItem<$hir>);\n-            fn check_foreign_item_post(a: &$hir hir::ForeignItem<$hir>);\n             fn check_item(a: &$hir hir::Item<$hir>);\n             fn check_item_post(a: &$hir hir::Item<$hir>);\n             fn check_local(a: &$hir hir::Local<$hir>);\n@@ -33,35 +29,21 @@ macro_rules! late_lint_methods {\n             fn check_expr(a: &$hir hir::Expr<$hir>);\n             fn check_expr_post(a: &$hir hir::Expr<$hir>);\n             fn check_ty(a: &$hir hir::Ty<$hir>);\n-            fn check_infer(a: &$hir hir::InferArg);\n-            fn check_generic_arg(a: &$hir hir::GenericArg<$hir>);\n             fn check_generic_param(a: &$hir hir::GenericParam<$hir>);\n             fn check_generics(a: &$hir hir::Generics<$hir>);\n-            fn check_where_predicate(a: &$hir hir::WherePredicate<$hir>);\n             fn check_poly_trait_ref(a: &$hir hir::PolyTraitRef<$hir>, b: hir::TraitBoundModifier);\n             fn check_fn(\n                 a: rustc_hir::intravisit::FnKind<$hir>,\n                 b: &$hir hir::FnDecl<$hir>,\n                 c: &$hir hir::Body<$hir>,\n                 d: Span,\n                 e: hir::HirId);\n-            fn check_fn_post(\n-                a: rustc_hir::intravisit::FnKind<$hir>,\n-                b: &$hir hir::FnDecl<$hir>,\n-                c: &$hir hir::Body<$hir>,\n-                d: Span,\n-                e: hir::HirId\n-            );\n             fn check_trait_item(a: &$hir hir::TraitItem<$hir>);\n-            fn check_trait_item_post(a: &$hir hir::TraitItem<$hir>);\n             fn check_impl_item(a: &$hir hir::ImplItem<$hir>);\n             fn check_impl_item_post(a: &$hir hir::ImplItem<$hir>);\n             fn check_struct_def(a: &$hir hir::VariantData<$hir>);\n-            fn check_struct_def_post(a: &$hir hir::VariantData<$hir>);\n             fn check_field_def(a: &$hir hir::FieldDef<$hir>);\n             fn check_variant(a: &$hir hir::Variant<$hir>);\n-            fn check_variant_post(a: &$hir hir::Variant<$hir>);\n-            fn check_lifetime(a: &$hir hir::Lifetime);\n             fn check_path(a: &$hir hir::Path<$hir>, b: hir::HirId);\n             fn check_attribute(a: &$hir ast::Attribute);\n "}]}