{"sha": "b34cf1a9e176e3ca525638e9075696d8467596ba", "node_id": "C_kwDOAAsO6NoAKGIzNGNmMWE5ZTE3NmUzY2E1MjU2MzhlOTA3NTY5NmQ4NDY3NTk2YmE", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-09-03T09:44:36Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-12-04T18:15:47Z"}, "message": "Swap body of array::IntoIter::new and IntoIterator::new.", "tree": {"sha": "37eb08c0edee39141222165707940d9bc00d2388", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37eb08c0edee39141222165707940d9bc00d2388"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b34cf1a9e176e3ca525638e9075696d8467596ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b34cf1a9e176e3ca525638e9075696d8467596ba", "html_url": "https://github.com/rust-lang/rust/commit/b34cf1a9e176e3ca525638e9075696d8467596ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b34cf1a9e176e3ca525638e9075696d8467596ba/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "911ee9403e1778ebac01b5f2d45ab9d960d5da4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/911ee9403e1778ebac01b5f2d45ab9d960d5da4a", "html_url": "https://github.com/rust-lang/rust/commit/911ee9403e1778ebac01b5f2d45ab9d960d5da4a"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "01ccf12a71a35225f42593c7467e50425267ffab", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b34cf1a9e176e3ca525638e9075696d8467596ba/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b34cf1a9e176e3ca525638e9075696d8467596ba/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=b34cf1a9e176e3ca525638e9075696d8467596ba", "patch": "@@ -34,11 +34,23 @@ pub struct IntoIter<T, const N: usize> {\n     alive: Range<usize>,\n }\n \n-impl<T, const N: usize> IntoIter<T, N> {\n-    /// Creates a new iterator over the given `array`.\n-    #[stable(feature = \"array_value_iter\", since = \"1.51.0\")]\n-    #[rustc_deprecated(since = \"1.57.0\", reason = \"use `IntoIterator::into_iter` instead\")]\n-    pub fn new(array: [T; N]) -> Self {\n+// Note: the `#[rustc_skip_array_during_method_dispatch]` on `trait IntoIterator`\n+// hides this implementation from explicit `.into_iter()` calls on editions < 2021,\n+// so those calls will still resolve to the slice implementation, by reference.\n+#[stable(feature = \"array_into_iter_impl\", since = \"1.53.0\")]\n+impl<T, const N: usize> IntoIterator for [T; N] {\n+    type Item = T;\n+    type IntoIter = IntoIter<T, N>;\n+\n+    /// Creates a consuming iterator, that is, one that moves each value out of\n+    /// the array (from start to end). The array cannot be used after calling\n+    /// this unless `T` implements `Copy`, so the whole array is copied.\n+    ///\n+    /// Arrays have special behavior when calling `.into_iter()` prior to the\n+    /// 2021 edition -- see the [array] Editions section for more information.\n+    ///\n+    /// [array]: prim@array\n+    fn into_iter(self) -> Self::IntoIter {\n         // SAFETY: The transmute here is actually safe. The docs of `MaybeUninit`\n         // promise:\n         //\n@@ -57,11 +69,20 @@ impl<T, const N: usize> IntoIter<T, N> {\n         // Until then, we can use `mem::transmute_copy` to create a bitwise copy\n         // as a different type, then forget `array` so that it is not dropped.\n         unsafe {\n-            let iter = Self { data: mem::transmute_copy(&array), alive: 0..N };\n-            mem::forget(array);\n+            let iter = IntoIter { data: mem::transmute_copy(&self), alive: 0..N };\n+            mem::forget(self);\n             iter\n         }\n     }\n+}\n+\n+impl<T, const N: usize> IntoIter<T, N> {\n+    /// Creates a new iterator over the given `array`.\n+    #[stable(feature = \"array_value_iter\", since = \"1.51.0\")]\n+    #[rustc_deprecated(since = \"1.57.0\", reason = \"use `IntoIterator::into_iter` instead\")]\n+    pub fn new(array: [T; N]) -> Self {\n+        IntoIterator::into_iter(array)\n+    }\n \n     /// Returns an immutable slice of all elements that have not been yielded\n     /// yet."}, {"sha": "23fd1453e54d1bedfa3d4907b10975f062da371e", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b34cf1a9e176e3ca525638e9075696d8467596ba/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b34cf1a9e176e3ca525638e9075696d8467596ba/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=b34cf1a9e176e3ca525638e9075696d8467596ba", "patch": "@@ -243,27 +243,6 @@ impl<T: fmt::Debug, const N: usize> fmt::Debug for [T; N] {\n     }\n }\n \n-// Note: the `#[rustc_skip_array_during_method_dispatch]` on `trait IntoIterator`\n-// hides this implementation from explicit `.into_iter()` calls on editions < 2021,\n-// so those calls will still resolve to the slice implementation, by reference.\n-#[stable(feature = \"array_into_iter_impl\", since = \"1.53.0\")]\n-impl<T, const N: usize> IntoIterator for [T; N] {\n-    type Item = T;\n-    type IntoIter = IntoIter<T, N>;\n-\n-    /// Creates a consuming iterator, that is, one that moves each value out of\n-    /// the array (from start to end). The array cannot be used after calling\n-    /// this unless `T` implements `Copy`, so the whole array is copied.\n-    ///\n-    /// Arrays have special behavior when calling `.into_iter()` prior to the\n-    /// 2021 edition -- see the [array] Editions section for more information.\n-    ///\n-    /// [array]: prim@array\n-    fn into_iter(self) -> Self::IntoIter {\n-        IntoIter::new(self)\n-    }\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T, const N: usize> IntoIterator for &'a [T; N] {\n     type Item = &'a T;"}]}