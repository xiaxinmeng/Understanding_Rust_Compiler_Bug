{"sha": "192b6f5a78a122f3c1c2a459b4fa87ed624f4469", "node_id": "C_kwDOAAsO6NoAKDE5MmI2ZjVhNzhhMTIyZjNjMWMyYTQ1OWI0ZmE4N2VkNjI0ZjQ0Njk", "commit": {"author": {"name": "vi_mi", "email": "fkjainco@gmail.com", "date": "2022-02-22T13:02:36Z"}, "committer": {"name": "vi_mi", "email": "fkjainco@gmail.com", "date": "2022-02-22T13:05:45Z"}, "message": "fix: visibility in impl items and pub(crate) to pub in extract_module", "tree": {"sha": "2d70311f23b59fb18fd617dde1c91477b663b25b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d70311f23b59fb18fd617dde1c91477b663b25b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/192b6f5a78a122f3c1c2a459b4fa87ed624f4469", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/192b6f5a78a122f3c1c2a459b4fa87ed624f4469", "html_url": "https://github.com/rust-lang/rust/commit/192b6f5a78a122f3c1c2a459b4fa87ed624f4469", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/192b6f5a78a122f3c1c2a459b4fa87ed624f4469/comments", "author": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0247e5067606a0b642fcfa463a26acfaf8a26557", "url": "https://api.github.com/repos/rust-lang/rust/commits/0247e5067606a0b642fcfa463a26acfaf8a26557", "html_url": "https://github.com/rust-lang/rust/commit/0247e5067606a0b642fcfa463a26acfaf8a26557"}], "stats": {"total": 62, "additions": 49, "deletions": 13}, "files": [{"sha": "d3652d68d8af5648c451a62b01ec907e045bc5ab", "filename": "crates/ide_assists/src/handlers/extract_module.rs", "status": "modified", "additions": 49, "deletions": 13, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/192b6f5a78a122f3c1c2a459b4fa87ed624f4469/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192b6f5a78a122f3c1c2a459b4fa87ed624f4469/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=192b6f5a78a122f3c1c2a459b4fa87ed624f4469", "patch": "@@ -779,7 +779,12 @@ fn get_replacements_for_visibilty_change(\n             ast::Item::Enum(it) => replacements.push((it.visibility(), it.syntax().clone())),\n             ast::Item::ExternCrate(it) => replacements.push((it.visibility(), it.syntax().clone())),\n             ast::Item::Fn(it) => replacements.push((it.visibility(), it.syntax().clone())),\n-            ast::Item::Impl(it) => impls.push(it),\n+            ast::Item::Impl(it) => {\n+                //Associated item's visibility should not be changed\n+                if let None = it.for_token() {\n+                    impls.push(it);\n+                }\n+            }\n             ast::Item::MacroRules(it) => replacements.push((it.visibility(), it.syntax().clone())),\n             ast::Item::MacroDef(it) => replacements.push((it.visibility(), it.syntax().clone())),\n             ast::Item::Module(it) => replacements.push((it.visibility(), it.syntax().clone())),\n@@ -825,11 +830,7 @@ fn add_change_vis(\n     vis: Option<ast::Visibility>,\n     node_or_token_opt: Option<syntax::SyntaxElement>,\n ) -> Option<()> {\n-    if let Some(vis) = vis {\n-        if vis.syntax().text() == \"pub\" {\n-            ted::replace(vis.syntax(), make::visibility_pub_crate().syntax().clone_for_update());\n-        }\n-    } else {\n+    if let None = vis {\n         if let Some(node_or_token) = node_or_token_opt {\n             let pub_crate_vis = make::visibility_pub_crate().clone_for_update();\n             if let Some(node) = node_or_token.as_node() {\n@@ -962,8 +963,8 @@ mod modname {\n         pub(crate) inner: SomeType,\n     }\n \n-    pub(crate) struct PrivateStruct1 {\n-        pub(crate) inner: i32,\n+    pub struct PrivateStruct1 {\n+        pub inner: i32,\n     }\n \n     impl PrivateStruct {\n@@ -1033,7 +1034,7 @@ mod modname {\n     pub(crate) struct A {}\n \n     impl A {\n-        pub(crate) fn new_a() -> i32 {\n+        pub fn new_a() -> i32 {\n             2\n         }\n     }\n@@ -1148,7 +1149,7 @@ mod modname {\n                 pub struct PrivateStruct;\n \n $0struct Strukt {\n-    field: PrivateStruct,\n+   field: PrivateStruct,\n }$0\n \n                 struct Strukt1 {\n@@ -1164,7 +1165,7 @@ mod modname {\n     use super::PrivateStruct;\n \n     pub(crate) struct Strukt {\n-        pub(crate) field: PrivateStruct,\n+       pub(crate) field: PrivateStruct,\n     }\n }\n \n@@ -1203,7 +1204,7 @@ mod modname {\n     use super::A;\n \n     impl A {\n-        pub(crate) fn new_a() -> i32 {\n+        pub fn new_a() -> i32 {\n             2\n         }\n     }\n@@ -1251,7 +1252,7 @@ mod modname {\n     use super::super::foo::A;\n \n     impl A {\n-        pub(crate) fn new_a() -> i32 {\n+        pub fn new_a() -> i32 {\n             2\n         }\n     }\n@@ -1378,4 +1379,39 @@ mod modname {\n             \",\n         )\n     }\n+\n+    #[test]\n+    fn test_do_not_apply_visibility_modifier_to_trait_impl_items() {\n+        check_assist(\n+            extract_module,\n+            r\"\n+            trait ATrait {\n+                fn function();\n+            }\n+\n+            struct A {}\n+\n+$0impl ATrait for A {\n+    fn function() {}\n+}$0\n+            \",\n+            r\"\n+            trait ATrait {\n+                fn function();\n+            }\n+\n+            struct A {}\n+\n+mod modname {\n+    use super::A;\n+\n+    use super::ATrait;\n+\n+    impl ATrait for A {\n+        fn function() {}\n+    }\n+}\n+            \",\n+        )\n+    }\n }"}]}