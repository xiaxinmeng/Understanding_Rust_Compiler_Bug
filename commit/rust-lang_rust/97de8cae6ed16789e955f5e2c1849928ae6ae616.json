{"sha": "97de8cae6ed16789e955f5e2c1849928ae6ae616", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZGU4Y2FlNmVkMTY3ODllOTU1ZjVlMmMxODQ5OTI4YWU2YWU2MTY=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2017-10-15T18:03:03Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2017-11-03T18:13:22Z"}, "message": "Parse auto traits the same as traits.\n\nThis moves the well formedness checks to the AST validation pass. Tests\nwere adjusted.\n\nThe auto keyword should be back-compat now.", "tree": {"sha": "bec5ae4abd893546d361cb444927106ecb629c76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bec5ae4abd893546d361cb444927106ecb629c76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97de8cae6ed16789e955f5e2c1849928ae6ae616", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97de8cae6ed16789e955f5e2c1849928ae6ae616", "html_url": "https://github.com/rust-lang/rust/commit/97de8cae6ed16789e955f5e2c1849928ae6ae616", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97de8cae6ed16789e955f5e2c1849928ae6ae616/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d181ac2de9ccc9647155938fc1aef4d66d4a6f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d181ac2de9ccc9647155938fc1aef4d66d4a6f7", "html_url": "https://github.com/rust-lang/rust/commit/9d181ac2de9ccc9647155938fc1aef4d66d4a6f7"}], "stats": {"total": 193, "additions": 83, "deletions": 110}, "files": [{"sha": "f2e4fd7dbe0e3c2a6ba589fcf205cf1e02c8141c", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/97de8cae6ed16789e955f5e2c1849928ae6ae616/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97de8cae6ed16789e955f5e2c1849928ae6ae616/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=97de8cae6ed16789e955f5e2c1849928ae6ae616", "patch": "@@ -229,7 +229,22 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     }\n                 }\n             }\n-            ItemKind::Trait(.., ref bounds, ref trait_items) => {\n+            ItemKind::Trait(is_auto, _, ref generics, ref bounds, ref trait_items) => {\n+                if is_auto == IsAuto::Yes {\n+                    // Auto traits cannot have generics, super traits nor contain items.\n+                    if !generics.ty_params.is_empty() {\n+                        self.err_handler().span_err(item.span,\n+                                                    \"auto traits cannot have generics\");\n+                    }\n+                    if !bounds.is_empty() {\n+                        self.err_handler().span_err(item.span,\n+                                                    \"auto traits cannot have super traits\");\n+                    }\n+                    if !trait_items.is_empty() {\n+                        self.err_handler().span_err(item.span,\n+                                                    \"auto traits cannot contain items\");\n+                    }\n+                }\n                 self.no_questions_in_bounds(bounds, \"supertraits\", true);\n                 for trait_item in trait_items {\n                     if let TraitItemKind::Method(ref sig, ref block) = trait_item.node {"}, {"sha": "5176379ee2f88b08ef89e13884fbb789f346ce22", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 32, "deletions": 49, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/97de8cae6ed16789e955f5e2c1849928ae6ae616/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97de8cae6ed16789e955f5e2c1849928ae6ae616/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=97de8cae6ed16789e955f5e2c1849928ae6ae616", "patch": "@@ -16,7 +16,6 @@ use ast::{Mod, Arg, Arm, Attribute, BindingMode, TraitItemKind};\n use ast::Block;\n use ast::{BlockCheckMode, CaptureBy};\n use ast::{Constness, Crate};\n-use ast::Generics;\n use ast::Defaultness;\n use ast::EnumDef;\n use ast::{Expr, ExprKind, RangeLimits};\n@@ -3874,6 +3873,16 @@ impl<'a> Parser<'a> {\n         self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())\n     }\n \n+    fn eat_auto_trait(&mut self) -> bool {\n+        if self.token.is_keyword(keywords::Auto)\n+            && self.look_ahead(1, |t| t.is_keyword(keywords::Trait))\n+        {\n+            self.eat_keyword(keywords::Auto) && self.eat_keyword(keywords::Trait)\n+        } else {\n+            false\n+        }\n+    }\n+\n     fn is_defaultness(&self) -> bool {\n         // `pub` is included for better error messages\n         self.token.is_keyword(keywords::Default) &&\n@@ -5052,7 +5061,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse trait Foo { ... }\n-    fn parse_item_trait(&mut self, unsafety: Unsafety) -> PResult<'a, ItemInfo> {\n+    fn parse_item_trait(&mut self, is_auto: IsAuto, unsafety: Unsafety) -> PResult<'a, ItemInfo> {\n         let ident = self.parse_ident()?;\n         let mut tps = self.parse_generics()?;\n \n@@ -5079,17 +5088,7 @@ impl<'a> Parser<'a> {\n                 }\n             }\n         }\n-        Ok((ident, ItemKind::Trait(IsAuto::No, unsafety, tps, bounds, trait_items), None))\n-    }\n-\n-    fn parse_item_auto_trait(&mut self, unsafety: Unsafety) -> PResult<'a, ItemInfo> {\n-        let ident = self.parse_ident()?;\n-        self.expect(&token::OpenDelim(token::Brace))?;\n-        self.expect(&token::CloseDelim(token::Brace))?;\n-        // Auto traits cannot have generics, super traits nor contain items.\n-        Ok((ident,\n-            ItemKind::Trait(IsAuto::Yes, unsafety, Generics::default(), Vec::new(), Vec::new()),\n-            None))\n+        Ok((ident, ItemKind::Trait(is_auto, unsafety, tps, bounds, trait_items), None))\n     }\n \n     /// Parses items implementations variants\n@@ -5999,44 +5998,19 @@ impl<'a> Parser<'a> {\n             return Ok(Some(item));\n         }\n         if self.check_keyword(keywords::Unsafe) &&\n-            self.look_ahead(1, |t| t.is_keyword(keywords::Trait))\n+            (self.look_ahead(1, |t| t.is_keyword(keywords::Trait)) ||\n+            self.look_ahead(1, |t| t.is_keyword(keywords::Auto)))\n         {\n             // UNSAFE TRAIT ITEM\n             self.expect_keyword(keywords::Unsafe)?;\n-            self.expect_keyword(keywords::Trait)?;\n+            let is_auto = if self.eat_keyword(keywords::Trait) {\n+                IsAuto::No\n+            } else {\n+                self.eat_auto_trait();\n+                IsAuto::Yes\n+            };\n             let (ident, item_, extra_attrs) =\n-                self.parse_item_trait(ast::Unsafety::Unsafe)?;\n-            let prev_span = self.prev_span;\n-            let item = self.mk_item(lo.to(prev_span),\n-                                    ident,\n-                                    item_,\n-                                    visibility,\n-                                    maybe_append(attrs, extra_attrs));\n-            return Ok(Some(item));\n-        }\n-        if self.eat_keyword(keywords::Auto) {\n-            self.expect_keyword(keywords::Trait)?;\n-            // AUTO TRAIT ITEM\n-            let (ident,\n-                 item_,\n-                 extra_attrs) = self.parse_item_auto_trait(ast::Unsafety::Normal)?;\n-            let prev_span = self.prev_span;\n-            let item = self.mk_item(lo.to(prev_span),\n-                                    ident,\n-                                    item_,\n-                                    visibility,\n-                                    maybe_append(attrs, extra_attrs));\n-            return Ok(Some(item));\n-        }\n-        if self.check_keyword(keywords::Unsafe) &&\n-            self.look_ahead(1, |t| t.is_keyword(keywords::Auto)) {\n-            self.expect_keyword(keywords::Unsafe)?;\n-            self.expect_keyword(keywords::Auto)?;\n-            self.expect_keyword(keywords::Trait)?;\n-            // UNSAFE AUTO TRAIT ITEM\n-            let (ident,\n-                 item_,\n-                 extra_attrs) = self.parse_item_auto_trait(ast::Unsafety::Unsafe)?;\n+                self.parse_item_trait(is_auto, ast::Unsafety::Unsafe)?;\n             let prev_span = self.prev_span;\n             let item = self.mk_item(lo.to(prev_span),\n                                     ident,\n@@ -6139,10 +6113,19 @@ impl<'a> Parser<'a> {\n                                     maybe_append(attrs, extra_attrs));\n             return Ok(Some(item));\n         }\n-        if self.eat_keyword(keywords::Trait) {\n+        if self.check_keyword(keywords::Trait)\n+            || (self.check_keyword(keywords::Auto)\n+                && self.look_ahead(1, |t| t.is_keyword(keywords::Trait)))\n+        {\n+            let is_auto = if self.eat_keyword(keywords::Trait) {\n+                IsAuto::No\n+            } else {\n+                self.eat_auto_trait();\n+                IsAuto::Yes\n+            };\n             // TRAIT ITEM\n             let (ident, item_, extra_attrs) =\n-                self.parse_item_trait(ast::Unsafety::Normal)?;\n+                self.parse_item_trait(is_auto, ast::Unsafety::Normal)?;\n             let prev_span = self.prev_span;\n             let item = self.mk_item(lo.to(prev_span),\n                                     ident,"}, {"sha": "3d3cb9ab1047bf6fe5ab611742b31e63f32fd43a", "filename": "src/test/compile-fail/auto-is-contextual.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9d181ac2de9ccc9647155938fc1aef4d66d4a6f7/src%2Ftest%2Fcompile-fail%2Fauto-is-contextual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d181ac2de9ccc9647155938fc1aef4d66d4a6f7/src%2Ftest%2Fcompile-fail%2Fauto-is-contextual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauto-is-contextual.rs?ref=9d181ac2de9ccc9647155938fc1aef4d66d4a6f7", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-type A0 = auto;\n-//~^ ERROR cannot find type `auto` in this scope\n-type A1 = auto::auto;\n-//~^ ERROR Use of undeclared type or module `auto`\n-type A2 = auto<auto, auto>;\n-//~^ ERROR cannot find type `auto` in this scope\n-//~| ERROR cannot find type `auto` in this scope\n-//~| ERROR cannot find type `auto` in this scope\n-type A3 = auto<<auto as auto>::auto>;\n-//~^ ERROR cannot find type `auto` in this scope\n-//~| ERROR cannot find type `auto` in this scope\n-//~| ERROR Use of undeclared type or module `auto`\n-type A4 = auto(auto, auto) -> auto;\n-//~^ ERROR cannot find type `auto` in this scope\n-//~| ERROR cannot find type `auto` in this scope\n-//~| ERROR cannot find type `auto` in this scope\n-//~| ERROR cannot find type `auto` in this scope\n-\n-fn main() {}"}, {"sha": "b28b776d9c2a656d9ff05ef63aad076275695b14", "filename": "src/test/compile-fail/auto-trait-validation.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/97de8cae6ed16789e955f5e2c1849928ae6ae616/src%2Ftest%2Fcompile-fail%2Fauto-trait-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97de8cae6ed16789e955f5e2c1849928ae6ae616/src%2Ftest%2Fcompile-fail%2Fauto-trait-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauto-trait-validation.rs?ref=97de8cae6ed16789e955f5e2c1849928ae6ae616", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+\n+auto trait Generic<T> {}\n+//~^ ERROR auto traits cannot have generics\n+//~^^ traits with auto impls (`e.g. impl Trait for ..`) can not have type parameters\n+auto trait Bound : Copy {}\n+//~^ ERROR auto traits cannot have super traits\n+//~^^ traits with auto impls (`e.g. impl Trait for ..`) cannot have predicates\n+auto trait MyTrait { fn foo() {} }\n+//~^ ERROR auto traits cannot contain items\n+//~^^ traits with default impls (`e.g. impl Trait for ..`) must have no methods or associated items\n+fn main() {}"}, {"sha": "2754546779df906f59712d81c68b81de18eb2937", "filename": "src/test/parse-fail/auto-trait-no-rename.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9d181ac2de9ccc9647155938fc1aef4d66d4a6f7/src%2Ftest%2Fparse-fail%2Fauto-trait-no-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d181ac2de9ccc9647155938fc1aef4d66d4a6f7/src%2Ftest%2Fparse-fail%2Fauto-trait-no-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fauto-trait-no-rename.rs?ref=9d181ac2de9ccc9647155938fc1aef4d66d4a6f7", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags: -Z parse-only\n-\n-auto trait Auto { fn item() }\n-//~^ ERROR: expected `}`, found `fn`"}, {"sha": "bc0d9c1aa09641655014221a4667457830e19e3a", "filename": "src/test/parse-fail/auto-trait-no-super.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9d181ac2de9ccc9647155938fc1aef4d66d4a6f7/src%2Ftest%2Fparse-fail%2Fauto-trait-no-super.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d181ac2de9ccc9647155938fc1aef4d66d4a6f7/src%2Ftest%2Fparse-fail%2Fauto-trait-no-super.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fauto-trait-no-super.rs?ref=9d181ac2de9ccc9647155938fc1aef4d66d4a6f7", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags: -Z parse-only\n-\n-auto trait Auto : Send { }\n-//~^ ERROR: expected `{`, found `:`"}, {"sha": "ad433cc26a790bdf3984052049e8d82bcfdf8fd2", "filename": "src/test/run-pass/auto-is-contextual.rs", "status": "renamed", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/97de8cae6ed16789e955f5e2c1849928ae6ae616/src%2Ftest%2Frun-pass%2Fauto-is-contextual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97de8cae6ed16789e955f5e2c1849928ae6ae616/src%2Ftest%2Frun-pass%2Fauto-is-contextual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-is-contextual.rs?ref=97de8cae6ed16789e955f5e2c1849928ae6ae616", "patch": "@@ -8,7 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only\n+macro_rules! auto {\n+    () => (struct S;)\n+}\n \n-auto trait Auto<T> { }\n-//~^ ERROR: expected `{`, found `<`\n+auto!();\n+\n+fn auto() {}\n+\n+fn main() {\n+    auto();\n+    let auto = 10;\n+    auto;\n+    auto as u8;\n+}", "previous_filename": "src/test/parse-fail/auto-trait-no-generics.rs"}]}