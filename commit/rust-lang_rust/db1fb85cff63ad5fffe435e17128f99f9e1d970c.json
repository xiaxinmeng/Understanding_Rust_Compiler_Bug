{"sha": "db1fb85cff63ad5fffe435e17128f99f9e1d970c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMWZiODVjZmY2M2FkNWZmZmU0MzVlMTcxMjhmOTlmOWUxZDk3MGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-20T07:21:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-20T07:21:05Z"}, "message": "Auto merge of #88321 - glaubitz:m68k-linux, r=wesleywiser\n\nAdd initial support for m68k\n\nThis patch series adds initial support for m68k making use of the new M68k\nbackend introduced with LLVM-13. Additional changes will be needed to be\nable to actually use the backend for this target.", "tree": {"sha": "ca06ae6710ea86d1f428d321a0cafaa5f2dbf083", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca06ae6710ea86d1f428d321a0cafaa5f2dbf083"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db1fb85cff63ad5fffe435e17128f99f9e1d970c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db1fb85cff63ad5fffe435e17128f99f9e1d970c", "html_url": "https://github.com/rust-lang/rust/commit/db1fb85cff63ad5fffe435e17128f99f9e1d970c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db1fb85cff63ad5fffe435e17128f99f9e1d970c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e71925aab9e28ce35363e3fdef27ca011ac6a1dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e71925aab9e28ce35363e3fdef27ca011ac6a1dc", "html_url": "https://github.com/rust-lang/rust/commit/e71925aab9e28ce35363e3fdef27ca011ac6a1dc"}, {"sha": "5d22b1afe2ff3adb9903cb71ff386828c16fd805", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d22b1afe2ff3adb9903cb71ff386828c16fd805", "html_url": "https://github.com/rust-lang/rust/commit/5d22b1afe2ff3adb9903cb71ff386828c16fd805"}], "stats": {"total": 198, "additions": 196, "deletions": 2}, "files": [{"sha": "36a6d2cc33a99936b53df8c3566798683c9c71fb", "filename": "compiler/rustc_llvm/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db1fb85cff63ad5fffe435e17128f99f9e1d970c/compiler%2Frustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1fb85cff63ad5fffe435e17128f99f9e1d970c/compiler%2Frustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fbuild.rs?ref=db1fb85cff63ad5fffe435e17128f99f9e1d970c", "patch": "@@ -76,6 +76,7 @@ fn main() {\n         \"aarch64\",\n         \"amdgpu\",\n         \"avr\",\n+        \"m68k\",\n         \"mips\",\n         \"powerpc\",\n         \"systemz\","}, {"sha": "8dbacd71fc13892ee3877fa6ac4e987875de97ba", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/db1fb85cff63ad5fffe435e17128f99f9e1d970c/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/db1fb85cff63ad5fffe435e17128f99f9e1d970c/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=db1fb85cff63ad5fffe435e17128f99f9e1d970c", "patch": "@@ -201,6 +201,12 @@ void LLVMRustAddLastExtensionPasses(\n #define SUBTARGET_AVR\n #endif\n \n+#ifdef LLVM_COMPONENT_M68k\n+#define SUBTARGET_M68K SUBTARGET(M68k)\n+#else\n+#define SUBTARGET_M68K\n+#endif\n+\n #ifdef LLVM_COMPONENT_MIPS\n #define SUBTARGET_MIPS SUBTARGET(Mips)\n #else\n@@ -248,6 +254,7 @@ void LLVMRustAddLastExtensionPasses(\n   SUBTARGET_ARM                                                                \\\n   SUBTARGET_AARCH64                                                            \\\n   SUBTARGET_AVR                                                                \\\n+  SUBTARGET_M68K                                                               \\\n   SUBTARGET_MIPS                                                               \\\n   SUBTARGET_PPC                                                                \\\n   SUBTARGET_SYSTEMZ                                                            \\"}, {"sha": "2f199989d3b214f467ef17760e7697c0e62e7348", "filename": "compiler/rustc_llvm/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db1fb85cff63ad5fffe435e17128f99f9e1d970c/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1fb85cff63ad5fffe435e17128f99f9e1d970c/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fsrc%2Flib.rs?ref=db1fb85cff63ad5fffe435e17128f99f9e1d970c", "patch": "@@ -90,6 +90,14 @@ pub fn initialize_available_targets() {\n         LLVMInitializeAVRAsmPrinter,\n         LLVMInitializeAVRAsmParser\n     );\n+    init_target!(\n+        llvm_component = \"m68k\",\n+        LLVMInitializeM68kTargetInfo,\n+        LLVMInitializeM68kTarget,\n+        LLVMInitializeM68kTargetMC,\n+        LLVMInitializeM68kAsmPrinter,\n+        LLVMInitializeM68kAsmParser\n+    );\n     init_target!(\n         llvm_component = \"mips\",\n         LLVMInitializeMipsTargetInfo,"}, {"sha": "58fdc00b6962783e94d4f7995a7e7f24702f07b8", "filename": "compiler/rustc_target/src/abi/call/m68k.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/db1fb85cff63ad5fffe435e17128f99f9e1d970c/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fm68k.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1fb85cff63ad5fffe435e17128f99f9e1d970c/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fm68k.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fm68k.rs?ref=db1fb85cff63ad5fffe435e17128f99f9e1d970c", "patch": "@@ -0,0 +1,30 @@\n+use crate::abi::call::{ArgAbi, FnAbi};\n+\n+fn classify_ret<Ty>(ret: &mut ArgAbi<'_, Ty>) {\n+    if ret.layout.is_aggregate() {\n+        ret.make_indirect();\n+    } else {\n+        ret.extend_integer_width_to(32);\n+    }\n+}\n+\n+fn classify_arg<Ty>(arg: &mut ArgAbi<'_, Ty>) {\n+    if arg.layout.is_aggregate() {\n+        arg.make_indirect_byval();\n+    } else {\n+        arg.extend_integer_width_to(32);\n+    }\n+}\n+\n+pub fn compute_abi_info<Ty>(fn_abi: &mut FnAbi<'_, Ty>) {\n+    if !fn_abi.ret.is_ignore() {\n+        classify_ret(&mut fn_abi.ret);\n+    }\n+\n+    for arg in &mut fn_abi.args {\n+        if arg.is_ignore() {\n+            continue;\n+        }\n+        classify_arg(arg);\n+    }\n+}"}, {"sha": "d9eb299e2fd350781725927aade13b5bfad1166c", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1fb85cff63ad5fffe435e17128f99f9e1d970c/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1fb85cff63ad5fffe435e17128f99f9e1d970c/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=db1fb85cff63ad5fffe435e17128f99f9e1d970c", "patch": "@@ -9,6 +9,7 @@ mod arm;\n mod avr;\n mod bpf;\n mod hexagon;\n+mod m68k;\n mod mips;\n mod mips64;\n mod msp430;\n@@ -656,6 +657,7 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n             \"amdgpu\" => amdgpu::compute_abi_info(cx, self),\n             \"arm\" => arm::compute_abi_info(cx, self),\n             \"avr\" => avr::compute_abi_info(self),\n+            \"m68k\" => m68k::compute_abi_info(self),\n             \"mips\" => mips::compute_abi_info(cx, self),\n             \"mips64\" => mips64::compute_abi_info(cx, self),\n             \"powerpc\" => powerpc::compute_abi_info(self),"}, {"sha": "fff7b25a34937c6c505bfe84a3f21dcccfefe89e", "filename": "compiler/rustc_target/src/spec/m68k_unknown_linux_gnu.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/db1fb85cff63ad5fffe435e17128f99f9e1d970c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fm68k_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1fb85cff63ad5fffe435e17128f99f9e1d970c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fm68k_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fm68k_unknown_linux_gnu.rs?ref=db1fb85cff63ad5fffe435e17128f99f9e1d970c", "patch": "@@ -0,0 +1,15 @@\n+use crate::abi::Endian;\n+use crate::spec::{Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    let mut base = super::linux_base::opts();\n+    base.max_atomic_width = Some(32);\n+\n+    Target {\n+        llvm_target: \"m68k-unknown-linux-gnu\".to_string(),\n+        pointer_width: 32,\n+        data_layout: \"E-m:e-p:32:16:32-i8:8:8-i16:16:16-i32:16:32-n8:16:32-a:0:16-S16\".to_string(),\n+        arch: \"m68k\".to_string(),\n+        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n+    }\n+}"}, {"sha": "c947721d63d39bf5f0d9c98fcb0c1dbbfc75ac44", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db1fb85cff63ad5fffe435e17128f99f9e1d970c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1fb85cff63ad5fffe435e17128f99f9e1d970c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=db1fb85cff63ad5fffe435e17128f99f9e1d970c", "patch": "@@ -742,6 +742,7 @@ supported_targets! {\n     (\"x86_64-unknown-linux-gnux32\", x86_64_unknown_linux_gnux32),\n     (\"i686-unknown-linux-gnu\", i686_unknown_linux_gnu),\n     (\"i586-unknown-linux-gnu\", i586_unknown_linux_gnu),\n+    (\"m68k-unknown-linux-gnu\", m68k_unknown_linux_gnu),\n     (\"mips-unknown-linux-gnu\", mips_unknown_linux_gnu),\n     (\"mips64-unknown-linux-gnuabi64\", mips64_unknown_linux_gnuabi64),\n     (\"mips64el-unknown-linux-gnuabi64\", mips64el_unknown_linux_gnuabi64),"}, {"sha": "aff4e8fa82ac11e1fa84a542eb963806c991ea88", "filename": "config.toml.example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1fb85cff63ad5fffe435e17128f99f9e1d970c/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/db1fb85cff63ad5fffe435e17128f99f9e1d970c/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=db1fb85cff63ad5fffe435e17128f99f9e1d970c", "patch": "@@ -103,7 +103,7 @@ changelog-seen = 2\n # the same format as above, but since these targets are experimental, they are\n # not built by default and the experimental Rust compilation targets that depend\n # on them will not work unless the user opts in to building them.\n-#experimental-targets = \"AVR\"\n+#experimental-targets = \"AVR;M68k\"\n \n # Cap the number of parallel linker invocations when compiling LLVM.\n # This can be useful when building LLVM with debug info, which significantly"}, {"sha": "40b46878cd8ba8c270f6780eafa2088c753a4321", "filename": "library/std/src/env.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db1fb85cff63ad5fffe435e17128f99f9e1d970c/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1fb85cff63ad5fffe435e17128f99f9e1d970c/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=db1fb85cff63ad5fffe435e17128f99f9e1d970c", "patch": "@@ -879,6 +879,7 @@ pub mod consts {\n     /// - x86_64\n     /// - arm\n     /// - aarch64\n+    /// - m68k\n     /// - mips\n     /// - mips64\n     /// - powerpc"}, {"sha": "cd92dcabdf5209bd6e998a3c73d92d7aa475102f", "filename": "library/std/src/os/linux/raw.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db1fb85cff63ad5fffe435e17128f99f9e1d970c/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1fb85cff63ad5fffe435e17128f99f9e1d970c/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs?ref=db1fb85cff63ad5fffe435e17128f99f9e1d970c", "patch": "@@ -27,6 +27,7 @@ pub use self::arch::{blkcnt_t, blksize_t, ino_t, nlink_t, off_t, stat, time_t};\n #[cfg(any(\n     target_arch = \"x86\",\n     target_arch = \"le32\",\n+    target_arch = \"m68k\",\n     target_arch = \"powerpc\",\n     target_arch = \"sparc\",\n     target_arch = \"arm\","}, {"sha": "57ade88f733062ebd1667e9197e2de1b195ce35f", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db1fb85cff63ad5fffe435e17128f99f9e1d970c/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/db1fb85cff63ad5fffe435e17128f99f9e1d970c/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=db1fb85cff63ad5fffe435e17128f99f9e1d970c", "patch": "@@ -277,6 +277,7 @@ def default_build_triple(verbose):\n         'i486': 'i686',\n         'i686': 'i686',\n         'i786': 'i686',\n+        'm68k': 'm68k',\n         'powerpc': 'powerpc',\n         'powerpc64': 'powerpc64',\n         'powerpc64le': 'powerpc64le',"}, {"sha": "27c9bb2504f6d2bdb030f5ee7725ad63f4a783b6", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1fb85cff63ad5fffe435e17128f99f9e1d970c/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1fb85cff63ad5fffe435e17128f99f9e1d970c/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=db1fb85cff63ad5fffe435e17128f99f9e1d970c", "patch": "@@ -165,7 +165,7 @@ impl Step for Llvm {\n \n         let llvm_exp_targets = match builder.config.llvm_experimental_targets {\n             Some(ref s) => s,\n-            None => \"AVR\",\n+            None => \"AVR;M68k\",\n         };\n \n         let assertions = if builder.config.llvm_assertions { \"ON\" } else { \"OFF\" };"}, {"sha": "17203994cdff05df2860bdef39a267f508449797", "filename": "src/ci/docker/host-x86_64/disabled/dist-m68k-linux/Dockerfile", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/db1fb85cff63ad5fffe435e17128f99f9e1d970c/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-m68k-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/db1fb85cff63ad5fffe435e17128f99f9e1d970c/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-m68k-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-m68k-linux%2FDockerfile?ref=db1fb85cff63ad5fffe435e17128f99f9e1d970c", "patch": "@@ -0,0 +1,26 @@\n+FROM ubuntu:20.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  g++ \\\n+  make \\\n+  file \\\n+  curl \\\n+  ca-certificates \\\n+  python2.7 \\\n+  git \\\n+  cmake \\\n+  sudo \\\n+  gdb \\\n+  xz-utils \\\n+  g++-m68k-linux-gnu \\\n+  libssl-dev \\\n+  pkg-config\n+\n+\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+ENV HOSTS=m68k-unknown-linux-gnu\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV SCRIPT python3 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "0f106292e96700edc113db4c114965fb9540e231", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db1fb85cff63ad5fffe435e17128f99f9e1d970c/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/db1fb85cff63ad5fffe435e17128f99f9e1d970c/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=db1fb85cff63ad5fffe435e17128f99f9e1d970c", "patch": "@@ -238,6 +238,7 @@ target | std | host | notes\n `i686-uwp-windows-gnu` | ? |  |\n `i686-uwp-windows-msvc` | ? |  |\n `i686-wrs-vxworks` | ? |  |\n+`m68k-unknown-linux-gnu` | ? |  | Motorola 680x0 Linux\n `mips-unknown-linux-uclibc` | \u2713 |  | MIPS Linux with uClibc\n `mipsel-sony-psp` | * |  | MIPS (LE) Sony PlayStation Portable (PSP)\n `mipsel-unknown-linux-uclibc` | \u2713 |  | MIPS (LE) Linux with uClibc"}, {"sha": "d325ba3346ab137361a1505112a8d7a7cb130ea6", "filename": "src/doc/rustc/src/platform-support/m68k-unknown-linux-gnu.md", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/db1fb85cff63ad5fffe435e17128f99f9e1d970c/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fm68k-unknown-linux-gnu.md", "raw_url": "https://github.com/rust-lang/rust/raw/db1fb85cff63ad5fffe435e17128f99f9e1d970c/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fm68k-unknown-linux-gnu.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fm68k-unknown-linux-gnu.md?ref=db1fb85cff63ad5fffe435e17128f99f9e1d970c", "patch": "@@ -0,0 +1,97 @@\n+# m68k-unknown-linux-gnu\n+\n+**Tier: 3**\n+\n+Motorola 680x0 Linux\n+\n+## Designated Developers\n+\n+* [@glaubitz](https://github.com/glaubitz)\n+* [@ricky26](https://github.com/ricky26)\n+\n+## Requirements\n+\n+This target requires a Linux/m68k build environment for cross-compilation which\n+is available on Debian and Debian-based systems, openSUSE and other distributions.\n+\n+On Debian, it should be sufficient to install a g++ cross-compiler for the m68k\n+architecture which will automatically pull in additional dependencies such as\n+the glibc cross development package:\n+\n+```text\n+# apt install g++-m68k-linux-gnu\n+```\n+\n+Binaries can be run using QEMU user emulation. On Debian-based systems, it should be\n+sufficient to install the package `qemu-user-static` to be able to run simple static\n+binaries:\n+\n+```text\n+# apt install qemu-user-static\n+```\n+\n+To run more complex programs, it will be necessary to set up a Debian/m68k chroot with\n+the help of the command `debootstrap`:\n+\n+```text\n+# apt install debootstrap debian-ports-archive-keyring\n+# debootstrap --keyring=/usr/share/keyrings/debian-ports-archive-keyring.gpg --arch=m68k unstable debian-68k http://ftp.ports.debian.org/debian-ports\n+```\n+\n+This chroot can then seamlessly entered using the normal `chroot` command thanks to\n+QEMU user emulation:\n+\n+```text\n+# chroot /path/to/debian-68k\n+```\n+\n+To get started with native builds, which are currently untested, a native Debian/m68k\n+system can be installed either on real hardware such as 68k-based Commodore Amiga or\n+Atari systems or emulated environments such as QEMU version 4.2 or newer or ARAnyM.\n+\n+ISO images for installation are provided by the Debian Ports team and can be obtained\n+from the Debian CD image server available at:\n+\n+[https://cdimage.debian.org/cdimage/ports/current](https://cdimage.debian.org/cdimage/ports/current/)\n+\n+Documentation for Debian/m68k is available on the Debian Wiki at:\n+\n+[https://wiki.debian.org/M68k](https://wiki.debian.org/M68k)\n+\n+Support is available either through the `debian-68k` mailing list:\n+\n+[https://lists.debian.org/debian-68k/](https://lists.debian.org/debian-68k/)\n+\n+or the `#debian-68k` IRC channel on OFTC network.\n+\n+## Building\n+\n+The codegen for this target should be built by default. However, core and std\n+are currently missing but are being worked on and should become available in\n+the near future.\n+\n+## Cross-compilation\n+\n+This target can be cross-compiled from a standard Debian or Debian-based, openSUSE or any\n+other distribution which has a basic m68k cross-toolchain available.\n+\n+## Testing\n+\n+Currently there is no support to run the rustc test suite for this target.\n+\n+## Building Rust programs\n+\n+Rust programs can be built for that target:\n+\n+```text\n+rustc --target m68k-unknown-linux-gnu your-code.rs\n+```\n+\n+Very simple progams can be run using the `qemu-m68k-static` program:\n+\n+```text\n+$ qemu-m68k-static your-code\n+```\n+\n+For more complex applications, a chroot or native (emulated) Debian/m68k system are required\n+for testing."}, {"sha": "9b5ca06848646fcc929fef25ec9046fc2de053f8", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db1fb85cff63ad5fffe435e17128f99f9e1d970c/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1fb85cff63ad5fffe435e17128f99f9e1d970c/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=db1fb85cff63ad5fffe435e17128f99f9e1d970c", "patch": "@@ -491,6 +491,7 @@ impl<'a> fmt::Display for Display<'a> {\n                         \"aarch64\" => \"AArch64\",\n                         \"arm\" => \"ARM\",\n                         \"asmjs\" => \"JavaScript\",\n+                        \"m68k\" => \"M68k\",\n                         \"mips\" => \"MIPS\",\n                         \"mips64\" => \"MIPS-64\",\n                         \"msp430\" => \"MSP430\","}, {"sha": "c1579ae9ac54a225a57ae865bda8bc6416ee957b", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db1fb85cff63ad5fffe435e17128f99f9e1d970c/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1fb85cff63ad5fffe435e17128f99f9e1d970c/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=db1fb85cff63ad5fffe435e17128f99f9e1d970c", "patch": "@@ -99,6 +99,7 @@ static TARGETS: &[&str] = &[\n     \"i686-unknown-freebsd\",\n     \"i686-unknown-linux-gnu\",\n     \"i686-unknown-linux-musl\",\n+    \"m68k-unknown-linux-gnu\",\n     \"mips-unknown-linux-gnu\",\n     \"mips-unknown-linux-musl\",\n     \"mips64-unknown-linux-gnuabi64\","}, {"sha": "75d392951eca77e9fe73a16fa58d6c0e0798d24a", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db1fb85cff63ad5fffe435e17128f99f9e1d970c/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1fb85cff63ad5fffe435e17128f99f9e1d970c/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=db1fb85cff63ad5fffe435e17128f99f9e1d970c", "patch": "@@ -54,6 +54,7 @@ const ARCH_TABLE: &[(&str, &str)] = &[\n     (\"i386\", \"x86\"),\n     (\"i586\", \"x86\"),\n     (\"i686\", \"x86\"),\n+    (\"m68k\", \"m68k\"),\n     (\"mips\", \"mips\"),\n     (\"mips64\", \"mips64\"),\n     (\"mips64el\", \"mips64\"),"}]}