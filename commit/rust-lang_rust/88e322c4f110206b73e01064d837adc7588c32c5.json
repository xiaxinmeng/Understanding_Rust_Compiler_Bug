{"sha": "88e322c4f110206b73e01064d837adc7588c32c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZTMyMmM0ZjExMDIwNmI3M2UwMTA2NGQ4MzdhZGM3NTg4YzMyYzU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-12-30T05:07:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-30T05:07:55Z"}, "message": "Rollup merge of #67698 - cjgillot:passes-first, r=Zoxc\n\nMove reachable_set and diagnostic_items to librustc_passes.\n\nSplit out of #67688\n\nr? @Zoxc", "tree": {"sha": "38ef9671e647c3808f7e3103f760be34332775ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38ef9671e647c3808f7e3103f760be34332775ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88e322c4f110206b73e01064d837adc7588c32c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeCYYrCRBK7hj4Ov3rIwAAdHIIAJqS6SZ3BBSj0P9HdhNNTyA6\n/cgzmxSXGMF8z05Tx9hFDZgoR4hQMEwx/qMSlPRmw6RLdRpzjzekUsfNeRnTTRCY\nQ8WieLcVo/cLCcKGSFLk6u9OwezgVzE4z5UypIrQ+xpsfERq0YBe31Y2WXgVULCi\ngQukm1cKuDdhcGBX5XVo2GEJDoEXVhzlncd0hzjRJGJ4StfsZDm5cvJTkLMTLrX6\nJjI70umJAayhgRvhWlJtTjUk/3By+9YCJHRWisF60DxLum0vvRNmRr2y8QVKfKLs\nFcrj8ZlyRh9ns+AiByBKq0DJVJ7rQ+y3hQfg9CreBD2gLl0WF7eWFDsiH82kuIk=\n=5Ubs\n-----END PGP SIGNATURE-----\n", "payload": "tree 38ef9671e647c3808f7e3103f760be34332775ec\nparent 3928aceb49b11f4ae4d360390bed6503fb8109ec\nparent f5c63e7b27cfb94cbc0b78ab109616c7c4706779\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1577682475 +0900\ncommitter GitHub <noreply@github.com> 1577682475 +0900\n\nRollup merge of #67698 - cjgillot:passes-first, r=Zoxc\n\nMove reachable_set and diagnostic_items to librustc_passes.\n\nSplit out of #67688\n\nr? @Zoxc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88e322c4f110206b73e01064d837adc7588c32c5", "html_url": "https://github.com/rust-lang/rust/commit/88e322c4f110206b73e01064d837adc7588c32c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88e322c4f110206b73e01064d837adc7588c32c5/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3928aceb49b11f4ae4d360390bed6503fb8109ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/3928aceb49b11f4ae4d360390bed6503fb8109ec", "html_url": "https://github.com/rust-lang/rust/commit/3928aceb49b11f4ae4d360390bed6503fb8109ec"}, {"sha": "f5c63e7b27cfb94cbc0b78ab109616c7c4706779", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5c63e7b27cfb94cbc0b78ab109616c7c4706779", "html_url": "https://github.com/rust-lang/rust/commit/f5c63e7b27cfb94cbc0b78ab109616c7c4706779"}], "stats": {"total": 192, "additions": 97, "deletions": 95}, "files": [{"sha": "76588dfa5e25e041afde0d71cb5873be8ff0a8b9", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/88e322c4f110206b73e01064d837adc7588c32c5/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e322c4f110206b73e01064d837adc7588c32c5/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=88e322c4f110206b73e01064d837adc7588c32c5", "patch": "@@ -95,24 +95,7 @@ pub mod hir;\n pub mod ich;\n pub mod infer;\n pub mod lint;\n-\n-pub mod middle {\n-    pub mod cstore;\n-    pub mod dependency_format;\n-    pub mod diagnostic_items;\n-    pub mod exported_symbols;\n-    pub mod free_region;\n-    pub mod lang_items;\n-    pub mod lib_features;\n-    pub mod privacy;\n-    pub mod reachable;\n-    pub mod recursion_limit;\n-    pub mod region;\n-    pub mod resolve_lifetime;\n-    pub mod stability;\n-    pub mod weak_lang_items;\n-}\n-\n+pub mod middle;\n pub mod mir;\n pub use rustc_session as session;\n pub mod traits;"}, {"sha": "030bcf3bf42314d9660e8a10276e02ba9d9b44bd", "filename": "src/librustc/middle/mod.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/88e322c4f110206b73e01064d837adc7588c32c5/src%2Flibrustc%2Fmiddle%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e322c4f110206b73e01064d837adc7588c32c5/src%2Flibrustc%2Fmiddle%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmod.rs?ref=88e322c4f110206b73e01064d837adc7588c32c5", "patch": "@@ -0,0 +1,35 @@\n+pub mod cstore;\n+pub mod dependency_format;\n+pub mod exported_symbols;\n+pub mod free_region;\n+pub mod lang_items;\n+pub mod lib_features {\n+    use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+    use syntax::symbol::Symbol;\n+\n+    #[derive(HashStable)]\n+    pub struct LibFeatures {\n+        // A map from feature to stabilisation version.\n+        pub stable: FxHashMap<Symbol, Symbol>,\n+        pub unstable: FxHashSet<Symbol>,\n+    }\n+\n+    impl LibFeatures {\n+        pub fn to_vec(&self) -> Vec<(Symbol, Option<Symbol>)> {\n+            let mut all_features: Vec<_> = self\n+                .stable\n+                .iter()\n+                .map(|(f, s)| (*f, Some(*s)))\n+                .chain(self.unstable.iter().map(|f| (*f, None)))\n+                .collect();\n+            all_features.sort_unstable_by_key(|f| f.0.as_str());\n+            all_features\n+        }\n+    }\n+}\n+pub mod privacy;\n+pub mod recursion_limit;\n+pub mod region;\n+pub mod resolve_lifetime;\n+pub mod stability;\n+pub mod weak_lang_items;"}, {"sha": "9b7ae0993357babedd1cf399465cf8c5a097711d", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e322c4f110206b73e01064d837adc7588c32c5/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e322c4f110206b73e01064d837adc7588c32c5/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=88e322c4f110206b73e01064d837adc7588c32c5", "patch": "@@ -510,7 +510,7 @@ rustc_queries! {\n     }\n \n     Other {\n-        query reachable_set(_: CrateNum) -> ReachableSet {\n+        query reachable_set(_: CrateNum) -> Lrc<HirIdSet> {\n             desc { \"reachability\" }\n         }\n "}, {"sha": "b84b0e4f45dcb56a3cd7fc2123ab0dcdba0f5c89", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88e322c4f110206b73e01064d837adc7588c32c5/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e322c4f110206b73e01064d837adc7588c32c5/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=88e322c4f110206b73e01064d837adc7588c32c5", "patch": "@@ -2751,22 +2751,10 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         assert_eq!(id, LOCAL_CRATE);\n         tcx.crate_name\n     };\n-    providers.get_lib_features = |tcx, id| {\n-        assert_eq!(id, LOCAL_CRATE);\n-        tcx.arena.alloc(middle::lib_features::collect(tcx))\n-    };\n     providers.get_lang_items = |tcx, id| {\n         assert_eq!(id, LOCAL_CRATE);\n         tcx.arena.alloc(middle::lang_items::collect(tcx))\n     };\n-    providers.diagnostic_items = |tcx, id| {\n-        assert_eq!(id, LOCAL_CRATE);\n-        middle::diagnostic_items::collect(tcx)\n-    };\n-    providers.all_diagnostic_items = |tcx, id| {\n-        assert_eq!(id, LOCAL_CRATE);\n-        middle::diagnostic_items::collect_all(tcx)\n-    };\n     providers.maybe_unused_trait_import = |tcx, id| tcx.maybe_unused_trait_imports.contains(&id);\n     providers.maybe_unused_extern_crates = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);"}, {"sha": "f523cee49ec63ac71ab2b3507061758d3c32e3cc", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88e322c4f110206b73e01064d837adc7588c32c5/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e322c4f110206b73e01064d837adc7588c32c5/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=88e322c4f110206b73e01064d837adc7588c32c5", "patch": "@@ -10,7 +10,6 @@ use crate::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use crate::middle::lang_items::{LangItem, LanguageItems};\n use crate::middle::lib_features::LibFeatures;\n use crate::middle::privacy::AccessLevels;\n-use crate::middle::reachable::ReachableSet;\n use crate::middle::region;\n use crate::middle::resolve_lifetime::{ObjectLifetimeDefault, Region, ResolveLifetimes};\n use crate::middle::stability::{self, DeprecationEntry};\n@@ -37,7 +36,7 @@ use crate::ty::subst::SubstsRef;\n use crate::ty::util::NeedsDrop;\n use crate::ty::{self, AdtSizedConstraint, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n use crate::util::common::ErrorReported;\n-use crate::util::nodemap::{DefIdMap, DefIdSet};\n+use crate::util::nodemap::{DefIdMap, DefIdSet, HirIdSet};\n use rustc_data_structures::profiling::ProfileCategory::*;\n \n use rustc_data_structures::fingerprint::Fingerprint;"}, {"sha": "5bdb310f9b54619e50823ce8fd30424e11de9266", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88e322c4f110206b73e01064d837adc7588c32c5/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e322c4f110206b73e01064d837adc7588c32c5/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=88e322c4f110206b73e01064d837adc7588c32c5", "patch": "@@ -65,7 +65,6 @@ fn reachable_non_generics_provider(\n \n     let mut reachable_non_generics: DefIdMap<_> = tcx\n         .reachable_set(LOCAL_CRATE)\n-        .0\n         .iter()\n         .filter_map(|&hir_id| {\n             // We want to ignore some FFI functions that are not exposed from\n@@ -313,7 +312,7 @@ fn upstream_monomorphizations_for_provider(\n \n fn is_unreachable_local_definition_provider(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     if let Some(hir_id) = tcx.hir().as_local_hir_id(def_id) {\n-        !tcx.reachable_set(LOCAL_CRATE).0.contains(&hir_id)\n+        !tcx.reachable_set(LOCAL_CRATE).contains(&hir_id)\n     } else {\n         bug!(\"is_unreachable_local_definition called with non-local DefId: {:?}\", def_id)\n     }"}, {"sha": "b4522f4c6653140087746b178797a6228c999913", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88e322c4f110206b73e01064d837adc7588c32c5/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e322c4f110206b73e01064d837adc7588c32c5/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=88e322c4f110206b73e01064d837adc7588c32c5", "patch": "@@ -10,7 +10,7 @@ use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc::hir::lowering::lower_crate;\n use rustc::lint;\n use rustc::middle::cstore::{CrateStore, MetadataLoader, MetadataLoaderDyn};\n-use rustc::middle::{self, reachable, resolve_lifetime, stability};\n+use rustc::middle::{self, resolve_lifetime, stability};\n use rustc::session::config::{self, CrateType, Input, OutputFilenames, OutputType};\n use rustc::session::config::{PpMode, PpSourceMode};\n use rustc::session::search_paths::PathKind;\n@@ -678,14 +678,12 @@ pub fn default_provide(providers: &mut ty::query::Providers<'_>) {\n     plugin::build::provide(providers);\n     hir::provide(providers);\n     mir::provide(providers);\n-    reachable::provide(providers);\n     resolve_lifetime::provide(providers);\n     rustc_privacy::provide(providers);\n     typeck::provide(providers);\n     ty::provide(providers);\n     traits::provide(providers);\n     stability::provide(providers);\n-    reachable::provide(providers);\n     rustc_passes::provide(providers);\n     rustc_traits::provide(providers);\n     middle::region::provide(providers);"}, {"sha": "65138fad43bd8cf9b2cd99ea8445c00c6eef6d45", "filename": "src/librustc_passes/diagnostic_items.rs", "status": "renamed", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/88e322c4f110206b73e01064d837adc7588c32c5/src%2Flibrustc_passes%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e322c4f110206b73e01064d837adc7588c32c5/src%2Flibrustc_passes%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostic_items.rs?ref=88e322c4f110206b73e01064d837adc7588c32c5", "patch": "@@ -9,12 +9,13 @@\n //!\n //! * Compiler internal types like `Ty` and `TyCtxt`\n \n-use crate::hir::def_id::{DefId, LOCAL_CRATE};\n-use crate::ty::TyCtxt;\n-use crate::util::nodemap::FxHashMap;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::ty::query::Providers;\n+use rustc::ty::TyCtxt;\n+use rustc::util::nodemap::FxHashMap;\n \n-use crate::hir;\n-use crate::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc::hir;\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use syntax::ast;\n use syntax::symbol::{sym, Symbol};\n \n@@ -93,7 +94,7 @@ fn extract(attrs: &[ast::Attribute]) -> Option<Symbol> {\n }\n \n /// Traverse and collect the diagnostic items in the current\n-pub fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> &'tcx FxHashMap<Symbol, DefId> {\n+fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> &'tcx FxHashMap<Symbol, DefId> {\n     // Initialize the collector.\n     let mut collector = DiagnosticItemCollector::new(tcx);\n \n@@ -104,7 +105,7 @@ pub fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> &'tcx FxHashMap<Symbol, DefId> {\n }\n \n /// Traverse and collect all the diagnostic items in all crates.\n-pub fn collect_all<'tcx>(tcx: TyCtxt<'tcx>) -> &'tcx FxHashMap<Symbol, DefId> {\n+fn collect_all<'tcx>(tcx: TyCtxt<'tcx>) -> &'tcx FxHashMap<Symbol, DefId> {\n     // Initialize the collector.\n     let mut collector = FxHashMap::default();\n \n@@ -117,3 +118,14 @@ pub fn collect_all<'tcx>(tcx: TyCtxt<'tcx>) -> &'tcx FxHashMap<Symbol, DefId> {\n \n     tcx.arena.alloc(collector)\n }\n+\n+pub fn provide(providers: &mut Providers<'_>) {\n+    providers.diagnostic_items = |tcx, id| {\n+        assert_eq!(id, LOCAL_CRATE);\n+        collect(tcx)\n+    };\n+    providers.all_diagnostic_items = |tcx, id| {\n+        assert_eq!(id, LOCAL_CRATE);\n+        collect_all(tcx)\n+    };\n+}", "previous_filename": "src/librustc/middle/diagnostic_items.rs"}, {"sha": "da781f2bae528d2af479b96b8ceb89a533898d2a", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88e322c4f110206b73e01064d837adc7588c32c5/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e322c4f110206b73e01064d837adc7588c32c5/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=88e322c4f110206b73e01064d837adc7588c32c5", "patch": "@@ -22,17 +22,23 @@ use rustc::ty::query::Providers;\n pub mod ast_validation;\n mod check_const;\n pub mod dead;\n+mod diagnostic_items;\n pub mod entry;\n pub mod hir_stats;\n mod intrinsicck;\n pub mod layout_test;\n+mod lib_features;\n mod liveness;\n pub mod loops;\n+mod reachable;\n \n pub fn provide(providers: &mut Providers<'_>) {\n     check_const::provide(providers);\n+    diagnostic_items::provide(providers);\n     entry::provide(providers);\n+    lib_features::provide(providers);\n     loops::provide(providers);\n     liveness::provide(providers);\n     intrinsicck::provide(providers);\n+    reachable::provide(providers);\n }"}, {"sha": "0b0183f3cce04dd3dbbd28a52c5a4d7f02ccfb9a", "filename": "src/librustc_passes/lib_features.rs", "status": "renamed", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/88e322c4f110206b73e01064d837adc7588c32c5/src%2Flibrustc_passes%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e322c4f110206b73e01064d837adc7588c32c5/src%2Flibrustc_passes%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib_features.rs?ref=88e322c4f110206b73e01064d837adc7588c32c5", "patch": "@@ -4,38 +4,19 @@\n // and `#[unstable (..)]`), but are not declared in one single location\n // (unlike lang features), which means we need to collect them instead.\n \n-use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use crate::ty::TyCtxt;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_macros::HashStable;\n+use rustc::hir::def_id::LOCAL_CRATE;\n+use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::middle::lib_features::LibFeatures;\n+use rustc::ty::query::Providers;\n+use rustc::ty::TyCtxt;\n use syntax::ast::{Attribute, MetaItem, MetaItemKind};\n use syntax::symbol::Symbol;\n use syntax_pos::{sym, Span};\n \n use rustc_error_codes::*;\n \n-#[derive(HashStable)]\n-pub struct LibFeatures {\n-    // A map from feature to stabilisation version.\n-    pub stable: FxHashMap<Symbol, Symbol>,\n-    pub unstable: FxHashSet<Symbol>,\n-}\n-\n-impl LibFeatures {\n-    fn new() -> LibFeatures {\n-        LibFeatures { stable: Default::default(), unstable: Default::default() }\n-    }\n-\n-    pub fn to_vec(&self) -> Vec<(Symbol, Option<Symbol>)> {\n-        let mut all_features: Vec<_> = self\n-            .stable\n-            .iter()\n-            .map(|(f, s)| (*f, Some(*s)))\n-            .chain(self.unstable.iter().map(|f| (*f, None)))\n-            .collect();\n-        all_features.sort_unstable_by_key(|f| f.0.as_str());\n-        all_features\n-    }\n+fn new_lib_features() -> LibFeatures {\n+    LibFeatures { stable: Default::default(), unstable: Default::default() }\n }\n \n pub struct LibFeatureCollector<'tcx> {\n@@ -45,7 +26,7 @@ pub struct LibFeatureCollector<'tcx> {\n \n impl LibFeatureCollector<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>) -> LibFeatureCollector<'tcx> {\n-        LibFeatureCollector { tcx, lib_features: LibFeatures::new() }\n+        LibFeatureCollector { tcx, lib_features: new_lib_features() }\n     }\n \n     fn extract(&self, attr: &Attribute) -> Option<(Symbol, Option<Symbol>, Span)> {\n@@ -142,7 +123,7 @@ impl Visitor<'tcx> for LibFeatureCollector<'tcx> {\n     }\n }\n \n-pub fn collect(tcx: TyCtxt<'_>) -> LibFeatures {\n+fn collect(tcx: TyCtxt<'_>) -> LibFeatures {\n     let mut collector = LibFeatureCollector::new(tcx);\n     let krate = tcx.hir().krate();\n     for attr in krate.non_exported_macro_attrs {\n@@ -151,3 +132,10 @@ pub fn collect(tcx: TyCtxt<'_>) -> LibFeatures {\n     intravisit::walk_crate(&mut collector, krate);\n     collector.lib_features\n }\n+\n+pub fn provide(providers: &mut Providers<'_>) {\n+    providers.get_lib_features = |tcx, id| {\n+        assert_eq!(id, LOCAL_CRATE);\n+        tcx.arena.alloc(collect(tcx))\n+    };\n+}", "previous_filename": "src/librustc/middle/lib_features.rs"}, {"sha": "5241d9ea43f13f4e59a098d03ac49dda7bbe8df3", "filename": "src/librustc_passes/reachable.rs", "status": "renamed", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/88e322c4f110206b73e01064d837adc7588c32c5/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e322c4f110206b73e01064d837adc7588c32c5/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=88e322c4f110206b73e01064d837adc7588c32c5", "patch": "@@ -5,23 +5,22 @@\n // makes all other generics or inline functions that it references\n // reachable as well.\n \n-use crate::hir::def::{DefKind, Res};\n-use crate::hir::def_id::{CrateNum, DefId};\n-use crate::hir::Node;\n-use crate::hir::{CodegenFnAttrFlags, CodegenFnAttrs};\n-use crate::middle::privacy;\n-use crate::session::config;\n-use crate::ty::query::Providers;\n-use crate::ty::{self, TyCtxt};\n-use crate::util::nodemap::{FxHashSet, HirIdSet};\n+use rustc::hir::def::{DefKind, Res};\n+use rustc::hir::def_id::{CrateNum, DefId};\n+use rustc::hir::Node;\n+use rustc::hir::{CodegenFnAttrFlags, CodegenFnAttrs};\n+use rustc::middle::privacy;\n+use rustc::session::config;\n+use rustc::ty::query::Providers;\n+use rustc::ty::{self, TyCtxt};\n+use rustc::util::nodemap::{FxHashSet, HirIdSet};\n use rustc_data_structures::sync::Lrc;\n \n-use crate::hir;\n-use crate::hir::def_id::LOCAL_CRATE;\n-use crate::hir::intravisit;\n-use crate::hir::intravisit::{NestedVisitorMap, Visitor};\n-use crate::hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_macros::HashStable;\n+use rustc::hir;\n+use rustc::hir::def_id::LOCAL_CRATE;\n+use rustc::hir::intravisit;\n+use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc_target::spec::abi::Abi;\n \n // Returns true if the given item must be inlined because it may be\n@@ -378,12 +377,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx\n     }\n }\n \n-// We introduce a new-type here, so we can have a specialized HashStable\n-// implementation for it.\n-#[derive(Clone, HashStable)]\n-pub struct ReachableSet(pub Lrc<HirIdSet>);\n-\n-fn reachable_set(tcx: TyCtxt<'_>, crate_num: CrateNum) -> ReachableSet {\n+fn reachable_set(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Lrc<HirIdSet> {\n     debug_assert!(crate_num == LOCAL_CRATE);\n \n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n@@ -429,7 +423,7 @@ fn reachable_set(tcx: TyCtxt<'_>, crate_num: CrateNum) -> ReachableSet {\n     debug!(\"Inline reachability shows: {:?}\", reachable_context.reachable_symbols);\n \n     // Return the set of reachable symbols.\n-    ReachableSet(Lrc::new(reachable_context.reachable_symbols))\n+    Lrc::new(reachable_context.reachable_symbols)\n }\n \n pub fn provide(providers: &mut Providers<'_>) {", "previous_filename": "src/librustc/middle/reachable.rs"}]}