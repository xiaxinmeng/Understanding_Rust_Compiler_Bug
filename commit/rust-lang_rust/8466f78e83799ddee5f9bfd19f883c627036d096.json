{"sha": "8466f78e83799ddee5f9bfd19f883c627036d096", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NjZmNzhlODM3OTlkZGVlNWY5YmZkMTlmODgzYzYyNzAzNmQwOTY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-13T18:47:51Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-13T18:48:26Z"}, "message": "ignore overaligned tests on Windows (because, of course, Windows' API is broken here)", "tree": {"sha": "9c691c4de1e269a1ee9d60d4292121ab900d1641", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c691c4de1e269a1ee9d60d4292121ab900d1641"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8466f78e83799ddee5f9bfd19f883c627036d096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8466f78e83799ddee5f9bfd19f883c627036d096", "html_url": "https://github.com/rust-lang/rust/commit/8466f78e83799ddee5f9bfd19f883c627036d096", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8466f78e83799ddee5f9bfd19f883c627036d096/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d323857e91f3f73bd9d15a83af079a3f6d9ff43", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d323857e91f3f73bd9d15a83af079a3f6d9ff43", "html_url": "https://github.com/rust-lang/rust/commit/2d323857e91f3f73bd9d15a83af079a3f6d9ff43"}], "stats": {"total": 55, "additions": 29, "deletions": 26}, "files": [{"sha": "b533f916469881a96c23657ea33f4d65f6e2d218", "filename": "tests/run-pass/heap.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8466f78e83799ddee5f9bfd19f883c627036d096/tests%2Frun-pass%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8466f78e83799ddee5f9bfd19f883c627036d096/tests%2Frun-pass%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fheap.rs?ref=8466f78e83799ddee5f9bfd19f883c627036d096", "patch": "@@ -1,7 +1,4 @@\n #![feature(box_syntax)]\n-#![feature(allocator_api)]\n-\n-use std::alloc::{Global, Alloc, Layout, System};\n \n fn make_box() -> Box<(i16, i16)> {\n     Box::new((1, 2))\n@@ -30,31 +27,8 @@ fn allocate_reallocate() {\n     assert_eq!(s.capacity(), 9);\n }\n \n-fn check_overalign_requests<T: Alloc>(mut allocator: T) {\n-    let size = 8;\n-    let align = 16; // greater than size\n-    let iterations = 1; // Miri is deterministic, no need to try many times\n-    unsafe {\n-        let pointers: Vec<_> = (0..iterations).map(|_| {\n-            allocator.alloc(Layout::from_size_align(size, align).unwrap()).unwrap()\n-        }).collect();\n-        for &ptr in &pointers {\n-            assert_eq!((ptr.as_ptr() as usize) % align, 0,\n-                       \"Got a pointer less aligned than requested\")\n-        }\n-\n-        // Clean up\n-        for &ptr in &pointers {\n-            allocator.dealloc(ptr, Layout::from_size_align(size, align).unwrap())\n-        }\n-    }\n-}\n-\n fn main() {\n     assert_eq!(*make_box(), (1, 2));\n     assert_eq!(*make_box_syntax(), (1, 2));\n     allocate_reallocate();\n-\n-    check_overalign_requests(System);\n-    check_overalign_requests(Global);\n }"}, {"sha": "0eb2097047135411d2bc7c57d330a5f41842acdc", "filename": "tests/run-pass/heap_system.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8466f78e83799ddee5f9bfd19f883c627036d096/tests%2Frun-pass%2Fheap_system.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8466f78e83799ddee5f9bfd19f883c627036d096/tests%2Frun-pass%2Fheap_system.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fheap_system.rs?ref=8466f78e83799ddee5f9bfd19f883c627036d096", "patch": "@@ -0,0 +1,29 @@\n+//ignore-windows: Inspects allocation base address on Windows\n+#![feature(allocator_api)]\n+\n+use std::alloc::{Global, Alloc, Layout, System};\n+\n+fn check_overalign_requests<T: Alloc>(mut allocator: T) {\n+    let size = 8;\n+    let align = 16; // greater than size\n+    let iterations = 1; // Miri is deterministic, no need to try many times\n+    unsafe {\n+        let pointers: Vec<_> = (0..iterations).map(|_| {\n+            allocator.alloc(Layout::from_size_align(size, align).unwrap()).unwrap()\n+        }).collect();\n+        for &ptr in &pointers {\n+            assert_eq!((ptr.as_ptr() as usize) % align, 0,\n+                       \"Got a pointer less aligned than requested\")\n+        }\n+\n+        // Clean up\n+        for &ptr in &pointers {\n+            allocator.dealloc(ptr, Layout::from_size_align(size, align).unwrap())\n+        }\n+    }\n+}\n+\n+fn main() {\n+    check_overalign_requests(System);\n+    check_overalign_requests(Global);\n+}"}]}