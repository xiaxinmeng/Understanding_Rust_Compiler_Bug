{"sha": "7d3ae874534421e3cca560f33175e61cb2262fd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkM2FlODc0NTM0NDIxZTNjY2E1NjBmMzMxNzVlNjFjYjIyNjJmZDA=", "commit": {"author": {"name": "Jeremy Soller", "email": "jackpot51@gmail.com", "date": "2016-12-22T03:19:19Z"}, "committer": {"name": "Jeremy Soller", "email": "jackpot51@gmail.com", "date": "2016-12-22T03:19:32Z"}, "message": "Add RawFd traits for net", "tree": {"sha": "9e638b29e294c586648066e9c770453dd1b0f3e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e638b29e294c586648066e9c770453dd1b0f3e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d3ae874534421e3cca560f33175e61cb2262fd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d3ae874534421e3cca560f33175e61cb2262fd0", "html_url": "https://github.com/rust-lang/rust/commit/7d3ae874534421e3cca560f33175e61cb2262fd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d3ae874534421e3cca560f33175e61cb2262fd0/comments", "author": {"login": "jackpot51", "id": 7741236, "node_id": "MDQ6VXNlcjc3NDEyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/7741236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackpot51", "html_url": "https://github.com/jackpot51", "followers_url": "https://api.github.com/users/jackpot51/followers", "following_url": "https://api.github.com/users/jackpot51/following{/other_user}", "gists_url": "https://api.github.com/users/jackpot51/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackpot51/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackpot51/subscriptions", "organizations_url": "https://api.github.com/users/jackpot51/orgs", "repos_url": "https://api.github.com/users/jackpot51/repos", "events_url": "https://api.github.com/users/jackpot51/events{/privacy}", "received_events_url": "https://api.github.com/users/jackpot51/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackpot51", "id": 7741236, "node_id": "MDQ6VXNlcjc3NDEyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/7741236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackpot51", "html_url": "https://github.com/jackpot51", "followers_url": "https://api.github.com/users/jackpot51/followers", "following_url": "https://api.github.com/users/jackpot51/following{/other_user}", "gists_url": "https://api.github.com/users/jackpot51/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackpot51/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackpot51/subscriptions", "organizations_url": "https://api.github.com/users/jackpot51/orgs", "repos_url": "https://api.github.com/users/jackpot51/repos", "events_url": "https://api.github.com/users/jackpot51/events{/privacy}", "received_events_url": "https://api.github.com/users/jackpot51/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92c8e0f352b1aecfb13195266bf134e6c3597849", "url": "https://api.github.com/repos/rust-lang/rust/commits/92c8e0f352b1aecfb13195266bf134e6c3597849", "html_url": "https://github.com/rust-lang/rust/commit/92c8e0f352b1aecfb13195266bf134e6c3597849"}], "stats": {"total": 79, "additions": 64, "deletions": 15}, "files": [{"sha": "8e7cc593dbdeddea4426fe3162724ab56bdde7b2", "filename": "src/libstd/sys/redox/ext/io.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7d3ae874534421e3cca560f33175e61cb2262fd0/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3ae874534421e3cca560f33175e61cb2262fd0/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fio.rs?ref=7d3ae874534421e3cca560f33175e61cb2262fd0", "patch": "@@ -13,8 +13,9 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use fs;\n+use net;\n use sys;\n-use sys_common::{AsInner, FromInner, IntoInner};\n+use sys_common::{self, AsInner, FromInner, IntoInner};\n \n /// Raw file descriptors.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -89,58 +90,62 @@ impl IntoRawFd for fs::File {\n     }\n }\n \n-/*\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRawFd for net::TcpStream {\n-    fn as_raw_fd(&self) -> RawFd { *self.as_inner().socket().as_inner() }\n+    fn as_raw_fd(&self) -> RawFd {\n+        self.as_inner().as_inner().fd().raw()\n+    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRawFd for net::TcpListener {\n-    fn as_raw_fd(&self) -> RawFd { *self.as_inner().socket().as_inner() }\n+    fn as_raw_fd(&self) -> RawFd {\n+        self.as_inner().as_inner().fd().raw()\n+    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRawFd for net::UdpSocket {\n-    fn as_raw_fd(&self) -> RawFd { *self.as_inner().socket().as_inner() }\n+    fn as_raw_fd(&self) -> RawFd {\n+        self.as_inner().as_inner().fd().raw()\n+    }\n }\n \n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawFd for net::TcpStream {\n     unsafe fn from_raw_fd(fd: RawFd) -> net::TcpStream {\n-        let socket = sys::net::Socket::from_inner(fd);\n-        net::TcpStream::from_inner(sys_common::net::TcpStream::from_inner(socket))\n+        let file = sys::fs::File::from_inner(fd);\n+        net::TcpStream::from_inner(sys_common::net::TcpStream::from_inner(file))\n     }\n }\n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawFd for net::TcpListener {\n     unsafe fn from_raw_fd(fd: RawFd) -> net::TcpListener {\n-        let socket = sys::net::Socket::from_inner(fd);\n-        net::TcpListener::from_inner(sys_common::net::TcpListener::from_inner(socket))\n+        let file = sys::fs::File::from_inner(fd);\n+        net::TcpListener::from_inner(sys_common::net::TcpListener::from_inner(file))\n     }\n }\n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawFd for net::UdpSocket {\n     unsafe fn from_raw_fd(fd: RawFd) -> net::UdpSocket {\n-        let socket = sys::net::Socket::from_inner(fd);\n-        net::UdpSocket::from_inner(sys_common::net::UdpSocket::from_inner(socket))\n+        let file = sys::fs::File::from_inner(fd);\n+        net::UdpSocket::from_inner(sys_common::net::UdpSocket::from_inner(file))\n     }\n }\n \n #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawFd for net::TcpStream {\n     fn into_raw_fd(self) -> RawFd {\n-        self.into_inner().into_socket().into_inner()\n+        self.into_inner().into_inner().into_fd().into_raw()\n     }\n }\n #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawFd for net::TcpListener {\n     fn into_raw_fd(self) -> RawFd {\n-        self.into_inner().into_socket().into_inner()\n+        self.into_inner().into_inner().into_fd().into_raw()\n     }\n }\n #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawFd for net::UdpSocket {\n     fn into_raw_fd(self) -> RawFd {\n-        self.into_inner().into_socket().into_inner()\n+        self.into_inner().into_inner().into_fd().into_raw()\n     }\n }\n-*/"}, {"sha": "d5362c9f131f6b8149ec330f4cdcf69c920930fb", "filename": "src/libstd/sys/redox/net/tcp.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7d3ae874534421e3cca560f33175e61cb2262fd0/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3ae874534421e3cca560f33175e61cb2262fd0/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs?ref=7d3ae874534421e3cca560f33175e61cb2262fd0", "patch": "@@ -12,6 +12,7 @@ use io::{Error, ErrorKind, Result};\n use net::{SocketAddr, Shutdown};\n use path::Path;\n use sys::fs::{File, OpenOptions};\n+use sys_common::{AsInner, FromInner, IntoInner};\n use time::Duration;\n use vec::Vec;\n \n@@ -112,6 +113,20 @@ impl TcpStream {\n     }\n }\n \n+impl AsInner<File> for TcpStream {\n+    fn as_inner(&self) -> &File { &self.0 }\n+}\n+\n+impl FromInner<File> for TcpStream {\n+    fn from_inner(file: File) -> TcpStream {\n+        TcpStream(file)\n+    }\n+}\n+\n+impl IntoInner<File> for TcpStream {\n+    fn into_inner(self) -> File { self.0 }\n+}\n+\n #[derive(Debug)]\n pub struct TcpListener(File);\n \n@@ -168,3 +183,17 @@ impl TcpListener {\n         Err(Error::new(ErrorKind::Other, \"TcpListener::set_ttl not implemented\"))\n     }\n }\n+\n+impl AsInner<File> for TcpListener {\n+    fn as_inner(&self) -> &File { &self.0 }\n+}\n+\n+impl FromInner<File> for TcpListener {\n+    fn from_inner(file: File) -> TcpListener {\n+        TcpListener(file)\n+    }\n+}\n+\n+impl IntoInner<File> for TcpListener {\n+    fn into_inner(self) -> File { self.0 }\n+}"}, {"sha": "607c66c2ba70e3bf54023e631d921b8b471cf784", "filename": "src/libstd/sys/redox/net/udp.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7d3ae874534421e3cca560f33175e61cb2262fd0/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3ae874534421e3cca560f33175e61cb2262fd0/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs?ref=7d3ae874534421e3cca560f33175e61cb2262fd0", "patch": "@@ -13,6 +13,7 @@ use io::{Error, ErrorKind, Result};\n use net::{SocketAddr, Ipv4Addr, Ipv6Addr};\n use path::Path;\n use sys::fs::{File, OpenOptions};\n+use sys_common::{AsInner, FromInner, IntoInner};\n use time::Duration;\n \n use super::{path_to_peer_addr, path_to_local_addr};\n@@ -171,3 +172,17 @@ impl UdpSocket {\n         Err(Error::new(ErrorKind::Other, \"UdpSocket::leave_multicast_v6 not implemented\"))\n     }\n }\n+\n+impl AsInner<File> for UdpSocket {\n+    fn as_inner(&self) -> &File { &self.0 }\n+}\n+\n+impl FromInner<File> for UdpSocket {\n+    fn from_inner(file: File) -> UdpSocket {\n+        UdpSocket(file, UnsafeCell::new(None))\n+    }\n+}\n+\n+impl IntoInner<File> for UdpSocket {\n+    fn into_inner(self) -> File { self.0 }\n+}"}]}