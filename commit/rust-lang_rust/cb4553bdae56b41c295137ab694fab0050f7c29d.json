{"sha": "cb4553bdae56b41c295137ab694fab0050f7c29d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNDU1M2JkYWU1NmI0MWMyOTUxMzdhYjY5NGZhYjAwNTBmN2MyOWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-31T09:07:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-31T09:07:51Z"}, "message": "Rustdoc render public underscore_imports as Re-exports\n\nFixes #61592", "tree": {"sha": "8340f8f0d6ee330704a00443a253db9990f1e5fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8340f8f0d6ee330704a00443a253db9990f1e5fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb4553bdae56b41c295137ab694fab0050f7c29d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4553bdae56b41c295137ab694fab0050f7c29d", "html_url": "https://github.com/rust-lang/rust/commit/cb4553bdae56b41c295137ab694fab0050f7c29d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb4553bdae56b41c295137ab694fab0050f7c29d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11c94a197726b6a981828cb1837d7c3eed1b841d", "url": "https://api.github.com/repos/rust-lang/rust/commits/11c94a197726b6a981828cb1837d7c3eed1b841d", "html_url": "https://github.com/rust-lang/rust/commit/11c94a197726b6a981828cb1837d7c3eed1b841d"}], "stats": {"total": 111, "additions": 109, "deletions": 2}, "files": [{"sha": "c669f7fed272a298762341b6db2ef50db48bec97", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb4553bdae56b41c295137ab694fab0050f7c29d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4553bdae56b41c295137ab694fab0050f7c29d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=cb4553bdae56b41c295137ab694fab0050f7c29d", "patch": "@@ -464,6 +464,7 @@ E0776: include_str!(\"./error_codes/E0776.md\"),\n E0777: include_str!(\"./error_codes/E0777.md\"),\n E0778: include_str!(\"./error_codes/E0778.md\"),\n E0779: include_str!(\"./error_codes/E0779.md\"),\n+E0780: include_str!(\"./error_codes/E0780.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "704b4ae181bb26fcac0007979f566340ad877de3", "filename": "compiler/rustc_error_codes/src/error_codes/E0780.md", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cb4553bdae56b41c295137ab694fab0050f7c29d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0780.md", "raw_url": "https://github.com/rust-lang/rust/raw/cb4553bdae56b41c295137ab694fab0050f7c29d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0780.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0780.md?ref=cb4553bdae56b41c295137ab694fab0050f7c29d", "patch": "@@ -0,0 +1,19 @@\n+Cannot use `doc(inline)` with anonymous imports\n+\n+Erroneous code example:\n+\n+```ignore (cannot-doctest-multicrate-project)\n+\n+#[doc(inline)] // error: invalid doc argument\n+pub use foo::Foo as _;\n+```\n+\n+Anonymous imports are always rendered with `#[doc(no_inline)]`. To fix this\n+error, remove the `#[doc(inline)]` attribute.\n+\n+Example:\n+\n+```ignore (cannot-doctest-multicrate-project)\n+\n+pub use foo::Foo as _;\n+```"}, {"sha": "9a15a4bb9174702aec49253ff53b4e81728ee0c1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cb4553bdae56b41c295137ab694fab0050f7c29d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4553bdae56b41c295137ab694fab0050f7c29d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=cb4553bdae56b41c295137ab694fab0050f7c29d", "patch": "@@ -2157,11 +2157,26 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n             return Vec::new();\n         }\n \n+        let (doc_meta_item, please_inline) = self.attrs.lists(sym::doc).get_word_attr(sym::inline);\n+        let pub_underscore = self.vis.node.is_pub() && self.name == kw::Underscore;\n+\n+        if pub_underscore && please_inline {\n+            rustc_errors::struct_span_err!(\n+                cx.tcx.sess,\n+                doc_meta_item.unwrap().span(),\n+                E0780,\n+                \"anonymous imports cannot be inlined\"\n+            )\n+            .span_label(self.span, \"anonymous import\")\n+            .emit();\n+        }\n+\n         // We consider inlining the documentation of `pub use` statements, but we\n         // forcefully don't inline if this is not public or if the\n         // #[doc(no_inline)] attribute is present.\n         // Don't inline doc(hidden) imports so they can be stripped at a later stage.\n         let mut denied = !self.vis.node.is_pub()\n+            || pub_underscore\n             || self.attrs.iter().any(|a| {\n                 a.has_name(sym::doc)\n                     && match a.meta_item_list() {\n@@ -2174,7 +2189,6 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n             });\n         // Also check whether imports were asked to be inlined, in case we're trying to re-export a\n         // crate in Rust 2018+\n-        let please_inline = self.attrs.lists(sym::doc).has_word(sym::inline);\n         let path = self.path.clean(cx);\n         let inner = if self.glob {\n             if !denied {"}, {"sha": "d8dfdd0941be8fca1982828d022ac1e4601e87f7", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb4553bdae56b41c295137ab694fab0050f7c29d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4553bdae56b41c295137ab694fab0050f7c29d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=cb4553bdae56b41c295137ab694fab0050f7c29d", "patch": "@@ -431,12 +431,22 @@ impl AttributesExt for [ast::Attribute] {\n crate trait NestedAttributesExt {\n     /// Returns `true` if the attribute list contains a specific `Word`\n     fn has_word(self, word: Symbol) -> bool;\n+    fn get_word_attr(self, word: Symbol) -> (Option<ast::NestedMetaItem>, bool);\n }\n \n-impl<I: IntoIterator<Item = ast::NestedMetaItem>> NestedAttributesExt for I {\n+impl<I: Iterator<Item = ast::NestedMetaItem> + IntoIterator<Item = ast::NestedMetaItem>>\n+    NestedAttributesExt for I\n+{\n     fn has_word(self, word: Symbol) -> bool {\n         self.into_iter().any(|attr| attr.is_word() && attr.has_name(word))\n     }\n+\n+    fn get_word_attr(mut self, word: Symbol) -> (Option<ast::NestedMetaItem>, bool) {\n+        match self.find(|attr| attr.is_word() && attr.has_name(word)) {\n+            Some(a) => (Some(a), true),\n+            None => (None, false),\n+        }\n+    }\n }\n \n /// A portion of documentation, extracted from a `#[doc]` attribute."}, {"sha": "57a365b3f386a4163044023f49b26d05c1019af3", "filename": "src/test/rustdoc-ui/auxiliary/issue-61592.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb4553bdae56b41c295137ab694fab0050f7c29d/src%2Ftest%2Frustdoc-ui%2Fauxiliary%2Fissue-61592.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4553bdae56b41c295137ab694fab0050f7c29d/src%2Ftest%2Frustdoc-ui%2Fauxiliary%2Fissue-61592.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fauxiliary%2Fissue-61592.rs?ref=cb4553bdae56b41c295137ab694fab0050f7c29d", "patch": "@@ -0,0 +1,3 @@\n+#![crate_name = \"foo\"]\n+\n+pub trait Foo {}"}, {"sha": "5b4fc5ee7006307ed2231ac43db97f5a7c34d6a4", "filename": "src/test/rustdoc-ui/issue-61592-2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb4553bdae56b41c295137ab694fab0050f7c29d/src%2Ftest%2Frustdoc-ui%2Fissue-61592-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4553bdae56b41c295137ab694fab0050f7c29d/src%2Ftest%2Frustdoc-ui%2Fissue-61592-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-61592-2.rs?ref=cb4553bdae56b41c295137ab694fab0050f7c29d", "patch": "@@ -0,0 +1,10 @@\n+// aux-build:issue-61592.rs\n+\n+extern crate foo;\n+\n+#[doc = \"bar\"]\n+#[doc(inline)] //~ ERROR\n+#[doc = \"baz\"]\n+pub use foo::Foo as _;\n+\n+fn main() {}"}, {"sha": "1b7f8bb552c0ce1201a6a6c908ba84ab2d7015e6", "filename": "src/test/rustdoc-ui/issue-61592-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb4553bdae56b41c295137ab694fab0050f7c29d/src%2Ftest%2Frustdoc-ui%2Fissue-61592-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb4553bdae56b41c295137ab694fab0050f7c29d/src%2Ftest%2Frustdoc-ui%2Fissue-61592-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-61592-2.stderr?ref=cb4553bdae56b41c295137ab694fab0050f7c29d", "patch": "@@ -0,0 +1,12 @@\n+error[E0780]: anonymous imports cannot be inlined\n+  --> $DIR/issue-61592-2.rs:6:7\n+   |\n+LL | #[doc(inline)]\n+   |       ^^^^^^\n+LL | #[doc = \"baz\"]\n+LL | pub use foo::Foo as _;\n+   | ---------------------- anonymous import\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0780`."}, {"sha": "66772557f2c2fb165654ba8140aa28e6a02475ad", "filename": "src/test/rustdoc-ui/issue-61592.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb4553bdae56b41c295137ab694fab0050f7c29d/src%2Ftest%2Frustdoc-ui%2Fissue-61592.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4553bdae56b41c295137ab694fab0050f7c29d/src%2Ftest%2Frustdoc-ui%2Fissue-61592.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-61592.rs?ref=cb4553bdae56b41c295137ab694fab0050f7c29d", "patch": "@@ -0,0 +1,8 @@\n+// aux-build:issue-61592.rs\n+\n+extern crate foo;\n+\n+#[doc(inline)] //~ ERROR\n+pub use foo::Foo as _;\n+\n+fn main() {}"}, {"sha": "9c9c9106f8ac3ea66677e9b06e035dd19fd3fd39", "filename": "src/test/rustdoc-ui/issue-61592.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cb4553bdae56b41c295137ab694fab0050f7c29d/src%2Ftest%2Frustdoc-ui%2Fissue-61592.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb4553bdae56b41c295137ab694fab0050f7c29d/src%2Ftest%2Frustdoc-ui%2Fissue-61592.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-61592.stderr?ref=cb4553bdae56b41c295137ab694fab0050f7c29d", "patch": "@@ -0,0 +1,11 @@\n+error[E0780]: anonymous imports cannot be inlined\n+  --> $DIR/issue-61592.rs:5:7\n+   |\n+LL | #[doc(inline)]\n+   |       ^^^^^^\n+LL | pub use foo::Foo as _;\n+   | ---------------------- anonymous import\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0780`."}, {"sha": "6e16a4caf59485e3c98909b083b5641fa15dc490", "filename": "src/test/rustdoc/auxiliary/issue-61592.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb4553bdae56b41c295137ab694fab0050f7c29d/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-61592.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4553bdae56b41c295137ab694fab0050f7c29d/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-61592.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-61592.rs?ref=cb4553bdae56b41c295137ab694fab0050f7c29d", "patch": "@@ -0,0 +1,4 @@\n+#![crate_name = \"foo\"]\n+\n+pub trait FooTrait {}\n+pub struct FooStruct;"}, {"sha": "aef038c07d8917697e54c0a5e143d04b15b2bc36", "filename": "src/test/rustdoc/issue-61592.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cb4553bdae56b41c295137ab694fab0050f7c29d/src%2Ftest%2Frustdoc%2Fissue-61592.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4553bdae56b41c295137ab694fab0050f7c29d/src%2Ftest%2Frustdoc%2Fissue-61592.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-61592.rs?ref=cb4553bdae56b41c295137ab694fab0050f7c29d", "patch": "@@ -0,0 +1,15 @@\n+// aux-build:issue-61592.rs\n+\n+extern crate foo;\n+\n+// @has issue_61592/index.html\n+// @has - '//a[@href=\"#reexports\"]' 'Re-exports'\n+// @has - '//code' 'pub use foo::FooTrait as _;'\n+// @!has - '//a[@href=\"trait._.html\"]'\n+pub use foo::FooTrait as _;\n+\n+// @has issue_61592/index.html\n+// @has - '//a[@href=\"#reexports\"]' 'Re-exports'\n+// @has - '//code' 'pub use foo::FooStruct as _;'\n+// @!has - '//a[@href=\"struct._.html\"]'\n+pub use foo::FooStruct as _;"}]}