{"sha": "8e8fd02b272bf8ca8e4c8f4d20552ca26a468a80", "node_id": "C_kwDOAAsO6NoAKDhlOGZkMDJiMjcyYmY4Y2E4ZTRjOGY0ZDIwNTUyY2EyNmE0NjhhODA", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2022-10-27T12:40:45Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2022-10-31T16:43:31Z"}, "message": "Specialize PartialEq for Option<num::NonZero*> and Option<ptr::NonNull>", "tree": {"sha": "298bfd3b0f37878d9c51e472a042ba6f533d1f79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/298bfd3b0f37878d9c51e472a042ba6f533d1f79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e8fd02b272bf8ca8e4c8f4d20552ca26a468a80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e8fd02b272bf8ca8e4c8f4d20552ca26a468a80", "html_url": "https://github.com/rust-lang/rust/commit/8e8fd02b272bf8ca8e4c8f4d20552ca26a468a80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e8fd02b272bf8ca8e4c8f4d20552ca26a468a80/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2afca78a0b03db144c5d8b9f8868feebfe096309", "url": "https://api.github.com/repos/rust-lang/rust/commits/2afca78a0b03db144c5d8b9f8868feebfe096309", "html_url": "https://github.com/rust-lang/rust/commit/2afca78a0b03db144c5d8b9f8868feebfe096309"}], "stats": {"total": 102, "additions": 101, "deletions": 1}, "files": [{"sha": "e462f840fda8876340aa2888cb8ca2a92ccb51e6", "filename": "library/core/src/option.rs", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/8e8fd02b272bf8ca8e4c8f4d20552ca26a468a80/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8fd02b272bf8ca8e4c8f4d20552ca26a468a80/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=8e8fd02b272bf8ca8e4c8f4d20552ca26a468a80", "patch": "@@ -512,7 +512,7 @@ use crate::{\n };\n \n /// The `Option` type. See [the module level documentation](self) for more.\n-#[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n+#[derive(Copy, PartialOrd, Eq, Ord, Debug, Hash)]\n #[rustc_diagnostic_item = \"Option\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Option<T> {\n@@ -2035,6 +2035,72 @@ impl<'a, T> const From<&'a mut Option<T>> for Option<&'a mut T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T> crate::marker::StructuralPartialEq for Option<T> {}\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: PartialEq> PartialEq for Option<T> {\n+    #[inline]\n+    fn eq(&self, other: &Self) -> bool {\n+        SpecOptionPartialEq::eq(self, other)\n+    }\n+}\n+\n+#[unstable(feature = \"spec_option_partial_eq\", issue = \"none\")]\n+#[doc(hidden)]\n+pub trait SpecOptionPartialEq: Sized {\n+    fn eq(l: &Option<Self>, other: &Option<Self>) -> bool;\n+}\n+\n+#[unstable(feature = \"spec_option_partial_eq\", issue = \"none\")]\n+impl<T: PartialEq> SpecOptionPartialEq for T {\n+    #[inline]\n+    default fn eq(l: &Option<T>, r: &Option<T>) -> bool {\n+        match (l, r) {\n+            (Some(l), Some(r)) => *l == *r,\n+            (None, None) => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n+macro_rules! non_zero_option {\n+    ( $( #[$stability: meta] $NZ:ty; )+ ) => {\n+        $(\n+            #[$stability]\n+            impl SpecOptionPartialEq for $NZ {\n+                #[inline]\n+                fn eq(l: &Option<Self>, r: &Option<Self>) -> bool {\n+                    l.map(Self::get).unwrap_or(0) == r.map(Self::get).unwrap_or(0)\n+                }\n+            }\n+        )+\n+    };\n+}\n+\n+non_zero_option! {\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] crate::num::NonZeroU8;\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] crate::num::NonZeroU16;\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] crate::num::NonZeroU32;\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] crate::num::NonZeroU64;\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] crate::num::NonZeroU128;\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] crate::num::NonZeroUsize;\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] crate::num::NonZeroI8;\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] crate::num::NonZeroI16;\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] crate::num::NonZeroI32;\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] crate::num::NonZeroI64;\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] crate::num::NonZeroI128;\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] crate::num::NonZeroIsize;\n+}\n+\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+impl<T> SpecOptionPartialEq for crate::ptr::NonNull<T> {\n+    #[inline]\n+    fn eq(l: &Option<Self>, r: &Option<Self>) -> bool {\n+        l.map(Self::as_ptr).unwrap_or_else(|| crate::ptr::null_mut())\n+            == r.map(Self::as_ptr).unwrap_or_else(|| crate::ptr::null_mut())\n+    }\n+}\n+\n /////////////////////////////////////////////////////////////////////////////\n // The Option Iterators\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "598dcc19b491bf9ec70847514ae327ed2362a903", "filename": "src/test/codegen/option-nonzero-eq.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8e8fd02b272bf8ca8e4c8f4d20552ca26a468a80/src%2Ftest%2Fcodegen%2Foption-nonzero-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8fd02b272bf8ca8e4c8f4d20552ca26a468a80/src%2Ftest%2Fcodegen%2Foption-nonzero-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Foption-nonzero-eq.rs?ref=8e8fd02b272bf8ca8e4c8f4d20552ca26a468a80", "patch": "@@ -0,0 +1,34 @@\n+// compile-flags: -O -Zmerge-functions=disabled\n+\n+#![crate_type = \"lib\"]\n+\n+extern crate core;\n+use core::num::{NonZeroU32, NonZeroI64};\n+use core::ptr::NonNull;\n+\n+// CHECK-lABEL: @non_zero_eq\n+#[no_mangle]\n+pub fn non_zero_eq(l: Option<NonZeroU32>, r: Option<NonZeroU32>) -> bool {\n+    // CHECK: start:\n+    // CHECK-NEXT: icmp eq i32\n+    // CHECK-NEXT: ret i1\n+    l == r\n+}\n+\n+// CHECK-lABEL: @non_zero_signed_eq\n+#[no_mangle]\n+pub fn non_zero_signed_eq(l: Option<NonZeroI64>, r: Option<NonZeroI64>) -> bool {\n+    // CHECK: start:\n+    // CHECK-NEXT: icmp eq i64\n+    // CHECK-NEXT: ret i1\n+    l == r\n+}\n+\n+// CHECK-lABEL: @non_null_eq\n+#[no_mangle]\n+pub fn non_null_eq(l: Option<NonNull<u8>>, r: Option<NonNull<u8>>) -> bool {\n+    // CHECK: start:\n+    // CHECK-NEXT: icmp eq {{(i8\\*|ptr)}}\n+    // CHECK-NEXT: ret i1\n+    l == r\n+}"}]}