{"sha": "c71228e2f4d6ea82c9538391454801baa7946bff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MTIyOGUyZjRkNmVhODJjOTUzODM5MTQ1NDgwMWJhYTc5NDZiZmY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-10-11T19:11:23Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-10-11T19:11:23Z"}, "message": "review comments\n\n- reword messages\n- apply custom comments to all types of ranges\n- fix indentation", "tree": {"sha": "5b526897bb8867ea584a20f71e7f385dc0821812", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b526897bb8867ea584a20f71e7f385dc0821812"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c71228e2f4d6ea82c9538391454801baa7946bff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c71228e2f4d6ea82c9538391454801baa7946bff", "html_url": "https://github.com/rust-lang/rust/commit/c71228e2f4d6ea82c9538391454801baa7946bff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c71228e2f4d6ea82c9538391454801baa7946bff/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0fd68b088fc8ce869ad89bdea4c8ef4441f1874", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0fd68b088fc8ce869ad89bdea4c8ef4441f1874", "html_url": "https://github.com/rust-lang/rust/commit/a0fd68b088fc8ce869ad89bdea4c8ef4441f1874"}], "stats": {"total": 68, "additions": 46, "deletions": 22}, "files": [{"sha": "ff1bd71bd55158a4eed5fc2fc90d05556ec1f493", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c71228e2f4d6ea82c9538391454801baa7946bff/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71228e2f4d6ea82c9538391454801baa7946bff/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=c71228e2f4d6ea82c9538391454801baa7946bff", "patch": "@@ -33,8 +33,32 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item=()>) {}\n     on(\n         _Self=\"[std::ops::Range<Idx>; 1]\",\n         label=\"if you meant to iterate between two values, remove the square brackets\",\n-        note=\"`[start..end]` is an array of one `Range`, you might have meant to have a `Range`: \\\n-              `start..end`\"\n+        note=\"`[start..end]` is an array of one `Range`; you might have meant to have a `Range` \\\n+              without the brackets: `start..end`\"\n+    ),\n+    on(\n+        _Self=\"[std::ops::RangeFrom<Idx>; 1]\",\n+        label=\"if you meant to iterate from a value onwards, remove the square brackets\",\n+        note=\"`[start..]` is an array of one `RangeFrom`; you might have meant to have a \\\n+              `RangeFrom` without the brackets: `start..`\"\n+    ),\n+    on(\n+        _Self=\"[std::ops::RangeTo<Idx>; 1]\",\n+        label=\"if you meant to iterate until a value, remove the square brackets\",\n+        note=\"`[..end]` is an array of one `RangeTo`; you might have meant to have a \\\n+              `RangeTo` without the brackets: `..end`\"\n+    ),\n+    on(\n+        _Self=\"[std::ops::RangeInclusive<Idx>; 1]\",\n+        label=\"if you meant to iterate between two values, remove the square brackets\",\n+        note=\"`[start..=end]` is an array of one `RangeInclusive`; you might have meant to have a \\\n+              `RangeInclusive` without the brackets: `start..=end`\"\n+    ),\n+    on(\n+        _Self=\"[std::ops::RangeToInclusive<Idx>; 1]\",\n+        label=\"if you meant to iterate until a value, remove the square brackets\",\n+        note=\"`[..=end]` is an array of one `RangeToInclusive`; you might have meant to have a \\\n+              `RangeToInclusive` without the brackets: `..=end`\"\n     ),\n     on(\n         _Self=\"&str\",\n@@ -51,8 +75,8 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item=()>) {}\n     ),\n     on(\n         _Self=\"{integral}\",\n-        note=\"if you want to iterate between `0` until a value `end`, use the range syntax: \\\n-              `0..end`\"\n+        note=\"if you want to iterate between `start` until a value `end`, use the exclusive range \\\n+              syntax `start..end` or the inclusive range syntax `start..=end`\"\n     ),\n     label=\"`{Self}` is not an iterator\",\n     message=\"`{Self}` is not an iterator\""}, {"sha": "8288a45ad636b48b1ef4c75628fce0f31d8ebf32", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c71228e2f4d6ea82c9538391454801baa7946bff/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71228e2f4d6ea82c9538391454801baa7946bff/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=c71228e2f4d6ea82c9538391454801baa7946bff", "patch": "@@ -351,7 +351,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         obligation: &PredicateObligation<'tcx>,\n     ) -> OnUnimplementedNote {\n-    let def_id = self.impl_similar_to(trait_ref, obligation)\n+        let def_id = self.impl_similar_to(trait_ref, obligation)\n             .unwrap_or(trait_ref.def_id());\n         let trait_ref = *trait_ref.skip_binder();\n "}, {"sha": "14764b4e9f0f8afae82c8e263b4f34f67d09ec0b", "filename": "src/test/ui/feature-gates/feature-gate-trivial_bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c71228e2f4d6ea82c9538391454801baa7946bff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c71228e2f4d6ea82c9538391454801baa7946bff/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr?ref=c71228e2f4d6ea82c9538391454801baa7946bff", "patch": "@@ -84,7 +84,7 @@ LL | | }\n    | |_^ `i32` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `i32`\n-   = note: if you want to iterate between `0` until a value `end`, use the range syntax: `0..end`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n "}, {"sha": "cbff927ac74d4370b45dd2b31f80fa2fd680eda8", "filename": "src/test/ui/issues/issue-50480.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c71228e2f4d6ea82c9538391454801baa7946bff/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c71228e2f4d6ea82c9538391454801baa7946bff/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr?ref=c71228e2f4d6ea82c9538391454801baa7946bff", "patch": "@@ -11,7 +11,7 @@ LL | struct Foo(NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^ `i32` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `i32`\n-   = note: if you want to iterate between `0` until a value `end`, use the range syntax: `0..end`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n \n error[E0204]: the trait `Copy` may not be implemented for this type\n   --> $DIR/issue-50480.rs:11:17"}, {"sha": "073baab67b2b4b73a4a7dbe85178f5eac9166d23", "filename": "src/test/ui/iterators/array-of-ranges.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c71228e2f4d6ea82c9538391454801baa7946bff/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c71228e2f4d6ea82c9538391454801baa7946bff/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.stderr?ref=c71228e2f4d6ea82c9538391454801baa7946bff", "patch": "@@ -5,7 +5,7 @@ LL |     for _ in [0..1] {}\n    |              ^^^^^^ if you meant to iterate between two values, remove the square brackets\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `[std::ops::Range<{integer}>; 1]`\n-   = note: `[start..end]` is an array of one `Range`, you might have meant to have a `Range`: `start..end`\n+   = note: `[start..end]` is an array of one `Range`; you might have meant to have a `Range` without the brackets: `start..end`\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `[std::ops::Range<{integer}>; 1]` is not an iterator\n@@ -15,7 +15,7 @@ LL |     for _ in [start..end] {}\n    |              ^^^^^^^^^^^^ if you meant to iterate between two values, remove the square brackets\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `[std::ops::Range<{integer}>; 1]`\n-   = note: `[start..end]` is an array of one `Range`, you might have meant to have a `Range`: `start..end`\n+   = note: `[start..end]` is an array of one `Range`; you might have meant to have a `Range` without the brackets: `start..end`\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `[std::ops::Range<{integer}>; 1]` is not an iterator\n@@ -25,7 +25,7 @@ LL |     for _ in array_of_range {}\n    |              ^^^^^^^^^^^^^^ if you meant to iterate between two values, remove the square brackets\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `[std::ops::Range<{integer}>; 1]`\n-   = note: `[start..end]` is an array of one `Range`, you might have meant to have a `Range`: `start..end`\n+   = note: `[start..end]` is an array of one `Range`; you might have meant to have a `Range` without the brackets: `start..end`\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `[std::ops::Range<{integer}>; 2]` is not an iterator"}, {"sha": "14057387c4f4077f78828e4965f1ed0db5891066", "filename": "src/test/ui/iterators/bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c71228e2f4d6ea82c9538391454801baa7946bff/src%2Ftest%2Fui%2Fiterators%2Fbound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c71228e2f4d6ea82c9538391454801baa7946bff/src%2Ftest%2Fui%2Fiterators%2Fbound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fbound.stderr?ref=c71228e2f4d6ea82c9538391454801baa7946bff", "patch": "@@ -5,7 +5,7 @@ LL | struct T(S<u8>);\n    |          ^^^^^ `u8` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `u8`\n-   = note: if you want to iterate between `0` until a value `end`, use the range syntax: `0..end`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n note: required by `S`\n   --> $DIR/bound.rs:1:1\n    |"}, {"sha": "71e1e81e5afec9e1e3414666877d4b287a6ff80f", "filename": "src/test/ui/iterators/integral.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c71228e2f4d6ea82c9538391454801baa7946bff/src%2Ftest%2Fui%2Fiterators%2Fintegral.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c71228e2f4d6ea82c9538391454801baa7946bff/src%2Ftest%2Fui%2Fiterators%2Fintegral.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fintegral.stderr?ref=c71228e2f4d6ea82c9538391454801baa7946bff", "patch": "@@ -5,7 +5,7 @@ LL |     for _ in 42 {}\n    |              ^^ `{integer}` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `{integer}`\n-   = note: if you want to iterate between `0` until a value `end`, use the range syntax: `0..end`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `u8` is not an iterator\n@@ -15,7 +15,7 @@ LL |     for _ in 42 as u8 {}\n    |              ^^^^^^^^ `u8` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `u8`\n-   = note: if you want to iterate between `0` until a value `end`, use the range syntax: `0..end`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `i8` is not an iterator\n@@ -25,7 +25,7 @@ LL |     for _ in 42 as i8 {}\n    |              ^^^^^^^^ `i8` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `i8`\n-   = note: if you want to iterate between `0` until a value `end`, use the range syntax: `0..end`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `u16` is not an iterator\n@@ -35,7 +35,7 @@ LL |     for _ in 42 as u16 {}\n    |              ^^^^^^^^^ `u16` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `u16`\n-   = note: if you want to iterate between `0` until a value `end`, use the range syntax: `0..end`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `i16` is not an iterator\n@@ -45,7 +45,7 @@ LL |     for _ in 42 as i16 {}\n    |              ^^^^^^^^^ `i16` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `i16`\n-   = note: if you want to iterate between `0` until a value `end`, use the range syntax: `0..end`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `u32` is not an iterator\n@@ -55,7 +55,7 @@ LL |     for _ in 42 as u32 {}\n    |              ^^^^^^^^^ `u32` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `u32`\n-   = note: if you want to iterate between `0` until a value `end`, use the range syntax: `0..end`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `i32` is not an iterator\n@@ -65,7 +65,7 @@ LL |     for _ in 42 as i32 {}\n    |              ^^^^^^^^^ `i32` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `i32`\n-   = note: if you want to iterate between `0` until a value `end`, use the range syntax: `0..end`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `u64` is not an iterator\n@@ -75,7 +75,7 @@ LL |     for _ in 42 as u64 {}\n    |              ^^^^^^^^^ `u64` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `u64`\n-   = note: if you want to iterate between `0` until a value `end`, use the range syntax: `0..end`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `i64` is not an iterator\n@@ -85,7 +85,7 @@ LL |     for _ in 42 as i64 {}\n    |              ^^^^^^^^^ `i64` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `i64`\n-   = note: if you want to iterate between `0` until a value `end`, use the range syntax: `0..end`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `usize` is not an iterator\n@@ -95,7 +95,7 @@ LL |     for _ in 42 as usize {}\n    |              ^^^^^^^^^^^ `usize` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `usize`\n-   = note: if you want to iterate between `0` until a value `end`, use the range syntax: `0..end`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `isize` is not an iterator\n@@ -105,7 +105,7 @@ LL |     for _ in 42 as isize {}\n    |              ^^^^^^^^^^^ `isize` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `isize`\n-   = note: if you want to iterate between `0` until a value `end`, use the range syntax: `0..end`\n+   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `{float}` is not an iterator"}]}