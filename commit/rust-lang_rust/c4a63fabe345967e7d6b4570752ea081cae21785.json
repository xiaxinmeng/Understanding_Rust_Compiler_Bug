{"sha": "c4a63fabe345967e7d6b4570752ea081cae21785", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YTYzZmFiZTM0NTk2N2U3ZDZiNDU3MDc1MmVhMDgxY2FlMjE3ODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-10T21:56:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-10T21:56:11Z"}, "message": "auto merge of #16182 : jbcrail/rust/fix-test-comments, r=sfackler", "tree": {"sha": "8dfc898b89f0b2d0aeebabfd3398c21b18d3502a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dfc898b89f0b2d0aeebabfd3398c21b18d3502a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4a63fabe345967e7d6b4570752ea081cae21785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4a63fabe345967e7d6b4570752ea081cae21785", "html_url": "https://github.com/rust-lang/rust/commit/c4a63fabe345967e7d6b4570752ea081cae21785", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4a63fabe345967e7d6b4570752ea081cae21785/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23276f9dfea081666aa565443351c06d76750794", "url": "https://api.github.com/repos/rust-lang/rust/commits/23276f9dfea081666aa565443351c06d76750794", "html_url": "https://github.com/rust-lang/rust/commit/23276f9dfea081666aa565443351c06d76750794"}, {"sha": "2016742e072ab0e15e04db881c3a82382f50013b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2016742e072ab0e15e04db881c3a82382f50013b", "html_url": "https://github.com/rust-lang/rust/commit/2016742e072ab0e15e04db881c3a82382f50013b"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "b00adf4bdb1d4d1321490cc64882b343c36cbe2a", "filename": "src/test/bench/rt-messaging-ping-pong.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -22,7 +22,7 @@ use std::uint;\n \n // This is a simple bench that creates M pairs of tasks. These\n // tasks ping-pong back and forth over a pair of streams. This is a\n-// cannonical message-passing benchmark as it heavily strains message\n+// canonical message-passing benchmark as it heavily strains message\n // passing and almost nothing else.\n \n fn ping_pong_bench(n: uint, m: uint) {"}, {"sha": "9be111f55ae09339bf428aea4e77c614cb000d8b", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -101,7 +101,7 @@ impl<'a, T> Iterator<&'a T> for ListIterator<'a, T> {\n // every possible transformations (the 6 rotations with their\n // corresponding mirrored piece), with, as minimum coordinates, (0,\n // 0).  If all is false, only generate half of the possibilities (used\n-// to break the symetry of the board).\n+// to break the symmetry of the board).\n fn transform(piece: Vec<(int, int)> , all: bool) -> Vec<Vec<(int, int)>> {\n     let mut res: Vec<Vec<(int, int)>> =\n         // rotations\n@@ -124,9 +124,9 @@ fn transform(piece: Vec<(int, int)> , all: bool) -> Vec<Vec<(int, int)>> {\n     res\n }\n \n-// A mask is a piece somewere on the board.  It is represented as a\n+// A mask is a piece somewhere on the board.  It is represented as a\n // u64: for i in the first 50 bits, m[i] = 1 if the cell at (i/5, i%5)\n-// is occuped.  m[50 + id] = 1 if the identifier of the piece is id.\n+// is occupied.  m[50 + id] = 1 if the identifier of the piece is id.\n \n // Takes a piece with minimum coordinate (0, 0) (as generated by\n // transform).  Returns the corresponding mask if p translated by (dy,\n@@ -159,7 +159,7 @@ fn make_masks() -> Vec<Vec<Vec<u64> > > {\n         vec!((0i,0i),(0,1),(0,2),(1,2),(1,3)),\n         vec!((0i,0i),(0,1),(0,2),(0,3),(1,2)));\n \n-    // To break the central symetry of the problem, every\n+    // To break the central symmetry of the problem, every\n     // transformation must be taken except for one piece (piece 3\n     // here).\n     let transforms: Vec<Vec<Vec<(int, int)>>> =\n@@ -263,7 +263,7 @@ impl Data {\n // Records a new found solution.  Returns false if the search must be\n // stopped.\n fn handle_sol(raw_sol: &List<u64>, data: &mut Data) {\n-    // because we break the symetry, 2 solutions correspond to a call\n+    // because we break the symmetry, 2 solutions correspond to a call\n     // to this method: the normal solution, and the same solution in\n     // reverse order, i.e. the board rotated by half a turn.\n     data.nb += 2;\n@@ -298,7 +298,7 @@ fn search(\n     for id in range(0u, 10).filter(|id| board & (1 << (id + 50)) == 0) {\n         // for each mask that fits on the board\n         for m in masks_at.get(id).iter().filter(|&m| board & *m == 0) {\n-            // This check is too costy.\n+            // This check is too costly.\n             //if is_board_unfeasible(board | m, masks) {continue;}\n             search(masks, board | *m, i + 1, Cons(*m, &cur), data);\n         }"}, {"sha": "2cbbfdb23fe0234df5135867b0a7300cd4766781", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -36,8 +36,8 @@ fn dot(v: &[f64], u: &[f64]) -> f64 {\n \n fn mult(v: Arc<RWLock<Vec<f64>>>, out: Arc<RWLock<Vec<f64>>>,\n         f: fn(&Vec<f64>, uint) -> f64) {\n-    // We lanch in different tasks the work to be done.  To finish\n-    // this fuction, we need to wait for the completion of every\n+    // We launch in different tasks the work to be done.  To finish\n+    // this function, we need to wait for the completion of every\n     // tasks.  To do that, we give to each tasks a wait_chan that we\n     // drop at the end of the work.  At the end of this function, we\n     // wait until the channel hang up."}, {"sha": "01a6e33467ee49ac8c19f83fe6bfe0d6e2ecbcb4", "filename": "src/test/compile-fail/borrowck-forbid-static-unsafe-interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Fcompile-fail%2Fborrowck-forbid-static-unsafe-interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Fcompile-fail%2Fborrowck-forbid-static-unsafe-interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-forbid-static-unsafe-interior.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // Verify that it is not possible to take the address of\n-// static items with usnafe interior.\n+// static items with unsafe interior.\n \n use std::kinds::marker;\n use std::cell::UnsafeCell;"}, {"sha": "a8a79056fb13c21963262cc6115f3c105861e98d", "filename": "src/test/compile-fail/borrowck-managed-pointer-deref-scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Fcompile-fail%2Fborrowck-managed-pointer-deref-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Fcompile-fail%2Fborrowck-managed-pointer-deref-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-managed-pointer-deref-scope.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Verify that managed pointers scope is treated like ownoed pointers.\n-// regresion test for #11586\n+// Verify that managed pointers scope is treated like owned pointers.\n+// regression test for #11586\n \n \n use std::gc::{GC, Gc};"}, {"sha": "3e67419843cba283a3c36921e7860af5caca2625", "filename": "src/test/compile-fail/check-static-values-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -72,7 +72,7 @@ static STATIC7: SafeStruct = SafeStruct{field1: Variant1, field2: Variant3(WithD\n //~^ ERROR static items are not allowed to have destructors\n \n // Test variadic constructor for structs. The base struct should be examined\n-// as well as every field persent in the constructor.\n+// as well as every field present in the constructor.\n // This example shouldn't fail because all the fields are safe.\n static STATIC8: SafeStruct = SafeStruct{field1: Variant1,\n                                         ..SafeStruct{field1: Variant1, field2: Variant1}};"}, {"sha": "702f02c721d8616573e0b9ffb30bf60f875f605c", "filename": "src/test/compile-fail/issue-5806.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Fcompile-fail%2Fissue-5806.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Fcompile-fail%2Fissue-5806.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5806.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// opyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //"}, {"sha": "52be07b463d8dd189ac1e35dfa09e6fd72623cbc", "filename": "src/test/compile-fail/privacy1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -15,7 +15,7 @@\n pub trait Sized {}\n \n mod bar {\n-    // shouln't bring in too much\n+    // shouldn't bring in too much\n     pub use self::glob::*;\n \n     // can't publicly re-export private items"}, {"sha": "369bd0a15c452203223a4a43b9afb171aa7b2d63", "filename": "src/test/compile-fail/typeck-unsafe-always-share.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Verify that UnsafeCell is *always* sync regardles `T` is sync.\n+// Verify that UnsafeCell is *always* sync regardless if `T` is sync.\n \n // ignore-tidy-linelength\n "}, {"sha": "0d20f652496d254cc133f817aeafc9267fa8704d", "filename": "src/test/compile-fail/variance-regions-indirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Fcompile-fail%2Fvariance-regions-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Fcompile-fail%2Fvariance-regions-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-regions-indirect.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // Test that we correctly infer variance for region parameters in\n-// case that involve multiple intracrate types.\n+// case that involve multiple intricate types.\n // Try enums too.\n \n #[rustc_variance]"}, {"sha": "295af0964b41c951f797f075ce06060314e33994", "filename": "src/test/run-make/unicode-input/multiple_files.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -13,7 +13,7 @@ use std::io::{File, Command};\n use std::rand::{task_rng, Rng};\n \n // creates unicode_input_multiple_files_{main,chars}.rs, where the\n-// former imports the latter. `_chars` just contains an indentifier\n+// former imports the latter. `_chars` just contains an identifier\n // made up of random characters, because will emit an error message\n // about the ident being in the wrong place, with a span (and creating\n // this span used to upset the compiler)."}, {"sha": "7e1b28219373bf571d00b29f3b23fb12923072df", "filename": "src/test/run-pass/builtin-superkinds-phantom-typaram.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-phantom-typaram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-phantom-typaram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-phantom-typaram.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Tests that even when a type paramenter doesn't implement a required\n+// Tests that even when a type parameter doesn't implement a required\n // super-builtin-kind of a trait, if the type parameter is never used,\n // the type can implement the trait anyway.\n "}, {"sha": "7dd46e7b01702b8ff41c08a7eebfdc34a784fd37", "filename": "src/test/run-pass/cleanup-shortcircuit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -18,7 +18,7 @@\n // option. this file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that cleanups for the RHS of shorcircuiting operators work.\n+// Test that cleanups for the RHS of shortcircuiting operators work.\n \n use std::os;\n "}, {"sha": "59d532a40e7624521aee949ad9446a21fd65e059", "filename": "src/test/run-pass/close-over-big-then-small-data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// If we use GEPi rathern than GEP_tup_like when\n+// If we use GEPi rather than GEP_tup_like when\n // storing closure data (as we used to do), the u64 would\n // overwrite the u16.\n "}, {"sha": "34f1e681608a367ad99d80e2d4c363bd4e4ded98", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -76,7 +76,7 @@ pub fn sleeper() -> Process {\n pub fn sleeper() -> Process {\n     // There's a `timeout` command on windows, but it doesn't like having\n     // its output piped, so instead just ping ourselves a few times with\n-    // gaps inbetweeen so we're sure this process is alive for awhile\n+    // gaps in between so we're sure this process is alive for awhile\n     Command::new(\"ping\").arg(\"127.0.0.1\").arg(\"-n\").arg(\"1000\").spawn().unwrap()\n }\n "}, {"sha": "7164547b6b827d37ce5328ecc27c618f04e63b87", "filename": "src/test/run-pass/deriving-encodable-decodable-cell-refcell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// This briefuly tests the capability of `Cell` and `RefCell` to implement the\n+// This briefly tests the capability of `Cell` and `RefCell` to implement the\n // `Encodable` and `Decodable` traits via `#[deriving(Encodable, Decodable)]`\n \n extern crate serialize;"}, {"sha": "1f2cd0425d322f80c2d51b9f751050fb7789ba4b", "filename": "src/test/run-pass/deriving-meta-multiple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fderiving-meta-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fderiving-meta-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-meta-multiple.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -11,7 +11,7 @@\n \n use std::hash::hash;\n \n-// testing mulptiple separate deriving attributes\n+// testing multiple separate deriving attributes\n #[deriving(PartialEq)]\n #[deriving(Clone)]\n #[deriving(Hash)]"}, {"sha": "39c7d6dda0d0a1f75cd0f0ed31b936c0ec8f5130", "filename": "src/test/run-pass/foreign-dupe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// calling pin_task and that's having wierd side-effects.\n+// calling pin_task and that's having weird side-effects.\n \n mod rustrt1 {\n     extern crate libc;"}, {"sha": "d299b853aeeb195353235a0ca091f9b26a747f7e", "filename": "src/test/run-pass/issue-11709.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fissue-11709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fissue-11709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11709.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -12,7 +12,7 @@\n \n // Don't fail on blocks without results\n // There are several tests in this run-pass that raised\n-// when this bug was oppened. The cases where the compiler\n+// when this bug was opened. The cases where the compiler\n // failed before the fix have a comment.\n \n struct S {x:()}"}, {"sha": "1bc1196c4914b17ddb642b1c32925b8ef8f66f51", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -13,7 +13,7 @@\n \n // notes on this test case:\n // On Thu, Apr 18, 2013-2014 at 6:30 PM, John Clements <clements@brinckerhoff.org> wrote:\n-// the \"issue-2185.rs\" test was ignoreed with a ref to #2263. Issue #2263 is now fixed,\n+// the \"issue-2185.rs\" test was ignored with a ref to #2263. Issue #2263 is now fixed,\n // so I tried it again, and after adding some &self parameters, I got this error:\n //\n // Running /usr/local/bin/rustc:"}, {"sha": "369f93222e13e418030a82111c6e249c987d1d14", "filename": "src/test/run-pass/issue-9382.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fissue-9382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fissue-9382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9382.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -10,7 +10,7 @@\n \n #![allow(unnecessary_allocation)]\n \n-// Tests for a previous bug that occured due to an interaction\n+// Tests for a previous bug that occurred due to an interaction\n // between struct field initialization and the auto-coercion\n // from a vector to a slice. The drop glue was being invoked on\n // the temporary slice with a wrong type, triggering an LLVM assert."}, {"sha": "852fe80fcc8fb612cecc83d24908a4723d1eee67", "filename": "src/test/run-pass/linkage1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Flinkage1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Flinkage1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinkage1.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -28,7 +28,7 @@ fn main() {\n     // It appears that the --as-needed flag to linkers will not pull in a dynamic\n     // library unless it satisfies a non weak undefined symbol. The 'other' crate\n     // is compiled as a dynamic library where it would only be used for a\n-    // weak-symbol as part of an executable, so the dynamic library woudl be\n+    // weak-symbol as part of an executable, so the dynamic library would be\n     // discarded. By adding and calling `other::bar`, we get around this problem.\n     other::bar();\n "}, {"sha": "319e01172bbb42d3fbcfee3a2e4b9499ca98cca4", "filename": "src/test/run-pass/regions-infer-borrow-scope-addr-of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-addr-of.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -15,7 +15,7 @@ pub fn main() {\n \n     for i in range(0u, 3) {\n         // ensure that the borrow in this alt\n-        // does not inferfere with the swap\n+        // does not interfere with the swap\n         // below.  note that it would it you\n         // naively borrowed &x for the lifetime\n         // of the variable x, as we once did"}, {"sha": "77ecb077fef169ce8c3d457a007fe89881c773d0", "filename": "src/test/run-pass/regions-lifetime-nonfree-late-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -12,7 +12,7 @@\n //\n // The original issue causing the ICE: the LUB-computations during\n // type inference were encountering late-bound lifetimes, and\n-// asserting that such lifetimes should have already been subsituted\n+// asserting that such lifetimes should have already been substituted\n // with a concrete lifetime.\n //\n // However, those encounters were occurring within the lexical scope"}, {"sha": "87da814771b4597109b7b6d4bc337955d9a5bdbb", "filename": "src/test/run-pass/shebang.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fshebang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a63fabe345967e7d6b4570752ea081cae21785/src%2Ftest%2Frun-pass%2Fshebang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshebang.rs?ref=c4a63fabe345967e7d6b4570752ea081cae21785", "patch": "@@ -9,7 +9,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-pretty: `expand` addes some preludes before shebang\n+// ignore-pretty: `expand` adds some preludes before shebang\n //\n // ignore-lexer-test FIXME #15878\n "}]}