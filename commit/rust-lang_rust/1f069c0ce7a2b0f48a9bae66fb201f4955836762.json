{"sha": "1f069c0ce7a2b0f48a9bae66fb201f4955836762", "node_id": "C_kwDOAAsO6NoAKDFmMDY5YzBjZTdhMmIwZjQ4YTliYWU2NmZiMjAxZjQ5NTU4MzY3NjI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-17T21:55:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-17T21:55:05Z"}, "message": "Rollup merge of #94960 - codehorseman:master, r=oli-obk\n\nFix many spelling mistakes\n\nSigned-off-by: codehorseman <cricis@yeah.net>", "tree": {"sha": "d57b03b7c695858d48f196df78d7795de74f9cb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d57b03b7c695858d48f196df78d7795de74f9cb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f069c0ce7a2b0f48a9bae66fb201f4955836762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f069c0ce7a2b0f48a9bae66fb201f4955836762", "html_url": "https://github.com/rust-lang/rust/commit/1f069c0ce7a2b0f48a9bae66fb201f4955836762", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f069c0ce7a2b0f48a9bae66fb201f4955836762/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59dd179ad3b89c404cae4d251015a510289a048f", "url": "https://api.github.com/repos/rust-lang/rust/commits/59dd179ad3b89c404cae4d251015a510289a048f", "html_url": "https://github.com/rust-lang/rust/commit/59dd179ad3b89c404cae4d251015a510289a048f"}, {"sha": "4beda1be708904fc2fc43e513c94b32497416db8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4beda1be708904fc2fc43e513c94b32497416db8", "html_url": "https://github.com/rust-lang/rust/commit/4beda1be708904fc2fc43e513c94b32497416db8"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "e6a0162fd02728d5c205996b2a34c0500756dba6", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f069c0ce7a2b0f48a9bae66fb201f4955836762/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f069c0ce7a2b0f48a9bae66fb201f4955836762/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=1f069c0ce7a2b0f48a9bae66fb201f4955836762", "patch": "@@ -126,7 +126,7 @@ declare_clippy_lint! {\n     /// Duplicate code is less maintainable.\n     ///\n     /// ### Known problems\n-    /// * The lint doesn't check if the moved expressions modify values that are beeing used in\n+    /// * The lint doesn't check if the moved expressions modify values that are being used in\n     ///   the if condition. The suggestion can in that case modify the behavior of the program.\n     ///   See [rust-clippy#7452](https://github.com/rust-lang/rust-clippy/issues/7452)\n     ///"}, {"sha": "088d9996516e83683fdb9ffc160b6967be5da19f", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f069c0ce7a2b0f48a9bae66fb201f4955836762/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f069c0ce7a2b0f48a9bae66fb201f4955836762/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=1f069c0ce7a2b0f48a9bae66fb201f4955836762", "patch": "@@ -86,9 +86,9 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[h\n \n             // check for `unwrap`\n             if let Some(arglists) = method_chain_args(expr, &[\"unwrap\"]) {\n-                let reciever_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n-                if is_type_diagnostic_item(self.lcx, reciever_ty, sym::Option)\n-                    || is_type_diagnostic_item(self.lcx, reciever_ty, sym::Result)\n+                let receiver_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n+                if is_type_diagnostic_item(self.lcx, receiver_ty, sym::Option)\n+                    || is_type_diagnostic_item(self.lcx, receiver_ty, sym::Result)\n                 {\n                     self.result.push(expr.span);\n                 }"}, {"sha": "98aee7592ae80a496bde4da3e3f47327a7a547b3", "filename": "clippy_lints/src/float_equality_without_abs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f069c0ce7a2b0f48a9bae66fb201f4955836762/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f069c0ce7a2b0f48a9bae66fb201f4955836762/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs?ref=1f069c0ce7a2b0f48a9bae66fb201f4955836762", "patch": "@@ -20,7 +20,7 @@ declare_clippy_lint! {\n     ///\n     /// ### Known problems\n     /// If the user can ensure that b is larger than a, the `.abs()` is\n-    /// technically unneccessary. However, it will make the code more robust and doesn't have any\n+    /// technically unnecessary. However, it will make the code more robust and doesn't have any\n     /// large performance implications. If the abs call was deliberately left out for performance\n     /// reasons, it is probably better to state this explicitly in the code, which then can be done\n     /// with an allow.\n@@ -69,7 +69,7 @@ impl<'tcx> LateLintPass<'tcx> for FloatEqualityWithoutAbs {\n \n         if_chain! {\n \n-            // left hand side is a substraction\n+            // left hand side is a subtraction\n             if let ExprKind::Binary(\n                 Spanned {\n                     node: BinOpKind::Sub,\n@@ -84,7 +84,7 @@ impl<'tcx> LateLintPass<'tcx> for FloatEqualityWithoutAbs {\n             if let Res::Def(DefKind::AssocConst, def_id) = cx.qpath_res(epsilon_path, rhs.hir_id);\n             if match_def_path(cx, def_id, &paths::F32_EPSILON) || match_def_path(cx, def_id, &paths::F64_EPSILON);\n \n-            // values of the substractions on the left hand side are of the type float\n+            // values of the subtractions on the left hand side are of the type float\n             let t_val_l = cx.typeck_results().expr_ty(val_l);\n             let t_val_r = cx.typeck_results().expr_ty(val_r);\n             if let ty::Float(_) = t_val_l.kind();"}, {"sha": "8e61f2347767dfa85bfaa47754b4002f69dec360", "filename": "clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f069c0ce7a2b0f48a9bae66fb201f4955836762/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f069c0ce7a2b0f48a9bae66fb201f4955836762/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=1f069c0ce7a2b0f48a9bae66fb201f4955836762", "patch": "@@ -224,7 +224,7 @@ pub fn is_array(ty: Ty<'_>) -> bool {\n /// This builds the graph of side effect.\n /// The edge `a -> b` means if `a` has side effect, `b` will have side effect.\n ///\n-/// There are some exmaple in following code:\n+/// There are some example in following code:\n /// ```rust, ignore\n /// let b = 1;\n /// let a = b; // a -> b"}, {"sha": "b5dd27ff80de4052ea5960c26d63cb64e6f76610", "filename": "clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f069c0ce7a2b0f48a9bae66fb201f4955836762/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f069c0ce7a2b0f48a9bae66fb201f4955836762/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=1f069c0ce7a2b0f48a9bae66fb201f4955836762", "patch": "@@ -290,7 +290,7 @@ fn ident_swap_sugg(\n             // used instead, in these cases.\n             *applicability = Applicability::MaybeIncorrect;\n \n-            // We arbitraily choose one side to suggest changing,\n+            // We arbitrarily choose one side to suggest changing,\n             // since we don't have a better guess. If the user\n             // ends up duplicating a clause, the `logic_bug` lint\n             // should catch it.\n@@ -374,19 +374,19 @@ fn strip_non_ident_wrappers(expr: &Expr) -> &Expr {\n }\n \n fn extract_related_binops(kind: &ExprKind) -> Option<Vec<BinaryOp<'_>>> {\n-    append_opt_vecs(chained_binops(kind), if_statment_binops(kind))\n+    append_opt_vecs(chained_binops(kind), if_statement_binops(kind))\n }\n \n-fn if_statment_binops(kind: &ExprKind) -> Option<Vec<BinaryOp<'_>>> {\n+fn if_statement_binops(kind: &ExprKind) -> Option<Vec<BinaryOp<'_>>> {\n     match kind {\n         ExprKind::If(ref condition, _, _) => chained_binops(&condition.kind),\n-        ExprKind::Paren(ref e) => if_statment_binops(&e.kind),\n+        ExprKind::Paren(ref e) => if_statement_binops(&e.kind),\n         ExprKind::Block(ref block, _) => {\n             let mut output = None;\n             for stmt in &block.stmts {\n                 match stmt.kind {\n                     StmtKind::Expr(ref e) | StmtKind::Semi(ref e) => {\n-                        output = append_opt_vecs(output, if_statment_binops(&e.kind));\n+                        output = append_opt_vecs(output, if_statement_binops(&e.kind));\n                     },\n                     _ => {},\n                 }"}, {"sha": "58cc057a39ed94001c8417fc75ff09a48d39f8c3", "filename": "clippy_lints/src/trailing_empty_array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f069c0ce7a2b0f48a9bae66fb201f4955836762/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f069c0ce7a2b0f48a9bae66fb201f4955836762/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs?ref=1f069c0ce7a2b0f48a9bae66fb201f4955836762", "patch": "@@ -10,7 +10,7 @@ declare_clippy_lint! {\n     /// Displays a warning when a struct with a trailing zero-sized array is declared without a `repr` attribute.\n     ///\n     /// ### Why is this bad?\n-    /// Zero-sized arrays aren't very useful in Rust itself, so such a struct is likely being created to pass to C code or in some other situation where control over memory layout matters (for example, in conjuction with manual allocation to make it easy to compute the offset of the array). Either way, `#[repr(C)]` (or another `repr` attribute) is needed.\n+    /// Zero-sized arrays aren't very useful in Rust itself, so such a struct is likely being created to pass to C code or in some other situation where control over memory layout matters (for example, in conjunction with manual allocation to make it easy to compute the offset of the array). Either way, `#[repr(C)]` (or another `repr` attribute) is needed.\n     ///\n     /// ### Example\n     /// ```rust"}, {"sha": "43e0132a7ec7b1a5f48397d9760e367a1e7a7f93", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f069c0ce7a2b0f48a9bae66fb201f4955836762/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f069c0ce7a2b0f48a9bae66fb201f4955836762/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=1f069c0ce7a2b0f48a9bae66fb201f4955836762", "patch": "@@ -46,7 +46,7 @@ declare_clippy_lint! {\n     ///\n     /// ### Why is this bad?\n     /// Duplicate bounds makes the code\n-    /// less readable than specifing them only once.\n+    /// less readable than specifying them only once.\n     ///\n     /// ### Example\n     /// ```rust"}, {"sha": "b32be238cd55a178129cd428ba5015059d3c0b60", "filename": "clippy_lints/src/unwrap_in_result.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f069c0ce7a2b0f48a9bae66fb201f4955836762/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f069c0ce7a2b0f48a9bae66fb201f4955836762/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap_in_result.rs?ref=1f069c0ce7a2b0f48a9bae66fb201f4955836762", "patch": "@@ -83,19 +83,19 @@ impl<'a, 'tcx> Visitor<'tcx> for FindExpectUnwrap<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         // check for `expect`\n         if let Some(arglists) = method_chain_args(expr, &[\"expect\"]) {\n-            let reciever_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n-            if is_type_diagnostic_item(self.lcx, reciever_ty, sym::Option)\n-                || is_type_diagnostic_item(self.lcx, reciever_ty, sym::Result)\n+            let receiver_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n+            if is_type_diagnostic_item(self.lcx, receiver_ty, sym::Option)\n+                || is_type_diagnostic_item(self.lcx, receiver_ty, sym::Result)\n             {\n                 self.result.push(expr.span);\n             }\n         }\n \n         // check for `unwrap`\n         if let Some(arglists) = method_chain_args(expr, &[\"unwrap\"]) {\n-            let reciever_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n-            if is_type_diagnostic_item(self.lcx, reciever_ty, sym::Option)\n-                || is_type_diagnostic_item(self.lcx, reciever_ty, sym::Result)\n+            let receiver_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n+            if is_type_diagnostic_item(self.lcx, receiver_ty, sym::Option)\n+                || is_type_diagnostic_item(self.lcx, receiver_ty, sym::Result)\n             {\n                 self.result.push(expr.span);\n             }"}, {"sha": "dc82ba891fb1f098d2c1b1099c5a0453ec67b311", "filename": "tests/lint_message_convention.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f069c0ce7a2b0f48a9bae66fb201f4955836762/tests%2Flint_message_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f069c0ce7a2b0f48a9bae66fb201f4955836762/tests%2Flint_message_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Flint_message_convention.rs?ref=1f069c0ce7a2b0f48a9bae66fb201f4955836762", "patch": "@@ -16,7 +16,7 @@ impl Message {\n     fn new(path: PathBuf) -> Self {\n         let content: String = std::fs::read_to_string(&path).unwrap();\n         // we don't want the first letter after \"error: \", \"help: \" ... to be capitalized\n-        // also no puncutation (except for \"?\" ?) at the end of a line\n+        // also no punctuation (except for \"?\" ?) at the end of a line\n         let regex_set: RegexSet = RegexSet::new(&[\n             r\"error: [A-Z]\",\n             r\"help: [A-Z]\","}, {"sha": "c826b082adff1312a0139571d87a85b74f02655b", "filename": "tests/ui/manual_memcpy/with_loop_counters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f069c0ce7a2b0f48a9bae66fb201f4955836762/tests%2Fui%2Fmanual_memcpy%2Fwith_loop_counters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f069c0ce7a2b0f48a9bae66fb201f4955836762/tests%2Fui%2Fmanual_memcpy%2Fwith_loop_counters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_memcpy%2Fwith_loop_counters.rs?ref=1f069c0ce7a2b0f48a9bae66fb201f4955836762", "patch": "@@ -59,7 +59,7 @@ pub fn manual_copy_with_counters(src: &[i32], dst: &mut [i32], dst2: &mut [i32])\n     }\n \n     // make sure parentheses are added properly to bitwise operators, which have lower precedence than\n-    // arithmetric ones\n+    // arithmetic ones\n     let mut count = 0 << 1;\n     for i in 0..1 << 1 {\n         dst[count] = src[i + 2];"}, {"sha": "e13efb3e0164b638f96b05861b818fdc70b23ed0", "filename": "tests/workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f069c0ce7a2b0f48a9bae66fb201f4955836762/tests%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f069c0ce7a2b0f48a9bae66fb201f4955836762/tests%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fworkspace.rs?ref=1f069c0ce7a2b0f48a9bae66fb201f4955836762", "patch": "@@ -93,7 +93,7 @@ fn test_no_deps_ignores_path_deps_in_workspaces() {\n         output\n     };\n \n-    // Trigger a sucessful build, so Cargo would like to cache the build result.\n+    // Trigger a successful build, so Cargo would like to cache the build result.\n     successful_build();\n \n     // Make sure there's no spurious rebuild when nothing changes."}]}