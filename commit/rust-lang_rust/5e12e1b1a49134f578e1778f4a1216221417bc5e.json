{"sha": "5e12e1b1a49134f578e1778f4a1216221417bc5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMTJlMWIxYTQ5MTM0ZjU3OGUxNzc4ZjRhMTIxNjIyMTQxN2JjNWU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-04-01T09:11:23Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-04-01T10:54:26Z"}, "message": "remove the cmath module\n\nThis is an implementation detail of the `f32` and `f64` modules and it\nshould not be public. It renames many functions and leaves out any\nprovided by LLVM intrinsics, so it is not a sensible binding to the C\nstandard library's math library and will never be a stable target.\n\nThis also removes the abuse of link_name so that this can be switched to\nusing automatically generated definitions in the future. This also\nremoves the `scalbn` binding as it is equivalent to `ldexp` when\n`FLT_RADIX` is 2, which must always be true for Rust.", "tree": {"sha": "4e2f766c9b6171137c55037631e1bec835fd7ff3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e2f766c9b6171137c55037631e1bec835fd7ff3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e12e1b1a49134f578e1778f4a1216221417bc5e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e12e1b1a49134f578e1778f4a1216221417bc5e", "html_url": "https://github.com/rust-lang/rust/commit/5e12e1b1a49134f578e1778f4a1216221417bc5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e12e1b1a49134f578e1778f4a1216221417bc5e/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a", "html_url": "https://github.com/rust-lang/rust/commit/8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a"}], "stats": {"total": 331, "additions": 126, "deletions": 205}, "files": [{"sha": "d98ceaf9832642c6c6c9d61cde526aab69ed3d5e", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e12e1b1a49134f578e1778f4a1216221417bc5e/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e12e1b1a49134f578e1778f4a1216221417bc5e/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=5e12e1b1a49134f578e1778f4a1216221417bc5e", "patch": "@@ -204,8 +204,6 @@ pub mod raw;\n /* For internal use, not exported */\n \n mod unicode;\n-#[path = \"num/cmath.rs\"]\n-mod cmath;\n \n // FIXME #7809: This shouldn't be pub, and it should be reexported under 'unstable'\n // but name resolution doesn't work without it being pub."}, {"sha": "32864f14c9631fb9daa0dfbb3ac72c5b3c72ab96", "filename": "src/libstd/num/cmath.rs", "status": "removed", "additions": 0, "deletions": 151, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a/src%2Flibstd%2Fnum%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a/src%2Flibstd%2Fnum%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fcmath.rs?ref=8ca5caf4d936e3193c81c7e9cfa1c6a99717b14a", "patch": "@@ -1,151 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(missing_doc)]\n-#![allow(dead_code)]\n-\n-//! Bindings for the C math library (for basic mathematic functions)\n-\n-// Function names are almost identical to C's libmath, a few have been\n-// renamed, grep for \"rename:\"\n-\n-pub mod c_double {\n-    use libc::{c_double, c_int};\n-\n-    #[link_name = \"m\"]\n-    extern {\n-        // Alphabetically sorted by link_name\n-\n-        pub fn acos(n: c_double) -> c_double;\n-        pub fn asin(n: c_double) -> c_double;\n-        pub fn atan(n: c_double) -> c_double;\n-        pub fn atan2(a: c_double, b: c_double) -> c_double;\n-        pub fn cbrt(n: c_double) -> c_double;\n-        pub fn cosh(n: c_double) -> c_double;\n-        pub fn erf(n: c_double) -> c_double;\n-        pub fn erfc(n: c_double) -> c_double;\n-        // rename: for consistency with underscore usage elsewhere\n-        #[link_name=\"expm1\"]\n-        pub fn exp_m1(n: c_double) -> c_double;\n-        // rename: for clarity and consistency with add/sub/mul/div\n-        #[link_name=\"fdim\"]\n-        pub fn abs_sub(a: c_double, b: c_double) -> c_double;\n-        #[link_name=\"fmax\"]\n-        pub fn fmax(a: c_double, b: c_double) -> c_double;\n-        #[link_name=\"fmin\"]\n-        pub fn fmin(a: c_double, b: c_double) -> c_double;\n-        #[link_name=\"nextafter\"]\n-        pub fn next_after(x: c_double, y: c_double) -> c_double;\n-        pub fn frexp(n: c_double, value: &mut c_int) -> c_double;\n-        pub fn hypot(x: c_double, y: c_double) -> c_double;\n-        pub fn ldexp(x: c_double, n: c_int) -> c_double;\n-        #[cfg(unix)]\n-        #[link_name=\"lgamma_r\"]\n-        pub fn lgamma(n: c_double, sign: &mut c_int) -> c_double;\n-        #[cfg(windows)]\n-        #[link_name=\"__lgamma_r\"]\n-        pub fn lgamma(n: c_double, sign: &mut c_int) -> c_double;\n-        // renamed: \"logb\" /often/ is confused for log2 by beginners\n-        #[link_name=\"logb\"]\n-        pub fn log_radix(n: c_double) -> c_double;\n-        // renamed: to be consitent with log as ln\n-        #[link_name=\"log1p\"]\n-        pub fn ln_1p(n: c_double) -> c_double;\n-        #[link_name=\"ilogb\"]\n-        pub fn ilog_radix(n: c_double) -> c_int;\n-        pub fn modf(n: c_double, iptr: &mut c_double) -> c_double;\n-        // rename: for consistency with logradix\n-        #[link_name=\"scalbn\"]\n-        pub fn ldexp_radix(n: c_double, i: c_int) -> c_double;\n-        pub fn sinh(n: c_double) -> c_double;\n-        pub fn tan(n: c_double) -> c_double;\n-        pub fn tanh(n: c_double) -> c_double;\n-        pub fn tgamma(n: c_double) -> c_double;\n-\n-        // These are commonly only available for doubles\n-\n-        pub fn j0(n: c_double) -> c_double;\n-        pub fn j1(n: c_double) -> c_double;\n-        pub fn jn(i: c_int, n: c_double) -> c_double;\n-\n-        pub fn y0(n: c_double) -> c_double;\n-        pub fn y1(n: c_double) -> c_double;\n-        pub fn yn(i: c_int, n: c_double) -> c_double;\n-    }\n-}\n-\n-pub mod c_float {\n-    use libc::{c_float, c_int};\n-\n-    #[link_name = \"m\"]\n-    extern {\n-        // Alphabetically sorted by link_name\n-\n-        #[link_name=\"acosf\"]\n-        pub fn acos(n: c_float) -> c_float;\n-        #[link_name=\"asinf\"]\n-        pub fn asin(n: c_float) -> c_float;\n-        #[link_name=\"atanf\"]\n-        pub fn atan(n: c_float) -> c_float;\n-        #[link_name=\"atan2f\"]\n-        pub fn atan2(a: c_float, b: c_float) -> c_float;\n-        #[link_name=\"cbrtf\"]\n-        pub fn cbrt(n: c_float) -> c_float;\n-        #[link_name=\"coshf\"]\n-        pub fn cosh(n: c_float) -> c_float;\n-        #[link_name=\"erff\"]\n-        pub fn erf(n: c_float) -> c_float;\n-        #[link_name=\"erfcf\"]\n-        pub fn erfc(n: c_float) -> c_float;\n-        #[link_name=\"expm1f\"]\n-        pub fn exp_m1(n: c_float) -> c_float;\n-        #[link_name=\"fdimf\"]\n-        pub fn abs_sub(a: c_float, b: c_float) -> c_float;\n-        #[link_name=\"frexpf\"]\n-        pub fn frexp(n: c_float, value: &mut c_int) -> c_float;\n-        #[link_name=\"fmaxf\"]\n-        pub fn fmax(a: c_float, b: c_float) -> c_float;\n-        #[link_name=\"fminf\"]\n-        pub fn fmin(a: c_float, b: c_float) -> c_float;\n-        #[link_name=\"nextafterf\"]\n-        pub fn next_after(x: c_float, y: c_float) -> c_float;\n-        #[link_name=\"hypotf\"]\n-        pub fn hypot(x: c_float, y: c_float) -> c_float;\n-        #[link_name=\"ldexpf\"]\n-        pub fn ldexp(x: c_float, n: c_int) -> c_float;\n-\n-        #[cfg(unix)]\n-        #[link_name=\"lgammaf_r\"]\n-        pub fn lgamma(n: c_float, sign: &mut c_int) -> c_float;\n-\n-        #[cfg(windows)]\n-        #[link_name=\"__lgammaf_r\"]\n-        pub fn lgamma(n: c_float, sign: &mut c_int) -> c_float;\n-\n-        #[link_name=\"logbf\"]\n-        pub fn log_radix(n: c_float) -> c_float;\n-        #[link_name=\"log1pf\"]\n-        pub fn ln_1p(n: c_float) -> c_float;\n-        #[link_name=\"ilogbf\"]\n-        pub fn ilog_radix(n: c_float) -> c_int;\n-        #[link_name=\"modff\"]\n-        pub fn modf(n: c_float, iptr: &mut c_float) -> c_float;\n-        #[link_name=\"scalbnf\"]\n-        pub fn ldexp_radix(n: c_float, i: c_int) -> c_float;\n-        #[link_name=\"sinhf\"]\n-        pub fn sinh(n: c_float) -> c_float;\n-        #[link_name=\"tanf\"]\n-        pub fn tan(n: c_float) -> c_float;\n-        #[link_name=\"tanhf\"]\n-        pub fn tanh(n: c_float) -> c_float;\n-        #[link_name=\"tgammaf\"]\n-        pub fn tgamma(n: c_float) -> c_float;\n-    }\n-}"}, {"sha": "6bae0648a57ba0642157702d6c4bcacdb7e3123b", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 58, "deletions": 26, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/5e12e1b1a49134f578e1778f4a1216221417bc5e/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e12e1b1a49134f578e1778f4a1216221417bc5e/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=5e12e1b1a49134f578e1778f4a1216221417bc5e", "patch": "@@ -14,7 +14,6 @@\n \n use prelude::*;\n \n-use cmath;\n use default::Default;\n use from_str::FromStr;\n use libc::{c_float, c_int};\n@@ -23,6 +22,46 @@ use num::{Zero, One, Bounded, strconv};\n use num;\n use intrinsics;\n \n+#[allow(dead_code)]\n+mod cmath {\n+    use libc::{c_float, c_int};\n+\n+    #[link_name = \"m\"]\n+    extern {\n+        pub fn acosf(n: c_float) -> c_float;\n+        pub fn asinf(n: c_float) -> c_float;\n+        pub fn atanf(n: c_float) -> c_float;\n+        pub fn atan2f(a: c_float, b: c_float) -> c_float;\n+        pub fn cbrtf(n: c_float) -> c_float;\n+        pub fn coshf(n: c_float) -> c_float;\n+        pub fn erff(n: c_float) -> c_float;\n+        pub fn erfcf(n: c_float) -> c_float;\n+        pub fn expm1f(n: c_float) -> c_float;\n+        pub fn fdimf(a: c_float, b: c_float) -> c_float;\n+        pub fn frexpf(n: c_float, value: &mut c_int) -> c_float;\n+        pub fn fmaxf(a: c_float, b: c_float) -> c_float;\n+        pub fn fminf(a: c_float, b: c_float) -> c_float;\n+        pub fn nextafterf(x: c_float, y: c_float) -> c_float;\n+        pub fn hypotf(x: c_float, y: c_float) -> c_float;\n+        pub fn ldexpf(x: c_float, n: c_int) -> c_float;\n+        pub fn logbf(n: c_float) -> c_float;\n+        pub fn log1pf(n: c_float) -> c_float;\n+        pub fn ilogbf(n: c_float) -> c_int;\n+        pub fn modff(n: c_float, iptr: &mut c_float) -> c_float;\n+        pub fn sinhf(n: c_float) -> c_float;\n+        pub fn tanf(n: c_float) -> c_float;\n+        pub fn tanhf(n: c_float) -> c_float;\n+        pub fn tgammaf(n: c_float) -> c_float;\n+\n+        #[cfg(unix)]\n+        pub fn lgammaf_r(n: c_float, sign: &mut c_int) -> c_float;\n+\n+        #[cfg(windows)]\n+        #[link_name=\"__lgammaf_r\"]\n+        pub fn lgammaf_r(n: c_float, sign: &mut c_int) -> c_float;\n+    }\n+}\n+\n macro_rules! delegate(\n     (\n         $(\n@@ -66,29 +105,22 @@ delegate!(\n     fn nearbyint(n: f32) -> f32 = intrinsics::nearbyintf32,\n     fn round(n: f32) -> f32 = intrinsics::roundf32,\n \n-    // cmath\n-    fn acos(n: c_float) -> c_float = cmath::c_float::acos,\n-    fn asin(n: c_float) -> c_float = cmath::c_float::asin,\n-    fn atan(n: c_float) -> c_float = cmath::c_float::atan,\n-    fn atan2(a: c_float, b: c_float) -> c_float = cmath::c_float::atan2,\n-    fn cbrt(n: c_float) -> c_float = cmath::c_float::cbrt,\n-    fn cosh(n: c_float) -> c_float = cmath::c_float::cosh,\n-    // fn erf(n: c_float) -> c_float = cmath::c_float::erf,\n-    // fn erfc(n: c_float) -> c_float = cmath::c_float::erfc,\n-    fn exp_m1(n: c_float) -> c_float = cmath::c_float::exp_m1,\n-    fn abs_sub(a: c_float, b: c_float) -> c_float = cmath::c_float::abs_sub,\n-    fn next_after(x: c_float, y: c_float) -> c_float = cmath::c_float::next_after,\n-    fn frexp(n: c_float, value: &mut c_int) -> c_float = cmath::c_float::frexp,\n-    fn hypot(x: c_float, y: c_float) -> c_float = cmath::c_float::hypot,\n-    fn ldexp(x: c_float, n: c_int) -> c_float = cmath::c_float::ldexp,\n-    // fn log_radix(n: c_float) -> c_float = cmath::c_float::log_radix,\n-    fn ln_1p(n: c_float) -> c_float = cmath::c_float::ln_1p,\n-    // fn ilog_radix(n: c_float) -> c_int = cmath::c_float::ilog_radix,\n-    // fn modf(n: c_float, iptr: &mut c_float) -> c_float = cmath::c_float::modf,\n-    // fn ldexp_radix(n: c_float, i: c_int) -> c_float = cmath::c_float::ldexp_radix,\n-    fn sinh(n: c_float) -> c_float = cmath::c_float::sinh,\n-    fn tan(n: c_float) -> c_float = cmath::c_float::tan,\n-    fn tanh(n: c_float) -> c_float = cmath::c_float::tanh\n+    fn acos(n: c_float) -> c_float = cmath::acosf,\n+    fn asin(n: c_float) -> c_float = cmath::asinf,\n+    fn atan(n: c_float) -> c_float = cmath::atanf,\n+    fn atan2(a: c_float, b: c_float) -> c_float = cmath::atan2f,\n+    fn cbrt(n: c_float) -> c_float = cmath::cbrtf,\n+    fn cosh(n: c_float) -> c_float = cmath::coshf,\n+    fn exp_m1(n: c_float) -> c_float = cmath::expm1f,\n+    fn abs_sub(a: c_float, b: c_float) -> c_float = cmath::fdimf,\n+    fn next_after(x: c_float, y: c_float) -> c_float = cmath::nextafterf,\n+    fn frexp(n: c_float, value: &mut c_int) -> c_float = cmath::frexpf,\n+    fn hypot(x: c_float, y: c_float) -> c_float = cmath::hypotf,\n+    fn ldexp(x: c_float, n: c_int) -> c_float = cmath::ldexpf,\n+    fn ln_1p(n: c_float) -> c_float = cmath::log1pf,\n+    fn sinh(n: c_float) -> c_float = cmath::sinhf,\n+    fn tan(n: c_float) -> c_float = cmath::tanf,\n+    fn tanh(n: c_float) -> c_float = cmath::tanhf\n )\n \n // FIXME(#11621): These constants should be deprecated once CTFE is implemented\n@@ -308,12 +340,12 @@ impl Primitive for f32 {}\n impl Float for f32 {\n     #[inline]\n     fn max(self, other: f32) -> f32 {\n-        unsafe { cmath::c_float::fmax(self, other) }\n+        unsafe { cmath::fmaxf(self, other) }\n     }\n \n     #[inline]\n     fn min(self, other: f32) -> f32 {\n-        unsafe { cmath::c_float::fmin(self, other) }\n+        unsafe { cmath::fminf(self, other) }\n     }\n \n     #[inline]"}, {"sha": "4defa452b5ce6164d8888e056ae1940b6ebac8b1", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 68, "deletions": 26, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/5e12e1b1a49134f578e1778f4a1216221417bc5e/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e12e1b1a49134f578e1778f4a1216221417bc5e/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=5e12e1b1a49134f578e1778f4a1216221417bc5e", "patch": "@@ -14,7 +14,6 @@\n \n use prelude::*;\n \n-use cmath;\n use default::Default;\n use from_str::FromStr;\n use libc::{c_double, c_int};\n@@ -23,6 +22,56 @@ use num::{Zero, One, Bounded, strconv};\n use num;\n use intrinsics;\n \n+#[allow(dead_code)]\n+mod cmath {\n+    use libc::{c_double, c_int};\n+\n+    #[link_name = \"m\"]\n+    extern {\n+        pub fn acos(n: c_double) -> c_double;\n+        pub fn asin(n: c_double) -> c_double;\n+        pub fn atan(n: c_double) -> c_double;\n+        pub fn atan2(a: c_double, b: c_double) -> c_double;\n+        pub fn cbrt(n: c_double) -> c_double;\n+        pub fn cosh(n: c_double) -> c_double;\n+        pub fn erf(n: c_double) -> c_double;\n+        pub fn erfc(n: c_double) -> c_double;\n+        pub fn expm1(n: c_double) -> c_double;\n+        pub fn fdim(a: c_double, b: c_double) -> c_double;\n+        pub fn fmax(a: c_double, b: c_double) -> c_double;\n+        pub fn fmin(a: c_double, b: c_double) -> c_double;\n+        pub fn nextafter(x: c_double, y: c_double) -> c_double;\n+        pub fn frexp(n: c_double, value: &mut c_int) -> c_double;\n+        pub fn hypot(x: c_double, y: c_double) -> c_double;\n+        pub fn ldexp(x: c_double, n: c_int) -> c_double;\n+        pub fn logb(n: c_double) -> c_double;\n+        pub fn log1p(n: c_double) -> c_double;\n+        pub fn ilogb(n: c_double) -> c_int;\n+        pub fn modf(n: c_double, iptr: &mut c_double) -> c_double;\n+        pub fn sinh(n: c_double) -> c_double;\n+        pub fn tan(n: c_double) -> c_double;\n+        pub fn tanh(n: c_double) -> c_double;\n+        pub fn tgamma(n: c_double) -> c_double;\n+\n+        // These are commonly only available for doubles\n+\n+        pub fn j0(n: c_double) -> c_double;\n+        pub fn j1(n: c_double) -> c_double;\n+        pub fn jn(i: c_int, n: c_double) -> c_double;\n+\n+        pub fn y0(n: c_double) -> c_double;\n+        pub fn y1(n: c_double) -> c_double;\n+        pub fn yn(i: c_int, n: c_double) -> c_double;\n+\n+        #[cfg(unix)]\n+        pub fn lgamma_r(n: c_double, sign: &mut c_int) -> c_double;\n+        #[cfg(windows)]\n+        #[link_name=\"__lgamma_r\"]\n+        pub fn lgamma_r(n: c_double, sign: &mut c_int) -> c_double;\n+    }\n+}\n+\n+\n macro_rules! delegate(\n     (\n         $(\n@@ -66,29 +115,22 @@ delegate!(\n     fn nearbyint(n: f64) -> f64 = intrinsics::nearbyintf64,\n     fn round(n: f64) -> f64 = intrinsics::roundf64,\n \n-    // cmath\n-    fn acos(n: c_double) -> c_double = cmath::c_double::acos,\n-    fn asin(n: c_double) -> c_double = cmath::c_double::asin,\n-    fn atan(n: c_double) -> c_double = cmath::c_double::atan,\n-    fn atan2(a: c_double, b: c_double) -> c_double = cmath::c_double::atan2,\n-    fn cbrt(n: c_double) -> c_double = cmath::c_double::cbrt,\n-    fn cosh(n: c_double) -> c_double = cmath::c_double::cosh,\n-    // fn erf(n: c_double) -> c_double = cmath::c_double::erf,\n-    // fn erfc(n: c_double) -> c_double = cmath::c_double::erfc,\n-    fn exp_m1(n: c_double) -> c_double = cmath::c_double::exp_m1,\n-    fn abs_sub(a: c_double, b: c_double) -> c_double = cmath::c_double::abs_sub,\n-    fn next_after(x: c_double, y: c_double) -> c_double = cmath::c_double::next_after,\n-    fn frexp(n: c_double, value: &mut c_int) -> c_double = cmath::c_double::frexp,\n-    fn hypot(x: c_double, y: c_double) -> c_double = cmath::c_double::hypot,\n-    fn ldexp(x: c_double, n: c_int) -> c_double = cmath::c_double::ldexp,\n-    // fn log_radix(n: c_double) -> c_double = cmath::c_double::log_radix,\n-    fn ln_1p(n: c_double) -> c_double = cmath::c_double::ln_1p,\n-    // fn ilog_radix(n: c_double) -> c_int = cmath::c_double::ilog_radix,\n-    // fn modf(n: c_double, iptr: &mut c_double) -> c_double = cmath::c_double::modf,\n-    // fn ldexp_radix(n: c_double, i: c_int) -> c_double = cmath::c_double::ldexp_radix,\n-    fn sinh(n: c_double) -> c_double = cmath::c_double::sinh,\n-    fn tan(n: c_double) -> c_double = cmath::c_double::tan,\n-    fn tanh(n: c_double) -> c_double = cmath::c_double::tanh\n+    fn acos(n: c_double) -> c_double = cmath::acos,\n+    fn asin(n: c_double) -> c_double = cmath::asin,\n+    fn atan(n: c_double) -> c_double = cmath::atan,\n+    fn atan2(a: c_double, b: c_double) -> c_double = cmath::atan2,\n+    fn cbrt(n: c_double) -> c_double = cmath::cbrt,\n+    fn cosh(n: c_double) -> c_double = cmath::cosh,\n+    fn exp_m1(n: c_double) -> c_double = cmath::expm1,\n+    fn abs_sub(a: c_double, b: c_double) -> c_double = cmath::fdim,\n+    fn next_after(x: c_double, y: c_double) -> c_double = cmath::nextafter,\n+    fn frexp(n: c_double, value: &mut c_int) -> c_double = cmath::frexp,\n+    fn hypot(x: c_double, y: c_double) -> c_double = cmath::hypot,\n+    fn ldexp(x: c_double, n: c_int) -> c_double = cmath::ldexp,\n+    fn ln_1p(n: c_double) -> c_double = cmath::log1p,\n+    fn sinh(n: c_double) -> c_double = cmath::sinh,\n+    fn tan(n: c_double) -> c_double = cmath::tan,\n+    fn tanh(n: c_double) -> c_double = cmath::tanh\n )\n \n // FIXME (#1433): obtain these in a different way\n@@ -307,12 +349,12 @@ impl Primitive for f64 {}\n impl Float for f64 {\n     #[inline]\n     fn max(self, other: f64) -> f64 {\n-        unsafe { cmath::c_double::fmax(self, other) }\n+        unsafe { cmath::fmax(self, other) }\n     }\n \n     #[inline]\n     fn min(self, other: f64) -> f64 {\n-        unsafe { cmath::c_double::fmin(self, other) }\n+        unsafe { cmath::fmin(self, other) }\n     }\n \n     #[inline]"}]}