{"sha": "8ed2dc0bcee8c7ca43d2b6a66c9743cacf8dcddf", "node_id": "C_kwDOAAsO6NoAKDhlZDJkYzBiY2VlOGM3Y2E0M2QyYjZhNjZjOTc0M2NhY2Y4ZGNkZGY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-06T16:52:17Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-06T16:52:17Z"}, "message": "Make span a bit better", "tree": {"sha": "1e6642b2803f0e19edc45a0c36311f5788a82a7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e6642b2803f0e19edc45a0c36311f5788a82a7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ed2dc0bcee8c7ca43d2b6a66c9743cacf8dcddf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed2dc0bcee8c7ca43d2b6a66c9743cacf8dcddf", "html_url": "https://github.com/rust-lang/rust/commit/8ed2dc0bcee8c7ca43d2b6a66c9743cacf8dcddf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ed2dc0bcee8c7ca43d2b6a66c9743cacf8dcddf/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00d54c879bfb6adb5b7a611af6bd522499d07a1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/00d54c879bfb6adb5b7a611af6bd522499d07a1d", "html_url": "https://github.com/rust-lang/rust/commit/00d54c879bfb6adb5b7a611af6bd522499d07a1d"}], "stats": {"total": 73, "additions": 32, "deletions": 41}, "files": [{"sha": "0c9d306081eb8c95673ac940737635d636e77a91", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8ed2dc0bcee8c7ca43d2b6a66c9743cacf8dcddf/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed2dc0bcee8c7ca43d2b6a66c9743cacf8dcddf/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=8ed2dc0bcee8c7ca43d2b6a66c9743cacf8dcddf", "patch": "@@ -1608,11 +1608,15 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             struct_span_err!(self.tcx.sess, ident.span, E0603, \"{} `{}` is private\", descr, ident);\n         err.span_label(ident.span, &format!(\"private {}\", descr));\n \n+        let mut non_exhaustive = None;\n+        // If an ADT is foreign and marked as `non_exhaustive`, then that's\n+        // probably why we have the privacy error.\n+        // Otherwise, point out if the struct has any private fields.\n         if let Some(def_id) = res.opt_def_id()\n             && !def_id.is_local()\n             && let Some(attr) = self.tcx.get_attr(def_id, sym::non_exhaustive)\n         {\n-            err.span_label(attr.span, format!(\"the {nonimport_descr} is `#[non_exhaustive]`\"));\n+            non_exhaustive = Some(attr.span);\n         } else if let Some(span) = ctor_fields_span {\n             err.span_label(span, \"a constructor is private if any of the fields is private\");\n             if let Res::Def(_, d) = res && let Some(fields) = self.field_visibility_spans.get(&d) {\n@@ -1662,6 +1666,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             if !first && binding.vis.is_public() {\n                 note_span.push_span_label(def_span, \"consider importing it directly\");\n             }\n+            // Final step in the import chain, point out if the ADT is `non_exhaustive`\n+            // which is probably why this privacy violation occurred.\n+            if next_binding.is_none() && let Some(span) = non_exhaustive {\n+                note_span.push_span_label(\n+                    span,\n+                    format!(\"cannot be constructed because it is `#[non_exhaustive]`\"),\n+                );\n+            }\n             err.span_note(note_span, &msg);\n         }\n "}, {"sha": "39b1ef1e078c7e7af19feb8d05354b4ae61b7746", "filename": "tests/ui/rfc-2008-non-exhaustive/struct.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8ed2dc0bcee8c7ca43d2b6a66c9743cacf8dcddf/tests%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ed2dc0bcee8c7ca43d2b6a66c9743cacf8dcddf/tests%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr?ref=8ed2dc0bcee8c7ca43d2b6a66c9743cacf8dcddf", "patch": "@@ -10,14 +10,11 @@ error[E0603]: tuple struct constructor `TupleStruct` is private\n LL |     let ts_explicit = structs::TupleStruct(640, 480);\n    |                                ^^^^^^^^^^^ private tuple struct constructor\n    |\n-  ::: $DIR/auxiliary/structs.rs:11:1\n-   |\n-LL | #[non_exhaustive]\n-   | ----------------- the tuple struct constructor is `#[non_exhaustive]`\n-   |\n note: the tuple struct constructor `TupleStruct` is defined here\n   --> $DIR/auxiliary/structs.rs:12:1\n    |\n+LL | #[non_exhaustive]\n+   | ----------------- cannot be constructed because it is `#[non_exhaustive]`\n LL | pub struct TupleStruct(pub u16, pub u16);\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n@@ -27,14 +24,11 @@ error[E0603]: unit struct `UnitStruct` is private\n LL |     let us_explicit = structs::UnitStruct;\n    |                                ^^^^^^^^^^ private unit struct\n    |\n-  ::: $DIR/auxiliary/structs.rs:8:1\n-   |\n-LL | #[non_exhaustive]\n-   | ----------------- the unit struct is `#[non_exhaustive]`\n-   |\n note: the unit struct `UnitStruct` is defined here\n   --> $DIR/auxiliary/structs.rs:9:1\n    |\n+LL | #[non_exhaustive]\n+   | ----------------- cannot be constructed because it is `#[non_exhaustive]`\n LL | pub struct UnitStruct;\n    | ^^^^^^^^^^^^^^^^^^^^^\n "}, {"sha": "4083f57a9cdf9ca8c2ef5b81c146bd8c298f6013", "filename": "tests/ui/rfc-2008-non-exhaustive/variant.stderr", "status": "modified", "additions": 15, "deletions": 30, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8ed2dc0bcee8c7ca43d2b6a66c9743cacf8dcddf/tests%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ed2dc0bcee8c7ca43d2b6a66c9743cacf8dcddf/tests%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr?ref=8ed2dc0bcee8c7ca43d2b6a66c9743cacf8dcddf", "patch": "@@ -4,84 +4,69 @@ error[E0603]: tuple variant `Tuple` is private\n LL |     let variant_tuple = NonExhaustiveVariants::Tuple(640);\n    |                                                ^^^^^ private tuple variant\n    |\n-  ::: $DIR/auxiliary/variants.rs:5:5\n-   |\n-LL |     #[non_exhaustive] Tuple(u32),\n-   |     ----------------- the tuple variant is `#[non_exhaustive]`\n-   |\n note: the tuple variant `Tuple` is defined here\n   --> $DIR/auxiliary/variants.rs:5:23\n    |\n LL |     #[non_exhaustive] Tuple(u32),\n-   |                       ^^^^^\n+   |     ----------------- ^^^^^\n+   |     |\n+   |     cannot be constructed because it is `#[non_exhaustive]`\n \n error[E0603]: unit variant `Unit` is private\n   --> $DIR/variant.rs:14:47\n    |\n LL |     let variant_unit = NonExhaustiveVariants::Unit;\n    |                                               ^^^^ private unit variant\n    |\n-  ::: $DIR/auxiliary/variants.rs:4:5\n-   |\n-LL |     #[non_exhaustive] Unit,\n-   |     ----------------- the unit variant is `#[non_exhaustive]`\n-   |\n note: the unit variant `Unit` is defined here\n   --> $DIR/auxiliary/variants.rs:4:23\n    |\n LL |     #[non_exhaustive] Unit,\n-   |                       ^^^^\n+   |     ----------------- ^^^^\n+   |     |\n+   |     cannot be constructed because it is `#[non_exhaustive]`\n \n error[E0603]: unit variant `Unit` is private\n   --> $DIR/variant.rs:18:32\n    |\n LL |         NonExhaustiveVariants::Unit => \"\",\n    |                                ^^^^ private unit variant\n    |\n-  ::: $DIR/auxiliary/variants.rs:4:5\n-   |\n-LL |     #[non_exhaustive] Unit,\n-   |     ----------------- the unit variant is `#[non_exhaustive]`\n-   |\n note: the unit variant `Unit` is defined here\n   --> $DIR/auxiliary/variants.rs:4:23\n    |\n LL |     #[non_exhaustive] Unit,\n-   |                       ^^^^\n+   |     ----------------- ^^^^\n+   |     |\n+   |     cannot be constructed because it is `#[non_exhaustive]`\n \n error[E0603]: tuple variant `Tuple` is private\n   --> $DIR/variant.rs:20:32\n    |\n LL |         NonExhaustiveVariants::Tuple(fe_tpl) => \"\",\n    |                                ^^^^^ private tuple variant\n    |\n-  ::: $DIR/auxiliary/variants.rs:5:5\n-   |\n-LL |     #[non_exhaustive] Tuple(u32),\n-   |     ----------------- the tuple variant is `#[non_exhaustive]`\n-   |\n note: the tuple variant `Tuple` is defined here\n   --> $DIR/auxiliary/variants.rs:5:23\n    |\n LL |     #[non_exhaustive] Tuple(u32),\n-   |                       ^^^^^\n+   |     ----------------- ^^^^^\n+   |     |\n+   |     cannot be constructed because it is `#[non_exhaustive]`\n \n error[E0603]: tuple variant `Tuple` is private\n   --> $DIR/variant.rs:26:35\n    |\n LL |     if let NonExhaustiveVariants::Tuple(fe_tpl) = variant_struct {\n    |                                   ^^^^^ private tuple variant\n    |\n-  ::: $DIR/auxiliary/variants.rs:5:5\n-   |\n-LL |     #[non_exhaustive] Tuple(u32),\n-   |     ----------------- the tuple variant is `#[non_exhaustive]`\n-   |\n note: the tuple variant `Tuple` is defined here\n   --> $DIR/auxiliary/variants.rs:5:23\n    |\n LL |     #[non_exhaustive] Tuple(u32),\n-   |                       ^^^^^\n+   |     ----------------- ^^^^^\n+   |     |\n+   |     cannot be constructed because it is `#[non_exhaustive]`\n \n error[E0639]: cannot create non-exhaustive variant using struct expression\n   --> $DIR/variant.rs:8:26"}]}