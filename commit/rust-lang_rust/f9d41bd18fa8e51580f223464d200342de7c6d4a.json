{"sha": "f9d41bd18fa8e51580f223464d200342de7c6d4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZDQxYmQxOGZhOGU1MTU4MGYyMjM0NjRkMjAwMzQyZGU3YzZkNGE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-09T09:01:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-09T09:01:45Z"}, "message": "Merge #5278\n\n5278: expect should be a dev dep r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e0c8c3e22bcf2df355eedf60801cad3bbc275e15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0c8c3e22bcf2df355eedf60801cad3bbc275e15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9d41bd18fa8e51580f223464d200342de7c6d4a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfBtz5CRBK7hj4Ov3rIwAAdHIIAHvuLak7b/j4VJMfgRcraw52\nfDmBtO0M2HkCykIBGj0fx7/3aZGK3kWP7j4YjfRK/M73ygMh6v4MPfIUqE6mCDMA\nPAuzYJyW+PAiQ/Cob7y765m46wv7AjUNh/I4IFq8AFLZFaBTW9dVHaXoUm3aLooj\nbKXblc5fnT8H9JRQLwF/1j7YZaRVNKuW9K1paE8GidKeIs3dpPGtTvqXUakkbZzF\nqNh8QB91qwp1i0xgkDbWfpi9aG86+Tz/lNTGedO7vRioqBkjscys2ChfSDnGoDfA\nwkTl8P/v7hT+AHNaHM+irjhMg4ZEnucA6dbE3p1IHtoLuFizk/eW0FchsENGKbU=\n=2Cp4\n-----END PGP SIGNATURE-----\n", "payload": "tree e0c8c3e22bcf2df355eedf60801cad3bbc275e15\nparent 9eb9b9df9f6adebb938029a86e47c0aa1eb0f678\nparent 2aa27d612ebdcf1eb34fd22fde5f180a48c3a571\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594285305 +0000\ncommitter GitHub <noreply@github.com> 1594285305 +0000\n\nMerge #5278\n\n5278: expect should be a dev dep r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d41bd18fa8e51580f223464d200342de7c6d4a", "html_url": "https://github.com/rust-lang/rust/commit/f9d41bd18fa8e51580f223464d200342de7c6d4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9d41bd18fa8e51580f223464d200342de7c6d4a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eb9b9df9f6adebb938029a86e47c0aa1eb0f678", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eb9b9df9f6adebb938029a86e47c0aa1eb0f678", "html_url": "https://github.com/rust-lang/rust/commit/9eb9b9df9f6adebb938029a86e47c0aa1eb0f678"}, {"sha": "2aa27d612ebdcf1eb34fd22fde5f180a48c3a571", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aa27d612ebdcf1eb34fd22fde5f180a48c3a571", "html_url": "https://github.com/rust-lang/rust/commit/2aa27d612ebdcf1eb34fd22fde5f180a48c3a571"}], "stats": {"total": 67, "additions": 27, "deletions": 40}, "files": [{"sha": "79a793084bdf4b53a81eaee8eca292ed16fbb830", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9d41bd18fa8e51580f223464d200342de7c6d4a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f9d41bd18fa8e51580f223464d200342de7c6d4a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f9d41bd18fa8e51580f223464d200342de7c6d4a", "patch": "@@ -1262,6 +1262,7 @@ name = \"ra_syntax\"\n version = \"0.1.0\"\n dependencies = [\n  \"arrayvec\",\n+ \"expect\",\n  \"itertools\",\n  \"once_cell\",\n  \"ra_parser\","}, {"sha": "408448eedbd4100267007d96fb2c3c0a8416bfc6", "filename": "crates/expect/src/lib.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f9d41bd18fa8e51580f223464d200342de7c6d4a/crates%2Fexpect%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d41bd18fa8e51580f223464d200342de7c6d4a/crates%2Fexpect%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fexpect%2Fsrc%2Flib.rs?ref=f9d41bd18fa8e51580f223464d200342de7c6d4a", "patch": "@@ -42,7 +42,9 @@ macro_rules! expect {\n /// expect_file![\"/crates/foo/test_data/bar.html\"]\n #[macro_export]\n macro_rules! expect_file {\n-    [$path:literal] => {$crate::ExpectFile { path: $path }};\n+    [$path:literal] => {$crate::ExpectFile {\n+        path: $crate::ExpectFilePath::Static($path)\n+    }};\n }\n \n #[derive(Debug)]\n@@ -53,7 +55,13 @@ pub struct Expect {\n \n #[derive(Debug)]\n pub struct ExpectFile {\n-    pub path: &'static str,\n+    pub path: ExpectFilePath,\n+}\n+\n+#[derive(Debug)]\n+pub enum ExpectFilePath {\n+    Static(&'static str),\n+    Dynamic(PathBuf),\n }\n \n #[derive(Debug)]\n@@ -112,6 +120,9 @@ impl Expect {\n }\n \n impl ExpectFile {\n+    pub fn new(path: PathBuf) -> ExpectFile {\n+        ExpectFile { path: ExpectFilePath::Dynamic(path) }\n+    }\n     pub fn assert_eq(&self, actual: &str) {\n         let expected = self.read();\n         if actual == expected {\n@@ -125,8 +136,14 @@ impl ExpectFile {\n     fn write(&self, contents: &str) {\n         fs::write(self.abs_path(), contents).unwrap()\n     }\n+    fn path(&self) -> &Path {\n+        match &self.path {\n+            ExpectFilePath::Static(it) => it.as_ref(),\n+            ExpectFilePath::Dynamic(it) => it.as_path(),\n+        }\n+    }\n     fn abs_path(&self) -> PathBuf {\n-        workspace_root().join(self.path)\n+        workspace_root().join(self.path())\n     }\n }\n \n@@ -154,11 +171,11 @@ impl Runtime {\n     fn fail_file(expect: &ExpectFile, expected: &str, actual: &str) {\n         let mut rt = RT.lock().unwrap_or_else(|poisoned| poisoned.into_inner());\n         if update_expect() {\n-            println!(\"\\x1b[1m\\x1b[92mupdating\\x1b[0m: {}\", expect.path);\n+            println!(\"\\x1b[1m\\x1b[92mupdating\\x1b[0m: {}\", expect.path().display());\n             expect.write(actual);\n             return;\n         }\n-        rt.panic(expect.path.to_string(), expected, actual);\n+        rt.panic(expect.path().display().to_string(), expected, actual);\n     }\n \n     fn panic(&mut self, position: String, expected: &str, actual: &str) {"}, {"sha": "5c51828ea31521ce3039bbccada6f1854154d16f", "filename": "crates/ra_ide/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9d41bd18fa8e51580f223464d200342de7c6d4a/crates%2Fra_ide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f9d41bd18fa8e51580f223464d200342de7c6d4a/crates%2Fra_ide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2FCargo.toml?ref=f9d41bd18fa8e51580f223464d200342de7c6d4a", "patch": "@@ -28,7 +28,6 @@ ra_cfg = { path = \"../ra_cfg\" }\n ra_fmt = { path = \"../ra_fmt\" }\n ra_prof = { path = \"../ra_prof\" }\n test_utils = { path = \"../test_utils\" }\n-expect = { path = \"../expect\" }\n ra_assists = { path = \"../ra_assists\" }\n ra_ssr = { path = \"../ra_ssr\" }\n \n@@ -38,3 +37,4 @@ hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n \n [dev-dependencies]\n insta = \"0.16.0\"\n+expect = { path = \"../expect\" }"}, {"sha": "cb21b8053f6de905be4c481a6d53885ffb94c59d", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9d41bd18fa8e51580f223464d200342de7c6d4a/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f9d41bd18fa8e51580f223464d200342de7c6d4a/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=f9d41bd18fa8e51580f223464d200342de7c6d4a", "patch": "@@ -31,4 +31,5 @@ serde = { version = \"1.0.106\", features = [\"derive\"] }\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }\n+expect = { path = \"../expect\" }\n walkdir = \"2.3.1\""}, {"sha": "a5b6e972e0d33480c36a5529c45e7d5ab192ac86", "filename": "crates/ra_syntax/src/tests.rs", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f9d41bd18fa8e51580f223464d200342de7c6d4a/crates%2Fra_syntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d41bd18fa8e51580f223464d200342de7c6d4a/crates%2Fra_syntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ftests.rs?ref=f9d41bd18fa8e51580f223464d200342de7c6d4a", "patch": "@@ -1,11 +1,10 @@\n use std::{\n-    env,\n     fmt::Write,\n     fs,\n     path::{Component, Path, PathBuf},\n };\n \n-use test_utils::{assert_eq_text, project_dir};\n+use test_utils::project_dir;\n \n use crate::{fuzz, tokenize, SourceFile, SyntaxError, TextRange, TextSize, Token};\n \n@@ -218,15 +217,7 @@ where\n     for (path, input_code) in collect_rust_files(test_data_dir, paths) {\n         let actual = f(&input_code, &path);\n         let path = path.with_extension(outfile_extension);\n-        if !path.exists() {\n-            println!(\"\\nfile: {}\", path.display());\n-            println!(\"No .txt file with expected result, creating...\\n\");\n-            println!(\"{}\\n{}\", input_code, actual);\n-            fs::write(&path, &actual).unwrap();\n-            panic!(\"No expected result\");\n-        }\n-        let expected = read_text(&path);\n-        assert_equal_text(&expected, &actual, &path);\n+        expect::ExpectFile::new(path).assert_eq(&actual)\n     }\n }\n \n@@ -259,29 +250,6 @@ fn rust_files_in_dir(dir: &Path) -> Vec<PathBuf> {\n     acc\n }\n \n-/// Asserts that `expected` and `actual` strings are equal. If they differ only\n-/// in trailing or leading whitespace the test won't fail and\n-/// the contents of `actual` will be written to the file located at `path`.\n-fn assert_equal_text(expected: &str, actual: &str, path: &Path) {\n-    if expected == actual {\n-        return;\n-    }\n-    let dir = project_dir();\n-    let pretty_path = path.strip_prefix(&dir).unwrap_or_else(|_| path);\n-    if expected.trim() == actual.trim() {\n-        println!(\"whitespace difference, rewriting\");\n-        println!(\"file: {}\\n\", pretty_path.display());\n-        fs::write(path, actual).unwrap();\n-        return;\n-    }\n-    if env::var(\"UPDATE_EXPECT\").is_ok() {\n-        println!(\"rewriting {}\", pretty_path.display());\n-        fs::write(path, actual).unwrap();\n-        return;\n-    }\n-    assert_eq_text!(expected, actual, \"file: {}\", pretty_path.display());\n-}\n-\n /// Read file and normalize newlines.\n ///\n /// `rustc` seems to always normalize `\\r\\n` newlines to `\\n`:"}]}