{"sha": "6bbb0792ea7cf0322b896f1cf2a9d57b418ef106", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYmIwNzkyZWE3Y2YwMzIyYjg5NmYxY2YyYTlkNTdiNDE4ZWYxMDY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-07T18:07:33Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-12T14:33:17Z"}, "message": "Use boxed slice instead of BTreeSet.", "tree": {"sha": "f0b3f1e3b269cb63f05522cb9f2ffbb4d96d76c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0b3f1e3b269cb63f05522cb9f2ffbb4d96d76c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bbb0792ea7cf0322b896f1cf2a9d57b418ef106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bbb0792ea7cf0322b896f1cf2a9d57b418ef106", "html_url": "https://github.com/rust-lang/rust/commit/6bbb0792ea7cf0322b896f1cf2a9d57b418ef106", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bbb0792ea7cf0322b896f1cf2a9d57b418ef106/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa6f5adf73a6e9a2b73fd6792cab475e8108951d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6f5adf73a6e9a2b73fd6792cab475e8108951d", "html_url": "https://github.com/rust-lang/rust/commit/fa6f5adf73a6e9a2b73fd6792cab475e8108951d"}], "stats": {"total": 96, "additions": 51, "deletions": 45}, "files": [{"sha": "ef46771cd0fb9ecf2c866b851012313471782e74", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/6bbb0792ea7cf0322b896f1cf2a9d57b418ef106/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bbb0792ea7cf0322b896f1cf2a9d57b418ef106/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=6bbb0792ea7cf0322b896f1cf2a9d57b418ef106", "patch": "@@ -20,7 +20,7 @@ use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n-use std::collections::BTreeSet;\n+use std::collections::VecDeque;\n \n pub mod blocks;\n mod collector;\n@@ -543,28 +543,28 @@ impl<'hir> Map<'hir> {\n     {\n         let module = self.tcx.hir_module_items(module);\n \n-        for id in &module.items {\n+        for id in module.items.iter() {\n             visitor.visit_item(self.item(*id));\n         }\n \n-        for id in &module.trait_items {\n+        for id in module.trait_items.iter() {\n             visitor.visit_trait_item(self.trait_item(*id));\n         }\n \n-        for id in &module.impl_items {\n+        for id in module.impl_items.iter() {\n             visitor.visit_impl_item(self.impl_item(*id));\n         }\n \n-        for id in &module.foreign_items {\n+        for id in module.foreign_items.iter() {\n             visitor.visit_foreign_item(self.foreign_item(*id));\n         }\n     }\n \n     pub fn for_each_module(&self, f: impl Fn(LocalDefId)) {\n-        let mut queue = BTreeSet::default();\n-        queue.insert(CRATE_DEF_ID);\n+        let mut queue = VecDeque::new();\n+        queue.push_back(CRATE_DEF_ID);\n \n-        while let Some(id) = queue.pop_first() {\n+        while let Some(id) = queue.pop_front() {\n             f(id);\n             let items = self.tcx.hir_module_items(id);\n             queue.extend(items.submodules.iter().copied())\n@@ -581,7 +581,7 @@ impl<'hir> Map<'hir> {\n         {\n             (*f)(module);\n             let items = tcx.hir_module_items(module);\n-            par_iter(&items.submodules).for_each(|&sm| par_iter_submodules(tcx, sm, f));\n+            par_iter(&items.submodules[..]).for_each(|&sm| par_iter_submodules(tcx, sm, f));\n         }\n     }\n \n@@ -1149,27 +1149,33 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {\n pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> ModuleItems {\n     let mut collector = ModuleCollector {\n         tcx,\n-        submodules: BTreeSet::default(),\n-        items: BTreeSet::default(),\n-        trait_items: BTreeSet::default(),\n-        impl_items: BTreeSet::default(),\n-        foreign_items: BTreeSet::default(),\n+        submodules: Vec::default(),\n+        items: Vec::default(),\n+        trait_items: Vec::default(),\n+        impl_items: Vec::default(),\n+        foreign_items: Vec::default(),\n     };\n \n     let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);\n     collector.visit_mod(hir_mod, span, hir_id);\n \n     let ModuleCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =\n         collector;\n-    return ModuleItems { submodules, items, trait_items, impl_items, foreign_items };\n+    return ModuleItems {\n+        submodules: submodules.into_boxed_slice(),\n+        items: items.into_boxed_slice(),\n+        trait_items: trait_items.into_boxed_slice(),\n+        impl_items: impl_items.into_boxed_slice(),\n+        foreign_items: foreign_items.into_boxed_slice(),\n+    };\n \n     struct ModuleCollector<'tcx> {\n         tcx: TyCtxt<'tcx>,\n-        submodules: BTreeSet<LocalDefId>,\n-        items: BTreeSet<ItemId>,\n-        trait_items: BTreeSet<TraitItemId>,\n-        impl_items: BTreeSet<ImplItemId>,\n-        foreign_items: BTreeSet<ForeignItemId>,\n+        submodules: Vec<LocalDefId>,\n+        items: Vec<ItemId>,\n+        trait_items: Vec<TraitItemId>,\n+        impl_items: Vec<ImplItemId>,\n+        foreign_items: Vec<ForeignItemId>,\n     }\n \n     impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {\n@@ -1180,27 +1186,27 @@ pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> Module\n         }\n \n         fn visit_item(&mut self, item: &'hir Item<'hir>) {\n-            self.items.insert(item.item_id());\n+            self.items.push(item.item_id());\n             if let ItemKind::Mod(..) = item.kind {\n                 // If this declares another module, do not recurse inside it.\n-                self.submodules.insert(item.def_id);\n+                self.submodules.push(item.def_id);\n             } else {\n                 intravisit::walk_item(self, item)\n             }\n         }\n \n         fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {\n-            self.trait_items.insert(item.trait_item_id());\n+            self.trait_items.push(item.trait_item_id());\n             intravisit::walk_trait_item(self, item)\n         }\n \n         fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {\n-            self.impl_items.insert(item.impl_item_id());\n+            self.impl_items.push(item.impl_item_id());\n             intravisit::walk_impl_item(self, item)\n         }\n \n         fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {\n-            self.foreign_items.insert(item.foreign_item_id());\n+            self.foreign_items.push(item.foreign_item_id());\n             intravisit::walk_foreign_item(self, item)\n         }\n     }"}, {"sha": "de4b75f9463c3659a0841aa586bc2ddbbad1db54", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6bbb0792ea7cf0322b896f1cf2a9d57b418ef106/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bbb0792ea7cf0322b896f1cf2a9d57b418ef106/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=6bbb0792ea7cf0322b896f1cf2a9d57b418ef106", "patch": "@@ -17,7 +17,7 @@ use rustc_hir::def_id::LocalDefId;\n use rustc_hir::*;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_span::DUMMY_SP;\n-use std::collections::{BTreeMap, BTreeSet};\n+use std::collections::BTreeMap;\n \n /// Result of HIR indexing.\n #[derive(Debug)]\n@@ -121,15 +121,15 @@ impl<'tcx> AttributeMap<'tcx> {\n     }\n }\n \n-#[derive(Default, Encodable, Debug, HashStable)]\n+/// Gather the LocalDefId for each item-like within a module, including items contained within\n+/// bodies.  The Ids are in visitor order.  This is used to partition a pass between modules.\n+#[derive(Debug, HashStable)]\n pub struct ModuleItems {\n-    // Use BTreeSets here so items are in the same order as in the\n-    // list of all items in Crate\n-    submodules: BTreeSet<LocalDefId>,\n-    items: BTreeSet<ItemId>,\n-    trait_items: BTreeSet<TraitItemId>,\n-    impl_items: BTreeSet<ImplItemId>,\n-    foreign_items: BTreeSet<ForeignItemId>,\n+    submodules: Box<[LocalDefId]>,\n+    items: Box<[ItemId]>,\n+    trait_items: Box<[TraitItemId]>,\n+    impl_items: Box<[ImplItemId]>,\n+    foreign_items: Box<[ForeignItemId]>,\n }\n \n impl<'tcx> TyCtxt<'tcx> {"}, {"sha": "e18d725faefea722f2073e3230fb8fc935bcccf6", "filename": "src/test/ui/lifetimes/undeclared-lifetime-used-in-debug-macro-issue-70152.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6bbb0792ea7cf0322b896f1cf2a9d57b418ef106/src%2Ftest%2Fui%2Flifetimes%2Fundeclared-lifetime-used-in-debug-macro-issue-70152.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bbb0792ea7cf0322b896f1cf2a9d57b418ef106/src%2Ftest%2Fui%2Flifetimes%2Fundeclared-lifetime-used-in-debug-macro-issue-70152.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fundeclared-lifetime-used-in-debug-macro-issue-70152.stderr?ref=6bbb0792ea7cf0322b896f1cf2a9d57b418ef106", "patch": "@@ -8,6 +8,17 @@ LL |     a: &'b str,\n    |\n    = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n \n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/undeclared-lifetime-used-in-debug-macro-issue-70152.rs:3:9\n+   |\n+LL | #[derive(Eq, PartialEq)]\n+   |          -- lifetime `'b` is missing in item created through this procedural macro\n+LL | struct Test {\n+LL |     a: &'b str,\n+   |         ^^ undeclared lifetime\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+\n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/undeclared-lifetime-used-in-debug-macro-issue-70152.rs:13:13\n    |\n@@ -24,17 +35,6 @@ help: consider introducing lifetime `'b` here\n LL |     fn foo<'b>(&'b self) {}\n    |           ++++\n \n-error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/undeclared-lifetime-used-in-debug-macro-issue-70152.rs:3:9\n-   |\n-LL | #[derive(Eq, PartialEq)]\n-   |          -- lifetime `'b` is missing in item created through this procedural macro\n-LL | struct Test {\n-LL |     a: &'b str,\n-   |         ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n-\n error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0261`."}]}