{"sha": "0f529f0f49f4dd404b78e605398531c96f220fc5", "node_id": "C_kwDOAAsO6NoAKDBmNTI5ZjBmNDlmNGRkNDA0Yjc4ZTYwNTM5ODUzMWM5NmYyMjBmYzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-13T18:46:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-13T18:46:35Z"}, "message": "Auto merge of #102813 - Akida31:issue-64915/simpler_diagnostic_when_passing_arg_to_closure_and_missing_borrow, r=estebank\n\nSimpler diagnostic when passing arg to closure and missing borrow\n\nfixes #64915\n\nI followed roughly the instructions and the older PR #76362.\nThe number of references for the expected and the found types will be compared and depending on which has more the diagnostic will be emitted.\n\nI'm not quite sure if my approach with the many `span_bug!`s is good, it could lead to some ICEs. Would it be better if  those errors are ignored?\n\nAs far as I know the following code works similarly but in a different context. Is this probably reusable since it looks like it would emit better diagnostics?\nhttps://github.com/rust-lang/rust/blob/a688a0305fad9219505a8f2576446510601bafe8/compiler/rustc_hir_analysis/src/check/demand.rs#L713-L1061\n\nWhen running the tests locally, a codegen test failed. Is there something I can/ should do about that?\n\nIf you have some improvements/ corrections please say so and I will happily include them.\n\nr? `@estebank` (as you added the mentoring instructions to the issue)", "tree": {"sha": "89622414130b3793f214fc25dd77051c5bc467ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89622414130b3793f214fc25dd77051c5bc467ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f529f0f49f4dd404b78e605398531c96f220fc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f529f0f49f4dd404b78e605398531c96f220fc5", "html_url": "https://github.com/rust-lang/rust/commit/0f529f0f49f4dd404b78e605398531c96f220fc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f529f0f49f4dd404b78e605398531c96f220fc5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa5b179599427ef233c4e47db8dac6edae22b4f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa5b179599427ef233c4e47db8dac6edae22b4f8", "html_url": "https://github.com/rust-lang/rust/commit/aa5b179599427ef233c4e47db8dac6edae22b4f8"}, {"sha": "05bc2513ef55a3b71c7ccbda41f07be9f10f3a7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/05bc2513ef55a3b71c7ccbda41f07be9f10f3a7f", "html_url": "https://github.com/rust-lang/rust/commit/05bc2513ef55a3b71c7ccbda41f07be9f10f3a7f"}], "stats": {"total": 151, "additions": 137, "deletions": 14}, "files": [{"sha": "da6244acb3151eed4629278ba00ede3d4132da4e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f529f0f49f4dd404b78e605398531c96f220fc5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f529f0f49f4dd404b78e605398531c96f220fc5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=0f529f0f49f4dd404b78e605398531c96f220fc5", "patch": "@@ -1234,6 +1234,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     _ => None,\n                 };\n \n+                let found_node = found_did.and_then(|did| self.tcx.hir().get_if_local(did));\n                 let found_span = found_did.and_then(|did| self.tcx.hir().span_if_local(did));\n \n                 if self.reported_closure_mismatch.borrow().contains(&(span, found_span)) {\n@@ -1287,6 +1288,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         found_trait_ref,\n                         expected_trait_ref,\n                         obligation.cause.code(),\n+                        found_node,\n                     )\n                 } else {\n                     let (closure_span, closure_arg_span, found) = found_did"}, {"sha": "6f79ca078d7bffc6f6201b6a7e4642cb5672ef20", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/0f529f0f49f4dd404b78e605398531c96f220fc5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f529f0f49f4dd404b78e605398531c96f220fc5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=0f529f0f49f4dd404b78e605398531c96f220fc5", "patch": "@@ -1,4 +1,5 @@\n // ignore-tidy-filelength\n+\n use super::{DefIdOrName, Obligation, ObligationCause, ObligationCauseCode, PredicateObligation};\n \n use crate::autoderef::Autoderef;\n@@ -258,6 +259,7 @@ pub trait TypeErrCtxtExt<'tcx> {\n         found: ty::PolyTraitRef<'tcx>,\n         expected: ty::PolyTraitRef<'tcx>,\n         cause: &ObligationCauseCode<'tcx>,\n+        found_node: Option<Node<'_>>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>;\n \n     fn note_conflicting_closure_bounds(\n@@ -1695,6 +1697,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         found: ty::PolyTraitRef<'tcx>,\n         expected: ty::PolyTraitRef<'tcx>,\n         cause: &ObligationCauseCode<'tcx>,\n+        found_node: Option<Node<'_>>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         pub(crate) fn build_fn_sig_ty<'tcx>(\n             infcx: &InferCtxt<'tcx>,\n@@ -1756,6 +1759,10 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n         self.note_conflicting_closure_bounds(cause, &mut err);\n \n+        if let Some(found_node) = found_node {\n+            hint_missing_borrow(span, found_span, found, expected, found_node, &mut err);\n+        }\n+\n         err\n     }\n \n@@ -3384,6 +3391,78 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     }\n }\n \n+/// Add a hint to add a missing borrow or remove an unnecessary one.\n+fn hint_missing_borrow<'tcx>(\n+    span: Span,\n+    found_span: Span,\n+    found: Ty<'tcx>,\n+    expected: Ty<'tcx>,\n+    found_node: Node<'_>,\n+    err: &mut Diagnostic,\n+) {\n+    let found_args = match found.kind() {\n+        ty::FnPtr(f) => f.inputs().skip_binder().iter(),\n+        kind => {\n+            span_bug!(span, \"found was converted to a FnPtr above but is now {:?}\", kind)\n+        }\n+    };\n+    let expected_args = match expected.kind() {\n+        ty::FnPtr(f) => f.inputs().skip_binder().iter(),\n+        kind => {\n+            span_bug!(span, \"expected was converted to a FnPtr above but is now {:?}\", kind)\n+        }\n+    };\n+\n+    let fn_decl = found_node\n+        .fn_decl()\n+        .unwrap_or_else(|| span_bug!(found_span, \"found node must be a function\"));\n+\n+    let arg_spans = fn_decl.inputs.iter().map(|ty| ty.span);\n+\n+    fn get_deref_type_and_refs<'tcx>(mut ty: Ty<'tcx>) -> (Ty<'tcx>, usize) {\n+        let mut refs = 0;\n+\n+        while let ty::Ref(_, new_ty, _) = ty.kind() {\n+            ty = *new_ty;\n+            refs += 1;\n+        }\n+\n+        (ty, refs)\n+    }\n+\n+    let mut to_borrow = Vec::new();\n+    let mut remove_borrow = Vec::new();\n+\n+    for ((found_arg, expected_arg), arg_span) in found_args.zip(expected_args).zip(arg_spans) {\n+        let (found_ty, found_refs) = get_deref_type_and_refs(*found_arg);\n+        let (expected_ty, expected_refs) = get_deref_type_and_refs(*expected_arg);\n+\n+        if found_ty == expected_ty {\n+            if found_refs < expected_refs {\n+                to_borrow.push((arg_span, expected_arg.to_string()));\n+            } else if found_refs > expected_refs {\n+                remove_borrow.push((arg_span, expected_arg.to_string()));\n+            }\n+        }\n+    }\n+\n+    if !to_borrow.is_empty() {\n+        err.multipart_suggestion(\n+            \"consider borrowing the argument\",\n+            to_borrow,\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+\n+    if !remove_borrow.is_empty() {\n+        err.multipart_suggestion(\n+            \"do not borrow the argument\",\n+            remove_borrow,\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+}\n+\n /// Collect all the returned expressions within the input expression.\n /// Used to point at the return spans when we want to suggest some change to them.\n #[derive(Default)]"}, {"sha": "afb7f8fea92a1fae2aa6c205b9e55849c3720ddb", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0f529f0f49f4dd404b78e605398531c96f220fc5/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f529f0f49f4dd404b78e605398531c96f220fc5/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=0f529f0f49f4dd404b78e605398531c96f220fc5", "patch": "@@ -13,6 +13,10 @@ note: required by a bound in `f1`\n    |\n LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n    |                         ^^^^^^^^^^^^ required by this bound in `f1`\n+help: consider borrowing the argument\n+   |\n+LL |     f1(|_: &(), _: &()| {});\n+   |            ~~~     ~~~\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:3:5\n@@ -29,6 +33,10 @@ note: required by a bound in `f2`\n    |\n LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `f2`\n+help: consider borrowing the argument\n+   |\n+LL |     f2(|_: &'a (), _: &()| {});\n+   |            ~~~~~~     ~~~\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n@@ -45,6 +53,10 @@ note: required by a bound in `f3`\n    |\n LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n    |                             ^^^^^^^^^^^^^^^ required by this bound in `f3`\n+help: consider borrowing the argument\n+   |\n+LL |     f3(|_: &(), _: &()| {});\n+   |            ~~~     ~~~\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:5:5\n@@ -61,6 +73,10 @@ note: required by a bound in `f4`\n    |\n LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `f4`\n+help: consider borrowing the argument\n+   |\n+LL |     f4(|_: &(), _: &'r ()| {});\n+   |            ~~~     ~~~~~~\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n@@ -77,13 +93,19 @@ note: required by a bound in `f5`\n    |\n LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `f5`\n+help: consider borrowing the argument\n+   |\n+LL |     f5(|_: &'r (), _: &'r ()| {});\n+   |            ~~~~~~     ~~~~~~\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:7:5\n    |\n LL |     g1(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature defined here\n-   |     |\n+   |     ^^ --------------\n+   |     |  |   |\n+   |     |  |   help: consider borrowing the argument: `&()`\n+   |     |  found signature defined here\n    |     expected due to this\n    |\n    = note: expected closure signature `for<'a> fn(&'a (), Box<(dyn for<'a> Fn(&'a ()) + 'static)>) -> _`\n@@ -98,8 +120,10 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n    |\n LL |     g2(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature defined here\n-   |     |\n+   |     ^^ --------------\n+   |     |  |   |\n+   |     |  |   help: consider borrowing the argument: `&()`\n+   |     |  found signature defined here\n    |     expected due to this\n    |\n    = note: expected closure signature `for<'a> fn(&'a (), for<'a> fn(&'a ())) -> _`\n@@ -114,8 +138,10 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:9:5\n    |\n LL |     g3(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature defined here\n-   |     |\n+   |     ^^ --------------\n+   |     |  |   |\n+   |     |  |   help: consider borrowing the argument: `&'s ()`\n+   |     |  found signature defined here\n    |     expected due to this\n    |\n    = note: expected closure signature `for<'s> fn(&'s (), Box<(dyn for<'a> Fn(&'a ()) + 'static)>) -> _`\n@@ -130,8 +156,10 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n    |\n LL |     g4(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature defined here\n-   |     |\n+   |     ^^ --------------\n+   |     |  |   |\n+   |     |  |   help: consider borrowing the argument: `&()`\n+   |     |  found signature defined here\n    |     expected due to this\n    |\n    = note: expected closure signature `for<'a> fn(&'a (), for<'r> fn(&'r ())) -> _`\n@@ -157,6 +185,10 @@ note: required by a bound in `h1`\n    |\n LL | fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `h1`\n+help: consider borrowing the argument\n+   |\n+LL |     h1(|_: &(), _: (), _: &(), _: ()| {});\n+   |            ~~~            ~~~\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n@@ -173,6 +205,10 @@ note: required by a bound in `h2`\n    |\n LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(), &())) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `h2`\n+help: consider borrowing the argument\n+   |\n+LL |     h2(|_: &(), _: (), _: &'t0 (), _: ()| {});\n+   |            ~~~            ~~~~~~~\n \n error: aborting due to 11 previous errors\n "}, {"sha": "da26302c9d8a48219e8845a02c3820b764b95d4d", "filename": "src/test/ui/closures/multiple-fn-bounds.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f529f0f49f4dd404b78e605398531c96f220fc5/src%2Ftest%2Fui%2Fclosures%2Fmultiple-fn-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f529f0f49f4dd404b78e605398531c96f220fc5/src%2Ftest%2Fui%2Fclosures%2Fmultiple-fn-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fmultiple-fn-bounds.stderr?ref=0f529f0f49f4dd404b78e605398531c96f220fc5", "patch": "@@ -2,8 +2,10 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/multiple-fn-bounds.rs:10:5\n    |\n LL |     foo(move |x| v);\n-   |     ^^^ -------- found signature defined here\n-   |     |\n+   |     ^^^ --------\n+   |     |   |     |\n+   |     |   |     help: do not borrow the argument: `char`\n+   |     |   found signature defined here\n    |     expected due to this\n    |\n    = note: expected closure signature `fn(char) -> _`"}, {"sha": "961ef32cbd3d911460313d17fc00562aed5f5505", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f529f0f49f4dd404b78e605398531c96f220fc5/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f529f0f49f4dd404b78e605398531c96f220fc5/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=0f529f0f49f4dd404b78e605398531c96f220fc5", "patch": "@@ -2,8 +2,10 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:3:14\n    |\n LL |     a.iter().map(|_: (u32, u32)| 45);\n-   |              ^^^ --------------- found signature defined here\n-   |              |\n+   |              ^^^ ---------------\n+   |              |   |   |\n+   |              |   |   help: consider borrowing the argument: `&(u32, u32)`\n+   |              |   found signature defined here\n    |              expected due to this\n    |\n    = note: expected closure signature `fn(&(u32, u32)) -> _`"}, {"sha": "1a696752e87bd5e6299b61d433f902b6ffee0b53", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f529f0f49f4dd404b78e605398531c96f220fc5/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f529f0f49f4dd404b78e605398531c96f220fc5/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=0f529f0f49f4dd404b78e605398531c96f220fc5", "patch": "@@ -2,8 +2,10 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/issue-36053-2.rs:7:32\n    |\n LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n-   |                                ^^^^^^ --------- found signature defined here\n-   |                                |\n+   |                                ^^^^^^ ---------\n+   |                                |      |   |\n+   |                                |      |   help: consider borrowing the argument: `&&str`\n+   |                                |      found signature defined here\n    |                                expected due to this\n    |\n    = note: expected closure signature `for<'a> fn(&'a &str) -> _`"}]}