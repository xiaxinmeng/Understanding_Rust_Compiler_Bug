{"sha": "986d62e239e9c16f07959347e5520113b40861a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NmQ2MmUyMzllOWMxNmYwNzk1OTM0N2U1NTIwMTEzYjQwODYxYTU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-13T22:09:38Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-13T22:09:38Z"}, "message": "rollup merge of #17970 : nodakai/cleanup-warnings", "tree": {"sha": "40f71fc260d8cba96d2f16ca2c29667e1ac3f2df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40f71fc260d8cba96d2f16ca2c29667e1ac3f2df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/986d62e239e9c16f07959347e5520113b40861a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/986d62e239e9c16f07959347e5520113b40861a5", "html_url": "https://github.com/rust-lang/rust/commit/986d62e239e9c16f07959347e5520113b40861a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/986d62e239e9c16f07959347e5520113b40861a5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dd4cd57fe032e24799e007636989d44f579438f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dd4cd57fe032e24799e007636989d44f579438f", "html_url": "https://github.com/rust-lang/rust/commit/0dd4cd57fe032e24799e007636989d44f579438f"}, {"sha": "f27ad3d3e99ce679f782607971a9f6f18befa503", "url": "https://api.github.com/repos/rust-lang/rust/commits/f27ad3d3e99ce679f782607971a9f6f18befa503", "html_url": "https://github.com/rust-lang/rust/commit/f27ad3d3e99ce679f782607971a9f6f18befa503"}], "stats": {"total": 485, "additions": 264, "deletions": 221}, "files": [{"sha": "ff6b1b153332494f247dc42e5bf9fc95ec1fe790", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -947,15 +947,12 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n         String::from_chars(c.as_slice())\n     }\n \n-    #[cfg(target_os = \"windows\")]\n+    #[cfg(windows)]\n     fn prefix_matches( line : &str, prefix : &str ) -> bool {\n         to_lower(line).as_slice().starts_with(to_lower(prefix).as_slice())\n     }\n \n-    #[cfg(any(target_os = \"linux\",\n-              target_os = \"macos\",\n-              target_os = \"freebsd\",\n-              target_os = \"dragonfly\"))]\n+    #[cfg(unix)]\n     fn prefix_matches( line : &str, prefix : &str ) -> bool {\n         line.starts_with( prefix )\n     }\n@@ -1356,24 +1353,21 @@ fn program_output(config: &Config, testfile: &Path, lib_path: &str, prog: String\n }\n \n // Linux and mac don't require adjusting the library search path\n-#[cfg(any(target_os = \"linux\",\n-          target_os = \"macos\",\n-          target_os = \"freebsd\",\n-          target_os = \"dragonfly\"))]\n+#[cfg(unix)]\n fn make_cmdline(_libpath: &str, prog: &str, args: &[String]) -> String {\n     format!(\"{} {}\", prog, args.connect(\" \"))\n }\n \n-#[cfg(target_os = \"windows\")]\n+#[cfg(windows)]\n fn make_cmdline(libpath: &str, prog: &str, args: &[String]) -> String {\n-    format!(\"{} {} {}\", lib_path_cmd_prefix(libpath), prog, args.connect(\" \"))\n-}\n \n-// Build the LD_LIBRARY_PATH variable as it would be seen on the command line\n-// for diagnostic purposes\n-#[cfg(target_os = \"windows\")]\n-fn lib_path_cmd_prefix(path: &str) -> String {\n-    format!(\"{}=\\\"{}\\\"\", util::lib_path_env_var(), util::make_new_path(path))\n+    // Build the LD_LIBRARY_PATH variable as it would be seen on the command line\n+    // for diagnostic purposes\n+    fn lib_path_cmd_prefix(path: &str) -> String {\n+        format!(\"{}=\\\"{}\\\"\", util::lib_path_env_var(), util::make_new_path(path))\n+    }\n+\n+    format!(\"{} {} {}\", lib_path_cmd_prefix(libpath), prog, args.connect(\" \"))\n }\n \n fn dump_output(config: &Config, testfile: &Path, out: &str, err: &str) {"}, {"sha": "a2483f23534e6950d58da254fb8c6a4aba7f22f1", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -276,7 +276,6 @@ impl<T: Sync + Send> Drop for Weak<T> {\n #[allow(experimental)]\n mod tests {\n     use std::clone::Clone;\n-    use std::collections::MutableSeq;\n     use std::comm::channel;\n     use std::mem::drop;\n     use std::ops::Drop;"}, {"sha": "9ead4cbcfd0d88a2f56be36fd210cb96d73309d5", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -2659,7 +2659,7 @@ mod tests {\n         let mut r = rng();\n         let mut bitv = Bitv::with_capacity(BENCH_BITS, false);\n         b.iter(|| {\n-            for i in range(0u, 100) {\n+            for _ in range(0u, 100) {\n                 bitv.set((r.next_u32() as uint) % BENCH_BITS, r.gen());\n             }\n             &bitv"}, {"sha": "088784070e715dc7aaf7df2954944d864e72ee49", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -890,13 +890,13 @@ mod tests {\n         }\n \n         let v = vec![1i,2,3,4,5];\n-        let u = vec![9i,8,1,2,3,4,5];\n+        let mut u = vec![9i,8,1,2,3,4,5];\n         let mut m = list_from(v.as_slice());\n         m.prepend(list_from(u.as_slice()));\n         check_links(&m);\n-        let sum = u.append(v.as_slice());\n-        assert_eq!(sum.len(), m.len());\n-        for elt in sum.into_iter() {\n+        u.extend(v.as_slice().iter().map(|&b| b));\n+        assert_eq!(u.len(), m.len());\n+        for elt in u.into_iter() {\n             assert_eq!(m.pop_front(), Some(elt))\n         }\n     }"}, {"sha": "4d8e67f6ac8f97cff5617c2bb6e8b21a97fcef44", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -611,10 +611,10 @@ mod tests {\n         assert_eq!(deq.len(), 3);\n         deq.push_front(a.clone());\n         assert_eq!(deq.len(), 4);\n-        assert_eq!((*deq.get(0)).clone(), a.clone());\n-        assert_eq!((*deq.get(1)).clone(), b.clone());\n-        assert_eq!((*deq.get(2)).clone(), c.clone());\n-        assert_eq!((*deq.get(3)).clone(), d.clone());\n+        assert_eq!(deq[0].clone(), a.clone());\n+        assert_eq!(deq[1].clone(), b.clone());\n+        assert_eq!(deq[2].clone(), c.clone());\n+        assert_eq!(deq[3].clone(), d.clone());\n     }\n \n     #[test]\n@@ -626,7 +626,7 @@ mod tests {\n         assert_eq!(deq.len(), 66);\n \n         for i in range(0u, 66) {\n-            assert_eq!(*deq.get(i), 65 - i);\n+            assert_eq!(deq[i], 65 - i);\n         }\n \n         let mut deq = RingBuf::new();\n@@ -635,7 +635,7 @@ mod tests {\n         }\n \n         for i in range(0u, 66) {\n-            assert_eq!(*deq.get(i), i);\n+            assert_eq!(deq[i], i);\n         }\n     }\n "}, {"sha": "f49371b8e88628bd11c2a2c7597c355e849916db", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -883,6 +883,7 @@ mod tests {\n     use std::slice::{AsSlice, ImmutableSlice};\n     use string::String;\n     use vec::Vec;\n+    use slice::CloneableVector;\n \n     use unicode::char::UnicodeChar;\n \n@@ -1504,7 +1505,7 @@ mod tests {\n     fn vec_str_conversions() {\n         let s1: String = String::from_str(\"All mimsy were the borogoves\");\n \n-        let v: Vec<u8> = Vec::from_slice(s1.as_bytes());\n+        let v: Vec<u8> = s1.as_bytes().to_vec();\n         let s2: String = String::from_str(from_utf8(v.as_slice()).unwrap());\n         let mut i: uint = 0u;\n         let n1: uint = s1.len();"}, {"sha": "061064ff803d564ab6ba0fcb8d7bc500089842a8", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -1036,6 +1036,7 @@ mod tests {\n     use str::{Str, StrSlice, Owned};\n     use super::{as_string, String};\n     use vec::Vec;\n+    use slice::CloneableVector;\n \n     #[test]\n     fn test_as_string() {\n@@ -1051,15 +1052,15 @@ mod tests {\n \n     #[test]\n     fn test_from_utf8() {\n-        let xs = Vec::from_slice(b\"hello\");\n+        let xs = b\"hello\".to_vec();\n         assert_eq!(String::from_utf8(xs), Ok(String::from_str(\"hello\")));\n \n-        let xs = Vec::from_slice(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".as_bytes());\n+        let xs = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".as_bytes().to_vec();\n         assert_eq!(String::from_utf8(xs), Ok(String::from_str(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\")));\n \n-        let xs = Vec::from_slice(b\"hello\\xFF\");\n+        let xs = b\"hello\\xFF\".to_vec();\n         assert_eq!(String::from_utf8(xs),\n-                   Err(Vec::from_slice(b\"hello\\xFF\")));\n+                   Err(b\"hello\\xFF\".to_vec()));\n     }\n \n     #[test]\n@@ -1211,7 +1212,8 @@ mod tests {\n     fn test_push_bytes() {\n         let mut s = String::from_str(\"ABC\");\n         unsafe {\n-            s.push_bytes([b'D']);\n+            let mv = s.as_mut_vec();\n+            mv.push_all([b'D']);\n         }\n         assert_eq!(s.as_slice(), \"ABCD\");\n     }\n@@ -1239,17 +1241,18 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_pop_char() {\n+    fn test_pop() {\n         let mut data = String::from_str(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eb\u00a2\u20ac\ud852\udf62\");\n-        assert_eq!(data.pop_char().unwrap(), '\ud852\udf62'); // 4 bytes\n-        assert_eq!(data.pop_char().unwrap(), '\u20ac'); // 3 bytes\n-        assert_eq!(data.pop_char().unwrap(), '\u00a2'); // 2 bytes\n-        assert_eq!(data.pop_char().unwrap(), 'b'); // 1 bytes\n-        assert_eq!(data.pop_char().unwrap(), '\u534e');\n+        assert_eq!(data.pop().unwrap(), '\ud852\udf62'); // 4 bytes\n+        assert_eq!(data.pop().unwrap(), '\u20ac'); // 3 bytes\n+        assert_eq!(data.pop().unwrap(), '\u00a2'); // 2 bytes\n+        assert_eq!(data.pop().unwrap(), 'b'); // 1 bytes\n+        assert_eq!(data.pop().unwrap(), '\u534e');\n         assert_eq!(data.as_slice(), \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\");\n     }\n \n     #[test]\n+    #[allow(deprecated)] // use remove(0) instead\n     fn test_shift_char() {\n         let mut data = String::from_str(\"\ud852\udf62\u20ac\u00a2b\u534e\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\");\n         assert_eq!(data.shift_char().unwrap(), '\ud852\udf62'); // 4 bytes"}, {"sha": "c714e3935706cbf8a891565868ca7beea44c1b9f", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -2266,8 +2266,8 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_mut_slice_from() {\n-        let mut values = Vec::from_slice([1u8,2,3,4,5]);\n+    fn test_slice_from_mut() {\n+        let mut values = vec![1u8,2,3,4,5];\n         {\n             let slice = values.slice_from_mut(2);\n             assert!(slice == [3, 4, 5]);\n@@ -2280,8 +2280,8 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_mut_slice_to() {\n-        let mut values = Vec::from_slice([1u8,2,3,4,5]);\n+    fn test_slice_to_mut() {\n+        let mut values = vec![1u8,2,3,4,5];\n         {\n             let slice = values.slice_to_mut(2);\n             assert!(slice == [1, 2]);\n@@ -2294,8 +2294,8 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_mut_split_at() {\n-        let mut values = Vec::from_slice([1u8,2,3,4,5]);\n+    fn test_split_at_mut() {\n+        let mut values = vec![1u8,2,3,4,5];\n         {\n             let (left, right) = values.split_at_mut(2);\n             {\n@@ -2315,7 +2315,7 @@ mod tests {\n             }\n         }\n \n-        assert!(values == Vec::from_slice([2u8, 3, 5, 6, 7]));\n+        assert!(values == vec![2u8, 3, 5, 6, 7]);\n     }\n \n     #[test]\n@@ -2355,16 +2355,16 @@ mod tests {\n \n     #[test]\n     fn test_grow_fn() {\n-        let mut v = Vec::from_slice([0u, 1]);\n+        let mut v = vec![0u, 1];\n         v.grow_fn(3, |i| i);\n-        assert!(v == Vec::from_slice([0u, 1, 0, 1, 2]));\n+        assert!(v == vec![0u, 1, 0, 1, 2]);\n     }\n \n     #[test]\n     fn test_retain() {\n-        let mut vec = Vec::from_slice([1u, 2, 3, 4]);\n+        let mut vec = vec![1u, 2, 3, 4];\n         vec.retain(|x| x%2 == 0);\n-        assert!(vec == Vec::from_slice([2u, 4]));\n+        assert!(vec == vec![2u, 4]);\n     }\n \n     #[test]\n@@ -2567,32 +2567,32 @@ mod tests {\n \n     #[test]\n     fn test_move_items() {\n-        let mut vec = vec!(1i, 2, 3);\n-        let mut vec2 : Vec<int> = vec!();\n+        let vec = vec![1, 2, 3];\n+        let mut vec2 : Vec<i32> = vec![];\n         for i in vec.into_iter() {\n             vec2.push(i);\n         }\n-        assert!(vec2 == vec!(1i, 2, 3));\n+        assert!(vec2 == vec![1, 2, 3]);\n     }\n \n     #[test]\n     fn test_move_items_reverse() {\n-        let mut vec = vec!(1i, 2, 3);\n-        let mut vec2 : Vec<int> = vec!();\n+        let vec = vec![1, 2, 3];\n+        let mut vec2 : Vec<i32> = vec![];\n         for i in vec.into_iter().rev() {\n             vec2.push(i);\n         }\n-        assert!(vec2 == vec!(3i, 2, 1));\n+        assert!(vec2 == vec![3, 2, 1]);\n     }\n \n     #[test]\n     fn test_move_items_zero_sized() {\n-        let mut vec = vec!((), (), ());\n-        let mut vec2 : Vec<()> = vec!();\n+        let vec = vec![(), (), ()];\n+        let mut vec2 : Vec<()> = vec![];\n         for i in vec.into_iter() {\n             vec2.push(i);\n         }\n-        assert!(vec2 == vec!((), (), ()));\n+        assert!(vec2 == vec![(), (), ()]);\n     }\n \n     #[test]\n@@ -2707,7 +2707,7 @@ mod tests {\n         b.bytes = src_len as u64;\n \n         b.iter(|| {\n-            let dst = Vec::from_slice(src.clone().as_slice());\n+            let dst = src.clone().as_slice().to_vec();\n             assert_eq!(dst.len(), src_len);\n             assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n         });\n@@ -2871,7 +2871,7 @@ mod tests {\n \n         b.iter(|| {\n             let mut dst = dst.clone();\n-            dst.push_all_move(src.clone());\n+            dst.extend(src.clone().into_iter());\n             assert_eq!(dst.len(), dst_len + src_len);\n             assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n         });"}, {"sha": "8807756d01b7ee494a9586a9fbd558502eb1f634", "filename": "src/libcoretest/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibcoretest%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibcoretest%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fchar.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -117,7 +117,7 @@ fn test_is_digit() {\n fn test_escape_default() {\n     fn string(c: char) -> String {\n         let mut result = String::new();\n-        escape_default(c, |c| { result.push_char(c); });\n+        escape_default(c, |c| { result.push(c); });\n         return result;\n     }\n     let s = string('\\n');\n@@ -152,7 +152,7 @@ fn test_escape_default() {\n fn test_escape_unicode() {\n     fn string(c: char) -> String {\n         let mut result = String::new();\n-        escape_unicode(c, |c| { result.push_char(c); });\n+        escape_unicode(c, |c| { result.push(c); });\n         return result;\n     }\n     let s = string('\\x00');"}, {"sha": "476a2b50fcc8130b5f746391440a0c4a9fb4ccd7", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -868,7 +868,7 @@ fn bench_multiple_take(b: &mut Bencher) {\n     let mut it = range(0u, 42).cycle();\n     b.iter(|| {\n         let n = it.next().unwrap();\n-        for m in range(0u, n) {\n+        for _ in range(0u, n) {\n             it.take(it.next().unwrap()).all(|_| true);\n         }\n     });"}, {"sha": "e4dde7c641e1e0c44be074263adbcd46ad723155", "filename": "src/libcoretest/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibcoretest%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibcoretest%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fmem.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -109,7 +109,7 @@ fn test_transmute() {\n     }\n \n     unsafe {\n-        assert!(Vec::from_slice([76u8]) == transmute(\"L\".to_string()));\n+        assert!(vec![76u8] == transmute(\"L\".to_string()));\n     }\n }\n "}, {"sha": "b023833f394746738d3275f29c029f9ec1fa3a70", "filename": "src/libcoretest/result.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibcoretest%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibcoretest%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fresult.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -89,6 +89,7 @@ fn test_collect() {\n }\n \n #[test]\n+#[allow(deprecated)] // we know fold_ is deprecated\n fn test_fold() {\n     assert_eq!(fold_(range(0i, 0)\n                     .map(|_| Ok::<(), ()>(()))),"}, {"sha": "0313c22933cfabb0fc8fcbb7ca45a20530df9ac4", "filename": "src/libglob/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibglob%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibglob%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibglob%2Flib.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -682,7 +682,7 @@ mod test {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))] // FIXME (#9406)\n+    #[cfg_attr(windows, ignore)] // FIXME (#9406)\n     fn test_lots_of_files() {\n         // this is a good test because it touches lots of differently named files\n         glob(\"/*/*/*/*\").skip(10000).next();"}, {"sha": "e21186a5fc8791dcf4798d5516622caa9015819b", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -735,6 +735,20 @@ r#\"digraph single_edge {\n \"#);\n     }\n \n+    #[test]\n+    fn test_some_labelled() {\n+        let labels : Trivial = SomeNodesLabelled(vec![Some(\"A\"), None]);\n+        let result = test_input(LabelledGraph::new(\"test_some_labelled\", labels,\n+                                                   vec![edge(0, 1, \"A-1\")]));\n+        assert_eq!(result.unwrap().as_slice(),\n+r#\"digraph test_some_labelled {\n+    N0[label=\"A\"];\n+    N1[label=\"N1\"];\n+    N0 -> N1[label=\"A-1\"];\n+}\n+\"#);\n+    }\n+\n     #[test]\n     fn single_cyclic_node() {\n         let labels : Trivial = UnlabelledNodes(1);"}, {"sha": "f46d96ffe4a3567558a3857cfebe90d9920cd738", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -1027,7 +1027,6 @@ mod test {\n     use std::rt::task::TaskOpts;\n     use std::rt::task::Task;\n     use std::rt::local::Local;\n-    use std::time::Duration;\n \n     use {TaskState, PoolConfig, SchedPool};\n     use basic;"}, {"sha": "c5d076a70b5823985ad153acd12da4b71dfe03e4", "filename": "src/libnum/integer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibnum%2Finteger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibnum%2Finteger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Finteger.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -462,6 +462,7 @@ macro_rules! impl_integer_for_uint {\n             }\n \n             #[test]\n+            #[allow(type_overflow)]\n             fn test_lcm() {\n                 assert_eq!((1 as $T).lcm(&0), 0 as $T);\n                 assert_eq!((0 as $T).lcm(&1), 0 as $T);"}, {"sha": "b328df1949e0e57ab9e2b608e3671109073b1e64", "filename": "src/librustrt/mutex.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibrustrt%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibrustrt%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fmutex.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -655,19 +655,19 @@ mod test {\n \n     #[test]\n     fn smoke_lock() {\n-        static lock: StaticNativeMutex = NATIVE_MUTEX_INIT;\n+        static LK: StaticNativeMutex = NATIVE_MUTEX_INIT;\n         unsafe {\n-            let _guard = lock.lock();\n+            let _guard = LK.lock();\n         }\n     }\n \n     #[test]\n     fn smoke_cond() {\n-        static lock: StaticNativeMutex = NATIVE_MUTEX_INIT;\n+        static LK: StaticNativeMutex = NATIVE_MUTEX_INIT;\n         unsafe {\n-            let guard = lock.lock();\n+            let guard = LK.lock();\n             let t = Thread::start(proc() {\n-                let guard = lock.lock();\n+                let guard = LK.lock();\n                 guard.signal();\n             });\n             guard.wait();\n@@ -679,25 +679,25 @@ mod test {\n \n     #[test]\n     fn smoke_lock_noguard() {\n-        static lock: StaticNativeMutex = NATIVE_MUTEX_INIT;\n+        static LK: StaticNativeMutex = NATIVE_MUTEX_INIT;\n         unsafe {\n-            lock.lock_noguard();\n-            lock.unlock_noguard();\n+            LK.lock_noguard();\n+            LK.unlock_noguard();\n         }\n     }\n \n     #[test]\n     fn smoke_cond_noguard() {\n-        static lock: StaticNativeMutex = NATIVE_MUTEX_INIT;\n+        static LK: StaticNativeMutex = NATIVE_MUTEX_INIT;\n         unsafe {\n-            lock.lock_noguard();\n+            LK.lock_noguard();\n             let t = Thread::start(proc() {\n-                lock.lock_noguard();\n-                lock.signal_noguard();\n-                lock.unlock_noguard();\n+                LK.lock_noguard();\n+                LK.signal_noguard();\n+                LK.unlock_noguard();\n             });\n-            lock.wait_noguard();\n-            lock.unlock_noguard();\n+            LK.wait_noguard();\n+            LK.unlock_noguard();\n \n             t.join();\n         }"}, {"sha": "eda38e96cbb1afa9089ffa2211a2a2b42421120b", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -2964,8 +2964,8 @@ mod tests {\n         let s = \"{\\\"f\\\":null,\\\"a\\\":[null,123]}\";\n         let obj: FloatStruct = super::decode(s).unwrap();\n         assert!(obj.f.is_nan());\n-        assert!(obj.a.get(0).is_nan());\n-        assert_eq!(obj.a.get(1), &123f64);\n+        assert!(obj.a[0].is_nan());\n+        assert_eq!(obj.a[1], 123f64);\n     }\n \n     #[test]"}, {"sha": "71d38ac66597fc7246f30ce116b0ec3ec970fb2a", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -582,15 +582,15 @@ mod tests {\n         assert_eq!('A'.to_ascii().to_char(), 'A');\n         assert_eq!('A'.to_ascii().to_byte(), 65u8);\n \n-        assert_eq!('A'.to_ascii().to_lower().to_char(), 'a');\n-        assert_eq!('Z'.to_ascii().to_lower().to_char(), 'z');\n-        assert_eq!('a'.to_ascii().to_upper().to_char(), 'A');\n-        assert_eq!('z'.to_ascii().to_upper().to_char(), 'Z');\n-\n-        assert_eq!('@'.to_ascii().to_lower().to_char(), '@');\n-        assert_eq!('['.to_ascii().to_lower().to_char(), '[');\n-        assert_eq!('`'.to_ascii().to_upper().to_char(), '`');\n-        assert_eq!('{'.to_ascii().to_upper().to_char(), '{');\n+        assert_eq!('A'.to_ascii().to_lowercase().to_char(), 'a');\n+        assert_eq!('Z'.to_ascii().to_lowercase().to_char(), 'z');\n+        assert_eq!('a'.to_ascii().to_uppercase().to_char(), 'A');\n+        assert_eq!('z'.to_ascii().to_uppercase().to_char(), 'Z');\n+\n+        assert_eq!('@'.to_ascii().to_lowercase().to_char(), '@');\n+        assert_eq!('['.to_ascii().to_lowercase().to_char(), '[');\n+        assert_eq!('`'.to_ascii().to_uppercase().to_char(), '`');\n+        assert_eq!('{'.to_ascii().to_uppercase().to_char(), '{');\n \n         assert!('0'.to_ascii().is_digit());\n         assert!('9'.to_ascii().is_digit());"}, {"sha": "42e3a823ff4f59abb0463dfce8149db23f78bfb9", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -273,8 +273,8 @@ mod tests {\n     }\n \n     bitflags! {\n-        flags AnotherSetOfFlags: uint {\n-            const AnotherFlag = 1u,\n+        flags AnotherSetOfFlags: i8 {\n+            const AnotherFlag = -1_i8,\n         }\n     }\n \n@@ -283,6 +283,9 @@ mod tests {\n         assert_eq!(Flags::empty().bits(), 0x00000000);\n         assert_eq!(FlagA.bits(), 0x00000001);\n         assert_eq!(FlagABC.bits(), 0x00000111);\n+\n+        assert_eq!(AnotherSetOfFlags::empty().bits(), 0x00);\n+        assert_eq!(AnotherFlag.bits(), !0_i8);\n     }\n \n     #[test]\n@@ -292,6 +295,8 @@ mod tests {\n         assert!(Flags::from_bits(0x10) == Some(FlagB));\n         assert!(Flags::from_bits(0x11) == Some(FlagA | FlagB));\n         assert!(Flags::from_bits(0x1000) == None);\n+\n+        assert!(AnotherSetOfFlags::from_bits(!0_i8) == Some(AnotherFlag));\n     }\n \n     #[test]\n@@ -302,27 +307,35 @@ mod tests {\n         assert!(Flags::from_bits_truncate(0x11) == (FlagA | FlagB));\n         assert!(Flags::from_bits_truncate(0x1000) == Flags::empty());\n         assert!(Flags::from_bits_truncate(0x1001) == FlagA);\n+\n+        assert!(AnotherSetOfFlags::from_bits_truncate(0_i8) == AnotherSetOfFlags::empty());\n     }\n \n     #[test]\n     fn test_is_empty(){\n         assert!(Flags::empty().is_empty());\n         assert!(!FlagA.is_empty());\n         assert!(!FlagABC.is_empty());\n+\n+        assert!(!AnotherFlag.is_empty());\n     }\n \n     #[test]\n     fn test_is_all() {\n         assert!(Flags::all().is_all());\n         assert!(!FlagA.is_all());\n         assert!(FlagABC.is_all());\n+\n+        assert!(AnotherFlag.is_all());\n     }\n \n     #[test]\n     fn test_two_empties_do_not_intersect() {\n         let e1 = Flags::empty();\n         let e2 = Flags::empty();\n         assert!(!e1.intersects(e2));\n+\n+        assert!(AnotherFlag.intersects(AnotherFlag));\n     }\n \n     #[test]\n@@ -353,6 +366,8 @@ mod tests {\n         assert!(!e1.contains(e2));\n         assert!(e2.contains(e1));\n         assert!(FlagABC.contains(e2));\n+\n+        assert!(AnotherFlag.contains(AnotherFlag));\n     }\n \n     #[test]\n@@ -361,6 +376,10 @@ mod tests {\n         let e2 = FlagA | FlagB;\n         e1.insert(e2);\n         assert!(e1 == e2);\n+\n+        let mut e3 = AnotherSetOfFlags::empty();\n+        e3.insert(AnotherFlag);\n+        assert!(e3 == AnotherFlag);\n     }\n \n     #[test]\n@@ -369,6 +388,10 @@ mod tests {\n         let e2 = FlagA | FlagC;\n         e1.remove(e2);\n         assert!(e1 == FlagB);\n+\n+        let mut e3 = AnotherFlag;\n+        e3.remove(AnotherFlag);\n+        assert!(e3 == AnotherSetOfFlags::empty());\n     }\n \n     #[test]\n@@ -383,6 +406,10 @@ mod tests {\n         let mut e3 = e1;\n         e3.toggle(e2);\n         assert!(e3 == FlagA | FlagB);\n+\n+        let mut m4 = AnotherSetOfFlags::empty();\n+        m4.toggle(AnotherSetOfFlags::empty());\n+        assert!(m4 == AnotherSetOfFlags::empty());\n     }\n \n     #[test]"}, {"sha": "bdd9d8d9d1f5977f4458abbfc82d4b844153b114", "filename": "src/libstd/collections/hashmap/map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fcollections%2Fhashmap%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fcollections%2Fhashmap%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap%2Fmap.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -1930,6 +1930,7 @@ mod test_map {\n     }\n \n     #[test]\n+    #[allow(deprecated)] // insert_or_update_with\n     fn test_update_with() {\n         let mut m = HashMap::with_capacity(4);\n         assert!(m.insert(1i, 2i));"}, {"sha": "8ab0d3a5504017e26af48204acaf681ad98134ba", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -400,7 +400,7 @@ mod test {\n \n     impl Reader for ShortReader {\n         fn read(&mut self, _: &mut [u8]) -> io::IoResult<uint> {\n-            match self.lengths.shift() {\n+            match self.lengths.remove(0) {\n                 Some(i) => Ok(i),\n                 None => Err(io::standard_error(io::EndOfFile))\n             }\n@@ -551,7 +551,7 @@ mod test {\n \n     #[test]\n     fn test_read_line() {\n-        let in_buf = MemReader::new(Vec::from_slice(b\"a\\nb\\nc\"));\n+        let in_buf = MemReader::new(b\"a\\nb\\nc\".to_vec());\n         let mut reader = BufferedReader::with_capacity(2, in_buf);\n         assert_eq!(reader.read_line(), Ok(\"a\\n\".to_string()));\n         assert_eq!(reader.read_line(), Ok(\"b\\n\".to_string()));\n@@ -561,7 +561,7 @@ mod test {\n \n     #[test]\n     fn test_lines() {\n-        let in_buf = MemReader::new(Vec::from_slice(b\"a\\nb\\nc\"));\n+        let in_buf = MemReader::new(b\"a\\nb\\nc\".to_vec());\n         let mut reader = BufferedReader::with_capacity(2, in_buf);\n         let mut it = reader.lines();\n         assert_eq!(it.next(), Some(Ok(\"a\\n\".to_string())));"}, {"sha": "e8fed67fffed14c6420612111c783baf00279fc7", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -1415,7 +1415,7 @@ mod test {\n         check!(copy(&input, &output));\n \n         assert_eq!(check!(File::open(&output).read_to_end()),\n-                   (Vec::from_slice(b\"foo\")));\n+                   b\"foo\".to_vec());\n     }\n \n     #[test]\n@@ -1459,7 +1459,7 @@ mod test {\n         }\n         assert_eq!(check!(stat(&out)).size, check!(stat(&input)).size);\n         assert_eq!(check!(File::open(&out).read_to_end()),\n-                   (Vec::from_slice(b\"foobar\")));\n+                   b\"foobar\".to_vec());\n     }\n \n     #[cfg(not(windows))] // apparently windows doesn't like symlinks\n@@ -1497,7 +1497,7 @@ mod test {\n         assert_eq!(check!(stat(&out)).size, check!(stat(&input)).size);\n         assert_eq!(check!(stat(&out)).size, check!(input.stat()).size);\n         assert_eq!(check!(File::open(&out).read_to_end()),\n-                   (Vec::from_slice(b\"foobar\")));\n+                   b\"foobar\".to_vec());\n \n         // can't link to yourself\n         match link(&input, &input) {\n@@ -1560,7 +1560,7 @@ mod test {\n         check!(file.fsync());\n         assert_eq!(check!(file.stat()).size, 10);\n         assert_eq!(check!(File::open(&path).read_to_end()),\n-                   (Vec::from_slice(b\"foobar\\0\\0\\0\\0\")));\n+                   b\"foobar\\0\\0\\0\\0\".to_vec());\n \n         // Truncate to a smaller length, don't seek, and then write something.\n         // Ensure that the intermediate zeroes are all filled in (we're seeked\n@@ -1571,7 +1571,7 @@ mod test {\n         check!(file.fsync());\n         assert_eq!(check!(file.stat()).size, 9);\n         assert_eq!(check!(File::open(&path).read_to_end()),\n-                   (Vec::from_slice(b\"fo\\0\\0\\0\\0wut\")));\n+                   b\"fo\\0\\0\\0\\0wut\".to_vec());\n         drop(file);\n     }\n "}, {"sha": "f86ae05d623ca462c2a70e87c9e899b19326d996", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -617,7 +617,7 @@ mod test {\n     #[bench]\n     fn bench_mem_reader(b: &mut Bencher) {\n         b.iter(|| {\n-            let buf = Vec::from_slice([5 as u8, ..100]);\n+            let buf = [5 as u8, ..100].to_vec();\n             {\n                 let mut rdr = MemReader::new(buf);\n                 for _i in range(0u, 10) {"}, {"sha": "8592d48974a25f8c143a202cb01b2dbf4fddbc58", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -1949,62 +1949,62 @@ mod tests {\n                         return Ok(0);\n                     }\n                 };\n-                behavior.shift();\n+                behavior.remove(0);\n             }\n         }\n     }\n \n     #[test]\n     fn test_read_at_least() {\n-        let mut r = BadReader::new(MemReader::new(Vec::from_slice(b\"hello, world!\")),\n-                                   Vec::from_slice([GoodBehavior(uint::MAX)]));\n+        let mut r = BadReader::new(MemReader::new(b\"hello, world!\".to_vec()),\n+                                   vec![GoodBehavior(uint::MAX)]);\n         let mut buf = [0u8, ..5];\n         assert!(r.read_at_least(1, buf).unwrap() >= 1);\n         assert!(r.read_exact(5).unwrap().len() == 5); // read_exact uses read_at_least\n         assert!(r.read_at_least(0, buf).is_ok());\n \n-        let mut r = BadReader::new(MemReader::new(Vec::from_slice(b\"hello, world!\")),\n-                                   Vec::from_slice([BadBehavior(50), GoodBehavior(uint::MAX)]));\n+        let mut r = BadReader::new(MemReader::new(b\"hello, world!\".to_vec()),\n+                                   vec![BadBehavior(50), GoodBehavior(uint::MAX)]);\n         assert!(r.read_at_least(1, buf).unwrap() >= 1);\n \n-        let mut r = BadReader::new(MemReader::new(Vec::from_slice(b\"hello, world!\")),\n-                                   Vec::from_slice([BadBehavior(1), GoodBehavior(1),\n-                                                    BadBehavior(50), GoodBehavior(uint::MAX)]));\n+        let mut r = BadReader::new(MemReader::new(b\"hello, world!\".to_vec()),\n+                                   vec![BadBehavior(1), GoodBehavior(1),\n+                                        BadBehavior(50), GoodBehavior(uint::MAX)]);\n         assert!(r.read_at_least(1, buf).unwrap() >= 1);\n         assert!(r.read_at_least(1, buf).unwrap() >= 1);\n \n-        let mut r = BadReader::new(MemReader::new(Vec::from_slice(b\"hello, world!\")),\n-                                   Vec::from_slice([BadBehavior(uint::MAX)]));\n+        let mut r = BadReader::new(MemReader::new(b\"hello, world!\".to_vec()),\n+                                   vec![BadBehavior(uint::MAX)]);\n         assert_eq!(r.read_at_least(1, buf).unwrap_err().kind, NoProgress);\n \n-        let mut r = MemReader::new(Vec::from_slice(b\"hello, world!\"));\n+        let mut r = MemReader::new(b\"hello, world!\".to_vec());\n         assert_eq!(r.read_at_least(5, buf).unwrap(), 5);\n         assert_eq!(r.read_at_least(6, buf).unwrap_err().kind, InvalidInput);\n     }\n \n     #[test]\n     fn test_push_at_least() {\n-        let mut r = BadReader::new(MemReader::new(Vec::from_slice(b\"hello, world!\")),\n-                                   Vec::from_slice([GoodBehavior(uint::MAX)]));\n+        let mut r = BadReader::new(MemReader::new(b\"hello, world!\".to_vec()),\n+                                   vec![GoodBehavior(uint::MAX)]);\n         let mut buf = Vec::new();\n         assert!(r.push_at_least(1, 5, &mut buf).unwrap() >= 1);\n         assert!(r.push_at_least(0, 5, &mut buf).is_ok());\n \n-        let mut r = BadReader::new(MemReader::new(Vec::from_slice(b\"hello, world!\")),\n-                                   Vec::from_slice([BadBehavior(50), GoodBehavior(uint::MAX)]));\n+        let mut r = BadReader::new(MemReader::new(b\"hello, world!\".to_vec()),\n+                                   vec![BadBehavior(50), GoodBehavior(uint::MAX)]);\n         assert!(r.push_at_least(1, 5, &mut buf).unwrap() >= 1);\n \n-        let mut r = BadReader::new(MemReader::new(Vec::from_slice(b\"hello, world!\")),\n-                                   Vec::from_slice([BadBehavior(1), GoodBehavior(1),\n-                                                    BadBehavior(50), GoodBehavior(uint::MAX)]));\n+        let mut r = BadReader::new(MemReader::new(b\"hello, world!\".to_vec()),\n+                                   vec![BadBehavior(1), GoodBehavior(1),\n+                                        BadBehavior(50), GoodBehavior(uint::MAX)]);\n         assert!(r.push_at_least(1, 5, &mut buf).unwrap() >= 1);\n         assert!(r.push_at_least(1, 5, &mut buf).unwrap() >= 1);\n \n-        let mut r = BadReader::new(MemReader::new(Vec::from_slice(b\"hello, world!\")),\n-                                   Vec::from_slice([BadBehavior(uint::MAX)]));\n+        let mut r = BadReader::new(MemReader::new(b\"hello, world!\".to_vec()),\n+                                   vec![BadBehavior(uint::MAX)]);\n         assert_eq!(r.push_at_least(1, 5, &mut buf).unwrap_err().kind, NoProgress);\n \n-        let mut r = MemReader::new(Vec::from_slice(b\"hello, world!\"));\n+        let mut r = MemReader::new(b\"hello, world!\".to_vec());\n         assert_eq!(r.push_at_least(5, 1, &mut buf).unwrap_err().kind, InvalidInput);\n     }\n "}, {"sha": "9d85701eb298413dd48a8407d539d5e1b436bed8", "filename": "src/libstd/io/net/addrinfo.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -126,9 +126,7 @@ fn lookup(hostname: Option<&str>, servname: Option<&str>, hint: Option<Hint>)\n #[cfg(all(test, not(target_os = \"android\")))]\n mod test {\n     use super::*;\n-    use io::net::tcp::*;\n     use io::net::ip::*;\n-    use io::net::udp::*;\n \n     #[test]\n     fn dns_smoke_test() {"}, {"sha": "d6528ce977e9821e8c9c7412b40c24fca6052894", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -521,10 +521,8 @@ impl Clone for TcpAcceptor {\n #[cfg(test)]\n #[allow(experimental)]\n mod test {\n-    use super::*;\n     use io::net::tcp::*;\n     use io::net::ip::*;\n-    use io::net::udp::*;\n     use io::*;\n     use io::test::*;\n     use prelude::*;"}, {"sha": "9362a48a6f00bb108e340b3820f476d3b7f62c86", "filename": "src/libstd/io/pipe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fpipe.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -118,7 +118,6 @@ impl Writer for PipeStream {\n \n #[cfg(test)]\n mod test {\n-    use super::*;\n     use prelude::*;\n \n     #[test]"}, {"sha": "88f8434b9576e12dcfe9fd8380bc482e40991871", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -727,7 +727,7 @@ mod tests {\n         assert!(p.is_ok());\n         let mut p = p.unwrap();\n         assert!(p.stdout.is_some());\n-        let ret = read_all(p.stdout.get_mut_ref() as &mut Reader);\n+        let ret = read_all(p.stdout.as_mut().unwrap() as &mut Reader);\n         assert!(p.wait().unwrap().success());\n         return ret;\n     }\n@@ -758,9 +758,9 @@ mod tests {\n                             .stdin(CreatePipe(true, false))\n                             .stdout(CreatePipe(false, true))\n                             .spawn().unwrap();\n-        p.stdin.get_mut_ref().write(\"foobar\".as_bytes()).unwrap();\n+        p.stdin.as_mut().unwrap().write(\"foobar\".as_bytes()).unwrap();\n         drop(p.stdin.take());\n-        let out = read_all(p.stdout.get_mut_ref() as &mut Reader);\n+        let out = read_all(p.stdout.as_mut().unwrap() as &mut Reader);\n         assert!(p.wait().unwrap().success());\n         assert_eq!(out, \"foobar\\n\".to_string());\n     }\n@@ -1019,7 +1019,7 @@ mod tests {\n     fn test_add_to_env() {\n         let prog = env_cmd().env(\"RUN_TEST_NEW_ENV\", \"123\").spawn().unwrap();\n         let result = prog.wait_with_output().unwrap();\n-        let output = str::from_utf8_lossy(result.output.as_slice()).into_string();\n+        let output = String::from_utf8_lossy(result.output.as_slice()).into_string();\n \n         assert!(output.as_slice().contains(\"RUN_TEST_NEW_ENV=123\"),\n                 \"didn't find RUN_TEST_NEW_ENV inside of:\\n\\n{}\", output);"}, {"sha": "93037f765d635c2d582e7ce2a4be1f0b2066caee", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -385,13 +385,15 @@ mod tests {\n     use super::*;\n     use prelude::*;\n \n+    #[test]\n     fn smoke() {\n         // Just make sure we can acquire handles\n         stdin();\n         stdout();\n         stderr();\n     }\n \n+    #[test]\n     fn capture_stdout() {\n         use io::{ChanReader, ChanWriter};\n \n@@ -404,9 +406,10 @@ mod tests {\n         assert_eq!(r.read_to_string().unwrap(), \"hello!\\n\".to_string());\n     }\n \n+    #[test]\n     fn capture_stderr() {\n         use realstd::comm::channel;\n-        use realstd::io::{Writer, ChanReader, ChanWriter, Reader};\n+        use realstd::io::{ChanReader, ChanWriter, Reader};\n \n         let (tx, rx) = channel();\n         let (mut r, w) = (ChanReader::new(rx), ChanWriter::new(tx));"}, {"sha": "a657989fe1244486b225b7f669be6d44e8ef748d", "filename": "src/libstd/io/timer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftimer.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -235,7 +235,6 @@ mod test {\n     use super::*;\n     use time::Duration;\n     use task::spawn;\n-    use io::*;\n     use prelude::*;\n \n     #[test]"}, {"sha": "48ee7664c16acb12da8c6530bf52587ddbefd212", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -819,72 +819,82 @@ mod bench {\n     mod uint {\n         use super::test::Bencher;\n         use rand::{weak_rng, Rng};\n-        use num::ToStrRadix;\n+        use std::fmt;\n+\n+        #[inline]\n+        fn to_string(x: uint, base: u8) {\n+            format!(\"{}\", fmt::radix(x, base));\n+        }\n \n         #[bench]\n         fn to_str_bin(b: &mut Bencher) {\n             let mut rng = weak_rng();\n-            b.iter(|| { rng.gen::<uint>().to_str_radix(2); })\n+            b.iter(|| { to_string(rng.gen::<uint>(), 2); })\n         }\n \n         #[bench]\n         fn to_str_oct(b: &mut Bencher) {\n             let mut rng = weak_rng();\n-            b.iter(|| { rng.gen::<uint>().to_str_radix(8); })\n+            b.iter(|| { to_string(rng.gen::<uint>(), 8); })\n         }\n \n         #[bench]\n         fn to_str_dec(b: &mut Bencher) {\n             let mut rng = weak_rng();\n-            b.iter(|| { rng.gen::<uint>().to_str_radix(10); })\n+            b.iter(|| { to_string(rng.gen::<uint>(), 10); })\n         }\n \n         #[bench]\n         fn to_str_hex(b: &mut Bencher) {\n             let mut rng = weak_rng();\n-            b.iter(|| { rng.gen::<uint>().to_str_radix(16); })\n+            b.iter(|| { to_string(rng.gen::<uint>(), 16); })\n         }\n \n         #[bench]\n         fn to_str_base_36(b: &mut Bencher) {\n             let mut rng = weak_rng();\n-            b.iter(|| { rng.gen::<uint>().to_str_radix(36); })\n+            b.iter(|| { to_string(rng.gen::<uint>(), 36); })\n         }\n     }\n \n     mod int {\n         use super::test::Bencher;\n         use rand::{weak_rng, Rng};\n-        use num::ToStrRadix;\n+        use std::fmt;\n+\n+        #[inline]\n+        fn to_string(x: int, base: u8) {\n+            format!(\"{}\", fmt::radix(x, base));\n+        }\n \n         #[bench]\n         fn to_str_bin(b: &mut Bencher) {\n             let mut rng = weak_rng();\n-            b.iter(|| { rng.gen::<int>().to_str_radix(2); })\n+            b.iter(|| { to_string(rng.gen::<int>(), 2); })\n         }\n \n         #[bench]\n         fn to_str_oct(b: &mut Bencher) {\n             let mut rng = weak_rng();\n-            b.iter(|| { rng.gen::<int>().to_str_radix(8); })\n+            b.iter(|| { to_string(rng.gen::<int>(), 8); })\n         }\n \n         #[bench]\n         fn to_str_dec(b: &mut Bencher) {\n             let mut rng = weak_rng();\n-            b.iter(|| { rng.gen::<int>().to_str_radix(10); })\n+            b.iter(|| { to_string(rng.gen::<int>(), 10); })\n         }\n \n         #[bench]\n         fn to_str_hex(b: &mut Bencher) {\n             let mut rng = weak_rng();\n-            b.iter(|| { rng.gen::<int>().to_str_radix(16); })\n+            b.iter(|| { to_string(rng.gen::<int>(), 16); })\n         }\n \n         #[bench]\n         fn to_str_base_36(b: &mut Bencher) {\n             let mut rng = weak_rng();\n-            b.iter(|| { rng.gen::<int>().to_str_radix(36); })\n+            b.iter(|| { to_string(rng.gen::<int>(), 36); })\n         }\n     }\n "}, {"sha": "27eafdab642aef00ed89578cbe0e32c32eae9b41", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -775,7 +775,7 @@ mod tests {\n         t!(s: \"a/b/c\", [\"d\".to_string(), \"e\".to_string()], \"a/b/c/d/e\");\n         t!(v: b\"a/b/c\", [b\"d\", b\"e\"], b\"a/b/c/d/e\");\n         t!(v: b\"a/b/c\", [b\"d\", b\"/e\", b\"f\"], b\"/e/f\");\n-        t!(v: b\"a/b/c\", [Vec::from_slice(b\"d\"), Vec::from_slice(b\"e\")], b\"a/b/c/d/e\");\n+        t!(v: b\"a/b/c\", [b\"d\".to_vec(), b\"e\".to_vec()], b\"a/b/c/d/e\");\n     }\n \n     #[test]\n@@ -879,7 +879,7 @@ mod tests {\n         t!(s: \"a/b/c\", [\"d\", \"/e\", \"f\"], \"/e/f\");\n         t!(s: \"a/b/c\", [\"d\".to_string(), \"e\".to_string()], \"a/b/c/d/e\");\n         t!(v: b\"a/b/c\", [b\"d\", b\"e\"], b\"a/b/c/d/e\");\n-        t!(v: b\"a/b/c\", [Vec::from_slice(b\"d\"), Vec::from_slice(b\"e\")], b\"a/b/c/d/e\");\n+        t!(v: b\"a/b/c\", [b\"d\".to_vec(), b\"e\".to_vec()], b\"a/b/c/d/e\");\n     }\n \n     #[test]"}, {"sha": "8ca1cec3e0ae9675a16ef8aaa02dba8308d969bd", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -76,7 +76,6 @@ mod test {\n \n     use super::ReaderRng;\n     use io::MemReader;\n-    use mem;\n     use rand::Rng;\n \n     #[test]\n@@ -87,25 +86,25 @@ mod test {\n                      0,   0, 0, 0, 0, 0, 0, 3];\n         let mut rng = ReaderRng::new(MemReader::new(v));\n \n-        assert_eq!(rng.next_u64(), mem::to_be64(1));\n-        assert_eq!(rng.next_u64(), mem::to_be64(2));\n-        assert_eq!(rng.next_u64(), mem::to_be64(3));\n+        assert_eq!(rng.next_u64(), 1_u64.to_be());\n+        assert_eq!(rng.next_u64(), 2_u64.to_be());\n+        assert_eq!(rng.next_u64(), 3_u64.to_be());\n     }\n     #[test]\n     fn test_reader_rng_u32() {\n         let v = vec![0u8, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3];\n         let mut rng = ReaderRng::new(MemReader::new(v));\n \n-        assert_eq!(rng.next_u32(), mem::to_be32(1));\n-        assert_eq!(rng.next_u32(), mem::to_be32(2));\n-        assert_eq!(rng.next_u32(), mem::to_be32(3));\n+        assert_eq!(rng.next_u32(), 1_u32.to_be());\n+        assert_eq!(rng.next_u32(), 2_u32.to_be());\n+        assert_eq!(rng.next_u32(), 3_u32.to_be());\n     }\n     #[test]\n     fn test_reader_rng_fill_bytes() {\n         let v = [1u8, 2, 3, 4, 5, 6, 7, 8];\n         let mut w = [0u8, .. 8];\n \n-        let mut rng = ReaderRng::new(MemReader::new(Vec::from_slice(v)));\n+        let mut rng = ReaderRng::new(MemReader::new(v.as_slice().to_vec()));\n         rng.fill_bytes(w);\n \n         assert!(v == w);"}, {"sha": "04d3bb8b3a7eae298c3a22db24de04e28d17efde", "filename": "src/libstd/task.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -447,6 +447,7 @@ mod test {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn test_with_wrapper() {\n         let (tx, rx) = channel();\n         TaskBuilder::new().with_wrapper(proc(body) {"}, {"sha": "1dc1f4b87f27cbdf2f2babfb810ac90f43072789", "filename": "src/libsync/comm/duplex.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibsync%2Fcomm%2Fduplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibsync%2Fcomm%2Fduplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fduplex.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -59,10 +59,11 @@ impl<S:Send,R:Send> DuplexStream<S, R> {\n     }\n }\n \n+#[allow(deprecated)]\n #[cfg(test)]\n mod test {\n     use std::prelude::*;\n-    use comm::{duplex};\n+    use comm::duplex;\n \n     #[test]\n     pub fn duplex_stream_1() {"}, {"sha": "09fa8920a07d7daff55f56213b3417af62bfcae5", "filename": "src/libsync/deque.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibsync%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibsync%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fdeque.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -553,14 +553,12 @@ mod tests {\n         let threads = range(0, NTHREADS).map(|_| {\n             let s = s.clone();\n             Thread::start(proc() {\n-                unsafe {\n-                    loop {\n-                        match s.steal() {\n-                            Data(2) => { HITS.fetch_add(1, SeqCst); }\n-                            Data(..) => fail!(),\n-                            _ if DONE.load(SeqCst) => break,\n-                            _ => {}\n-                        }\n+                loop {\n+                    match s.steal() {\n+                        Data(2) => { HITS.fetch_add(1, SeqCst); }\n+                        Data(..) => fail!(),\n+                        _ if DONE.load(SeqCst) => break,\n+                        _ => {}\n                     }\n                 }\n             })\n@@ -572,7 +570,7 @@ mod tests {\n             if rng.gen_range(0i, 3) == 2 {\n                 match w.pop() {\n                     None => {}\n-                    Some(2) => unsafe { HITS.fetch_add(1, SeqCst); },\n+                    Some(2) => { HITS.fetch_add(1, SeqCst); },\n                     Some(_) => fail!(),\n                 }\n             } else {\n@@ -581,22 +579,20 @@ mod tests {\n             }\n         }\n \n-        unsafe {\n-            while HITS.load(SeqCst) < AMT as uint {\n-                match w.pop() {\n-                    None => {}\n-                    Some(2) => { HITS.fetch_add(1, SeqCst); },\n-                    Some(_) => fail!(),\n-                }\n+        while HITS.load(SeqCst) < AMT as uint {\n+            match w.pop() {\n+                None => {}\n+                Some(2) => { HITS.fetch_add(1, SeqCst); },\n+                Some(_) => fail!(),\n             }\n-            DONE.store(true, SeqCst);\n         }\n+        DONE.store(true, SeqCst);\n \n         for thread in threads.into_iter() {\n             thread.join();\n         }\n \n-        assert_eq!(unsafe { HITS.load(SeqCst) }, expected as uint);\n+        assert_eq!(HITS.load(SeqCst), expected as uint);\n     }\n \n     #[test]\n@@ -655,7 +651,7 @@ mod tests {\n             }\n         }\n \n-        unsafe { DONE.store(true, SeqCst); }\n+        DONE.store(true, SeqCst);\n \n         for thread in threads.into_iter() {\n             thread.join();"}, {"sha": "796c62354c3113b7502c29f81ad53cb866366b64", "filename": "src/libsync/mutex.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fmutex.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -536,45 +536,45 @@ mod test {\n \n     #[test]\n     fn smoke_static() {\n-        static m: StaticMutex = MUTEX_INIT;\n+        static M: StaticMutex = MUTEX_INIT;\n         unsafe {\n-            drop(m.lock());\n-            drop(m.lock());\n-            m.destroy();\n+            drop(M.lock());\n+            drop(M.lock());\n+            M.destroy();\n         }\n     }\n \n     #[test]\n     fn lots_and_lots() {\n-        static m: StaticMutex = MUTEX_INIT;\n+        static M: StaticMutex = MUTEX_INIT;\n         static mut CNT: uint = 0;\n-        static M: uint = 1000;\n-        static N: uint = 3;\n+        static J: uint = 1000;\n+        static K: uint = 3;\n \n         fn inc() {\n-            for _ in range(0, M) {\n+            for _ in range(0, J) {\n                 unsafe {\n-                    let _g = m.lock();\n+                    let _g = M.lock();\n                     CNT += 1;\n                 }\n             }\n         }\n \n         let (tx, rx) = channel();\n-        for _ in range(0, N) {\n+        for _ in range(0, K) {\n             let tx2 = tx.clone();\n             native::task::spawn(proc() { inc(); tx2.send(()); });\n             let tx2 = tx.clone();\n             spawn(proc() { inc(); tx2.send(()); });\n         }\n \n         drop(tx);\n-        for _ in range(0, 2 * N) {\n+        for _ in range(0, 2 * K) {\n             rx.recv();\n         }\n-        assert_eq!(unsafe {CNT}, M * N * 2);\n+        assert_eq!(unsafe {CNT}, J * K * 2);\n         unsafe {\n-            m.destroy();\n+            M.destroy();\n         }\n     }\n "}, {"sha": "62b3766091226aaf1515bb6a8fa996bed174f92b", "filename": "src/libsync/one.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibsync%2Fone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibsync%2Fone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fone.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -126,17 +126,17 @@ mod test {\n \n     #[test]\n     fn smoke_once() {\n-        static o: Once = ONCE_INIT;\n+        static O: Once = ONCE_INIT;\n         let mut a = 0i;\n-        o.doit(|| a += 1);\n+        O.doit(|| a += 1);\n         assert_eq!(a, 1);\n-        o.doit(|| a += 1);\n+        O.doit(|| a += 1);\n         assert_eq!(a, 1);\n     }\n \n     #[test]\n     fn stampede_once() {\n-        static o: Once = ONCE_INIT;\n+        static O: Once = ONCE_INIT;\n         static mut run: bool = false;\n \n         let (tx, rx) = channel();\n@@ -145,7 +145,7 @@ mod test {\n             spawn(proc() {\n                 for _ in range(0u, 4) { task::deschedule() }\n                 unsafe {\n-                    o.doit(|| {\n+                    O.doit(|| {\n                         assert!(!run);\n                         run = true;\n                     });\n@@ -156,7 +156,7 @@ mod test {\n         }\n \n         unsafe {\n-            o.doit(|| {\n+            O.doit(|| {\n                 assert!(!run);\n                 run = true;\n             });"}, {"sha": "a1bce6e8e8b048b1814b24834c5848db5436ded1", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986d62e239e9c16f07959347e5520113b40861a5/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=986d62e239e9c16f07959347e5520113b40861a5", "patch": "@@ -575,7 +575,7 @@ fn format(val: Param, op: FormatOp, flags: Flags) -> Result<Vec<u8> ,String> {\n \n #[cfg(test)]\n mod test {\n-    use super::{expand,Words,Variables,Number};\n+    use super::{expand,Param,Words,Variables,Number};\n     use std::result::Ok;\n \n     #[test]\n@@ -605,40 +605,39 @@ mod test {\n     fn test_param_stack_failure_conditions() {\n         let mut varstruct = Variables::new();\n         let vars = &mut varstruct;\n+        fn get_res(fmt: &str, cap: &str, params: &[Param], vars: &mut Variables) ->\n+            Result<Vec<u8>, String>\n+        {\n+            let mut u8v: Vec<_> = fmt.bytes().collect();\n+            u8v.extend(cap.as_bytes().iter().map(|&b| b));\n+            expand(u8v.as_slice(), params, vars)\n+        }\n+\n         let caps = [\"%d\", \"%c\", \"%s\", \"%Pa\", \"%l\", \"%!\", \"%~\"];\n-        for cap in caps.iter() {\n-            let res = expand(cap.as_bytes(), [], vars);\n+        for &cap in caps.iter() {\n+            let res = get_res(\"\", cap, [], vars);\n             assert!(res.is_err(),\n-                    \"Op {} succeeded incorrectly with 0 stack entries\", *cap);\n-            let p = if *cap == \"%s\" || *cap == \"%l\" {\n+                    \"Op {} succeeded incorrectly with 0 stack entries\", cap);\n+            let p = if cap == \"%s\" || cap == \"%l\" {\n                 Words(\"foo\".to_string())\n             } else {\n                 Number(97)\n             };\n-            let res = expand(\"%p1\".bytes().collect::<Vec<_>>()\n-                             .append(cap.as_bytes()).as_slice(),\n-                             [p],\n-                             vars);\n+            let res = get_res(\"%p1\", cap, [p], vars);\n             assert!(res.is_ok(),\n-                    \"Op {} failed with 1 stack entry: {}\", *cap, res.unwrap_err());\n+                    \"Op {} failed with 1 stack entry: {}\", cap, res.unwrap_err());\n         }\n         let caps = [\"%+\", \"%-\", \"%*\", \"%/\", \"%m\", \"%&\", \"%|\", \"%A\", \"%O\"];\n-        for cap in caps.iter() {\n+        for &cap in caps.iter() {\n             let res = expand(cap.as_bytes(), [], vars);\n             assert!(res.is_err(),\n-                    \"Binop {} succeeded incorrectly with 0 stack entries\", *cap);\n-            let res = expand(\"%{1}\".bytes().collect::<Vec<_>>()\n-                             .append(cap.as_bytes()).as_slice(),\n-                              [],\n-                              vars);\n+                    \"Binop {} succeeded incorrectly with 0 stack entries\", cap);\n+            let res = get_res(\"%{1}\", cap, [], vars);\n             assert!(res.is_err(),\n-                    \"Binop {} succeeded incorrectly with 1 stack entry\", *cap);\n-            let res = expand(\"%{1}%{2}\".bytes().collect::<Vec<_>>()\n-                             .append(cap.as_bytes()).as_slice(),\n-                             [],\n-                             vars);\n+                    \"Binop {} succeeded incorrectly with 1 stack entry\", cap);\n+            let res = get_res(\"%{1}%{2}\", cap, [], vars);\n             assert!(res.is_ok(),\n-                    \"Binop {} failed with 2 stack entries: {}\", *cap, res.unwrap_err());\n+                    \"Binop {} failed with 2 stack entries: {}\", cap, res.unwrap_err());\n         }\n     }\n "}]}