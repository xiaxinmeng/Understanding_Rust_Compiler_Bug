{"sha": "df4fee9841e21ac84335d214af163a1b652ec9a2", "node_id": "C_kwDOAAsO6NoAKGRmNGZlZTk4NDFlMjFhYzg0MzM1ZDIxNGFmMTYzYTFiNjUyZWM5YTI", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-11T19:39:53Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-12T17:00:13Z"}, "message": "Add an indirection for closures in `hir::ExprKind`\n\nThis helps bring `hir::Expr` size down, `Closure` was the biggest\nvariant, especially after `for<>` additions.", "tree": {"sha": "1c4b627415d86b8c27061a26a97c6151f3812092", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c4b627415d86b8c27061a26a97c6151f3812092"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df4fee9841e21ac84335d214af163a1b652ec9a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df4fee9841e21ac84335d214af163a1b652ec9a2", "html_url": "https://github.com/rust-lang/rust/commit/df4fee9841e21ac84335d214af163a1b652ec9a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df4fee9841e21ac84335d214af163a1b652ec9a2/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ebb8529560b9b80f38467bac86d686f5dae4934", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ebb8529560b9b80f38467bac86d686f5dae4934", "html_url": "https://github.com/rust-lang/rust/commit/3ebb8529560b9b80f38467bac86d686f5dae4934"}], "stats": {"total": 180, "additions": 101, "deletions": 79}, "files": [{"sha": "983efa48a457982bf8ab37e2b9f0651c68a990a7", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -608,14 +608,18 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         });\n \n         // `static |_task_context| -> <ret_ty> { body }`:\n-        let generator_kind = hir::ExprKind::Closure {\n-            binder: &hir::ClosureBinder::Default,\n-            capture_clause,\n-            bound_generic_params: &[],\n-            fn_decl,\n-            body,\n-            fn_decl_span: self.lower_span(span),\n-            movability: Some(hir::Movability::Static),\n+        let generator_kind = {\n+            let c = self.arena.alloc(hir::Closure {\n+                binder: hir::ClosureBinder::Default,\n+                capture_clause,\n+                bound_generic_params: &[],\n+                fn_decl,\n+                body,\n+                fn_decl_span: self.lower_span(span),\n+                movability: Some(hir::Movability::Static),\n+            });\n+\n+            hir::ExprKind::Closure(c)\n         };\n         let generator = hir::Expr {\n             hir_id: self.lower_node_id(closure_node_id),\n@@ -864,15 +868,17 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             // Lower outside new scope to preserve `is_in_loop_condition`.\n             let fn_decl = this.lower_fn_decl(decl, None, FnDeclKind::Closure, None);\n \n-            hir::ExprKind::Closure {\n+            let c = self.arena.alloc(hir::Closure {\n                 binder: binder_clause,\n                 capture_clause,\n                 bound_generic_params,\n                 fn_decl,\n                 body: body_id,\n                 fn_decl_span: this.lower_span(fn_decl_span),\n                 movability: generator_option,\n-            }\n+            });\n+\n+            hir::ExprKind::Closure(c)\n         })\n     }\n \n@@ -917,7 +923,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_closure_binder<'c>(\n         &mut self,\n         binder: &'c ClosureBinder,\n-    ) -> (&'hir hir::ClosureBinder, &'c [GenericParam]) {\n+    ) -> (hir::ClosureBinder, &'c [GenericParam]) {\n         let (binder, params) = match binder {\n             ClosureBinder::NotPresent => (hir::ClosureBinder::Default, &[][..]),\n             &ClosureBinder::For { span, ref generic_params } => {\n@@ -926,7 +932,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }\n         };\n \n-        (self.arena.alloc(binder), params)\n+        (binder, params)\n     }\n \n     fn lower_expr_async_closure(\n@@ -991,15 +997,16 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             // closure argument types.\n             let fn_decl = this.lower_fn_decl(&outer_decl, None, FnDeclKind::Closure, None);\n \n-            hir::ExprKind::Closure {\n+            let c = self.arena.alloc(hir::Closure {\n                 binder: binder_clause,\n                 capture_clause,\n                 bound_generic_params,\n                 fn_decl,\n                 body,\n                 fn_decl_span: this.lower_span(fn_decl_span),\n                 movability: None,\n-            }\n+            });\n+            hir::ExprKind::Closure(c)\n         })\n     }\n "}, {"sha": "daf4040cc4b526ed9fab991d109cf5909660c8d2", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -891,7 +891,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let hir_id = self.infcx.tcx.hir().local_def_id_to_hir_id(local_did);\n         let expr = &self.infcx.tcx.hir().expect_expr(hir_id).kind;\n         debug!(\"closure_span: hir_id={:?} expr={:?}\", hir_id, expr);\n-        if let hir::ExprKind::Closure { body, fn_decl_span, .. } = expr {\n+        if let hir::ExprKind::Closure(&hir::Closure { body, fn_decl_span, .. }) = expr {\n             for (captured_place, place) in self\n                 .infcx\n                 .tcx\n@@ -904,11 +904,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         if target_place == place.as_ref() =>\n                     {\n                         debug!(\"closure_span: found captured local {:?}\", place);\n-                        let body = self.infcx.tcx.hir().body(*body);\n+                        let body = self.infcx.tcx.hir().body(body);\n                         let generator_kind = body.generator_kind();\n \n                         return Some((\n-                            *fn_decl_span,\n+                            fn_decl_span,\n                             generator_kind,\n                             captured_place.get_capture_kind_span(self.infcx.tcx),\n                             captured_place.get_path_span(self.infcx.tcx),"}, {"sha": "e41af17fbf9b3be6efa7e33867d6d006a6a83908", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -325,7 +325,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                         // Can't have BrEnv in functions, constants or generators.\n                         bug!(\"BrEnv outside of closure.\");\n                     };\n-                    let hir::ExprKind::Closure { fn_decl_span, .. }\n+                    let hir::ExprKind::Closure(&hir::Closure { fn_decl_span, .. })\n                         = tcx.hir().expect_expr(self.mir_hir_id()).kind\n                     else {\n                         bug!(\"Closure is not defined by a closure expr\");\n@@ -701,16 +701,16 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n         let (return_span, mir_description, hir_ty) = match hir.get(mir_hir_id) {\n             hir::Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::Closure { fn_decl, body, fn_decl_span, .. },\n+                kind: hir::ExprKind::Closure(&hir::Closure { fn_decl, body, fn_decl_span, .. }),\n                 ..\n             }) => {\n                 let (mut span, mut hir_ty) = match fn_decl.output {\n                     hir::FnRetTy::DefaultReturn(_) => {\n-                        (tcx.sess.source_map().end_point(*fn_decl_span), None)\n+                        (tcx.sess.source_map().end_point(fn_decl_span), None)\n                     }\n                     hir::FnRetTy::Return(hir_ty) => (fn_decl.output.span(), Some(hir_ty)),\n                 };\n-                let mir_description = match hir.body(*body).generator_kind {\n+                let mir_description = match hir.body(body).generator_kind {\n                     Some(hir::GeneratorKind::Async(gen)) => match gen {\n                         hir::AsyncGeneratorKind::Block => \" of async block\",\n                         hir::AsyncGeneratorKind::Closure => \" of async closure\",\n@@ -841,9 +841,9 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n         let yield_span = match tcx.hir().get(self.mir_hir_id()) {\n             hir::Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::Closure { fn_decl_span, .. },\n+                kind: hir::ExprKind::Closure(&hir::Closure { fn_decl_span, .. }),\n                 ..\n-            }) => (tcx.sess.source_map().end_point(*fn_decl_span)),\n+            }) => (tcx.sess.source_map().end_point(fn_decl_span)),\n             _ => self.body.span,\n         };\n "}, {"sha": "44335b7f42ef92b3d080baa7478da566149e0eaa", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -12,6 +12,7 @@ macro_rules! arena_types {\n             [] asm_operand: (rustc_hir::InlineAsmOperand<'tcx>, rustc_span::Span),\n             [] asm_template: rustc_ast::InlineAsmTemplatePiece,\n             [] attribute: rustc_ast::Attribute,\n+            [] closure: rustc_hir::Closure<'tcx>,\n             [] block: rustc_hir::Block<'tcx>,\n             [] bare_fn_ty: rustc_hir::BareFnTy<'tcx>,\n             [] body: rustc_hir::Body<'tcx>,"}, {"sha": "9d198fbdf74f9d5a3cfb8c43ca3458db808c047c", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -922,6 +922,17 @@ pub struct Crate<'hir> {\n     pub hir_hash: Fingerprint,\n }\n \n+#[derive(Debug, HashStable_Generic)]\n+pub struct Closure<'hir> {\n+    pub binder: ClosureBinder,\n+    pub capture_clause: CaptureBy,\n+    pub bound_generic_params: &'hir [GenericParam<'hir>],\n+    pub fn_decl: &'hir FnDecl<'hir>,\n+    pub body: BodyId,\n+    pub fn_decl_span: Span,\n+    pub movability: Option<Movability>,\n+}\n+\n /// A block of statements `{ .. }`, which may have a label (in this case the\n /// `targeted_by_break` field will be `true`) and may be `unsafe` by means of\n /// the `rules` being anything but `DefaultBlock`.\n@@ -1930,15 +1941,7 @@ pub enum ExprKind<'hir> {\n     ///\n     /// This may also be a generator literal or an `async block` as indicated by the\n     /// `Option<Movability>`.\n-    Closure {\n-        binder: &'hir ClosureBinder,\n-        capture_clause: CaptureBy,\n-        bound_generic_params: &'hir [GenericParam<'hir>],\n-        fn_decl: &'hir FnDecl<'hir>,\n-        body: BodyId,\n-        fn_decl_span: Span,\n-        movability: Option<Movability>,\n-    },\n+    Closure(&'hir Closure<'hir>),\n     /// A block (e.g., `'label: { ... }`).\n     Block(&'hir Block<'hir>, Option<Label>),\n "}, {"sha": "913349e161ddc8fc7f117c89ab4ce9d4dbee5061", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -1144,23 +1144,17 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             visitor.visit_expr(subexpression);\n             walk_list!(visitor, visit_arm, arms);\n         }\n-        ExprKind::Closure {\n+        ExprKind::Closure(&Closure {\n             binder: _,\n             bound_generic_params,\n-            ref fn_decl,\n+            fn_decl,\n             body,\n             capture_clause: _,\n             fn_decl_span: _,\n             movability: _,\n-        } => {\n+        }) => {\n             walk_list!(visitor, visit_generic_param, bound_generic_params);\n-            visitor.visit_fn(\n-                FnKind::Closure,\n-                fn_decl,\n-                body,\n-                expression.span,\n-                expression.hir_id,\n-            )\n+            visitor.visit_fn(FnKind::Closure, fn_decl, body, expression.span, expression.hir_id)\n         }\n         ExprKind::Block(ref block, ref opt_label) => {\n             walk_list!(visitor, visit_label, opt_label);"}, {"sha": "0351f70db98fbf035e75ee8d0d3be2f8a63ef451", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -1441,15 +1441,15 @@ impl<'a> State<'a> {\n                 }\n                 self.bclose(expr.span);\n             }\n-            hir::ExprKind::Closure {\n+            hir::ExprKind::Closure(&hir::Closure {\n                 binder,\n                 capture_clause,\n                 bound_generic_params,\n                 fn_decl,\n                 body,\n                 fn_decl_span: _,\n                 movability: _,\n-            } => {\n+            }) => {\n                 self.print_closure_binder(binder, bound_generic_params);\n                 self.print_capture_clause(capture_clause);\n \n@@ -2037,7 +2037,7 @@ impl<'a> State<'a> {\n \n     pub fn print_closure_binder(\n         &mut self,\n-        binder: &hir::ClosureBinder,\n+        binder: hir::ClosureBinder,\n         generic_params: &[GenericParam<'_>],\n     ) {\n         let generic_params = generic_params"}, {"sha": "066bf9681b6bbc2e20defd70bc402185f722d759", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::def::Res;\n use rustc_hir::def::{CtorOf, DefKind, Namespace};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_hir::{Body, Expr, ExprKind, FnRetTy, HirId, Local, LocalSource};\n+use rustc_hir::{Body, Closure, Expr, ExprKind, FnRetTy, HirId, Local, LocalSource};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::infer::unify_key::ConstVariableOriginKind;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n@@ -1051,7 +1051,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FindInferSourceVisitor<'a, 'tcx> {\n \n         if let Some(node_ty) = self.opt_node_type(expr.hir_id) {\n             if let (\n-                &ExprKind::Closure { fn_decl, body, fn_decl_span, .. },\n+                &ExprKind::Closure(&Closure { fn_decl, body, fn_decl_span, .. }),\n                 ty::Closure(_, substs),\n             ) = (&expr.kind, node_ty.kind())\n             {"}, {"sha": "bd06c209632955cf4019c01ba4bc548b447e6c83", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -22,7 +22,7 @@ fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {\n         Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })\n         | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })\n         | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),\n-        Node::Expr(Expr { kind: ExprKind::Closure { fn_decl, .. }, .. })\n+        Node::Expr(Expr { kind: ExprKind::Closure(Closure { fn_decl, .. }), .. })\n         | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {\n             Some(fn_decl)\n         }\n@@ -54,7 +54,7 @@ pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {\n             kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),\n             ..\n         })\n-        | Node::Expr(Expr { kind: ExprKind::Closure { body, .. }, .. }) => Some(*body),\n+        | Node::Expr(Expr { kind: ExprKind::Closure(Closure { body, .. }), .. }) => Some(*body),\n \n         Node::AnonConst(constant) => Some(constant.body),\n \n@@ -279,8 +279,8 @@ impl<'hir> Map<'hir> {\n             }\n             Node::Field(_) => DefKind::Field,\n             Node::Expr(expr) => match expr.kind {\n-                ExprKind::Closure { movability: None, .. } => DefKind::Closure,\n-                ExprKind::Closure { movability: Some(_), .. } => DefKind::Generator,\n+                ExprKind::Closure(Closure { movability: None, .. }) => DefKind::Closure,\n+                ExprKind::Closure(Closure { movability: Some(_), .. }) => DefKind::Generator,\n                 _ => bug!(\"def_kind: unsupported node: {}\", self.node_to_string(hir_id)),\n             },\n             Node::GenericParam(param) => match param.kind {\n@@ -1021,7 +1021,9 @@ impl<'hir> Map<'hir> {\n                 _ => named_span(item.span, item.ident, None),\n             },\n             Node::Ctor(_) => return self.opt_span(self.get_parent_node(hir_id)),\n-            Node::Expr(Expr { kind: ExprKind::Closure { fn_decl_span, .. }, .. }) => *fn_decl_span,\n+            Node::Expr(Expr { kind: ExprKind::Closure(Closure { fn_decl_span, .. }), .. }) => {\n+                *fn_decl_span\n+            }\n             _ => self.span_with_body(hir_id),\n         };\n         Some(span)"}, {"sha": "7ae26cccb3848c75852731e1b08070e92f264ca1", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -68,9 +68,10 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n \n     // Figure out what primary body this item has.\n     let (body_id, return_ty_span, span_with_body) = match tcx.hir().get(id) {\n-        Node::Expr(hir::Expr { kind: hir::ExprKind::Closure { fn_decl, body, .. }, .. }) => {\n-            (*body, fn_decl.output.span(), None)\n-        }\n+        Node::Expr(hir::Expr {\n+            kind: hir::ExprKind::Closure(hir::Closure { fn_decl, body, .. }),\n+            ..\n+        }) => (*body, fn_decl.output.span(), None),\n         Node::Item(hir::Item {\n             kind: hir::ItemKind::Fn(hir::FnSig { decl, .. }, _, body_id),\n             span,"}, {"sha": "cdda0e388ddf049d470b27a1cacf7078257be5b5", "filename": "compiler/rustc_passes/src/loops.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Floops.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -57,7 +57,13 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n             hir::ExprKind::Loop(ref b, _, source, _) => {\n                 self.with_context(Loop(source), |v| v.visit_block(&b));\n             }\n-            hir::ExprKind::Closure { ref fn_decl, body, fn_decl_span, movability, .. } => {\n+            hir::ExprKind::Closure(&hir::Closure {\n+                ref fn_decl,\n+                body,\n+                fn_decl_span,\n+                movability,\n+                ..\n+            }) => {\n                 let cx = if let Some(Movability::Static) = movability {\n                     AsyncClosure(fn_decl_span)\n                 } else {"}, {"sha": "f7e3fac6b2e20c4f906f6a32fa8639c54a5115c9", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -273,7 +273,10 @@ impl<'tcx> ReachableContext<'tcx> {\n                 }\n                 hir::ImplItemKind::TyAlias(_) => {}\n             },\n-            Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure { body, .. }, .. }) => {\n+            Node::Expr(&hir::Expr {\n+                kind: hir::ExprKind::Closure(&hir::Closure { body, .. }),\n+                ..\n+            }) => {\n                 self.visit_nested_body(body);\n             }\n             // Nothing to recurse on for these"}, {"sha": "efab44f353d918f499f75fcd615195907a1bee52", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -571,7 +571,10 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     }\n \n     fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {\n-        if let hir::ExprKind::Closure { binder, bound_generic_params, fn_decl, .. } = e.kind {\n+        if let hir::ExprKind::Closure(hir::Closure {\n+            binder, bound_generic_params, fn_decl, ..\n+        }) = e.kind\n+        {\n             if let &hir::ClosureBinder::For { span: for_sp, .. } = binder {\n                 fn span_of_infer(ty: &hir::Ty<'_>) -> Option<Span> {\n                     struct V(Option<Span>);"}, {"sha": "e3798efc96360f3cf5cee278b3bff77a4152b5e1", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -1360,7 +1360,7 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                     }\n                 }\n             }\n-            hir::ExprKind::Closure { ref fn_decl, body, .. } => {\n+            hir::ExprKind::Closure(&hir::Closure { ref fn_decl, body, .. }) => {\n                 let id = format!(\"${}\", ex.hir_id);\n \n                 // walk arg and return types"}, {"sha": "6de03dcee15e7e82bb5bf44645ad750323fc15d0", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -1084,7 +1084,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let hir = self.tcx.hir();\n         Some(match node {\n             Node::Expr(&hir::Expr {\n-                kind: hir::ExprKind::Closure { body, fn_decl_span, .. },\n+                kind: hir::ExprKind::Closure(&hir::Closure { body, fn_decl_span, .. }),\n                 ..\n             }) => (\n                 sm.guess_head_span(fn_decl_span),"}, {"sha": "7e8872d90182824ba2bb007c7b8be1e016434158", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -103,7 +103,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 })\n             }),\n             hir::Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::Closure { body, movability, .. },\n+                kind: hir::ExprKind::Closure(hir::Closure { body, movability, .. }),\n                 ..\n             }) => self.describe_generator(*body).or_else(|| {\n                 Some(if movability.is_some() { \"an async closure\" } else { \"a closure\" })"}, {"sha": "57d0d43779a2c31414766cb46bef4678a0c6bd0e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -785,7 +785,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         // Get the name of the callable and the arguments to be used in the suggestion.\n         let (snippet, sugg) = match hir.get_if_local(def_id) {\n             Some(hir::Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::Closure { fn_decl, fn_decl_span, .. },\n+                kind: hir::ExprKind::Closure(hir::Closure { fn_decl, fn_decl_span, .. }),\n                 ..\n             })) => {\n                 err.span_label(*fn_decl_span, \"consider calling this closure\");"}, {"sha": "a6b2877d8b66e0ff49206fae702c9d6e70ce1c1f", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -285,29 +285,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let parent_node = hir.get(parent_hir_id);\n         if let (\n             hir::Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::Closure { fn_decl_span, body, .. },\n+                kind: hir::ExprKind::Closure(&hir::Closure { fn_decl_span, body, .. }),\n                 ..\n             }),\n             hir::ExprKind::Block(..),\n         ) = (parent_node, callee_node)\n         {\n-            let fn_decl_span = if hir.body(*body).generator_kind\n+            let fn_decl_span = if hir.body(body).generator_kind\n                 == Some(hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Closure))\n             {\n                 // Actually need to unwrap a few more layers of HIR to get to\n                 // the _real_ closure...\n                 let async_closure = hir.get_parent_node(hir.get_parent_node(parent_hir_id));\n                 if let hir::Node::Expr(hir::Expr {\n-                    kind: hir::ExprKind::Closure { fn_decl_span, .. },\n+                    kind: hir::ExprKind::Closure(&hir::Closure { fn_decl_span, .. }),\n                     ..\n                 }) = hir.get(async_closure)\n                 {\n-                    *fn_decl_span\n+                    fn_decl_span\n                 } else {\n                     return;\n                 }\n             } else {\n-                *fn_decl_span\n+                fn_decl_span\n             };\n \n             let start = fn_decl_span.shrink_to_lo();"}, {"sha": "9c9a2096ae9a481ecec8f697bf150495e4cf8bda", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -1577,8 +1577,8 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         let parent_id = fcx.tcx.hir().get_parent_node(id);\n         let parent = fcx.tcx.hir().get(parent_id);\n         if let Some(expr) = expression\n-            && let hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Closure { body, .. }, .. }) = parent\n-            && !matches!(fcx.tcx.hir().body(*body).value.kind, hir::ExprKind::Block(..))\n+            && let hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(&hir::Closure { body, .. }), .. }) = parent\n+            && !matches!(fcx.tcx.hir().body(body).value.kind, hir::ExprKind::Block(..))\n         {\n             fcx.suggest_missing_semicolon(&mut err, expr, expected, true);\n         }"}, {"sha": "83e2b84c20a3b39ef8bbc217cb46b6fd42b8a9e3", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -483,7 +483,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let param_parent = self.tcx.hir().get_parent_node(*param_hir_id);\n         let Some(Node::Expr(hir::Expr {\n             hir_id: expr_hir_id,\n-            kind: hir::ExprKind::Closure { fn_decl: closure_fn_decl, .. },\n+            kind: hir::ExprKind::Closure(hir::Closure { fn_decl: closure_fn_decl, .. }),\n             ..\n         })) = self.tcx.hir().find(param_parent) else {\n             return None;"}, {"sha": "c97209fe44418b46ac3302efd3771c4a3eded8a7", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -35,7 +35,7 @@ use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{ExprKind, HirId, QPath};\n+use rustc_hir::{Closure, ExprKind, HirId, QPath};\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::InferOk;\n@@ -319,7 +319,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ExprKind::Match(discrim, arms, match_src) => {\n                 self.check_match(expr, &discrim, arms, expected, match_src)\n             }\n-            ExprKind::Closure { capture_clause, fn_decl, body, movability, .. } => {\n+            ExprKind::Closure(&Closure { capture_clause, fn_decl, body, movability, .. }) => {\n                 self.check_expr_closure(expr, capture_clause, &fn_decl, body, movability, expected)\n             }\n             ExprKind::Block(body, _) => self.check_block_with_expected(&body, expected),"}, {"sha": "fcb243bc9f2ee28999315193e9315cb1da533370", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -1821,7 +1821,7 @@ fn label_fn_like<'tcx>(\n     } else {\n         match tcx.hir().get_if_local(def_id) {\n             Some(hir::Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::Closure { fn_decl_span, .. },\n+                kind: hir::ExprKind::Closure(hir::Closure { fn_decl_span, .. }),\n                 ..\n             })) => {\n                 let spans: MultiSpan = (*fn_decl_span).into();"}, {"sha": "a27dda5fc06e6f10ebf099fced85efc7cc5eceaa", "filename": "compiler/rustc_typeck/src/check/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -335,7 +335,7 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n     match expr.kind {\n         // Manually recurse over closures and inline consts, because they are the only\n         // case of nested bodies that share the parent environment.\n-        hir::ExprKind::Closure { body, .. }\n+        hir::ExprKind::Closure(&hir::Closure { body, .. })\n         | hir::ExprKind::ConstBlock(hir::AnonConst { body, .. }) => {\n             let body = visitor.tcx.hir().body(body);\n             visitor.visit_body(body);"}, {"sha": "08890f299672237b4aaf4e586b5e238ea0b7a78b", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -142,7 +142,7 @@ struct InferBorrowKindVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for InferBorrowKindVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n         match expr.kind {\n-            hir::ExprKind::Closure { capture_clause, body: body_id, .. } => {\n+            hir::ExprKind::Closure(&hir::Closure { capture_clause, body: body_id, .. }) => {\n                 let body = self.fcx.tcx.hir().body(body_id);\n                 self.visit_body(body);\n                 self.fcx.analyze_closure(expr.hir_id, expr.span, body_id, body, capture_clause);"}, {"sha": "0cbb0e25d0d429cb6340b9e19671985c856e0bf4", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -263,7 +263,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n         self.fix_index_builtin_expr(e);\n \n         match e.kind {\n-            hir::ExprKind::Closure { body, .. } => {\n+            hir::ExprKind::Closure(&hir::Closure { body, .. }) => {\n                 let body = self.fcx.tcx.hir().body(body);\n                 for param in body.params {\n                     self.visit_node_id(e.span, param.hir_id);"}, {"sha": "40ac7424be865efdd79327e121ade9931e7cd399", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4fee9841e21ac84335d214af163a1b652ec9a2/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=df4fee9841e21ac84335d214af163a1b652ec9a2", "patch": "@@ -1717,8 +1717,10 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n     // provide junk type parameter defs - the only place that\n     // cares about anything but the length is instantiation,\n     // and we don't do that for closures.\n-    if let Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure { movability: gen, .. }, .. }) =\n-        node\n+    if let Node::Expr(&hir::Expr {\n+        kind: hir::ExprKind::Closure(hir::Closure { movability: gen, .. }),\n+        ..\n+    }) = node\n     {\n         let dummy_args = if gen.is_some() {\n             &[\"<resume_ty>\", \"<yield_ty>\", \"<return_ty>\", \"<witness>\", \"<upvars>\"][..]\n@@ -2564,7 +2566,7 @@ fn is_foreign_item(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n fn generator_kind(tcx: TyCtxt<'_>, def_id: DefId) -> Option<hir::GeneratorKind> {\n     match tcx.hir().get_if_local(def_id) {\n         Some(Node::Expr(&rustc_hir::Expr {\n-            kind: rustc_hir::ExprKind::Closure { body, .. },\n+            kind: rustc_hir::ExprKind::Closure(&rustc_hir::Closure { body, .. }),\n             ..\n         })) => tcx.hir().body(body).generator_kind(),\n         Some(_) => None,"}]}