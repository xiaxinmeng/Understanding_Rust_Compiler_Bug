{"sha": "9d29793614cc810fb8febf7f1a2e0202f3919bb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMjk3OTM2MTRjYzgxMGZiOGZlYmY3ZjFhMmUwMjAyZjM5MTliYjY=", "commit": {"author": {"name": "dylni", "email": "46035563+dylni@users.noreply.github.com", "date": "2021-01-18T04:12:29Z"}, "committer": {"name": "dylni", "email": "46035563+dylni@users.noreply.github.com", "date": "2021-02-13T03:01:04Z"}, "message": "Improve design of `assert_len`", "tree": {"sha": "bf124824063aead8e27099ec4144deb5facfa88e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf124824063aead8e27099ec4144deb5facfa88e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d29793614cc810fb8febf7f1a2e0202f3919bb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d29793614cc810fb8febf7f1a2e0202f3919bb6", "html_url": "https://github.com/rust-lang/rust/commit/9d29793614cc810fb8febf7f1a2e0202f3919bb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d29793614cc810fb8febf7f1a2e0202f3919bb6/comments", "author": {"login": "dylni", "id": 46035563, "node_id": "MDQ6VXNlcjQ2MDM1NTYz", "avatar_url": "https://avatars.githubusercontent.com/u/46035563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dylni", "html_url": "https://github.com/dylni", "followers_url": "https://api.github.com/users/dylni/followers", "following_url": "https://api.github.com/users/dylni/following{/other_user}", "gists_url": "https://api.github.com/users/dylni/gists{/gist_id}", "starred_url": "https://api.github.com/users/dylni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dylni/subscriptions", "organizations_url": "https://api.github.com/users/dylni/orgs", "repos_url": "https://api.github.com/users/dylni/repos", "events_url": "https://api.github.com/users/dylni/events{/privacy}", "received_events_url": "https://api.github.com/users/dylni/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dylni", "id": 46035563, "node_id": "MDQ6VXNlcjQ2MDM1NTYz", "avatar_url": "https://avatars.githubusercontent.com/u/46035563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dylni", "html_url": "https://github.com/dylni", "followers_url": "https://api.github.com/users/dylni/followers", "following_url": "https://api.github.com/users/dylni/following{/other_user}", "gists_url": "https://api.github.com/users/dylni/gists{/gist_id}", "starred_url": "https://api.github.com/users/dylni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dylni/subscriptions", "organizations_url": "https://api.github.com/users/dylni/orgs", "repos_url": "https://api.github.com/users/dylni/repos", "events_url": "https://api.github.com/users/dylni/events{/privacy}", "received_events_url": "https://api.github.com/users/dylni/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f5aee2d5241139d808f4fdece0026603489afd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f5aee2d5241139d808f4fdece0026603489afd1", "html_url": "https://github.com/rust-lang/rust/commit/3f5aee2d5241139d808f4fdece0026603489afd1"}], "stats": {"total": 67, "additions": 38, "deletions": 29}, "files": [{"sha": "0c267cbc106b9dad0fe5b5fb4a1af7aa566429a1", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d29793614cc810fb8febf7f1a2e0202f3919bb6/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d29793614cc810fb8febf7f1a2e0202f3919bb6/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=9d29793614cc810fb8febf7f1a2e0202f3919bb6", "patch": "@@ -1063,7 +1063,7 @@ impl<T> VecDeque<T> {\n     where\n         R: RangeBounds<usize>,\n     {\n-        let Range { start, end } = range.assert_len(self.len());\n+        let Range { start, end } = range.ensure_subset_of(..self.len());\n         let tail = self.wrap_add(self.tail, start);\n         let head = self.wrap_add(self.tail, end);\n         (tail, head)"}, {"sha": "71b4883aca2843bf11cdd17d3fdcd6ff5ffec0a8", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d29793614cc810fb8febf7f1a2e0202f3919bb6/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d29793614cc810fb8febf7f1a2e0202f3919bb6/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=9d29793614cc810fb8febf7f1a2e0202f3919bb6", "patch": "@@ -115,7 +115,7 @@\n #![feature(or_patterns)]\n #![feature(pattern)]\n #![feature(ptr_internals)]\n-#![feature(range_bounds_assert_len)]\n+#![feature(range_bounds_ensure_subset_of)]\n #![feature(rustc_attrs)]\n #![feature(receiver_trait)]\n #![cfg_attr(bootstrap, feature(min_const_generics))]"}, {"sha": "3ab5ca4f566ad378669070e447ddeaebc8ecd908", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d29793614cc810fb8febf7f1a2e0202f3919bb6/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d29793614cc810fb8febf7f1a2e0202f3919bb6/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=9d29793614cc810fb8febf7f1a2e0202f3919bb6", "patch": "@@ -1510,14 +1510,14 @@ impl String {\n         // of the vector version. The data is just plain bytes.\n         // Because the range removal happens in Drop, if the Drain iterator is leaked,\n         // the removal will not happen.\n-        let Range { start, end } = range.assert_len(self.len());\n+        let Range { start, end } = range.ensure_subset_of(..self.len());\n         assert!(self.is_char_boundary(start));\n         assert!(self.is_char_boundary(end));\n \n         // Take out two simultaneous borrows. The &mut String won't be accessed\n         // until iteration is over, in Drop.\n         let self_ptr = self as *mut _;\n-        // SAFETY: `assert_len` and `is_char_boundary` do the appropriate bounds checks.\n+        // SAFETY: `ensure_subset_of` and `is_char_boundary` do the appropriate bounds checks.\n         let chars_iter = unsafe { self.get_unchecked(start..end) }.chars();\n \n         Drain { start, end, iter: chars_iter, string: self_ptr }"}, {"sha": "5c20f382224c11b81d7284fec8a406fa65df95e8", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d29793614cc810fb8febf7f1a2e0202f3919bb6/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d29793614cc810fb8febf7f1a2e0202f3919bb6/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=9d29793614cc810fb8febf7f1a2e0202f3919bb6", "patch": "@@ -1650,7 +1650,7 @@ impl<T, A: Allocator> Vec<T, A> {\n         // the hole, and the vector length is restored to the new length.\n         //\n         let len = self.len();\n-        let Range { start, end } = range.assert_len(len);\n+        let Range { start, end } = range.ensure_subset_of(..len);\n \n         unsafe {\n             // set self.vec length's to start, to be safe in case Drain is leaked"}, {"sha": "7a0dd5a8f0f7238c09270c4937098a023aa6dd0a", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9d29793614cc810fb8febf7f1a2e0202f3919bb6/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d29793614cc810fb8febf7f1a2e0202f3919bb6/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=9d29793614cc810fb8febf7f1a2e0202f3919bb6", "patch": "@@ -766,8 +766,15 @@ pub trait RangeBounds<T: ?Sized> {\n \n     /// Performs bounds-checking of this range.\n     ///\n+    /// This method is similar to [`Index::index`] for slices, but it returns a\n+    /// [`Range`] equivalent to this range. You can use this method to turn any\n+    /// range into `start` and `end` values.\n+    ///\n+    /// The given range is the range of the slice to use for bounds-checking. It\n+    /// should be a [`RangeTo`] range that ends at the length of the slice.\n+    ///\n     /// The returned [`Range`] is safe to pass to [`slice::get_unchecked`] and\n-    /// [`slice::get_unchecked_mut`] for slices of the given length.\n+    /// [`slice::get_unchecked_mut`] for slices with the given range.\n     ///\n     /// [`slice::get_unchecked`]: ../../std/primitive.slice.html#method.get_unchecked\n     /// [`slice::get_unchecked_mut`]: ../../std/primitive.slice.html#method.get_unchecked_mut\n@@ -779,49 +786,51 @@ pub trait RangeBounds<T: ?Sized> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(range_bounds_assert_len)]\n+    /// #![feature(range_bounds_ensure_subset_of)]\n     ///\n     /// use std::ops::RangeBounds;\n     ///\n     /// let v = [10, 40, 30];\n-    /// assert_eq!(1..2, (1..2).assert_len(v.len()));\n-    /// assert_eq!(0..2, (..2).assert_len(v.len()));\n-    /// assert_eq!(1..3, (1..).assert_len(v.len()));\n+    /// assert_eq!(1..2, (1..2).ensure_subset_of(..v.len()));\n+    /// assert_eq!(0..2, (..2).ensure_subset_of(..v.len()));\n+    /// assert_eq!(1..3, (1..).ensure_subset_of(..v.len()));\n     /// ```\n     ///\n     /// Panics when [`Index::index`] would panic:\n     ///\n     /// ```should_panic\n-    /// #![feature(range_bounds_assert_len)]\n+    /// #![feature(range_bounds_ensure_subset_of)]\n     ///\n     /// use std::ops::RangeBounds;\n     ///\n-    /// (2..1).assert_len(3);\n+    /// (2..1).ensure_subset_of(..3);\n     /// ```\n     ///\n     /// ```should_panic\n-    /// #![feature(range_bounds_assert_len)]\n+    /// #![feature(range_bounds_ensure_subset_of)]\n     ///\n     /// use std::ops::RangeBounds;\n     ///\n-    /// (1..4).assert_len(3);\n+    /// (1..4).ensure_subset_of(..3);\n     /// ```\n     ///\n     /// ```should_panic\n-    /// #![feature(range_bounds_assert_len)]\n+    /// #![feature(range_bounds_ensure_subset_of)]\n     ///\n     /// use std::ops::RangeBounds;\n     ///\n-    /// (1..=usize::MAX).assert_len(3);\n+    /// (1..=usize::MAX).ensure_subset_of(..3);\n     /// ```\n     ///\n     /// [`Index::index`]: crate::ops::Index::index\n     #[track_caller]\n-    #[unstable(feature = \"range_bounds_assert_len\", issue = \"76393\")]\n-    fn assert_len(self, len: usize) -> Range<usize>\n+    #[unstable(feature = \"range_bounds_ensure_subset_of\", issue = \"76393\")]\n+    fn ensure_subset_of(self, range: RangeTo<usize>) -> Range<usize>\n     where\n         Self: RangeBounds<usize>,\n     {\n+        let len = range.end;\n+\n         let start: Bound<&usize> = self.start_bound();\n         let start = match start {\n             Bound::Included(&start) => start,"}, {"sha": "90351be69291ebcb729852af2ae2fc85abe423a9", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d29793614cc810fb8febf7f1a2e0202f3919bb6/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d29793614cc810fb8febf7f1a2e0202f3919bb6/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=9d29793614cc810fb8febf7f1a2e0202f3919bb6", "patch": "@@ -3052,7 +3052,7 @@ impl<T> [T] {\n     where\n         T: Copy,\n     {\n-        let Range { start: src_start, end: src_end } = src.assert_len(self.len());\n+        let Range { start: src_start, end: src_end } = src.ensure_subset_of(..self.len());\n         let count = src_end - src_start;\n         assert!(dest <= self.len() - count, \"dest is out of bounds\");\n         // SAFETY: the conditions for `ptr::copy` have all been checked above,"}, {"sha": "0e95d5ded92969c2d7356f90f5b4feafdfd2e5b0", "filename": "src/doc/unstable-book/src/library-features/range-bounds-assert-len.md", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f5aee2d5241139d808f4fdece0026603489afd1/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Frange-bounds-assert-len.md", "raw_url": "https://github.com/rust-lang/rust/raw/3f5aee2d5241139d808f4fdece0026603489afd1/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Frange-bounds-assert-len.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Frange-bounds-assert-len.md?ref=3f5aee2d5241139d808f4fdece0026603489afd1", "patch": "@@ -1,10 +0,0 @@\n-# `range_bounds_assert_len`\n-\n-The tracking issue for this feature is: [#76393]\n-\n-------------------------\n-\n-This adds [`RangeBounds::assert_len`].\n-\n-[#76393]: https://github.com/rust-lang/rust/issues/76393\n-[`RangeBounds::assert_len`]: https://doc.rust-lang.org/nightly/std/ops/trait.RangeBounds.html#method.assert_len"}, {"sha": "ea3f01ff5f9d192ec1f7473614d66ae4185143ea", "filename": "src/doc/unstable-book/src/library-features/range-bounds-ensure-subset-of.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d29793614cc810fb8febf7f1a2e0202f3919bb6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Frange-bounds-ensure-subset-of.md", "raw_url": "https://github.com/rust-lang/rust/raw/9d29793614cc810fb8febf7f1a2e0202f3919bb6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Frange-bounds-ensure-subset-of.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Frange-bounds-ensure-subset-of.md?ref=9d29793614cc810fb8febf7f1a2e0202f3919bb6", "patch": "@@ -0,0 +1,10 @@\n+# `range_bounds_ensure_subset_of`\n+\n+The tracking issue for this feature is: [#76393]\n+\n+------------------------\n+\n+This adds [`RangeBounds::ensure_subset_of`].\n+\n+[#76393]: https://github.com/rust-lang/rust/issues/76393\n+[`RangeBounds::ensure_subset_of`]: https://doc.rust-lang.org/nightly/std/ops/trait.RangeBounds.html#method.ensure_subset_of"}]}