{"sha": "2cd13189ce328af88b61393cd567b6eb3db9ca2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZDEzMTg5Y2UzMjhhZjg4YjYxMzkzY2Q1NjdiNmViM2RiOWNhMmI=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-08-23T21:04:05Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-08-23T21:04:05Z"}, "message": "build fixes", "tree": {"sha": "230a6e3c9898133d0a919ffb991e5566d3375521", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/230a6e3c9898133d0a919ffb991e5566d3375521"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cd13189ce328af88b61393cd567b6eb3db9ca2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cd13189ce328af88b61393cd567b6eb3db9ca2b", "html_url": "https://github.com/rust-lang/rust/commit/2cd13189ce328af88b61393cd567b6eb3db9ca2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cd13189ce328af88b61393cd567b6eb3db9ca2b/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb563a93dcb076f2afe97d272591d71486906fc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb563a93dcb076f2afe97d272591d71486906fc2", "html_url": "https://github.com/rust-lang/rust/commit/cb563a93dcb076f2afe97d272591d71486906fc2"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "f9ff2d2e2a5a2a32718936da1355068e42e890d9", "filename": "src/librustc/infer/error_reporting/util.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/2cd13189ce328af88b61393cd567b6eb3db9ca2b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd13189ce328af88b61393cd567b6eb3db9ca2b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs?ref=2cd13189ce328af88b61393cd567b6eb3db9ca2b", "patch": "@@ -120,11 +120,27 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         if let ty::ReFree(ref free_region) = *region {\n             if let ty::BrAnon(..) = free_region.bound_region {\n                 let anonymous_region_binding_scope = free_region.scope;\n+                let node_id = self.tcx\n+                    .hir\n+                    .as_local_node_id(anonymous_region_binding_scope)\n+                    .unwrap();\n+                let mut is_impl_item = false;\n+                match self.tcx.hir.find(node_id) {\n+\n+                    Some(hir_map::NodeItem(..)) |\n+                    Some(hir_map::NodeTraitItem(..)) => {\n+                        // Success -- proceed to return Some below\n+                    }\n+                    Some(hir_map::NodeImplItem(..)) => {\n+                        is_impl_item =\n+                            self.is_bound_region_in_impl_item(anonymous_region_binding_scope);\n+                    }\n+                    _ => return None,\n+                }\n                 return Some(FreeRegionInfo {\n                                 def_id: anonymous_region_binding_scope,\n                                 boundregion: free_region.bound_region,\n-                                is_impl_item:\n-                                self.is_bound_region_in_impl_item(anonymous_region_binding_scope),\n+                                is_impl_item: is_impl_item,\n                             });\n             }\n         }\n@@ -162,34 +178,18 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n     // Here we check if the bound region is in Impl Item.\n     pub fn is_bound_region_in_impl_item(&self, anonymous_region_binding_scope: DefId) -> bool {\n-        let node_id = self.tcx\n-            .hir\n-            .as_local_node_id(anonymous_region_binding_scope)\n-            .unwrap();\n-        match self.tcx.hir.find(node_id) {\n-\n-            Some(hir_map::NodeItem(..)) |\n-            Some(hir_map::NodeTraitItem(..)) => {\n-                // Success -- proceed to return Some below\n-            }\n-            Some(hir_map::NodeImplItem(..)) => {\n-                let container_id = self.tcx\n-                    .associated_item(anonymous_region_binding_scope)\n-                    .container\n-                    .id();\n-                if self.tcx.impl_trait_ref(container_id).is_some() {\n-                    // For now, we do not try to target impls of traits. This is\n-                    // because this message is going to suggest that the user\n-                    // change the fn signature, but they may not be free to do so,\n-                    // since the signature must match the trait.\n-                    //\n-                    // FIXME(#42706) -- in some cases, we could do better here.\n-                    return true;\n-                }\n-            }\n-            _ => {\n-                return false;\n-            }\n+        let container_id = self.tcx\n+            .associated_item(anonymous_region_binding_scope)\n+            .container\n+            .id();\n+        if self.tcx.impl_trait_ref(container_id).is_some() {\n+            // For now, we do not try to target impls of traits. This is\n+            // because this message is going to suggest that the user\n+            // change the fn signature, but they may not be free to do so,\n+            // since the signature must match the trait.\n+            //\n+            // FIXME(#42706) -- in some cases, we could do better here.\n+            return true;\n         }\n         false\n     }"}]}