{"sha": "317f494c72aead3fecd73788569983fd2f8ea8a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxN2Y0OTRjNzJhZWFkM2ZlY2Q3Mzc4ODU2OTk4M2ZkMmY4ZWE4YTM=", "commit": {"author": {"name": "Murarth", "email": "murarth@gmail.com", "date": "2018-11-07T17:59:25Z"}, "committer": {"name": "Murarth", "email": "murarth@gmail.com", "date": "2018-11-08T18:50:02Z"}, "message": "Fix Rc/Arc allocation layout\n\n* Rounds allocation layout up to a multiple of alignment\n* Adds a convenience method `Layout::pad_to_align` to perform rounding", "tree": {"sha": "9ff610a28d4e52ba1301f8472d3aa7dc403aaeaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ff610a28d4e52ba1301f8472d3aa7dc403aaeaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/317f494c72aead3fecd73788569983fd2f8ea8a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/317f494c72aead3fecd73788569983fd2f8ea8a3", "html_url": "https://github.com/rust-lang/rust/commit/317f494c72aead3fecd73788569983fd2f8ea8a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/317f494c72aead3fecd73788569983fd2f8ea8a3/comments", "author": {"login": "murarth", "id": 1332722, "node_id": "MDQ6VXNlcjEzMzI3MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1332722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/murarth", "html_url": "https://github.com/murarth", "followers_url": "https://api.github.com/users/murarth/followers", "following_url": "https://api.github.com/users/murarth/following{/other_user}", "gists_url": "https://api.github.com/users/murarth/gists{/gist_id}", "starred_url": "https://api.github.com/users/murarth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/murarth/subscriptions", "organizations_url": "https://api.github.com/users/murarth/orgs", "repos_url": "https://api.github.com/users/murarth/repos", "events_url": "https://api.github.com/users/murarth/events{/privacy}", "received_events_url": "https://api.github.com/users/murarth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "murarth", "id": 1332722, "node_id": "MDQ6VXNlcjEzMzI3MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1332722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/murarth", "html_url": "https://github.com/murarth", "followers_url": "https://api.github.com/users/murarth/followers", "following_url": "https://api.github.com/users/murarth/following{/other_user}", "gists_url": "https://api.github.com/users/murarth/gists{/gist_id}", "starred_url": "https://api.github.com/users/murarth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/murarth/subscriptions", "organizations_url": "https://api.github.com/users/murarth/orgs", "repos_url": "https://api.github.com/users/murarth/repos", "events_url": "https://api.github.com/users/murarth/events{/privacy}", "received_events_url": "https://api.github.com/users/murarth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "653da4fd006c97625247acd7e076d0782cdc149b", "url": "https://api.github.com/repos/rust-lang/rust/commits/653da4fd006c97625247acd7e076d0782cdc149b", "html_url": "https://github.com/rust-lang/rust/commit/653da4fd006c97625247acd7e076d0782cdc149b"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "bb52d7990ff5772fdc27c821ee3c730896af9630", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/317f494c72aead3fecd73788569983fd2f8ea8a3/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317f494c72aead3fecd73788569983fd2f8ea8a3/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=317f494c72aead3fecd73788569983fd2f8ea8a3", "patch": "@@ -672,14 +672,16 @@ impl<T: ?Sized> Rc<T> {\n         // Previously, layout was calculated on the expression\n         // `&*(ptr as *const RcBox<T>)`, but this created a misaligned\n         // reference (see #54908).\n-        let (layout, _) = Layout::new::<RcBox<()>>()\n-            .extend(Layout::for_value(&*ptr)).unwrap();\n+        let layout = Layout::new::<RcBox<()>>()\n+            .extend(Layout::for_value(&*ptr)).unwrap().0\n+            .pad_to_align().unwrap();\n \n         let mem = Global.alloc(layout)\n             .unwrap_or_else(|_| handle_alloc_error(layout));\n \n         // Initialize the RcBox\n         let inner = set_data_ptr(ptr as *mut T, mem.as_ptr() as *mut u8) as *mut RcBox<T>;\n+        debug_assert_eq!(Layout::for_value(&*inner), layout);\n \n         ptr::write(&mut (*inner).strong, Cell::new(1));\n         ptr::write(&mut (*inner).weak, Cell::new(1));"}, {"sha": "b63b3684964bb64038366cf6d12365614a99c2a9", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/317f494c72aead3fecd73788569983fd2f8ea8a3/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317f494c72aead3fecd73788569983fd2f8ea8a3/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=317f494c72aead3fecd73788569983fd2f8ea8a3", "patch": "@@ -575,14 +575,16 @@ impl<T: ?Sized> Arc<T> {\n         // Previously, layout was calculated on the expression\n         // `&*(ptr as *const ArcInner<T>)`, but this created a misaligned\n         // reference (see #54908).\n-        let (layout, _) = Layout::new::<ArcInner<()>>()\n-            .extend(Layout::for_value(&*ptr)).unwrap();\n+        let layout = Layout::new::<ArcInner<()>>()\n+            .extend(Layout::for_value(&*ptr)).unwrap().0\n+            .pad_to_align().unwrap();\n \n         let mem = Global.alloc(layout)\n             .unwrap_or_else(|_| handle_alloc_error(layout));\n \n         // Initialize the ArcInner\n         let inner = set_data_ptr(ptr as *mut T, mem.as_ptr() as *mut u8) as *mut ArcInner<T>;\n+        debug_assert_eq!(Layout::for_value(&*inner), layout);\n \n         ptr::write(&mut (*inner).strong, atomic::AtomicUsize::new(1));\n         ptr::write(&mut (*inner).weak, atomic::AtomicUsize::new(1));"}, {"sha": "dd3e8da18a9661e26ed4669593ee9a03f13a11fe", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/317f494c72aead3fecd73788569983fd2f8ea8a3/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317f494c72aead3fecd73788569983fd2f8ea8a3/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=317f494c72aead3fecd73788569983fd2f8ea8a3", "patch": "@@ -218,6 +218,23 @@ impl Layout {\n         len_rounded_up.wrapping_sub(len)\n     }\n \n+    /// Creates a layout by rounding the size of this layout up to a multiple\n+    /// of the layout's alignment.\n+    ///\n+    /// Returns `Err` if the padded size would overflow.\n+    ///\n+    /// This is equivalent to adding the result of `padding_needed_for`\n+    /// to the layout's current size.\n+    #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n+    #[inline]\n+    pub fn pad_to_align(&self) -> Result<Layout, LayoutErr> {\n+        let pad = self.padding_needed_for(self.align());\n+        let new_size = self.size().checked_add(pad)\n+            .ok_or(LayoutErr { private: () })?;\n+\n+        Layout::from_size_align(new_size, self.align())\n+    }\n+\n     /// Creates a layout describing the record for `n` instances of\n     /// `self`, with a suitable amount of padding between each to\n     /// ensure that each instance is given its requested size and"}]}