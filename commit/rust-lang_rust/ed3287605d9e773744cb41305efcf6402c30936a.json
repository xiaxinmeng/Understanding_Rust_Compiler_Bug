{"sha": "ed3287605d9e773744cb41305efcf6402c30936a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMzI4NzYwNWQ5ZTc3Mzc0NGNiNDEzMDVlZmNmNjQwMmMzMDkzNmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-12T10:27:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-12T10:27:18Z"}, "message": "Auto merge of #3757 - mikerite:fix-2542, r=oli-obk\n\nFix `needless_range_loop` bad suggestion\n\nDetect if the index variable is used inside a closure.\n\nFixes #2542", "tree": {"sha": "ffb03bef949ac8754bb86750a079c6a493cbfce8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffb03bef949ac8754bb86750a079c6a493cbfce8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed3287605d9e773744cb41305efcf6402c30936a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed3287605d9e773744cb41305efcf6402c30936a", "html_url": "https://github.com/rust-lang/rust/commit/ed3287605d9e773744cb41305efcf6402c30936a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed3287605d9e773744cb41305efcf6402c30936a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "206636858301328c7c407329d10e8dc86d6fb61a", "url": "https://api.github.com/repos/rust-lang/rust/commits/206636858301328c7c407329d10e8dc86d6fb61a", "html_url": "https://github.com/rust-lang/rust/commit/206636858301328c7c407329d10e8dc86d6fb61a"}, {"sha": "217965e85527f1caf99e86153f11f676f778a360", "url": "https://api.github.com/repos/rust-lang/rust/commits/217965e85527f1caf99e86153f11f676f778a360", "html_url": "https://github.com/rust-lang/rust/commit/217965e85527f1caf99e86153f11f676f778a360"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "99ed9fc86fdef312849767e9f1b200f1a14c4b2f", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ed3287605d9e773744cb41305efcf6402c30936a/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3287605d9e773744cb41305efcf6402c30936a/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=ed3287605d9e773744cb41305efcf6402c30936a", "patch": "@@ -1830,17 +1830,29 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n             if let ExprKind::Path(ref qpath) = expr.node;\n             if let QPath::Resolved(None, ref path) = *qpath;\n             if path.segments.len() == 1;\n-            if let Def::Local(local_id) = self.cx.tables.qpath_def(qpath, expr.hir_id);\n             then {\n-                if local_id == self.var {\n-                    // we are not indexing anything, record that\n-                    self.nonindex = true;\n-                } else {\n-                    // not the correct variable, but still a variable\n-                    self.referenced.insert(path.segments[0].ident.name);\n+                match self.cx.tables.qpath_def(qpath, expr.hir_id) {\n+                    Def::Upvar(local_id, ..) => {\n+                        if local_id == self.var {\n+                            // we are not indexing anything, record that\n+                            self.nonindex = true;\n+                        }\n+                    }\n+                    Def::Local(local_id) =>\n+                    {\n+\n+                        if local_id == self.var {\n+                            self.nonindex = true;\n+                        } else {\n+                            // not the correct variable, but still a variable\n+                            self.referenced.insert(path.segments[0].ident.name);\n+                        }\n+                    }\n+                    _ => {}\n                 }\n             }\n         }\n+\n         let old = self.prefer_mutable;\n         match expr.node {\n             ExprKind::AssignOp(_, ref lhs, ref rhs) | ExprKind::Assign(ref lhs, ref rhs) => {\n@@ -1880,6 +1892,10 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                     self.visit_expr(expr);\n                 }\n             },\n+            ExprKind::Closure(_, _, body_id, ..) => {\n+                let body = self.cx.tcx.hir().body(body_id);\n+                self.visit_expr(&body.value);\n+            },\n             _ => walk_expr(self, expr),\n         }\n         self.prefer_mutable = old;"}, {"sha": "5f22e2645d12b4d17b5320679dd17e5c8327e3b1", "filename": "tests/ui/needless_range_loop.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed3287605d9e773744cb41305efcf6402c30936a/tests%2Fui%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3287605d9e773744cb41305efcf6402c30936a/tests%2Fui%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop.rs?ref=ed3287605d9e773744cb41305efcf6402c30936a", "patch": "@@ -80,4 +80,9 @@ fn main() {\n     for i in 1..3 {\n         println!(\"{}\", arr[i]);\n     }\n+\n+    // #2542\n+    for i in 0..vec.len() {\n+        vec[i] = Some(1).unwrap_or_else(|| panic!(\"error on {}\", i));\n+    }\n }"}, {"sha": "d1cc9b3ce727a6f0a796c54cf7d16581fea73efa", "filename": "tests/ui/needless_range_loop.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed3287605d9e773744cb41305efcf6402c30936a/tests%2Fui%2Fneedless_range_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed3287605d9e773744cb41305efcf6402c30936a/tests%2Fui%2Fneedless_range_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop.stderr?ref=ed3287605d9e773744cb41305efcf6402c30936a", "patch": "@@ -80,5 +80,15 @@ help: consider using an iterator\n LL |     for <item> in arr.iter().skip(1) {\n    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: the loop variable `i` is used to index `vec`\n+  --> $DIR/needless_range_loop.rs:85:14\n+   |\n+LL |     for i in 0..vec.len() {\n+   |              ^^^^^^^^^^^^\n+help: consider using an iterator\n+   |\n+LL |     for (i, <item>) in vec.iter_mut().enumerate() {\n+   |         ^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 9 previous errors\n "}]}