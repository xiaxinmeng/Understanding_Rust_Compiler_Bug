{"sha": "c53e4b38779c3c074ae571b8520ab08e5bb0b904", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1M2U0YjM4Nzc5YzNjMDc0YWU1NzFiODUyMGFiMDhlNWJiMGI5MDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-03T01:22:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-03T01:22:39Z"}, "message": "Auto merge of #70642 - eddyb:remap-sysroot-src, r=Mark-Simulacrum\n\nTranslate the virtual `/rustc/$hash` prefix back to a real directory.\n\nCloses #53486 and fixes #53081, by undoing the remapping to `/rustc/$hash` on the fly, when appropriate (e.g. our testsuites, or user crates that depend on `libstd`), but not during the Rust build itself (as that could leak the absolute build directory into the artifacts, breaking deterministic builds).\n\nTested locally by setting `remap-debuginfo = true` in `config.toml`, which without these changes, was causing 56 tests to fail (see https://github.com/rust-lang/rust/issues/53081#issuecomment-606703215 for more details).\n\ncc @Mark-Simulacrum @alexcrichton @ehuss", "tree": {"sha": "c89f26c901fb7a0370bb70f7a81609924908c180", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c89f26c901fb7a0370bb70f7a81609924908c180"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c53e4b38779c3c074ae571b8520ab08e5bb0b904", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c53e4b38779c3c074ae571b8520ab08e5bb0b904", "html_url": "https://github.com/rust-lang/rust/commit/c53e4b38779c3c074ae571b8520ab08e5bb0b904", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c53e4b38779c3c074ae571b8520ab08e5bb0b904/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c520802785e5f2b4312f1a364f53577d9a521815", "url": "https://api.github.com/repos/rust-lang/rust/commits/c520802785e5f2b4312f1a364f53577d9a521815", "html_url": "https://github.com/rust-lang/rust/commit/c520802785e5f2b4312f1a364f53577d9a521815"}, {"sha": "8deff18529e232bd967f3e0efa008bf2087cde2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8deff18529e232bd967f3e0efa008bf2087cde2d", "html_url": "https://github.com/rust-lang/rust/commit/8deff18529e232bd967f3e0efa008bf2087cde2d"}], "stats": {"total": 953, "additions": 350, "deletions": 603}, "files": [{"sha": "b14352d7f4ba0ddd25e4232d3e32f7aa2d3f1f51", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1022,8 +1022,13 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUSTC_HOST_CRT_STATIC\", x.to_string());\n         }\n \n-        if let Some(map) = self.build.debuginfo_map(GitRepo::Rustc) {\n+        if let Some(map_to) = self.build.debuginfo_map_to(GitRepo::Rustc) {\n+            let map = format!(\"{}={}\", self.build.src.display(), map_to);\n             cargo.env(\"RUSTC_DEBUGINFO_MAP\", map);\n+\n+            // `rustc` needs to know the virtual `/rustc/$hash` we're mapping to,\n+            // in order to opportunistically reverse it later.\n+            cargo.env(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\", map_to);\n         }\n \n         // Enable usage of unstable features"}, {"sha": "e6a1814c4f7e7fcfb998898364d07bf459055c8c", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -22,7 +22,7 @@ use serde::Deserialize;\n use crate::builder::Cargo;\n use crate::dist;\n use crate::native;\n-use crate::util::{exe, is_dylib};\n+use crate::util::{exe, is_dylib, symlink_dir};\n use crate::{Compiler, GitRepo, Mode};\n \n use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n@@ -633,6 +633,30 @@ impl Step for Sysroot {\n         };\n         let _ = fs::remove_dir_all(&sysroot);\n         t!(fs::create_dir_all(&sysroot));\n+\n+        // Symlink the source root into the same location inside the sysroot,\n+        // where `rust-src` component would go (`$sysroot/lib/rustlib/src/rust`),\n+        // so that any tools relying on `rust-src` also work for local builds,\n+        // and also for translating the virtual `/rustc/$hash` back to the real\n+        // directory (for running tests with `rust.remap-debuginfo = true`).\n+        let sysroot_lib_rustlib_src = sysroot.join(\"lib/rustlib/src\");\n+        t!(fs::create_dir_all(&sysroot_lib_rustlib_src));\n+        let sysroot_lib_rustlib_src_rust = sysroot_lib_rustlib_src.join(\"rust\");\n+        if let Err(e) = symlink_dir(&builder.config, &builder.src, &sysroot_lib_rustlib_src_rust) {\n+            eprintln!(\n+                \"warning: creating symbolic link `{}` to `{}` failed with {}\",\n+                sysroot_lib_rustlib_src_rust.display(),\n+                builder.src.display(),\n+                e,\n+            );\n+            if builder.config.rust_remap_debuginfo {\n+                eprintln!(\n+                    \"warning: some `src/test/ui` tests will fail when lacking `{}`\",\n+                    sysroot_lib_rustlib_src_rust.display(),\n+                );\n+            }\n+        }\n+\n         INTERNER.intern_path(sysroot)\n     }\n }"}, {"sha": "31bbd92cd620511e5bc06819f791856be534f416", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -740,19 +740,18 @@ impl Build {\n         self.config.jobs.unwrap_or_else(|| num_cpus::get() as u32)\n     }\n \n-    fn debuginfo_map(&self, which: GitRepo) -> Option<String> {\n+    fn debuginfo_map_to(&self, which: GitRepo) -> Option<String> {\n         if !self.config.rust_remap_debuginfo {\n             return None;\n         }\n \n-        let path = match which {\n+        match which {\n             GitRepo::Rustc => {\n                 let sha = self.rust_sha().unwrap_or(channel::CFG_RELEASE_NUM);\n-                format!(\"/rustc/{}\", sha)\n+                Some(format!(\"/rustc/{}\", sha))\n             }\n-            GitRepo::Llvm => String::from(\"/rustc/llvm\"),\n-        };\n-        Some(format!(\"{}={}\", self.src.display(), path))\n+            GitRepo::Llvm => Some(String::from(\"/rustc/llvm\")),\n+        }\n     }\n \n     /// Returns the path to the C compiler for the target specified.\n@@ -787,7 +786,8 @@ impl Build {\n             base.push(\"-fno-omit-frame-pointer\".into());\n         }\n \n-        if let Some(map) = self.debuginfo_map(which) {\n+        if let Some(map_to) = self.debuginfo_map_to(which) {\n+            let map = format!(\"{}={}\", self.src.display(), map_to);\n             let cc = self.cc(target);\n             if cc.ends_with(\"clang\") || cc.ends_with(\"gcc\") {\n                 base.push(format!(\"-fdebug-prefix-map={}\", map));"}, {"sha": "a0ba47e1dbe313d1fd7683c4d73766d0dcce0b6a", "filename": "src/etc/generate-deriving-span-tests.py", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Fetc%2Fgenerate-deriving-span-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Fetc%2Fgenerate-deriving-span-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgenerate-deriving-span-tests.py?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -15,9 +15,6 @@\n     os.path.join(os.path.dirname(__file__), '../test/ui/derives/'))\n \n TEMPLATE = \"\"\"\\\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n {error_deriving}"}, {"sha": "7d5c58ecea2a135c1c076d2d8f04bb562468670f", "filename": "src/librustc_metadata/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Flibrustc_metadata%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Flibrustc_metadata%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fbuild.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,4 +1,5 @@\n fn main() {\n     println!(\"cargo:rerun-if-changed=build.rs\");\n     println!(\"cargo:rerun-if-env-changed=CFG_VERSION\");\n+    println!(\"cargo:rerun-if-env-changed=CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\");\n }"}, {"sha": "c59b155d5dbbce00aff24bc66f1a269f860aaf8e", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 52, "deletions": 9, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -32,7 +32,7 @@ use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::util::common::record_time;\n use rustc_serialize::{opaque, Decodable, Decoder, SpecializedDecoder};\n use rustc_session::Session;\n-use rustc_span::source_map::{self, respan, Spanned};\n+use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{self, hygiene::MacroKind, BytePos, Pos, Span, DUMMY_SP};\n \n@@ -41,6 +41,7 @@ use proc_macro::bridge::client::ProcMacro;\n use std::io;\n use std::mem;\n use std::num::NonZeroUsize;\n+use std::path::Path;\n use std::u32;\n \n pub use cstore_impl::{provide, provide_extern};\n@@ -427,7 +428,7 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n         // we can call `imported_source_files` for the proper crate, and binary search\n         // through the returned slice using our span.\n         let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {\n-            self.cdata().imported_source_files(sess.source_map())\n+            self.cdata().imported_source_files(sess)\n         } else {\n             // FIXME: We don't decode dependencies of proc-macros.\n             // Remove this once #69976 is merged\n@@ -457,7 +458,7 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n             self.last_source_file_index = 0;\n \n             let foreign_data = self.cdata().cstore.get_crate_data(cnum);\n-            foreign_data.imported_source_files(sess.source_map())\n+            foreign_data.imported_source_files(sess)\n         };\n \n         let source_file = {\n@@ -1460,10 +1461,45 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     ///\n     /// Proc macro crates don't currently export spans, so this function does not have\n     /// to work for them.\n-    fn imported_source_files(\n-        &self,\n-        local_source_map: &source_map::SourceMap,\n-    ) -> &'a [ImportedSourceFile] {\n+    fn imported_source_files(&self, sess: &Session) -> &'a [ImportedSourceFile] {\n+        // Translate the virtual `/rustc/$hash` prefix back to a real directory\n+        // that should hold actual sources, where possible.\n+        let virtual_rust_source_base_dir = option_env!(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\")\n+            .map(Path::new)\n+            .filter(|_| {\n+                // Only spend time on further checks if we have what to translate *to*.\n+                sess.real_rust_source_base_dir.is_some()\n+            })\n+            .filter(|virtual_dir| {\n+                // Don't translate away `/rustc/$hash` if we're still remapping to it,\n+                // since that means we're still building `std`/`rustc` that need it,\n+                // and we don't want the real path to leak into codegen/debuginfo.\n+                !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)\n+            });\n+        let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {\n+            debug!(\n+                \"try_to_translate_virtual_to_real(name={:?}): \\\n+                 virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}\",\n+                name, virtual_rust_source_base_dir, sess.real_rust_source_base_dir,\n+            );\n+\n+            if let Some(virtual_dir) = virtual_rust_source_base_dir {\n+                if let Some(real_dir) = &sess.real_rust_source_base_dir {\n+                    if let rustc_span::FileName::Real(path) = name {\n+                        if let Ok(rest) = path.strip_prefix(virtual_dir) {\n+                            let new_path = real_dir.join(rest);\n+                            debug!(\n+                                \"try_to_translate_virtual_to_real: `{}` -> `{}`\",\n+                                path.display(),\n+                                new_path.display(),\n+                            );\n+                            *path = new_path;\n+                        }\n+                    }\n+                }\n+            }\n+        };\n+\n         self.cdata.source_map_import_info.init_locking(|| {\n             let external_source_map = self.root.source_map.decode(self);\n \n@@ -1472,7 +1508,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     // We can't reuse an existing SourceFile, so allocate a new one\n                     // containing the information we need.\n                     let rustc_span::SourceFile {\n-                        name,\n+                        mut name,\n                         name_was_remapped,\n                         src_hash,\n                         start_pos,\n@@ -1485,6 +1521,13 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                         ..\n                     } = source_file_to_import;\n \n+                    // If this file's path has been remapped to `/rustc/$hash`,\n+                    // we might be able to reverse that (also see comments above,\n+                    // on `try_to_translate_virtual_to_real`).\n+                    // FIXME(eddyb) we could check `name_was_remapped` here,\n+                    // but in practice it seems to be always `false`.\n+                    try_to_translate_virtual_to_real(&mut name);\n+\n                     let source_length = (end_pos - start_pos).to_usize();\n \n                     // Translate line-start positions and multibyte character\n@@ -1505,7 +1548,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                         np.pos = np.pos - start_pos;\n                     }\n \n-                    let local_version = local_source_map.new_imported_source_file(\n+                    let local_version = sess.source_map().new_imported_source_file(\n                         name,\n                         name_was_remapped,\n                         src_hash,"}, {"sha": "b16681c72e7d13509121578a648b43c60b664d90", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -140,6 +140,15 @@ pub struct Session {\n     /// Options range from returning the error without a backtrace to returning an error\n     /// and immediately printing the backtrace to stderr.\n     pub ctfe_backtrace: Lock<CtfeBacktrace>,\n+\n+    /// Base directory containing the `src/` for the Rust standard library, and\n+    /// potentially `rustc` as well, if we can can find it. Right now it's always\n+    /// `$sysroot/lib/rustlib/src/rust` (i.e. the `rustup` `rust-src` component).\n+    ///\n+    /// This directory is what the virtual `/rustc/$hash` is translated back to,\n+    /// if Rust was built with path remapping to `/rustc/$hash` enabled\n+    /// (the `rust.remap-debuginfo` option in `config.toml`).\n+    pub real_rust_source_base_dir: Option<PathBuf>,\n }\n \n pub struct PerfStats {\n@@ -1056,6 +1065,26 @@ fn build_session_(\n         _ => CtfeBacktrace::Disabled,\n     });\n \n+    // Try to find a directory containing the Rust `src`, for more details see\n+    // the doc comment on the `real_rust_source_base_dir` field.\n+    let real_rust_source_base_dir = {\n+        // This is the location used by the `rust-src` `rustup` component.\n+        let mut candidate = sysroot.join(\"lib/rustlib/src/rust\");\n+        if let Ok(metadata) = candidate.symlink_metadata() {\n+            // Replace the symlink rustbuild creates, with its destination.\n+            // We could try to use `fs::canonicalize` instead, but that might\n+            // produce unnecessarily verbose path.\n+            if metadata.file_type().is_symlink() {\n+                if let Ok(symlink_dest) = std::fs::read_link(&candidate) {\n+                    candidate = symlink_dest;\n+                }\n+            }\n+        }\n+\n+        // Only use this directory if it has a file we can expect to always find.\n+        if candidate.join(\"src/libstd/lib.rs\").is_file() { Some(candidate) } else { None }\n+    };\n+\n     let sess = Session {\n         target: target_cfg,\n         host,\n@@ -1094,6 +1123,7 @@ fn build_session_(\n         confused_type_with_std_module: Lock::new(Default::default()),\n         system_library_path: OneThread::new(RefCell::new(Default::default())),\n         ctfe_backtrace,\n+        real_rust_source_base_dir,\n     };\n \n     validate_commandline_args_with_session_available(&sess);"}, {"sha": "3ee7ab2e9d12f5ed37adf1d826bb8f5c0b5674d3", "filename": "src/test/ui/async-await/issues/issue-62009-1.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,4 @@\n // edition:2018\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n \n async fn print_dur() {}\n "}, {"sha": "2417b592c7dbd89c0d8036fff7d8a3ca3f6a8a26", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,13 +1,13 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:10:5\n+  --> $DIR/issue-62009-1.rs:6:5\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     async { let (); }.await;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:12:5\n+  --> $DIR/issue-62009-1.rs:8:5\n    |\n LL |   fn main() {\n    |      ---- this is not `async`\n@@ -19,19 +19,19 @@ LL | |     }.await;\n    | |___________^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:16:5\n+  --> $DIR/issue-62009-1.rs:12:5\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n ...\n LL |     (|_| 2333).await;\n    |     ^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n-error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:16:5: 16:15]: std::future::Future` is not satisfied\n-  --> $DIR/issue-62009-1.rs:16:5\n+error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]: std::future::Future` is not satisfied\n+  --> $DIR/issue-62009-1.rs:12:5\n    |\n LL |     (|_| 2333).await;\n-   |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:16:5: 16:15]`\n+   |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n    | \n   ::: $SRC_DIR/libcore/future/mod.rs:LL:COL\n    |"}, {"sha": "580cd1af4f303f014184421eabff7533f28620f3", "filename": "src/test/ui/closures/closure-move-sync.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n use std::thread;\n use std::sync::mpsc::channel;\n "}, {"sha": "a1fc427bc1723a5e3a34fc8edcb4820441b614ff", "filename": "src/test/ui/closures/closure-move-sync.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `std::sync::mpsc::Receiver<()>` cannot be shared between threads safely\n-  --> $DIR/closure-move-sync.rs:10:13\n+  --> $DIR/closure-move-sync.rs:6:13\n    |\n LL |     let t = thread::spawn(|| {\n    |             ^^^^^^^^^^^^^ `std::sync::mpsc::Receiver<()>` cannot be shared between threads safely\n@@ -11,10 +11,10 @@ LL |     F: Send + 'static,\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Receiver<()>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&std::sync::mpsc::Receiver<()>`\n-   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:10:27: 13:6 recv:&std::sync::mpsc::Receiver<()>]`\n+   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:6:27: 9:6 recv:&std::sync::mpsc::Receiver<()>]`\n \n error[E0277]: `std::sync::mpsc::Sender<()>` cannot be shared between threads safely\n-  --> $DIR/closure-move-sync.rs:22:5\n+  --> $DIR/closure-move-sync.rs:18:5\n    |\n LL |     thread::spawn(|| tx.send(()).unwrap());\n    |     ^^^^^^^^^^^^^ `std::sync::mpsc::Sender<()>` cannot be shared between threads safely\n@@ -26,7 +26,7 @@ LL |     F: Send + 'static,\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Sender<()>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&std::sync::mpsc::Sender<()>`\n-   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:22:19: 22:42 tx:&std::sync::mpsc::Sender<()>]`\n+   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:18:19: 18:42 tx:&std::sync::mpsc::Sender<()>]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1f56c8bd8e65842afa1843feb10f64ee87d6292e", "filename": "src/test/ui/consts/const-size_of-cycle.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // error-pattern: cycle detected\n \n struct Foo {"}, {"sha": "730ad57de8169cd4e6b2431b2cc3fafc03d11559", "filename": "src/test/ui/consts/const-size_of-cycle.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,16 +1,16 @@\n error[E0391]: cycle detected when const-evaluating + checking `Foo::bytes::{{constant}}#0`\n-  --> $DIR/const-size_of-cycle.rs:8:17\n+  --> $DIR/const-size_of-cycle.rs:4:17\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}#0`...\n-  --> $DIR/const-size_of-cycle.rs:8:17\n+  --> $DIR/const-size_of-cycle.rs:4:17\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating `Foo::bytes::{{constant}}#0`...\n-  --> $DIR/const-size_of-cycle.rs:8:17\n+  --> $DIR/const-size_of-cycle.rs:4:17\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -28,7 +28,7 @@ LL |     pub fn size_of<T>() -> usize;\n    = note: ...which requires normalizing `[u8; _]`...\n    = note: ...which again requires const-evaluating + checking `Foo::bytes::{{constant}}#0`, completing the cycle\n note: cycle used when processing `Foo`\n-  --> $DIR/const-size_of-cycle.rs:7:1\n+  --> $DIR/const-size_of-cycle.rs:3:1\n    |\n LL | struct Foo {\n    | ^^^^^^^^^^"}, {"sha": "2f39148d6972f6084b4258ed5250067a95473583", "filename": "src/test/ui/consts/miri_unleashed/drop.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,4 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // error-pattern: calling non-const function `<std::vec::Vec<i32> as std::ops::Drop>::drop`\n #![deny(const_err)]\n "}, {"sha": "902ccf81ac0cb3d05738b2bd6d5a68b82c09c107", "filename": "src/test/ui/consts/miri_unleashed/drop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n warning: skipping const checks\n-  --> $DIR/drop.rs:21:9\n+  --> $DIR/drop.rs:17:9\n    |\n LL |     let _v: Vec<i32> = Vec::new();\n    |         ^^\n@@ -17,10 +17,10 @@ LL | | }\n    | |_calling non-const function `<std::vec::Vec<i32> as std::ops::Drop>::drop`\n    |   inside `std::intrinsics::drop_in_place::<std::vec::Vec<i32>> - shim(Some(std::vec::Vec<i32>))` at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n    | \n-  ::: $DIR/drop.rs:23:1\n+  ::: $DIR/drop.rs:19:1\n    |\n LL |   };\n-   |   - inside `TEST_BAD` at $DIR/drop.rs:23:1\n+   |   - inside `TEST_BAD` at $DIR/drop.rs:19:1\n \n error: aborting due to previous error\n "}, {"sha": "a7902f20467a134aafd46bfcda2c6c4114b49d23", "filename": "src/test/ui/consts/offset_from_ub.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n #![feature(const_raw_ptr_deref)]\n #![feature(const_ptr_offset_from)]\n #![feature(ptr_offset_from)]"}, {"sha": "4c591d5ee81ad7205dfbbe5fdf8632c7573c39ee", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -6,9 +6,9 @@ LL |           intrinsics::ptr_offset_from(self, origin)\n    |           |\n    |           ptr_offset_from cannot compute offset of pointers into different allocations.\n    |           inside `std::ptr::const_ptr::<impl *const Struct>::offset_from` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n-   |           inside `DIFFERENT_ALLOC` at $DIR/offset_from_ub.rs:22:27\n+   |           inside `DIFFERENT_ALLOC` at $DIR/offset_from_ub.rs:17:27\n    | \n-  ::: $DIR/offset_from_ub.rs:16:1\n+  ::: $DIR/offset_from_ub.rs:11:1\n    |\n LL | / pub const DIFFERENT_ALLOC: usize = {\n LL | |\n@@ -29,9 +29,9 @@ LL |           intrinsics::ptr_offset_from(self, origin)\n    |           |\n    |           unable to turn bytes into a pointer\n    |           inside `std::ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n-   |           inside `NOT_PTR` at $DIR/offset_from_ub.rs:28:14\n+   |           inside `NOT_PTR` at $DIR/offset_from_ub.rs:23:14\n    | \n-  ::: $DIR/offset_from_ub.rs:26:1\n+  ::: $DIR/offset_from_ub.rs:21:1\n    |\n LL | / pub const NOT_PTR: usize = {\n LL | |\n@@ -47,9 +47,9 @@ LL |           intrinsics::ptr_offset_from(self, origin)\n    |           |\n    |           exact_div: 1isize cannot be divided by 2isize without remainder\n    |           inside `std::ptr::const_ptr::<impl *const u16>::offset_from` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n-   |           inside `NOT_MULTIPLE_OF_SIZE` at $DIR/offset_from_ub.rs:36:14\n+   |           inside `NOT_MULTIPLE_OF_SIZE` at $DIR/offset_from_ub.rs:31:14\n    | \n-  ::: $DIR/offset_from_ub.rs:31:1\n+  ::: $DIR/offset_from_ub.rs:26:1\n    |\n LL | / pub const NOT_MULTIPLE_OF_SIZE: isize = {\n LL | |\n@@ -68,9 +68,9 @@ LL |           intrinsics::ptr_offset_from(self, origin)\n    |           |\n    |           invalid use of NULL pointer\n    |           inside `std::ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n-   |           inside `OFFSET_FROM_NULL` at $DIR/offset_from_ub.rs:42:14\n+   |           inside `OFFSET_FROM_NULL` at $DIR/offset_from_ub.rs:37:14\n    | \n-  ::: $DIR/offset_from_ub.rs:39:1\n+  ::: $DIR/offset_from_ub.rs:34:1\n    |\n LL | / pub const OFFSET_FROM_NULL: isize = {\n LL | |\n@@ -87,9 +87,9 @@ LL |           intrinsics::ptr_offset_from(self, origin)\n    |           |\n    |           unable to turn bytes into a pointer\n    |           inside `std::ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n-   |           inside `DIFFERENT_INT` at $DIR/offset_from_ub.rs:49:14\n+   |           inside `DIFFERENT_INT` at $DIR/offset_from_ub.rs:44:14\n    | \n-  ::: $DIR/offset_from_ub.rs:45:1\n+  ::: $DIR/offset_from_ub.rs:40:1\n    |\n LL | / pub const DIFFERENT_INT: isize = { // offset_from with two different integers: like DIFFERENT_ALLOC\n LL | |"}, {"sha": "55f2dd4ee6dde354ff62841e695b4ff6ea91762b", "filename": "src/test/ui/copy-a-resource.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcopy-a-resource.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n #[derive(Debug)]\n struct Foo {\n   i: isize,"}, {"sha": "a5c961a061acbdfd77221632b07bdff15b62266a", "filename": "src/test/ui/copy-a-resource.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fcopy-a-resource.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fcopy-a-resource.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcopy-a-resource.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `clone` found for struct `Foo` in the current scope\n-  --> $DIR/copy-a-resource.rs:23:16\n+  --> $DIR/copy-a-resource.rs:18:16\n    |\n LL | struct Foo {\n    | ---------- method `clone` not found for this"}, {"sha": "0f642d63a1dcbab9e770b47af785c939d988b7bf", "filename": "src/test/ui/derives/derive-assoc-type-not-impl.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n trait Foo {\n     type X;\n     fn method(&self) {}"}, {"sha": "be446feb847eb5a84df31d4f9657e68163ac9fdd", "filename": "src/test/ui/derives/derive-assoc-type-not-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `clone` found for struct `Bar<NotClone>` in the current scope\n-  --> $DIR/derive-assoc-type-not-impl.rs:23:30\n+  --> $DIR/derive-assoc-type-not-impl.rs:18:30\n    |\n LL | struct Bar<T: Foo> {\n    | ------------------"}, {"sha": "b556d442420e0b0949909d4fa06d7a11cd76e595", "filename": "src/test/ui/derives/derives-span-Clone-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "bbb8776f4fdef40c5a5035f2f83b2228625a7e4d", "filename": "src/test/ui/derives/derives-span-Clone-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::clone::Clone` is not satisfied\n-  --> $DIR/derives-span-Clone-enum-struct-variant.rs:13:6\n+  --> $DIR/derives-span-Clone-enum-struct-variant.rs:9:6\n    |\n LL |      x: Error\n    |      ^^^^^^^^ the trait `std::clone::Clone` is not implemented for `Error`"}, {"sha": "9bb4f486c3ef067620123f18ee60f7e120a0df4e", "filename": "src/test/ui/derives/derives-span-Clone-enum.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "0e410e795e0e5f50b1ec72f49ccab659752f681e", "filename": "src/test/ui/derives/derives-span-Clone-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::clone::Clone` is not satisfied\n-  --> $DIR/derives-span-Clone-enum.rs:13:6\n+  --> $DIR/derives-span-Clone-enum.rs:9:6\n    |\n LL |      Error\n    |      ^^^^^ the trait `std::clone::Clone` is not implemented for `Error`"}, {"sha": "f151636f848a0463a2838a61b607b1eaf372ffb0", "filename": "src/test/ui/derives/derives-span-Clone-struct.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "889128a662349f2a57a827f259d4c085b7d96905", "filename": "src/test/ui/derives/derives-span-Clone-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::clone::Clone` is not satisfied\n-  --> $DIR/derives-span-Clone-struct.rs:12:5\n+  --> $DIR/derives-span-Clone-struct.rs:8:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^ the trait `std::clone::Clone` is not implemented for `Error`"}, {"sha": "7a62885324ebd294ee598d0f419adf23fcdc2fcf", "filename": "src/test/ui/derives/derives-span-Clone-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "0024199ca59cdeefee8770456c5789253a29295f", "filename": "src/test/ui/derives/derives-span-Clone-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::clone::Clone` is not satisfied\n-  --> $DIR/derives-span-Clone-tuple-struct.rs:12:5\n+  --> $DIR/derives-span-Clone-tuple-struct.rs:8:5\n    |\n LL |     Error\n    |     ^^^^^ the trait `std::clone::Clone` is not implemented for `Error`"}, {"sha": "949597bc8f6eea83634590d1f1c3f99eaab79bc9", "filename": "src/test/ui/derives/derives-span-Debug-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "77779a55b68cebdcd451832ad764fc1ca3456e09", "filename": "src/test/ui/derives/derives-span-Debug-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `Error` doesn't implement `std::fmt::Debug`\n-  --> $DIR/derives-span-Debug-enum-struct-variant.rs:13:6\n+  --> $DIR/derives-span-Debug-enum-struct-variant.rs:9:6\n    |\n LL |      x: Error\n    |      ^^^^^^^^ `Error` cannot be formatted using `{:?}`"}, {"sha": "b2a39708ceb9add262ef68d1da0ad1fb458752bf", "filename": "src/test/ui/derives/derives-span-Debug-enum.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "f64c33c2bcc36ad641bfb9f5465ff5d6af2c0e33", "filename": "src/test/ui/derives/derives-span-Debug-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `Error` doesn't implement `std::fmt::Debug`\n-  --> $DIR/derives-span-Debug-enum.rs:13:6\n+  --> $DIR/derives-span-Debug-enum.rs:9:6\n    |\n LL |      Error\n    |      ^^^^^ `Error` cannot be formatted using `{:?}`"}, {"sha": "cf91c9436a623f52011fabb6e29c820648d61409", "filename": "src/test/ui/derives/derives-span-Debug-struct.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "0013bcf8325e6db07abd8ad6fe23c3e2a39666b8", "filename": "src/test/ui/derives/derives-span-Debug-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `Error` doesn't implement `std::fmt::Debug`\n-  --> $DIR/derives-span-Debug-struct.rs:12:5\n+  --> $DIR/derives-span-Debug-struct.rs:8:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^ `Error` cannot be formatted using `{:?}`"}, {"sha": "cea973c91a78398d57c06c13965b4ecc7009ae9e", "filename": "src/test/ui/derives/derives-span-Debug-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "7e0039e8a795d43aa993286480fc4d78767fa398", "filename": "src/test/ui/derives/derives-span-Debug-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `Error` doesn't implement `std::fmt::Debug`\n-  --> $DIR/derives-span-Debug-tuple-struct.rs:12:5\n+  --> $DIR/derives-span-Debug-tuple-struct.rs:8:5\n    |\n LL |     Error\n    |     ^^^^^ `Error` cannot be formatted using `{:?}`"}, {"sha": "71fd5829e7585084812a631f9fe9d7b051cba096", "filename": "src/test/ui/derives/derives-span-Default-struct.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "492847fc022f3bd318f588a237be8ca366e67b79", "filename": "src/test/ui/derives/derives-span-Default-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::default::Default` is not satisfied\n-  --> $DIR/derives-span-Default-struct.rs:12:5\n+  --> $DIR/derives-span-Default-struct.rs:8:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^ the trait `std::default::Default` is not implemented for `Error`"}, {"sha": "463f7d230ca413517209970d0e9beee392c46108", "filename": "src/test/ui/derives/derives-span-Default-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "fa7b27e770f0ab574a12b702f80c02b8cb750518", "filename": "src/test/ui/derives/derives-span-Default-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::default::Default` is not satisfied\n-  --> $DIR/derives-span-Default-tuple-struct.rs:12:5\n+  --> $DIR/derives-span-Default-tuple-struct.rs:8:5\n    |\n LL |     Error\n    |     ^^^^^ the trait `std::default::Default` is not implemented for `Error`"}, {"sha": "d2dab8687f774892056c59d2df02fbb1c8277430", "filename": "src/test/ui/derives/derives-span-Eq-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(PartialEq)]"}, {"sha": "704825c7b3844bb6ba6c0a7d6a58a94a184b0024", "filename": "src/test/ui/derives/derives-span-Eq-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::cmp::Eq` is not satisfied\n-  --> $DIR/derives-span-Eq-enum-struct-variant.rs:13:6\n+  --> $DIR/derives-span-Eq-enum-struct-variant.rs:9:6\n    |\n LL |      x: Error\n    |      ^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Error`"}, {"sha": "c6c0d4321083b8c5dd50fdeac39cbee3486e0375", "filename": "src/test/ui/derives/derives-span-Eq-enum.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(PartialEq)]"}, {"sha": "8d2499614d89feed89c2f7068526c9e7ae52b30d", "filename": "src/test/ui/derives/derives-span-Eq-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::cmp::Eq` is not satisfied\n-  --> $DIR/derives-span-Eq-enum.rs:13:6\n+  --> $DIR/derives-span-Eq-enum.rs:9:6\n    |\n LL |      Error\n    |      ^^^^^ the trait `std::cmp::Eq` is not implemented for `Error`"}, {"sha": "df310039847d4546cd64fd61304d3e39323a34f9", "filename": "src/test/ui/derives/derives-span-Eq-struct.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(PartialEq)]"}, {"sha": "22db0bf08b7bd8304d3a16551380ac94ee9a4707", "filename": "src/test/ui/derives/derives-span-Eq-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::cmp::Eq` is not satisfied\n-  --> $DIR/derives-span-Eq-struct.rs:12:5\n+  --> $DIR/derives-span-Eq-struct.rs:8:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Error`"}, {"sha": "abf6526b900781ac538ba0d7cbae5160ab776190", "filename": "src/test/ui/derives/derives-span-Eq-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(PartialEq)]"}, {"sha": "eaf14691ff056201da819b6eb587b1a60403cb14", "filename": "src/test/ui/derives/derives-span-Eq-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::cmp::Eq` is not satisfied\n-  --> $DIR/derives-span-Eq-tuple-struct.rs:12:5\n+  --> $DIR/derives-span-Eq-tuple-struct.rs:8:5\n    |\n LL |     Error\n    |     ^^^^^ the trait `std::cmp::Eq` is not implemented for `Error`"}, {"sha": "3018a7b6d03eef4c4015236bdaa97e2eee21df54", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "32f4265a4d29725634f2db117581b0684f334153", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::hash::Hash` is not satisfied\n-  --> $DIR/derives-span-Hash-enum-struct-variant.rs:13:6\n+  --> $DIR/derives-span-Hash-enum-struct-variant.rs:9:6\n    |\n LL |      x: Error\n    |      ^^^^^^^^ the trait `std::hash::Hash` is not implemented for `Error`"}, {"sha": "8ce7df18f06fd0ddbba1bd0641c182c34c376d06", "filename": "src/test/ui/derives/derives-span-Hash-enum.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n struct Error;"}, {"sha": "b8d6277b9bed795bdd0fbfd2beb249a41d21366a", "filename": "src/test/ui/derives/derives-span-Hash-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::hash::Hash` is not satisfied\n-  --> $DIR/derives-span-Hash-enum.rs:12:6\n+  --> $DIR/derives-span-Hash-enum.rs:8:6\n    |\n LL |      Error\n    |      ^^^^^ the trait `std::hash::Hash` is not implemented for `Error`"}, {"sha": "fa5e2af6be8709f4d31e81e5088c865f7e561776", "filename": "src/test/ui/derives/derives-span-Hash-struct.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "ae431d221ca4046cb7f8df958974636eb973cc04", "filename": "src/test/ui/derives/derives-span-Hash-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::hash::Hash` is not satisfied\n-  --> $DIR/derives-span-Hash-struct.rs:12:5\n+  --> $DIR/derives-span-Hash-struct.rs:8:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^ the trait `std::hash::Hash` is not implemented for `Error`"}, {"sha": "3822bce1466ea9cef75ec9cf7b0a80794872d07f", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "db32193cee05b0aab43b59970073d534b9701738", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::hash::Hash` is not satisfied\n-  --> $DIR/derives-span-Hash-tuple-struct.rs:12:5\n+  --> $DIR/derives-span-Hash-tuple-struct.rs:8:5\n    |\n LL |     Error\n    |     ^^^^^ the trait `std::hash::Hash` is not implemented for `Error`"}, {"sha": "62355cc2d9619ded65202bbe8e81db2647f1cccc", "filename": "src/test/ui/derives/derives-span-Ord-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(Eq,PartialOrd,PartialEq)]"}, {"sha": "d0286ad17e405080021101e21e9588a487ce67e3", "filename": "src/test/ui/derives/derives-span-Ord-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::cmp::Ord` is not satisfied\n-  --> $DIR/derives-span-Ord-enum-struct-variant.rs:13:6\n+  --> $DIR/derives-span-Ord-enum-struct-variant.rs:9:6\n    |\n LL |      x: Error\n    |      ^^^^^^^^ the trait `std::cmp::Ord` is not implemented for `Error`"}, {"sha": "72738931d10f2e80b35ecc30fe9e110908d7df68", "filename": "src/test/ui/derives/derives-span-Ord-enum.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(Eq,PartialOrd,PartialEq)]"}, {"sha": "aabbd0a1d1b5151119ae74d7167da5cb18dcfe69", "filename": "src/test/ui/derives/derives-span-Ord-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::cmp::Ord` is not satisfied\n-  --> $DIR/derives-span-Ord-enum.rs:13:6\n+  --> $DIR/derives-span-Ord-enum.rs:9:6\n    |\n LL |      Error\n    |      ^^^^^ the trait `std::cmp::Ord` is not implemented for `Error`"}, {"sha": "53d4c2c22b55f146a7addacb2a74f1d6670cf628", "filename": "src/test/ui/derives/derives-span-Ord-struct.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(Eq,PartialOrd,PartialEq)]"}, {"sha": "eaac3dafd080d8a8772e083917f83f1c1aba2fbf", "filename": "src/test/ui/derives/derives-span-Ord-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::cmp::Ord` is not satisfied\n-  --> $DIR/derives-span-Ord-struct.rs:12:5\n+  --> $DIR/derives-span-Ord-struct.rs:8:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^ the trait `std::cmp::Ord` is not implemented for `Error`"}, {"sha": "4e09c27098641c73385d775c5adf3a801b51ffe6", "filename": "src/test/ui/derives/derives-span-Ord-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(Eq,PartialOrd,PartialEq)]"}, {"sha": "0ae36bcb8bfceff9f11f3e26e51897170be59139", "filename": "src/test/ui/derives/derives-span-Ord-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Error: std::cmp::Ord` is not satisfied\n-  --> $DIR/derives-span-Ord-tuple-struct.rs:12:5\n+  --> $DIR/derives-span-Ord-tuple-struct.rs:8:5\n    |\n LL |     Error\n    |     ^^^^^ the trait `std::cmp::Ord` is not implemented for `Error`"}, {"sha": "d66faa086dec7c2bc4407500e7f3cdf668365dbb", "filename": "src/test/ui/derives/derives-span-PartialEq-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "8ff4b4687be3ac0d853db8dcb44ff12945668a70", "filename": "src/test/ui/derives/derives-span-PartialEq-enum-struct-variant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0369]: binary operation `==` cannot be applied to type `Error`\n-  --> $DIR/derives-span-PartialEq-enum-struct-variant.rs:13:6\n+  --> $DIR/derives-span-PartialEq-enum-struct-variant.rs:9:6\n    |\n LL |      x: Error\n    |      ^^^^^^^^\n@@ -8,7 +8,7 @@ LL |      x: Error\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n-  --> $DIR/derives-span-PartialEq-enum-struct-variant.rs:13:6\n+  --> $DIR/derives-span-PartialEq-enum-struct-variant.rs:9:6\n    |\n LL |      x: Error\n    |      ^^^^^^^^"}, {"sha": "66edf460b312af47341967320c58b1c6fe72027c", "filename": "src/test/ui/derives/derives-span-PartialEq-enum.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "b4a12b1c4107d962400b196ba41fbc7d0f0343fb", "filename": "src/test/ui/derives/derives-span-PartialEq-enum.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0369]: binary operation `==` cannot be applied to type `Error`\n-  --> $DIR/derives-span-PartialEq-enum.rs:13:6\n+  --> $DIR/derives-span-PartialEq-enum.rs:9:6\n    |\n LL |      Error\n    |      ^^^^^\n@@ -8,7 +8,7 @@ LL |      Error\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n-  --> $DIR/derives-span-PartialEq-enum.rs:13:6\n+  --> $DIR/derives-span-PartialEq-enum.rs:9:6\n    |\n LL |      Error\n    |      ^^^^^"}, {"sha": "ce5c67af77f054298d5cf3a5b1603df7ff115243", "filename": "src/test/ui/derives/derives-span-PartialEq-struct.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "b4f6c51ac3c62db1141ba689a9d7c056c07f7f19", "filename": "src/test/ui/derives/derives-span-PartialEq-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0369]: binary operation `==` cannot be applied to type `Error`\n-  --> $DIR/derives-span-PartialEq-struct.rs:12:5\n+  --> $DIR/derives-span-PartialEq-struct.rs:8:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     x: Error\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n-  --> $DIR/derives-span-PartialEq-struct.rs:12:5\n+  --> $DIR/derives-span-PartialEq-struct.rs:8:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^"}, {"sha": "eaa628311361c4844a24e092d28097ce80e1ed60", "filename": "src/test/ui/derives/derives-span-PartialEq-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "2e6b1d71199f4aa9a3722594ed67e8d240305b54", "filename": "src/test/ui/derives/derives-span-PartialEq-tuple-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0369]: binary operation `==` cannot be applied to type `Error`\n-  --> $DIR/derives-span-PartialEq-tuple-struct.rs:12:5\n+  --> $DIR/derives-span-PartialEq-tuple-struct.rs:8:5\n    |\n LL |     Error\n    |     ^^^^^\n@@ -8,7 +8,7 @@ LL |     Error\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n-  --> $DIR/derives-span-PartialEq-tuple-struct.rs:12:5\n+  --> $DIR/derives-span-PartialEq-tuple-struct.rs:8:5\n    |\n LL |     Error\n    |     ^^^^^"}, {"sha": "4e7a8d71a18f43c41f67139719401b3bd2087583", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(PartialEq)]"}, {"sha": "0be75972e8ce46d07304268dbde8a571f440055f", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum-struct-variant.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:13:6\n+  --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:9:6\n    |\n LL |      x: Error\n    |      ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n@@ -9,7 +9,7 @@ LL |      x: Error\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:13:6\n+  --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:9:6\n    |\n LL |      x: Error\n    |      ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n@@ -19,7 +19,7 @@ LL |      x: Error\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:13:6\n+  --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:9:6\n    |\n LL |      x: Error\n    |      ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n@@ -29,7 +29,7 @@ LL |      x: Error\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:13:6\n+  --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:9:6\n    |\n LL |      x: Error\n    |      ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n@@ -39,7 +39,7 @@ LL |      x: Error\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:13:6\n+  --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:9:6\n    |\n LL |      x: Error\n    |      ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`"}, {"sha": "d0a6c5ab52ad7d0d8d9927c2fac3227af28d4874", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(PartialEq)]"}, {"sha": "64290023c6dd3edafa67facb8c9220243427ebc1", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-enum.rs:13:6\n+  --> $DIR/derives-span-PartialOrd-enum.rs:9:6\n    |\n LL |      Error\n    |      ^^^^^ no implementation for `Error < Error` and `Error > Error`\n@@ -9,7 +9,7 @@ LL |      Error\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-enum.rs:13:6\n+  --> $DIR/derives-span-PartialOrd-enum.rs:9:6\n    |\n LL |      Error\n    |      ^^^^^ no implementation for `Error < Error` and `Error > Error`\n@@ -19,7 +19,7 @@ LL |      Error\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-enum.rs:13:6\n+  --> $DIR/derives-span-PartialOrd-enum.rs:9:6\n    |\n LL |      Error\n    |      ^^^^^ no implementation for `Error < Error` and `Error > Error`\n@@ -29,7 +29,7 @@ LL |      Error\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-enum.rs:13:6\n+  --> $DIR/derives-span-PartialOrd-enum.rs:9:6\n    |\n LL |      Error\n    |      ^^^^^ no implementation for `Error < Error` and `Error > Error`\n@@ -39,7 +39,7 @@ LL |      Error\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-enum.rs:13:6\n+  --> $DIR/derives-span-PartialOrd-enum.rs:9:6\n    |\n LL |      Error\n    |      ^^^^^ no implementation for `Error < Error` and `Error > Error`"}, {"sha": "a596a2e32959d1c6346d5d6d5a3cc0b8eb436f9b", "filename": "src/test/ui/derives/derives-span-PartialOrd-struct.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(PartialEq)]"}, {"sha": "dcd81589e923c504260c0564d2e525c56715d6dc", "filename": "src/test/ui/derives/derives-span-PartialOrd-struct.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-struct.rs:12:5\n+  --> $DIR/derives-span-PartialOrd-struct.rs:8:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n@@ -9,7 +9,7 @@ LL |     x: Error\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-struct.rs:12:5\n+  --> $DIR/derives-span-PartialOrd-struct.rs:8:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n@@ -19,7 +19,7 @@ LL |     x: Error\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-struct.rs:12:5\n+  --> $DIR/derives-span-PartialOrd-struct.rs:8:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n@@ -29,7 +29,7 @@ LL |     x: Error\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-struct.rs:12:5\n+  --> $DIR/derives-span-PartialOrd-struct.rs:8:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n@@ -39,7 +39,7 @@ LL |     x: Error\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-struct.rs:12:5\n+  --> $DIR/derives-span-PartialOrd-struct.rs:8:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`"}, {"sha": "6dd16234710453ec66b91e851e822bf3f18f3c62", "filename": "src/test/ui/derives/derives-span-PartialOrd-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n #[derive(PartialEq)]"}, {"sha": "8dbf103d2dac1f8483cfcc4cac1d3adeab20fedb", "filename": "src/test/ui/derives/derives-span-PartialOrd-tuple-struct.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-tuple-struct.rs:12:5\n+  --> $DIR/derives-span-PartialOrd-tuple-struct.rs:8:5\n    |\n LL |     Error\n    |     ^^^^^ no implementation for `Error < Error` and `Error > Error`\n@@ -9,7 +9,7 @@ LL |     Error\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-tuple-struct.rs:12:5\n+  --> $DIR/derives-span-PartialOrd-tuple-struct.rs:8:5\n    |\n LL |     Error\n    |     ^^^^^ no implementation for `Error < Error` and `Error > Error`\n@@ -19,7 +19,7 @@ LL |     Error\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-tuple-struct.rs:12:5\n+  --> $DIR/derives-span-PartialOrd-tuple-struct.rs:8:5\n    |\n LL |     Error\n    |     ^^^^^ no implementation for `Error < Error` and `Error > Error`\n@@ -29,7 +29,7 @@ LL |     Error\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-tuple-struct.rs:12:5\n+  --> $DIR/derives-span-PartialOrd-tuple-struct.rs:8:5\n    |\n LL |     Error\n    |     ^^^^^ no implementation for `Error < Error` and `Error > Error`\n@@ -39,7 +39,7 @@ LL |     Error\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-tuple-struct.rs:12:5\n+  --> $DIR/derives-span-PartialOrd-tuple-struct.rs:8:5\n    |\n LL |     Error\n    |     ^^^^^ no implementation for `Error < Error` and `Error > Error`"}, {"sha": "6463a7664de93ce22042b3b9099b05f6f48397f9", "filename": "src/test/ui/derives/deriving-meta-unknown-trait.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n #[derive(Eqr)]\n //~^ ERROR cannot find derive macro `Eqr` in this scope\n //~| ERROR cannot find derive macro `Eqr` in this scope"}, {"sha": "a587c342384f1e3cbfbface97ccf87a79d080267", "filename": "src/test/ui/derives/deriving-meta-unknown-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error: cannot find derive macro `Eqr` in this scope\n-  --> $DIR/deriving-meta-unknown-trait.rs:5:10\n+  --> $DIR/deriving-meta-unknown-trait.rs:1:10\n    |\n LL | #[derive(Eqr)]\n    |          ^^^ help: a derive macro with a similar name exists: `Eq`\n@@ -10,7 +10,7 @@ LL | pub macro Eq($item:item) {\n    | ------------------------ similarly named derive macro `Eq` defined here\n \n error: cannot find derive macro `Eqr` in this scope\n-  --> $DIR/deriving-meta-unknown-trait.rs:5:10\n+  --> $DIR/deriving-meta-unknown-trait.rs:1:10\n    |\n LL | #[derive(Eqr)]\n    |          ^^^ help: a derive macro with a similar name exists: `Eq`"}, {"sha": "c7612fd50a74efd8782168c60c95e0d8a2c07110", "filename": "src/test/ui/error-codes/E0004-2.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n fn main() {\n     let x = Some(1);\n "}, {"sha": "e48bc74d3579c20babcb786dd33aa6be95730ed6", "filename": "src/test/ui/error-codes/E0004-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `None` and `Some(_)` not covered\n-  --> $DIR/E0004-2.rs:9:11\n+  --> $DIR/E0004-2.rs:4:11\n    |\n LL |     match x { }\n    |           ^ patterns `None` and `Some(_)` not covered"}, {"sha": "f4730697e1843f226ec6a3998dd6b89725e9ef1a", "filename": "src/test/ui/error-codes/E0005.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ferror-codes%2FE0005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ferror-codes%2FE0005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0005.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n fn main() {\n     let x = Some(1);\n     let Some(y) = x; //~ ERROR E0005"}, {"sha": "68aff4638c88941be9dcec23cc75fcb40b15c82a", "filename": "src/test/ui/error-codes/E0005.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0005]: refutable pattern in local binding: `None` not covered\n-  --> $DIR/E0005.rs:8:9\n+  --> $DIR/E0005.rs:3:9\n    |\n LL |     let Some(y) = x;\n    |         ^^^^^^^ pattern `None` not covered"}, {"sha": "27c7960d97731cfee4abe308113c35e8dd9b2687", "filename": "src/test/ui/error-codes/E0297.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ferror-codes%2FE0297.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ferror-codes%2FE0297.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0297.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n fn main() {\n     let xs : Vec<Option<i32>> = vec![Some(1), None];\n "}, {"sha": "b2d181b838fdaa6a92c3e8e250ef172b6f885313", "filename": "src/test/ui/error-codes/E0297.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0005]: refutable pattern in `for` loop binding: `None` not covered\n-  --> $DIR/E0297.rs:9:9\n+  --> $DIR/E0297.rs:4:9\n    |\n LL |     for Some(x) in xs {}\n    |         ^^^^^^^ pattern `None` not covered"}, {"sha": "f0cc9ea70550e6a7cf8483d35a0869a48ff4282b", "filename": "src/test/ui/feature-gates/feature-gate-exhaustive-patterns.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n #![feature(never_type)]\n \n fn foo() -> Result<u32, !> {"}, {"sha": "823dad2c95e0e97c65d9774e7479d7890a6c02d8", "filename": "src/test/ui/feature-gates/feature-gate-exhaustive-patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n-  --> $DIR/feature-gate-exhaustive-patterns.rs:13:9\n+  --> $DIR/feature-gate-exhaustive-patterns.rs:8:9\n    |\n LL |     let Ok(_x) = foo();\n    |         ^^^^^^ pattern `Err(_)` not covered"}, {"sha": "105ab4a8adc380b3cc140552176f36c4ae1e52ec", "filename": "src/test/ui/generic-associated-types/iterable.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n #![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n "}, {"sha": "b5bc0c76c2fc56e46f6426276e39cc38c1ae04cb", "filename": "src/test/ui/generic-associated-types/iterable.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0271]: type mismatch resolving `for<'a> <<std::vec::Vec<T> as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <std::vec::Vec<T> as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:20:5\n+  --> $DIR/iterable.rs:15:5\n    |\n LL | impl<T> Iterable for Vec<T> {\n    | --------------------------- in this `impl` item\n@@ -17,7 +17,7 @@ LL |     type Item;\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `for<'a> <<[T] as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <[T] as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:32:5\n+  --> $DIR/iterable.rs:27:5\n    |\n LL | impl<T> Iterable for [T] {\n    | ------------------------ in this `impl` item\n@@ -35,7 +35,7 @@ LL |     type Item;\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `for<'a> <<std::vec::Vec<T> as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <std::vec::Vec<T> as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:24:30\n+  --> $DIR/iterable.rs:19:30\n    |\n LL | trait Iterable {\n    | -------------- required by `Iterable`\n@@ -49,7 +49,7 @@ LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `for<'a> <<[T] as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <[T] as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:36:30\n+  --> $DIR/iterable.rs:31:30\n    |\n LL | trait Iterable {\n    | -------------- required by `Iterable`"}, {"sha": "ba678bb032dcb4b931c95a23f9aa96d25a03ced6", "filename": "src/test/ui/impl-trait/impl-generic-mismatch.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n use std::fmt::Debug;\n \n trait Foo {"}, {"sha": "8d8daa063e09455a31b5d0bf2feab5689488b8ca", "filename": "src/test/ui/impl-trait/impl-generic-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0643]: method `foo` has incompatible signature for trait\n-  --> $DIR/impl-generic-mismatch.rs:13:12\n+  --> $DIR/impl-generic-mismatch.rs:8:12\n    |\n LL |     fn foo(&self, _: &impl Debug);\n    |                       ---------- declaration in trait here\n@@ -13,7 +13,7 @@ LL |     fn foo(&self, _: &impl Debug) { }\n    |          --           ^^^^^^^^^^\n \n error[E0643]: method `bar` has incompatible signature for trait\n-  --> $DIR/impl-generic-mismatch.rs:22:23\n+  --> $DIR/impl-generic-mismatch.rs:17:23\n    |\n LL |     fn bar<U: Debug>(&self, _: &U);\n    |            - declaration in trait here\n@@ -27,7 +27,7 @@ LL |     fn bar<U: Debug>(&self, _: &U) { }\n    |           ^^^^^^^^^^            ^\n \n error[E0643]: method `hash` has incompatible signature for trait\n-  --> $DIR/impl-generic-mismatch.rs:33:33\n+  --> $DIR/impl-generic-mismatch.rs:28:33\n    |\n LL |     fn hash(&self, hasher: &mut impl Hasher) {}\n    |                                 ^^^^^^^^^^^ expected generic parameter, found `impl Trait`"}, {"sha": "6ff3ab73639c0bec32db8ef41797a66fa84beb8e", "filename": "src/test/ui/imports/extern-prelude-extern-crate-restricted-shadowing.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // aux-build:two_macros.rs\n \n macro_rules! define_vec {"}, {"sha": "3269945a252eb5baa92bda8f0d9712c48c0f557c", "filename": "src/test/ui/imports/extern-prelude-extern-crate-restricted-shadowing.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error: macro-expanded `extern crate` items cannot shadow names passed with `--extern`\n-  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:23:9\n+  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:19:9\n    |\n LL |         extern crate std as core;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -10,13 +10,13 @@ LL | define_other_core!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `Vec` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:17:9\n+  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:13:9\n    |\n LL |         Vec::panic!();\n    |         ^^^ ambiguous name\n    |\n note: `Vec` could refer to the crate imported here\n-  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:9:9\n+  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:5:9\n    |\n LL |         extern crate std as Vec;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "1b524ec3833e88cebc84ae51b285c2fb842ecd44", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n use std::ops::Deref;\n trait Trait {}\n "}, {"sha": "c1c4ec9ed7b923e537c19826adc07aa13ffde67b", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error: `impl` item signature doesn't match `trait` item signature\n-  --> $DIR/mismatched_trait_impl-2.rs:12:5\n+  --> $DIR/mismatched_trait_impl-2.rs:8:5\n    |\n LL |     fn deref(&self) -> &dyn Trait {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&Struct) -> &dyn Trait"}, {"sha": "ddc882cccf3907a80a547b4cf3a6ac515e6014f6", "filename": "src/test/ui/interior-mutability/interior-mutability.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n use std::cell::Cell;\n use std::panic::catch_unwind;\n fn main() {"}, {"sha": "1a726be4aa6f4eb327fb2ae089293dfe8da2e058", "filename": "src/test/ui/interior-mutability/interior-mutability.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/interior-mutability.rs:9:5\n+  --> $DIR/interior-mutability.rs:5:5\n    |\n LL |     catch_unwind(|| { x.set(23); });\n    |     ^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n@@ -12,7 +12,7 @@ LL | pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {\n    = help: within `std::cell::Cell<i32>`, the trait `std::panic::RefUnwindSafe` is not implemented for `std::cell::UnsafeCell<i32>`\n    = note: required because it appears within the type `std::cell::Cell<i32>`\n    = note: required because of the requirements on the impl of `std::panic::UnwindSafe` for `&std::cell::Cell<i32>`\n-   = note: required because it appears within the type `[closure@$DIR/interior-mutability.rs:9:18: 9:35 x:&std::cell::Cell<i32>]`\n+   = note: required because it appears within the type `[closure@$DIR/interior-mutability.rs:5:18: 5:35 x:&std::cell::Cell<i32>]`\n \n error: aborting due to previous error\n "}, {"sha": "dbfdad25e5be875e02b271261934c63ff8dff853", "filename": "src/test/ui/issues/issue-17546.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-17546.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-17546.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17546.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n use foo::MyEnum::Result;\n use foo::NoResult; // Through a re-export\n "}, {"sha": "5bbe6d3b17176e9a168a617a3cc3fb08876fd3db", "filename": "src/test/ui/issues/issue-17546.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0573]: expected type, found variant `NoResult`\n-  --> $DIR/issue-17546.rs:16:17\n+  --> $DIR/issue-17546.rs:12:17\n    |\n LL |     fn new() -> NoResult<MyEnum, String> {\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -19,7 +19,7 @@ LL |     fn new() -> Result<MyEnum, String> {\n    |                 ^^^^^^\n \n error[E0573]: expected type, found variant `Result`\n-  --> $DIR/issue-17546.rs:26:17\n+  --> $DIR/issue-17546.rs:22:17\n    |\n LL |     fn new() -> Result<foo::MyEnum, String> {\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a type\n@@ -37,7 +37,7 @@ LL |     use std::result::Result;\n      and 1 other candidate\n \n error[E0573]: expected type, found variant `Result`\n-  --> $DIR/issue-17546.rs:32:13\n+  --> $DIR/issue-17546.rs:28:13\n    |\n LL | fn new() -> Result<foo::MyEnum, String> {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a type\n@@ -55,7 +55,7 @@ LL | use std::result::Result;\n      and 1 other candidate\n \n error[E0573]: expected type, found variant `NoResult`\n-  --> $DIR/issue-17546.rs:37:15\n+  --> $DIR/issue-17546.rs:33:15\n    |\n LL | fn newer() -> NoResult<foo::MyEnum, String> {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "46733566cf383e1f503ede63effa69502bf8074e", "filename": "src/test/ui/issues/issue-21160.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-21160.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-21160.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n struct Bar;\n \n impl Bar {"}, {"sha": "0c3d75c08ffeede2e5a67e4d825003d655262338", "filename": "src/test/ui/issues/issue-21160.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Bar: std::hash::Hash` is not satisfied\n-  --> $DIR/issue-21160.rs:12:12\n+  --> $DIR/issue-21160.rs:8:12\n    |\n LL | struct Foo(Bar);\n    |            ^^^ the trait `std::hash::Hash` is not implemented for `Bar`"}, {"sha": "a23819a20f9aa0494177749319cc33af8b08e5ca", "filename": "src/test/ui/issues/issue-27033.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-27033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-27033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27033.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n fn main() {\n     match Some(1) {\n         None @ _ => {} //~ ERROR match bindings cannot shadow unit variants"}, {"sha": "3bd7469afff07f9329e99078bcc2c297cc4b2bd9", "filename": "src/test/ui/issues/issue-27033.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-27033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-27033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27033.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0530]: match bindings cannot shadow unit variants\n-  --> $DIR/issue-27033.rs:7:9\n+  --> $DIR/issue-27033.rs:3:9\n    |\n LL |         None @ _ => {}\n    |         ^^^^ cannot be named the same as a unit variant\n@@ -10,7 +10,7 @@ LL | pub use crate::option::Option::{self, None, Some};\n    |                                       ---- the unit variant `None` is defined here\n \n error[E0530]: match bindings cannot shadow constants\n-  --> $DIR/issue-27033.rs:11:9\n+  --> $DIR/issue-27033.rs:7:9\n    |\n LL |     const C: u8 = 1;\n    |     ---------------- the constant `C` is defined here"}, {"sha": "7b443b4152613f620bf2dbe7e5a9d2f2b1b80e00", "filename": "src/test/ui/issues/issue-2823.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-2823.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-2823.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2823.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n struct C {\n     x: isize,\n }"}, {"sha": "0cdc501d56811fcc8ad48f9f9f31f03fce4ded41", "filename": "src/test/ui/issues/issue-2823.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-2823.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-2823.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2823.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `clone` found for struct `C` in the current scope\n-  --> $DIR/issue-2823.rs:18:16\n+  --> $DIR/issue-2823.rs:13:16\n    |\n LL | struct C {\n    | -------- method `clone` not found for this"}, {"sha": "26195318380d2ad9d7a1f7fa917db41c0a89f4e6", "filename": "src/test/ui/issues/issue-31173.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n use std::vec::IntoIter;\n \n pub fn get_tok(it: &mut IntoIter<u8>) {"}, {"sha": "62c9e566d8689b12e7769cc0def6fa9a59043991", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,17 +1,17 @@\n-error[E0271]: type mismatch resolving `<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]> as std::iter::Iterator>::Item == &_`\n-  --> $DIR/issue-31173.rs:14:10\n+error[E0271]: type mismatch resolving `<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]> as std::iter::Iterator>::Item == &_`\n+  --> $DIR/issue-31173.rs:10:10\n    |\n LL |         .cloned()\n    |          ^^^^^^ expected `u8`, found reference\n    |\n    = note:   expected type `u8`\n            found reference `&_`\n \n-error[E0599]: no method named `collect` found for struct `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>` in the current scope\n-  --> $DIR/issue-31173.rs:18:10\n+error[E0599]: no method named `collect` found for struct `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]>>` in the current scope\n+  --> $DIR/issue-31173.rs:14:10\n    |\n LL |         .collect();\n-   |          ^^^^^^^ method not found in `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>`\n+   |          ^^^^^^^ method not found in `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]>>`\n    | \n   ::: $SRC_DIR/libcore/iter/adapters/mod.rs:LL:COL\n    |\n@@ -22,10 +22,10 @@ LL | pub struct TakeWhile<I, P> {\n    | -------------------------- doesn't satisfy `<_ as std::iter::Iterator>::Item = &_`\n    |\n    = note: the method `collect` exists but the following trait bounds were not satisfied:\n-           `<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]> as std::iter::Iterator>::Item = &_`\n-           which is required by `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>: std::iter::Iterator`\n-           `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>: std::iter::Iterator`\n-           which is required by `&mut std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>: std::iter::Iterator`\n+           `<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]> as std::iter::Iterator>::Item = &_`\n+           which is required by `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]>>: std::iter::Iterator`\n+           `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]>>: std::iter::Iterator`\n+           which is required by `&mut std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]>>: std::iter::Iterator`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "81d881c100bb6936024cf9c349642d96e2d99fb7", "filename": "src/test/ui/issues/issue-38857.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-38857.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-38857.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38857.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n fn main() {\n     let a = std::sys::imp::process::process_common::StdioPipes { ..panic!() };\n     //~^ ERROR failed to resolve: could not find `imp` in `sys` [E0433]"}, {"sha": "ed700ff95e5b5da1de2c47f29a27c6947d8fac94", "filename": "src/test/ui/issues/issue-38857.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-38857.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-38857.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38857.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,11 +1,11 @@\n error[E0433]: failed to resolve: could not find `imp` in `sys`\n-  --> $DIR/issue-38857.rs:7:23\n+  --> $DIR/issue-38857.rs:2:23\n    |\n LL |     let a = std::sys::imp::process::process_common::StdioPipes { ..panic!() };\n    |                       ^^^ could not find `imp` in `sys`\n \n error[E0603]: module `sys` is private\n-  --> $DIR/issue-38857.rs:7:18\n+  --> $DIR/issue-38857.rs:2:18\n    |\n LL |     let a = std::sys::imp::process::process_common::StdioPipes { ..panic!() };\n    |                  ^^^ private module"}, {"sha": "b8130b41f21673997f4244f35a52a68fd5dea52f", "filename": "src/test/ui/issues/issue-69725.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-69725.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-69725.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69725.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n // aux-build:issue-69725.rs\n \n extern crate issue_69725;"}, {"sha": "d9d61fe66f78e4f16ab253b6ad8955f855437a05", "filename": "src/test/ui/issues/issue-69725.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-69725.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-69725.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69725.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `clone` found for struct `issue_69725::Struct<A>` in the current scope\n-  --> $DIR/issue-69725.rs:12:32\n+  --> $DIR/issue-69725.rs:7:32\n    |\n LL |     let _ = Struct::<A>::new().clone();\n    |                                ^^^^^ method not found in `issue_69725::Struct<A>`"}, {"sha": "5221f2c529bc691928dbde0d7967d54195b493e6", "filename": "src/test/ui/issues/issue-7607-1.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n struct Foo {\n     x: isize\n }"}, {"sha": "e86896a5681d16a325b041442ee5a1b1cbe524f3", "filename": "src/test/ui/issues/issue-7607-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0412]: cannot find type `Fo` in this scope\n-  --> $DIR/issue-7607-1.rs:9:6\n+  --> $DIR/issue-7607-1.rs:5:6\n    |\n LL | impl Fo {\n    |      ^^ help: a trait with a similar name exists: `Fn`"}, {"sha": "1ddc419d302acf81e042f20c48ab57779dbaf9ec", "filename": "src/test/ui/macros/macro-name-typo.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n fn main() {\n     printlx!(\"oh noes!\"); //~ ERROR cannot find\n }"}, {"sha": "5604341fa34dccb1785affe55befb1cd4df4900b", "filename": "src/test/ui/macros/macro-name-typo.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error: cannot find macro `printlx` in this scope\n-  --> $DIR/macro-name-typo.rs:6:5\n+  --> $DIR/macro-name-typo.rs:2:5\n    |\n LL |     printlx!(\"oh noes!\");\n    |     ^^^^^^^ help: a macro with a similar name exists: `println`"}, {"sha": "68eb350a95614772327aae1e335f4c4204c8f3f4", "filename": "src/test/ui/macros/macro-path-prelude-fail-3.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-3.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n fn main() {\n     inline!(); //~ ERROR cannot find macro `inline` in this scope\n }"}, {"sha": "3e3a0b3879be9c24947fae532497fc612d5e0c91", "filename": "src/test/ui/macros/macro-path-prelude-fail-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-3.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error: cannot find macro `inline` in this scope\n-  --> $DIR/macro-path-prelude-fail-3.rs:6:5\n+  --> $DIR/macro-path-prelude-fail-3.rs:2:5\n    |\n LL |     inline!();\n    |     ^^^^^^ help: a macro with a similar name exists: `line`"}, {"sha": "a96b99ae4ff785d778a5115d785b23f12860d997", "filename": "src/test/ui/macros/unknown-builtin.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n // error-pattern: cannot find a built-in macro with name `line`\n \n #![feature(rustc_attrs)]"}, {"sha": "665e92f2424182d1f23b95413e7efba9b2a6e8ba", "filename": "src/test/ui/macros/unknown-builtin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error: cannot find a built-in macro with name `unknown`\n-  --> $DIR/unknown-builtin.rs:11:1\n+  --> $DIR/unknown-builtin.rs:6:1\n    |\n LL | macro_rules! unknown { () => () }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "9035e3380b0c519e0e895474e9f1ba551189318d", "filename": "src/test/ui/mismatched_types/issue-36053-2.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // Regression test for #36053. ICE was caused due to obligations\n // being added to a special, dedicated fulfillment cx during\n // a probe."}, {"sha": "2793acf8857570a661dd74b060bc356994582cbd", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,8 @@\n-error[E0599]: no method named `count` found for struct `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>` in the current scope\n-  --> $DIR/issue-36053-2.rs:11:55\n+error[E0599]: no method named `count` found for struct `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>` in the current scope\n+  --> $DIR/issue-36053-2.rs:7:55\n    |\n LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n-   |                                       --------------  ^^^^^ method not found in `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>`\n+   |                                       --------------  ^^^^^ method not found in `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>`\n    |                                       |\n    |                                       doesn't satisfy `<_ as std::ops::FnOnce<(&&str,)>>::Output = bool`\n    |                                       doesn't satisfy `_: std::ops::FnMut<(&&str,)>`\n@@ -13,15 +13,15 @@ LL | pub struct Filter<I, P> {\n    | ----------------------- doesn't satisfy `_: std::iter::Iterator`\n    |\n    = note: the method `count` exists but the following trait bounds were not satisfied:\n-           `<[closure@$DIR/issue-36053-2.rs:11:39: 11:53] as std::ops::FnOnce<(&&str,)>>::Output = bool`\n-           which is required by `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>: std::iter::Iterator`\n-           `[closure@$DIR/issue-36053-2.rs:11:39: 11:53]: std::ops::FnMut<(&&str,)>`\n-           which is required by `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>: std::iter::Iterator`\n-           `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>: std::iter::Iterator`\n-           which is required by `&mut std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>: std::iter::Iterator`\n+           `<[closure@$DIR/issue-36053-2.rs:7:39: 7:53] as std::ops::FnOnce<(&&str,)>>::Output = bool`\n+           which is required by `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>: std::iter::Iterator`\n+           `[closure@$DIR/issue-36053-2.rs:7:39: 7:53]: std::ops::FnMut<(&&str,)>`\n+           which is required by `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>: std::iter::Iterator`\n+           `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>: std::iter::Iterator`\n+           which is required by `&mut std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>: std::iter::Iterator`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/issue-36053-2.rs:11:32\n+  --> $DIR/issue-36053-2.rs:7:32\n    |\n LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n    |                                ^^^^^^ -------------- found signature of `for<'r> fn(&'r str) -> _`"}, {"sha": "e10f447365ea609831f991f79bb52438a114aa8d", "filename": "src/test/ui/no-send-res-ports.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n use std::thread;\n use std::rc::Rc;\n "}, {"sha": "13683cf86dba88a2b954d75f8127ab933eceabcd", "filename": "src/test/ui/no-send-res-ports.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n-  --> $DIR/no-send-res-ports.rs:29:5\n+  --> $DIR/no-send-res-ports.rs:25:5\n    |\n LL |       thread::spawn(move|| {\n    |  _____^^^^^^^^^^^^^_-\n@@ -9,17 +9,17 @@ LL | |\n LL | |         let y = x;\n LL | |         println!(\"{:?}\", y);\n LL | |     });\n-   | |_____- within this `[closure@$DIR/no-send-res-ports.rs:29:19: 33:6 x:main::Foo]`\n+   | |_____- within this `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6 x:main::Foo]`\n    | \n   ::: $SRC_DIR/libstd/thread/mod.rs:LL:COL\n    |\n LL |       F: Send + 'static,\n    |          ---- required by this bound in `std::thread::spawn`\n    |\n-   = help: within `[closure@$DIR/no-send-res-ports.rs:29:19: 33:6 x:main::Foo]`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n+   = help: within `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6 x:main::Foo]`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n    = note: required because it appears within the type `Port<()>`\n    = note: required because it appears within the type `main::Foo`\n-   = note: required because it appears within the type `[closure@$DIR/no-send-res-ports.rs:29:19: 33:6 x:main::Foo]`\n+   = note: required because it appears within the type `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6 x:main::Foo]`\n \n error: aborting due to previous error\n "}, {"sha": "ddaaee436ae23b43517944cef4f19b2350d1c46f", "filename": "src/test/ui/non-copyable-void.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fnon-copyable-void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fnon-copyable-void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-copyable-void.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n // ignore-wasm32-bare no libc to test ffi with\n \n #![feature(rustc_private)]"}, {"sha": "78d212f7a7ba7789e0c69b4b198c23e04949ef30", "filename": "src/test/ui/non-copyable-void.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fnon-copyable-void.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fnon-copyable-void.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-copyable-void.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `clone` found for enum `libc::c_void` in the current scope\n-  --> $DIR/non-copyable-void.rs:16:23\n+  --> $DIR/non-copyable-void.rs:11:23\n    |\n LL |         let _z = (*y).clone();\n    |                       ^^^^^ method not found in `libc::c_void`"}, {"sha": "11b6eb736e9db9e79cac854c5ac31646bce4a1b5", "filename": "src/test/ui/noncopyable-class.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fnoncopyable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fnoncopyable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnoncopyable-class.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n // Test that a class with a non-copyable field can't be\n // copied\n "}, {"sha": "994eb65ae15bf7d0bc17ad35aac1b9c099db3aee", "filename": "src/test/ui/noncopyable-class.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fnoncopyable-class.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fnoncopyable-class.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnoncopyable-class.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `clone` found for struct `Foo` in the current scope\n-  --> $DIR/noncopyable-class.rs:39:16\n+  --> $DIR/noncopyable-class.rs:34:16\n    |\n LL | struct Foo {\n    | ---------- method `clone` not found for this"}, {"sha": "b9c0bf834ddb251e19ec6f614f1427b12a15fe07", "filename": "src/test/ui/parser/issue-62894.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fparser%2Fissue-62894.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fparser%2Fissue-62894.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62894.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n // Regression test for #62894, shouldn't crash.\n // error-pattern: this file contains an unclosed delimiter\n // error-pattern: expected one of `(`, `[`, or `{`, found keyword `fn`"}, {"sha": "73e3552e3ec7a5e81a360203536a2e14bc455d01", "filename": "src/test/ui/parser/issue-62894.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fparser%2Fissue-62894.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fparser%2Fissue-62894.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62894.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error: this file contains an unclosed delimiter\n-  --> $DIR/issue-62894.rs:12:14\n+  --> $DIR/issue-62894.rs:7:14\n    |\n LL | fn f() { assert_eq!(f(), (), assert_eq!(assert_eq!\n    |        -           -                   - unclosed delimiter\n@@ -11,7 +11,7 @@ LL | fn main() {}\n    |              ^\n \n error: this file contains an unclosed delimiter\n-  --> $DIR/issue-62894.rs:12:14\n+  --> $DIR/issue-62894.rs:7:14\n    |\n LL | fn f() { assert_eq!(f(), (), assert_eq!(assert_eq!\n    |        -           -                   - unclosed delimiter\n@@ -23,7 +23,7 @@ LL | fn main() {}\n    |              ^\n \n error: this file contains an unclosed delimiter\n-  --> $DIR/issue-62894.rs:12:14\n+  --> $DIR/issue-62894.rs:7:14\n    |\n LL | fn f() { assert_eq!(f(), (), assert_eq!(assert_eq!\n    |        -           -                   - unclosed delimiter\n@@ -35,7 +35,7 @@ LL | fn main() {}\n    |              ^\n \n error: expected one of `(`, `[`, or `{`, found keyword `fn`\n-  --> $DIR/issue-62894.rs:12:1\n+  --> $DIR/issue-62894.rs:7:1\n    |\n LL | fn f() { assert_eq!(f(), (), assert_eq!(assert_eq!\n    |                                                   - expected one of `(`, `[`, or `{`"}, {"sha": "4c5f2d356491b8c7e579ec4715a34887c0cdad4f", "filename": "src/test/ui/pattern/usefulness/match-arm-statics-2.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n use self::Direction::{North, East, South, West};\n \n #[derive(PartialEq, Eq)]"}, {"sha": "3d329e2e6efb1f41257f668e999020f472c84052", "filename": "src/test/ui/pattern/usefulness/match-arm-statics-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `(true, false)` not covered\n-  --> $DIR/match-arm-statics-2.rs:22:11\n+  --> $DIR/match-arm-statics-2.rs:17:11\n    |\n LL |     match (true, false) {\n    |           ^^^^^^^^^^^^^ pattern `(true, false)` not covered\n@@ -8,7 +8,7 @@ LL |     match (true, false) {\n    = note: the matched value is of type `(bool, bool)`\n \n error[E0004]: non-exhaustive patterns: `Some(Some(West))` not covered\n-  --> $DIR/match-arm-statics-2.rs:34:11\n+  --> $DIR/match-arm-statics-2.rs:29:11\n    |\n LL |     match Some(Some(North)) {\n    |           ^^^^^^^^^^^^^^^^^ pattern `Some(Some(West))` not covered\n@@ -25,7 +25,7 @@ LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    = note: the matched value is of type `std::option::Option<std::option::Option<Direction>>`\n \n error[E0004]: non-exhaustive patterns: `Foo { bar: Some(North), baz: NewBool(true) }` not covered\n-  --> $DIR/match-arm-statics-2.rs:53:11\n+  --> $DIR/match-arm-statics-2.rs:48:11\n    |\n LL | / struct Foo {\n LL | |     bar: Option<Direction>,"}, {"sha": "315eb03d165642a9300580b3ab78761b551414af", "filename": "src/test/ui/pattern/usefulness/match-privately-empty.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]\n "}, {"sha": "50a4674def7e8adbc0890971767a604d1e6c2bd8", "filename": "src/test/ui/pattern/usefulness/match-privately-empty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `Some(Private { misc: true, .. })` not covered\n-  --> $DIR/match-privately-empty.rs:18:11\n+  --> $DIR/match-privately-empty.rs:13:11\n    |\n LL |     match private::DATA {\n    |           ^^^^^^^^^^^^^ pattern `Some(Private { misc: true, .. })` not covered"}, {"sha": "9947989dc121121f9d6185b3469ae9a171c60851", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n #![allow(illegal_floating_point_literal_pattern)]\n \n enum T { A, B }"}, {"sha": "436a293b6ce75ef4daf308755f904ec853de6ac3", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `A` not covered\n-  --> $DIR/non-exhaustive-match.rs:12:11\n+  --> $DIR/non-exhaustive-match.rs:7:11\n    |\n LL | enum T { A, B }\n    | ---------------\n@@ -14,7 +14,7 @@ LL |     match x { T::B => { } }\n    = note: the matched value is of type `T`\n \n error[E0004]: non-exhaustive patterns: `false` not covered\n-  --> $DIR/non-exhaustive-match.rs:13:11\n+  --> $DIR/non-exhaustive-match.rs:8:11\n    |\n LL |     match true {\n    |           ^^^^ pattern `false` not covered\n@@ -23,7 +23,7 @@ LL |     match true {\n    = note: the matched value is of type `bool`\n \n error[E0004]: non-exhaustive patterns: `Some(_)` not covered\n-  --> $DIR/non-exhaustive-match.rs:16:11\n+  --> $DIR/non-exhaustive-match.rs:11:11\n    |\n LL |     match Some(10) {\n    |           ^^^^^^^^ pattern `Some(_)` not covered\n@@ -37,7 +37,7 @@ LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    = note: the matched value is of type `std::option::Option<i32>`\n \n error[E0004]: non-exhaustive patterns: `(_, _, std::i32::MIN..=3i32)` and `(_, _, 5i32..=std::i32::MAX)` not covered\n-  --> $DIR/non-exhaustive-match.rs:19:11\n+  --> $DIR/non-exhaustive-match.rs:14:11\n    |\n LL |     match (2, 3, 4) {\n    |           ^^^^^^^^^ patterns `(_, _, std::i32::MIN..=3i32)` and `(_, _, 5i32..=std::i32::MAX)` not covered\n@@ -46,7 +46,7 @@ LL |     match (2, 3, 4) {\n    = note: the matched value is of type `(i32, i32, i32)`\n \n error[E0004]: non-exhaustive patterns: `(A, A)` not covered\n-  --> $DIR/non-exhaustive-match.rs:23:11\n+  --> $DIR/non-exhaustive-match.rs:18:11\n    |\n LL |     match (T::A, T::A) {\n    |           ^^^^^^^^^^^^ pattern `(A, A)` not covered\n@@ -55,7 +55,7 @@ LL |     match (T::A, T::A) {\n    = note: the matched value is of type `(T, T)`\n \n error[E0004]: non-exhaustive patterns: `B` not covered\n-  --> $DIR/non-exhaustive-match.rs:27:11\n+  --> $DIR/non-exhaustive-match.rs:22:11\n    |\n LL | enum T { A, B }\n    | ---------------\n@@ -70,7 +70,7 @@ LL |     match T::A {\n    = note: the matched value is of type `T`\n \n error[E0004]: non-exhaustive patterns: `[]` not covered\n-  --> $DIR/non-exhaustive-match.rs:38:11\n+  --> $DIR/non-exhaustive-match.rs:33:11\n    |\n LL |     match *vec {\n    |           ^^^^ pattern `[]` not covered\n@@ -79,7 +79,7 @@ LL |     match *vec {\n    = note: the matched value is of type `[std::option::Option<isize>]`\n \n error[E0004]: non-exhaustive patterns: `[_, _, _, _, ..]` not covered\n-  --> $DIR/non-exhaustive-match.rs:51:11\n+  --> $DIR/non-exhaustive-match.rs:46:11\n    |\n LL |     match *vec {\n    |           ^^^^ pattern `[_, _, _, _, ..]` not covered"}, {"sha": "7b2ffefb05b1937b2d5c3b149d56945267cc8aa3", "filename": "src/test/ui/proc-macro/parent-source-spans.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // aux-build:parent-source-spans.rs\n #![feature(decl_macro, proc_macro_hygiene)]\n "}, {"sha": "c7d15b43e89bacf81a2f34245506e7af5ac020a0", "filename": "src/test/ui/proc-macro/parent-source-spans.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error: first final: \"hello\"\n-  --> $DIR/parent-source-spans.rs:19:12\n+  --> $DIR/parent-source-spans.rs:15:12\n    |\n LL |     three!($a, $b);\n    |            ^^\n@@ -10,7 +10,7 @@ LL |     one!(\"hello\", \"world\");\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: second final: \"world\"\n-  --> $DIR/parent-source-spans.rs:19:16\n+  --> $DIR/parent-source-spans.rs:15:16\n    |\n LL |     three!($a, $b);\n    |                ^^\n@@ -21,7 +21,7 @@ LL |     one!(\"hello\", \"world\");\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: first parent: \"hello\"\n-  --> $DIR/parent-source-spans.rs:13:5\n+  --> $DIR/parent-source-spans.rs:9:5\n    |\n LL |     two!($a, $b);\n    |     ^^^^^^^^^^^^^\n@@ -32,7 +32,7 @@ LL |     one!(\"hello\", \"world\");\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: second parent: \"world\"\n-  --> $DIR/parent-source-spans.rs:13:5\n+  --> $DIR/parent-source-spans.rs:9:5\n    |\n LL |     two!($a, $b);\n    |     ^^^^^^^^^^^^^\n@@ -43,31 +43,31 @@ LL |     one!(\"hello\", \"world\");\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: first grandparent: \"hello\"\n-  --> $DIR/parent-source-spans.rs:39:5\n+  --> $DIR/parent-source-spans.rs:35:5\n    |\n LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: second grandparent: \"world\"\n-  --> $DIR/parent-source-spans.rs:39:5\n+  --> $DIR/parent-source-spans.rs:35:5\n    |\n LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: first source: \"hello\"\n-  --> $DIR/parent-source-spans.rs:39:5\n+  --> $DIR/parent-source-spans.rs:35:5\n    |\n LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: second source: \"world\"\n-  --> $DIR/parent-source-spans.rs:39:5\n+  --> $DIR/parent-source-spans.rs:35:5\n    |\n LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: first final: \"yay\"\n-  --> $DIR/parent-source-spans.rs:19:12\n+  --> $DIR/parent-source-spans.rs:15:12\n    |\n LL |     three!($a, $b);\n    |            ^^\n@@ -78,7 +78,7 @@ LL |     two!(\"yay\", \"rust\");\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: second final: \"rust\"\n-  --> $DIR/parent-source-spans.rs:19:16\n+  --> $DIR/parent-source-spans.rs:15:16\n    |\n LL |     three!($a, $b);\n    |                ^^\n@@ -89,55 +89,55 @@ LL |     two!(\"yay\", \"rust\");\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: first parent: \"yay\"\n-  --> $DIR/parent-source-spans.rs:45:5\n+  --> $DIR/parent-source-spans.rs:41:5\n    |\n LL |     two!(\"yay\", \"rust\");\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: second parent: \"rust\"\n-  --> $DIR/parent-source-spans.rs:45:5\n+  --> $DIR/parent-source-spans.rs:41:5\n    |\n LL |     two!(\"yay\", \"rust\");\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: first source: \"yay\"\n-  --> $DIR/parent-source-spans.rs:45:5\n+  --> $DIR/parent-source-spans.rs:41:5\n    |\n LL |     two!(\"yay\", \"rust\");\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: second source: \"rust\"\n-  --> $DIR/parent-source-spans.rs:45:5\n+  --> $DIR/parent-source-spans.rs:41:5\n    |\n LL |     two!(\"yay\", \"rust\");\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: first final: \"hip\"\n-  --> $DIR/parent-source-spans.rs:51:12\n+  --> $DIR/parent-source-spans.rs:47:12\n    |\n LL |     three!(\"hip\", \"hop\");\n    |            ^^^^^\n \n error: second final: \"hop\"\n-  --> $DIR/parent-source-spans.rs:51:19\n+  --> $DIR/parent-source-spans.rs:47:19\n    |\n LL |     three!(\"hip\", \"hop\");\n    |                   ^^^^^\n \n error: first source: \"hip\"\n-  --> $DIR/parent-source-spans.rs:51:12\n+  --> $DIR/parent-source-spans.rs:47:12\n    |\n LL |     three!(\"hip\", \"hop\");\n    |            ^^^^^\n \n error: second source: \"hop\"\n-  --> $DIR/parent-source-spans.rs:51:19\n+  --> $DIR/parent-source-spans.rs:47:19\n    |\n LL |     three!(\"hip\", \"hop\");\n    |                   ^^^^^\n \n error[E0425]: cannot find value `ok` in this scope\n-  --> $DIR/parent-source-spans.rs:32:5\n+  --> $DIR/parent-source-spans.rs:28:5\n    |\n LL |     parent_source_spans!($($tokens)*);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a tuple variant with a similar name exists: `Ok`\n@@ -153,7 +153,7 @@ LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `ok` in this scope\n-  --> $DIR/parent-source-spans.rs:32:5\n+  --> $DIR/parent-source-spans.rs:28:5\n    |\n LL |     parent_source_spans!($($tokens)*);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a tuple variant with a similar name exists: `Ok`\n@@ -169,7 +169,7 @@ LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `ok` in this scope\n-  --> $DIR/parent-source-spans.rs:32:5\n+  --> $DIR/parent-source-spans.rs:28:5\n    |\n LL |     parent_source_spans!($($tokens)*);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a tuple variant with a similar name exists: `Ok`"}, {"sha": "ad8a5bbb0f9ffc91be552f7726d62dfc029f07f2", "filename": "src/test/ui/proc-macro/resolve-error.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // aux-build:derive-foo.rs\n // aux-build:derive-clona.rs\n // aux-build:test-macros.rs"}, {"sha": "fc189828ad15a0e7008d915181737d6071063801", "filename": "src/test/ui/proc-macro/resolve-error.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error: cannot find macro `bang_proc_macrp` in this scope\n-  --> $DIR/resolve-error.rs:64:5\n+  --> $DIR/resolve-error.rs:60:5\n    |\n LL |     bang_proc_macrp!();\n    |     ^^^^^^^^^^^^^^^ help: a macro with a similar name exists: `bang_proc_macro`\n@@ -10,13 +10,13 @@ LL | pub fn empty(_: TokenStream) -> TokenStream {\n    | ------------------------------------------- similarly named macro `bang_proc_macro` defined here\n \n error: cannot find macro `Dlona` in this scope\n-  --> $DIR/resolve-error.rs:61:5\n+  --> $DIR/resolve-error.rs:57:5\n    |\n LL |     Dlona!();\n    |     ^^^^^\n \n error: cannot find macro `attr_proc_macra` in this scope\n-  --> $DIR/resolve-error.rs:58:5\n+  --> $DIR/resolve-error.rs:54:5\n    |\n LL | macro_rules! attr_proc_mac {\n    | -------------------------- similarly named macro `attr_proc_mac` defined here\n@@ -25,7 +25,7 @@ LL |     attr_proc_macra!();\n    |     ^^^^^^^^^^^^^^^ help: a macro with a similar name exists: `attr_proc_mac`\n \n error: cannot find macro `FooWithLongNama` in this scope\n-  --> $DIR/resolve-error.rs:55:5\n+  --> $DIR/resolve-error.rs:51:5\n    |\n LL | macro_rules! FooWithLongNam {\n    | --------------------------- similarly named macro `FooWithLongNam` defined here\n@@ -34,19 +34,19 @@ LL |     FooWithLongNama!();\n    |     ^^^^^^^^^^^^^^^ help: a macro with a similar name exists: `FooWithLongNam`\n \n error: cannot find derive macro `attr_proc_macra` in this scope\n-  --> $DIR/resolve-error.rs:49:10\n+  --> $DIR/resolve-error.rs:45:10\n    |\n LL | #[derive(attr_proc_macra)]\n    |          ^^^^^^^^^^^^^^^\n \n error: cannot find derive macro `attr_proc_macra` in this scope\n-  --> $DIR/resolve-error.rs:49:10\n+  --> $DIR/resolve-error.rs:45:10\n    |\n LL | #[derive(attr_proc_macra)]\n    |          ^^^^^^^^^^^^^^^\n \n error: cannot find derive macro `Dlona` in this scope\n-  --> $DIR/resolve-error.rs:44:10\n+  --> $DIR/resolve-error.rs:40:10\n    |\n LL | #[derive(Dlona)]\n    |          ^^^^^ help: a derive macro with a similar name exists: `Clona`\n@@ -57,7 +57,7 @@ LL | pub fn derive_clonea(input: TokenStream) -> TokenStream {\n    | ------------------------------------------------------- similarly named derive macro `Clona` defined here\n \n error: cannot find derive macro `Dlona` in this scope\n-  --> $DIR/resolve-error.rs:44:10\n+  --> $DIR/resolve-error.rs:40:10\n    |\n LL | #[derive(Dlona)]\n    |          ^^^^^ help: a derive macro with a similar name exists: `Clona`\n@@ -68,7 +68,7 @@ LL | pub fn derive_clonea(input: TokenStream) -> TokenStream {\n    | ------------------------------------------------------- similarly named derive macro `Clona` defined here\n \n error: cannot find derive macro `Dlone` in this scope\n-  --> $DIR/resolve-error.rs:39:10\n+  --> $DIR/resolve-error.rs:35:10\n    |\n LL | #[derive(Dlone)]\n    |          ^^^^^ help: a derive macro with a similar name exists: `Clone`\n@@ -79,7 +79,7 @@ LL | pub macro Clone($item:item) {\n    | --------------------------- similarly named derive macro `Clone` defined here\n \n error: cannot find derive macro `Dlone` in this scope\n-  --> $DIR/resolve-error.rs:39:10\n+  --> $DIR/resolve-error.rs:35:10\n    |\n LL | #[derive(Dlone)]\n    |          ^^^^^ help: a derive macro with a similar name exists: `Clone`\n@@ -90,13 +90,13 @@ LL | pub macro Clone($item:item) {\n    | --------------------------- similarly named derive macro `Clone` defined here\n \n error: cannot find attribute `FooWithLongNan` in this scope\n-  --> $DIR/resolve-error.rs:36:3\n+  --> $DIR/resolve-error.rs:32:3\n    |\n LL | #[FooWithLongNan]\n    |   ^^^^^^^^^^^^^^\n \n error: cannot find attribute `attr_proc_macra` in this scope\n-  --> $DIR/resolve-error.rs:32:3\n+  --> $DIR/resolve-error.rs:28:3\n    |\n LL | #[attr_proc_macra]\n    |   ^^^^^^^^^^^^^^^ help: an attribute macro with a similar name exists: `attr_proc_macro`\n@@ -107,7 +107,7 @@ LL | pub fn empty_attr(_: TokenStream, _: TokenStream) -> TokenStream {\n    | ---------------------------------------------------------------- similarly named attribute macro `attr_proc_macro` defined here\n \n error: cannot find derive macro `FooWithLongNan` in this scope\n-  --> $DIR/resolve-error.rs:26:10\n+  --> $DIR/resolve-error.rs:22:10\n    |\n LL | #[derive(FooWithLongNan)]\n    |          ^^^^^^^^^^^^^^ help: a derive macro with a similar name exists: `FooWithLongName`\n@@ -118,7 +118,7 @@ LL | pub fn derive_foo(input: TokenStream) -> TokenStream {\n    | ---------------------------------------------------- similarly named derive macro `FooWithLongName` defined here\n \n error: cannot find derive macro `FooWithLongNan` in this scope\n-  --> $DIR/resolve-error.rs:26:10\n+  --> $DIR/resolve-error.rs:22:10\n    |\n LL | #[derive(FooWithLongNan)]\n    |          ^^^^^^^^^^^^^^ help: a derive macro with a similar name exists: `FooWithLongName`"}, {"sha": "44893036383587118d8826f0507a2693560e2d3d", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n struct R<'a> {\n     r: &'a R<'a>,\n }"}, {"sha": "75e8ae264e79d26ecafabf62a1d6447365c82844", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n-  --> $DIR/recursive-types-are-not-uninhabited.rs:11:9\n+  --> $DIR/recursive-types-are-not-uninhabited.rs:6:9\n    |\n LL |     let Ok(x) = res;\n    |         ^^^^^ pattern `Err(_)` not covered"}, {"sha": "a6f47162568816ac1e035c9b03e7df3528764d22", "filename": "src/test/ui/resolve/levenshtein.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n const MAX_ITEM: usize = 10;\n \n fn foo_bar() {}"}, {"sha": "68e0cf08ffacf64a5b34abfba79e9360600ddb48", "filename": "src/test/ui/resolve/levenshtein.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,11 +1,11 @@\n error[E0412]: cannot find type `esize` in this scope\n-  --> $DIR/levenshtein.rs:9:11\n+  --> $DIR/levenshtein.rs:5:11\n    |\n LL | fn foo(c: esize) {} // Misspelled primitive type name.\n    |           ^^^^^ help: a builtin type with a similar name exists: `isize`\n \n error[E0412]: cannot find type `Baz` in this scope\n-  --> $DIR/levenshtein.rs:14:10\n+  --> $DIR/levenshtein.rs:10:10\n    |\n LL | enum Bar { }\n    | -------- similarly named enum `Bar` defined here\n@@ -14,7 +14,7 @@ LL | type A = Baz; // Misspelled type name.\n    |          ^^^ help: an enum with a similar name exists: `Bar`\n \n error[E0412]: cannot find type `Opiton` in this scope\n-  --> $DIR/levenshtein.rs:16:10\n+  --> $DIR/levenshtein.rs:12:10\n    |\n LL | type B = Opiton<u8>; // Misspelled type name from the prelude.\n    |          ^^^^^^ help: an enum with a similar name exists: `Option`\n@@ -25,13 +25,13 @@ LL | pub enum Option<T> {\n    | ------------------ similarly named enum `Option` defined here\n \n error[E0412]: cannot find type `Baz` in this scope\n-  --> $DIR/levenshtein.rs:20:14\n+  --> $DIR/levenshtein.rs:16:14\n    |\n LL |     type A = Baz; // No suggestion here, Bar is not visible\n    |              ^^^ not found in this scope\n \n error[E0425]: cannot find value `MAXITEM` in this scope\n-  --> $DIR/levenshtein.rs:28:20\n+  --> $DIR/levenshtein.rs:24:20\n    |\n LL | const MAX_ITEM: usize = 10;\n    | --------------------------- similarly named constant `MAX_ITEM` defined here\n@@ -40,7 +40,7 @@ LL |     let v = [0u32; MAXITEM]; // Misspelled constant name.\n    |                    ^^^^^^^ help: a constant with a similar name exists: `MAX_ITEM`\n \n error[E0425]: cannot find function `foobar` in this scope\n-  --> $DIR/levenshtein.rs:30:5\n+  --> $DIR/levenshtein.rs:26:5\n    |\n LL | fn foo_bar() {}\n    | ------------ similarly named function `foo_bar` defined here\n@@ -49,7 +49,7 @@ LL |     foobar(); // Misspelled function name.\n    |     ^^^^^^ help: a function with a similar name exists: `foo_bar`\n \n error[E0412]: cannot find type `first` in module `m`\n-  --> $DIR/levenshtein.rs:32:15\n+  --> $DIR/levenshtein.rs:28:15\n    |\n LL |     pub struct First;\n    |     ----------------- similarly named struct `First` defined here\n@@ -58,7 +58,7 @@ LL |     let b: m::first = m::second; // Misspelled item in module.\n    |               ^^^^^ help: a struct with a similar name exists (notice the capitalization): `First`\n \n error[E0425]: cannot find value `second` in module `m`\n-  --> $DIR/levenshtein.rs:32:26\n+  --> $DIR/levenshtein.rs:28:26\n    |\n LL |     pub struct Second;\n    |     ------------------ similarly named unit struct `Second` defined here"}, {"sha": "193a523aed24bab627a78589bed704b887c53025", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,4 @@\n // compile-flags: --test\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n \n use std::num::ParseFloatError;\n "}, {"sha": "1c47aafec6b97f8772a6d84873fafe8643326cd5", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `main` has invalid return type `std::result::Result<f32, std::num::ParseFloatError>`\n-  --> $DIR/termination-trait-test-wrong-type.rs:10:1\n+  --> $DIR/termination-trait-test-wrong-type.rs:6:1\n    |\n LL | / fn can_parse_zero_as_f32() -> Result<f32, ParseFloatError> {\n LL | |     \"0\".parse()"}, {"sha": "f12e9198b0d7c274f767b703d1892845e66e5019", "filename": "src/test/ui/stability-in-private-module.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fstability-in-private-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fstability-in-private-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-in-private-module.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n fn main() {\n     let _ = std::thread::thread_info::current_thread();\n     //~^ERROR module `thread_info` is private"}, {"sha": "8a7588c80d71ec9758900bc42add803cd241bdd6", "filename": "src/test/ui/stability-in-private-module.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fstability-in-private-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fstability-in-private-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-in-private-module.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0603]: module `thread_info` is private\n-  --> $DIR/stability-in-private-module.rs:7:26\n+  --> $DIR/stability-in-private-module.rs:2:26\n    |\n LL |     let _ = std::thread::thread_info::current_thread();\n    |                          ^^^^^^^^^^^ private module"}, {"sha": "7c8231bbb24f80e8359fe11364e2ade19c44be91", "filename": "src/test/ui/suggestions/attribute-typos.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n #[deprcated] //~ ERROR cannot find attribute `deprcated` in this scope\n fn foo() {}\n "}, {"sha": "152700a07980a1be2f6e6f59e59a0e8c129b7df5", "filename": "src/test/ui/suggestions/attribute-typos.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,17 +1,17 @@\n error: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n-  --> $DIR/attribute-typos.rs:11:3\n+  --> $DIR/attribute-typos.rs:7:3\n    |\n LL | #[rustc_err]\n    |   ^^^^^^^^^\n \n error: cannot find attribute `rustc_err` in this scope\n-  --> $DIR/attribute-typos.rs:11:3\n+  --> $DIR/attribute-typos.rs:7:3\n    |\n LL | #[rustc_err]\n    |   ^^^^^^^^^ help: a built-in attribute with a similar name exists: `rustc_error`\n \n error: cannot find attribute `tests` in this scope\n-  --> $DIR/attribute-typos.rs:8:3\n+  --> $DIR/attribute-typos.rs:4:3\n    |\n LL | #[tests]\n    |   ^^^^^ help: an attribute macro with a similar name exists: `test`\n@@ -22,7 +22,7 @@ LL |     pub macro test($item:item) {\n    |     -------------------------- similarly named attribute macro `test` defined here\n \n error: cannot find attribute `deprcated` in this scope\n-  --> $DIR/attribute-typos.rs:5:3\n+  --> $DIR/attribute-typos.rs:1:3\n    |\n LL | #[deprcated]\n    |   ^^^^^^^^^ help: a built-in attribute with a similar name exists: `deprecated`"}, {"sha": "288d6c699f59a03a38335fea9aef48938e33288b", "filename": "src/test/ui/suggestions/imm-ref-trait-object.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n fn test(t: &dyn Iterator<Item=&u64>) -> u64 {\n      t.min().unwrap() //~ ERROR the `min` method cannot be invoked on a trait object\n }"}, {"sha": "37c20535229610f60879c7fe58763e0d164e9128", "filename": "src/test/ui/suggestions/imm-ref-trait-object.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error: the `min` method cannot be invoked on a trait object\n-  --> $DIR/imm-ref-trait-object.rs:7:8\n+  --> $DIR/imm-ref-trait-object.rs:2:8\n    |\n LL |      t.min().unwrap()\n    |        ^^^"}, {"sha": "f8b86377187c589077d3ac33468f0cdae6ce5ce8", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n use std::env::args;\n use std::fs::File;\n use std::io::{stdout, Write, BufWriter};"}, {"sha": "57a389cbb49b5cc840228813bfc2f06d20c2ac2e", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n-  --> $DIR/mut-borrow-needed-by-trait.rs:21:29\n+  --> $DIR/mut-borrow-needed-by-trait.rs:17:29\n    |\n LL |     let fp = BufWriter::new(fp);\n    |                             ^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n@@ -8,7 +8,7 @@ LL |     let fp = BufWriter::new(fp);\n    = note: required by `std::io::BufWriter::<W>::new`\n \n error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n-  --> $DIR/mut-borrow-needed-by-trait.rs:21:14\n+  --> $DIR/mut-borrow-needed-by-trait.rs:17:14\n    |\n LL |     let fp = BufWriter::new(fp);\n    |              ^^^^^^^^^^^^^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n@@ -17,7 +17,7 @@ LL |     let fp = BufWriter::new(fp);\n    = note: required by `std::io::BufWriter`\n \n error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n-  --> $DIR/mut-borrow-needed-by-trait.rs:21:14\n+  --> $DIR/mut-borrow-needed-by-trait.rs:17:14\n    |\n LL |     let fp = BufWriter::new(fp);\n    |              ^^^^^^^^^^^^^^^^^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n@@ -26,7 +26,7 @@ LL |     let fp = BufWriter::new(fp);\n    = note: required by `std::io::BufWriter`\n \n error[E0599]: no method named `write_fmt` found for struct `std::io::BufWriter<&dyn std::io::Write>` in the current scope\n-  --> $DIR/mut-borrow-needed-by-trait.rs:26:5\n+  --> $DIR/mut-borrow-needed-by-trait.rs:22:5\n    |\n LL |     writeln!(fp, \"hello world\").unwrap();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `std::io::BufWriter<&dyn std::io::Write>`"}, {"sha": "d62fd7e59c9204b6c89f8f643d283ff665d8d1b0", "filename": "src/test/ui/traits/trait-alias/trait-alias-object-fail.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n #![feature(trait_alias)]\n \n trait EqAlias = Eq;"}, {"sha": "56ecb7256f8cde343effcbf6909f2b09a901f338", "filename": "src/test/ui/traits/trait-alias/trait-alias-object-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0038]: the trait `std::cmp::Eq` cannot be made into an object\n-  --> $DIR/trait-alias-object-fail.rs:12:13\n+  --> $DIR/trait-alias-object-fail.rs:7:13\n    |\n LL |     let _: &dyn EqAlias = &123;\n    |             ^^^^^^^^^^^ the trait `std::cmp::Eq` cannot be made into an object\n@@ -10,7 +10,7 @@ LL | pub trait Eq: PartialEq<Self> {\n    |               --------------- the trait cannot be made into an object because it uses `Self` as a type parameter in this\n \n error[E0191]: the value of the associated type `Item` (from trait `std::iter::Iterator`) must be specified\n-  --> $DIR/trait-alias-object-fail.rs:14:17\n+  --> $DIR/trait-alias-object-fail.rs:9:17\n    |\n LL |     let _: &dyn IteratorAlias = &vec![123].into_iter();\n    |                 ^^^^^^^^^^^^^ help: specify the associated type: `IteratorAlias<Item = Type>`"}, {"sha": "8405e5ff62e8ec7cb0e91aa839d7ff9ad2662a41", "filename": "src/test/ui/traits/trait-suggest-where-clause.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n use std::mem;\n \n struct Misc<T:?Sized>(T);"}, {"sha": "4dddcd68f26c90a801d32595ce9d2f53beaa8cd3", "filename": "src/test/ui/traits/trait-suggest-where-clause.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `U` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:11:20\n+  --> $DIR/trait-suggest-where-clause.rs:7:20\n    |\n LL | fn check<T: Iterator, U: ?Sized>() {\n    |                       - this type parameter needs to be `std::marker::Sized`\n@@ -16,7 +16,7 @@ LL | pub const fn size_of<T>() -> usize {\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `U` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:14:5\n+  --> $DIR/trait-suggest-where-clause.rs:10:5\n    |\n LL | fn check<T: Iterator, U: ?Sized>() {\n    |                       - this type parameter needs to be `std::marker::Sized`\n@@ -34,31 +34,31 @@ LL | pub const fn size_of<T>() -> usize {\n    = note: required because it appears within the type `Misc<U>`\n \n error[E0277]: the trait bound `u64: std::convert::From<T>` is not satisfied\n-  --> $DIR/trait-suggest-where-clause.rs:19:5\n+  --> $DIR/trait-suggest-where-clause.rs:15:5\n    |\n LL |     <u64 as From<T>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<T>` is not implemented for `u64`\n    |\n    = note: required by `std::convert::From::from`\n \n error[E0277]: the trait bound `u64: std::convert::From<<T as std::iter::Iterator>::Item>` is not satisfied\n-  --> $DIR/trait-suggest-where-clause.rs:22:5\n+  --> $DIR/trait-suggest-where-clause.rs:18:5\n    |\n LL |     <u64 as From<<T as Iterator>::Item>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<<T as std::iter::Iterator>::Item>` is not implemented for `u64`\n    |\n    = note: required by `std::convert::From::from`\n \n error[E0277]: the trait bound `Misc<_>: std::convert::From<T>` is not satisfied\n-  --> $DIR/trait-suggest-where-clause.rs:27:5\n+  --> $DIR/trait-suggest-where-clause.rs:23:5\n    |\n LL |     <Misc<_> as From<T>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<T>` is not implemented for `Misc<_>`\n    |\n    = note: required by `std::convert::From::from`\n \n error[E0277]: the size for values of type `[T]` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:32:20\n+  --> $DIR/trait-suggest-where-clause.rs:28:20\n    |\n LL |     mem::size_of::<[T]>();\n    |                    ^^^ doesn't have a size known at compile-time\n@@ -72,7 +72,7 @@ LL | pub const fn size_of<T>() -> usize {\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `[&U]` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:35:5\n+  --> $DIR/trait-suggest-where-clause.rs:31:5\n    |\n LL |     mem::size_of::<[&U]>();\n    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "1f1c8ad96269051104cd1acb50b832aaa4aa1b1a", "filename": "src/test/ui/type_length_limit.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ftype_length_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Ftype_length_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,4 @@\n // build-fail\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n // error-pattern: reached the type-length limit while instantiating\n \n // Test that the type length limit can be changed."}, {"sha": "e804afcf9ed99bf214a9ea4d51f1f48c2eacfcd3", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n use std::mem::zeroed;\n enum Void {}\n "}, {"sha": "c7bf6710d06bf35186315706c269f3080ab358a3", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `Err(_)` not covered\n-  --> $DIR/uninhabited-matches-feature-gated.rs:11:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:6:19\n    |\n LL |     let _ = match x {\n    |                   ^ pattern `Err(_)` not covered\n@@ -13,7 +13,7 @@ LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n    = note: the matched value is of type `std::result::Result<u32, &Void>`\n \n error[E0004]: non-exhaustive patterns: type `&Void` is non-empty\n-  --> $DIR/uninhabited-matches-feature-gated.rs:20:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:15:19\n    |\n LL | enum Void {}\n    | ------------ `Void` defined here\n@@ -25,7 +25,7 @@ LL |     let _ = match x {};\n    = note: the matched value is of type `&Void`\n \n error[E0004]: non-exhaustive patterns: type `(Void,)` is non-empty\n-  --> $DIR/uninhabited-matches-feature-gated.rs:23:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:18:19\n    |\n LL |     let _ = match x {};\n    |                   ^\n@@ -34,7 +34,7 @@ LL |     let _ = match x {};\n    = note: the matched value is of type `(Void,)`\n \n error[E0004]: non-exhaustive patterns: type `[Void; 1]` is non-empty\n-  --> $DIR/uninhabited-matches-feature-gated.rs:26:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:21:19\n    |\n LL |     let _ = match x {};\n    |                   ^\n@@ -43,7 +43,7 @@ LL |     let _ = match x {};\n    = note: the matched value is of type `[Void; 1]`\n \n error[E0004]: non-exhaustive patterns: `&[_, ..]` not covered\n-  --> $DIR/uninhabited-matches-feature-gated.rs:29:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:24:19\n    |\n LL |     let _ = match x {\n    |                   ^ pattern `&[_, ..]` not covered\n@@ -52,7 +52,7 @@ LL |     let _ = match x {\n    = note: the matched value is of type `&[Void]`\n \n error[E0004]: non-exhaustive patterns: `Err(_)` not covered\n-  --> $DIR/uninhabited-matches-feature-gated.rs:37:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:32:19\n    |\n LL |     let _ = match x {\n    |                   ^ pattern `Err(_)` not covered\n@@ -66,7 +66,7 @@ LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n    = note: the matched value is of type `std::result::Result<u32, Void>`\n \n error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n-  --> $DIR/uninhabited-matches-feature-gated.rs:42:9\n+  --> $DIR/uninhabited-matches-feature-gated.rs:37:9\n    |\n LL |     let Ok(x) = x;\n    |         ^^^^^ pattern `Err(_)` not covered"}, {"sha": "4a106cc940a18a35a8f668bca0ced845eb2b3a17", "filename": "src/test/ui/union/union-derive-clone.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,8 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n-\n #![feature(untagged_unions)]\n \n use std::mem::ManuallyDrop;"}, {"sha": "66437611872dfe366f539e66e346e4b2b5d2afb3", "filename": "src/test/ui/union/union-derive-clone.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `U1: std::marker::Copy` is not satisfied\n-  --> $DIR/union-derive-clone.rs:10:10\n+  --> $DIR/union-derive-clone.rs:5:10\n    |\n LL | #[derive(Clone)]\n    |          ^^^^^ the trait `std::marker::Copy` is not implemented for `U1`\n@@ -8,7 +8,7 @@ LL | #[derive(Clone)]\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0599]: no method named `clone` found for union `U5<CloneNoCopy>` in the current scope\n-  --> $DIR/union-derive-clone.rs:42:15\n+  --> $DIR/union-derive-clone.rs:37:15\n    |\n LL | union U5<T> {\n    | -----------"}, {"sha": "dd38a7190aa0e9d83b71c686a619097e7ff68404", "filename": "src/test/ui/unique-object-noncopyable.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Funique-object-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Funique-object-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-object-noncopyable.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n #![feature(box_syntax)]\n \n trait Foo {"}, {"sha": "161e25bb8c5f138aeeac5d043023bf1c0a845dbc", "filename": "src/test/ui/unique-object-noncopyable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `clone` found for struct `std::boxed::Box<dyn Foo>` in the current scope\n-  --> $DIR/unique-object-noncopyable.rs:28:16\n+  --> $DIR/unique-object-noncopyable.rs:24:16\n    |\n LL | trait Foo {\n    | ---------"}, {"sha": "4c30450c70455fc45b1c87be9ca072d73c19b538", "filename": "src/test/ui/unique-pinned-nocopy.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-pinned-nocopy.rs?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n #[derive(Debug)]\n struct R {\n   b: bool,"}, {"sha": "38c110c04c4795214ec8fe733a76200bb5d390b3", "filename": "src/test/ui/unique-pinned-nocopy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53e4b38779c3c074ae571b8520ab08e5bb0b904/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr?ref=c53e4b38779c3c074ae571b8520ab08e5bb0b904", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `clone` found for struct `std::boxed::Box<R>` in the current scope\n-  --> $DIR/unique-pinned-nocopy.rs:16:16\n+  --> $DIR/unique-pinned-nocopy.rs:12:16\n    |\n LL | struct R {\n    | -------- doesn't satisfy `R: std::clone::Clone`"}]}