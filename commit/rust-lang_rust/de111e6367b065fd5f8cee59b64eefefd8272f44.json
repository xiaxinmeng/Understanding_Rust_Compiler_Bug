{"sha": "de111e6367b065fd5f8cee59b64eefefd8272f44", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMTExZTYzNjdiMDY1ZmQ1ZjhjZWU1OWI2NGVlZmVmZDgyNzJmNDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-10T08:52:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-10T08:52:10Z"}, "message": "Auto merge of #58103 - RalfJung:mir-shim-dump, r=eddyb\n\nMake -Zdump-mir dump shims\n\nFixes https://github.com/rust-lang/rust/issues/53532 by (a) making the MIR shim generation use the MIR pass infrastructure, and (b) fixing said infrastructure to handle the fallout.\n\nCc @eddyb @oli-obk", "tree": {"sha": "f5c63bf1babf80ad2d3cab2e26a9ed618f08d37a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5c63bf1babf80ad2d3cab2e26a9ed618f08d37a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de111e6367b065fd5f8cee59b64eefefd8272f44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de111e6367b065fd5f8cee59b64eefefd8272f44", "html_url": "https://github.com/rust-lang/rust/commit/de111e6367b065fd5f8cee59b64eefefd8272f44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de111e6367b065fd5f8cee59b64eefefd8272f44/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e08bb1dd2863b94943fdca5a57ff2188e87623f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e08bb1dd2863b94943fdca5a57ff2188e87623f", "html_url": "https://github.com/rust-lang/rust/commit/2e08bb1dd2863b94943fdca5a57ff2188e87623f"}, {"sha": "544b3a1bb476364f1e5d149cf82beb98a219dda5", "url": "https://api.github.com/repos/rust-lang/rust/commits/544b3a1bb476364f1e5d149cf82beb98a219dda5", "html_url": "https://github.com/rust-lang/rust/commit/544b3a1bb476364f1e5d149cf82beb98a219dda5"}], "stats": {"total": 303, "additions": 173, "deletions": 130}, "files": [{"sha": "955f834e40398126186162c1931c7c41765bc39d", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -371,16 +371,19 @@ impl<'hir> Map<'hir> {\n                 let def_id = self.local_def_id(variant.node.data.id());\n                 Some(Def::Variant(def_id))\n             }\n-            Node::Field(_) |\n+            Node::StructCtor(variant) => {\n+                let def_id = self.local_def_id(variant.id());\n+                Some(Def::StructCtor(def_id, def::CtorKind::from_hir(variant)))\n+            }\n             Node::AnonConst(_) |\n+            Node::Field(_) |\n             Node::Expr(_) |\n             Node::Stmt(_) |\n             Node::PathSegment(_) |\n             Node::Ty(_) |\n             Node::TraitRef(_) |\n             Node::Pat(_) |\n             Node::Binding(_) |\n-            Node::StructCtor(_) |\n             Node::Lifetime(_) |\n             Node::Visibility(_) |\n             Node::Block(_) |"}, {"sha": "84fdbb9423e0a2259cb609b24fe2a0bfd19c580b", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -209,7 +209,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n \n fn dump_mir_results<'a, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n-    source: MirSource,\n+    source: MirSource<'tcx>,\n     mir: &Mir<'tcx>,\n     regioncx: &RegionInferenceContext<'_>,\n     closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,"}, {"sha": "add07b1ddfe0551fabeb7a6c247cbee28c9c1b84", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -2427,8 +2427,13 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n pub struct TypeckMir;\n \n impl MirPass for TypeckMir {\n-    fn run_pass<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, src: MirSource, mir: &mut Mir<'tcx>) {\n-        let def_id = src.def_id;\n+    fn run_pass<'a, 'tcx>(\n+        &self,\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        src: MirSource<'tcx>,\n+        mir: &mut Mir<'tcx>,\n+    ) {\n+        let def_id = src.def_id();\n         debug!(\"run_pass: {:?}\", def_id);\n \n         // When NLL is enabled, the borrow checker runs the typeck"}, {"sha": "09b8165150293da267690f908de0e99f53ed5cba", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -16,8 +16,10 @@ use syntax_pos::Span;\n use std::fmt;\n use std::iter;\n \n-use crate::transform::{add_moves_for_packed_drops, add_call_guards};\n-use crate::transform::{remove_noop_landing_pads, no_landing_pads, simplify};\n+use crate::transform::{\n+    add_moves_for_packed_drops, add_call_guards,\n+    remove_noop_landing_pads, no_landing_pads, simplify, run_passes\n+};\n use crate::util::elaborate_drops::{self, DropElaborator, DropStyle, DropFlagMode};\n use crate::util::patch::MirPatch;\n \n@@ -113,12 +115,15 @@ fn make_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     };\n     debug!(\"make_shim({:?}) = untransformed {:?}\", instance, result);\n-    add_moves_for_packed_drops::add_moves_for_packed_drops(\n-        tcx, &mut result, instance.def_id());\n-    no_landing_pads::no_landing_pads(tcx, &mut result);\n-    remove_noop_landing_pads::remove_noop_landing_pads(tcx, &mut result);\n-    simplify::simplify_cfg(&mut result);\n-    add_call_guards::CriticalCallEdges.add_call_guards(&mut result);\n+\n+    run_passes(tcx, &mut result, instance, MirPhase::Const, &[\n+        &add_moves_for_packed_drops::AddMovesForPackedDrops,\n+        &no_landing_pads::NoLandingPads,\n+        &remove_noop_landing_pads::RemoveNoopLandingPads,\n+        &simplify::SimplifyCfg::new(\"make_shim\"),\n+        &add_call_guards::CriticalCallEdges,\n+    ]);\n+\n     debug!(\"make_shim({:?}) = {:?}\", instance, result);\n \n     tcx.alloc_mir(result)"}, {"sha": "88042d64e96b7271b3600d884dcf73165bb6667b", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -33,7 +33,7 @@ pub use self::AddCallGuards::*;\n impl MirPass for AddCallGuards {\n     fn run_pass<'a, 'tcx>(&self,\n                           _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _src: MirSource,\n+                          _src: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         self.add_call_guards(mir);\n     }"}, {"sha": "4d4c89b8b6a40a38c35655d5a014c7e7a968ff95", "filename": "src/librustc_mir/transform/add_moves_for_packed_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -42,11 +42,11 @@ pub struct AddMovesForPackedDrops;\n impl MirPass for AddMovesForPackedDrops {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          src: MirSource,\n+                          src: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>)\n     {\n         debug!(\"add_moves_for_packed_drops({:?} @ {:?})\", src, mir.span);\n-        add_moves_for_packed_drops(tcx, mir, src.def_id);\n+        add_moves_for_packed_drops(tcx, mir, src.def_id());\n     }\n }\n "}, {"sha": "e66c11aa36e0e5d1fba1e51cfc7229d3566efbd5", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -77,7 +77,7 @@ fn may_have_reference<'a, 'gcx, 'tcx>(ty: Ty<'tcx>, tcx: TyCtxt<'a, 'gcx, 'tcx>)\n impl MirPass for AddRetag {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _src: MirSource,\n+                          _src: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>)\n     {\n         if !tcx.sess.opts.debugging_opts.mir_emit_retag {"}, {"sha": "890d2c56f42b24933bbe40f5939de808af317e13", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -35,7 +35,7 @@ pub struct DeleteAscribeUserType;\n impl MirPass for CleanAscribeUserType {\n     fn run_pass<'a, 'tcx>(&self,\n                           _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _source: MirSource,\n+                          _source: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         let mut delete = DeleteAscribeUserType;\n         delete.visit_mir(mir);\n@@ -69,7 +69,7 @@ pub struct DeleteFakeBorrows {\n impl MirPass for CleanFakeReadsAndBorrows {\n     fn run_pass<'a, 'tcx>(&self,\n                           _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _source: MirSource,\n+                          _source: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         let mut delete_reads = DeleteAndRecordFakeReads::default();\n         delete_reads.visit_mir(mir);"}, {"sha": "018f71c39e513793ea9b9c3e18e875e7415e19ad", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -30,31 +30,31 @@ pub struct ConstProp;\n impl MirPass for ConstProp {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          source: MirSource,\n+                          source: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         // will be evaluated by miri and produce its errors there\n         if source.promoted.is_some() {\n             return;\n         }\n \n         use rustc::hir::map::blocks::FnLikeNode;\n-        let node_id = tcx.hir().as_local_node_id(source.def_id)\n+        let node_id = tcx.hir().as_local_node_id(source.def_id())\n                              .expect(\"Non-local call to local provider is_const_fn\");\n \n         let is_fn_like = FnLikeNode::from_node(tcx.hir().get(node_id)).is_some();\n-        let is_assoc_const = match tcx.describe_def(source.def_id) {\n+        let is_assoc_const = match tcx.describe_def(source.def_id()) {\n             Some(Def::AssociatedConst(_)) => true,\n             _ => false,\n         };\n \n         // Only run const prop on functions, methods, closures and associated constants\n         if !is_fn_like && !is_assoc_const  {\n             // skip anon_const/statics/consts because they'll be evaluated by miri anyway\n-            trace!(\"ConstProp skipped for {:?}\", source.def_id);\n+            trace!(\"ConstProp skipped for {:?}\", source.def_id());\n             return\n         }\n \n-        trace!(\"ConstProp starting for {:?}\", source.def_id);\n+        trace!(\"ConstProp starting for {:?}\", source.def_id());\n \n         // FIXME(oli-obk, eddyb) Optimize locals (or even local paths) to hold\n         // constants, instead of just checking for const-folding succeeding.\n@@ -63,7 +63,7 @@ impl MirPass for ConstProp {\n         let mut optimization_finder = ConstPropagator::new(mir, tcx, source);\n         optimization_finder.visit_mir(mir);\n \n-        trace!(\"ConstProp done for {:?}\", source.def_id);\n+        trace!(\"ConstProp done for {:?}\", source.def_id());\n     }\n }\n \n@@ -74,7 +74,7 @@ struct ConstPropagator<'a, 'mir, 'tcx:'a+'mir> {\n     ecx: EvalContext<'a, 'mir, 'tcx, CompileTimeInterpreter<'a, 'mir, 'tcx>>,\n     mir: &'mir Mir<'tcx>,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    source: MirSource,\n+    source: MirSource<'tcx>,\n     places: IndexVec<Local, Option<Const<'tcx>>>,\n     can_const_prop: IndexVec<Local, bool>,\n     param_env: ParamEnv<'tcx>,\n@@ -107,10 +107,10 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n     fn new(\n         mir: &'mir Mir<'tcx>,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        source: MirSource,\n+        source: MirSource<'tcx>,\n     ) -> ConstPropagator<'a, 'mir, 'tcx> {\n-        let param_env = tcx.param_env(source.def_id);\n-        let ecx = mk_eval_cx(tcx, tcx.def_span(source.def_id), param_env);\n+        let param_env = tcx.param_env(source.def_id());\n+        let ecx = mk_eval_cx(tcx, tcx.def_span(source.def_id()), param_env);\n         ConstPropagator {\n             ecx,\n             mir,\n@@ -284,13 +284,13 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                 _ => None,\n             },\n             Place::Promoted(ref promoted) => {\n-                let generics = self.tcx.generics_of(self.source.def_id);\n+                let generics = self.tcx.generics_of(self.source.def_id());\n                 if generics.requires_monomorphization(self.tcx) {\n                     // FIXME: can't handle code with generics\n                     return None;\n                 }\n-                let substs = Substs::identity_for_item(self.tcx, self.source.def_id);\n-                let instance = Instance::new(self.source.def_id, substs);\n+                let substs = Substs::identity_for_item(self.tcx, self.source.def_id());\n+                let instance = Instance::new(self.source.def_id(), substs);\n                 let cid = GlobalId {\n                     instance,\n                     promoted: Some(promoted.0),\n@@ -358,10 +358,10 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                 )))\n             }\n             Rvalue::UnaryOp(op, ref arg) => {\n-                let def_id = if self.tcx.is_closure(self.source.def_id) {\n-                    self.tcx.closure_base_def_id(self.source.def_id)\n+                let def_id = if self.tcx.is_closure(self.source.def_id()) {\n+                    self.tcx.closure_base_def_id(self.source.def_id())\n                 } else {\n-                    self.source.def_id\n+                    self.source.def_id()\n                 };\n                 let generics = self.tcx.generics_of(def_id);\n                 if generics.requires_monomorphization(self.tcx) {\n@@ -398,10 +398,10 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n             Rvalue::BinaryOp(op, ref left, ref right) => {\n                 trace!(\"rvalue binop {:?} for {:?} and {:?}\", op, left, right);\n                 let right = self.eval_operand(right, source_info)?;\n-                let def_id = if self.tcx.is_closure(self.source.def_id) {\n-                    self.tcx.closure_base_def_id(self.source.def_id)\n+                let def_id = if self.tcx.is_closure(self.source.def_id()) {\n+                    self.tcx.closure_base_def_id(self.source.def_id())\n                 } else {\n-                    self.source.def_id\n+                    self.source.def_id()\n                 };\n                 let generics = self.tcx.generics_of(def_id);\n                 if generics.requires_monomorphization(self.tcx) {\n@@ -608,7 +608,7 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n                     let node_id = self\n                         .tcx\n                         .hir()\n-                        .as_local_node_id(self.source.def_id)\n+                        .as_local_node_id(self.source.def_id())\n                         .expect(\"some part of a failing const eval must be local\");\n                     use rustc::mir::interpret::EvalErrorKind::*;\n                     let msg = match msg {"}, {"sha": "7d907ca3a215e019f67e6ecb907549e0047452d5", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -30,7 +30,7 @@ pub struct CopyPropagation;\n impl MirPass for CopyPropagation {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _source: MirSource,\n+                          _source: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         // We only run when the MIR optimization level is > 1.\n         // This avoids a slow pass, and messing up debug info."}, {"sha": "9061dfff76fe8f57f5b55e62cb46458de7b1c588", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -8,7 +8,7 @@ pub struct Deaggregator;\n impl MirPass for Deaggregator {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _source: MirSource,\n+                          _source: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         let (basic_blocks, local_decls) = mir.basic_blocks_and_local_decls_mut();\n         let local_decls = &*local_decls;"}, {"sha": "81e48fe2dbe3bb33d9495bef7ed428000f36e934", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -20,7 +20,7 @@ impl MirPass for Marker {\n \n     fn run_pass<'a, 'tcx>(&self,\n                           _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _source: MirSource,\n+                          _source: MirSource<'tcx>,\n                           _mir: &mut Mir<'tcx>)\n     {\n     }\n@@ -41,7 +41,7 @@ impl fmt::Display for Disambiguator {\n pub fn on_mir_pass<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              pass_num: &dyn fmt::Display,\n                              pass_name: &str,\n-                             source: MirSource,\n+                             source: MirSource<'tcx>,\n                              mir: &Mir<'tcx>,\n                              is_after: bool) {\n     if mir_util::dump_enabled(tcx, pass_name, source) {"}, {"sha": "c56acbaeb26ffdfc811eb4d2db85543b2e893242", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -23,13 +23,13 @@ pub struct ElaborateDrops;\n impl MirPass for ElaborateDrops {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          src: MirSource,\n+                          src: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>)\n     {\n         debug!(\"elaborate_drops({:?} @ {:?})\", src, mir.span);\n \n-        let id = tcx.hir().as_local_node_id(src.def_id).unwrap();\n-        let param_env = tcx.param_env(src.def_id).with_reveal_all();\n+        let id = tcx.hir().as_local_node_id(src.def_id()).unwrap();\n+        let param_env = tcx.param_env(src.def_id()).with_reveal_all();\n         let move_data = match MoveData::gather_moves(mir, tcx) {\n             Ok(move_data) => move_data,\n             Err((move_data, _move_errors)) => {"}, {"sha": "d59bb3ec5b1c0e30488e2cda2f8977ae854dc567", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -53,7 +53,7 @@ pub struct EraseRegions;\n impl MirPass for EraseRegions {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _: MirSource,\n+                          _: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         EraseRegionsVisitor::new(tcx).visit_mir(mir);\n     }"}, {"sha": "0866b87cf17e602ff448af2aaf7633df593c2734", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -376,14 +376,14 @@ impl<'tcx> Visitor<'tcx> for StorageIgnored {\n fn locals_live_across_suspend_points(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mir: &Mir<'tcx>,\n-    source: MirSource,\n+    source: MirSource<'tcx>,\n     movable: bool,\n ) -> (\n     liveness::LiveVarSet<Local>,\n     FxHashMap<BasicBlock, liveness::LiveVarSet<Local>>,\n ) {\n     let dead_unwinds = BitSet::new_empty(mir.basic_blocks().len());\n-    let node_id = tcx.hir().as_local_node_id(source.def_id).unwrap();\n+    let node_id = tcx.hir().as_local_node_id(source.def_id()).unwrap();\n \n     // Calculate when MIR locals have live storage. This gives us an upper bound of their\n     // lifetimes.\n@@ -484,7 +484,7 @@ fn locals_live_across_suspend_points(\n }\n \n fn compute_layout<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                            source: MirSource,\n+                            source: MirSource<'tcx>,\n                             upvars: Vec<Ty<'tcx>>,\n                             interior: Ty<'tcx>,\n                             movable: bool,\n@@ -635,7 +635,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n                 tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 transform: &TransformVisitor<'a, 'tcx>,\n                 def_id: DefId,\n-                source: MirSource,\n+                source: MirSource<'tcx>,\n                 gen_ty: Ty<'tcx>,\n                 mir: &Mir<'tcx>,\n                 drop_clean: BasicBlock) -> Mir<'tcx> {\n@@ -758,7 +758,7 @@ fn create_generator_resume_function<'a, 'tcx>(\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         transform: TransformVisitor<'a, 'tcx>,\n         def_id: DefId,\n-        source: MirSource,\n+        source: MirSource<'tcx>,\n         mir: &mut Mir<'tcx>) {\n     // Poison the generator when it unwinds\n     for block in mir.basic_blocks_mut() {\n@@ -869,7 +869,7 @@ fn create_cases<'a, 'tcx, F>(mir: &mut Mir<'tcx>,\n impl MirPass for StateTransform {\n     fn run_pass<'a, 'tcx>(&self,\n                     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                    source: MirSource,\n+                    source: MirSource<'tcx>,\n                     mir: &mut Mir<'tcx>) {\n         let yield_ty = if let Some(yield_ty) = mir.yield_ty {\n             yield_ty\n@@ -880,7 +880,7 @@ impl MirPass for StateTransform {\n \n         assert!(mir.generator_drop.is_none());\n \n-        let def_id = source.def_id;\n+        let def_id = source.def_id();\n \n         // The first argument is the generator type passed by value\n         let gen_ty = mir.local_decls.raw[1].ty;"}, {"sha": "4cb782669846635c0cd99d834c16d5ad5b73de04", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -40,7 +40,7 @@ struct CallSite<'tcx> {\n impl MirPass for Inline {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          source: MirSource,\n+                          source: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         if tcx.sess.opts.debugging_opts.mir_opt_level >= 2 {\n             Inliner { tcx, source }.run_pass(mir);\n@@ -50,7 +50,7 @@ impl MirPass for Inline {\n \n struct Inliner<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    source: MirSource,\n+    source: MirSource<'tcx>,\n }\n \n impl<'a, 'tcx> Inliner<'a, 'tcx> {\n@@ -69,10 +69,10 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n \n         let mut callsites = VecDeque::new();\n \n-        let param_env = self.tcx.param_env(self.source.def_id);\n+        let param_env = self.tcx.param_env(self.source.def_id());\n \n         // Only do inlining into fn bodies.\n-        let id = self.tcx.hir().as_local_node_id(self.source.def_id).unwrap();\n+        let id = self.tcx.hir().as_local_node_id(self.source.def_id()).unwrap();\n         if self.tcx.hir().body_owner_kind(id).is_fn_or_closure() && self.source.promoted.is_none() {\n             for (bb, bb_data) in caller_mir.basic_blocks().iter_enumerated() {\n                 if let Some(callsite) = self.get_valid_function_call(bb,\n@@ -274,7 +274,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n \n         // FIXME: Give a bonus to functions with only a single caller\n \n-        let param_env = tcx.param_env(self.source.def_id);\n+        let param_env = tcx.param_env(self.source.def_id());\n \n         let mut first_block = true;\n         let mut cost = 0;"}, {"sha": "290915763e275671df529077793a6d3231c0d73e", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -13,7 +13,7 @@ pub struct InstCombine;\n impl MirPass for InstCombine {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _: MirSource,\n+                          _: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         // We only run when optimizing MIR (at any level).\n         if tcx.sess.opts.debugging_opts.mir_opt_level == 0 {"}, {"sha": "3d1f55e530e62a7c88ea1dc9a210d01e470cac90", "filename": "src/librustc_mir/transform/lower_128bit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -12,7 +12,7 @@ pub struct Lower128Bit;\n impl MirPass for Lower128Bit {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _src: MirSource,\n+                          _src: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         let debugging_override = tcx.sess.opts.debugging_opts.lower_128bit_ops;\n         let target_default = tcx.sess.host.options.i128_lowering;"}, {"sha": "44061e689b3be336a1a8a5c535d666377549c88f", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -2,7 +2,7 @@ use crate::borrow_check::nll::type_check;\n use crate::build;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::mir::{Mir, MirPhase, Promoted};\n-use rustc::ty::TyCtxt;\n+use rustc::ty::{TyCtxt, InstanceDef};\n use rustc::ty::query::Providers;\n use rustc::ty::steal::Steal;\n use rustc::hir;\n@@ -104,20 +104,25 @@ fn mir_built<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Stea\n \n /// Where a specific Mir comes from.\n #[derive(Debug, Copy, Clone)]\n-pub struct MirSource {\n-    pub def_id: DefId,\n+pub struct MirSource<'tcx> {\n+    pub instance: InstanceDef<'tcx>,\n \n     /// If `Some`, this is a promoted rvalue within the parent function.\n     pub promoted: Option<Promoted>,\n }\n \n-impl MirSource {\n+impl<'tcx> MirSource<'tcx> {\n     pub fn item(def_id: DefId) -> Self {\n         MirSource {\n-            def_id,\n+            instance: InstanceDef::Item(def_id),\n             promoted: None\n         }\n     }\n+\n+    #[inline]\n+    pub fn def_id(&self) -> DefId {\n+        self.instance.def_id()\n+    }\n }\n \n /// Generates a default name for the pass based on the name of the\n@@ -141,14 +146,14 @@ pub trait MirPass {\n \n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          source: MirSource,\n+                          source: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>);\n }\n \n pub fn run_passes(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mir: &mut Mir<'tcx>,\n-    def_id: DefId,\n+    instance: InstanceDef<'tcx>,\n     mir_phase: MirPhase,\n     passes: &[&dyn MirPass],\n ) {\n@@ -160,7 +165,7 @@ pub fn run_passes(\n         }\n \n         let source = MirSource {\n-            def_id,\n+            instance,\n             promoted,\n         };\n         let mut index = 0;\n@@ -198,7 +203,7 @@ fn mir_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Stea\n     let _ = tcx.unsafety_check_result(def_id);\n \n     let mut mir = tcx.mir_built(def_id).steal();\n-    run_passes(tcx, &mut mir, def_id, MirPhase::Const, &[\n+    run_passes(tcx, &mut mir, InstanceDef::Item(def_id), MirPhase::Const, &[\n         // What we need to do constant evaluation.\n         &simplify::SimplifyCfg::new(\"initial\"),\n         &type_check::TypeckMir,\n@@ -217,7 +222,7 @@ fn mir_validated<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n     }\n \n     let mut mir = tcx.mir_const(def_id).steal();\n-    run_passes(tcx, &mut mir, def_id, MirPhase::Validated, &[\n+    run_passes(tcx, &mut mir, InstanceDef::Item(def_id), MirPhase::Validated, &[\n         // What we need to run borrowck etc.\n         &qualify_consts::QualifyAndPromoteConstants,\n         &simplify::SimplifyCfg::new(\"qualify-consts\"),\n@@ -235,7 +240,7 @@ fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n     }\n \n     let mut mir = tcx.mir_validated(def_id).steal();\n-    run_passes(tcx, &mut mir, def_id, MirPhase::Optimized, &[\n+    run_passes(tcx, &mut mir, InstanceDef::Item(def_id), MirPhase::Optimized, &[\n         // Remove all things not needed by analysis\n         &no_landing_pads::NoLandingPads,\n         &simplify_branches::SimplifyBranches::new(\"initial\"),"}, {"sha": "089d9b9b544540a83cc3e2bb4af4b097adfa2ef7", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -11,7 +11,7 @@ pub struct NoLandingPads;\n impl MirPass for NoLandingPads {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _: MirSource,\n+                          _: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         no_landing_pads(tcx, mir)\n     }"}, {"sha": "76b8b83031a0a239b830c66509e691b1a0202df7", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -1159,7 +1159,7 @@ pub struct QualifyAndPromoteConstants;\n impl MirPass for QualifyAndPromoteConstants {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          src: MirSource,\n+                          src: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         // There's not really any point in promoting errorful MIR.\n         if mir.return_ty().references_error() {\n@@ -1171,7 +1171,7 @@ impl MirPass for QualifyAndPromoteConstants {\n             return;\n         }\n \n-        let def_id = src.def_id;\n+        let def_id = src.def_id();\n         let id = tcx.hir().as_local_node_id(def_id).unwrap();\n         let mut const_promoted_temps = None;\n         let mode = match tcx.hir().body_owner_kind(id) {"}, {"sha": "68832b73ccd8737a4f2b998c870c4fe7ee7a4fdf", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -24,7 +24,7 @@ pub fn remove_noop_landing_pads<'a, 'tcx>(\n impl MirPass for RemoveNoopLandingPads {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _src: MirSource,\n+                          _src: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         remove_noop_landing_pads(tcx, mir);\n     }"}, {"sha": "40e02e712c1565bb59065a1a97a6ca0805dc5ed1", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -24,8 +24,8 @@ pub struct SanityCheck;\n \n impl MirPass for SanityCheck {\n     fn run_pass<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          src: MirSource, mir: &mut Mir<'tcx>) {\n-        let def_id = src.def_id;\n+                          src: MirSource<'tcx>, mir: &mut Mir<'tcx>) {\n+        let def_id = src.def_id();\n         let id = tcx.hir().as_local_node_id(def_id).unwrap();\n         if !tcx.has_attr(def_id, \"rustc_mir\") {\n             debug!(\"skipping rustc_peek::SanityCheck on {}\", tcx.item_path_str(def_id));"}, {"sha": "14e7895af0419572fa946ba532f02af8ec16374c", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -59,7 +59,7 @@ impl MirPass for SimplifyCfg {\n \n     fn run_pass<'a, 'tcx>(&self,\n                           _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _src: MirSource,\n+                          _src: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         debug!(\"SimplifyCfg({:?}) - simplifying {:?}\", self.label, mir);\n         simplify_cfg(mir);\n@@ -298,7 +298,7 @@ pub struct SimplifyLocals;\n impl MirPass for SimplifyLocals {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _: MirSource,\n+                          _: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         let mut marker = DeclMarker { locals: BitSet::new_empty(mir.local_decls.len()) };\n         marker.visit_mir(mir);"}, {"sha": "3c4d1227a691c4fa7bf2dd67af95f5e2797bbe4d", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -21,7 +21,7 @@ impl MirPass for SimplifyBranches {\n \n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _src: MirSource,\n+                          _src: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         for block in mir.basic_blocks_mut() {\n             let terminator = block.terminator_mut();"}, {"sha": "fd8d68a482262320658f748fc1294c6d08f0da82", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -39,7 +39,7 @@ pub struct UniformArrayMoveOut;\n impl MirPass for UniformArrayMoveOut {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _src: MirSource,\n+                          _src: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         let mut patch = MirPatch::new(mir);\n         {\n@@ -161,7 +161,7 @@ pub struct RestoreSubsliceArrayMoveOut;\n impl MirPass for RestoreSubsliceArrayMoveOut {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _src: MirSource,\n+                          _src: MirSource<'tcx>,\n                           mir: &mut Mir<'tcx>) {\n         let mut patch = MirPatch::new(mir);\n         {"}, {"sha": "847699cc500c9b979d86ec96be83af46e3b02cc4", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -307,7 +307,7 @@ fn block<'tcx, V: Idx>(\n pub fn dump_mir<'a, 'tcx, V: Idx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     pass_name: &str,\n-    source: MirSource,\n+    source: MirSource<'tcx>,\n     mir: &Mir<'tcx>,\n     map: &impl LiveVariableMap<LiveVar = V>,\n     result: &LivenessResult<V>,\n@@ -317,7 +317,7 @@ pub fn dump_mir<'a, 'tcx, V: Idx>(\n     }\n     let node_path = item_path::with_forced_impl_filename_line(|| {\n         // see notes on #41697 below\n-        tcx.item_path_str(source.def_id)\n+        tcx.item_path_str(source.def_id())\n     });\n     dump_matched_mir_node(tcx, pass_name, &node_path, source, mir, map, result);\n }\n@@ -326,14 +326,14 @@ fn dump_matched_mir_node<'a, 'tcx, V: Idx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     pass_name: &str,\n     node_path: &str,\n-    source: MirSource,\n+    source: MirSource<'tcx>,\n     mir: &Mir<'tcx>,\n     map: &dyn LiveVariableMap<LiveVar = V>,\n     result: &LivenessResult<V>,\n ) {\n     let mut file_path = PathBuf::new();\n     file_path.push(Path::new(&tcx.sess.opts.debugging_opts.dump_mir_dir));\n-    let item_id = tcx.hir().as_local_node_id(source.def_id).unwrap();\n+    let item_id = tcx.hir().as_local_node_id(source.def_id()).unwrap();\n     let file_name = format!(\"rustc.node{}{}-liveness.mir\", item_id, pass_name);\n     file_path.push(&file_name);\n     let _ = fs::File::create(&file_path).and_then(|mut file| {\n@@ -348,7 +348,7 @@ fn dump_matched_mir_node<'a, 'tcx, V: Idx>(\n \n pub fn write_mir_fn<'a, 'tcx, V: Idx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    src: MirSource,\n+    src: MirSource<'tcx>,\n     mir: &Mir<'tcx>,\n     map: &dyn LiveVariableMap<LiveVar = V>,\n     w: &mut dyn Write,"}, {"sha": "1357f8fe79a0dae138dc3776f6b20e5b35fad936", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 67, "deletions": 42, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de111e6367b065fd5f8cee59b64eefefd8272f44/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=de111e6367b065fd5f8cee59b64eefefd8272f44", "patch": "@@ -1,4 +1,3 @@\n-use rustc::hir;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::*;\n use rustc::mir::visit::Visitor;\n@@ -69,7 +68,7 @@ pub fn dump_mir<'a, 'gcx, 'tcx, F>(\n     pass_num: Option<&dyn Display>,\n     pass_name: &str,\n     disambiguator: &dyn Display,\n-    source: MirSource,\n+    source: MirSource<'tcx>,\n     mir: &Mir<'tcx>,\n     extra_data: F,\n ) where\n@@ -81,7 +80,7 @@ pub fn dump_mir<'a, 'gcx, 'tcx, F>(\n \n     let node_path = item_path::with_forced_impl_filename_line(|| {\n         // see notes on #41697 below\n-        tcx.item_path_str(source.def_id)\n+        tcx.item_path_str(source.def_id())\n     });\n     dump_matched_mir_node(\n         tcx,\n@@ -98,15 +97,15 @@ pub fn dump_mir<'a, 'gcx, 'tcx, F>(\n pub fn dump_enabled<'a, 'gcx, 'tcx>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     pass_name: &str,\n-    source: MirSource,\n+    source: MirSource<'tcx>,\n ) -> bool {\n     let filters = match tcx.sess.opts.debugging_opts.dump_mir {\n         None => return false,\n         Some(ref filters) => filters,\n     };\n     let node_path = item_path::with_forced_impl_filename_line(|| {\n         // see notes on #41697 below\n-        tcx.item_path_str(source.def_id)\n+        tcx.item_path_str(source.def_id())\n     });\n     filters.split('|').any(|or_filter| {\n         or_filter.split('&').all(|and_filter| {\n@@ -125,7 +124,7 @@ fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(\n     pass_name: &str,\n     node_path: &str,\n     disambiguator: &dyn Display,\n-    source: MirSource,\n+    source: MirSource<'tcx>,\n     mir: &Mir<'tcx>,\n     mut extra_data: F,\n ) where\n@@ -151,7 +150,7 @@ fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(\n         let _: io::Result<()> = try {\n             let mut file =\n                 create_dump_file(tcx, \"dot\", pass_num, pass_name, disambiguator, source)?;\n-            write_mir_fn_graphviz(tcx, source.def_id, mir, &mut file)?;\n+            write_mir_fn_graphviz(tcx, source.def_id(), mir, &mut file)?;\n         };\n     }\n }\n@@ -165,7 +164,7 @@ fn dump_path(\n     pass_num: Option<&dyn Display>,\n     pass_name: &str,\n     disambiguator: &dyn Display,\n-    source: MirSource,\n+    source: MirSource<'tcx>,\n ) -> PathBuf {\n     let promotion_id = match source.promoted {\n         Some(id) => format!(\"-{:?}\", id),\n@@ -184,13 +183,32 @@ fn dump_path(\n     let mut file_path = PathBuf::new();\n     file_path.push(Path::new(&tcx.sess.opts.debugging_opts.dump_mir_dir));\n \n-    let item_name = tcx.hir()\n-        .def_path(source.def_id)\n+    let item_name = tcx\n+        .def_path(source.def_id())\n         .to_filename_friendly_no_crate();\n+    // All drop shims have the same DefId, so we have to add the type\n+    // to get unique file names.\n+    let shim_disambiguator = match source.instance {\n+        ty::InstanceDef::DropGlue(_, Some(ty)) => {\n+            // Unfortunately, pretty-printed typed are not very filename-friendly.\n+            // We dome some filtering.\n+            let mut s = \".\".to_owned();\n+            s.extend(ty.to_string()\n+                .chars()\n+                .filter_map(|c| match c {\n+                    ' ' => None,\n+                    ':' => Some('_'),\n+                    c => Some(c)\n+                }));\n+            s\n+        }\n+        _ => String::new(),\n+    };\n \n     let file_name = format!(\n-        \"rustc.{}{}{}.{}.{}.{}\",\n+        \"rustc.{}{}{}{}.{}.{}.{}\",\n         item_name,\n+        shim_disambiguator,\n         promotion_id,\n         pass_num,\n         pass_name,\n@@ -213,7 +231,7 @@ pub(crate) fn create_dump_file(\n     pass_num: Option<&dyn Display>,\n     pass_name: &str,\n     disambiguator: &dyn Display,\n-    source: MirSource,\n+    source: MirSource<'tcx>,\n ) -> io::Result<fs::File> {\n     let file_path = dump_path(tcx, extension, pass_num, pass_name, disambiguator, source);\n     if let Some(parent) = file_path.parent() {\n@@ -253,7 +271,7 @@ pub fn write_mir_pretty<'a, 'gcx, 'tcx>(\n         for (i, mir) in mir.promoted.iter_enumerated() {\n             writeln!(w, \"\")?;\n             let src = MirSource {\n-                def_id,\n+                instance: ty::InstanceDef::Item(def_id),\n                 promoted: Some(i),\n             };\n             write_mir_fn(tcx, src, mir, &mut |_, _| Ok(()), w)?;\n@@ -264,7 +282,7 @@ pub fn write_mir_pretty<'a, 'gcx, 'tcx>(\n \n pub fn write_mir_fn<'a, 'gcx, 'tcx, F>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    src: MirSource,\n+    src: MirSource<'tcx>,\n     mir: &Mir<'tcx>,\n     extra_data: &mut F,\n     w: &mut dyn Write,\n@@ -528,7 +546,7 @@ fn write_scope_tree(\n /// local variables (both user-defined bindings and compiler temporaries).\n pub fn write_mir_intro<'a, 'gcx, 'tcx>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    src: MirSource,\n+    src: MirSource<'tcx>,\n     mir: &Mir<'_>,\n     w: &mut dyn Write,\n ) -> io::Result<()> {\n@@ -570,52 +588,59 @@ pub fn write_mir_intro<'a, 'gcx, 'tcx>(\n \n fn write_mir_sig(\n     tcx: TyCtxt<'_, '_, '_>,\n-    src: MirSource,\n+    src: MirSource<'tcx>,\n     mir: &Mir<'_>,\n     w: &mut dyn Write,\n ) -> io::Result<()> {\n-    let id = tcx.hir().as_local_node_id(src.def_id).unwrap();\n-    let body_owner_kind = tcx.hir().body_owner_kind(id);\n-    match (body_owner_kind, src.promoted) {\n-        (_, Some(i)) => write!(w, \"{:?} in\", i)?,\n-        (hir::BodyOwnerKind::Closure, _) |\n-        (hir::BodyOwnerKind::Fn, _) => write!(w, \"fn\")?,\n-        (hir::BodyOwnerKind::Const, _) => write!(w, \"const\")?,\n-        (hir::BodyOwnerKind::Static(hir::MutImmutable), _) => write!(w, \"static\")?,\n-        (hir::BodyOwnerKind::Static(hir::MutMutable), _) => write!(w, \"static mut\")?,\n+    use rustc::hir::def::Def;\n+\n+    trace!(\"write_mir_sig: {:?}\", src.instance);\n+    let descr = tcx.describe_def(src.def_id());\n+    let is_function = match descr {\n+        Some(Def::Fn(_)) | Some(Def::Method(_)) | Some(Def::StructCtor(..)) => true,\n+        _ => tcx.is_closure(src.def_id()),\n+    };\n+    match (descr, src.promoted) {\n+        (_, Some(i)) => write!(w, \"{:?} in \", i)?,\n+        (Some(Def::StructCtor(..)), _) => write!(w, \"struct \")?,\n+        (Some(Def::Const(_)), _) => write!(w, \"const \")?,\n+        (Some(Def::Static(_, /*is_mutbl*/false)), _) => write!(w, \"static \")?,\n+        (Some(Def::Static(_, /*is_mutbl*/true)), _) => write!(w, \"static mut \")?,\n+        (_, _) if is_function => write!(w, \"fn \")?,\n+        (None, _) => {}, // things like anon const, not an item\n+        _ => bug!(\"Unexpected def description {:?}\", descr),\n     }\n \n     item_path::with_forced_impl_filename_line(|| {\n         // see notes on #41697 elsewhere\n-        write!(w, \" {}\", tcx.item_path_str(src.def_id))\n+        write!(w, \"{}\", tcx.item_path_str(src.def_id()))\n     })?;\n \n-    match (body_owner_kind, src.promoted) {\n-        (hir::BodyOwnerKind::Closure, None) |\n-        (hir::BodyOwnerKind::Fn, None) => {\n-            write!(w, \"(\")?;\n+    if src.promoted.is_none() && is_function {\n+        write!(w, \"(\")?;\n \n-            // fn argument types.\n-            for (i, arg) in mir.args_iter().enumerate() {\n-                if i != 0 {\n-                    write!(w, \", \")?;\n-                }\n-                write!(w, \"{:?}: {}\", Place::Local(arg), mir.local_decls[arg].ty)?;\n+        // fn argument types.\n+        for (i, arg) in mir.args_iter().enumerate() {\n+            if i != 0 {\n+                write!(w, \", \")?;\n             }\n-\n-            write!(w, \") -> {}\", mir.return_ty())?;\n-        }\n-        (hir::BodyOwnerKind::Const, _) | (hir::BodyOwnerKind::Static(_), _) | (_, Some(_)) => {\n-            assert_eq!(mir.arg_count, 0);\n-            write!(w, \": {} =\", mir.return_ty())?;\n+            write!(w, \"{:?}: {}\", Place::Local(arg), mir.local_decls[arg].ty)?;\n         }\n+\n+        write!(w, \") -> {}\", mir.return_ty())?;\n+    } else {\n+        assert_eq!(mir.arg_count, 0);\n+        write!(w, \": {} =\", mir.return_ty())?;\n     }\n \n     if let Some(yield_ty) = mir.yield_ty {\n         writeln!(w)?;\n         writeln!(w, \"yields {}\", yield_ty)?;\n     }\n \n+    write!(w, \" \")?;\n+    // Next thing that gets printed is the opening {\n+\n     Ok(())\n }\n "}]}