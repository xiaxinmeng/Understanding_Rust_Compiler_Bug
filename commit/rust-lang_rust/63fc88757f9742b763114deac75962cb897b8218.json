{"sha": "63fc88757f9742b763114deac75962cb897b8218", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzZmM4ODc1N2Y5NzQyYjc2MzExNGRlYWM3NTk2MmNiODk3YjgyMTg=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-29T03:51:40Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-29T14:05:54Z"}, "message": "std: remove Encoder::emit_{owned,managed} and Decoder::read_{owned,managed}", "tree": {"sha": "947239d0504d0efc93953310733ed26cfab59763", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/947239d0504d0efc93953310733ed26cfab59763"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63fc88757f9742b763114deac75962cb897b8218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63fc88757f9742b763114deac75962cb897b8218", "html_url": "https://github.com/rust-lang/rust/commit/63fc88757f9742b763114deac75962cb897b8218", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63fc88757f9742b763114deac75962cb897b8218/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b43c620b971bc3cbae61ca8390ec34355add445", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b43c620b971bc3cbae61ca8390ec34355add445", "html_url": "https://github.com/rust-lang/rust/commit/8b43c620b971bc3cbae61ca8390ec34355add445"}], "stats": {"total": 38, "additions": 5, "deletions": 33}, "files": [{"sha": "fccb707ed1f3f769cd22e6e5f079ca08166b7383", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/63fc88757f9742b763114deac75962cb897b8218/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fc88757f9742b763114deac75962cb897b8218/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=63fc88757f9742b763114deac75962cb897b8218", "patch": "@@ -315,16 +315,6 @@ pub mod reader {\n         fn read_str(&self) -> ~str { doc_as_str(self.next_doc(EsStr)) }\n \n         // Compound types:\n-        fn read_owned<T>(&self, f: &fn() -> T) -> T {\n-            debug!(\"read_owned()\");\n-            f()\n-        }\n-\n-        fn read_managed<T>(&self, f: &fn() -> T) -> T {\n-            debug!(\"read_managed()\");\n-            f()\n-        }\n-\n         fn read_enum<T>(&self, name: &str, f: &fn() -> T) -> T {\n             debug!(\"read_enum(%s)\", name);\n             self._check_label(name);\n@@ -651,10 +641,6 @@ pub mod writer {\n             self.wr_tagged_str(EsStr as uint, v)\n         }\n \n-        fn emit_borrowed(&self, f: &fn()) { f() }\n-        fn emit_owned(&self, f: &fn()) { f() }\n-        fn emit_managed(&self, f: &fn()) { f() }\n-\n         fn emit_enum(&self, name: &str, f: &fn()) {\n             self._emit_label(name);\n             self.wr_tag(EsEnum as uint, f)"}, {"sha": "c936f8e4dcdba13b3f2bc73962e76a7223137dc5", "filename": "src/libstd/json.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63fc88757f9742b763114deac75962cb897b8218/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fc88757f9742b763114deac75962cb897b8218/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=63fc88757f9742b763114deac75962cb897b8218", "patch": "@@ -108,10 +108,6 @@ impl serialize::Encoder for Encoder {\n     fn emit_char(&self, v: char) { self.emit_str(str::from_char(v)) }\n     fn emit_str(&self, v: &str) { self.wr.write_str(escape_str(v)) }\n \n-    fn emit_borrowed(&self, f: &fn()) { f() }\n-    fn emit_owned(&self, f: &fn()) { f() }\n-    fn emit_managed(&self, f: &fn()) { f() }\n-\n     fn emit_enum(&self, _name: &str, f: &fn()) { f() }\n     fn emit_enum_variant(&self, name: &str, _id: uint, cnt: uint, f: &fn()) {\n         // enums are encoded as strings or vectors:"}, {"sha": "42a9e24b1cbd6257de39e9b9d9b3dab79c879fd6", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/63fc88757f9742b763114deac75962cb897b8218/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fc88757f9742b763114deac75962cb897b8218/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=63fc88757f9742b763114deac75962cb897b8218", "patch": "@@ -41,9 +41,6 @@ pub trait Encoder {\n     fn emit_str(&self, v: &str);\n \n     // Compound types:\n-    fn emit_borrowed(&self, f: &fn());\n-    fn emit_owned(&self, f: &fn());\n-    fn emit_managed(&self, f: &fn());\n \n     fn emit_enum(&self, name: &str, f: &fn());\n     fn emit_enum_variant(&self, v_name: &str, v_id: uint, sz: uint, f: &fn());\n@@ -97,9 +94,6 @@ pub trait Decoder {\n     fn read_enum_variant<T>(&self, names: &[&str], f: &fn(uint) -> T) -> T;\n     fn read_enum_variant_arg<T>(&self, idx: uint, f: &fn() -> T) -> T;\n \n-    fn read_owned<T>(&self, f: &fn() -> T) -> T;\n-    fn read_managed<T>(&self, f: &fn() -> T) -> T;\n-\n     fn read_owned_vec<T>(&self, f: &fn(uint) -> T) -> T;\n     fn read_managed_vec<T>(&self, f: &fn(uint) -> T) -> T;\n     fn read_vec_elt<T>(&self, idx: uint, f: &fn() -> T) -> T;\n@@ -296,31 +290,31 @@ impl<D:Decoder> Decodable<D> for () {\n \n impl<'self, S:Encoder,T:Encodable<S>> Encodable<S> for &'self T {\n     fn encode(&self, s: &S) {\n-        s.emit_borrowed(|| (**self).encode(s))\n+        (**self).encode(s)\n     }\n }\n \n impl<S:Encoder,T:Encodable<S>> Encodable<S> for ~T {\n     fn encode(&self, s: &S) {\n-        s.emit_owned(|| (**self).encode(s))\n+        (**self).encode(s)\n     }\n }\n \n impl<D:Decoder,T:Decodable<D>> Decodable<D> for ~T {\n     fn decode(d: &D) -> ~T {\n-        d.read_owned(|| ~Decodable::decode(d))\n+        ~Decodable::decode(d)\n     }\n }\n \n impl<S:Encoder,T:Encodable<S>> Encodable<S> for @T {\n     fn encode(&self, s: &S) {\n-        s.emit_managed(|| (**self).encode(s))\n+        (**self).encode(s)\n     }\n }\n \n impl<D:Decoder,T:Decodable<D>> Decodable<D> for @T {\n     fn decode(d: &D) -> @T {\n-        d.read_managed(|| @Decodable::decode(d))\n+        @Decodable::decode(d)\n     }\n }\n "}, {"sha": "c9357c9d86729aa363e5e5ab182943061472bd2c", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63fc88757f9742b763114deac75962cb897b8218/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fc88757f9742b763114deac75962cb897b8218/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=63fc88757f9742b763114deac75962cb897b8218", "patch": "@@ -1242,10 +1242,6 @@ mod test {\n         fn emit_char(&self, +_v: char) { self.add_unknown_to_log(); }\n         fn emit_str(&self, +_v: &str) { self.add_unknown_to_log(); }\n \n-        fn emit_borrowed(&self, f: &fn()) { self.add_unknown_to_log(); f() }\n-        fn emit_owned(&self, f: &fn()) { self.add_unknown_to_log(); f() }\n-        fn emit_managed(&self, f: &fn()) { self.add_unknown_to_log(); f() }\n-\n         fn emit_enum(&self, name: &str, f: &fn()) {\n             self.add_to_log(CallToEmitEnum(name.to_str())); f(); }\n "}]}