{"sha": "649bf22df56c18b28d41978990071b513094345d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0OWJmMjJkZjU2YzE4YjI4ZDQxOTc4OTkwMDcxYjUxMzA5NDM0NWQ=", "commit": {"author": {"name": "Timoth\u00e9e Delabrouille", "email": "timothee.delabrouille@musicworldmedia.com", "date": "2021-05-01T13:33:49Z"}, "committer": {"name": "Timoth\u00e9e Delabrouille", "email": "timothee.delabrouille@musicworldmedia.com", "date": "2021-05-01T13:33:49Z"}, "message": "compute where_outer on demand, remove it from Module", "tree": {"sha": "239b393bbd3937a7098d7dc41e8a6547cb66d005", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/239b393bbd3937a7098d7dc41e8a6547cb66d005"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/649bf22df56c18b28d41978990071b513094345d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/649bf22df56c18b28d41978990071b513094345d", "html_url": "https://github.com/rust-lang/rust/commit/649bf22df56c18b28d41978990071b513094345d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/649bf22df56c18b28d41978990071b513094345d/comments", "author": null, "committer": null, "parents": [{"sha": "855c2d130fb70da1643cf8f696c7aad7537aef34", "url": "https://api.github.com/repos/rust-lang/rust/commits/855c2d130fb70da1643cf8f696c7aad7537aef34", "html_url": "https://github.com/rust-lang/rust/commit/855c2d130fb70da1643cf8f696c7aad7537aef34"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "12f03d00a657fd22a37f047b61779ba37559dc3d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/649bf22df56c18b28d41978990071b513094345d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/649bf22df56c18b28d41978990071b513094345d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=649bf22df56c18b28d41978990071b513094345d", "patch": "@@ -100,12 +100,13 @@ impl Clean<Item> for doctree::Module<'_> {\n         // determine if we should display the inner contents or\n         // the outer `mod` item for the source code.\n         let span = Span::from_rustc_span({\n+            let where_outer = self.where_outer(cx.tcx);\n             let sm = cx.sess().source_map();\n-            let outer = sm.lookup_char_pos(self.where_outer.lo());\n+            let outer = sm.lookup_char_pos(where_outer.lo());\n             let inner = sm.lookup_char_pos(self.where_inner.lo());\n             if outer.file.start_pos == inner.file.start_pos {\n                 // mod foo { ... }\n-                self.where_outer\n+                where_outer\n             } else {\n                 // mod foo; (and a separate SourceFile for the contents)\n                 self.where_inner"}, {"sha": "eadac89f79ef22e0abcb25e6ae19d3d57cd37d14", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/649bf22df56c18b28d41978990071b513094345d/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/649bf22df56c18b28d41978990071b513094345d/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=649bf22df56c18b28d41978990071b513094345d", "patch": "@@ -1,12 +1,12 @@\n //! This module is used to store stuff from Rust's AST in a more convenient\n //! manner (and with prettier names) before cleaning.\n+use rustc_middle::ty::TyCtxt;\n use rustc_span::{self, Span, Symbol};\n \n use rustc_hir as hir;\n \n crate struct Module<'hir> {\n     crate name: Symbol,\n-    crate where_outer: Span,\n     crate where_inner: Span,\n     crate mods: Vec<Module<'hir>>,\n     crate id: hir::HirId,\n@@ -17,16 +17,19 @@ crate struct Module<'hir> {\n }\n \n impl Module<'hir> {\n-    crate fn new(name: Symbol) -> Module<'hir> {\n+    crate fn new(name: Symbol, id: hir::HirId, where_inner: Span) -> Module<'hir> {\n         Module {\n             name,\n-            id: hir::CRATE_HIR_ID,\n-            where_outer: rustc_span::DUMMY_SP,\n-            where_inner: rustc_span::DUMMY_SP,\n+            id,\n+            where_inner,\n             mods: Vec::new(),\n             items: Vec::new(),\n             foreigns: Vec::new(),\n             macros: Vec::new(),\n         }\n     }\n+\n+    crate fn where_outer(&self, tcx: TyCtxt<'_>) -> Span {\n+        tcx.hir().span(self.id)\n+    }\n }"}, {"sha": "ab9a112380ec49afc5bbc7011ea06ad1260b5cd6", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/649bf22df56c18b28d41978990071b513094345d/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/649bf22df56c18b28d41978990071b513094345d/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=649bf22df56c18b28d41978990071b513094345d", "patch": "@@ -8,9 +8,9 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::Node;\n use rustc_middle::middle::privacy::AccessLevel;\n use rustc_middle::ty::TyCtxt;\n+use rustc_span;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Symbol};\n-use rustc_span::{self, Span};\n \n use std::mem;\n \n@@ -73,7 +73,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     crate fn visit(mut self, krate: &'tcx hir::Crate<'_>) -> Module<'tcx> {\n         let span = krate.item.inner;\n         let mut top_level_module = self.visit_mod_contents(\n-            span,\n             &Spanned { span, node: hir::VisibilityKind::Public },\n             hir::CRATE_HIR_ID,\n             &krate.item,\n@@ -129,16 +128,12 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     fn visit_mod_contents(\n         &mut self,\n-        span: Span,\n         vis: &hir::Visibility<'_>,\n         id: hir::HirId,\n         m: &'tcx hir::Mod<'tcx>,\n         name: Symbol,\n     ) -> Module<'tcx> {\n-        let mut om = Module::new(name);\n-        om.where_outer = span;\n-        om.where_inner = m.inner;\n-        om.id = id;\n+        let mut om = Module::new(name, id, m.inner);\n         // Keep track of if there were any private modules in the path.\n         let orig_inside_public_path = self.inside_public_path;\n         self.inside_public_path &= vis.node.is_pub();\n@@ -312,7 +307,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 om.items.push((item, renamed))\n             }\n             hir::ItemKind::Mod(ref m) => {\n-                om.mods.push(self.visit_mod_contents(item.span, &item.vis, item.hir_id(), m, name));\n+                om.mods.push(self.visit_mod_contents(&item.vis, item.hir_id(), m, name));\n             }\n             hir::ItemKind::Fn(..)\n             | hir::ItemKind::ExternCrate(..)"}]}