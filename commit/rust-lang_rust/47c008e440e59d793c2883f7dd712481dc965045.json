{"sha": "47c008e440e59d793c2883f7dd712481dc965045", "node_id": "C_kwDOAAsO6NoAKDQ3YzAwOGU0NDBlNTlkNzkzYzI4ODNmN2RkNzEyNDgxZGM5NjUwNDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-04T10:39:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-04T10:39:04Z"}, "message": "Auto merge of #103098 - Amanieu:asm-tied-fixed, r=bjorn3\n\nasm: Match clang behavior for inlateout fixed register operands\n\nWe have 2 options for representing LLVM constraints for `inlateout` operands on a fixed register (e.g. `r0`): `={r0},0` or `={r0},{r0}`.\n\nThis PR changes the behavior to the latter, which matches the behavior of Clang since https://reviews.llvm.org/D87279.", "tree": {"sha": "de68e6352bb1f38909bc4a1a129d177aa31b37f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de68e6352bb1f38909bc4a1a129d177aa31b37f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47c008e440e59d793c2883f7dd712481dc965045", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47c008e440e59d793c2883f7dd712481dc965045", "html_url": "https://github.com/rust-lang/rust/commit/47c008e440e59d793c2883f7dd712481dc965045", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47c008e440e59d793c2883f7dd712481dc965045/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2efb0cd4b2240c878c36112a5ec207837c15928a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2efb0cd4b2240c878c36112a5ec207837c15928a", "html_url": "https://github.com/rust-lang/rust/commit/2efb0cd4b2240c878c36112a5ec207837c15928a"}, {"sha": "6bfe7f01dce5a9c4d1711dc3f30a1f9c13d9eecb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bfe7f01dce5a9c4d1711dc3f30a1f9c13d9eecb", "html_url": "https://github.com/rust-lang/rust/commit/6bfe7f01dce5a9c4d1711dc3f30a1f9c13d9eecb"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "88a4f62d93dfb1cd07b306e33469ffbdadb657ed", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/47c008e440e59d793c2883f7dd712481dc965045/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47c008e440e59d793c2883f7dd712481dc965045/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=47c008e440e59d793c2883f7dd712481dc965045", "patch": "@@ -130,15 +130,24 @@ impl<'ll, 'tcx> AsmBuilderMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n                     op_idx.insert(idx, constraints.len());\n                     constraints.push(reg_to_llvm(reg, Some(&value.layout)));\n                 }\n-                InlineAsmOperandRef::InOut { reg, late: _, in_value, out_place: _ } => {\n+                InlineAsmOperandRef::InOut { reg, late, in_value, out_place: _ } => {\n                     let value = llvm_fixup_input(\n                         self,\n                         in_value.immediate(),\n                         reg.reg_class(),\n                         &in_value.layout,\n                     );\n                     inputs.push(value);\n-                    constraints.push(format!(\"{}\", op_idx[&idx]));\n+\n+                    // In the case of fixed registers, we have the choice of\n+                    // either using a tied operand or duplicating the constraint.\n+                    // We prefer the latter because it matches the behavior of\n+                    // Clang.\n+                    if late && matches!(reg, InlineAsmRegOrRegClass::Reg(_)) {\n+                        constraints.push(format!(\"{}\", reg_to_llvm(reg, Some(&in_value.layout))));\n+                    } else {\n+                        constraints.push(format!(\"{}\", op_idx[&idx]));\n+                    }\n                 }\n                 InlineAsmOperandRef::SymFn { instance } => {\n                     inputs.push(self.cx.get_fn(instance));"}]}