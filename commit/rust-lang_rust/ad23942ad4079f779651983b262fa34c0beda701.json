{"sha": "ad23942ad4079f779651983b262fa34c0beda701", "node_id": "C_kwDOAAsO6NoAKGFkMjM5NDJhZDQwNzlmNzc5NjUxOTgzYjI2MmZhMzRjMGJlZGE3MDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-17T15:17:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-17T15:17:13Z"}, "message": "Auto merge of #111680 - Dylan-DPC:rollup-1p45gxt, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #110930 (Don't expect normalization to succeed in elaborate_drops)\n - #111557 (Revert \"Validate resolution for SelfCtor too.\")\n - #111565 (rustdoc-json: Add tests for visibility of impls)\n - #111588 (Emits E0599 when meeting `MyTrait::missing_method`)\n - #111625 (Move rustc_middle/src/ty/query.rs to rustc_middle/src/query/plumbing.rs)\n - #111674 (Add missing backslash in HTML string)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c531783a8a7eecefef323d6a2fe2a3bd22d363ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c531783a8a7eecefef323d6a2fe2a3bd22d363ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad23942ad4079f779651983b262fa34c0beda701", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad23942ad4079f779651983b262fa34c0beda701", "html_url": "https://github.com/rust-lang/rust/commit/ad23942ad4079f779651983b262fa34c0beda701", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad23942ad4079f779651983b262fa34c0beda701/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2ccc855e74aec03e434405eca3c247ee2432e53", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2ccc855e74aec03e434405eca3c247ee2432e53", "html_url": "https://github.com/rust-lang/rust/commit/c2ccc855e74aec03e434405eca3c247ee2432e53"}, {"sha": "b0d92c2b7060cf434fcc738b3fabf69410244cd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0d92c2b7060cf434fcc738b3fabf69410244cd3", "html_url": "https://github.com/rust-lang/rust/commit/b0d92c2b7060cf434fcc738b3fabf69410244cd3"}], "stats": {"total": 531, "additions": 394, "deletions": 137}, "files": [{"sha": "c591ff75ab878db7fdd9d7a81177d65ead33f2c6", "filename": "compiler/rustc_const_eval/src/const_eval/error.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -3,7 +3,8 @@ use std::fmt;\n \n use rustc_errors::Diagnostic;\n use rustc_middle::mir::AssertKind;\n-use rustc_middle::ty::{layout::LayoutError, query::TyCtxtAt, ConstInt};\n+use rustc_middle::query::TyCtxtAt;\n+use rustc_middle::ty::{layout::LayoutError, ConstInt};\n use rustc_span::{Span, Symbol};\n \n use super::InterpCx;"}, {"sha": "040eba10eb4f708e543a4845960e7e8e5f387897", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -8,13 +8,12 @@ use rustc_hir::{self as hir, def_id::DefId, definitions::DefPathData};\n use rustc_index::IndexVec;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{ErrorHandled, InterpError, ReportedErrorInfo};\n+use rustc_middle::query::TyCtxtAt;\n use rustc_middle::ty::layout::{\n     self, FnAbiError, FnAbiOfHelpers, FnAbiRequest, LayoutError, LayoutOf, LayoutOfHelpers,\n     TyAndLayout,\n };\n-use rustc_middle::ty::{\n-    self, query::TyCtxtAt, subst::SubstsRef, ParamEnv, Ty, TyCtxt, TypeFoldable,\n-};\n+use rustc_middle::ty::{self, subst::SubstsRef, ParamEnv, Ty, TyCtxt, TypeFoldable};\n use rustc_mir_dataflow::storage::always_storage_live_locals;\n use rustc_session::Limit;\n use rustc_span::Span;"}, {"sha": "0f3604736199830b99e05585cc186b322ba416e1", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -478,6 +478,7 @@ pub enum StashKey {\n     /// FRU syntax\n     MaybeFruTypo,\n     CallAssocMethod,\n+    TraitMissingMethod,\n }\n \n fn default_track_diagnostic(d: &mut Diagnostic, f: &mut dyn FnMut(&mut Diagnostic)) {"}, {"sha": "cf082f1ffaa5f806ce66bae074ee245b3e0da688", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -19,7 +19,7 @@ use rustc_ast::TraitObjectSyntax;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{\n     struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, FatalError,\n-    MultiSpan,\n+    MultiSpan, StashKey,\n };\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Namespace, Res};\n@@ -38,7 +38,6 @@ use rustc_middle::ty::{self, Const, IsSuggestable, Ty, TyCtxt, TypeVisitableExt}\n use rustc_middle::ty::{DynKind, ToPredicate};\n use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, BARE_TRAIT_OBJECTS};\n use rustc_span::edit_distance::find_best_match_for_name;\n-use rustc_span::edition::Edition;\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::{sym, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n@@ -3718,7 +3717,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 ));\n             }\n \n-            if self_ty.span.edition() >= Edition::Edition2021 {\n+            if self_ty.span.edition().rust_2021() {\n                 let msg = \"trait objects must include the `dyn` keyword\";\n                 let label = \"add `dyn` keyword before this trait\";\n                 let mut diag =\n@@ -3732,7 +3731,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 }\n                 // check if the impl trait that we are considering is a impl of a local trait\n                 self.maybe_lint_blanket_trait_impl(&self_ty, &mut diag);\n-                diag.emit();\n+                diag.stash(self_ty.span, StashKey::TraitMissingMethod);\n             } else {\n                 let msg = \"trait objects without an explicit `dyn` are deprecated\";\n                 tcx.struct_span_lint_hir("}, {"sha": "4a669e3f8b8a44f725e151e61659e27535b1547d", "filename": "compiler/rustc_hir_typeck/messages.ftl", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_hir_typeck%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_hir_typeck%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fmessages.ftl?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -79,3 +79,14 @@ hir_typeck_arg_mismatch_indeterminate = argument type mismatch was detected, but\n hir_typeck_suggest_boxing_note = for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n \n hir_typeck_suggest_boxing_when_appropriate = store this in the heap by calling `Box::new`\n+\n+hir_typeck_no_associated_item = no {$item_kind} named `{$item_name}` found for {$ty_prefix} `{$ty_str}`{$trait_missing_method ->\n+    [true] {\"\"}\n+    *[other] {\" \"}in the current scope\n+}\n+\n+hir_typeck_candidate_trait_note = `{$trait_name}` defines an item `{$item_name}`{$action_or_ty ->\n+    [NONE] {\"\"}\n+    [implement] , perhaps you need to implement it\n+    *[other] , perhaps you need to restrict type parameter `{$action_or_ty}` with it\n+}"}, {"sha": "102a313067fd24f9a3acd46cd66feb1857cd5aa5", "filename": "compiler/rustc_hir_typeck/src/errors.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -1,4 +1,6 @@\n //! Errors emitted by `rustc_hir_typeck`.\n+use std::borrow::Cow;\n+\n use crate::fluent_generated as fluent;\n use rustc_errors::{AddToDiagnostic, Applicability, Diagnostic, MultiSpan, SubdiagnosticMessage};\n use rustc_macros::{Diagnostic, Subdiagnostic};\n@@ -295,3 +297,25 @@ pub enum SuggestBoxing {\n         end: Span,\n     },\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_typeck_no_associated_item, code = \"E0599\")]\n+pub struct NoAssociatedItem {\n+    #[primary_span]\n+    pub span: Span,\n+    pub item_kind: &'static str,\n+    pub item_name: Ident,\n+    pub ty_prefix: Cow<'static, str>,\n+    pub ty_str: String,\n+    pub trait_missing_method: bool,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[note(hir_typeck_candidate_trait_note)]\n+pub struct CandidateTraitNote {\n+    #[primary_span]\n+    pub span: Span,\n+    pub trait_name: String,\n+    pub item_name: Ident,\n+    pub action_or_ty: String,\n+}"}, {"sha": "8ea159bba746ef84b00cc423f6f9b3cfcfdfda5f", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -1245,6 +1245,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         error,\n                         Some((rcvr, args)),\n                         expected,\n+                        false,\n                     ) {\n                         err.emit();\n                     }"}, {"sha": "039316c74dd4caf45d0f047817e0f64c627b0866", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -4,7 +4,7 @@ use crate::rvalue_scopes;\n use crate::{BreakableCtxt, Diverges, Expectation, FnCtxt, LocalTy, RawTy};\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{Applicability, Diagnostic, ErrorGuaranteed, MultiSpan};\n+use rustc_errors::{Applicability, Diagnostic, ErrorGuaranteed, MultiSpan, StashKey};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -853,6 +853,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let item_name = item_segment.ident;\n         let result = self\n             .resolve_fully_qualified_call(span, item_name, ty.normalized, qself.span, hir_id)\n+            .and_then(|r| {\n+                // lint bare trait if the method is found in the trait\n+                if span.edition().rust_2021() && let Some(mut diag) = self.tcx.sess.diagnostic().steal_diagnostic(qself.span, StashKey::TraitMissingMethod) {\n+                    diag.emit();\n+                }\n+                Ok(r)\n+            })\n             .or_else(|error| {\n                 let guar = self\n                     .tcx\n@@ -863,17 +870,30 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     _ => Err(guar),\n                 };\n \n+                let trait_missing_method =\n+                    matches!(error, method::MethodError::NoMatch(_)) && ty.normalized.is_trait();\n                 // If we have a path like `MyTrait::missing_method`, then don't register\n                 // a WF obligation for `dyn MyTrait` when method lookup fails. Otherwise,\n                 // register a WF obligation so that we can detect any additional\n                 // errors in the self type.\n-                if !(matches!(error, method::MethodError::NoMatch(_)) && ty.normalized.is_trait()) {\n+                if !trait_missing_method {\n                     self.register_wf_obligation(\n                         ty.raw.into(),\n                         qself.span,\n                         traits::WellFormed(None),\n                     );\n                 }\n+\n+                // emit or cancel the diagnostic for bare traits\n+                if span.edition().rust_2021() && let Some(mut diag) = self.tcx.sess.diagnostic().steal_diagnostic(qself.span, StashKey::TraitMissingMethod) {\n+                    if trait_missing_method {\n+                        // cancel the diag for bare traits when meeting `MyTrait::missing_method`\n+                        diag.cancel();\n+                    } else {\n+                        diag.emit();\n+                    }\n+                }\n+\n                 if item_name.name != kw::Empty {\n                     if let Some(mut e) = self.report_method_error(\n                         span,\n@@ -883,10 +903,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         error,\n                         None,\n                         Expectation::NoExpectation,\n+                        trait_missing_method && span.edition().rust_2021(), // emits missing method for trait only after edition 2021\n                     ) {\n                         e.emit();\n                     }\n                 }\n+\n                 result\n             });\n "}, {"sha": "12bc17ca97c7b5eea4260bd05f92038534cb59fd", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 55, "deletions": 30, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -2,6 +2,8 @@\n //! found or is otherwise invalid.\n \n use crate::errors;\n+use crate::errors::CandidateTraitNote;\n+use crate::errors::NoAssociatedItem;\n use crate::Expectation;\n use crate::FnCtxt;\n use rustc_ast::ast::Mutability;\n@@ -38,6 +40,7 @@ use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _\n use rustc_trait_selection::traits::{\n     FulfillmentError, Obligation, ObligationCause, ObligationCauseCode,\n };\n+use std::borrow::Cow;\n \n use super::probe::{AutorefOrPtrAdjustment, IsSuggestion, Mode, ProbeScope};\n use super::{CandidateSource, MethodError, NoMatchData};\n@@ -112,6 +115,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         error: MethodError<'tcx>,\n         args: Option<(&'tcx hir::Expr<'tcx>, &'tcx [hir::Expr<'tcx>])>,\n         expected: Expectation<'tcx>,\n+        trait_missing_method: bool,\n     ) -> Option<DiagnosticBuilder<'_, ErrorGuaranteed>> {\n         // Avoid suggestions when we don't know what's going on.\n         if rcvr_ty.references_error() {\n@@ -136,6 +140,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     sugg_span,\n                     &mut no_match_data,\n                     expected,\n+                    trait_missing_method,\n                 );\n             }\n \n@@ -278,6 +283,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         sugg_span: Span,\n         no_match_data: &mut NoMatchData<'tcx>,\n         expected: Expectation<'tcx>,\n+        trait_missing_method: bool,\n     ) -> Option<DiagnosticBuilder<'_, ErrorGuaranteed>> {\n         let mode = no_match_data.mode;\n         let tcx = self.tcx;\n@@ -323,7 +329,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         span = item_name.span;\n \n         // Don't show generic arguments when the method can't be found in any implementation (#81576).\n-        let mut ty_str_reported = ty_str.clone();\n+        let mut ty_str_reported = if trait_missing_method {\n+            ty_str.strip_prefix(\"dyn \").expect(\"Failed to remove the prefix dyn\").to_owned()\n+        } else {\n+            ty_str.clone()\n+        };\n+\n         if let ty::Adt(_, generics) = rcvr_ty.kind() {\n             if generics.len() > 0 {\n                 let mut autoderef = self.autoderef(span, rcvr_ty);\n@@ -355,25 +366,33 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         {\n             self.suggest_missing_writer(rcvr_ty, args)\n         } else {\n-            struct_span_err!(\n-                tcx.sess,\n+            tcx.sess.create_err(NoAssociatedItem {\n                 span,\n-                E0599,\n-                \"no {} named `{}` found for {} `{}` in the current scope\",\n                 item_kind,\n                 item_name,\n-                rcvr_ty.prefix_string(self.tcx),\n-                ty_str_reported,\n-            )\n+                ty_prefix: if trait_missing_method {\n+                    // FIXME(mu001999) E0599 maybe not suitable here because it is for types\n+                    Cow::from(\"trait\")\n+                } else {\n+                    rcvr_ty.prefix_string(self.tcx)\n+                },\n+                ty_str: ty_str_reported,\n+                trait_missing_method,\n+            })\n         };\n         if tcx.sess.source_map().is_multiline(sugg_span) {\n             err.span_label(sugg_span.with_hi(span.lo()), \"\");\n         }\n-        let ty_str = if short_ty_str.len() < ty_str.len() && ty_str.len() > 10 {\n+        let mut ty_str = if short_ty_str.len() < ty_str.len() && ty_str.len() > 10 {\n             short_ty_str\n         } else {\n             ty_str\n         };\n+        if trait_missing_method {\n+            ty_str =\n+                ty_str.strip_prefix(\"dyn \").expect(\"Failed to remove the prefix dyn\").to_owned();\n+        }\n+\n         if let Some(file) = ty_file {\n             err.note(format!(\"the full type name has been written to '{}'\", file.display(),));\n         }\n@@ -1067,6 +1086,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 &static_candidates,\n                 unsatisfied_bounds,\n                 expected.only_has_type(self),\n+                trait_missing_method,\n             );\n         }\n \n@@ -2375,6 +2395,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         static_candidates: &[CandidateSource],\n         unsatisfied_bounds: bool,\n         return_type: Option<Ty<'tcx>>,\n+        trait_missing_method: bool,\n     ) {\n         let mut alt_rcvr_sugg = false;\n         if let (SelfSource::MethodCall(rcvr), false) = (source, unsatisfied_bounds) {\n@@ -2598,11 +2619,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 },\n                 _ => None,\n             };\n-            err.help(if param_type.is_some() {\n-                \"items from traits can only be used if the type parameter is bounded by the trait\"\n-            } else {\n-                \"items from traits can only be used if the trait is implemented and in scope\"\n-            });\n+            if !trait_missing_method {\n+                err.help(if param_type.is_some() {\n+                    \"items from traits can only be used if the type parameter is bounded by the trait\"\n+                } else {\n+                    \"items from traits can only be used if the trait is implemented and in scope\"\n+                });\n+            }\n+\n             let candidates_len = candidates.len();\n             let message = |action| {\n                 format!(\n@@ -2751,27 +2775,28 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (candidates, Vec::new())\n             };\n \n-            let action = if let Some(param) = param_type {\n-                format!(\"restrict type parameter `{}` with\", param)\n-            } else {\n-                // FIXME: it might only need to be imported into scope, not implemented.\n-                \"implement\".to_string()\n-            };\n             match &potential_candidates[..] {\n                 [] => {}\n                 [trait_info] if trait_info.def_id.is_local() => {\n-                    err.span_note(\n-                        self.tcx.def_span(trait_info.def_id),\n-                        format!(\n-                            \"`{}` defines an item `{}`, perhaps you need to {} it\",\n-                            self.tcx.def_path_str(trait_info.def_id),\n-                            item_name,\n-                            action\n-                        ),\n-                    );\n+                    err.subdiagnostic(CandidateTraitNote {\n+                        span: self.tcx.def_span(trait_info.def_id),\n+                        trait_name: self.tcx.def_path_str(trait_info.def_id),\n+                        item_name,\n+                        action_or_ty: if trait_missing_method {\n+                            \"NONE\".to_string()\n+                        } else {\n+                            param_type.map_or_else(\n+                                || \"implement\".to_string(), // FIXME: it might only need to be imported into scope, not implemented.\n+                                ToString::to_string,\n+                            )\n+                        },\n+                    });\n                 }\n                 trait_infos => {\n-                    let mut msg = message(action);\n+                    let mut msg = message(param_type.map_or_else(\n+                        || \"implement\".to_string(), // FIXME: it might only need to be imported into scope, not implemented.\n+                        |param| format!(\"restrict type parameter `{}` with\", param),\n+                    ));\n                     for (i, trait_info) in trait_infos.iter().enumerate() {\n                         msg.push_str(&format!(\n                             \"\\ncandidate #{}: `{}`\","}, {"sha": "22ee2a8c5e55e6af6eaa2d814aa9f927e2d92801", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -95,7 +95,6 @@ pub mod middle;\n pub mod mir;\n pub mod thir;\n pub mod traits;\n-#[macro_use]\n pub mod ty;\n pub mod util;\n mod values;"}, {"sha": "055d8e9a352bc6fe0f0dc1b9354a134cac12e41d", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -1,7 +1,8 @@\n use super::{AllocId, AllocRange, ConstAlloc, Pointer, Scalar};\n \n use crate::mir::interpret::ConstValue;\n-use crate::ty::{layout, query::TyCtxtAt, tls, Ty, ValTree};\n+use crate::query::TyCtxtAt;\n+use crate::ty::{layout, tls, Ty, ValTree};\n \n use rustc_data_structures::sync::Lock;\n use rustc_errors::{pluralize, struct_span_err, DiagnosticBuilder, ErrorGuaranteed};"}, {"sha": "f53dc8cb0ec134ff7a3b6b026068ef8f0177f713", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -1,9 +1,10 @@\n use super::{ErrorHandled, EvalToConstValueResult, EvalToValTreeResult, GlobalId};\n \n use crate::mir;\n+use crate::query::{TyCtxtAt, TyCtxtEnsure};\n use crate::ty::subst::InternalSubsts;\n use crate::ty::visit::TypeVisitableExt;\n-use crate::ty::{self, query::TyCtxtAt, query::TyCtxtEnsure, TyCtxt};\n+use crate::ty::{self, TyCtxt};\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_session::lint;"}, {"sha": "21c69662b9eaddf67587549ae6eeb395829fc9f5", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -25,6 +25,7 @@ use crate::mir::interpret::{\n use crate::mir::interpret::{LitToConstError, LitToConstInput};\n use crate::mir::mono::CodegenUnit;\n use crate::query::erase::{erase, restore, Erase};\n+use crate::query::plumbing::{query_ensure, query_get_at, DynamicQuery};\n use crate::thir;\n use crate::traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal,\n@@ -39,10 +40,6 @@ use crate::traits::specialization_graph;\n use crate::traits::{self, ImplSource};\n use crate::ty::fast_reject::SimplifiedType;\n use crate::ty::layout::ValidityRequirement;\n-use crate::ty::query::{\n-    query_ensure, query_get_at, DynamicQuery, IntoQueryParam, TyCtxtAt, TyCtxtEnsure,\n-    TyCtxtEnsureWithValue,\n-};\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n use crate::ty::GeneratorDiagnosticData;\n@@ -90,8 +87,11 @@ use std::sync::Arc;\n \n pub mod erase;\n mod keys;\n-pub mod on_disk_cache;\n pub use keys::{AsLocalKey, Key, LocalCrate};\n+pub mod on_disk_cache;\n+#[macro_use]\n+pub mod plumbing;\n+pub use plumbing::{IntoQueryParam, TyCtxtAt, TyCtxtEnsure, TyCtxtEnsureWithValue};\n \n // Each of these queries corresponds to a function pointer field in the\n // `Providers` struct for requesting a value of that type, and a method"}, {"sha": "647f4826876daa700074f11a2860149e824ffc1c", "filename": "compiler/rustc_middle/src/query/plumbing.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fplumbing.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "previous_filename": "compiler/rustc_middle/src/ty/query.rs"}, {"sha": "e84d0100a5cba573c8f2edc887598855bc12aa3a", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -14,14 +14,14 @@ use crate::middle::resolve_bound_vars;\n use crate::middle::stability;\n use crate::mir::interpret::{self, Allocation, ConstAllocation};\n use crate::mir::{Body, Local, Place, PlaceElem, ProjectionKind, Promoted};\n+use crate::query::plumbing::QuerySystem;\n use crate::query::LocalCrate;\n use crate::query::Providers;\n+use crate::query::{IntoQueryParam, TyCtxtAt};\n use crate::thir::Thir;\n use crate::traits;\n use crate::traits::solve;\n use crate::traits::solve::{ExternalConstraints, ExternalConstraintsData};\n-use crate::ty::query::QuerySystem;\n-use crate::ty::query::{self, TyCtxtAt};\n use crate::ty::{\n     self, AdtDef, AdtDefData, AdtKind, Binder, Const, ConstData, FloatTy, FloatVar, FloatVid,\n     GenericParamDefKind, ImplPolarity, InferTy, IntTy, IntVar, IntVid, List, ParamConst, ParamTy,\n@@ -80,8 +80,6 @@ use std::iter;\n use std::mem;\n use std::ops::{Bound, Deref};\n \n-use super::query::IntoQueryParam;\n-\n const TINY_CONST_EVAL_LIMIT: Limit = Limit(20);\n \n #[allow(rustc::usage_of_ty_tykind)]\n@@ -512,7 +510,7 @@ pub struct GlobalCtxt<'tcx> {\n \n     untracked: Untracked,\n \n-    pub query_system: query::QuerySystem<'tcx>,\n+    pub query_system: QuerySystem<'tcx>,\n     pub(crate) query_kinds: &'tcx [DepKindStruct<'tcx>],\n \n     // Internal caches for metadata decoding. No need to track deps on this."}, {"sha": "5c1c419811e3881d7bb0d4926791a27032125ebe", "filename": "compiler/rustc_middle/src/ty/context/tls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -1,7 +1,7 @@\n use super::{GlobalCtxt, TyCtxt};\n \n use crate::dep_graph::TaskDepsRef;\n-use crate::ty::query;\n+use crate::query::plumbing::QueryJobId;\n use rustc_data_structures::sync::{self, Lock};\n use rustc_errors::Diagnostic;\n #[cfg(not(parallel_compiler))]\n@@ -22,7 +22,7 @@ pub struct ImplicitCtxt<'a, 'tcx> {\n \n     /// The current query job, if any. This is updated by `JobOwner::start` in\n     /// `ty::query::plumbing` when executing a query.\n-    pub query: Option<query::QueryJobId>,\n+    pub query: Option<QueryJobId>,\n \n     /// Where to store diagnostics for the current query job, if any.\n     /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query."}, {"sha": "ba91e5aea5a5cf17f1812b0750949dfa9ca7f05b", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -1,5 +1,6 @@\n use crate::fluent_generated as fluent;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n+use crate::query::TyCtxtAt;\n use crate::ty::normalize_erasing_regions::NormalizationError;\n use crate::ty::{self, ReprOptions, Ty, TyCtxt, TypeVisitableExt};\n use rustc_errors::{DiagnosticBuilder, Handler, IntoDiagnostic};\n@@ -543,20 +544,20 @@ impl<'tcx> HasTyCtxt<'tcx> for TyCtxt<'tcx> {\n     }\n }\n \n-impl<'tcx> HasDataLayout for ty::query::TyCtxtAt<'tcx> {\n+impl<'tcx> HasDataLayout for TyCtxtAt<'tcx> {\n     #[inline]\n     fn data_layout(&self) -> &TargetDataLayout {\n         &self.data_layout\n     }\n }\n \n-impl<'tcx> HasTargetSpec for ty::query::TyCtxtAt<'tcx> {\n+impl<'tcx> HasTargetSpec for TyCtxtAt<'tcx> {\n     fn target_spec(&self) -> &Target {\n         &self.sess.target\n     }\n }\n \n-impl<'tcx> HasTyCtxt<'tcx> for ty::query::TyCtxtAt<'tcx> {\n+impl<'tcx> HasTyCtxt<'tcx> for TyCtxtAt<'tcx> {\n     #[inline]\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         **self\n@@ -683,7 +684,7 @@ impl<'tcx> LayoutOfHelpers<'tcx> for LayoutCx<'tcx, TyCtxt<'tcx>> {\n     }\n }\n \n-impl<'tcx> LayoutOfHelpers<'tcx> for LayoutCx<'tcx, ty::query::TyCtxtAt<'tcx>> {\n+impl<'tcx> LayoutOfHelpers<'tcx> for LayoutCx<'tcx, TyCtxtAt<'tcx>> {\n     type LayoutOfResult = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n \n     #[inline]"}, {"sha": "be0d1e61a46b011fe7f3386a3cc4fc21d0c7f8cc", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -122,8 +122,6 @@ pub mod inhabitedness;\n pub mod layout;\n pub mod normalize_erasing_regions;\n pub mod print;\n-#[macro_use]\n-pub mod query;\n pub mod relate;\n pub mod subst;\n pub mod trait_def;"}, {"sha": "4491d78648f7a1b061812df24d13f9e99fe264d3", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -1,6 +1,6 @@\n use crate::mir::interpret::{AllocRange, GlobalAlloc, Pointer, Provenance, Scalar};\n+use crate::query::IntoQueryParam;\n use crate::query::Providers;\n-use crate::ty::query::IntoQueryParam;\n use crate::ty::{\n     self, ConstInt, ParamConst, ScalarInt, Term, TermKind, Ty, TyCtxt, TypeFoldable,\n     TypeSuperFoldable, TypeSuperVisitable, TypeVisitable, TypeVisitableExt,"}, {"sha": "18895072c3b96460639477235fa4e402c56755e1", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -276,6 +276,7 @@ where\n                 assert_eq!(self.elaborator.param_env().reveal(), Reveal::All);\n                 let field_ty =\n                     tcx.normalize_erasing_regions(self.elaborator.param_env(), f.ty(tcx, substs));\n+\n                 (tcx.mk_place_field(base_place, field, field_ty), subpath)\n             })\n             .collect()"}, {"sha": "12f955d46bd31438e1b05fab7e295d6cf3173c0c", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -7,6 +7,7 @@ use rustc_index::Idx;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n+use rustc_middle::ty::TypeVisitableExt;\n use rustc_middle::ty::{self, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_session::config::OptLevel;\n use rustc_span::{hygiene::ExpnKind, ExpnData, LocalExpnId, Span};\n@@ -168,7 +169,7 @@ impl<'tcx> Inliner<'tcx> {\n         let callee_attrs = self.tcx.codegen_fn_attrs(callsite.callee.def_id());\n         self.check_codegen_attributes(callsite, callee_attrs)?;\n         self.check_mir_is_available(caller_body, &callsite.callee)?;\n-        let callee_body = self.tcx.instance_mir(callsite.callee.def);\n+        let callee_body = try_instance_mir(self.tcx, callsite.callee.def)?;\n         self.check_mir_body(callsite, callee_body, callee_attrs)?;\n \n         if !self.tcx.consider_optimizing(|| {\n@@ -1128,3 +1129,27 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n         }\n     }\n }\n+\n+#[instrument(skip(tcx), level = \"debug\")]\n+fn try_instance_mir<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    instance: InstanceDef<'tcx>,\n+) -> Result<&'tcx Body<'tcx>, &'static str> {\n+    match instance {\n+        ty::InstanceDef::DropGlue(_, Some(ty)) => match ty.kind() {\n+            ty::Adt(def, substs) => {\n+                let fields = def.all_fields();\n+                for field in fields {\n+                    let field_ty = field.ty(tcx, substs);\n+                    if field_ty.has_param() && field_ty.has_projections() {\n+                        return Err(\"cannot build drop shim for polymorphic type\");\n+                    }\n+                }\n+\n+                Ok(tcx.instance_mir(instance))\n+            }\n+            _ => Ok(tcx.instance_mir(instance)),\n+        },\n+        _ => Ok(tcx.instance_mir(instance)),\n+    }\n+}"}, {"sha": "35b154b7b34d1c52db2aac6c2fff5283ed1d14cd", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -185,9 +185,9 @@ use rustc_middle::mir::interpret::{ErrorHandled, GlobalAlloc, Scalar};\n use rustc_middle::mir::mono::{InstantiationMode, MonoItem};\n use rustc_middle::mir::visit::Visitor as MirVisitor;\n use rustc_middle::mir::{self, Local, Location};\n+use rustc_middle::query::TyCtxtAt;\n use rustc_middle::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::query::TyCtxtAt;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::{\n     self, GenericParamDefKind, Instance, InstanceDef, Ty, TyCtxt, TypeFoldable, TypeVisitableExt,"}, {"sha": "ecc50c3f664fd9f04dd35eaa735ac6d92e3cd3d4", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -12,10 +12,9 @@ extern crate rustc_middle;\n use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_fluent_macro::fluent_messages;\n use rustc_hir::lang_items::LangItem;\n-use rustc_middle::query::Providers;\n+use rustc_middle::query::{Providers, TyCtxtAt};\n use rustc_middle::traits;\n use rustc_middle::ty::adjustment::CustomCoerceUnsized;\n-use rustc_middle::ty::query::TyCtxtAt;\n use rustc_middle::ty::{self, Ty};\n \n mod collector;"}, {"sha": "b76734dd072948b6bc99a1ff38007ec28abda06b", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -24,12 +24,12 @@ use rustc_middle::dep_graph::DepNodeIndex;\n use rustc_middle::dep_graph::{self, DepKind, DepKindStruct};\n use rustc_middle::query::erase::{erase, restore, Erase};\n use rustc_middle::query::on_disk_cache::OnDiskCache;\n+use rustc_middle::query::plumbing::{DynamicQuery, QuerySystem, QuerySystemFns};\n use rustc_middle::query::AsLocalKey;\n use rustc_middle::query::{\n     query_keys, query_provided, query_provided_to_value, query_storage, query_values,\n     DynamicQueries, ExternProviders, Providers, QueryCaches, QueryEngine, QueryStates,\n };\n-use rustc_middle::ty::query::{DynamicQuery, QuerySystem, QuerySystemFns};\n use rustc_middle::ty::TyCtxt;\n use rustc_query_system::dep_graph::SerializedDepNodeIndex;\n use rustc_query_system::ich::StableHashingContext;"}, {"sha": "79d8abc4b694ca809a0ca634e065e8ce38818505", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -716,8 +716,7 @@ macro_rules! define_queries {\n \n         mod query_structs {\n             use super::*;\n-            use rustc_middle::ty::query::QueryStruct;\n-            use rustc_middle::ty::query::QueryKeyStringCache;\n+            use rustc_middle::query::plumbing::{QueryKeyStringCache, QueryStruct};\n             use rustc_middle::dep_graph::DepKind;\n             use crate::QueryConfigRestored;\n "}, {"sha": "e042ee62dfe52c2e4a1d1d7fd8f1e80173b4aecf", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -2,7 +2,7 @@ use measureme::{StringComponent, StringId};\n use rustc_data_structures::profiling::SelfProfiler;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathData;\n-use rustc_middle::ty::query::QueryKeyStringCache;\n+use rustc_middle::query::plumbing::QueryKeyStringCache;\n use rustc_middle::ty::TyCtxt;\n use rustc_query_system::query::QueryCache;\n use std::fmt::Debug;"}, {"sha": "59eda9db97f49f9fa4c8f9d87e4c1abe052ec94d", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -550,7 +550,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n                 let sm = self.tcx.sess.source_map();\n                 let def_id = match outer_res {\n-                    Res::SelfTyParam { .. } | Res::SelfCtor(_) => {\n+                    Res::SelfTyParam { .. } => {\n                         err.span_label(span, \"can't use `Self` here\");\n                         return err;\n                     }"}, {"sha": "f065c4ddd2e1d3e2f8b20e2fcacf9c593a16b9ae", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -1174,10 +1174,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     return Res::Err;\n                 }\n             }\n-            Res::Def(DefKind::TyParam, _)\n-            | Res::SelfTyParam { .. }\n-            | Res::SelfTyAlias { .. }\n-            | Res::SelfCtor(_) => {\n+            Res::Def(DefKind::TyParam, _) | Res::SelfTyParam { .. } | Res::SelfTyAlias { .. } => {\n                 for rib in ribs {\n                     let has_generic_params: HasGenericParams = match rib.kind {\n                         RibKind::Normal"}, {"sha": "0a2f5f6653cfd09fcb02f03708abfc6b32843682", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -1751,7 +1751,7 @@ fn render_impl(\n             if trait_.is_none() && i.inner_impl().items.is_empty() {\n                 w.write_str(\n                     \"<div class=\\\"item-info\\\">\\\n-                    <div class=\\\"stab empty-impl\\\">This impl block contains no items.</div>\n+                    <div class=\\\"stab empty-impl\\\">This impl block contains no items.</div>\\\n                 </div>\",\n                 );\n             }"}, {"sha": "efa54d91dcaacedf42dc3e2fc9a4b875c4860ce1", "filename": "tests/rustdoc-json/impls/impl_item_visibility.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/tests%2Frustdoc-json%2Fimpls%2Fimpl_item_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/tests%2Frustdoc-json%2Fimpls%2Fimpl_item_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fimpls%2Fimpl_item_visibility.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -0,0 +1,26 @@\n+#![feature(no_core)]\n+#![no_core]\n+\n+pub struct Foo;\n+\n+/// impl Foo priv\n+impl Foo {\n+    fn baz() {}\n+}\n+// @!has '$.index[*][?(@.docs==\"impl Foo priv\")]'\n+\n+\n+/// impl Foo pub\n+impl Foo {\n+    pub fn qux() {}\n+}\n+// @is '$.index[*][?(@.docs==\"impl Foo pub\")].visibility' '\"default\"'\n+\n+\n+/// impl Foo hidden\n+impl Foo {\n+    #[doc(hidden)]\n+    pub fn __quazl(){}\n+}\n+// FIXME(#111564): Is this the right behaviour?\n+// @is '$.index[*][?(@.docs==\"impl Foo hidden\")].visibility' '\"default\"'"}, {"sha": "3c6fefc4ca29ff99d94249e4d0f5ce757e546734", "filename": "tests/rustdoc-json/impls/impl_item_visibility_show_hidden.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/tests%2Frustdoc-json%2Fimpls%2Fimpl_item_visibility_show_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/tests%2Frustdoc-json%2Fimpls%2Fimpl_item_visibility_show_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fimpls%2Fimpl_item_visibility_show_hidden.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -0,0 +1,28 @@\n+// compile-flags: --document-hidden-items\n+#![feature(no_core)]\n+#![no_core]\n+\n+pub struct Foo;\n+\n+/// impl Foo priv\n+impl Foo {\n+    fn baz() {}\n+}\n+// FIXME(#111564): Is this the right behaviour?\n+// @is '$.index[*][?(@.docs==\"impl Foo priv\")].visibility' '\"default\"'\n+\n+\n+/// impl Foo pub\n+impl Foo {\n+    pub fn qux() {}\n+}\n+// @is '$.index[*][?(@.docs==\"impl Foo pub\")].visibility' '\"default\"'\n+\n+\n+/// impl Foo hidden\n+impl Foo {\n+    #[doc(hidden)]\n+    pub fn __quazl(){}\n+}\n+// FIXME(#111564): Is this the right behaviour?\n+// @is '$.index[*][?(@.docs==\"impl Foo hidden\")].visibility' '\"default\"'"}, {"sha": "b98d1e4167cedce5af887cf41bd3f3fa058243bb", "filename": "tests/rustdoc-json/impls/impl_item_visibility_show_private.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/tests%2Frustdoc-json%2Fimpls%2Fimpl_item_visibility_show_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/tests%2Frustdoc-json%2Fimpls%2Fimpl_item_visibility_show_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fimpls%2Fimpl_item_visibility_show_private.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -0,0 +1,27 @@\n+// compile-flags: --document-private-items\n+#![feature(no_core)]\n+#![no_core]\n+\n+pub struct Foo;\n+\n+/// impl Foo priv\n+impl Foo {\n+    fn baz() {}\n+}\n+// @is '$.index[*][?(@.docs==\"impl Foo priv\")].visibility' '\"default\"'\n+\n+\n+/// impl Foo pub\n+impl Foo {\n+    pub fn qux() {}\n+}\n+// @is '$.index[*][?(@.docs==\"impl Foo pub\")].visibility' '\"default\"'\n+\n+\n+/// impl Foo hidden\n+impl Foo {\n+    #[doc(hidden)]\n+    pub fn __quazl(){}\n+}\n+// FIXME(#111564): Is this the right behaviour?\n+// @is '$.index[*][?(@.docs==\"impl Foo hidden\")].visibility' '\"default\"'"}, {"sha": "35f9c7e8d9be668edf42b69bce77e14e544c20ec", "filename": "tests/ui/drop/issue-110682.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/tests%2Fui%2Fdrop%2Fissue-110682.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/tests%2Fui%2Fdrop%2Fissue-110682.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop%2Fissue-110682.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -0,0 +1,92 @@\n+// build-pass\n+// compile-flags: -Zmir-opt-level=3\n+\n+use std::fmt::Debug;\n+use std::mem::ManuallyDrop;\n+use std::ptr;\n+\n+pub trait BitRegister {}\n+\n+macro_rules! register {\n+    ($($t:ty),+ $(,)?) => { $(\n+        impl BitRegister for $t {\n+        }\n+    )* };\n+}\n+\n+register!(u8, u16, u32);\n+\n+pub trait BitStore: Sized + Debug {\n+    /// The register type that the implementor describes.\n+    type Mem: BitRegister + Into<Self>;\n+}\n+\n+macro_rules! store {\n+    ($($t:ty),+ $(,)?) => { $(\n+        impl BitStore for $t {\n+            type Mem = Self;\n+        }\n+    )+ };\n+}\n+\n+store!(u8, u16, u32,);\n+\n+#[repr(C)]\n+pub struct BitVec<T>\n+where\n+    T: BitStore,\n+{\n+    /// Region pointer describing the live portion of the owned buffer.\n+    pointer: ptr::NonNull<T>,\n+    /// Allocated capacity, in elements `T`, of the owned buffer.\n+    capacity: usize,\n+}\n+\n+impl<T> BitVec<T>\n+where\n+    T: BitStore,\n+{\n+    pub fn new() -> Self {\n+        let pointer = ptr::NonNull::<T>::new(ptr::null_mut()).unwrap();\n+\n+        BitVec { pointer, capacity: 10 }\n+    }\n+\n+    pub fn clear(&mut self) {\n+        unsafe {\n+            self.set_len(0);\n+        }\n+    }\n+\n+    #[inline]\n+    pub unsafe fn set_len(&mut self, new_len: usize) {}\n+\n+    fn with_vec<F, R>(&mut self, func: F) -> R\n+    where\n+        F: FnOnce(&mut ManuallyDrop<Vec<T::Mem>>) -> R,\n+    {\n+        let cap = self.capacity;\n+        let elts = 10;\n+        let mut vec = ManuallyDrop::new(unsafe { Vec::from_raw_parts(ptr::null_mut(), elts, cap) });\n+        let out = func(&mut vec);\n+\n+        out\n+    }\n+}\n+\n+impl<T> Drop for BitVec<T>\n+where\n+    T: BitStore,\n+{\n+    #[inline]\n+    fn drop(&mut self) {\n+        //  The buffer elements do not have destructors.\n+        self.clear();\n+        //  Run the `Vec` destructor to de\u00e4llocate the buffer.\n+        self.with_vec(|vec| unsafe { ManuallyDrop::drop(vec) });\n+    }\n+}\n+\n+fn main() {\n+    let bitvec = BitVec::<u32>::new();\n+}"}, {"sha": "acea37b358b2ed3406638e53103d91bac22cded3", "filename": "tests/ui/resolve/issue-111312.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/tests%2Fui%2Fresolve%2Fissue-111312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/tests%2Fui%2Fresolve%2Fissue-111312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-111312.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -0,0 +1,11 @@\n+// edition: 2021\n+\n+trait Has {\n+    fn has() {}\n+}\n+\n+trait HasNot {}\n+\n+fn main() {\n+    HasNot::has(); //~ ERROR\n+}"}, {"sha": "4c864029c98702000484b63fff22ec927a085577", "filename": "tests/ui/resolve/issue-111312.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/tests%2Fui%2Fresolve%2Fissue-111312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/tests%2Fui%2Fresolve%2Fissue-111312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-111312.stderr?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -0,0 +1,15 @@\n+error[E0599]: no function or associated item named `has` found for trait `HasNot`\n+  --> $DIR/issue-111312.rs:10:13\n+   |\n+LL |     HasNot::has();\n+   |             ^^^ function or associated item not found in `HasNot`\n+   |\n+note: `Has` defines an item `has`\n+  --> $DIR/issue-111312.rs:3:1\n+   |\n+LL | trait Has {\n+   | ^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "b015397a5bc5f66928fbd81af2a12461c1722682", "filename": "tests/ui/self/self-ctor-inner-const.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/tests%2Fui%2Fself%2Fself-ctor-inner-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/tests%2Fui%2Fself%2Fself-ctor-inner-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Fself-ctor-inner-const.rs?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -1,17 +0,0 @@\n-// Verify that we ban usage of `Self` as constructor from inner items.\n-\n-struct S0<T>(T);\n-\n-impl<T> S0<T> {\n-    fn foo() {\n-        const C: S0<u8> = Self(0);\n-        //~^ ERROR can't use generic parameters from outer function\n-        fn bar() -> Self {\n-            //~^ ERROR can't use generic parameters from outer function\n-            Self(0)\n-            //~^ ERROR can't use generic parameters from outer function\n-        }\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "7287c64c659b72fc1a5c628a96506dd96c3d2c58", "filename": "tests/ui/self/self-ctor-inner-const.stderr", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c2ccc855e74aec03e434405eca3c247ee2432e53/tests%2Fui%2Fself%2Fself-ctor-inner-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2ccc855e74aec03e434405eca3c247ee2432e53/tests%2Fui%2Fself%2Fself-ctor-inner-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Fself-ctor-inner-const.stderr?ref=c2ccc855e74aec03e434405eca3c247ee2432e53", "patch": "@@ -1,33 +0,0 @@\n-error[E0401]: can't use generic parameters from outer function\n-  --> $DIR/self-ctor-inner-const.rs:7:27\n-   |\n-LL |         const C: S0<u8> = Self(0);\n-   |                           ^^^^\n-   |                           |\n-   |                           use of generic parameter from outer function\n-   |                           can't use `Self` here\n-\n-error[E0401]: can't use generic parameters from outer function\n-  --> $DIR/self-ctor-inner-const.rs:9:21\n-   |\n-LL | impl<T> S0<T> {\n-   | ---- `Self` type implicitly declared here, by this `impl`\n-...\n-LL |         fn bar() -> Self {\n-   |                     ^^^^\n-   |                     |\n-   |                     use of generic parameter from outer function\n-   |                     use a type here instead\n-\n-error[E0401]: can't use generic parameters from outer function\n-  --> $DIR/self-ctor-inner-const.rs:11:13\n-   |\n-LL |             Self(0)\n-   |             ^^^^\n-   |             |\n-   |             use of generic parameter from outer function\n-   |             can't use `Self` here\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0401`."}, {"sha": "0ae7f8da4b4b9328fd62e187d875a2880d9d9379", "filename": "tests/ui/self/self-ctor-nongeneric.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/tests%2Fui%2Fself%2Fself-ctor-nongeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/tests%2Fui%2Fself%2Fself-ctor-nongeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Fself-ctor-nongeneric.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -0,0 +1,15 @@\n+// `Self` as a constructor is currently allowed when the outer item is not generic.\n+// check-pass\n+\n+struct S0(usize);\n+\n+impl S0 {\n+    fn foo() {\n+        const C: S0 = Self(0);\n+        fn bar() -> S0 {\n+            Self(0)\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "b174669545a2b95637f40679dba36513e3a1fd67", "filename": "tests/ui/traits/issue-106072.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/tests%2Fui%2Ftraits%2Fissue-106072.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/tests%2Fui%2Ftraits%2Fissue-106072.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-106072.rs?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -1,5 +1,4 @@\n #[derive(Clone)] //~  trait objects must include the `dyn` keyword\n-                 //~| trait objects must include the `dyn` keyword\n struct Foo;\n trait Foo {} //~ the name `Foo` is defined multiple times\n fn main() {}"}, {"sha": "1037603ceb777dd3da24989f33137931e4862b81", "filename": "tests/ui/traits/issue-106072.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad23942ad4079f779651983b262fa34c0beda701/tests%2Fui%2Ftraits%2Fissue-106072.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad23942ad4079f779651983b262fa34c0beda701/tests%2Fui%2Ftraits%2Fissue-106072.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-106072.stderr?ref=ad23942ad4079f779651983b262fa34c0beda701", "patch": "@@ -1,5 +1,5 @@\n error[E0428]: the name `Foo` is defined multiple times\n-  --> $DIR/issue-106072.rs:4:1\n+  --> $DIR/issue-106072.rs:3:1\n    |\n LL | struct Foo;\n    | ----------- previous definition of the type `Foo` here\n@@ -16,15 +16,7 @@ LL | #[derive(Clone)]\n    |\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0782]: trait objects must include the `dyn` keyword\n-  --> $DIR/issue-106072.rs:1:10\n-   |\n-LL | #[derive(Clone)]\n-   |          ^^^^^\n-   |\n-   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0428, E0782.\n For more information about an error, try `rustc --explain E0428`."}]}