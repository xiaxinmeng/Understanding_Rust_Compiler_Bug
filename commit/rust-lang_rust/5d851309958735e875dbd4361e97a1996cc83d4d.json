{"sha": "5d851309958735e875dbd4361e97a1996cc83d4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkODUxMzA5OTU4NzM1ZTg3NWRiZDQzNjFlOTdhMTk5NmNjODNkNGQ=", "commit": {"author": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-06-24T09:16:45Z"}, "committer": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-06-24T09:16:45Z"}, "message": "Partially stabilize `const_slice_first_last`", "tree": {"sha": "ba51fdfe3ecd18f7e1f4367b1e33c66e781188dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba51fdfe3ecd18f7e1f4367b1e33c66e781188dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d851309958735e875dbd4361e97a1996cc83d4d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQTgxeqBxcDGar1sVhy4DhnkZitapAUCYNRNjwAKCRC4DhnkZita\npMOSAP9lprrXIIoiSQiekDUV0PwLBAJytT3cbryb1ztY3rW/QgEAux7l/LNhzNKY\n0AJ5AkjWNkWa57SFhEPWepwm7PU7kAI=\n=v4+J\n-----END PGP SIGNATURE-----", "payload": "tree ba51fdfe3ecd18f7e1f4367b1e33c66e781188dd\nparent 964a81eb37db6ee33b8fc107582618bf2befe02d\nauthor Jacob Pratt <jacob@jhpratt.dev> 1624526205 -0400\ncommitter Jacob Pratt <jacob@jhpratt.dev> 1624526205 -0400\n\nPartially stabilize `const_slice_first_last`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d851309958735e875dbd4361e97a1996cc83d4d", "html_url": "https://github.com/rust-lang/rust/commit/5d851309958735e875dbd4361e97a1996cc83d4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d851309958735e875dbd4361e97a1996cc83d4d/comments", "author": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "964a81eb37db6ee33b8fc107582618bf2befe02d", "url": "https://api.github.com/repos/rust-lang/rust/commits/964a81eb37db6ee33b8fc107582618bf2befe02d", "html_url": "https://github.com/rust-lang/rust/commit/964a81eb37db6ee33b8fc107582618bf2befe02d"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "06ef9fcbdea870ad49e540ebd03f49ca34bc0225", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d851309958735e875dbd4361e97a1996cc83d4d/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d851309958735e875dbd4361e97a1996cc83d4d/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=5d851309958735e875dbd4361e97a1996cc83d4d", "patch": "@@ -140,7 +140,7 @@ impl<T> [T] {\n     /// assert_eq!(None, w.first());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_slice_first_last\", issue = \"83570\")]\n+    #[rustc_const_stable(feature = \"const_slice_first_last_not_mut\", since = \"1.55.0\")]\n     #[inline]\n     pub const fn first(&self) -> Option<&T> {\n         if let [first, ..] = self { Some(first) } else { None }\n@@ -178,7 +178,7 @@ impl<T> [T] {\n     /// }\n     /// ```\n     #[stable(feature = \"slice_splits\", since = \"1.5.0\")]\n-    #[rustc_const_unstable(feature = \"const_slice_first_last\", issue = \"83570\")]\n+    #[rustc_const_stable(feature = \"const_slice_first_last_not_mut\", since = \"1.55.0\")]\n     #[inline]\n     pub const fn split_first(&self) -> Option<(&T, &[T])> {\n         if let [first, tail @ ..] = self { Some((first, tail)) } else { None }\n@@ -218,7 +218,7 @@ impl<T> [T] {\n     /// }\n     /// ```\n     #[stable(feature = \"slice_splits\", since = \"1.5.0\")]\n-    #[rustc_const_unstable(feature = \"const_slice_first_last\", issue = \"83570\")]\n+    #[rustc_const_stable(feature = \"const_slice_first_last_not_mut\", since = \"1.55.0\")]\n     #[inline]\n     pub const fn split_last(&self) -> Option<(&T, &[T])> {\n         if let [init @ .., last] = self { Some((last, init)) } else { None }\n@@ -257,7 +257,7 @@ impl<T> [T] {\n     /// assert_eq!(None, w.last());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_slice_first_last\", issue = \"83570\")]\n+    #[rustc_const_stable(feature = \"const_slice_first_last_not_mut\", since = \"1.55.0\")]\n     #[inline]\n     pub const fn last(&self) -> Option<&T> {\n         if let [.., last] = self { Some(last) } else { None }"}]}