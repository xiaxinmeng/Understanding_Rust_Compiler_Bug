{"sha": "8b87c3a2a82507ac33e067311c591c8f3815a382", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiODdjM2EyYTgyNTA3YWMzM2UwNjczMTFjNTkxYzhmMzgxNWEzODI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-12T16:02:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-12T16:02:05Z"}, "message": "auto merge of #14809 : zzmp/rust/patch-2, r=alexcrichton\n\nPreviously, the type system's restrictions on borrowing were summarized as\r\n\r\n> The previous example showed that the type system forbids any borrowing of owned boxes found in aliasable, mutable memory.\r\n\r\nThis did not jive with the example, which allowed mutations so long as the borrowed reference had been returned. Also, the language has changed to no longer allow aliasable mutable locations. This changes the summary to read\r\n\r\n> The previous example showed that the type system forbids mutations of owned boxed values while they are being borrowed. In general, the type system also forbids borrowing a value as mutable if it is already being borrowed - either as a mutable reference or an immutable one.\r\n\r\nThis adds more general information for the experienced reader as well, to offer a more complete understanding.", "tree": {"sha": "a6049d44d4e10e4e7dbbac25c443cbd5f1d4d41b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6049d44d4e10e4e7dbbac25c443cbd5f1d4d41b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b87c3a2a82507ac33e067311c591c8f3815a382", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b87c3a2a82507ac33e067311c591c8f3815a382", "html_url": "https://github.com/rust-lang/rust/commit/8b87c3a2a82507ac33e067311c591c8f3815a382", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b87c3a2a82507ac33e067311c591c8f3815a382/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0a6f72e8bfea2647da7f63f9f09b2cfeaa161c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0a6f72e8bfea2647da7f63f9f09b2cfeaa161c9", "html_url": "https://github.com/rust-lang/rust/commit/c0a6f72e8bfea2647da7f63f9f09b2cfeaa161c9"}, {"sha": "4f90025b68b41cc9e32bb8da7765ddae081a2ed7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f90025b68b41cc9e32bb8da7765ddae081a2ed7", "html_url": "https://github.com/rust-lang/rust/commit/4f90025b68b41cc9e32bb8da7765ddae081a2ed7"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "66b9ef1ea724605ae000790c4bb8aaa12167f218", "filename": "src/doc/guide-lifetimes.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b87c3a2a82507ac33e067311c591c8f3815a382/src%2Fdoc%2Fguide-lifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b87c3a2a82507ac33e067311c591c8f3815a382/src%2Fdoc%2Fguide-lifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-lifetimes.md?ref=8b87c3a2a82507ac33e067311c591c8f3815a382", "patch": "@@ -275,8 +275,10 @@ invalidate the pointer `owner_age`.\n \n # Borrowing and enums\n \n-The previous example showed that the type system forbids any borrowing\n-of owned boxes found in aliasable, mutable memory. This restriction\n+The previous example showed that the type system forbids any mutations\n+of owned boxed values while they are being borrowed. In general, the type\n+system also forbids borrowing a value as mutable if it is already being\n+borrowed - either as a mutable reference or an immutable one. This restriction\n prevents pointers from pointing into freed memory. There is one other\n case where the compiler must be very careful to ensure that pointers\n remain valid: pointers into the interior of an `enum`."}]}