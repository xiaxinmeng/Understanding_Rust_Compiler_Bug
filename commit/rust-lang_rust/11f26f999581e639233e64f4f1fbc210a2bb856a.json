{"sha": "11f26f999581e639233e64f4f1fbc210a2bb856a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZjI2Zjk5OTU4MWU2MzkyMzNlNjRmNGYxZmJjMjEwYTJiYjg1NmE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-07T04:17:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-08T00:54:34Z"}, "message": "rustdoc: Simplify cross-crate where clauses\n\nAdd a custom module to rustdoc which simplifies the output of `middle::ty` into\na more readable form which tends to be written down anyway!\n\nCloses #20646", "tree": {"sha": "97516d503cac7498a64132a90dcae874070a2668", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97516d503cac7498a64132a90dcae874070a2668"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11f26f999581e639233e64f4f1fbc210a2bb856a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11f26f999581e639233e64f4f1fbc210a2bb856a", "html_url": "https://github.com/rust-lang/rust/commit/11f26f999581e639233e64f4f1fbc210a2bb856a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11f26f999581e639233e64f4f1fbc210a2bb856a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8874fd496202994f0c14909b436dc169837ab0e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8874fd496202994f0c14909b436dc169837ab0e7", "html_url": "https://github.com/rust-lang/rust/commit/8874fd496202994f0c14909b436dc169837ab0e7"}], "stats": {"total": 209, "additions": 199, "deletions": 10}, "files": [{"sha": "630dc18dca79f3e56c62296fa01a487348c80c5a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/11f26f999581e639233e64f4f1fbc210a2bb856a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f26f999581e639233e64f4f1fbc210a2bb856a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=11f26f999581e639233e64f4f1fbc210a2bb856a", "patch": "@@ -58,6 +58,7 @@ use visit_ast;\n pub static SCHEMA_VERSION: &'static str = \"0.8.3\";\n \n mod inline;\n+mod simplify;\n \n // extract the stability index for a node from tcx, if possible\n fn get_stability(cx: &DocContext, def_id: ast::DefId) -> Option<Stability> {\n@@ -891,8 +892,9 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics<'tcx>,\n \n         let (gens, preds, space) = *self;\n \n-        // Bounds in the type_params and lifetimes fields are repeated in the predicates\n-        // field (see rustc_typeck::collect::ty_generics), so remove them.\n+        // Bounds in the type_params and lifetimes fields are repeated in the\n+        // predicates field (see rustc_typeck::collect::ty_generics), so remove\n+        // them.\n         let stripped_typarams = gens.types.get_slice(space).iter().map(|tp| {\n             tp.clean(cx)\n         }).collect::<Vec<_>>();\n@@ -902,11 +904,12 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics<'tcx>,\n             srp.clean(cx)\n         }).collect::<Vec<_>>();\n \n-        let where_predicates = preds.predicates.get_slice(space).to_vec().clean(cx);\n+        let where_predicates = preds.predicates.get_slice(space)\n+                                               .to_vec().clean(cx);\n \n-        // Type parameters have a Sized bound by default unless removed with ?Sized.\n-        // Scan through the predicates and mark any type parameter with a Sized\n-        // bound, removing the bounds as we find them.\n+        // Type parameters have a Sized bound by default unless removed with\n+        // ?Sized.  Scan through the predicates and mark any type parameter with\n+        // a Sized bound, removing the bounds as we find them.\n         let mut sized_params = HashSet::new();\n         let mut where_predicates = where_predicates.into_iter().filter_map(|pred| {\n             if let WP::BoundPredicate { ty: Type::Generic(ref g), ref bounds } = pred {\n@@ -918,8 +921,8 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics<'tcx>,\n             Some(pred)\n         }).collect::<Vec<_>>();\n \n-        // Finally, run through the type parameters again and insert a ?Sized unbound for\n-        // any we didn't find to be Sized.\n+        // Finally, run through the type parameters again and insert a ?Sized\n+        // unbound for any we didn't find to be Sized.\n         for tp in &stripped_typarams {\n             if !sized_params.contains(&tp.name) {\n                 let mut sized_bound = ty::BuiltinBound::BoundSized.clean(cx);\n@@ -938,9 +941,9 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics<'tcx>,\n         // and instead see `where T: Foo + Bar + Sized + 'a`\n \n         Generics {\n-            type_params: stripped_typarams,\n+            type_params: simplify::ty_params(stripped_typarams),\n             lifetimes: stripped_lifetimes,\n-            where_predicates: where_predicates\n+            where_predicates: simplify::where_clauses(where_predicates),\n         }\n     }\n }"}, {"sha": "367551fa1491c3e88978ab9c070e664f7264a12a", "filename": "src/librustdoc/clean/simplify.rs", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/11f26f999581e639233e64f4f1fbc210a2bb856a/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f26f999581e639233e64f4f1fbc210a2bb856a/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=11f26f999581e639233e64f4f1fbc210a2bb856a", "patch": "@@ -0,0 +1,136 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Simplification of where clauses and parameter bounds into a prettier and\n+//! more canonical form.\n+//!\n+//! Currently all cross-crate-inlined function use `middle::ty` to reconstruct\n+//! the AST (e.g. see all of `clean::inline`), but this is not always a\n+//! non-lossy transformation. The current format of storage for where clauses\n+//! for functions and such is simply a list of predicates. One example of this\n+//! is that the AST predicate of:\n+//!\n+//!     where T: Trait<Foo=Bar>\n+//!\n+//! is encoded as:\n+//!\n+//!     where T: Trait, <T as Trait>::Foo = Bar\n+//!\n+//! This module attempts to reconstruct the original where and/or parameter\n+//! bounds by special casing scenarios such as these. Fun!\n+\n+use std::mem;\n+use std::collections::HashMap;\n+\n+use clean;\n+use clean::WherePredicate as WP;\n+use clean::PathParameters as PP;\n+\n+pub fn where_clauses(clauses: Vec<WP>) -> Vec<WP> {\n+    // First, partition the where clause into its separate components\n+    let mut params = HashMap::new();\n+    let mut lifetimes = Vec::new();\n+    let mut equalities = Vec::new();\n+    let mut tybounds = Vec::new();\n+    for clause in clauses {\n+        match clause {\n+            WP::BoundPredicate { ty, bounds } => {\n+                match ty {\n+                    clean::Generic(s) => params.entry(s).or_insert(Vec::new())\n+                                               .extend(bounds),\n+                    t => tybounds.push((t, ty_bounds(bounds))),\n+                }\n+            }\n+            WP::RegionPredicate { lifetime, bounds } => {\n+                lifetimes.push((lifetime, bounds));\n+            }\n+            WP::EqPredicate { lhs, rhs } => equalities.push((lhs, rhs)),\n+        }\n+    }\n+\n+    // Simplify the type parameter bounds on all the generics\n+    let mut params = params.into_iter().map(|(k, v)| {\n+        (k, ty_bounds(v))\n+    }).collect::<HashMap<_, _>>();\n+\n+    // Look for equality predicates on associated types that can be merged into\n+    // general bound predicates\n+    equalities.retain(|&(ref lhs, ref rhs)| {\n+        let (self_, trait_, name) = match *lhs {\n+            clean::QPath { ref self_type, ref trait_, ref name } => {\n+                (self_type, trait_, name)\n+            }\n+            _ => return true,\n+        };\n+        let generic = match **self_ {\n+            clean::Generic(ref s) => s,\n+            _ => return true,\n+        };\n+        let trait_did = match **trait_ {\n+            clean::ResolvedPath { did, .. } => did,\n+            _ => return true,\n+        };\n+        let bounds = match params.get_mut(generic) {\n+            Some(bound) => bound,\n+            None => return true,\n+        };\n+        !bounds.iter_mut().any(|b| {\n+            let trait_ref = match *b {\n+                clean::TraitBound(ref mut tr, _) => tr,\n+                clean::RegionBound(..) => return false,\n+            };\n+            let (did, path) = match trait_ref.trait_ {\n+                clean::ResolvedPath { did, ref mut path, ..} => (did, path),\n+                _ => return false,\n+            };\n+            if did != trait_did { return false }\n+            let last = path.segments.last_mut().unwrap();\n+            let bindings = match last.params {\n+                PP::AngleBracketed { ref mut bindings, .. } => bindings,\n+                PP::Parenthesized { .. } => return false,\n+            };\n+            bindings.push(clean::TypeBinding {\n+                name: name.clone(),\n+                ty: rhs.clone(),\n+            });\n+            true\n+        })\n+    });\n+\n+    // And finally, let's reassemble everything\n+    let mut clauses = Vec::new();\n+    clauses.extend(lifetimes.into_iter().map(|(lt, bounds)| {\n+        WP::RegionPredicate { lifetime: lt, bounds: bounds }\n+    }));\n+    clauses.extend(params.into_iter().map(|(k, v)| {\n+        WP::BoundPredicate {\n+            ty: clean::Generic(k),\n+            bounds: v,\n+        }\n+    }));\n+    clauses.extend(tybounds.into_iter().map(|(ty, bounds)| {\n+        WP::BoundPredicate { ty: ty, bounds: bounds }\n+    }));\n+    clauses.extend(equalities.into_iter().map(|(lhs, rhs)| {\n+        WP::EqPredicate { lhs: lhs, rhs: rhs }\n+    }));\n+    clauses\n+}\n+\n+pub fn ty_params(mut params: Vec<clean::TyParam>) -> Vec<clean::TyParam> {\n+    for param in params.iter_mut() {\n+        param.bounds = ty_bounds(mem::replace(&mut param.bounds, Vec::new()));\n+    }\n+    return params;\n+}\n+\n+fn ty_bounds(bounds: Vec<clean::TyParamBound>) -> Vec<clean::TyParamBound> {\n+    bounds\n+}"}, {"sha": "150d8018f088831ef4d4a24c0862983b50e3ec32", "filename": "src/test/auxiliary/issue-20646.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/11f26f999581e639233e64f4f1fbc210a2bb856a/src%2Ftest%2Fauxiliary%2Fissue-20646.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f26f999581e639233e64f4f1fbc210a2bb856a/src%2Ftest%2Fauxiliary%2Fissue-20646.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-20646.rs?ref=11f26f999581e639233e64f4f1fbc210a2bb856a", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Trait {\n+    type Output;\n+}\n+\n+pub fn fun<T>(_: T) where T: Trait<Output=i32> {}"}, {"sha": "d2ba85651d8ebaeea559950b8aed81425a1675cc", "filename": "src/test/rustdoc/issue-20646.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/11f26f999581e639233e64f4f1fbc210a2bb856a/src%2Ftest%2Frustdoc%2Fissue-20646.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f26f999581e639233e64f4f1fbc210a2bb856a/src%2Ftest%2Frustdoc%2Fissue-20646.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-20646.rs?ref=11f26f999581e639233e64f4f1fbc210a2bb856a", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-20646.rs\n+\n+#![feature(associated_types)]\n+\n+extern crate issue_20646;\n+\n+// @has issue_20646/trait.Trait.html \\\n+//      '//*[@id=\"associatedtype.Output\"]' \\\n+//      'type Output'\n+pub trait Trait {\n+    type Output;\n+}\n+\n+// @has issue_20646/fn.fun.html \\\n+//      '//*[@class=\"rust fn\"]' 'where T: Trait<Output=i32>'\n+pub fn fun<T>(_: T) where T: Trait<Output=i32> {}\n+\n+pub mod reexport {\n+    // @has issue_20646/reexport/trait.Trait.html \\\n+    //      '//*[@id=\"associatedtype.Output\"]' \\\n+    //      'type Output'\n+    // @has issue_20646/reexport/fn.fun.html \\\n+    //      '//*[@class=\"rust fn\"]' 'where T: Trait<Output=i32>'\n+    pub use issue_20646::{Trait, fun};\n+}"}]}