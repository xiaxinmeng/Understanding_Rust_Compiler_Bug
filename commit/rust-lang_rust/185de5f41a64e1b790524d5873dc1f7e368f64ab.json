{"sha": "185de5f41a64e1b790524d5873dc1f7e368f64ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NWRlNWY0MWE2NGUxYjc5MDUyNGQ1ODczZGMxZjdlMzY4ZjY0YWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-09T15:28:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-09T15:28:28Z"}, "message": "Auto merge of #79540 - jyn514:no-xpy, r=Mark-Simulacrum\n\nAllow building rustdoc without first building rustc (MVP)\n\n ## Motivation\n\nThe compile times for rustc are extremely long and a major issue for\nrecruiting new contributors to rustdoc. People interested in joining\noften give up after running into issues with submodules or python\nversions. stage1 rustdoc fundamentally doesn't care about bootstrapping\nor stages, it just needs `rustc_private` available.\n\n## Summary of Changes\n\n- Add an opt-in `[rust] download_rustc` option\n- Determine the version of the compiler to download using `log --author=bors`\n- Do no work for any component other than `Rustdoc` for any stage. Instead, copy the CI artifacts from the downloaded sysroot stage0/ to stage0-sysroot/ or stage1/ in `Sysroot`. This is done with an `ENABLE_DOWNLOAD_STAGE1` constant which is off by default.\n- Don't download different versions of rustfmt or cargo - those should still use the beta version (rustfmt especially).\n\nThe vast majority of work is done in bootstrap.py, which downloads the artifacts and extracts them to stage0/ in place of the beta compiler. Rustbuild just takes care of copying the artifacts to stage1 if necessary.\n\n## Future work\n\n- I turned off verification for the commit tarballs because the .sha256 URLs gave a 404. This seems not ideal, it would be nice to start signing them.\n- This will break if you rebase an old enough branch (I think commits are kept at most 160 days?). This doesn't need to be supported, but it would be nice to give a reasonable error. https://github.com/rust-lang/rust/pull/79540#issuecomment-751481291\n- Right now, every time you rebase, stage0 tools (bootstrap, tidy, ...) will have to be recompiled. Additionally running `x.py setup tools` will compile rustbuild twice. Instead, this should download a separate beta compiler for stage0 and only use CI artifacts for stage1 onward. https://github.com/rust-lang/rust/pull/79540#issuecomment-757047321\n- Add `x.py setup tools` to enable this conveniently (it doesn't make sense to use this for compiler developers). https://github.com/jyn514/rust/commit/cb5d8c85226c501bf9deb39082a08af0ebfae850\n- Compile a new version of tracing so that rustdoc still gets debug logging (since CI artifacts always disable `debug` and `trace` logging). https://github.com/rust-lang/rust/pull/79540#issuecomment-742756411, https://github.com/jyn514/rust/commit/6a5d5124209bec7652e745725a995bd77bb3f881\n- Right now only rustdoc is ever rebuilt. This is not ideal and should probably at least compile compiler tools (rustfmt, clippy, miri). https://github.com/rust-lang/rust/pull/79540#issuecomment-775634693\n- Using `git log --author=bors` sometimes breaks. This should use `git merge-base` instead. https://github.com/rust-lang/rust/pull/79540#discussion_r572572280\n- It would be nice to support cross-compiling the standard library. Right now this gives an assertion failure I think.\n\nSome of this work has already been done in (the history for) https://github.com/jyn514/rust/commit/673476c785bc1fbff175cb7f49ad487c7a2b0337.", "tree": {"sha": "f71930aeee9d16f857a6d2b28762a8b974768d7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f71930aeee9d16f857a6d2b28762a8b974768d7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/185de5f41a64e1b790524d5873dc1f7e368f64ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/185de5f41a64e1b790524d5873dc1f7e368f64ab", "html_url": "https://github.com/rust-lang/rust/commit/185de5f41a64e1b790524d5873dc1f7e368f64ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/185de5f41a64e1b790524d5873dc1f7e368f64ab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea098255f74923d69ea234ee526df6b9cecc3b9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea098255f74923d69ea234ee526df6b9cecc3b9b", "html_url": "https://github.com/rust-lang/rust/commit/ea098255f74923d69ea234ee526df6b9cecc3b9b"}, {"sha": "4aec8a5da5547d6e1c24e99dad0003b7cac107f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4aec8a5da5547d6e1c24e99dad0003b7cac107f5", "html_url": "https://github.com/rust-lang/rust/commit/4aec8a5da5547d6e1c24e99dad0003b7cac107f5"}], "stats": {"total": 140, "additions": 122, "deletions": 18}, "files": [{"sha": "f3bc98d78aed440be29cafc9607541a03d18b494", "filename": "config.toml.example", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/185de5f41a64e1b790524d5873dc1f7e368f64ab/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/185de5f41a64e1b790524d5873dc1f7e368f64ab/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=185de5f41a64e1b790524d5873dc1f7e368f64ab", "patch": "@@ -358,6 +358,12 @@ changelog-seen = 2\n #\n #debug = false\n \n+# Whether to download the stage 1 and 2 compilers from CI.\n+# This is mostly useful for tools; if you have changes to `compiler/` they will be ignored.\n+#\n+# FIXME: currently, this also uses the downloaded compiler for stage0, but that causes unnecessary rebuilds.\n+#download-rustc = false\n+\n # Number of codegen units to use for each compiler invocation. A value of 0\n # means \"the number of cores on this machine\", and 1+ is passed through to the\n # compiler."}, {"sha": "a438e920b7bc600978c667c3217e8353cb978989", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 62, "deletions": 12, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/185de5f41a64e1b790524d5873dc1f7e368f64ab/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/185de5f41a64e1b790524d5873dc1f7e368f64ab/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=185de5f41a64e1b790524d5873dc1f7e368f64ab", "patch": "@@ -378,6 +378,7 @@ def __init__(self):\n         self.verbose = False\n         self.git_version = None\n         self.nix_deps_dir = None\n+        self.rustc_commit = None\n \n     def download_stage0(self):\n         \"\"\"Fetch the build system for Rust, written in Rust\n@@ -394,20 +395,27 @@ def download_stage0(self):\n \n         if self.rustc().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.rustc()) or\n-                 self.program_out_of_date(self.rustc_stamp(), self.date)):\n+                 self.program_out_of_date(self.rustc_stamp(), self.date + str(self.rustc_commit))):\n             if os.path.exists(self.bin_root()):\n                 shutil.rmtree(self.bin_root())\n+            download_rustc = self.rustc_commit is not None\n             tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n             filename = \"rust-std-{}-{}{}\".format(\n                 rustc_channel, self.build, tarball_suffix)\n             pattern = \"rust-std-{}\".format(self.build)\n-            self._download_stage0_helper(filename, pattern, tarball_suffix)\n+            self._download_component_helper(filename, pattern, tarball_suffix, download_rustc)\n             filename = \"rustc-{}-{}{}\".format(rustc_channel, self.build,\n                                               tarball_suffix)\n-            self._download_stage0_helper(filename, \"rustc\", tarball_suffix)\n+            self._download_component_helper(filename, \"rustc\", tarball_suffix, download_rustc)\n             filename = \"cargo-{}-{}{}\".format(rustc_channel, self.build,\n                                               tarball_suffix)\n-            self._download_stage0_helper(filename, \"cargo\", tarball_suffix)\n+            self._download_component_helper(filename, \"cargo\", tarball_suffix)\n+            if self.rustc_commit is not None:\n+                filename = \"rustc-dev-{}-{}{}\".format(rustc_channel, self.build, tarball_suffix)\n+                self._download_component_helper(\n+                    filename, \"rustc-dev\", tarball_suffix, download_rustc\n+                )\n+\n             self.fix_bin_or_dylib(\"{}/bin/rustc\".format(self.bin_root()))\n             self.fix_bin_or_dylib(\"{}/bin/rustdoc\".format(self.bin_root()))\n             self.fix_bin_or_dylib(\"{}/bin/cargo\".format(self.bin_root()))\n@@ -416,7 +424,7 @@ def download_stage0(self):\n                 if lib.endswith(\".so\"):\n                     self.fix_bin_or_dylib(os.path.join(lib_dir, lib), rpath_libz=True)\n             with output(self.rustc_stamp()) as rust_stamp:\n-                rust_stamp.write(self.date)\n+                rust_stamp.write(self.date + str(self.rustc_commit))\n \n         if self.rustfmt() and self.rustfmt().startswith(self.bin_root()) and (\n             not os.path.exists(self.rustfmt())\n@@ -426,7 +434,9 @@ def download_stage0(self):\n                 tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n                 [channel, date] = rustfmt_channel.split('-', 1)\n                 filename = \"rustfmt-{}-{}{}\".format(channel, self.build, tarball_suffix)\n-                self._download_stage0_helper(filename, \"rustfmt-preview\", tarball_suffix, date)\n+                self._download_component_helper(\n+                    filename, \"rustfmt-preview\", tarball_suffix, key=date\n+                )\n                 self.fix_bin_or_dylib(\"{}/bin/rustfmt\".format(self.bin_root()))\n                 self.fix_bin_or_dylib(\"{}/bin/cargo-fmt\".format(self.bin_root()))\n                 with output(self.rustfmt_stamp()) as rustfmt_stamp:\n@@ -482,18 +492,27 @@ def downloading_llvm(self):\n         return opt == \"true\" \\\n             or (opt == \"if-available\" and self.build in supported_platforms)\n \n-    def _download_stage0_helper(self, filename, pattern, tarball_suffix, date=None):\n-        if date is None:\n-            date = self.date\n+    def _download_component_helper(\n+        self, filename, pattern, tarball_suffix, download_rustc=False, key=None\n+    ):\n+        if key is None:\n+            if download_rustc:\n+                key = self.rustc_commit\n+            else:\n+                key = self.date\n         cache_dst = os.path.join(self.build_dir, \"cache\")\n-        rustc_cache = os.path.join(cache_dst, date)\n+        rustc_cache = os.path.join(cache_dst, key)\n         if not os.path.exists(rustc_cache):\n             os.makedirs(rustc_cache)\n \n-        url = \"{}/dist/{}\".format(self._download_url, date)\n+        if download_rustc:\n+            url = \"https://ci-artifacts.rust-lang.org/rustc-builds/{}\".format(self.rustc_commit)\n+        else:\n+            url = \"{}/dist/{}\".format(self._download_url, key)\n         tarball = os.path.join(rustc_cache, filename)\n         if not os.path.exists(tarball):\n-            get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n+            do_verify = not download_rustc\n+            get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose, do_verify=do_verify)\n         unpack(tarball, tarball_suffix, self.bin_root(), match=pattern, verbose=self.verbose)\n \n     def _download_ci_llvm(self, llvm_sha, llvm_assertions):\n@@ -613,6 +632,30 @@ def fix_bin_or_dylib(self, fname, rpath_libz=False):\n             print(\"warning: failed to call patchelf:\", reason)\n             return\n \n+    # Return the stage1 compiler to download, if any.\n+    def maybe_download_rustc(self):\n+        # If `download-rustc` is not set, default to rebuilding.\n+        if self.get_toml(\"download-rustc\", section=\"rust\") != \"true\":\n+            return None\n+\n+        # Handle running from a directory other than the top level\n+        rev_parse = [\"git\", \"rev-parse\", \"--show-toplevel\"]\n+        top_level = subprocess.check_output(rev_parse, universal_newlines=True).strip()\n+        compiler = \"{}/compiler/\".format(top_level)\n+\n+        # Look for a version to compare to based on the current commit.\n+        # Ideally this would just use `merge-base`, but on beta and stable branches that wouldn't\n+        # come up with any commits, so hack it and use `author=bors` instead.\n+        merge_base = [\"git\", \"log\", \"--author=bors\", \"--pretty=%H\", \"-n1\", \"--\", compiler]\n+        commit = subprocess.check_output(merge_base, universal_newlines=True).strip()\n+\n+        # Warn if there were changes to the compiler since the ancestor commit.\n+        status = subprocess.call([\"git\", \"diff-index\", \"--quiet\", commit, \"--\", compiler])\n+        if status != 0:\n+            print(\"warning: `download-rustc` is enabled, but there are changes to compiler/\")\n+\n+        return commit\n+\n     def rustc_stamp(self):\n         \"\"\"Return the path for .rustc-stamp\n \n@@ -1090,6 +1133,13 @@ def bootstrap(help_triggered):\n     build.update_submodules()\n \n     # Fetch/build the bootstrap\n+    build.rustc_commit = build.maybe_download_rustc()\n+    if build.rustc_commit is not None:\n+        if build.verbose:\n+            commit = build.rustc_commit\n+            print(\"using downloaded stage1 artifacts from CI (commit {})\".format(commit))\n+        # FIXME: support downloading artifacts from the beta channel\n+        build.rustc_channel = \"nightly\"\n     build.download_stage0()\n     sys.stdout.flush()\n     build.ensure_vendored()"}, {"sha": "6ab106f3024651f0d6e935fe1390193e8e4fd11e", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/185de5f41a64e1b790524d5873dc1f7e368f64ab/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185de5f41a64e1b790524d5873dc1f7e368f64ab/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=185de5f41a64e1b790524d5873dc1f7e368f64ab", "patch": "@@ -57,6 +57,14 @@ pub trait Step: 'static + Clone + Debug + PartialEq + Eq + Hash {\n     /// `true` here can still be overwritten by `should_run` calling `default_condition`.\n     const DEFAULT: bool = false;\n \n+    /// Whether this step should be run even when `download-rustc` is set.\n+    ///\n+    /// Most steps are not important when the compiler is downloaded, since they will be included in\n+    /// the pre-compiled sysroot. Steps can set this to `true` to be built anyway.\n+    ///\n+    /// When in doubt, set this to `false`.\n+    const ENABLE_DOWNLOAD_RUSTC: bool = false;\n+\n     /// If true, then this rule should be skipped if --target was specified, but --host was not\n     const ONLY_HOSTS: bool = false;\n \n@@ -99,6 +107,7 @@ impl RunConfig<'_> {\n \n struct StepDescription {\n     default: bool,\n+    enable_download_rustc: bool,\n     only_hosts: bool,\n     should_run: fn(ShouldRun<'_>) -> ShouldRun<'_>,\n     make_run: fn(RunConfig<'_>),\n@@ -153,6 +162,7 @@ impl StepDescription {\n     fn from<S: Step>() -> StepDescription {\n         StepDescription {\n             default: S::DEFAULT,\n+            enable_download_rustc: S::ENABLE_DOWNLOAD_RUSTC,\n             only_hosts: S::ONLY_HOSTS,\n             should_run: S::should_run,\n             make_run: S::make_run,\n@@ -169,6 +179,14 @@ impl StepDescription {\n                 \"{:?} not skipped for {:?} -- not in {:?}\",\n                 pathset, self.name, builder.config.exclude\n             );\n+        } else if builder.config.download_rustc && !self.enable_download_rustc {\n+            if !builder.config.dry_run {\n+                eprintln!(\n+                    \"Not running {} because its artifacts have been downloaded from CI (`download-rustc` is set)\",\n+                    self.name\n+                );\n+            }\n+            return;\n         }\n \n         // Determine the targets participating in this rule.\n@@ -629,8 +647,12 @@ impl<'a> Builder<'a> {\n                     .join(\"rustlib\")\n                     .join(self.target.triple)\n                     .join(\"lib\");\n-                let _ = fs::remove_dir_all(&sysroot);\n-                t!(fs::create_dir_all(&sysroot));\n+                // Avoid deleting the rustlib/ directory we just copied\n+                // (in `impl Step for Sysroot`).\n+                if !builder.config.download_rustc {\n+                    let _ = fs::remove_dir_all(&sysroot);\n+                    t!(fs::create_dir_all(&sysroot));\n+                }\n                 INTERNER.intern_path(sysroot)\n             }\n         }"}, {"sha": "9b80f1cf9fca7c93e0708cbafdb0fe17fab8ae43", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/185de5f41a64e1b790524d5873dc1f7e368f64ab/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185de5f41a64e1b790524d5873dc1f7e368f64ab/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=185de5f41a64e1b790524d5873dc1f7e368f64ab", "patch": "@@ -62,6 +62,7 @@ fn cargo_subcommand(kind: Kind) -> &'static str {\n impl Step for Std {\n     type Output = ();\n     const DEFAULT: bool = true;\n+    const ENABLE_DOWNLOAD_RUSTC: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         run.all_krates(\"test\")\n@@ -155,6 +156,7 @@ impl Step for Rustc {\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n     const DEFAULT: bool = true;\n+    const ENABLE_DOWNLOAD_RUSTC: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         run.all_krates(\"rustc-main\")\n@@ -233,6 +235,7 @@ impl Step for CodegenBackend {\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n     const DEFAULT: bool = true;\n+    const ENABLE_DOWNLOAD_RUSTC: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         run.paths(&[\"compiler/rustc_codegen_cranelift\", \"rustc_codegen_cranelift\"])\n@@ -290,6 +293,7 @@ macro_rules! tool_check_step {\n             type Output = ();\n             const ONLY_HOSTS: bool = true;\n             const DEFAULT: bool = true;\n+            const ENABLE_DOWNLOAD_RUSTC: bool = true;\n \n             fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n                 run.path($path)"}, {"sha": "833c13e9a2615032d319e2d91d73debb8874d593", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/185de5f41a64e1b790524d5873dc1f7e368f64ab/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185de5f41a64e1b790524d5873dc1f7e368f64ab/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=185de5f41a64e1b790524d5873dc1f7e368f64ab", "patch": "@@ -41,7 +41,10 @@ impl Step for Std {\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.all_krates(\"test\")\n+        // When downloading stage1, the standard library has already been copied to the sysroot, so\n+        // there's no need to rebuild it.\n+        let download_rustc = run.builder.config.download_rustc;\n+        run.all_krates(\"test\").default_condition(!download_rustc)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -904,6 +907,18 @@ impl Step for Sysroot {\n         let _ = fs::remove_dir_all(&sysroot);\n         t!(fs::create_dir_all(&sysroot));\n \n+        // If we're downloading a compiler from CI, we can use the same compiler for all stages other than 0.\n+        if builder.config.download_rustc {\n+            assert_eq!(\n+                builder.config.build, compiler.host,\n+                \"Cross-compiling is not yet supported with `download-rustc`\",\n+            );\n+            // Copy the compiler into the correct sysroot.\n+            let stage0_dir = builder.config.out.join(&*builder.config.build.triple).join(\"stage0\");\n+            builder.cp_r(&stage0_dir, &sysroot);\n+            return INTERNER.intern_path(sysroot);\n+        }\n+\n         // Symlink the source root into the same location inside the sysroot,\n         // where `rust-src` component would go (`$sysroot/lib/rustlib/src/rust`),\n         // so that any tools relying on `rust-src` also work for local builds,\n@@ -975,13 +990,16 @@ impl Step for Assemble {\n         // produce some other architecture compiler we need to start from\n         // `build` to get there.\n         //\n-        // FIXME: Perhaps we should download those libraries?\n-        //        It would make builds faster...\n-        //\n         // FIXME: It may be faster if we build just a stage 1 compiler and then\n         //        use that to bootstrap this compiler forward.\n         let build_compiler = builder.compiler(target_compiler.stage - 1, builder.config.build);\n \n+        // If we're downloading a compiler from CI, we can use the same compiler for all stages other than 0.\n+        if builder.config.download_rustc {\n+            builder.ensure(Sysroot { compiler: target_compiler });\n+            return target_compiler;\n+        }\n+\n         // Build the libraries for this compiler to link to (i.e., the libraries\n         // it uses at runtime). NOTE: Crates the target compiler compiles don't\n         // link to these. (FIXME: Is that correct? It seems to be correct most"}, {"sha": "e4b8269f94cacc1084fa9620cb48ebc4911aaf6d", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/185de5f41a64e1b790524d5873dc1f7e368f64ab/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185de5f41a64e1b790524d5873dc1f7e368f64ab/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=185de5f41a64e1b790524d5873dc1f7e368f64ab", "patch": "@@ -80,6 +80,7 @@ pub struct Config {\n     pub cmd: Subcommand,\n     pub incremental: bool,\n     pub dry_run: bool,\n+    pub download_rustc: bool,\n \n     pub deny_warnings: bool,\n     pub backtrace_on_ice: bool,\n@@ -503,6 +504,7 @@ struct Rust {\n     new_symbol_mangling: Option<bool>,\n     profile_generate: Option<String>,\n     profile_use: Option<String>,\n+    download_rustc: Option<bool>,\n }\n \n /// TOML representation of how each build target is configured.\n@@ -885,6 +887,7 @@ impl Config {\n             config.rust_codegen_units_std = rust.codegen_units_std.map(threads_from_config);\n             config.rust_profile_use = flags.rust_profile_use.or(rust.profile_use);\n             config.rust_profile_generate = flags.rust_profile_generate.or(rust.profile_generate);\n+            config.download_rustc = rust.download_rustc.unwrap_or(false);\n         } else {\n             config.rust_profile_use = flags.rust_profile_use;\n             config.rust_profile_generate = flags.rust_profile_generate;"}, {"sha": "5c874f69bd92da8bfeac2e0ba5c1e5d986a33f1a", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/185de5f41a64e1b790524d5873dc1f7e368f64ab/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185de5f41a64e1b790524d5873dc1f7e368f64ab/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=185de5f41a64e1b790524d5873dc1f7e368f64ab", "patch": "@@ -477,6 +477,7 @@ pub struct Rustdoc {\n impl Step for Rustdoc {\n     type Output = PathBuf;\n     const DEFAULT: bool = true;\n+    const ENABLE_DOWNLOAD_RUSTC: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {"}]}