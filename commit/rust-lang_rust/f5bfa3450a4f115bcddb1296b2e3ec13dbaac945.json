{"sha": "f5bfa3450a4f115bcddb1296b2e3ec13dbaac945", "node_id": "C_kwDOAAsO6NoAKGY1YmZhMzQ1MGE0ZjExNWJjZGRiMTI5NmIyZTNlYzEzZGJhYWM5NDU", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-06T19:33:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-06T19:33:21Z"}, "message": "Rollup merge of #89528 - FabianWolff:issue-89497, r=jackh726\n\nFix suggestion to borrow when casting from pointer to reference\n\nFixes #89497.", "tree": {"sha": "f6691a0540df1868b0cc3152e5b623bf09a1e2ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6691a0540df1868b0cc3152e5b623bf09a1e2ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5bfa3450a4f115bcddb1296b2e3ec13dbaac945", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXfoBCRBK7hj4Ov3rIwAAfsUIADJpztXGiOM/Vdi2ZxqpaXFe\nzWHBfrMeHPn1zUWDDR6ha5f8ekd21g3mrIGGL5adqO2sj3CUhgNN8WBZZsfw/OCa\ndcbMP1R1KKW07GP5e3TqC9XcTC3FhjuACwFpohI3OZBvhEx6dx9Wg9XS6Ka4kcTV\n+4GU1vNB0A39kqB9jsR217kZkqPvjlFsDuRjuohEmswJ59tae0ewRkAuT25NN/uN\nv65rRiC7yrU65+8SLz6Xg2zsS8H80iwv8Lhwq+wTx0BZVO+VBKCyQgwVS1i4dJ4P\ntStAL2JzquDOCaTSc3RHYkFEPNEaP4vKbhG2Y+8tRtrwXyFKO16Fn5pHOuowDqI=\n=BeI5\n-----END PGP SIGNATURE-----\n", "payload": "tree f6691a0540df1868b0cc3152e5b623bf09a1e2ef\nparent 7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5\nparent 388bcc1cb086c567f17a4933bfb1d3f14eb19fb7\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633548801 -0700\ncommitter GitHub <noreply@github.com> 1633548801 -0700\n\nRollup merge of #89528 - FabianWolff:issue-89497, r=jackh726\n\nFix suggestion to borrow when casting from pointer to reference\n\nFixes #89497.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5bfa3450a4f115bcddb1296b2e3ec13dbaac945", "html_url": "https://github.com/rust-lang/rust/commit/f5bfa3450a4f115bcddb1296b2e3ec13dbaac945", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5bfa3450a4f115bcddb1296b2e3ec13dbaac945/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5", "html_url": "https://github.com/rust-lang/rust/commit/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5"}, {"sha": "388bcc1cb086c567f17a4933bfb1d3f14eb19fb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/388bcc1cb086c567f17a4933bfb1d3f14eb19fb7", "html_url": "https://github.com/rust-lang/rust/commit/388bcc1cb086c567f17a4933bfb1d3f14eb19fb7"}], "stats": {"total": 94, "additions": 80, "deletions": 14}, "files": [{"sha": "51c766fe57c104ea907074397984428291a952aa", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f5bfa3450a4f115bcddb1296b2e3ec13dbaac945/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5bfa3450a4f115bcddb1296b2e3ec13dbaac945/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=f5bfa3450a4f115bcddb1296b2e3ec13dbaac945", "patch": "@@ -351,7 +351,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 );\n                 let mut sugg = None;\n                 let mut sugg_mutref = false;\n-                if let ty::Ref(reg, _, mutbl) = *self.cast_ty.kind() {\n+                if let ty::Ref(reg, cast_ty, mutbl) = *self.cast_ty.kind() {\n                     if let ty::RawPtr(TypeAndMut { ty: expr_ty, .. }) = *self.expr_ty.kind() {\n                         if fcx\n                             .try_coerce(\n@@ -366,7 +366,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                             )\n                             .is_ok()\n                         {\n-                            sugg = Some(format!(\"&{}*\", mutbl.prefix_str()));\n+                            sugg = Some((format!(\"&{}*\", mutbl.prefix_str()), cast_ty == expr_ty));\n                         }\n                     } else if let ty::Ref(expr_reg, expr_ty, expr_mutbl) = *self.expr_ty.kind() {\n                         if expr_mutbl == Mutability::Not\n@@ -400,7 +400,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                             )\n                             .is_ok()\n                     {\n-                        sugg = Some(format!(\"&{}\", mutbl.prefix_str()));\n+                        sugg = Some((format!(\"&{}\", mutbl.prefix_str()), false));\n                     }\n                 } else if let ty::RawPtr(TypeAndMut { mutbl, .. }) = *self.cast_ty.kind() {\n                     if fcx\n@@ -416,19 +416,47 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                         )\n                         .is_ok()\n                     {\n-                        sugg = Some(format!(\"&{}\", mutbl.prefix_str()));\n+                        sugg = Some((format!(\"&{}\", mutbl.prefix_str()), false));\n                     }\n                 }\n                 if sugg_mutref {\n                     err.span_label(self.span, \"invalid cast\");\n                     err.span_note(self.expr.span, \"this reference is immutable\");\n                     err.span_note(self.cast_span, \"trying to cast to a mutable reference type\");\n-                } else if let Some(sugg) = sugg {\n+                } else if let Some((sugg, remove_cast)) = sugg {\n                     err.span_label(self.span, \"invalid cast\");\n-                    err.span_suggestion_verbose(\n-                        self.expr.span.shrink_to_lo(),\n+\n+                    let has_parens = fcx\n+                        .tcx\n+                        .sess\n+                        .source_map()\n+                        .span_to_snippet(self.expr.span)\n+                        .map_or(false, |snip| snip.starts_with(\"(\"));\n+\n+                    // Very crude check to see whether the expression must be wrapped\n+                    // in parentheses for the suggestion to work (issue #89497).\n+                    // Can/should be extended in the future.\n+                    let needs_parens = !has_parens\n+                        && match self.expr.kind {\n+                            hir::ExprKind::Cast(..) => true,\n+                            _ => false,\n+                        };\n+\n+                    let mut suggestion = vec![(self.expr.span.shrink_to_lo(), sugg)];\n+                    if needs_parens {\n+                        suggestion[0].1 += \"(\";\n+                        suggestion.push((self.expr.span.shrink_to_hi(), \")\".to_string()));\n+                    }\n+                    if remove_cast {\n+                        suggestion.push((\n+                            self.expr.span.shrink_to_hi().to(self.cast_span),\n+                            String::new(),\n+                        ));\n+                    }\n+\n+                    err.multipart_suggestion_verbose(\n                         \"consider borrowing the value\",\n-                        sugg,\n+                        suggestion,\n                         Applicability::MachineApplicable,\n                     );\n                 } else if !matches!("}, {"sha": "04c10a5f79ed4d580244dfce4f031e3279100fe8", "filename": "src/test/ui/cast/issue-89497.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f5bfa3450a4f115bcddb1296b2e3ec13dbaac945/src%2Ftest%2Fui%2Fcast%2Fissue-89497.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f5bfa3450a4f115bcddb1296b2e3ec13dbaac945/src%2Ftest%2Fui%2Fcast%2Fissue-89497.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-89497.fixed?ref=f5bfa3450a4f115bcddb1296b2e3ec13dbaac945", "patch": "@@ -0,0 +1,10 @@\n+// Regression test for issue #89497.\n+\n+// run-rustfix\n+\n+fn main() {\n+    let pointer: usize = &1_i32 as *const i32 as usize;\n+    let _reference: &'static i32 = unsafe { &*(pointer as *const i32) };\n+    //~^ ERROR: non-primitive cast\n+    //~| HELP: consider borrowing the value\n+}"}, {"sha": "76301b704c81c08b8b81807152d09a98e99c618d", "filename": "src/test/ui/cast/issue-89497.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f5bfa3450a4f115bcddb1296b2e3ec13dbaac945/src%2Ftest%2Fui%2Fcast%2Fissue-89497.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5bfa3450a4f115bcddb1296b2e3ec13dbaac945/src%2Ftest%2Fui%2Fcast%2Fissue-89497.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-89497.rs?ref=f5bfa3450a4f115bcddb1296b2e3ec13dbaac945", "patch": "@@ -0,0 +1,10 @@\n+// Regression test for issue #89497.\n+\n+// run-rustfix\n+\n+fn main() {\n+    let pointer: usize = &1_i32 as *const i32 as usize;\n+    let _reference: &'static i32 = unsafe { pointer as *const i32 as &'static i32 };\n+    //~^ ERROR: non-primitive cast\n+    //~| HELP: consider borrowing the value\n+}"}, {"sha": "3726f8a41015ec540f014fba07e4c24e0bc5e491", "filename": "src/test/ui/cast/issue-89497.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f5bfa3450a4f115bcddb1296b2e3ec13dbaac945/src%2Ftest%2Fui%2Fcast%2Fissue-89497.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5bfa3450a4f115bcddb1296b2e3ec13dbaac945/src%2Ftest%2Fui%2Fcast%2Fissue-89497.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-89497.stderr?ref=f5bfa3450a4f115bcddb1296b2e3ec13dbaac945", "patch": "@@ -0,0 +1,15 @@\n+error[E0605]: non-primitive cast: `*const i32` as `&'static i32`\n+  --> $DIR/issue-89497.rs:7:45\n+   |\n+LL |     let _reference: &'static i32 = unsafe { pointer as *const i32 as &'static i32 };\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n+   |\n+help: consider borrowing the value\n+   |\n+LL -     let _reference: &'static i32 = unsafe { pointer as *const i32 as &'static i32 };\n+LL +     let _reference: &'static i32 = unsafe { &*(pointer as *const i32) };\n+   | \n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0605`."}, {"sha": "d082b6c10cc2a5ffa41360809d104496ebc990be", "filename": "src/test/ui/error-codes/E0605.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f5bfa3450a4f115bcddb1296b2e3ec13dbaac945/src%2Ftest%2Fui%2Ferror-codes%2FE0605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5bfa3450a4f115bcddb1296b2e3ec13dbaac945/src%2Ftest%2Fui%2Ferror-codes%2FE0605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0605.stderr?ref=f5bfa3450a4f115bcddb1296b2e3ec13dbaac945", "patch": "@@ -12,8 +12,9 @@ LL |     v as &u8;\n    |\n help: consider borrowing the value\n    |\n-LL |     &*v as &u8;\n-   |     ++\n+LL -     v as &u8;\n+LL +     &*v;\n+   | \n \n error: aborting due to 2 previous errors\n "}, {"sha": "7616f987d7312803c1813a4e19a03528248c5079", "filename": "src/test/ui/issues/issue-2995.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f5bfa3450a4f115bcddb1296b2e3ec13dbaac945/src%2Ftest%2Fui%2Fissues%2Fissue-2995.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5bfa3450a4f115bcddb1296b2e3ec13dbaac945/src%2Ftest%2Fui%2Fissues%2Fissue-2995.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2995.stderr?ref=f5bfa3450a4f115bcddb1296b2e3ec13dbaac945", "patch": "@@ -6,8 +6,9 @@ LL |     let _q: &isize = p as &isize;\n    |\n help: consider borrowing the value\n    |\n-LL |     let _q: &isize = &*p as &isize;\n-   |                      ++\n+LL -     let _q: &isize = p as &isize;\n+LL +     let _q: &isize = &*p;\n+   | \n \n error: aborting due to previous error\n "}, {"sha": "7f91d5ed42ce4d6c446585c160b6af6ab8871ed1", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f5bfa3450a4f115bcddb1296b2e3ec13dbaac945/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5bfa3450a4f115bcddb1296b2e3ec13dbaac945/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=f5bfa3450a4f115bcddb1296b2e3ec13dbaac945", "patch": "@@ -28,8 +28,9 @@ LL |     let _ = v as &u8;\n    |\n help: consider borrowing the value\n    |\n-LL |     let _ = &*v as &u8;\n-   |             ++\n+LL -     let _ = v as &u8;\n+LL +     let _ = &*v;\n+   | \n \n error[E0605]: non-primitive cast: `*const u8` as `E`\n   --> $DIR/cast-rfc0401.rs:30:13"}]}