{"sha": "2dc65397ee5710c16e077e0ca1e7513c365c10a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYzY1Mzk3ZWU1NzEwYzE2ZTA3N2UwY2ExZTc1MTNjMzY1YzEwYTY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-30T16:47:51Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-15T18:32:10Z"}, "message": "Only store a LocalDefId in hir::Item.\n\nItems are guaranteed to be HIR owner.", "tree": {"sha": "ec33be0479123676a45d5d77725eabeea4d8e128", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec33be0479123676a45d5d77725eabeea4d8e128"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dc65397ee5710c16e077e0ca1e7513c365c10a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dc65397ee5710c16e077e0ca1e7513c365c10a6", "html_url": "https://github.com/rust-lang/rust/commit/2dc65397ee5710c16e077e0ca1e7513c365c10a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dc65397ee5710c16e077e0ca1e7513c365c10a6/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b68fc16edaa0f798368d1a28d78b82f640e24ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b68fc16edaa0f798368d1a28d78b82f640e24ef", "html_url": "https://github.com/rust-lang/rust/commit/5b68fc16edaa0f798368d1a28d78b82f640e24ef"}], "stats": {"total": 97, "additions": 41, "deletions": 56}, "files": [{"sha": "004bce5f62a8f74e4e850a1ecd0ca2d0b51a4f23", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=2dc65397ee5710c16e077e0ca1e7513c365c10a6", "patch": "@@ -38,7 +38,7 @@ impl<'tcx> LateLintPass<'tcx> for CopyIterator {\n             ..\n         }) = item.kind\n         {\n-            let ty = cx.tcx.type_of(cx.tcx.hir().local_def_id(item.hir_id));\n+            let ty = cx.tcx.type_of(item.def_id);\n \n             if is_copy(cx, ty) && match_path(&trait_ref.path, &paths::ITERATOR) {\n                 span_lint_and_note("}, {"sha": "e8510bde9adcd4fb74a505092b99b912236bfdc7", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=2dc65397ee5710c16e077e0ca1e7513c365c10a6", "patch": "@@ -169,7 +169,7 @@ impl<'tcx> LateLintPass<'tcx> for Derive {\n             ..\n         }) = item.kind\n         {\n-            let ty = cx.tcx.type_of(cx.tcx.hir().local_def_id(item.hir_id));\n+            let ty = cx.tcx.type_of(item.def_id);\n             let is_automatically_derived = is_automatically_derived(&*item.attrs);\n \n             check_hash_peq(cx, item.span, trait_ref, ty, is_automatically_derived);"}, {"sha": "c12448588891abbd91e552131f0ab3a6a8f97e27", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=2dc65397ee5710c16e077e0ca1e7513c365c10a6", "patch": "@@ -216,18 +216,17 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n         let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n         match item.kind {\n             hir::ItemKind::Fn(ref sig, _, body_id) => {\n-                if !(is_entrypoint_fn(cx, cx.tcx.hir().local_def_id(item.hir_id).to_def_id())\n+                if !(is_entrypoint_fn(cx, item.def_id.to_def_id())\n                     || in_external_macro(cx.tcx.sess, item.span))\n                 {\n                     let body = cx.tcx.hir().body(body_id);\n-                    let impl_item_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n                     let mut fpu = FindPanicUnwrap {\n                         cx,\n-                        typeck_results: cx.tcx.typeck(impl_item_def_id),\n+                        typeck_results: cx.tcx.typeck(item.def_id),\n                         panic_span: None,\n                     };\n                     fpu.visit_expr(&body.value);\n-                    lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id), fpu.panic_span);\n+                    lint_for_missing_headers(cx, item.hir_id(), item.span, sig, headers, Some(body_id), fpu.panic_span);\n                 }\n             },\n             hir::ItemKind::Impl(ref impl_) => {"}, {"sha": "077c3b75fb8c837508fef72290b42571f59715c1", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=2dc65397ee5710c16e077e0ca1e7513c365c10a6", "patch": "@@ -49,9 +49,8 @@ impl<'tcx> LateLintPass<'tcx> for EmptyEnum {\n             return;\n         }\n \n-        let did = cx.tcx.hir().local_def_id(item.hir_id);\n         if let ItemKind::Enum(..) = item.kind {\n-            let ty = cx.tcx.type_of(did);\n+            let ty = cx.tcx.type_of(item.def_id);\n             let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");\n             if adt.variants.is_empty() {\n                 span_lint_and_help("}, {"sha": "ab9be3398bfa6749e3ab6e25d382776ed849a9dc", "filename": "clippy_lints/src/exhaustive_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=2dc65397ee5710c16e077e0ca1e7513c365c10a6", "patch": "@@ -72,7 +72,7 @@ impl LateLintPass<'_> for ExhaustiveItems {\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n         if_chain! {\n             if let ItemKind::Enum(..) | ItemKind::Struct(..) = item.kind;\n-            if cx.access_levels.is_exported(item.hir_id);\n+            if cx.access_levels.is_exported(item.hir_id());\n             if !item.attrs.iter().any(|a| a.has_name(sym::non_exhaustive));\n             then {\n                 let (lint, msg) = if let ItemKind::Struct(ref v, ..) = item.kind {"}, {"sha": "79828efc206d61c411897b1e23891a86fa8fb022", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=2dc65397ee5710c16e077e0ca1e7513c365c10a6", "patch": "@@ -52,10 +52,9 @@ declare_lint_pass!(FallibleImplFrom => [FALLIBLE_IMPL_FROM]);\n impl<'tcx> LateLintPass<'tcx> for FallibleImplFrom {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n         // check for `impl From<???> for ..`\n-        let impl_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n         if_chain! {\n             if let hir::ItemKind::Impl(impl_) = &item.kind;\n-            if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(impl_def_id);\n+            if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(item.def_id);\n             if cx.tcx.is_diagnostic_item(sym::from_trait, impl_trait_ref.def_id);\n             then {\n                 lint_impl_body(cx, item.span, impl_.items);"}, {"sha": "b644bb079908f821a0a699506aae9cb0ad5d132a", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=2dc65397ee5710c16e077e0ca1e7513c365c10a6", "patch": "@@ -60,10 +60,9 @@ impl LateLintPass<'_> for FromOverInto {\n             return;\n         }\n \n-        let impl_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n         if_chain! {\n             if let hir::ItemKind::Impl{ .. } = &item.kind;\n-            if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(impl_def_id);\n+            if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(item.def_id);\n             if match_def_path(cx, impl_trait_ref.def_id, &INTO);\n \n             then {"}, {"sha": "28d025315cfeb6f0350ef886f8f2d20c46573d04", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=2dc65397ee5710c16e077e0ca1e7513c365c10a6", "patch": "@@ -283,13 +283,13 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n         let attr = must_use_attr(&item.attrs);\n         if let hir::ItemKind::Fn(ref sig, ref _generics, ref body_id) = item.kind {\n-            let is_public = cx.access_levels.is_exported(item.hir_id);\n+            let is_public = cx.access_levels.is_exported(item.hir_id());\n             let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n             if is_public {\n                 check_result_unit_err(cx, &sig.decl, item.span, fn_header_span);\n             }\n             if let Some(attr) = attr {\n-                check_needless_must_use(cx, &sig.decl, item.hir_id, item.span, fn_header_span, attr);\n+                check_needless_must_use(cx, &sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n                 return;\n             }\n             if is_public && !is_proc_macro(cx.sess(), &item.attrs) && attr_by_name(&item.attrs, \"no_mangle\").is_none() {\n@@ -298,7 +298,7 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n                     &sig.decl,\n                     cx.tcx.hir().body(*body_id),\n                     item.span,\n-                    item.hir_id,\n+                    item.hir_id(),\n                     item.span.with_hi(sig.decl.output.span().hi()),\n                     \"this function could have a `#[must_use]` attribute\",\n                 );"}, {"sha": "005c461f105e60a7e3f4582788572d84cd81547b", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=2dc65397ee5710c16e077e0ca1e7513c365c10a6", "patch": "@@ -59,20 +59,15 @@ impl<'tcx> LateLintPass<'tcx> for MultipleInherentImpl {\n             // but filter out implementations that have generic params (type or lifetime)\n             // or are derived from a macro\n             if !in_macro(item.span) && generics.params.is_empty() {\n-                self.impls.insert(item.hir_id.owner.to_def_id(), item.span);\n+                self.impls.insert(item.def_id.to_def_id(), item.span);\n             }\n         }\n     }\n \n     fn check_crate_post(&mut self, cx: &LateContext<'tcx>, krate: &'tcx Crate<'_>) {\n-        if let Some(item) = krate.items.values().next() {\n+        if !krate.items.is_empty() {\n             // Retrieve all inherent implementations from the crate, grouped by type\n-            for impls in cx\n-                .tcx\n-                .crate_inherent_impls(item.hir_id.owner.to_def_id().krate)\n-                .inherent_impls\n-                .values()\n-            {\n+            for impls in cx.tcx.crate_inherent_impls(def_id::LOCAL_CRATE).inherent_impls.values() {\n                 // Filter out implementations that have generic params (type or lifetime)\n                 let mut impl_spans = impls.iter().filter_map(|impl_def| self.impls.get(impl_def));\n                 if let Some(initial_span) = impl_spans.next() {"}, {"sha": "ab4cb33612d380f0cddb11b0d1b5eec75bf4c253", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=2dc65397ee5710c16e077e0ca1e7513c365c10a6", "patch": "@@ -62,9 +62,8 @@ impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n         if in_external_macro(cx.tcx.sess, item.span) {\n             return;\n         }\n-        let did = cx.tcx.hir().local_def_id(item.hir_id);\n         if let ItemKind::Enum(ref def, _) = item.kind {\n-            let ty = cx.tcx.type_of(did);\n+            let ty = cx.tcx.type_of(item.def_id);\n             let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");\n \n             let mut largest_variant: Option<(_, _)> = None;"}, {"sha": "8706cf7f02b928e67e4d5988e5a10de2234575af", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=2dc65397ee5710c16e077e0ca1e7513c365c10a6", "patch": "@@ -177,10 +177,9 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n         }\n     }\n \n-    if cx.access_levels.is_exported(visited_trait.hir_id) && trait_items.iter().any(|i| is_named_self(cx, i, \"len\")) {\n+    if cx.access_levels.is_exported(visited_trait.hir_id()) && trait_items.iter().any(|i| is_named_self(cx, i, \"len\")) {\n         let mut current_and_super_traits = FxHashSet::default();\n-        let visited_trait_def_id = cx.tcx.hir().local_def_id(visited_trait.hir_id);\n-        fill_trait_set(visited_trait_def_id.to_def_id(), &mut current_and_super_traits, cx);\n+        fill_trait_set(visited_trait.def_id.to_def_id(), &mut current_and_super_traits, cx);\n \n         let is_empty_method_found = current_and_super_traits\n             .iter()\n@@ -230,8 +229,7 @@ fn check_impl_items(cx: &LateContext<'_>, item: &Item<'_>, impl_items: &[ImplIte\n \n     if let Some(i) = impl_items.iter().find(|i| is_named_self(cx, i, \"len\")) {\n         if cx.access_levels.is_exported(i.id.hir_id) {\n-            let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n-            let ty = cx.tcx.type_of(def_id);\n+            let ty = cx.tcx.type_of(item.def_id);\n \n             span_lint(\n                 cx,"}, {"sha": "a2104b48b4ffdf69241b37635a4cd5584fe63a82", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=2dc65397ee5710c16e077e0ca1e7513c365c10a6", "patch": "@@ -1687,8 +1687,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         let name = impl_item.ident.name.as_str();\n         let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id);\n         let item = cx.tcx.hir().expect_item(parent);\n-        let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n-        let self_ty = cx.tcx.type_of(def_id);\n+        let self_ty = cx.tcx.type_of(item.def_id);\n \n         // if this impl block implements a trait, lint in trait definition instead\n         if let hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = item.kind {"}, {"sha": "21b59fba995fc322848752a8898fec9aeb142a96", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=2dc65397ee5710c16e077e0ca1e7513c365c10a6", "patch": "@@ -135,8 +135,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n             hir::ItemKind::Fn(..) => {\n                 // ignore main()\n                 if it.ident.name == sym::main {\n-                    let def_id = it.hir_id.owner;\n-                    let def_key = cx.tcx.hir().def_key(def_id);\n+                    let def_key = cx.tcx.hir().def_key(it.def_id);\n                     if def_key.parent == Some(hir::def_id::CRATE_DEF_INDEX) {\n                         return;\n                     }\n@@ -159,8 +158,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n             | hir::ItemKind::Use(..) => return,\n         };\n \n-        let def_id = cx.tcx.hir().local_def_id(it.hir_id);\n-        let (article, desc) = cx.tcx.article_and_description(def_id.to_def_id());\n+        let (article, desc) = cx.tcx.article_and_description(it.def_id.to_def_id());\n \n         self.check_missing_docs_attrs(cx, &it.attrs, it.span, article, desc);\n     }"}, {"sha": "5132bed590a0c734e2351c398c323ebf579625a2", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=2dc65397ee5710c16e077e0ca1e7513c365c10a6", "patch": "@@ -87,7 +87,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n             return;\n         }\n \n-        if !cx.access_levels.is_exported(it.hir_id) {\n+        if !cx.access_levels.is_exported(it.hir_id()) {\n             return;\n         }\n         match it.kind {"}, {"sha": "7b9205a99de1bb20c3014866fc504312161a4d00", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=2dc65397ee5710c16e077e0ca1e7513c365c10a6", "patch": "@@ -57,7 +57,7 @@ declare_lint_pass!(MutableKeyType => [ MUTABLE_KEY_TYPE ]);\n impl<'tcx> LateLintPass<'tcx> for MutableKeyType {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'tcx>) {\n         if let hir::ItemKind::Fn(ref sig, ..) = item.kind {\n-            check_sig(cx, item.hir_id, &sig.decl);\n+            check_sig(cx, item.hir_id(), &sig.decl);\n         }\n     }\n "}, {"sha": "1453ea6e8975da8856806e7f819f2748c8fc516c", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=2dc65397ee5710c16e077e0ca1e7513c365c10a6", "patch": "@@ -5,11 +5,12 @@\n use crate::utils::{is_automatically_derived, snippet_opt, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{BindingAnnotation, BorrowKind, Expr, ExprKind, HirId, Item, Mutability, Pat, PatKind};\n+use rustc_hir::{BindingAnnotation, BorrowKind, Expr, ExprKind, Item, Mutability, Pat, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::LocalDefId;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for address of operations (`&`) that are going to\n@@ -35,7 +36,7 @@ declare_clippy_lint! {\n \n #[derive(Default)]\n pub struct NeedlessBorrow {\n-    derived_item: Option<HirId>,\n+    derived_item: Option<LocalDefId>,\n }\n \n impl_lint_pass!(NeedlessBorrow => [NEEDLESS_BORROW]);\n@@ -117,13 +118,13 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBorrow {\n     fn check_item(&mut self, _: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if is_automatically_derived(item.attrs) {\n             debug_assert!(self.derived_item.is_none());\n-            self.derived_item = Some(item.hir_id);\n+            self.derived_item = Some(item.def_id);\n         }\n     }\n \n     fn check_item_post(&mut self, _: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if let Some(id) = self.derived_item {\n-            if item.hir_id == id {\n+            if item.def_id == id {\n                 self.derived_item = None;\n             }\n         }"}, {"sha": "9efeac3d82383ad71d7c2b3f090e202e7996ead0", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=2dc65397ee5710c16e077e0ca1e7513c365c10a6", "patch": "@@ -124,7 +124,7 @@ declare_lint_pass!(Ptr => [PTR_ARG, CMP_NULL, MUT_FROM_REF]);\n impl<'tcx> LateLintPass<'tcx> for Ptr {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if let ItemKind::Fn(ref sig, _, body_id) = item.kind {\n-            check_fn(cx, &sig.decl, item.hir_id, Some(body_id));\n+            check_fn(cx, &sig.decl, item.hir_id(), Some(body_id));\n         }\n     }\n "}, {"sha": "c876bae2303ad29f0252d0ec425d1b9ca17374c7", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=2dc65397ee5710c16e077e0ca1e7513c365c10a6", "patch": "@@ -42,11 +42,10 @@ impl_lint_pass!(RedundantPubCrate => [REDUNDANT_PUB_CRATE]);\n impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         if let VisibilityKind::Crate { .. } = item.vis.node {\n-            if !cx.access_levels.is_exported(item.hir_id) {\n+            if !cx.access_levels.is_exported(item.hir_id()) {\n                 if let Some(false) = self.is_exported.last() {\n                     let span = item.span.with_hi(item.ident.span.hi());\n-                    let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n-                    let descr = cx.tcx.def_kind(def_id).descr(def_id.to_def_id());\n+                    let descr = cx.tcx.def_kind(item.def_id).descr(item.def_id.to_def_id());\n                     span_lint_and_then(\n                         cx,\n                         REDUNDANT_PUB_CRATE,\n@@ -66,7 +65,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n         }\n \n         if let ItemKind::Mod { .. } = item.kind {\n-            self.is_exported.push(cx.access_levels.is_exported(item.hir_id));\n+            self.is_exported.push(cx.access_levels.is_exported(item.hir_id()));\n         }\n     }\n "}, {"sha": "05754503163bd275b57ec3989f38dc5d8688f84c", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=2dc65397ee5710c16e077e0ca1e7513c365c10a6", "patch": "@@ -1106,7 +1106,9 @@ fn is_empty_block(expr: &Expr<'_>) -> bool {\n         expr.kind,\n         ExprKind::Block(\n             Block {\n-                stmts: &[], expr: None, ..\n+                stmts: &[],\n+                expr: None,\n+                ..\n             },\n             _,\n         )\n@@ -2565,7 +2567,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n             }\n         }\n \n-        if !cx.access_levels.is_exported(item.hir_id) {\n+        if !cx.access_levels.is_exported(item.hir_id()) {\n             return;\n         }\n "}, {"sha": "f2ff8c959c2e6405691664bd6c32662d81cfe74e", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=2dc65397ee5710c16e077e0ca1e7513c365c10a6", "patch": "@@ -196,8 +196,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                         item_path,\n                         cx,\n                     };\n-                    let impl_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n-                    let impl_trait_ref = cx.tcx.impl_trait_ref(impl_def_id);\n+                    let impl_trait_ref = cx.tcx.impl_trait_ref(item.def_id);\n \n                     if let Some(impl_trait_ref) = impl_trait_ref {\n                         for impl_item_ref in impl_.items {"}, {"sha": "9c1d98cd707453a3b7a82486ff4cbe0939dfe1d9", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=2dc65397ee5710c16e077e0ca1e7513c365c10a6", "patch": "@@ -370,7 +370,7 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n }\n \n fn print_item(cx: &LateContext<'_>, item: &hir::Item<'_>) {\n-    let did = cx.tcx.hir().local_def_id(item.hir_id);\n+    let did = item.def_id;\n     println!(\"item `{}`\", item.ident.name);\n     match item.vis.node {\n         hir::VisibilityKind::Public => println!(\"public\"),\n@@ -383,8 +383,7 @@ fn print_item(cx: &LateContext<'_>, item: &hir::Item<'_>) {\n     }\n     match item.kind {\n         hir::ItemKind::ExternCrate(ref _renamed_from) => {\n-            let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n-            if let Some(crate_id) = cx.tcx.extern_mod_stmt_cnum(def_id) {\n+            if let Some(crate_id) = cx.tcx.extern_mod_stmt_cnum(did) {\n                 let source = cx.tcx.used_crate_source(crate_id);\n                 if let Some(ref src) = source.dylib {\n                     println!(\"extern crate dylib source: {:?}\", src.0);"}, {"sha": "094b1a42346c23ff64444c560e087d1586fd16a3", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc65397ee5710c16e077e0ca1e7513c365c10a6/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=2dc65397ee5710c16e077e0ca1e7513c365c10a6", "patch": "@@ -113,7 +113,7 @@ impl LateLintPass<'_> for WildcardImports {\n         if_chain! {\n             if let ItemKind::Use(use_path, UseKind::Glob) = &item.kind;\n             if self.warn_on_all || !self.check_exceptions(item, use_path.segments);\n-            let used_imports = cx.tcx.names_imported_by_glob_use(item.hir_id.owner);\n+            let used_imports = cx.tcx.names_imported_by_glob_use(item.def_id);\n             if !used_imports.is_empty(); // Already handled by `unused_imports`\n             then {\n                 let mut applicability = Applicability::MachineApplicable;"}]}