{"sha": "20328b532336017213ccb4095740955d81060ebc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMzI4YjUzMjMzNjAxNzIxM2NjYjQwOTU3NDA5NTVkODEwNjBlYmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-22T08:30:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-22T08:30:23Z"}, "message": "Auto merge of #79275 - integer32llc:doc-style, r=jonas-schievink\n\nMore consistently use spaces after commas in lists in docs\n\nThis PR changes instances of lists that didn't use spaces after commas, like `vec![1,2,3]`, to `vec![1, 2, 3]` to be more consistent with idiomatic Rust style (the way these were looks strange to me, especially because there are often lists that *do* use spaces after the commas later in the same code block \ud83d\ude2c).\n\nI noticed one of these in an example in the stdlib docs and went looking for more, but as far as I can see, I'm only changing those spots in user-facing documentation or rustc output, and the changes make no semantic difference.", "tree": {"sha": "fe55c65dae0b7aa9fa65c6bb6ef3d8e9f926bdd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe55c65dae0b7aa9fa65c6bb6ef3d8e9f926bdd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20328b532336017213ccb4095740955d81060ebc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20328b532336017213ccb4095740955d81060ebc", "html_url": "https://github.com/rust-lang/rust/commit/20328b532336017213ccb4095740955d81060ebc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20328b532336017213ccb4095740955d81060ebc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ca930aa262c04a898cf64155e40a6de3ec9ba9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ca930aa262c04a898cf64155e40a6de3ec9ba9e", "html_url": "https://github.com/rust-lang/rust/commit/8ca930aa262c04a898cf64155e40a6de3ec9ba9e"}, {"sha": "ae17d7d455842576f4a4bdb6759be9df9a859635", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae17d7d455842576f4a4bdb6759be9df9a859635", "html_url": "https://github.com/rust-lang/rust/commit/ae17d7d455842576f4a4bdb6759be9df9a859635"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "2a5ad5e6c98a6a10bfb9119fc077bd41817b8f3b", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20328b532336017213ccb4095740955d81060ebc/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20328b532336017213ccb4095740955d81060ebc/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=20328b532336017213ccb4095740955d81060ebc", "patch": "@@ -1152,7 +1152,7 @@ declare_lint! {\n     /// ```rust\n     /// #![feature(box_syntax)]\n     /// fn main() {\n-    ///     let a = (box [1,2,3]).len();\n+    ///     let a = (box [1, 2, 3]).len();\n     /// }\n     /// ```\n     ///"}, {"sha": "fa82dce0ae2ed48ce3401bd16ce1df6c3c0a2619", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20328b532336017213ccb4095740955d81060ebc/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20328b532336017213ccb4095740955d81060ebc/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=20328b532336017213ccb4095740955d81060ebc", "patch": "@@ -1719,7 +1719,7 @@ declare_lint! {\n     ///\n     /// impl<T: ?Sized> MyIterator for T where T: Iterator { }\n     ///\n-    /// let x = vec![1,2,3];\n+    /// let x = vec![1, 2, 3];\n     /// let _ = x.iter().is_sorted();\n     /// ```\n     ///"}, {"sha": "a9e416875905c7e89f638bf786b65c297697e3cd", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20328b532336017213ccb4095740955d81060ebc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20328b532336017213ccb4095740955d81060ebc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=20328b532336017213ccb4095740955d81060ebc", "patch": "@@ -1037,7 +1037,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// let mut count: BTreeMap<&str, usize> = BTreeMap::new();\n     ///\n     /// // count the number of occurrences of letters in the vec\n-    /// for x in vec![\"a\",\"b\",\"a\",\"c\",\"a\",\"b\"] {\n+    /// for x in vec![\"a\", \"b\", \"a\", \"c\", \"a\", \"b\"] {\n     ///     *count.entry(x).or_insert(0) += 1;\n     /// }\n     ///"}, {"sha": "85c809e0d188d7dfacfd9573eafe9f9ca8db3fa8", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/20328b532336017213ccb4095740955d81060ebc/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20328b532336017213ccb4095740955d81060ebc/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=20328b532336017213ccb4095740955d81060ebc", "patch": "@@ -1962,7 +1962,7 @@ impl<T> VecDeque<T> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut buf: VecDeque<_> = vec![1,2,3].into_iter().collect();\n+    /// let mut buf: VecDeque<_> = vec![1, 2, 3].into_iter().collect();\n     /// let buf2 = buf.split_off(1);\n     /// assert_eq!(buf, [1]);\n     /// assert_eq!(buf2, [2, 3]);\n@@ -2514,10 +2514,10 @@ impl<T> VecDeque<T> {\n     ///          (3, 1), (1, 2), (2, 3), (4, 5), (5, 8), (3, 13),\n     ///          (1, 21), (2, 34), (4, 55)].into();\n     ///\n-    /// assert_eq!(deque.binary_search_by_key(&13, |&(a,b)| b),  Ok(9));\n-    /// assert_eq!(deque.binary_search_by_key(&4, |&(a,b)| b),   Err(7));\n-    /// assert_eq!(deque.binary_search_by_key(&100, |&(a,b)| b), Err(13));\n-    /// let r = deque.binary_search_by_key(&1, |&(a,b)| b);\n+    /// assert_eq!(deque.binary_search_by_key(&13, |&(a, b)| b),  Ok(9));\n+    /// assert_eq!(deque.binary_search_by_key(&4, |&(a, b)| b),   Err(7));\n+    /// assert_eq!(deque.binary_search_by_key(&100, |&(a, b)| b), Err(13));\n+    /// let r = deque.binary_search_by_key(&1, |&(a, b)| b);\n     /// assert!(matches!(r, Ok(1..=4)));\n     /// ```\n     #[unstable(feature = \"vecdeque_binary_search\", issue = \"78021\")]"}, {"sha": "2225bf63e3cdc863853c7f9b37841593bedf330d", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20328b532336017213ccb4095740955d81060ebc/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20328b532336017213ccb4095740955d81060ebc/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=20328b532336017213ccb4095740955d81060ebc", "patch": "@@ -1041,7 +1041,7 @@ impl<T, A: AllocRef> Vec<T, A> {\n     ///     }\n     ///     x.set_len(size);\n     /// }\n-    /// assert_eq!(&*x, &[0,1,2,3]);\n+    /// assert_eq!(&*x, &[0, 1, 2, 3]);\n     /// ```\n     #[stable(feature = \"vec_as_ptr\", since = \"1.37.0\")]\n     #[inline]\n@@ -1594,7 +1594,7 @@ impl<T, A: AllocRef> Vec<T, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// let mut vec = vec![1,2,3];\n+    /// let mut vec = vec![1, 2, 3];\n     /// let vec2 = vec.split_off(1);\n     /// assert_eq!(vec, [1]);\n     /// assert_eq!(vec2, [2, 3]);"}, {"sha": "94ac16954a730198df475aa9ed54e852e6696946", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20328b532336017213ccb4095740955d81060ebc/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20328b532336017213ccb4095740955d81060ebc/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=20328b532336017213ccb4095740955d81060ebc", "patch": "@@ -392,7 +392,7 @@ impl<T> MaybeUninit<T> {\n     /// use std::mem::MaybeUninit;\n     ///\n     /// let mut x = MaybeUninit::<Vec<u32>>::uninit();\n-    /// unsafe { x.as_mut_ptr().write(vec![0,1,2]); }\n+    /// unsafe { x.as_mut_ptr().write(vec![0, 1, 2]); }\n     /// // Create a reference into the `MaybeUninit<T>`. This is okay because we initialized it.\n     /// let x_vec = unsafe { &*x.as_ptr() };\n     /// assert_eq!(x_vec.len(), 3);\n@@ -429,7 +429,7 @@ impl<T> MaybeUninit<T> {\n     /// use std::mem::MaybeUninit;\n     ///\n     /// let mut x = MaybeUninit::<Vec<u32>>::uninit();\n-    /// unsafe { x.as_mut_ptr().write(vec![0,1,2]); }\n+    /// unsafe { x.as_mut_ptr().write(vec![0, 1, 2]); }\n     /// // Create a reference into the `MaybeUninit<Vec<u32>>`.\n     /// // This is okay because we initialized it.\n     /// let x_vec = unsafe { &mut *x.as_mut_ptr() };\n@@ -565,7 +565,7 @@ impl<T> MaybeUninit<T> {\n     /// use std::mem::MaybeUninit;\n     ///\n     /// let mut x = MaybeUninit::<Option<Vec<u32>>>::uninit();\n-    /// x.write(Some(vec![0,1,2]));\n+    /// x.write(Some(vec![0, 1, 2]));\n     /// let x1 = unsafe { x.assume_init_read() };\n     /// let x2 = unsafe { x.assume_init_read() };\n     /// // We now created two copies of the same vector, leading to a double-free \u26a0\ufe0f when"}, {"sha": "a8dea4e9b4ea8f631c39ce79430183c98e6238ea", "filename": "library/core/src/ops/index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20328b532336017213ccb4095740955d81060ebc/library%2Fcore%2Fsrc%2Fops%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20328b532336017213ccb4095740955d81060ebc/library%2Fcore%2Fsrc%2Fops%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Findex.rs?ref=20328b532336017213ccb4095740955d81060ebc", "patch": "@@ -79,7 +79,7 @@ pub trait Index<Idx: ?Sized> {\n /// each can be indexed mutably and immutably.\n ///\n /// ```\n-/// use std::ops::{Index,IndexMut};\n+/// use std::ops::{Index, IndexMut};\n ///\n /// #[derive(Debug)]\n /// enum Side {"}, {"sha": "107563840d0f5b5c7a29f586227daa3d0c007ce9", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20328b532336017213ccb4095740955d81060ebc/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20328b532336017213ccb4095740955d81060ebc/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=20328b532336017213ccb4095740955d81060ebc", "patch": "@@ -1958,10 +1958,10 @@ impl<T> [T] {\n     ///          (1, 2), (2, 3), (4, 5), (5, 8), (3, 13),\n     ///          (1, 21), (2, 34), (4, 55)];\n     ///\n-    /// assert_eq!(s.binary_search_by_key(&13, |&(a,b)| b),  Ok(9));\n-    /// assert_eq!(s.binary_search_by_key(&4, |&(a,b)| b),   Err(7));\n-    /// assert_eq!(s.binary_search_by_key(&100, |&(a,b)| b), Err(13));\n-    /// let r = s.binary_search_by_key(&1, |&(a,b)| b);\n+    /// assert_eq!(s.binary_search_by_key(&13, |&(a, b)| b),  Ok(9));\n+    /// assert_eq!(s.binary_search_by_key(&4, |&(a, b)| b),   Err(7));\n+    /// assert_eq!(s.binary_search_by_key(&100, |&(a, b)| b), Err(13));\n+    /// let r = s.binary_search_by_key(&1, |&(a, b)| b);\n     /// assert!(match r { Ok(1..=4) => true, _ => false, });\n     /// ```\n     #[stable(feature = \"slice_binary_search_by_key\", since = \"1.10.0\")]"}]}