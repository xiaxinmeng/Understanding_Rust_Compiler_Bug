{"sha": "410996893489f6c64b472e6128f099f1de229806", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMDk5Njg5MzQ4OWY2YzY0YjQ3MmU2MTI4ZjA5OWYxZGUyMjk4MDY=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-16T19:24:54Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-16T19:24:54Z"}, "message": "Remove query aliases", "tree": {"sha": "bf0883d1d5a80ac12a562cf289a2bd745fe46211", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf0883d1d5a80ac12a562cf289a2bd745fe46211"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/410996893489f6c64b472e6128f099f1de229806", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/410996893489f6c64b472e6128f099f1de229806", "html_url": "https://github.com/rust-lang/rust/commit/410996893489f6c64b472e6128f099f1de229806", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/410996893489f6c64b472e6128f099f1de229806/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d776c67226fe12e75fc526966cba06358c2b8113", "url": "https://api.github.com/repos/rust-lang/rust/commits/d776c67226fe12e75fc526966cba06358c2b8113", "html_url": "https://github.com/rust-lang/rust/commit/d776c67226fe12e75fc526966cba06358c2b8113"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "4f8ec1e6756c756d40a076d93c2dcd716993c79e", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/410996893489f6c64b472e6128f099f1de229806/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410996893489f6c64b472e6128f099f1de229806/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=410996893489f6c64b472e6128f099f1de229806", "patch": "@@ -72,7 +72,7 @@ fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext, ty: &T\n }\n \n fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n-    let _p = profile::span(\"fuzzy_completion\u00ae\");\n+    let _p = profile::span(\"fuzzy_completion\");\n     let current_module = ctx.scope.module()?;\n     let anchor = ctx.name_ref_syntax.as_ref()?;\n     let import_scope = ImportScope::find_insert_use_container(anchor.syntax(), &ctx.sema)?;"}, {"sha": "5fea25ef1b710b7e732e0a0c99196757fbc29e92", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/410996893489f6c64b472e6128f099f1de229806/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410996893489f6c64b472e6128f099f1de229806/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=410996893489f6c64b472e6128f099f1de229806", "patch": "@@ -49,7 +49,7 @@ pub use hir_def::{\n     builtin_type::BuiltinType,\n     docs::Documentation,\n     find_path::PrefixKind,\n-    import_map::Query as ExternalImportablesQuery,\n+    import_map,\n     item_scope::ItemInNs,\n     nameres::ModuleSource,\n     path::{ModPath, PathKind},"}, {"sha": "9d8ea7368d3a5141ae14dff7d03f18b45917e3a7", "filename": "crates/ide_db/src/imports_locator.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/410996893489f6c64b472e6128f099f1de229806/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410996893489f6c64b472e6128f099f1de229806/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports_locator.rs?ref=410996893489f6c64b472e6128f099f1de229806", "patch": "@@ -1,12 +1,12 @@\n //! This module contains an import search funcionality that is provided to the assists module.\n //! Later, this should be moved away to a separate crate that is accessible from the assists module.\n \n-use hir::{Crate, ExternalImportablesQuery, MacroDef, ModuleDef, Semantics};\n+use hir::{import_map, Crate, MacroDef, ModuleDef, Semantics};\n use syntax::{ast, AstNode, SyntaxKind::NAME};\n \n use crate::{\n     defs::{Definition, NameClass},\n-    symbol_index::{self, FileSymbol, Query as LocalImportablesQuery},\n+    symbol_index::{self, FileSymbol},\n     RootDatabase,\n };\n use either::Either;\n@@ -22,12 +22,12 @@ pub fn find_exact_imports<'a>(\n         sema,\n         krate,\n         {\n-            let mut local_query = LocalImportablesQuery::new(name_to_import.to_string());\n+            let mut local_query = symbol_index::Query::new(name_to_import.to_string());\n             local_query.exact();\n             local_query.limit(40);\n             local_query\n         },\n-        ExternalImportablesQuery::new(name_to_import).anchor_end().case_sensitive().limit(40),\n+        import_map::Query::new(name_to_import).anchor_end().case_sensitive().limit(40),\n     )\n }\n \n@@ -42,19 +42,19 @@ pub fn find_similar_imports<'a>(\n         sema,\n         krate,\n         {\n-            let mut local_query = LocalImportablesQuery::new(name_to_import.to_string());\n+            let mut local_query = symbol_index::Query::new(name_to_import.to_string());\n             local_query.limit(limit);\n             local_query\n         },\n-        ExternalImportablesQuery::new(name_to_import).limit(limit),\n+        import_map::Query::new(name_to_import).limit(limit),\n     )\n }\n \n fn find_imports<'a>(\n     sema: &Semantics<'a, RootDatabase>,\n     krate: Crate,\n-    local_query: LocalImportablesQuery,\n-    external_query: ExternalImportablesQuery,\n+    local_query: symbol_index::Query,\n+    external_query: import_map::Query,\n ) -> impl Iterator<Item = Either<ModuleDef, MacroDef>> {\n     let _p = profile::span(\"find_similar_imports\");\n     let db = sema.db;"}]}