{"sha": "8a25ec019ed033436cfd2835b19b80914297936f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMjVlYzAxOWVkMDMzNDM2Y2ZkMjgzNWIxOWI4MDkxNDI5NzkzNmY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-09-24T12:01:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-24T12:01:49Z"}, "message": "Rollup merge of #44103 - zackmdavis:cmp_op_must_use, r=arielb1\n\nadd comparison operators to must-use lint (under `fn_must_use` feature)\n\nAlthough RFC 1940 is about annotating functions with `#[must_use]`, a\nkey part of the motivation was linting unused equality operators.\n\n(See\nhttps://github.com/rust-lang/rfcs/pull/1812#issuecomment-265695898\u2014it\nseems to have not been clear to discussants at the time that marking the\ncomparison methods as `must_use` would not give us the lints on\ncomparison operators, at least in (what the present author understood\nas) the most straightforward implementation, as landed in #43728\n(3645b062).)\n\nTo rectify the situation, we here lint unused comparison operators as\npart of the unused-must-use lint (feature gated by the `fn_must_use`\nfeature flag, which now arguably becomes a slight (tolerable in the\nopinion of the present author) misnomer).\n\nThis is in the matter of #43302.\n\ncc @crumblingstatue", "tree": {"sha": "a31529e2e511a7d582ed098fd85cae47c6602ddf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a31529e2e511a7d582ed098fd85cae47c6602ddf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a25ec019ed033436cfd2835b19b80914297936f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a25ec019ed033436cfd2835b19b80914297936f", "html_url": "https://github.com/rust-lang/rust/commit/8a25ec019ed033436cfd2835b19b80914297936f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a25ec019ed033436cfd2835b19b80914297936f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f9078745e882b3cdedf058479d9d6d936c6750c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f9078745e882b3cdedf058479d9d6d936c6750c", "html_url": "https://github.com/rust-lang/rust/commit/6f9078745e882b3cdedf058479d9d6d936c6750c"}, {"sha": "6734d39b49dd00fe5ba1ea875a3e03f9eca23ac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6734d39b49dd00fe5ba1ea875a3e03f9eca23ac0", "html_url": "https://github.com/rust-lang/rust/commit/6734d39b49dd00fe5ba1ea875a3e03f9eca23ac0"}], "stats": {"total": 64, "additions": 52, "deletions": 12}, "files": [{"sha": "b97920dd18b77a1caccc3a9f2256c23393298573", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a25ec019ed033436cfd2835b19b80914297936f/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a25ec019ed033436cfd2835b19b80914297936f/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=8a25ec019ed033436cfd2835b19b80914297936f", "patch": "@@ -153,6 +153,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         };\n \n         let mut fn_warned = false;\n+        let mut op_warned = false;\n         if cx.tcx.sess.features.borrow().fn_must_use {\n             let maybe_def = match expr.node {\n                 hir::ExprCall(ref callee, _) => {\n@@ -172,9 +173,24 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                 let def_id = def.def_id();\n                 fn_warned = check_must_use(cx, def_id, s.span, \"return value of \");\n             }\n+\n+            if let hir::ExprBinary(bin_op, ..) = expr.node {\n+                match bin_op.node {\n+                    // Hardcoding the comparison operators here seemed more\n+                    // expedient than the refactoring that would be needed to\n+                    // look up the `#[must_use]` attribute which does exist on\n+                    // the comparison trait methods\n+                    hir::BiEq | hir::BiLt | hir::BiLe | hir::BiNe | hir::BiGe | hir::BiGt => {\n+                        let msg = \"unused comparison which must be used\";\n+                        cx.span_lint(UNUSED_MUST_USE, expr.span, msg);\n+                        op_warned = true;\n+                    },\n+                    _ => {},\n+                }\n+            }\n         }\n \n-        if !(ty_warned || fn_warned) {\n+        if !(ty_warned || fn_warned || op_warned) {\n             cx.span_lint(UNUSED_RESULTS, s.span, \"unused result\");\n         }\n "}, {"sha": "5c730aaa8d0fa0df92fae453addf2d7097433b06", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a25ec019ed033436cfd2835b19b80914297936f/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a25ec019ed033436cfd2835b19b80914297936f/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=8a25ec019ed033436cfd2835b19b80914297936f", "patch": "@@ -380,7 +380,7 @@ declare_features! (\n     // #[doc(masked)]\n     (active, doc_masked, \"1.21.0\", None),\n \n-    // allow `#[must_use]` on functions (RFC 1940)\n+    // allow `#[must_use]` on functions and comparison operators (RFC 1940)\n     (active, fn_must_use, \"1.21.0\", Some(43302)),\n \n     // allow '|' at beginning of match arms (RFC 1925)"}, {"sha": "3741ba4f3ae7a3a97dd02600f4935093d4ae3f31", "filename": "src/test/ui/rfc_1940-must_use_on_functions/fn_must_use.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a25ec019ed033436cfd2835b19b80914297936f/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a25ec019ed033436cfd2835b19b80914297936f/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.rs?ref=8a25ec019ed033436cfd2835b19b80914297936f", "patch": "@@ -11,6 +11,7 @@\n #![feature(fn_must_use)]\n #![warn(unused_must_use)]\n \n+#[derive(PartialEq, Eq)]\n struct MyStruct {\n     n: usize,\n }\n@@ -58,13 +59,18 @@ fn main() {\n     need_to_use_this_value();\n \n     let mut m = MyStruct { n: 2 };\n+    let n = MyStruct { n: 3 };\n+\n     m.need_to_use_this_method_value();\n     m.is_even(); // trait method!\n \n-    m.replace(3);\n+    m.replace(3); // won't warn (annotation needs to be in trait definition)\n \n+    // comparison methods are `must_use`\n     2.eq(&3);\n+    m.eq(&n);\n \n-    // FIXME: operators should probably be `must_use` if underlying method is\n+    // lint includes comparison operators\n     2 == 3;\n+    m == n;\n }"}, {"sha": "fdd0a591bc78da13b4c6c6a94014e4756911ec2d", "filename": "src/test/ui/rfc_1940-must_use_on_functions/fn_must_use.stderr", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8a25ec019ed033436cfd2835b19b80914297936f/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a25ec019ed033436cfd2835b19b80914297936f/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.stderr?ref=8a25ec019ed033436cfd2835b19b80914297936f", "patch": "@@ -1,7 +1,7 @@\n warning: unused return value of `need_to_use_this_value` which must be used: it's important\n-  --> $DIR/fn_must_use.rs:58:5\n+  --> $DIR/fn_must_use.rs:59:5\n    |\n-58 |     need_to_use_this_value();\n+59 |     need_to_use_this_value();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n@@ -11,20 +11,38 @@ note: lint level defined here\n    |         ^^^^^^^^^^^^^^^\n \n warning: unused return value of `MyStruct::need_to_use_this_method_value` which must be used\n-  --> $DIR/fn_must_use.rs:61:5\n+  --> $DIR/fn_must_use.rs:64:5\n    |\n-61 |     m.need_to_use_this_method_value();\n+64 |     m.need_to_use_this_method_value();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused return value of `EvenNature::is_even` which must be used: no side effects\n-  --> $DIR/fn_must_use.rs:62:5\n+  --> $DIR/fn_must_use.rs:65:5\n    |\n-62 |     m.is_even(); // trait method!\n+65 |     m.is_even(); // trait method!\n    |     ^^^^^^^^^^^^\n \n warning: unused return value of `std::cmp::PartialEq::eq` which must be used\n-  --> $DIR/fn_must_use.rs:66:5\n+  --> $DIR/fn_must_use.rs:70:5\n    |\n-66 |     2.eq(&3);\n+70 |     2.eq(&3);\n    |     ^^^^^^^^^\n \n+warning: unused return value of `std::cmp::PartialEq::eq` which must be used\n+  --> $DIR/fn_must_use.rs:71:5\n+   |\n+71 |     m.eq(&n);\n+   |     ^^^^^^^^^\n+\n+warning: unused comparison which must be used\n+  --> $DIR/fn_must_use.rs:74:5\n+   |\n+74 |     2 == 3;\n+   |     ^^^^^^\n+\n+warning: unused comparison which must be used\n+  --> $DIR/fn_must_use.rs:75:5\n+   |\n+75 |     m == n;\n+   |     ^^^^^^\n+"}]}