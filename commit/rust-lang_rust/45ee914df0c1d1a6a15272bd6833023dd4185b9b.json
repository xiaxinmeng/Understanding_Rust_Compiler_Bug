{"sha": "45ee914df0c1d1a6a15272bd6833023dd4185b9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZWU5MTRkZjBjMWQxYTZhMTUyNzJiZDY4MzMwMjNkZDQxODViOWI=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-02T16:09:33Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-11T10:37:16Z"}, "message": "move iter_cloned_collect to its own module", "tree": {"sha": "eaccf675f0e2ab08ca65099f00ceb9d63f0572ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eaccf675f0e2ab08ca65099f00ceb9d63f0572ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45ee914df0c1d1a6a15272bd6833023dd4185b9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45ee914df0c1d1a6a15272bd6833023dd4185b9b", "html_url": "https://github.com/rust-lang/rust/commit/45ee914df0c1d1a6a15272bd6833023dd4185b9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45ee914df0c1d1a6a15272bd6833023dd4185b9b/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35147d4cf342ee479d50afcb70aceab4ea506c2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/35147d4cf342ee479d50afcb70aceab4ea506c2d", "html_url": "https://github.com/rust-lang/rust/commit/35147d4cf342ee479d50afcb70aceab4ea506c2d"}], "stats": {"total": 54, "additions": 32, "deletions": 22}, "files": [{"sha": "c3e48ffa5fae4de57a7652307bd97d7b17e021f8", "filename": "clippy_lints/src/methods/iter_cloned_collect.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/45ee914df0c1d1a6a15272bd6833023dd4185b9b/clippy_lints%2Fsrc%2Fmethods%2Fiter_cloned_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ee914df0c1d1a6a15272bd6833023dd4185b9b/clippy_lints%2Fsrc%2Fmethods%2Fiter_cloned_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_cloned_collect.rs?ref=45ee914df0c1d1a6a15272bd6833023dd4185b9b", "patch": "@@ -0,0 +1,30 @@\n+use crate::methods::derefs_to_slice;\n+use crate::utils::{is_type_diagnostic_item, span_lint_and_sugg};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_span::sym;\n+\n+use super::ITER_CLONED_COLLECT;\n+\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, iter_args: &'tcx [hir::Expr<'_>]) {\n+    if_chain! {\n+        if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(expr), sym::vec_type);\n+        if let Some(slice) = derefs_to_slice(cx, &iter_args[0], cx.typeck_results().expr_ty(&iter_args[0]));\n+        if let Some(to_replace) = expr.span.trim_start(slice.span.source_callsite());\n+\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                ITER_CLONED_COLLECT,\n+                to_replace,\n+                \"called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and \\\n+                more readable\",\n+                \"try\",\n+                \".to_vec()\".to_string(),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}"}, {"sha": "92d8077c1ab2da1bc49360cac3689568336d14be", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/45ee914df0c1d1a6a15272bd6833023dd4185b9b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ee914df0c1d1a6a15272bd6833023dd4185b9b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=45ee914df0c1d1a6a15272bd6833023dd4185b9b", "patch": "@@ -8,6 +8,7 @@ mod get_unwrap;\n mod implicit_clone;\n mod inefficient_to_string;\n mod inspect_for_each;\n+mod iter_cloned_collect;\n mod iter_count;\n mod manual_saturating_arithmetic;\n mod ok_expect;\n@@ -1711,7 +1712,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"nth\", ..] => lint_iter_nth_zero(cx, expr, arg_lists[0]),\n             [\"step_by\", ..] => lint_step_by(cx, expr, arg_lists[0]),\n             [\"next\", \"skip\"] => lint_iter_skip_next(cx, expr, arg_lists[1]),\n-            [\"collect\", \"cloned\"] => lint_iter_cloned_collect(cx, expr, arg_lists[1]),\n+            [\"collect\", \"cloned\"] => iter_cloned_collect::check(cx, expr, arg_lists[1]),\n             [\"as_ref\"] => lint_asref(cx, expr, \"as_ref\", arg_lists[0]),\n             [\"as_mut\"] => lint_asref(cx, expr, \"as_mut\", arg_lists[0]),\n             [\"fold\", ..] => lint_unnecessary_fold(cx, expr, arg_lists[0], method_spans[0]),\n@@ -2494,27 +2495,6 @@ fn lint_extend(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>\n     }\n }\n \n-fn lint_iter_cloned_collect<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, iter_args: &'tcx [hir::Expr<'_>]) {\n-    if_chain! {\n-        if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(expr), sym::vec_type);\n-        if let Some(slice) = derefs_to_slice(cx, &iter_args[0], cx.typeck_results().expr_ty(&iter_args[0]));\n-        if let Some(to_replace) = expr.span.trim_start(slice.span.source_callsite());\n-\n-        then {\n-            span_lint_and_sugg(\n-                cx,\n-                ITER_CLONED_COLLECT,\n-                to_replace,\n-                \"called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and \\\n-                more readable\",\n-                \"try\",\n-                \".to_vec()\".to_string(),\n-                Applicability::MachineApplicable,\n-            );\n-        }\n-    }\n-}\n-\n fn lint_unnecessary_fold(cx: &LateContext<'_>, expr: &hir::Expr<'_>, fold_args: &[hir::Expr<'_>], fold_span: Span) {\n     fn check_fold_with_op(\n         cx: &LateContext<'_>,"}]}