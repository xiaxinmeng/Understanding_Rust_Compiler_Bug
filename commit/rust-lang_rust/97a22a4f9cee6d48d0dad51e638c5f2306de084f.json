{"sha": "97a22a4f9cee6d48d0dad51e638c5f2306de084f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3YTIyYTRmOWNlZTZkNDhkMGRhZDUxZTYzOGM1ZjIzMDZkZTA4NGY=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-06-01T23:23:23Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-03-31T14:05:32Z"}, "message": "Add u32 for bound variables to Binder", "tree": {"sha": "0126583149030fc8a58964ae1eea975e63ebe847", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0126583149030fc8a58964ae1eea975e63ebe847"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97a22a4f9cee6d48d0dad51e638c5f2306de084f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97a22a4f9cee6d48d0dad51e638c5f2306de084f", "html_url": "https://github.com/rust-lang/rust/commit/97a22a4f9cee6d48d0dad51e638c5f2306de084f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97a22a4f9cee6d48d0dad51e638c5f2306de084f/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4955d755d3ffdfecfd2c22139c65fe1a10d60939", "url": "https://api.github.com/repos/rust-lang/rust/commits/4955d755d3ffdfecfd2c22139c65fe1a10d60939", "html_url": "https://github.com/rust-lang/rust/commit/4955d755d3ffdfecfd2c22139c65fe1a10d60939"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "922d14bc2f574c2c3908c3c8f995062ef59b5efd", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97a22a4f9cee6d48d0dad51e638c5f2306de084f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a22a4f9cee6d48d0dad51e638c5f2306de084f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=97a22a4f9cee6d48d0dad51e638c5f2306de084f", "patch": "@@ -341,7 +341,7 @@ impl ObligationCauseCode<'_> {\n \n // `ObligationCauseCode` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(ObligationCauseCode<'_>, 32);\n+static_assert_size!(ObligationCauseCode<'_>, 40);\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum StatementAsExpression {"}, {"sha": "8fc35193498231dd809613859652dd7df20f08fe", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97a22a4f9cee6d48d0dad51e638c5f2306de084f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a22a4f9cee6d48d0dad51e638c5f2306de084f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=97a22a4f9cee6d48d0dad51e638c5f2306de084f", "patch": "@@ -302,7 +302,7 @@ impl<'tcx> TyS<'tcx> {\n \n // `TyS` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(TyS<'_>, 32);\n+static_assert_size!(TyS<'_>, 40);\n \n impl<'tcx> Ord for TyS<'tcx> {\n     fn cmp(&self, other: &TyS<'tcx>) -> Ordering {\n@@ -366,7 +366,7 @@ crate struct PredicateInner<'tcx> {\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(PredicateInner<'_>, 40);\n+static_assert_size!(PredicateInner<'_>, 48);\n \n #[derive(Clone, Copy, Lift)]\n pub struct Predicate<'tcx> {"}, {"sha": "c7896d2b1e884bdcb5ca6c6209f93e2c91b6c035", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/97a22a4f9cee6d48d0dad51e638c5f2306de084f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97a22a4f9cee6d48d0dad51e638c5f2306de084f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=97a22a4f9cee6d48d0dad51e638c5f2306de084f", "patch": "@@ -232,7 +232,7 @@ impl TyKind<'tcx> {\n \n // `TyKind` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(TyKind<'_>, 24);\n+static_assert_size!(TyKind<'_>, 32);\n \n /// A closure can be modeled as a struct that looks like:\n ///\n@@ -957,7 +957,7 @@ impl<'tcx> PolyExistentialTraitRef<'tcx> {\n ///\n /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n-pub struct Binder<T>(T);\n+pub struct Binder<T>(T, u32);\n \n impl<T> Binder<T> {\n     /// Wraps `value` in a binder, asserting that `value` does not\n@@ -969,12 +969,12 @@ impl<T> Binder<T> {\n         T: TypeFoldable<'tcx>,\n     {\n         debug_assert!(!value.has_escaping_bound_vars());\n-        Binder(value)\n+        Binder(value, 0)\n     }\n \n     /// Wraps `value` in a binder, binding higher-ranked vars (if any).\n     pub fn bind(value: T) -> Binder<T> {\n-        Binder(value)\n+        Binder(value, 0)\n     }\n \n     /// Skips the binder and returns the \"bound\" value. This is a\n@@ -998,7 +998,7 @@ impl<T> Binder<T> {\n     }\n \n     pub fn as_ref(&self) -> Binder<&T> {\n-        Binder(&self.0)\n+        Binder(&self.0, self.1)\n     }\n \n     pub fn map_bound_ref<F, U>(&self, f: F) -> Binder<U>\n@@ -1012,7 +1012,7 @@ impl<T> Binder<T> {\n     where\n         F: FnOnce(T) -> U,\n     {\n-        Binder(f(self.0))\n+        Binder(f(self.0), self.1)\n     }\n \n     /// Wraps a `value` in a binder, using the same bound variables as the\n@@ -1025,7 +1025,7 @@ impl<T> Binder<T> {\n     /// because bound vars aren't allowed to change here, whereas they are\n     /// in `bind`. This may be (debug) asserted in the future.\n     pub fn rebind<U>(&self, value: U) -> Binder<U> {\n-        Binder(value)\n+        Binder(value, self.1)\n     }\n \n     /// Unwraps and returns the value within, but only if it contains\n@@ -1056,7 +1056,7 @@ impl<T> Binder<T> {\n     where\n         F: FnOnce(T, U) -> R,\n     {\n-        Binder(f(self.0, u.0))\n+        Binder(f(self.0, u.0), self.1)\n     }\n \n     /// Splits the contents into two things that share the same binder\n@@ -1070,13 +1070,14 @@ impl<T> Binder<T> {\n         F: FnOnce(T) -> (U, V),\n     {\n         let (u, v) = f(self.0);\n-        (Binder(u), Binder(v))\n+        (Binder(u, self.1), Binder(v, self.1))\n     }\n }\n \n impl<T> Binder<Option<T>> {\n     pub fn transpose(self) -> Option<Binder<T>> {\n-        self.0.map(Binder)\n+        let bound_vars = self.1;\n+        self.0.map(|v| Binder(v, bound_vars))\n     }\n }\n "}]}