{"sha": "457683c7feef42f07f3044ccfdc8ee7816176ab0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NzY4M2M3ZmVlZjQyZjA3ZjMwNDRjY2ZkYzhlZTc4MTYxNzZhYjA=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-20T10:32:43Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-20T12:22:17Z"}, "message": "Do not pass taskpointers to \"rust\" native functions\n\nIssue #466", "tree": {"sha": "4e8fe9608e807fa86ae14b839fb2fac7d4cfc20f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e8fe9608e807fa86ae14b839fb2fac7d4cfc20f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/457683c7feef42f07f3044ccfdc8ee7816176ab0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/457683c7feef42f07f3044ccfdc8ee7816176ab0", "html_url": "https://github.com/rust-lang/rust/commit/457683c7feef42f07f3044ccfdc8ee7816176ab0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/457683c7feef42f07f3044ccfdc8ee7816176ab0/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6323a012bd1417451cd81f00679039d630dc1695", "url": "https://api.github.com/repos/rust-lang/rust/commits/6323a012bd1417451cd81f00679039d630dc1695", "html_url": "https://github.com/rust-lang/rust/commit/6323a012bd1417451cd81f00679039d630dc1695"}], "stats": {"total": 160, "additions": 67, "deletions": 93}, "files": [{"sha": "5cd397f41bf75e85025147ce2822894003015694", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/457683c7feef42f07f3044ccfdc8ee7816176ab0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457683c7feef42f07f3044ccfdc8ee7816176ab0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=457683c7feef42f07f3044ccfdc8ee7816176ab0", "patch": "@@ -5762,7 +5762,7 @@ fn register_native_fn(ccx: @crate_ctxt, sp: span, path: [str], name: str,\n     let cast_to_i32;\n     alt abi {\n       ast::native_abi_rust. {\n-        pass_task = true;\n+        pass_task = false;\n         uses_retptr = false;\n         cast_to_i32 = true;\n       }"}, {"sha": "8e5c949f3618eb71d283177cc8b7a1247ebba14e", "filename": "src/lib/run_program.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/457683c7feef42f07f3044ccfdc8ee7816176ab0/src%2Flib%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457683c7feef42f07f3044ccfdc8ee7816176ab0/src%2Flib%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frun_program.rs?ref=457683c7feef42f07f3044ccfdc8ee7816176ab0", "patch": "@@ -114,9 +114,9 @@ fn program_output(prog: str, args: [str]) ->\n    {status: int, out: str, err: str} {\n     let pr = start_program(prog, args);\n     pr.close_input();\n-    ret {status: pr.finish(),\n-         out: read_all(pr.output()),\n-         err: read_all(pr.err())};\n+    let out = read_all(pr.output());\n+    let err = read_all(pr.err());\n+    ret {status: pr.finish(), out: out, err: err};\n }\n \n /* Returns an exit status */"}, {"sha": "bcc37f4d09d6d4f31d5b02d7d67b7d6e87ebd927", "filename": "src/lib/task.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/457683c7feef42f07f3044ccfdc8ee7816176ab0/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457683c7feef42f07f3044ccfdc8ee7816176ab0/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=457683c7feef42f07f3044ccfdc8ee7816176ab0", "patch": "@@ -38,7 +38,6 @@ native \"rust\" mod rustrt {\n     fn new_task() -> task_id;\n     fn drop_task(task: *rust_task);\n     fn get_task_pointer(id: task_id) -> *rust_task;\n-    fn get_task_trampoline() -> u32;\n \n     fn migrate_alloc(alloc: *u8, target: task_id);\n     fn start_task(id: task_id, closure: *u8);"}, {"sha": "44fe75eb33cfd81bec085d7cebe728a69129d668", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 54, "deletions": 76, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/457683c7feef42f07f3044ccfdc8ee7816176ab0/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/457683c7feef42f07f3044ccfdc8ee7816176ab0/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=457683c7feef42f07f3044ccfdc8ee7816176ab0", "patch": "@@ -8,7 +8,7 @@\n #endif\n \n extern \"C\" CDECL rust_str*\n-last_os_error(void *unused_task) {\n+last_os_error() {\n     rust_task *task = rust_scheduler::get_task();\n \n     LOG(task, task, \"last_os_error()\");\n@@ -51,7 +51,7 @@ last_os_error(void *unused_task) {\n }\n \n extern \"C\" CDECL rust_str *\n-rust_getcwd(void *unused_task) {\n+rust_getcwd() {\n     rust_task *task = rust_scheduler::get_task();\n     LOG(task, task, \"rust_getcwd()\");\n \n@@ -71,47 +71,46 @@ rust_getcwd(void *unused_task) {\n \n // TODO: Allow calling native functions that return double results.\n extern \"C\" CDECL\n-void squareroot(void *unused_task, double *input, double *output) {\n+void squareroot(double *input, double *output) {\n     *output = sqrt(*input);\n }\n \n extern \"C\" CDECL size_t\n-size_of(void *unused_task, type_desc *t) {\n+size_of(type_desc *t) {\n   return t->size;\n }\n \n extern \"C\" CDECL size_t\n-align_of(void *unused_task, type_desc *t) {\n+align_of(type_desc *t) {\n   return t->align;\n }\n \n extern \"C\" CDECL void\n-leak(void *unused_task, type_desc *t, void *thing) {\n+leak(type_desc *t, void *thing) {\n     // Do nothing. Call this with move-mode in order to say \"Don't worry rust,\n     // I'll take care of this.\"\n }\n \n extern \"C\" CDECL intptr_t\n-refcount(void *unused_task, type_desc *t, intptr_t *v) {\n-\n+refcount(type_desc *t, intptr_t *v) {\n     // Passed-in value has refcount 1 too high\n     // because it was ref'ed while making the call.\n     return (*v) - 1;\n }\n \n extern \"C\" CDECL void\n-do_gc(void *unused_task) {\n+do_gc() {\n     // TODO\n }\n \n extern \"C\" CDECL void\n-unsupervise(void *unused_task) {\n+unsupervise() {\n     rust_task *task = rust_scheduler::get_task();\n     task->unsupervise();\n }\n \n extern \"C\" CDECL void\n-vec_reserve_shared(void *unused_task, type_desc* ty, rust_vec** vp,\n+vec_reserve_shared(type_desc* ty, rust_vec** vp,\n                    size_t n_elts) {\n     rust_task *task = rust_scheduler::get_task();\n     reserve_vec(task, vp, n_elts * ty->size);\n@@ -122,8 +121,7 @@ vec_reserve_shared(void *unused_task, type_desc* ty, rust_vec** vp,\n  * vector must have size zero.\n  */\n extern \"C\" CDECL rust_vec*\n-vec_from_buf_shared(void *unused_task, type_desc *ty,\n-                    void *ptr, size_t count) {\n+vec_from_buf_shared(type_desc *ty, void *ptr, size_t count) {\n     rust_task *task = rust_scheduler::get_task();\n     size_t fill = ty->size * count;\n     rust_vec* v = (rust_vec*)task->kernel->malloc(fill + sizeof(rust_vec),\n@@ -134,7 +132,7 @@ vec_from_buf_shared(void *unused_task, type_desc *ty,\n }\n \n extern \"C\" CDECL void\n-rust_str_push(void *unused_task, rust_vec** sp, uint8_t byte) {\n+rust_str_push(rust_vec** sp, uint8_t byte) {\n     rust_task *task = rust_scheduler::get_task();\n     size_t fill = (*sp)->fill;\n     reserve_vec(task, sp, fill + 1);\n@@ -144,8 +142,7 @@ rust_str_push(void *unused_task, rust_vec** sp, uint8_t byte) {\n }\n \n extern \"C\" CDECL void *\n-rand_new(void *unused_task)\n-{\n+rand_new() {\n     rust_task *task = rust_scheduler::get_task();\n     rust_scheduler *sched = task->sched;\n     randctx *rctx = (randctx *) task->malloc(sizeof(randctx), \"randctx\");\n@@ -158,32 +155,30 @@ rand_new(void *unused_task)\n }\n \n extern \"C\" CDECL size_t\n-rand_next(void *unused_task, randctx *rctx)\n-{\n+rand_next(randctx *rctx) {\n     return isaac_rand(rctx);\n }\n \n extern \"C\" CDECL void\n-rand_free(void *unused_task, randctx *rctx)\n-{\n+rand_free(randctx *rctx) {\n     rust_task *task = rust_scheduler::get_task();\n     task->free(rctx);\n }\n \n extern \"C\" CDECL void\n-task_sleep(void *unused_task, size_t time_in_us) {\n+task_sleep(size_t time_in_us) {\n     rust_task *task = rust_scheduler::get_task();\n     task->yield(time_in_us);\n }\n \n extern \"C\" CDECL void\n-task_yield(void *unused_task) {\n+task_yield() {\n     rust_task *task = rust_scheduler::get_task();\n     task->yield(1);\n }\n \n extern \"C\" CDECL intptr_t\n-task_join(void *unused_task, rust_task_id tid) {\n+task_join(rust_task_id tid) {\n     rust_task *task = rust_scheduler::get_task();\n     // If the other task is already dying, we don't have to wait for it.\n     rust_task *join_task = task->kernel->get_task_by_id(tid);\n@@ -211,25 +206,21 @@ task_join(void *unused_task, rust_task_id tid) {\n /* Debug builtins for std::dbg. */\n \n static void\n-debug_tydesc_helper(void *unused_task, type_desc *t)\n-{\n-    rust_task *task = rust_scheduler::get_task();\n+debug_tydesc_helper(rust_task* task, type_desc *t) {\n     LOG(task, stdlib, \"  size %\" PRIdPTR \", align %\" PRIdPTR\n         \", first_param 0x%\" PRIxPTR,\n         t->size, t->align, t->first_param);\n }\n \n extern \"C\" CDECL void\n-debug_tydesc(void *unused_task, type_desc *t)\n-{\n+debug_tydesc(type_desc *t) {\n     rust_task *task = rust_scheduler::get_task();\n     LOG(task, stdlib, \"debug_tydesc\");\n     debug_tydesc_helper(task, t);\n }\n \n extern \"C\" CDECL void\n-debug_opaque(void *unused_task, type_desc *t, uint8_t *front)\n-{\n+debug_opaque(type_desc *t, uint8_t *front) {\n     rust_task *task = rust_scheduler::get_task();\n     LOG(task, stdlib, \"debug_opaque\");\n     debug_tydesc_helper(task, t);\n@@ -248,8 +239,7 @@ struct rust_box {\n };\n \n extern \"C\" CDECL void\n-debug_box(void *unused_task, type_desc *t, rust_box *box)\n-{\n+debug_box(type_desc *t, rust_box *box) {\n     rust_task *task = rust_scheduler::get_task();\n     LOG(task, stdlib, \"debug_box(0x%\" PRIxPTR \")\", box);\n     debug_tydesc_helper(task, t);\n@@ -266,8 +256,7 @@ struct rust_tag {\n };\n \n extern \"C\" CDECL void\n-debug_tag(void *unused_task, type_desc *t, rust_tag *tag)\n-{\n+debug_tag(type_desc *t, rust_tag *tag) {\n     rust_task *task = rust_scheduler::get_task();\n \n     LOG(task, stdlib, \"debug_tag\");\n@@ -285,9 +274,7 @@ struct rust_obj {\n };\n \n extern \"C\" CDECL void\n-debug_obj(void *unused_task, type_desc *t, rust_obj *obj,\n-          size_t nmethods, size_t nbytes)\n-{\n+debug_obj(type_desc *t, rust_obj *obj, size_t nmethods, size_t nbytes) {\n     rust_task *task = rust_scheduler::get_task();\n \n     LOG(task, stdlib, \"debug_obj with %\" PRIdPTR \" methods\", nmethods);\n@@ -309,8 +296,7 @@ struct rust_fn {\n };\n \n extern \"C\" CDECL void\n-debug_fn(void *unused_task, type_desc *t, rust_fn *fn)\n-{\n+debug_fn(type_desc *t, rust_fn *fn) {\n     rust_task *task = rust_scheduler::get_task();\n     LOG(task, stdlib, \"debug_fn\");\n     debug_tydesc_helper(task, t);\n@@ -322,11 +308,9 @@ debug_fn(void *unused_task, type_desc *t, rust_fn *fn)\n }\n \n extern \"C\" CDECL void *\n-debug_ptrcast(void *unused_task,\n-              type_desc *from_ty,\n+debug_ptrcast(type_desc *from_ty,\n               type_desc *to_ty,\n-              void *ptr)\n-{\n+              void *ptr) {\n     rust_task *task = rust_scheduler::get_task();\n     LOG(task, stdlib, \"debug_ptrcast from\");\n     debug_tydesc_helper(task, from_ty);\n@@ -336,7 +320,7 @@ debug_ptrcast(void *unused_task,\n }\n \n extern \"C\" CDECL rust_vec*\n-rust_list_files(void *unused_task, rust_vec **path) {\n+rust_list_files(rust_vec **path) {\n     rust_task *task = rust_scheduler::get_task();\n     array_list<rust_str*> strings;\n #if defined(__WIN32__)\n@@ -375,7 +359,7 @@ rust_list_files(void *unused_task, rust_vec **path) {\n }\n \n extern \"C\" CDECL int\n-rust_file_is_dir(void *unused_task, char *path) {\n+rust_file_is_dir(char *path) {\n     struct stat buf;\n     if (stat(path, &buf)) {\n         return 0;\n@@ -388,13 +372,13 @@ extern \"C\" CDECL FILE* rust_get_stdout() {return stdout;}\n extern \"C\" CDECL FILE* rust_get_stderr() {return stderr;}\n \n extern \"C\" CDECL int\n-rust_ptr_eq(void *unused_task, type_desc *t, rust_box *a, rust_box *b) {\n+rust_ptr_eq(type_desc *t, rust_box *a, rust_box *b) {\n     return a == b;\n }\n \n #if defined(__WIN32__)\n extern \"C\" CDECL void\n-get_time(void *unused_task, uint32_t *sec, uint32_t *usec) {\n+get_time(uint32_t *sec, uint32_t *usec) {\n     rust_task *task = rust_scheduler::get_task();\n     SYSTEMTIME systemTime;\n     FILETIME fileTime;\n@@ -410,7 +394,7 @@ get_time(void *unused_task, uint32_t *sec, uint32_t *usec) {\n }\n #else\n extern \"C\" CDECL void\n-get_time(void *unused_task, uint32_t *sec, uint32_t *usec) {\n+get_time(uint32_t *sec, uint32_t *usec) {\n     struct timeval tv;\n     gettimeofday(&tv, NULL);\n     *sec = tv.tv_sec;\n@@ -419,54 +403,48 @@ get_time(void *unused_task, uint32_t *sec, uint32_t *usec) {\n #endif\n \n extern \"C\" CDECL void\n-nano_time(void *unused_task, uint64_t *ns) {\n+nano_time(uint64_t *ns) {\n     timer t;\n     *ns = t.time_ns();\n }\n \n extern \"C\" CDECL void\n-pin_task(void *unused_task) {\n+pin_task() {\n     rust_task *task = rust_scheduler::get_task();\n     task->pin();\n }\n \n extern \"C\" CDECL void\n-unpin_task(void *unused_task) {\n+unpin_task() {\n     rust_task *task = rust_scheduler::get_task();\n     task->unpin();\n }\n \n extern \"C\" CDECL rust_task_id\n-get_task_id(void *unused_task) {\n+get_task_id() {\n     rust_task *task = rust_scheduler::get_task();\n     return task->user.id;\n }\n \n extern \"C\" CDECL rust_task_id\n-new_task(void *unused_task) {\n+new_task() {\n     rust_task *task = rust_scheduler::get_task();\n     return task->kernel->create_task(task, NULL);\n }\n \n extern \"C\" CDECL void\n-drop_task(void *unused_task, rust_task *target) {\n+drop_task(rust_task *target) {\n     if(target) {\n         target->deref();\n     }\n }\n \n extern \"C\" CDECL rust_task *\n-get_task_pointer(void *unused_task, rust_task_id id) {\n+get_task_pointer(rust_task_id id) {\n     rust_task *task = rust_scheduler::get_task();\n     return task->kernel->get_task_by_id(id);\n }\n \n-// FIXME: Transitional. Remove\n-extern \"C\" CDECL void **\n-get_task_trampoline(void *unused_task) {\n-    return NULL;\n-}\n-\n struct fn_env_pair {\n     intptr_t f;\n     intptr_t env;\n@@ -480,15 +458,15 @@ void rust_spawn_wrapper(void* retptr, rust_task* taskptr, void* envptr,\n }\n \n extern \"C\" CDECL void\n-start_task(void *unused_task, rust_task_id id, fn_env_pair *f) {\n+start_task(rust_task_id id, fn_env_pair *f) {\n     rust_task *task = rust_scheduler::get_task();\n     rust_task *target = task->kernel->get_task_by_id(id);\n     target->start((uintptr_t)rust_spawn_wrapper, f->f, f->env);\n     target->deref();\n }\n \n extern \"C\" CDECL void\n-migrate_alloc(void *unused_task, void *alloc, rust_task_id tid) {\n+migrate_alloc(void *alloc, rust_task_id tid) {\n     rust_task *task = rust_scheduler::get_task();\n     if(!alloc) return;\n     rust_task *target = task->kernel->get_task_by_id(tid);\n@@ -506,18 +484,18 @@ migrate_alloc(void *unused_task, void *alloc, rust_task_id tid) {\n // defined in rust_task.cpp\n extern size_t g_custom_min_stack_size;\n extern \"C\" CDECL void\n-set_min_stack(void *unused_task, uintptr_t stack_size) {\n+set_min_stack(uintptr_t stack_size) {\n     g_custom_min_stack_size = stack_size;\n }\n \n extern \"C\" CDECL int\n-sched_threads(void *unused_task) {\n+sched_threads() {\n     rust_task *task = rust_scheduler::get_task();\n     return task->kernel->num_threads;\n }\n \n extern \"C\" CDECL rust_port*\n-new_port(void *unused_task, size_t unit_sz) {\n+new_port(size_t unit_sz) {\n     rust_task *task = rust_scheduler::get_task();\n     LOG(task, comm, \"new_port(task=0x%\" PRIxPTR \" (%s), unit_sz=%d)\",\n         (uintptr_t) task, task->name, unit_sz);\n@@ -527,7 +505,7 @@ new_port(void *unused_task, size_t unit_sz) {\n }\n \n extern \"C\" CDECL void\n-del_port(void *unused_task, rust_port *port) {\n+del_port(rust_port *port) {\n     rust_task *task = rust_scheduler::get_task();\n     LOG(task, comm, \"del_port(0x%\" PRIxPTR \")\", (uintptr_t) port);\n     I(task->sched, !port->ref_count);\n@@ -538,12 +516,12 @@ del_port(void *unused_task, rust_port *port) {\n }\n \n extern \"C\" CDECL rust_port_id\n-get_port_id(void *unused_task, rust_port *port) {\n+get_port_id(rust_port *port) {\n     return port->id;\n }\n \n extern \"C\" CDECL rust_chan*\n-new_chan(void *unused_task, rust_port *port) {\n+new_chan(rust_port *port) {\n     rust_task *task = rust_scheduler::get_task();\n     rust_scheduler *sched = task->sched;\n     LOG(task, comm, \"new_chan(\"\n@@ -555,34 +533,34 @@ new_chan(void *unused_task, rust_port *port) {\n }\n \n extern \"C\" CDECL\n-void del_chan(void *unused_task, rust_chan *chan) {\n+void del_chan(rust_chan *chan) {\n     rust_task *task = rust_scheduler::get_task();\n     LOG(task, comm, \"del_chan(0x%\" PRIxPTR \")\", (uintptr_t) chan);\n     I(task->sched, false);\n }\n \n extern \"C\" CDECL\n-void take_chan(void *unused_task, rust_chan *chan) {\n+void take_chan(rust_chan *chan) {\n     chan->ref();\n }\n \n extern \"C\" CDECL\n-void drop_chan(void *unused_task, rust_chan *chan) {\n+void drop_chan(rust_chan *chan) {\n     chan->deref();\n }\n \n extern \"C\" CDECL\n-void drop_port(void *, rust_port *port) {\n+void drop_port(rust_port *port) {\n     port->ref_count--;\n }\n \n extern \"C\" CDECL void\n-chan_send(void *unused_task, rust_chan *chan, void *sptr) {\n+chan_send(rust_chan *chan, void *sptr) {\n     chan->send(sptr);\n }\n \n extern \"C\" CDECL void\n-chan_id_send(void *unused_task, type_desc *t, rust_task_id target_task_id,\n+chan_id_send(type_desc *t, rust_task_id target_task_id,\n              rust_port_id target_port_id, void *sptr) {\n     // FIXME: make sure this is thread-safe\n     rust_task *task = rust_scheduler::get_task();\n@@ -598,7 +576,7 @@ chan_id_send(void *unused_task, type_desc *t, rust_task_id target_task_id,\n }\n \n extern \"C\" CDECL void\n-port_recv(void *unused_task, uintptr_t *dptr, rust_port *port) {\n+port_recv(uintptr_t *dptr, rust_port *port) {\n     rust_task *task = rust_scheduler::get_task();\n     {\n         scoped_lock with(port->lock);"}, {"sha": "6e5aa8a15f3c4bbb3cd502bc00a417de54c40dd4", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/457683c7feef42f07f3044ccfdc8ee7816176ab0/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/457683c7feef42f07f3044ccfdc8ee7816176ab0/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=457683c7feef42f07f3044ccfdc8ee7816176ab0", "patch": "@@ -288,7 +288,7 @@ struct type_desc {\n #include \"memory.h\"\n \n extern \"C\" CDECL void\n-port_recv(void *unused_task, uintptr_t *dptr, rust_port *port);\n+port_recv(uintptr_t *dptr, rust_port *port);\n \n #include \"test/rust_test_harness.h\"\n #include \"test/rust_test_util.h\""}, {"sha": "afa4cd738d64e85406ee12a5399e6d2f00ba3498", "filename": "src/rt/rust_port.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/457683c7feef42f07f3044ccfdc8ee7816176ab0/src%2Frt%2Frust_port.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/457683c7feef42f07f3044ccfdc8ee7816176ab0/src%2Frt%2Frust_port.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.cpp?ref=457683c7feef42f07f3044ccfdc8ee7816176ab0", "patch": "@@ -2,7 +2,7 @@\n #include \"rust_port.h\"\n \n extern \"C\" CDECL rust_chan*\n-new_chan(rust_task *task, rust_port *port);\n+new_chan(rust_port *port);\n \n rust_port::rust_port(rust_task *task, size_t unit_sz)\n     : ref_count(1), kernel(task->kernel), task(task),\n@@ -13,7 +13,7 @@ rust_port::rust_port(rust_task *task, size_t unit_sz)\n         PRIxPTR, (uintptr_t)task, unit_sz, (uintptr_t)this);\n \n     id = task->register_port(this);\n-    remote_chan = new_chan(task, this);\n+    remote_chan = new_chan(this);\n }\n \n rust_port::~rust_port() {"}, {"sha": "1b17a510b2e44fd0d3d301a9842df2a9f027219f", "filename": "src/rt/rust_run_program.cpp", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/457683c7feef42f07f3044ccfdc8ee7816176ab0/src%2Frt%2Frust_run_program.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/457683c7feef42f07f3044ccfdc8ee7816176ab0/src%2Frt%2Frust_run_program.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_run_program.cpp?ref=457683c7feef42f07f3044ccfdc8ee7816176ab0", "patch": "@@ -6,8 +6,7 @@\n #include <io.h>\n \n extern \"C\" CDECL int\n-rust_run_program(void* task, const char* argv[],\n-                 int in_fd, int out_fd, int err_fd) {\n+rust_run_program(const char* argv[], int in_fd, int out_fd, int err_fd) {\n     STARTUPINFO si;\n     ZeroMemory(&si, sizeof(STARTUPINFO));\n     si.cb = sizeof(STARTUPINFO);\n@@ -54,7 +53,7 @@ rust_run_program(void* task, const char* argv[],\n }\n \n extern \"C\" CDECL int\n-rust_process_wait(void* task, int proc) {\n+rust_process_wait(int proc) {\n     DWORD status;\n     while (true) {\n         if (GetExitCodeProcess((HANDLE)proc, &status) &&\n@@ -73,8 +72,7 @@ rust_process_wait(void* task, int proc) {\n #include <termios.h>\n \n extern \"C\" CDECL int\n-rust_run_program(rust_task* task, char* argv[],\n-                 int in_fd, int out_fd, int err_fd) {\n+rust_run_program(char* argv[], int in_fd, int out_fd, int err_fd) {\n     int pid = fork();\n     if (pid != 0) return pid;\n \n@@ -92,7 +90,7 @@ rust_run_program(rust_task* task, char* argv[],\n }\n \n extern \"C\" CDECL int\n-rust_process_wait(void* task, int proc) {\n+rust_process_wait(int proc) {\n     // FIXME: stub; exists to placate linker.\n     return 0;\n }"}, {"sha": "516de91dd5f66b703c69736285c4b7bc8099a7e7", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/457683c7feef42f07f3044ccfdc8ee7816176ab0/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/457683c7feef42f07f3044ccfdc8ee7816176ab0/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=457683c7feef42f07f3044ccfdc8ee7816176ab0", "patch": "@@ -45,10 +45,10 @@ copy_elements(rust_task *task, type_desc *elem_t,\n }\n \n extern \"C\" CDECL void\n-upcall_fail(rust_task *task,\n-            char const *expr,\n+upcall_fail(char const *expr,\n             char const *file,\n             size_t line) {\n+    rust_task *task = rust_scheduler::get_task();\n     LOG_UPCALL_ENTRY(task);\n     LOG_ERR(task, upcall, \"upcall fail '%s', %s:%\" PRIdPTR, expr, file, line);\n     task->fail();"}, {"sha": "3430f77c8927d5cc756294312f6d6e9ab162023c", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/457683c7feef42f07f3044ccfdc8ee7816176ab0/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/457683c7feef42f07f3044ccfdc8ee7816176ab0/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=457683c7feef42f07f3044ccfdc8ee7816176ab0", "patch": "@@ -26,7 +26,6 @@ drop_task\n get_port_id\n get_task_id\n get_task_pointer\n-get_task_trampoline\n get_time\n last_os_error\n leak"}]}