{"sha": "5a6d9e1f1b2d8bca214c72d71f54a45141587106", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNmQ5ZTFmMWIyZDhiY2EyMTRjNzJkNzFmNTRhNDUxNDE1ODcxMDY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-21T10:17:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-21T10:17:46Z"}, "message": "Merge pull request #972 from l4l/debug-file-hash\n\nSupport file hashes in .debug_line", "tree": {"sha": "a6fa762b28f187925f45126220f424a70e28a0a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6fa762b28f187925f45126220f424a70e28a0a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a6d9e1f1b2d8bca214c72d71f54a45141587106", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJenshKCRBK7hj4Ov3rIwAAdHIIAEfOdA+SYuiGzwM9+t8JnhE7\n0ATYOj1fZ8guwVtCtFaJBe2v4/HXGe7mOgtEFbSBJobv0WhlV39E5R7MId2rZyJD\ntG398sxnhNAJh6q+I8BeBx7HHW0aO/SBkAEAHHyLX+waqZJezjwbGi2ogJmH4XH0\nUAlzfYADBv+COQBP4nf2fncNGXKApLwI3MVuz0AEm0v0rphIwpKN94QO32hRdLJg\nBiJ7rrK76CVPmGDkEI+d4iUYrMd3ltG6plpUl9v7uKTVb4cUGWm0sx8AiD/vZ9Sl\nYlXBKJJ3weDhTpjQ3XiKgwjwFf91DMbtO3s8w4jGyi9pC6JB8/5KbmAnas8LifU=\n=Ff64\n-----END PGP SIGNATURE-----\n", "payload": "tree a6fa762b28f187925f45126220f424a70e28a0a9\nparent 385c656372debf8d538346d5b51e6955121f4b4f\nparent c3c5c4b731588fa289fb3e4959b9b896b95149a9\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1587464266 +0200\ncommitter GitHub <noreply@github.com> 1587464266 +0200\n\nMerge pull request #972 from l4l/debug-file-hash\n\nSupport file hashes in .debug_line"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a6d9e1f1b2d8bca214c72d71f54a45141587106", "html_url": "https://github.com/rust-lang/rust/commit/5a6d9e1f1b2d8bca214c72d71f54a45141587106", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a6d9e1f1b2d8bca214c72d71f54a45141587106/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "385c656372debf8d538346d5b51e6955121f4b4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/385c656372debf8d538346d5b51e6955121f4b4f", "html_url": "https://github.com/rust-lang/rust/commit/385c656372debf8d538346d5b51e6955121f4b4f"}, {"sha": "c3c5c4b731588fa289fb3e4959b9b896b95149a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3c5c4b731588fa289fb3e4959b9b896b95149a9", "html_url": "https://github.com/rust-lang/rust/commit/c3c5c4b731588fa289fb3e4959b9b896b95149a9"}], "stats": {"total": 69, "additions": 54, "deletions": 15}, "files": [{"sha": "3c44f8ebf4cc07f4603a14962bc926adbbb2d400", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5a6d9e1f1b2d8bca214c72d71f54a45141587106/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a6d9e1f1b2d8bca214c72d71f54a45141587106/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=5a6d9e1f1b2d8bca214c72d71f54a45141587106", "patch": "@@ -3,12 +3,12 @@ use std::path::{Component, Path};\n \n use crate::prelude::*;\n \n-use rustc_span::{FileName, SourceFileAndLine, Pos};\n+use rustc_span::{FileName, SourceFile, SourceFileAndLine, Pos, SourceFileHash, SourceFileHashAlgorithm};\n \n use cranelift_codegen::binemit::CodeOffset;\n \n use gimli::write::{\n-    Address, AttributeValue, FileId, LineProgram, LineString, LineStringTable, UnitEntryId,\n+    Address, AttributeValue, FileId, LineProgram, LineString, FileInfo, LineStringTable, UnitEntryId,\n };\n \n // OPTIMIZATION: It is cheaper to do this in one pass than using `.parent()` and `.file_name()`.\n@@ -35,12 +35,28 @@ fn osstr_as_utf8_bytes(path: &OsStr) -> &[u8] {\n     }\n }\n \n+pub(crate) const MD5_LEN: usize = 16;\n+\n+pub fn make_file_info(hash: SourceFileHash) -> Option<FileInfo> {\n+    if hash.kind == SourceFileHashAlgorithm::Md5 {\n+        let mut buf = [0u8; MD5_LEN];\n+        buf.copy_from_slice(hash.hash_bytes());\n+        Some(FileInfo {\n+            timestamp: 0,\n+            size: 0,\n+            md5: buf,\n+        })\n+    } else {\n+        None\n+    }\n+}\n+\n fn line_program_add_file(\n     line_program: &mut LineProgram,\n     line_strings: &mut LineStringTable,\n-    file: &FileName,\n+    file: &SourceFile,\n ) -> FileId {\n-    match file {\n+    match &file.name {\n         FileName::Real(path) => {\n             let (dir_path, file_name) = split_path_dir_and_file(path);\n             let dir_name = osstr_as_utf8_bytes(dir_path.as_os_str());\n@@ -57,13 +73,17 @@ fn line_program_add_file(\n                 line_program.encoding(),\n                 line_strings,\n             );\n-            line_program.add_file(file_name, dir_id, None)\n+\n+            let info = make_file_info(file.src_hash);\n+\n+            line_program.file_has_md5 &= info.is_some();\n+            line_program.add_file(file_name, dir_id, info)\n         }\n         // FIXME give more appropriate file names\n-        _ => {\n+        filename => {\n             let dir_id = line_program.default_directory();\n             let dummy_file_name = LineString::new(\n-                file.to_string().into_bytes(),\n+                filename.to_string().into_bytes(),\n                 line_program.encoding(),\n                 line_strings,\n             );\n@@ -79,7 +99,7 @@ impl<'tcx> DebugContext<'tcx> {\n         let file_id = line_program_add_file(\n             &mut self.dwarf.unit.line_program,\n             &mut self.dwarf.line_strings,\n-            &loc.file.name,\n+            &loc.file,\n         );\n \n         let entry = self.dwarf.unit.get_mut(entry_id);\n@@ -167,7 +187,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n                 true\n             };\n             if current_file_changed {\n-                let file_id = line_program_add_file(line_program, line_strings, &file.name);\n+                let file_id = line_program_add_file(line_program, line_strings, &file);\n                 line_program.row().file = file_id;\n                 last_file = Some(file.clone());\n             }"}, {"sha": "4fdf2f1658c23b02d70b812609a6a4ecf568132b", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5a6d9e1f1b2d8bca214c72d71f54a45141587106/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a6d9e1f1b2d8bca214c72d71f54a45141587106/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=5a6d9e1f1b2d8bca214c72d71f54a45141587106", "patch": "@@ -3,6 +3,8 @@ mod line_info;\n \n use crate::prelude::*;\n \n+use rustc_span::FileName;\n+\n use cranelift_codegen::ir::{StackSlots, ValueLabel, ValueLoc};\n use cranelift_codegen::isa::TargetIsa;\n use cranelift_codegen::ValueLocRange;\n@@ -42,7 +44,14 @@ impl<'tcx> DebugContext<'tcx> {\n             format: Format::Dwarf32,\n             // TODO: this should be configurable\n             // macOS doesn't seem to support DWARF > 3\n-            version: 3,\n+            // 5 version is required for md5 file hash\n+            version: if tcx.sess.target.target.options.is_like_osx {\n+                3\n+            } else {\n+                // FIXME change to version 5 once the gdb and lldb shipping with the latest debian\n+                // support it.\n+                4\n+            },\n             address_size,\n         };\n \n@@ -52,18 +61,28 @@ impl<'tcx> DebugContext<'tcx> {\n         // Normally this would use option_env!(\"CFG_VERSION\").\n         let producer = format!(\"cg_clif (rustc {})\", \"unknown version\");\n         let comp_dir = tcx.sess.working_dir.0.to_string_lossy().into_owned();\n-        let name = match tcx.sess.local_crate_source_file {\n-            Some(ref path) => path.to_string_lossy().into_owned(),\n-            None => tcx.crate_name(LOCAL_CRATE).to_string(),\n+        let (name, file_info) = match tcx.sess.local_crate_source_file.clone() {\n+            Some(path) => {\n+                let name = path.to_string_lossy().into_owned();\n+                let info = tcx.sess\n+                    .source_map()\n+                    .get_source_file(&FileName::Real(path))\n+                    .map(|f| f.src_hash)\n+                    .and_then(line_info::make_file_info);\n+                (name, info)\n+            },\n+            None => (tcx.crate_name(LOCAL_CRATE).to_string(), None),\n         };\n \n-        let line_program = LineProgram::new(\n+        let mut line_program = LineProgram::new(\n             encoding,\n             LineEncoding::default(),\n             LineString::new(comp_dir.as_bytes(), encoding, &mut dwarf.line_strings),\n             LineString::new(name.as_bytes(), encoding, &mut dwarf.line_strings),\n-            None,\n+            file_info,\n         );\n+        line_program.file_has_md5 = file_info.is_some();\n+\n         dwarf.unit.line_program = line_program;\n \n         {"}]}