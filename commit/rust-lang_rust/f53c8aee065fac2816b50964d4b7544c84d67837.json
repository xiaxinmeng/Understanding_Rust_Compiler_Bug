{"sha": "f53c8aee065fac2816b50964d4b7544c84d67837", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1M2M4YWVlMDY1ZmFjMjgxNmI1MDk2NGQ0Yjc1NDRjODRkNjc4Mzc=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-07T08:33:00Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-07T08:33:00Z"}, "message": "Merge #96\n\n96: [WIP] Begin to add some contributing docs (#95) r=matklad a=DJMcNab\n\nCurrently adds some documentation about `cargo gen-kinds`.\r\n\r\nNote that I am unsure of some of the details, such as why `DOT` is in `multi_byte_tokens`, hence the [WIP] tag.\r\n\r\nBased on #95.\n\nCo-authored-by: Daniel McNab <36049421+djmcnab@users.noreply.github.com>", "tree": {"sha": "c67a4f6d58435115042c4d19484fac4fbc9efedb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c67a4f6d58435115042c4d19484fac4fbc9efedb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f53c8aee065fac2816b50964d4b7544c84d67837", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f53c8aee065fac2816b50964d4b7544c84d67837", "html_url": "https://github.com/rust-lang/rust/commit/f53c8aee065fac2816b50964d4b7544c84d67837", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f53c8aee065fac2816b50964d4b7544c84d67837/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "aa309291921921b5d6451d907655dfbb496d76ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa309291921921b5d6451d907655dfbb496d76ae", "html_url": "https://github.com/rust-lang/rust/commit/aa309291921921b5d6451d907655dfbb496d76ae"}, {"sha": "fce76cc79a409629eca5536cf407bf95af1eee8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fce76cc79a409629eca5536cf407bf95af1eee8b", "html_url": "https://github.com/rust-lang/rust/commit/fce76cc79a409629eca5536cf407bf95af1eee8b"}], "stats": {"total": 110, "additions": 75, "deletions": 35}, "files": [{"sha": "ac7470c7e37264e67a34fb6d798c7c255fcd874c", "filename": ".cargo/config", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f53c8aee065fac2816b50964d4b7544c84d67837/.cargo%2Fconfig", "raw_url": "https://github.com/rust-lang/rust/raw/f53c8aee065fac2816b50964d4b7544c84d67837/.cargo%2Fconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.cargo%2Fconfig?ref=f53c8aee065fac2816b50964d4b7544c84d67837", "patch": "@@ -1,4 +1,5 @@\n [alias]\n+# Automatically generates the ast and syntax kinds files\n gen-kinds =    \"run --package tools -- gen-kinds\"\n gen-tests =    \"run --package tools -- gen-tests\"\n install-code = \"run --package tools -- install-code\""}, {"sha": "c952078cfe1891b561a3819fc1286b04550954f6", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 54, "deletions": 34, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/f53c8aee065fac2816b50964d4b7544c84d67837/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/f53c8aee065fac2816b50964d4b7544c84d67837/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=f53c8aee065fac2816b50964d4b7544c84d67837", "patch": "@@ -1,38 +1,58 @@\n-The project is in its early stages: contributions are welcome and\n-would be **very** helpful, but the project is not *yet* optimized for\n-contribution. Moreover, it is doubly experimental, so there's no\n-guarantee that any work here would reach production. That said, here\n-are some areas where contributions would be **especially** welcome:\n-\n-\n-* Designing internal data structures: RFC only outlines the\n-  constraints, it's an open question how to satisfy them in the\n-  optimal way. See `ARCHITECTURE.md` for current design questions.\n-\n-* Porting libsyntax parser to rust-analyzer: currently rust-analyzer parses\n-  only a tiny subset of Rust. This should be fixed by porting parsing\n-  functions from libsyntax one by one. Take a look at the\n-  [libsyntax parser](https://github.com/rust-lang/rust/blob/6b99adeb11313197f409b4f7c4083c2ceca8a4fe/src/libsyntax/parse/parser.rs)\n-  for \"what to port\" and at the\n-  [Kotlin parser](https://github.com/JetBrains/kotlin/blob/4d951de616b20feca92f3e9cc9679b2de9e65195/compiler/frontend/src/org/jetbrains/kotlin/parsing/KotlinParsing.java)\n-  for \"how to port\".\n-\n-* Writing validators: by design, rust-analyzer is very lax about the\n-  input. For example, the lexer happily accepts unclosed strings. The\n-  idea is that there should be a higher level visitor, which walks the\n-  syntax tree after parsing and produces all the warnings. Alas,\n-  there's no such visitor yet :( Would you like to write one? :)\n-\n-* Creating tests: it would be tremendously helpful to read each of\n-  libsyntax and rust-analyzer parser functions and crate a small separate\n-  test cases to cover each and every edge case.\n-\n-* Building stuff with rust-analyzer: it would be really cool to compile\n-  rust-analyzer to WASM and add *client side* syntax validation to rust\n+The project is in its early stages: contributions are welcome and would be\n+**very** helpful, but the project is not _yet_ optimized for contribution.\n+Moreover, it is doubly experimental, so there's no guarantee that any work here\n+would reach production. That said, here are some areas where contributions would\n+be **especially** welcome:\n+\n+- Designing internal data structures: RFC only outlines the constraints, it's an\n+  open question how to satisfy them in the optimal way. See `ARCHITECTURE.md`\n+  for current design questions.\n+\n+- Porting libsyntax parser to rust-analyzer: currently rust-analyzer parses only\n+  a tiny subset of Rust. This should be fixed by porting parsing functions from\n+  libsyntax one by one. Take a look at the [libsyntax parser] for \"what to port\"\n+  and at the [Kotlin parser] for \"how to port\".\n+\n+- Writing validators: by design, rust-analyzer is very lax about the input. For\n+  example, the lexer happily accepts unclosed strings. The idea is that there\n+  should be a higher level visitor, which walks the syntax tree after parsing\n+  and produces all the warnings. Alas, there's no such visitor yet :( Would you\n+  like to write one? :)\n+\n+- Creating tests: it would be tremendously helpful to read each of libsyntax and\n+  rust-analyzer parser functions and crate a small separate test cases to cover\n+  each and every edge case.\n+\n+- Building stuff with rust-analyzer: it would be really cool to compile\n+  rust-analyzer to WASM and add _client side_ syntax validation to rust\n   playground!\n \n-\n Do take a look at the issue tracker.\n \n-If you don't know where to start, or have *any* questions or suggestions,\n-don't hesitate to chat at [Gitter](https://gitter.im/libsyntax2/Lobby)!\n+If you don't know where to start, or have _any_ questions or suggestions, don't\n+hesitate to chat at [Gitter]!\n+\n+# Code generation\n+\n+Some of the components of this repository are generated through automatic\n+processes. These are outlined below:\n+\n+- `gen-kinds`: The kinds of tokens are reused in several places, so a generator\n+  is used. This process uses [tera] to generate, using data in [grammar.ron],\n+  the files:\n+  - [ast/generated.rs][ast generated] in `ra_syntax` based on\n+    [ast/generated.tera.rs][ast source]\n+  - [syntax_kinds/generated.rs][syntax_kinds generated] in `ra_syntax` based on\n+    [syntax_kinds/generated.tera.rs][syntax_kinds source]\n+\n+[libsyntax parser]:\n+  https://github.com/rust-lang/rust/blob/6b99adeb11313197f409b4f7c4083c2ceca8a4fe/src/libsyntax/parse/parser.rs\n+[kotlin parser]:\n+  https://github.com/JetBrains/kotlin/blob/4d951de616b20feca92f3e9cc9679b2de9e65195/compiler/frontend/src/org/jetbrains/kotlin/parsing/KotlinParsing.java\n+[gitter]: https://gitter.im/libsyntax2/Lobby\n+[tera]: https://tera.netlify.com/\n+[grammar.ron]: ./crates/ra_syntax/src/grammar.ron\n+[ast generated]: ./crates/ra_syntax/src/ast/generated.rs\n+[ast source]: ./crates/ra_syntax/src/ast/generated.tera.rs\n+[syntax_kinds generated]: ./crates/ra_syntax/src/syntax_kinds/generated.rs\n+[syntax_kinds source]: ./crates/ra_syntax/src/syntax_kinds/generated.tera.rs"}, {"sha": "2db6dff1b7a034295d14b7bfceb2380f844f2c57", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f53c8aee065fac2816b50964d4b7544c84d67837/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53c8aee065fac2816b50964d4b7544c84d67837/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=f53c8aee065fac2816b50964d4b7544c84d67837", "patch": "@@ -1,3 +1,6 @@\n+// This file is automatically generated based on the file `./generated.rs.tera` when `cargo gen-kinds` is run\n+// Do not edit manually\n+\n use {\n     ast,\n     SyntaxNodeRef, AstNode,"}, {"sha": "ceb2cd7e27e65cf3eec60d15fc67c6dc7e3564d6", "filename": "crates/ra_syntax/src/ast/generated.rs.tera", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f53c8aee065fac2816b50964d4b7544c84d67837/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/f53c8aee065fac2816b50964d4b7544c84d67837/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera?ref=f53c8aee065fac2816b50964d4b7544c84d67837", "patch": "@@ -1,3 +1,8 @@\n+{# THIS File is not automatically generated:\n+the below applies to the result of this template\n+#}// This file is automatically generated based on the file `./generated.rs.tera` when `cargo gen-kinds` is run\n+// Do not edit manually\n+\n use {\n     ast,\n     SyntaxNodeRef, AstNode,"}, {"sha": "4b990fd8d046452279cb5060e26f3d5c39f8edf9", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f53c8aee065fac2816b50964d4b7544c84d67837/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/f53c8aee065fac2816b50964d4b7544c84d67837/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=f53c8aee065fac2816b50964d4b7544c84d67837", "patch": "@@ -1,3 +1,5 @@\n+// Stores definitions which must be used in multiple places\n+// See `cargo gen-kinds` (defined in crates/tools/src/main.rs)\n Grammar(\n     single_byte_tokens: [\n         [\";\", \"SEMI\"],\n@@ -23,8 +25,9 @@ Grammar(\n         [\"^\", \"CARET\"],\n         [\"%\", \"PERCENT\"],\n     ],\n+    // TODO: Confirm surmision: the tokens which cannot be recorded in a single UTF-8 byte\n     multi_byte_tokens: [\n-        [\".\", \"DOT\"],\n+        [\".\", \"DOT\"], // Note: DOT is here because <TODO: REASON>\n         [\"..\", \"DOTDOT\"],\n         [\"...\", \"DOTDOTDOT\"],\n         [\"..=\", \"DOTDOTEQ\"],"}, {"sha": "11e9150bb3685a76ed1369cbb90f872c4637d52b", "filename": "crates/ra_syntax/src/syntax_kinds/generated.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f53c8aee065fac2816b50964d4b7544c84d67837/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53c8aee065fac2816b50964d4b7544c84d67837/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs?ref=f53c8aee065fac2816b50964d4b7544c84d67837", "patch": "@@ -1,3 +1,6 @@\n+// This file is automatically generated based on the file `./generated.rs.tera` when `cargo gen-kinds` is run\n+// Do not edit manually\n+\n #![allow(bad_style, missing_docs, unreachable_pub)]\n #![cfg_attr(rustfmt, rustfmt_skip)]\n use super::SyntaxInfo;"}, {"sha": "018564b8a7c7388eb80661ccde4042f45827fe3e", "filename": "crates/ra_syntax/src/syntax_kinds/generated.rs.tera", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f53c8aee065fac2816b50964d4b7544c84d67837/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/f53c8aee065fac2816b50964d4b7544c84d67837/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs.tera?ref=f53c8aee065fac2816b50964d4b7544c84d67837", "patch": "@@ -1,3 +1,8 @@\n+{# THIS File is not automatically generated:\n+the below applies to the result of this template\n+#}// This file is automatically generated based on the file `./generated.rs.tera` when `cargo gen-kinds` is run\n+// Do not edit manually\n+\n #![allow(bad_style, missing_docs, unreachable_pub)]\n #![cfg_attr(rustfmt, rustfmt_skip)]\n use super::SyntaxInfo;"}]}