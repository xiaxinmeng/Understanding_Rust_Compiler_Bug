{"sha": "fc942eed7fc0c8f08ff223a72a3583b93aadea99", "node_id": "C_kwDOAAsO6NoAKGZjOTQyZWVkN2ZjMGM4ZjA4ZmYyMjNhNzJhMzU4M2I5M2FhZGVhOTk", "commit": {"author": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-01-16T22:07:23Z"}, "committer": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-01-17T15:55:28Z"}, "message": "change item_bounds query to return EarlyBinder; remove bound_item_bounds query", "tree": {"sha": "75f62a1435c42e32bb67474a4ebf051c07cef128", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75f62a1435c42e32bb67474a4ebf051c07cef128"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc942eed7fc0c8f08ff223a72a3583b93aadea99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc942eed7fc0c8f08ff223a72a3583b93aadea99", "html_url": "https://github.com/rust-lang/rust/commit/fc942eed7fc0c8f08ff223a72a3583b93aadea99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc942eed7fc0c8f08ff223a72a3583b93aadea99/comments", "author": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85eeaa99652973a779ac8d1ed4394d1b150527f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/85eeaa99652973a779ac8d1ed4394d1b150527f1", "html_url": "https://github.com/rust-lang/rust/commit/85eeaa99652973a779ac8d1ed4394d1b150527f1"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "8d479f1c3e335f37e6b6d8dab2d5fdf083055d8a", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc942eed7fc0c8f08ff223a72a3583b93aadea99/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc942eed7fc0c8f08ff223a72a3583b93aadea99/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=fc942eed7fc0c8f08ff223a72a3583b93aadea99", "patch": "@@ -99,12 +99,16 @@ pub(super) fn explicit_item_bounds(\n     }\n }\n \n-pub(super) fn item_bounds(tcx: TyCtxt<'_>, def_id: DefId) -> &'_ ty::List<ty::Predicate<'_>> {\n-    tcx.mk_predicates(\n+pub(super) fn item_bounds(\n+    tcx: TyCtxt<'_>,\n+    def_id: DefId,\n+) -> ty::EarlyBinder<&'_ ty::List<ty::Predicate<'_>>> {\n+    let bounds = tcx.mk_predicates(\n         util::elaborate_predicates(\n             tcx,\n             tcx.explicit_item_bounds(def_id).iter().map(|&(bound, _span)| bound),\n         )\n         .map(|obligation| obligation.predicate),\n-    )\n+    );\n+    ty::EarlyBinder(bounds)\n }"}, {"sha": "56695a87b7c058df976e6836dcbdea6d60531e90", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc942eed7fc0c8f08ff223a72a3583b93aadea99/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc942eed7fc0c8f08ff223a72a3583b93aadea99/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=fc942eed7fc0c8f08ff223a72a3583b93aadea99", "patch": "@@ -298,7 +298,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         substs: SubstsRef<'tcx>,\n     ) -> impl Iterator<Item = ty::Region<'tcx>> {\n         let tcx = self.tcx;\n-        let bounds = tcx.bound_item_bounds(def_id);\n+        let bounds = tcx.item_bounds(def_id);\n         trace!(\"{:#?}\", bounds.0);\n         bounds\n             .subst_iter(tcx, substs)"}, {"sha": "0ec6f481af1ffaf5642fabda3ce80cf9351921d1", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc942eed7fc0c8f08ff223a72a3583b93aadea99/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc942eed7fc0c8f08ff223a72a3583b93aadea99/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=fc942eed7fc0c8f08ff223a72a3583b93aadea99", "patch": "@@ -272,7 +272,7 @@ rustc_queries! {\n     /// ```\n     ///\n     /// Bounds from the parent (e.g. with nested impl trait) are not included.\n-    query item_bounds(key: DefId) -> &'tcx ty::List<ty::Predicate<'tcx>> {\n+    query item_bounds(key: DefId) -> ty::EarlyBinder<&'tcx ty::List<ty::Predicate<'tcx>>> {\n         desc { |tcx| \"elaborating item bounds for `{}`\", tcx.def_path_str(key) }\n     }\n "}, {"sha": "d0d1dcc584f1b4f8a6222c6b9574b4e8ad7e13b4", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc942eed7fc0c8f08ff223a72a3583b93aadea99/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc942eed7fc0c8f08ff223a72a3583b93aadea99/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=fc942eed7fc0c8f08ff223a72a3583b93aadea99", "patch": "@@ -659,13 +659,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         ty::EarlyBinder(self.explicit_item_bounds(def_id))\n     }\n \n-    pub fn bound_item_bounds(\n-        self,\n-        def_id: DefId,\n-    ) -> ty::EarlyBinder<&'tcx ty::List<ty::Predicate<'tcx>>> {\n-        ty::EarlyBinder(self.item_bounds(def_id))\n-    }\n-\n     pub fn bound_impl_subject(self, def_id: DefId) -> ty::EarlyBinder<ty::ImplSubject<'tcx>> {\n         ty::EarlyBinder(self.impl_subject(def_id))\n     }"}, {"sha": "b9652c25e2be276426f68ebd1640fd877ce2a1bd", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc942eed7fc0c8f08ff223a72a3583b93aadea99/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc942eed7fc0c8f08ff223a72a3583b93aadea99/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=fc942eed7fc0c8f08ff223a72a3583b93aadea99", "patch": "@@ -1123,7 +1123,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     Some((DefIdOrName::DefId(def_id), fn_sig.output(), fn_sig.inputs().map_bound(|inputs| &inputs[1..])))\n                 }\n                 ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n-                    self.tcx.bound_item_bounds(def_id).subst(self.tcx, substs).iter().find_map(|pred| {\n+                    self.tcx.item_bounds(def_id).subst(self.tcx, substs).iter().find_map(|pred| {\n                         if let ty::PredicateKind::Clause(ty::Clause::Projection(proj)) = pred.kind().skip_binder()\n                         && Some(proj.projection_ty.def_id) == self.tcx.lang_items().fn_once_output()\n                         // args tuple will always be substs[1]"}, {"sha": "39f52ca63becfb395c646138b1590a59614fdc4e", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc942eed7fc0c8f08ff223a72a3583b93aadea99/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc942eed7fc0c8f08ff223a72a3583b93aadea99/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=fc942eed7fc0c8f08ff223a72a3583b93aadea99", "patch": "@@ -1375,7 +1375,7 @@ fn assemble_candidates_from_trait_def<'cx, 'tcx>(\n     // Check whether the self-type is itself a projection.\n     // If so, extract what we know from the trait and try to come up with a good answer.\n     let bounds = match *obligation.predicate.self_ty().kind() {\n-        ty::Alias(_, ref data) => tcx.bound_item_bounds(data.def_id).subst(tcx, data.substs),\n+        ty::Alias(_, ref data) => tcx.item_bounds(data.def_id).subst(tcx, data.substs),\n         ty::Infer(ty::TyVar(_)) => {\n             // If the self-type is an inference variable, then it MAY wind up\n             // being a projected type, so induce an ambiguity."}, {"sha": "3731658525e396433c1413ad7d54689e640b3c87", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc942eed7fc0c8f08ff223a72a3583b93aadea99/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc942eed7fc0c8f08ff223a72a3583b93aadea99/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=fc942eed7fc0c8f08ff223a72a3583b93aadea99", "patch": "@@ -160,8 +160,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             _ => bug!(\"projection candidate for unexpected type: {:?}\", placeholder_self_ty),\n         };\n \n-        let candidate_predicate =\n-            tcx.bound_item_bounds(def_id).map_bound(|i| i[idx]).subst(tcx, substs);\n+        let candidate_predicate = tcx.item_bounds(def_id).map_bound(|i| i[idx]).subst(tcx, substs);\n         let candidate = candidate_predicate\n             .to_opt_poly_trait_pred()\n             .expect(\"projection candidate is not a trait predicate\")\n@@ -510,7 +509,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // This maybe belongs in wf, but that can't (doesn't) handle\n             // higher-ranked things.\n             // Prevent, e.g., `dyn Iterator<Item = str>`.\n-            for bound in self.tcx().bound_item_bounds(assoc_type).transpose_iter() {\n+            for bound in self.tcx().item_bounds(assoc_type).transpose_iter() {\n                 let subst_bound =\n                     if defs.count() == 0 {\n                         bound.subst(tcx, trait_predicate.trait_ref.substs)"}, {"sha": "a8aff8d4f24b3a3c537700801f57a19e4219ec68", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc942eed7fc0c8f08ff223a72a3583b93aadea99/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc942eed7fc0c8f08ff223a72a3583b93aadea99/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=fc942eed7fc0c8f08ff223a72a3583b93aadea99", "patch": "@@ -1604,7 +1604,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n             }\n         };\n-        let bounds = tcx.bound_item_bounds(def_id).subst(tcx, substs);\n+        let bounds = tcx.item_bounds(def_id).subst(tcx, substs);\n \n         // The bounds returned by `item_bounds` may contain duplicates after\n         // normalization, so try to deduplicate when possible to avoid"}, {"sha": "1d2a469ca6ca5495f51d72007f537de3df69128b", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc942eed7fc0c8f08ff223a72a3583b93aadea99/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc942eed7fc0c8f08ff223a72a3583b93aadea99/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=fc942eed7fc0c8f08ff223a72a3583b93aadea99", "patch": "@@ -648,7 +648,7 @@ pub fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'t\n         },\n         ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst(cx.tcx, subs), Some(id))),\n         ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => {\n-            sig_from_bounds(cx, ty, cx.tcx.bound_item_bounds(def_id).subst_identity(), cx.tcx.opt_parent(def_id))\n+            sig_from_bounds(cx, ty, cx.tcx.item_bounds(def_id).subst_identity(), cx.tcx.opt_parent(def_id))\n         },\n         ty::FnPtr(sig) => Some(ExprFnSig::Sig(sig, None)),\n         ty::Dynamic(bounds, _, _) => {"}]}