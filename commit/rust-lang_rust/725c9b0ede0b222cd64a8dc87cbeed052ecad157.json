{"sha": "725c9b0ede0b222cd64a8dc87cbeed052ecad157", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNWM5YjBlZGUwYjIyMmNkNjRhOGRjODdjYmVlZDA1MmVjYWQxNTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-23T22:58:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-23T22:58:00Z"}, "message": "Auto merge of #49779 - oli-obk:const_err_regression, r=eddyb\n\nDon't report compile-time errors for promoteds\n\nFixes the regression part of #49760, the missing warnings still are missing\n\nr? @eddyb", "tree": {"sha": "6155cfe6c7fffd4979e9ea8798b14e10b7b795a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6155cfe6c7fffd4979e9ea8798b14e10b7b795a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/725c9b0ede0b222cd64a8dc87cbeed052ecad157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/725c9b0ede0b222cd64a8dc87cbeed052ecad157", "html_url": "https://github.com/rust-lang/rust/commit/725c9b0ede0b222cd64a8dc87cbeed052ecad157", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/725c9b0ede0b222cd64a8dc87cbeed052ecad157/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0135bf647c266052f8428601a72a77dd51bf6437", "url": "https://api.github.com/repos/rust-lang/rust/commits/0135bf647c266052f8428601a72a77dd51bf6437", "html_url": "https://github.com/rust-lang/rust/commit/0135bf647c266052f8428601a72a77dd51bf6437"}, {"sha": "bb367c47201c7f1acba702e49be1f4bcdf4221ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb367c47201c7f1acba702e49be1f4bcdf4221ef", "html_url": "https://github.com/rust-lang/rust/commit/bb367c47201c7f1acba702e49be1f4bcdf4221ef"}], "stats": {"total": 159, "additions": 129, "deletions": 30}, "files": [{"sha": "6fa68eb6ff1f098195d51a9f13e97e519aa30c68", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=725c9b0ede0b222cd64a8dc87cbeed052ecad157", "patch": "@@ -56,7 +56,7 @@ pub fn mk_eval_cx<'a, 'tcx>(\n     Ok(ecx)\n }\n \n-pub fn eval_body_with_mir<'a, 'mir, 'tcx>(\n+pub fn eval_promoted<'a, 'mir, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     cid: GlobalId<'tcx>,\n     mir: &'mir mir::Mir<'tcx>,\n@@ -66,7 +66,7 @@ pub fn eval_body_with_mir<'a, 'mir, 'tcx>(\n     match res {\n         Ok(val) => Some(val),\n         Err(mut err) => {\n-            ecx.report(&mut err, true, None);\n+            ecx.report(&mut err, false, None);\n             None\n         }\n     }"}, {"sha": "e0e05d6ae60ae868c18a78915173ff41974a654d", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=725c9b0ede0b222cd64a8dc87cbeed052ecad157", "patch": "@@ -19,7 +19,7 @@ pub use self::place::{Place, PlaceExtra};\n pub use self::memory::{Memory, MemoryKind, HasMemory};\n \n pub use self::const_eval::{\n-    eval_body_with_mir,\n+    eval_promoted,\n     mk_borrowck_eval_cx,\n     eval_body,\n     CompileTimeEvaluator,"}, {"sha": "610e70b39ccf994e035da02f327858e325e33d3a", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=725c9b0ede0b222cd64a8dc87cbeed052ecad157", "patch": "@@ -1177,17 +1177,15 @@ fn collect_neighbours<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         param_substs: instance.substs,\n     }.visit_mir(&mir);\n     let param_env = ty::ParamEnv::reveal_all();\n-    for (i, promoted) in mir.promoted.iter().enumerate() {\n+    for i in 0..mir.promoted.len() {\n         use rustc_data_structures::indexed_vec::Idx;\n         let cid = GlobalId {\n             instance,\n             promoted: Some(Promoted::new(i)),\n         };\n         match tcx.const_eval(param_env.and(cid)) {\n             Ok(val) => collect_const(tcx, val, instance.substs, output),\n-            Err(err) => {\n-                err.report(tcx, promoted.span, \"promoted\");\n-            }\n+            Err(_) => {},\n         }\n     }\n }"}, {"sha": "a3d96f0c0739d6b0c45191d1ba604e7b2dda155e", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=725c9b0ede0b222cd64a8dc87cbeed052ecad157", "patch": "@@ -20,7 +20,7 @@ use rustc::mir::visit::{Visitor, PlaceContext};\n use rustc::middle::const_val::ConstVal;\n use rustc::ty::{TyCtxt, self, Instance};\n use rustc::mir::interpret::{Value, PrimVal, GlobalId};\n-use interpret::{eval_body_with_mir, mk_borrowck_eval_cx, ValTy};\n+use interpret::{eval_promoted, mk_borrowck_eval_cx, ValTy};\n use transform::{MirPass, MirSource};\n use syntax::codemap::Span;\n use rustc::ty::subst::Substs;\n@@ -161,7 +161,7 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                 };\n                 // cannot use `const_eval` here, because that would require having the MIR\n                 // for the current function available, but we're producing said MIR right now\n-                let (value, _, ty) = eval_body_with_mir(self.tcx, cid, self.mir, self.param_env)?;\n+                let (value, _, ty) = eval_promoted(self.tcx, cid, self.mir, self.param_env)?;\n                 let val = (value, ty, c.span);\n                 trace!(\"evaluated {:?} to {:?}\", c, val);\n                 Some(val)"}, {"sha": "656ab95a28cf3e1730c78092260dc9ec40e9fb90", "filename": "src/librustc_trans/mir/operand.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Foperand.rs?ref=725c9b0ede0b222cd64a8dc87cbeed052ecad157", "patch": "@@ -399,7 +399,14 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                 self.mir_constant_to_miri_value(bx, constant)\n                     .and_then(|c| OperandRef::from_const(bx, c, ty))\n                     .unwrap_or_else(|err| {\n-                        err.report(bx.tcx(), constant.span, \"const operand\");\n+                        match constant.literal {\n+                            mir::Literal::Promoted { .. } => {\n+                                // don't report errors inside promoteds, just warnings.\n+                            },\n+                            mir::Literal::Value { .. } => {\n+                                err.report(bx.tcx(), constant.span, \"const operand\")\n+                            },\n+                        }\n                         // We've errored, so we don't have to produce working code.\n                         let layout = bx.cx.layout_of(ty);\n                         PlaceRef::new_sized("}, {"sha": "e059c354d65a73151a3d06d8d9b57077cc1e59dd", "filename": "src/test/ui/const-eval/conditional_array_execution.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.rs?ref=725c9b0ede0b222cd64a8dc87cbeed052ecad157", "patch": "@@ -8,11 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-pass\n+\n const X: u32 = 5;\n const Y: u32 = 6;\n const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n //~^ WARN attempt to subtract with overflow\n \n fn main() {\n-    println!(\"{}\", FOO); //~ E0080\n+    println!(\"{}\", FOO);\n+    //~^ WARN constant evaluation error\n }"}, {"sha": "fd29990fec295abd5c0d807b663020bec0c72a26", "filename": "src/test/ui/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.stderr?ref=725c9b0ede0b222cd64a8dc87cbeed052ecad157", "patch": "@@ -1,17 +1,14 @@\n warning: attempt to subtract with overflow\n-  --> $DIR/conditional_array_execution.rs:13:19\n+  --> $DIR/conditional_array_execution.rs:15:19\n    |\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n    |                   ^^^^^\n    |\n    = note: #[warn(const_err)] on by default\n \n-error[E0080]: constant evaluation error\n-  --> $DIR/conditional_array_execution.rs:17:20\n+warning: constant evaluation error\n+  --> $DIR/conditional_array_execution.rs:19:20\n    |\n-LL |     println!(\"{}\", FOO); //~ E0080\n+LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors\n \n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "b27791ef5337b7c7039d1005e2464e5b452521d5", "filename": "src/test/ui/const-eval/issue-43197.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.rs?ref=725c9b0ede0b222cd64a8dc87cbeed052ecad157", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-pass\n+\n #![feature(const_fn)]\n \n const fn foo(x: u32) -> u32 {\n@@ -20,6 +22,6 @@ fn main() {\n     const Y: u32 = foo(0-1);\n     //~^ WARN attempt to subtract with overflow\n     println!(\"{} {}\", X, Y);\n-    //~^ ERROR constant evaluation error\n-    //~| ERROR constant evaluation error\n+    //~^ WARN constant evaluation error\n+    //~| WARN constant evaluation error\n }"}, {"sha": "5da47a85eb803f3b1b79e8179d72b93856dfa020", "filename": "src/test/ui/const-eval/issue-43197.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr?ref=725c9b0ede0b222cd64a8dc87cbeed052ecad157", "patch": "@@ -1,29 +1,26 @@\n warning: attempt to subtract with overflow\n-  --> $DIR/issue-43197.rs:18:20\n+  --> $DIR/issue-43197.rs:20:20\n    |\n LL |     const X: u32 = 0-1;\n    |                    ^^^\n    |\n    = note: #[warn(const_err)] on by default\n \n-error[E0080]: constant evaluation error\n-  --> $DIR/issue-43197.rs:22:23\n+warning: constant evaluation error\n+  --> $DIR/issue-43197.rs:24:23\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                       ^ referenced constant has errors\n \n warning: attempt to subtract with overflow\n-  --> $DIR/issue-43197.rs:20:24\n+  --> $DIR/issue-43197.rs:22:24\n    |\n LL |     const Y: u32 = foo(0-1);\n    |                        ^^^\n \n-error[E0080]: constant evaluation error\n-  --> $DIR/issue-43197.rs:22:26\n+warning: constant evaluation error\n+  --> $DIR/issue-43197.rs:24:26\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n \n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "765113cfbb9e2ef8d639a1d63415b272077dc5c6", "filename": "src/test/ui/const-eval/issue-44578.rs", "status": "renamed", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.rs?ref=725c9b0ede0b222cd64a8dc87cbeed052ecad157", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-pass\n+\n trait Foo {\n     const AMT: usize;\n }\n@@ -30,5 +32,6 @@ impl Foo for u16 {\n }\n \n fn main() {\n-    println!(\"{}\", <Bar<u16, u8> as Foo>::AMT); //~ E0080\n+    println!(\"{}\", <Bar<u16, u8> as Foo>::AMT); //~ WARN const_err\n+    //~^ WARN const_err\n }", "previous_filename": "src/test/compile-fail/issue-44578.rs"}, {"sha": "01c6fa3623f8d95998e7a206978678829ef3dccc", "filename": "src/test/ui/const-eval/issue-44578.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.stderr?ref=725c9b0ede0b222cd64a8dc87cbeed052ecad157", "patch": "@@ -0,0 +1,14 @@\n+warning: constant evaluation error\n+  --> $DIR/issue-44578.rs:35:20\n+   |\n+LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT); //~ WARN const_err\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   |\n+   = note: #[warn(const_err)] on by default\n+\n+warning: constant evaluation error\n+  --> $DIR/issue-44578.rs:35:20\n+   |\n+LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT); //~ WARN const_err\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+"}, {"sha": "dc30c7f9cce041f0d8c97be8cbff3d2be1952c3b", "filename": "src/test/ui/const-eval/promoted_errors.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.rs?ref=725c9b0ede0b222cd64a8dc87cbeed052ecad157", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+// compile-flags: -O\n+fn main() {\n+    println!(\"{}\", 0u32 - 1);\n+    //~^ WARN const_err\n+    //~| WARN const_err\n+    let _x = 0u32 - 1;\n+    //~^ WARN const_err\n+    println!(\"{}\", 1/(1-1));\n+    //~^ WARN const_err\n+    //~| WARN const_err\n+    let _x = 1/(1-1);\n+    //~^ WARN const_err\n+    //~| WARN const_err\n+    println!(\"{}\", 1/(false as u32));\n+    //~^ WARN const_err\n+    let _x = 1/(false as u32);\n+}"}, {"sha": "a5db8cc908331c3ea2e01682228a7b7d0245bdfc", "filename": "src/test/ui/const-eval/promoted_errors.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/725c9b0ede0b222cd64a8dc87cbeed052ecad157/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.stderr?ref=725c9b0ede0b222cd64a8dc87cbeed052ecad157", "patch": "@@ -0,0 +1,50 @@\n+warning: constant evaluation error\n+  --> $DIR/promoted_errors.rs:14:20\n+   |\n+LL |     println!(\"{}\", 0u32 - 1);\n+   |                    ^^^^^^^^ attempted to do overflowing math\n+   |\n+   = note: #[warn(const_err)] on by default\n+\n+warning: constant evaluation error\n+  --> $DIR/promoted_errors.rs:14:20\n+   |\n+LL |     println!(\"{}\", 0u32 - 1);\n+   |                    ^^^^^^^^ attempted to do overflowing math\n+\n+warning: constant evaluation error\n+  --> $DIR/promoted_errors.rs:17:14\n+   |\n+LL |     let _x = 0u32 - 1;\n+   |              ^^^^^^^^ attempted to do overflowing math\n+\n+warning: attempt to divide by zero\n+  --> $DIR/promoted_errors.rs:19:20\n+   |\n+LL |     println!(\"{}\", 1/(1-1));\n+   |                    ^^^^^^^\n+\n+warning: constant evaluation error\n+  --> $DIR/promoted_errors.rs:19:20\n+   |\n+LL |     println!(\"{}\", 1/(1-1));\n+   |                    ^^^^^^^ attempted to do overflowing math\n+\n+warning: attempt to divide by zero\n+  --> $DIR/promoted_errors.rs:22:14\n+   |\n+LL |     let _x = 1/(1-1);\n+   |              ^^^^^^^\n+\n+warning: constant evaluation error\n+  --> $DIR/promoted_errors.rs:22:14\n+   |\n+LL |     let _x = 1/(1-1);\n+   |              ^^^^^^^ attempted to do overflowing math\n+\n+warning: constant evaluation error\n+  --> $DIR/promoted_errors.rs:25:20\n+   |\n+LL |     println!(\"{}\", 1/(false as u32));\n+   |                    ^^^^^^^^^^^^^^^^ attempted to do overflowing math\n+"}]}