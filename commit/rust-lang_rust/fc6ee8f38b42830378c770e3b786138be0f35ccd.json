{"sha": "fc6ee8f38b42830378c770e3b786138be0f35ccd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNmVlOGYzOGI0MjgzMDM3OGM3NzBlM2I3ODYxMzhiZTBmMzVjY2Q=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-09T16:05:40Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-09T16:05:40Z"}, "message": "Reduce indentation", "tree": {"sha": "9a4668ce8a9de7bbf5a7f7be0186a3df79fae6fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a4668ce8a9de7bbf5a7f7be0186a3df79fae6fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc6ee8f38b42830378c770e3b786138be0f35ccd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc6ee8f38b42830378c770e3b786138be0f35ccd", "html_url": "https://github.com/rust-lang/rust/commit/fc6ee8f38b42830378c770e3b786138be0f35ccd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc6ee8f38b42830378c770e3b786138be0f35ccd/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f517ce6f28b5d638cce4c1eccdbe63255b11420", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f517ce6f28b5d638cce4c1eccdbe63255b11420", "html_url": "https://github.com/rust-lang/rust/commit/2f517ce6f28b5d638cce4c1eccdbe63255b11420"}], "stats": {"total": 68, "additions": 33, "deletions": 35}, "files": [{"sha": "be2ad6d17389e12cc3a5e6f9c2f8ebaf016ddda9", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 33, "deletions": 35, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/fc6ee8f38b42830378c770e3b786138be0f35ccd/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6ee8f38b42830378c770e3b786138be0f35ccd/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=fc6ee8f38b42830378c770e3b786138be0f35ccd", "patch": "@@ -840,44 +840,42 @@ impl<'a> Resolver<'a> {\n         suggestion: Option<TypoSuggestion>,\n         span: Span,\n     ) -> bool {\n-        if let Some(suggestion) = suggestion {\n+        let suggestion = match suggestion {\n+            None => return false,\n             // We shouldn't suggest underscore.\n-            if suggestion.candidate == kw::Underscore {\n-                return false;\n-            }\n-\n-            let msg = format!(\n-                \"{} {} with a similar name exists\",\n-                suggestion.res.article(),\n-                suggestion.res.descr()\n-            );\n-            err.span_suggestion(\n-                span,\n-                &msg,\n-                suggestion.candidate.to_string(),\n-                Applicability::MaybeIncorrect,\n-            );\n-            let def_span = suggestion.res.opt_def_id().and_then(|def_id| match def_id.krate {\n-                LOCAL_CRATE => self.opt_span(def_id),\n-                _ => Some(\n-                    self.session\n-                        .source_map()\n-                        .guess_head_span(self.cstore().get_span_untracked(def_id, self.session)),\n+            Some(suggestion) if suggestion.candidate == kw::Underscore => return false,\n+            Some(suggestion) => suggestion,\n+        };\n+        let msg = format!(\n+            \"{} {} with a similar name exists\",\n+            suggestion.res.article(),\n+            suggestion.res.descr()\n+        );\n+        err.span_suggestion(\n+            span,\n+            &msg,\n+            suggestion.candidate.to_string(),\n+            Applicability::MaybeIncorrect,\n+        );\n+        let def_span = suggestion.res.opt_def_id().and_then(|def_id| match def_id.krate {\n+            LOCAL_CRATE => self.opt_span(def_id),\n+            _ => Some(\n+                self.session\n+                    .source_map()\n+                    .guess_head_span(self.cstore().get_span_untracked(def_id, self.session)),\n+            ),\n+        });\n+        if let Some(span) = def_span {\n+            err.span_label(\n+                self.session.source_map().guess_head_span(span),\n+                &format!(\n+                    \"similarly named {} `{}` defined here\",\n+                    suggestion.res.descr(),\n+                    suggestion.candidate.as_str(),\n                 ),\n-            });\n-            if let Some(span) = def_span {\n-                err.span_label(\n-                    self.session.source_map().guess_head_span(span),\n-                    &format!(\n-                        \"similarly named {} `{}` defined here\",\n-                        suggestion.res.descr(),\n-                        suggestion.candidate.as_str(),\n-                    ),\n-                );\n-            }\n-            return true;\n+            );\n         }\n-        false\n+        true\n     }\n \n     fn binding_description(&self, b: &NameBinding<'_>, ident: Ident, from_prelude: bool) -> String {"}]}