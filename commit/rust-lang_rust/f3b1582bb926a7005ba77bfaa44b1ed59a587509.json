{"sha": "f3b1582bb926a7005ba77bfaa44b1ed59a587509", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYjE1ODJiYjkyNmE3MDA1YmE3N2JmYWE0NGIxZWQ1OWE1ODc1MDk=", "commit": {"author": {"name": "Adrian Cruceru", "email": "cruceruadrian@gmail.com", "date": "2020-06-23T17:18:34Z"}, "committer": {"name": "Adrian Cruceru", "email": "cruceruadrian@gmail.com", "date": "2020-06-24T09:28:41Z"}, "message": "Update libunwind build process for x86_64-fortanix-unknown-sgx target", "tree": {"sha": "f57d3481c2bf205ee98ecea49319f46d7834d7e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f57d3481c2bf205ee98ecea49319f46d7834d7e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3b1582bb926a7005ba77bfaa44b1ed59a587509", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3b1582bb926a7005ba77bfaa44b1ed59a587509", "html_url": "https://github.com/rust-lang/rust/commit/f3b1582bb926a7005ba77bfaa44b1ed59a587509", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3b1582bb926a7005ba77bfaa44b1ed59a587509/comments", "author": {"login": "AdrianCX", "id": 31005609, "node_id": "MDQ6VXNlcjMxMDA1NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/31005609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdrianCX", "html_url": "https://github.com/AdrianCX", "followers_url": "https://api.github.com/users/AdrianCX/followers", "following_url": "https://api.github.com/users/AdrianCX/following{/other_user}", "gists_url": "https://api.github.com/users/AdrianCX/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdrianCX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdrianCX/subscriptions", "organizations_url": "https://api.github.com/users/AdrianCX/orgs", "repos_url": "https://api.github.com/users/AdrianCX/repos", "events_url": "https://api.github.com/users/AdrianCX/events{/privacy}", "received_events_url": "https://api.github.com/users/AdrianCX/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AdrianCX", "id": 31005609, "node_id": "MDQ6VXNlcjMxMDA1NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/31005609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdrianCX", "html_url": "https://github.com/AdrianCX", "followers_url": "https://api.github.com/users/AdrianCX/followers", "following_url": "https://api.github.com/users/AdrianCX/following{/other_user}", "gists_url": "https://api.github.com/users/AdrianCX/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdrianCX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdrianCX/subscriptions", "organizations_url": "https://api.github.com/users/AdrianCX/orgs", "repos_url": "https://api.github.com/users/AdrianCX/repos", "events_url": "https://api.github.com/users/AdrianCX/events{/privacy}", "received_events_url": "https://api.github.com/users/AdrianCX/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b1c08c68ccc2c222f84384c836b5e167e2bc241", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1c08c68ccc2c222f84384c836b5e167e2bc241", "html_url": "https://github.com/rust-lang/rust/commit/3b1c08c68ccc2c222f84384c836b5e167e2bc241"}], "stats": {"total": 113, "additions": 49, "deletions": 64}, "files": [{"sha": "5fb489cb9ac5a30ea3980dd7df93c6b88874c7de", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f3b1582bb926a7005ba77bfaa44b1ed59a587509/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b1582bb926a7005ba77bfaa44b1ed59a587509/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=f3b1582bb926a7005ba77bfaa44b1ed59a587509", "patch": "@@ -131,28 +131,8 @@ fn copy_third_party_objects(\n     compiler: &Compiler,\n     target: Interned<String>,\n ) -> Vec<(PathBuf, DependencyType)> {\n-    let libdir = builder.sysroot_libdir(*compiler, target);\n     let mut target_deps = vec![];\n \n-    // Copies libunwind.a compiled to be linked with x86_64-fortanix-unknown-sgx.\n-    //\n-    // This target needs to be linked to Fortanix's port of llvm's libunwind.\n-    // libunwind requires support for rwlock and printing to stderr,\n-    // which is provided by std for this target.\n-    if target == \"x86_64-fortanix-unknown-sgx\" {\n-        let src_path_env = \"X86_FORTANIX_SGX_LIBS\";\n-        let src =\n-            env::var(src_path_env).unwrap_or_else(|_| panic!(\"{} not found in env\", src_path_env));\n-        copy_and_stamp(\n-            builder,\n-            &*libdir,\n-            Path::new(&src),\n-            \"libunwind.a\",\n-            &mut target_deps,\n-            DependencyType::Target,\n-        );\n-    }\n-\n     if builder.config.sanitizers && compiler.stage != 0 {\n         // The sanitizers are only copied in stage1 or above,\n         // to avoid creating dependency on LLVM."}, {"sha": "b495d8c2daeb1c87ccb4cbb859b13abe3f302176", "filename": "src/ci/docker/dist-various-2/Dockerfile", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b1582bb926a7005ba77bfaa44b1ed59a587509/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/f3b1582bb926a7005ba77bfaa44b1ed59a587509/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile?ref=f3b1582bb926a7005ba77bfaa44b1ed59a587509", "patch": "@@ -105,8 +105,6 @@ ENV TARGETS=$TARGETS,nvptx64-nvidia-cuda\n ENV TARGETS=$TARGETS,armv7-unknown-linux-gnueabi\n ENV TARGETS=$TARGETS,armv7-unknown-linux-musleabi\n \n-ENV X86_FORTANIX_SGX_LIBS=\"/x86_64-fortanix-unknown-sgx/lib/\"\n-\n # As per https://bugs.launchpad.net/ubuntu/+source/gcc-defaults/+bug/1300211\n # we need asm in the search path for gcc-7 (for gnux32) but not in the search path of the\n # cross compilers."}, {"sha": "46a0ca7290999b999784e17bcb7cf7f848666cbd", "filename": "src/ci/docker/dist-various-2/build-x86_64-fortanix-unknown-sgx-toolchain.sh", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f3b1582bb926a7005ba77bfaa44b1ed59a587509/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-x86_64-fortanix-unknown-sgx-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/f3b1582bb926a7005ba77bfaa44b1ed59a587509/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-x86_64-fortanix-unknown-sgx-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-x86_64-fortanix-unknown-sgx-toolchain.sh?ref=f3b1582bb926a7005ba77bfaa44b1ed59a587509", "patch": "@@ -24,39 +24,4 @@ install_prereq() {\n             clang-11\n }\n \n-build_unwind() {\n-    set -x\n-    dir_name=\"${target}_temp\"\n-    rm -rf ${dir_name}\n-    mkdir -p ${dir_name}\n-    pushd ${dir_name}\n-\n-    # Clone Fortanix's fork of llvm-project which has a port of libunwind\n-    fetch_github_commit_archive \"$repo_name\" \"$url\"\n-    cd \"${repo_name}/libunwind\"\n-\n-    # Build libunwind\n-    mkdir -p build\n-    cd build\n-    target_CC=\"CC_${target//-/_}\"\n-    target_CXX=\"CXX_${target//-/_}\"\n-    target_CFLAGS=\"CFLAGS_${target//-/_}\"\n-    target_CXXFLAGS=\"CXXFLAGS_${target//-/_}\"\n-    cmake -DCMAKE_BUILD_TYPE=\"RELEASE\" -DRUST_SGX=1 -G \"Unix Makefiles\" \\\n-        -DCMAKE_C_COMPILER=\"${!target_CC}\" -DCMAKE_CXX_COMPILER=\"${!target_CXX}\" \\\n-        -DCMAKE_C_FLAGS=\"${!target_CFLAGS}\" -DCMAKE_CXX_FLAGS=\"${!target_CXXFLAGS}\" \\\n-        -DCMAKE_C_COMPILER_TARGET=$target -DCMAKE_CXX_COMPILER_TARGET=$target \\\n-        -DLLVM_ENABLE_WARNINGS=1 -DLIBUNWIND_ENABLE_WERROR=1 -DLIBUNWIND_ENABLE_PEDANTIC=0 \\\n-        -DLLVM_PATH=../../llvm/ ../\n-    make unwind_static\n-    install -D \"lib/libunwind.a\" \"/${target}/lib/libunwind.a\"\n-\n-    popd\n-    rm -rf ${dir_name}\n-\n-    { set +x; } 2>/dev/null\n-}\n-\n-set -x\n hide_output install_prereq\n-build_unwind"}, {"sha": "d01545619c8fa22527adc559943cd8a00301eef4", "filename": "src/librustc_target/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3b1582bb926a7005ba77bfaa44b1ed59a587509/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b1582bb926a7005ba77bfaa44b1ed59a587509/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=f3b1582bb926a7005ba77bfaa44b1ed59a587509", "patch": "@@ -48,8 +48,10 @@ pub fn target() -> Result<Target, String> {\n         \"ENCLAVE_SIZE\",\n         \"CFGDATA_BASE\",\n         \"DEBUG\",\n-        \"EH_FRM_HDR_BASE\",\n-        \"EH_FRM_HDR_SIZE\",\n+        \"EH_FRM_HDR_OFFSET\",\n+        \"EH_FRM_HDR_LEN\",\n+        \"EH_FRM_OFFSET\",\n+        \"EH_FRM_LEN\",\n         \"TEXT_BASE\",\n         \"TEXT_SIZE\",\n     ];"}, {"sha": "f61bcf06f081550abac509e657e152f80edac9b7", "filename": "src/libstd/sys/sgx/abi/entry.S", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f3b1582bb926a7005ba77bfaa44b1ed59a587509/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S", "raw_url": "https://github.com/rust-lang/rust/raw/f3b1582bb926a7005ba77bfaa44b1ed59a587509/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S?ref=f3b1582bb926a7005ba77bfaa44b1ed59a587509", "patch": "@@ -11,7 +11,7 @@ IMAGE_BASE:\n     .long 1                    /* type = NT_VERSION */\n 0:  .asciz \"toolchain-version\" /* name */\n 1:  .align 4\n-2:  .long 0                    /* desc - toolchain version number, 32-bit LE */\n+2:  .long 1                    /* desc - toolchain version number, 32-bit LE */\n 3:  .align 4\n \n .section .rodata\n@@ -60,10 +60,14 @@ IMAGE_BASE:\n     globvar TEXT_BASE 8\n     /*  The size in bytes of enclacve text section */\n     globvar TEXT_SIZE 8\n-    /*  The base address (relative to enclave start) of the enclave EH_FRM_HDR section */\n-    globvar EH_FRM_HDR_BASE 8\n-    /*  The size in bytes of enclacve EH_FRM_HDR section */\n-    globvar EH_FRM_HDR_SIZE 8\n+    /*  The base address (relative to enclave start) of the enclave .eh_frame_hdr section */\n+    globvar EH_FRM_HDR_OFFSET 8\n+    /*  The size in bytes of enclave .eh_frame_hdr section */\n+    globvar EH_FRM_HDR_LEN 8\n+    /*  The base address (relative to enclave start) of the enclave .eh_frame section */\n+    globvar EH_FRM_OFFSET 8\n+    /*  The size in bytes of enclacve .eh_frame section */\n+    globvar EH_FRM_LEN 8\n \n .org .Lxsave_clear+512\n .Lxsave_header:"}, {"sha": "31d235cf679db1ff072ce923f089f923b5004293", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f3b1582bb926a7005ba77bfaa44b1ed59a587509/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b1582bb926a7005ba77bfaa44b1ed59a587509/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=f3b1582bb926a7005ba77bfaa44b1ed59a587509", "patch": "@@ -9,6 +9,8 @@ fn main() {\n     {\n         // Build the unwinding from libunwind C/C++ source code.\n         llvm_libunwind::compile();\n+    } else if target.contains(\"x86_64-fortanix-unknown-sgx\") {\n+        llvm_libunwind::compile();\n     } else if target.contains(\"linux\") {\n         if target.contains(\"musl\") {\n             // linking for musl is handled in lib.rs\n@@ -55,6 +57,7 @@ mod llvm_libunwind {\n \n     /// Compile the libunwind C/C++ source code.\n     pub fn compile() {\n+        let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n         let target_env = env::var(\"CARGO_CFG_TARGET_ENV\").unwrap();\n         let target_vendor = env::var(\"CARGO_CFG_TARGET_VENDOR\").unwrap();\n         let target_endian_little = env::var(\"CARGO_CFG_TARGET_ENDIAN\").unwrap() != \"big\";\n@@ -75,6 +78,35 @@ mod llvm_libunwind {\n             cfg.flag(\"/EHsc\");\n             cfg.define(\"_CRT_SECURE_NO_WARNINGS\", None);\n             cfg.define(\"_LIBUNWIND_DISABLE_VISIBILITY_ANNOTATIONS\", None);\n+        } else if target.contains(\"x86_64-fortanix-unknown-sgx\") {\n+            cfg.cpp(false);\n+\n+            cfg.static_flag(true);\n+            cfg.opt_level(3);\n+\n+            cfg.flag(\"-nostdinc++\");\n+            cfg.flag(\"-fno-exceptions\");\n+            cfg.flag(\"-fno-rtti\");\n+            cfg.flag(\"-fstrict-aliasing\");\n+            cfg.flag(\"-funwind-tables\");\n+            cfg.flag(\"-fvisibility=hidden\");\n+            cfg.flag(\"-fno-stack-protector\");\n+            cfg.flag(\"-ffreestanding\");\n+            cfg.flag(\"-fexceptions\");\n+\n+            // easiest way to undefine since no API available in cc::Build to undefine\n+            cfg.flag(\"-U_FORTIFY_SOURCE\");\n+            cfg.define(\"_FORTIFY_SOURCE\", \"0\");\n+\n+            cfg.flag_if_supported(\"-fvisibility-global-new-delete-hidden\");\n+\n+            cfg.define(\"_LIBUNWIND_DISABLE_VISIBILITY_ANNOTATIONS\", None);\n+            cfg.define(\"RUST_SGX\", \"1\");\n+            cfg.define(\"__NO_STRING_INLINES\", None);\n+            cfg.define(\"__NO_MATH_INLINES\", None);\n+            cfg.define(\"_LIBUNWIND_IS_BAREMETAL\", None);\n+            cfg.define(\"__LIBUNWIND_IS_NATIVE_ONLY\", None);\n+            cfg.define(\"NDEBUG\", None);\n         } else {\n             cfg.flag(\"-std=c99\");\n             cfg.flag(\"-std=c++11\");\n@@ -103,6 +135,10 @@ mod llvm_libunwind {\n             unwind_sources.push(\"Unwind_AppleExtras.cpp\");\n         }\n \n+        if target.contains(\"x86_64-fortanix-unknown-sgx\") {\n+            unwind_sources.push(\"UnwindRustSgx.c\");\n+        }\n+\n         let root = Path::new(\"../llvm-project/libunwind\");\n         cfg.include(root.join(\"include\"));\n         for src in unwind_sources {"}]}