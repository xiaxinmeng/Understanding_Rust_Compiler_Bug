{"sha": "941af7be24a5c54fd24ba9f0276b97d2c3b53748", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MWFmN2JlMjRhNWM1NGZkMjRiYTlmMDI3NmI5N2QyYzNiNTM3NDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-18T08:54:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-18T08:54:35Z"}, "message": "Auto merge of #26389 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #26314, #26342, #26348, #26349, #26369, #26387\n- Failed merges:", "tree": {"sha": "ebca6637019ba76a7ccfe93ee3dfc3706865462b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebca6637019ba76a7ccfe93ee3dfc3706865462b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/941af7be24a5c54fd24ba9f0276b97d2c3b53748", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/941af7be24a5c54fd24ba9f0276b97d2c3b53748", "html_url": "https://github.com/rust-lang/rust/commit/941af7be24a5c54fd24ba9f0276b97d2c3b53748", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/941af7be24a5c54fd24ba9f0276b97d2c3b53748/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b20728c0de65f38aa367e4e308c65897ea51e515", "url": "https://api.github.com/repos/rust-lang/rust/commits/b20728c0de65f38aa367e4e308c65897ea51e515", "html_url": "https://github.com/rust-lang/rust/commit/b20728c0de65f38aa367e4e308c65897ea51e515"}, {"sha": "2424800453009044423d2ef95d5d13c1c3486897", "url": "https://api.github.com/repos/rust-lang/rust/commits/2424800453009044423d2ef95d5d13c1c3486897", "html_url": "https://github.com/rust-lang/rust/commit/2424800453009044423d2ef95d5d13c1c3486897"}], "stats": {"total": 93, "additions": 45, "deletions": 48}, "files": [{"sha": "a3e13acccae28acf9c5cb5de71ceea4f55099528", "filename": "src/doc/reference.md", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/941af7be24a5c54fd24ba9f0276b97d2c3b53748/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/941af7be24a5c54fd24ba9f0276b97d2c3b53748/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=941af7be24a5c54fd24ba9f0276b97d2c3b53748", "patch": "@@ -944,9 +944,20 @@ fn foo<T>(x: T) where T: Debug {\n ```\n \n When a generic function is referenced, its type is instantiated based on the\n-context of the reference. For example, calling the `iter` function defined\n-above on `[1, 2]` will instantiate type parameter `T` with `i32`, and require\n-the closure parameter to have type `Fn(i32)`.\n+context of the reference. For example, calling the `foo` function here:\n+\n+```\n+use std::fmt::Debug;\n+\n+fn foo<T>(x: &[T]) where T: Debug {\n+    // details elided\n+    # ()\n+}\n+\n+foo(&[1, 2]);\n+```\n+\n+will instantiate type parameter `T` with `i32`.\n \n The type parameters can also be explicitly supplied in a trailing\n [path](#paths) component after the function name. This might be necessary if\n@@ -2768,22 +2779,24 @@ meaning of the operators on standard types is given here.\n Like the [arithmetic operators](#arithmetic-operators), bitwise operators are\n syntactic sugar for calls to methods of built-in traits. This means that\n bitwise operators can be overridden for user-defined types. The default\n-meaning of the operators on standard types is given here.\n+meaning of the operators on standard types is given here. Bitwise `&`, `|` and\n+`^` applied to boolean arguments are equivalent to logical `&&`, `||` and `!=`\n+evaluated in non-lazy fashion.\n \n * `&`\n-  : And.\n+  : Bitwise AND.\n     Calls the `bitand` method of the `std::ops::BitAnd` trait.\n * `|`\n-  : Inclusive or.\n+  : Bitwise inclusive OR.\n     Calls the `bitor` method of the `std::ops::BitOr` trait.\n * `^`\n-  : Exclusive or.\n+  : Bitwise exclusive OR.\n     Calls the `bitxor` method of the `std::ops::BitXor` trait.\n * `<<`\n   : Left shift.\n     Calls the `shl` method of the `std::ops::Shl` trait.\n * `>>`\n-  : Right shift.\n+  : Right shift (arithmetic).\n     Calls the `shr` method of the `std::ops::Shr` trait.\n \n #### Lazy boolean operators"}, {"sha": "9d0a1821debc12185f455785d6e29068ec290f97", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/941af7be24a5c54fd24ba9f0276b97d2c3b53748/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/941af7be24a5c54fd24ba9f0276b97d2c3b53748/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=941af7be24a5c54fd24ba9f0276b97d2c3b53748", "patch": "@@ -65,7 +65,6 @@ pub use self::InteriorKind::*;\n pub use self::FieldName::*;\n pub use self::ElementKind::*;\n pub use self::MutabilityCategory::*;\n-pub use self::InteriorSafety::*;\n pub use self::AliasableReason::*;\n pub use self::Note::*;\n pub use self::deref_kind::*;\n@@ -1385,12 +1384,6 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug)]\n-pub enum InteriorSafety {\n-    InteriorUnsafe,\n-    InteriorSafe\n-}\n-\n #[derive(Clone, Debug)]\n pub enum Aliasability {\n     FreelyAliasable(AliasableReason),\n@@ -1404,8 +1397,8 @@ pub enum AliasableReason {\n     AliasableClosure(ast::NodeId), // Aliasable due to capture Fn closure env\n     AliasableOther,\n     UnaliasableImmutable, // Created as needed upon seeing ImmutableUnique\n-    AliasableStatic(InteriorSafety),\n-    AliasableStaticMut(InteriorSafety),\n+    AliasableStatic,\n+    AliasableStaticMut,\n }\n \n impl<'tcx> cmt_<'tcx> {\n@@ -1469,16 +1462,10 @@ impl<'tcx> cmt_<'tcx> {\n             }\n \n             cat_static_item(..) => {\n-                let int_safe = if ty::type_interior_is_unsafe(ctxt, self.ty) {\n-                    InteriorUnsafe\n-                } else {\n-                    InteriorSafe\n-                };\n-\n                 if self.mutbl.is_mutable() {\n-                    FreelyAliasable(AliasableStaticMut(int_safe))\n+                    FreelyAliasable(AliasableStaticMut)\n                 } else {\n-                    FreelyAliasable(AliasableStatic(int_safe))\n+                    FreelyAliasable(AliasableStatic)\n                 }\n             }\n "}, {"sha": "f5fcb72c5c1c9ccff7f57462b39da4ce0734a987", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/941af7be24a5c54fd24ba9f0276b97d2c3b53748/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/941af7be24a5c54fd24ba9f0276b97d2c3b53748/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=941af7be24a5c54fd24ba9f0276b97d2c3b53748", "patch": "@@ -3787,10 +3787,6 @@ impl fmt::Debug for TypeContents {\n     }\n }\n \n-pub fn type_interior_is_unsafe<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n-    type_contents(cx, ty).interior_unsafe()\n-}\n-\n pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n     return memoized(&cx.tc_cache, ty, |ty| {\n         tc_ty(cx, ty, &mut FnvHashMap())"}, {"sha": "012e01507de72ba10a8de9f761b5be5770025c1e", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/941af7be24a5c54fd24ba9f0276b97d2c3b53748/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/941af7be24a5c54fd24ba9f0276b97d2c3b53748/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=941af7be24a5c54fd24ba9f0276b97d2c3b53748", "patch": "@@ -191,23 +191,11 @@ fn check_aliasability<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n             /* Uniquely accessible path -- OK for `&` and `&mut` */\n             Ok(())\n         }\n-        (mc::Aliasability::FreelyAliasable(mc::AliasableStatic(safety)), ty::ImmBorrow) => {\n-            // Borrow of an immutable static item:\n-            match safety {\n-                mc::InteriorUnsafe => {\n-                    // If the static item contains an Unsafe<T>, it has interior\n-                    // mutability.  In such cases, another phase of the compiler\n-                    // will ensure that the type is `Sync` and then trans will\n-                    // not put it in rodata, so this is ok to allow.\n-                    Ok(())\n-                }\n-                mc::InteriorSafe => {\n-                    // Immutable static can be borrowed, no problem.\n-                    Ok(())\n-                }\n-            }\n+        (mc::Aliasability::FreelyAliasable(mc::AliasableStatic), ty::ImmBorrow) => {\n+            // Borrow of an immutable static item.\n+            Ok(())\n         }\n-        (mc::Aliasability::FreelyAliasable(mc::AliasableStaticMut(..)), _) => {\n+        (mc::Aliasability::FreelyAliasable(mc::AliasableStaticMut), _) => {\n             // Even touching a static mut is considered unsafe. We assume the\n             // user knows what they're doing in these cases.\n             Ok(())"}, {"sha": "1da3bb7c5b38a31899b8410eab65a7d89e5611bc", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/941af7be24a5c54fd24ba9f0276b97d2c3b53748/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/941af7be24a5c54fd24ba9f0276b97d2c3b53748/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=941af7be24a5c54fd24ba9f0276b97d2c3b53748", "patch": "@@ -66,7 +66,7 @@\n //! ### Use a `BTreeMap` when:\n //! * You're interested in what the smallest or largest key-value pair is.\n //! * You want to find the largest or smallest key that is smaller or larger\n-//!   than something\n+//!   than something.\n //! * You want to be able to get all of the entries in order on-demand.\n //! * You want a sorted map.\n //!\n@@ -147,7 +147,7 @@\n //! relation to the number of elements in the collection.  VecMap should only be\n //! seriously considered for small keys.\n //!\n-//! Note also that BTreeMap's precise preformance depends on the value of B.\n+//! Note also that BTreeMap's precise performance depends on the value of B.\n //!\n //! # Correct and Efficient Usage of Collections\n //!\n@@ -309,7 +309,7 @@\n //! If a `Vacant(entry)` is yielded, then the key *was not* found. In this case\n //! the only valid operation is to `insert` a value into the entry. When this is\n //! done, the vacant entry is consumed and converted into a mutable reference to\n-//! the the value that was inserted. This allows for further manipulation of the\n+//! the value that was inserted. This allows for further manipulation of the\n //! value beyond the lifetime of the search itself. This is useful if complex\n //! logic needs to be performed on the value regardless of whether the value was\n //! just inserted."}, {"sha": "4e6f9b321bab4132b32237c7ccfd827870be18c7", "filename": "src/test/run-pass/issue-25180.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/941af7be24a5c54fd24ba9f0276b97d2c3b53748/src%2Ftest%2Frun-pass%2Fissue-25180.rs", "raw_url": "https://github.com/rust-lang/rust/raw/941af7be24a5c54fd24ba9f0276b97d2c3b53748/src%2Ftest%2Frun-pass%2Fissue-25180.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-25180.rs?ref=941af7be24a5c54fd24ba9f0276b97d2c3b53748", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const x: &'static Fn() = &|| println!(\"ICE here\");\n+\n+fn main() {}"}]}