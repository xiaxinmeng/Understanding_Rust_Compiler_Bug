{"sha": "2b4124684e26708038b6678a38fcfbeeecb90c6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiNDEyNDY4NGUyNjcwODAzOGI2Njc4YTM4ZmNmYmVlZWNiOTBjNmU=", "commit": {"author": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2015-08-01T14:14:45Z"}, "committer": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2015-08-01T14:14:45Z"}, "message": "Store and use crate-local paths to extern crates", "tree": {"sha": "9cfd9a2150370d1b30d07fb99957cfd89a56fddb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cfd9a2150370d1b30d07fb99957cfd89a56fddb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b4124684e26708038b6678a38fcfbeeecb90c6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b4124684e26708038b6678a38fcfbeeecb90c6e", "html_url": "https://github.com/rust-lang/rust/commit/2b4124684e26708038b6678a38fcfbeeecb90c6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b4124684e26708038b6678a38fcfbeeecb90c6e/comments", "author": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a98fd112281a2e5681a8023b421a52e98ea39eb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a98fd112281a2e5681a8023b421a52e98ea39eb5", "html_url": "https://github.com/rust-lang/rust/commit/a98fd112281a2e5681a8023b421a52e98ea39eb5"}], "stats": {"total": 46, "additions": 39, "deletions": 7}, "files": [{"sha": "f4561d68906fe09e7b10e23a2eac9508f1f83bf1", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b4124684e26708038b6678a38fcfbeeecb90c6e/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b4124684e26708038b6678a38fcfbeeecb90c6e/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=2b4124684e26708038b6678a38fcfbeeecb90c6e", "patch": "@@ -34,6 +34,7 @@ use syntax::codemap::{self, Span, mk_sp, Pos};\n use syntax::parse;\n use syntax::parse::token::InternedString;\n use syntax::visit;\n+use syntax::util::small_vector::SmallVector;\n use ast_map;\n use log;\n \n@@ -263,6 +264,7 @@ impl<'a> CrateReader<'a> {\n \n         let cmeta = Rc::new( cstore::crate_metadata {\n             name: name.to_string(),\n+            local_path: RefCell::new(SmallVector::zero()),\n             data: metadata,\n             cnum_map: cnum_map,\n             cnum: cnum,\n@@ -520,12 +522,14 @@ impl<'a, 'b> LocalCrateReader<'a, 'b> {\n \n                 match self.creader.extract_crate_info(i) {\n                     Some(info) => {\n-                        let (cnum, _, _) = self.creader.resolve_crate(&None,\n+                        let (cnum, cmeta, _) = self.creader.resolve_crate(&None,\n                                                               &info.ident,\n                                                               &info.name,\n                                                               None,\n                                                               i.span,\n                                                               PathKind::Crate);\n+                        self.ast_map.with_path(i.id, |path|\n+                            cmeta.update_local_path(path));\n                         self.sess.cstore.add_extern_mod_stmt_cnum(info.id, cnum);\n                     }\n                     None => ()"}, {"sha": "21d5dac7e5ddb13d97d88bfde4e3ae1914d55120", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2b4124684e26708038b6678a38fcfbeeecb90c6e/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b4124684e26708038b6678a38fcfbeeecb90c6e/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=2b4124684e26708038b6678a38fcfbeeecb90c6e", "patch": "@@ -24,7 +24,6 @@ use syntax::ast;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n use syntax::diagnostic::expect;\n-use syntax::parse::token;\n \n use std::collections::hash_map::HashMap;\n \n@@ -89,11 +88,12 @@ pub fn get_item_path(tcx: &ty::ctxt, def: ast::DefId) -> Vec<ast_map::PathElem>\n     let cdata = cstore.get_crate_data(def.krate);\n     let path = decoder::get_item_path(&*cdata, def.node);\n \n-    // FIXME #1920: This path is not always correct if the crate is not linked\n-    // into the root namespace.\n-    let mut r = vec![ast_map::PathMod(token::intern(&cdata.name))];\n-    r.push_all(&path);\n-    r\n+    cdata.with_local_path(|cpath| {\n+        let mut r = Vec::with_capacity(cpath.len() + path.len());\n+        r.push_all(cpath);\n+        r.push_all(&path);\n+        r\n+    })\n }\n \n pub enum FoundAst<'ast> {"}, {"sha": "08c05b768625b0687ddf4b376195825b0d2c5d7f", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2b4124684e26708038b6678a38fcfbeeecb90c6e/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b4124684e26708038b6678a38fcfbeeecb90c6e/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=2b4124684e26708038b6678a38fcfbeeecb90c6e", "patch": "@@ -28,7 +28,10 @@ use std::path::PathBuf;\n use flate::Bytes;\n use syntax::ast;\n use syntax::codemap;\n+use syntax::parse::token;\n use syntax::parse::token::IdentInterner;\n+use syntax::util::small_vector::SmallVector;\n+use ast_map;\n \n // A map from external crate numbers (as decoded from some crate file) to\n // local crate numbers (as generated during this session). Each external\n@@ -54,6 +57,7 @@ pub struct ImportedFileMap {\n \n pub struct crate_metadata {\n     pub name: String,\n+    pub local_path: RefCell<SmallVector<ast_map::PathElem>>,\n     pub data: MetadataBlob,\n     pub cnum_map: cnum_map,\n     pub cnum: ast::CrateNum,\n@@ -255,6 +259,30 @@ impl crate_metadata {\n             filemaps\n         }\n     }\n+    pub fn with_local_path<T, F>(&self, f: F) -> T\n+    where F: Fn(&[ast_map::PathElem]) -> T {\n+        let cpath = self.local_path.borrow();\n+        if cpath.is_empty() {\n+            let name = ast_map::PathMod(token::intern(&self.name));\n+            f(&[name])\n+        } else {\n+            f(cpath.as_slice())\n+        }\n+    }\n+    pub fn update_local_path<'a, 'b>(&self, candidate: ast_map::PathElems<'a, 'b>) {\n+        let mut cpath = self.local_path.borrow_mut();\n+        let cap = cpath.len();\n+        match cap {\n+            0 => *cpath = candidate.collect(),\n+            1 => (),\n+            _ => {\n+                let candidate: SmallVector<_> = candidate.collect();\n+                if candidate.len() < cap {\n+                    *cpath = candidate;\n+                }\n+            },\n+        }\n+    }\n }\n \n impl MetadataBlob {"}]}