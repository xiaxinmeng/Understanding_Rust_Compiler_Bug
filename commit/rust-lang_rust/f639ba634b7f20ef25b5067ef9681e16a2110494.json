{"sha": "f639ba634b7f20ef25b5067ef9681e16a2110494", "node_id": "C_kwDOAAsO6NoAKGY2MzliYTYzNGI3ZjIwZWYyNWI1MDY3ZWY5NjgxZTE2YTIxMTA0OTQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-21T18:36:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-21T18:36:50Z"}, "message": "Rollup merge of #94189 - GuillaumeGomez:scalar-lower-hex, r=RalfJung\n\nImplement LowerHex on Scalar to clean up their display in rustdoc\n\nFollow-up of https://github.com/rust-lang/rust/pull/94091.\n\nr? ````@RalfJung````", "tree": {"sha": "8f13e9902f20339f796c336bd4c61bf6493d1d16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f13e9902f20339f796c336bd4c61bf6493d1d16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f639ba634b7f20ef25b5067ef9681e16a2110494", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiE9vDCRBK7hj4Ov3rIwAAom0IAJHTe3v8vtrg6FdtgmzqgjNp\n+KSeusVaMJcznPil6sxzOmTgWIzr9gL5KzJyuHsAAkz4AxMcIY+ApDwX+HeH6/bO\n18Pu/x3sS4d+UB1RE2LOnaexFHtQjk37oTht2WJgtTMbF4D5pthUxXOY9VzU4O/0\nOdCL5oEsmIQwNd3NK9rdNioxfzCzPa1L71+xRwu+3xi6+52koq106s6HQ+EAlar0\ndoS4KX5IJIkQwH/2je6d++rwe3TBqeZdYUc3ZRqMHbtlSy+7Bn+aINVjgdfMICfy\n4MieOpirSgHmoBrBZNSkn6Tbdcjt+++MwUdUE2vZPSPy7p8z7Bsp/7uHrvbl22M=\n=teKD\n-----END PGP SIGNATURE-----\n", "payload": "tree 8f13e9902f20339f796c336bd4c61bf6493d1d16\nparent 74cb6b77a00c46a7deb2707dfafa5ea28eb5e83f\nparent c358ffe7b378923830937c2317efd5e0763b96e3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645468610 +0100\ncommitter GitHub <noreply@github.com> 1645468610 +0100\n\nRollup merge of #94189 - GuillaumeGomez:scalar-lower-hex, r=RalfJung\n\nImplement LowerHex on Scalar to clean up their display in rustdoc\n\nFollow-up of https://github.com/rust-lang/rust/pull/94091.\n\nr? ````@RalfJung````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f639ba634b7f20ef25b5067ef9681e16a2110494", "html_url": "https://github.com/rust-lang/rust/commit/f639ba634b7f20ef25b5067ef9681e16a2110494", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f639ba634b7f20ef25b5067ef9681e16a2110494/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74cb6b77a00c46a7deb2707dfafa5ea28eb5e83f", "url": "https://api.github.com/repos/rust-lang/rust/commits/74cb6b77a00c46a7deb2707dfafa5ea28eb5e83f", "html_url": "https://github.com/rust-lang/rust/commit/74cb6b77a00c46a7deb2707dfafa5ea28eb5e83f"}, {"sha": "c358ffe7b378923830937c2317efd5e0763b96e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c358ffe7b378923830937c2317efd5e0763b96e3", "html_url": "https://github.com/rust-lang/rust/commit/c358ffe7b378923830937c2317efd5e0763b96e3"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "19c6449078d5b236d9a6b40b22ad6eae0ad8c098", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f639ba634b7f20ef25b5067ef9681e16a2110494/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f639ba634b7f20ef25b5067ef9681e16a2110494/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=f639ba634b7f20ef25b5067ef9681e16a2110494", "patch": "@@ -697,7 +697,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                 this.ecx.read_discriminant(op),\n                 this.path,\n                 err_ub!(InvalidTag(val)) =>\n-                    { \"{}\", val } expected { \"a valid enum tag\" },\n+                    { \"{:x}\", val } expected { \"a valid enum tag\" },\n                 err_ub!(InvalidUninitBytes(None)) =>\n                     { \"uninitialized bytes\" } expected { \"a valid enum tag\" },\n                 err_unsup!(ReadPointerAsBytes) =>"}, {"sha": "c5866924eda43d2408b7a5a9a0d804779f095560", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f639ba634b7f20ef25b5067ef9681e16a2110494/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f639ba634b7f20ef25b5067ef9681e16a2110494/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=f639ba634b7f20ef25b5067ef9681e16a2110494", "patch": "@@ -370,7 +370,7 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n             InvalidChar(c) => {\n                 write!(f, \"interpreting an invalid 32-bit value as a char: 0x{:08x}\", c)\n             }\n-            InvalidTag(val) => write!(f, \"enum value has invalid tag: {}\", val),\n+            InvalidTag(val) => write!(f, \"enum value has invalid tag: {:x}\", val),\n             InvalidFunctionPointer(p) => {\n                 write!(f, \"using {:?} as function pointer but it does not point to a function\", p)\n             }"}, {"sha": "abcf416109ba65197019957622d85102f61d70a6", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f639ba634b7f20ef25b5067ef9681e16a2110494/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f639ba634b7f20ef25b5067ef9681e16a2110494/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=f639ba634b7f20ef25b5067ef9681e16a2110494", "patch": "@@ -153,7 +153,16 @@ impl<Tag: Provenance> fmt::Display for Scalar<Tag> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             Scalar::Ptr(ptr, _size) => write!(f, \"pointer to {:?}\", ptr),\n-            Scalar::Int(int) => write!(f, \"{:?}\", int),\n+            Scalar::Int(int) => write!(f, \"{}\", int),\n+        }\n+    }\n+}\n+\n+impl<Tag: Provenance> fmt::LowerHex for Scalar<Tag> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Scalar::Ptr(ptr, _size) => write!(f, \"pointer to {:?}\", ptr),\n+            Scalar::Int(int) => write!(f, \"0x{:x}\", int),\n         }\n     }\n }\n@@ -456,11 +465,6 @@ impl<'tcx, Tag: Provenance> Scalar<Tag> {\n         // Going through `u64` to check size and truncation.\n         Ok(Double::from_bits(self.to_u64()?.into()))\n     }\n-\n-    // FIXME: Replace current `impl Display for Scalar` with `impl LowerHex`.\n-    pub fn rustdoc_display(&self) -> String {\n-        if let Scalar::Int(int) = self { int.to_string() } else { self.to_string() }\n-    }\n }\n \n #[derive(Clone, Copy, Eq, PartialEq, TyEncodable, TyDecodable, HashStable, Hash)]\n@@ -494,7 +498,7 @@ impl<Tag: Provenance> fmt::Display for ScalarMaybeUninit<Tag> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             ScalarMaybeUninit::Uninit => write!(f, \"uninitialized bytes\"),\n-            ScalarMaybeUninit::Scalar(s) => write!(f, \"{}\", s),\n+            ScalarMaybeUninit::Scalar(s) => write!(f, \"{:x}\", s),\n         }\n     }\n }"}, {"sha": "1d312df1f785890522d1bc0fa700a7d79fbe4a95", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f639ba634b7f20ef25b5067ef9681e16a2110494/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f639ba634b7f20ef25b5067ef9681e16a2110494/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=f639ba634b7f20ef25b5067ef9681e16a2110494", "patch": "@@ -302,11 +302,7 @@ fn print_const_with_custom_print_scalar(tcx: TyCtxt<'_>, ct: ty::Const<'_>) -> S\n     // For all other types, fallback to the original `pretty_print_const`.\n     match (ct.val(), ct.ty().kind()) {\n         (ty::ConstKind::Value(ConstValue::Scalar(int)), ty::Uint(ui)) => {\n-            format!(\n-                \"{}{}\",\n-                format_integer_with_underscore_sep(&int.rustdoc_display()),\n-                ui.name_str()\n-            )\n+            format!(\"{}{}\", format_integer_with_underscore_sep(&int.to_string()), ui.name_str())\n         }\n         (ty::ConstKind::Value(ConstValue::Scalar(int)), ty::Int(i)) => {\n             let ty = tcx.lift(ct.ty()).unwrap();"}]}