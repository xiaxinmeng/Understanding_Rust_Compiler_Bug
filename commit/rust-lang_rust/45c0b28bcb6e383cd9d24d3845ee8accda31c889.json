{"sha": "45c0b28bcb6e383cd9d24d3845ee8accda31c889", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YzBiMjhiY2I2ZTM4M2NkOWQyNGQzODQ1ZWU4YWNjZGEzMWM4ODk=", "commit": {"author": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2019-02-11T01:34:24Z"}, "committer": {"name": "CrLF0710", "email": "crlf0710@gmail.com", "date": "2019-04-04T18:27:05Z"}, "message": "Remove FnBox specialization of impl FnOnce for Box<impl FnOnce>.", "tree": {"sha": "4bd485ac20f3d0bbc2921abe2492245324c315d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bd485ac20f3d0bbc2921abe2492245324c315d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45c0b28bcb6e383cd9d24d3845ee8accda31c889", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45c0b28bcb6e383cd9d24d3845ee8accda31c889", "html_url": "https://github.com/rust-lang/rust/commit/45c0b28bcb6e383cd9d24d3845ee8accda31c889", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45c0b28bcb6e383cd9d24d3845ee8accda31c889/comments", "author": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a38f29272ef4d04f0cc77e4f8d4fa5fac7ed746d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a38f29272ef4d04f0cc77e4f8d4fa5fac7ed746d", "html_url": "https://github.com/rust-lang/rust/commit/a38f29272ef4d04f0cc77e4f8d4fa5fac7ed746d"}], "stats": {"total": 42, "additions": 1, "deletions": 41}, "files": [{"sha": "d4fe8be36d6f50b2e6175093f2d54dc77d47478d", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b28bcb6e383cd9d24d3845ee8accda31c889/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b28bcb6e383cd9d24d3845ee8accda31c889/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=45c0b28bcb6e383cd9d24d3845ee8accda31c889", "patch": "@@ -700,7 +700,7 @@ impl<I: FusedIterator + ?Sized> FusedIterator for Box<I> {}\n impl<A, F: FnOnce<A> + ?Sized> FnOnce<A> for Box<F> {\n     type Output = <F as FnOnce<A>>::Output;\n \n-    default extern \"rust-call\" fn call_once(self, args: A) -> Self::Output {\n+    extern \"rust-call\" fn call_once(self, args: A) -> Self::Output {\n         <F as FnOnce<A>>::call_once(*self, args)\n     }\n }\n@@ -777,22 +777,6 @@ impl<A, F> FnBox<A> for F\n     }\n }\n \n-#[unstable(feature = \"fnbox\",\n-           reason = \"will be deprecated if and when `Box<FnOnce>` becomes usable\", issue = \"28796\")]\n-impl<A, R> FnOnce<A> for Box<dyn FnBox<A, Output = R> + '_> {\n-    extern \"rust-call\" fn call_once(self, args: A) -> R {\n-        self.call_box(args)\n-    }\n-}\n-\n-#[unstable(feature = \"fnbox\",\n-           reason = \"will be deprecated if and when `Box<FnOnce>` becomes usable\", issue = \"28796\")]\n-impl<A, R> FnOnce<A> for Box<dyn FnBox<A, Output = R> + Send + '_> {\n-    extern \"rust-call\" fn call_once(self, args: A) -> R {\n-        self.call_box(args)\n-    }\n-}\n-\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Box<U>> for Box<T> {}\n "}, {"sha": "c2c385e9fea569068eab9b545b9db0789f687246", "filename": "src/test/ui/unsized-locals/fnbox-compat.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a38f29272ef4d04f0cc77e4f8d4fa5fac7ed746d/src%2Ftest%2Fui%2Funsized-locals%2Ffnbox-compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38f29272ef4d04f0cc77e4f8d4fa5fac7ed746d/src%2Ftest%2Fui%2Funsized-locals%2Ffnbox-compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Ffnbox-compat.rs?ref=a38f29272ef4d04f0cc77e4f8d4fa5fac7ed746d", "patch": "@@ -1,13 +0,0 @@\n-#![feature(fnbox)]\n-\n-use std::boxed::FnBox;\n-\n-fn call_it<T>(f: Box<dyn FnBox(&i32) -> T>) -> T {\n-    f(&42)\n-    //~^ERROR implementation of `std::ops::FnOnce` is not general enough\n-}\n-\n-fn main() {\n-    let s = \"hello\".to_owned();\n-    assert_eq!(&call_it(Box::new(|_| s)) as &str, \"hello\");\n-}"}, {"sha": "c37bfaa47f7eb4d33b660867ae65f8eddf661f3f", "filename": "src/test/ui/unsized-locals/fnbox-compat.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a38f29272ef4d04f0cc77e4f8d4fa5fac7ed746d/src%2Ftest%2Fui%2Funsized-locals%2Ffnbox-compat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a38f29272ef4d04f0cc77e4f8d4fa5fac7ed746d/src%2Ftest%2Fui%2Funsized-locals%2Ffnbox-compat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Ffnbox-compat.stderr?ref=a38f29272ef4d04f0cc77e4f8d4fa5fac7ed746d", "patch": "@@ -1,11 +0,0 @@\n-error: implementation of `std::ops::FnOnce` is not general enough\n-  --> $DIR/fnbox-compat.rs:6:5\n-   |\n-LL |     f(&42)\n-   |     ^^^^^^\n-   |\n-   = note: `std::ops::FnOnce<(&'0 i32,)>` would have to be implemented for the type `std::boxed::Box<(dyn for<'r> std::boxed::FnBox<(&'r i32,), Output=T> + 'static)>`, for some specific lifetime `'0`\n-   = note: but `std::ops::FnOnce<(&'1 i32,)>` is actually implemented for the type `std::boxed::Box<(dyn std::boxed::FnBox<(&'1 i32,), Output=T> + '_)>`, for some specific lifetime `'1`\n-\n-error: aborting due to previous error\n-"}]}