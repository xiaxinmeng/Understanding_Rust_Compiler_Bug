{"sha": "3e32ac4f866e2b9430dd1e91b2c7fa3824c646a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMzJhYzRmODY2ZTJiOTQzMGRkMWU5MWIyYzdmYTM4MjRjNjQ2YTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-25T15:31:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-25T15:31:48Z"}, "message": "More ids in Ty", "tree": {"sha": "67c6c2d2ddc939da2bb3e3e6f0e5b87b53215da0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67c6c2d2ddc939da2bb3e3e6f0e5b87b53215da0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e32ac4f866e2b9430dd1e91b2c7fa3824c646a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e32ac4f866e2b9430dd1e91b2c7fa3824c646a9", "html_url": "https://github.com/rust-lang/rust/commit/3e32ac4f866e2b9430dd1e91b2c7fa3824c646a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e32ac4f866e2b9430dd1e91b2c7fa3824c646a9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7", "html_url": "https://github.com/rust-lang/rust/commit/ecd1204804a2a3c8b9b98e4b9d18feef06ab51c7"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "f7fc80d4ee480ac9daf521d6b9fe37115b248409", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e32ac4f866e2b9430dd1e91b2c7fa3824c646a9/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e32ac4f866e2b9430dd1e91b2c7fa3824c646a9/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=3e32ac4f866e2b9430dd1e91b2c7fa3824c646a9", "patch": "@@ -538,14 +538,6 @@ pub enum DefWithBody {\n impl_froms!(DefWithBody: Function, Const, Static);\n \n impl DefWithBody {\n-    pub(crate) fn krate(self, db: &impl HirDatabase) -> Option<Crate> {\n-        match self {\n-            DefWithBody::Const(c) => c.krate(db),\n-            DefWithBody::Function(f) => f.krate(db),\n-            DefWithBody::Static(s) => s.krate(db),\n-        }\n-    }\n-\n     pub fn module(self, db: &impl HirDatabase) -> Module {\n         match self {\n             DefWithBody::Const(c) => c.module(db),"}, {"sha": "bac21732ec2e7ae4d122bd969ef3d78ba1fb44dd", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3e32ac4f866e2b9430dd1e91b2c7fa3824c646a9/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e32ac4f866e2b9430dd1e91b2c7fa3824c646a9/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=3e32ac4f866e2b9430dd1e91b2c7fa3824c646a9", "patch": "@@ -17,12 +17,12 @@ use std::ops::Deref;\n use std::sync::Arc;\n use std::{fmt, iter, mem};\n \n-use hir_def::{generics::GenericParams, AdtId, GenericDefId};\n+use hir_def::{generics::GenericParams, AdtId, DefWithBodyId, GenericDefId};\n use ra_db::{impl_intern_key, salsa};\n \n use crate::{\n-    db::HirDatabase, expr::ExprId, util::make_mut_slice, Adt, Crate, DefWithBody, FloatTy, IntTy,\n-    Mutability, Name, Trait, TypeAlias, Uncertain,\n+    db::HirDatabase, expr::ExprId, util::make_mut_slice, Adt, Crate, FloatTy, IntTy, Mutability,\n+    Name, Trait, TypeAlias, Uncertain,\n };\n use display::{HirDisplay, HirFormatter};\n \n@@ -113,7 +113,7 @@ pub enum TypeCtor {\n     ///\n     /// The closure signature is stored in a `FnPtr` type in the first type\n     /// parameter.\n-    Closure { def: DefWithBody, expr: ExprId },\n+    Closure { def: DefWithBodyId, expr: ExprId },\n }\n \n /// This exists just for Chalk, because Chalk just has a single `StructId` where\n@@ -169,7 +169,8 @@ impl TypeCtor {\n             | TypeCtor::Ref(_)\n             | TypeCtor::FnPtr { .. }\n             | TypeCtor::Tuple { .. } => None,\n-            TypeCtor::Closure { def, .. } => def.krate(db),\n+            // Closure's krate is irrelevant for coherence I would think?\n+            TypeCtor::Closure { .. } => None,\n             TypeCtor::Adt(adt) => adt.krate(db),\n             TypeCtor::FnDef(callable) => Some(callable.krate(db).into()),\n             TypeCtor::AssociatedType(type_alias) => type_alias.krate(db),"}, {"sha": "b581d192f5527209762b35605217424d1fce3c8f", "filename": "crates/ra_hir/src/ty/infer/expr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e32ac4f866e2b9430dd1e91b2c7fa3824c646a9/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e32ac4f866e2b9430dd1e91b2c7fa3824c646a9/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs?ref=3e32ac4f866e2b9430dd1e91b2c7fa3824c646a9", "patch": "@@ -137,8 +137,10 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     TypeCtor::FnPtr { num_args: sig_tys.len() as u16 - 1 },\n                     Substs(sig_tys.into()),\n                 );\n-                let closure_ty =\n-                    Ty::apply_one(TypeCtor::Closure { def: self.owner, expr: tgt_expr }, sig_ty);\n+                let closure_ty = Ty::apply_one(\n+                    TypeCtor::Closure { def: self.owner.into(), expr: tgt_expr },\n+                    sig_ty,\n+                );\n \n                 // Eagerly try to relate the closure type with the expected\n                 // type, otherwise we often won't have enough information to"}, {"sha": "b9a5d651f4e4213c1a9a49f25ebddafbdd29cbda", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e32ac4f866e2b9430dd1e91b2c7fa3824c646a9/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e32ac4f866e2b9430dd1e91b2c7fa3824c646a9/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=3e32ac4f866e2b9430dd1e91b2c7fa3824c646a9", "patch": "@@ -2,13 +2,14 @@\n use std::sync::{Arc, Mutex};\n \n use chalk_ir::{cast::Cast, family::ChalkIr};\n+use hir_def::DefWithBodyId;\n use log::debug;\n use ra_db::{impl_intern_key, salsa};\n use ra_prof::profile;\n use rustc_hash::FxHashSet;\n \n use super::{Canonical, GenericPredicate, HirDisplay, ProjectionTy, TraitRef, Ty, TypeWalk};\n-use crate::{db::HirDatabase, expr::ExprId, Crate, DefWithBody, ImplBlock, Trait, TypeAlias};\n+use crate::{db::HirDatabase, expr::ExprId, Crate, ImplBlock, Trait, TypeAlias};\n \n use self::chalk::{from_chalk, ToChalk};\n \n@@ -290,7 +291,7 @@ impl FnTrait {\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ClosureFnTraitImplData {\n-    def: DefWithBody,\n+    def: DefWithBodyId,\n     expr: ExprId,\n     fn_trait: FnTrait,\n }"}]}