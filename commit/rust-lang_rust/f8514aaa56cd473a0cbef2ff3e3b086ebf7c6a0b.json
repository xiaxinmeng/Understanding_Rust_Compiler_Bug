{"sha": "f8514aaa56cd473a0cbef2ff3e3b086ebf7c6a0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NTE0YWFhNTZjZDQ3M2EwY2JlZjJmZjNlM2IwODZlYmY3YzZhMGI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-26T22:25:07Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T18:09:06Z"}, "message": "Access attrs directly from HirId in rustc_passes::stability.", "tree": {"sha": "51cdf5e4ad59e03e3b01d0f523b9d5493b9a1de3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51cdf5e4ad59e03e3b01d0f523b9d5493b9a1de3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8514aaa56cd473a0cbef2ff3e3b086ebf7c6a0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8514aaa56cd473a0cbef2ff3e3b086ebf7c6a0b", "html_url": "https://github.com/rust-lang/rust/commit/f8514aaa56cd473a0cbef2ff3e3b086ebf7c6a0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8514aaa56cd473a0cbef2ff3e3b086ebf7c6a0b/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c883504fbb873a4231765b2f2b0a66d17d12a18", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c883504fbb873a4231765b2f2b0a66d17d12a18", "html_url": "https://github.com/rust-lang/rust/commit/0c883504fbb873a4231765b2f2b0a66d17d12a18"}], "stats": {"total": 13, "additions": 1, "deletions": 12}, "files": [{"sha": "76b6d2758a5fe599a25ed95a92ff9c5448166184", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f8514aaa56cd473a0cbef2ff3e3b086ebf7c6a0b/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8514aaa56cd473a0cbef2ff3e3b086ebf7c6a0b/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=f8514aaa56cd473a0cbef2ff3e3b086ebf7c6a0b", "patch": "@@ -97,7 +97,6 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n     fn annotate<F>(\n         &mut self,\n         hir_id: HirId,\n-        attrs: &[Attribute],\n         item_sp: Span,\n         kind: AnnotationKind,\n         inherit_deprecation: InheritDeprecation,\n@@ -107,6 +106,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n     ) where\n         F: FnOnce(&mut Self),\n     {\n+        let attrs = self.tcx.hir().attrs(hir_id);\n         debug!(\"annotate(id = {:?}, attrs = {:?})\", hir_id, attrs);\n         let mut did_error = false;\n         if !self.tcx.features().staged_api {\n@@ -385,7 +385,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n                 if let Some(ctor_hir_id) = sd.ctor_hir_id() {\n                     self.annotate(\n                         ctor_hir_id,\n-                        &i.attrs,\n                         i.span,\n                         AnnotationKind::Required,\n                         InheritDeprecation::Yes,\n@@ -400,7 +399,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n \n         self.annotate(\n             i.hir_id(),\n-            &i.attrs,\n             i.span,\n             kind,\n             InheritDeprecation::Yes,\n@@ -414,7 +412,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n     fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem<'tcx>) {\n         self.annotate(\n             ti.hir_id(),\n-            &ti.attrs,\n             ti.span,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n@@ -431,7 +428,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n             if self.in_trait_impl { AnnotationKind::Prohibited } else { AnnotationKind::Required };\n         self.annotate(\n             ii.hir_id(),\n-            &ii.attrs,\n             ii.span,\n             kind,\n             InheritDeprecation::Yes,\n@@ -446,7 +442,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n     fn visit_variant(&mut self, var: &'tcx Variant<'tcx>, g: &'tcx Generics<'tcx>, item_id: HirId) {\n         self.annotate(\n             var.id,\n-            &var.attrs,\n             var.span,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n@@ -456,7 +451,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n                 if let Some(ctor_hir_id) = var.data.ctor_hir_id() {\n                     v.annotate(\n                         ctor_hir_id,\n-                        &var.attrs,\n                         var.span,\n                         AnnotationKind::Required,\n                         InheritDeprecation::Yes,\n@@ -474,7 +468,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n     fn visit_struct_field(&mut self, s: &'tcx StructField<'tcx>) {\n         self.annotate(\n             s.hir_id,\n-            &s.attrs,\n             s.span,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n@@ -489,7 +482,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n     fn visit_foreign_item(&mut self, i: &'tcx hir::ForeignItem<'tcx>) {\n         self.annotate(\n             i.hir_id(),\n-            &i.attrs,\n             i.span,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n@@ -504,7 +496,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n     fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef<'tcx>) {\n         self.annotate(\n             md.hir_id(),\n-            &md.attrs,\n             md.span,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n@@ -525,7 +516,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n \n         self.annotate(\n             p.hir_id,\n-            &p.attrs,\n             p.span,\n             kind,\n             InheritDeprecation::No,\n@@ -696,7 +686,6 @@ fn new_index(tcx: TyCtxt<'tcx>) -> Index<'tcx> {\n \n         annotator.annotate(\n             hir::CRATE_HIR_ID,\n-            &krate.item.attrs,\n             krate.item.span,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,"}]}