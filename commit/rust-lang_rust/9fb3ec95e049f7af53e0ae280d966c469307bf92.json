{"sha": "9fb3ec95e049f7af53e0ae280d966c469307bf92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYjNlYzk1ZTA0OWY3YWY1M2UwYWUyODBkOTY2YzQ2OTMwN2JmOTI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-09T12:20:15Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-09T12:20:15Z"}, "message": "Use a Phi node in trans_vec::iter_vec_raw\n\nRather than incrementing a spilled pointer", "tree": {"sha": "66f94fe7596f054fb8ce17c0875506842266965a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66f94fe7596f054fb8ce17c0875506842266965a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fb3ec95e049f7af53e0ae280d966c469307bf92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fb3ec95e049f7af53e0ae280d966c469307bf92", "html_url": "https://github.com/rust-lang/rust/commit/9fb3ec95e049f7af53e0ae280d966c469307bf92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fb3ec95e049f7af53e0ae280d966c469307bf92/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "139b1d1b314edce0584646a4032e6a6e66167b71", "url": "https://api.github.com/repos/rust-lang/rust/commits/139b1d1b314edce0584646a4032e6a6e66167b71", "html_url": "https://github.com/rust-lang/rust/commit/139b1d1b314edce0584646a4032e6a6e66167b71"}], "stats": {"total": 32, "additions": 11, "deletions": 21}, "files": [{"sha": "6648e1cb48e81db10c54da963e20c604a0a07d09", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fb3ec95e049f7af53e0ae280d966c469307bf92/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb3ec95e049f7af53e0ae280d966c469307bf92/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=9fb3ec95e049f7af53e0ae280d966c469307bf92", "patch": "@@ -1629,12 +1629,6 @@ fn store_inbounds(cx: &@block_ctxt, v: ValueRef, p: ValueRef,\n     Store(cx, v, InBoundsGEP(cx, p, idxs));\n }\n \n-// This uses store and inboundsGEP, but it only doing so superficially; it's\n-// really storing an incremented pointer to another pointer.\n-fn incr_ptr(cx: &@block_ctxt, p: ValueRef, incr: ValueRef, pp: ValueRef) {\n-    Store(cx, InBoundsGEP(cx, p, [incr]), pp);\n-}\n-\n // Iterates through the elements of a structural type.\n fn iter_structural_ty(cx: @block_ctxt, av: ValueRef, t: ty::t,\n                       f: &val_and_ty_fn) -> @block_ctxt {"}, {"sha": "48143461a31785a2eeea4ffbe6b189541453fa80", "filename": "src/comp/middle/trans_vec.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9fb3ec95e049f7af53e0ae280d966c469307bf92/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb3ec95e049f7af53e0ae280d966c469307bf92/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs?ref=9fb3ec95e049f7af53e0ae280d966c469307bf92", "patch": "@@ -4,7 +4,7 @@ import syntax::ast;\n import lib::llvm::llvm::{ValueRef, TypeRef};\n import back::abi;\n import trans::{call_memmove, trans_shared_malloc, llsize_of, type_of_or_i8,\n-               incr_ptr, INIT, copy_val, load_if_immediate, alloca, size_of,\n+               INIT, copy_val, load_if_immediate, alloca, size_of,\n                llderivedtydescs_block_ctxt, lazily_emit_tydesc_glue,\n                get_tydesc, load_inbounds, move_val_if_temp, trans_lval,\n                node_id_type, new_sub_block_ctxt, tps_normal, do_spill_noroot,\n@@ -185,12 +185,9 @@ fn trans_append(cx: &@block_ctxt, vec_ty: ty::t, lhsptr: ValueRef,\n                              copy_val(bcx, INIT, write_ptr,\n                                       load_if_immediate(bcx, addr, unit_ty),\n                                       unit_ty);\n-                         if dynamic {\n-                             incr_ptr(bcx, write_ptr, unit_sz, write_ptr_ptr);\n-                         } else {\n-                             incr_ptr(bcx, write_ptr, C_int(1),\n-                                      write_ptr_ptr);\n-                         }\n+                         let incr = dynamic ? unit_sz : C_int(1);\n+                         Store(bcx, InBoundsGEP(bcx, write_ptr, [incr]),\n+                               write_ptr_ptr);\n                          ret bcx;\n                      });\n     ret rslt(bcx, C_nil());\n@@ -249,10 +246,10 @@ fn trans_add(bcx: &@block_ctxt, vec_ty: ty::t, lhsptr: ValueRef,\n                  let bcx =\n                      copy_val(bcx, INIT, write_ptr,\n                               load_if_immediate(bcx, addr, unit_ty), unit_ty);\n-                 if ty::type_has_dynamic_size(bcx_tcx(bcx), unit_ty) {\n-                     // We have to increment by the dynamically-computed size.\n-                     incr_ptr(bcx, write_ptr, llunitsz, write_ptr_ptr);\n-                 } else { incr_ptr(bcx, write_ptr, C_int(1), write_ptr_ptr); }\n+                 let incr = ty::type_has_dynamic_size(bcx_tcx(bcx), unit_ty) ?\n+                     llunitsz : C_int(1);\n+                 Store(bcx, InBoundsGEP(bcx, write_ptr, [incr]),\n+                       write_ptr_ptr);\n                  ret bcx;\n              }(_, _, _, write_ptr_ptr, unit_ty, llunitsz);\n \n@@ -277,12 +274,11 @@ fn iter_vec_raw(bcx: &@block_ctxt, vptrptr: ValueRef, vec_ty: ty::t,\n     // TODO: Optimize this when the size of the unit type is statically\n     // known to not use pointer casts, which tend to confuse LLVM.\n     let data_end_ptr = pointer_add(bcx, data_ptr, fill);\n-    let data_ptr_ptr = do_spill_noroot(bcx, data_ptr);\n \n     // Now perform the iteration.\n     let header_cx = new_sub_block_ctxt(bcx, \"iter_vec_loop_header\");\n     Br(bcx, header_cx.llbb);\n-    let data_ptr = Load(header_cx, data_ptr_ptr);\n+    let data_ptr = Phi(header_cx, val_ty(data_ptr), [data_ptr], [bcx.llbb]);\n     let not_yet_at_end =\n         ICmp(header_cx, lib::llvm::LLVMIntULT, data_ptr, data_end_ptr);\n     let body_cx = new_sub_block_ctxt(bcx, \"iter_vec_loop_body\");\n@@ -293,9 +289,9 @@ fn iter_vec_raw(bcx: &@block_ctxt, vptrptr: ValueRef, vec_ty: ty::t,\n         if ty::type_has_dynamic_size(bcx_tcx(bcx), unit_ty) {\n             unit_sz\n         } else { C_int(1) };\n-    incr_ptr(body_cx, data_ptr, increment, data_ptr_ptr);\n+    AddIncomingToPhi(data_ptr, [InBoundsGEP(body_cx, data_ptr,\n+                                            [increment])], [body_cx.llbb]);\n     Br(body_cx, header_cx.llbb);\n-\n     ret next_cx;\n }\n "}]}