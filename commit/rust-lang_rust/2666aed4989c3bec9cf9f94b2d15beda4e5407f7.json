{"sha": "2666aed4989c3bec9cf9f94b2d15beda4e5407f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NjZhZWQ0OTg5YzNiZWM5Y2Y5Zjk0YjJkMTViZWRhNGU1NDA3Zjc=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-15T09:45:01Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-15T11:06:47Z"}, "message": "unify Instance::resolve", "tree": {"sha": "d08c38c3c7a805505226195e7969fd6a2a45290d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d08c38c3c7a805505226195e7969fd6a2a45290d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2666aed4989c3bec9cf9f94b2d15beda4e5407f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2666aed4989c3bec9cf9f94b2d15beda4e5407f7", "html_url": "https://github.com/rust-lang/rust/commit/2666aed4989c3bec9cf9f94b2d15beda4e5407f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2666aed4989c3bec9cf9f94b2d15beda4e5407f7/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e070b45e6acb1cb2bbe06485721cb77de1e2469c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e070b45e6acb1cb2bbe06485721cb77de1e2469c", "html_url": "https://github.com/rust-lang/rust/commit/e070b45e6acb1cb2bbe06485721cb77de1e2469c"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "d7c0be058599fbbecec245afbcc92dc4c388aa73", "filename": "src/librustc_middle/mir/interpret/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2666aed4989c3bec9cf9f94b2d15beda4e5407f7/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2666aed4989c3bec9cf9f94b2d15beda4e5407f7/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs?ref=2666aed4989c3bec9cf9f94b2d15beda4e5407f7", "patch": "@@ -39,7 +39,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         promoted: Option<mir::Promoted>,\n         span: Option<Span>,\n     ) -> ConstEvalResult<'tcx> {\n-        match ty::Instance::resolve_const_arg(self, param_env, def, substs) {\n+        match ty::Instance::resolve_opt_const_arg(self, param_env, def, substs) {\n             Ok(Some(instance)) => {\n                 let cid = GlobalId { instance, promoted };\n                 self.const_eval_global_id(param_env, cid, span)"}, {"sha": "f627d05d3e9d28686f2265301a82f55d87120797", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2666aed4989c3bec9cf9f94b2d15beda4e5407f7/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2666aed4989c3bec9cf9f94b2d15beda4e5407f7/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=2666aed4989c3bec9cf9f94b2d15beda4e5407f7", "patch": "@@ -339,27 +339,30 @@ impl<'tcx> Instance<'tcx> {\n         def_id: DefId,\n         substs: SubstsRef<'tcx>,\n     ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n-        // All regions in the result of this query are erased, so it's\n-        // fine to erase all of the input regions.\n-\n-        // HACK(eddyb) erase regions in `substs` first, so that `param_env.and(...)`\n-        // below is more likely to ignore the bounds in scope (e.g. if the only\n-        // generic parameters mentioned by `substs` were lifetime ones).\n-        let substs = tcx.erase_regions(&substs);\n-\n-        // FIXME(eddyb) should this always use `param_env.with_reveal_all()`?\n-        tcx.resolve_instance(tcx.erase_regions(&param_env.and((def_id, substs))))\n+        Instance::resolve_opt_const_arg(\n+            tcx,\n+            param_env,\n+            ty::WithOptConstParam::unknown(def_id),\n+            substs,\n+        )\n     }\n \n     // This should be kept up to date with `resolve`.\n-    pub fn resolve_const_arg(\n+    pub fn resolve_opt_const_arg(\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         def: ty::WithOptConstParam<DefId>,\n         substs: SubstsRef<'tcx>,\n     ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n+        // All regions in the result of this query are erased, so it's\n+        // fine to erase all of the input regions.\n+\n+        // HACK(eddyb) erase regions in `substs` first, so that `param_env.and(...)`\n+        // below is more likely to ignore the bounds in scope (e.g. if the only\n+        // generic parameters mentioned by `substs` were lifetime ones).\n         let substs = tcx.erase_regions(&substs);\n \n+        // FIXME(eddyb) should this always use `param_env.with_reveal_all()`?\n         if let Some((did, param_did)) = def.as_const_arg() {\n             tcx.resolve_instance_of_const_arg(\n                 tcx.erase_regions(&param_env.and((did, param_did, substs))),"}]}