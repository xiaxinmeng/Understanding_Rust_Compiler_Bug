{"sha": "187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4N2M0Y2YyNTcyZjJiZjQzYTJlZThjZWU5ZTQ1OWQ5ZWNiYzQyOWE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-24T15:30:29Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-29T17:19:42Z"}, "message": "Use BackendTypes instead of Backend or HasCodegen in a few places", "tree": {"sha": "c08644d19691b5161cfae54a39f097789cfdd68f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c08644d19691b5161cfae54a39f097789cfdd68f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a", "html_url": "https://github.com/rust-lang/rust/commit/187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66c3195c4cdce988a195d386496dffe55257cfc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/66c3195c4cdce988a195d386496dffe55257cfc6", "html_url": "https://github.com/rust-lang/rust/commit/66c3195c4cdce988a195d386496dffe55257cfc6"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "c659a99e1c998a56816e2f4d817ff845651680ee", "filename": "src/librustc_codegen_ssa/traits/abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a/src%2Flibrustc_codegen_ssa%2Ftraits%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a/src%2Flibrustc_codegen_ssa%2Ftraits%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fabi.rs?ref=187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::HasCodegen;\n+use super::BackendTypes;\n use rustc::ty::{FnSig, Instance, Ty};\n use rustc_target::abi::call::FnType;\n \n@@ -18,6 +18,6 @@ pub trait AbiMethods<'tcx> {\n     fn fn_type_of_instance(&self, instance: &Instance<'tcx>) -> FnType<'tcx, Ty<'tcx>>;\n }\n \n-pub trait AbiBuilderMethods<'tcx>: HasCodegen<'tcx> {\n+pub trait AbiBuilderMethods<'tcx>: BackendTypes {\n     fn apply_attrs_callsite(&mut self, ty: &FnType<'tcx, Ty<'tcx>>, callsite: Self::Value);\n }"}, {"sha": "0e56fe46a313c17339aa19798a73bcdd4fe1806f", "filename": "src/librustc_codegen_ssa/traits/asm.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs?ref=187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a", "patch": "@@ -8,13 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::Backend;\n-use super::HasCodegen;\n+use super::BackendTypes;\n use mir::place::PlaceRef;\n use rustc::hir::{GlobalAsm, InlineAsm};\n \n-pub trait AsmBuilderMethods<'tcx>: HasCodegen<'tcx> {\n-    // Take an inline assembly expression and splat it out via LLVM\n+pub trait AsmBuilderMethods<'tcx>: BackendTypes {\n+    /// Take an inline assembly expression and splat it out via LLVM\n     fn codegen_inline_asm(\n         &mut self,\n         ia: &InlineAsm,\n@@ -23,6 +22,6 @@ pub trait AsmBuilderMethods<'tcx>: HasCodegen<'tcx> {\n     ) -> bool;\n }\n \n-pub trait AsmMethods<'tcx>: Backend<'tcx> {\n+pub trait AsmMethods<'tcx> {\n     fn codegen_global_asm(&self, ga: &GlobalAsm);\n }"}, {"sha": "c4becf37059e3e2225fe60bc0f96bb218e5d2e87", "filename": "src/librustc_codegen_ssa/traits/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs?ref=187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::Backend;\n-use super::HasCodegen;\n+use super::BackendTypes;\n use debuginfo::{FunctionDebugContext, MirDebugScope, VariableAccess, VariableKind};\n use rustc::hir::def_id::CrateNum;\n use rustc::mir;\n@@ -19,7 +18,7 @@ use rustc_mir::monomorphize::Instance;\n use syntax::ast::Name;\n use syntax_pos::{SourceFile, Span};\n \n-pub trait DebugInfoMethods<'tcx>: Backend<'tcx> {\n+pub trait DebugInfoMethods<'tcx>: BackendTypes {\n     fn create_vtable_metadata(&self, ty: Ty<'tcx>, vtable: Self::Value);\n \n     /// Creates the function-specific debug context.\n@@ -51,7 +50,7 @@ pub trait DebugInfoMethods<'tcx>: Backend<'tcx> {\n     fn debuginfo_upvar_decls_ops_sequence(&self, byte_offset_of_var_in_env: u64) -> [i64; 4];\n }\n \n-pub trait DebugInfoBuilderMethods<'tcx>: HasCodegen<'tcx> {\n+pub trait DebugInfoBuilderMethods<'tcx>: BackendTypes {\n     fn declare_local(\n         &mut self,\n         dbg_context: &FunctionDebugContext<Self::DIScope>,"}, {"sha": "f9a2965284309d290f81549c6f558218a698d017", "filename": "src/librustc_codegen_ssa/traits/declare.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdeclare.rs?ref=187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::Backend;\n+use super::BackendTypes;\n use rustc::hir::def_id::DefId;\n use rustc::mir::mono::{Linkage, Visibility};\n use rustc::ty;\n use rustc_mir::monomorphize::Instance;\n \n-pub trait DeclareMethods<'tcx>: Backend<'tcx> {\n+pub trait DeclareMethods<'tcx>: BackendTypes {\n     /// Declare a global value.\n     ///\n     /// If there\u2019s a value with the same name already declared, the function will\n@@ -71,7 +71,7 @@ pub trait DeclareMethods<'tcx>: Backend<'tcx> {\n     fn get_defined_value(&self, name: &str) -> Option<Self::Value>;\n }\n \n-pub trait PreDefineMethods<'tcx>: Backend<'tcx> {\n+pub trait PreDefineMethods<'tcx>: BackendTypes {\n     fn predefine_static(\n         &self,\n         def_id: DefId,"}, {"sha": "539c781e283d8ce2d698a42f9e8fa318631cf15f", "filename": "src/librustc_codegen_ssa/traits/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a/src%2Flibrustc_codegen_ssa%2Ftraits%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a/src%2Flibrustc_codegen_ssa%2Ftraits%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fintrinsic.rs?ref=187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::HasCodegen;\n+use super::BackendTypes;\n use mir::operand::OperandRef;\n use rustc::ty::Ty;\n use rustc_target::abi::call::FnType;\n@@ -21,7 +21,7 @@ pub enum OverflowOp {\n     Mul,\n }\n \n-pub trait IntrinsicCallMethods<'tcx>: HasCodegen<'tcx> {\n+pub trait IntrinsicCallMethods<'tcx>: BackendTypes {\n     /// Remember to add all intrinsics here, in librustc_typeck/check/mod.rs,\n     /// and in libcore/intrinsics.rs; if you need access to any llvm intrinsics,\n     /// add them to librustc_codegen_llvm/context.rs"}, {"sha": "d8871dd3a58caba94373c5e6606063ccf08a1c04", "filename": "src/librustc_codegen_ssa/traits/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs?ref=187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::Backend;\n+use super::BackendTypes;\n use libc::c_uint;\n use rustc::mir::mono::Stats;\n use rustc::session::Session;\n@@ -18,7 +18,7 @@ use rustc_mir::monomorphize::partitioning::CodegenUnit;\n use std::cell::RefCell;\n use std::sync::Arc;\n \n-pub trait MiscMethods<'tcx>: Backend<'tcx> {\n+pub trait MiscMethods<'tcx>: BackendTypes {\n     fn vtables(\n         &self,\n     ) -> &RefCell<FxHashMap<(Ty<'tcx>, ty::PolyExistentialTraitRef<'tcx>), Self::Value>>;"}, {"sha": "1d31bdfa9f0c491aa69748e24b1ece17a04c928b", "filename": "src/librustc_codegen_ssa/traits/type_.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs?ref=187c4cf2572f2bf43a2ee8cee9e459d9ecbc429a", "patch": "@@ -20,6 +20,8 @@ use rustc_target::abi::call::{ArgType, CastTarget, FnType, Reg};\n use std::cell::RefCell;\n use syntax::ast;\n \n+// This depends on `Backend` and not `BackendTypes`, because consumers will probably want to use\n+// `LayoutOf` or `HasTyCtxt`. This way, they don't have to add a constraint on it themselves.\n pub trait BaseTypeMethods<'tcx>: Backend<'tcx> {\n     fn type_void(&self) -> Self::Type;\n     fn type_metadata(&self) -> Self::Type;"}]}