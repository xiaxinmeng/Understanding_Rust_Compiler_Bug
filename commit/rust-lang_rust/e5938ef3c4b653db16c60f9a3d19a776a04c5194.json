{"sha": "e5938ef3c4b653db16c60f9a3d19a776a04c5194", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1OTM4ZWYzYzRiNjUzZGIxNmM2MGY5YTNkMTlhNzc2YTA0YzUxOTQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-08-11T11:43:31Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-08-11T11:43:31Z"}, "message": "Add (a lot of) missing links in fmt module docs", "tree": {"sha": "2560ca917edac86b30028edd7edee69b36007840", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2560ca917edac86b30028edd7edee69b36007840"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5938ef3c4b653db16c60f9a3d19a776a04c5194", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5938ef3c4b653db16c60f9a3d19a776a04c5194", "html_url": "https://github.com/rust-lang/rust/commit/e5938ef3c4b653db16c60f9a3d19a776a04c5194", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5938ef3c4b653db16c60f9a3d19a776a04c5194/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9868352b953dc88975324b27e2865d5ee2ea72e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9868352b953dc88975324b27e2865d5ee2ea72e9", "html_url": "https://github.com/rust-lang/rust/commit/9868352b953dc88975324b27e2865d5ee2ea72e9"}], "stats": {"total": 87, "additions": 55, "deletions": 32}, "files": [{"sha": "5fc583d9e017e244abb940ee9252dec6dd1b6d99", "filename": "src/liballoc/fmt.rs", "status": "modified", "additions": 55, "deletions": 32, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/e5938ef3c4b653db16c60f9a3d19a776a04c5194/src%2Fliballoc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5938ef3c4b653db16c60f9a3d19a776a04c5194/src%2Fliballoc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ffmt.rs?ref=e5938ef3c4b653db16c60f9a3d19a776a04c5194", "patch": "@@ -10,16 +10,16 @@\n \n //! Utilities for formatting and printing `String`s\n //!\n-//! This module contains the runtime support for the `format!` syntax extension.\n+//! This module contains the runtime support for the [`format!`] syntax extension.\n //! This macro is implemented in the compiler to emit calls to this module in\n //! order to format arguments at runtime into strings.\n //!\n //! # Usage\n //!\n-//! The `format!` macro is intended to be familiar to those coming from C's\n-//! printf/fprintf functions or Python's `str.format` function.\n+//! The [`format!`] macro is intended to be familiar to those coming from C's\n+//! `printf`/`fprintf` functions or Python's `str.format` function.\n //!\n-//! Some examples of the `format!` extension are:\n+//! Some examples of the [`format!`] extension are:\n //!\n //! ```\n //! format!(\"Hello\");                 // => \"Hello\"\n@@ -67,15 +67,15 @@\n //! ## Named parameters\n //!\n //! Rust itself does not have a Python-like equivalent of named parameters to a\n-//! function, but the `format!` macro is a syntax extension which allows it to\n+//! function, but the [`format!`] macro is a syntax extension which allows it to\n //! leverage named parameters. Named parameters are listed at the end of the\n //! argument list and have the syntax:\n //!\n //! ```text\n //! identifier '=' expression\n //! ```\n //!\n-//! For example, the following `format!` expressions all use named argument:\n+//! For example, the following [`format!`] expressions all use named argument:\n //!\n //! ```\n //! format!(\"{argument}\", argument = \"test\");   // => \"test\"\n@@ -102,30 +102,30 @@\n //!\n //! If this syntax is used, then the number of characters to print precedes the\n //! actual object being formatted, and the number of characters must have the\n-//! type `usize`.\n+//! type [`usize`].\n //!\n //! ## Formatting traits\n //!\n //! When requesting that an argument be formatted with a particular type, you\n //! are actually requesting that an argument ascribes to a particular trait.\n-//! This allows multiple actual types to be formatted via `{:x}` (like `i8` as\n-//! well as `isize`).  The current mapping of types to traits is:\n+//! This allows multiple actual types to be formatted via `{:x}` (like [`i8`] as\n+//! well as [`isize`]).  The current mapping of types to traits is:\n //!\n-//! * *nothing* \u21d2 [`Display`](trait.Display.html)\n-//! * `?` \u21d2 [`Debug`](trait.Debug.html)\n+//! * *nothing* \u21d2 [`Display`]\n+//! * `?` \u21d2 [`Debug`]\n //! * `o` \u21d2 [`Octal`](trait.Octal.html)\n //! * `x` \u21d2 [`LowerHex`](trait.LowerHex.html)\n //! * `X` \u21d2 [`UpperHex`](trait.UpperHex.html)\n //! * `p` \u21d2 [`Pointer`](trait.Pointer.html)\n-//! * `b` \u21d2 [`Binary`](trait.Binary.html)\n+//! * `b` \u21d2 [`Binary`]\n //! * `e` \u21d2 [`LowerExp`](trait.LowerExp.html)\n //! * `E` \u21d2 [`UpperExp`](trait.UpperExp.html)\n //!\n //! What this means is that any type of argument which implements the\n-//! `fmt::Binary` trait can then be formatted with `{:b}`. Implementations\n+//! [`fmt::Binary`][`Binary`] trait can then be formatted with `{:b}`. Implementations\n //! are provided for these traits for a number of primitive types by the\n //! standard library as well. If no format is specified (as in `{}` or `{:6}`),\n-//! then the format trait used is the `Display` trait.\n+//! then the format trait used is the [`Display`] trait.\n //!\n //! When implementing a format trait for your own type, you will have to\n //! implement a method of the signature:\n@@ -144,15 +144,15 @@\n //! should emit output into the `f.buf` stream. It is up to each format trait\n //! implementation to correctly adhere to the requested formatting parameters.\n //! The values of these parameters will be listed in the fields of the\n-//! `Formatter` struct. In order to help with this, the `Formatter` struct also\n+//! [`Formatter`] struct. In order to help with this, the [`Formatter`] struct also\n //! provides some helper methods.\n //!\n-//! Additionally, the return value of this function is `fmt::Result` which is a\n-//! type alias of `Result<(), std::fmt::Error>`. Formatting implementations\n-//! should ensure that they propagate errors from the `Formatter` (e.g., when\n-//! calling `write!`) however, they should never return errors spuriously. That\n+//! Additionally, the return value of this function is [`fmt::Result`] which is a\n+//! type alias of [`Result`]`<(), `[`std::fmt::Error`]`>`. Formatting implementations\n+//! should ensure that they propagate errors from the [`Formatter`] (e.g., when\n+//! calling [`write!`]) however, they should never return errors spuriously. That\n //! is, a formatting implementation must and may only return an error if the\n-//! passed-in `Formatter` returns an error. This is because, contrary to what\n+//! passed-in [`Formatter`] returns an error. This is because, contrary to what\n //! the function signature might suggest, string formatting is an infallible\n //! operation. This function only returns a result because writing to the\n //! underlying stream might fail and it must provide a way to propagate the fact\n@@ -209,12 +209,12 @@\n //!\n //! These two formatting traits have distinct purposes:\n //!\n-//! - `fmt::Display` implementations assert that the type can be faithfully\n+//! - [`fmt::Display`][`Display] implementations assert that the type can be faithfully\n //!   represented as a UTF-8 string at all times. It is **not** expected that\n //!   all types implement the `Display` trait.\n-//! - `fmt::Debug` implementations should be implemented for **all** public types.\n+//! - [`fmt::Debug`][`Debug`] implementations should be implemented for **all** public types.\n //!   Output will typically represent the internal state as faithfully as possible.\n-//!   The purpose of the `Debug` trait is to facilitate debugging Rust code. In\n+//!   The purpose of the [`Debug`] trait is to facilitate debugging Rust code. In\n //!   most cases, using `#[derive(Debug)]` is sufficient and recommended.\n //!\n //! Some examples of the output from both traits:\n@@ -227,7 +227,7 @@\n //!\n //! ## Related macros\n //!\n-//! There are a number of related macros in the `format!` family. The ones that\n+//! There are a number of related macros in the [`format!`] family. The ones that\n //! are currently implemented are:\n //!\n //! ```ignore (only-for-syntax-highlight)\n@@ -241,11 +241,11 @@\n //!\n //! ### `write!`\n //!\n-//! This and `writeln` are two macros which are used to emit the format string\n+//! This and [`writeln!`] are two macros which are used to emit the format string\n //! to a specified stream. This is used to prevent intermediate allocations of\n //! format strings and instead directly write the output. Under the hood, this\n-//! function is actually invoking the `write_fmt` function defined on the\n-//! `std::io::Write` trait. Example usage is:\n+//! function is actually invoking the [`write_fmt`] function defined on the\n+//! [`std::io::Write`] trait. Example usage is:\n //!\n //! ```\n //! # #![allow(unused_must_use)]\n@@ -256,7 +256,7 @@\n //!\n //! ### `print!`\n //!\n-//! This and `println` emit their output to stdout. Similarly to the `write!`\n+//! This and [`println!`] emit their output to stdout. Similarly to the [`write!`]\n //! macro, the goal of these macros is to avoid intermediate allocations when\n //! printing output. Example usage is:\n //!\n@@ -288,8 +288,8 @@\n //! my_fmt_fn(format_args!(\", or a {} too\", \"function\"));\n //! ```\n //!\n-//! The result of the `format_args!` macro is a value of type `fmt::Arguments`.\n-//! This structure can then be passed to the `write` and `format` functions\n+//! The result of the [`format_args!`] macro is a value of type [`fmt::Arguments`].\n+//! This structure can then be passed to the [`write`] and [`format`] functions\n //! inside this module in order to process the format string.\n //! The goal of this macro is to even further prevent intermediate allocations\n //! when dealing formatting strings.\n@@ -384,9 +384,9 @@\n //! the `0` flag is specified for numerics, then the implicit fill character is\n //! `0`.\n //!\n-//! The value for the width can also be provided as a `usize` in the list of\n+//! The value for the width can also be provided as a [`usize`] in the list of\n //! parameters by using the dollar syntax indicating that the second argument is\n-//! a `usize` specifying the width, for example:\n+//! a [`usize`] specifying the width, for example:\n //!\n //! ```\n //! // All of these print \"Hello x    !\"\n@@ -474,6 +474,29 @@\n //! The literal characters `{` and `}` may be included in a string by preceding\n //! them with the same character. For example, the `{` character is escaped with\n //! `{{` and the `}` character is escaped with `}}`.\n+//!\n+//! [`format!`]: ../macro.format.html\n+//! [`usize`]: ../primitive.usize.html\n+//! [`isize`]: ../primitive.isize.html\n+//! [`i8`]: ../primitive.i8.html\n+//! [`Display`]: trait.Display.html\n+//! [`Binary`]: trait.Binary.html\n+//! [`fmt::Result`]: type.Result.html\n+//! [`Result`]: ../result/enum.Result.html\n+//! [`std::fmt::Error`]: struct.Error.html\n+//! [`Formatter`]: struct.Formatter.html\n+//! [`write!`]: ../macro.write.html\n+//! [`Debug`]: trait.Debug.html\n+//! [`format!`]: ../macro.format.html\n+//! [`writeln!`]: ../macro.writeln.html\n+//! [`write_fmt`]: ../io/trait.Write.html#method.write_fmt\n+//! [`std::io::Write`]: ../io/trait.Write.html\n+//! [`println!`]: ../macro.println.html\n+//! [`write!`]: ../macro.write.html\n+//! [`format_args!`]: ../macro.format_args.html\n+//! [`fmt::Arguments`]: struct.Arguments.html\n+//! [`write`]: fn.write.html\n+//! [`format`]: fn.format.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}