{"sha": "8adf08c4373f5bdd5bbef9aa4dfd0ca5c4a2eefc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZGYwOGM0MzczZjViZGQ1YmJlZjlhYTRkZmQwY2E1YzRhMmVlZmM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-07-17T17:23:03Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-07-17T19:20:38Z"}, "message": "rustc: Polish off `in_external_macro`\n\nThis commit polishes off this new function to compile on newer rustc as well as\nupdate and add a suite of test cases to work with this new check for lints.", "tree": {"sha": "8dbf258f67a4c79bd1af2c86d6f907079c676659", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dbf258f67a4c79bd1af2c86d6f907079c676659"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8adf08c4373f5bdd5bbef9aa4dfd0ca5c4a2eefc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8adf08c4373f5bdd5bbef9aa4dfd0ca5c4a2eefc", "html_url": "https://github.com/rust-lang/rust/commit/8adf08c4373f5bdd5bbef9aa4dfd0ca5c4a2eefc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8adf08c4373f5bdd5bbef9aa4dfd0ca5c4a2eefc/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd0808dd24bbb351d19b805a9318eb9e105010b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd0808dd24bbb351d19b805a9318eb9e105010b2", "html_url": "https://github.com/rust-lang/rust/commit/dd0808dd24bbb351d19b805a9318eb9e105010b2"}], "stats": {"total": 151, "additions": 112, "deletions": 39}, "files": [{"sha": "2a44845b980dba83a0d3e511b4cc86869cf67c8f", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8adf08c4373f5bdd5bbef9aa4dfd0ca5c4a2eefc/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adf08c4373f5bdd5bbef9aa4dfd0ca5c4a2eefc/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=8adf08c4373f5bdd5bbef9aa4dfd0ca5c4a2eefc", "patch": "@@ -29,7 +29,7 @@ use self::TargetLint::*;\n use std::slice;\n use rustc_data_structures::sync::{RwLock, ReadGuard};\n use lint::{EarlyLintPassObject, LateLintPassObject};\n-use lint::{self, Level, Lint, LintId, LintPass, LintBuffer};\n+use lint::{Level, Lint, LintId, LintPass, LintBuffer};\n use lint::builtin::BuiltinLintDiagnostics;\n use lint::levels::{LintLevelSets, LintLevelsBuilder};\n use middle::privacy::AccessLevels;\n@@ -468,14 +468,7 @@ pub trait LintContext<'tcx>: Sized {\n \n     /// Emit a lint at the appropriate level, for a particular span.\n     fn span_lint<S: Into<MultiSpan>>(&self, lint: &'static Lint, span: S, msg: &str) {\n-        match self.lints().future_incompatible(LintId::of(lint)) {\n-            Some(_) => self.lookup_and_emit(lint, Some(span), msg),\n-            None => {\n-                if !lint::in_external_macro(lint, span) {\n-                    self.lookup_and_emit(lint, Some(span), msg);\n-                }\n-            }\n-        }\n+        self.lookup_and_emit(lint, Some(span), msg);\n     }\n \n     fn struct_span_lint<S: Into<MultiSpan>>(&self,"}, {"sha": "b13423552c003191dd52633d27ba7b3f852a4b56", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 42, "deletions": 26, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/8adf08c4373f5bdd5bbef9aa4dfd0ca5c4a2eefc/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adf08c4373f5bdd5bbef9aa4dfd0ca5c4a2eefc/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=8adf08c4373f5bdd5bbef9aa4dfd0ca5c4a2eefc", "patch": "@@ -41,7 +41,7 @@ use lint::builtin::BuiltinLintDiagnostics;\n use session::{Session, DiagnosticMessageId};\n use std::hash;\n use syntax::ast;\n-use syntax::codemap::MultiSpan;\n+use syntax::codemap::{MultiSpan, ExpnFormat};\n use syntax::edition::Edition;\n use syntax::symbol::Symbol;\n use syntax::visit as ast_visit;\n@@ -54,8 +54,6 @@ pub use lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n                         check_crate, check_ast_crate,\n                         FutureIncompatibleInfo, BufferedEarlyLint};\n \n-use codemap::{ExpnFormat, ExpnInfo, Span };\n-\n /// Specification of a single lint.\n #[derive(Copy, Clone, Debug)]\n pub struct Lint {\n@@ -570,6 +568,22 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n                                future_incompatible.reference);\n         err.warn(&explanation);\n         err.note(&citation);\n+\n+    // If this lint is *not* a future incompatibility warning then we want to be\n+    // sure to not be too noisy in some situations. If this code originates in a\n+    // foreign macro, aka something that this crate did not itself author, then\n+    // it's likely that there's nothing this crate can do about it. We probably\n+    // want to skip the lint entirely.\n+    //\n+    // For some lints though (like unreachable code) there's clear actionable\n+    // items to take care of (delete the macro invocation). As a result we have\n+    // a few lints we whitelist here for allowing a lint even though it's in a\n+    // foreign macro invocation.\n+    } else if lint_id != LintId::of(builtin::UNREACHABLE_CODE) &&\n+        lint_id != LintId::of(builtin::DEPRECATED) {\n+        if err.span.primary_spans().iter().any(|s| in_external_macro(sess, *s)) {\n+            err.cancel();\n+        }\n     }\n \n     return err\n@@ -672,29 +686,31 @@ pub fn provide(providers: &mut Providers) {\n     providers.lint_levels = lint_levels;\n }\n \n-pub fn in_external_macro<'a, T: LintContext<'a>>(cx: &T, span: Span) -> bool {\n-    /// Invokes `in_macro` with the expansion info of the given span slightly\n-    /// heavy, try to use\n-    /// this after other checks have already happened.\n-    fn in_macro_ext<'a, T: LintContext<'a>>(cx: &T, info: &ExpnInfo) -> bool {\n-        // no ExpnInfo = no macro\n-        if let ExpnFormat::MacroAttribute(..) = info.callee.format {\n-            // these are all plugins\n-            return true;\n-        }\n-        // no span for the callee = external macro\n-        info.callee.span.map_or(true, |span| {\n-            // no snippet = external macro or compiler-builtin expansion\n-            cx.sess()\n-                .codemap()\n-                .span_to_snippet(span)\n-                .ok()\n-                .map_or(true, |code| !code.starts_with(\"macro_rules\"))\n-        })\n+/// Returns whether `span` originates in a foreign crate's external macro.\n+///\n+/// This is used to test whether a lint should be entirely aborted above.\n+pub fn in_external_macro(sess: &Session, span: Span) -> bool {\n+    let info = match span.ctxt().outer().expn_info() {\n+        Some(info) => info,\n+        // no ExpnInfo means this span doesn't come from a macro\n+        None => return false,\n+    };\n+\n+    match info.format {\n+        ExpnFormat::MacroAttribute(..) => return true, // definitely a plugin\n+        ExpnFormat::CompilerDesugaring(_) => return true, // well, it's \"external\"\n+        ExpnFormat::MacroBang(..) => {} // check below\n     }\n \n-    span.ctxt()\n-        .outer()\n-        .expn_info()\n-        .map_or(false, |info| in_macro_ext(cx, &info))\n+    let def_site = match info.def_site {\n+        Some(span) => span,\n+        // no span for the def_site means it's an external macro\n+        None => return true,\n+    };\n+\n+    match sess.codemap().span_to_snippet(def_site) {\n+        Ok(code) => !code.starts_with(\"macro_rules\"),\n+        // no snippet = external macro or compiler-builtin expansion\n+        Err(_) => true,\n+    }\n }"}, {"sha": "cf8e9c18de3c0d701a7b13d2645bb10c84d223f3", "filename": "src/test/ui/lint/auxiliary/lints-in-foreign-macros.rs", "status": "renamed", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8adf08c4373f5bdd5bbef9aa4dfd0ca5c4a2eefc/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flints-in-foreign-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adf08c4373f5bdd5bbef9aa4dfd0ca5c4a2eefc/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flints-in-foreign-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flints-in-foreign-macros.rs?ref=8adf08c4373f5bdd5bbef9aa4dfd0ca5c4a2eefc", "patch": "@@ -7,9 +7,18 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(nll)]\n-#![deny(elided_lifetime_in_path)]\n \n-fn main() {\n-    format!(\"foo {}\", 22)\n+#[macro_export]\n+macro_rules! bar {\n+    () => {use std::string::ToString;}\n+}\n+\n+#[macro_export]\n+macro_rules! baz {\n+    ($i:item) => ($i)\n+}\n+\n+#[macro_export]\n+macro_rules! baz2 {\n+    ($($i:tt)*) => ($($i)*)\n }", "previous_filename": "src/test/ui/in-band-lifetimes/ellided-lifetimes-macro-checks.rs"}, {"sha": "0f9003877cc0621ac554154a989d7ae9e1fd7eb7", "filename": "src/test/ui/lint/lints-in-foreign-macros.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8adf08c4373f5bdd5bbef9aa4dfd0ca5c4a2eefc/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adf08c4373f5bdd5bbef9aa4dfd0ca5c4a2eefc/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.rs?ref=8adf08c4373f5bdd5bbef9aa4dfd0ca5c4a2eefc", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:lints-in-foreign-macros.rs\n+// compile-pass\n+\n+#![warn(unused_imports)]\n+\n+#[macro_use]\n+extern crate lints_in_foreign_macros;\n+\n+macro_rules! foo {\n+    () => {use std::string::ToString;} //~ WARN: unused import\n+}\n+\n+mod a { foo!(); }\n+mod b { bar!(); }\n+mod c { baz!(use std::string::ToString;); } //~ WARN: unused import\n+mod d { baz2!(use std::string::ToString;); } //~ WARN: unused import\n+\n+fn main() {}"}, {"sha": "e9f6d3d3815414299b233479f58a1041e01fbec3", "filename": "src/test/ui/lint/lints-in-foreign-macros.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8adf08c4373f5bdd5bbef9aa4dfd0ca5c4a2eefc/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8adf08c4373f5bdd5bbef9aa4dfd0ca5c4a2eefc/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr?ref=8adf08c4373f5bdd5bbef9aa4dfd0ca5c4a2eefc", "patch": "@@ -0,0 +1,27 @@\n+warning: unused import: `std::string::ToString`\n+  --> $DIR/lints-in-foreign-macros.rs:20:16\n+   |\n+LL |     () => {use std::string::ToString;} //~ WARN: unused import\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | mod a { foo!(); }\n+   |         ------- in this macro invocation\n+   |\n+note: lint level defined here\n+  --> $DIR/lints-in-foreign-macros.rs:14:9\n+   |\n+LL | #![warn(unused_imports)]\n+   |         ^^^^^^^^^^^^^^\n+\n+warning: unused import: `std::string::ToString`\n+  --> $DIR/lints-in-foreign-macros.rs:25:18\n+   |\n+LL | mod c { baz!(use std::string::ToString;); } //~ WARN: unused import\n+   |                  ^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused import: `std::string::ToString`\n+  --> $DIR/lints-in-foreign-macros.rs:26:19\n+   |\n+LL | mod d { baz2!(use std::string::ToString;); } //~ WARN: unused import\n+   |                   ^^^^^^^^^^^^^^^^^^^^^\n+"}]}