{"sha": "4b5da4aefe263f044e554b2f654ecdca62086722", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNWRhNGFlZmUyNjNmMDQ0ZTU1NGIyZjY1NGVjZGNhNjIwODY3MjI=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-09-03T11:30:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-03T11:30:48Z"}, "message": "Rollup merge of #88557 - lcnr:const-generics-cleanup, r=BoxyUwU\n\nsmall const generics cleanup", "tree": {"sha": "3b98c6373b70bd43503d885ff167557e82a6b698", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b98c6373b70bd43503d885ff167557e82a6b698"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b5da4aefe263f044e554b2f654ecdca62086722", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhMgdoCRBK7hj4Ov3rIwAA8lsIADu+in+TakDFTDyELZLQxgrt\n+RPwf5LEV17N5nvpR6Zbd8AYUKmNvzi9McArUVr7Rr7foFTLzCUc8NdatgJsCeXM\nE0ZucoY8sKIpDNALH0SGHXlg9a8+sTPCMMub3zAfzgnUU7oO8R7cMP2DeAs43TvM\nyhIxEwVWIouMOFVQE9UKXxmnlgBiSvpDG89jDl6deHDUbGsjgl0hCvpFaLEeSFXk\neQBZB0JMvFtpWCCfGL6DPpCNIoOoiK8bZskUEmsIKlTRJl8jCWC9ClyF86FbToE+\njNbeoeSzErwhnPVthfKewka9f9ThjxcWS1OJ6yKXQ6MFsRdp+r+kzfBUpwvJdyY=\n=EZ1P\n-----END PGP SIGNATURE-----\n", "payload": "tree 3b98c6373b70bd43503d885ff167557e82a6b698\nparent 80b572b5e5ed24b1874a25429fdd0fc0144c692e\nparent d18ff40a3d9de01dbff4fe7f6ba7fa6db7c65752\nauthor Mara Bos <m-ou.se@m-ou.se> 1630668648 +0200\ncommitter GitHub <noreply@github.com> 1630668648 +0200\n\nRollup merge of #88557 - lcnr:const-generics-cleanup, r=BoxyUwU\n\nsmall const generics cleanup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b5da4aefe263f044e554b2f654ecdca62086722", "html_url": "https://github.com/rust-lang/rust/commit/4b5da4aefe263f044e554b2f654ecdca62086722", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b5da4aefe263f044e554b2f654ecdca62086722/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80b572b5e5ed24b1874a25429fdd0fc0144c692e", "url": "https://api.github.com/repos/rust-lang/rust/commits/80b572b5e5ed24b1874a25429fdd0fc0144c692e", "html_url": "https://github.com/rust-lang/rust/commit/80b572b5e5ed24b1874a25429fdd0fc0144c692e"}, {"sha": "d18ff40a3d9de01dbff4fe7f6ba7fa6db7c65752", "url": "https://api.github.com/repos/rust-lang/rust/commits/d18ff40a3d9de01dbff4fe7f6ba7fa6db7c65752", "html_url": "https://github.com/rust-lang/rust/commit/d18ff40a3d9de01dbff4fe7f6ba7fa6db7c65752"}], "stats": {"total": 37, "additions": 6, "deletions": 31}, "files": [{"sha": "57b8a84300ff9e0db5464fc1759d913c0b6ae9c9", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4b5da4aefe263f044e554b2f654ecdca62086722/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b5da4aefe263f044e554b2f654ecdca62086722/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=4b5da4aefe263f044e554b2f654ecdca62086722", "patch": "@@ -820,10 +820,10 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n             }\n         }\n \n-        fn visit_const(&mut self, ct: &ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-            // First check if the type of this constant references `Self`.\n-            self.visit_ty(ct.ty)?;\n-\n+        fn visit_unevaluated_const(\n+            &mut self,\n+            uv: ty::Unevaluated<'tcx>,\n+        ) -> ControlFlow<Self::BreakTy> {\n             // Constants can only influence object safety if they reference `Self`.\n             // This is only possible for unevaluated constants, so we walk these here.\n             //\n@@ -837,7 +837,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n             // This shouldn't really matter though as we can't really use any\n             // constants which are not considered const evaluatable.\n             use rustc_middle::mir::abstract_const::Node;\n-            if let Ok(Some(ct)) = AbstractConst::from_const(self.tcx, ct) {\n+            if let Ok(Some(ct)) = AbstractConst::new(self.tcx, uv.shrink()) {\n                 const_evaluatable::walk_abstract_const(self.tcx, ct, |node| match node.root() {\n                     Node::Leaf(leaf) => {\n                         let leaf = leaf.subst(self.tcx, ct.substs);\n@@ -852,31 +852,6 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n                 ControlFlow::CONTINUE\n             }\n         }\n-\n-        fn visit_predicate(&mut self, pred: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n-            if let ty::PredicateKind::ConstEvaluatable(ct) = pred.kind().skip_binder() {\n-                // FIXME(generic_const_exprs): We should probably deduplicate the logic for\n-                // `AbstractConst`s here, it might make sense to change `ConstEvaluatable` to\n-                // take a `ty::Const` instead.\n-                use rustc_middle::mir::abstract_const::Node;\n-                if let Ok(Some(ct)) = AbstractConst::new(self.tcx, ct) {\n-                    const_evaluatable::walk_abstract_const(self.tcx, ct, |node| match node.root() {\n-                        Node::Leaf(leaf) => {\n-                            let leaf = leaf.subst(self.tcx, ct.substs);\n-                            self.visit_const(leaf)\n-                        }\n-                        Node::Cast(_, _, ty) => self.visit_ty(ty),\n-                        Node::Binop(..) | Node::UnaryOp(..) | Node::FunctionCall(_, _) => {\n-                            ControlFlow::CONTINUE\n-                        }\n-                    })\n-                } else {\n-                    ControlFlow::CONTINUE\n-                }\n-            } else {\n-                pred.super_visit_with(self)\n-            }\n-        }\n     }\n \n     value"}, {"sha": "0e96601d89fd8d91204a0ee3af63b69c60fbd0c0", "filename": "compiler/rustc_typeck/src/outlives/implicit_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b5da4aefe263f044e554b2f654ecdca62086722/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b5da4aefe263f044e554b2f654ecdca62086722/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs?ref=4b5da4aefe263f044e554b2f654ecdca62086722", "patch": "@@ -120,7 +120,7 @@ fn insert_required_predicates_to_be_wf<'tcx>(\n     // Luckily the only types contained in default substs are type\n     // parameters which don't matter here.\n     //\n-    // FIXME(const_generics): Once more complex const parameter types\n+    // FIXME(adt_const_params): Once complex const parameter types\n     // are allowed, this might be incorrect. I think that we will still be\n     // fine, as all outlives relations of the const param types should also\n     // be part of the adt containing it, but we should still both update the"}]}