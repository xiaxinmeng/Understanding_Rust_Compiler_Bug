{"sha": "230a8ee364b693c286a2187e56239cd2cc3be318", "node_id": "C_kwDOAAsO6NoAKDIzMGE4ZWUzNjRiNjkzYzI4NmEyMTg3ZTU2MjM5Y2QyY2MzYmUzMTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-30T11:13:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-30T11:13:58Z"}, "message": "Auto merge of #98100 - bjorn3:use_object_for_bitcode_reading, r=wesleywiser\n\nUse object instead of LLVM for reading bitcode from rlibs\n\nTogether with changes I plan to make as part of https://github.com/rust-lang/rust/pull/97485 this will allow entirely removing usage of LLVM's archive reader and thus allow removing `archive_ro.rs` and `ArchiveWrapper.cpp`.", "tree": {"sha": "bef7b4ad7dff2c759ba5eb9ea81ca49bfea986d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bef7b4ad7dff2c759ba5eb9ea81ca49bfea986d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/230a8ee364b693c286a2187e56239cd2cc3be318", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/230a8ee364b693c286a2187e56239cd2cc3be318", "html_url": "https://github.com/rust-lang/rust/commit/230a8ee364b693c286a2187e56239cd2cc3be318", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/230a8ee364b693c286a2187e56239cd2cc3be318/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0631ea5d73f4a3199c776687b12c20c50a91f0d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0631ea5d73f4a3199c776687b12c20c50a91f0d2", "html_url": "https://github.com/rust-lang/rust/commit/0631ea5d73f4a3199c776687b12c20c50a91f0d2"}, {"sha": "395d564f2592c8981b74b14305100c32ae7c53cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/395d564f2592c8981b74b14305100c32ae7c53cb", "html_url": "https://github.com/rust-lang/rust/commit/395d564f2592c8981b74b14305100c32ae7c53cb"}], "stats": {"total": 48, "additions": 18, "deletions": 30}, "files": [{"sha": "21d522cb9ff42b6d1b724fb886abdbb025889c80", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/230a8ee364b693c286a2187e56239cd2cc3be318/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/230a8ee364b693c286a2187e56239cd2cc3be318/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=230a8ee364b693c286a2187e56239cd2cc3be318", "patch": "@@ -3334,6 +3334,7 @@ dependencies = [\n  \"libc\",\n  \"libloading\",\n  \"measureme\",\n+ \"object 0.29.0\",\n  \"rustc-demangle\",\n  \"rustc_ast\",\n  \"rustc_attr\","}, {"sha": "74115353aaf76267fc9e82e0710b90c29b3a157c", "filename": "compiler/rustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/230a8ee364b693c286a2187e56239cd2cc3be318/compiler%2Frustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/230a8ee364b693c286a2187e56239cd2cc3be318/compiler%2Frustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2FCargo.toml?ref=230a8ee364b693c286a2187e56239cd2cc3be318", "patch": "@@ -13,6 +13,7 @@ cstr = \"0.2\"\n libc = \"0.2\"\n libloading = \"0.7.1\"\n measureme = \"10.0.0\"\n+object = { version = \"0.29.0\", default-features = false, features = [\"std\", \"read_core\", \"archive\", \"coff\", \"elf\", \"macho\", \"pe\"] }\n tracing = \"0.1\"\n rustc_middle = { path = \"../rustc_middle\" }\n rustc-demangle = \"0.1.21\""}, {"sha": "e4af6269abc5305870515a832baf27da3111b677", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/230a8ee364b693c286a2187e56239cd2cc3be318/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230a8ee364b693c286a2187e56239cd2cc3be318/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=230a8ee364b693c286a2187e56239cd2cc3be318", "patch": "@@ -1,15 +1,16 @@\n use crate::back::write::{\n     self, save_temp_bitcode, to_llvm_opt_settings, with_llvm_pmb, DiagnosticHandlers,\n };\n-use crate::llvm::archive_ro::ArchiveRO;\n use crate::llvm::{self, build_string, False, True};\n use crate::{llvm_util, LlvmCodegenBackend, ModuleLlvm};\n+use object::read::archive::ArchiveFile;\n use rustc_codegen_ssa::back::lto::{LtoModuleCodegen, SerializedModule, ThinModule, ThinShared};\n use rustc_codegen_ssa::back::symbol_export;\n use rustc_codegen_ssa::back::write::{CodegenContext, FatLTOInput, TargetMachineFactoryConfig};\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::{looks_like_rust_object_file, ModuleCodegen, ModuleKind};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::memmap::Mmap;\n use rustc_errors::{FatalError, Handler};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::bug;\n@@ -107,14 +108,24 @@ fn prepare_lto(\n                     .extend(exported_symbols[&cnum].iter().filter_map(symbol_filter));\n             }\n \n-            let archive = ArchiveRO::open(path).expect(\"wanted an rlib\");\n+            let archive_data = unsafe {\n+                Mmap::map(std::fs::File::open(&path).expect(\"couldn't open rlib\"))\n+                    .expect(\"couldn't map rlib\")\n+            };\n+            let archive = ArchiveFile::parse(&*archive_data).expect(\"wanted an rlib\");\n             let obj_files = archive\n-                .iter()\n-                .filter_map(|child| child.ok().and_then(|c| c.name().map(|name| (name, c))))\n+                .members()\n+                .filter_map(|child| {\n+                    child.ok().and_then(|c| {\n+                        std::str::from_utf8(c.name()).ok().map(|name| (name.trim(), c))\n+                    })\n+                })\n                 .filter(|&(name, _)| looks_like_rust_object_file(name));\n             for (name, child) in obj_files {\n                 info!(\"adding bitcode from {}\", name);\n-                match get_bitcode_slice_from_object_data(child.data()) {\n+                match get_bitcode_slice_from_object_data(\n+                    child.data(&*archive_data).expect(\"corrupt rlib\"),\n+                ) {\n                     Ok(data) => {\n                         let module = SerializedModule::FromRlib(data.to_vec());\n                         upstream_modules.push((module, CString::new(name).unwrap()));"}, {"sha": "7d948970223451361bfe606341afa17a07c2ee6d", "filename": "compiler/rustc_codegen_llvm/src/llvm/archive_ro.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/230a8ee364b693c286a2187e56239cd2cc3be318/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Farchive_ro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230a8ee364b693c286a2187e56239cd2cc3be318/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Farchive_ro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Farchive_ro.rs?ref=230a8ee364b693c286a2187e56239cd2cc3be318", "patch": "@@ -83,17 +83,6 @@ impl<'a> Child<'a> {\n             }\n         }\n     }\n-\n-    pub fn data(&self) -> &'a [u8] {\n-        unsafe {\n-            let mut data_len = 0;\n-            let data_ptr = super::LLVMRustArchiveChildData(self.raw, &mut data_len);\n-            if data_ptr.is_null() {\n-                panic!(\"failed to read data from archive child\");\n-            }\n-            slice::from_raw_parts(data_ptr as *const u8, data_len as usize)\n-        }\n-    }\n }\n \n impl<'a> Drop for Child<'a> {"}, {"sha": "172684414fc5534495d2218c26062c80306f4b94", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/230a8ee364b693c286a2187e56239cd2cc3be318/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230a8ee364b693c286a2187e56239cd2cc3be318/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=230a8ee364b693c286a2187e56239cd2cc3be318", "patch": "@@ -2389,7 +2389,6 @@ extern \"C\" {\n         AIR: &ArchiveIterator<'a>,\n     ) -> Option<&'a mut ArchiveChild<'a>>;\n     pub fn LLVMRustArchiveChildName(ACR: &ArchiveChild<'_>, size: &mut size_t) -> *const c_char;\n-    pub fn LLVMRustArchiveChildData(ACR: &ArchiveChild<'_>, size: &mut size_t) -> *const c_char;\n     pub fn LLVMRustArchiveChildFree<'a>(ACR: &'a mut ArchiveChild<'a>);\n     pub fn LLVMRustArchiveIteratorFree<'a>(AIR: &'a mut ArchiveIterator<'a>);\n     pub fn LLVMRustDestroyArchive(AR: &'static mut Archive);"}, {"sha": "448a1f62f69edce1a815b7221a3ac05ccd0a26d2", "filename": "compiler/rustc_llvm/llvm-wrapper/ArchiveWrapper.cpp", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/230a8ee364b693c286a2187e56239cd2cc3be318/compiler%2Frustc_llvm%2Fllvm-wrapper%2FArchiveWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/230a8ee364b693c286a2187e56239cd2cc3be318/compiler%2Frustc_llvm%2Fllvm-wrapper%2FArchiveWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FArchiveWrapper.cpp?ref=230a8ee364b693c286a2187e56239cd2cc3be318", "patch": "@@ -154,19 +154,6 @@ LLVMRustArchiveChildName(LLVMRustArchiveChildConstRef Child, size_t *Size) {\n   return Name.data();\n }\n \n-extern \"C\" const char *LLVMRustArchiveChildData(LLVMRustArchiveChildRef Child,\n-                                                size_t *Size) {\n-  StringRef Buf;\n-  Expected<StringRef> BufOrErr = Child->getBuffer();\n-  if (!BufOrErr) {\n-    LLVMRustSetLastError(toString(BufOrErr.takeError()).c_str());\n-    return nullptr;\n-  }\n-  Buf = BufOrErr.get();\n-  *Size = Buf.size();\n-  return Buf.data();\n-}\n-\n extern \"C\" LLVMRustArchiveMemberRef\n LLVMRustArchiveMemberNew(char *Filename, char *Name,\n                          LLVMRustArchiveChildRef Child) {"}]}