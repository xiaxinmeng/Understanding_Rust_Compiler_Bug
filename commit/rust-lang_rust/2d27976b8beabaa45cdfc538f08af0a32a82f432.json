{"sha": "2d27976b8beabaa45cdfc538f08af0a32a82f432", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMjc5NzZiOGJlYWJhYTQ1Y2RmYzUzOGYwOGFmMGEzMmE4MmY0MzI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-08-12T17:04:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-12T17:04:16Z"}, "message": "Rollup merge of #87965 - m-ou-se:non-fmt-panic-external, r=estebank\n\nSilence non_fmt_panic from external macros.\n\nThis stops the non_fmt_panic lint from triggering if a macro from another crate is entirely responsible. In those cases there's nothing that the current crate can/should do.\n\nSee also https://github.com/rust-lang/rust/issues/87621#issuecomment-890311054", "tree": {"sha": "65808d4edd0465e5119b88b55d11a5cc432c09df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65808d4edd0465e5119b88b55d11a5cc432c09df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d27976b8beabaa45cdfc538f08af0a32a82f432", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhFVSRCRBK7hj4Ov3rIwAAsvIIAIsuU2UuUlDYeaMchANZObYW\nvC/n3hqFdXj6B4U2xyozjMZfIp0XVBcphHnwNPljXy+zPUA35yPm+aJGqj41miFm\nLyL7yMXZRhktCALO5aIigp7HF7QW5/UBrR3GYRFmYGXPfO8viW8HZ1e66ouAKpYY\nHJXvi8LCCPKCCzOl5Dsb6Gg0gMvkng9AU86LzdJFrwQpUd1aekgjk+DmB1doKtf9\nce0xYjn43EKuxHZycSx68xMBaXB3O9TDeJlXT7O9mkyEZuq/5mNOWnSK5fl0KTSR\ntioM8sfgR38jrm6npy5CgYX3PaV8YE0fLpCtNAteGst9d6zvMmWqMXaaPas4/oI=\n=XPAW\n-----END PGP SIGNATURE-----\n", "payload": "tree 65808d4edd0465e5119b88b55d11a5cc432c09df\nparent 0c4e37ad5cd9bb510a2480edb9d45456b4cc092b\nparent a6da55c70ec427d7951a1d8d2c6a0ad17a8fc225\nauthor Manish Goregaokar <manishsmail@gmail.com> 1628787856 -0700\ncommitter GitHub <noreply@github.com> 1628787856 -0700\n\nRollup merge of #87965 - m-ou-se:non-fmt-panic-external, r=estebank\n\nSilence non_fmt_panic from external macros.\n\nThis stops the non_fmt_panic lint from triggering if a macro from another crate is entirely responsible. In those cases there's nothing that the current crate can/should do.\n\nSee also https://github.com/rust-lang/rust/issues/87621#issuecomment-890311054\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d27976b8beabaa45cdfc538f08af0a32a82f432", "html_url": "https://github.com/rust-lang/rust/commit/2d27976b8beabaa45cdfc538f08af0a32a82f432", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d27976b8beabaa45cdfc538f08af0a32a82f432/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c4e37ad5cd9bb510a2480edb9d45456b4cc092b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b", "html_url": "https://github.com/rust-lang/rust/commit/0c4e37ad5cd9bb510a2480edb9d45456b4cc092b"}, {"sha": "a6da55c70ec427d7951a1d8d2c6a0ad17a8fc225", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6da55c70ec427d7951a1d8d2c6a0ad17a8fc225", "html_url": "https://github.com/rust-lang/rust/commit/a6da55c70ec427d7951a1d8d2c6a0ad17a8fc225"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "ec53625f10525014264c53f0dc895ec7c858aa19", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2d27976b8beabaa45cdfc538f08af0a32a82f432/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d27976b8beabaa45cdfc538f08af0a32a82f432/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=2d27976b8beabaa45cdfc538f08af0a32a82f432", "patch": "@@ -2,6 +2,7 @@ use crate::{LateContext, LateLintPass, LintContext};\n use rustc_ast as ast;\n use rustc_errors::{pluralize, Applicability};\n use rustc_hir as hir;\n+use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_parse_format::{ParseMode, Parser, Piece};\n use rustc_session::lint::FutureIncompatibilityReason;\n@@ -75,6 +76,11 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n \n     let (span, panic, symbol_str) = panic_call(cx, f);\n \n+    if in_external_macro(cx.sess(), span) {\n+        // Nothing that can be done about it in the current crate.\n+        return;\n+    }\n+\n     // Find the span of the argument to `panic!()`, before expansion in the\n     // case of `panic!(some_macro!())`.\n     // We don't use source_callsite(), because this `panic!(..)` might itself\n@@ -152,6 +158,13 @@ fn check_panic_str<'tcx>(\n         return;\n     }\n \n+    let (span, _, _) = panic_call(cx, f);\n+\n+    if in_external_macro(cx.sess(), span) && in_external_macro(cx.sess(), arg.span) {\n+        // Nothing that can be done about it in the current crate.\n+        return;\n+    }\n+\n     let fmt_span = arg.span.source_callsite();\n \n     let (snippet, style) = match cx.sess().parse_sess.source_map().span_to_snippet(fmt_span) {\n@@ -167,8 +180,6 @@ fn check_panic_str<'tcx>(\n         Parser::new(fmt.as_ref(), style, snippet.clone(), false, ParseMode::Format);\n     let n_arguments = (&mut fmt_parser).filter(|a| matches!(a, Piece::NextArgument(_))).count();\n \n-    let (span, _, _) = panic_call(cx, f);\n-\n     if n_arguments > 0 && fmt_parser.errors.is_empty() {\n         let arg_spans: Vec<_> = match &fmt_parser.arg_places[..] {\n             [] => vec![fmt_span],"}, {"sha": "35be93b0590326121fad5b9b18aa71d5c8b157f2", "filename": "src/test/ui/auxiliary/fancy-panic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d27976b8beabaa45cdfc538f08af0a32a82f432/src%2Ftest%2Fui%2Fauxiliary%2Ffancy-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d27976b8beabaa45cdfc538f08af0a32a82f432/src%2Ftest%2Fui%2Fauxiliary%2Ffancy-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Ffancy-panic.rs?ref=2d27976b8beabaa45cdfc538f08af0a32a82f432", "patch": "@@ -1,5 +1,8 @@\n #[macro_export]\n macro_rules! fancy_panic {\n+    () => {\n+        panic!(\"{}\");\n+    };\n     ($msg:expr) => {\n         panic!($msg)\n     };"}, {"sha": "0de424ce279f3e4cb6cdbc33ebbb5bcc43c66664", "filename": "src/test/ui/non-fmt-panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d27976b8beabaa45cdfc538f08af0a32a82f432/src%2Ftest%2Fui%2Fnon-fmt-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d27976b8beabaa45cdfc538f08af0a32a82f432/src%2Ftest%2Fui%2Fnon-fmt-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.rs?ref=2d27976b8beabaa45cdfc538f08af0a32a82f432", "patch": "@@ -26,8 +26,8 @@ fn main() {\n     fancy_panic::fancy_panic!(\"test {} 123\");\n     //~^ WARN panic message contains an unused formatting placeholder\n \n-    fancy_panic::fancy_panic!(S);\n-    //~^ WARN panic message is not a string literal\n+    fancy_panic::fancy_panic!(); // OK\n+    fancy_panic::fancy_panic!(S); // OK\n \n     macro_rules! a {\n         () => { 123 };"}, {"sha": "4b18f5546b9b80121bfbe4bffeece9792f105b93", "filename": "src/test/ui/non-fmt-panic.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2d27976b8beabaa45cdfc538f08af0a32a82f432/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d27976b8beabaa45cdfc538f08af0a32a82f432/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr?ref=2d27976b8beabaa45cdfc538f08af0a32a82f432", "patch": "@@ -180,15 +180,6 @@ LL |     fancy_panic::fancy_panic!(\"test {} 123\");\n    |\n    = note: this message is not used as a format string when given without arguments, but will be in Rust 2021\n \n-warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:29:31\n-   |\n-LL |     fancy_panic::fancy_panic!(S);\n-   |                               ^\n-   |\n-   = note: this usage of panic!() is deprecated; it will be a hard error in Rust 2021\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-\n warning: panic message is not a string literal\n   --> $DIR/non-fmt-panic.rs:36:12\n    |\n@@ -285,5 +276,5 @@ help: or use std::panic::panic_any instead\n LL |     std::panic::panic_any(123);\n    |     ~~~~~~~~~~~~~~~~~~~~~~   ~\n \n-warning: 20 warnings emitted\n+warning: 19 warnings emitted\n "}]}