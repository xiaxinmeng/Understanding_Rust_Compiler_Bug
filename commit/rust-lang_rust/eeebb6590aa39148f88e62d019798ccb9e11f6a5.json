{"sha": "eeebb6590aa39148f88e62d019798ccb9e11f6a5", "node_id": "C_kwDOAAsO6NoAKGVlZWJiNjU5MGFhMzkxNDhmODhlNjJkMDE5Nzk4Y2NiOWUxMWY2YTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-15T15:12:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-15T15:12:47Z"}, "message": "Rollup merge of #111587 - cbeuw:copy-for-deref, r=oli-obk\n\nCustom MIR: Support `Rvalue::CopyForDeref`\n\nr? `@oli-obk` or `@tmiasko` or `@JakobDegen`", "tree": {"sha": "d3f7fe85c1bf630cec573627d33a2ff835001989", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3f7fe85c1bf630cec573627d33a2ff835001989"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eeebb6590aa39148f88e62d019798ccb9e11f6a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkYkvvCRBK7hj4Ov3rIwAAjZgIACqJt93dyV9QbQiDFpWLhtYC\nWzkcjflVtYbnCHlSGuE+bNzAlndFt9Vyk5iiFwMHrlHXXgMeWH3HD//1jTygJc3H\n3EOOctz6Tk5WsU6wBTtr/pIfJj+UnwRF9dBQYhARzwmzbc7BEgsQmKletSybEfOJ\nxXK8RqvPSl/8dLc48T4u0YBGokvRA5HiQ/b3rllBIByE+sFN94w1TCKS0N5QP4yI\nRpL7x4659/Gufttbk3wkgFIwYYYuB8htl4HIu/+XJlo0zlWAPjpb3gk3/QfcTiTW\nAXXDlDdSyZGnZGkA4ocdM3KT7Qti8UfIPtyhi+IhnDLKkx8CyI96D3ABw3krlkg=\n=tguO\n-----END PGP SIGNATURE-----\n", "payload": "tree d3f7fe85c1bf630cec573627d33a2ff835001989\nparent 119b72289b68caf920c3d76bdaa59c3b5e79a6e4\nparent 3d938ddb39467614301e9843af29bbfe843cc7ad\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1684163567 +0200\ncommitter GitHub <noreply@github.com> 1684163567 +0200\n\nRollup merge of #111587 - cbeuw:copy-for-deref, r=oli-obk\n\nCustom MIR: Support `Rvalue::CopyForDeref`\n\nr? `@oli-obk` or `@tmiasko` or `@JakobDegen`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eeebb6590aa39148f88e62d019798ccb9e11f6a5", "html_url": "https://github.com/rust-lang/rust/commit/eeebb6590aa39148f88e62d019798ccb9e11f6a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eeebb6590aa39148f88e62d019798ccb9e11f6a5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "119b72289b68caf920c3d76bdaa59c3b5e79a6e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/119b72289b68caf920c3d76bdaa59c3b5e79a6e4", "html_url": "https://github.com/rust-lang/rust/commit/119b72289b68caf920c3d76bdaa59c3b5e79a6e4"}, {"sha": "3d938ddb39467614301e9843af29bbfe843cc7ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d938ddb39467614301e9843af29bbfe843cc7ad", "html_url": "https://github.com/rust-lang/rust/commit/3d938ddb39467614301e9843af29bbfe843cc7ad"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "b74422708ce5cbf9478317897d4e53a05a747097", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eeebb6590aa39148f88e62d019798ccb9e11f6a5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeebb6590aa39148f88e62d019798ccb9e11f6a5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=eeebb6590aa39148f88e62d019798ccb9e11f6a5", "patch": "@@ -154,6 +154,7 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n                 Ok(Rvalue::BinaryOp(BinOp::Offset, Box::new((ptr, offset))))\n             },\n             @call(\"mir_len\", args) => Ok(Rvalue::Len(self.parse_place(args[0])?)),\n+            @call(\"mir_copy_for_deref\", args) => Ok(Rvalue::CopyForDeref(self.parse_place(args[0])?)),\n             ExprKind::Borrow { borrow_kind, arg } => Ok(\n                 Rvalue::Ref(self.tcx.lifetimes.re_erased, *borrow_kind, self.parse_place(*arg)?)\n             ),"}, {"sha": "5944a0de1a4b2aa928a34cdcd51625ddf601a7fe", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eeebb6590aa39148f88e62d019798ccb9e11f6a5/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeebb6590aa39148f88e62d019798ccb9e11f6a5/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=eeebb6590aa39148f88e62d019798ccb9e11f6a5", "patch": "@@ -228,7 +228,7 @@\n //!\n //!  - Operands implicitly convert to `Use` rvalues.\n //!  - `&`, `&mut`, `addr_of!`, and `addr_of_mut!` all work to create their associated rvalue.\n-//!  - [`Discriminant`] and [`Len`] have associated functions.\n+//!  - [`Discriminant`], [`Len`], and [`CopyForDeref`] have associated functions.\n //!  - Unary and binary operations use their normal Rust syntax - `a * b`, `!c`, etc.\n //!  - The binary operation `Offset` can be created via [`Offset`].\n //!  - Checked binary operations are represented by wrapping the associated binop in [`Checked`].\n@@ -279,6 +279,7 @@ define!(\"mir_storage_dead\", fn StorageDead<T>(local: T));\n define!(\"mir_deinit\", fn Deinit<T>(place: T));\n define!(\"mir_checked\", fn Checked<T>(binop: T) -> (T, bool));\n define!(\"mir_len\", fn Len<T>(place: T) -> usize);\n+define!(\"mir_copy_for_deref\", fn CopyForDeref<T>(place: T) -> T);\n define!(\"mir_retag\", fn Retag<T>(place: T));\n define!(\"mir_move\", fn Move<T>(place: T) -> T);\n define!(\"mir_static\", fn Static<T>(s: T) -> &'static T);"}, {"sha": "5233d0489c63f063c6016fb58f3683cb615e4b1c", "filename": "tests/mir-opt/building/custom/projections.copy_for_deref.built.after.mir", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eeebb6590aa39148f88e62d019798ccb9e11f6a5/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.copy_for_deref.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/eeebb6590aa39148f88e62d019798ccb9e11f6a5/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.copy_for_deref.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.copy_for_deref.built.after.mir?ref=eeebb6590aa39148f88e62d019798ccb9e11f6a5", "patch": "@@ -0,0 +1,12 @@\n+// MIR for `copy_for_deref` after built\n+\n+fn copy_for_deref(_1: (&i32, i32)) -> i32 {\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/projections.rs:+0:38: +0:41\n+    let mut _2: &i32;                    // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+\n+    bb0: {\n+        _2 = deref_copy (_1.0: &i32);    // scope 0 at $DIR/projections.rs:+4:13: +4:37\n+        _0 = (*_2);                      // scope 0 at $DIR/projections.rs:+5:13: +5:24\n+        return;                          // scope 0 at $DIR/projections.rs:+6:13: +6:21\n+    }\n+}"}, {"sha": "3c155deae4b701700186533e43d438ad30ef564c", "filename": "tests/mir-opt/building/custom/projections.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/eeebb6590aa39148f88e62d019798ccb9e11f6a5/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeebb6590aa39148f88e62d019798ccb9e11f6a5/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.rs?ref=eeebb6590aa39148f88e62d019798ccb9e11f6a5", "patch": "@@ -21,13 +21,10 @@ fn unions(u: U) -> i32 {\n #[custom_mir(dialect = \"analysis\", phase = \"post-cleanup\")]\n fn tuples(i: (u32, i32)) -> (u32, i32) {\n     mir!(\n-        // FIXME(JakobDegen): This is necessary because we can't give type hints for `RET`\n-        let temp: (u32, i32);\n+        type RET = (u32, i32);\n         {\n-            temp.0 = i.0;\n-            temp.1 = i.1;\n-\n-            RET = temp;\n+            RET.0 = i.0;\n+            RET.1 = i.1;\n             Return()\n         }\n     )\n@@ -71,6 +68,19 @@ fn simple_index(a: [i32; 10], b: &[i32]) -> i32 {\n     })\n }\n \n+// EMIT_MIR projections.copy_for_deref.built.after.mir\n+#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\n+fn copy_for_deref(x: (&i32, i32)) -> i32 {\n+    mir!(\n+        let temp: &i32;\n+        {\n+            temp = CopyForDeref(x.0);\n+            RET = *temp;\n+            Return()\n+        }\n+    )\n+}\n+\n fn main() {\n     assert_eq!(unions(U { a: 5 }), 5);\n     assert_eq!(tuples((5, 6)), (5, 6));\n@@ -82,4 +92,7 @@ fn main() {\n     assert_eq!(o, Some(10));\n \n     assert_eq!(simple_index([0; 10], &[0; 10]), 0);\n+\n+    let one = 1;\n+    assert_eq!(copy_for_deref((&one, one)), 1);\n }"}, {"sha": "dec575200c64475bd16c5cc16b7d74f0a1dce0fa", "filename": "tests/mir-opt/building/custom/projections.tuples.built.after.mir", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eeebb6590aa39148f88e62d019798ccb9e11f6a5/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.tuples.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/eeebb6590aa39148f88e62d019798ccb9e11f6a5/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.tuples.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fprojections.tuples.built.after.mir?ref=eeebb6590aa39148f88e62d019798ccb9e11f6a5", "patch": "@@ -2,12 +2,10 @@\n \n fn tuples(_1: (u32, i32)) -> (u32, i32) {\n     let mut _0: (u32, i32);              // return place in scope 0 at $DIR/projections.rs:+0:29: +0:39\n-    let mut _2: (u32, i32);              // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n \n     bb0: {\n-        (_2.0: u32) = (_1.0: u32);       // scope 0 at $DIR/projections.rs:+5:13: +5:25\n-        (_2.1: i32) = (_1.1: i32);       // scope 0 at $DIR/projections.rs:+6:13: +6:25\n-        _0 = _2;                         // scope 0 at $DIR/projections.rs:+8:13: +8:23\n-        return;                          // scope 0 at $DIR/projections.rs:+9:13: +9:21\n+        (_0.0: u32) = (_1.0: u32);       // scope 0 at $DIR/projections.rs:+4:13: +4:24\n+        (_0.1: i32) = (_1.1: i32);       // scope 0 at $DIR/projections.rs:+5:13: +5:24\n+        return;                          // scope 0 at $DIR/projections.rs:+6:13: +6:21\n     }\n }"}]}