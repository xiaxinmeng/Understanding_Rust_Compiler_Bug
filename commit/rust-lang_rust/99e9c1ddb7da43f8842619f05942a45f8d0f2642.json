{"sha": "99e9c1ddb7da43f8842619f05942a45f8d0f2642", "node_id": "C_kwDOAAsO6NoAKDk5ZTljMWRkYjdkYTQzZjg4NDI2MTlmMDU5NDJhNDVmOGQwZjI2NDI", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-25T04:01:29Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-02T02:59:28Z"}, "message": "Remove six macros relating to lint definitions.\n\nThese were enabled by the removal of `-Zno-interleave-lints`.", "tree": {"sha": "1cdf4e8f0f47e97802d07b93d18bc93c37b909ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cdf4e8f0f47e97802d07b93d18bc93c37b909ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99e9c1ddb7da43f8842619f05942a45f8d0f2642", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99e9c1ddb7da43f8842619f05942a45f8d0f2642", "html_url": "https://github.com/rust-lang/rust/commit/99e9c1ddb7da43f8842619f05942a45f8d0f2642", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99e9c1ddb7da43f8842619f05942a45f8d0f2642/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154", "url": "https://api.github.com/repos/rust-lang/rust/commits/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154", "html_url": "https://github.com/rust-lang/rust/commit/67cfe2cfbb3cdd6d34dd3fbfd3037a60d01fa154"}], "stats": {"total": 222, "additions": 103, "deletions": 119}, "files": [{"sha": "10bae36e0fd3c3b4eb0d1c53daa1d7934236e15c", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 103, "deletions": 119, "changes": 222, "blob_url": "https://github.com/rust-lang/rust/blob/99e9c1ddb7da43f8842619f05942a45f8d0f2642/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e9c1ddb7da43f8842619f05942a45f8d0f2642/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=99e9c1ddb7da43f8842619f05942a45f8d0f2642", "patch": "@@ -127,127 +127,111 @@ fn lint_mod(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     late::late_lint_mod(tcx, module_def_id, BuiltinCombinedModuleLateLintPass::new());\n }\n \n-macro_rules! pre_expansion_lint_passes {\n-    ($macro:path, $args:tt) => {\n-        $macro!($args, [KeywordIdents: KeywordIdents,]);\n-    };\n-}\n-\n-macro_rules! early_lint_passes {\n-    ($macro:path, $args:tt) => {\n-        $macro!(\n-            $args,\n-            [\n-                UnusedParens: UnusedParens,\n-                UnusedBraces: UnusedBraces,\n-                UnusedImportBraces: UnusedImportBraces,\n-                UnsafeCode: UnsafeCode,\n-                SpecialModuleName: SpecialModuleName,\n-                AnonymousParameters: AnonymousParameters,\n-                EllipsisInclusiveRangePatterns: EllipsisInclusiveRangePatterns::default(),\n-                NonCamelCaseTypes: NonCamelCaseTypes,\n-                DeprecatedAttr: DeprecatedAttr::new(),\n-                WhileTrue: WhileTrue,\n-                NonAsciiIdents: NonAsciiIdents,\n-                HiddenUnicodeCodepoints: HiddenUnicodeCodepoints,\n-                IncompleteFeatures: IncompleteFeatures,\n-                RedundantSemicolons: RedundantSemicolons,\n-                UnusedDocComment: UnusedDocComment,\n-                UnexpectedCfgs: UnexpectedCfgs,\n-            ]\n-        );\n-    };\n-}\n-\n-macro_rules! declare_combined_early_pass {\n-    ([$name:ident], $passes:tt) => (\n-        early_lint_methods!(declare_combined_early_lint_pass, [pub $name, $passes]);\n-    )\n-}\n-\n-pre_expansion_lint_passes!(declare_combined_early_pass, [BuiltinCombinedPreExpansionLintPass]);\n-early_lint_passes!(declare_combined_early_pass, [BuiltinCombinedEarlyLintPass]);\n-\n-macro_rules! late_lint_passes {\n-    ($macro:path, $args:tt) => {\n-        $macro!(\n-            $args,\n-            [\n-                // Tracks state across modules\n-                UnnameableTestItems: UnnameableTestItems::new(),\n-                // Tracks attributes of parents\n-                MissingDoc: MissingDoc::new(),\n-                // Builds a global list of all impls of `Debug`.\n-                // FIXME: Turn the computation of types which implement Debug into a query\n-                // and change this to a module lint pass\n-                MissingDebugImplementations: MissingDebugImplementations::default(),\n-                // Keeps a global list of foreign declarations.\n-                ClashingExternDeclarations: ClashingExternDeclarations::new(),\n-            ]\n-        );\n-    };\n-}\n-\n-macro_rules! late_lint_mod_passes {\n-    ($macro:path, $args:tt) => {\n-        $macro!(\n-            $args,\n-            [\n-                ForLoopsOverFallibles: ForLoopsOverFallibles,\n-                DerefIntoDynSupertrait: DerefIntoDynSupertrait,\n-                HardwiredLints: HardwiredLints,\n-                ImproperCTypesDeclarations: ImproperCTypesDeclarations,\n-                ImproperCTypesDefinitions: ImproperCTypesDefinitions,\n-                VariantSizeDifferences: VariantSizeDifferences,\n-                BoxPointers: BoxPointers,\n-                PathStatements: PathStatements,\n-                LetUnderscore: LetUnderscore,\n-                // Depends on referenced function signatures in expressions\n-                UnusedResults: UnusedResults,\n-                NonUpperCaseGlobals: NonUpperCaseGlobals,\n-                NonShorthandFieldPatterns: NonShorthandFieldPatterns,\n-                UnusedAllocation: UnusedAllocation,\n-                // Depends on types used in type definitions\n-                MissingCopyImplementations: MissingCopyImplementations,\n-                // Depends on referenced function signatures in expressions\n-                MutableTransmutes: MutableTransmutes,\n-                TypeAliasBounds: TypeAliasBounds,\n-                TrivialConstraints: TrivialConstraints,\n-                TypeLimits: TypeLimits::new(),\n-                NonSnakeCase: NonSnakeCase,\n-                InvalidNoMangleItems: InvalidNoMangleItems,\n-                // Depends on effective visibilities\n-                UnreachablePub: UnreachablePub,\n-                ExplicitOutlivesRequirements: ExplicitOutlivesRequirements,\n-                InvalidValue: InvalidValue,\n-                DerefNullPtr: DerefNullPtr,\n-                // May Depend on constants elsewhere\n-                UnusedBrokenConst: UnusedBrokenConst,\n-                UnstableFeatures: UnstableFeatures,\n-                ArrayIntoIter: ArrayIntoIter::default(),\n-                DropTraitConstraints: DropTraitConstraints,\n-                TemporaryCStringAsPtr: TemporaryCStringAsPtr,\n-                NonPanicFmt: NonPanicFmt,\n-                NoopMethodCall: NoopMethodCall,\n-                EnumIntrinsicsNonEnums: EnumIntrinsicsNonEnums,\n-                InvalidAtomicOrdering: InvalidAtomicOrdering,\n-                NamedAsmLabels: NamedAsmLabels,\n-                OpaqueHiddenInferredBound: OpaqueHiddenInferredBound,\n-            ]\n-        );\n-    };\n-}\n-\n-macro_rules! declare_combined_late_pass {\n-    ([$v:vis $name:ident], $passes:tt) => (\n-        late_lint_methods!(declare_combined_late_lint_pass, [$v $name, $passes], ['tcx]);\n-    )\n-}\n+early_lint_methods!(\n+    declare_combined_early_lint_pass,\n+    [\n+        pub BuiltinCombinedPreExpansionLintPass,\n+        [\n+            KeywordIdents: KeywordIdents,\n+        ]\n+    ]\n+);\n+\n+early_lint_methods!(\n+    declare_combined_early_lint_pass,\n+    [\n+        pub BuiltinCombinedEarlyLintPass,\n+        [\n+            UnusedParens: UnusedParens,\n+            UnusedBraces: UnusedBraces,\n+            UnusedImportBraces: UnusedImportBraces,\n+            UnsafeCode: UnsafeCode,\n+            SpecialModuleName: SpecialModuleName,\n+            AnonymousParameters: AnonymousParameters,\n+            EllipsisInclusiveRangePatterns: EllipsisInclusiveRangePatterns::default(),\n+            NonCamelCaseTypes: NonCamelCaseTypes,\n+            DeprecatedAttr: DeprecatedAttr::new(),\n+            WhileTrue: WhileTrue,\n+            NonAsciiIdents: NonAsciiIdents,\n+            HiddenUnicodeCodepoints: HiddenUnicodeCodepoints,\n+            IncompleteFeatures: IncompleteFeatures,\n+            RedundantSemicolons: RedundantSemicolons,\n+            UnusedDocComment: UnusedDocComment,\n+            UnexpectedCfgs: UnexpectedCfgs,\n+        ]\n+    ]\n+);\n \n // FIXME: Make a separate lint type which do not require typeck tables\n-late_lint_passes!(declare_combined_late_pass, [pub BuiltinCombinedLateLintPass]);\n-\n-late_lint_mod_passes!(declare_combined_late_pass, [BuiltinCombinedModuleLateLintPass]);\n+late_lint_methods!(\n+    declare_combined_late_lint_pass,\n+    [\n+        pub BuiltinCombinedLateLintPass,\n+        [\n+            // Tracks state across modules\n+            UnnameableTestItems: UnnameableTestItems::new(),\n+            // Tracks attributes of parents\n+            MissingDoc: MissingDoc::new(),\n+            // Builds a global list of all impls of `Debug`.\n+            // FIXME: Turn the computation of types which implement Debug into a query\n+            // and change this to a module lint pass\n+            MissingDebugImplementations: MissingDebugImplementations::default(),\n+            // Keeps a global list of foreign declarations.\n+            ClashingExternDeclarations: ClashingExternDeclarations::new(),\n+        ]\n+    ],\n+    ['tcx]\n+);\n+\n+late_lint_methods!(\n+    declare_combined_late_lint_pass,\n+    [\n+        BuiltinCombinedModuleLateLintPass,\n+        [\n+            ForLoopsOverFallibles: ForLoopsOverFallibles,\n+            DerefIntoDynSupertrait: DerefIntoDynSupertrait,\n+            HardwiredLints: HardwiredLints,\n+            ImproperCTypesDeclarations: ImproperCTypesDeclarations,\n+            ImproperCTypesDefinitions: ImproperCTypesDefinitions,\n+            VariantSizeDifferences: VariantSizeDifferences,\n+            BoxPointers: BoxPointers,\n+            PathStatements: PathStatements,\n+            LetUnderscore: LetUnderscore,\n+            // Depends on referenced function signatures in expressions\n+            UnusedResults: UnusedResults,\n+            NonUpperCaseGlobals: NonUpperCaseGlobals,\n+            NonShorthandFieldPatterns: NonShorthandFieldPatterns,\n+            UnusedAllocation: UnusedAllocation,\n+            // Depends on types used in type definitions\n+            MissingCopyImplementations: MissingCopyImplementations,\n+            // Depends on referenced function signatures in expressions\n+            MutableTransmutes: MutableTransmutes,\n+            TypeAliasBounds: TypeAliasBounds,\n+            TrivialConstraints: TrivialConstraints,\n+            TypeLimits: TypeLimits::new(),\n+            NonSnakeCase: NonSnakeCase,\n+            InvalidNoMangleItems: InvalidNoMangleItems,\n+            // Depends on effective visibilities\n+            UnreachablePub: UnreachablePub,\n+            ExplicitOutlivesRequirements: ExplicitOutlivesRequirements,\n+            InvalidValue: InvalidValue,\n+            DerefNullPtr: DerefNullPtr,\n+            // May Depend on constants elsewhere\n+            UnusedBrokenConst: UnusedBrokenConst,\n+            UnstableFeatures: UnstableFeatures,\n+            ArrayIntoIter: ArrayIntoIter::default(),\n+            DropTraitConstraints: DropTraitConstraints,\n+            TemporaryCStringAsPtr: TemporaryCStringAsPtr,\n+            NonPanicFmt: NonPanicFmt,\n+            NoopMethodCall: NoopMethodCall,\n+            EnumIntrinsicsNonEnums: EnumIntrinsicsNonEnums,\n+            InvalidAtomicOrdering: InvalidAtomicOrdering,\n+            NamedAsmLabels: NamedAsmLabels,\n+            OpaqueHiddenInferredBound: OpaqueHiddenInferredBound,\n+        ]\n+    ],\n+    ['tcx]\n+);\n \n pub fn new_lint_store(internal_lints: bool) -> LintStore {\n     let mut lint_store = LintStore::new();"}]}