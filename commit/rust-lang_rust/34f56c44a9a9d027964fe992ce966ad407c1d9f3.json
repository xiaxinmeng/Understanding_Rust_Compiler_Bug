{"sha": "34f56c44a9a9d027964fe992ce966ad407c1d9f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZjU2YzQ0YTlhOWQwMjc5NjRmZTk5MmNlOTY2YWQ0MDdjMWQ5ZjM=", "commit": {"author": {"name": "Basile Desloges", "email": "basile.desloges@gmail.com", "date": "2017-11-16T16:44:24Z"}, "committer": {"name": "Basile Desloges", "email": "basile.desloges@gmail.com", "date": "2017-11-28T14:07:51Z"}, "message": "mir-borrowck: Add permission check for `WriteKind::Mutate`", "tree": {"sha": "8a1abb3bcee08ac0d3170464355762d9ebbe99fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a1abb3bcee08ac0d3170464355762d9ebbe99fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34f56c44a9a9d027964fe992ce966ad407c1d9f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34f56c44a9a9d027964fe992ce966ad407c1d9f3", "html_url": "https://github.com/rust-lang/rust/commit/34f56c44a9a9d027964fe992ce966ad407c1d9f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34f56c44a9a9d027964fe992ce966ad407c1d9f3/comments", "author": {"login": "zilbuz", "id": 434964, "node_id": "MDQ6VXNlcjQzNDk2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/434964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zilbuz", "html_url": "https://github.com/zilbuz", "followers_url": "https://api.github.com/users/zilbuz/followers", "following_url": "https://api.github.com/users/zilbuz/following{/other_user}", "gists_url": "https://api.github.com/users/zilbuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zilbuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zilbuz/subscriptions", "organizations_url": "https://api.github.com/users/zilbuz/orgs", "repos_url": "https://api.github.com/users/zilbuz/repos", "events_url": "https://api.github.com/users/zilbuz/events{/privacy}", "received_events_url": "https://api.github.com/users/zilbuz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zilbuz", "id": 434964, "node_id": "MDQ6VXNlcjQzNDk2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/434964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zilbuz", "html_url": "https://github.com/zilbuz", "followers_url": "https://api.github.com/users/zilbuz/followers", "following_url": "https://api.github.com/users/zilbuz/following{/other_user}", "gists_url": "https://api.github.com/users/zilbuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zilbuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zilbuz/subscriptions", "organizations_url": "https://api.github.com/users/zilbuz/orgs", "repos_url": "https://api.github.com/users/zilbuz/repos", "events_url": "https://api.github.com/users/zilbuz/events{/privacy}", "received_events_url": "https://api.github.com/users/zilbuz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "503d25cbfdad2e31e4aac9491660bf33c14a85e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/503d25cbfdad2e31e4aac9491660bf33c14a85e5", "html_url": "https://github.com/rust-lang/rust/commit/503d25cbfdad2e31e4aac9491660bf33c14a85e5"}], "stats": {"total": 161, "additions": 131, "deletions": 30}, "files": [{"sha": "ec3954f734923c7ea481e18df7df2670c5d7ad77", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 131, "deletions": 30, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/34f56c44a9a9d027964fe992ce966ad407c1d9f3/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f56c44a9a9d027964fe992ce966ad407c1d9f3/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=34f56c44a9a9d027964fe992ce966ad407c1d9f3", "patch": "@@ -271,6 +271,7 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                         self.access_lvalue(context,\n                                            (output, span),\n                                            (Deep, Read(ReadKind::Copy)),\n+                                           LocalMutationIsAllowed::No,\n                                            flow_state);\n                         self.check_if_path_is_moved(context, InitializationRequiringAction::Use,\n                                                     (output, span), flow_state);\n@@ -300,7 +301,9 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n             StatementKind::StorageDead(local) => {\n                 self.access_lvalue(ContextKind::StorageDead.new(location),\n                     (&Lvalue::Local(local), span),\n-                    (Shallow(None), Write(WriteKind::StorageDeadOrDrop)), flow_state);\n+                    (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),\n+                    LocalMutationIsAllowed::Yes,\n+                    flow_state);\n             }\n         }\n     }\n@@ -322,6 +325,7 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                 self.access_lvalue(ContextKind::Drop.new(loc),\n                                    (drop_lvalue, span),\n                                    (Deep, Write(WriteKind::StorageDeadOrDrop)),\n+                                   LocalMutationIsAllowed::Yes,\n                                    flow_state);\n             }\n             TerminatorKind::DropAndReplace { location: ref drop_lvalue,\n@@ -391,6 +395,7 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                                 ContextKind::StorageDead.new(loc),\n                                 (&root_lvalue, self.mir.source_info(borrow.location).span),\n                                 (Deep, Write(WriteKind::StorageDeadOrDrop)),\n+                                LocalMutationIsAllowed::Yes,\n                                 flow_state\n                             );\n                         }\n@@ -399,6 +404,7 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                                 ContextKind::StorageDead.new(loc),\n                                 (&root_lvalue, self.mir.source_info(borrow.location).span),\n                                 (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),\n+                                LocalMutationIsAllowed::Yes,\n                                 flow_state\n                             );\n                         }\n@@ -445,6 +451,8 @@ enum ShallowOrDeep {\n     Deep,\n }\n \n+/// Kind of access to a value: read or write\n+/// (For informational purposes only)\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n enum ReadOrWrite {\n     /// From the RFC: \"A *read* means that the existing data may be\n@@ -457,12 +465,16 @@ enum ReadOrWrite {\n     Write(WriteKind),\n }\n \n+/// Kind of read access to a value\n+/// (For informational purposes only)\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n enum ReadKind {\n     Borrow(BorrowKind),\n     Copy,\n }\n \n+/// Kind of write access to a value\n+/// (For informational purposes only)\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n enum WriteKind {\n     StorageDeadOrDrop,\n@@ -471,6 +483,20 @@ enum WriteKind {\n     Move,\n }\n \n+/// When checking permissions for an lvalue access, this flag is used to indicate that an immutable\n+/// local lvalue can be mutated.\n+///\n+/// FIXME: @nikomatsakis suggested that this flag could be removed with the following modifications:\n+/// - Merge `check_access_permissions()` and `check_if_reassignment_to_immutable_state()`\n+/// - Split `is_mutable()` into `is_assignable()` (can be directly assigned) and\n+///   `is_declared_mutable()`\n+/// - Take flow state into consideration in `is_assignable()` for local variables\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+enum LocalMutationIsAllowed {\n+    Yes,\n+    No\n+}\n+\n #[derive(Copy, Clone)]\n enum InitializationRequiringAction {\n     Update,\n@@ -510,6 +536,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                      context: Context,\n                      lvalue_span: (&Lvalue<'tcx>, Span),\n                      kind: (ShallowOrDeep, ReadOrWrite),\n+                     is_local_mutation_allowed: LocalMutationIsAllowed,\n                      flow_state: &InProgress<'cx, 'gcx, 'tcx>) {\n         let (sd, rw) = kind;\n \n@@ -526,9 +553,10 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n \n         // Check permissions\n-        self.check_access_permissions(lvalue_span, rw);\n+        let mut error_reported = self.check_access_permissions(lvalue_span,\n+                                                               rw,\n+                                                               is_local_mutation_allowed);\n \n-        let mut error_reported = false;\n         self.each_borrow_involving_path(\n             context, (sd, lvalue_span.0), flow_state, |this, _index, borrow, common_prefix| {\n                 match (rw, borrow.kind) {\n@@ -614,7 +642,11 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             }\n         }\n \n-        self.access_lvalue(context, lvalue_span, (kind, Write(WriteKind::Mutate)), flow_state);\n+        self.access_lvalue(context,\n+                           lvalue_span,\n+                           (kind, Write(WriteKind::Mutate)),\n+                           LocalMutationIsAllowed::Yes,\n+                           flow_state);\n \n         // check for reassignments to immutable local variables\n         self.check_if_reassignment_to_immutable_state(context, lvalue_span, flow_state);\n@@ -632,7 +664,11 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     BorrowKind::Unique |\n                     BorrowKind::Mut => (Deep, Write(WriteKind::MutableBorrow(bk))),\n                 };\n-                self.access_lvalue(context, (lvalue, span), access_kind, flow_state);\n+                self.access_lvalue(context,\n+                                   (lvalue, span),\n+                                   access_kind,\n+                                   LocalMutationIsAllowed::No,\n+                                   flow_state);\n                 self.check_if_path_is_moved(context, InitializationRequiringAction::Borrow,\n                                             (lvalue, span), flow_state);\n             }\n@@ -651,8 +687,11 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     Rvalue::Discriminant(..) => ArtificialField::Discriminant,\n                     _ => unreachable!(),\n                 };\n-                self.access_lvalue(\n-                    context, (lvalue, span), (Shallow(Some(af)), Read(ReadKind::Copy)), flow_state);\n+                self.access_lvalue(context,\n+                                   (lvalue, span),\n+                                   (Shallow(Some(af)), Read(ReadKind::Copy)),\n+                                   LocalMutationIsAllowed::No,\n+                                   flow_state);\n                 self.check_if_path_is_moved(context, InitializationRequiringAction::Use,\n                                             (lvalue, span), flow_state);\n             }\n@@ -690,6 +729,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 self.access_lvalue(context,\n                                    (lvalue, span),\n                                    (Deep, Read(ReadKind::Copy)),\n+                                   LocalMutationIsAllowed::No,\n                                    flow_state);\n \n                 // Finally, check if path was already moved.\n@@ -701,6 +741,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 self.access_lvalue(context,\n                                    (lvalue, span),\n                                    (Deep, Write(WriteKind::Move)),\n+                                   LocalMutationIsAllowed::Yes,\n                                    flow_state);\n \n                 // Finally, check if path was already moved.\n@@ -735,9 +776,17 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 }\n                 Lvalue::Static(ref static_) => {\n                     // mutation of non-mut static is always illegal,\n-                    // independent of dataflow.\n+                    // independent of dataflow. However it will be catched by\n+                    // `check_access_permissions()`, we call delay_span_bug here\n+                    // to be sure that no case has been missed\n                     if !self.tcx.is_static_mut(static_.def_id) {\n-                        self.report_assignment_to_static(context, (lvalue, span));\n+                        let item_msg = match self.describe_lvalue(lvalue) {\n+                            Some(name) => format!(\"immutable static item `{}`\", name),\n+                            None => \"immutable static item\".to_owned()\n+                        };\n+                        self.tcx.sess.delay_span_bug(span,\n+                            &format!(\"cannot assign to {}, should have been caught by \\\n+                            `check_access_permissions()`\", item_msg));\n                     }\n                     return;\n                 }\n@@ -949,41 +998,101 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     }\n \n     /// Check the permissions for the given lvalue and read or write kind\n-    fn check_access_permissions(&self, (lvalue, span): (&Lvalue<'tcx>, Span), kind: ReadOrWrite) {\n+    ///\n+    /// Returns true if an error is reported, false otherwise.\n+    fn check_access_permissions(&self,\n+                                (lvalue, span): (&Lvalue<'tcx>, Span),\n+                                kind: ReadOrWrite,\n+                                is_local_mutation_allowed: LocalMutationIsAllowed)\n+                                -> bool {\n+        debug!(\"check_access_permissions({:?}, {:?}, {:?})\",\n+               lvalue, kind, is_local_mutation_allowed);\n+        let mut error_reported = false;\n         match kind {\n             Write(WriteKind::MutableBorrow(BorrowKind::Unique)) => {\n                 if let Err(_lvalue_err) = self.is_unique(lvalue) {\n-                    span_bug!(span, \"&unique borrow for `{}` should not fail\",\n-                        self.describe_lvalue(lvalue));\n+                    span_bug!(span, \"&unique borrow for {:?} should not fail\", lvalue);\n                 }\n             },\n             Write(WriteKind::MutableBorrow(BorrowKind::Mut)) => {\n-                if let Err(lvalue_err) = self.is_mutable(lvalue) {\n+                if let Err(lvalue_err) = self.is_mutable(lvalue, is_local_mutation_allowed) {\n+                    error_reported = true;\n+\n+                    let item_msg = match self.describe_lvalue(lvalue) {\n+                        Some(name) => format!(\"immutable item `{}`\", name),\n+                        None => \"immutable item\".to_owned()\n+                    };\n+\n                     let mut err = self.tcx.cannot_borrow_path_as_mutable(span,\n-                        &format!(\"immutable item `{}`\",\n-                                  self.describe_lvalue(lvalue)),\n+                        &item_msg,\n                         Origin::Mir);\n                     err.span_label(span, \"cannot borrow as mutable\");\n \n                     if lvalue != lvalue_err {\n-                        err.note(&format!(\"Value not mutable causing this error: `{}`\",\n-                            self.describe_lvalue(lvalue_err)));\n+                        if let Some(name) = self.describe_lvalue(lvalue_err) {\n+                            err.note(&format!(\"Value not mutable causing this error: `{}`\", name));\n+                        }\n+                    }\n+\n+                    err.emit();\n+                }\n+            },\n+            Write(WriteKind::Mutate) => {\n+                if let Err(lvalue_err) = self.is_mutable(lvalue, is_local_mutation_allowed) {\n+                    error_reported = true;\n+\n+                    let item_msg = match self.describe_lvalue(lvalue) {\n+                        Some(name) => format!(\"immutable item `{}`\", name),\n+                        None => \"immutable item\".to_owned()\n+                    };\n+\n+                    let mut err = self.tcx.cannot_assign(span,\n+                        &item_msg,\n+                        Origin::Mir);\n+                    err.span_label(span, \"cannot mutate\");\n+\n+                    if lvalue != lvalue_err {\n+                        if let Some(name) = self.describe_lvalue(lvalue_err) {\n+                            err.note(&format!(\"Value not mutable causing this error: `{}`\", name));\n+                        }\n                     }\n \n                     err.emit();\n                 }\n             },\n-            _ => {}// Access authorized\n+            Write(WriteKind::Move) |\n+            Write(WriteKind::StorageDeadOrDrop) |\n+            Write(WriteKind::MutableBorrow(BorrowKind::Shared)) => {\n+                if let Err(_lvalue_err) = self.is_mutable(lvalue, is_local_mutation_allowed) {\n+                    self.tcx.sess.delay_span_bug(span,\n+                        &format!(\"Accessing `{:?}` with the kind `{:?}` shouldn't be possible\",\n+                            lvalue,\n+                            kind));\n+                }\n+            },\n+            Read(ReadKind::Borrow(BorrowKind::Unique)) |\n+            Read(ReadKind::Borrow(BorrowKind::Mut)) |\n+            Read(ReadKind::Borrow(BorrowKind::Shared)) |\n+            Read(ReadKind::Copy) => {} // Access authorized\n         }\n+\n+        error_reported\n     }\n \n     /// Can this value be written or borrowed mutably\n-    fn is_mutable<'d>(&self, lvalue: &'d Lvalue<'tcx>) -> Result<(), &'d Lvalue<'tcx>> {\n+    fn is_mutable<'d>(&self,\n+                      lvalue: &'d Lvalue<'tcx>,\n+                      is_local_mutation_allowed: LocalMutationIsAllowed)\n+                      -> Result<(), &'d Lvalue<'tcx>> {\n         match *lvalue {\n             Lvalue::Local(local) => {\n                 let local = &self.mir.local_decls[local];\n                 match local.mutability {\n-                    Mutability::Not => Err(lvalue),\n+                    Mutability::Not =>\n+                        match is_local_mutation_allowed {\n+                            LocalMutationIsAllowed::Yes => Ok(()),\n+                            LocalMutationIsAllowed::No => Err(lvalue),\n+                        },\n                     Mutability::Mut => Ok(())\n                 }\n             },\n@@ -1001,7 +1110,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n                         // `Box<T>` owns its content, so mutable if its location is mutable\n                         if base_ty.is_box() {\n-                            return self.is_mutable(&proj.base);\n+                            return self.is_mutable(&proj.base, LocalMutationIsAllowed::No);\n                         }\n \n                         // Otherwise we check the kind of deref to decide\n@@ -1035,7 +1144,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     ProjectionElem::ConstantIndex{..} |\n                     ProjectionElem::Subslice{..} |\n                     ProjectionElem::Downcast(..) =>\n-                        self.is_mutable(&proj.base)\n+                        self.is_mutable(&proj.base, LocalMutationIsAllowed::No)\n                 }\n             }\n         }\n@@ -1604,14 +1713,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n         err.emit();\n     }\n-\n-    fn report_assignment_to_static(&mut self,\n-                                   _context: Context,\n-                                   (lvalue, span): (&Lvalue<'tcx>, Span)) {\n-        let mut err = self.tcx.cannot_assign_static(\n-            span, &self.describe_lvalue(lvalue), Origin::Mir);\n-        err.emit();\n-    }\n }\n \n impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {"}]}