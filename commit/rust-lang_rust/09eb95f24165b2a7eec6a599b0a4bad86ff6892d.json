{"sha": "09eb95f24165b2a7eec6a599b0a4bad86ff6892d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZWI5NWYyNDE2NWIyYTdlZWM2YTU5OWIwYTRiYWQ4NmZmNjg5MmQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-06-14T01:20:47Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-06-14T01:20:47Z"}, "message": "getopts: derive Eq for types.", "tree": {"sha": "7e500a3a97392a75ef5c2d326ea3e5e2efba6a63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e500a3a97392a75ef5c2d326ea3e5e2efba6a63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09eb95f24165b2a7eec6a599b0a4bad86ff6892d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09eb95f24165b2a7eec6a599b0a4bad86ff6892d", "html_url": "https://github.com/rust-lang/rust/commit/09eb95f24165b2a7eec6a599b0a4bad86ff6892d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09eb95f24165b2a7eec6a599b0a4bad86ff6892d/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0642cbbde0e51d5f4465b937ab8ff7d46df02df0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0642cbbde0e51d5f4465b937ab8ff7d46df02df0", "html_url": "https://github.com/rust-lang/rust/commit/0642cbbde0e51d5f4465b937ab8ff7d46df02df0"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "5e02e412245c7d113e9215a12b2db652ebf759e8", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/09eb95f24165b2a7eec6a599b0a4bad86ff6892d/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09eb95f24165b2a7eec6a599b0a4bad86ff6892d/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=09eb95f24165b2a7eec6a599b0a4bad86ff6892d", "patch": "@@ -100,7 +100,7 @@ use std::result;\n use std::string::String;\n \n /// Name of an option. Either a string or a single char.\n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, PartialEq, Eq)]\n pub enum Name {\n     /// A string representing the long name of an option.\n     /// For example: \"help\"\n@@ -111,7 +111,7 @@ pub enum Name {\n }\n \n /// Describes whether an option has an argument.\n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, PartialEq, Eq)]\n pub enum HasArg {\n     /// The option requires an argument.\n     Yes,\n@@ -122,7 +122,7 @@ pub enum HasArg {\n }\n \n /// Describes how often an option may occur.\n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, PartialEq, Eq)]\n pub enum Occur {\n     /// The option occurs once.\n     Req,\n@@ -133,7 +133,7 @@ pub enum Occur {\n }\n \n /// A description of a possible option.\n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, PartialEq, Eq)]\n pub struct Opt {\n     /// Name of the option\n     pub name: Name,\n@@ -142,12 +142,12 @@ pub struct Opt {\n     /// How often it can occur\n     pub occur: Occur,\n     /// Which options it aliases\n-    pub aliases: Vec<Opt> ,\n+    pub aliases: Vec<Opt>,\n }\n \n /// One group of options, e.g., both -h and --help, along with\n /// their shared description and properties.\n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, PartialEq, Eq)]\n pub struct OptGroup {\n     /// Short Name of the `OptGroup`\n     pub short_name: String,\n@@ -164,28 +164,28 @@ pub struct OptGroup {\n }\n \n /// Describes whether an option is given at all or has a value.\n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, PartialEq, Eq)]\n enum Optval {\n     Val(String),\n     Given,\n }\n \n /// The result of checking command line arguments. Contains a vector\n /// of matches and a vector of free strings.\n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, PartialEq, Eq)]\n pub struct Matches {\n     /// Options that matched\n-    opts: Vec<Opt> ,\n+    opts: Vec<Opt>,\n     /// Values of the Options that matched\n-    vals: Vec<Vec<Optval> > ,\n+    vals: Vec<Vec<Optval>>,\n     /// Free string fragments\n     pub free: Vec<String>,\n }\n \n /// The type returned when the command line does not conform to the\n /// expected format. Use the `Show` implementation to output detailed\n /// information.\n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, PartialEq, Eq)]\n pub enum Fail_ {\n     /// The option requires an argument but none was passed.\n     ArgumentMissing(String),\n@@ -200,7 +200,7 @@ pub enum Fail_ {\n }\n \n /// The type of failure that occurred.\n-#[deriving(PartialEq)]\n+#[deriving(PartialEq, Eq)]\n #[allow(missing_doc)]\n pub enum FailType {\n     ArgumentMissing_,"}]}