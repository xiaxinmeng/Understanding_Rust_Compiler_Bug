{"sha": "84e9608596f14eba78b8ff0371f747f7513b523a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZTk2MDg1OTZmMTRlYmE3OGI4ZmYwMzcxZjc0N2Y3NTEzYjUyM2E=", "commit": {"author": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2021-03-04T08:30:48Z"}, "committer": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2021-03-04T14:10:57Z"}, "message": "Fix leak in Vec::extend_from_within\n\nPreviously vec's len was updated only after full copy, making the method\nleak if T::clone panic!s.\n\nThis commit makes `Vec::extend_from_within` (or, more accurately, it's\n`T: Clone` specialization) update vec's len on every iteration, fixing\nthe issue.\n\n`T: Copy` specialization was not affected by the issue b/c it doesn't\ncall user specified code (as, e.g. `T::clone`), and instead calls\n`ptr::copy_nonoverlapping`.", "tree": {"sha": "1c4b21c9b4e724114d84d65b947147d7402b35ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c4b21c9b4e724114d84d65b947147d7402b35ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84e9608596f14eba78b8ff0371f747f7513b523a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84e9608596f14eba78b8ff0371f747f7513b523a", "html_url": "https://github.com/rust-lang/rust/commit/84e9608596f14eba78b8ff0371f747f7513b523a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84e9608596f14eba78b8ff0371f747f7513b523a/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec7f258d543e1ac7d0b94435972331e85da8c509", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec7f258d543e1ac7d0b94435972331e85da8c509", "html_url": "https://github.com/rust-lang/rust/commit/ec7f258d543e1ac7d0b94435972331e85da8c509"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "369fa460863d933844be4e6382e2b4dd2e3bc9a5", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/84e9608596f14eba78b8ff0371f747f7513b523a/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84e9608596f14eba78b8ff0371f747f7513b523a/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=84e9608596f14eba78b8ff0371f747f7513b523a", "patch": "@@ -1942,6 +1942,16 @@ impl<T, A: Allocator> Vec<T, A> {\n     #[unstable(feature = \"vec_split_at_spare\", issue = \"81944\")]\n     #[inline]\n     pub fn split_at_spare_mut(&mut self) -> (&mut [T], &mut [MaybeUninit<T>]) {\n+        // SAFETY:\n+        // - len is ignored and so never changed\n+        let (init, spare, _) = unsafe{ self.split_at_spare_mut_with_len() };\n+        (init, spare)\n+    }\n+\n+    /// Safety: changing returned .2 (&mut usize) is considered the same as calling `.set_len(_)`.\n+    ///\n+    /// This method is used to have unique access to all vec parts at once in `extend_from_within`.\n+    unsafe fn split_at_spare_mut_with_len(&mut self) -> (&mut [T], &mut [MaybeUninit<T>], &mut usize) {\n         let Range { start: ptr, end: spare_ptr } = self.as_mut_ptr_range();\n         let spare_ptr = spare_ptr.cast::<MaybeUninit<T>>();\n         let spare_len = self.buf.capacity() - self.len;\n@@ -1953,9 +1963,9 @@ impl<T, A: Allocator> Vec<T, A> {\n             let initialized = slice::from_raw_parts_mut(ptr, self.len);\n             let spare = slice::from_raw_parts_mut(spare_ptr, spare_len);\n \n-            (initialized, spare)\n+            (initialized, spare, &mut self.len)\n         }\n-    }\n+    } \n }\n \n impl<T: Clone, A: Allocator> Vec<T, A> {\n@@ -2165,22 +2175,23 @@ trait ExtendFromWithinSpec {\n \n impl<T: Clone, A: Allocator> ExtendFromWithinSpec for Vec<T, A> {\n     default unsafe fn spec_extend_from_within(&mut self, src: Range<usize>) {\n-        let initialized = {\n-            let (this, spare) = self.split_at_spare_mut();\n-\n-            // SAFETY:\n-            // - caller guaratees that src is a valid index\n-            let to_clone = unsafe { this.get_unchecked(src) };\n-\n-            to_clone.iter().cloned().zip(spare.iter_mut()).map(|(e, s)| s.write(e)).count()\n-        };\n+        // SAFETY:\n+        // - len is increased only after initializing elements\n+        let (this, spare, len) = unsafe { self.split_at_spare_mut_with_len() };\n \n         // SAFETY:\n-        // - elements were just initialized\n-        unsafe {\n-            let new_len = self.len() + initialized;\n-            self.set_len(new_len);\n-        }\n+        // - caller guaratees that src is a valid index\n+        let to_clone = unsafe { this.get_unchecked(src) };\n+\n+        to_clone\n+            .iter()\n+            .cloned()\n+            .zip(spare.iter_mut())\n+            .map(|(src, dst)| dst.write(src))\n+            // Note:\n+            // - Element was just initialized with `MaybeUninit::write`, so it's ok to increace len\n+            // - len is increased after each element to prevent leaks (see issue #82533)\n+            .for_each(|_| *len += 1);\n     }\n }\n "}]}