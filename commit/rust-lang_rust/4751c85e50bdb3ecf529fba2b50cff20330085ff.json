{"sha": "4751c85e50bdb3ecf529fba2b50cff20330085ff", "node_id": "C_kwDOAAsO6NoAKDQ3NTFjODVlNTBiZGIzZWNmNTI5ZmJhMmI1MGNmZjIwMzMwMDg1ZmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-28T20:56:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-28T20:56:45Z"}, "message": "Rollup merge of #110921 - JohnBobbo96:rustc_arena_nonnull, r=Nilstrieb\n\nUse `NonNull::new_unchecked` and `NonNull::len` in `rustc_arena`.\n\nThis avoids a few extra dereferences as well as an `unwrap`.\n\nAccording to the docs for [`NonNull::len`](https://doc.rust-lang.org/std/ptr/struct.NonNull.html#method.len) this also ensures that:\n\n> This function is safe, even when the non-null raw slice cannot be dereferenced to a slice because the pointer does not have a valid address.\n\nI am also fairly sure that the `unwrap` is unneeded in this case, as the docs for [`Box::into_raw`](https://doc.rust-lang.org/std/boxed/struct.Box.html#method.into_raw) also state:\n\n> Consumes the Box, returning a wrapped raw pointer.\n**The pointer will be properly aligned and non-null.**", "tree": {"sha": "e9a50509d04d13543c728337a999425da8096a8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9a50509d04d13543c728337a999425da8096a8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4751c85e50bdb3ecf529fba2b50cff20330085ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkTDMNCRBK7hj4Ov3rIwAAzmIIACfMzrusmsvnIRi60CFOp3Ke\ndYBUTRiJ2fuxmNlXg9yGvnl+4I2liG7Td6TAlCZP+cqtVv1/z4Nl2vEXGmnx2s43\nRXfLTup7J7KJHc716ouaMTibNQ20u8mlstsxQh9qFv7o862phtTnz37tdRuvcMAT\ng9QqT6z8zk0cIHbiYHOO0hHwjYQdniuiRR+KrFM+t7HaPam3xIOUj3raSYlcq/qb\nxfKzrum7dlIOQeKFhFkWw2g3YyZKtKvvvQfISx+tZZl4KL0GEcQBS5Ww9sMoLR5V\nc4KHJ/96jCZ/w8i4CAslx6I2CshEZxwj0R5+OnVcxN1fvQnAJn+YhoEDJJl6cYE=\n=wnVA\n-----END PGP SIGNATURE-----\n", "payload": "tree e9a50509d04d13543c728337a999425da8096a8a\nparent 33f15e899d922419c3fe447e4cd24ced90c008a9\nparent 618841b8156a85ff937b755626eae0983c05da25\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1682715405 +0200\ncommitter GitHub <noreply@github.com> 1682715405 +0200\n\nRollup merge of #110921 - JohnBobbo96:rustc_arena_nonnull, r=Nilstrieb\n\nUse `NonNull::new_unchecked` and `NonNull::len` in `rustc_arena`.\n\nThis avoids a few extra dereferences as well as an `unwrap`.\n\nAccording to the docs for [`NonNull::len`](https://doc.rust-lang.org/std/ptr/struct.NonNull.html#method.len) this also ensures that:\n\n> This function is safe, even when the non-null raw slice cannot be dereferenced to a slice because the pointer does not have a valid address.\n\nI am also fairly sure that the `unwrap` is unneeded in this case, as the docs for [`Box::into_raw`](https://doc.rust-lang.org/std/boxed/struct.Box.html#method.into_raw) also state:\n\n> Consumes the Box, returning a wrapped raw pointer.\n**The pointer will be properly aligned and non-null.**\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4751c85e50bdb3ecf529fba2b50cff20330085ff", "html_url": "https://github.com/rust-lang/rust/commit/4751c85e50bdb3ecf529fba2b50cff20330085ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4751c85e50bdb3ecf529fba2b50cff20330085ff/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33f15e899d922419c3fe447e4cd24ced90c008a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/33f15e899d922419c3fe447e4cd24ced90c008a9", "html_url": "https://github.com/rust-lang/rust/commit/33f15e899d922419c3fe447e4cd24ced90c008a9"}, {"sha": "618841b8156a85ff937b755626eae0983c05da25", "url": "https://api.github.com/repos/rust-lang/rust/commits/618841b8156a85ff937b755626eae0983c05da25", "html_url": "https://github.com/rust-lang/rust/commit/618841b8156a85ff937b755626eae0983c05da25"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "236bdb99709e82f814a6a280ebad0c223213b039", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4751c85e50bdb3ecf529fba2b50cff20330085ff/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4751c85e50bdb3ecf529fba2b50cff20330085ff/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=4751c85e50bdb3ecf529fba2b50cff20330085ff", "patch": "@@ -74,7 +74,7 @@ impl<T> ArenaChunk<T> {\n     #[inline]\n     unsafe fn new(capacity: usize) -> ArenaChunk<T> {\n         ArenaChunk {\n-            storage: NonNull::new(Box::into_raw(Box::new_uninit_slice(capacity))).unwrap(),\n+            storage: NonNull::new_unchecked(Box::into_raw(Box::new_uninit_slice(capacity))),\n             entries: 0,\n         }\n     }\n@@ -85,7 +85,7 @@ impl<T> ArenaChunk<T> {\n         // The branch on needs_drop() is an -O1 performance optimization.\n         // Without the branch, dropping TypedArena<u8> takes linear time.\n         if mem::needs_drop::<T>() {\n-            let slice = &mut *(self.storage.as_mut());\n+            let slice = self.storage.as_mut();\n             ptr::drop_in_place(MaybeUninit::slice_assume_init_mut(&mut slice[..len]));\n         }\n     }\n@@ -104,7 +104,7 @@ impl<T> ArenaChunk<T> {\n                 // A pointer as large as possible for zero-sized elements.\n                 ptr::invalid_mut(!0)\n             } else {\n-                self.start().add((*self.storage.as_ptr()).len())\n+                self.start().add(self.storage.len())\n             }\n         }\n     }\n@@ -288,7 +288,7 @@ impl<T> TypedArena<T> {\n                 // If the previous chunk's len is less than HUGE_PAGE\n                 // bytes, then this chunk will be least double the previous\n                 // chunk's size.\n-                new_cap = (*last_chunk.storage.as_ptr()).len().min(HUGE_PAGE / elem_size / 2);\n+                new_cap = last_chunk.storage.len().min(HUGE_PAGE / elem_size / 2);\n                 new_cap *= 2;\n             } else {\n                 new_cap = PAGE / elem_size;\n@@ -396,7 +396,7 @@ impl DroplessArena {\n                 // If the previous chunk's len is less than HUGE_PAGE\n                 // bytes, then this chunk will be least double the previous\n                 // chunk's size.\n-                new_cap = (*last_chunk.storage.as_ptr()).len().min(HUGE_PAGE / 2);\n+                new_cap = last_chunk.storage.len().min(HUGE_PAGE / 2);\n                 new_cap *= 2;\n             } else {\n                 new_cap = PAGE;"}]}