{"sha": "aec97e050ea5247fa13612399a7a812dbce89ec9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYzk3ZTA1MGVhNTI0N2ZhMTM2MTIzOTlhN2E4MTJkYmNlODllYzk=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-10-24T02:30:21Z"}, "committer": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-10-27T19:50:58Z"}, "message": "Panicking infra uses &core::panic::Location.\n\nThis allows us to remove `static_panic_msg` from the SSA<->LLVM\nboundary, along with its fat pointer representation for &str.\n\nAlso changes the signature of PanicInfo::internal_contructor to\navoid copying.\n\nCloses #65856.", "tree": {"sha": "ad7ba453a36edd6d6c530dc1fa8eb947b99fdeca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad7ba453a36edd6d6c530dc1fa8eb947b99fdeca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aec97e050ea5247fa13612399a7a812dbce89ec9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aec97e050ea5247fa13612399a7a812dbce89ec9", "html_url": "https://github.com/rust-lang/rust/commit/aec97e050ea5247fa13612399a7a812dbce89ec9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aec97e050ea5247fa13612399a7a812dbce89ec9/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "743964ad3fe566ca2ce5c2de14f8733887d283fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/743964ad3fe566ca2ce5c2de14f8733887d283fd", "html_url": "https://github.com/rust-lang/rust/commit/743964ad3fe566ca2ce5c2de14f8733887d283fd"}], "stats": {"total": 257, "additions": 130, "deletions": 127}, "files": [{"sha": "8ccd31c95d51030dd88acd71ffc0bdf662457965", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/aec97e050ea5247fa13612399a7a812dbce89ec9/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec97e050ea5247fa13612399a7a812dbce89ec9/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=aec97e050ea5247fa13612399a7a812dbce89ec9", "patch": "@@ -1,8 +1,9 @@\n /// Panics the current thread.\n ///\n /// For details, see `std::macros`.\n+#[cfg(bootstrap)]\n #[macro_export]\n-#[allow_internal_unstable(core_panic)]\n+#[allow_internal_unstable(core_panic, panic_internals)]\n #[stable(feature = \"core\", since = \"1.6.0\")]\n macro_rules! panic {\n     () => (\n@@ -20,6 +21,38 @@ macro_rules! panic {\n     });\n }\n \n+/// Panics the current thread.\n+///\n+/// For details, see `std::macros`.\n+#[cfg(not(bootstrap))]\n+#[macro_export]\n+#[allow_internal_unstable(core_panic, panic_internals)]\n+#[stable(feature = \"core\", since = \"1.6.0\")]\n+macro_rules! panic {\n+    () => (\n+        $crate::panic!(\"explicit panic\")\n+    );\n+    ($msg:expr) => ({\n+        const LOC: &$crate::panic::Location<'_> = &$crate::panic::Location::internal_constructor(\n+            $crate::file!(),\n+            $crate::line!(),\n+            $crate::column!(),\n+        );\n+        $crate::panicking::panic($msg, LOC)\n+    });\n+    ($msg:expr,) => (\n+        $crate::panic!($msg)\n+    );\n+    ($fmt:expr, $($arg:tt)+) => ({\n+        const LOC: &$crate::panic::Location<'_> = &$crate::panic::Location::internal_constructor(\n+            $crate::file!(),\n+            $crate::line!(),\n+            $crate::column!(),\n+        );\n+        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+), LOC)\n+    });\n+}\n+\n /// Asserts that two expressions are equal to each other (using [`PartialEq`]).\n ///\n /// On panic, this macro will print the values of the expressions with their"}, {"sha": "51bbf3a8fd221bf4cb2f120a6db4f45a9550433b", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aec97e050ea5247fa13612399a7a812dbce89ec9/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec97e050ea5247fa13612399a7a812dbce89ec9/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=aec97e050ea5247fa13612399a7a812dbce89ec9", "patch": "@@ -35,7 +35,7 @@ use crate::fmt;\n pub struct PanicInfo<'a> {\n     payload: &'a (dyn Any + Send),\n     message: Option<&'a fmt::Arguments<'a>>,\n-    location: Location<'a>,\n+    location: &'a Location<'a>,\n }\n \n impl<'a> PanicInfo<'a> {\n@@ -45,11 +45,16 @@ impl<'a> PanicInfo<'a> {\n                 issue = \"0\")]\n     #[doc(hidden)]\n     #[inline]\n-    pub fn internal_constructor(message: Option<&'a fmt::Arguments<'a>>,\n-                                location: Location<'a>)\n-                                -> Self {\n+    pub fn internal_constructor(\n+        message: Option<&'a fmt::Arguments<'a>>,\n+        location: &'a Location<'a>,\n+    ) -> Self {\n         struct NoPayload;\n-        PanicInfo { payload: &NoPayload, location, message }\n+        PanicInfo {\n+            location,\n+            message,\n+            payload: &NoPayload,\n+        }\n     }\n \n     #[doc(hidden)]\n@@ -177,7 +182,7 @@ impl<'a> Location<'a> {\n                           and related macros\",\n                 issue = \"0\")]\n     #[doc(hidden)]\n-    pub fn internal_constructor(file: &'a str, line: u32, col: u32) -> Self {\n+    pub const fn internal_constructor(file: &'a str, line: u32, col: u32) -> Self {\n         Location { file, line, col }\n     }\n "}, {"sha": "685b749776b1dcca7567903dde3a2083b1f212b9", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 59, "deletions": 4, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/aec97e050ea5247fa13612399a7a812dbce89ec9/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec97e050ea5247fa13612399a7a812dbce89ec9/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=aec97e050ea5247fa13612399a7a812dbce89ec9", "patch": "@@ -29,6 +29,7 @@\n use crate::fmt;\n use crate::panic::{Location, PanicInfo};\n \n+#[cfg(bootstrap)]\n #[cold]\n // never inline unless panic_immediate_abort to avoid code\n // bloat at the call sites as much as possible\n@@ -49,6 +50,27 @@ pub fn panic(expr_file_line_col: &(&'static str, &'static str, u32, u32)) -> ! {\n     panic_fmt(fmt::Arguments::new_v1(&[expr], &[]), &(file, line, col))\n }\n \n+#[cfg(not(bootstrap))]\n+#[cold]\n+// never inline unless panic_immediate_abort to avoid code\n+// bloat at the call sites as much as possible\n+#[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n+#[lang = \"panic\"]\n+pub fn panic(expr: &str, location: &Location<'_>) -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        unsafe { super::intrinsics::abort() }\n+    }\n+\n+    // Use Arguments::new_v1 instead of format_args!(\"{}\", expr) to potentially\n+    // reduce size overhead. The format_args! macro uses str's Display trait to\n+    // write expr, which calls Formatter::pad, which must accommodate string\n+    // truncation and padding (even though none is used here). Using\n+    // Arguments::new_v1 may allow the compiler to omit Formatter::pad from the\n+    // output binary, saving up to a few kilobytes.\n+    panic_fmt(fmt::Arguments::new_v1(&[expr], &[]), location)\n+}\n+\n+#[cfg(bootstrap)]\n #[cold]\n #[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n #[lang = \"panic_bounds_check\"]\n@@ -62,6 +84,22 @@ fn panic_bounds_check(file_line_col: &(&'static str, u32, u32),\n                            len, index), file_line_col)\n }\n \n+#[cfg(not(bootstrap))]\n+#[cold]\n+#[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n+#[lang = \"panic_bounds_check\"]\n+fn panic_bounds_check(location: &Location<'_>, index: usize, len: usize) -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        unsafe { super::intrinsics::abort() }\n+    }\n+\n+    panic_fmt(\n+        format_args!(\"index out of bounds: the len is {} but the index is {}\", len, index),\n+        location\n+    )\n+}\n+\n+#[cfg(bootstrap)]\n #[cold]\n #[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n #[cfg_attr(    feature=\"panic_immediate_abort\" ,inline)]\n@@ -77,9 +115,26 @@ pub fn panic_fmt(fmt: fmt::Arguments<'_>, file_line_col: &(&'static str, u32, u3\n     }\n \n     let (file, line, col) = *file_line_col;\n-    let pi = PanicInfo::internal_constructor(\n-        Some(&fmt),\n-        Location::internal_constructor(file, line, col),\n-    );\n+    let location = Location::internal_constructor(file, line, col);\n+    let pi = PanicInfo::internal_constructor(Some(&fmt), &location);\n+    unsafe { panic_impl(&pi) }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[cold]\n+#[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n+#[cfg_attr(    feature=\"panic_immediate_abort\" ,inline)]\n+pub fn panic_fmt(fmt: fmt::Arguments<'_>, location: &Location<'_>) -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        unsafe { super::intrinsics::abort() }\n+    }\n+\n+    // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call\n+    extern \"Rust\" {\n+        #[lang = \"panic_impl\"]\n+        fn panic_impl(pi: &PanicInfo<'_>) -> !;\n+    }\n+\n+    let pi = PanicInfo::internal_constructor(Some(&fmt), location);\n     unsafe { panic_impl(&pi) }\n }"}, {"sha": "8ac1c7b36fc3f9bd5bcd3e81c38d202d6850e0d3", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/aec97e050ea5247fa13612399a7a812dbce89ec9/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec97e050ea5247fa13612399a7a812dbce89ec9/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=aec97e050ea5247fa13612399a7a812dbce89ec9", "patch": "@@ -1082,36 +1082,6 @@ impl StaticBuilderMethods for Builder<'a, 'll, 'tcx> {\n         // FIXME(eddyb) move this into miri, it can be correct if e.g. field order changes\n         self.static_addr_of(struct_, align, Some(\"panic_loc\"))\n     }\n-\n-    fn static_panic_msg(\n-        &mut self,\n-        msg: Option<Symbol>,\n-        filename: Symbol,\n-        line: Self::Value,\n-        col: Self::Value,\n-        kind: &str,\n-    ) -> Self::Value {\n-        let align = self.tcx.data_layout.aggregate_align.abi\n-            .max(self.tcx.data_layout.i32_align.abi)\n-            .max(self.tcx.data_layout.pointer_align.abi);\n-\n-        let filename = self.const_str_slice(filename);\n-\n-        let with_msg_components;\n-        let without_msg_components;\n-\n-        let components = if let Some(msg) = msg {\n-            let msg = self.const_str_slice(msg);\n-            with_msg_components = [msg, filename, line, col];\n-            &with_msg_components as &[_]\n-        } else {\n-            without_msg_components = [filename, line, col];\n-            &without_msg_components as &[_]\n-        };\n-\n-        let struct_ = self.const_struct(&components, false);\n-        self.static_addr_of(struct_, align, Some(kind))\n-    }\n }\n \n impl Builder<'a, 'll, 'tcx> {"}, {"sha": "f38f9dfecd38705e63e7b0c418da2ee828b0f8e5", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aec97e050ea5247fa13612399a7a812dbce89ec9/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec97e050ea5247fa13612399a7a812dbce89ec9/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=aec97e050ea5247fa13612399a7a812dbce89ec9", "patch": "@@ -3,7 +3,6 @@\n //! Code that is useful in various codegen modules.\n \n use crate::llvm::{self, True, False, Bool, BasicBlock, OperandBundleDef, ConstantInt};\n-use crate::abi;\n use crate::consts;\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n@@ -96,16 +95,6 @@ impl BackendTypes for CodegenCx<'ll, 'tcx> {\n }\n \n impl CodegenCx<'ll, 'tcx> {\n-    pub fn const_fat_ptr(\n-        &self,\n-        ptr: &'ll Value,\n-        meta: &'ll Value\n-    ) -> &'ll Value {\n-        assert_eq!(abi::FAT_PTR_ADDR, 0);\n-        assert_eq!(abi::FAT_PTR_EXTRA, 1);\n-        self.const_struct(&[ptr, meta], false)\n-    }\n-\n     pub fn const_array(&self, ty: &'ll Type, elts: &[&'ll Value]) -> &'ll Value {\n         unsafe {\n             return llvm::LLVMConstArray(ty, elts.as_ptr(), elts.len() as c_uint);\n@@ -150,13 +139,6 @@ impl CodegenCx<'ll, 'tcx> {\n         }\n     }\n \n-    pub fn const_str_slice(&self, s: Symbol) -> &'ll Value {\n-        let len = s.as_str().len();\n-        let cs = consts::ptrcast(self.const_cstr(s, false),\n-            self.type_ptr_to(self.layout_of(self.tcx.mk_str()).llvm_type(self)));\n-        self.const_fat_ptr(cs, self.const_usize(len as u64))\n-    }\n-\n     pub fn const_get_elt(&self, v: &'ll Value, idx: u64) -> &'ll Value {\n         unsafe {\n             assert_eq!(idx as c_uint as u64, idx);"}, {"sha": "2462ba0a33e8ef51e4094ea2d59ce546e3f003ec", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 8, "deletions": 39, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/aec97e050ea5247fa13612399a7a812dbce89ec9/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec97e050ea5247fa13612399a7a812dbce89ec9/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=aec97e050ea5247fa13612399a7a812dbce89ec9", "patch": "@@ -16,7 +16,6 @@ use crate::traits::*;\n use std::borrow::Cow;\n \n use syntax::symbol::Symbol;\n-use syntax_pos::Pos;\n \n use super::{FunctionCx, LocalRef};\n use super::place::PlaceRef;\n@@ -422,37 +421,19 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         // Get the location information.\n         let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n-        let filename = Symbol::intern(&loc.file.name.to_string());\n-        let line = bx.const_u32(loc.line as u32);\n-        let col = bx.const_u32(loc.col.to_usize() as u32 + 1);\n+        let location = bx.static_panic_location(&loc);\n \n         // Put together the arguments to the panic entry point.\n         let (lang_item, args) = match msg {\n             PanicInfo::BoundsCheck { ref len, ref index } => {\n                 let len = self.codegen_operand(&mut bx, len).immediate();\n                 let index = self.codegen_operand(&mut bx, index).immediate();\n-\n-                let file_line_col = bx.static_panic_msg(\n-                    None,\n-                    filename,\n-                    line,\n-                    col,\n-                    \"panic_bounds_check_loc\",\n-                );\n-                (lang_items::PanicBoundsCheckFnLangItem,\n-                    vec![file_line_col, index, len])\n+                (lang_items::PanicBoundsCheckFnLangItem, vec![location, index, len])\n             }\n             _ => {\n                 let msg_str = Symbol::intern(msg.description());\n-                let msg_file_line_col = bx.static_panic_msg(\n-                    Some(msg_str),\n-                    filename,\n-                    line,\n-                    col,\n-                    \"panic_loc\",\n-                );\n-                (lang_items::PanicFnLangItem,\n-                    vec![msg_file_line_col])\n+                let msg = bx.const_str(msg_str);\n+                (lang_items::PanicFnLangItem, vec![msg.0, msg.1, location])\n             }\n         };\n \n@@ -554,22 +535,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let layout = bx.layout_of(ty);\n             if layout.abi.is_uninhabited() {\n                 let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n-                let filename = Symbol::intern(&loc.file.name.to_string());\n-                let line = bx.const_u32(loc.line as u32);\n-                let col = bx.const_u32(loc.col.to_usize() as u32 + 1);\n \n-                let str = format!(\n-                    \"Attempted to instantiate uninhabited type {}\",\n-                    ty\n-                );\n-                let msg_str = Symbol::intern(&str);\n-                let msg_file_line_col = bx.static_panic_msg(\n-                    Some(msg_str),\n-                    filename,\n-                    line,\n-                    col,\n-                    \"panic_loc\",\n-                );\n+                let msg_str = format!(\"Attempted to instantiate uninhabited type {}\", ty);\n+                let msg = bx.const_str(Symbol::intern(&msg_str));\n+                let location = bx.static_panic_location(&loc);\n \n                 // Obtain the panic entry point.\n                 let def_id =\n@@ -587,7 +556,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     &mut bx,\n                     fn_ty,\n                     llfn,\n-                    &[msg_file_line_col],\n+                    &[msg.0, msg.1, location],\n                     destination.as_ref().map(|(_, bb)| (ReturnDest::Nothing, *bb)),\n                     cleanup,\n                 );"}, {"sha": "f63cea51f43958e95159b951c944ee7500c900f6", "filename": "src/librustc_codegen_ssa/traits/statics.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aec97e050ea5247fa13612399a7a812dbce89ec9/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec97e050ea5247fa13612399a7a812dbce89ec9/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs?ref=aec97e050ea5247fa13612399a7a812dbce89ec9", "patch": "@@ -1,6 +1,5 @@\n use super::BackendTypes;\n use syntax::source_map::Loc;\n-use syntax_pos::symbol::Symbol;\n use rustc::hir::def_id::DefId;\n use rustc::ty::layout::Align;\n \n@@ -12,12 +11,4 @@ pub trait StaticMethods: BackendTypes {\n pub trait StaticBuilderMethods: BackendTypes {\n     fn get_static(&mut self, def_id: DefId) -> Self::Value;\n     fn static_panic_location(&mut self, loc: &Loc) -> Self::Value;\n-    fn static_panic_msg(\n-        &mut self,\n-        msg: Option<Symbol>,\n-        filename: Symbol,\n-        line: Self::Value,\n-        col: Self::Value,\n-        kind: &str,\n-    ) -> Self::Value;\n }"}, {"sha": "20cb2926d66b5482224ceb4a7ae6f67286354e2b", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aec97e050ea5247fa13612399a7a812dbce89ec9/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec97e050ea5247fa13612399a7a812dbce89ec9/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=aec97e050ea5247fa13612399a7a812dbce89ec9", "patch": "@@ -301,18 +301,19 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, bool> {\n         let def_id = instance.def_id();\n         if Some(def_id) == self.tcx.lang_items().panic_fn() {\n-            assert!(args.len() == 1);\n-            // &(&'static str, &'static str, u32, u32)\n-            let place = self.deref_operand(args[0])?;\n-            let (msg, file, line, col) = (\n-                self.mplace_field(place, 0)?,\n-                self.mplace_field(place, 1)?,\n-                self.mplace_field(place, 2)?,\n-                self.mplace_field(place, 3)?,\n-            );\n+            // &'static str, &core::panic::Location { &'static str, u32, u32 }\n+            assert!(args.len() == 2);\n \n-            let msg_place = self.deref_operand(msg.into())?;\n+            let msg_place = self.deref_operand(args[0])?;\n             let msg = Symbol::intern(self.read_str(msg_place)?);\n+\n+            let location = self.deref_operand(args[1])?;\n+            let (file, line, col) = (\n+                self.mplace_field(location, 0)?,\n+                self.mplace_field(location, 1)?,\n+                self.mplace_field(location, 2)?,\n+            );\n+\n             let file_place = self.deref_operand(file.into())?;\n             let file = Symbol::intern(self.read_str(file_place)?);\n             let line = self.read_scalar(line.into())?.to_u32()?;"}, {"sha": "f76969146fdd2318688e549ad6ba19093f1658ae", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aec97e050ea5247fa13612399a7a812dbce89ec9/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec97e050ea5247fa13612399a7a812dbce89ec9/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=aec97e050ea5247fa13612399a7a812dbce89ec9", "patch": "@@ -323,10 +323,8 @@ pub fn begin_panic_fmt(msg: &fmt::Arguments<'_>,\n     }\n \n     let (file, line, col) = *file_line_col;\n-    let info = PanicInfo::internal_constructor(\n-        Some(msg),\n-        Location::internal_constructor(file, line, col),\n-    );\n+    let location = Location::internal_constructor(file, line, col);\n+    let info = PanicInfo::internal_constructor(Some(msg), &location);\n     continue_panic_fmt(&info)\n }\n \n@@ -453,10 +451,8 @@ fn rust_panic_with_hook(payload: &mut dyn BoxMeUp,\n     }\n \n     unsafe {\n-        let mut info = PanicInfo::internal_constructor(\n-            message,\n-            Location::internal_constructor(file, line, col),\n-        );\n+        let location = Location::internal_constructor(file, line, col);\n+        let mut info = PanicInfo::internal_constructor(message, &location);\n         HOOK_LOCK.read();\n         match HOOK {\n             // Some platforms know that printing to stderr won't ever actually"}, {"sha": "8727c9d1ca6551e20163665562ac59b398dc3830", "filename": "src/test/ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aec97e050ea5247fa13612399a7a812dbce89ec9/src%2Ftest%2Fui%2Fextern%2Fissue-64655-allow-unwind-when-calling-panic-directly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec97e050ea5247fa13612399a7a812dbce89ec9/src%2Ftest%2Fui%2Fextern%2Fissue-64655-allow-unwind-when-calling-panic-directly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fissue-64655-allow-unwind-when-calling-panic-directly.rs?ref=aec97e050ea5247fa13612399a7a812dbce89ec9", "patch": "@@ -22,7 +22,7 @@\n //[thin]compile-flags: -C lto=thin\n //[fat]compile-flags: -C lto=fat\n \n-#![feature(core_panic)]\n+#![feature(core_panic, panic_internals)]\n \n // (For some reason, reproducing the LTO issue requires pulling in std\n // explicitly this way.)\n@@ -51,7 +51,8 @@ fn main() {\n \n         let _guard = Droppable;\n         let s = \"issue-64655-allow-unwind-when-calling-panic-directly.rs\";\n-        core::panicking::panic(&(\"???\", s, 17, 4));\n+        let location = core::panic::Location::internal_constructor(s, 17, 4);\n+        core::panicking::panic(\"???\", &location);\n     });\n \n     let wait = handle.join();"}]}