{"sha": "55e87e0b742b46d40b1a5ef1598804e48e45f0e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ZTg3ZTBiNzQyYjQ2ZDQwYjFhNWVmMTU5ODgwNGU0OGU0NWYwZTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-16T21:18:14Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-16T21:18:14Z"}, "message": "mod resolve work", "tree": {"sha": "1431468696b493ac7e8d68d1a1dcb14d3bfa64f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1431468696b493ac7e8d68d1a1dcb14d3bfa64f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55e87e0b742b46d40b1a5ef1598804e48e45f0e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55e87e0b742b46d40b1a5ef1598804e48e45f0e0", "html_url": "https://github.com/rust-lang/rust/commit/55e87e0b742b46d40b1a5ef1598804e48e45f0e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55e87e0b742b46d40b1a5ef1598804e48e45f0e0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a3f819f795d656f36a2967647a83438f8fb58c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a3f819f795d656f36a2967647a83438f8fb58c4", "html_url": "https://github.com/rust-lang/rust/commit/6a3f819f795d656f36a2967647a83438f8fb58c4"}], "stats": {"total": 57, "additions": 50, "deletions": 7}, "files": [{"sha": "9429f8f5522d95a0890093301f820ebb79c323bf", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/55e87e0b742b46d40b1a5ef1598804e48e45f0e0/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55e87e0b742b46d40b1a5ef1598804e48e45f0e0/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=55e87e0b742b46d40b1a5ef1598804e48e45f0e0", "patch": "@@ -15,6 +15,8 @@ use once_cell::sync::OnceCell;\n use rayon::prelude::*;\n \n use std::{\n+    fmt,\n+    path::Path,\n     sync::{\n         Arc,\n         atomic::{AtomicUsize, Ordering::SeqCst},\n@@ -35,15 +37,24 @@ pub use self::symbol_index::Query;\n pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n const INDEXING_THRESHOLD: usize = 128;\n \n+pub type FileResolver = dyn Fn(FileId, &Path) -> Option<FileId> + Send + Sync;\n+\n pub struct WorldState {\n     data: Arc<WorldData>\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone)]\n pub struct World {\n+    file_resolver: Arc<FileResolver>,\n     data: Arc<WorldData>,\n }\n \n+impl fmt::Debug for World {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        (&*self.data).fmt(f)\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct FileId(pub u32);\n \n@@ -54,8 +65,11 @@ impl WorldState {\n         }\n     }\n \n-    pub fn snapshot(&self) -> World {\n-        World { data: self.data.clone() }\n+    pub fn snapshot(&self, file_resolver: impl Fn(FileId, &Path) -> Option<FileId> + 'static + Send + Sync) -> World {\n+        World {\n+            file_resolver: Arc::new(file_resolver),\n+            data: self.data.clone()\n+        }\n     }\n \n     pub fn change_file(&mut self, file_id: FileId, text: Option<String>) {\n@@ -134,6 +148,10 @@ impl World {\n         Ok(self.world_symbols(query).collect())\n     }\n \n+    fn resolve_relative_path(&self, id: FileId, path: &Path) -> Option<FileId> {\n+        (self.file_resolver)(id, path)\n+    }\n+\n     fn reindex(&self) {\n         let data = &*self.data;\n         let unindexed = data.unindexed.load(SeqCst);"}, {"sha": "a8340df5911b6aaf9a21fd7ac862f08c2cac77d0", "filename": "crates/server/src/main_loop/mod.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/55e87e0b742b46d40b1a5ef1598804e48e45f0e0/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55e87e0b742b46d40b1a5ef1598804e48e45f0e0/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs?ref=55e87e0b742b46d40b1a5ef1598804e48e45f0e0", "patch": "@@ -167,7 +167,10 @@ fn on_request(\n     dispatch::handle_request::<req::ExecuteCommand, _>(&mut req, |params, resp| {\n         io.send(RawMsg::Response(resp.into_response(Ok(None))?));\n \n-        let world = world.snapshot();\n+        let world = world.snapshot({\n+            let pm = path_map.clone();\n+            move |id, path| pm.resolve(id, path)\n+        });\n         let path_map = path_map.clone();\n         let sender = sender.clone();\n         pool.execute(move || {\n@@ -234,7 +237,14 @@ fn on_notification(\n         mem_map.insert(file_id, None);\n         world.change_file(file_id, Some(params.text_document.text));\n         update_file_notifications_on_threadpool(\n-            pool, world.snapshot(), path_map.clone(), sender.clone(), uri,\n+            pool,\n+            world.snapshot({\n+                let pm = path_map.clone();\n+                move |id, path| pm.resolve(id, path)\n+            }),\n+            path_map.clone(),\n+            sender.clone(),\n+            uri,\n         );\n         Ok(())\n     })?;\n@@ -245,7 +255,14 @@ fn on_notification(\n             .text;\n         world.change_file(file_id, Some(text));\n         update_file_notifications_on_threadpool(\n-            pool, world.snapshot(), path_map.clone(), sender.clone(), params.text_document.uri,\n+            pool,\n+            world.snapshot({\n+                let pm = path_map.clone();\n+                move |id, path| pm.resolve(id, path)\n+            }),\n+            path_map.clone(),\n+            sender.clone(),\n+            params.text_document.uri,\n         );\n         Ok(())\n     })?;\n@@ -281,7 +298,10 @@ fn handle_request_on_threadpool<R: req::ClientRequest>(\n ) -> Result<()>\n {\n     dispatch::handle_request::<R, _>(req, |params, resp| {\n-        let world = world.snapshot();\n+        let world = world.snapshot({\n+            let pm = path_map.clone();\n+            move |id, path| pm.resolve(id, path)\n+        });\n         let path_map = path_map.clone();\n         let sender = sender.clone();\n         pool.execute(move || {"}, {"sha": "e198e165deb5975746f5732a5ab25affff8326a7", "filename": "crates/server/src/path_map.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55e87e0b742b46d40b1a5ef1598804e48e45f0e0/crates%2Fserver%2Fsrc%2Fpath_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55e87e0b742b46d40b1a5ef1598804e48e45f0e0/crates%2Fserver%2Fsrc%2Fpath_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fpath_map.rs?ref=55e87e0b742b46d40b1a5ef1598804e48e45f0e0", "patch": "@@ -34,6 +34,11 @@ impl PathMap {\n             .as_path()\n     }\n \n+    pub fn resolve(&self, id: FileId, relpath: &Path) -> Option<FileId> {\n+        let path = self.get_path(id).join(relpath);\n+        self.get_id(&path)\n+    }\n+\n     fn insert(&mut self, path: PathBuf, id: FileId) {\n         self.path2id.insert(path.clone(), id);\n         self.id2path.insert(id, path.clone());"}]}