{"sha": "6ff019c25f027be1bf2896ce82659dc8d99515f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZjAxOWMyNWYwMjdiZTFiZjI4OTZjZTgyNjU5ZGM4ZDk5NTE1Zjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-22T13:28:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-22T13:28:04Z"}, "message": "Add minimal syntax tree implementation", "tree": {"sha": "d1c256805acb5e487d556f4b3a281470a25b8414", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1c256805acb5e487d556f4b3a281470a25b8414"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ff019c25f027be1bf2896ce82659dc8d99515f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ff019c25f027be1bf2896ce82659dc8d99515f8", "html_url": "https://github.com/rust-lang/rust/commit/6ff019c25f027be1bf2896ce82659dc8d99515f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ff019c25f027be1bf2896ce82659dc8d99515f8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b878f3b636365aa9af327fea1aebf97d34cc87dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b878f3b636365aa9af327fea1aebf97d34cc87dd", "html_url": "https://github.com/rust-lang/rust/commit/b878f3b636365aa9af327fea1aebf97d34cc87dd"}], "stats": {"total": 90, "additions": 88, "deletions": 2}, "files": [{"sha": "d92c03bea83761064cbe4e801b5394b39919a53e", "filename": "minirust.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/6ff019c25f027be1bf2896ce82659dc8d99515f8/minirust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff019c25f027be1bf2896ce82659dc8d99515f8/minirust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/minirust.rs?ref=6ff019c25f027be1bf2896ce82659dc8d99515f8", "patch": "@@ -0,0 +1,68 @@\n+pub struct NodeKind(u16);\n+\n+pub struct File {\n+    text: String,\n+    nodes: Vec<NodeData>,\n+}\n+\n+struct NodeData {\n+    kind: NodeKind,\n+    range: (u32, u32),\n+    parent: Option<u32>,\n+    first_child: Option<u32>,\n+    next_sibling: Option<u32>,\n+}\n+\n+#[derive(Clone, Copy)]\n+pub struct Node<'f> {\n+    file: &'f File,\n+    idx: u32,\n+}\n+\n+pub struct Children<'f> {\n+    next: Option<Node<'f>>,\n+}\n+\n+impl File {\n+    pub fn root<'f>(&'f self) -> Node<'f> {\n+        assert!(!self.nodes.is_empty());\n+        Node { file: self, idx: 0 }\n+    }\n+}\n+\n+impl<'f> Node<'f> {\n+    pub fn kind(&self) -> NodeKind {\n+        self.data().kind\n+    }\n+\n+    pub fn text(&self) -> &'f str {\n+        let (start, end) = self.data().range;\n+        &self.file.text[start as usize..end as usize]\n+    }\n+\n+    pub fn parent(&self) -> Option<Node<'f>> {\n+        self.as_node(self.data().parent)\n+    }\n+\n+    pub fn children(&self) -> Children<'f> {\n+        Children { next: self.as_node(self.data().first_child) }\n+    }\n+\n+    fn data(&self) -> &'f NodeData {\n+        &self.file.nodes[self.idx as usize]\n+    }\n+\n+    fn as_node(&self, idx: Option<u32>) -> Option<Node<'f>> {\n+        idx.map(|idx| Node { file: self.file, idx })\n+    }\n+}\n+\n+impl<'f> Iterator for Children<'f> {\n+    type Item = Node<'f>;\n+\n+    fn next(&mut self) -> Option<Node<'f>> {\n+        let next = self.next;\n+        self.next = next.and_then(|node| node.as_node(node.data().next_sibling));\n+        next\n+    }\n+}"}, {"sha": "1476cbaf2134ecac7cc99cfc22074c1bee88e38d", "filename": "rfc.md", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6ff019c25f027be1bf2896ce82659dc8d99515f8/rfc.md", "raw_url": "https://github.com/rust-lang/rust/raw/6ff019c25f027be1bf2896ce82659dc8d99515f8/rfc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rfc.md?ref=6ff019c25f027be1bf2896ce82659dc8d99515f8", "patch": "@@ -80,7 +80,10 @@ simpler ones.\n \n In contrast, for IDEs it is crucial to have a lossless view of the\n source code because, for example, it's important to preserve comments\n-during refactorings.\n+during refactorings. Ideally, IDEs should be able to incrementally\n+relex and reparse the file as the user types, because syntax tree is\n+necessary to correctly handle certain code-editing actions like\n+autoindentation or joining lines.\n \n Currently rustc uses the AST approach, which preserves the source code\n information to some extent by storing spans in the AST.\n@@ -98,7 +101,7 @@ Not applicable.\n \n This section proposes a new syntax tree data structure, which should\n be suitable for both compiler and IDE. It is heavily inspired by [PSI]\n-data structure which used in [IntelliJ] based IDEs and in the Kotlin\n+data structure which used in [IntelliJ] based IDEs and in the [Kotlin]\n compiler.\n \n \n@@ -107,6 +110,21 @@ compiler.\n [Kotlin]: https://kotlinlang.org/\n \n \n+The main idea is to store the minimal amount of information in the\n+tree itself, and instead lean heavily on the source code string for\n+the actual data about identifier names, constant values etc.\n+\n+All nodes in the tree are of the same type and store a constant for\n+the syntactic category of the element and a range in the source code.\n+\n+Here is a minimal implementation of this data structure:\n+\n+\n+```Rust\n+```\n+\n+\n+\n # Drawbacks\n [drawbacks]: #drawbacks\n "}]}