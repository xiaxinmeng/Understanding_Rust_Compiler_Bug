{"sha": "2f465869fd23d1bea7a99ca2e602c94e13d0dffb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNDY1ODY5ZmQyM2QxYmVhN2E5OWNhMmU2MDJjOTRlMTNkMGRmZmI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-30T16:37:23Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-01T11:13:06Z"}, "message": "Separate out the unboxed closure table into two tables, so that we can\ngenerate the closure type and closure kind separately.", "tree": {"sha": "c45ea901136d233f6a78e7887ce186d39e76a65a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c45ea901136d233f6a78e7887ce186d39e76a65a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f465869fd23d1bea7a99ca2e602c94e13d0dffb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f465869fd23d1bea7a99ca2e602c94e13d0dffb", "html_url": "https://github.com/rust-lang/rust/commit/2f465869fd23d1bea7a99ca2e602c94e13d0dffb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92f94765ec2202ccda84a7da97c4d415ffb9b070", "url": "https://api.github.com/repos/rust-lang/rust/commits/92f94765ec2202ccda84a7da97c4d415ffb9b070", "html_url": "https://github.com/rust-lang/rust/commit/92f94765ec2202ccda84a7da97c4d415ffb9b070"}], "stats": {"total": 229, "additions": 81, "deletions": 148}, "files": [{"sha": "bf2f5bd22c4639424e5d084db504c3d70102a52f", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=2f465869fd23d1bea7a99ca2e602c94e13d0dffb", "patch": "@@ -139,10 +139,11 @@ pub enum astencode_tag { // Reserves 0x40 -- 0x5f\n     tag_table_adjustments = 0x51,\n     tag_table_moves_map = 0x52,\n     tag_table_capture_map = 0x53,\n-    tag_table_closures = 0x54,\n-    tag_table_upvar_capture_map = 0x55,\n-    tag_table_capture_modes = 0x56,\n-    tag_table_object_cast_map = 0x57,\n+    tag_table_closure_tys = 0x54,\n+    tag_table_closure_kinds = 0x55,\n+    tag_table_upvar_capture_map = 0x56,\n+    tag_table_capture_modes = 0x57,\n+    tag_table_object_cast_map = 0x58,\n }\n \n static first_astencode_tag: uint = tag_ast as uint;\n@@ -225,10 +226,7 @@ pub struct LinkMeta {\n     pub crate_hash: Svh,\n }\n \n-pub const tag_closures: uint = 0x95;\n-pub const tag_closure: uint = 0x96;\n-pub const tag_closure_type: uint = 0x97;\n-pub const tag_closure_kind: uint = 0x98;\n+// GAP 0x94...0x98\n \n pub const tag_struct_fields: uint = 0x99;\n pub const tag_struct_field: uint = 0x9a;"}, {"sha": "e09d29b98b09a47517f88795246a485ba2e8f228", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=2f465869fd23d1bea7a99ca2e602c94e13d0dffb", "patch": "@@ -618,17 +618,6 @@ fn encode_visibility(rbml_w: &mut Encoder, visibility: ast::Visibility) {\n     rbml_w.end_tag();\n }\n \n-fn encode_closure_kind(rbml_w: &mut Encoder, kind: ty::ClosureKind) {\n-    rbml_w.start_tag(tag_closure_kind);\n-    let ch = match kind {\n-        ty::FnClosureKind => 'f',\n-        ty::FnMutClosureKind => 'm',\n-        ty::FnOnceClosureKind => 'o',\n-    };\n-    rbml_w.wr_str(&ch.to_string()[]);\n-    rbml_w.end_tag();\n-}\n-\n fn encode_explicit_self(rbml_w: &mut Encoder,\n                         explicit_self: &ty::ExplicitSelfCategory) {\n     rbml_w.start_tag(tag_item_trait_method_explicit_self);\n@@ -1843,24 +1832,6 @@ fn encode_macro_defs(rbml_w: &mut Encoder,\n     rbml_w.end_tag();\n }\n \n-fn encode_closures<'a>(ecx: &'a EncodeContext, rbml_w: &'a mut Encoder) {\n-    rbml_w.start_tag(tag_closures);\n-    for (closure_id, closure) in ecx.tcx.closures.borrow().iter() {\n-        if closure_id.krate != ast::LOCAL_CRATE {\n-            continue\n-        }\n-\n-        rbml_w.start_tag(tag_closure);\n-        encode_def_id(rbml_w, *closure_id);\n-        rbml_w.start_tag(tag_closure_type);\n-        write_closure_type(ecx, rbml_w, &closure.closure_type);\n-        rbml_w.end_tag();\n-        encode_closure_kind(rbml_w, closure.kind);\n-        rbml_w.end_tag();\n-    }\n-    rbml_w.end_tag();\n-}\n-\n fn encode_struct_field_attrs(rbml_w: &mut Encoder, krate: &ast::Crate) {\n     struct StructFieldVisitor<'a, 'b:'a> {\n         rbml_w: &'a mut Encoder<'b>,\n@@ -2069,7 +2040,6 @@ fn encode_metadata_inner(wr: &mut SeekableMemWriter,\n         native_lib_bytes: u64,\n         plugin_registrar_fn_bytes: u64,\n         macro_defs_bytes: u64,\n-        closure_bytes: u64,\n         impl_bytes: u64,\n         misc_bytes: u64,\n         item_bytes: u64,\n@@ -2084,7 +2054,6 @@ fn encode_metadata_inner(wr: &mut SeekableMemWriter,\n         native_lib_bytes: 0,\n         plugin_registrar_fn_bytes: 0,\n         macro_defs_bytes: 0,\n-        closure_bytes: 0,\n         impl_bytes: 0,\n         misc_bytes: 0,\n         item_bytes: 0,\n@@ -2154,11 +2123,6 @@ fn encode_metadata_inner(wr: &mut SeekableMemWriter,\n     encode_macro_defs(&mut rbml_w, krate);\n     stats.macro_defs_bytes = rbml_w.writer.tell().unwrap() - i;\n \n-    // Encode the types of all closures in this crate.\n-    i = rbml_w.writer.tell().unwrap();\n-    encode_closures(&ecx, &mut rbml_w);\n-    stats.closure_bytes = rbml_w.writer.tell().unwrap() - i;\n-\n     // Encode the def IDs of impls, for coherence checking.\n     i = rbml_w.writer.tell().unwrap();\n     encode_impls(&ecx, krate, &mut rbml_w);\n@@ -2199,7 +2163,6 @@ fn encode_metadata_inner(wr: &mut SeekableMemWriter,\n         println!(\"          native bytes: {}\", stats.native_lib_bytes);\n         println!(\"plugin registrar bytes: {}\", stats.plugin_registrar_fn_bytes);\n         println!(\"       macro def bytes: {}\", stats.macro_defs_bytes);\n-        println!(\"         closure bytes: {}\", stats.closure_bytes);\n         println!(\"            impl bytes: {}\", stats.impl_bytes);\n         println!(\"            misc bytes: {}\", stats.misc_bytes);\n         println!(\"            item bytes: {}\", stats.item_bytes);"}, {"sha": "3764324734132320fbea223d6f5db1303f7f4b44", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 39, "deletions": 58, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=2f465869fd23d1bea7a99ca2e602c94e13d0dffb", "patch": "@@ -647,30 +647,7 @@ impl<'tcx> tr for MethodOrigin<'tcx> {\n }\n \n pub fn encode_closure_kind(ebml_w: &mut Encoder, kind: ty::ClosureKind) {\n-    use serialize::Encoder;\n-\n-    ebml_w.emit_enum(\"ClosureKind\", |ebml_w| {\n-        match kind {\n-            ty::FnClosureKind => {\n-                ebml_w.emit_enum_variant(\"FnClosureKind\", 0, 3, |_| {\n-                    Ok(())\n-                })\n-            }\n-            ty::FnMutClosureKind => {\n-                ebml_w.emit_enum_variant(\"FnMutClosureKind\", 1, 3, |_| {\n-                    Ok(())\n-                })\n-            }\n-            ty::FnOnceClosureKind => {\n-                ebml_w.emit_enum_variant(\"FnOnceClosureKind\",\n-                                         2,\n-                                         3,\n-                                         |_| {\n-                    Ok(())\n-                })\n-            }\n-        }\n-    }).unwrap()\n+    kind.encode(ebml_w).unwrap();\n }\n \n pub trait vtable_decoder_helpers<'tcx> {\n@@ -1310,12 +1287,20 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n         })\n     }\n \n-    for closure in tcx.closures.borrow().get(&ast_util::local_def(id)).iter() {\n-        rbml_w.tag(c::tag_table_closures, |rbml_w| {\n+    for &closure_type in tcx.closure_tys.borrow().get(&ast_util::local_def(id)).iter() {\n+        rbml_w.tag(c::tag_table_closure_tys, |rbml_w| {\n+            rbml_w.id(id);\n+            rbml_w.tag(c::tag_table_val, |rbml_w| {\n+                rbml_w.emit_closure_type(ecx, closure_type);\n+            })\n+        })\n+    }\n+\n+    for &&closure_kind in tcx.closure_kinds.borrow().get(&ast_util::local_def(id)).iter() {\n+        rbml_w.tag(c::tag_table_closure_kinds, |rbml_w| {\n             rbml_w.id(id);\n             rbml_w.tag(c::tag_table_val, |rbml_w| {\n-                rbml_w.emit_closure_type(ecx, &closure.closure_type);\n-                encode_closure_kind(rbml_w, closure.kind)\n+                encode_closure_kind(rbml_w, closure_kind)\n             })\n         })\n     }\n@@ -1354,8 +1339,10 @@ trait rbml_decoder_decoder_helpers<'tcx> {\n                            -> subst::Substs<'tcx>;\n     fn read_auto_adjustment<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n                                     -> ty::AutoAdjustment<'tcx>;\n-    fn read_closure<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n-                            -> ty::Closure<'tcx>;\n+    fn read_closure_kind<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n+                                 -> ty::ClosureKind;\n+    fn read_closure_ty<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n+                               -> ty::ClosureTy<'tcx>;\n     fn read_auto_deref_ref<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n                                    -> ty::AutoDerefRef<'tcx>;\n     fn read_autoref<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)\n@@ -1782,35 +1769,23 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n         }).unwrap()\n     }\n \n-    fn read_closure<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n-                            -> ty::Closure<'tcx> {\n-        let closure_type = self.read_opaque(|this, doc| {\n+    fn read_closure_kind<'b, 'c>(&mut self, _dcx: &DecodeContext<'b, 'c, 'tcx>)\n+                                 -> ty::ClosureKind\n+    {\n+        Decodable::decode(self).ok().unwrap()\n+    }\n+\n+    fn read_closure_ty<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n+                               -> ty::ClosureTy<'tcx>\n+    {\n+        self.read_opaque(|this, doc| {\n             Ok(tydecode::parse_ty_closure_data(\n                 doc.data,\n                 dcx.cdata.cnum,\n                 doc.start,\n                 dcx.tcx,\n                 |s, a| this.convert_def_id(dcx, s, a)))\n-        }).unwrap();\n-        let variants = &[\n-            \"FnClosureKind\",\n-            \"FnMutClosureKind\",\n-            \"FnOnceClosureKind\"\n-        ];\n-        let kind = self.read_enum(\"ClosureKind\", |this| {\n-            this.read_enum_variant(variants, |_, i| {\n-                Ok(match i {\n-                    0 => ty::FnClosureKind,\n-                    1 => ty::FnMutClosureKind,\n-                    2 => ty::FnOnceClosureKind,\n-                    _ => panic!(\"bad enum variant for ty::ClosureKind\"),\n-                })\n-            })\n-        }).unwrap();\n-        ty::Closure {\n-            closure_type: closure_type,\n-            kind: kind,\n-        }\n+        }).unwrap()\n     }\n \n     /// Converts a def-id that appears in a type.  The correct\n@@ -1937,11 +1912,17 @@ fn decode_side_tables(dcx: &DecodeContext,\n                         let adj: ty::AutoAdjustment = val_dsr.read_auto_adjustment(dcx);\n                         dcx.tcx.adjustments.borrow_mut().insert(id, adj);\n                     }\n-                    c::tag_table_closures => {\n-                        let closure =\n-                            val_dsr.read_closure(dcx);\n-                        dcx.tcx.closures.borrow_mut().insert(ast_util::local_def(id),\n-                                                             closure);\n+                    c::tag_table_closure_tys => {\n+                        let closure_ty =\n+                            val_dsr.read_closure_ty(dcx);\n+                        dcx.tcx.closure_tys.borrow_mut().insert(ast_util::local_def(id),\n+                                                                closure_ty);\n+                    }\n+                    c::tag_table_closure_kinds => {\n+                        let closure_kind =\n+                            val_dsr.read_closure_kind(dcx);\n+                        dcx.tcx.closure_kinds.borrow_mut().insert(ast_util::local_def(id),\n+                                                                  closure_kind);\n                     }\n                     _ => {\n                         dcx.tcx.sess.bug("}, {"sha": "4a0bed57433ae7a60c79acb156b4e6d8f3ab3a9b", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=2f465869fd23d1bea7a99ca2e602c94e13d0dffb", "patch": "@@ -260,12 +260,10 @@ impl OverloadedCallType {\n     fn from_closure(tcx: &ty::ctxt, closure_did: ast::DefId)\n                     -> OverloadedCallType {\n         let trait_did =\n-            tcx.closures\n+            tcx.closure_kinds\n                .borrow()\n                .get(&closure_did)\n-               .expect(\"OverloadedCallType::from_closure: didn't \\\n-                        find closure id\")\n-               .kind\n+               .expect(\"OverloadedCallType::from_closure: didn't find closure id\")\n                .trait_did(tcx);\n         OverloadedCallType::from_trait_id(tcx, trait_did)\n     }"}, {"sha": "fb1d9fcada1cecb4e113d0b27d2205435c48a757", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=2f465869fd23d1bea7a99ca2e602c94e13d0dffb", "patch": "@@ -790,7 +790,11 @@ pub struct ctxt<'tcx> {\n \n     /// Records the type of each closure. The def ID is the ID of the\n     /// expression defining the closure.\n-    pub closures: RefCell<DefIdMap<Closure<'tcx>>>,\n+    pub closure_kinds: RefCell<DefIdMap<ClosureKind>>,\n+\n+    /// Records the type of each closure. The def ID is the ID of the\n+    /// expression defining the closure.\n+    pub closure_tys: RefCell<DefIdMap<ClosureTy<'tcx>>>,\n \n     pub node_lint_levels: RefCell<FnvHashMap<(ast::NodeId, lint::LintId),\n                                               lint::LevelSource>>,\n@@ -2251,16 +2255,7 @@ pub struct ItemSubsts<'tcx> {\n     pub substs: Substs<'tcx>,\n }\n \n-/// Records information about each closure.\n-#[derive(Clone)]\n-pub struct Closure<'tcx> {\n-    /// The type of the closure.\n-    pub closure_type: ClosureTy<'tcx>,\n-    /// The kind of closure this is.\n-    pub kind: ClosureKind,\n-}\n-\n-#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n+#[derive(Clone, Copy, PartialEq, Eq, Debug, RustcEncodable, RustcDecodable)]\n pub enum ClosureKind {\n     FnClosureKind,\n     FnMutClosureKind,\n@@ -2399,7 +2394,8 @@ pub fn mk_ctxt<'tcx>(s: Session,\n         extern_const_variants: RefCell::new(DefIdMap()),\n         method_map: RefCell::new(FnvHashMap()),\n         dependency_formats: RefCell::new(FnvHashMap()),\n-        closures: RefCell::new(DefIdMap()),\n+        closure_kinds: RefCell::new(DefIdMap()),\n+        closure_tys: RefCell::new(DefIdMap()),\n         node_lint_levels: RefCell::new(FnvHashMap()),\n         transmute_restrictions: RefCell::new(Vec::new()),\n         stability: RefCell::new(stability),\n@@ -2446,15 +2442,15 @@ impl<'tcx> ctxt<'tcx> {\n     }\n \n     pub fn closure_kind(&self, def_id: ast::DefId) -> ty::ClosureKind {\n-        self.closures.borrow()[def_id].kind\n+        self.closure_kinds.borrow()[def_id]\n     }\n \n     pub fn closure_type(&self,\n                         def_id: ast::DefId,\n                         substs: &subst::Substs<'tcx>)\n                         -> ty::ClosureTy<'tcx>\n     {\n-        self.closures.borrow()[def_id].closure_type.subst(self, substs)\n+        self.closure_tys.borrow()[def_id].subst(self, substs)\n     }\n }\n "}, {"sha": "15cf37dc2f2f04b33430fbfb0b222908c07d8f96", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=2f465869fd23d1bea7a99ca2e602c94e13d0dffb", "patch": "@@ -405,9 +405,9 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n         }\n         ty_str => \"str\".to_string(),\n         ty_closure(ref did, _, substs) => {\n-            let closures = cx.closures.borrow();\n-            closures.get(did).map(|cl| {\n-                closure_to_string(cx, &cl.closure_type.subst(cx, substs))\n+            let closure_tys = cx.closure_tys.borrow();\n+            closure_tys.get(did).map(|closure_type| {\n+                closure_to_string(cx, &closure_type.subst(cx, substs))\n             }).unwrap_or_else(|| {\n                 if did.krate == ast::LOCAL_CRATE {\n                     let span = cx.map.span(did.node);"}, {"sha": "9ec3db0f602af00bb76091c4ac05b4b074aff203", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=2f465869fd23d1bea7a99ca2e602c94e13d0dffb", "patch": "@@ -273,7 +273,7 @@ pub fn self_type_for_closure<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n }\n \n pub fn kind_for_closure(ccx: &CrateContext, closure_id: ast::DefId) -> ty::ClosureKind {\n-    ccx.tcx().closures.borrow()[closure_id].kind\n+    ccx.tcx().closure_kinds.borrow()[closure_id]\n }\n \n pub fn decl_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,"}, {"sha": "8473ce1b797e360b7b06c9f3e6e6cd8fad1767d1", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=2f465869fd23d1bea7a99ca2e602c94e13d0dffb", "patch": "@@ -125,7 +125,7 @@ pub fn get_or_create_declaration_if_closure<'a, 'tcx>(ccx: &CrateContext<'a, 'tc\n                                                       closure_id: ast::DefId,\n                                                       substs: &Substs<'tcx>)\n                                                       -> Option<Datum<'tcx, Rvalue>> {\n-    if !ccx.tcx().closures.borrow().contains_key(&closure_id) {\n+    if !ccx.tcx().closure_kinds.borrow().contains_key(&closure_id) {\n         // Not a closure.\n         return None\n     }"}, {"sha": "22390b9e98b11ac2d284272fd494db3f01063daa", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=2f465869fd23d1bea7a99ca2e602c94e13d0dffb", "patch": "@@ -129,12 +129,8 @@ fn check_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n            fn_ty.sig.repr(fcx.tcx()),\n            kind);\n \n-    let closure = ty::Closure {\n-        closure_type: fn_ty,\n-        kind: kind,\n-    };\n-\n-    fcx.inh.closures.borrow_mut().insert(expr_def_id, closure);\n+    fcx.inh.closure_tys.borrow_mut().insert(expr_def_id, fn_ty);\n+    fcx.inh.closure_kinds.borrow_mut().insert(expr_def_id, kind);\n }\n \n fn deduce_expectations_from_expected_type<'a,'tcx>("}, {"sha": "8000776ad45f94227ba08143fda5d9857dec99ca", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=2f465869fd23d1bea7a99ca2e602c94e13d0dffb", "patch": "@@ -598,9 +598,9 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n                 _ => continue,\n             };\n \n-            let closures = self.fcx.inh.closures.borrow();\n-            let closure_data = match closures.get(&closure_def_id) {\n-                Some(data) => data,\n+            let closure_kinds = self.fcx.inh.closure_kinds.borrow();\n+            let closure_kind = match closure_kinds.get(&closure_def_id) {\n+                Some(&k) => k,\n                 None => {\n                     self.tcx().sess.span_bug(\n                         self.span,\n@@ -610,7 +610,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n             };\n \n             // this closure doesn't implement the right kind of `Fn` trait\n-            if closure_data.kind != kind {\n+            if closure_kind != kind {\n                 continue;\n             }\n "}, {"sha": "ed195035a41dfb6a37a36d1f8b6159f0efb6e018", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2f465869fd23d1bea7a99ca2e602c94e13d0dffb", "patch": "@@ -160,7 +160,8 @@ pub struct Inherited<'a, 'tcx: 'a> {\n     adjustments: RefCell<NodeMap<ty::AutoAdjustment<'tcx>>>,\n     method_map: MethodMap<'tcx>,\n     upvar_capture_map: RefCell<ty::UpvarCaptureMap>,\n-    closures: RefCell<DefIdMap<ty::Closure<'tcx>>>,\n+    closure_tys: RefCell<DefIdMap<ty::ClosureTy<'tcx>>>,\n+    closure_kinds: RefCell<DefIdMap<ty::ClosureKind>>,\n     object_cast_map: ObjectCastMap<'tcx>,\n \n     // A mapping from each fn's id to its signature, with all bound\n@@ -352,15 +353,15 @@ impl<'a, 'tcx> ty::ClosureTyper<'tcx> for FnCtxt<'a, 'tcx> {\n                     def_id: ast::DefId)\n                     -> Option<ty::ClosureKind>\n     {\n-        Some(self.inh.closures.borrow()[def_id].kind)\n+        self.inh.closure_kinds.borrow().get(&def_id).cloned()\n     }\n \n     fn closure_type(&self,\n                     def_id: ast::DefId,\n                     substs: &subst::Substs<'tcx>)\n                     -> ty::ClosureTy<'tcx>\n     {\n-        self.inh.closures.borrow()[def_id].closure_type.subst(self.tcx(), substs)\n+        self.inh.closure_tys.borrow()[def_id].subst(self.tcx(), substs)\n     }\n \n     fn closure_upvars(&self,\n@@ -386,7 +387,8 @@ impl<'a, 'tcx> Inherited<'a, 'tcx> {\n             method_map: RefCell::new(FnvHashMap()),\n             object_cast_map: RefCell::new(NodeMap()),\n             upvar_capture_map: RefCell::new(FnvHashMap()),\n-            closures: RefCell::new(DefIdMap()),\n+            closure_tys: RefCell::new(DefIdMap()),\n+            closure_kinds: RefCell::new(DefIdMap()),\n             fn_sig_map: RefCell::new(NodeMap()),\n             fulfillment_cx: RefCell::new(traits::FulfillmentContext::new()),\n             deferred_resolutions: RefCell::new(Vec::new()),"}, {"sha": "0eaecf8ac0574c6c52f37f57bb966edaeaa528d2", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f465869fd23d1bea7a99ca2e602c94e13d0dffb/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=2f465869fd23d1bea7a99ca2e602c94e13d0dffb", "patch": "@@ -204,14 +204,13 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             return\n         }\n \n-        for (def_id, closure) in self.fcx.inh.closures.borrow().iter() {\n-            let closure_ty = self.resolve(&closure.closure_type,\n-                                          ResolvingClosure(*def_id));\n-            let closure = ty::Closure {\n-                closure_type: closure_ty,\n-                kind: closure.kind,\n-            };\n-            self.fcx.tcx().closures.borrow_mut().insert(*def_id, closure);\n+        for (def_id, closure_ty) in self.fcx.inh.closure_tys.borrow().iter() {\n+            let closure_ty = self.resolve(closure_ty, ResolvingClosure(*def_id));\n+            self.fcx.tcx().closure_tys.borrow_mut().insert(*def_id, closure_ty);\n+        }\n+\n+        for (def_id, &closure_kind) in self.fcx.inh.closure_kinds.borrow().iter() {\n+            self.fcx.tcx().closure_kinds.borrow_mut().insert(*def_id, closure_kind);\n         }\n     }\n "}]}