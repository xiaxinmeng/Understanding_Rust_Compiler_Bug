{"sha": "ea473502f3a0684dcdc89e6b416320ac442893ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNDczNTAyZjNhMDY4NGRjZGM4OWU2YjQxNjMyMGFjNDQyODkzYWI=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-11T10:49:11Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-11T10:49:11Z"}, "message": "Deny bare trait objects in in src/librustc_codegen_llvm", "tree": {"sha": "e87fc73a60cbb50f27238ab5675e6e8ddb67dada", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e87fc73a60cbb50f27238ab5675e6e8ddb67dada"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea473502f3a0684dcdc89e6b416320ac442893ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea473502f3a0684dcdc89e6b416320ac442893ab", "html_url": "https://github.com/rust-lang/rust/commit/ea473502f3a0684dcdc89e6b416320ac442893ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea473502f3a0684dcdc89e6b416320ac442893ab/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae5b629efd79de78e6ba7ef493c32857bd7f9cf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae5b629efd79de78e6ba7ef493c32857bd7f9cf9", "html_url": "https://github.com/rust-lang/rust/commit/ae5b629efd79de78e6ba7ef493c32857bd7f9cf9"}], "stats": {"total": 67, "additions": 34, "deletions": 33}, "files": [{"sha": "9ea6c44502a4b2bd6b4fa4aa110e0d6643595f11", "filename": "src/librustc_codegen_llvm/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea473502f3a0684dcdc89e6b416320ac442893ab/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea473502f3a0684dcdc89e6b416320ac442893ab/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs?ref=ea473502f3a0684dcdc89e6b416320ac442893ab", "patch": "@@ -48,7 +48,7 @@ enum Addition {\n     },\n     Archive {\n         archive: ArchiveRO,\n-        skip: Box<FnMut(&str) -> bool>,\n+        skip: Box<dyn FnMut(&str) -> bool>,\n     },\n }\n "}, {"sha": "a7f0910a6fcccff6e1fe9eb48b1ea26d213499b9", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ea473502f3a0684dcdc89e6b416320ac442893ab/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea473502f3a0684dcdc89e6b416320ac442893ab/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=ea473502f3a0684dcdc89e6b416320ac442893ab", "patch": "@@ -251,7 +251,7 @@ fn filename_for_metadata(sess: &Session, crate_name: &str, outputs: &OutputFilen\n \n pub(crate) fn each_linked_rlib(sess: &Session,\n                                info: &CrateInfo,\n-                               f: &mut FnMut(CrateNum, &Path)) -> Result<(), String> {\n+                               f: &mut dyn FnMut(CrateNum, &Path)) -> Result<(), String> {\n     let crates = info.used_crates_static.iter();\n     let fmts = sess.dependency_formats.borrow();\n     let fmts = fmts.get(&config::CrateTypeExecutable)\n@@ -984,7 +984,7 @@ fn exec_linker(sess: &Session, cmd: &mut Command, out_filename: &Path, tmpdir: &\n     }\n }\n \n-fn link_args(cmd: &mut Linker,\n+fn link_args(cmd: &mut dyn Linker,\n              sess: &Session,\n              crate_type: config::CrateType,\n              tmpdir: &Path,\n@@ -1195,7 +1195,7 @@ fn link_args(cmd: &mut Linker,\n // Also note that the native libraries linked here are only the ones located\n // in the current crate. Upstream crates with native library dependencies\n // may have their native library pulled in above.\n-fn add_local_native_libraries(cmd: &mut Linker,\n+fn add_local_native_libraries(cmd: &mut dyn Linker,\n                               sess: &Session,\n                               codegen_results: &CodegenResults) {\n     sess.target_filesearch(PathKind::All).for_each_lib_search_path(|path, k| {\n@@ -1226,7 +1226,7 @@ fn add_local_native_libraries(cmd: &mut Linker,\n // Rust crates are not considered at all when creating an rlib output. All\n // dependencies will be linked when producing the final output (instead of\n // the intermediate rlib version)\n-fn add_upstream_rust_crates(cmd: &mut Linker,\n+fn add_upstream_rust_crates(cmd: &mut dyn Linker,\n                             sess: &Session,\n                             codegen_results: &CodegenResults,\n                             crate_type: config::CrateType,\n@@ -1350,7 +1350,7 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n     // it's packed in a .rlib, it contains stuff that are not objects that will\n     // make the linker error. So we must remove those bits from the .rlib before\n     // linking it.\n-    fn link_sanitizer_runtime(cmd: &mut Linker,\n+    fn link_sanitizer_runtime(cmd: &mut dyn Linker,\n                               sess: &Session,\n                               codegen_results: &CodegenResults,\n                               tmpdir: &Path,\n@@ -1419,7 +1419,7 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n     // (aka we're making an executable), we can just pass the rlib blindly to\n     // the linker (fast) because it's fine if it's not actually included as\n     // we're at the end of the dependency chain.\n-    fn add_static_crate(cmd: &mut Linker,\n+    fn add_static_crate(cmd: &mut dyn Linker,\n                         sess: &Session,\n                         codegen_results: &CodegenResults,\n                         tmpdir: &Path,\n@@ -1524,7 +1524,7 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n     }\n \n     // Same thing as above, but for dynamic crates instead of static crates.\n-    fn add_dynamic_crate(cmd: &mut Linker, sess: &Session, cratepath: &Path) {\n+    fn add_dynamic_crate(cmd: &mut dyn Linker, sess: &Session, cratepath: &Path) {\n         // If we're performing LTO, then it should have been previously required\n         // that all upstream rust dependencies were available in an rlib format.\n         assert!(!is_full_lto_enabled(sess));\n@@ -1559,7 +1559,7 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n // generic function calls a native function, then the generic function must\n // be instantiated in the target crate, meaning that the native symbol must\n // also be resolved in the target crate.\n-fn add_upstream_native_libraries(cmd: &mut Linker,\n+fn add_upstream_native_libraries(cmd: &mut dyn Linker,\n                                  sess: &Session,\n                                  codegen_results: &CodegenResults,\n                                  crate_type: config::CrateType) {"}, {"sha": "f5f486893854f8999d9ff6b959e9e58598c2c49b", "filename": "src/librustc_codegen_llvm/back/linker.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ea473502f3a0684dcdc89e6b416320ac442893ab/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea473502f3a0684dcdc89e6b416320ac442893ab/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs?ref=ea473502f3a0684dcdc89e6b416320ac442893ab", "patch": "@@ -44,22 +44,22 @@ impl LinkerInfo {\n \n     pub fn to_linker<'a>(&'a self,\n                          cmd: Command,\n-                         sess: &'a Session) -> Box<Linker+'a> {\n+                         sess: &'a Session) -> Box<dyn Linker+'a> {\n         match sess.linker_flavor() {\n             LinkerFlavor::Lld(LldFlavor::Link) |\n             LinkerFlavor::Msvc => {\n                 Box::new(MsvcLinker {\n                     cmd,\n                     sess,\n                     info: self\n-                }) as Box<Linker>\n+                }) as Box<dyn Linker>\n             }\n             LinkerFlavor::Em =>  {\n                 Box::new(EmLinker {\n                     cmd,\n                     sess,\n                     info: self\n-                }) as Box<Linker>\n+                }) as Box<dyn Linker>\n             }\n             LinkerFlavor::Gcc =>  {\n                 Box::new(GccLinker {\n@@ -68,7 +68,7 @@ impl LinkerInfo {\n                     info: self,\n                     hinted_static: false,\n                     is_ld: false,\n-                }) as Box<Linker>\n+                }) as Box<dyn Linker>\n             }\n \n             LinkerFlavor::Lld(LldFlavor::Ld) |\n@@ -80,14 +80,14 @@ impl LinkerInfo {\n                     info: self,\n                     hinted_static: false,\n                     is_ld: true,\n-                }) as Box<Linker>\n+                }) as Box<dyn Linker>\n             }\n \n             LinkerFlavor::Lld(LldFlavor::Wasm) => {\n                 Box::new(WasmLd {\n                     cmd,\n                     sess,\n-                }) as Box<Linker>\n+                }) as Box<dyn Linker>\n             }\n         }\n     }"}, {"sha": "f46205cb59088741a00d000540a3711079bcf415", "filename": "src/librustc_codegen_llvm/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea473502f3a0684dcdc89e6b416320ac442893ab/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea473502f3a0684dcdc89e6b416320ac442893ab/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs?ref=ea473502f3a0684dcdc89e6b416320ac442893ab", "patch": "@@ -22,7 +22,7 @@ pub struct RPathConfig<'a> {\n     pub is_like_osx: bool,\n     pub has_rpath: bool,\n     pub linker_is_gnu: bool,\n-    pub get_install_prefix_lib_path: &'a mut FnMut() -> PathBuf,\n+    pub get_install_prefix_lib_path: &'a mut dyn FnMut() -> PathBuf,\n }\n \n pub fn get_rpath_flags(config: &mut RPathConfig) -> Vec<String> {"}, {"sha": "8d0b585e98d48540d82fb25a37201f70b1ea1948", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ea473502f3a0684dcdc89e6b416320ac442893ab/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea473502f3a0684dcdc89e6b416320ac442893ab/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=ea473502f3a0684dcdc89e6b416320ac442893ab", "patch": "@@ -140,7 +140,7 @@ pub fn create_target_machine(sess: &Session, find_features: bool) -> TargetMachi\n // that `is_pie_binary` is false. When we discover LLVM target features\n // `sess.crate_types` is uninitialized so we cannot access it.\n pub fn target_machine_factory(sess: &Session, find_features: bool)\n-    -> Arc<Fn() -> Result<TargetMachineRef, String> + Send + Sync>\n+    -> Arc<dyn Fn() -> Result<TargetMachineRef, String> + Send + Sync>\n {\n     let reloc_model = get_reloc_model(sess);\n \n@@ -343,7 +343,7 @@ pub struct CodegenContext {\n     regular_module_config: Arc<ModuleConfig>,\n     metadata_module_config: Arc<ModuleConfig>,\n     allocator_module_config: Arc<ModuleConfig>,\n-    pub tm_factory: Arc<Fn() -> Result<TargetMachineRef, String> + Send + Sync>,\n+    pub tm_factory: Arc<dyn Fn() -> Result<TargetMachineRef, String> + Send + Sync>,\n     pub msvc_imps_needed: bool,\n     pub target_pointer_width: String,\n     debuginfo: config::DebugInfoLevel,\n@@ -362,7 +362,7 @@ pub struct CodegenContext {\n     // compiling incrementally\n     pub incr_comp_session_dir: Option<PathBuf>,\n     // Channel back to the main control thread to send messages to\n-    coordinator_send: Sender<Box<Any + Send>>,\n+    coordinator_send: Sender<Box<dyn Any + Send>>,\n     // A reference to the TimeGraph so we can register timings. None means that\n     // measuring is disabled.\n     time_graph: Option<TimeGraph>,\n@@ -884,7 +884,7 @@ pub fn start_async_codegen(tcx: TyCtxt,\n                                time_graph: Option<TimeGraph>,\n                                link: LinkMeta,\n                                metadata: EncodedMetadata,\n-                               coordinator_receive: Receiver<Box<Any + Send>>,\n+                               coordinator_receive: Receiver<Box<dyn Any + Send>>,\n                                total_cgus: usize)\n                                -> OngoingCodegen {\n     let sess = tcx.sess;\n@@ -1412,7 +1412,7 @@ fn start_executing_work(tcx: TyCtxt,\n                         crate_info: &CrateInfo,\n                         shared_emitter: SharedEmitter,\n                         codegen_worker_send: Sender<Message>,\n-                        coordinator_receive: Receiver<Box<Any + Send>>,\n+                        coordinator_receive: Receiver<Box<dyn Any + Send>>,\n                         total_cgus: usize,\n                         jobserver: Client,\n                         time_graph: Option<TimeGraph>,\n@@ -1976,7 +1976,7 @@ fn spawn_work(cgcx: CodegenContext, work: WorkItem) {\n         // Set up a destructor which will fire off a message that we're done as\n         // we exit.\n         struct Bomb {\n-            coordinator_send: Sender<Box<Any + Send>>,\n+            coordinator_send: Sender<Box<dyn Any + Send>>,\n             result: Option<WorkItemResult>,\n             worker_id: usize,\n         }\n@@ -2056,7 +2056,7 @@ pub unsafe fn with_llvm_pmb(llmod: ModuleRef,\n                             config: &ModuleConfig,\n                             opt_level: llvm::CodeGenOptLevel,\n                             prepare_for_thin_lto: bool,\n-                            f: &mut FnMut(llvm::PassManagerBuilderRef)) {\n+                            f: &mut dyn FnMut(llvm::PassManagerBuilderRef)) {\n     use std::ptr;\n \n     // Create the PassManagerBuilder for LLVM. We configure it with\n@@ -2243,7 +2243,7 @@ pub struct OngoingCodegen {\n     linker_info: LinkerInfo,\n     crate_info: CrateInfo,\n     time_graph: Option<TimeGraph>,\n-    coordinator_send: Sender<Box<Any + Send>>,\n+    coordinator_send: Sender<Box<dyn Any + Send>>,\n     codegen_worker_receive: Receiver<Message>,\n     shared_emitter_main: SharedEmitterMain,\n     future: thread::JoinHandle<Result<CompiledModules, ()>>,"}, {"sha": "ea26e271c9bb3edad6c6221b951f28b6b36c3f26", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea473502f3a0684dcdc89e6b416320ac442893ab/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea473502f3a0684dcdc89e6b416320ac442893ab/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=ea473502f3a0684dcdc89e6b416320ac442893ab", "patch": "@@ -717,7 +717,7 @@ pub fn iter_globals(llmod: llvm::ModuleRef) -> ValueIter {\n }\n \n pub fn codegen_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                             rx: mpsc::Receiver<Box<Any + Send>>)\n+                             rx: mpsc::Receiver<Box<dyn Any + Send>>)\n                              -> OngoingCodegen {\n \n     check_for_rustc_errors_attr(tcx);"}, {"sha": "7625e4c7e0f29e2ecacc1ad982b1b993f72dc23b", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea473502f3a0684dcdc89e6b416320ac442893ab/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea473502f3a0684dcdc89e6b416320ac442893ab/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=ea473502f3a0684dcdc89e6b416320ac442893ab", "patch": "@@ -916,7 +916,7 @@ fn gen_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                     name: &str,\n                     inputs: Vec<Ty<'tcx>>,\n                     output: Ty<'tcx>,\n-                    codegen: &mut for<'b> FnMut(Builder<'b, 'tcx>))\n+                    codegen: &mut dyn for<'b> FnMut(Builder<'b, 'tcx>))\n                     -> ValueRef {\n     let rust_fn_ty = cx.tcx.mk_fn_ptr(ty::Binder::bind(cx.tcx.mk_fn_sig(\n         inputs.into_iter(),\n@@ -936,7 +936,7 @@ fn gen_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n //\n // This function is only generated once and is then cached.\n fn get_rust_try_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n-                             codegen: &mut for<'b> FnMut(Builder<'b, 'tcx>))\n+                             codegen: &mut dyn for<'b> FnMut(Builder<'b, 'tcx>))\n                              -> ValueRef {\n     if let Some(llfn) = cx.rust_try_fn.get() {\n         return llfn;"}, {"sha": "8aa7902021f240891e2b8686c43b7e2f0931a136", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ea473502f3a0684dcdc89e6b416320ac442893ab/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea473502f3a0684dcdc89e6b416320ac442893ab/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=ea473502f3a0684dcdc89e6b416320ac442893ab", "patch": "@@ -23,6 +23,7 @@\n #![feature(custom_attribute)]\n #![feature(fs_read_write)]\n #![allow(unused_attributes)]\n+#![deny(bare_trait_objects)]\n #![feature(libc)]\n #![feature(quote)]\n #![feature(range_contains)]\n@@ -125,7 +126,7 @@ impl !Send for LlvmCodegenBackend {} // Llvm is on a per-thread basis\n impl !Sync for LlvmCodegenBackend {}\n \n impl LlvmCodegenBackend {\n-    pub fn new() -> Box<CodegenBackend> {\n+    pub fn new() -> Box<dyn CodegenBackend> {\n         box LlvmCodegenBackend(())\n     }\n }\n@@ -178,7 +179,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n         target_features(sess)\n     }\n \n-    fn metadata_loader(&self) -> Box<MetadataLoader + Sync> {\n+    fn metadata_loader(&self) -> Box<dyn MetadataLoader + Sync> {\n         box metadata::LlvmMetadataLoader\n     }\n \n@@ -198,14 +199,14 @@ impl CodegenBackend for LlvmCodegenBackend {\n     fn codegen_crate<'a, 'tcx>(\n         &self,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        rx: mpsc::Receiver<Box<Any + Send>>\n-    ) -> Box<Any> {\n+        rx: mpsc::Receiver<Box<dyn Any + Send>>\n+    ) -> Box<dyn Any> {\n         box base::codegen_crate(tcx, rx)\n     }\n \n     fn join_codegen_and_link(\n         &self,\n-        ongoing_codegen: Box<Any>,\n+        ongoing_codegen: Box<dyn Any>,\n         sess: &Session,\n         dep_graph: &DepGraph,\n         outputs: &OutputFilenames,\n@@ -247,7 +248,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n \n /// This is the entrypoint for a hot plugged rustc_codegen_llvm\n #[no_mangle]\n-pub fn __rustc_codegen_backend() -> Box<CodegenBackend> {\n+pub fn __rustc_codegen_backend() -> Box<dyn CodegenBackend> {\n     LlvmCodegenBackend::new()\n }\n "}]}