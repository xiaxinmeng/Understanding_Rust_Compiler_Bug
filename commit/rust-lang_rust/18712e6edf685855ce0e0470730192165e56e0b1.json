{"sha": "18712e6edf685855ce0e0470730192165e56e0b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NzEyZTZlZGY2ODU4NTVjZTBlMDQ3MDczMDE5MjE2NWU1NmUwYjE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-07-06T03:25:29Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-07-11T08:15:59Z"}, "message": "compiletest: Refactor: Move the `ignore-{}` logic into its own method.\n\nPrepare for `normalize-std???` which will share the same logic.\nAdded `ignore-32bit` and `ignore-64bit`.", "tree": {"sha": "b0a89537cddedd3b84ce7a410f8888e021a23207", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0a89537cddedd3b84ce7a410f8888e021a23207"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18712e6edf685855ce0e0470730192165e56e0b1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJZZIlAAAoJEP72yAUdDgE8VOwP/0kl3moEO65T48Dgv31z2qVg\nC6macq55KWT25hJ8rbsix0vBybwZyTQ6MZo3sRlk0FOX+FkTCWdLgP+VHng3LGr9\nfcX9Ihhv1CrXFDHWcVSmANTrHcWFiQSuCTzcOl1PDWGSmu2TYhRdnXmBVaBAgpw3\ngLyS1NERNR0IljI8Gf8MmFi9+xyskGFj4rTvi6iM0uUMy4KQ1HfbaWk4q1i3+oQ7\ngU32shcsVJ+UmbKuKIVITR5pLtlWT6g1YTVuv7zRzusfr1LFEuqVY3bog394eF67\n4lLFQa98Fgql4d7pefpFu+pfJWTHaexRA4PxoCuGFxNi3DsRCEeIsABum3JnqnnZ\nilsxy8fRkY5VEjgvP4INz7I0Aj8Dz5fPv+5be/VqFy1MQ0/twP6SqnURnvfaCVnD\nOce9NoYd6ueN2SnU8FSjpIbHTr+r73tkKUcKTuEq79OJASEFW23n4QgABY6EhMSz\n+shHaJh2vvAC88Ca0HVu7QeQetYAUY5SIMSF02fi5FQWxhF8gvbTWJHJeBM70UlX\nOzDkUhC/WUvg6Smw2jUjiHEJkWHsLHFXrc4zbZ82dQeskod0Jr1vkHFDOHOB84Ow\nzx72YNlapsEkgCgpEVz7iJvmvmh2GsNZiGFlfkXVrJ+KWacirp3AoU9EpWbgw+0Y\n6lKTTn/U93DTGsRsaWJS\n=V0jZ\n-----END PGP SIGNATURE-----", "payload": "tree b0a89537cddedd3b84ce7a410f8888e021a23207\nparent 1999bfaa9f961ce2e0c82e97f9bc152d5ce5ed72\nauthor kennytm <kennytm@gmail.com> 1499311529 +0800\ncommitter kennytm <kennytm@gmail.com> 1499760959 +0800\n\ncompiletest: Refactor: Move the `ignore-{}` logic into its own method.\n\nPrepare for `normalize-std???` which will share the same logic.\nAdded `ignore-32bit` and `ignore-64bit`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18712e6edf685855ce0e0470730192165e56e0b1", "html_url": "https://github.com/rust-lang/rust/commit/18712e6edf685855ce0e0470730192165e56e0b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18712e6edf685855ce0e0470730192165e56e0b1/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1999bfaa9f961ce2e0c82e97f9bc152d5ce5ed72", "url": "https://api.github.com/repos/rust-lang/rust/commits/1999bfaa9f961ce2e0c82e97f9bc152d5ce5ed72", "html_url": "https://github.com/rust-lang/rust/commit/1999bfaa9f961ce2e0c82e97f9bc152d5ce5ed72"}], "stats": {"total": 71, "additions": 35, "deletions": 36}, "files": [{"sha": "d989210dd71f2028eafae67969c24002601ecbbc", "filename": "src/test/run-pass/i128-ffi.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/18712e6edf685855ce0e0470730192165e56e0b1/src%2Ftest%2Frun-pass%2Fi128-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18712e6edf685855ce0e0470730192165e56e0b1/src%2Ftest%2Frun-pass%2Fi128-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fi128-ffi.rs?ref=18712e6edf685855ce0e0470730192165e56e0b1", "patch": "@@ -13,12 +13,7 @@\n // should look like.\n \n // ignore-windows\n-\n-// Ignore 32 bit targets:\n-// ignore-x86\n-// ignore-arm\n-\n-// ignore-emscripten\n+// ignore-32bit\n \n #![feature(i128_type)]\n "}, {"sha": "59d08ceae219ea81daaf62ed9a5d5d3e07bf7dc5", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 26, "deletions": 30, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/18712e6edf685855ce0e0470730192165e56e0b1/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18712e6edf685855ce0e0470730192165e56e0b1/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=18712e6edf685855ce0e0470730192165e56e0b1", "patch": "@@ -40,15 +40,8 @@ impl EarlyProps {\n                     None,\n                     &mut |ln| {\n             props.ignore =\n-                props.ignore || config.parse_name_directive(ln, \"ignore-test\") ||\n-                config.parse_name_directive(ln, &ignore_target(config)) ||\n-                config.parse_name_directive(ln, &ignore_architecture(config)) ||\n-                config.parse_name_directive(ln, &ignore_stage(config)) ||\n-                config.parse_name_directive(ln, &ignore_env(config)) ||\n-                (config.mode == common::Pretty &&\n-                 config.parse_name_directive(ln, \"ignore-pretty\")) ||\n-                (config.target != config.host &&\n-                 config.parse_name_directive(ln, \"ignore-cross-compile\")) ||\n+                props.ignore ||\n+                config.parse_cfg_name_directive(ln, \"ignore\") ||\n                 ignore_gdb(config, ln) ||\n                 ignore_lldb(config, ln) ||\n                 ignore_llvm(config, ln);\n@@ -62,28 +55,11 @@ impl EarlyProps {\n \n         return props;\n \n-        fn ignore_target(config: &Config) -> String {\n-            format!(\"ignore-{}\", util::get_os(&config.target))\n-        }\n-        fn ignore_architecture(config: &Config) -> String {\n-            format!(\"ignore-{}\", util::get_arch(&config.target))\n-        }\n-        fn ignore_stage(config: &Config) -> String {\n-            format!(\"ignore-{}\", config.stage_id.split('-').next().unwrap())\n-        }\n-        fn ignore_env(config: &Config) -> String {\n-            format!(\"ignore-{}\",\n-                    util::get_env(&config.target).unwrap_or(\"<unknown>\"))\n-        }\n         fn ignore_gdb(config: &Config, line: &str) -> bool {\n             if config.mode != common::DebugInfoGdb {\n                 return false;\n             }\n \n-            if config.parse_name_directive(line, \"ignore-gdb\") {\n-                return true;\n-            }\n-\n             if let Some(actual_version) = config.gdb_version {\n                 if line.starts_with(\"min-gdb-version\") {\n                     let (start_ver, end_ver) = extract_gdb_version_range(line);\n@@ -144,10 +120,6 @@ impl EarlyProps {\n                 return false;\n             }\n \n-            if config.parse_name_directive(line, \"ignore-lldb\") {\n-                return true;\n-            }\n-\n             if let Some(ref actual_version) = config.lldb_version {\n                 if line.starts_with(\"min-lldb-version\") {\n                     let min_version = line.trim_right()\n@@ -525,6 +497,30 @@ impl Config {\n         }\n     }\n \n+    /// Parses a name-value directive which contains config-specific information, e.g. `ignore-x86`\n+    /// or `normalize-stderr-32bit`. Returns `true` if the line matches it.\n+    fn parse_cfg_name_directive(&self, line: &str, prefix: &str) -> bool {\n+        if line.starts_with(prefix) && line.as_bytes().get(prefix.len()) == Some(&b'-') {\n+            let name = line[prefix.len()+1 ..].split(&[':', ' '][..]).next().unwrap();\n+\n+            name == \"test\" ||\n+                name == util::get_os(&self.target) ||               // target\n+                name == util::get_arch(&self.target) ||             // architecture\n+                name == util::get_pointer_width(&self.target) ||    // pointer width\n+                name == self.stage_id.split('-').next().unwrap() || // stage\n+                Some(name) == util::get_env(&self.target) ||        // env\n+                match self.mode {\n+                    common::DebugInfoGdb => name == \"gdb\",\n+                    common::DebugInfoLldb => name == \"lldb\",\n+                    common::Pretty => name == \"pretty\",\n+                    _ => false,\n+                } ||\n+                (self.target != self.host && name == \"cross-compile\")\n+        } else {\n+            false\n+        }\n+    }\n+\n     fn parse_name_directive(&self, line: &str, directive: &str) -> bool {\n         // Ensure the directive is a whole word. Do not match \"ignore-x86\" when\n         // the line says \"ignore-x86_64\"."}, {"sha": "85fa38bbd3be760125901c92761a22007f28ae6a", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/18712e6edf685855ce0e0470730192165e56e0b1/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18712e6edf685855ce0e0470730192165e56e0b1/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=18712e6edf685855ce0e0470730192165e56e0b1", "patch": "@@ -72,6 +72,14 @@ pub fn get_env(triple: &str) -> Option<&str> {\n     triple.split('-').nth(3)\n }\n \n+pub fn get_pointer_width(triple: &str) -> &'static str {\n+    if triple.contains(\"64\") || triple.starts_with(\"s390x\") {\n+        \"64bit\"\n+    } else {\n+        \"32bit\"\n+    }\n+}\n+\n pub fn make_new_path(path: &str) -> String {\n     assert!(cfg!(windows));\n     // Windows just uses PATH as the library search path, so we have to"}]}