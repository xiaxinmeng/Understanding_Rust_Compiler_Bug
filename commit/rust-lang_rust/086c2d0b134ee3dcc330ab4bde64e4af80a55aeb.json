{"sha": "086c2d0b134ee3dcc330ab4bde64e4af80a55aeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NmMyZDBiMTM0ZWUzZGNjMzMwYWI0YmRlNjRlNGFmODBhNTVhZWI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-07-18T20:03:07Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-07-21T17:40:46Z"}, "message": "Fix #52416 - ice for move errors in unsafe blocks", "tree": {"sha": "553e2c4886db6b5979b29022b78f952007784e38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/553e2c4886db6b5979b29022b78f952007784e38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/086c2d0b134ee3dcc330ab4bde64e4af80a55aeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/086c2d0b134ee3dcc330ab4bde64e4af80a55aeb", "html_url": "https://github.com/rust-lang/rust/commit/086c2d0b134ee3dcc330ab4bde64e4af80a55aeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/086c2d0b134ee3dcc330ab4bde64e4af80a55aeb/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12412749ab209447611c6d071e187d787c6feeb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/12412749ab209447611c6d071e187d787c6feeb2", "html_url": "https://github.com/rust-lang/rust/commit/12412749ab209447611c6d071e187d787c6feeb2"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "b7ba5c855b9961eec62e2ee177eac1cf2aeb887f", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/086c2d0b134ee3dcc330ab4bde64e4af80a55aeb/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/086c2d0b134ee3dcc330ab4bde64e4af80a55aeb/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=086c2d0b134ee3dcc330ab4bde64e4af80a55aeb", "patch": "@@ -96,19 +96,19 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                     .map(|stmt| &stmt.kind)\n                 {\n                     let local_decl = &self.mir.local_decls[*local];\n+                    // opt_match_place is the\n+                    // match_span is the span of the expression being matched on\n+                    // match *x.y { ... }        match_place is Some(*x.y)\n+                    //       ^^^^                match_span is the span of *x.y\n+                    //\n+                    // opt_match_place is None for let [mut] x = ... statements,\n+                    // whether or not the right-hand side is a place expression\n                     if let Some(ClearCrossCrate::Set(BindingForm::Var(VarBindingForm {\n                         opt_match_place: Some((ref opt_match_place, match_span)),\n                         binding_mode: _,\n                         opt_ty_info: _,\n                     }))) = local_decl.is_user_variable\n                     {\n-                        // opt_match_place is the\n-                        // match_span is the span of the expression being matched on\n-                        // match *x.y { ... }        match_place is Some(*x.y)\n-                        //       ^^^^                match_span is the span of *x.y\n-                        // opt_match_place is None for let [mut] x = ... statements,\n-                        // whether or not the right-hand side is a place expression\n-\n                         // HACK use scopes to determine if this assignment is\n                         // the initialization of a variable.\n                         // FIXME(matthewjasper) This would probably be more\n@@ -127,8 +127,8 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                                 opt_match_place,\n                                 match_span,\n                             );\n+                            return;\n                         }\n-                        return;\n                     }\n                 }\n                 grouped_errors.push(GroupedMoveError::OtherIllegalMove {"}]}