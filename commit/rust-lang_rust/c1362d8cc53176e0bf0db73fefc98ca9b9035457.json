{"sha": "c1362d8cc53176e0bf0db73fefc98ca9b9035457", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMzYyZDhjYzUzMTc2ZTBiZjBkYjczZmVmYzk4Y2E5YjkwMzU0NTc=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-15T01:08:31Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-18T03:13:43Z"}, "message": "Clean up `build_reduced_graph.rs`.", "tree": {"sha": "c9f2802a4df74de6a4ffcb6b4152e8a9e28cfb45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9f2802a4df74de6a4ffcb6b4152e8a9e28cfb45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1362d8cc53176e0bf0db73fefc98ca9b9035457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1362d8cc53176e0bf0db73fefc98ca9b9035457", "html_url": "https://github.com/rust-lang/rust/commit/c1362d8cc53176e0bf0db73fefc98ca9b9035457", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1362d8cc53176e0bf0db73fefc98ca9b9035457/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37154ca95d801c83974e23b913154da402ae5d79", "url": "https://api.github.com/repos/rust-lang/rust/commits/37154ca95d801c83974e23b913154da402ae5d79", "html_url": "https://github.com/rust-lang/rust/commit/37154ca95d801c83974e23b913154da402ae5d79"}], "stats": {"total": 44, "additions": 18, "deletions": 26}, "files": [{"sha": "3b3058c6da7be182a96ce4b231a2b572bb24262f", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c1362d8cc53176e0bf0db73fefc98ca9b9035457/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1362d8cc53176e0bf0db73fefc98ca9b9035457/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=c1362d8cc53176e0bf0db73fefc98ca9b9035457", "patch": "@@ -56,12 +56,7 @@ impl<'b> Resolver<'b> {\n     pub fn build_reduced_graph(&mut self, krate: &Crate) {\n         let no_implicit_prelude = attr::contains_name(&krate.attrs, \"no_implicit_prelude\");\n         self.graph_root.no_implicit_prelude.set(no_implicit_prelude);\n-\n-        let mut visitor = BuildReducedGraphVisitor {\n-            parent: self.graph_root,\n-            resolver: self,\n-        };\n-        visit::walk_crate(&mut visitor, krate);\n+        visit::walk_crate(&mut BuildReducedGraphVisitor { resolver: self }, krate);\n     }\n \n     /// Defines `name` in namespace `ns` of module `parent` to be `def` if it is not yet defined;\n@@ -84,11 +79,10 @@ impl<'b> Resolver<'b> {\n     }\n \n     /// Constructs the reduced graph for one item.\n-    fn build_reduced_graph_for_item(&mut self, item: &Item, parent_ref: &mut Module<'b>) {\n-        let parent = *parent_ref;\n+    fn build_reduced_graph_for_item(&mut self, item: &Item) {\n+        let parent = self.current_module;\n         let name = item.ident.name;\n         let sp = item.span;\n-        self.current_module = parent;\n         let vis = self.resolve_visibility(&item.vis);\n \n         match item.node {\n@@ -213,7 +207,7 @@ impl<'b> Resolver<'b> {\n                 });\n                 self.define(parent, name, TypeNS, (module, sp, vis));\n                 self.module_map.insert(item.id, module);\n-                *parent_ref = module;\n+                self.current_module = module; // Descend into the module.\n             }\n \n             ItemKind::ForeignMod(..) => {}\n@@ -306,6 +300,9 @@ impl<'b> Resolver<'b> {\n             }\n             ItemKind::Mac(_) => panic!(\"unexpanded macro in resolve!\"),\n         }\n+\n+        visit::walk_item(&mut BuildReducedGraphVisitor { resolver: self }, item);\n+        self.current_module = parent;\n     }\n \n     // Constructs the reduced graph for one variant. Variants exist in the\n@@ -330,9 +327,8 @@ impl<'b> Resolver<'b> {\n     }\n \n     /// Constructs the reduced graph for one foreign item.\n-    fn build_reduced_graph_for_foreign_item(&mut self,\n-                                            foreign_item: &ForeignItem,\n-                                            parent: Module<'b>) {\n+    fn build_reduced_graph_for_foreign_item(&mut self, foreign_item: &ForeignItem) {\n+        let parent = self.current_module;\n         let name = foreign_item.ident.name;\n \n         let def = match foreign_item.node {\n@@ -343,12 +339,12 @@ impl<'b> Resolver<'b> {\n                 Def::Static(self.definitions.local_def_id(foreign_item.id), m)\n             }\n         };\n-        self.current_module = parent;\n         let vis = self.resolve_visibility(&foreign_item.vis);\n         self.define(parent, name, ValueNS, (def, foreign_item.span, vis));\n     }\n \n-    fn build_reduced_graph_for_block(&mut self, block: &Block, parent: &mut Module<'b>) {\n+    fn build_reduced_graph_for_block(&mut self, block: &Block) {\n+        let parent = self.current_module;\n         if self.block_needs_anonymous_module(block) {\n             let block_id = block.id;\n \n@@ -359,8 +355,11 @@ impl<'b> Resolver<'b> {\n             let parent_link = BlockParentLink(parent, block_id);\n             let new_module = self.new_module(parent_link, None, false);\n             self.module_map.insert(block_id, new_module);\n-            *parent = new_module;\n+            self.current_module = new_module; // Descend into the block.\n         }\n+\n+        visit::walk_block(&mut BuildReducedGraphVisitor { resolver: self }, block);\n+        self.current_module = parent;\n     }\n \n     /// Builds the reduced graph for a single item in an external crate.\n@@ -484,25 +483,18 @@ impl<'b> Resolver<'b> {\n \n struct BuildReducedGraphVisitor<'a, 'b: 'a> {\n     resolver: &'a mut Resolver<'b>,\n-    parent: Module<'b>,\n }\n \n impl<'a, 'b> Visitor for BuildReducedGraphVisitor<'a, 'b> {\n     fn visit_item(&mut self, item: &Item) {\n-        let old_parent = self.parent;\n-        self.resolver.build_reduced_graph_for_item(item, &mut self.parent);\n-        visit::walk_item(self, item);\n-        self.parent = old_parent;\n+        self.resolver.build_reduced_graph_for_item(item);\n     }\n \n     fn visit_foreign_item(&mut self, foreign_item: &ForeignItem) {\n-        self.resolver.build_reduced_graph_for_foreign_item(foreign_item, &self.parent);\n+        self.resolver.build_reduced_graph_for_foreign_item(foreign_item);\n     }\n \n     fn visit_block(&mut self, block: &Block) {\n-        let old_parent = self.parent;\n-        self.resolver.build_reduced_graph_for_block(block, &mut self.parent);\n-        visit::walk_block(self, block);\n-        self.parent = old_parent;\n+        self.resolver.build_reduced_graph_for_block(block);\n     }\n }"}]}