{"sha": "2616ab1c57e2d69f989307389b27ee996ed82575", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MTZhYjFjNTdlMmQ2OWY5ODkzMDczODliMjdlZTk5NmVkODI1NzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-03T23:17:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-03T23:17:58Z"}, "message": "Auto merge of #83811 - JohnTitor:rollup-hnw1xwz, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #82487 (Constify methods of `std::net::SocketAddr`, `SocketAddrV4` and `SocketAddrV6`)\n - #83756 (rustdoc: Rename internal uses of `spotlight`)\n - #83780 (Document \"standard\" conventions for error messages)\n - #83787 (Monomorphization doc fix)\n - #83803 (add fp-armv8 for ARM_ALLOWED_FEATURES)\n - #83804 (Remove nightly features in rustc_type_ir)\n - #83810 (Fix rustc_lint_defs documentation typo)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "85aae2d9145419b72dab28a4b24f72cfb066cc22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85aae2d9145419b72dab28a4b24f72cfb066cc22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2616ab1c57e2d69f989307389b27ee996ed82575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2616ab1c57e2d69f989307389b27ee996ed82575", "html_url": "https://github.com/rust-lang/rust/commit/2616ab1c57e2d69f989307389b27ee996ed82575", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2616ab1c57e2d69f989307389b27ee996ed82575/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b417ab5cdfdedffd74fb22cf22d27033c851304", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b417ab5cdfdedffd74fb22cf22d27033c851304", "html_url": "https://github.com/rust-lang/rust/commit/0b417ab5cdfdedffd74fb22cf22d27033c851304"}, {"sha": "b2daca745d6899ee0f8d3755c265585ae183f0e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2daca745d6899ee0f8d3755c265585ae183f0e3", "html_url": "https://github.com/rust-lang/rust/commit/b2daca745d6899ee0f8d3755c265585ae183f0e3"}], "stats": {"total": 123, "additions": 71, "deletions": 52}, "files": [{"sha": "a69e6d2b86df46b751fb8cc6e3de2ac93519305f", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2616ab1c57e2d69f989307389b27ee996ed82575/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2616ab1c57e2d69f989307389b27ee996ed82575/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=2616ab1c57e2d69f989307389b27ee996ed82575", "patch": "@@ -26,6 +26,7 @@ const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"vfp2\", Some(sym::arm_target_feature)),\n     (\"vfp3\", Some(sym::arm_target_feature)),\n     (\"vfp4\", Some(sym::arm_target_feature)),\n+    (\"fp-armv8\", Some(sym::arm_target_feature)),\n     // This is needed for inline assembly, but shouldn't be stabilized as-is\n     // since it should be enabled per-function using #[instruction_set], not\n     // #[target_feature]."}, {"sha": "1b1a59a254e6fbd0bfb41e745037e49cb667babf", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2616ab1c57e2d69f989307389b27ee996ed82575/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2616ab1c57e2d69f989307389b27ee996ed82575/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=2616ab1c57e2d69f989307389b27ee996ed82575", "patch": "@@ -124,15 +124,17 @@ macro_rules! newtype_index {\n \n             #[inline]\n             $v const fn from_usize(value: usize) -> Self {\n-                assert!(value <= ($max as usize));\n+                // FIXME: replace with `assert!(value <= ($max as usize));` once `const_panic` is stable\n+                [()][(value > ($max as usize)) as usize];\n                 unsafe {\n                     Self::from_u32_unchecked(value as u32)\n                 }\n             }\n \n             #[inline]\n             $v const fn from_u32(value: u32) -> Self {\n-                assert!(value <= $max);\n+                // FIXME: replace with `assert!(value <= $max);` once `const_panic` is stable\n+                [()][(value > $max) as usize];\n                 unsafe {\n                     Self::from_u32_unchecked(value)\n                 }"}, {"sha": "27724b4965c3cd0201b22d900fe2551ba4aff00b", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2616ab1c57e2d69f989307389b27ee996ed82575/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2616ab1c57e2d69f989307389b27ee996ed82575/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=2616ab1c57e2d69f989307389b27ee996ed82575", "patch": "@@ -547,7 +547,7 @@ declare_lint! {\n     /// Also consider if you intended to use an _inner attribute_ (with a `!`\n     /// such as `#![allow(unused)]`) which applies to the item the attribute\n     /// is within, or an _outer attribute_ (without a `!` such as\n-    /// `#[allow(unsued)]`) which applies to the item *following* the\n+    /// `#[allow(unused)]`) which applies to the item *following* the\n     /// attribute.\n     ///\n     /// [attributes]: https://doc.rust-lang.org/reference/attributes.html"}, {"sha": "1fda71d74bbf5a1a100f8a62527625fe5e8b4c46", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2616ab1c57e2d69f989307389b27ee996ed82575/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2616ab1c57e2d69f989307389b27ee996ed82575/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=2616ab1c57e2d69f989307389b27ee996ed82575", "patch": "@@ -59,11 +59,15 @@\n //!\n //! ### Discovering roots\n //!\n-//! The roots of the mono item graph correspond to the non-generic\n+//! The roots of the mono item graph correspond to the public non-generic\n //! syntactic items in the source code. We find them by walking the HIR of the\n-//! crate, and whenever we hit upon a function, method, or static item, we\n-//! create a mono item consisting of the items DefId and, since we only\n-//! consider non-generic items, an empty type-substitution set.\n+//! crate, and whenever we hit upon a public function, method, or static item,\n+//! we create a mono item consisting of the items DefId and, since we only\n+//! consider non-generic items, an empty type-substitution set. (In eager\n+//! collection mode, during incremental compilation, all non-generic functions\n+//! are considered as roots, as well as when the `-Clink-dead-code` option is\n+//! specified. Functions marked `#[no_mangle]` and functions called by inlinable\n+//! functions also always act as roots.)\n //!\n //! ### Finding neighbor nodes\n //! Given a mono item node, we can discover neighbors by inspecting its"}, {"sha": "8fcdf813b41370a6b424215d9e94f536b3fe6fe2", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2616ab1c57e2d69f989307389b27ee996ed82575/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2616ab1c57e2d69f989307389b27ee996ed82575/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=2616ab1c57e2d69f989307389b27ee996ed82575", "patch": "@@ -1,7 +1,3 @@\n-#![feature(never_type)]\n-#![feature(const_panic)]\n-#![feature(control_flow_enum)]\n-\n #[macro_use]\n extern crate bitflags;\n #[macro_use]"}, {"sha": "14c2f961d32619a4422f8ea7af162cb84cf1ec61", "filename": "library/std/src/error.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2616ab1c57e2d69f989307389b27ee996ed82575/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2616ab1c57e2d69f989307389b27ee996ed82575/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=2616ab1c57e2d69f989307389b27ee996ed82575", "patch": "@@ -33,15 +33,22 @@ use crate::string;\n use crate::sync::Arc;\n \n /// `Error` is a trait representing the basic expectations for error values,\n-/// i.e., values of type `E` in [`Result<T, E>`]. Errors must describe\n-/// themselves through the [`Display`] and [`Debug`] traits, and may provide\n-/// cause chain information:\n+/// i.e., values of type `E` in [`Result<T, E>`].\n ///\n-/// [`Error::source()`] is generally used when errors cross\n-/// \"abstraction boundaries\". If one module must report an error that is caused\n-/// by an error from a lower-level module, it can allow accessing that error\n-/// via [`Error::source()`]. This makes it possible for the high-level\n-/// module to provide its own errors while also revealing some of the\n+/// Errors must describe themselves through the [`Display`] and [`Debug`]\n+/// traits. Error messages are typically concise lowercase sentences without\n+/// trailing punctuation:\n+///\n+/// ```\n+/// let err = \"NaN\".parse::<u32>().unwrap_err();\n+/// assert_eq!(err.to_string(), \"invalid digit found in string\");\n+/// ```\n+///\n+/// Errors may provide cause chain information. [`Error::source()`] is generally\n+/// used when errors cross \"abstraction boundaries\". If one module must report\n+/// an error that is caused by an error from a lower-level module, it can allow\n+/// accessing that error via [`Error::source()`]. This makes it possible for the\n+/// high-level module to provide its own errors while also revealing some of the\n /// implementation for debugging via `source` chains.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Error: Debug + Display {"}, {"sha": "6ab68100b1d66f6a5d1169c10ccfe3cf98559ae9", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2616ab1c57e2d69f989307389b27ee996ed82575/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2616ab1c57e2d69f989307389b27ee996ed82575/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=2616ab1c57e2d69f989307389b27ee996ed82575", "patch": "@@ -249,6 +249,7 @@\n #![feature(const_ip)]\n #![feature(const_ipv6)]\n #![feature(const_raw_ptr_deref)]\n+#![feature(const_socketaddr)]\n #![feature(const_ipv4)]\n #![feature(container_error_extra)]\n #![feature(core_intrinsics)]"}, {"sha": "70376d5e065756436af7ad3dc90920b295a09d15", "filename": "library/std/src/net/addr.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2616ab1c57e2d69f989307389b27ee996ed82575/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2616ab1c57e2d69f989307389b27ee996ed82575/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs?ref=2616ab1c57e2d69f989307389b27ee996ed82575", "patch": "@@ -149,7 +149,8 @@ impl SocketAddr {\n     /// assert_eq!(socket.ip(), IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)));\n     /// ```\n     #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n-    pub fn ip(&self) -> IpAddr {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn ip(&self) -> IpAddr {\n         match *self {\n             SocketAddr::V4(ref a) => IpAddr::V4(*a.ip()),\n             SocketAddr::V6(ref a) => IpAddr::V6(*a.ip()),\n@@ -188,7 +189,8 @@ impl SocketAddr {\n     /// assert_eq!(socket.port(), 8080);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn port(&self) -> u16 {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn port(&self) -> u16 {\n         match *self {\n             SocketAddr::V4(ref a) => a.port(),\n             SocketAddr::V6(ref a) => a.port(),\n@@ -230,7 +232,8 @@ impl SocketAddr {\n     /// assert_eq!(socket.is_ipv6(), false);\n     /// ```\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n-    pub fn is_ipv4(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn is_ipv4(&self) -> bool {\n         matches!(*self, SocketAddr::V4(_))\n     }\n \n@@ -250,7 +253,8 @@ impl SocketAddr {\n     /// assert_eq!(socket.is_ipv6(), true);\n     /// ```\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n-    pub fn is_ipv6(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn is_ipv6(&self) -> bool {\n         matches!(*self, SocketAddr::V6(_))\n     }\n }\n@@ -290,7 +294,8 @@ impl SocketAddrV4 {\n     /// assert_eq!(socket.ip(), &Ipv4Addr::new(127, 0, 0, 1));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn ip(&self) -> &Ipv4Addr {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn ip(&self) -> &Ipv4Addr {\n         // SAFETY: `Ipv4Addr` is `#[repr(C)] struct { _: in_addr; }`.\n         // It is safe to cast from `&in_addr` to `&Ipv4Addr`.\n         unsafe { &*(&self.inner.sin_addr as *const c::in_addr as *const Ipv4Addr) }\n@@ -323,7 +328,8 @@ impl SocketAddrV4 {\n     /// assert_eq!(socket.port(), 8080);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn port(&self) -> u16 {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn port(&self) -> u16 {\n         ntohs(self.inner.sin_port)\n     }\n \n@@ -386,7 +392,8 @@ impl SocketAddrV6 {\n     /// assert_eq!(socket.ip(), &Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn ip(&self) -> &Ipv6Addr {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn ip(&self) -> &Ipv6Addr {\n         unsafe { &*(&self.inner.sin6_addr as *const c::in6_addr as *const Ipv6Addr) }\n     }\n \n@@ -417,7 +424,8 @@ impl SocketAddrV6 {\n     /// assert_eq!(socket.port(), 8080);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn port(&self) -> u16 {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn port(&self) -> u16 {\n         ntohs(self.inner.sin6_port)\n     }\n \n@@ -458,7 +466,8 @@ impl SocketAddrV6 {\n     /// assert_eq!(socket.flowinfo(), 10);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn flowinfo(&self) -> u32 {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn flowinfo(&self) -> u32 {\n         self.inner.sin6_flowinfo\n     }\n \n@@ -496,7 +505,8 @@ impl SocketAddrV6 {\n     /// assert_eq!(socket.scope_id(), 78);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn scope_id(&self) -> u32 {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn scope_id(&self) -> u32 {\n         self.inner.sin6_scope_id\n     }\n "}, {"sha": "277ec91f15ed7205e737a183fdb393aadd0d2f61", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2616ab1c57e2d69f989307389b27ee996ed82575/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2616ab1c57e2d69f989307389b27ee996ed82575/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=2616ab1c57e2d69f989307389b27ee996ed82575", "patch": "@@ -624,7 +624,7 @@ crate fn record_extern_trait(cx: &mut DocContext<'_>, did: DefId) {\n \n     let trait_ = clean::TraitWithExtraInfo {\n         trait_,\n-        is_spotlight: clean::utils::has_doc_flag(cx.tcx.get_attrs(did), sym::notable_trait),\n+        is_notable: clean::utils::has_doc_flag(cx.tcx.get_attrs(did), sym::notable_trait),\n     };\n     cx.external_traits.borrow_mut().insert(did, trait_);\n     cx.active_extern_traits.remove(&did);"}, {"sha": "95d9ff98aed21aadf54405093b6eccf74fa07421", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2616ab1c57e2d69f989307389b27ee996ed82575/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2616ab1c57e2d69f989307389b27ee996ed82575/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=2616ab1c57e2d69f989307389b27ee996ed82575", "patch": "@@ -65,7 +65,7 @@ crate struct Crate {\n #[derive(Clone, Debug)]\n crate struct TraitWithExtraInfo {\n     crate trait_: Trait,\n-    crate is_spotlight: bool,\n+    crate is_notable: bool,\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "152094684adf42d169d04b0fb440bcc07033f958", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2616ab1c57e2d69f989307389b27ee996ed82575/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2616ab1c57e2d69f989307389b27ee996ed82575/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=2616ab1c57e2d69f989307389b27ee996ed82575", "patch": "@@ -488,10 +488,9 @@ crate fn run_global_ctxt(\n     if let Some(sized_trait_did) = ctxt.tcx.lang_items().sized_trait() {\n         let mut sized_trait = build_external_trait(&mut ctxt, sized_trait_did);\n         sized_trait.is_auto = true;\n-        ctxt.external_traits.borrow_mut().insert(\n-            sized_trait_did,\n-            TraitWithExtraInfo { trait_: sized_trait, is_spotlight: false },\n-        );\n+        ctxt.external_traits\n+            .borrow_mut()\n+            .insert(sized_trait_did, TraitWithExtraInfo { trait_: sized_trait, is_notable: false });\n     }\n \n     debug!(\"crate: {:?}\", tcx.hir().krate());"}, {"sha": "0e405d6ae028e8886b6900498683949c858ab416", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2616ab1c57e2d69f989307389b27ee996ed82575/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2616ab1c57e2d69f989307389b27ee996ed82575/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=2616ab1c57e2d69f989307389b27ee996ed82575", "patch": "@@ -116,7 +116,7 @@ crate struct Cache {\n     // even though the trait itself is not exported. This can happen if a trait\n     // was defined in function/expression scope, since the impl will be picked\n     // up by `collect-trait-impls` but the trait won't be scraped out in the HIR\n-    // crawl. In order to prevent crashes when looking for spotlight traits or\n+    // crawl. In order to prevent crashes when looking for notable traits or\n     // when gathering trait documentation on a type, hold impls here while\n     // folding and add them to the cache later on if we find the trait.\n     orphan_trait_impls: Vec<(DefId, FxHashSet<DefId>, Impl)>,\n@@ -227,7 +227,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n         if let clean::TraitItem(ref t) = *item.kind {\n             self.cache.traits.entry(item.def_id).or_insert_with(|| clean::TraitWithExtraInfo {\n                 trait_: t.clone(),\n-                is_spotlight: item.attrs.has_doc_flag(sym::notable_trait),\n+                is_notable: item.attrs.has_doc_flag(sym::notable_trait),\n             });\n         }\n "}, {"sha": "a8a08fb23e08f4a3c9e640973e3305af8cef4213", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2616ab1c57e2d69f989307389b27ee996ed82575/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2616ab1c57e2d69f989307389b27ee996ed82575/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=2616ab1c57e2d69f989307389b27ee996ed82575", "patch": "@@ -1045,7 +1045,7 @@ fn render_assoc_item(\n         write!(\n             w,\n             \"{}{}{}{}{}{}{}fn <a href=\\\"{href}\\\" class=\\\"fnname\\\">{name}</a>\\\n-             {generics}{decl}{spotlight}{where_clause}\",\n+             {generics}{decl}{notable_traits}{where_clause}\",\n             if parent == ItemType::Trait { \"    \" } else { \"\" },\n             vis,\n             constness,\n@@ -1057,7 +1057,7 @@ fn render_assoc_item(\n             name = name,\n             generics = g.print(cache, tcx),\n             decl = d.full_print(cache, tcx, header_len, indent, header.asyncness),\n-            spotlight = spotlight_decl(&d, cache, tcx),\n+            notable_traits = notable_traits_decl(&d, cache, tcx),\n             where_clause = print_where_clause(g, cache, tcx, indent, end_newline),\n         )\n     }\n@@ -1341,17 +1341,19 @@ fn should_render_item(item: &clean::Item, deref_mut_: bool, cache: &Cache) -> bo\n     }\n }\n \n-fn spotlight_decl(decl: &clean::FnDecl, cache: &Cache, tcx: TyCtxt<'_>) -> String {\n+fn notable_traits_decl(decl: &clean::FnDecl, cache: &Cache, tcx: TyCtxt<'_>) -> String {\n     let mut out = Buffer::html();\n     let mut trait_ = String::new();\n \n     if let Some(did) = decl.output.def_id_full(cache) {\n         if let Some(impls) = cache.impls.get(&did) {\n             for i in impls {\n                 let impl_ = i.inner_impl();\n-                if impl_.trait_.def_id().map_or(false, |d| {\n-                    cache.traits.get(&d).map(|t| t.is_spotlight).unwrap_or(false)\n-                }) {\n+                if impl_\n+                    .trait_\n+                    .def_id()\n+                    .map_or(false, |d| cache.traits.get(&d).map(|t| t.is_notable).unwrap_or(false))\n+                {\n                     if out.is_empty() {\n                         write!(\n                             &mut out,"}, {"sha": "0cdfe435b9c9346379c5d2a6da808c1266c080af", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2616ab1c57e2d69f989307389b27ee996ed82575/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2616ab1c57e2d69f989307389b27ee996ed82575/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=2616ab1c57e2d69f989307389b27ee996ed82575", "patch": "@@ -10,9 +10,9 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n \n use super::{\n-    collect_paths_for_type, document, ensure_trailing_slash, item_ty_to_strs, render_assoc_item,\n-    render_assoc_items, render_attributes, render_impl, render_stability_since_raw, spotlight_decl,\n-    write_srclink, AssocItemLink, Context,\n+    collect_paths_for_type, document, ensure_trailing_slash, item_ty_to_strs, notable_traits_decl,\n+    render_assoc_item, render_assoc_items, render_attributes, render_impl,\n+    render_stability_since_raw, write_srclink, AssocItemLink, Context,\n };\n use crate::clean::{self, GetDefId};\n use crate::formats::cache::Cache;\n@@ -381,7 +381,7 @@ fn item_function(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, f: &clean::\n     write!(\n         w,\n         \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n-         {name}{generics}{decl}{spotlight}{where_clause}</pre>\",\n+         {name}{generics}{decl}{notable_traits}{where_clause}</pre>\",\n         vis = it.visibility.print_with_space(cx.tcx(), it.def_id, cx.cache()),\n         constness = f.header.constness.print_with_space(),\n         asyncness = f.header.asyncness.print_with_space(),\n@@ -391,7 +391,7 @@ fn item_function(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, f: &clean::\n         generics = f.generics.print(cx.cache(), cx.tcx()),\n         where_clause = print_where_clause(&f.generics, cx.cache(), cx.tcx(), 0, true),\n         decl = f.decl.full_print(cx.cache(), cx.tcx(), header_len, 0, f.header.asyncness),\n-        spotlight = spotlight_decl(&f.decl, cx.cache(), cx.tcx()),\n+        notable_traits = notable_traits_decl(&f.decl, cx.cache(), cx.tcx()),\n     );\n     document(w, cx, it, None)\n }"}, {"sha": "f3ddd8ec6fab712451524604e5a54964d287b3d2", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2616ab1c57e2d69f989307389b27ee996ed82575/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/2616ab1c57e2d69f989307389b27ee996ed82575/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=2616ab1c57e2d69f989307389b27ee996ed82575", "patch": "@@ -173,13 +173,10 @@ code, pre, a.test-arrow {\n \tborder-radius: 3px;\n \tpadding: 0 0.1em;\n }\n-.docblock pre code, .docblock-short pre code, .docblock code.spotlight {\n+.docblock pre code, .docblock-short pre code {\n \tpadding: 0;\n \tpadding-right: 1ex;\n }\n-.docblock code.spotlight :last-child {\n-\tpadding-bottom: 0.6em;\n-}\n pre {\n \tpadding: 14px;\n }"}]}