{"sha": "94b16d4bd000a3ca216092f85968b753e3363a50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YjE2ZDRiZDAwMGEzY2EyMTYwOTJmODU5NjhiNzUzZTMzNjNhNTA=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-16T15:38:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-16T15:38:58Z"}, "message": "Rollup merge of #62703 - fakenine:normalize_use_of_backticks_compiler_messages_p6, r=eddyb\n\nnormalize use of backticks in compiler messages for libsyntax/parse\n\nhttps://github.com/rust-lang/rust/issues/60532", "tree": {"sha": "5efe4445d1e1a770205c47960c79c0af34819f23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5efe4445d1e1a770205c47960c79c0af34819f23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94b16d4bd000a3ca216092f85968b753e3363a50", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdLe+SCRBK7hj4Ov3rIwAAdHIIADRsoPZujKmru2UHTHePQqyG\nPu/1o+Sg0v/D2sTvlkCzwwpZ1R8wF6GQBaFh4PV/q3DNaUB0indI42KG0Je4kmMz\nf1R22NbCXG7oHP+X8ukfTCqia9LfehU7qSOVPYtbEcB0OjY1IOxOlpUzsoHlNesL\n+01xTpT7lVvQ9uihYql+nyMStxBflwYWSQmIAaynZNfd6GK7pvXDA+ygpl2Pe9f4\niuf10GlVLoIORkibsvA8VTv0rsEbrddcpyog06j2eqqzeQYWfdx3LrIHnX4FJ8Sj\neyuSoVhknixuloH18bx+TtGIIe5/U9Rcnc8ELM4vSjZ9yLYS9NtlQJleW+fhQGk=\n=61/u\n-----END PGP SIGNATURE-----\n", "payload": "tree 5efe4445d1e1a770205c47960c79c0af34819f23\nparent 4226f14cbb1ecfbc7c1ff7e6c4b7030b1470a58a\nparent 7ddafaf6f95370935be339af71974da34752f1b5\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1563291538 -0400\ncommitter GitHub <noreply@github.com> 1563291538 -0400\n\nRollup merge of #62703 - fakenine:normalize_use_of_backticks_compiler_messages_p6, r=eddyb\n\nnormalize use of backticks in compiler messages for libsyntax/parse\n\nhttps://github.com/rust-lang/rust/issues/60532\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94b16d4bd000a3ca216092f85968b753e3363a50", "html_url": "https://github.com/rust-lang/rust/commit/94b16d4bd000a3ca216092f85968b753e3363a50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94b16d4bd000a3ca216092f85968b753e3363a50/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4226f14cbb1ecfbc7c1ff7e6c4b7030b1470a58a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4226f14cbb1ecfbc7c1ff7e6c4b7030b1470a58a", "html_url": "https://github.com/rust-lang/rust/commit/4226f14cbb1ecfbc7c1ff7e6c4b7030b1470a58a"}, {"sha": "7ddafaf6f95370935be339af71974da34752f1b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ddafaf6f95370935be339af71974da34752f1b5", "html_url": "https://github.com/rust-lang/rust/commit/7ddafaf6f95370935be339af71974da34752f1b5"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "1758d0b0bb947781bcef87b8afa132918f53a351", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b16d4bd000a3ca216092f85968b753e3363a50/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b16d4bd000a3ca216092f85968b753e3363a50/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=94b16d4bd000a3ca216092f85968b753e3363a50", "patch": "@@ -226,7 +226,7 @@ impl<'a> Parser<'a> {\n \n     fn parse_unsuffixed_lit(&mut self) -> PResult<'a, ast::Lit> {\n         let lit = self.parse_lit()?;\n-        debug!(\"Checking if {:?} is unusuffixed.\", lit);\n+        debug!(\"checking if {:?} is unusuffixed\", lit);\n \n         if !lit.node.is_unsuffixed() {\n             let msg = \"suffixed literals are not allowed in attributes\";"}, {"sha": "0e88a0ee289378ff3353d269a3d014c65f2ec897", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b16d4bd000a3ca216092f85968b753e3363a50/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b16d4bd000a3ca216092f85968b753e3363a50/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=94b16d4bd000a3ca216092f85968b753e3363a50", "patch": "@@ -919,7 +919,7 @@ impl<'a> Parser<'a> {\n                     Applicability::MaybeIncorrect,\n                 );\n             } else {\n-                err.note(\"#![feature(type_ascription)] lets you annotate an \\\n+                err.note(\"`#![feature(type_ascription)]` lets you annotate an \\\n                           expression with a type: `<expr>: <type>`\")\n                     .span_note(\n                         lhs_span,"}, {"sha": "7be8e57c7f87fdaa7fb536e9601846b902489cad", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b16d4bd000a3ca216092f85968b753e3363a50/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b16d4bd000a3ca216092f85968b753e3363a50/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=94b16d4bd000a3ca216092f85968b753e3363a50", "patch": "@@ -443,7 +443,7 @@ impl<'a> StringReader<'a> {\n \n                 let is_beginning_of_file = self.pos == self.source_file.start_pos;\n                 if is_beginning_of_file {\n-                    debug!(\"Skipping a shebang\");\n+                    debug!(\"skipping a shebang\");\n                     let start = self.pos;\n                     while !self.ch_is('\\n') && !self.is_eof() {\n                         self.bump();"}, {"sha": "4f0dc0a48876507581ba75d6a65186fb6d590477", "filename": "src/test/ui/issues/issue-22644.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b16d4bd000a3ca216092f85968b753e3363a50/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94b16d4bd000a3ca216092f85968b753e3363a50/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr?ref=94b16d4bd000a3ca216092f85968b753e3363a50", "patch": "@@ -89,7 +89,7 @@ error: expected type, found `4`\n LL |     println!(\"{}\", a: &mut 4);\n    |                            ^ expecting a type here because of type ascription\n    |\n-   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/issue-22644.rs:34:20\n    |"}, {"sha": "0218a7abeaa4c8a4e6a39a433ac1fdc6f56aa646", "filename": "src/test/ui/issues/issue-34255-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b16d4bd000a3ca216092f85968b753e3363a50/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94b16d4bd000a3ca216092f85968b753e3363a50/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr?ref=94b16d4bd000a3ca216092f85968b753e3363a50", "patch": "@@ -4,7 +4,7 @@ error: expected type, found `42`\n LL |     Test::Drill(field: 42);\n    |                        ^^ expecting a type here because of type ascription\n    |\n-   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/issue-34255-1.rs:8:17\n    |"}, {"sha": "84e4c87ebc4daa215f691aeb408debbc5188d2e8", "filename": "src/test/ui/lifetime_starts_expressions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b16d4bd000a3ca216092f85968b753e3363a50/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94b16d4bd000a3ca216092f85968b753e3363a50/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr?ref=94b16d4bd000a3ca216092f85968b753e3363a50", "patch": "@@ -14,7 +14,7 @@ error: expected type, found keyword `loop`\n LL |     loop { break 'label: loop { break 'label 42; }; }\n    |                          ^^^^ expecting a type here because of type ascription\n    |\n-   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/lifetime_starts_expressions.rs:6:12\n    |"}, {"sha": "d525bd3f4c6e5fee5e26c4b8466c158d3f282cfa", "filename": "src/test/ui/parser/recover-from-bad-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b16d4bd000a3ca216092f85968b753e3363a50/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94b16d4bd000a3ca216092f85968b753e3363a50/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr?ref=94b16d4bd000a3ca216092f85968b753e3363a50", "patch": "@@ -4,7 +4,7 @@ error: expected type, found `3`\n LL |     let x = Enum::Foo(a: 3, b: 4);\n    |                          ^ expecting a type here because of type ascription\n    |\n-   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/recover-from-bad-variant.rs:7:23\n    |"}, {"sha": "1f8989db81412856a61c3e4a9c45ee12ccfb085f", "filename": "src/test/ui/type/type-ascription-instead-of-statement-end.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b16d4bd000a3ca216092f85968b753e3363a50/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94b16d4bd000a3ca216092f85968b753e3363a50/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr?ref=94b16d4bd000a3ca216092f85968b753e3363a50", "patch": "@@ -12,7 +12,7 @@ error: expected type, found `0`\n LL |     println!(\"test\"): 0;\n    |                       ^ expecting a type here because of type ascription\n    |\n-   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/type-ascription-instead-of-statement-end.rs:9:5\n    |"}]}