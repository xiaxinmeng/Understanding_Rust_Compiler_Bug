{"sha": "98dd376f9c3b2eb4a351d836bcb0be03686dcf97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZGQzNzZmOWMzYjJlYjRhMzUxZDgzNmJjYjBiZTAzNjg2ZGNmOTc=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-01T17:53:32Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-01T20:35:50Z"}, "message": "fallout when bootstrapping `rustc`.", "tree": {"sha": "2f9a265b72aa673e5aff57f57c029364b0531d34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f9a265b72aa673e5aff57f57c029364b0531d34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98dd376f9c3b2eb4a351d836bcb0be03686dcf97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98dd376f9c3b2eb4a351d836bcb0be03686dcf97", "html_url": "https://github.com/rust-lang/rust/commit/98dd376f9c3b2eb4a351d836bcb0be03686dcf97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98dd376f9c3b2eb4a351d836bcb0be03686dcf97/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3225b04c7d335b8f6e224c7d90ab95717ed84cc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3225b04c7d335b8f6e224c7d90ab95717ed84cc3", "html_url": "https://github.com/rust-lang/rust/commit/3225b04c7d335b8f6e224c7d90ab95717ed84cc3"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "214ea163232e7d1bee7495fa5eac261cc34f9876", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/98dd376f9c3b2eb4a351d836bcb0be03686dcf97/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98dd376f9c3b2eb4a351d836bcb0be03686dcf97/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=98dd376f9c3b2eb4a351d836bcb0be03686dcf97", "patch": "@@ -23,6 +23,7 @@ use middle::astconv_util::ast_ty_to_prim_ty;\n \n use syntax::ast::{self, Expr};\n use syntax::codemap::Span;\n+use syntax::feature_gate;\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n use syntax::{ast_map, ast_util, codemap};\n@@ -594,7 +595,16 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n         match try!(eval_const_expr_partial(tcx, &**inner, ety)) {\n           const_float(f) => const_float(-f),\n           const_int(n) =>  try!(const_int_checked_neg(n, e, expr_int_type)),\n-          const_uint(n) => try!(const_uint_checked_neg(n, e, expr_uint_type)),\n+          const_uint(i) => {\n+              if !tcx.sess.features.borrow().negate_unsigned {\n+                  feature_gate::emit_feature_err(\n+                      &tcx.sess.parse_sess.span_diagnostic,\n+                      \"negate_unsigned\",\n+                      e.span,\n+                      \"unary negation of unsigned integers may be removed in the future\");\n+              }\n+              const_uint(n) => try!(const_uint_checked_neg(n, e, expr_uint_type)),\n+          }\n           const_str(_) => signal!(e, NegateOnString),\n           const_bool(_) => signal!(e, NegateOnBoolean),\n           const_binary(_) => signal!(e, NegateOnBinary),"}, {"sha": "cc22f8ff809ef0b1fc1e4ee3aef2c9468fa50788", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98dd376f9c3b2eb4a351d836bcb0be03686dcf97/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98dd376f9c3b2eb4a351d836bcb0be03686dcf97/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=98dd376f9c3b2eb4a351d836bcb0be03686dcf97", "patch": "@@ -116,7 +116,7 @@ pub struct TypeLimits {\n impl TypeLimits {\n     pub fn new() -> TypeLimits {\n         TypeLimits {\n-            negated_expr_id: -1,\n+            negated_expr_id: !0,\n         }\n     }\n }"}, {"sha": "fd1fff308dfe3a543252305d73c4a9e427c3b326", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98dd376f9c3b2eb4a351d836bcb0be03686dcf97/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98dd376f9c3b2eb4a351d836bcb0be03686dcf97/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=98dd376f9c3b2eb4a351d836bcb0be03686dcf97", "patch": "@@ -830,7 +830,7 @@ fn load_discr(bcx: Block, ity: IntType, ptr: ValueRef, min: Disr, max: Disr)\n     let bits = machine::llbitsize_of_real(bcx.ccx(), llty);\n     assert!(bits <= 64);\n     let  bits = bits as usize;\n-    let mask = (-1u64 >> (64 - bits)) as Disr;\n+    let mask = (!0u64 >> (64 - bits)) as Disr;\n     // For a (max) discr of -1, max will be `-1 as usize`, which overflows.\n     // However, that is fine here (it would still represent the full range),\n     if (max.wrapping_add(1)) & mask == min & mask {"}, {"sha": "51db1430ae250d7b5b4aa397a130a1c70ced9071", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98dd376f9c3b2eb4a351d836bcb0be03686dcf97/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98dd376f9c3b2eb4a351d836bcb0be03686dcf97/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=98dd376f9c3b2eb4a351d836bcb0be03686dcf97", "patch": "@@ -868,7 +868,7 @@ pub fn fail_if_zero_or_overflows<'blk, 'tcx>(\n             _ => unreachable!(),\n         };\n         let minus_one = ICmp(bcx, llvm::IntEQ, rhs,\n-                             C_integral(llty, -1, false), debug_loc);\n+                             C_integral(llty, !0, false), debug_loc);\n         with_cond(bcx, minus_one, |bcx| {\n             let is_min = ICmp(bcx, llvm::IntEQ, lhs,\n                               C_integral(llty, min, true), debug_loc);\n@@ -1388,7 +1388,7 @@ pub fn new_fn_ctxt<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n     common::validate_substs(param_substs);\n \n     debug!(\"new_fn_ctxt(path={}, id={}, param_substs={})\",\n-           if id == -1 {\n+           if id == !0 {\n                \"\".to_string()\n            } else {\n                ccx.tcx().map.path_to_string(id).to_string()"}, {"sha": "8919a386a45fb0ac1182174d8dbc65301f9f0318", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98dd376f9c3b2eb4a351d836bcb0be03686dcf97/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98dd376f9c3b2eb4a351d836bcb0be03686dcf97/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=98dd376f9c3b2eb4a351d836bcb0be03686dcf97", "patch": "@@ -459,7 +459,7 @@ impl<'tcx> LocalCrateContext<'tcx> {\n         CrateContext {\n             shared: shared,\n             local: self,\n-            index: -1 as usize,\n+            index: !0 as usize,\n         }\n     }\n }"}, {"sha": "40390765dde84b54b5addb290961af2fce61cb32", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98dd376f9c3b2eb4a351d836bcb0be03686dcf97/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98dd376f9c3b2eb4a351d836bcb0be03686dcf97/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=98dd376f9c3b2eb4a351d836bcb0be03686dcf97", "patch": "@@ -388,7 +388,7 @@ pub const CRATE_NODE_ID: NodeId = 0;\n /// When parsing and doing expansions, we initially give all AST nodes this AST\n /// node value. Then later, in the renumber pass, we renumber them to have\n /// small, positive ids.\n-pub const DUMMY_NODE_ID: NodeId = -1;\n+pub const DUMMY_NODE_ID: NodeId = !0;\n \n /// The AST represents all type param bounds as types.\n /// typeck::collect::compute_bounds matches these against"}, {"sha": "c2f2c51ed2cff67a362564f58df20e89011e730c", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98dd376f9c3b2eb4a351d836bcb0be03686dcf97/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98dd376f9c3b2eb4a351d836bcb0be03686dcf97/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=98dd376f9c3b2eb4a351d836bcb0be03686dcf97", "patch": "@@ -278,9 +278,9 @@ pub struct ExpnInfo {\n #[derive(PartialEq, Eq, Clone, Debug, Hash, RustcEncodable, RustcDecodable, Copy)]\n pub struct ExpnId(u32);\n \n-pub const NO_EXPANSION: ExpnId = ExpnId(-1);\n+pub const NO_EXPANSION: ExpnId = ExpnId(!0);\n // For code appearing from the command line\n-pub const COMMAND_LINE_EXPN: ExpnId = ExpnId(-2);\n+pub const COMMAND_LINE_EXPN: ExpnId = ExpnId(!1);\n \n impl ExpnId {\n     pub fn from_llvm_cookie(cookie: c_uint) -> ExpnId {"}]}