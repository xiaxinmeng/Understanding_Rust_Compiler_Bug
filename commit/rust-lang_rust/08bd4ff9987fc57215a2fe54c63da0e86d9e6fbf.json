{"sha": "08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YmQ0ZmY5OTg3ZmM1NzIxNWEyZmU1NGM2M2RhMGU4NmQ5ZTZmYmY=", "commit": {"author": {"name": "Dan Robertson", "email": "dan@dlrobertson.com", "date": "2019-02-08T17:30:42Z"}, "committer": {"name": "Dan Robertson", "email": "dan@dlrobertson.com", "date": "2019-02-27T15:21:54Z"}, "message": "Rename variadic to c_variadic\n\nFunction signatures with the `variadic` member set are actually\nC-variadic functions. Make this a little more explicit by renaming the\n`variadic` boolean value, `c_variadic`.", "tree": {"sha": "35f5410433d1af5e6eff929cc4c1750dc43c9595", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35f5410433d1af5e6eff929cc4c1750dc43c9595"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEkZ4/WpQ0/P8yWDLRTebu+Etcl4MFAlx2qxQACgkQTebu+Etc\nl4NKfA/+LciruJWuZLC64bi3pI0+HHmXO6hrtsyd89S4YrloC2GPjto6WX0oQugB\nO/YBoi3xt/J7hdIwggGXCgKYY53+3J/8u7tyOTdBXQ7yQjD/e8M/L5Ayf5tR5G7A\nHNZNRdXtcKNOjVeSCpOwhI0DI8EiJ01uEu3ucgbWhEynMVhqTNVfNm3CchWBchpy\nfwvGD3F8KAScWX0KZOpumV0wUvsE1uxHrlgXCknplkYIaT8K3sA//+HL9U/B9RPS\n/5e60RXTbBJpth8HnUAXz9GdSxrIlqIthcxSEyiuthezl0WXGdJOgzO5EsC/CWKj\niLT+bHHpPszprjoAfjWXl9uTkuy9EFzdLH1wbgzStBbhiA+xwQ3pOenyxV8m7ipG\nOFVsz0bwepfU9R4CZ3W0LWfsnnaQo9buH2kGHu8yntGKdr1QfKIU2G+vkJ7Nonhi\nukWhaNV9Ea8zHK7R8LDe0OwHAyjVzgUalxswlW5TNyamqs2RRlu2jVku8Q99GMkk\nUaTTcpsUaP76RYQQWe5SRPLrSqH/XTr/PV12a6j/w3USgAFolVYKzWGPweqM0ZBV\nmnPQNE+IbajI586+Ntng+JprdOU+4Qwg3j42PRRSjh8SWVzMjJOeRnhajLE6McnX\n1UptXanQSvxrudVqCR8HwqBfZRwz/Ha4u3NBruB3ow0pA8ENxNo=\n=n5ea\n-----END PGP SIGNATURE-----", "payload": "tree 35f5410433d1af5e6eff929cc4c1750dc43c9595\nparent a618ad6335f7cb70005884542f0548ef29f23b7e\nauthor Dan Robertson <dan@dlrobertson.com> 1549647042 +0000\ncommitter Dan Robertson <dan@dlrobertson.com> 1551280914 -0500\n\nRename variadic to c_variadic\n\nFunction signatures with the `variadic` member set are actually\nC-variadic functions. Make this a little more explicit by renaming the\n`variadic` boolean value, `c_variadic`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "html_url": "https://github.com/rust-lang/rust/commit/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/comments", "author": {"login": "dlrobertson", "id": 7504153, "node_id": "MDQ6VXNlcjc1MDQxNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/7504153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlrobertson", "html_url": "https://github.com/dlrobertson", "followers_url": "https://api.github.com/users/dlrobertson/followers", "following_url": "https://api.github.com/users/dlrobertson/following{/other_user}", "gists_url": "https://api.github.com/users/dlrobertson/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlrobertson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlrobertson/subscriptions", "organizations_url": "https://api.github.com/users/dlrobertson/orgs", "repos_url": "https://api.github.com/users/dlrobertson/repos", "events_url": "https://api.github.com/users/dlrobertson/events{/privacy}", "received_events_url": "https://api.github.com/users/dlrobertson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dlrobertson", "id": 7504153, "node_id": "MDQ6VXNlcjc1MDQxNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/7504153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlrobertson", "html_url": "https://github.com/dlrobertson", "followers_url": "https://api.github.com/users/dlrobertson/followers", "following_url": "https://api.github.com/users/dlrobertson/following{/other_user}", "gists_url": "https://api.github.com/users/dlrobertson/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlrobertson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlrobertson/subscriptions", "organizations_url": "https://api.github.com/users/dlrobertson/orgs", "repos_url": "https://api.github.com/users/dlrobertson/repos", "events_url": "https://api.github.com/users/dlrobertson/events{/privacy}", "received_events_url": "https://api.github.com/users/dlrobertson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a618ad6335f7cb70005884542f0548ef29f23b7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a618ad6335f7cb70005884542f0548ef29f23b7e", "html_url": "https://github.com/rust-lang/rust/commit/a618ad6335f7cb70005884542f0548ef29f23b7e"}], "stats": {"total": 238, "additions": 119, "deletions": 119}, "files": [{"sha": "6e96054bea9b96ccb4d2d7bab227e275ad78e137", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -954,7 +954,7 @@ impl<'a> LoweringContext<'a> {\n         let decl = FnDecl {\n             inputs: vec![],\n             output,\n-            variadic: false\n+            c_variadic: false\n         };\n         let body_id = self.record_body(body_expr, Some(&decl));\n         self.is_generator = prev_is_generator;\n@@ -2118,7 +2118,7 @@ impl<'a> LoweringContext<'a> {\n         P(hir::FnDecl {\n             inputs,\n             output,\n-            variadic: decl.variadic,\n+            c_variadic: decl.c_variadic,\n             implicit_self: decl.inputs.get(0).map_or(\n                 hir::ImplicitSelfKind::None,\n                 |arg| {\n@@ -3973,7 +3973,7 @@ impl<'a> LoweringContext<'a> {\n                     let outer_decl = FnDecl {\n                         inputs: decl.inputs.clone(),\n                         output: FunctionRetTy::Default(fn_decl_span),\n-                        variadic: false,\n+                        c_variadic: false,\n                     };\n                     // We need to lower the declaration outside the new scope, because we\n                     // have to conserve the state of being inside a loop condition for the"}, {"sha": "d8169d05dd4d0df0ac64ca3291567b7d11eb1193", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -1868,7 +1868,7 @@ pub struct Arg {\n pub struct FnDecl {\n     pub inputs: HirVec<Ty>,\n     pub output: FunctionRetTy,\n-    pub variadic: bool,\n+    pub c_variadic: bool,\n     /// Does the function have an implicit self?\n     pub implicit_self: ImplicitSelfKind,\n }"}, {"sha": "dab4b9c824d9a9389ea8fec78ccaaca87f6a50f1", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -2007,7 +2007,7 @@ impl<'a> State<'a> {\n             s.print_type(ty)?;\n             s.end()\n         })?;\n-        if decl.variadic {\n+        if decl.c_variadic {\n             self.s.word(\", ...\")?;\n         }\n         self.pclose()?;"}, {"sha": "775822786900a9d39d0bdaff718544fe37d2c86e", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -368,7 +368,7 @@ impl_stable_hash_for!(enum hir::TyKind {\n impl_stable_hash_for!(struct hir::FnDecl {\n     inputs,\n     output,\n-    variadic,\n+    c_variadic,\n     implicit_self\n });\n "}, {"sha": "f77a88128f252ef36deb2a9665d78a087547da56", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -232,7 +232,7 @@ impl_stable_hash_for!(struct ty::GenSig<'tcx> {\n \n impl_stable_hash_for!(struct ty::FnSig<'tcx> {\n     inputs_and_output,\n-    variadic,\n+    c_variadic,\n     unsafety,\n     abi\n });"}, {"sha": "e7cc9618080c2689f0196b84364dfcc4126612ec", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -1944,7 +1944,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 if let ty::FnSig {\n                     unsafety: hir::Unsafety::Normal,\n                     abi: Abi::Rust,\n-                    variadic: false,\n+                    c_variadic: false,\n                     ..\n                 } = self_ty.fn_sig(self.tcx()).skip_binder()\n                 {"}, {"sha": "9767396147cf911c098185dfbbf12f3409fc5285", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -2453,7 +2453,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             self.mk_fn_sig(\n                 params_iter,\n                 s.output(),\n-                s.variadic,\n+                s.c_variadic,\n                 hir::Unsafety::Normal,\n                 abi::Abi::Rust,\n             )\n@@ -2779,7 +2779,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn mk_fn_sig<I>(self,\n                         inputs: I,\n                         output: I::Item,\n-                        variadic: bool,\n+                        c_variadic: bool,\n                         unsafety: hir::Unsafety,\n                         abi: abi::Abi)\n         -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output\n@@ -2788,7 +2788,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     {\n         inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {\n             inputs_and_output: self.intern_type_list(xs),\n-            variadic, unsafety, abi\n+            c_variadic, unsafety, abi\n         })\n     }\n "}, {"sha": "49ebd202813f636b7518493d91a746b15eae453c", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -65,7 +65,7 @@ impl<'a, 'tcx> Instance<'tcx> {\n                 sig.map_bound(|sig| tcx.mk_fn_sig(\n                     iter::once(*env_ty.skip_binder()).chain(sig.inputs().iter().cloned()),\n                     sig.output(),\n-                    sig.variadic,\n+                    sig.c_variadic,\n                     sig.unsafety,\n                     sig.abi\n                 ))"}, {"sha": "2940757fa905be45e68db9baa12418123ca595c8", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -147,9 +147,9 @@ impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {\n     {\n         let tcx = relation.tcx();\n \n-        if a.variadic != b.variadic {\n+        if a.c_variadic != b.c_variadic {\n             return Err(TypeError::VariadicMismatch(\n-                expected_found(relation, &a.variadic, &b.variadic)));\n+                expected_found(relation, &a.c_variadic, &b.c_variadic)));\n         }\n         let unsafety = relation.relate(&a.unsafety, &b.unsafety)?;\n         let abi = relation.relate(&a.abi, &b.abi)?;\n@@ -171,7 +171,7 @@ impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {\n             });\n         Ok(ty::FnSig {\n             inputs_and_output: tcx.mk_type_list(inputs_and_output)?,\n-            variadic: a.variadic,\n+            c_variadic: a.c_variadic,\n             unsafety,\n             abi,\n         })"}, {"sha": "f1a465e1f1724b384b1c7df0dbe0671a73965f9b", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -396,7 +396,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::FnSig<'a> {\n         tcx.lift(&self.inputs_and_output).map(|x| {\n             ty::FnSig {\n                 inputs_and_output: x,\n-                variadic: self.variadic,\n+                c_variadic: self.c_variadic,\n                 unsafety: self.unsafety,\n                 abi: self.abi,\n             }\n@@ -832,7 +832,7 @@ BraceStructTypeFoldableImpl! {\n \n BraceStructTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for ty::FnSig<'tcx> {\n-        inputs_and_output, variadic, unsafety, abi\n+        inputs_and_output, c_variadic, unsafety, abi\n     }\n }\n "}, {"sha": "3fd2e38a3d3e51cd10baca00a68b8bd20bbf766c", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -979,11 +979,11 @@ impl<'tcx> PolyGenSig<'tcx> {\n ///\n /// - `inputs`: is the list of arguments and their modes.\n /// - `output`: is the return type.\n-/// - `variadic`: indicates whether this is a C-variadic function.\n+/// - `c_variadic`: indicates whether this is a C-variadic function.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub struct FnSig<'tcx> {\n     pub inputs_and_output: &'tcx List<Ty<'tcx>>,\n-    pub variadic: bool,\n+    pub c_variadic: bool,\n     pub unsafety: hir::Unsafety,\n     pub abi: abi::Abi,\n }\n@@ -1016,8 +1016,8 @@ impl<'tcx> PolyFnSig<'tcx> {\n     pub fn output(&self) -> ty::Binder<Ty<'tcx>> {\n         self.map_bound_ref(|fn_sig| fn_sig.output())\n     }\n-    pub fn variadic(&self) -> bool {\n-        self.skip_binder().variadic\n+    pub fn c_variadic(&self) -> bool {\n+        self.skip_binder().c_variadic\n     }\n     pub fn unsafety(&self) -> hir::Unsafety {\n         self.skip_binder().unsafety"}, {"sha": "aecef3c5ec71e4d5439efd1718065508b0e1c1d2", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -360,7 +360,7 @@ impl PrintContext {\n     fn fn_sig<F: fmt::Write>(&mut self,\n                              f: &mut F,\n                              inputs: &[Ty<'_>],\n-                             variadic: bool,\n+                             c_variadic: bool,\n                              output: Ty<'_>)\n                              -> fmt::Result {\n         write!(f, \"(\")?;\n@@ -370,7 +370,7 @@ impl PrintContext {\n             for &ty in inputs {\n                 print!(f, self, write(\", \"), print_display(ty))?;\n             }\n-            if variadic {\n+            if c_variadic {\n                 write!(f, \", ...\")?;\n             }\n         }\n@@ -1074,10 +1074,10 @@ define_print! {\n             }\n \n             write!(f, \"fn\")?;\n-            cx.fn_sig(f, self.inputs(), self.variadic, self.output())\n+            cx.fn_sig(f, self.inputs(), self.c_variadic, self.output())\n         }\n         debug {\n-            write!(f, \"({:?}; variadic: {})->{:?}\", self.inputs(), self.variadic, self.output())\n+            write!(f, \"({:?}; c_variadic: {})->{:?}\", self.inputs(), self.c_variadic, self.output())\n         }\n     }\n }"}, {"sha": "49c9555a2c682d74f642016699c9e4116940b953", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -422,7 +422,7 @@ impl<'tcx> FnTypeExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n \n         let mut inputs = sig.inputs();\n         let extra_args = if sig.abi == RustCall {\n-            assert!(!sig.variadic && extra_args.is_empty());\n+            assert!(!sig.c_variadic && extra_args.is_empty());\n \n             match sig.inputs().last().unwrap().sty {\n                 ty::Tuple(ref tupled_arguments) => {\n@@ -435,7 +435,7 @@ impl<'tcx> FnTypeExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n                 }\n             }\n         } else {\n-            assert!(sig.variadic || extra_args.is_empty());\n+            assert!(sig.c_variadic || extra_args.is_empty());\n             extra_args\n         };\n \n@@ -531,7 +531,7 @@ impl<'tcx> FnTypeExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n             // If this is a C-variadic function, this is not the return value,\n             // and there is one or more fixed arguments; ensure that the `VaList`\n             // is ignored as an argument.\n-            if sig.variadic {\n+            if sig.c_variadic {\n                 match (last_arg_idx, arg_idx) {\n                     (Some(last_idx), Some(cur_idx)) if last_idx == cur_idx => {\n                         let va_list_did = match cx.tcx.lang_items().va_list() {\n@@ -589,7 +589,7 @@ impl<'tcx> FnTypeExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n             args: inputs.iter().chain(extra_args).enumerate().map(|(i, ty)| {\n                 arg_of(ty, Some(i))\n             }).collect(),\n-            variadic: sig.variadic,\n+            c_variadic: sig.c_variadic,\n             conv,\n         };\n         fn_ty.adjust_for_abi(cx, sig.abi);\n@@ -717,7 +717,7 @@ impl<'tcx> FnTypeExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n             llargument_tys.push(llarg_ty);\n         }\n \n-        if self.variadic {\n+        if self.c_variadic {\n             cx.type_variadic_func(&llargument_tys, llreturn_ty)\n         } else {\n             cx.type_func(&llargument_tys, llreturn_ty)"}, {"sha": "8b218ab39d99b520d60a3faa078b6d05d736d6ff", "filename": "src/librustc_codegen_llvm/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -143,7 +143,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                 output.pop();\n             }\n \n-            if sig.variadic {\n+            if sig.c_variadic {\n                 if !sig.inputs().is_empty() {\n                     output.push_str(\", ...\");\n                 } else {"}, {"sha": "627380ee38ff14d6bd16b99ab41bd79635c13c71", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -232,7 +232,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         &mut self,\n         mut bx: Bx,\n     ) {\n-        if self.fn_ty.variadic {\n+        if self.fn_ty.c_variadic {\n             if let Some(va_list) = self.va_list_ref {\n                 bx.va_end(va_list.llval);\n             }\n@@ -507,7 +507,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         // The \"spoofed\" `VaList` added to a C-variadic functions signature\n         // should not be included in the `extra_args` calculation.\n-        let extra_args_start_idx = sig.inputs().len() - if sig.variadic { 1 } else { 0 };\n+        let extra_args_start_idx = sig.inputs().len() - if sig.c_variadic { 1 } else { 0 };\n         let extra_args = &args[extra_args_start_idx..];\n         let extra_args = extra_args.iter().map(|op_arg| {\n             let op_ty = op_arg.ty(self.mir, bx.tcx());\n@@ -695,7 +695,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             // an \"spoofed\" `VaList`. This argument is ignored, but we need to\n             // populate it with a dummy operand so that the users real arguments\n             // are not overwritten.\n-            let i = if sig.variadic && last_arg_idx.map(|x| x == i).unwrap_or(false) {\n+            let i = if sig.c_variadic && last_arg_idx.map(|x| x == i).unwrap_or(false) {\n                 let layout = match self.cx.tcx().lang_items().va_list() {\n                     Some(did) => bx.cx().layout_of(bx.tcx().type_of(did)),\n                     None => bug!(\"`va_list` language item required for C-variadics\"),"}, {"sha": "dc77d4673cd2a3594b3e9d4865925eb04a3dc7c4", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -585,7 +585,7 @@ fn arg_local_refs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n             indirect_operand.store(bx, tmp);\n             tmp\n         } else {\n-            if fx.fn_ty.variadic && last_arg_idx.map(|idx| arg_index == idx).unwrap_or(false) {\n+            if fx.fn_ty.c_variadic && last_arg_idx.map(|idx| arg_index == idx).unwrap_or(false) {\n                 let va_list_impl = match arg_decl.ty.ty_adt_def() {\n                     Some(adt) => adt.non_enum_variant(),\n                     None => bug!(\"`va_list` language item improperly constructed\")"}, {"sha": "35489ab42e73038c056cea9f25597d1903155bca", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -766,7 +766,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         let def_id = self.cx.tcx.hir().local_def_id(id);\n         let sig = self.cx.tcx.fn_sig(def_id);\n         let sig = self.cx.tcx.erase_late_bound_regions(&sig);\n-        let inputs = if sig.variadic {\n+        let inputs = if sig.c_variadic {\n             // Don't include the spoofed `VaList` in the functions list\n             // of inputs.\n             &sig.inputs()[..sig.inputs().len() - 1]"}, {"sha": "df035aab54c9cdb042b7e04268e67b11615c9678", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -1604,12 +1604,12 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         debug!(\"check_call_inputs({:?}, {:?})\", sig, args);\n         // Do not count the `VaList` argument as a \"true\" argument to\n         // a C-variadic function.\n-        let inputs = if sig.variadic {\n+        let inputs = if sig.c_variadic {\n             &sig.inputs()[..sig.inputs().len() - 1]\n         } else {\n             &sig.inputs()[..]\n         };\n-        if args.len() < inputs.len() || (args.len() > inputs.len() && !sig.variadic) {\n+        if args.len() < inputs.len() || (args.len() > inputs.len() && !sig.c_variadic) {\n             span_mirbug!(self, term, \"call to {:?} with wrong # of args\", sig);\n         }\n         for (n, (fn_arg, op_arg)) in inputs.iter().zip(args).enumerate() {"}, {"sha": "059af2dbba944710f23d5e815e6c3d451acf35c8", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -353,7 +353,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                     output.pop();\n                 }\n \n-                if sig.variadic {\n+                if sig.c_variadic {\n                     if !sig.inputs().is_empty() {\n                         output.push_str(\", ...\");\n                     } else {"}, {"sha": "e3fee8e5700c196bb62e68d420a0b481e3fa7fd8", "filename": "src/librustc_target/abi/call/arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -99,7 +99,7 @@ pub fn compute_abi_info<'a, Ty, C>(cx: &C, fty: &mut FnType<'a, Ty>)\n     // `extern \"aapcs\"`, then we must use the VFP registers for homogeneous aggregates.\n     let vfp = cx.target_spec().llvm_target.ends_with(\"hf\")\n         && fty.conv != Conv::ArmAapcs\n-        && !fty.variadic;\n+        && !fty.c_variadic;\n \n     if !fty.ret.is_ignore() {\n         classify_ret_ty(cx, &mut fty.ret, vfp);"}, {"sha": "fbbd120f934be845fc21ac5e5a5c2245699cdc59", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -531,7 +531,7 @@ pub struct FnType<'a, Ty> {\n     /// LLVM return type.\n     pub ret: ArgType<'a, Ty>,\n \n-    pub variadic: bool,\n+    pub c_variadic: bool,\n \n     pub conv: Conv,\n }"}, {"sha": "3f88d0e08b46ae29eb286880dcdb5935fbe80df2", "filename": "src/librustc_traits/chalk_context/program_clauses.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -105,7 +105,7 @@ fn assemble_builtin_sized_impls<'tcx>(\n             let fn_ptr = generic_types::fn_ptr(\n                 tcx,\n                 fn_ptr.inputs_and_output.len(),\n-                fn_ptr.variadic,\n+                fn_ptr.c_variadic,\n                 fn_ptr.unsafety,\n                 fn_ptr.abi\n             );\n@@ -190,11 +190,11 @@ fn wf_clause_for_raw_ptr<'tcx>(\n fn wf_clause_for_fn_ptr<'tcx>(\n     tcx: ty::TyCtxt<'_, '_, 'tcx>,\n     arity_and_output: usize,\n-    variadic: bool,\n+    c_variadic: bool,\n     unsafety: hir::Unsafety,\n     abi: abi::Abi\n ) -> Clauses<'tcx> {\n-    let fn_ptr = generic_types::fn_ptr(tcx, arity_and_output, variadic, unsafety, abi);\n+    let fn_ptr = generic_types::fn_ptr(tcx, arity_and_output, c_variadic, unsafety, abi);\n \n     let wf_clause = ProgramClause {\n         goal: DomainGoal::WellFormed(WellFormed::Ty(fn_ptr)),\n@@ -503,7 +503,7 @@ impl ChalkInferenceContext<'cx, 'gcx, 'tcx> {\n                         wf_clause_for_fn_ptr(\n                             self.infcx.tcx,\n                             fn_ptr.inputs_and_output.len(),\n-                            fn_ptr.variadic,\n+                            fn_ptr.c_variadic,\n                             fn_ptr.unsafety,\n                             fn_ptr.abi\n                         )"}, {"sha": "f2ce9631f35aba590620b862ac87efc73c397523", "filename": "src/librustc_traits/generic_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_traits%2Fgeneric_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_traits%2Fgeneric_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fgeneric_types.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -24,7 +24,7 @@ crate fn raw_ptr(tcx: TyCtxt<'_, '_, 'tcx>, mutbl: hir::Mutability) -> Ty<'tcx>\n crate fn fn_ptr(\n     tcx: ty::TyCtxt<'_, '_, 'tcx>,\n     arity_and_output: usize,\n-    variadic: bool,\n+    c_variadic: bool,\n     unsafety: hir::Unsafety,\n     abi: abi::Abi\n ) -> Ty<'tcx> {\n@@ -37,7 +37,7 @@ crate fn fn_ptr(\n \n     let fn_sig = ty::Binder::bind(ty::FnSig {\n         inputs_and_output,\n-        variadic,\n+        c_variadic,\n         unsafety,\n         abi,\n     });"}, {"sha": "b3694752204ca51c3294478f95694a2ee33da2c1", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -18,7 +18,7 @@ use rustc::ty::subst::{Kind, Subst, InternalSubsts, SubstsRef};\n use rustc::ty::wf::object_region_bounds;\n use rustc_data_structures::sync::Lrc;\n use rustc_target::spec::abi;\n-use crate::require_c_abi_if_variadic;\n+use crate::require_c_abi_if_c_variadic;\n use smallvec::SmallVec;\n use syntax::ast;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n@@ -1768,7 +1768,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 tcx.mk_tup(fields.iter().map(|t| self.ast_ty_to_ty(&t)))\n             }\n             hir::TyKind::BareFn(ref bf) => {\n-                require_c_abi_if_variadic(tcx, &bf.decl, bf.abi, ast_ty.span);\n+                require_c_abi_if_c_variadic(tcx, &bf.decl, bf.abi, ast_ty.span);\n                 tcx.mk_fn_ptr(self.ty_of_fn(bf.unsafety, bf.abi, &bf.decl))\n             }\n             hir::TyKind::TraitObject(ref bounds, ref lifetime) => {\n@@ -1913,7 +1913,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         let bare_fn_ty = ty::Binder::bind(tcx.mk_fn_sig(\n             input_tys,\n             output_ty,\n-            decl.variadic,\n+            decl.c_variadic,\n             unsafety,\n             abi\n         ));"}, {"sha": "0a4c0eb3aff72c1b25b5a34fb47dee71ec71c67f", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -368,7 +368,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             .0;\n         let fn_sig = self.normalize_associated_types_in(call_expr.span, &fn_sig);\n \n-        let inputs = if fn_sig.variadic {\n+        let inputs = if fn_sig.c_variadic {\n             if fn_sig.inputs().len() > 1 {\n                 &fn_sig.inputs()[..fn_sig.inputs().len() - 1]\n             } else {\n@@ -391,7 +391,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             inputs,\n             &expected_arg_tys[..],\n             arg_exprs,\n-            fn_sig.variadic,\n+            fn_sig.c_variadic,\n             TupleArgumentsFlag::DontTupleArguments,\n             def_span,\n         );\n@@ -424,7 +424,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             fn_sig.inputs(),\n             &expected_arg_tys,\n             arg_exprs,\n-            fn_sig.variadic,\n+            fn_sig.c_variadic,\n             TupleArgumentsFlag::TupleArguments,\n             None,\n         );"}, {"sha": "db89b32be7b68d109acbc19f557bdcb747d495de", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -141,7 +141,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             self.tcx.mk_fn_sig(\n                 iter::once(self.tcx.intern_tup(sig.inputs())),\n                 sig.output(),\n-                sig.variadic,\n+                sig.c_variadic,\n                 sig.unsafety,\n                 sig.abi,\n             )\n@@ -386,7 +386,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // Watch out for some surprises and just ignore the\n         // expectation if things don't see to match up with what we\n         // expect.\n-        if expected_sig.sig.variadic != decl.variadic {\n+        if expected_sig.sig.c_variadic != decl.c_variadic {\n             return self.sig_of_closure_no_expectation(expr_def_id, decl, body);\n         } else if expected_sig.sig.inputs_and_output.len() != decl.inputs.len() + 1 {\n             return self.sig_of_closure_with_mismatched_number_of_arguments(\n@@ -404,7 +404,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let bound_sig = ty::Binder::bind(self.tcx.mk_fn_sig(\n             expected_sig.sig.inputs().iter().cloned(),\n             expected_sig.sig.output(),\n-            decl.variadic,\n+            decl.c_variadic,\n             hir::Unsafety::Normal,\n             Abi::RustCall,\n         ));\n@@ -586,7 +586,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let result = ty::Binder::bind(self.tcx.mk_fn_sig(\n             supplied_arguments,\n             supplied_return,\n-            decl.variadic,\n+            decl.c_variadic,\n             hir::Unsafety::Normal,\n             Abi::RustCall,\n         ));\n@@ -621,7 +621,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let result = ty::Binder::bind(self.tcx.mk_fn_sig(\n             supplied_arguments,\n             self.tcx.types.err,\n-            decl.variadic,\n+            decl.c_variadic,\n             hir::Unsafety::Normal,\n             Abi::RustCall,\n         ));"}, {"sha": "3a430f77b6c64b8373847c0f5224af35d5487250", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -130,7 +130,7 @@ use std::mem::replace;\n use std::ops::{self, Deref};\n use std::slice;\n \n-use crate::require_c_abi_if_variadic;\n+use crate::require_c_abi_if_c_variadic;\n use crate::session::{CompileIncomplete, Session};\n use crate::session::config::EntryFnType;\n use crate::TypeAndSubsts;\n@@ -1072,7 +1072,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n     fn_sig = fcx.tcx.mk_fn_sig(\n         fn_sig.inputs().iter().cloned(),\n         revealed_ret_ty,\n-        fn_sig.variadic,\n+        fn_sig.c_variadic,\n         fn_sig.unsafety,\n         fn_sig.abi\n     );\n@@ -1426,7 +1426,7 @@ pub fn check_item_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, it: &'tcx hir::Ite\n                     }\n \n                     if let hir::ForeignItemKind::Fn(ref fn_decl, _, _) = item.node {\n-                        require_c_abi_if_variadic(tcx, fn_decl, m.abi, item.span);\n+                        require_c_abi_if_c_variadic(tcx, fn_decl, m.abi, item.span);\n                     }\n                 }\n             }\n@@ -2783,7 +2783,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             &method.sig.inputs()[1..]\n         );\n         self.check_argument_types(sp, expr_sp, &method.sig.inputs()[1..], &expected_arg_tys[..],\n-                                  args_no_rcvr, method.sig.variadic, tuple_arguments,\n+                                  args_no_rcvr, method.sig.c_variadic, tuple_arguments,\n                                   self.tcx.hir().span_if_local(method.def_id));\n         method.sig.output()\n     }\n@@ -2862,7 +2862,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             fn_inputs: &[Ty<'tcx>],\n                             mut expected_arg_tys: &[Ty<'tcx>],\n                             args: &'gcx [hir::Expr],\n-                            variadic: bool,\n+                            c_variadic: bool,\n                             tuple_arguments: TupleArgumentsFlag,\n                             def_span: Option<Span>) {\n         let tcx = self.tcx;\n@@ -2886,11 +2886,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let param_count_error = |expected_count: usize,\n                                  arg_count: usize,\n                                  error_code: &str,\n-                                 variadic: bool,\n+                                 c_variadic: bool,\n                                  sugg_unit: bool| {\n             let mut err = tcx.sess.struct_span_err_with_code(sp,\n                 &format!(\"this function takes {}{} but {} {} supplied\",\n-                    if variadic {\"at least \"} else {\"\"},\n+                    if c_variadic { \"at least \" } else { \"\" },\n                     potentially_plural_count(expected_count, \"parameter\"),\n                     potentially_plural_count(arg_count, \"parameter\"),\n                     if arg_count == 1 {\"was\"} else {\"were\"}),\n@@ -2910,7 +2910,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     Applicability::MachineApplicable);\n             } else {\n                 err.span_label(sp, format!(\"expected {}{}\",\n-                                           if variadic {\"at least \"} else {\"\"},\n+                                           if c_variadic { \"at least \" } else { \"\" },\n                                            potentially_plural_count(expected_count, \"parameter\")));\n             }\n             err.emit();\n@@ -2944,7 +2944,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n         } else if expected_arg_count == supplied_arg_count {\n             fn_inputs.to_vec()\n-        } else if variadic {\n+        } else if c_variadic {\n             if supplied_arg_count >= expected_arg_count {\n                 fn_inputs.to_vec()\n             } else {\n@@ -2991,10 +2991,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 self.select_obligations_where_possible(false);\n             }\n \n-            // For variadic functions, we don't have a declared type for all of\n+            // For C-variadic functions, we don't have a declared type for all of\n             // the arguments hence we only do our usual type checking with\n             // the arguments who's types we do know.\n-            let t = if variadic {\n+            let t = if c_variadic {\n                 expected_arg_count\n             } else if tuple_arguments == TupleArguments {\n                 args.len()\n@@ -3043,7 +3043,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         // We also need to make sure we at least write the ty of the other\n         // arguments which we skipped above.\n-        if variadic {\n+        if c_variadic {\n             fn variadic_error<'tcx>(s: &Session, span: Span, t: Ty<'tcx>, cast_ty: &str) {\n                 use crate::structured_errors::{VariadicError, StructuredDiagnostic};\n                 VariadicError::new(s, span, t, cast_ty).diagnostic().emit();"}, {"sha": "2095c81d0fb0db1893945846097a587ff6551b99", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -136,14 +136,14 @@ fn check_type_alias_enum_variants_enabled<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx,\n     }\n }\n \n-fn require_c_abi_if_variadic(tcx: TyCtxt<'_, '_, '_>,\n-                             decl: &hir::FnDecl,\n-                             abi: Abi,\n-                             span: Span) {\n-    if decl.variadic && !(abi == Abi::C || abi == Abi::Cdecl) {\n+fn require_c_abi_if_c_variadic(tcx: TyCtxt<'_, '_, '_>,\n+                               decl: &hir::FnDecl,\n+                               abi: Abi,\n+                               span: Span) {\n+    if decl.c_variadic && !(abi == Abi::C || abi == Abi::Cdecl) {\n         let mut err = struct_span_err!(tcx.sess, span, E0045,\n-            \"variadic function must have C or cdecl calling convention\");\n-        err.span_label(span, \"variadics require C or cdecl calling convention\").emit();\n+            \"C-variadic function must have C or cdecl calling convention\");\n+        err.span_label(span, \"C-variadics require C or cdecl calling convention\").emit();\n     }\n }\n "}, {"sha": "b4bf6665d4e93043d5f8fd639c254d09ccfc6f5f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -1804,7 +1804,7 @@ impl Arg {\n pub struct FnDecl {\n     pub inputs: Vec<Arg>,\n     pub output: FunctionRetTy,\n-    pub variadic: bool,\n+    pub c_variadic: bool,\n }\n \n impl FnDecl {"}, {"sha": "0bdc7fd60cb1dbb9333afa492ab7a62dd0204f91", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -985,7 +985,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         P(ast::FnDecl {\n             inputs,\n             output,\n-            variadic: false\n+            c_variadic: false\n         })\n     }\n "}, {"sha": "032a0e993ae421e9b9ac76e21eef24559b556cf8", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -673,7 +673,7 @@ pub fn noop_visit_asyncness<T: MutVisitor>(asyncness: &mut IsAsync, vis: &mut T)\n }\n \n pub fn noop_visit_fn_decl<T: MutVisitor>(decl: &mut P<FnDecl>, vis: &mut T) {\n-    let FnDecl { inputs, output, variadic: _ } = decl.deref_mut();\n+    let FnDecl { inputs, output, c_variadic: _ } = decl.deref_mut();\n     visit_vec(inputs, |input| vis.visit_arg(input));\n     match output {\n         FunctionRetTy::Default(span) => vis.visit_span(span),"}, {"sha": "5f3b08bf942c0b0b3ae9cb9b71d54326d80525f6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -1457,12 +1457,12 @@ impl<'a> Parser<'a> {\n         };\n \n         self.expect_keyword(keywords::Fn)?;\n-        let (inputs, variadic) = self.parse_fn_args(false, true)?;\n+        let (inputs, c_variadic) = self.parse_fn_args(false, true)?;\n         let ret_ty = self.parse_ret_ty(false)?;\n         let decl = P(FnDecl {\n             inputs,\n             output: ret_ty,\n-            variadic,\n+            c_variadic,\n         });\n         Ok(TyKind::BareFn(P(BareFnTy {\n             abi,\n@@ -1635,7 +1635,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_ty_common(&mut self, allow_plus: bool, allow_qpath_recovery: bool,\n-                       allow_variadic: bool) -> PResult<'a, P<Ty>> {\n+                       allow_c_variadic: bool) -> PResult<'a, P<Ty>> {\n         maybe_whole!(self, NtTy, |x| x);\n \n         let lo = self.span;\n@@ -1773,12 +1773,12 @@ impl<'a> Parser<'a> {\n                 }\n             }\n         } else if self.check(&token::DotDotDot) {\n-            if allow_variadic {\n+            if allow_c_variadic {\n                 self.eat(&token::DotDotDot);\n                 TyKind::CVarArgs\n             } else {\n                 return Err(self.fatal(\n-                    \"only foreign functions are allowed to be variadic\"\n+                    \"only foreign functions are allowed to be C-variadic\"\n                 ));\n             }\n         } else {\n@@ -1969,7 +1969,7 @@ impl<'a> Parser<'a> {\n \n     /// This version of parse arg doesn't necessarily require identifier names.\n     fn parse_arg_general(&mut self, require_name: bool, is_trait_item: bool,\n-                         allow_variadic: bool) -> PResult<'a, Arg> {\n+                         allow_c_variadic: bool) -> PResult<'a, Arg> {\n         maybe_whole!(self, NtArg, |x| x);\n \n         if let Ok(Some(_)) = self.parse_self_arg() {\n@@ -2018,12 +2018,12 @@ impl<'a> Parser<'a> {\n             }\n \n             self.eat_incorrect_doc_comment(\"a method argument's type\");\n-            (pat, self.parse_ty_common(true, true, allow_variadic)?)\n+            (pat, self.parse_ty_common(true, true, allow_c_variadic)?)\n         } else {\n             debug!(\"parse_arg_general ident_to_pat\");\n             let parser_snapshot_before_ty = self.clone();\n             self.eat_incorrect_doc_comment(\"a method argument's type\");\n-            let mut ty = self.parse_ty_common(true, true, allow_variadic);\n+            let mut ty = self.parse_ty_common(true, true, allow_c_variadic);\n             if ty.is_ok() && self.token != token::Comma &&\n                self.token != token::CloseDelim(token::Paren) {\n                 // This wasn't actually a type, but a pattern looking like a type,\n@@ -2042,7 +2042,7 @@ impl<'a> Parser<'a> {\n                     (pat, ty)\n                 }\n                 Err(mut err) => {\n-                    // If this is a variadic argument and we hit an error, return the\n+                    // If this is a C-variadic argument and we hit an error, return the\n                     // error.\n                     if self.token == token::DotDotDot {\n                         return Err(err);\n@@ -6122,12 +6122,12 @@ impl<'a> Parser<'a> {\n         Ok(where_clause)\n     }\n \n-    fn parse_fn_args(&mut self, named_args: bool, allow_variadic: bool)\n+    fn parse_fn_args(&mut self, named_args: bool, allow_c_variadic: bool)\n                      -> PResult<'a, (Vec<Arg> , bool)> {\n         self.expect(&token::OpenDelim(token::Paren))?;\n \n         let sp = self.span;\n-        let mut variadic = false;\n+        let mut c_variadic = false;\n         let (args, recovered): (Vec<Option<Arg>>, bool) =\n             self.parse_seq_to_before_end(\n                 &token::CloseDelim(token::Paren),\n@@ -6141,14 +6141,14 @@ impl<'a> Parser<'a> {\n                         named_args\n                     };\n                     match p.parse_arg_general(enforce_named_args, false,\n-                                              allow_variadic) {\n+                                              allow_c_variadic) {\n                         Ok(arg) => {\n                             if let TyKind::CVarArgs = arg.ty.node {\n-                                variadic = true;\n+                                c_variadic = true;\n                                 if p.token != token::CloseDelim(token::Paren) {\n                                     let span = p.span;\n                                     p.span_err(span,\n-                                        \"`...` must be last in argument list in variadic function\");\n+                                        \"`...` must be the last argument of a C-variadic function\");\n                                     Ok(None)\n                                 } else {\n                                     Ok(Some(arg))\n@@ -6176,24 +6176,24 @@ impl<'a> Parser<'a> {\n \n         let args: Vec<_> = args.into_iter().filter_map(|x| x).collect();\n \n-        if variadic && args.is_empty() {\n+        if c_variadic && args.is_empty() {\n             self.span_err(sp,\n-                          \"variadic function must be declared with at least one named argument\");\n+                          \"C-variadic function must be declared with at least one named argument\");\n         }\n \n-        Ok((args, variadic))\n+        Ok((args, c_variadic))\n     }\n \n     /// Parses the argument list and result type of a function declaration.\n-    fn parse_fn_decl(&mut self, allow_variadic: bool) -> PResult<'a, P<FnDecl>> {\n+    fn parse_fn_decl(&mut self, allow_c_variadic: bool) -> PResult<'a, P<FnDecl>> {\n \n-        let (args, variadic) = self.parse_fn_args(true, allow_variadic)?;\n+        let (args, c_variadic) = self.parse_fn_args(true, allow_c_variadic)?;\n         let ret_ty = self.parse_ret_ty(true)?;\n \n         Ok(P(FnDecl {\n             inputs: args,\n             output: ret_ty,\n-            variadic,\n+            c_variadic,\n         }))\n     }\n \n@@ -6340,7 +6340,7 @@ impl<'a> Parser<'a> {\n         Ok(P(FnDecl {\n             inputs: fn_inputs,\n             output: self.parse_ret_ty(true)?,\n-            variadic: false\n+            c_variadic: false\n         }))\n     }\n \n@@ -6366,7 +6366,7 @@ impl<'a> Parser<'a> {\n         Ok(P(FnDecl {\n             inputs: inputs_captures,\n             output,\n-            variadic: false\n+            c_variadic: false\n         }))\n     }\n \n@@ -6398,8 +6398,8 @@ impl<'a> Parser<'a> {\n                      abi: Abi)\n                      -> PResult<'a, ItemInfo> {\n         let (ident, mut generics) = self.parse_fn_header()?;\n-        let allow_variadic = abi == Abi::C && unsafety == Unsafety::Unsafe;\n-        let decl = self.parse_fn_decl(allow_variadic)?;\n+        let allow_c_variadic = abi == Abi::C && unsafety == Unsafety::Unsafe;\n+        let decl = self.parse_fn_decl(allow_c_variadic)?;\n         generics.where_clause = self.parse_where_clause()?;\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n         let header = FnHeader { unsafety, asyncness, constness, abi };"}, {"sha": "4f4336c5b27144e67d64cb660b17852d5305ac8d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -2814,7 +2814,7 @@ impl<'a> State<'a> {\n         -> io::Result<()> {\n         self.popen()?;\n         self.commasep(Inconsistent, &decl.inputs, |s, arg| s.print_arg(arg, false))?;\n-        if decl.variadic {\n+        if decl.c_variadic {\n             self.s.word(\", ...\")?;\n         }\n         self.pclose()?;\n@@ -3241,7 +3241,7 @@ mod tests {\n             let decl = ast::FnDecl {\n                 inputs: Vec::new(),\n                 output: ast::FunctionRetTy::Default(syntax_pos::DUMMY_SP),\n-                variadic: false\n+                c_variadic: false\n             };\n             let generics = ast::Generics::default();\n             assert_eq!("}, {"sha": "80e0b0102af75f8ff8fd4af4eae9132ff3f75dcb", "filename": "src/test/run-pass-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -112,7 +112,7 @@ fn iter_exprs(depth: usize, f: &mut FnMut(P<Expr>)) {\n                 let decl = P(FnDecl {\n                     inputs: vec![],\n                     output: FunctionRetTy::Default(DUMMY_SP),\n-                    variadic: false,\n+                    c_variadic: false,\n                 });\n                 iter_exprs(depth - 1, &mut |e| g(\n                         ExprKind::Closure(CaptureBy::Value,"}, {"sha": "61d55ce0d3ef9055ac8f12c79386e13b36e2d7a3", "filename": "src/test/ui/c-variadic/variadic-ffi-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -1,8 +1,8 @@\n-error[E0045]: variadic function must have C or cdecl calling convention\n+error[E0045]: C-variadic function must have C or cdecl calling convention\n   --> $DIR/variadic-ffi-1.rs:5:5\n    |\n LL |     fn printf(_: *const u8, ...); //~ ERROR: variadic function must have C or cdecl calling\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ variadics require C or cdecl calling convention\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadics require C or cdecl calling convention\n \n error: aborting due to previous error\n "}, {"sha": "4c8b8d2b2e1a960bf81069868517a72ac7f6cf67", "filename": "src/test/ui/c-variadic/variadic-ffi-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-2.stderr?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -1,8 +1,8 @@\n-error[E0045]: variadic function must have C or cdecl calling convention\n+error[E0045]: C-variadic function must have C or cdecl calling convention\n   --> $DIR/variadic-ffi-2.rs:3:11\n    |\n LL | fn baz(f: extern \"stdcall\" fn(usize, ...)) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ variadics require C or cdecl calling convention\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadics require C or cdecl calling convention\n \n error: aborting due to previous error\n "}, {"sha": "0ce91f0a401031b3a1591c7681f06883032cba83", "filename": "src/test/ui/error-codes/E0045.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Ftest%2Fui%2Ferror-codes%2FE0045.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Ftest%2Fui%2Ferror-codes%2FE0045.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0045.stderr?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -1,8 +1,8 @@\n-error[E0045]: variadic function must have C or cdecl calling convention\n+error[E0045]: C-variadic function must have C or cdecl calling convention\n   --> $DIR/E0045.rs:1:17\n    |\n LL | extern \"Rust\" { fn foo(x: u8, ...); }   //~ ERROR E0045\n-   |                 ^^^^^^^^^^^^^^^^^^^ variadics require C or cdecl calling convention\n+   |                 ^^^^^^^^^^^^^^^^^^^ C-variadics require C or cdecl calling convention\n \n error: aborting due to previous error\n "}, {"sha": "8d23f0e477077676cb2e2b4773f8d8a98bc5d22a", "filename": "src/test/ui/invalid/invalid-variadic-function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Ftest%2Fui%2Finvalid%2Finvalid-variadic-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Ftest%2Fui%2Finvalid%2Finvalid-variadic-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-variadic-function.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -1,3 +1,3 @@\n extern \"C\" fn foo(x: u8, ...);\n-//~^ ERROR only foreign functions are allowed to be variadic\n+//~^ ERROR only foreign functions are allowed to be C-variadic\n //~| ERROR expected one of `->`, `where`, or `{`, found `;`"}, {"sha": "b2dbf8b9190848ef69c0886ebb9becb71be116b7", "filename": "src/test/ui/invalid/invalid-variadic-function.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Ftest%2Fui%2Finvalid%2Finvalid-variadic-function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Ftest%2Fui%2Finvalid%2Finvalid-variadic-function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-variadic-function.stderr?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -1,4 +1,4 @@\n-error: only foreign functions are allowed to be variadic\n+error: only foreign functions are allowed to be C-variadic\n   --> $DIR/invalid-variadic-function.rs:1:26\n    |\n LL | extern \"C\" fn foo(x: u8, ...);"}, {"sha": "ce83cc87abe00f937b45e97d4d4c60a6a29a62d3", "filename": "src/test/ui/parser/variadic-ffi-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-3.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -1,5 +1,5 @@\n fn foo(x: isize, ...) {\n-    //~^ ERROR: only foreign functions are allowed to be variadic\n+    //~^ ERROR: only foreign functions are allowed to be C-variadic\n }\n \n fn main() {}"}, {"sha": "8ea4d194396faa0082cd2598cab38d97d9e46829", "filename": "src/test/ui/parser/variadic-ffi-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-3.stderr?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -1,4 +1,4 @@\n-error: only foreign functions are allowed to be variadic\n+error: only foreign functions are allowed to be C-variadic\n   --> $DIR/variadic-ffi-3.rs:1:18\n    |\n LL | fn foo(x: isize, ...) {"}, {"sha": "5f8b3f8f539b8df463f457d8ae7ac8724bdc84ed", "filename": "src/test/ui/parser/variadic-ffi-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-4.rs?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -1,5 +1,5 @@\n extern \"C\" fn foo(x: isize, ...) {\n-    //~^ ERROR: only foreign functions are allowed to be variadic\n+    //~^ ERROR: only foreign functions are allowed to be C-variadic\n }\n \n fn main() {}"}, {"sha": "69fbf84869c13bf7ad809dc6ab54f6c0bc21fae4", "filename": "src/test/ui/parser/variadic-ffi-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-4.stderr?ref=08bd4ff9987fc57215a2fe54c63da0e86d9e6fbf", "patch": "@@ -1,4 +1,4 @@\n-error: only foreign functions are allowed to be variadic\n+error: only foreign functions are allowed to be C-variadic\n   --> $DIR/variadic-ffi-4.rs:1:29\n    |\n LL | extern \"C\" fn foo(x: isize, ...) {"}]}