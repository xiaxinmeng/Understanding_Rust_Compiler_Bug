{"sha": "298d0b870ff9201ee05c5517ade88da84a61cdf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5OGQwYjg3MGZmOTIwMWVlMDVjNTUxN2FkZTg4ZGE4NGE2MWNkZjE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T22:31:49Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:36Z"}, "message": "librustc: De-`@mut` `label_ribs` in the resolver", "tree": {"sha": "52ab6921562db45a1f6f1c35e85b05eb6a1b895a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52ab6921562db45a1f6f1c35e85b05eb6a1b895a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/298d0b870ff9201ee05c5517ade88da84a61cdf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/298d0b870ff9201ee05c5517ade88da84a61cdf1", "html_url": "https://github.com/rust-lang/rust/commit/298d0b870ff9201ee05c5517ade88da84a61cdf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/298d0b870ff9201ee05c5517ade88da84a61cdf1/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f816b7ef4c617eec3d03397f4013c06c9f98ce2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f816b7ef4c617eec3d03397f4013c06c9f98ce2", "html_url": "https://github.com/rust-lang/rust/commit/7f816b7ef4c617eec3d03397f4013c06c9f98ce2"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "e5698761dd1b1c3a24d422237cef4e07466ff53a", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/298d0b870ff9201ee05c5517ade88da84a61cdf1/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298d0b870ff9201ee05c5517ade88da84a61cdf1/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=298d0b870ff9201ee05c5517ade88da84a61cdf1", "patch": "@@ -801,7 +801,7 @@ fn Resolver(session: Session,\n         current_module: current_module,\n         value_ribs: @mut ~[],\n         type_ribs: @mut ~[],\n-        label_ribs: @mut ~[],\n+        label_ribs: @RefCell::new(~[]),\n \n         current_trait_refs: None,\n \n@@ -852,7 +852,7 @@ struct Resolver {\n     type_ribs: @mut ~[@Rib],\n \n     // The current set of local scopes, for labels.\n-    label_ribs: @mut ~[@Rib],\n+    label_ribs: @RefCell<~[@Rib]>,\n \n     // The trait that the current context can refer to.\n     current_trait_refs: Option<~[DefId]>,\n@@ -3833,9 +3833,17 @@ impl Resolver {\n     }\n \n     fn with_label_rib(&mut self, f: |&mut Resolver|) {\n-        self.label_ribs.push(@Rib::new(NormalRibKind));\n+        {\n+            let mut label_ribs = self.label_ribs.borrow_mut();\n+            label_ribs.get().push(@Rib::new(NormalRibKind));\n+        }\n+\n         f(self);\n-        self.label_ribs.pop();\n+\n+        {\n+            let mut label_ribs = self.label_ribs.borrow_mut();\n+            label_ribs.get().pop();\n+        }\n     }\n \n     fn with_constant_rib(&mut self, f: |&mut Resolver|) {\n@@ -3857,8 +3865,11 @@ impl Resolver {\n         self.value_ribs.push(function_value_rib);\n \n         // Create a label rib for the function.\n-        let function_label_rib = @Rib::new(rib_kind);\n-        self.label_ribs.push(function_label_rib);\n+        {\n+            let mut label_ribs = self.label_ribs.borrow_mut();\n+            let function_label_rib = @Rib::new(rib_kind);\n+            label_ribs.get().push(function_label_rib);\n+        }\n \n         // If this function has type parameters, add them now.\n         self.with_type_parameter_rib(type_parameters, |this| {\n@@ -3914,7 +3925,8 @@ impl Resolver {\n             debug!(\"(resolving function) leaving function\");\n         });\n \n-        self.label_ribs.pop();\n+        let mut label_ribs = self.label_ribs.borrow_mut();\n+        label_ribs.get().pop();\n         self.value_ribs.pop();\n     }\n \n@@ -5185,9 +5197,11 @@ impl Resolver {\n             ExprLoop(_, Some(label)) => {\n                 self.with_label_rib(|this| {\n                     let def_like = DlDef(DefLabel(expr.id));\n-                    let rib = this.label_ribs[this.label_ribs.len() - 1];\n                     // plain insert (no renaming)\n                     {\n+                        let mut label_ribs = this.label_ribs.borrow_mut();\n+                        let rib = label_ribs.get()[label_ribs.get().len() -\n+                                                   1];\n                         let mut bindings = rib.bindings.borrow_mut();\n                         bindings.get().insert(label.name, def_like);\n                     }\n@@ -5199,7 +5213,8 @@ impl Resolver {\n             ExprForLoop(..) => fail!(\"non-desugared expr_for_loop\"),\n \n             ExprBreak(Some(label)) | ExprAgain(Some(label)) => {\n-                match self.search_ribs(self.label_ribs, label, expr.span,\n+                let mut label_ribs = self.label_ribs.borrow_mut();\n+                match self.search_ribs(label_ribs.get(), label, expr.span,\n                                        DontAllowCapturingSelf) {\n                     None =>\n                         self.resolve_error(expr.span,"}]}