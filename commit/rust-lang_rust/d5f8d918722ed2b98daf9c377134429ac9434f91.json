{"sha": "d5f8d918722ed2b98daf9c377134429ac9434f91", "node_id": "C_kwDOAAsO6NoAKGQ1ZjhkOTE4NzIyZWQyYjk4ZGFmOWMzNzcxMzQ0MjlhYzk0MzRmOTE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-15T17:06:34Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-15T17:46:32Z"}, "message": "fix: Fix completions not always working in for-loop patterns", "tree": {"sha": "4029d219872f76f5cf00cb3df0c8a2eccc398877", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4029d219872f76f5cf00cb3df0c8a2eccc398877"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5f8d918722ed2b98daf9c377134429ac9434f91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f8d918722ed2b98daf9c377134429ac9434f91", "html_url": "https://github.com/rust-lang/rust/commit/d5f8d918722ed2b98daf9c377134429ac9434f91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5f8d918722ed2b98daf9c377134429ac9434f91/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbc1d2a51436ed186c85f6f0d64217d9d1dd4523", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc1d2a51436ed186c85f6f0d64217d9d1dd4523", "html_url": "https://github.com/rust-lang/rust/commit/fbc1d2a51436ed186c85f6f0d64217d9d1dd4523"}], "stats": {"total": 80, "additions": 63, "deletions": 17}, "files": [{"sha": "1ad233494a98a791243c9e45e97734bb1b72e81d", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5f8d918722ed2b98daf9c377134429ac9434f91/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f8d918722ed2b98daf9c377134429ac9434f91/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=d5f8d918722ed2b98daf9c377134429ac9434f91", "patch": "@@ -24,8 +24,8 @@ use text_edit::Indel;\n \n use crate::{\n     patterns::{\n-        determine_location, determine_prev_sibling, for_is_prev2, is_in_loop_body, previous_token,\n-        ImmediateLocation, ImmediatePrevSibling,\n+        determine_location, determine_prev_sibling, is_in_loop_body, is_in_token_of_for_loop,\n+        previous_token, ImmediateLocation, ImmediatePrevSibling,\n     },\n     CompletionConfig,\n };\n@@ -729,7 +729,7 @@ impl<'a> CompletionContext<'a> {\n     ) {\n         let fake_ident_token = file_with_fake_ident.token_at_offset(offset).right_biased().unwrap();\n         let syntax_element = NodeOrToken::Token(fake_ident_token);\n-        if for_is_prev2(syntax_element.clone()) {\n+        if is_in_token_of_for_loop(syntax_element.clone()) {\n             // for pat $0\n             // there is nothing to complete here except `in` keyword\n             // don't bother populating the context"}, {"sha": "4536e3e6ee50bf9206b703628cd0625056f66c28", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 42, "deletions": 12, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d5f8d918722ed2b98daf9c377134429ac9434f91/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f8d918722ed2b98daf9c377134429ac9434f91/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=d5f8d918722ed2b98daf9c377134429ac9434f91", "patch": "@@ -11,7 +11,7 @@ use syntax::{\n     ast::{self, HasArgList, HasLoopBody},\n     match_ast, AstNode, Direction, SyntaxElement,\n     SyntaxKind::*,\n-    SyntaxNode, SyntaxToken, TextRange, TextSize, T,\n+    SyntaxNode, SyntaxToken, TextRange, TextSize,\n };\n \n #[cfg(test)]\n@@ -295,19 +295,37 @@ pub(crate) fn previous_token(element: SyntaxElement) -> Option<SyntaxToken> {\n     element.into_token().and_then(previous_non_trivia_token)\n }\n \n-/// Check if the token previous to the previous one is `for`.\n-/// For example, `for _ i$0` => true.\n-pub(crate) fn for_is_prev2(element: SyntaxElement) -> bool {\n-    element\n-        .into_token()\n-        .and_then(previous_non_trivia_token)\n-        .and_then(previous_non_trivia_token)\n-        .filter(|it| it.kind() == T![for])\n-        .is_some()\n+pub(crate) fn is_in_token_of_for_loop(element: SyntaxElement) -> bool {\n+    // oh my ...\n+    (|| {\n+        let syntax_token = element.into_token()?;\n+        let range = syntax_token.text_range();\n+        let for_expr = syntax_token.ancestors().find_map(ast::ForExpr::cast)?;\n+\n+        // check if the current token is the `in` token of a for loop\n+        if let Some(token) = for_expr.in_token() {\n+            return Some(syntax_token == token);\n+        }\n+        let pat = for_expr.pat()?;\n+        if range.end() < pat.syntax().text_range().end() {\n+            // if we are inside or before the pattern we can't be at the `in` token position\n+            return None;\n+        }\n+        let next_sibl = next_non_trivia_sibling(pat.syntax().clone().into())?;\n+        Some(match next_sibl {\n+            // the loop body is some node, if our token is at the start we are at the `in` position,\n+            // otherwise we could be in a recovered expression, we don't wanna ruin completions there\n+            syntax::NodeOrToken::Node(n) => n.text_range().start() == range.start(),\n+            // the loop body consists of a single token, if we are this we are certainly at the `in` token position\n+            syntax::NodeOrToken::Token(t) => t == syntax_token,\n+        })\n+    })()\n+    .unwrap_or(false)\n }\n+\n #[test]\n fn test_for_is_prev2() {\n-    check_pattern_is_applicable(r\"for i i$0\", for_is_prev2);\n+    check_pattern_is_applicable(r\"fn __() { for i i$0 }\", is_in_token_of_for_loop);\n }\n \n pub(crate) fn is_in_loop_body(node: &SyntaxNode) -> bool {\n@@ -329,7 +347,7 @@ pub(crate) fn is_in_loop_body(node: &SyntaxNode) -> bool {\n \n fn previous_non_trivia_token(token: SyntaxToken) -> Option<SyntaxToken> {\n     let mut token = token.prev_token();\n-    while let Some(inner) = token.clone() {\n+    while let Some(inner) = token {\n         if !inner.kind().is_trivia() {\n             return Some(inner);\n         } else {\n@@ -339,6 +357,18 @@ fn previous_non_trivia_token(token: SyntaxToken) -> Option<SyntaxToken> {\n     None\n }\n \n+fn next_non_trivia_sibling(ele: SyntaxElement) -> Option<SyntaxElement> {\n+    let mut e = ele.next_sibling_or_token();\n+    while let Some(inner) = e {\n+        if !inner.kind().is_trivia() {\n+            return Some(inner);\n+        } else {\n+            e = inner.next_sibling_or_token();\n+        }\n+    }\n+    None\n+}\n+\n #[cfg(test)]\n mod tests {\n     use syntax::algo::find_node_at_offset;"}, {"sha": "ed341b361ac3d3d76fe8513c000ef5e63ef5663d", "filename": "crates/ide_completion/src/tests/item.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5f8d918722ed2b98daf9c377134429ac9434f91/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f8d918722ed2b98daf9c377134429ac9434f91/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem.rs?ref=d5f8d918722ed2b98daf9c377134429ac9434f91", "patch": "@@ -76,8 +76,14 @@ fn after_target_name_in_impl() {\n             kw for\n         \"#]],\n     );\n-    // FIXME: This should emit `kw where`\n-    check(r\"impl Trait for Type $0\", expect![[r#\"\"#]]);\n+    // FIXME: This should not emit `kw for`\n+    check(\n+        r\"impl Trait for Type $0\",\n+        expect![[r#\"\n+        kw where\n+        kw for\n+    \"#]],\n+    );\n }\n \n #[test]"}, {"sha": "891c1346dfc18c12b86a85d2318c446b1e067199", "filename": "crates/ide_completion/src/tests/pattern.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5f8d918722ed2b98daf9c377134429ac9434f91/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f8d918722ed2b98daf9c377134429ac9434f91/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs?ref=d5f8d918722ed2b98daf9c377134429ac9434f91", "patch": "@@ -92,6 +92,16 @@ fn quux() {\n \"#,\n         expect![[r#\"\"#]],\n     );\n+    check_empty(\n+        r#\"\n+fn foo() {\n+    for &$0 in () {}\n+}\n+\"#,\n+        expect![[r#\"\n+            kw mut\n+        \"#]],\n+    );\n }\n \n #[test]"}]}