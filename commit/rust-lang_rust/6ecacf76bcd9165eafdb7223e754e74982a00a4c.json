{"sha": "6ecacf76bcd9165eafdb7223e754e74982a00a4c", "node_id": "C_kwDOAAsO6NoAKDZlY2FjZjc2YmNkOTE2NWVhZmRiNzIyM2U3NTRlNzQ5ODJhMDBhNGM", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-09-16T15:07:20Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-01T10:03:06Z"}, "message": "rustdoc: adopt to the new lint API", "tree": {"sha": "248ed5288276e939d5cce6c04a1530317c607716", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/248ed5288276e939d5cce6c04a1530317c607716"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ecacf76bcd9165eafdb7223e754e74982a00a4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ecacf76bcd9165eafdb7223e754e74982a00a4c", "html_url": "https://github.com/rust-lang/rust/commit/6ecacf76bcd9165eafdb7223e754e74982a00a4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ecacf76bcd9165eafdb7223e754e74982a00a4c/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e90a4184437fb39904288106cfb4bfab322e18a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e90a4184437fb39904288106cfb4bfab322e18a", "html_url": "https://github.com/rust-lang/rust/commit/7e90a4184437fb39904288106cfb4bfab322e18a"}], "stats": {"total": 139, "additions": 61, "deletions": 78}, "files": [{"sha": "b463b934e292d5e3ab54aa5e848ccdca8b22ce8b", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ecacf76bcd9165eafdb7223e754e74982a00a4c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ecacf76bcd9165eafdb7223e754e74982a00a4c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=6ecacf76bcd9165eafdb7223e754e74982a00a4c", "patch": "@@ -404,12 +404,8 @@ pub(crate) fn run_global_ctxt(\n         tcx.struct_lint_node(\n             crate::lint::MISSING_CRATE_LEVEL_DOCS,\n             DocContext::as_local_hir_id(tcx, krate.module.item_id).unwrap(),\n-            |lint| {\n-                let mut diag =\n-                    lint.build(\"no documentation found for this crate's top-level module\");\n-                diag.help(&help);\n-                diag.emit();\n-            },\n+            \"no documentation found for this crate's top-level module\",\n+            |lint| lint.help(help),\n         );\n     }\n "}, {"sha": "68eb5008583ed82b110cc25eefa8a168f328711e", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6ecacf76bcd9165eafdb7223e754e74982a00a4c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ecacf76bcd9165eafdb7223e754e74982a00a4c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=6ecacf76bcd9165eafdb7223e754e74982a00a4c", "patch": "@@ -813,11 +813,8 @@ impl<'tcx> ExtraInfo<'tcx> {\n             crate::lint::INVALID_CODEBLOCK_ATTRIBUTES,\n             hir_id,\n             self.sp,\n-            |lint| {\n-                let mut diag = lint.build(msg);\n-                diag.help(help);\n-                diag.emit();\n-            },\n+            msg,\n+            |lint| lint.help(help),\n         );\n     }\n }"}, {"sha": "7ff3ccef945c2915c0b12833b0a69c70093187ea", "filename": "src/librustdoc/passes/bare_urls.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ecacf76bcd9165eafdb7223e754e74982a00a4c/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ecacf76bcd9165eafdb7223e754e74982a00a4c/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs?ref=6ecacf76bcd9165eafdb7223e754e74982a00a4c", "patch": "@@ -71,16 +71,14 @@ impl<'a, 'tcx> DocVisitor for BareUrlsLinter<'a, 'tcx> {\n             let report_diag = |cx: &DocContext<'_>, msg: &str, url: &str, range: Range<usize>| {\n                 let sp = super::source_span_for_markdown_range(cx.tcx, &dox, &range, &item.attrs)\n                     .unwrap_or_else(|| item.attr_span(cx.tcx));\n-                cx.tcx.struct_span_lint_hir(crate::lint::BARE_URLS, hir_id, sp, |lint| {\n-                    lint.build(msg)\n-                        .note(\"bare URLs are not automatically turned into clickable links\")\n+                cx.tcx.struct_span_lint_hir(crate::lint::BARE_URLS, hir_id, sp, msg, |lint| {\n+                    lint.note(\"bare URLs are not automatically turned into clickable links\")\n                         .span_suggestion(\n                             sp,\n                             \"use an automatic link instead\",\n                             format!(\"<{}>\", url),\n                             Applicability::MachineApplicable,\n                         )\n-                        .emit();\n                 });\n             };\n "}, {"sha": "23f87838544df9a4115e46324787aa05925fb54d", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 41, "deletions": 44, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/6ecacf76bcd9165eafdb7223e754e74982a00a4c/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ecacf76bcd9165eafdb7223e754e74982a00a4c/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=6ecacf76bcd9165eafdb7223e754e74982a00a4c", "patch": "@@ -2,7 +2,7 @@\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{\n     emitter::Emitter, translation::Translate, Applicability, Diagnostic, Handler,\n-    LazyFallbackBundle, LintDiagnosticBuilder,\n+    LazyFallbackBundle,\n };\n use rustc_parse::parse_stream_from_source_str;\n use rustc_session::parse::ParseSess;\n@@ -97,48 +97,10 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n             None => (item.attr_span(self.cx.tcx), false),\n         };\n \n-        // lambda that will use the lint to start a new diagnostic and add\n-        // a suggestion to it when needed.\n-        let diag_builder = |lint: LintDiagnosticBuilder<'_, ()>| {\n-            let explanation = if is_ignore {\n-                \"`ignore` code blocks require valid Rust code for syntax highlighting; \\\n-                    mark blocks that do not contain Rust code as text\"\n-            } else {\n-                \"mark blocks that do not contain Rust code as text\"\n-            };\n-            let msg = if buffer.has_errors {\n-                \"could not parse code block as Rust code\"\n-            } else {\n-                \"Rust code block is empty\"\n-            };\n-            let mut diag = lint.build(msg);\n-\n-            if precise_span {\n-                if is_ignore {\n-                    // giving an accurate suggestion is hard because `ignore` might not have come first in the list.\n-                    // just give a `help` instead.\n-                    diag.span_help(\n-                        sp.from_inner(InnerSpan::new(0, 3)),\n-                        &format!(\"{}: ```text\", explanation),\n-                    );\n-                } else if empty_block {\n-                    diag.span_suggestion(\n-                        sp.from_inner(InnerSpan::new(0, 3)).shrink_to_hi(),\n-                        explanation,\n-                        \"text\",\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n-            } else if empty_block || is_ignore {\n-                diag.help(&format!(\"{}: ```text\", explanation));\n-            }\n-\n-            // FIXME(#67563): Provide more context for these errors by displaying the spans inline.\n-            for message in buffer.messages.iter() {\n-                diag.note(message);\n-            }\n-\n-            diag.emit();\n+        let msg = if buffer.has_errors {\n+            \"could not parse code block as Rust code\"\n+        } else {\n+            \"Rust code block is empty\"\n         };\n \n         // Finally build and emit the completed diagnostic.\n@@ -148,7 +110,42 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n             crate::lint::INVALID_RUST_CODEBLOCKS,\n             hir_id,\n             sp,\n-            diag_builder,\n+            msg,\n+            |lint| {\n+                let explanation = if is_ignore {\n+                    \"`ignore` code blocks require valid Rust code for syntax highlighting; \\\n+                    mark blocks that do not contain Rust code as text\"\n+                } else {\n+                    \"mark blocks that do not contain Rust code as text\"\n+                };\n+\n+                if precise_span {\n+                    if is_ignore {\n+                        // giving an accurate suggestion is hard because `ignore` might not have come first in the list.\n+                        // just give a `help` instead.\n+                        lint.span_help(\n+                            sp.from_inner(InnerSpan::new(0, 3)),\n+                            &format!(\"{}: ```text\", explanation),\n+                        );\n+                    } else if empty_block {\n+                        lint.span_suggestion(\n+                            sp.from_inner(InnerSpan::new(0, 3)).shrink_to_hi(),\n+                            explanation,\n+                            \"text\",\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n+                } else if empty_block || is_ignore {\n+                    lint.help(&format!(\"{}: ```text\", explanation));\n+                }\n+\n+                // FIXME(#67563): Provide more context for these errors by displaying the spans inline.\n+                for message in buffer.messages.iter() {\n+                    lint.note(message);\n+                }\n+\n+                lint\n+            },\n         );\n     }\n }"}, {"sha": "15982b40944e7989cbdaff441d0693cbde02578b", "filename": "src/librustdoc/passes/check_doc_test_visibility.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ecacf76bcd9165eafdb7223e754e74982a00a4c/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ecacf76bcd9165eafdb7223e754e74982a00a4c/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs?ref=6ecacf76bcd9165eafdb7223e754e74982a00a4c", "patch": "@@ -125,9 +125,8 @@ pub(crate) fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item\n                 crate::lint::MISSING_DOC_CODE_EXAMPLES,\n                 hir_id,\n                 sp,\n-                |lint| {\n-                    lint.build(\"missing code example in this documentation\").emit();\n-                },\n+                \"missing code example in this documentation\",\n+                |lint| lint,\n             );\n         }\n     } else if tests.found_tests > 0\n@@ -137,9 +136,8 @@ pub(crate) fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item\n             crate::lint::PRIVATE_DOC_TESTS,\n             hir_id,\n             item.attr_span(cx.tcx),\n-            |lint| {\n-                lint.build(\"documentation test in private item\").emit();\n-            },\n+            \"documentation test in private item\",\n+            |lint| lint,\n         );\n     }\n }"}, {"sha": "3beda708bf2e16c34d9f5c8bb586bd34e741a47c", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ecacf76bcd9165eafdb7223e754e74982a00a4c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ecacf76bcd9165eafdb7223e754e74982a00a4c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=6ecacf76bcd9165eafdb7223e754e74982a00a4c", "patch": "@@ -1609,9 +1609,7 @@ fn report_diagnostic(\n \n     let sp = item.attr_span(tcx);\n \n-    tcx.struct_span_lint_hir(lint, hir_id, sp, |lint| {\n-        let mut diag = lint.build(msg);\n-\n+    tcx.struct_span_lint_hir(lint, hir_id, sp, msg, |lint| {\n         let span =\n             super::source_span_for_markdown_range(tcx, dox, link_range, &item.attrs).map(|sp| {\n                 if dox.as_bytes().get(link_range.start) == Some(&b'`')\n@@ -1624,7 +1622,7 @@ fn report_diagnostic(\n             });\n \n         if let Some(sp) = span {\n-            diag.set_span(sp);\n+            lint.set_span(sp);\n         } else {\n             // blah blah blah\\nblah\\nblah [blah] blah blah\\nblah blah\n             //                       ^     ~~~~\n@@ -1634,7 +1632,7 @@ fn report_diagnostic(\n             let line = dox[last_new_line_offset..].lines().next().unwrap_or(\"\");\n \n             // Print the line containing the `link_range` and manually mark it with '^'s.\n-            diag.note(&format!(\n+            lint.note(&format!(\n                 \"the link appears in this line:\\n\\n{line}\\n\\\n                      {indicator: <before$}{indicator:^<found$}\",\n                 line = line,\n@@ -1644,9 +1642,9 @@ fn report_diagnostic(\n             ));\n         }\n \n-        decorate(&mut diag, span);\n+        decorate(lint, span);\n \n-        diag.emit();\n+        lint\n     });\n }\n "}, {"sha": "694b03161d929a59761492853dcd4a66d098686d", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6ecacf76bcd9165eafdb7223e754e74982a00a4c/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ecacf76bcd9165eafdb7223e754e74982a00a4c/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=6ecacf76bcd9165eafdb7223e754e74982a00a4c", "patch": "@@ -240,9 +240,8 @@ impl<'a, 'tcx> DocVisitor for InvalidHtmlTagsLinter<'a, 'tcx> {\n                     Some(sp) => sp,\n                     None => item.attr_span(tcx),\n                 };\n-                tcx.struct_span_lint_hir(crate::lint::INVALID_HTML_TAGS, hir_id, sp, |lint| {\n+                tcx.struct_span_lint_hir(crate::lint::INVALID_HTML_TAGS, hir_id, sp, msg, |lint| {\n                     use rustc_lint_defs::Applicability;\n-                    let mut diag = lint.build(msg);\n                     // If a tag looks like `<this>`, it might actually be a generic.\n                     // We don't try to detect stuff `<like, this>` because that's not valid HTML,\n                     // and we don't try to detect stuff `<like this>` because that's not valid Rust.\n@@ -305,11 +304,10 @@ impl<'a, 'tcx> DocVisitor for InvalidHtmlTagsLinter<'a, 'tcx> {\n                         if (generics_start > 0 && dox.as_bytes()[generics_start - 1] == b'<')\n                             || (generics_end < dox.len() && dox.as_bytes()[generics_end] == b'>')\n                         {\n-                            diag.emit();\n-                            return;\n+                            return lint;\n                         }\n                         // multipart form is chosen here because ``Vec<i32>`` would be confusing.\n-                        diag.multipart_suggestion(\n+                        lint.multipart_suggestion(\n                             \"try marking as source code\",\n                             vec![\n                                 (generics_sp.shrink_to_lo(), String::from(\"`\")),\n@@ -318,7 +316,8 @@ impl<'a, 'tcx> DocVisitor for InvalidHtmlTagsLinter<'a, 'tcx> {\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n-                    diag.emit()\n+\n+                    lint\n                 });\n             };\n "}]}