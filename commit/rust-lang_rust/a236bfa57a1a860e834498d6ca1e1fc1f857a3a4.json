{"sha": "a236bfa57a1a860e834498d6ca1e1fc1f857a3a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMzZiZmE1N2ExYTg2MGU4MzQ0OThkNmNhMWUxZmMxZjg1N2EzYTQ=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-07T05:38:51Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-31T19:03:47Z"}, "message": "Lower binding pattern", "tree": {"sha": "d578bec5f26628347b14b3245565784669654834", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d578bec5f26628347b14b3245565784669654834"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a236bfa57a1a860e834498d6ca1e1fc1f857a3a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a236bfa57a1a860e834498d6ca1e1fc1f857a3a4", "html_url": "https://github.com/rust-lang/rust/commit/a236bfa57a1a860e834498d6ca1e1fc1f857a3a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a236bfa57a1a860e834498d6ca1e1fc1f857a3a4/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf6f989a8d638b76ec7e14d00f7ed095b20ffed6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf6f989a8d638b76ec7e14d00f7ed095b20ffed6", "html_url": "https://github.com/rust-lang/rust/commit/cf6f989a8d638b76ec7e14d00f7ed095b20ffed6"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "99f32097f74585476a1e5a5bc44eaac3ef8597fd", "filename": "crates/hir_ty/src/diagnostics/pattern.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a236bfa57a1a860e834498d6ca1e1fc1f857a3a4/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a236bfa57a1a860e834498d6ca1e1fc1f857a3a4/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern.rs?ref=a236bfa57a1a860e834498d6ca1e1fc1f857a3a4", "patch": "@@ -11,7 +11,7 @@ use la_arena::Idx;\n \n use crate::{db::HirDatabase, AdtId, InferenceResult, Interner, Substitution, Ty, TyKind};\n \n-use self::{deconstruct_pat::ToDo, pat_util::EnumerateAndAdjustIterator};\n+use self::pat_util::EnumerateAndAdjustIterator;\n \n pub type PatId = Idx<Pat>;\n \n@@ -45,7 +45,6 @@ pub enum PatKind {\n     /// `x`, `ref x`, `x @ P`, etc.\n     Binding {\n         subpattern: Option<Pat>,\n-        // todo: ToDo,\n     },\n \n     /// `Foo(...)` or `Foo{...}` or `Foo`, where `Foo` is a variant name from an ADT with\n@@ -119,6 +118,10 @@ impl<'a> PatCtxt<'a> {\n                 PatKind::Leaf { subpatterns }\n             }\n \n+            hir_def::expr::Pat::Bind { subpat, .. } => {\n+                PatKind::Binding { subpattern: self.lower_opt_pattern(subpat) }\n+            }\n+\n             hir_def::expr::Pat::TupleStruct { ref args, ellipsis, .. } => {\n                 let variant_data = match self.infer.variant_resolution_for_pat(pat) {\n                     Some(variant_id) => variant_id.variant_data(self.db.upcast()),\n@@ -175,6 +178,10 @@ impl<'a> PatCtxt<'a> {\n         pats.iter().map(|&p| self.lower_pattern(p)).collect()\n     }\n \n+    fn lower_opt_pattern(&mut self, pat: Option<hir_def::expr::PatId>) -> Option<Pat> {\n+        pat.map(|p| self.lower_pattern(p))\n+    }\n+\n     fn lower_variant_or_leaf(\n         &mut self,\n         pat: hir_def::expr::PatId,\n@@ -383,13 +390,30 @@ fn main() {\n struct S { a: char}\n fn main(v: S) {\n     match v { S{ a }      => {} }\n-    match v { S{ a: x }   => {} }\n+    match v { S{ a: _x }   => {} }\n     match v { S{ a: 'a' } => {} }\n     match v { S{..}       => {} }\n     match v { _           => {} }\n     match v { }\n         //^ Missing match arm\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn binding() {\n+        check_diagnostics(\n+            r#\"\n+fn main() {\n+    match true {\n+        _x @ true => {}\n+        false     => {}\n+    }\n+    //FIXME: false negative. \n+    // Binding patterns should be expanded in `usefulness::expand_pattern()`\n+    match true { _x @ true => {} }\n+}\n \"#,\n         );\n     }"}, {"sha": "1c86ed59bdc90dee13da02bcd70263c5b913791b", "filename": "crates/hir_ty/src/diagnostics/pattern/deconstruct_pat.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a236bfa57a1a860e834498d6ca1e1fc1f857a3a4/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a236bfa57a1a860e834498d6ca1e1fc1f857a3a4/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern%2Fdeconstruct_pat.rs?ref=a236bfa57a1a860e834498d6ca1e1fc1f857a3a4", "patch": "@@ -801,12 +801,7 @@ impl Fields {\n         cx: &MatchCheckCtx<'_>,\n         pats: impl IntoIterator<Item = Pat>,\n     ) -> Self {\n-        let pats = {\n-            let tys: SmallVec<[Ty; 2]> = match self {\n-                Fields::Vec(pats) => pats.iter().copied().map(|pat| cx.type_of(pat)).collect(),\n-            };\n-            pats.into_iter().zip(tys.into_iter()).map(move |(pat, ty)| cx.alloc_pat(pat)).collect()\n-        };\n+        let pats = pats.into_iter().map(|pat| cx.alloc_pat(pat)).collect();\n \n         match self {\n             Fields::Vec(_) => Fields::Vec(pats),"}]}