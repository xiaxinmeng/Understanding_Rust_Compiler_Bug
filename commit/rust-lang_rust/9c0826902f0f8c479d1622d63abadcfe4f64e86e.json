{"sha": "9c0826902f0f8c479d1622d63abadcfe4f64e86e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMDgyNjkwMmYwZjhjNDc5ZDE2MjJkNjNhYmFkY2ZlNGY2NGU4NmU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-03T00:28:23Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-03T00:28:23Z"}, "message": "add_type_neq_err_label: don't .unwrap", "tree": {"sha": "7e337a1ab461ad28fbd1ad401b8c82a41a6c79b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e337a1ab461ad28fbd1ad401b8c82a41a6c79b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c0826902f0f8c479d1622d63abadcfe4f64e86e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c0826902f0f8c479d1622d63abadcfe4f64e86e", "html_url": "https://github.com/rust-lang/rust/commit/9c0826902f0f8c479d1622d63abadcfe4f64e86e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c0826902f0f8c479d1622d63abadcfe4f64e86e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "537ccdf3ac44c8c7a8d36cbdbe6fb224afabb7ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/537ccdf3ac44c8c7a8d36cbdbe6fb224afabb7ae", "html_url": "https://github.com/rust-lang/rust/commit/537ccdf3ac44c8c7a8d36cbdbe6fb224afabb7ae"}], "stats": {"total": 83, "additions": 65, "deletions": 18}, "files": [{"sha": "cac9113fd5d30e2d3007ea229b156cd63efb4c4c", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9c0826902f0f8c479d1622d63abadcfe4f64e86e/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c0826902f0f8c479d1622d63abadcfe4f64e86e/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=9c0826902f0f8c479d1622d63abadcfe4f64e86e", "patch": "@@ -481,7 +481,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     /// If one of the types is an uncalled function and calling it would yield the other type,\n-    /// suggest calling the function. Returns whether a suggestion was given.\n+    /// suggest calling the function. Returns `true` if suggestion would apply (even if not given).\n     fn add_type_neq_err_label(\n         &self,\n         err: &mut rustc_errors::DiagnosticBuilder<'_>,\n@@ -514,24 +514,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .lookup_op_method(fn_sig.output(), &[other_ty], Op::Binary(op, is_assign))\n                 .is_ok()\n             {\n-                let (variable_snippet, applicability) = if !fn_sig.inputs().is_empty() {\n-                    (\n-                        format!(\"{}( /* arguments */ )\", source_map.span_to_snippet(span).unwrap()),\n-                        Applicability::HasPlaceholders,\n-                    )\n-                } else {\n-                    (\n-                        format!(\"{}()\", source_map.span_to_snippet(span).unwrap()),\n-                        Applicability::MaybeIncorrect,\n-                    )\n-                };\n+                if let Ok(snippet) = source_map.span_to_snippet(span) {\n+                    let (variable_snippet, applicability) = if !fn_sig.inputs().is_empty() {\n+                        (format!(\"{}( /* arguments */ )\", snippet), Applicability::HasPlaceholders)\n+                    } else {\n+                        (format!(\"{}()\", snippet), Applicability::MaybeIncorrect)\n+                    };\n \n-                err.span_suggestion(\n-                    span,\n-                    \"you might have forgotten to call this function\",\n-                    variable_snippet,\n-                    applicability,\n-                );\n+                    err.span_suggestion(\n+                        span,\n+                        \"you might have forgotten to call this function\",\n+                        variable_snippet,\n+                        applicability,\n+                    );\n+                }\n                 return true;\n             }\n         }"}, {"sha": "c2683157f797fa4bfaa58e7e8ae063a05cd1ec83", "filename": "src/test/ui/issues/issue-70724-add_type_neq_err_label-unwrap.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c0826902f0f8c479d1622d63abadcfe4f64e86e/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c0826902f0f8c479d1622d63abadcfe4f64e86e/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.rs?ref=9c0826902f0f8c479d1622d63abadcfe4f64e86e", "patch": "@@ -0,0 +1,10 @@\n+fn a() -> i32 {\n+    3\n+}\n+\n+pub fn main() {\n+    assert_eq!(a, 0);\n+    //~^ ERROR binary operation `==` cannot\n+    //~| ERROR mismatched types\n+    //~| ERROR doesn't implement\n+}"}, {"sha": "467c15cc52d45d5efd4f9d87f1a6440f80f52bdf", "filename": "src/test/ui/issues/issue-70724-add_type_neq_err_label-unwrap.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9c0826902f0f8c479d1622d63abadcfe4f64e86e/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c0826902f0f8c479d1622d63abadcfe4f64e86e/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr?ref=9c0826902f0f8c479d1622d63abadcfe4f64e86e", "patch": "@@ -0,0 +1,41 @@\n+error[E0369]: binary operation `==` cannot be applied to type `fn() -> i32 {a}`\n+  --> $DIR/issue-70724-add_type_neq_err_label-unwrap.rs:6:5\n+   |\n+LL |     assert_eq!(a, 0);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     fn() -> i32 {a}\n+   |     {integer}\n+   |     help: you might have forgotten to call this function: `*left_val()`\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-70724-add_type_neq_err_label-unwrap.rs:6:5\n+   |\n+LL |     assert_eq!(a, 0);\n+   |     ^^^^^^^^^^^^^^^^^ expected fn item, found integer\n+   |\n+   = note: expected fn item `fn() -> i32 {a}`\n+                 found type `i32`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0277]: `fn() -> i32 {a}` doesn't implement `std::fmt::Debug`\n+  --> $DIR/issue-70724-add_type_neq_err_label-unwrap.rs:6:5\n+   |\n+LL | fn a() -> i32 {\n+   |    - consider calling this function\n+...\n+LL |     assert_eq!(a, 0);\n+   |     ^^^^^^^^^^^^^^^^^ `fn() -> i32 {a}` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |\n+   = help: the trait `std::fmt::Debug` is not implemented for `fn() -> i32 {a}`\n+   = help: use parentheses to call the function: `a()`\n+   = note: required because of the requirements on the impl of `std::fmt::Debug` for `&fn() -> i32 {a}`\n+   = note: required by `std::fmt::Debug::fmt`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0277, E0308, E0369.\n+For more information about an error, try `rustc --explain E0277`."}]}