{"sha": "ffab6bf10ffcb4b76042c96e339513fdba4c6009", "node_id": "C_kwDOAAsO6NoAKGZmYWI2YmYxMGZmY2I0Yjc2MDQyYzk2ZTMzOTUxM2ZkYmE0YzYwMDk", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-07-24T18:01:01Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-07-24T18:16:35Z"}, "message": "Move write! and writeln! temporaries test to check-fail", "tree": {"sha": "f3562dab375b60d2d54bbe6241794114bd044804", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3562dab375b60d2d54bbe6241794114bd044804"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffab6bf10ffcb4b76042c96e339513fdba4c6009", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmLdjIMACgkQ+boUO5X/\nbYKU+BAAqPx2WY+32mS7mQu8dBuI1lzGa2c9aUTB/8wvvSOE3NEpsnlFkMOy3HD6\nofTSYFWg6qLydqXF0WoFb/vos39zrnBc6RfybWAD35KdcP5kG3scgPAQS8OS87ck\n8uBNRz2N/fzTOhXQMst6vvVA8Lg62DlPBVllLocfYhHbECkuHklDs12ztY7zwoRs\nuI7zVkudLcaopcVbRGbTH9GY0MN2eOc/ajptJ0yLxGhT9ZumamITh9GozgIQTWDq\n/Pb1PkB7jZ3trI+yA0Vfc8Qpf+4R9lUK0AaXZccaH/ilpX0W63Qf39r//LXEriF2\nNm4ZTCd1RWrW5C2xnBSefH4fM/UifcfXPe6S7dmNKg7534tSQNop/VcPgdP3t4Xc\noBqexqgjHKey4TVemDvJruHM4+KjiWCUJ9Qb+erbsAv0ARRxnI0RBIDTPDNojcR5\n+YqgeQO93By2ehViJzLsUrx4sevXnX/fL4LBKjlbkMnGEbWqCqKT5Nu2mRA3VaMC\nGVVStTh5bRt++B2rBbhb1sQbOu6jKKvyLLisMaMbFJCqcVvgOztXmLDL5bYhECEd\npQiP8V5rYM0L82ZgTifurkUjw6XN1B3VyrI8x3BI3nujcg1Z892XQ1gnaYfMzv19\nw8H0SCGrKI9/RCsUVmdmk2Gs3YjOErdz127ZFnBseu0rOBjcCGg=\n=Vs7E\n-----END PGP SIGNATURE-----", "payload": "tree f3562dab375b60d2d54bbe6241794114bd044804\nparent 4d65048d4105da9b841c4d79aecdddf11bfc925e\nauthor David Tolnay <dtolnay@gmail.com> 1658685661 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1658686595 -0700\n\nMove write! and writeln! temporaries test to check-fail\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffab6bf10ffcb4b76042c96e339513fdba4c6009", "html_url": "https://github.com/rust-lang/rust/commit/ffab6bf10ffcb4b76042c96e339513fdba4c6009", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffab6bf10ffcb4b76042c96e339513fdba4c6009/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d65048d4105da9b841c4d79aecdddf11bfc925e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d65048d4105da9b841c4d79aecdddf11bfc925e", "html_url": "https://github.com/rust-lang/rust/commit/4d65048d4105da9b841c4d79aecdddf11bfc925e"}], "stats": {"total": 109, "additions": 93, "deletions": 16}, "files": [{"sha": "339ccbc33ac98161f18ad0c0e85d1a340b18a29d", "filename": "src/test/ui/macros/format-args-temporaries-in-write.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ffab6bf10ffcb4b76042c96e339513fdba4c6009/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries-in-write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffab6bf10ffcb4b76042c96e339513fdba4c6009/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries-in-write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries-in-write.rs?ref=ffab6bf10ffcb4b76042c96e339513fdba4c6009", "patch": "@@ -0,0 +1,50 @@\n+// check-fail\n+\n+use std::fmt::{self, Display};\n+\n+struct Mutex;\n+\n+impl Mutex {\n+    fn lock(&self) -> MutexGuard {\n+        MutexGuard(self)\n+    }\n+}\n+\n+struct MutexGuard<'a>(&'a Mutex);\n+\n+impl<'a> Drop for MutexGuard<'a> {\n+    fn drop(&mut self) {\n+        // Empty but this is a necessary part of the repro. Otherwise borrow\n+        // checker is fine with 'a dangling at the time that MutexGuard goes out\n+        // of scope.\n+    }\n+}\n+\n+struct Out;\n+\n+impl Out {\n+    fn write_fmt(&self, _args: fmt::Arguments) {}\n+}\n+\n+impl<'a> Display for MutexGuard<'a> {\n+    fn fmt(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {\n+        Ok(())\n+    }\n+}\n+\n+fn main() {\n+    // FIXME(dtolnay): We actually want both of these to work. I think it's\n+    // sadly unimplementable today though.\n+\n+    let _write = {\n+        let mutex = Mutex;\n+        write!(Out, \"{}\", mutex.lock()) /* no semicolon */\n+        //~^ ERROR `mutex` does not live long enough\n+    };\n+\n+    let _writeln = {\n+        let mutex = Mutex;\n+        writeln!(Out, \"{}\", mutex.lock()) /* no semicolon */\n+        //~^ ERROR `mutex` does not live long enough\n+    };\n+}"}, {"sha": "03ecc4b4418c61aa25f065301dfd25f89ad619e2", "filename": "src/test/ui/macros/format-args-temporaries-in-write.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ffab6bf10ffcb4b76042c96e339513fdba4c6009/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries-in-write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffab6bf10ffcb4b76042c96e339513fdba4c6009/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries-in-write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries-in-write.stderr?ref=ffab6bf10ffcb4b76042c96e339513fdba4c6009", "patch": "@@ -0,0 +1,43 @@\n+error[E0597]: `mutex` does not live long enough\n+  --> $DIR/format-args-temporaries-in-write.rs:41:27\n+   |\n+LL |         write!(Out, \"{}\", mutex.lock()) /* no semicolon */\n+   |                           ^^^^^^^^^^^^\n+   |                           |\n+   |                           borrowed value does not live long enough\n+   |                           a temporary with access to the borrow is created here ...\n+LL |\n+LL |     };\n+   |     -- ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `MutexGuard`\n+   |     |\n+   |     `mutex` dropped here while still borrowed\n+   |\n+help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n+  --> $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+   |\n+LL |         $dst.write_fmt($crate::format_args!($($arg)*));\n+   |                                                       +\n+\n+error[E0597]: `mutex` does not live long enough\n+  --> $DIR/format-args-temporaries-in-write.rs:47:29\n+   |\n+LL |         writeln!(Out, \"{}\", mutex.lock()) /* no semicolon */\n+   |                             ^^^^^^^^^^^^\n+   |                             |\n+   |                             borrowed value does not live long enough\n+   |                             a temporary with access to the borrow is created here ...\n+LL |\n+LL |     };\n+   |     -- ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `MutexGuard`\n+   |     |\n+   |     `mutex` dropped here while still borrowed\n+   |\n+help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n+  --> $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+   |\n+LL |         $dst.write_fmt($crate::format_args_nl!($($arg)*));\n+   |                                                          +\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "59323828bc37f0d9de2aaaf685104f0beb2f2d65", "filename": "src/test/ui/macros/format-args-temporaries.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ffab6bf10ffcb4b76042c96e339513fdba4c6009/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffab6bf10ffcb4b76042c96e339513fdba4c6009/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-args-temporaries.rs?ref=ffab6bf10ffcb4b76042c96e339513fdba4c6009", "patch": "@@ -20,29 +20,13 @@ impl<'a> Drop for MutexGuard<'a> {\n     }\n }\n \n-impl<'a> MutexGuard<'a> {\n-    fn write_fmt(&self, _args: fmt::Arguments) {}\n-}\n-\n impl<'a> Display for MutexGuard<'a> {\n     fn fmt(&self, _formatter: &mut fmt::Formatter) -> fmt::Result {\n         Ok(())\n     }\n }\n \n fn main() {\n-    let _write = {\n-        let out = Mutex;\n-        let mutex = Mutex;\n-        write!(out.lock(), \"{}\", mutex.lock()) /* no semicolon */\n-    };\n-\n-    let _writeln = {\n-        let out = Mutex;\n-        let mutex = Mutex;\n-        writeln!(out.lock(), \"{}\", mutex.lock()) /* no semicolon */\n-    };\n-\n     let _print = {\n         let mutex = Mutex;\n         print!(\"{}\", mutex.lock()) /* no semicolon */"}]}