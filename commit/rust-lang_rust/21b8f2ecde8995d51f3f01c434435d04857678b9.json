{"sha": "21b8f2ecde8995d51f3f01c434435d04857678b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYjhmMmVjZGU4OTk1ZDUxZjNmMDFjNDM0NDM1ZDA0ODU3Njc4Yjk=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-01-03T13:56:49Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-01-03T13:58:43Z"}, "message": "Make `ExpnData` fields `krate` and `orig_id` private\n\nThese fields are only used by hygiene serialized, and should not be\naccessed by anything outside of `rustc_span`.", "tree": {"sha": "82056f5b79178ef1c2788412254751bf1996175b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82056f5b79178ef1c2788412254751bf1996175b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21b8f2ecde8995d51f3f01c434435d04857678b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl/xzZcACgkQtAh+UQ6Y\nsWSSMBAAs3qI0xXJ0hBgj13KBFv/xhlLAtDJb3OXxxku48yRdjD6z5r+FtXqRVrU\nRxdQRnZxSVdQMiiCXjAvLo8Q2F65tjgLEkJWFanldsxc/uGiKlQrO16iwY1I/3q+\nKWPzCYzmyW+SOgqLdyUOaopSUYWwl83/IzUKyrntxwjSJjkyfkzk5iugfDr+8DqM\nJ+SLVT/Qmi4NQwkzjMXEF+iAyUu3ub+opbb9DW2tzIN4I+dqxzq4UsdAMPaFfHbO\n1713Zsu0Dhzu4Yrc4Y5YFnsQV/9TRLjQJjvA/1okQijR1006YZQd0LzpG2aq3zw1\nbFKCfd+zRazZ7KjNpGe+ITjfJTAUL6JfyYtQxfKbQgEqHdmMeebwou5pZ0G2xBVo\n/3C/sk6b0bN0PmLv8MjUP1yKJtKp0fp04yNs4s60XwhvUMm9ziUZvTjNF/TNN2sV\n51bTzzSuEg6Tyt2Lp6uTM6nm52jfayvxJqp7tkgRF4wTQzXXowFMwQDPN7wSbDLG\nRBZYtYDRd7aIV7D07cX5wYHbU/MbCcQxD8VAX1BzfPoCKW4Quk6N/p2TJNesd+vK\nuzIIL+NG1LO45nzP4ny9QaqdBkB5lOU6tavl8sfrcPkjzxNlY5bBi98/dI345wLd\nkjnrFnmMHNcx2i2E7WOwTlo8hxTY4ZF7fSMP+oDzmHfy3zwafyg=\n=TXwD\n-----END PGP SIGNATURE-----", "payload": "tree 82056f5b79178ef1c2788412254751bf1996175b\nparent 18cb4ad3b9440b3ff2ed16976f56889b23811e13\nauthor Aaron Hill <aa1ronham@gmail.com> 1609682209 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1609682323 -0500\n\nMake `ExpnData` fields `krate` and `orig_id` private\n\nThese fields are only used by hygiene serialized, and should not be\naccessed by anything outside of `rustc_span`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21b8f2ecde8995d51f3f01c434435d04857678b9", "html_url": "https://github.com/rust-lang/rust/commit/21b8f2ecde8995d51f3f01c434435d04857678b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21b8f2ecde8995d51f3f01c434435d04857678b9/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18cb4ad3b9440b3ff2ed16976f56889b23811e13", "url": "https://api.github.com/repos/rust-lang/rust/commits/18cb4ad3b9440b3ff2ed16976f56889b23811e13", "html_url": "https://github.com/rust-lang/rust/commit/18cb4ad3b9440b3ff2ed16976f56889b23811e13"}], "stats": {"total": 90, "additions": 63, "deletions": 27}, "files": [{"sha": "fe96e1c5c04e23c20e80bf02345a810287443ba9", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/21b8f2ecde8995d51f3f01c434435d04857678b9/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b8f2ecde8995d51f3f01c434435d04857678b9/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=21b8f2ecde8995d51f3f01c434435d04857678b9", "patch": "@@ -57,7 +57,7 @@ use rustc_session::lint::{builtin::BARE_TRAIT_OBJECTS, BuiltinLintDiagnostics, L\n use rustc_session::parse::ParseSess;\n use rustc_session::Session;\n use rustc_span::hygiene::ExpnId;\n-use rustc_span::source_map::{respan, DesugaringKind, ExpnData, ExpnKind};\n+use rustc_span::source_map::{respan, DesugaringKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n \n@@ -743,10 +743,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         span: Span,\n         allow_internal_unstable: Option<Lrc<[Symbol]>>,\n     ) -> Span {\n-        span.fresh_expansion(ExpnData {\n-            allow_internal_unstable,\n-            ..ExpnData::default(ExpnKind::Desugaring(reason), span, self.sess.edition(), None)\n-        })\n+        span.mark_with_reason(allow_internal_unstable, reason, self.sess.edition())\n     }\n \n     fn with_anonymous_lifetime_mode<R>("}, {"sha": "887e12b46f621e5f6a13e41b292f1865a3fa02b5", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/21b8f2ecde8995d51f3f01c434435d04857678b9/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b8f2ecde8995d51f3f01c434435d04857678b9/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=21b8f2ecde8995d51f3f01c434435d04857678b9", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::sync::{self, Lrc};\n use rustc_errors::{DiagnosticBuilder, ErrorReported};\n use rustc_parse::{self, nt_to_tokenstream, parser, MACRO_ARGUMENTS};\n use rustc_session::{parse::ParseSess, Limit, Session};\n-use rustc_span::def_id::{DefId, LOCAL_CRATE};\n+use rustc_span::def_id::DefId;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::{AstPass, ExpnData, ExpnId, ExpnKind};\n use rustc_span::source_map::SourceMap;\n@@ -842,19 +842,17 @@ impl SyntaxExtension {\n         descr: Symbol,\n         macro_def_id: Option<DefId>,\n     ) -> ExpnData {\n-        ExpnData {\n-            kind: ExpnKind::Macro(self.macro_kind(), descr),\n+        ExpnData::new(\n+            ExpnKind::Macro(self.macro_kind(), descr),\n             parent,\n             call_site,\n-            def_site: self.span,\n-            allow_internal_unstable: self.allow_internal_unstable.clone(),\n-            allow_internal_unsafe: self.allow_internal_unsafe,\n-            local_inner_macros: self.local_inner_macros,\n-            edition: self.edition,\n+            self.span,\n+            self.allow_internal_unstable.clone(),\n+            self.allow_internal_unsafe,\n+            self.local_inner_macros,\n+            self.edition,\n             macro_def_id,\n-            krate: LOCAL_CRATE,\n-            orig_id: None,\n-        }\n+        )\n     }\n }\n "}, {"sha": "1453627f6e1b150155918c4e55c0b4b2c3fe797b", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/21b8f2ecde8995d51f3f01c434435d04857678b9/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b8f2ecde8995d51f3f01c434435d04857678b9/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=21b8f2ecde8995d51f3f01c434435d04857678b9", "patch": "@@ -1020,15 +1020,16 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         // with exception of the derive container case which is not resolved and can get\n         // its expansion data immediately.\n         let expn_data = match &kind {\n-            InvocationKind::DeriveContainer { item, .. } => Some(ExpnData {\n-                parent: self.cx.current_expansion.id,\n-                ..ExpnData::default(\n+            InvocationKind::DeriveContainer { item, .. } => {\n+                let mut expn_data = ExpnData::default(\n                     ExpnKind::Macro(MacroKind::Attr, sym::derive),\n                     item.span(),\n                     self.cx.sess.parse_sess.edition,\n                     None,\n-                )\n-            }),\n+                );\n+                expn_data.parent = self.cx.current_expansion.id;\n+                Some(expn_data)\n+            }\n             _ => None,\n         };\n         let expn_id = ExpnId::fresh(expn_data);"}, {"sha": "df2f69df5200e16f3bb8c25f8bf54bb5e5b2ce91", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21b8f2ecde8995d51f3f01c434435d04857678b9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b8f2ecde8995d51f3f01c434435d04857678b9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=21b8f2ecde8995d51f3f01c434435d04857678b9", "patch": "@@ -742,11 +742,11 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n     }\n \n     fn visit_span(&mut self, span: &mut Span) {\n+        let mut expn_data =\n+            ExpnData::default(ExpnKind::Inlined, *span, self.tcx.sess.edition(), None);\n+        expn_data.def_site = self.body_span;\n         // Make sure that all spans track the fact that they were inlined.\n-        *span = self.callsite_span.fresh_expansion(ExpnData {\n-            def_site: self.body_span,\n-            ..ExpnData::default(ExpnKind::Inlined, *span, self.tcx.sess.edition(), None)\n-        });\n+        *span = self.callsite_span.fresh_expansion(expn_data);\n     }\n \n     fn visit_place(&mut self, place: &mut Place<'tcx>, context: PlaceContext, location: Location) {"}, {"sha": "27dc9e9ecea99aac6cb10f212075b16d5be8d5ef", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/21b8f2ecde8995d51f3f01c434435d04857678b9/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b8f2ecde8995d51f3f01c434435d04857678b9/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=21b8f2ecde8995d51f3f01c434435d04857678b9", "patch": "@@ -650,6 +650,20 @@ impl Span {\n             self.with_ctxt(data.apply_mark(SyntaxContext::root(), expn_id, transparency))\n         })\n     }\n+\n+    /// Reuses the span but adds information like the kind of the desugaring and features that are\n+    /// allowed inside this span.\n+    pub fn mark_with_reason(\n+        self,\n+        allow_internal_unstable: Option<Lrc<[Symbol]>>,\n+        reason: DesugaringKind,\n+        edition: Edition,\n+    ) -> Span {\n+        self.fresh_expansion(ExpnData {\n+            allow_internal_unstable,\n+            ..ExpnData::default(ExpnKind::Desugaring(reason), self, edition, None)\n+        })\n+    }\n }\n \n /// A subset of properties from both macro definition and macro call available through global data.\n@@ -699,21 +713,47 @@ pub struct ExpnData {\n     /// created locally - when our serialized metadata is decoded,\n     /// foreign `ExpnId`s will have their `ExpnData` looked up\n     /// from the crate specified by `Crate\n-    pub krate: CrateNum,\n+    krate: CrateNum,\n     /// The raw that this `ExpnData` had in its original crate.\n     /// An `ExpnData` can be created before being assigned an `ExpnId`,\n     /// so this might be `None` until `set_expn_data` is called\n     // This is used only for serialization/deserialization purposes:\n     // two `ExpnData`s that differ only in their `orig_id` should\n     // be considered equivalent.\n     #[stable_hasher(ignore)]\n-    pub orig_id: Option<u32>,\n+    orig_id: Option<u32>,\n }\n \n // This would require special handling of `orig_id` and `parent`\n impl !PartialEq for ExpnData {}\n \n impl ExpnData {\n+    pub fn new(\n+        kind: ExpnKind,\n+        parent: ExpnId,\n+        call_site: Span,\n+        def_site: Span,\n+        allow_internal_unstable: Option<Lrc<[Symbol]>>,\n+        allow_internal_unsafe: bool,\n+        local_inner_macros: bool,\n+        edition: Edition,\n+        macro_def_id: Option<DefId>,\n+    ) -> ExpnData {\n+        ExpnData {\n+            kind,\n+            parent,\n+            call_site,\n+            def_site,\n+            allow_internal_unstable,\n+            allow_internal_unsafe,\n+            local_inner_macros,\n+            edition,\n+            macro_def_id,\n+            krate: LOCAL_CRATE,\n+            orig_id: None,\n+        }\n+    }\n+\n     /// Constructs expansion data with default properties.\n     pub fn default(\n         kind: ExpnKind,"}]}