{"sha": "4e329ebab7bb313c66bc09e728d875352c5a10f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMzI5ZWJhYjdiYjMxM2M2NmJjMDllNzI4ZDg3NTM1MmM1YTEwZjk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-27T18:56:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-27T18:56:14Z"}, "message": "fix for latest rustc (#746)\n\nfix for latest rustc", "tree": {"sha": "d42abad2d46a137df5507874985e2ef45c224666", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d42abad2d46a137df5507874985e2ef45c224666"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e329ebab7bb313c66bc09e728d875352c5a10f9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc7DLOCRBK7hj4Ov3rIwAAdHIIAE+YCe5qUZcCgX2F5bbEoKXY\nAWnMhcZPdaRWzQ9D90PZAviTikzmdcM2qL0Z/WgiygM/PZdJIXKcgX9niXUt7bfT\n3TxQfSgiZTIwLuDJmsflIIVcokiKiH6qI5vDayWSyeIOcZ/CdtXNLuYQG2clcBpj\nOyVHzMF2bys0UYVLj7FJL1cSUVa6aW1LSr1UI3vYFbUOlI8w4U0sQcDFc1xSg5FM\nCZiAgoXaQEk/sDSf5WobKwHxON7sv8l9DhlX1eJJQeJtBmQ41ad7gAYeuZVkzFEc\nsMa5CnN1cazBdYkhrxb/oUMEznO0ELlJtBz4/Q6noigvxHwMO7XNvkOnUUDFPek=\n=neOh\n-----END PGP SIGNATURE-----\n", "payload": "tree d42abad2d46a137df5507874985e2ef45c224666\nparent 5fdcf523c49accaec6c1e91e4208302fcea3a406\nparent f10ab1991cc550dc0c5b5f636db535a0e4d1e21f\nauthor Ralf Jung <post@ralfj.de> 1558983374 +0200\ncommitter GitHub <noreply@github.com> 1558983374 +0200\n\nfix for latest rustc (#746)\n\nfix for latest rustc"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e329ebab7bb313c66bc09e728d875352c5a10f9", "html_url": "https://github.com/rust-lang/rust/commit/4e329ebab7bb313c66bc09e728d875352c5a10f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e329ebab7bb313c66bc09e728d875352c5a10f9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fdcf523c49accaec6c1e91e4208302fcea3a406", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fdcf523c49accaec6c1e91e4208302fcea3a406", "html_url": "https://github.com/rust-lang/rust/commit/5fdcf523c49accaec6c1e91e4208302fcea3a406"}, {"sha": "f10ab1991cc550dc0c5b5f636db535a0e4d1e21f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f10ab1991cc550dc0c5b5f636db535a0e4d1e21f", "html_url": "https://github.com/rust-lang/rust/commit/f10ab1991cc550dc0c5b5f636db535a0e4d1e21f"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "41821bcd73b78ea01faad4de95dc9c46026515a4", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e329ebab7bb313c66bc09e728d875352c5a10f9/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/4e329ebab7bb313c66bc09e728d875352c5a10f9/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=4e329ebab7bb313c66bc09e728d875352c5a10f9", "patch": "@@ -1 +1 @@\n-d35181ad8785fa958e43580a29a982afe02c728f\n+1a56ec4dae92538ab6e0ecf993c61f3b50ed77cf"}, {"sha": "528da92c20f0f44875a3bf0746a12844ac85376b", "filename": "src/operator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e329ebab7bb313c66bc09e728d875352c5a10f9/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e329ebab7bb313c66bc09e728d875352c5a10f9/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=4e329ebab7bb313c66bc09e728d875352c5a10f9", "patch": "@@ -158,8 +158,8 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                     // Dead allocations in miri cannot overlap with live allocations, but\n                     // on read hardware this can easily happen. Thus for comparisons we require\n                     // both pointers to be live.\n-                    self.memory().check_bounds_ptr(left, InboundsCheck::Live)?;\n-                    self.memory().check_bounds_ptr(right, InboundsCheck::Live)?;\n+                    self.memory().check_bounds_ptr(left, InboundsCheck::Live, CheckInAllocMsg::InboundsTest)?;\n+                    self.memory().check_bounds_ptr(right, InboundsCheck::Live, CheckInAllocMsg::InboundsTest)?;\n                     // Two in-bounds pointers, we can compare across allocations.\n                     left == right\n                 }\n@@ -183,7 +183,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                 if bits < 32 {\n                     // Test if the ptr is in-bounds. Then it cannot be NULL.\n                     // Even dangling pointers cannot be NULL.\n-                    if self.memory().check_bounds_ptr(ptr, InboundsCheck::MaybeDead).is_ok() {\n+                    if self.memory().check_bounds_ptr(ptr, InboundsCheck::MaybeDead, CheckInAllocMsg::NullPointerTest).is_ok() {\n                         return Ok(false);\n                     }\n                 }\n@@ -340,9 +340,9 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n         if let Scalar::Ptr(ptr) = ptr {\n             // Both old and new pointer must be in-bounds of a *live* allocation.\n             // (Of the same allocation, but that part is trivial with our representation.)\n-            self.memory().check_bounds_ptr(ptr, InboundsCheck::Live)?;\n+            self.memory().check_bounds_ptr(ptr, InboundsCheck::Live, CheckInAllocMsg::InboundsTest)?;\n             let ptr = ptr.signed_offset(offset, self)?;\n-            self.memory().check_bounds_ptr(ptr, InboundsCheck::Live)?;\n+            self.memory().check_bounds_ptr(ptr, InboundsCheck::Live, CheckInAllocMsg::InboundsTest)?;\n             Ok(Scalar::Ptr(ptr))\n         } else {\n             // An integer pointer. They can only be offset by 0, and we pretend there"}, {"sha": "8c46f7e1b2e902b3f672e2adb2cebb87a18479a0", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e329ebab7bb313c66bc09e728d875352c5a10f9/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e329ebab7bb313c66bc09e728d875352c5a10f9/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=4e329ebab7bb313c66bc09e728d875352c5a10f9", "patch": "@@ -10,7 +10,7 @@ use rustc::mir::RetagKind;\n \n use crate::{\n     EvalResult, InterpError, MiriEvalContext, HelpersEvalContextExt, Evaluator, MutValueVisitor,\n-    MemoryKind, MiriMemoryKind, RangeMap, Allocation, AllocationExtra,\n+    MemoryKind, MiriMemoryKind, RangeMap, Allocation, AllocationExtra, CheckInAllocMsg,\n     Pointer, Immediate, ImmTy, PlaceTy, MPlaceTy,\n };\n \n@@ -550,7 +550,7 @@ trait EvalContextPrivExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n \n         // Get the allocation. It might not be mutable, so we cannot use `get_mut`.\n         let alloc = this.memory().get(ptr.alloc_id)?;\n-        alloc.check_bounds(this, ptr, size)?;\n+        alloc.check_bounds(this, ptr, size, CheckInAllocMsg::InboundsTest)?;\n         // Update the stacks.\n         // Make sure that raw pointers and mutable shared references are reborrowed \"weak\":\n         // There could be existing unique pointers reborrowed from them that should remain valid!"}, {"sha": "b466093053689d9644876b421f5977be5b7550f6", "filename": "tests/compile-fail/out_of_bounds_ptr_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e329ebab7bb313c66bc09e728d875352c5a10f9/tests%2Fcompile-fail%2Fout_of_bounds_ptr_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e329ebab7bb313c66bc09e728d875352c5a10f9/tests%2Fcompile-fail%2Fout_of_bounds_ptr_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_ptr_1.rs?ref=4e329ebab7bb313c66bc09e728d875352c5a10f9", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: must be in-bounds and live at offset 5, but is outside bounds of allocation\n+// error-pattern: must be in-bounds at offset 5, but is outside bounds of allocation\n fn main() {\n     let v = [0i8; 4];\n     let x = &v as *const i8;"}]}