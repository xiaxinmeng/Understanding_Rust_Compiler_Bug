{"sha": "faf5d926ec21efb04d308fc71214e0afa55649d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZjVkOTI2ZWMyMWVmYjA0ZDMwOGZjNzEyMTRlMGFmYTU1NjQ5ZDk=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-07-01T22:05:50Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-03T17:55:19Z"}, "message": "Guide: functions\n\nJust a few words about functions and defining them.", "tree": {"sha": "b40351eaa897bc694a87943d7a84f0b1397f5e17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b40351eaa897bc694a87943d7a84f0b1397f5e17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faf5d926ec21efb04d308fc71214e0afa55649d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faf5d926ec21efb04d308fc71214e0afa55649d9", "html_url": "https://github.com/rust-lang/rust/commit/faf5d926ec21efb04d308fc71214e0afa55649d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faf5d926ec21efb04d308fc71214e0afa55649d9/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8877b81f2cccfbbd6720e9ef81a8238fd188a63e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8877b81f2cccfbbd6720e9ef81a8238fd188a63e", "html_url": "https://github.com/rust-lang/rust/commit/8877b81f2cccfbbd6720e9ef81a8238fd188a63e"}], "stats": {"total": 146, "additions": 146, "deletions": 0}, "files": [{"sha": "7ecfe7ce578ee2009c73975ffe28552f6713280b", "filename": "src/doc/guide.md", "status": "modified", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/faf5d926ec21efb04d308fc71214e0afa55649d9/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/faf5d926ec21efb04d308fc71214e0afa55649d9/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=faf5d926ec21efb04d308fc71214e0afa55649d9", "patch": "@@ -760,6 +760,152 @@ of Rust code. For that, we'll need our next concept: functions.\n \n ## Functions\n \n+You've already seen one function so far, the `main` function:\n+\n+```{rust}\n+fn main() {\n+}\n+```\n+\n+This is the simplest possible function declaration. As we mentioned before,\n+`fn` says 'this is a function,' followed by the name, some parenthesis because\n+this function takes no arguments, and then some curly braces to indicate the\n+body. Here's a function named `foo`:\n+\n+```{rust}\n+fn foo() {\n+}\n+```\n+\n+So, what about taking arguments? Here's a function that prints a number:\n+\n+```{rust}\n+fn print_number(x: int) {\n+    println!(\"x is: {}\", x);\n+}\n+```\n+\n+Here's a complete program that uses `print_number`:\n+\n+```{rust}\n+fn main() {\n+    print_number(5);\n+}\n+\n+fn print_number(x: int) {\n+    println!(\"x is: {}\", x);\n+}\n+```\n+\n+As you can see, function arguments work very similar to `let` declarations:\n+you add a type to the argument name, after a colon.\n+\n+Here's a complete program that adds two numbers together and prints them:\n+\n+```{rust}\n+fn main() {\n+    print_sum(5, 6);\n+}\n+\n+fn print_sum(x: int, y: int) {\n+    println!(\"sum is: {}\", x + y);\n+}\n+```\n+\n+You separate arguments with a comma, both when you call the function, as well\n+as when you declare it.\n+\n+Unlike `let`, you _must_ declare the types of function arguments. This does\n+not work:\n+\n+```{ignore}\n+fn print_number(x, y) {\n+    println!(\"x is: {}\", x + y);\n+}\n+```\n+\n+You get this error:\n+\n+```{ignore,notrust}\n+hello.rs:5:18: 5:19 error: expected `:` but found `,`\n+hello.rs:5 fn print_number(x, y) {\n+```\n+\n+This is a deliberate design decision. While full-program inference is possible,\n+languages which have it, like Haskell, often suggest that documenting your\n+types explicitly is a best-practice. We agree that forcing functions to declare\n+types while allowing for inference inside of function bodies is a wonderful\n+compromise between full inference and no inference.\n+\n+What about returning a value? Here's a function that adds one to an integer:\n+\n+```{rust}\n+fn add_one(x: int) -> int {\n+    x + 1\n+}\n+```\n+\n+Rust functions return exactly one value, and you declare the type after an\n+'arrow', which is a dash (`-`) followed by a greater-than sign (`>`).\n+\n+You'll note the lack of a semicolon here. If we added it in:\n+\n+```{ignore}\n+fn add_one(x: int) -> int {\n+    x + 1;\n+}\n+```\n+\n+We would get an error:\n+\n+```{ignore,notrust}\n+note: consider removing this semicolon:\n+     x + 1;\n+          ^\n+error: not all control paths return a value\n+fn add_one(x: int) -> int {\n+     x + 1;\n+}\n+```\n+\n+Remember our earlier discussions about semicolons and `()`? Our function claims\n+to return an `int`, but with a semicolon, it would return `()` instead. Rust\n+realizes this probably isn't what we want, and suggests removing the semicolon.\n+\n+This is very much like our `if` statement before: the result of the block\n+(`{}`) is the value of the expression. Other expression-oriented languages,\n+such as Ruby, work like this, but it's a bit unusual in the systems programming\n+world. When people first learn about this, they usually assume that it\n+introduces bugs. But because Rust's type system is so strong, and because unit\n+is its own unique type, we have never seen an issue where adding or removing a\n+semicolon in a return position would cause a bug.\n+\n+But what about early returns? Rust does have a keyword for that, `return`:\n+\n+```{rust}\n+fn foo(x: int) -> int {\n+    if x < 5 { return x; }\n+\n+    x + 1\n+}\n+```\n+\n+Using a `return` as the last line of a function works, but is considered poor\n+style:\n+\n+```{rust}\n+fn foo(x: int) -> int {\n+    if x < 5 { return x; }\n+\n+    return x + 1;\n+}\n+```\n+\n+There are some additional ways to define functions, but they involve features\n+that we haven't learned about yet, so let's just leave it at that for now.\n+\n+## Comments\n+\n return\n \n comments"}]}