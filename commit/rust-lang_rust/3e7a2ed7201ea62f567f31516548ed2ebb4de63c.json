{"sha": "3e7a2ed7201ea62f567f31516548ed2ebb4de63c", "node_id": "C_kwDOAAsO6NoAKDNlN2EyZWQ3MjAxZWE2MmY1NjdmMzE1MTY1NDhlZDJlYmI0ZGU2M2M", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-06-07T12:46:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-07T12:46:06Z"}, "message": "Merge pull request #281 from rust-lang/to-int-unchecked\n\nDeduplicate to_int_unchecked", "tree": {"sha": "044b110a6280a1d8100c7dcd3c4eb3885c23d5bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/044b110a6280a1d8100c7dcd3c4eb3885c23d5bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e7a2ed7201ea62f567f31516548ed2ebb4de63c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJin0iOCRBK7hj4Ov3rIwAA3wYIADGmFOM4G22xtBELc83ti972\n6ilVSVVTYRsC4smyfKWZCTIfwYAStAJgl41ug8laLyeBl/Mgke/3/gMf1OKAX5MZ\nhxepAMJ5Jt7eHZYkDnL6uesZZwQ+9+/gYU6E+WJSvVyts7n8dZcVo9UwviX4mfPm\n9olqGe1bLlyy/RpUtILLy5qCz0AnBu/GpmufcIjhMsiB3RAneedvsOQSoc+GfcPI\noPwkOBzmwxi+Hgtae/sze2WSGMZpTv8+XlhlnmC6QsLE878rlXjafvuujvyMhlop\nJgJqH5pFWVNhEuph8LuGXLKfkXtdBlffzBbP7uQBk/m61yHauhw14VHZn8nvbSI=\n=Mmsr\n-----END PGP SIGNATURE-----\n", "payload": "tree 044b110a6280a1d8100c7dcd3c4eb3885c23d5bb\nparent f237f133c1c0c0025ac3d162c07a36cb18112051\nparent 5562b02ff059fd519d59c1fb7873bdd386efc22e\nauthor Caleb Zulawski <caleb.zulawski@gmail.com> 1654605966 -0400\ncommitter GitHub <noreply@github.com> 1654605966 -0400\n\nMerge pull request #281 from rust-lang/to-int-unchecked\n\nDeduplicate to_int_unchecked"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7a2ed7201ea62f567f31516548ed2ebb4de63c", "html_url": "https://github.com/rust-lang/rust/commit/3e7a2ed7201ea62f567f31516548ed2ebb4de63c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e7a2ed7201ea62f567f31516548ed2ebb4de63c/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f237f133c1c0c0025ac3d162c07a36cb18112051", "url": "https://api.github.com/repos/rust-lang/rust/commits/f237f133c1c0c0025ac3d162c07a36cb18112051", "html_url": "https://github.com/rust-lang/rust/commit/f237f133c1c0c0025ac3d162c07a36cb18112051"}, {"sha": "5562b02ff059fd519d59c1fb7873bdd386efc22e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5562b02ff059fd519d59c1fb7873bdd386efc22e", "html_url": "https://github.com/rust-lang/rust/commit/5562b02ff059fd519d59c1fb7873bdd386efc22e"}], "stats": {"total": 68, "additions": 25, "deletions": 43}, "files": [{"sha": "b472aa3abe2102d2c2af709d7c252be6b6f83b52", "filename": "crates/core_simd/src/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e7a2ed7201ea62f567f31516548ed2ebb4de63c/crates%2Fcore_simd%2Fsrc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7a2ed7201ea62f567f31516548ed2ebb4de63c/crates%2Fcore_simd%2Fsrc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmod.rs?ref=3e7a2ed7201ea62f567f31516548ed2ebb4de63c", "patch": "@@ -14,7 +14,6 @@ mod lane_count;\n mod masks;\n mod ops;\n mod ord;\n-mod round;\n mod select;\n mod vector;\n mod vendor;"}, {"sha": "e111f3e0494767cdc235d3235b33d0d018d0f7f3", "filename": "crates/core_simd/src/round.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f237f133c1c0c0025ac3d162c07a36cb18112051/crates%2Fcore_simd%2Fsrc%2Fround.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f237f133c1c0c0025ac3d162c07a36cb18112051/crates%2Fcore_simd%2Fsrc%2Fround.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fround.rs?ref=f237f133c1c0c0025ac3d162c07a36cb18112051", "patch": "@@ -1,42 +0,0 @@\n-use crate::simd::intrinsics;\n-use crate::simd::{LaneCount, Simd, SimdElement, SupportedLaneCount};\n-use core::convert::FloatToInt;\n-\n-macro_rules! implement {\n-    {\n-        $type:ty\n-    } => {\n-        impl<const LANES: usize> Simd<$type, LANES>\n-        where\n-            LaneCount<LANES>: SupportedLaneCount,\n-        {\n-            /// Rounds toward zero and converts to the same-width integer type, assuming that\n-            /// the value is finite and fits in that type.\n-            ///\n-            /// # Safety\n-            /// The value must:\n-            ///\n-            /// * Not be NaN\n-            /// * Not be infinite\n-            /// * Be representable in the return type, after truncating off its fractional part\n-            ///\n-            /// If these requirements are infeasible or costly, consider using the safe function [cast],\n-            /// which saturates on conversion.\n-            ///\n-            /// [cast]: Simd::cast\n-            #[inline]\n-            pub unsafe fn to_int_unchecked<I>(self) -> Simd<I, LANES>\n-            where\n-                $type: FloatToInt<I>,\n-                I: SimdElement,\n-            {\n-                // Safety: `self` is a vector, and `FloatToInt` ensures the type can be casted to\n-                // an integer.\n-                unsafe { intrinsics::simd_cast(self) }\n-            }\n-        }\n-    }\n-}\n-\n-implement! { f32 }\n-implement! { f64 }"}, {"sha": "7433a695da928d7e5a42eb5bef4b50562553ad9f", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3e7a2ed7201ea62f567f31516548ed2ebb4de63c/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7a2ed7201ea62f567f31516548ed2ebb4de63c/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=3e7a2ed7201ea62f567f31516548ed2ebb4de63c", "patch": "@@ -217,6 +217,31 @@ where\n         unsafe { intrinsics::simd_as(self) }\n     }\n \n+    /// Rounds toward zero and converts to the same-width integer type, assuming that\n+    /// the value is finite and fits in that type.\n+    ///\n+    /// # Safety\n+    /// The value must:\n+    ///\n+    /// * Not be NaN\n+    /// * Not be infinite\n+    /// * Be representable in the return type, after truncating off its fractional part\n+    ///\n+    /// If these requirements are infeasible or costly, consider using the safe function [cast],\n+    /// which saturates on conversion.\n+    ///\n+    /// [cast]: Simd::cast\n+    #[inline]\n+    pub unsafe fn to_int_unchecked<I>(self) -> Simd<I, LANES>\n+    where\n+        T: core::convert::FloatToInt<I>,\n+        I: SimdElement,\n+    {\n+        // Safety: `self` is a vector, and `FloatToInt` ensures the type can be casted to\n+        // an integer.\n+        unsafe { intrinsics::simd_cast(self) }\n+    }\n+\n     /// Reads from potentially discontiguous indices in `slice` to construct a SIMD vector.\n     /// If an index is out-of-bounds, the lane is instead selected from the `or` vector.\n     ///"}]}