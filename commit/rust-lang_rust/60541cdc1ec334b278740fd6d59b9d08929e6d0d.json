{"sha": "60541cdc1ec334b278740fd6d59b9d08929e6d0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNTQxY2RjMWVjMzM0YjI3ODc0MGZkNmQ1OWI5ZDA4OTI5ZTZkMGQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-26T18:21:45Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-27T00:50:13Z"}, "message": "Test fixes and rebase conflicts", "tree": {"sha": "807a52a2c2ce80e7b77753367029cd9f5eca8658", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/807a52a2c2ce80e7b77753367029cd9f5eca8658"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60541cdc1ec334b278740fd6d59b9d08929e6d0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60541cdc1ec334b278740fd6d59b9d08929e6d0d", "html_url": "https://github.com/rust-lang/rust/commit/60541cdc1ec334b278740fd6d59b9d08929e6d0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60541cdc1ec334b278740fd6d59b9d08929e6d0d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62137b6d7976635c0c8271f14c5f09fe519d8ba9", "url": "https://api.github.com/repos/rust-lang/rust/commits/62137b6d7976635c0c8271f14c5f09fe519d8ba9", "html_url": "https://github.com/rust-lang/rust/commit/62137b6d7976635c0c8271f14c5f09fe519d8ba9"}], "stats": {"total": 106, "additions": 56, "deletions": 50}, "files": [{"sha": "987da903211170bac275d898a2da6b6d4223a878", "filename": "src/libcoretest/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Flibcoretest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Flibcoretest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fslice.rs?ref=60541cdc1ec334b278740fd6d59b9d08929e6d0d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::slice::{Found, NotFound};\n+use std::slice::BinarySearchResult::{Found, NotFound};\n \n #[test]\n fn binary_search_not_found() {"}, {"sha": "9891320f756f534fae431b4fe9acf26e44ce5357", "filename": "src/librustc/middle/borrowck/fragments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Ffragments.rs?ref=60541cdc1ec334b278740fd6d59b9d08929e6d0d", "patch": "@@ -277,8 +277,8 @@ pub fn fixup_fragment_sets<'tcx>(this: &MoveData<'tcx>, tcx: &ty::ctxt<'tcx>) {\n \n     fn non_member(elem: MovePathIndex, set: &[MovePathIndex]) -> bool {\n         match set.binary_search_elem(&elem) {\n-            slice::Found(_) => false,\n-            slice::NotFound(_) => true,\n+            slice::BinarySearchResult::Found(_) => false,\n+            slice::BinarySearchResult::NotFound(_) => true,\n         }\n     }\n }"}, {"sha": "41b06923e828367b17a40a8e9844bb8002aa4f8a", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=60541cdc1ec334b278740fd6d59b9d08929e6d0d", "patch": "@@ -72,8 +72,8 @@ impl CodeExtent {\n     }\n }\n \n-The region maps encode information about region relationships.\n-\n+/// The region maps encode information about region relationships.\n+///\n /// - `scope_map` maps from a scope id to the enclosing scope id; this is\n ///   usually corresponding to the lexical nesting, though in the case of\n ///   closures the parent scope is the innermost conditional expression or repeating"}, {"sha": "0a5ae10dd014214c5ddc10c114fe653f5af6b3d8", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=60541cdc1ec334b278740fd6d59b9d08929e6d0d", "patch": "@@ -741,7 +741,7 @@ fn ast_ty_to_trait_ref<'tcx,AC,RS>(this: &AC,\n \n                 _ => {\n                     span_note!(this.tcx().sess, ty.span,\n-                               \"perhaps you forget parentheses? (per RFC 248)\");\n+                               \"perhaps you forgot parentheses? (per RFC 248)\");\n                 }\n             }\n             Err(ErrorReported)"}, {"sha": "5b99151c5328e59bb0f0f3fd2b0ae0c8b8285800", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=60541cdc1ec334b278740fd6d59b9d08929e6d0d", "patch": "@@ -35,7 +35,8 @@ use std::io::File;\n use std::io;\n use std::rc::Rc;\n use externalfiles::ExternalHtml;\n-use serialize::{json, Decodable, Encodable};\n+use serialize::{Decodable, Encodable};\n+use serialize::json::{mod, Json};\n \n // reexported from `clean` so it can be easily updated with the mod itself\n pub use clean::SCHEMA_VERSION;\n@@ -425,11 +426,11 @@ fn json_input(input: &str) -> Result<Output, String> {\n     };\n     match json::from_reader(&mut input) {\n         Err(s) => Err(s.to_string()),\n-        Ok(json::Object(obj)) => {\n+        Ok(Json::Object(obj)) => {\n             let mut obj = obj;\n             // Make sure the schema is what we expect\n             match obj.remove(&\"schema\".to_string()) {\n-                Some(json::String(version)) => {\n+                Some(Json::String(version)) => {\n                     if version.as_slice() != SCHEMA_VERSION {\n                         return Err(format!(\n                                 \"sorry, but I only understand version {}\",\n@@ -468,7 +469,7 @@ fn json_output(krate: clean::Crate, res: Vec<plugins::PluginJson> ,\n     //   \"plugins\": { output of plugins ... }\n     // }\n     let mut json = std::collections::TreeMap::new();\n-    json.insert(\"schema\".to_string(), json::String(SCHEMA_VERSION.to_string()));\n+    json.insert(\"schema\".to_string(), Json::String(SCHEMA_VERSION.to_string()));\n     let plugins_json = res.into_iter()\n                           .filter_map(|opt| {\n                               match opt {\n@@ -495,8 +496,8 @@ fn json_output(krate: clean::Crate, res: Vec<plugins::PluginJson> ,\n     };\n \n     json.insert(\"crate\".to_string(), crate_json);\n-    json.insert(\"plugins\".to_string(), json::Object(plugins_json));\n+    json.insert(\"plugins\".to_string(), Json::Object(plugins_json));\n \n     let mut file = try!(File::create(&dst));\n-    json::Object(json).to_writer(&mut file)\n+    Json::Object(json).to_writer(&mut file)\n }"}, {"sha": "8b252da6715b3fa8ff0afadf4d61b5519dd8eb81", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=60541cdc1ec334b278740fd6d59b9d08929e6d0d", "patch": "@@ -113,8 +113,7 @@ for custom mappings.\n \n ```rust\n extern crate serialize;\n-use serialize::json::ToJson;\n-use serialize::json;\n+use serialize::json::{mod, ToJson, Json};\n \n // A custom data structure\n struct ComplexNum {\n@@ -125,7 +124,7 @@ struct ComplexNum {\n // JSON value representation\n impl ToJson for ComplexNum {\n     fn to_json(&self) -> json::Json {\n-        json::String(format!(\"{}+{}i\", self.a, self.b))\n+        Json::String(format!(\"{}+{}i\", self.a, self.b))\n     }\n }\n \n@@ -154,8 +153,7 @@ fn main() {\n ```rust\n extern crate serialize;\n use std::collections::TreeMap;\n-use serialize::json::ToJson;\n-use serialize::json;\n+use serialize::json::{mod, ToJson, Json};\n \n // Only generate `Decodable` trait implementation\n #[deriving(Decodable)]\n@@ -173,7 +171,7 @@ impl ToJson for TestStruct {\n         d.insert(\"data_int\".to_string(), self.data_int.to_json());\n         d.insert(\"data_str\".to_string(), self.data_str.to_json());\n         d.insert(\"data_vector\".to_string(), self.data_vector.to_json());\n-        json::Object(d)\n+        Json::Object(d)\n     }\n }\n \n@@ -184,7 +182,7 @@ fn main() {\n         data_str: \"toto\".to_string(),\n         data_vector: vec![2,3,4,5],\n     };\n-    let json_obj: json::Json = input_data.to_json();\n+    let json_obj: Json = input_data.to_json();\n     let json_str: String = json_obj.to_string();\n \n     // Deserialize like before"}, {"sha": "12ca80bfaab094351c4ea9940fc8f2804669b166", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=60541cdc1ec334b278740fd6d59b9d08929e6d0d", "patch": "@@ -205,11 +205,12 @@ macro_rules! debug_assert_eq(\n ///\n /// ```rust\n /// fn foo(x: Option<int>) {\n-///    match x {\n-///     Some(n) if n >= 0 => println!(\"Some(Non-negative)\"),\n-///     Some(n) if n <  0 => println!(\"Some(Negative)\"),\n-///     Some(_)           => unreachable!(), // compile error if commented out\n-///     None              => println!(\"None\")\n+///     match x {\n+///         Some(n) if n >= 0 => println!(\"Some(Non-negative)\"),\n+///         Some(n) if n <  0 => println!(\"Some(Negative)\"),\n+///         Some(_)           => unreachable!(), // compile error if commented out\n+///         None              => println!(\"None\")\n+///     }\n /// }\n /// ```\n ///"}, {"sha": "3fca110a881c841a5331fbd4601981a74ddb22a6", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=60541cdc1ec334b278740fd6d59b9d08929e6d0d", "patch": "@@ -17,12 +17,12 @@ use parse::token::*;\n use parse::token;\n use ptr::P;\n \n-//!  Quasiquoting works via token trees.\n-//!\n-//!  This is registered as a set of expression syntax extension called quote!\n-//!  that lifts its argument token-tree to an AST representing the\n-//!  construction of the same token tree, with token::SubstNt interpreted\n-//!  as antiquotes (splices).\n+///  Quasiquoting works via token trees.\n+///\n+///  This is registered as a set of expression syntax extension called quote!\n+///  that lifts its argument token-tree to an AST representing the\n+///  construction of the same token tree, with token::SubstNt interpreted\n+///  as antiquotes (splices).\n \n pub mod rt {\n     use ast;"}, {"sha": "6556ba3864c86e4ae17902b9c36d3d17c5d531e7", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=60541cdc1ec334b278740fd6d59b9d08929e6d0d", "patch": "@@ -1106,9 +1106,9 @@ fn calc_result(desc: &TestDesc, task_succeeded: bool) -> TestResult {\n impl ToJson for Metric {\n     fn to_json(&self) -> json::Json {\n         let mut map = TreeMap::new();\n-        map.insert(\"value\".to_string(), json::F64(self.value));\n-        map.insert(\"noise\".to_string(), json::F64(self.noise));\n-        json::Object(map)\n+        map.insert(\"value\".to_string(), json::Json::F64(self.value));\n+        map.insert(\"noise\".to_string(), json::Json::F64(self.noise));\n+        json::Json::Object(map)\n     }\n }\n "}, {"sha": "92b5a69a99fe01f6f1905221b642618e50be5e90", "filename": "src/libunicode/normalize.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Flibunicode%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Flibunicode%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fnormalize.rs?ref=60541cdc1ec334b278740fd6d59b9d08929e6d0d", "patch": "@@ -25,11 +25,11 @@ fn bsearch_table<T>(c: char, r: &'static [(char, &'static [T])]) -> Option<&'sta\n         else if val < c { Less }\n         else { Greater }\n     }) {\n-        slice::Found(idx) => {\n+        slice::BinarySearchResult::Found(idx) => {\n             let (_, result) = r[idx];\n             Some(result)\n         }\n-        slice::NotFound(_) => None\n+        slice::BinarySearchResult::NotFound(_) => None\n     }\n }\n \n@@ -88,11 +88,11 @@ pub fn compose(a: char, b: char) -> Option<char> {\n                     else if val < b { Less }\n                     else { Greater }\n                 }) {\n-                    slice::Found(idx) => {\n+                    slice::BinarySearchResult::Found(idx) => {\n                         let (_, result) = candidates[idx];\n                         Some(result)\n                     }\n-                    slice::NotFound(_) => None\n+                    slice::BinarySearchResult::NotFound(_) => None\n                 }\n             }\n         }"}, {"sha": "7cece6701dc85c0367362ec64ca365ca7a8d0a26", "filename": "src/libunicode/tables.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Flibunicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Flibunicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Ftables.rs?ref=60541cdc1ec334b278740fd6d59b9d08929e6d0d", "patch": "@@ -6249,11 +6249,11 @@ pub mod normalization {\n             else if hi < c { Less }\n             else { Greater }\n         }) {\n-            slice::Found(idx) => {\n+            slice::BinarySearchResult::Found(idx) => {\n                 let (_, _, result) = r[idx];\n                 result\n             }\n-            slice::NotFound(_) => 0\n+            slice::BinarySearchResult::NotFound(_) => 0\n         }\n     }\n \n@@ -6392,8 +6392,8 @@ pub mod conversions {\n             else if key < c { Less }\n             else { Greater }\n         }) {\n-            slice::Found(i) => Some(i),\n-            slice::NotFound(_) => None,\n+            slice::BinarySearchResult::Found(i) => Some(i),\n+            slice::BinarySearchResult::NotFound(_) => None,\n         }\n     }\n \n@@ -6945,11 +6945,11 @@ pub mod charwidth {\n             else if hi < c { Less }\n             else { Greater }\n         }) {\n-            slice::Found(idx) => {\n+            slice::BinarySearchResult::Found(idx) => {\n                 let (_, _, r_ncjk, r_cjk) = r[idx];\n                 if is_cjk { r_cjk } else { r_ncjk }\n             }\n-            slice::NotFound(_) => 1\n+            slice::BinarySearchResult::NotFound(_) => 1\n         }\n     }\n \n@@ -7160,11 +7160,11 @@ pub mod grapheme {\n             else if hi < c { Less }\n             else { Greater }\n         }) {\n-            slice::Found(idx) => {\n+            slice::BinarySearchResult::Found(idx) => {\n                 let (_, _, cat) = r[idx];\n                 cat\n             }\n-            slice::NotFound(_) => GC_Any\n+            slice::BinarySearchResult::NotFound(_) => GC_Any\n         }\n     }\n "}, {"sha": "ff3512ad8e72a6e763d9cac9cd2065f19b5c834d", "filename": "src/test/compile-fail/hrtb-precedence-of-plus-error-message.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Ftest%2Fcompile-fail%2Fhrtb-precedence-of-plus-error-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Ftest%2Fcompile-fail%2Fhrtb-precedence-of-plus-error-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-precedence-of-plus-error-message.rs?ref=60541cdc1ec334b278740fd6d59b9d08929e6d0d", "patch": "@@ -30,6 +30,7 @@ struct Foo<'a> {\n     d: fn() -> Bar+'a,\n         //~^ ERROR E0171\n         //~^^ NOTE perhaps you forgot parentheses\n+        //~^^^ WARN deprecated syntax\n }\n \n fn main() { }"}, {"sha": "88e6de6d3e6ff6fb93d8aef6bd74bf0cf616f804", "filename": "src/test/run-pass/hrtb-precedence-of-plus-where-clause.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus-where-clause.rs?ref=60541cdc1ec334b278740fd6d59b9d08929e6d0d", "patch": "@@ -13,10 +13,15 @@\n // Test that `F : Fn(int) -> int + Send` is interpreted as two\n // distinct bounds on `F`.\n \n-fn foo<F>(f: F)\n+fn foo1<F>(f: F)\n     where F : FnOnce(int) -> int + Send\n {\n     bar(f);\n+}\n+\n+fn foo2<F>(f: F)\n+    where F : FnOnce(int) -> int + Send\n+{\n     baz(f);\n }\n "}, {"sha": "ec19b95ab1a48a5bd7ca936428160ab2349555f8", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60541cdc1ec334b278740fd6d59b9d08929e6d0d/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=60541cdc1ec334b278740fd6d59b9d08929e6d0d", "patch": "@@ -13,7 +13,7 @@ extern crate collections;\n extern crate serialize;\n \n use std::collections::HashMap;\n-use serialize::json;\n+use serialize::json::{mod, Json};\n use std::option;\n \n enum object {\n@@ -24,7 +24,7 @@ enum object {\n fn lookup(table: json::Object, key: String, default: String) -> String\n {\n     match table.find(&key.to_string()) {\n-        option::Some(&json::String(ref s)) => {\n+        option::Some(&Json::String(ref s)) => {\n             s.to_string()\n         }\n         option::Some(value) => {\n@@ -40,7 +40,7 @@ fn lookup(table: json::Object, key: String, default: String) -> String\n fn add_interface(_store: int, managed_ip: String, data: json::Json) -> (String, object)\n {\n     match &data {\n-        &json::Object(ref interface) => {\n+        &Json::Object(ref interface) => {\n             let name = lookup(interface.clone(),\n                               \"ifDescr\".to_string(),\n                               \"\".to_string());\n@@ -59,7 +59,7 @@ fn add_interfaces(store: int, managed_ip: String, device: HashMap<String, json::\n -> Vec<(String, object)> {\n     match device[\"interfaces\".to_string()]\n     {\n-        json::Array(ref interfaces) =>\n+        Json::Array(ref interfaces) =>\n         {\n           interfaces.iter().map(|interface| {\n                 add_interface(store, managed_ip.clone(), (*interface).clone())"}]}