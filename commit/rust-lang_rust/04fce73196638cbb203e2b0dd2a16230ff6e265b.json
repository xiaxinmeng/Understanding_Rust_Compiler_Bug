{"sha": "04fce73196638cbb203e2b0dd2a16230ff6e265b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ZmNlNzMxOTY2MzhjYmIyMDNlMmIwZGQyYTE2MjMwZmY2ZTI2NWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-11T06:38:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-11T06:38:22Z"}, "message": "Auto merge of #82641 - camelid:lang-item-docs, r=jyn514\n\nImprove lang item generated docs\n\ncc https://rust-lang.zulipchat.com/#narrow/stream/146229-wg-secure-code/topic/Is.20.60core.60.20part.20of.20the.20compiler.3F/near/226738260\n\nr? `@jyn514`", "tree": {"sha": "5aa735ab951c5172c5fe6f7963b5c0f5a92667b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5aa735ab951c5172c5fe6f7963b5c0f5a92667b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04fce73196638cbb203e2b0dd2a16230ff6e265b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04fce73196638cbb203e2b0dd2a16230ff6e265b", "html_url": "https://github.com/rust-lang/rust/commit/04fce73196638cbb203e2b0dd2a16230ff6e265b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04fce73196638cbb203e2b0dd2a16230ff6e265b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3ac52646f7591a811fa9bf55995b24fd17ece08", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3ac52646f7591a811fa9bf55995b24fd17ece08", "html_url": "https://github.com/rust-lang/rust/commit/b3ac52646f7591a811fa9bf55995b24fd17ece08"}, {"sha": "ab42f96cff0aa4264d72d8bc76b810b2a0046653", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab42f96cff0aa4264d72d8bc76b810b2a0046653", "html_url": "https://github.com/rust-lang/rust/commit/ab42f96cff0aa4264d72d8bc76b810b2a0046653"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "48dfbba7504ef741578cb019f0a7a415aefdb22d", "filename": "compiler/rustc_data_structures/src/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04fce73196638cbb203e2b0dd2a16230ff6e265b/compiler%2Frustc_data_structures%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fce73196638cbb203e2b0dd2a16230ff6e265b/compiler%2Frustc_data_structures%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fmacros.rs?ref=04fce73196638cbb203e2b0dd2a16230ff6e265b", "patch": "@@ -9,11 +9,11 @@ macro_rules! static_assert_size {\n #[macro_export]\n macro_rules! enum_from_u32 {\n     ($(#[$attr:meta])* pub enum $name:ident {\n-        $($variant:ident = $e:expr,)*\n+        $($(#[$var_attr:meta])* $variant:ident = $e:expr,)*\n     }) => {\n         $(#[$attr])*\n         pub enum $name {\n-            $($variant = $e),*\n+            $($(#[$var_attr])* $variant = $e),*\n         }\n \n         impl $name {\n@@ -26,11 +26,11 @@ macro_rules! enum_from_u32 {\n         }\n     };\n     ($(#[$attr:meta])* pub enum $name:ident {\n-        $($variant:ident,)*\n+        $($(#[$var_attr:meta])* $variant:ident,)*\n     }) => {\n         $(#[$attr])*\n         pub enum $name {\n-            $($variant,)*\n+            $($(#[$var_attr])* $variant,)*\n         }\n \n         impl $name {"}, {"sha": "498000db50f436a854a9c6e86de2180272aebea5", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/04fce73196638cbb203e2b0dd2a16230ff6e265b/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fce73196638cbb203e2b0dd2a16230ff6e265b/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=04fce73196638cbb203e2b0dd2a16230ff6e265b", "patch": "@@ -38,27 +38,34 @@ macro_rules! expand_group {\n // So you probably just want to nip down to the end.\n macro_rules! language_item_table {\n     (\n-        $( $variant:ident $($group:expr)?, $name:expr, $method:ident, $target:expr; )*\n+        $( $(#[$attr:meta])* $variant:ident $($group:expr)?, $module:ident :: $name:ident, $method:ident, $target:expr; )*\n     ) => {\n \n         enum_from_u32! {\n             /// A representation of all the valid language items in Rust.\n             #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable)]\n             pub enum LangItem {\n-                $($variant,)*\n+                $(\n+                    #[doc = concat!(\"The `\", stringify!($name), \"` lang item.\")]\n+                    ///\n+                    $(#[$attr])*\n+                    $variant,\n+                )*\n             }\n         }\n \n         impl LangItem {\n             /// Returns the `name` symbol in `#[lang = \"$name\"]`.\n-            /// For example, `LangItem::EqTraitLangItem`,\n-            /// that is `#[lang = \"eq\"]` would result in `sym::eq`.\n+            /// For example, [`LangItem::PartialEq`]`.name()`\n+            /// would result in [`sym::eq`] since it is `#[lang = \"eq\"]`.\n             pub fn name(self) -> Symbol {\n                 match self {\n-                    $( LangItem::$variant => $name, )*\n+                    $( LangItem::$variant => $module::$name, )*\n                 }\n             }\n \n+            /// The [group](LangItemGroup) that this lang item belongs to,\n+            /// or `None` if it doesn't belong to a group.\n             pub fn group(self) -> Option<LangItemGroup> {\n                 use LangItemGroup::*;\n                 match self {\n@@ -67,15 +74,17 @@ macro_rules! language_item_table {\n             }\n         }\n \n+        /// All of the language items, defined or not.\n+        /// Defined lang items can come from the current crate or its dependencies.\n         #[derive(HashStable_Generic, Debug)]\n         pub struct LanguageItems {\n-            /// Mappings from lang items to their possibly found `DefId`s.\n-            /// The index corresponds to the order in `LangItem`.\n+            /// Mappings from lang items to their possibly found [`DefId`]s.\n+            /// The index corresponds to the order in [`LangItem`].\n             pub items: Vec<Option<DefId>>,\n             /// Lang items that were not found during collection.\n             pub missing: Vec<LangItem>,\n-            /// Mapping from `LangItemGroup` discriminants to all\n-            /// `DefId`s of lang items in that group.\n+            /// Mapping from [`LangItemGroup`] discriminants to all\n+            /// [`DefId`]s of lang items in that group.\n             pub groups: [Vec<DefId>; NUM_GROUPS],\n         }\n \n@@ -103,14 +112,13 @@ macro_rules! language_item_table {\n                 self.items[it as usize].ok_or_else(|| format!(\"requires `{}` lang_item\", it.name()))\n             }\n \n+            /// Returns the [`DefId`]s of all lang items in a group.\n             pub fn group(&self, group: LangItemGroup) -> &[DefId] {\n                 self.groups[group as usize].as_ref()\n             }\n \n             $(\n-                /// Returns the corresponding `DefId` for the lang item if it\n-                /// exists.\n-                #[allow(dead_code)]\n+                #[doc = concat!(\"Returns the [`DefId`] of the `\", stringify!($name), \"` lang item if it is defined.\")]\n                 pub fn $method(&self) -> Option<DefId> {\n                     self.items[LangItem::$variant as usize]\n                 }\n@@ -120,7 +128,7 @@ macro_rules! language_item_table {\n         /// A mapping from the name of the lang item to its order and the form it must be of.\n         pub static ITEM_REFS: SyncLazy<FxHashMap<Symbol, (usize, Target)>> = SyncLazy::new(|| {\n             let mut item_refs = FxHashMap::default();\n-            $( item_refs.insert($name, (LangItem::$variant as usize, $target)); )*\n+            $( item_refs.insert($module::$name, (LangItem::$variant as usize, $target)); )*\n             item_refs\n         });\n \n@@ -140,7 +148,7 @@ impl<CTX> HashStable<CTX> for LangItem {\n ///\n /// About the `check_name` argument: passing in a `Session` would be simpler,\n /// because then we could call `Session::check_name` directly. But we want to\n-/// avoid the need for `librustc_hir` to depend on `librustc_session`, so we\n+/// avoid the need for `rustc_hir` to depend on `rustc_session`, so we\n /// use a closure instead.\n pub fn extract<'a, F>(check_name: F, attrs: &'a [ast::Attribute]) -> Option<(Symbol, Span)>\n where\n@@ -190,15 +198,15 @@ language_item_table! {\n \n     Sized,                   sym::sized,               sized_trait,                Target::Trait;\n     Unsize,                  sym::unsize,              unsize_trait,               Target::Trait;\n-    // Trait injected by #[derive(PartialEq)], (i.e. \"Partial EQ\").\n+    /// Trait injected by `#[derive(PartialEq)]`, (i.e. \"Partial EQ\").\n     StructuralPeq,           sym::structural_peq,      structural_peq_trait,       Target::Trait;\n-    // Trait injected by #[derive(Eq)], (i.e. \"Total EQ\"; no, I will not apologize).\n+    /// Trait injected by `#[derive(Eq)]`, (i.e. \"Total EQ\"; no, I will not apologize).\n     StructuralTeq,           sym::structural_teq,      structural_teq_trait,       Target::Trait;\n     Copy,                    sym::copy,                copy_trait,                 Target::Trait;\n     Clone,                   sym::clone,               clone_trait,                Target::Trait;\n     Sync,                    sym::sync,                sync_trait,                 Target::Trait;\n     DiscriminantKind,        sym::discriminant_kind,   discriminant_kind_trait,    Target::Trait;\n-    // The associated item of `trait DiscriminantKind`.\n+    /// The associated item of the [`DiscriminantKind`] trait.\n     Discriminant,            sym::discriminant_type,   discriminant_type,          Target::AssocTy;\n \n     PointeeTrait,            sym::pointee_trait,       pointee_trait,              Target::Trait;\n@@ -273,7 +281,7 @@ language_item_table! {\n     PanicInfo,               sym::panic_info,          panic_info,                 Target::Struct;\n     PanicLocation,           sym::panic_location,      panic_location,             Target::Struct;\n     PanicImpl,               sym::panic_impl,          panic_impl,                 Target::Fn;\n-    // libstd panic entry point. Necessary for const eval to be able to catch it\n+    /// libstd panic entry point. Necessary for const eval to be able to catch it\n     BeginPanic,              sym::begin_panic,         begin_panic_fn,             Target::Fn;\n \n     ExchangeMalloc,          sym::exchange_malloc,     exchange_malloc_fn,         Target::Fn;\n@@ -295,7 +303,7 @@ language_item_table! {\n \n     MaybeUninit,             sym::maybe_uninit,        maybe_uninit,               Target::Union;\n \n-    // Align offset for stride != 1; must not panic.\n+    /// Align offset for stride != 1; must not panic.\n     AlignOffset,             sym::align_offset,        align_offset_fn,            Target::Fn;\n \n     Termination,             sym::termination,         termination,                Target::Trait;"}, {"sha": "45bb911130960784d427ac9f6eb102a60f7d28f3", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04fce73196638cbb203e2b0dd2a16230ff6e265b/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fce73196638cbb203e2b0dd2a16230ff6e265b/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=04fce73196638cbb203e2b0dd2a16230ff6e265b", "patch": "@@ -5,6 +5,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(const_fn)] // For the unsizing cast on `&[]`\n #![feature(const_panic)]\n+#![feature(extended_key_value_attributes)]\n #![feature(in_band_lifetimes)]\n #![feature(once_cell)]\n #![feature(or_patterns)]"}]}