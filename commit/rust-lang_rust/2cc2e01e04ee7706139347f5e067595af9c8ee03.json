{"sha": "2cc2e01e04ee7706139347f5e067595af9c8ee03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYzJlMDFlMDRlZTc3MDYxMzkzNDdmNWUwNjc1OTVhZjljOGVlMDM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-08-22T21:43:30Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-08-23T18:20:58Z"}, "message": "Add missing fmt examples", "tree": {"sha": "d83fc725fdb45a5b9af942db1a35d45e066ddd10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d83fc725fdb45a5b9af942db1a35d45e066ddd10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cc2e01e04ee7706139347f5e067595af9c8ee03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cc2e01e04ee7706139347f5e067595af9c8ee03", "html_url": "https://github.com/rust-lang/rust/commit/2cc2e01e04ee7706139347f5e067595af9c8ee03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cc2e01e04ee7706139347f5e067595af9c8ee03/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf1e461173e3936e4014cc951dfbdd7d9ec9190b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf1e461173e3936e4014cc951dfbdd7d9ec9190b", "html_url": "https://github.com/rust-lang/rust/commit/bf1e461173e3936e4014cc951dfbdd7d9ec9190b"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "6493f5b39a7d736720256e5214194582c3b93e87", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2cc2e01e04ee7706139347f5e067595af9c8ee03/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc2e01e04ee7706139347f5e067595af9c8ee03/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=2cc2e01e04ee7706139347f5e067595af9c8ee03", "patch": "@@ -1132,6 +1132,36 @@ impl<'a> Formatter<'a> {\n     ///\n     /// This function will correctly account for the flags provided as well as\n     /// the minimum width. It will not take precision into account.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo { nb: i32 };\n+    ///\n+    /// impl Foo {\n+    ///     fn new(nb: i32) -> Foo {\n+    ///         Foo {\n+    ///             nb,\n+    ///         }\n+    ///     }\n+    /// }\n+    ///\n+    /// impl fmt::Display for Foo {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///         // We need to remove \"-\" from the number output.\n+    ///         let tmp = self.nb.abs().to_string();\n+    ///\n+    ///         formatter.pad_integral(self.nb > 0, \"Foo \", &tmp)\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(&format!(\"{}\", Foo::new(2)), \"2\");\n+    /// assert_eq!(&format!(\"{}\", Foo::new(-1)), \"-1\");\n+    /// assert_eq!(&format!(\"{:#}\", Foo::new(-1)), \"-Foo 1\");\n+    /// assert_eq!(&format!(\"{:0>#8}\", Foo::new(-1)), \"00-Foo 1\");\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn pad_integral(&mut self,\n                         is_nonnegative: bool,\n@@ -1381,12 +1411,48 @@ impl<'a> Formatter<'a> {\n \n     /// Writes some data to the underlying buffer contained within this\n     /// formatter.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo;\n+    ///\n+    /// impl fmt::Display for Foo {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///         formatter.write_str(\"Foo\")\n+    ///         // This is equivalent to:\n+    ///         // write!(formatter, \"Foo\")\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(&format!(\"{}\", Foo), \"Foo\");\n+    /// assert_eq!(&format!(\"{:0>8}\", Foo), \"Foo\");\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn write_str(&mut self, data: &str) -> Result {\n         self.buf.write_str(data)\n     }\n \n     /// Writes some formatted information into this instance.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(i32);\n+    ///\n+    /// impl fmt::Display for Foo {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///         formatter.write_fmt(format_args!(\"Foo {}\", self.0))\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(&format!(\"{}\", Foo(-1)), \"Foo -1\");\n+    /// assert_eq!(&format!(\"{:0>8}\", Foo(2)), \"Foo 2\");\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn write_fmt(&mut self, fmt: Arguments) -> Result {\n         write(self.buf, fmt)"}]}