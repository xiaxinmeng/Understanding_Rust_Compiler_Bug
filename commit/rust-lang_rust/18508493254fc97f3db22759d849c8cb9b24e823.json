{"sha": "18508493254fc97f3db22759d849c8cb9b24e823", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NTA4NDkzMjU0ZmM5N2YzZGIyMjc1OWQ4NDljOGNiOWIyNGU4MjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-20T13:20:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-20T13:20:18Z"}, "message": "internal: prep to 2021 edition", "tree": {"sha": "9c9ec5f31830a28512225dadd0c3efb55a67826a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c9ec5f31830a28512225dadd0c3efb55a67826a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18508493254fc97f3db22759d849c8cb9b24e823", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18508493254fc97f3db22759d849c8cb9b24e823", "html_url": "https://github.com/rust-lang/rust/commit/18508493254fc97f3db22759d849c8cb9b24e823", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18508493254fc97f3db22759d849c8cb9b24e823/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fbe1c99342b7f783f5122f3d59aa49d6c7a3231", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fbe1c99342b7f783f5122f3d59aa49d6c7a3231", "html_url": "https://github.com/rust-lang/rust/commit/2fbe1c99342b7f783f5122f3d59aa49d6c7a3231"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "9c0f3093e1edd3f7107eee3e91285f81351f5f98", "filename": ".github/workflows/ci.yaml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18508493254fc97f3db22759d849c8cb9b24e823/.github%2Fworkflows%2Fci.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/18508493254fc97f3db22759d849c8cb9b24e823/.github%2Fworkflows%2Fci.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yaml?ref=18508493254fc97f3db22759d849c8cb9b24e823", "patch": "@@ -12,7 +12,7 @@ env:\n   CARGO_NET_RETRY: 10\n   CI: 1\n   RUST_BACKTRACE: short\n-  RUSTFLAGS: \"-D warnings -W unreachable-pub\"\n+  RUSTFLAGS: \"-D warnings -W unreachable-pub -W rust-2021-compatibility\"\n   RUSTUP_MAX_RETRIES: 10\n \n jobs:"}, {"sha": "4ec3e10f497b4461088178f55ac24c9284fa802f", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/18508493254fc97f3db22759d849c8cb9b24e823/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18508493254fc97f3db22759d849c8cb9b24e823/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=18508493254fc97f3db22759d849c8cb9b24e823", "patch": "@@ -547,10 +547,10 @@ impl InFile<SyntaxToken> {\n         self,\n         db: &dyn db::AstDatabase,\n     ) -> impl Iterator<Item = InFile<SyntaxNode>> + '_ {\n-        self.value\n-            .parent()\n-            .into_iter()\n-            .flat_map(move |parent| InFile::new(self.file_id, parent).ancestors_with_macros(db))\n+        self.value.parent().into_iter().flat_map({\n+            let file_id = self.file_id;\n+            move |parent| InFile::new(file_id, parent).ancestors_with_macros(db)\n+        })\n     }\n }\n "}, {"sha": "609459b7edbf1bd547485c6913fe02b052ce7393", "filename": "crates/rust-analyzer/src/dispatch.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18508493254fc97f3db22759d849c8cb9b24e823/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18508493254fc97f3db22759d849c8cb9b24e823/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs?ref=18508493254fc97f3db22759d849c8cb9b24e823", "patch": "@@ -30,16 +30,18 @@ impl<'a> RequestDispatcher<'a> {\n             Some(it) => it,\n             None => return Ok(self),\n         };\n-        let world = panic::AssertUnwindSafe(&mut *self.global_state);\n+        let global_state = panic::AssertUnwindSafe(&mut *self.global_state);\n \n         let response = panic::catch_unwind(move || {\n+            let _ = &global_state;\n+            let panic::AssertUnwindSafe(global_state) = global_state;\n             let _pctx = stdx::panic_context::enter(format!(\n                 \"\\nversion: {}\\nrequest: {} {:#?}\",\n                 env!(\"REV\"),\n                 R::METHOD,\n                 params\n             ));\n-            let result = f(world.0, params);\n+            let result = f(global_state, params);\n             result_to_response::<R>(id, result)\n         })\n         .map_err(|_err| format!(\"sync task {:?} panicked\", R::METHOD))?;"}, {"sha": "42eff1875ed0fc6c3468d7838347da3526dff2de", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18508493254fc97f3db22759d849c8cb9b24e823/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18508493254fc97f3db22759d849c8cb9b24e823/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=18508493254fc97f3db22759d849c8cb9b24e823", "patch": "@@ -420,12 +420,12 @@ impl GlobalState {\n                 self.prime_caches_queue.request_op();\n                 if self.prime_caches_queue.should_start_op() {\n                     self.task_pool.handle.spawn_with_sender({\n-                        let snap = self.snapshot();\n+                        let analysis = self.snapshot().analysis;\n                         move |sender| {\n                             let cb = |progress| {\n                                 sender.send(Task::PrimeCaches(progress)).unwrap();\n                             };\n-                            match snap.analysis.prime_caches(cb) {\n+                            match analysis.prime_caches(cb) {\n                                 Ok(()) => (),\n                                 Err(_canceled) => (),\n                             }"}]}