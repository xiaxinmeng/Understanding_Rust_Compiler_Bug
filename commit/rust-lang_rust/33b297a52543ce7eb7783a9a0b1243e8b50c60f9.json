{"sha": "33b297a52543ce7eb7783a9a0b1243e8b50c60f9", "node_id": "C_kwDOAAsO6NoAKDMzYjI5N2E1MjU0M2NlN2ViNzc4M2E5YTBiMTI0M2U4YjUwYzYwZjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-17T19:28:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-17T19:28:01Z"}, "message": "Auto merge of #99033 - 5225225:interpreter-validity-checks, r=oli-obk\n\nUse constant eval to do strict mem::uninit/zeroed validity checks\n\nI'm not sure about the code organisation here, I just dumped the check in rustc_const_eval at the root. Not hard to move it elsewhere, in any case.\n\nAlso, this means cranelift codegen intrinsics lose the strict checks, since they don't seem to depend on rustc_const_eval, and I didn't see a point in keeping around two copies.\n\nI also left comments in the is_zero_valid methods about \"uhhh help how do i do this\", those apply to both methods equally.\n\nAlso rustc_codegen_ssa now depends on rustc_const_eval... is this okay?\n\nPinging `@RalfJung` since you were the one who mentioned this to me, so I'm assuming you're interested.\n\nHaven't had a chance to run full tests on this since it's really warm, and it's 1AM, I'll check out any failures/comments in the morning :)", "tree": {"sha": "5117d2c30a4aa9f5af9b16ac2037d932632a43ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5117d2c30a4aa9f5af9b16ac2037d932632a43ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33b297a52543ce7eb7783a9a0b1243e8b50c60f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33b297a52543ce7eb7783a9a0b1243e8b50c60f9", "html_url": "https://github.com/rust-lang/rust/commit/33b297a52543ce7eb7783a9a0b1243e8b50c60f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33b297a52543ce7eb7783a9a0b1243e8b50c60f9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ea9c093e5ff345305b1236a553cc5999b570a55", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea9c093e5ff345305b1236a553cc5999b570a55", "html_url": "https://github.com/rust-lang/rust/commit/9ea9c093e5ff345305b1236a553cc5999b570a55"}, {"sha": "5a81bf7ad2495de1d13813db7fb8bead5ce6685e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a81bf7ad2495de1d13813db7fb8bead5ce6685e", "html_url": "https://github.com/rust-lang/rust/commit/5a81bf7ad2495de1d13813db7fb8bead5ce6685e"}], "stats": {"total": 15, "additions": 2, "deletions": 13}, "files": [{"sha": "4b2207f375879add06b4fbaff0ba8b7fe9cf14a9", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/33b297a52543ce7eb7783a9a0b1243e8b50c60f9/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b297a52543ce7eb7783a9a0b1243e8b50c60f9/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=33b297a52543ce7eb7783a9a0b1243e8b50c60f9", "patch": "@@ -58,7 +58,6 @@ pub(crate) use llvm::codegen_llvm_intrinsic_call;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_span::symbol::{kw, sym, Symbol};\n-use rustc_target::abi::InitKind;\n \n use crate::prelude::*;\n use cranelift_codegen::ir::AtomicRmwOp;\n@@ -672,12 +671,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 return;\n             }\n \n-            if intrinsic == sym::assert_zero_valid\n-                && !layout.might_permit_raw_init(\n-                    fx,\n-                    InitKind::Zero,\n-                    fx.tcx.sess.opts.unstable_opts.strict_init_checks) {\n-\n+            if intrinsic == sym::assert_zero_valid && !fx.tcx.permits_zero_init(layout) {\n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic(\n                         fx,\n@@ -688,12 +682,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 return;\n             }\n \n-            if intrinsic == sym::assert_uninit_valid\n-                && !layout.might_permit_raw_init(\n-                    fx,\n-                    InitKind::Uninit,\n-                    fx.tcx.sess.opts.unstable_opts.strict_init_checks) {\n-\n+            if intrinsic == sym::assert_uninit_valid && !fx.tcx.permits_uninit_init(layout) {\n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic(\n                         fx,"}]}