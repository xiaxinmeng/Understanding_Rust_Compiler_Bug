{"sha": "752413005ed58308160ca57525d6395a00a61116", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MjQxMzAwNWVkNTgzMDgxNjBjYTU3NTI1ZDYzOTVhMDBhNjExMTY=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-01-31T05:11:51Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-02-28T22:15:10Z"}, "message": "Merge `repeat_idx` and `repeat_len`.", "tree": {"sha": "afcf98c86344bc66cb9a8d5943233c52426bdf77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afcf98c86344bc66cb9a8d5943233c52426bdf77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/752413005ed58308160ca57525d6395a00a61116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/752413005ed58308160ca57525d6395a00a61116", "html_url": "https://github.com/rust-lang/rust/commit/752413005ed58308160ca57525d6395a00a61116", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/752413005ed58308160ca57525d6395a00a61116/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cc7053efa243c117b0d9278a5a62eb62ecee227", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cc7053efa243c117b0d9278a5a62eb62ecee227", "html_url": "https://github.com/rust-lang/rust/commit/0cc7053efa243c117b0d9278a5a62eb62ecee227"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "90f64a5208f75cc006830fc74b5abf51a68f2dff", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/752413005ed58308160ca57525d6395a00a61116/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752413005ed58308160ca57525d6395a00a61116/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=752413005ed58308160ca57525d6395a00a61116", "patch": "@@ -69,8 +69,7 @@ pub fn transcribe(sp_diag: &Handler,\n                   -> Vec<TokenTree> {\n     let mut stack = SmallVector::one(Frame::new(src));\n     let interpolations = interp.unwrap_or_else(HashMap::new); /* just a convenience */\n-    let mut repeat_idx = Vec::new();\n-    let mut repeat_len = Vec::new();\n+    let mut repeats = Vec::new();\n     let mut result = Vec::new();\n     let mut result_stack = Vec::new();\n \n@@ -79,8 +78,9 @@ pub fn transcribe(sp_diag: &Handler,\n             tree\n         } else {\n             if let Frame::Sequence { ref mut idx, ref sep, .. } = *stack.last_mut().unwrap() {\n-                if *repeat_idx.last().unwrap() < *repeat_len.last().unwrap() - 1 {\n-                    *repeat_idx.last_mut().unwrap() += 1;\n+                let (ref mut repeat_idx, repeat_len) = *repeats.last_mut().unwrap();\n+                *repeat_idx += 1;\n+                if *repeat_idx < repeat_len {\n                     *idx = 0;\n                     if let Some(sep) = sep.clone() {\n                         // repeat same span, I guess\n@@ -93,8 +93,7 @@ pub fn transcribe(sp_diag: &Handler,\n \n             match stack.pop().unwrap() {\n                 Frame::Sequence { .. } => {\n-                    repeat_idx.pop();\n-                    repeat_len.pop();\n+                    repeats.pop();\n                 }\n                 Frame::Delimited { forest, span, .. } => {\n                     if result_stack.is_empty() {\n@@ -116,7 +115,7 @@ pub fn transcribe(sp_diag: &Handler,\n                 // FIXME(pcwalton): Bad copy.\n                 match lockstep_iter_size(&quoted::TokenTree::Sequence(sp, seq.clone()),\n                                          &interpolations,\n-                                         &repeat_idx) {\n+                                         &repeats) {\n                     LockstepIterSize::Unconstrained => {\n                         panic!(sp_diag.span_fatal(\n                             sp.clone(), /* blame macro writer */\n@@ -136,8 +135,7 @@ pub fn transcribe(sp_diag: &Handler,\n                                                           \"this must repeat at least once\"));\n                             }\n                         } else {\n-                            repeat_len.push(len);\n-                            repeat_idx.push(0);\n+                            repeats.push((0, len));\n                             stack.push(Frame::Sequence {\n                                 idx: 0,\n                                 sep: seq.separator.clone(),\n@@ -149,7 +147,7 @@ pub fn transcribe(sp_diag: &Handler,\n             }\n             // FIXME #2887: think about span stuff here\n             quoted::TokenTree::Token(sp, SubstNt(ident)) => {\n-                match lookup_cur_matched(ident, &interpolations, &repeat_idx) {\n+                match lookup_cur_matched(ident, &interpolations, &repeats) {\n                     None => result.push(TokenTree::Token(sp, SubstNt(ident))),\n                     Some(cur_matched) => if let MatchedNonterminal(ref nt) = *cur_matched {\n                         match **nt {\n@@ -184,16 +182,16 @@ pub fn transcribe(sp_diag: &Handler,\n \n fn lookup_cur_matched(ident: Ident,\n                       interpolations: &HashMap<Ident, Rc<NamedMatch>>,\n-                      repeat_idx: &[usize])\n+                      repeats: &[(usize, usize)])\n                       -> Option<Rc<NamedMatch>> {\n     interpolations.get(&ident).map(|matched| {\n-        repeat_idx.iter().fold(matched.clone(), |ad, idx| {\n+        repeats.iter().fold(matched.clone(), |ad, &(idx, _)| {\n             match *ad {\n                 MatchedNonterminal(_) => {\n                     // end of the line; duplicate henceforth\n                     ad.clone()\n                 }\n-                MatchedSeq(ref ads, _) => ads[*idx].clone()\n+                MatchedSeq(ref ads, _) => ads[idx].clone()\n             }\n         })\n     })\n@@ -230,22 +228,22 @@ impl Add for LockstepIterSize {\n \n fn lockstep_iter_size(tree: &quoted::TokenTree,\n                       interpolations: &HashMap<Ident, Rc<NamedMatch>>,\n-                      repeat_idx: &[usize])\n+                      repeats: &[(usize, usize)])\n                       -> LockstepIterSize {\n     use self::quoted::TokenTree;\n     match *tree {\n         TokenTree::Delimited(_, ref delimed) => {\n             delimed.tts.iter().fold(LockstepIterSize::Unconstrained, |size, tt| {\n-                size + lockstep_iter_size(tt, interpolations, repeat_idx)\n+                size + lockstep_iter_size(tt, interpolations, repeats)\n             })\n         },\n         TokenTree::Sequence(_, ref seq) => {\n             seq.tts.iter().fold(LockstepIterSize::Unconstrained, |size, tt| {\n-                size + lockstep_iter_size(tt, interpolations, repeat_idx)\n+                size + lockstep_iter_size(tt, interpolations, repeats)\n             })\n         },\n         TokenTree::Token(_, SubstNt(name)) | TokenTree::MetaVarDecl(_, name, _) =>\n-            match lookup_cur_matched(name, interpolations, repeat_idx) {\n+            match lookup_cur_matched(name, interpolations, repeats) {\n                 Some(matched) => match *matched {\n                     MatchedNonterminal(_) => LockstepIterSize::Unconstrained,\n                     MatchedSeq(ref ads, _) => LockstepIterSize::Constraint(ads.len(), name),"}]}