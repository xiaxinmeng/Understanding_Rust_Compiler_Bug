{"sha": "4949fb0419a58e937b5098d76e89dff4c91f3f7e", "node_id": "C_kwDOAAsO6NoAKDQ5NDlmYjA0MTlhNThlOTM3YjUwOThkNzZlODlkZmY0YzkxZjNmN2U", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-01-13T06:55:58Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-01-13T06:55:58Z"}, "message": "Stop having unused lifetimes on some `impl`s", "tree": {"sha": "add03ba28d71d25a333742b239e89361c8c9302a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/add03ba28d71d25a333742b239e89361c8c9302a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4949fb0419a58e937b5098d76e89dff4c91f3f7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4949fb0419a58e937b5098d76e89dff4c91f3f7e", "html_url": "https://github.com/rust-lang/rust/commit/4949fb0419a58e937b5098d76e89dff4c91f3f7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4949fb0419a58e937b5098d76e89dff4c91f3f7e/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfffe406fbcabb37b95779f2d252c4a277191e0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfffe406fbcabb37b95779f2d252c4a277191e0d", "html_url": "https://github.com/rust-lang/rust/commit/bfffe406fbcabb37b95779f2d252c4a277191e0d"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "a2dcee0e2bdb26ef252f04cd8feee8d217b27683", "filename": "library/std/src/path.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/4949fb0419a58e937b5098d76e89dff4c91f3f7e/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4949fb0419a58e937b5098d76e89dff4c91f3f7e/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=4949fb0419a58e937b5098d76e89dff4c91f3f7e", "patch": "@@ -3177,33 +3177,33 @@ impl<'a> IntoIterator for &'a Path {\n }\n \n macro_rules! impl_cmp {\n-    ($lhs:ty, $rhs: ty) => {\n+    (<$($life:lifetime),*> $lhs:ty, $rhs: ty) => {\n         #[stable(feature = \"partialeq_path\", since = \"1.6.0\")]\n-        impl<'a, 'b> PartialEq<$rhs> for $lhs {\n+        impl<$($life),*> PartialEq<$rhs> for $lhs {\n             #[inline]\n             fn eq(&self, other: &$rhs) -> bool {\n                 <Path as PartialEq>::eq(self, other)\n             }\n         }\n \n         #[stable(feature = \"partialeq_path\", since = \"1.6.0\")]\n-        impl<'a, 'b> PartialEq<$lhs> for $rhs {\n+        impl<$($life),*> PartialEq<$lhs> for $rhs {\n             #[inline]\n             fn eq(&self, other: &$lhs) -> bool {\n                 <Path as PartialEq>::eq(self, other)\n             }\n         }\n \n         #[stable(feature = \"cmp_path\", since = \"1.8.0\")]\n-        impl<'a, 'b> PartialOrd<$rhs> for $lhs {\n+        impl<$($life),*> PartialOrd<$rhs> for $lhs {\n             #[inline]\n             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {\n                 <Path as PartialOrd>::partial_cmp(self, other)\n             }\n         }\n \n         #[stable(feature = \"cmp_path\", since = \"1.8.0\")]\n-        impl<'a, 'b> PartialOrd<$lhs> for $rhs {\n+        impl<$($life),*> PartialOrd<$lhs> for $rhs {\n             #[inline]\n             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {\n                 <Path as PartialOrd>::partial_cmp(self, other)\n@@ -3212,40 +3212,40 @@ macro_rules! impl_cmp {\n     };\n }\n \n-impl_cmp!(PathBuf, Path);\n-impl_cmp!(PathBuf, &'a Path);\n-impl_cmp!(Cow<'a, Path>, Path);\n-impl_cmp!(Cow<'a, Path>, &'b Path);\n-impl_cmp!(Cow<'a, Path>, PathBuf);\n+impl_cmp!(<> PathBuf, Path);\n+impl_cmp!(<'a> PathBuf, &'a Path);\n+impl_cmp!(<'a> Cow<'a, Path>, Path);\n+impl_cmp!(<'a, 'b> Cow<'a, Path>, &'b Path);\n+impl_cmp!(<'a> Cow<'a, Path>, PathBuf);\n \n macro_rules! impl_cmp_os_str {\n-    ($lhs:ty, $rhs: ty) => {\n+    (<$($life:lifetime),*> $lhs:ty, $rhs: ty) => {\n         #[stable(feature = \"cmp_path\", since = \"1.8.0\")]\n-        impl<'a, 'b> PartialEq<$rhs> for $lhs {\n+        impl<$($life),*> PartialEq<$rhs> for $lhs {\n             #[inline]\n             fn eq(&self, other: &$rhs) -> bool {\n                 <Path as PartialEq>::eq(self, other.as_ref())\n             }\n         }\n \n         #[stable(feature = \"cmp_path\", since = \"1.8.0\")]\n-        impl<'a, 'b> PartialEq<$lhs> for $rhs {\n+        impl<$($life),*> PartialEq<$lhs> for $rhs {\n             #[inline]\n             fn eq(&self, other: &$lhs) -> bool {\n                 <Path as PartialEq>::eq(self.as_ref(), other)\n             }\n         }\n \n         #[stable(feature = \"cmp_path\", since = \"1.8.0\")]\n-        impl<'a, 'b> PartialOrd<$rhs> for $lhs {\n+        impl<$($life),*> PartialOrd<$rhs> for $lhs {\n             #[inline]\n             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {\n                 <Path as PartialOrd>::partial_cmp(self, other.as_ref())\n             }\n         }\n \n         #[stable(feature = \"cmp_path\", since = \"1.8.0\")]\n-        impl<'a, 'b> PartialOrd<$lhs> for $rhs {\n+        impl<$($life),*> PartialOrd<$lhs> for $rhs {\n             #[inline]\n             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {\n                 <Path as PartialOrd>::partial_cmp(self.as_ref(), other)\n@@ -3254,20 +3254,20 @@ macro_rules! impl_cmp_os_str {\n     };\n }\n \n-impl_cmp_os_str!(PathBuf, OsStr);\n-impl_cmp_os_str!(PathBuf, &'a OsStr);\n-impl_cmp_os_str!(PathBuf, Cow<'a, OsStr>);\n-impl_cmp_os_str!(PathBuf, OsString);\n-impl_cmp_os_str!(Path, OsStr);\n-impl_cmp_os_str!(Path, &'a OsStr);\n-impl_cmp_os_str!(Path, Cow<'a, OsStr>);\n-impl_cmp_os_str!(Path, OsString);\n-impl_cmp_os_str!(&'a Path, OsStr);\n-impl_cmp_os_str!(&'a Path, Cow<'b, OsStr>);\n-impl_cmp_os_str!(&'a Path, OsString);\n-impl_cmp_os_str!(Cow<'a, Path>, OsStr);\n-impl_cmp_os_str!(Cow<'a, Path>, &'b OsStr);\n-impl_cmp_os_str!(Cow<'a, Path>, OsString);\n+impl_cmp_os_str!(<> PathBuf, OsStr);\n+impl_cmp_os_str!(<'a> PathBuf, &'a OsStr);\n+impl_cmp_os_str!(<'a> PathBuf, Cow<'a, OsStr>);\n+impl_cmp_os_str!(<> PathBuf, OsString);\n+impl_cmp_os_str!(<> Path, OsStr);\n+impl_cmp_os_str!(<'a> Path, &'a OsStr);\n+impl_cmp_os_str!(<'a> Path, Cow<'a, OsStr>);\n+impl_cmp_os_str!(<> Path, OsString);\n+impl_cmp_os_str!(<'a> &'a Path, OsStr);\n+impl_cmp_os_str!(<'a, 'b> &'a Path, Cow<'b, OsStr>);\n+impl_cmp_os_str!(<'a> &'a Path, OsString);\n+impl_cmp_os_str!(<'a> Cow<'a, Path>, OsStr);\n+impl_cmp_os_str!(<'a, 'b> Cow<'a, Path>, &'b OsStr);\n+impl_cmp_os_str!(<'a> Cow<'a, Path>, OsString);\n \n #[stable(since = \"1.7.0\", feature = \"strip_prefix\")]\n impl fmt::Display for StripPrefixError {"}]}