{"sha": "cc2fc48dec9ae582ebba9761185afc5e21bf47b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMmZjNDhkZWM5YWU1ODJlYmJhOTc2MTE4NWFmYzVlMjFiZjQ3YjY=", "commit": {"author": {"name": "Alex Burka", "email": "durka42+github@gmail.com", "date": "2016-06-13T20:13:20Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-07-27T17:58:51Z"}, "message": "expand nullable pointer example", "tree": {"sha": "0c2ecfc336d768f76ef76f8318f3f7805f16a475", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c2ecfc336d768f76ef76f8318f3f7805f16a475"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc2fc48dec9ae582ebba9761185afc5e21bf47b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2fc48dec9ae582ebba9761185afc5e21bf47b6", "html_url": "https://github.com/rust-lang/rust/commit/cc2fc48dec9ae582ebba9761185afc5e21bf47b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc2fc48dec9ae582ebba9761185afc5e21bf47b6/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48ce20653a470f2d4734fb0ee4a89905da23b15c", "url": "https://api.github.com/repos/rust-lang/rust/commits/48ce20653a470f2d4734fb0ee4a89905da23b15c", "html_url": "https://github.com/rust-lang/rust/commit/48ce20653a470f2d4734fb0ee4a89905da23b15c"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "fb8896da86d731d5ce834fed643a75c2db3f20c2", "filename": "src/doc/book/ffi.md", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cc2fc48dec9ae582ebba9761185afc5e21bf47b6/src%2Fdoc%2Fbook%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/cc2fc48dec9ae582ebba9761185afc5e21bf47b6/src%2Fdoc%2Fbook%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fffi.md?ref=cc2fc48dec9ae582ebba9761185afc5e21bf47b6", "patch": "@@ -590,22 +590,42 @@ where `None` corresponds to `null`. So `Option<extern \"C\" fn(c_int) -> c_int>` i\n to represent a nullable function pointer using the C ABI (corresponding to the C type\n `int (*)(int)`).\n \n-Here is an example:\n+Here is a contrived example. Let's say some C library has a facility for registering a\n+callback, which gets called in certain situations. The callback is passed a function pointer\n+and an integer and it is supposed to run the function with the integer as a parameter. So\n+we have function pointers flying across the FFI interface in both directions.\n \n ```rust\n use std::os::raw::c_int;\n \n+extern \"C\" {\n+    /// Register the callback.\n+    fn register(Option<extern \"C\" fn(Option<extern \"C\" fn(c_int) -> c_int>, c_int) -> c_int>);\n+}\n+\n /// This fairly useless function receives a function pointer and an integer\n /// from C, and returns the result of calling the function with the integer.\n /// In case no function is provided, it squares the integer by default.\n-#[no_mangle]\n-pub extern fn apply(process: Option<extern \"C\" fn(c_int) -> c_int>, int: c_int) -> c_int {\n+extern \"C\" fn apply(process: Option<extern \"C\" fn(c_int) -> c_int>, int: c_int) -> c_int {\n     match process {\n         Some(f) => unsafe { f(int) },\n         None    => int * int\n     }\n }\n-# fn main() {}\n+\n+fn main() {\n+    unsafe {\n+        register(Some(apply));\n+    }\n+}\n+```\n+\n+And the code on the C side looks like this:\n+\n+```c\n+void register(void (*f)(void (*)(int), int)) {\n+    ...\n+}\n ```\n \n No `tranmsute` required!"}]}