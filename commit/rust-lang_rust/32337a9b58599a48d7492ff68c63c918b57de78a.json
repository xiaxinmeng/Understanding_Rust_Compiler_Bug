{"sha": "32337a9b58599a48d7492ff68c63c918b57de78a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMzM3YTliNTg1OTlhNDhkNzQ5MmZmNjhjNjNjOTE4YjU3ZGU3OGE=", "commit": {"author": {"name": "Brad Sherman", "email": "bsherman1096@gmail.com", "date": "2020-01-11T20:08:27Z"}, "committer": {"name": "Brad Sherman", "email": "bsherman1096@gmail.com", "date": "2020-01-16T03:23:08Z"}, "message": "Add lint for default lint description\n\n- Lint for any new lints that have the default lint description\n  from the automation", "tree": {"sha": "5c815cbe11e64e14703ffa45e99e3a15ba14d041", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c815cbe11e64e14703ffa45e99e3a15ba14d041"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32337a9b58599a48d7492ff68c63c918b57de78a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32337a9b58599a48d7492ff68c63c918b57de78a", "html_url": "https://github.com/rust-lang/rust/commit/32337a9b58599a48d7492ff68c63c918b57de78a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32337a9b58599a48d7492ff68c63c918b57de78a/comments", "author": {"login": "bradsherman", "id": 15267511, "node_id": "MDQ6VXNlcjE1MjY3NTEx", "avatar_url": "https://avatars.githubusercontent.com/u/15267511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bradsherman", "html_url": "https://github.com/bradsherman", "followers_url": "https://api.github.com/users/bradsherman/followers", "following_url": "https://api.github.com/users/bradsherman/following{/other_user}", "gists_url": "https://api.github.com/users/bradsherman/gists{/gist_id}", "starred_url": "https://api.github.com/users/bradsherman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bradsherman/subscriptions", "organizations_url": "https://api.github.com/users/bradsherman/orgs", "repos_url": "https://api.github.com/users/bradsherman/repos", "events_url": "https://api.github.com/users/bradsherman/events{/privacy}", "received_events_url": "https://api.github.com/users/bradsherman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bradsherman", "id": 15267511, "node_id": "MDQ6VXNlcjE1MjY3NTEx", "avatar_url": "https://avatars.githubusercontent.com/u/15267511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bradsherman", "html_url": "https://github.com/bradsherman", "followers_url": "https://api.github.com/users/bradsherman/followers", "following_url": "https://api.github.com/users/bradsherman/following{/other_user}", "gists_url": "https://api.github.com/users/bradsherman/gists{/gist_id}", "starred_url": "https://api.github.com/users/bradsherman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bradsherman/subscriptions", "organizations_url": "https://api.github.com/users/bradsherman/orgs", "repos_url": "https://api.github.com/users/bradsherman/repos", "events_url": "https://api.github.com/users/bradsherman/events{/privacy}", "received_events_url": "https://api.github.com/users/bradsherman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "237a01d116e666618ebf5cc5f5b704352c4fb276", "url": "https://api.github.com/repos/rust-lang/rust/commits/237a01d116e666618ebf5cc5f5b704352c4fb276", "html_url": "https://github.com/rust-lang/rust/commit/237a01d116e666618ebf5cc5f5b704352c4fb276"}], "stats": {"total": 103, "additions": 99, "deletions": 4}, "files": [{"sha": "c1fe51fbf8af20a6e99bb8a92ec49077f632365c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32337a9b58599a48d7492ff68c63c918b57de78a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32337a9b58599a48d7492ff68c63c918b57de78a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=32337a9b58599a48d7492ff68c63c918b57de78a", "patch": "@@ -1090,6 +1090,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&utils::internal_lints::LINT_WITHOUT_LINT_PASS),\n         LintId::of(&utils::internal_lints::OUTER_EXPN_EXPN_DATA),\n         LintId::of(&utils::internal_lints::PRODUCE_ICE),\n+        LintId::of(&utils::internal_lints::DEFAULT_LINT),\n     ]);\n \n     store.register_group(true, \"clippy::all\", Some(\"clippy\"), vec!["}, {"sha": "dcedaedc27f2f34f30f39b71e773ef41a596faba", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/32337a9b58599a48d7492ff68c63c918b57de78a/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32337a9b58599a48d7492ff68c63c918b57de78a/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=32337a9b58599a48d7492ff68c63c918b57de78a", "patch": "@@ -13,10 +13,10 @@ use rustc_hir::*;\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n use rustc_session::declare_tool_lint;\n use rustc_session::{declare_lint_pass, impl_lint_pass};\n-use rustc_span::source_map::Span;\n+use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::SymbolStr;\n use syntax::ast;\n-use syntax::ast::{Crate as AstCrate, ItemKind, Name};\n+use syntax::ast::{Crate as AstCrate, ItemKind, LitKind, Name};\n use syntax::visit::FnKind;\n \n declare_clippy_lint! {\n@@ -121,6 +121,29 @@ declare_clippy_lint! {\n     \"this message should not appear anywhere as we ICE before and don't emit the lint\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for cases of an auto-generated lint without an updated description,\n+    /// i.e. `default lint description`.\n+    ///\n+    /// **Why is this bad?** Indicates that the lint is not finished.\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// **Example:**\n+    /// Bad:\n+    /// ```rust,ignore\n+    /// declare_lint! { pub COOL_LINT, nursery, \"default lint description\" }\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust,ignore\n+    /// declare_lint! { pub COOL_LINT, nursery, \"a great new lint\" }\n+    /// ```\n+    pub DEFAULT_LINT,\n+    internal,\n+    \"found 'default lint description' in a lint declaration\"\n+}\n+\n declare_lint_pass!(ClippyLintsInternal => [CLIPPY_LINTS_INTERNAL]);\n \n impl EarlyLintPass for ClippyLintsInternal {\n@@ -163,12 +186,34 @@ pub struct LintWithoutLintPass {\n     registered_lints: FxHashSet<Name>,\n }\n \n-impl_lint_pass!(LintWithoutLintPass => [LINT_WITHOUT_LINT_PASS]);\n+impl_lint_pass!(LintWithoutLintPass => [DEFAULT_LINT, LINT_WITHOUT_LINT_PASS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n-        if let hir::ItemKind::Static(ref ty, Mutability::Not, _) = item.kind {\n+        if let hir::ItemKind::Static(ref ty, Mutability::Not, body_id) = item.kind {\n             if is_lint_ref_type(cx, ty) {\n+                let expr = &cx.tcx.hir().body(body_id).value;\n+                if_chain! {\n+                    if let ExprKind::AddrOf(_, _, ref inner_exp) = expr.kind;\n+                    if let ExprKind::Struct(_, ref fields, _) = inner_exp.kind;\n+                    let field = fields.iter()\n+                                      .find(|f| f.ident.as_str() == \"desc\")\n+                                      .expect(\"lints must have a description field\");\n+                    if let ExprKind::Lit(Spanned {\n+                        node: LitKind::Str(ref sym, _),\n+                        ..\n+                    }) = field.expr.kind;\n+                    if sym.as_str() == \"default lint description\";\n+\n+                    then {\n+                        span_lint(\n+                            cx,\n+                            DEFAULT_LINT,\n+                            item.span,\n+                            &format!(\"the lint `{}` has the default lint description\", item.ident.name),\n+                        );\n+                    }\n+                }\n                 self.declared_lints.insert(item.ident.name, item.span);\n             }\n         } else if is_expn_of(item.span, \"impl_lint_pass\").is_some()"}, {"sha": "988a7b866dea2219d04a1d7f1813f7e1bc6de787", "filename": "tests/ui/default_lint.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/32337a9b58599a48d7492ff68c63c918b57de78a/tests%2Fui%2Fdefault_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32337a9b58599a48d7492ff68c63c918b57de78a/tests%2Fui%2Fdefault_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_lint.rs?ref=32337a9b58599a48d7492ff68c63c918b57de78a", "patch": "@@ -0,0 +1,28 @@\n+#![deny(clippy::internal)]\n+#![feature(rustc_private)]\n+\n+#[macro_use]\n+extern crate rustc;\n+#[macro_use]\n+extern crate rustc_session;\n+extern crate rustc_lint;\n+use rustc_lint::{LintArray, LintPass};\n+\n+declare_tool_lint! {\n+    pub clippy::TEST_LINT,\n+    Warn,\n+    \"\",\n+    report_in_external_macro: true\n+}\n+\n+declare_tool_lint! {\n+    pub clippy::TEST_LINT_DEFAULT,\n+    Warn,\n+    \"default lint description\",\n+    report_in_external_macro: true\n+}\n+\n+declare_lint_pass!(Pass => [TEST_LINT]);\n+declare_lint_pass!(Pass2 => [TEST_LINT_DEFAULT]);\n+\n+fn main() {}"}, {"sha": "21fd86ec6aadf4d5fcfbbdedcf091559e5592f74", "filename": "tests/ui/default_lint.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/32337a9b58599a48d7492ff68c63c918b57de78a/tests%2Fui%2Fdefault_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32337a9b58599a48d7492ff68c63c918b57de78a/tests%2Fui%2Fdefault_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_lint.stderr?ref=32337a9b58599a48d7492ff68c63c918b57de78a", "patch": "@@ -0,0 +1,21 @@\n+error: the lint `TEST_LINT_DEFAULT` has the default lint description\n+  --> $DIR/default_lint.rs:18:1\n+   |\n+LL | / declare_tool_lint! {\n+LL | |     pub clippy::TEST_LINT_DEFAULT,\n+LL | |     Warn,\n+LL | |     \"default lint description\",\n+LL | |     report_in_external_macro: true\n+LL | | }\n+   | |_^\n+   |\n+note: lint level defined here\n+  --> $DIR/default_lint.rs:1:9\n+   |\n+LL | #![deny(clippy::internal)]\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: `#[deny(clippy::default_lint)]` implied by `#[deny(clippy::internal)]`\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}]}