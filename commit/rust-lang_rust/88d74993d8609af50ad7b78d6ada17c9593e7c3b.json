{"sha": "88d74993d8609af50ad7b78d6ada17c9593e7c3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZDc0OTkzZDg2MDlhZjUwYWQ3Yjc4ZDZhZGExN2M5NTkzZTdjM2I=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-23T19:43:36Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-23T19:43:36Z"}, "message": "Update docs on log expressions.", "tree": {"sha": "05e2146a484902acedb1d0472e708352a2c46c3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05e2146a484902acedb1d0472e708352a2c46c3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88d74993d8609af50ad7b78d6ada17c9593e7c3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88d74993d8609af50ad7b78d6ada17c9593e7c3b", "html_url": "https://github.com/rust-lang/rust/commit/88d74993d8609af50ad7b78d6ada17c9593e7c3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88d74993d8609af50ad7b78d6ada17c9593e7c3b/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c267d81540869306b21a97ec1c0b6aac753f7bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c267d81540869306b21a97ec1c0b6aac753f7bb", "html_url": "https://github.com/rust-lang/rust/commit/9c267d81540869306b21a97ec1c0b6aac753f7bb"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "d5bfb646ec46524443b5bddb18c648032da4f42d", "filename": "doc/rust.texi", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/88d74993d8609af50ad7b78d6ada17c9593e7c3b/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/88d74993d8609af50ad7b78d6ada17c9593e7c3b/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=88d74993d8609af50ad7b78d6ada17c9593e7c3b", "patch": "@@ -3046,7 +3046,51 @@ Executing a @code{log} expression may, depending on runtime configuration,\n cause a value to be appended to an internal diagnostic logging buffer provided\n by the runtime or emitted to a system console. Log expressions are enabled or\n disabled dynamically at run-time on a per-task and per-item\n-basis. @xref{Ref.Run.Log}.\n+basis.  @xref{Ref.Run.Log}.\n+\n+Each @code{log} expression must be provided with a @emph{level} argument in\n+addition to the value to log. The logging level is a @code{u32} value, where\n+lower levels indicate more-urgent levels of logging. By default, the lowest\n+four logging levels (@code{0_u32 ... 3_u32}) are predefined as the constants\n+@code{error}, @code{warn}, @code{info} and @code{debug} in the @code{core}\n+library.\n+\n+Additionally, the macros @code{#error}, @code{#warn}, @code{#info} and\n+@code{#debug} are defined in the default syntax-extension namespace. These\n+expand into calls to the logging facility composed with calls to the\n+@code{#fmt} string formatting syntax-extension.\n+\n+The following examples all produce the same output, logged at the @code{error}\n+logging level:\n+\n+@example\n+// Full version, logging a value.\n+log(core::error, \"file not found: \" + filename);\n+\n+// Log-level abbreviated, since core::* is imported by default.\n+log(error, \"file not found: \" + filename);\n+\n+// Formatting the message using a format-string and #fmt\n+log(error, #fmt(\"file not found: %s\", filename));\n+\n+// Using the #error macro, that expands to the previous call.\n+#error(\"file not found: %s\", filename);\n+@end example\n+\n+A @code{log} expression is @emph{not evaluated} when logging at the specified\n+logging-level, module or task is disabled at runtime. This makes inactive\n+@code{log} expressions very cheap; they should be used extensively in Rust\n+code, as diagnostic aids, as they add little overhead beyond a single\n+integer-compare and branch at runtime.\n+\n+Logging is presently implemented as a language built-in feature, as it makes\n+use of compiler-provided logic for allocating the associated per-module\n+logging-control structures visible to the runtime, and lazily evaluating\n+arguments. In the future, as more of the supporting compiler-provided logic is\n+moved into libraries, logging is likely to move to a component of the core\n+library. It is best to use the macro forms of logging (@emph{#error},\n+@emph{#debug}, etc.) to minimize disruption to code using the logging facility\n+when it is changed.\n \n @example\n @end example"}]}