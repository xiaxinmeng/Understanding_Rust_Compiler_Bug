{"sha": "50c57d8c80b1fab4c1e9087756fb9fae396d5218", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwYzU3ZDhjODBiMWZhYjRjMWU5MDg3NzU2ZmI5ZmFlMzk2ZDUyMTg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-09-11T15:08:04Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-09-23T19:29:51Z"}, "message": "rustc: Fix mixing crates with different `share_generics`\n\nThis commit addresses #64319 by removing the `dylib` crate type from the\nlist of crate type that exports generic symbols. The bug in #64319\narises because a `dylib` crate type was trying to export a symbol in an\nuptream crate but it miscalculated the symbol name of the uptream\nsymbol. This isn't really necessary, though, since `dylib` crates aren't\nthat heavily used, so we can just conservatively say that the `dylib`\ncrate type never exports generic symbols, forcibly removing them from\nthe exported symbol lists if were to otherwise find them.\n\nThe fix here happens in two places:\n\n* First is in the `local_crate_exports_generics` method, indicating that\n  it's now `false` for the `Dylib` crate type. Only rlibs actually\n  export generics at this point.\n\n* Next is when we load exported symbols from upstream crate. If, for our\n  compilation session, the crate may be included from a dynamic library,\n  then its generic symbols are removed. When the crate was linked into a\n  dynamic library its symbols weren't exported, so we can't consider\n  them a candidate to link against.\n\nOverally this should avoid situations where we incorrectly calculate the\nupstream symbol names in the face of differnet `share_generics` options,\nultimately...\n\nCloses #64319", "tree": {"sha": "ff339d08c069bf82aba5da45609a8c32065f07d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff339d08c069bf82aba5da45609a8c32065f07d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50c57d8c80b1fab4c1e9087756fb9fae396d5218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50c57d8c80b1fab4c1e9087756fb9fae396d5218", "html_url": "https://github.com/rust-lang/rust/commit/50c57d8c80b1fab4c1e9087756fb9fae396d5218", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50c57d8c80b1fab4c1e9087756fb9fae396d5218/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d531aeaf46451f999aea0f7c9ba08016b9ee3eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d531aeaf46451f999aea0f7c9ba08016b9ee3eb", "html_url": "https://github.com/rust-lang/rust/commit/5d531aeaf46451f999aea0f7c9ba08016b9ee3eb"}], "stats": {"total": 107, "additions": 93, "deletions": 14}, "files": [{"sha": "fd99995480a9e284774255d963d801322b8bae00", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=50c57d8c80b1fab4c1e9087756fb9fae396d5218", "patch": "@@ -631,7 +631,9 @@ rustc_queries! {\n             desc { \"dylib dependency formats of crate\" }\n         }\n \n-        query dependency_formats(_: CrateNum) -> Lrc<crate::middle::dependency_format::Dependencies> {\n+        query dependency_formats(_: CrateNum)\n+            -> Lrc<crate::middle::dependency_format::Dependencies>\n+        {\n             desc { \"get the linkage format of all dependencies\" }\n         }\n     }"}, {"sha": "c03dbb2b1ed0e6899439522c642a6bbe3ffc1d36", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=50c57d8c80b1fab4c1e9087756fb9fae396d5218", "patch": "@@ -1510,9 +1510,9 @@ impl<'tcx> TyCtxt<'tcx> {\n                 CrateType::Executable |\n                 CrateType::Staticlib  |\n                 CrateType::ProcMacro  |\n+                CrateType::Dylib      |\n                 CrateType::Cdylib     => false,\n-                CrateType::Rlib       |\n-                CrateType::Dylib      => true,\n+                CrateType::Rlib       => true,\n             }\n         })\n     }"}, {"sha": "3e4b7695447c8d5a132d822b47dc768295fdc52c", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=50c57d8c80b1fab4c1e9087756fb9fae396d5218", "patch": "@@ -298,7 +298,7 @@ fn upstream_monomorphizations_provider(\n     };\n \n     for &cnum in cnums.iter() {\n-        for &(ref exported_symbol, _) in tcx.exported_symbols(cnum).iter() {\n+        for (exported_symbol, _) in tcx.exported_symbols(cnum).iter() {\n             if let &ExportedSymbol::Generic(def_id, substs) = exported_symbol {\n                 let substs_map = instances.entry(def_id).or_default();\n "}, {"sha": "f18a98ffea7cdb640d2021624cb0f44db39ee54d", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=50c57d8c80b1fab4c1e9087756fb9fae396d5218", "patch": "@@ -10,6 +10,8 @@ use rustc::middle::cstore::{CrateStore, DepKind,\n                             EncodedMetadata, NativeLibraryKind};\n use rustc::middle::exported_symbols::ExportedSymbol;\n use rustc::middle::stability::DeprecationEntry;\n+use rustc::middle::dependency_format::Linkage;\n+use rustc::session::config::CrateType;\n use rustc::hir::def;\n use rustc::hir;\n use rustc::session::{CrateDisambiguator, Session};\n@@ -239,7 +241,30 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n \n     used_crate_source => { Lrc::new(cdata.source.clone()) }\n \n-    exported_symbols => { Arc::new(cdata.exported_symbols(tcx)) }\n+    exported_symbols => {\n+        let mut syms = cdata.exported_symbols(tcx);\n+\n+        // When linked into a dylib crates don't export their generic symbols,\n+        // so if that's happening then we can't load upstream monomorphizations\n+        // from this crate. As a result, if we're creating a dylib or this crate\n+        // is being included from a different dynamic library, then we filter\n+        // out all `Generic` symbols here.\n+        let formats = tcx.dependency_formats(LOCAL_CRATE);\n+        let remove_generics = formats.iter().any(|(ty, list)| {\n+            *ty == CrateType::Dylib ||\n+                list.get(def_id.krate.as_usize() - 1) == Some(&Linkage::IncludedFromDylib)\n+        });\n+        if remove_generics {\n+            syms.retain(|(sym, _threshold)| {\n+                match sym {\n+                    ExportedSymbol::Generic(..) => false,\n+                    _ => return true,\n+                }\n+            });\n+        }\n+\n+        Arc::new(syms)\n+    }\n }\n \n pub fn provide(providers: &mut Providers<'_>) {"}, {"sha": "9a30623b33d626a6f8c70f081d31888ef46baa2f", "filename": "src/librustc_metadata/dependency_format.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Flibrustc_metadata%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Flibrustc_metadata%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdependency_format.rs?ref=50c57d8c80b1fab4c1e9087756fb9fae396d5218", "patch": "@@ -368,4 +368,3 @@ fn verify_ok(tcx: TyCtxt<'_>, list: &[Linkage]) {\n         }\n     }\n }\n-"}, {"sha": "9050e8f1671d9c790321dc72ee35a993db80f438", "filename": "src/test/codegen-units/partitioning/auxiliary/shared_generics_aux.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fauxiliary%2Fshared_generics_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fauxiliary%2Fshared_generics_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fauxiliary%2Fshared_generics_aux.rs?ref=50c57d8c80b1fab4c1e9087756fb9fae396d5218", "patch": "@@ -1,4 +1,5 @@\n // compile-flags:-Zshare-generics=yes\n+// no-prefer-dynamic\n \n #![crate_type=\"rlib\"]\n "}, {"sha": "58e485be0032124577b629366771629fae44d438", "filename": "src/test/codegen-units/partitioning/shared-generics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fshared-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fshared-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fshared-generics.rs?ref=50c57d8c80b1fab4c1e9087756fb9fae396d5218", "patch": "@@ -1,4 +1,5 @@\n // ignore-tidy-linelength\n+// no-prefer-dynamic\n // compile-flags:-Zprint-mono-items=eager -Zshare-generics=yes -Zincremental=tmp/partitioning-tests/shared-generics-exe\n \n #![crate_type=\"rlib\"]"}, {"sha": "671d44564e66fd3f64ea412c3852319a9a3363d5", "filename": "src/test/compile-fail/two-panic-runtimes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Ftest%2Fcompile-fail%2Ftwo-panic-runtimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Ftest%2Fcompile-fail%2Ftwo-panic-runtimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftwo-panic-runtimes.rs?ref=50c57d8c80b1fab4c1e9087756fb9fae396d5218", "patch": "@@ -5,6 +5,7 @@\n // aux-build:panic-runtime-lang-items.rs\n \n #![no_std]\n+#![no_main]\n \n extern crate panic_runtime_unwind;\n extern crate panic_runtime_unwind2;"}, {"sha": "b2c6b8b3cbbf2bf4d15e5fdc3b71681a799522ae", "filename": "src/test/run-make-fulldeps/issue-64319/Makefile", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2FMakefile?ref=50c57d8c80b1fab4c1e9087756fb9fae396d5218", "patch": "@@ -0,0 +1,39 @@\n+-include ../tools.mk\n+\n+# Different optimization levels imply different values for `-Zshare-generics`,\n+# so try out a whole bunch of combinations to make sure everything is compatible\n+all:\n+\t# First up, try some defaults\n+\t$(RUSTC) --crate-type rlib foo.rs\n+\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=3\n+\n+\t# Next try mixing up some things explicitly\n+\t$(RUSTC) --crate-type rlib foo.rs -Z share-generics=no\n+\t$(RUSTC) --crate-type dylib bar.rs -Z share-generics=no\n+\t$(RUSTC) --crate-type rlib foo.rs -Z share-generics=no\n+\t$(RUSTC) --crate-type dylib bar.rs -Z share-generics=yes\n+\t$(RUSTC) --crate-type rlib foo.rs -Z share-generics=yes\n+\t$(RUSTC) --crate-type dylib bar.rs -Z share-generics=no\n+\t$(RUSTC) --crate-type rlib foo.rs -Z share-generics=yes\n+\t$(RUSTC) --crate-type dylib bar.rs -Z share-generics=yes\n+\n+\t# Now combine a whole bunch of options together\n+\t$(RUSTC) --crate-type rlib foo.rs\n+\t$(RUSTC) --crate-type dylib bar.rs\n+\t$(RUSTC) --crate-type dylib bar.rs -Z share-generics=no\n+\t$(RUSTC) --crate-type dylib bar.rs -Z share-generics=yes\n+\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=1\n+\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=1 -Z share-generics=no\n+\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=1 -Z share-generics=yes\n+\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=2\n+\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=2 -Z share-generics=no\n+\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=2 -Z share-generics=yes\n+\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=3\n+\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=3 -Z share-generics=no\n+\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=3 -Z share-generics=yes\n+\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=s\n+\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=s -Z share-generics=no\n+\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=s -Z share-generics=yes\n+\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=z\n+\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=z -Z share-generics=no\n+\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=z -Z share-generics=yes"}, {"sha": "3895c0b6cdbb3d760b7df23c8934eca5da0210e8", "filename": "src/test/run-make-fulldeps/issue-64319/bar.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2Fbar.rs?ref=50c57d8c80b1fab4c1e9087756fb9fae396d5218", "patch": "@@ -0,0 +1,5 @@\n+extern crate foo;\n+\n+pub fn bar() {\n+    foo::foo();\n+}"}, {"sha": "c54a238e9add7f8ae13a1602df43d48467bf2b57", "filename": "src/test/run-make-fulldeps/issue-64319/foo.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2Ffoo.rs?ref=50c57d8c80b1fab4c1e9087756fb9fae396d5218", "patch": "@@ -0,0 +1,9 @@\n+pub fn foo() {\n+    bar::<usize>();\n+}\n+\n+pub fn bar<T>() {\n+    baz();\n+}\n+\n+fn baz() {}"}, {"sha": "840fe801a953c9ed4e7e35f8fd91ef5304b5ebb8", "filename": "src/test/run-make-fulldeps/symbol-visibility/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Ftest%2Frun-make-fulldeps%2Fsymbol-visibility%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Ftest%2Frun-make-fulldeps%2Fsymbol-visibility%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsymbol-visibility%2FMakefile?ref=50c57d8c80b1fab4c1e9087756fb9fae396d5218", "patch": "@@ -79,12 +79,12 @@ all:\n \t# Check that a Rust dylib exports its monomorphic functions, including generics this time\n \t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_c_function_from_rust_dylib)\" -eq \"1\" ]\n \t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_rust_function_from_rust_dylib)\" -eq \"1\" ]\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_generic_function_from_rust_dylib)\" -eq \"1\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_generic_function_from_rust_dylib)\" -eq \"0\" ]\n \n \t# Check that a Rust dylib exports the monomorphic functions from its dependencies\n \t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_c_function_from_rlib)\" -eq \"1\" ]\n \t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_rust_function_from_rlib)\" -eq \"1\" ]\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_generic_function_from_rlib)\" -eq \"1\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_generic_function_from_rlib)\" -eq \"0\" ]\n \n \t# Check that an executable does not export any dynamic symbols\n \t[ \"$$($(NM) $(TMPDIR)/$(EXE_NAME) | grep -c public_c_function_from_rlib)\" -eq \"0\" ]"}, {"sha": "5d72771c2dcff1bdff532ec1214b0acb67daa901", "filename": "src/test/ui/panic-runtime/transitive-link-a-bunch.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs?ref=50c57d8c80b1fab4c1e9087756fb9fae396d5218", "patch": "@@ -7,9 +7,8 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n \n #![no_std]\n+#![no_main]\n \n extern crate wants_panic_runtime_unwind;\n extern crate wants_panic_runtime_abort;\n extern crate panic_runtime_lang_items;\n-\n-fn main() {}"}, {"sha": "4c25c09d6438f3146ca04a355be849481707add5", "filename": "src/test/ui/panic-runtime/want-unwind-got-abort.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs?ref=50c57d8c80b1fab4c1e9087756fb9fae396d5218", "patch": "@@ -4,8 +4,7 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n \n #![no_std]\n+#![no_main]\n \n extern crate panic_runtime_abort;\n extern crate panic_runtime_lang_items;\n-\n-fn main() {}"}, {"sha": "478af451e7f657bbd73ecceb3ca5b180027019ca", "filename": "src/test/ui/panic-runtime/want-unwind-got-abort2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50c57d8c80b1fab4c1e9087756fb9fae396d5218/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs?ref=50c57d8c80b1fab4c1e9087756fb9fae396d5218", "patch": "@@ -5,8 +5,7 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n \n #![no_std]\n+#![no_main]\n \n extern crate wants_panic_runtime_abort;\n extern crate panic_runtime_lang_items;\n-\n-fn main() {}"}]}