{"sha": "d3aecc1001e3a4cf1117de3456d2a30662493c78", "node_id": "C_kwDOAAsO6NoAKGQzYWVjYzEwMDFlM2E0Y2YxMTE3ZGUzNDU2ZDJhMzA2NjI0OTNjNzg", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2021-12-20T03:01:48Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2021-12-22T09:14:20Z"}, "message": "When obligation is a sized predicate, prefer projection or object candidates instead of param_env candidates", "tree": {"sha": "c6e497753e7cad3294d22e819d8f29fa872d3f24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6e497753e7cad3294d22e819d8f29fa872d3f24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3aecc1001e3a4cf1117de3456d2a30662493c78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3aecc1001e3a4cf1117de3456d2a30662493c78", "html_url": "https://github.com/rust-lang/rust/commit/d3aecc1001e3a4cf1117de3456d2a30662493c78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3aecc1001e3a4cf1117de3456d2a30662493c78/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dde825db464b08d6f572766579dfb629b837368c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dde825db464b08d6f572766579dfb629b837368c", "html_url": "https://github.com/rust-lang/rust/commit/dde825db464b08d6f572766579dfb629b837368c"}], "stats": {"total": 118, "additions": 84, "deletions": 34}, "files": [{"sha": "6bca27d7b0d9aecd0c8ccf4002441498cc77663c", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3aecc1001e3a4cf1117de3456d2a30662493c78/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3aecc1001e3a4cf1117de3456d2a30662493c78/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=d3aecc1001e3a4cf1117de3456d2a30662493c78", "patch": "@@ -152,7 +152,7 @@ impl Elaborator<'tcx> {\n                         obligation.cause.clone(),\n                     )\n                 });\n-                debug!(\"super_predicates: data={:?}\", data);\n+                debug!(?data, ?obligations, \"super_predicates\");\n \n                 // Only keep those bounds that we haven't already seen.\n                 // This is necessary to prevent infinite recursion in some"}, {"sha": "0366f6200ff0a669e501bb1fd3d48b1566c0ed84", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3aecc1001e3a4cf1117de3456d2a30662493c78/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3aecc1001e3a4cf1117de3456d2a30662493c78/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=d3aecc1001e3a4cf1117de3456d2a30662493c78", "patch": "@@ -188,6 +188,11 @@ pub trait Printer<'tcx>: Sized {\n             own_params.start = 1;\n         }\n \n+        // If we're in verbose mode, then print default-equal args too\n+        if self.tcx().sess.verbose() {\n+            return &substs[own_params];\n+        }\n+\n         // Don't print args that are the defaults of their respective parameters.\n         own_params.end -= generics\n             .params"}, {"sha": "5ce2d977a35cc957489db1f04ad8fd5e2985e2d0", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3aecc1001e3a4cf1117de3456d2a30662493c78/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3aecc1001e3a4cf1117de3456d2a30662493c78/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=d3aecc1001e3a4cf1117de3456d2a30662493c78", "patch": "@@ -1776,10 +1776,11 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n         self = print_prefix(self)?;\n \n         // Don't print `'_` if there's no unerased regions.\n-        let print_regions = args.iter().any(|arg| match arg.unpack() {\n-            GenericArgKind::Lifetime(r) => *r != ty::ReErased,\n-            _ => false,\n-        });\n+        let print_regions = self.tcx.sess.verbose()\n+            || args.iter().any(|arg| match arg.unpack() {\n+                GenericArgKind::Lifetime(r) => *r != ty::ReErased,\n+                _ => false,\n+            });\n         let args = args.iter().cloned().filter(|arg| match arg.unpack() {\n             GenericArgKind::Lifetime(_) => print_regions,\n             _ => true,"}, {"sha": "d244ddc1c63b5811e2fe96fe3693fb80d91b652b", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3aecc1001e3a4cf1117de3456d2a30662493c78/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3aecc1001e3a4cf1117de3456d2a30662493c78/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=d3aecc1001e3a4cf1117de3456d2a30662493c78", "patch": "@@ -1242,6 +1242,10 @@ fn assemble_candidates_from_object_ty<'cx, 'tcx>(\n     );\n }\n \n+#[tracing::instrument(\n+    level = \"debug\",\n+    skip(selcx, candidate_set, ctor, env_predicates, potentially_unnormalized_candidates)\n+)]\n fn assemble_candidates_from_predicates<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,\n@@ -1250,8 +1254,6 @@ fn assemble_candidates_from_predicates<'cx, 'tcx>(\n     env_predicates: impl Iterator<Item = ty::Predicate<'tcx>>,\n     potentially_unnormalized_candidates: bool,\n ) {\n-    debug!(?obligation, \"assemble_candidates_from_predicates\");\n-\n     let infcx = selcx.infcx();\n     for predicate in env_predicates {\n         debug!(?predicate);\n@@ -1287,13 +1289,12 @@ fn assemble_candidates_from_predicates<'cx, 'tcx>(\n     }\n }\n \n+#[tracing::instrument(level = \"debug\", skip(selcx, obligation, candidate_set))]\n fn assemble_candidates_from_impls<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,\n     candidate_set: &mut ProjectionTyCandidateSet<'tcx>,\n ) {\n-    debug!(\"assemble_candidates_from_impls\");\n-\n     // If we are resolving `<T as TraitRef<...>>::Item == Type`,\n     // start out by selecting the predicate `T as TraitRef<...>`:\n     let poly_trait_ref = ty::Binder::dummy(obligation.predicate.trait_ref(selcx.tcx()));"}, {"sha": "b573c4b43906c58ed3e19dd7ceca3ad9a6fcdf51", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d3aecc1001e3a4cf1117de3456d2a30662493c78/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3aecc1001e3a4cf1117de3456d2a30662493c78/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=d3aecc1001e3a4cf1117de3456d2a30662493c78", "patch": "@@ -173,6 +173,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let needs_infer = stack.obligation.predicate.has_infer_types_or_consts();\n \n+        let sized_predicate = self.tcx().lang_items().sized_trait()\n+            == Some(stack.obligation.predicate.skip_binder().def_id());\n+\n         // If there are STILL multiple candidates, we can further\n         // reduce the list by dropping duplicates -- including\n         // resolving specializations.\n@@ -181,6 +184,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             while i < candidates.len() {\n                 let is_dup = (0..candidates.len()).filter(|&j| i != j).any(|j| {\n                     self.candidate_should_be_dropped_in_favor_of(\n+                        sized_predicate,\n                         &candidates[i],\n                         &candidates[j],\n                         needs_infer,\n@@ -338,13 +342,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         Ok(candidates)\n     }\n \n+    #[tracing::instrument(level = \"debug\", skip(self, candidates))]\n     fn assemble_candidates_from_projected_tys(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n     ) {\n-        debug!(?obligation, \"assemble_candidates_from_projected_tys\");\n-\n         // Before we go into the whole placeholder thing, just\n         // quickly check if the self-type is a projection at all.\n         match obligation.predicate.skip_binder().trait_ref.self_ty().kind() {\n@@ -369,12 +372,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// supplied to find out whether it is listed among them.\n     ///\n     /// Never affects the inference environment.\n+    #[tracing::instrument(level = \"debug\", skip(self, stack, candidates))]\n     fn assemble_candidates_from_caller_bounds<'o>(\n         &mut self,\n         stack: &TraitObligationStack<'o, 'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n     ) -> Result<(), SelectionError<'tcx>> {\n-        debug!(?stack.obligation, \"assemble_candidates_from_caller_bounds\");\n+        debug!(?stack.obligation);\n \n         let all_bounds = stack\n             .obligation\n@@ -876,14 +880,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         };\n     }\n \n+    #[tracing::instrument(level = \"debug\", skip(self, obligation, candidates))]\n     fn assemble_candidates_for_trait_alias(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n     ) {\n         // Okay to skip binder here because the tests we do below do not involve bound regions.\n         let self_ty = obligation.self_ty().skip_binder();\n-        debug!(?self_ty, \"assemble_candidates_for_trait_alias\");\n+        debug!(?self_ty);\n \n         let def_id = obligation.predicate.def_id();\n \n@@ -894,21 +899,20 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     /// Assembles the trait which are built-in to the language itself:\n     /// `Copy`, `Clone` and `Sized`.\n+    #[tracing::instrument(level = \"debug\", skip(self, candidates))]\n     fn assemble_builtin_bound_candidates(\n         &mut self,\n         conditions: BuiltinImplConditions<'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n     ) {\n         match conditions {\n             BuiltinImplConditions::Where(nested) => {\n-                debug!(?nested, \"builtin_bound\");\n                 candidates\n                     .vec\n                     .push(BuiltinCandidate { has_nested: !nested.skip_binder().is_empty() });\n             }\n             BuiltinImplConditions::None => {}\n             BuiltinImplConditions::Ambiguous => {\n-                debug!(\"assemble_builtin_bound_candidates: ambiguous builtin\");\n                 candidates.ambiguous = true;\n             }\n         }"}, {"sha": "492a8f8bffd9aa7c7e85eb39a9e0c71afa723399", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d3aecc1001e3a4cf1117de3456d2a30662493c78/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3aecc1001e3a4cf1117de3456d2a30662493c78/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=d3aecc1001e3a4cf1117de3456d2a30662493c78", "patch": "@@ -200,6 +200,7 @@ struct EvaluatedCandidate<'tcx> {\n }\n \n /// When does the builtin impl for `T: Trait` apply?\n+#[derive(Debug)]\n enum BuiltinImplConditions<'tcx> {\n     /// The impl is conditional on `T1, T2, ...: Trait`.\n     Where(ty::Binder<'tcx, Vec<Ty<'tcx>>>),\n@@ -343,7 +344,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n             Err(e) => Err(e),\n             Ok(candidate) => {\n-                debug!(?candidate);\n+                debug!(?candidate, \"confirmed\");\n                 Ok(Some(candidate))\n             }\n         }\n@@ -1476,6 +1477,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// See the comment for \"SelectionCandidate\" for more details.\n     fn candidate_should_be_dropped_in_favor_of(\n         &mut self,\n+        sized_predicate: bool,\n         victim: &EvaluatedCandidate<'tcx>,\n         other: &EvaluatedCandidate<'tcx>,\n         needs_infer: bool,\n@@ -1547,6 +1549,16 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // Drop otherwise equivalent non-const fn pointer candidates\n             (FnPointerCandidate { .. }, FnPointerCandidate { is_const: false }) => true,\n \n+            // If obligation is a sized predicate or the where-clause bound is\n+            // global, prefer the projection or object candidate. See issue\n+            // #50825 and #89352.\n+            (ObjectCandidate(_) | ProjectionCandidate(_), ParamCandidate(ref cand)) => {\n+                sized_predicate || is_global(cand)\n+            }\n+            (ParamCandidate(ref cand), ObjectCandidate(_) | ProjectionCandidate(_)) => {\n+                !(sized_predicate || is_global(cand))\n+            }\n+\n             // Global bounds from the where clause should be ignored\n             // here (see issue #50825). Otherwise, we have a where\n             // clause so don't go around looking for impls.\n@@ -1562,15 +1574,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n                 | BuiltinCandidate { .. }\n-                | TraitAliasCandidate(..)\n-                | ObjectCandidate(_)\n-                | ProjectionCandidate(_),\n+                | TraitAliasCandidate(..),\n             ) => !is_global(cand),\n-            (ObjectCandidate(_) | ProjectionCandidate(_), ParamCandidate(ref cand)) => {\n-                // Prefer these to a global where-clause bound\n-                // (see issue #50825).\n-                is_global(cand)\n-            }\n             (\n                 ImplCandidate(_)\n                 | ClosureCandidate"}, {"sha": "abcd79526ebbeb8a5eee6589e03d0603b1a4a004", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3aecc1001e3a4cf1117de3456d2a30662493c78/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3aecc1001e3a4cf1117de3456d2a30662493c78/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=d3aecc1001e3a4cf1117de3456d2a30662493c78", "patch": "@@ -286,7 +286,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// Given the type/lifetime/const arguments provided to some path (along with\n     /// an implicit `Self`, if this is a trait reference), returns the complete\n     /// set of substitutions. This may involve applying defaulted type parameters.\n-    /// Also returns back constraints on associated types.\n+    /// Constraints on associated typess are created from `create_assoc_bindings_for_generic_args`.\n     ///\n     /// Example:\n     ///\n@@ -300,7 +300,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     ///    which will have been resolved to a `def_id`\n     /// 3. The `generic_args` contains info on the `<...>` contents. The `usize` type\n     ///    parameters are returned in the `SubstsRef`, the associated type bindings like\n-    ///    `Output = u32` are returned in the `Vec<ConvertedBinding...>` result.\n+    ///    `Output = u32` are returned from `create_assoc_bindings_for_generic_args`.\n     ///\n     /// Note that the type listing given here is *exactly* what the user provided.\n     ///"}, {"sha": "ea75a1ed80de3cf934f9c7ab527e71888f413731", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3aecc1001e3a4cf1117de3456d2a30662493c78/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3aecc1001e3a4cf1117de3456d2a30662493c78/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=d3aecc1001e3a4cf1117de3456d2a30662493c78", "patch": "@@ -360,6 +360,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let (obligation, substs) =\n             self.obligation_for_method(span, trait_def_id, self_ty, opt_input_types);\n \n+        debug!(?obligation);\n+\n         // Now we want to know if this can be matched\n         if !self.predicate_may_hold(&obligation) {\n             debug!(\"--> Cannot match obligation\");"}, {"sha": "974a1d961a05e07c737a2873b8b147786d3a145c", "filename": "src/test/ui/associated-types/substs-ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3aecc1001e3a4cf1117de3456d2a30662493c78/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3aecc1001e3a4cf1117de3456d2a30662493c78/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.rs?ref=d3aecc1001e3a4cf1117de3456d2a30662493c78", "patch": "@@ -25,7 +25,7 @@ fn foo<'z>() where &'z (): Sized {\n     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n     //[verbose]~^ ERROR mismatched types\n     //[verbose]~| expected unit type `()`\n-    //[verbose]~| found fn item `fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>}`\n+    //[verbose]~| found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u32>>::bar::<ReStatic, char>}`\n     //[normal]~^^^^ ERROR mismatched types\n     //[normal]~| expected unit type `()`\n     //[normal]~| found fn item `fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>}`"}, {"sha": "cf480223da2b3a5496529e1f24fbde565e7b6e02", "filename": "src/test/ui/associated-types/substs-ppaux.verbose.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3aecc1001e3a4cf1117de3456d2a30662493c78/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3aecc1001e3a4cf1117de3456d2a30662493c78/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr?ref=d3aecc1001e3a4cf1117de3456d2a30662493c78", "patch": "@@ -20,15 +20,15 @@ error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:25:17\n    |\n LL |     fn bar<'a, T>() where T: 'a {}\n-   |     --------------------------- fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>} defined here\n+   |     --------------------------- fn() {<i8 as Foo<ReStatic, ReStatic, u32>>::bar::<ReStatic, char>} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n    |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n    |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n-                found fn item `fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>}`\n+                found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u32>>::bar::<ReStatic, char>}`\n help: use parentheses to call this function\n    |\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>();"}, {"sha": "d9c656d5f58a9e8495a2cf0b2386c4d5bd91529c", "filename": "src/test/ui/generic-associated-types/issue-89352.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d3aecc1001e3a4cf1117de3456d2a30662493c78/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-89352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3aecc1001e3a4cf1117de3456d2a30662493c78/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-89352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-89352.rs?ref=d3aecc1001e3a4cf1117de3456d2a30662493c78", "patch": "@@ -0,0 +1,32 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+\n+use std::marker::PhantomData;\n+\n+pub trait GenAssoc<T> {\n+    type Iter<'at>;\n+    fn iter(&self) -> Self::Iter<'_>;\n+    fn reborrow<'longt: 'shortt, 'shortt>(iter: Self::Iter<'longt>) -> Self::Iter<'shortt>;\n+}\n+\n+pub struct Wrapper<'a, T: 'a, A: GenAssoc<T>> {\n+    a: A::Iter<'a>,\n+    _p: PhantomData<T>,\n+}\n+\n+impl<'ai, T: 'ai, A: GenAssoc<T>> GenAssoc<T> for Wrapper<'ai, T, A>\n+where\n+    A::Iter<'ai>: Clone,\n+{\n+    type Iter<'b> = ();\n+    fn iter<'s>(&'s self) -> Self::Iter<'s> {\n+        let a = A::reborrow::<'ai, 's>(self.a.clone());\n+    }\n+\n+    fn reborrow<'long: 'short, 'short>(iter: Self::Iter<'long>) -> Self::Iter<'short> {\n+        ()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "459198eec5a8e50c55919233daf59655e84e721f", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3aecc1001e3a4cf1117de3456d2a30662493c78/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3aecc1001e3a4cf1117de3456d2a30662493c78/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=d3aecc1001e3a4cf1117de3456d2a30662493c78", "patch": "@@ -6,7 +6,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |\n    = note: defining type: no_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>,\n+               extern \"rust-call\" fn((std::boxed::Box<T, std::alloc::Global>,)) -> std::boxed::Box<(dyn Anything + '_#2r), std::alloc::Global>,\n                (),\n            ]\n    = note: number of external vids: 3\n@@ -42,7 +42,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |\n    = note: defining type: correct_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>,\n+               extern \"rust-call\" fn((std::boxed::Box<T, std::alloc::Global>,)) -> std::boxed::Box<(dyn Anything + '_#2r), std::alloc::Global>,\n                (),\n            ]\n    = note: number of external vids: 3\n@@ -69,7 +69,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |\n    = note: defining type: wrong_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>,\n+               extern \"rust-call\" fn((std::boxed::Box<T, std::alloc::Global>,)) -> std::boxed::Box<(dyn Anything + '_#3r), std::alloc::Global>,\n                (),\n            ]\n    = note: number of external vids: 4\n@@ -105,7 +105,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |\n    = note: defining type: outlives_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>,\n+               extern \"rust-call\" fn((std::boxed::Box<T, std::alloc::Global>,)) -> std::boxed::Box<(dyn Anything + '_#3r), std::alloc::Global>,\n                (),\n            ]\n    = note: number of external vids: 4"}, {"sha": "6e8b3021d330c9139fb1a6519c28558b3441ba89", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3aecc1001e3a4cf1117de3456d2a30662493c78/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3aecc1001e3a4cf1117de3456d2a30662493c78/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=d3aecc1001e3a4cf1117de3456d2a30662493c78", "patch": "@@ -6,7 +6,7 @@ LL |     with_signature(x, |y| y)\n    |\n    = note: defining type: no_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn std::fmt::Debug + '_#2r)>,\n+               extern \"rust-call\" fn((std::boxed::Box<T, std::alloc::Global>,)) -> std::boxed::Box<(dyn std::fmt::Debug + '_#2r), std::alloc::Global>,\n                (),\n            ]\n    = note: number of external vids: 3"}]}