{"sha": "dfc6d7ac76b655a391c8c9b0feb841877fae2c1a", "node_id": "C_kwDOAAsO6NoAKGRmYzZkN2FjNzZiNjU1YTM5MWM4YzliMGZlYjg0MTg3N2ZhZTJjMWE", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-22T06:16:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-22T06:16:12Z"}, "message": "Rollup merge of #97818 - compiler-errors:rpit-error-spanned, r=oli-obk\n\nPoint at return expression for RPIT-related error\n\nCertainly this needs some diagnostic refining, but I wanted to show that it was possible first and foremost. Not sure if this is the right approach. Open to feedback.\n\nFixes #80583", "tree": {"sha": "c49f91a5811941a7fb10f1ec10a2cdc02b94f7d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c49f91a5811941a7fb10f1ec10a2cdc02b94f7d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJisrOsCRBK7hj4Ov3rIwAA6M4IAF5C7iXwxa8+UJTFAR5i2Pl4\nwY637zHZuHklB6FJD18vCx97qJm0eGoz+VAFdMn4BV3z0AdgBNU514M+VzJCoZpY\n9k+htH4zYNlFAxeDTURssmkRydD5qzLsMVeFpC7h4jn6OA2JqMvcL+5gTf/M7/6O\nSVIzHntevj7RThbal+D0Z9xIVtVFWjCCCJRD2437soCIzbf11CdeDCsTe2HZow6s\nsCxKuQr1pjTet2mxjPERiNG3ybVR5xUJ1Uax6V2IOZzrOBF3O7F2ZhEIcvgqbP0P\nOOM6nL4ZvK9/o86+IElWmNamj77gs9NoJHh1Lymt0MkTkl75T2E/B+6dAnzfZv0=\n=IRC6\n-----END PGP SIGNATURE-----\n", "payload": "tree c49f91a5811941a7fb10f1ec10a2cdc02b94f7d1\nparent 25b84491f7fab196d9469753f7261f1b744af25d\nparent 52409c4c90d122a73ece033aaac65ef254ea5470\nauthor Yuki Okushi <jtitor@2k36.org> 1655878572 +0900\ncommitter GitHub <noreply@github.com> 1655878572 +0900\n\nRollup merge of #97818 - compiler-errors:rpit-error-spanned, r=oli-obk\n\nPoint at return expression for RPIT-related error\n\nCertainly this needs some diagnostic refining, but I wanted to show that it was possible first and foremost. Not sure if this is the right approach. Open to feedback.\n\nFixes #80583\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a", "html_url": "https://github.com/rust-lang/rust/commit/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25b84491f7fab196d9469753f7261f1b744af25d", "url": "https://api.github.com/repos/rust-lang/rust/commits/25b84491f7fab196d9469753f7261f1b744af25d", "html_url": "https://github.com/rust-lang/rust/commit/25b84491f7fab196d9469753f7261f1b744af25d"}, {"sha": "52409c4c90d122a73ece033aaac65ef254ea5470", "url": "https://api.github.com/repos/rust-lang/rust/commits/52409c4c90d122a73ece033aaac65ef254ea5470", "html_url": "https://github.com/rust-lang/rust/commit/52409c4c90d122a73ece033aaac65ef254ea5470"}], "stats": {"total": 102, "additions": 97, "deletions": 5}, "files": [{"sha": "7684d861f3c9394595c9ab3ec0a167fd67116686", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=dfc6d7ac76b655a391c8c9b0feb841877fae2c1a", "patch": "@@ -5,7 +5,7 @@ use hir::{HirId, OpaqueTyOrigin};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::vec_map::VecMap;\n use rustc_hir as hir;\n-use rustc_middle::traits::ObligationCause;\n+use rustc_middle::traits::{ObligationCause, ObligationCauseCode};\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::subst::{GenericArgKind, Subst};\n use rustc_middle::ty::{\n@@ -46,6 +46,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         value: T,\n         body_id: HirId,\n         span: Span,\n+        code: ObligationCauseCode<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> InferOk<'tcx, T> {\n         if !value.has_opaque_types() {\n@@ -68,10 +69,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     ) =>\n                 {\n                     let span = if span.is_dummy() { self.tcx.def_span(def_id) } else { span };\n-                    let cause = ObligationCause::misc(span, body_id);\n+                    let cause = ObligationCause::new(span, body_id, code.clone());\n+                    // FIXME(compiler-errors): We probably should add a new TypeVariableOriginKind\n+                    // for opaque types, and then use that kind to fix the spans for type errors\n+                    // that we see later on.\n                     let ty_var = self.next_ty_var(TypeVariableOrigin {\n                         kind: TypeVariableOriginKind::TypeInference,\n-                        span: cause.span,\n+                        span,\n                     });\n                     obligations.extend(\n                         self.handle_opaque_type(ty, ty_var, true, &cause, param_env)"}, {"sha": "5258d37a14c91df20cf6aea15ce367482f5f7f93", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=dfc6d7ac76b655a391c8c9b0feb841877fae2c1a", "patch": "@@ -387,6 +387,9 @@ pub enum ObligationCauseCode<'tcx> {\n     /// Return type of this function\n     ReturnType,\n \n+    /// Opaque return type of this function\n+    OpaqueReturnType(Option<(Ty<'tcx>, Span)>),\n+\n     /// Block implicit return\n     BlockTailExpression(hir::HirId),\n "}, {"sha": "0485cac9e9f746da2459e7072cad9f285e30d13a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=dfc6d7ac76b655a391c8c9b0feb841877fae2c1a", "patch": "@@ -2661,6 +2661,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     err.help(\"add `#![feature(trivial_bounds)]` to the crate attributes to enable\");\n                 }\n             }\n+            ObligationCauseCode::OpaqueReturnType(expr_info) => {\n+                if let Some((expr_ty, expr_span)) = expr_info {\n+                    let expr_ty = self.resolve_vars_if_possible(expr_ty);\n+                    err.span_label(\n+                        expr_span,\n+                        format!(\"return type was inferred to be `{expr_ty}` here\"),\n+                    );\n+                }\n+            }\n         }\n     }\n "}, {"sha": "82c54291a5d5ef6a3055e39a5d1ed125a2e8a388", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=dfc6d7ac76b655a391c8c9b0feb841877fae2c1a", "patch": "@@ -28,6 +28,7 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n+use rustc_infer::traits::ObligationCauseCode;\n use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::fold::{MaxUniverse, TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::subst::Subst;\n@@ -261,6 +262,7 @@ fn project_and_unify_type<'cx, 'tcx>(\n             actual,\n             obligation.cause.body_id,\n             obligation.cause.span,\n+            ObligationCauseCode::MiscObligation,\n             obligation.param_env,\n         );\n     obligations.extend(new);"}, {"sha": "45c011b78e38830d2f1fc5e623e88f2c6b1cd94e", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=dfc6d7ac76b655a391c8c9b0feb841877fae2c1a", "patch": "@@ -101,8 +101,13 @@ pub(super) fn check_fn<'a, 'tcx>(\n             declared_ret_ty,\n             body.value.hir_id,\n             DUMMY_SP,\n+            traits::ObligationCauseCode::OpaqueReturnType(None),\n             param_env,\n         ));\n+    // If we replaced declared_ret_ty with infer vars, then we must be infering\n+    // an opaque type, so set a flag so we can improve diagnostics.\n+    fcx.return_type_has_opaque = ret_ty != declared_ret_ty;\n+\n     fcx.ret_coercion = Some(RefCell::new(CoerceMany::new(ret_ty)));\n     fcx.ret_type_span = Some(decl.output.span());\n "}, {"sha": "cce11305119447fa80007006fc9f1dfa7a78dcbb", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=dfc6d7ac76b655a391c8c9b0feb841877fae2c1a", "patch": "@@ -10,6 +10,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_infer::infer::{InferOk, InferResult};\n+use rustc_infer::traits::ObligationCauseCode;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, Ty};\n@@ -645,8 +646,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     fn hide_parent_opaque_types(&self, ty: Ty<'tcx>, span: Span, body_id: hir::HirId) -> Ty<'tcx> {\n-        let InferOk { value, obligations } =\n-            self.replace_opaque_types_with_inference_vars(ty, body_id, span, self.param_env);\n+        let InferOk { value, obligations } = self.replace_opaque_types_with_inference_vars(\n+            ty,\n+            body_id,\n+            span,\n+            ObligationCauseCode::MiscObligation,\n+            self.param_env,\n+        );\n         self.register_predicates(obligations);\n         value\n     }"}, {"sha": "77d6495f38c2f148f59c8408b855022ab22a4379", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=dfc6d7ac76b655a391c8c9b0feb841877fae2c1a", "patch": "@@ -39,6 +39,7 @@ use rustc_hir::{ExprKind, HirId, QPath};\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::InferOk;\n+use rustc_infer::traits::ObligationCause;\n use rustc_middle::middle::stability;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase};\n use rustc_middle::ty::error::TypeError::FieldMisMatch;\n@@ -839,6 +840,37 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return_expr,\n             return_expr_ty,\n         );\n+\n+        if self.return_type_has_opaque {\n+            // Point any obligations that were registered due to opaque type\n+            // inference at the return expression.\n+            self.select_obligations_where_possible(false, |errors| {\n+                self.point_at_return_for_opaque_ty_error(errors, span, return_expr_ty);\n+            });\n+        }\n+    }\n+\n+    fn point_at_return_for_opaque_ty_error(\n+        &self,\n+        errors: &mut Vec<traits::FulfillmentError<'tcx>>,\n+        span: Span,\n+        return_expr_ty: Ty<'tcx>,\n+    ) {\n+        // Don't point at the whole block if it's empty\n+        if span == self.tcx.hir().span(self.body_id) {\n+            return;\n+        }\n+        for err in errors {\n+            let cause = &mut err.obligation.cause;\n+            if let ObligationCauseCode::OpaqueReturnType(None) = cause.code() {\n+                let new_cause = ObligationCause::new(\n+                    cause.span,\n+                    cause.body_id,\n+                    ObligationCauseCode::OpaqueReturnType(Some((return_expr_ty, span))),\n+                );\n+                *cause = new_cause;\n+            }\n+        }\n     }\n \n     pub(crate) fn check_lhs_assignable("}, {"sha": "8b680a3d042da52c12b83032e3d5fd42ff6fca9b", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs?ref=dfc6d7ac76b655a391c8c9b0feb841877fae2c1a", "patch": "@@ -115,6 +115,9 @@ pub struct FnCtxt<'a, 'tcx> {\n     /// either given explicitly or inferred from, say, an `Fn*` trait\n     /// bound. Used for diagnostic purposes only.\n     pub(super) return_type_pre_known: bool,\n+\n+    /// True if the return type has an Opaque type\n+    pub(super) return_type_has_opaque: bool,\n }\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -141,6 +144,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }),\n             inh,\n             return_type_pre_known: true,\n+            return_type_has_opaque: false,\n         }\n     }\n "}, {"sha": "fbd76a64c1e9273b9a7eeae22331e4b08048f978", "filename": "src/test/ui/associated-types/impl-trait-return-missing-constraint.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr?ref=dfc6d7ac76b655a391c8c9b0feb841877fae2c1a", "patch": "@@ -6,6 +6,9 @@ LL | fn bar() -> impl Bar {\n ...\n LL | fn baz() -> impl Bar<Item = i32> {\n    |             ^^^^^^^^^^^^^^^^^^^^ expected associated type, found `i32`\n+LL |\n+LL |     bar()\n+   |     ----- return type was inferred to be `impl Bar` here\n    |\n    = note: expected associated type `<impl Bar as Foo>::Item`\n                          found type `i32`"}, {"sha": "cbc7b93f3a925328e24b5d99666eb5924671d974", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr?ref=dfc6d7ac76b655a391c8c9b0feb841877fae2c1a", "patch": "@@ -3,6 +3,9 @@ error[E0277]: the trait bound `Uwu<10_u32, 12_u32>: Trait` is not satisfied\n    |\n LL | fn rawr() -> impl Trait {\n    |              ^^^^^^^^^^ the trait `Trait` is not implemented for `Uwu<10_u32, 12_u32>`\n+LL |\n+LL |     Uwu::<10, 12>\n+   |     ------------- return type was inferred to be `Uwu<10_u32, 12_u32>` here\n    |\n    = help: the trait `Trait` is implemented for `Uwu<N>`\n \n@@ -11,6 +14,9 @@ error[E0277]: the trait bound `u32: Traitor<N>` is not satisfied\n    |\n LL | fn uwu<const N: u8>() -> impl Traitor<N> {\n    |                          ^^^^^^^^^^^^^^^ the trait `Traitor<N>` is not implemented for `u32`\n+LL |\n+LL |     1_u32\n+   |     ----- return type was inferred to be `u32` here\n    |\n    = help: the following other types implement trait `Traitor<N, M>`:\n              <u32 as Traitor<N, 2_u8>>\n@@ -21,6 +27,9 @@ error[E0277]: the trait bound `u64: Traitor` is not satisfied\n    |\n LL | fn owo() -> impl Traitor {\n    |             ^^^^^^^^^^^^ the trait `Traitor` is not implemented for `u64`\n+LL |\n+LL |     1_u64\n+   |     ----- return type was inferred to be `u64` here\n    |\n    = help: the following other types implement trait `Traitor<N, M>`:\n              <u32 as Traitor<N, 2_u8>>"}, {"sha": "bd8d3d3d24ece77d6e3b82e4909973adad6a6379", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=dfc6d7ac76b655a391c8c9b0feb841877fae2c1a", "patch": "@@ -3,6 +3,9 @@ error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as imp\n    |\n LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output = T::Assoc> {\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n+LL |\n+LL |         Foo(())\n+   |         ------- return type was inferred to be `Foo<()>` here\n    |\n note: expected this to be `()`\n   --> $DIR/bound-normalization-fail.rs:14:19\n@@ -27,6 +30,9 @@ error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lif\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n+...\n+LL |         Foo(())\n+   |         ------- return type was inferred to be `Foo<()>` here\n    |\n note: expected this to be `()`\n   --> $DIR/bound-normalization-fail.rs:14:19"}, {"sha": "829d0a02ec90b24ae8f8fbfe42c756ee608c7968", "filename": "src/test/ui/issues-71798.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/src%2Ftest%2Fui%2Fissues-71798.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/src%2Ftest%2Fui%2Fissues-71798.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues-71798.stderr?ref=dfc6d7ac76b655a391c8c9b0feb841877fae2c1a", "patch": "@@ -9,6 +9,9 @@ error[E0277]: `u32` is not a future\n    |\n LL | fn test_ref(x: &u32) -> impl std::future::Future<Output = u32> + '_ {\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `u32` is not a future\n+LL |\n+LL |     *x\n+   |     -- return type was inferred to be `u32` here\n    |\n    = help: the trait `Future` is not implemented for `u32`\n    = note: u32 must be a future or must implement `IntoFuture` to be awaited"}, {"sha": "62db019ed6a911be95e49656292845be614d9206", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr?ref=dfc6d7ac76b655a391c8c9b0feb841877fae2c1a", "patch": "@@ -3,6 +3,9 @@ error[E0277]: the trait bound `(): Foo<FooX>` is not satisfied\n    |\n LL | fn foo() -> impl Foo<FooX> {\n    |             ^^^^^^^^^^^^^^ the trait `Foo<FooX>` is not implemented for `()`\n+...\n+LL |     ()\n+   |     -- return type was inferred to be `()` here\n    |\n    = help: the trait `Foo<()>` is implemented for `()`\n "}, {"sha": "f4d96038d9109419de8ee8b8e88459300e4f315c", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference2.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfc6d7ac76b655a391c8c9b0feb841877fae2c1a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr?ref=dfc6d7ac76b655a391c8c9b0feb841877fae2c1a", "patch": "@@ -3,6 +3,9 @@ error[E0277]: the trait bound `(): Foo<FooX>` is not satisfied\n    |\n LL | fn foo() -> impl Foo<FooX> {\n    |             ^^^^^^^^^^^^^^ the trait `Foo<FooX>` is not implemented for `()`\n+LL |\n+LL |     ()\n+   |     -- return type was inferred to be `()` here\n    |\n    = help: the following other types implement trait `Foo<A>`:\n              <() as Foo<()>>"}]}