{"sha": "d2b44b6600658cdb24858ccbc8fc178ac8839f5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYjQ0YjY2MDA2NThjZGIyNDg1OGNjYmM4ZmMxNzhhYzg4MzlmNWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-26T00:31:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-26T00:31:47Z"}, "message": "auto merge of #11799 : comex/rust/patch-2, r=brson", "tree": {"sha": "27903d2f5a0a3c7f822696eeea8de3c1364050b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27903d2f5a0a3c7f822696eeea8de3c1364050b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2b44b6600658cdb24858ccbc8fc178ac8839f5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b44b6600658cdb24858ccbc8fc178ac8839f5e", "html_url": "https://github.com/rust-lang/rust/commit/d2b44b6600658cdb24858ccbc8fc178ac8839f5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2b44b6600658cdb24858ccbc8fc178ac8839f5e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b85fe01b94f876a5db698db10e43ffdf2116c0a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b85fe01b94f876a5db698db10e43ffdf2116c0a3", "html_url": "https://github.com/rust-lang/rust/commit/b85fe01b94f876a5db698db10e43ffdf2116c0a3"}, {"sha": "75af1e504a5745ab7f05dbecd43f79cbef75a1c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/75af1e504a5745ab7f05dbecd43f79cbef75a1c1", "html_url": "https://github.com/rust-lang/rust/commit/75af1e504a5745ab7f05dbecd43f79cbef75a1c1"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "832bb1634649f53e3c4ca8cb784b72c1e2c0e9ab", "filename": "doc/guide-ffi.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d2b44b6600658cdb24858ccbc8fc178ac8839f5e/doc%2Fguide-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/d2b44b6600658cdb24858ccbc8fc178ac8839f5e/doc%2Fguide-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fguide-ffi.md?ref=d2b44b6600658cdb24858ccbc8fc178ac8839f5e", "patch": "@@ -303,15 +303,15 @@ which would call back to `callback()` in Rust.\n \n ## Targetting callbacks to Rust objects\n \n-The former example showed how a global function can be called from C-Code.\n+The former example showed how a global function can be called from C code.\n However it is often desired that the callback is targetted to a special\n Rust object. This could be the object that represents the wrapper for the\n respective C object. \n \n This can be achieved by passing an unsafe pointer to the object down to the\n C library. The C library can then include the pointer to the Rust object in\n-the notification. This will provide a unsafe possibility to access the \n-referenced Rust object in callback.\n+the notification. This will allow the callback to unsafely access the\n+referenced Rust object.\n \n Rust code:\n ~~~~ {.xfail-test}\n@@ -364,25 +364,25 @@ void trigger_callback() {\n \n ## Asynchronous callbacks\n \n-In the already given examples the callbacks are invoked as a direct reaction\n+In the previously given examples the callbacks are invoked as a direct reaction\n to a function call to the external C library.\n-The control over the current thread switched from Rust to C to Rust for the\n+The control over the current thread is switched from Rust to C to Rust for the\n execution of the callback, but in the end the callback is executed on the\n same thread (and Rust task) that lead called the function which triggered\n the callback.\n \n-Things get more complicated when the external library spawns it's own threads\n+Things get more complicated when the external library spawns its own threads\n and invokes callbacks from there.\n-In these cases access to Rust data structures inside he callbacks is\n+In these cases access to Rust data structures inside the callbacks is\n especially unsafe and proper synchronization mechanisms must be used.\n-Besides classical synchronization mechanisms like mutexes one possibility in\n+Besides classical synchronization mechanisms like mutexes, one possibility in\n Rust is to use channels (in `std::comm`) to forward data from the C thread\n that invoked the callback into a Rust task.\n \n If an asychronous callback targets a special object in the Rust address space\n it is also absolutely necessary that no more callbacks are performed by the \n-C library after the respective Rust object get's destroyed. \n-This can be achieved by unregistering the callback it the object's\n+C library after the respective Rust object gets destroyed. \n+This can be achieved by unregistering the callback in the object's\n destructor and designing the library in a way that guarantees that no\n callback will be performed after unregistration.\n "}]}