{"sha": "68fe5182c967259ef89dbe313e4bf80f45a53e7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZmU1MTgyYzk2NzI1OWVmODlkYmUzMTNlNGJmODBmNDVhNTNlN2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-05T17:39:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-05T17:39:59Z"}, "message": "Auto merge of #57354 - kennytm:rollup, r=kennytm\n\nRollup of 17 pull requests\n\nSuccessful merges:\n\n - #57219 (Remove some unused code)\n - #57229 (Fix #56806 by using `delay_span_bug` in object safety layout sanity checks)\n - #57233 (Rename and fix nolink-with-link-args test)\n - #57238 (Fix backtraces for inlined functions on Windows)\n - #57249 (Fix broken links to second edition TRPL.)\n - #57267 (src/jemalloc is gone, remove its mention from COPYRIGHT)\n - #57273 (Update the stdsimd submodule)\n - #57278 (Add Clippy to config.toml.example)\n - #57295 (Fix 'be be' constructs)\n - #57311 (VaList::copy should not require a mutable ref)\n - #57312 (`const fn` is no longer coming soon (const keyword docs))\n - #57313 (Improve Box<T> -> Pin<Box<T>> conversion)\n - #57314 (Fix repeated word typos)\n - #57326 (Doc rewording, use the same name `writer`)\n - #57338 (rustdoc: force binary filename for compiled doctests)\n - #57342 (librustc_mir: Make qualify_min_const_fn module public)\n - #57343 (Calculate privacy access only via query)\n\nFailed merges:\n\n - #57340 (Use correct tracking issue for c_variadic)\n\nr? @ghost", "tree": {"sha": "65c485adc2dcccde552b1a7e24f467f94fa15fa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65c485adc2dcccde552b1a7e24f467f94fa15fa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68fe5182c967259ef89dbe313e4bf80f45a53e7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68fe5182c967259ef89dbe313e4bf80f45a53e7e", "html_url": "https://github.com/rust-lang/rust/commit/68fe5182c967259ef89dbe313e4bf80f45a53e7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68fe5182c967259ef89dbe313e4bf80f45a53e7e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c2d0f4a1da300cb34d77fbcdd9f7209cc556582", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c2d0f4a1da300cb34d77fbcdd9f7209cc556582", "html_url": "https://github.com/rust-lang/rust/commit/8c2d0f4a1da300cb34d77fbcdd9f7209cc556582"}, {"sha": "d9885c41de48145c6177ed4dd7d24a10e350f1d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9885c41de48145c6177ed4dd7d24a10e350f1d1", "html_url": "https://github.com/rust-lang/rust/commit/d9885c41de48145c6177ed4dd7d24a10e350f1d1"}], "stats": {"total": 635, "additions": 296, "deletions": 339}, "files": [{"sha": "6596c5a3d9aff0e5f450ba05c826cb34bcabf3b4", "filename": "COPYRIGHT", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/COPYRIGHT", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/COPYRIGHT", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/COPYRIGHT?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -229,35 +229,3 @@ their own copyright notices and license terms:\n     NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n     USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\n     OF SUCH DAMAGE.  */\n-\n-* jemalloc, under src/jemalloc:\n-\n-    Copyright (C) 2002-2014 Jason Evans\n-    <jasone@canonware.com>. All rights reserved.\n-    Copyright (C) 2007-2012 Mozilla Foundation.\n-    All rights reserved.\n-    Copyright (C) 2009-2014 Facebook, Inc.\n-    All rights reserved.\n-\n-    Redistribution and use in source and binary forms, with or without\n-    modification, are permitted provided that the following conditions are met:\n-    1. Redistributions of source code must retain the above copyright notice(s),\n-       this list of conditions and the following disclaimer.\n-    2. Redistributions in binary form must reproduce the above copyright notice(s),\n-       this list of conditions and the following disclaimer in the documentation\n-       and/or other materials provided with the distribution.\n-\n-    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S)\n-    ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,\n-    INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n-    MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n-    DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER(S)\n-    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n-    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n-    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n-    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n-    HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n-    IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n-    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n-    USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\n-    OF SUCH DAMAGE."}, {"sha": "f5a348593699fdbe3e912d3def210cdd5a668f9f", "filename": "config.toml.example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -171,7 +171,7 @@\n \n # Installs chosen set of extended tools if enables. By default builds all.\n # If chosen tool failed to build the installation fails.\n-#tools = [\"cargo\", \"rls\", \"rustfmt\", \"analysis\", \"src\"]\n+#tools = [\"cargo\", \"rls\", \"clippy\", \"rustfmt\", \"analysis\", \"src\"]\n \n # Verbosity level: 0 == not verbose, 1 == verbose, 2 == very verbose\n #verbose = 0"}, {"sha": "7fbbe686b5bd02b90a9bdd8b3d678cb46f05ee0a", "filename": "src/doc/rustc/src/lints/listing/warn-by-default.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -24,7 +24,7 @@ warning: attempt to add with overflow\n \n ## dead-code\n \n-This lint detects detect unused, unexported items. Some\n+This lint detects unused, unexported items. Some\n example code that triggers this lint:\n \n ```rust\n@@ -44,7 +44,7 @@ warning: function is never used: `foo`\n \n ## deprecated\n \n-This lint detects detects use of deprecated items. Some\n+This lint detects use of deprecated items. Some\n example code that triggers this lint:\n \n ```rust\n@@ -119,7 +119,7 @@ warning: found struct without foreign-function-safe representation annotation in\n \n ## late-bound-lifetime-arguments\n \n-This lint detects detects generic lifetime arguments in path segments with\n+This lint detects generic lifetime arguments in path segments with\n late bound lifetime parameters. Some example code that triggers this lint:\n \n ```rust\n@@ -381,7 +381,7 @@ extern crate macro_crate_test;\n \n ## private-in-public\n \n-This lint detects detect private items in public interfaces not caught by the old implementation. Some\n+This lint detects private items in public interfaces not caught by the old implementation. Some\n example code that triggers this lint:\n \n ```rust,ignore\n@@ -659,7 +659,7 @@ warning: unknown lint: `not_a_real_lint`\n \n ## unreachable-code\n \n-This lint detects detects unreachable code paths. Some example code that\n+This lint detects unreachable code paths. Some example code that\n triggers this lint:\n \n ```rust,no_run\n@@ -681,7 +681,7 @@ warning: unreachable statement\n \n ## unreachable-patterns\n \n-This lint detects detects unreachable patterns. Some\n+This lint detects unreachable patterns. Some\n example code that triggers this lint:\n \n ```rust\n@@ -716,11 +716,11 @@ annotations now.\n \n ## unused-allocation\n \n-This lint detects detects unnecessary allocations that can be eliminated.\n+This lint detects unnecessary allocations that can be eliminated.\n \n ## unused-assignments\n \n-This lint detects detect assignments that will never be read. Some\n+This lint detects assignments that will never be read. Some\n example code that triggers this lint:\n \n ```rust\n@@ -741,7 +741,7 @@ warning: value assigned to `x` is never read\n \n ## unused-attributes\n \n-This lint detects detects attributes that were not used by the compiler. Some\n+This lint detects attributes that were not used by the compiler. Some\n example code that triggers this lint:\n \n ```rust\n@@ -785,7 +785,7 @@ warning: comparison is useless due to type limits\n \n ## unused-doc-comment\n \n-This lint detects detects doc comments that aren't used by rustdoc. Some\n+This lint detects doc comments that aren't used by rustdoc. Some\n example code that triggers this lint:\n \n ```rust\n@@ -831,7 +831,7 @@ warning: unused import: `std::collections::HashMap`\n \n ## unused-macros\n \n-This lint detects detects macros that were not used. Some example code that\n+This lint detects macros that were not used. Some example code that\n triggers this lint:\n \n ```rust\n@@ -884,7 +884,7 @@ warning: unused `std::result::Result` that must be used\n \n ## unused-mut\n \n-This lint detects detect mut variables which don't need to be mutable. Some\n+This lint detects mut variables which don't need to be mutable. Some\n example code that triggers this lint:\n \n ```rust\n@@ -946,7 +946,7 @@ warning: unnecessary `unsafe` block\n \n ## unused-variables\n \n-This lint detects detect variables which are not used in any way. Some\n+This lint detects variables which are not used in any way. Some\n example code that triggers this lint:\n \n ```rust"}, {"sha": "dcc13f53493f443f051cfa5a88687f4d901f533f", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -171,7 +171,7 @@ compiles, while only showing the parts that are relevant to that part of your\n explanation.\n \n The `#`-hiding of lines can be prevented by using two consecutive hashes\n-`##`. This only needs to be done with with the first `#` which would've\n+`##`. This only needs to be done with the first `#` which would've\n otherwise caused hiding. If we have a string literal like the following,\n which has a line that starts with a `#`:\n "}, {"sha": "1c459f5c4250e462c63d86d094b0d21f2e8b5e21", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -257,6 +257,19 @@ impl<T: ?Sized> Box<T> {\n     {\n         unsafe { &mut *Box::into_raw(b) }\n     }\n+\n+    /// Converts a `Box<T>` into a `Pin<Box<T>>`\n+    ///\n+    /// This conversion does not allocate on the heap and happens in place.\n+    ///\n+    /// This is also available via [`From`].\n+    #[unstable(feature = \"box_into_pin\", issue = \"0\")]\n+    pub fn into_pin(boxed: Box<T>) -> Pin<Box<T>> {\n+        // It's not possible to move or replace the insides of a `Pin<Box<T>>`\n+        // when `T: !Unpin`,  so it's safe to pin it directly without any\n+        // additional requirements.\n+        unsafe { Pin::new_unchecked(boxed) }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -451,15 +464,12 @@ impl<T> From<T> for Box<T> {\n }\n \n #[stable(feature = \"pin\", since = \"1.33.0\")]\n-impl<T> From<Box<T>> for Pin<Box<T>> {\n+impl<T: ?Sized> From<Box<T>> for Pin<Box<T>> {\n     /// Converts a `Box<T>` into a `Pin<Box<T>>`\n     ///\n     /// This conversion does not allocate on the heap and happens in place.\n     fn from(boxed: Box<T>) -> Self {\n-        // It's not possible to move or replace the insides of a `Pin<Box<T>>`\n-        // when `T: !Unpin`,  so it's safe to pin it directly without any\n-        // additional requirements.\n-        unsafe { Pin::new_unchecked(boxed) }\n+        Box::into_pin(boxed)\n     }\n }\n "}, {"sha": "0717a88b6b8f38b0fb46e114d2c9e3d337043164", "filename": "src/libcore/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -186,7 +186,7 @@ impl<'a> VaList<'a> {\n                reason = \"the `c_variadic` feature has not been properly tested on \\\n                          all supported platforms\",\n                issue = \"27745\")]\n-    pub unsafe fn copy<F, R>(&mut self, f: F) -> R\n+    pub unsafe fn copy<F, R>(&self, f: F) -> R\n             where F: for<'copy> FnOnce(VaList<'copy>) -> R {\n         #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n                       not(target_arch = \"x86_64\")),"}, {"sha": "19bf4ab15bfc4e42ea76df6d40f65970b8e461da", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -110,6 +110,7 @@\n #![feature(aarch64_target_feature)]\n #![feature(wasm_target_feature)]\n #![feature(avx512_target_feature)]\n+#![cfg_attr(not(stage0), feature(cmpxchg16b_target_feature))]\n #![feature(const_slice_len)]\n #![feature(const_str_as_bytes)]\n #![feature(const_str_len)]"}, {"sha": "65752ba032104133d17b6d251dbb730b375ac876", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -85,7 +85,7 @@ impl<T: ?Sized> !Send for *mut T { }\n     on(parent_trait=\"std::path::Path\", label=\"borrow the `Path` instead\"),\n     message=\"the size for values of type `{Self}` cannot be known at compilation time\",\n     label=\"doesn't have a size known at compile-time\",\n-    note=\"to learn more, visit <https://doc.rust-lang.org/book/second-edition/\\\n+    note=\"to learn more, visit <https://doc.rust-lang.org/book/\\\n           ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\",\n )]\n #[fundamental] // for Default, for example, which requires that `[T]: !Default` be evaluatable"}, {"sha": "075c3a084f41dab1e7d02bfc878a729fff7febcc", "filename": "src/libcore/ops/deref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibcore%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibcore%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fderef.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -27,7 +27,7 @@\n /// [book] as well as the reference sections on [the dereference operator]\n /// [ref-deref-op], [method resolution] and [type coercions].\n ///\n-/// [book]: ../../book/second-edition/ch15-02-deref.html\n+/// [book]: ../../book/ch15-02-deref.html\n /// [`DerefMut`]: trait.DerefMut.html\n /// [more]: #more-on-deref-coercion\n /// [ref-deref-op]: ../../reference/expressions/operator-expr.html#the-dereference-operator\n@@ -117,7 +117,7 @@ impl<T: ?Sized> Deref for &mut T {\n /// [book] as well as the reference sections on [the dereference operator]\n /// [ref-deref-op], [method resolution] and [type coercions].\n ///\n-/// [book]: ../../book/second-edition/ch15-02-deref.html\n+/// [book]: ../../book/ch15-02-deref.html\n /// [`Deref`]: trait.Deref.html\n /// [more]: #more-on-deref-coercion\n /// [ref-deref-op]: ../../reference/expressions/operator-expr.html#the-dereference-operator"}, {"sha": "eae63ea2390a8fca59fb9ef4dba0bc9bd2154384", "filename": "src/libcore/ops/drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibcore%2Fops%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibcore%2Fops%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fdrop.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -11,7 +11,7 @@\n /// Refer to [the chapter on `Drop` in *The Rust Programming Language*][book]\n /// for some more elaboration.\n ///\n-/// [book]: ../../book/second-edition/ch15-03-drop.html\n+/// [book]: ../../book/ch15-03-drop.html\n ///\n /// # Examples\n ///"}, {"sha": "3a1d765f7b8164e530262f9db92a867114a53b84", "filename": "src/libcore/ops/function.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibcore%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibcore%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ffunction.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -27,7 +27,7 @@\n /// `Fn(usize, bool) -> usize`). Those interested in the technical details of\n /// this can refer to [the relevant section in the *Rustonomicon*][nomicon].\n ///\n-/// [book]: ../../book/second-edition/ch13-01-closures.html\n+/// [book]: ../../book/ch13-01-closures.html\n /// [`FnMut`]: trait.FnMut.html\n /// [`FnOnce`]: trait.FnOnce.html\n /// [function pointers]: ../../std/primitive.fn.html\n@@ -95,7 +95,7 @@ pub trait Fn<Args> : FnMut<Args> {\n /// `Fn(usize, bool) -> usize`). Those interested in the technical details of\n /// this can refer to [the relevant section in the *Rustonomicon*][nomicon].\n ///\n-/// [book]: ../../book/second-edition/ch13-01-closures.html\n+/// [book]: ../../book/ch13-01-closures.html\n /// [`Fn`]: trait.Fn.html\n /// [`FnOnce`]: trait.FnOnce.html\n /// [function pointers]: ../../std/primitive.fn.html\n@@ -173,7 +173,7 @@ pub trait FnMut<Args> : FnOnce<Args> {\n /// `Fn(usize, bool) -> usize`). Those interested in the technical details of\n /// this can refer to [the relevant section in the *Rustonomicon*][nomicon].\n ///\n-/// [book]: ../../book/second-edition/ch13-01-closures.html\n+/// [book]: ../../book/ch13-01-closures.html\n /// [`Fn`]: trait.Fn.html\n /// [`FnMut`]: trait.FnMut.html\n /// [function pointers]: ../../std/primitive.fn.html"}, {"sha": "ef7fb0128ef4b4740df08cde6ccc5461469b4b3c", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -477,22 +477,6 @@ impl_stable_hash_for!(enum mir::interpret::InboundsCheck {\n     MaybeDead\n });\n \n-impl_stable_hash_for!(enum mir::interpret::Lock {\n-    NoLock,\n-    WriteLock(dl),\n-    ReadLock(v)\n-});\n-\n-impl_stable_hash_for!(struct mir::interpret::DynamicLifetime {\n-    frame,\n-    region\n-});\n-\n-impl_stable_hash_for!(enum mir::interpret::AccessKind {\n-    Read,\n-    Write\n-});\n-\n impl_stable_hash_for!(enum ty::Variance {\n     Covariant,\n     Invariant,"}, {"sha": "5e94bb1f877fb2539521a23fbdc759cec8cc80d7", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -19,7 +19,7 @@ pub type OpaqueTypeMap<'tcx> = DefIdMap<OpaqueTypeDecl<'tcx>>;\n /// appear in the return type).\n #[derive(Copy, Clone, Debug)]\n pub struct OpaqueTypeDecl<'tcx> {\n-    /// The substitutions that we apply to the abstract that that this\n+    /// The substitutions that we apply to the abstract that this\n     /// `impl Trait` desugars to. e.g., if:\n     ///\n     ///     fn foo<'a, 'b, T>() -> impl Trait<'a>"}, {"sha": "fe113494316b4e24e276b7306b896a53f7e46e6f", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -173,8 +173,8 @@ impl<'a> LintLevelsBuilder<'a> {\n \n     /// Pushes a list of AST lint attributes onto this context.\n     ///\n-    /// This function will return a `BuilderPush` object which should be be\n-    /// passed to `pop` when this scope for the attributes provided is exited.\n+    /// This function will return a `BuilderPush` object which should be passed\n+    /// to `pop` when this scope for the attributes provided is exited.\n     ///\n     /// This function will perform a number of tasks:\n     ///"}, {"sha": "e6a560b2ad7b6e87f2008b54467686f92087b6c2", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -29,7 +29,6 @@ use mir;\n use hir::def_id::DefId;\n use ty::{self, TyCtxt, Instance};\n use ty::layout::{self, Size};\n-use middle::region;\n use std::io;\n use rustc_serialize::{Encoder, Decodable, Encodable};\n use rustc_data_structures::fx::FxHashMap;\n@@ -40,27 +39,6 @@ use ty::codec::TyDecoder;\n use std::sync::atomic::{AtomicU32, Ordering};\n use std::num::NonZeroU32;\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n-pub enum Lock {\n-    NoLock,\n-    WriteLock(DynamicLifetime),\n-    /// This should never be empty -- that would be a read lock held and nobody\n-    /// there to release it...\n-    ReadLock(Vec<DynamicLifetime>),\n-}\n-\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n-pub struct DynamicLifetime {\n-    pub frame: usize,\n-    pub region: Option<region::Scope>, // \"None\" indicates \"until the function ends\"\n-}\n-\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n-pub enum AccessKind {\n-    Read,\n-    Write,\n-}\n-\n /// Uniquely identifies a specific constant or static.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n pub struct GlobalId<'tcx> {"}, {"sha": "76eb43e73d16645b5d04bad237c4abef4cf7d90d", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -79,7 +79,7 @@ pub enum Scalar<Tag=(), Id=AllocId> {\n     /// The raw bytes of a simple value.\n     Bits {\n         /// The first `size` bytes are the value.\n-        /// Do not try to read less or more bytes that that. The remaining bytes must be 0.\n+        /// Do not try to read less or more bytes than that. The remaining bytes must be 0.\n         size: u8,\n         bits: u128,\n     },"}, {"sha": "42adc6a87fdba2a5ffc0803f250817213456b24e", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -1311,12 +1311,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"Disable the instrumentation pre-inliner, useful for profiling / PGO.\"),\n     relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],\n         \"choose which RELRO level to use\"),\n-    nll_subminimal_causes: bool = (false, parse_bool, [UNTRACKED],\n-        \"when tracking region error causes, accept subminimal results for faster execution.\"),\n     nll_facts: bool = (false, parse_bool, [UNTRACKED],\n                        \"dump facts from NLL analysis into side files\"),\n-    disable_nll_user_type_assert: bool = (false, parse_bool, [UNTRACKED],\n-        \"disable user provided type assertion in NLL\"),\n     nll_dont_emit_read_for_match: bool = (false, parse_bool, [UNTRACKED],\n         \"in match codegen, do not include FakeRead statements (used by mir-borrowck)\"),\n     dont_buffer_diagnostics: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "00967242bed0e93dbd80b0e628b47b8d5e50b662", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -359,7 +359,15 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n \n                 match abi_of_ty(unit_receiver_ty) {\n                     &Abi::Scalar(..) => (),\n-                    abi => bug!(\"Receiver when Self = () should have a Scalar ABI, found {:?}\", abi)\n+                    abi => {\n+                        self.sess.delay_span_bug(\n+                            self.def_span(method.def_id),\n+                            &format!(\n+                                \"Receiver when Self = () should have a Scalar ABI, found {:?}\",\n+                                abi\n+                            ),\n+                        );\n+                    }\n                 }\n \n                 let trait_object_ty = self.object_ty_for_trait(\n@@ -373,10 +381,15 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n \n                 match abi_of_ty(trait_object_receiver) {\n                     &Abi::ScalarPair(..) => (),\n-                    abi => bug!(\n-                        \"Receiver when Self = {} should have a ScalarPair ABI, found {:?}\",\n-                        trait_object_ty, abi\n-                    )\n+                    abi => {\n+                        self.sess.delay_span_bug(\n+                            self.def_span(method.def_id),\n+                            &format!(\n+                                \"Receiver when Self = {} should have a ScalarPair ABI, found {:?}\",\n+                                trait_object_ty, abi\n+                            ),\n+                        );\n+                    }\n                 }\n             }\n         }"}, {"sha": "28b6f010ce09c7bd10e488232f75eb3ca45dfc03", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -109,7 +109,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n         self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)\n     }\n \n-    /// True if there any any un-erased free regions.\n+    /// True if there are any un-erased free regions.\n     fn has_erasable_regions(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)\n     }"}, {"sha": "dffc70edd1dd477dc7ee4e8a2bd60e8d449494e5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -14,7 +14,6 @@ use ich::Fingerprint;\n use ich::StableHashingContext;\n use infer::canonical::Canonical;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n-use middle::privacy::AccessLevels;\n use middle::resolve_lifetime::ObjectLifetimeDefault;\n use mir::Mir;\n use mir::interpret::{GlobalId, ErrorHandled};\n@@ -123,8 +122,6 @@ mod sty;\n /// *on-demand* infrastructure.\n #[derive(Clone)]\n pub struct CrateAnalysis {\n-    pub access_levels: Lrc<AccessLevels>,\n-    pub name: String,\n     pub glob_map: Option<hir::GlobMap>,\n }\n "}, {"sha": "fd51f4f86a0af8a990472214f2582a5f47ea0bc7", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -974,7 +974,7 @@ macro_rules! define_queries_inner {\n                         // HACK(eddyb) it's possible crates may be loaded after\n                         // the query engine is created, and because crate loading\n                         // is not yet integrated with the query engine, such crates\n-                        // would be be missing appropriate entries in `providers`.\n+                        // would be missing appropriate entries in `providers`.\n                         .unwrap_or(&tcx.queries.fallback_extern_providers)\n                         .$name;\n                     provider(tcx.global_tcx(), key)"}, {"sha": "7ad34bec899f476b1997ee637a0157bf1791dbcd", "filename": "src/librustc_apfloat/ieee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc_apfloat%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc_apfloat%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Fieee.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -2341,7 +2341,7 @@ mod sig {\n             // Our exponent should not underflow.\n             *exp = exp.checked_sub(bits as ExpInt).unwrap();\n \n-            // Jump is the inter-limb jump; shift is is intra-limb shift.\n+            // Jump is the inter-limb jump; shift is the intra-limb shift.\n             let jump = bits / LIMB_BITS;\n             let shift = bits % LIMB_BITS;\n \n@@ -2375,7 +2375,7 @@ mod sig {\n             // Our exponent should not overflow.\n             *exp = exp.checked_add(bits as ExpInt).unwrap();\n \n-            // Jump is the inter-limb jump; shift is is intra-limb shift.\n+            // Jump is the inter-limb jump; shift is the intra-limb shift.\n             let jump = bits / LIMB_BITS;\n             let shift = bits % LIMB_BITS;\n "}, {"sha": "a9b32df801c96d663b1337680834ff59eefc96d2", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -4,7 +4,6 @@ use rustc::hir::lowering::lower_crate;\n use rustc::hir::map as hir_map;\n use rustc::lint;\n use rustc::middle::{self, reachable, resolve_lifetime, stability};\n-use rustc::middle::privacy::AccessLevels;\n use rustc::ty::{self, AllArenas, Resolutions, TyCtxt};\n use rustc::traits;\n use rustc::util::common::{install_panic_hook, time, ErrorReported};\n@@ -18,7 +17,7 @@ use rustc_borrowck as borrowck;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::StableHasher;\n-use rustc_data_structures::sync::{self, Lrc, Lock};\n+use rustc_data_structures::sync::{self, Lock};\n use rustc_incremental;\n use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::{self, CStore};\n@@ -785,8 +784,6 @@ where\n             },\n \n             analysis: ty::CrateAnalysis {\n-                access_levels: Lrc::new(AccessLevels::default()),\n-                name: crate_name.to_string(),\n                 glob_map: if resolver.make_glob_map {\n                     Some(resolver.glob_map)\n                 } else {\n@@ -1193,7 +1190,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(\n     sess: &'tcx Session,\n     cstore: &'tcx CStore,\n     hir_map: hir_map::Map<'tcx>,\n-    mut analysis: ty::CrateAnalysis,\n+    analysis: ty::CrateAnalysis,\n     resolutions: Resolutions,\n     arenas: &'tcx mut AllArenas<'tcx>,\n     name: &str,\n@@ -1275,8 +1272,9 @@ where\n                 rvalue_promotion::check_crate(tcx)\n             });\n \n-            analysis.access_levels =\n-                time(sess, \"privacy checking\", || rustc_privacy::check_crate(tcx));\n+            time(sess, \"privacy checking\", || {\n+                rustc_privacy::check_crate(tcx)\n+            });\n \n             time(sess, \"intrinsic checking\", || {\n                 middle::intrinsicck::check_crate(tcx)"}, {"sha": "a555b7790971f5426fd89147268cd8b0a6d1295b", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -673,7 +673,7 @@ impl EarlyLintPass for AnonymousParameters {\n     }\n }\n \n-/// Checks for incorrect use use of `repr` attributes.\n+/// Checks for incorrect use of `repr` attributes.\n #[derive(Clone)]\n pub struct BadRepr;\n "}, {"sha": "7f7d168ac0321265bca12cbb2d27fb1e3800ba00", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -723,7 +723,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                      functions can only return borrows to data passed as arguments\",\n                 );\n                 err.note(\n-                    \"to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch04-02-\\\n+                    \"to learn more, visit <https://doc.rust-lang.org/book/ch04-02-\\\n                      references-and-borrowing.html#dangling-references>\",\n                 );\n             } else {\n@@ -2139,7 +2139,7 @@ impl<'tcx> AnnotatedBorrowFnSignature<'tcx> {\n                     \"argument and return type have the same lifetime due to lifetime elision rules\",\n                 );\n                 diag.note(\n-                    \"to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch10-03-\\\n+                    \"to learn more, visit <https://doc.rust-lang.org/book/ch10-03-\\\n                      lifetime-syntax.html#lifetime-elision>\",\n                 );\n "}, {"sha": "0ceff4aa04898cca0061e2e664ffc3ad8011e222", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -279,20 +279,6 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for Borrows<'a, 'gcx, 'tcx> {\n                     });\n \n                     sets.gen(*index);\n-\n-                    // Issue #46746: Two-phase borrows handles\n-                    // stmts of form `Tmp = &mut Borrow` ...\n-                    match lhs {\n-                        Place::Promoted(_) |\n-                        Place::Local(..) | Place::Static(..) => {} // okay\n-                        Place::Projection(..) => {\n-                            // ... can assign into projections,\n-                            // e.g., `box (&mut _)`. Current\n-                            // conservative solution: force\n-                            // immediate activation here.\n-                            sets.gen(*index);\n-                        }\n-                    }\n                 }\n             }\n "}, {"sha": "5a80a5fdab501cb31b215279da81225b4d69be83", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -26,7 +26,7 @@ pub mod elaborate_drops;\n pub mod add_call_guards;\n pub mod promote_consts;\n pub mod qualify_consts;\n-mod qualify_min_const_fn;\n+pub mod qualify_min_const_fn;\n pub mod remove_noop_landing_pads;\n pub mod dump_mir;\n pub mod deaggregator;"}, {"sha": "3f9c5f4fd273cfef46aee9937da232f4c8257e62", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -192,7 +192,7 @@ use foo::core;  // error: an extern crate named `core` has already\n fn main() {}\n ```\n \n-To fix issue issue, you have to rename at least one of the two imports.\n+To fix this issue, you have to rename at least one of the two imports.\n Example:\n \n ```"}, {"sha": "891537309177e5d611d9d77ce0b3113f8c04d1dc", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -14,7 +14,7 @@\n //! recording the output.\n \n use rustc::hir::def::Def as HirDef;\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::session::config::Input;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n@@ -56,14 +56,14 @@ macro_rules! access_from {\n     ($save_ctxt:expr, $vis:expr, $id:expr) => {\n         Access {\n             public: $vis.node.is_pub(),\n-            reachable: $save_ctxt.analysis.access_levels.is_reachable($id),\n+            reachable: $save_ctxt.tcx.privacy_access_levels(LOCAL_CRATE).is_reachable($id),\n         }\n     };\n \n     ($save_ctxt:expr, $item:expr) => {\n         Access {\n             public: $item.vis.node.is_pub(),\n-            reachable: $save_ctxt.analysis.access_levels.is_reachable($item.id),\n+            reachable: $save_ctxt.tcx.privacy_access_levels(LOCAL_CRATE).is_reachable($item.id),\n         }\n     };\n }"}, {"sha": "8e5eaa18b9de0717ba53c5ed96765252bb1f4409", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -1,6 +1,6 @@\n //! Conversion from AST representation of types to the `ty.rs` representation.\n-//! The main routine here is `ast_ty_to_ty()`; each use is is parameterized by\n-//! an instance of `AstConv`.\n+//! The main routine here is `ast_ty_to_ty()`; each use is parameterized by an\n+//! instance of `AstConv`.\n \n use errors::{Applicability, FatalError, DiagnosticId};\n use hir::{self, GenericArg, GenericArgs};"}, {"sha": "df83c92fde5b4361c25a1fd1ac1ef4c17be19c82", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -496,7 +496,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         self.infcx.commit_if_ok(|_| {\n             let mut all_obligations = vec![];\n \n-            // The liberated version of this signature should be be a subtype\n+            // The liberated version of this signature should be a subtype\n             // of the liberated form of the expectation.\n             for ((hir_ty, &supplied_ty), expected_ty) in decl.inputs.iter()\n                .zip(*supplied_sig.inputs().skip_binder()) // binder moved to (*) below"}, {"sha": "41f2b0ec7d24e829a67dd3e7f6c087a8f17fa7bc", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -335,7 +335,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // we may want to suggest adding a `*`, or removing\n                 // a `&`.\n                 //\n-                // (But, also check check the `expn_info()` to see if this is\n+                // (But, also check the `expn_info()` to see if this is\n                 // a macro; if so, it's hard to extract the text and make a good\n                 // suggestion, so don't bother.)\n                 if self.infcx.can_sub(self.param_env, checked, &expected).is_ok() &&"}, {"sha": "27ca205720d6a8c3107a415b04129644f888783f", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -534,7 +534,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n             did, param_env, type_generics, existing_predicates\n         );\n \n-        // The `Sized` trait must be handled specially, since we only only display it when\n+        // The `Sized` trait must be handled specially, since we only display it when\n         // it is *not* required (i.e., '?Sized')\n         let sized_trait = self.cx\n             .tcx"}, {"sha": "8bb0dc9daa6a2065f5e574fda1dfb3b2b0035a23", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -476,8 +476,6 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n             }).collect(),\n         };\n         let analysis = ty::CrateAnalysis {\n-            access_levels: Lrc::new(AccessLevels::default()),\n-            name: name.to_string(),\n             glob_map: if resolver.make_glob_map { Some(resolver.glob_map.clone()) } else { None },\n         };\n \n@@ -500,12 +498,12 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                                                         &mut arenas,\n                                                         &name,\n                                                         &output_filenames,\n-                                                        |tcx, analysis, _, result| {\n+                                                        |tcx, _, _, result| {\n             if result.is_err() {\n                 sess.fatal(\"Compilation failed, aborting rustdoc\");\n             }\n \n-            let ty::CrateAnalysis { access_levels, .. } = analysis;\n+            let access_levels = tcx.privacy_access_levels(LOCAL_CRATE);\n \n             // Convert from a NodeId set to a DefId set since we don't always have easy access\n             // to the map from defid -> nodeid"}, {"sha": "2170054b532b96eb1d23dc7d4c29088c2bb367d6", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -278,7 +278,7 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n         target_features::add_configuration(&mut cfg, &sess, &*codegen_backend);\n         sess.parse_sess.config = cfg;\n \n-        let out = Some(outdir.lock().unwrap().path().to_path_buf());\n+        let out = Some(outdir.lock().unwrap().path().join(\"rust_out\"));\n \n         if no_run {\n             control.after_analysis.stop = Compilation::Stop;\n@@ -291,8 +291,8 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n                 &cstore,\n                 &None,\n                 &input,\n-                &out,\n                 &None,\n+                &out,\n                 None,\n                 &control\n             )"}, {"sha": "92145907b95f68bb87733c0162f79a7c72471add", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -179,7 +179,7 @@ impl<T, S> HashSet<T, S>\n         HashSet { map: HashMap::with_hasher(hasher) }\n     }\n \n-    /// Creates an empty `HashSet` with with the specified capacity, using\n+    /// Creates an empty `HashSet` with the specified capacity, using\n     /// `hasher` to hash the keys.\n     ///\n     /// The hash set will be able to hold at least `capacity` elements without"}, {"sha": "0991957fa7fd58cc725104b5af070fe0bb724be0", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -948,7 +948,7 @@ impl Initializer {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(spotlight)]\n pub trait Write {\n-    /// Write a buffer into this object, returning how many bytes were written.\n+    /// Write a buffer into this writer, returning how many bytes were written.\n     ///\n     /// This function will attempt to write the entire contents of `buf`, but\n     /// the entire write may not succeed, or the write may also generate an\n@@ -1023,7 +1023,7 @@ pub trait Write {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn flush(&mut self) -> Result<()>;\n \n-    /// Attempts to write an entire buffer into this write.\n+    /// Attempts to write an entire buffer into this writer.\n     ///\n     /// This method will continuously call [`write`] until there is no more data\n     /// to be written or an error of non-[`ErrorKind::Interrupted`] kind is"}, {"sha": "a7ecee2d82203931bc2e62cd1bc2e7c407b8d8c8", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -47,8 +47,8 @@ mod as_keyword { }\n ///\n /// Constants must be explicitly typed, unlike with `let` you can't ignore its type and let the\n /// compiler figure it out. Any constant value can be defined in a const, which in practice happens\n-/// to be most things that would be reasonable to have a constant (barring `const fn`s, coming\n-/// soon). For example, you can't have a File as a `const`.\n+/// to be most things that would be reasonable to have a constant (barring `const fn`s). For\n+/// example, you can't have a File as a `const`.\n ///\n /// The only lifetime allowed in a constant is `'static`, which is the lifetime that encompasses\n /// all others in a Rust program. For example, if you wanted to define a constant string, it would\n@@ -169,7 +169,7 @@ mod crate_keyword { }\n ///\n /// [Algebraic Data Types]: https://en.wikipedia.org/wiki/Algebraic_data_type\n /// [`Option`]: option/enum.Option.html\n-/// [Rust Book]: https://doc.rust-lang.org/book/second-edition/ch06-01-defining-an-enum.html\n+/// [Rust Book]: https://doc.rust-lang.org/book/ch06-01-defining-an-enum.html\n /// [Reference]: https://doc.rust-lang.org/reference/items/enumerations.html\n mod enum_keyword { }\n \n@@ -211,7 +211,7 @@ mod enum_keyword { }\n /// For more information on FFI, check the [Rust book] or the [Reference].\n ///\n /// [Rust book]:\n-/// https://doc.rust-lang.org/book/second-edition/ch19-01-unsafe-rust.html#using-extern-functions-to-call-external-code\n+/// https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html#using-extern-functions-to-call-external-code\n /// [Reference]: https://doc.rust-lang.org/reference/items/external-blocks.html\n mod extern_keyword { }\n \n@@ -278,7 +278,7 @@ mod extern_keyword { }\n ///\n /// [`impl`]: keyword.impl.html\n /// [`extern`]: keyword.extern.html\n-/// [Rust book]: https://doc.rust-lang.org/book/second-edition/ch03-03-how-functions-work.html\n+/// [Rust book]: https://doc.rust-lang.org/book/ch03-03-how-functions-work.html\n /// [Reference]: https://doc.rust-lang.org/reference/items/functions.html\n mod fn_keyword { }\n \n@@ -705,6 +705,6 @@ mod loop_keyword { }\n /// [Reference][reference].\n ///\n /// [`PhantomData`]: marker/struct.PhantomData.html\n-/// [book]: https://doc.rust-lang.org/book/second-edition/ch05-01-defining-structs.html\n+/// [book]: https://doc.rust-lang.org/book/ch05-01-defining-structs.html\n /// [reference]: https://doc.rust-lang.org/reference/items/structs.html\n mod struct_keyword { }"}, {"sha": "475c9b4aeaa4efaf29482afc4f4e2b1ac6e55441", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -923,7 +923,7 @@ mod prim_usize { }\n /// For more information on how to use references, see [the book's section on \"References and\n /// Borrowing\"][book-refs].\n ///\n-/// [book-refs]: ../book/second-edition/ch04-02-references-and-borrowing.html\n+/// [book-refs]: ../book/ch04-02-references-and-borrowing.html\n ///\n /// # Trait implementations\n ///"}, {"sha": "aac1804734ae3d192f5bebaea9d5906c3c6eead3", "filename": "src/libstd/sys/cloudabi/abi/cloudabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -107,7 +107,7 @@\n //!\n //! ## Specification of the ABI\n //!\n-//! The entire ABI is specified in a a file called\n+//! The entire ABI is specified in a file called\n //! [`cloudabi.txt`](https://github.com/NuxiNL/cloudabi/blob/master/cloudabi.txt),\n //! from which all\n //! [headers](https://github.com/NuxiNL/cloudabi/tree/master/headers)"}, {"sha": "4bda8ac91da62d8b073e1e178c72b8799afd0e62", "filename": "src/libstd/sys/windows/backtrace/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -103,7 +103,7 @@ fn set_frames<W: StackWalker>(StackWalk: W, frames: &mut [Frame]) -> io::Result<\n         frames[i] = Frame {\n             symbol_addr: addr,\n             exact_position: addr,\n-            inline_context: 0,\n+            inline_context: frame.get_inline_context(),\n         };\n \n         i += 1\n@@ -209,6 +209,7 @@ trait StackFrame {\n     fn new() -> Self;\n     fn init(&mut self, ctx: &c::CONTEXT) -> c::DWORD;\n     fn get_addr(&self) -> *const u8;\n+    fn get_inline_context(&self) -> u32;\n }\n \n impl StackFrame for c::STACKFRAME_EX {\n@@ -263,6 +264,10 @@ impl StackFrame for c::STACKFRAME_EX {\n     fn get_addr(&self) -> *const u8 {\n         (self.AddrPC.Offset - 1) as *const u8\n     }\n+\n+    fn get_inline_context(&self) -> u32 {\n+        self.InlineFrameContext\n+    }\n }\n \n impl StackFrame for c::STACKFRAME64 {\n@@ -317,6 +322,10 @@ impl StackFrame for c::STACKFRAME64 {\n     fn get_addr(&self) -> *const u8 {\n         (self.AddrPC.Offset - 1) as *const u8\n     }\n+\n+    fn get_inline_context(&self) -> u32 {\n+        0\n+    }\n }\n \n enum StackWalkVariant {"}, {"sha": "6342af46daf0ab8071bfa5164c72c5669966cfa0", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -126,7 +126,7 @@ pub trait OpenOptionsExt {\n     ///\n     /// By default `share_mode` is set to\n     /// `FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE`. This allows\n-    /// other processes to to read, write, and delete/rename the same file\n+    /// other processes to read, write, and delete/rename the same file\n     /// while it is open. Removing any of the flags will prevent other\n     /// processes from performing the corresponding operation until the file\n     /// handle is closed."}, {"sha": "d55f785bd9b4b5f695d33994c99a06cd087ac868", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -161,7 +161,7 @@ struct MatcherPos<'root, 'tt: 'root> {\n     /// The position of the \"dot\" in this matcher\n     idx: usize,\n \n-    /// The first span of source source that the beginning of this matcher corresponds to. In other\n+    /// The first span of source that the beginning of this matcher corresponds to. In other\n     /// words, the token in the source whose span is `sp_open` is matched against the first token of\n     /// the matcher.\n     sp_open: Span,"}, {"sha": "ddb30221d7985e813b4214d14c2a560ed6ee0991", "filename": "src/stdsimd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstdsimd?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -1 +1 @@\n-Subproject commit 513e067908f3e2eb8b31ad1c12b2e0a62817e557\n+Subproject commit ddb30221d7985e813b4214d14c2a560ed6ee0991"}, {"sha": "1e68b4f8b7025e55d353ba2a1da05dcc38d6e413", "filename": "src/test/compile-fail/invalid-link-args.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fcompile-fail%2Finvalid-link-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fcompile-fail%2Finvalid-link-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finvalid-link-args.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -0,0 +1,12 @@\n+// ignore-msvc due to linker-flavor=ld\n+// error-pattern:aFdEfSeVEEE\n+// compile-flags: -C linker-flavor=ld\n+\n+/* Make sure invalid link_args are printed to stderr. */\n+\n+#![feature(link_args)]\n+\n+#[link_args = \"aFdEfSeVEEE\"]\n+extern {}\n+\n+fn main() { }"}, {"sha": "c2ca2f807426f66593d0723ab61150fec03c7ac3", "filename": "src/test/compile-fail/nolink-with-link-args.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8c2d0f4a1da300cb34d77fbcdd9f7209cc556582/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c2d0f4a1da300cb34d77fbcdd9f7209cc556582/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs?ref=8c2d0f4a1da300cb34d77fbcdd9f7209cc556582", "patch": "@@ -1,13 +0,0 @@\n-// error-pattern:aFdEfSeVEE\n-// compile-flags: -C linker-flavor=ld\n-\n-/* We're testing that link_args are indeed passed when nolink is specified.\n-So we try to compile with junk link_args and make sure they are visible in\n-the compiler output. */\n-\n-#![feature(link_args)]\n-\n-#[link_args = \"aFdEfSeVEEE\"]\n-extern {}\n-\n-fn main() { }"}, {"sha": "e41acc2e1ec7105d42380b7b337b5aa1493998d8", "filename": "src/test/debuginfo/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimd.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -4,7 +4,7 @@\n \n // FIXME: LLVM generates invalid debug info for variables requiring\n // dynamic stack realignment, which is the case on s390x for vector\n-// types with with non-vector ABI.\n+// types with non-vector ABI.\n // ignore-s390x\n \n // compile-flags:-g"}, {"sha": "78ac2f6a82da5ad6addfc6bb18215d3f437c8111", "filename": "src/test/run-make-fulldeps/relro-levels/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Frun-make-fulldeps%2Frelro-levels%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Frun-make-fulldeps%2Frelro-levels%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frelro-levels%2FMakefile?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -1,6 +1,6 @@\n -include ../tools.mk\n \n-# This tests the different -Zrelro-level values, and makes sure that they they work properly.\n+# This tests the different -Zrelro-level values, and makes sure that they work properly.\n \n all:\n ifeq ($(UNAME),Linux)"}, {"sha": "c38524857b4a24a27c5fe484ae984eba51c1b18f", "filename": "src/test/run-pass/generator/yield-subtype.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Frun-pass%2Fgenerator%2Fyield-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Frun-pass%2Fgenerator%2Fyield-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fyield-subtype.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -3,7 +3,6 @@\n #![allow(dead_code)]\n \n // revisions:lexical nll\n-//[nll]compile-flags: -Z disable-nll-user-type-assert\n #![cfg_attr(nll, feature(nll))]\n \n #![feature(generators)]"}, {"sha": "3a5e3734e140d08316ec157da04ef2709fe07473", "filename": "src/test/rustdoc/doctest-manual-crate-name.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Frustdoc%2Fdoctest-manual-crate-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Frustdoc%2Fdoctest-manual-crate-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoctest-manual-crate-name.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -0,0 +1,7 @@\n+// compile-flags:--test\n+\n+//! ```\n+//! #![crate_name=\"asdf\"]\n+//!\n+//! println!(\"yo\");\n+//! ```"}, {"sha": "c83b14374f7120cd48ffc985f5d906487d5edeaf", "filename": "src/test/ui/associated-types/associated-types-unsized.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     let x = t.get(); //~ ERROR the size for values of type\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `<T as Get>::Value`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where <T as Get>::Value: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature"}, {"sha": "9565888dcc022a0a11a046b73474dffbcf6c0561", "filename": "src/test/ui/bad/bad-sized.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -11,7 +11,7 @@ LL |     let x: Vec<Trait + Sized> = Vec::new();\n    |            ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn Trait`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::vec::Vec`\n \n error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time\n@@ -21,7 +21,7 @@ LL |     let x: Vec<Trait + Sized> = Vec::new();\n    |                                 ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn Trait`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `<std::vec::Vec<T>>::new`\n \n error: aborting due to 3 previous errors"}, {"sha": "0f996fcd9434090fca87e8876717f1595ce7ccf9", "filename": "src/test/ui/consts/const-unsized.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL | const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n    |                ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::fmt::Debug + std::marker::Sync + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:6:18\n@@ -14,7 +14,7 @@ LL | const CONST_FOO: str = *\"foo\";\n    |                  ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `(dyn std::fmt::Debug + std::marker::Sync + 'static)` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:9:18\n@@ -23,7 +23,7 @@ LL | static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n    |                  ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::fmt::Debug + std::marker::Sync + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:12:20\n@@ -32,7 +32,7 @@ LL | static STATIC_BAR: str = *\"bar\";\n    |                    ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to 4 previous errors\n "}, {"sha": "4e1e67c7f4809eedd117de9123730ecc6bf06db4", "filename": "src/test/ui/dst/dst-bad-assign-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-2.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     f5.ptr = *z;\n    |     ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn ToBar`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the left-hand-side of an assignment must have a statically known size\n \n error: aborting due to previous error"}, {"sha": "0c4f86613196de961dfefc2ecaabc4b086e0e909", "filename": "src/test/ui/dst/dst-bad-assign-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -14,7 +14,7 @@ LL |     f5.2 = Bar1 {f: 36};\n    |     ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn ToBar`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the left-hand-side of an assignment must have a statically known size\n \n error: aborting due to 2 previous errors"}, {"sha": "a60d9d66f39e629c7fde63aa81969f695ae23c78", "filename": "src/test/ui/dst/dst-bad-assign.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -14,7 +14,7 @@ LL |     f5.ptr = Bar1 {f: 36};\n    |     ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn ToBar`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the left-hand-side of an assignment must have a statically known size\n \n error: aborting due to 2 previous errors"}, {"sha": "cb2735147a35b9cd1be8063c370256f308add7ba", "filename": "src/test/ui/dst/dst-bad-deep-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep-2.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     let h: &(([isize],),) = &(*g,);\n    |                              ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `(([isize],),)`, the trait `std::marker::Sized` is not implemented for `[isize]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `([isize],)`\n    = note: required because it appears within the type `(([isize],),)`\n    = note: tuples must have a statically known size to be initialized"}, {"sha": "521adf601cc701ed69556ccee978dd54b8f16a52", "filename": "src/test/ui/dst/dst-bad-deep.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     let h: &Fat<Fat<[isize]>> = &Fat { ptr: *g };\n    |                                  ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Fat<Fat<[isize]>>`, the trait `std::marker::Sized` is not implemented for `[isize]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Fat<[isize]>`\n    = note: required because it appears within the type `Fat<Fat<[isize]>>`\n    = note: structs must have a statically known size to be initialized"}, {"sha": "4851ca108285fa686cc8a10427d89299eba722d2", "filename": "src/test/ui/dst/dst-object-from-unsized-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     let u: &Foo = t;\n    |                   ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: required for the cast to the object type `dyn Foo`\n \n@@ -16,7 +16,7 @@ LL |     let v: &Foo = t as &Foo;\n    |                   ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: required for the cast to the object type `dyn Foo`\n \n@@ -27,7 +27,7 @@ LL |     let _: &[&Foo] = &[\"hi\"];\n    |                        ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n@@ -37,7 +37,7 @@ LL |     let _: &Foo = x as &Foo;\n    |                   ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn Foo`\n \n error: aborting due to 4 previous errors"}, {"sha": "40dc9978f367bc9742ba75da443b8aad130baddd", "filename": "src/test/ui/dst/dst-sized-trait-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL | impl Foo<[isize]> for usize { }\n    |      ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[isize]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `[usize]` cannot be known at compilation time\n   --> $DIR/dst-sized-trait-param.rs:10:6\n@@ -14,7 +14,7 @@ LL | impl Foo<isize> for [usize] { }\n    |      ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[usize]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e5e416da883dedb3f82696f721571137a5d20e90", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL | fn f(p: Path) { }\n    |      ^ borrow the `Path` instead\n    |\n    = help: within `std::path::Path`, the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `std::path::Path`\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature"}, {"sha": "4e4f5550fe833d028f615c6334038dd416e167d9", "filename": "src/test/ui/extern/extern-types-unsized.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     assert_sized::<A>();\n    |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `A`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n note: required by `assert_sized`\n   --> $DIR/extern-types-unsized.rs:19:1\n    |\n@@ -19,7 +19,7 @@ LL |     assert_sized::<Foo>();\n    |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Foo`, the trait `std::marker::Sized` is not implemented for `A`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Foo`\n note: required by `assert_sized`\n   --> $DIR/extern-types-unsized.rs:19:1\n@@ -34,7 +34,7 @@ LL |     assert_sized::<Bar<A>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Bar<A>`, the trait `std::marker::Sized` is not implemented for `A`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Bar<A>`\n note: required by `assert_sized`\n   --> $DIR/extern-types-unsized.rs:19:1\n@@ -49,7 +49,7 @@ LL |     assert_sized::<Bar<Bar<A>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Bar<Bar<A>>`, the trait `std::marker::Sized` is not implemented for `A`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Bar<A>`\n    = note: required because it appears within the type `Bar<Bar<A>>`\n note: required by `assert_sized`"}, {"sha": "1f35efa59b690c1a46d02008fb299c7fc6368265", "filename": "src/test/ui/feature-gates/feature-gate-trivial_bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -95,7 +95,7 @@ LL | struct TwoStrs(str, str) where str: Sized; //~ ERROR\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n \n@@ -108,7 +108,7 @@ LL | | }\n    | |_^ doesn't have a size known at compile-time\n    |\n    = help: within `Dst<(dyn A + 'static)>`, the trait `std::marker::Sized` is not implemented for `(dyn A + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Dst<(dyn A + 'static)>`\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n@@ -122,7 +122,7 @@ LL | | }\n    | |_^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n "}, {"sha": "bde39cbeaeb285643a62fe0e630b4d0498645614", "filename": "src/test/ui/feature-gates/feature-gate-unsized_locals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL | fn f(f: FnOnce()) {}\n    |      ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::FnOnce() + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "4f59f2c1c6ab32f32e0058b0328d6ec4ceccb79d", "filename": "src/test/ui/generator/sized-yield.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -9,7 +9,7 @@ LL | |    };\n    | |____^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the yield type of a generator must have a statically known size\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -19,7 +19,7 @@ LL |    unsafe { gen.resume(); }\n    |                 ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a3588bb8ebe124e3dba59035600ba0a1aff01ba7", "filename": "src/test/ui/issues/issue-14366.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     let _x = \"test\" as &::std::any::Any;\n    |              ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn std::any::Any`\n \n error: aborting due to previous error"}, {"sha": "987bc512163d67c8d4d6ac4c7649df2de1907e6c", "filename": "src/test/ui/issues/issue-15756.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-15756.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-15756.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15756.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     &mut something\n    |          ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[T]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "72c40ff4b3a0c3f6c5ea6598a9d94afb4c4a56f7", "filename": "src/test/ui/issues/issue-17651.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     (|| Box::new(*(&[0][..])))();\n    |         ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[{integer}]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `<std::boxed::Box<T>>::new`\n \n error: aborting due to previous error"}, {"sha": "23b58c3f6df3d88fb072c93f8c00ddb46d68cb54", "filename": "src/test/ui/issues/issue-18107.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-18107.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-18107.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18107.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     AbstractRenderer\n    |     ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn AbstractRenderer + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the return type of a function must have a statically known size\n \n error: aborting due to previous error"}, {"sha": "ca717a3c49b8158c6e5117688e7737d26c3667c5", "filename": "src/test/ui/issues/issue-18919.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -7,7 +7,7 @@ LL | | }\n    | |_^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn for<'r> std::ops::Fn(&'r isize) -> isize`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::option::Option`\n \n error: aborting due to previous error"}, {"sha": "672d78f65e9f7c1eb833f0c0a400fd9a3f0a3be8", "filename": "src/test/ui/issues/issue-20005.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -9,7 +9,7 @@ LL | |     }\n    | |_____^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where Self: std::marker::Sized` bound\n note: required by `From`\n   --> $DIR/issue-20005.rs:1:1"}, {"sha": "f7cb28edd621686017bba6f158ddad06246af84b", "filename": "src/test/ui/issues/issue-20433.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     fn iceman(c: Vec<[i32]>) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::vec::Vec`\n \n error: aborting due to previous error"}, {"sha": "f779fe51bf2d165deefc6d4a7931d3f0424fde65", "filename": "src/test/ui/issues/issue-20605.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     for item in *things { *item = 0 }\n    |                 ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn std::iter::Iterator<Item=&mut u8>`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error: aborting due to previous error"}, {"sha": "229f99f90640ba01d8f1c25a88abe732affd77bb", "filename": "src/test/ui/issues/issue-22874.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-22874.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-22874.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22874.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     rows: [[String]],\n    |     ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[std::string::String]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: slice and array elements must have `Sized` type\n \n error: aborting due to previous error"}, {"sha": "1e57774afe55aa2d402efaffb114628a37bd1370", "filename": "src/test/ui/issues/issue-23281.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     pub fn function(funs: Vec<Fn() -> ()>) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::Fn() + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::vec::Vec`\n \n error: aborting due to previous error"}, {"sha": "ffec73b1ab4a818fea10bc84198e0027a1597607", "filename": "src/test/ui/issues/issue-24446.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-24446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-24446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24446.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     static foo: Fn() -> u32 = || -> u32 {\n    |                 ^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::Fn() -> u32 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to previous error\n "}, {"sha": "b95c298b6e679382c72e594243d4bb4646e45769", "filename": "src/test/ui/issues/issue-27060-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     data: T, //~ ERROR the size for values of type\n    |     ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: the last field of a packed struct may only have a dynamically sized type if it does not need drop to be run\n "}, {"sha": "76cc3e7b0a36e156427f65b96ef3e0b561341776", "filename": "src/test/ui/issues/issue-27078.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     fn foo(self) -> &'static i32 {\n    |            ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where Self: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature"}, {"sha": "48b151c73c9565b147a975a9f8f0e39e3297243b", "filename": "src/test/ui/issues/issue-30355.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     &X(*Y)\n    |      ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "825c0de5e53ea945971674066b764463d26ae691", "filename": "src/test/ui/issues/issue-35988.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-35988.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-35988.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35988.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     V([Box<E>]),\n    |       ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[std::boxed::Box<E>]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error: aborting due to previous error"}, {"sha": "a74d6353c31f498e241b26d0bdecd37aba54b01c", "filename": "src/test/ui/issues/issue-38954.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL | fn _test(ref _p: str) {}\n    |                       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "bcca911c5a5c8d1798447361c9287b0e9b58fa7f", "filename": "src/test/ui/issues/issue-41229-ref-str.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL | pub fn example(ref s: str) {}\n    |                            ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "20c8d085cbc62f375edf8848316bb7c53ca5a928", "filename": "src/test/ui/issues/issue-42312.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     fn baz(_: Self::Target) where Self: Deref {}\n    |                             ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `<Self as std::ops::Deref>::Target`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where <Self as std::ops::Deref>::Target: std::marker::Sized` bound\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n@@ -17,7 +17,7 @@ LL | pub fn f(_: ToString) {}\n    |                       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::string::ToString + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "992c691bf21ef2cba62f36c07ce9e2e820777163", "filename": "src/test/ui/issues/issue-54410.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-54410.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-54410.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54410.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     pub static mut symbol: [i8];\n    |                            ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to previous error\n "}, {"sha": "b6454e578e6af22b8f4fd438efdccd4a5cc3a416", "filename": "src/test/ui/issues/issue-56806.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-56806.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-56806.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56806.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -0,0 +1,7 @@\n+pub trait Trait {\n+    fn dyn_instead_of_self(self: Box<dyn Trait>);\n+    //~^ ERROR invalid method receiver type: std::boxed::Box<(dyn Trait + 'static)>\n+}\n+\n+pub fn main() {\n+}"}, {"sha": "2dd3add8f60e61aa9cbb57d90b26653bea8a5026", "filename": "src/test/ui/issues/issue-56806.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -0,0 +1,12 @@\n+error[E0307]: invalid method receiver type: std::boxed::Box<(dyn Trait + 'static)>\n+  --> $DIR/issue-56806.rs:2:34\n+   |\n+LL |     fn dyn_instead_of_self(self: Box<dyn Trait>);\n+   |                                  ^^^^^^^^^^^^^^\n+   |\n+   = note: type must be `Self` or a type that dereferences to it\n+   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0307`."}, {"sha": "ad463d4c478ca8e1b4634ba97b68d2d4f0699199", "filename": "src/test/ui/issues/issue-5883.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL | fn new_struct(r: A+'static)\n    |               ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn A + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -16,7 +16,7 @@ LL |     -> Struct { //~^ ERROR the size for values of type\n    |        ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Struct`, the trait `std::marker::Sized` is not implemented for `(dyn A + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Struct`\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "158d114616979c907a59eaed5a6b629f19ecc6ef", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -223,7 +223,7 @@ LL |     let _ = fat_v as *const Foo; //~ ERROR the size for values of type\n    |             ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -233,7 +233,7 @@ LL |     let _ = a as *const Foo; //~ ERROR the size for values of type\n    |             ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0606]: casting `&{float}` as `f32` is invalid"}, {"sha": "e83374af3b0662f039376088d83c84dcf061e854", "filename": "src/test/ui/nll/issue-52534.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fnll%2Fissue-52534.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fnll%2Fissue-52534.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -10,7 +10,7 @@ LL | }\n    | - ...but `x` will be dropped here, when the function `bar` returns\n    |\n    = note: functions cannot return a borrow to data owned within the function's scope, functions can only return borrows to data passed as arguments\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html#dangling-references>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html#dangling-references>\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/issue-52534.rs:18:26\n@@ -24,7 +24,7 @@ LL | }\n    | - ...but `y` will be dropped here, when the function `foobar` returns\n    |\n    = note: functions cannot return a borrow to data owned within the function's scope, functions can only return borrows to data passed as arguments\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html#dangling-references>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html#dangling-references>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "00c0c80515557944043224e5b3a18d8914ad904e", "filename": "src/test/ui/range/range-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-1.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -19,7 +19,7 @@ LL |     let range = *arr..;\n    |                 ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[{integer}]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::ops::RangeFrom`\n \n error: aborting due to 3 previous errors"}, {"sha": "89eb3d97ce0a54eacec2b968e3a906648b8051a8", "filename": "src/test/ui/resolve/issue-5035-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL | fn foo(_x: K) {}\n    |        ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn I + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "05692515af8467fde41a214a39f45c12ea185bab", "filename": "src/test/ui/span/dropck_vec_cycle_checked.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `c2` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:103:24\n+  --> $DIR/dropck_vec_cycle_checked.rs:98:24\n    |\n LL |     c1.v[0].v.set(Some(&c2));\n    |                        ^^^ borrowed value does not live long enough\n@@ -13,7 +13,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are defined\n \n error[E0597]: `c3` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:105:24\n+  --> $DIR/dropck_vec_cycle_checked.rs:100:24\n    |\n LL |     c1.v[1].v.set(Some(&c3));\n    |                        ^^^ borrowed value does not live long enough\n@@ -27,7 +27,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are defined\n \n error[E0597]: `c1` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:111:24\n+  --> $DIR/dropck_vec_cycle_checked.rs:106:24\n    |\n LL |     c3.v[0].v.set(Some(&c1));\n    |                        ^^^ borrowed value does not live long enough"}, {"sha": "c80e0386e6a15aeb484a68ea6f8dd5e4eb2e73b2", "filename": "src/test/ui/span/dropck_vec_cycle_checked.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -1,12 +1,7 @@\n-// compile-flags: -Z nll-subminimal-causes\n-// (Work around rust-lang/rust#49998 by opting into nll-subminimal-causes.)\n-\n // Reject mixing cyclic structure and Drop when using Vec.\n //\n // (Compare against compile-fail/dropck_arr_cycle_checked.rs)\n \n-\n-\n use std::cell::Cell;\n use id::Id;\n "}, {"sha": "35e4314d0c66f46708af2ef505dac34859214ed1", "filename": "src/test/ui/span/dropck_vec_cycle_checked.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `c2` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:103:25\n+  --> $DIR/dropck_vec_cycle_checked.rs:98:25\n    |\n LL |     c1.v[0].v.set(Some(&c2));\n    |                         ^^ borrowed value does not live long enough\n@@ -10,7 +10,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c3` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:105:25\n+  --> $DIR/dropck_vec_cycle_checked.rs:100:25\n    |\n LL |     c1.v[1].v.set(Some(&c3));\n    |                         ^^ borrowed value does not live long enough\n@@ -21,7 +21,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c2` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:107:25\n+  --> $DIR/dropck_vec_cycle_checked.rs:102:25\n    |\n LL |     c2.v[0].v.set(Some(&c2));\n    |                         ^^ borrowed value does not live long enough\n@@ -32,7 +32,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c3` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:109:25\n+  --> $DIR/dropck_vec_cycle_checked.rs:104:25\n    |\n LL |     c2.v[1].v.set(Some(&c3));\n    |                         ^^ borrowed value does not live long enough\n@@ -43,7 +43,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c1` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:111:25\n+  --> $DIR/dropck_vec_cycle_checked.rs:106:25\n    |\n LL |     c3.v[0].v.set(Some(&c1));\n    |                         ^^ borrowed value does not live long enough\n@@ -54,7 +54,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c2` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:113:25\n+  --> $DIR/dropck_vec_cycle_checked.rs:108:25\n    |\n LL |     c3.v[1].v.set(Some(&c2));\n    |                         ^^ borrowed value does not live long enough"}, {"sha": "24d8db481b46833ef9e096a5c3fd5d387397199e", "filename": "src/test/ui/str/str-array-assignment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -28,7 +28,7 @@ LL |   let v = s[..2];\n    |       doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "a0c7c2c574e4efff59b226243b8273972e7f0f04", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     s[1..2] = bot();\n    |               ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n note: required by `bot`\n   --> $DIR/str-mut-idx.rs:1:1\n    |\n@@ -19,7 +19,7 @@ LL |     s[1..2] = bot();\n    |     ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the left-hand-side of an assignment must have a statically known size\n \n error[E0277]: the type `str` cannot be mutably indexed by `usize`"}, {"sha": "567b4d9f4403edeeb3323a4ac1b3c433b6143a01", "filename": "src/test/ui/substs-ppaux.normal.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -41,7 +41,7 @@ LL |     <str as Foo<u8>>::bar;\n    |     ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because of the requirements on the impl of `Foo<'_, '_, u8>` for `str`\n note: required by `Foo::bar`\n   --> $DIR/substs-ppaux.rs:7:5"}, {"sha": "9d8a555dffe16fb4658e29ea1723f0f62da5597b", "filename": "src/test/ui/substs-ppaux.verbose.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -41,7 +41,7 @@ LL |     <str as Foo<u8>>::bar;\n    |     ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because of the requirements on the impl of `Foo<'_#0r, '_#1r, u8>` for `str`\n note: required by `Foo::bar`\n   --> $DIR/substs-ppaux.rs:7:5"}, {"sha": "b073e10749cc1334e1c19fda8322aa5125c95e57", "filename": "src/test/ui/suggestions/path-by-value.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL | fn f(p: Path) { }\n    |      ^ borrow the `Path` instead\n    |\n    = help: within `std::path::Path`, the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `std::path::Path`\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature"}, {"sha": "5aee1e7e982a8968b34531015f182c3e7e636176", "filename": "src/test/ui/traits/trait-bounds-not-on-bare-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL | fn foo(_x: Foo + Send) {\n    |        ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn Foo + std::marker::Send + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "f88dae37e48e597b1830e2008e3457e7372760d4", "filename": "src/test/ui/traits/trait-suggest-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     mem::size_of::<U>();\n    |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `U`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where U: std::marker::Sized` bound\n    = note: required by `std::mem::size_of`\n \n@@ -16,7 +16,7 @@ LL |     mem::size_of::<Misc<U>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Misc<U>`, the trait `std::marker::Sized` is not implemented for `U`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where U: std::marker::Sized` bound\n    = note: required because it appears within the type `Misc<U>`\n    = note: required by `std::mem::size_of`\n@@ -54,7 +54,7 @@ LL |     mem::size_of::<[T]>();\n    |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[T]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::mem::size_of`\n \n error[E0277]: the size for values of type `[&U]` cannot be known at compilation time\n@@ -64,7 +64,7 @@ LL |     mem::size_of::<[&U]>();\n    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[&U]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::mem::size_of`\n \n error: aborting due to 7 previous errors"}, {"sha": "aa055d3dc03f56dc651d816ccf6eea91fa15dbe1", "filename": "src/test/ui/trivial-bounds/trivial-bounds-leak.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL | fn cant_return_str() -> str { //~ ERROR\n    |                         ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the return type of a function must have a statically known size\n \n error[E0599]: no method named `test` found for type `i32` in the current scope"}, {"sha": "89140030683858aa4217271b860c5dea39bace8e", "filename": "src/test/ui/union/union-sized-field.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     value: T,\n    |     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: no field of a union may have a dynamically sized type\n \n@@ -16,7 +16,7 @@ LL |     value: T,\n    |     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: only the last field of a struct may have a dynamically sized type\n \n@@ -27,7 +27,7 @@ LL |     Value(T),\n    |           ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n "}, {"sha": "e702f2c61bee3ff543755b0f549ad5158210a30a", "filename": "src/test/ui/union/union-unsized.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funion%2Funion-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funion%2Funion-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsized.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     a: str,\n    |     ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of a union may have a dynamically sized type\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -15,7 +15,7 @@ LL |     b: str,\n    |     ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of a union may have a dynamically sized type\n \n error: aborting due to 2 previous errors"}, {"sha": "7b6c2d11ea169786581385b24106a818380f03c7", "filename": "src/test/ui/unsized-locals/issue-50940-with-feature.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     A as fn(str) -> A<str>;\n    |     ^ doesn't have a size known at compile-time\n    |\n    = help: within `main::A<str>`, the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `main::A<str>`\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "be006c09d6f5c6cd177827509358902cd6d7b7fa", "filename": "src/test/ui/unsized-locals/issue-50940.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     A as fn(str) -> A<str>;\n    |     ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "43c35cdd7b5b09b461042a8243dffd42c787b1fe", "filename": "src/test/ui/unsized-locals/unsized-exprs.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     udrop::<(i32, [u8])>((42, *foo()));\n    |                          ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `({integer}, [u8])`, the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `({integer}, [u8])`\n    = note: tuples must have a statically known size to be initialized\n \n@@ -16,7 +16,7 @@ LL |     udrop::<A<[u8]>>(A { 0: *foo() });\n    |                      ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `A<[u8]>`, the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `A<[u8]>`\n    = note: structs must have a statically known size to be initialized\n \n@@ -27,7 +27,7 @@ LL |     udrop::<A<[u8]>>(A(*foo()));\n    |                      ^ doesn't have a size known at compile-time\n    |\n    = help: within `A<[u8]>`, the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `A<[u8]>`\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "f9a7452a5ebf228206b0d2cb44cb76fdb75e5bc9", "filename": "src/test/ui/unsized-locals/unsized-exprs3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     udrop as fn([u8]);\n    |     ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "cee1459c7915d7aa2e1caf7cd766e0d608907ee5", "filename": "src/test/ui/unsized/unsized-bare-typaram.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL | fn foo<T: ?Sized>() { bar::<T>() }\n    |                       ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n note: required by `bar`\n   --> $DIR/unsized-bare-typaram.rs:1:1"}, {"sha": "20857a1d65e753be959912883833f12b4d993837", "filename": "src/test/ui/unsized/unsized-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |                                    ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n note: required by `Foo`\n   --> $DIR/unsized-enum.rs:4:1"}, {"sha": "9109366e4fcfdde30eb2e3e82f25711715672ce8", "filename": "src/test/ui/unsized/unsized-enum2.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     VA(W),\n    |        ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `W`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where W: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -16,7 +16,7 @@ LL |     VB{x: X},\n    |        ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -27,7 +27,7 @@ LL |     VC(isize, Y),\n    |               ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Y`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where Y: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -38,7 +38,7 @@ LL |     VD{u: isize, x: Z},\n    |                  ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Z`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where Z: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -49,7 +49,7 @@ LL |     VE([u8]),\n    |        ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -59,7 +59,7 @@ LL |     VF{x: str},\n    |        ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `[f32]` cannot be known at compilation time\n@@ -69,7 +69,7 @@ LL |     VG(isize, [f32]),\n    |               ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[f32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `[u32]` cannot be known at compilation time\n@@ -79,7 +79,7 @@ LL |     VH{u: isize, x: [u32]},\n    |                  ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time\n@@ -89,7 +89,7 @@ LL |     VM(Foo),\n    |        ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn Foo + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `(dyn Bar + 'static)` cannot be known at compilation time\n@@ -99,7 +99,7 @@ LL |     VN{x: Bar},\n    |        ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn Bar + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `(dyn FooBar + 'static)` cannot be known at compilation time\n@@ -109,7 +109,7 @@ LL |     VO(isize, FooBar),\n    |               ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn FooBar + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `(dyn BarFoo + 'static)` cannot be known at compilation time\n@@ -119,7 +119,7 @@ LL |     VP{u: isize, x: BarFoo},\n    |                  ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn BarFoo + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `[i8]` cannot be known at compilation time\n@@ -129,7 +129,7 @@ LL |     VQ(<&'static [i8] as Deref>::Target),\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `[char]` cannot be known at compilation time\n@@ -139,7 +139,7 @@ LL |     VR{x: <&'static [char] as Deref>::Target},\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[char]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `[f64]` cannot be known at compilation time\n@@ -149,7 +149,7 @@ LL |     VS(isize, <&'static [f64] as Deref>::Target),\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[f64]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n@@ -159,7 +159,7 @@ LL |     VT{u: isize, x: <&'static [i32] as Deref>::Target},\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `(dyn PathHelper1 + 'static)` cannot be known at compilation time\n@@ -169,7 +169,7 @@ LL |     VI(Path1),\n    |        ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path1`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper1 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Path1`\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -180,7 +180,7 @@ LL |     VJ{x: Path2},\n    |        ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path2`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper2 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Path2`\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -191,7 +191,7 @@ LL |     VK(isize, Path3),\n    |               ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path3`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper3 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Path3`\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -202,7 +202,7 @@ LL |     VL{u: isize, x: Path4},\n    |                  ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path4`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper4 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Path4`\n    = note: no field of an enum variant may have a dynamically sized type\n "}, {"sha": "98eecabc84cb8b973bc24cde734c2f618adc1b85", "filename": "src/test/ui/unsized/unsized-inherent-impl-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL | impl<X: ?Sized> S5<X> {\n    |                 ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n note: required by `S5`\n   --> $DIR/unsized-inherent-impl-self-type.rs:5:1"}, {"sha": "7add65c07866b22a4162f920fd301b640605fc82", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |                                    ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n note: required by `Foo`\n   --> $DIR/unsized-struct.rs:4:1\n@@ -20,7 +20,7 @@ LL | fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n    |                        ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Bar<T>`, the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: required because it appears within the type `Bar<T>`\n note: required by `is_sized`"}, {"sha": "c39f3652b647c6ce8cf605de984b40d3e56b4c7e", "filename": "src/test/ui/unsized/unsized-trait-impl-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL | impl<X: ?Sized> T3<X> for S5<X> {\n    |                 ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n note: required by `S5`\n   --> $DIR/unsized-trait-impl-self-type.rs:8:1"}, {"sha": "ee0d5ccccfe11b296204457ddd5c6868b94f82e4", "filename": "src/test/ui/unsized/unsized-trait-impl-trait-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL | impl<X: ?Sized> T2<X> for S4<X> {\n    |                 ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n \n error: aborting due to previous error"}, {"sha": "2c7b86c5d828438eb120fb95808cb2c8d5de1fb1", "filename": "src/test/ui/unsized3.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized3.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     f2::<X>(x);\n    |     ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n note: required by `f2`\n   --> $DIR/unsized3.rs:10:1\n@@ -20,7 +20,7 @@ LL |     f4::<X>(x);\n    |     ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n note: required by `f4`\n   --> $DIR/unsized3.rs:21:1\n@@ -35,7 +35,7 @@ LL |     f5(x1);\n    |     ^^ doesn't have a size known at compile-time\n    |\n    = help: within `S<X>`, the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: required because it appears within the type `S<X>`\n note: required by `f5`\n@@ -51,7 +51,7 @@ LL |     f5(&(*x1, 34));\n    |     ^^ doesn't have a size known at compile-time\n    |\n    = help: within `S<X>`, the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: required because it appears within the type `S<X>`\n    = note: only the last element of a tuple may have a dynamically sized type\n@@ -63,7 +63,7 @@ LL |     f5(&(32, *x1));\n    |         ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `({integer}, S<X>)`, the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: required because it appears within the type `S<X>`\n    = note: required because it appears within the type `({integer}, S<X>)`\n@@ -76,7 +76,7 @@ LL |     f5(&(32, *x1));\n    |     ^^ doesn't have a size known at compile-time\n    |\n    = help: within `({integer}, S<X>)`, the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: required because it appears within the type `S<X>`\n    = note: required because it appears within the type `({integer}, S<X>)`"}, {"sha": "6dce9a046066fbdea9edbca9347d81b20b9a9bfa", "filename": "src/test/ui/unsized5.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized5.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     f1: X,\n    |     ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: only the last field of a struct may have a dynamically sized type\n \n@@ -16,7 +16,7 @@ LL |     g: X,\n    |     ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: only the last field of a struct may have a dynamically sized type\n \n@@ -27,7 +27,7 @@ LL |     f: str,\n    |     ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last field of a struct may have a dynamically sized type\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n@@ -37,7 +37,7 @@ LL |     f: [u8],\n    |     ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last field of a struct may have a dynamically sized type\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n@@ -47,7 +47,7 @@ LL |     V1(X, isize),\n    |        ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -58,7 +58,7 @@ LL |     V2{f1: X, f: isize},\n    |        ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n "}, {"sha": "a6a26573e7c596789835162adc531316988d0276", "filename": "src/test/ui/unsized6.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized6.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     let y: Y;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Y`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where Y: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n@@ -17,7 +17,7 @@ LL |     let _: (isize, (X, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: only the last element of a tuple may have a dynamically sized type\n \n@@ -28,7 +28,7 @@ LL |     let y: (isize, (Z, usize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Z`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where Z: std::marker::Sized` bound\n    = note: only the last element of a tuple may have a dynamically sized type\n \n@@ -39,7 +39,7 @@ LL |     let y: X;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n@@ -51,7 +51,7 @@ LL |     let y: (isize, (Y, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Y`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where Y: std::marker::Sized` bound\n    = note: only the last element of a tuple may have a dynamically sized type\n \n@@ -62,7 +62,7 @@ LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n@@ -74,7 +74,7 @@ LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n@@ -86,7 +86,7 @@ LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n@@ -98,7 +98,7 @@ LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n@@ -110,7 +110,7 @@ LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n@@ -122,7 +122,7 @@ LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n@@ -134,7 +134,7 @@ LL | fn g1<X: ?Sized>(x: X) {}\n    |                  ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n@@ -146,7 +146,7 @@ LL | fn g2<X: ?Sized + T>(x: X) {}\n    |                      ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature"}, {"sha": "bb83b1811844aa4f1fdde87f53acef5a098f095b", "filename": "src/test/ui/unsized7.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Funsized7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized7.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL | impl<X: ?Sized + T> T1<X> for S3<X> {\n    |                     ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n \n error: aborting due to previous error"}, {"sha": "69df9ea7857d555e591f7cb524875511f4be84d1", "filename": "src/test/ui/wf/wf-array-elem-sized.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -5,7 +5,7 @@ LL |     foo: [[u8]], //~ ERROR E0277\n    |     ^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: slice and array elements must have `Sized` type\n \n error: aborting due to previous error"}, {"sha": "594ce7d2f49caef8a1af60537c7aae06afcfc346", "filename": "src/test/ui/wf/wf-fn-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -20,7 +20,7 @@ LL | fn bar() where Vec<dyn Copy>:, {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::marker::Copy + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::vec::Vec`\n \n error[E0038]: the trait `std::marker::Copy` cannot be made into an object"}, {"sha": "400c205d44b20f147348e8f1ee0566f346c739bb", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fe5182c967259ef89dbe313e4bf80f45a53e7e/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=68fe5182c967259ef89dbe313e4bf80f45a53e7e", "patch": "@@ -2569,7 +2569,7 @@ impl<'test> TestCx<'test> {\n             .env(\"LLVM_CXXFLAGS\", &self.config.llvm_cxxflags)\n \n             // We for sure don't want these tests to run in parallel, so make\n-            // sure they don't have access to these vars if we we run via `make`\n+            // sure they don't have access to these vars if we run via `make`\n             // at the top level\n             .env_remove(\"MAKEFLAGS\")\n             .env_remove(\"MFLAGS\")"}]}