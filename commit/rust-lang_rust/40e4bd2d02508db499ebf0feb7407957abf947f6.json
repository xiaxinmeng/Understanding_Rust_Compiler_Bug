{"sha": "40e4bd2d02508db499ebf0feb7407957abf947f6", "node_id": "C_kwDOAAsO6NoAKDQwZTRiZDJkMDI1MDhkYjQ5OWViZjBmZWI3NDA3OTU3YWJmOTQ3ZjY", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-02-16T09:54:36Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-03-09T09:52:04Z"}, "message": "treat all mir::Constant values as ConstantKind::Val", "tree": {"sha": "26af8ca7a029da22020063862a9f1f58e491e598", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26af8ca7a029da22020063862a9f1f58e491e598"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40e4bd2d02508db499ebf0feb7407957abf947f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40e4bd2d02508db499ebf0feb7407957abf947f6", "html_url": "https://github.com/rust-lang/rust/commit/40e4bd2d02508db499ebf0feb7407957abf947f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40e4bd2d02508db499ebf0feb7407957abf947f6/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6045c34f15d463c7d51104b968c1eabc5275b9c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6045c34f15d463c7d51104b968c1eabc5275b9c1", "html_url": "https://github.com/rust-lang/rust/commit/6045c34f15d463c7d51104b968c1eabc5275b9c1"}], "stats": {"total": 66, "additions": 56, "deletions": 10}, "files": [{"sha": "dbc0c8469584264445efc24df59168db2f0c0f2e", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/40e4bd2d02508db499ebf0feb7407957abf947f6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e4bd2d02508db499ebf0feb7407957abf947f6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=40e4bd2d02508db499ebf0feb7407957abf947f6", "patch": "@@ -2554,7 +2554,14 @@ impl<'tcx> Constant<'tcx> {\n impl<'tcx> From<ty::Const<'tcx>> for ConstantKind<'tcx> {\n     #[inline]\n     fn from(ct: ty::Const<'tcx>) -> Self {\n-        Self::Ty(ct)\n+        match ct.val() {\n+            ty::ConstKind::Value(cv) => {\n+                // FIXME Once valtrees are introduced we need to convert those\n+                // into `ConstValue` instances here\n+                Self::Val(cv, ct.ty())\n+            }\n+            _ => Self::Ty(ct),\n+        }\n     }\n }\n \n@@ -2635,6 +2642,27 @@ impl<'tcx> ConstantKind<'tcx> {\n             Self::Val(val, _) => val.try_to_machine_usize(tcx),\n         }\n     }\n+\n+    pub fn from_bool(tcx: TyCtxt<'tcx>, v: bool) -> Self {\n+        let cv = ConstValue::from_bool(v);\n+        Self::Val(cv, tcx.types.bool)\n+    }\n+\n+    pub fn from_zero_sized(ty: Ty<'tcx>) -> Self {\n+        let cv = ConstValue::Scalar(Scalar::ZST);\n+        Self::Val(cv, ty)\n+    }\n+\n+    pub fn from_usize(tcx: TyCtxt<'tcx>, n: u64) -> Self {\n+        let ty = tcx.types.usize;\n+        let size = tcx\n+            .layout_of(ty::ParamEnv::empty().and(ty))\n+            .unwrap_or_else(|e| bug!(\"could not compute layout for {:?}: {:?}\", ty, e))\n+            .size;\n+        let cv = ConstValue::Scalar(Scalar::from_uint(n as u128, size));\n+\n+        Self::Val(cv, ty)\n+    }\n }\n \n /// A collection of projections into user types."}, {"sha": "dca9a63120c32f0100852b0982afa25df97e7447", "filename": "compiler/rustc_mir_build/src/build/cfg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40e4bd2d02508db499ebf0feb7407957abf947f6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e4bd2d02508db499ebf0feb7407957abf947f6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs?ref=40e4bd2d02508db499ebf0feb7407957abf947f6", "patch": "@@ -2,7 +2,7 @@\n \n use crate::build::CFG;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::TyCtxt;\n \n impl<'tcx> CFG<'tcx> {\n     crate fn block_data(&self, blk: BasicBlock) -> &BasicBlockData<'tcx> {\n@@ -73,7 +73,7 @@ impl<'tcx> CFG<'tcx> {\n             Rvalue::Use(Operand::Constant(Box::new(Constant {\n                 span: source_info.span,\n                 user_ty: None,\n-                literal: ty::Const::zero_sized(tcx, tcx.types.unit).into(),\n+                literal: ConstantKind::from_zero_sized(tcx.types.unit),\n             }))),\n         );\n     }"}, {"sha": "9c7c7203f47de83de2cc5f859d159e190ffdcfb7", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/40e4bd2d02508db499ebf0feb7407957abf947f6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e4bd2d02508db499ebf0feb7407957abf947f6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=40e4bd2d02508db499ebf0feb7407957abf947f6", "patch": "@@ -9,7 +9,7 @@ use rustc_hir as hir;\n use rustc_index::vec::Idx;\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n-use rustc_middle::ty::{self, CanonicalUserTypeAnnotation};\n+use rustc_middle::ty::CanonicalUserTypeAnnotation;\n use std::iter;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n@@ -107,7 +107,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     Constant {\n                         span: expr_span,\n                         user_ty: None,\n-                        literal: ty::Const::from_bool(this.tcx, true).into(),\n+                        literal: ConstantKind::from_bool(this.tcx, true),\n                     },\n                 );\n \n@@ -118,7 +118,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     Constant {\n                         span: expr_span,\n                         user_ty: None,\n-                        literal: ty::Const::from_bool(this.tcx, false).into(),\n+                        literal: ConstantKind::from_bool(this.tcx, false),\n                     },\n                 );\n \n@@ -183,8 +183,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         span: expr_span,\n                         user_ty: None,\n                         literal: match op {\n-                            LogicalOp::And => ty::Const::from_bool(this.tcx, false).into(),\n-                            LogicalOp::Or => ty::Const::from_bool(this.tcx, true).into(),\n+                            LogicalOp::And => ConstantKind::from_bool(this.tcx, false),\n+                            LogicalOp::Or => ConstantKind::from_bool(this.tcx, true),\n                         },\n                     },\n                 );"}, {"sha": "3516eca1c1469663a2c7c2b83cde4fc2a75d71f2", "filename": "compiler/rustc_mir_build/src/build/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40e4bd2d02508db499ebf0feb7407957abf947f6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e4bd2d02508db499ebf0feb7407957abf947f6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmisc.rs?ref=40e4bd2d02508db499ebf0feb7407957abf947f6", "patch": "@@ -54,7 +54,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             Constant {\n                 span: source_info.span,\n                 user_ty: None,\n-                literal: ty::Const::from_usize(self.tcx, value).into(),\n+                literal: ConstantKind::from_usize(self.tcx, value),\n             },\n         );\n         temp"}, {"sha": "dc11c76e07b237a1c8443a09986ed5f5c488c62a", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40e4bd2d02508db499ebf0feb7407957abf947f6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e4bd2d02508db499ebf0feb7407957abf947f6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=40e4bd2d02508db499ebf0feb7407957abf947f6", "patch": "@@ -569,6 +569,9 @@ impl<'tcx> Cx<'tcx> {\n \n             hir::ExprKind::ConstBlock(ref anon_const) => {\n                 let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n+\n+                // FIXME Do we want to use `from_inline_const` once valtrees\n+                // are introduced? This would create `ValTree`s that will never be used...\n                 let value = ty::Const::from_inline_const(self.tcx, anon_const_def_id);\n \n                 ExprKind::ConstBlock { value }"}, {"sha": "0e05900823fceffe62dfc1857e71b6d7e95efb15", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/40e4bd2d02508db499ebf0feb7407957abf947f6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e4bd2d02508db499ebf0feb7407957abf947f6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=40e4bd2d02508db499ebf0feb7407957abf947f6", "patch": "@@ -334,6 +334,21 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n         &mut self,\n         constant: mir::ConstantKind<'tcx>,\n     ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {\n-        constant.try_super_fold_with(self)\n+        let constant_kind = match constant {\n+            mir::ConstantKind::Ty(c) => {\n+                let const_folded = c.try_super_fold_with(self)?;\n+                match const_folded.val() {\n+                    ty::ConstKind::Value(cv) => {\n+                        // FIXME With Valtrees we need to convert `cv: ValTree`\n+                        // to a `ConstValue` here.\n+                        mir::ConstantKind::Val(cv, const_folded.ty())\n+                    }\n+                    _ => mir::ConstantKind::Ty(const_folded),\n+                }\n+            }\n+            mir::ConstantKind::Val(_, _) => constant.try_super_fold_with(self)?,\n+        };\n+\n+        Ok(constant_kind)\n     }\n }"}]}