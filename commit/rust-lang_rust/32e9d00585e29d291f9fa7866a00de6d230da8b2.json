{"sha": "32e9d00585e29d291f9fa7866a00de6d230da8b2", "node_id": "C_kwDOAAsO6NoAKDMyZTlkMDA1ODVlMjlkMjkxZjlmYTc4NjZhMDBkZTZkMjMwZGE4YjI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-20T21:22:38Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-20T21:22:38Z"}, "message": "tweaks", "tree": {"sha": "98ad5a159aa1885e1a05305454d572633598ed4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98ad5a159aa1885e1a05305454d572633598ed4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32e9d00585e29d291f9fa7866a00de6d230da8b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32e9d00585e29d291f9fa7866a00de6d230da8b2", "html_url": "https://github.com/rust-lang/rust/commit/32e9d00585e29d291f9fa7866a00de6d230da8b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32e9d00585e29d291f9fa7866a00de6d230da8b2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf9e73f6d4cca9fb01d74e09bde1fc8be3981d4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf9e73f6d4cca9fb01d74e09bde1fc8be3981d4e", "html_url": "https://github.com/rust-lang/rust/commit/bf9e73f6d4cca9fb01d74e09bde1fc8be3981d4e"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "f307bf11edd362bb21a4836af2aa72e19816904a", "filename": "src/tools/miri/src/stacked_borrows/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32e9d00585e29d291f9fa7866a00de6d230da8b2/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32e9d00585e29d291f9fa7866a00de6d230da8b2/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fdiagnostics.rs?ref=32e9d00585e29d291f9fa7866a00de6d230da8b2", "patch": "@@ -288,7 +288,7 @@ impl<'span, 'history, 'ecx, 'mir, 'tcx> DiagnosticCx<'span, 'history, 'ecx, 'mir\n             }\n             Operation::Access(AccessOp { kind, range, .. }) =>\n                 (*range, InvalidationCause::Access(*kind)),\n-            _ => {\n+            Operation::Dealloc(_) => {\n                 // This can be reached, but never be relevant later since the entire allocation is\n                 // gone now.\n                 return;"}, {"sha": "bc52428910aa0d36e9bdfcacf3f5288172690ad6", "filename": "src/tools/miri/src/stacked_borrows/mod.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/32e9d00585e29d291f9fa7866a00de6d230da8b2/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32e9d00585e29d291f9fa7866a00de6d230da8b2/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs?ref=32e9d00585e29d291f9fa7866a00de6d230da8b2", "patch": "@@ -65,7 +65,7 @@ pub struct FrameExtra {\n     /// incremental updates of the global list of protected tags stored in the\n     /// `stacked_borrows::GlobalState` upon function return, and if we attempt to pop a protected\n     /// tag, to identify which call is responsible for protecting the tag.\n-    /// See `Stack::item_popped` for more explanation.\n+    /// See `Stack::item_invalidated` for more explanation.\n     ///\n     /// This will contain one tag per reference passed to the function, so\n     /// a size of 2 is enough for the vast majority of functions.\n@@ -126,7 +126,7 @@ pub struct GlobalStateInner {\n     /// An item is protected if its tag is in this set, *and* it has the \"protected\" bit set.\n     /// We add tags to this when they are created with a protector in `reborrow`, and\n     /// we remove tags from this when the call which is protecting them returns, in\n-    /// `GlobalStateInner::end_call`. See `Stack::item_popped` for more details.\n+    /// `GlobalStateInner::end_call`. See `Stack::item_invalidated` for more details.\n     protected_tags: FxHashMap<SbTag, ProtectorKind>,\n     /// The pointer ids to trace\n     tracked_pointer_tags: FxHashSet<SbTag>,\n@@ -292,6 +292,13 @@ impl Permission {\n     }\n }\n \n+/// Determines whether an item was invalidated by a conflicting access, or by deallocation.\n+#[derive(Copy, Clone, Debug)]\n+enum ItemInvalidationCause {\n+    Conflict,\n+    Dealloc,\n+}\n+\n /// Core per-location operations: access, dealloc, reborrow.\n impl<'tcx> Stack {\n     /// Find the first write-incompatible item above the given one --\n@@ -330,11 +337,11 @@ impl<'tcx> Stack {\n     /// Within `provoking_access, the `AllocRange` refers the entire operation, and\n     /// the `Size` refers to the specific location in the `AllocRange` that we are\n     /// currently checking.\n-    fn item_popped(\n+    fn item_invalidated(\n         item: &Item,\n         global: &GlobalStateInner,\n         dcx: &mut DiagnosticCx<'_, '_, '_, '_, 'tcx>,\n-        deallocation: bool,\n+        cause: ItemInvalidationCause,\n     ) -> InterpResult<'tcx> {\n         if !global.tracked_pointer_tags.is_empty() {\n             dcx.check_tracked_tag_popped(item, global);\n@@ -358,7 +365,10 @@ impl<'tcx> Stack {\n         //    which ends up about linear in the number of protected tags in the program into a\n         //    constant time check (and a slow linear, because the tags in the frames aren't contiguous).\n         if let Some(&protector_kind) = global.protected_tags.get(&item.tag()) {\n-            let allowed = deallocation && matches!(protector_kind, ProtectorKind::WeakProtector);\n+            // The only way this is okay is if the protector is weak and we are deallocating with\n+            // the right pointer.\n+            let allowed = matches!(cause, ItemInvalidationCause::Dealloc)\n+                && matches!(protector_kind, ProtectorKind::WeakProtector);\n             if !allowed {\n                 return Err(dcx.protector_error(item, protector_kind).into());\n             }\n@@ -401,7 +411,7 @@ impl<'tcx> Stack {\n                 0\n             };\n             self.pop_items_after(first_incompatible_idx, |item| {\n-                Stack::item_popped(&item, global, dcx, /* deallocation */ false)?;\n+                Stack::item_invalidated(&item, global, dcx, ItemInvalidationCause::Conflict)?;\n                 dcx.log_invalidation(item.tag());\n                 Ok(())\n             })?;\n@@ -422,7 +432,7 @@ impl<'tcx> Stack {\n                 0\n             };\n             self.disable_uniques_starting_at(first_incompatible_idx, |item| {\n-                Stack::item_popped(&item, global, dcx, /* deallocation */ false)?;\n+                Stack::item_invalidated(&item, global, dcx, ItemInvalidationCause::Conflict)?;\n                 dcx.log_invalidation(item.tag());\n                 Ok(())\n             })?;\n@@ -472,7 +482,7 @@ impl<'tcx> Stack {\n         // Step 2: Pretend we remove the remaining items, checking if any are strongly protected.\n         for idx in (0..self.len()).rev() {\n             let item = self.get(idx).unwrap();\n-            Stack::item_popped(&item, global, dcx, /* deallocation */ true)?;\n+            Stack::item_invalidated(&item, global, dcx, ItemInvalidationCause::Dealloc)?;\n         }\n \n         Ok(())\n@@ -847,7 +857,7 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n         );\n \n         if let Some(protect) = protect {\n-            // See comment in `Stack::item_popped` for why we store the tag twice.\n+            // See comment in `Stack::item_invalidated` for why we store the tag twice.\n             this.frame_mut().extra.stacked_borrows.as_mut().unwrap().protected_tags.push(new_tag);\n             this.machine\n                 .stacked_borrows"}]}