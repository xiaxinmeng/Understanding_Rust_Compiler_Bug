{"sha": "fa8fc4b2b5bc66aa7b10a04a895c33de0d5e8185", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhOGZjNGIyYjViYzY2YWE3YjEwYTA0YTg5NWMzM2RlMGQ1ZTgxODU=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-15T00:48:37Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-15T17:22:50Z"}, "message": "Add 1shot pipe chan_one/port_one type aliases and convert std::sync to use them", "tree": {"sha": "a578472c3a9a089b7108f68a78c4aa7f6b515a0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a578472c3a9a089b7108f68a78c4aa7f6b515a0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa8fc4b2b5bc66aa7b10a04a895c33de0d5e8185", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa8fc4b2b5bc66aa7b10a04a895c33de0d5e8185", "html_url": "https://github.com/rust-lang/rust/commit/fa8fc4b2b5bc66aa7b10a04a895c33de0d5e8185", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa8fc4b2b5bc66aa7b10a04a895c33de0d5e8185/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a63f85ce8c48a819c341f247ef451eb2160b30b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a63f85ce8c48a819c341f247ef451eb2160b30b1", "html_url": "https://github.com/rust-lang/rust/commit/a63f85ce8c48a819c341f247ef451eb2160b30b1"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "bc6d89e92b6cbf13d03b42841ea1f10d6c18d71d", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fa8fc4b2b5bc66aa7b10a04a895c33de0d5e8185/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa8fc4b2b5bc66aa7b10a04a895c33de0d5e8185/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=fa8fc4b2b5bc66aa7b10a04a895c33de0d5e8185", "patch": "@@ -90,7 +90,8 @@ export send_packet, recv_packet, send, recv, try_recv, peek;\n export select, select2, selecti, select2i, selectable;\n export spawn_service, spawn_service_recv;\n export stream, port, chan, shared_chan, port_set, channel;\n-export oneshot, recv_one, try_recv_one, send_one, try_send_one;\n+export oneshot, chan_one, port_one;\n+export recv_one, try_recv_one, send_one, try_send_one;\n \n #[doc(hidden)]\n const SPIN_COUNT: uint = 0;\n@@ -1144,23 +1145,27 @@ proto! oneshot {\n     }\n }\n \n+/// The send end of a oneshot pipe.\n+type chan_one<T: send> = oneshot::client::oneshot<T>;\n+/// The receive end of a oneshot pipe.\n+type port_one<T: send> = oneshot::server::oneshot<T>;\n+\n /// Initialiase a (send-endpoint, recv-endpoint) oneshot pipe pair.\n-fn oneshot<T: send>() -> (oneshot::client::oneshot<T>,\n-                          oneshot::server::oneshot<T>) {\n+fn oneshot<T: send>() -> (chan_one<T>, port_one<T>) {\n     oneshot::init()\n }\n \n /**\n  * Receive a message from a oneshot pipe, failing if the connection was\n  * closed.\n  */\n-fn recv_one<T: send>(+port: oneshot::server::oneshot<T>) -> T {\n+fn recv_one<T: send>(+port: port_one<T>) -> T {\n     let oneshot::send(message) = recv(port);\n     message\n }\n \n /// Receive a message from a oneshot pipe unless the connection was closed.\n-fn try_recv_one<T: send> (+port: oneshot::server::oneshot<T>) -> option<T> {\n+fn try_recv_one<T: send> (+port: port_one<T>) -> option<T> {\n     let message = try_recv(port);\n \n     if message == none { none }\n@@ -1171,15 +1176,15 @@ fn try_recv_one<T: send> (+port: oneshot::server::oneshot<T>) -> option<T> {\n }\n \n /// Send a message on a oneshot pipe, failing if the connection was closed.\n-fn send_one<T: send>(+chan: oneshot::client::oneshot<T>, +data: T) {\n+fn send_one<T: send>(+chan: chan_one<T>, +data: T) {\n     oneshot::client::send(chan, data);\n }\n \n /**\n  * Send a message on a oneshot pipe, or return false if the connection was\n  * closed.\n  */\n-fn try_send_one<T: send>(+chan: oneshot::client::oneshot<T>, +data: T)\n+fn try_send_one<T: send>(+chan: chan_one<T>, +data: T)\n         -> bool {\n     oneshot::client::try_send(chan, data).is_some()\n }"}, {"sha": "85043699595f76b1e945b154c7aebb191bd49610", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fa8fc4b2b5bc66aa7b10a04a895c33de0d5e8185/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa8fc4b2b5bc66aa7b10a04a895c33de0d5e8185/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=fa8fc4b2b5bc66aa7b10a04a895c33de0d5e8185", "patch": "@@ -18,8 +18,8 @@ import unsafe::{Exclusive, exclusive};\n  ****************************************************************************/\n \n // Each waiting task receives on one of these. FIXME #3125 make these oneshot.\n-type wait_end = pipes::port<()>;\n-type signal_end = pipes::chan<()>;\n+type wait_end = pipes::port_one<()>;\n+type signal_end = pipes::chan_one<()>;\n // A doubly-ended queue of waiting tasks.\n struct waitqueue { head: pipes::port<signal_end>;\n                    tail: pipes::chan<signal_end>; }\n@@ -30,7 +30,7 @@ fn signal_waitqueue(q: &waitqueue) -> bool {\n     if q.head.peek() {\n         // Pop and send a wakeup signal. If the waiter was killed, its port\n         // will have closed. Keep trying until we get a live task.\n-        if q.head.recv().try_send(()) {\n+        if pipes::try_send_one(q.head.recv(), ()) {\n             true\n         } else {\n             signal_waitqueue(q)\n@@ -43,7 +43,7 @@ fn signal_waitqueue(q: &waitqueue) -> bool {\n fn broadcast_waitqueue(q: &waitqueue) -> uint {\n     let mut count = 0;\n     while q.head.peek() {\n-        if q.head.recv().try_send(()) {\n+        if pipes::try_send_one(q.head.recv(), ()) {\n             count += 1;\n         }\n     }\n@@ -80,7 +80,7 @@ impl<Q: send> &sem<Q> {\n                 state.count -= 1;\n                 if state.count < 0 {\n                     // Create waiter nobe.\n-                    let (signal_end, wait_end) = pipes::stream();\n+                    let (signal_end, wait_end) = pipes::oneshot();\n                     // Tell outer scope we need to block.\n                     waiter_nobe = some(wait_end);\n                     // Enqueue ourself.\n@@ -92,7 +92,7 @@ impl<Q: send> &sem<Q> {\n         /* for 1000.times { task::yield(); } */\n         // Need to wait outside the exclusive.\n         if waiter_nobe.is_some() {\n-            let _ = option::unwrap(waiter_nobe).recv();\n+            let _ = pipes::recv_one(option::unwrap(waiter_nobe));\n         }\n     }\n     fn release() {\n@@ -151,7 +151,7 @@ impl &condvar {\n     /// Atomically drop the associated lock, and block until a signal is sent.\n     fn wait() {\n         // Create waiter nobe.\n-        let (signal_end, wait_end) = pipes::stream();\n+        let (signal_end, wait_end) = pipes::oneshot();\n         let mut signal_end = some(signal_end);\n         let mut reacquire = none;\n         unsafe {\n@@ -177,7 +177,7 @@ impl &condvar {\n         }\n         // Unconditionally \"block\". (Might not actually block if a signaller\n         // did send -- I mean 'unconditionally' in contrast with acquire().)\n-        let _ = wait_end.recv();\n+        let _ = pipes::recv_one(wait_end);\n \n         // This is needed for a failing condition variable to reacquire the\n         // mutex during unwinding. As long as the wrapper (mutex, etc) is"}]}