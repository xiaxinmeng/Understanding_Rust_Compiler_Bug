{"sha": "97c257530bd1f7c54f4e805f701942b8ed335175", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3YzI1NzUzMGJkMWY3YzU0ZjRlODA1ZjcwMTk0MmI4ZWQzMzUxNzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-12T20:22:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-12T20:22:02Z"}, "message": "Auto merge of #1224 - RalfJung:diverge, r=RalfJung\n\nrefactor handling of diverging intrinsics/foreign functions\n\nAlso makes sure we don't accidentally call some normal intrinsics diverging -- which it turns out we did.", "tree": {"sha": "4494c91f7714aaaf75eb2311fef1e385e3e99174", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4494c91f7714aaaf75eb2311fef1e385e3e99174"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97c257530bd1f7c54f4e805f701942b8ed335175", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97c257530bd1f7c54f4e805f701942b8ed335175", "html_url": "https://github.com/rust-lang/rust/commit/97c257530bd1f7c54f4e805f701942b8ed335175", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97c257530bd1f7c54f4e805f701942b8ed335175/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b3d2657cf8288bd5427564aeb68bc3c0a4c9c10", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3d2657cf8288bd5427564aeb68bc3c0a4c9c10", "html_url": "https://github.com/rust-lang/rust/commit/5b3d2657cf8288bd5427564aeb68bc3c0a4c9c10"}, {"sha": "13ae3147f047d7ff1488e6eabc067dacbdef58c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/13ae3147f047d7ff1488e6eabc067dacbdef58c9", "html_url": "https://github.com/rust-lang/rust/commit/13ae3147f047d7ff1488e6eabc067dacbdef58c9"}], "stats": {"total": 80, "additions": 40, "deletions": 40}, "files": [{"sha": "86c227121540c1cca63a3489f13d2a4f978d0c5e", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 28, "deletions": 27, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/97c257530bd1f7c54f4e805f701942b8ed335175/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c257530bd1f7c54f4e805f701942b8ed335175/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=97c257530bd1f7c54f4e805f701942b8ed335175", "patch": "@@ -127,9 +127,31 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let tcx = &{ this.tcx.tcx };\n \n         // First: functions that diverge.\n-        let (dest, ret) = match link_name {\n-            // Note that this matches calls to the *foreign* item `__rust_start_panic* -\n-            // that is, calls to `extern \"Rust\" { fn __rust_start_panic(...) }`.\n+        let (dest, ret) = match ret {\n+            None => match link_name {\n+                // This matches calls to the foreign item `panic_impl`.\n+                // The implementation is provided by the function with the `#[panic_handler]` attribute.\n+                \"panic_impl\" => {\n+                    let panic_impl_id = this.tcx.lang_items().panic_impl().unwrap();\n+                    let panic_impl_instance = ty::Instance::mono(*this.tcx, panic_impl_id);\n+                    return Ok(Some(&*this.load_mir(panic_impl_instance.def, None)?));\n+                }\n+                | \"exit\"\n+                | \"ExitProcess\"\n+                => {\n+                    // it's really u32 for ExitProcess, but we have to put it into the `Exit` variant anyway\n+                    let code = this.read_scalar(args[0])?.to_i32()?;\n+                    throw_machine_stop!(TerminationInfo::Exit(code.into()));\n+                }\n+                _ => throw_unsup_format!(\"can't call (diverging) foreign function: {}\", link_name),\n+            },\n+            Some(p) => p,\n+        };\n+\n+        // Second: some functions that we forward to MIR implementations.\n+        match link_name {\n+            // This matches calls to the *foreign* item `__rust_start_panic*, that is,\n+            // calls to `extern \"Rust\" { fn __rust_start_panic(...) }`.\n             // We forward this to the underlying *implementation* in the panic runtime crate.\n             // Normally, this will be either `libpanic_unwind` or `libpanic_abort`, but it could\n             // also be a custom user-provided implementation via `#![feature(panic_runtime)]`\n@@ -145,31 +167,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     this.resolve_path(&[&*panic_runtime.as_str(), \"__rust_start_panic\"])?;\n                 return Ok(Some(&*this.load_mir(start_panic_instance.def, None)?));\n             }\n-            // Similarly, we forward calls to the `panic_impl` foreign item to its implementation.\n-            // The implementation is provided by the function with the `#[panic_handler]` attribute.\n-            \"panic_impl\" => {\n-                let panic_impl_id = this.tcx.lang_items().panic_impl().unwrap();\n-                let panic_impl_instance = ty::Instance::mono(*this.tcx, panic_impl_id);\n-                return Ok(Some(&*this.load_mir(panic_impl_instance.def, None)?));\n-            }\n-\n-            | \"exit\"\n-            | \"ExitProcess\"\n-            => {\n-                // it's really u32 for ExitProcess, but we have to put it into the `Exit` variant anyway\n-                let code = this.read_scalar(args[0])?.to_i32()?;\n-                throw_machine_stop!(TerminationInfo::Exit(code.into()));\n-            }\n-            _ => {\n-                if let Some(p) = ret {\n-                    p\n-                } else {\n-                    throw_unsup_format!(\"can't call (diverging) foreign function: {}\", link_name);\n-                }\n-            }\n-        };\n+            _ => {}\n+        }\n \n-        // Next: functions that return.\n+        // Third: functions that return.\n         if this.emulate_foreign_item_by_name(link_name, args, dest, ret)? {\n             this.dump_place(*dest);\n             this.go_to_block(ret);"}, {"sha": "cf06a647762a82c441f31d4a88bddc35a19000c7", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/97c257530bd1f7c54f4e805f701942b8ed335175/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c257530bd1f7c54f4e805f701942b8ed335175/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=97c257530bd1f7c54f4e805f701942b8ed335175", "patch": "@@ -31,22 +31,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // that might still hang around!\n         let intrinsic_name = &*tcx.item_name(instance.def_id()).as_str();\n \n-        // Handle diverging intrinsics.\n-        let (dest, ret) = match intrinsic_name {\n-            \"abort\" => {\n-                // FIXME: remove, once the intrinsic on the rustc side is fixed.\n-                throw_machine_stop!(TerminationInfo::Abort);\n-            }\n-            \"miri_start_panic\" => return this.handle_miri_start_panic(args, unwind),\n-            _ =>\n-                if let Some(p) = ret {\n-                    p\n-                } else {\n-                    throw_unsup_format!(\"unimplemented (diverging) intrinsic: {}\", intrinsic_name);\n-                },\n+        // First handle intrinsics without return place.\n+        let (dest, ret) = match ret {\n+            None => match intrinsic_name {\n+                \"abort\" => {\n+                    // FIXME: remove, once the intrinsic on the rustc side is fixed.\n+                    throw_machine_stop!(TerminationInfo::Abort);\n+                }\n+                _ => throw_unsup_format!(\"unimplemented (diverging) intrinsic: {}\", intrinsic_name),\n+            },\n+            Some(p) => p,\n         };\n \n         match intrinsic_name {\n+            \"miri_start_panic\" => return this.handle_miri_start_panic(args, unwind),\n+\n             \"arith_offset\" => {\n                 let offset = this.read_scalar(args[1])?.to_machine_isize(this)?;\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;"}]}