{"sha": "6e88d738be05637824f581fc9cb59990406bf2ba", "node_id": "C_kwDOAAsO6NoAKDZlODhkNzM4YmUwNTYzNzgyNGY1ODFmYzljYjU5OTkwNDA2YmYyYmE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-14T15:28:34Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-22T22:08:42Z"}, "message": "Remove generate_fn_name_span and generate_local_type_param_snippet.", "tree": {"sha": "0bc03d1d24ffae5eb2164037f111368c0f698044", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bc03d1d24ffae5eb2164037f111368c0f698044"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e88d738be05637824f581fc9cb59990406bf2ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e88d738be05637824f581fc9cb59990406bf2ba", "html_url": "https://github.com/rust-lang/rust/commit/6e88d738be05637824f581fc9cb59990406bf2ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e88d738be05637824f581fc9cb59990406bf2ba/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "362e6361d09f554b438f638fc8113b6091aa01b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/362e6361d09f554b438f638fc8113b6091aa01b8", "html_url": "https://github.com/rust-lang/rust/commit/362e6361d09f554b438f638fc8113b6091aa01b8"}], "stats": {"total": 87, "additions": 0, "deletions": 87}, "files": [{"sha": "a32cabab4c407281a0190e9dba473a863086b8bf", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 0, "deletions": 87, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/6e88d738be05637824f581fc9cb59990406bf2ba/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e88d738be05637824f581fc9cb59990406bf2ba/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=6e88d738be05637824f581fc9cb59990406bf2ba", "patch": "@@ -982,93 +982,6 @@ impl SourceMap {\n         self.files().iter().fold(0, |a, f| a + f.count_lines())\n     }\n \n-    pub fn generate_fn_name_span(&self, span: Span) -> Option<Span> {\n-        let prev_span = self.span_extend_to_prev_str(span, \"fn\", true, true)?;\n-        if let Ok(snippet) = self.span_to_snippet(prev_span) {\n-            debug!(\n-                \"generate_fn_name_span: span={:?}, prev_span={:?}, snippet={:?}\",\n-                span, prev_span, snippet\n-            );\n-\n-            if snippet.is_empty() {\n-                return None;\n-            };\n-\n-            let len = snippet\n-                .find(|c: char| !c.is_alphanumeric() && c != '_')\n-                .expect(\"no label after fn\");\n-            Some(prev_span.with_hi(BytePos(prev_span.lo().0 + len as u32)))\n-        } else {\n-            None\n-        }\n-    }\n-\n-    /// Takes the span of a type parameter in a function signature and try to generate a span for\n-    /// the function name (with generics) and a new snippet for this span with the pointed type\n-    /// parameter as a new local type parameter.\n-    ///\n-    /// For instance:\n-    /// ```rust,ignore (pseudo-Rust)\n-    /// // Given span\n-    /// fn my_function(param: T)\n-    /// //                    ^ Original span\n-    ///\n-    /// // Result\n-    /// fn my_function(param: T)\n-    /// // ^^^^^^^^^^^ Generated span with snippet `my_function<T>`\n-    /// ```\n-    ///\n-    /// Attention: The method used is very fragile since it essentially duplicates the work of the\n-    /// parser. If you need to use this function or something similar, please consider updating the\n-    /// `SourceMap` functions and this function to something more robust.\n-    pub fn generate_local_type_param_snippet(&self, span: Span) -> Option<(Span, String)> {\n-        // Try to extend the span to the previous \"fn\" keyword to retrieve the function\n-        // signature.\n-        if let Some(sugg_span) = self.span_extend_to_prev_str(span, \"fn\", false, true) {\n-            if let Ok(snippet) = self.span_to_snippet(sugg_span) {\n-                // Consume the function name.\n-                let mut offset = snippet\n-                    .find(|c: char| !c.is_alphanumeric() && c != '_')\n-                    .expect(\"no label after fn\");\n-\n-                // Consume the generics part of the function signature.\n-                let mut bracket_counter = 0;\n-                let mut last_char = None;\n-                for c in snippet[offset..].chars() {\n-                    match c {\n-                        '<' => bracket_counter += 1,\n-                        '>' => bracket_counter -= 1,\n-                        '(' => {\n-                            if bracket_counter == 0 {\n-                                break;\n-                            }\n-                        }\n-                        _ => {}\n-                    }\n-                    offset += c.len_utf8();\n-                    last_char = Some(c);\n-                }\n-\n-                // Adjust the suggestion span to encompass the function name with its generics.\n-                let sugg_span = sugg_span.with_hi(BytePos(sugg_span.lo().0 + offset as u32));\n-\n-                // Prepare the new suggested snippet to append the type parameter that triggered\n-                // the error in the generics of the function signature.\n-                let mut new_snippet = if last_char == Some('>') {\n-                    format!(\"{}, \", &snippet[..(offset - '>'.len_utf8())])\n-                } else {\n-                    format!(\"{}<\", &snippet[..offset])\n-                };\n-                new_snippet\n-                    .push_str(&self.span_to_snippet(span).unwrap_or_else(|_| \"T\".to_string()));\n-                new_snippet.push('>');\n-\n-                return Some((sugg_span, new_snippet));\n-            }\n-        }\n-\n-        None\n-    }\n     pub fn ensure_source_file_source_present(&self, source_file: Lrc<SourceFile>) -> bool {\n         source_file.add_external_src(|| {\n             match source_file.name {"}]}