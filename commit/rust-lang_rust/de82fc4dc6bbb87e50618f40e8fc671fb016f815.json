{"sha": "de82fc4dc6bbb87e50618f40e8fc671fb016f815", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlODJmYzRkYzZiYmI4N2U1MDYxOGY0MGU4ZmM2NzFmYjAxNmY4MTU=", "commit": {"author": {"name": "Masood Malekghassemi", "email": "atash@google.com", "date": "2016-04-13T14:48:53Z"}, "committer": {"name": "Masood Malekghassemi", "email": "atash@google.com", "date": "2016-04-13T14:48:53Z"}, "message": "Fix obscure compilation error", "tree": {"sha": "04e92bb32817e11cf6cbc07b6ea98609529afd25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04e92bb32817e11cf6cbc07b6ea98609529afd25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de82fc4dc6bbb87e50618f40e8fc671fb016f815", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de82fc4dc6bbb87e50618f40e8fc671fb016f815", "html_url": "https://github.com/rust-lang/rust/commit/de82fc4dc6bbb87e50618f40e8fc671fb016f815", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de82fc4dc6bbb87e50618f40e8fc671fb016f815/comments", "author": {"login": "soltanmm-google", "id": 21180148, "node_id": "MDQ6VXNlcjIxMTgwMTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/21180148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soltanmm-google", "html_url": "https://github.com/soltanmm-google", "followers_url": "https://api.github.com/users/soltanmm-google/followers", "following_url": "https://api.github.com/users/soltanmm-google/following{/other_user}", "gists_url": "https://api.github.com/users/soltanmm-google/gists{/gist_id}", "starred_url": "https://api.github.com/users/soltanmm-google/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soltanmm-google/subscriptions", "organizations_url": "https://api.github.com/users/soltanmm-google/orgs", "repos_url": "https://api.github.com/users/soltanmm-google/repos", "events_url": "https://api.github.com/users/soltanmm-google/events{/privacy}", "received_events_url": "https://api.github.com/users/soltanmm-google/received_events", "type": "User", "site_admin": false}, "committer": {"login": "soltanmm-google", "id": 21180148, "node_id": "MDQ6VXNlcjIxMTgwMTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/21180148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soltanmm-google", "html_url": "https://github.com/soltanmm-google", "followers_url": "https://api.github.com/users/soltanmm-google/followers", "following_url": "https://api.github.com/users/soltanmm-google/following{/other_user}", "gists_url": "https://api.github.com/users/soltanmm-google/gists{/gist_id}", "starred_url": "https://api.github.com/users/soltanmm-google/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soltanmm-google/subscriptions", "organizations_url": "https://api.github.com/users/soltanmm-google/orgs", "repos_url": "https://api.github.com/users/soltanmm-google/repos", "events_url": "https://api.github.com/users/soltanmm-google/events{/privacy}", "received_events_url": "https://api.github.com/users/soltanmm-google/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e45c7955e94fe55b7ca83dfb76b1bb50dfea74f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e45c7955e94fe55b7ca83dfb76b1bb50dfea74f6", "html_url": "https://github.com/rust-lang/rust/commit/e45c7955e94fe55b7ca83dfb76b1bb50dfea74f6"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "7541132951666bc31743dd5f789290ad1b790996", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de82fc4dc6bbb87e50618f40e8fc671fb016f815/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de82fc4dc6bbb87e50618f40e8fc671fb016f815/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=de82fc4dc6bbb87e50618f40e8fc671fb016f815", "patch": "@@ -1544,5 +1544,5 @@ register_diagnostics! {\n     E0490, // a value of type `..` is borrowed for too long\n     E0491, // in type `..`, reference has a longer lifetime than the data it...\n     E0495, // cannot infer an appropriate lifetime due to conflicting requirements\n-    E0524, // the closure implements `..` but not `..`\n+    E0524, // expected a closure that implements `..` but this closure only implements `..`\n }"}, {"sha": "a40a5ce81c880f4529512403168075ce21f66ed6", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de82fc4dc6bbb87e50618f40e8fc671fb016f815/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de82fc4dc6bbb87e50618f40e8fc671fb016f815/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=de82fc4dc6bbb87e50618f40e8fc671fb016f815", "patch": "@@ -471,9 +471,10 @@ pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                         let closure_span = infcx.tcx.map.span_if_local(closure_def_id).unwrap();\n                         let mut err = struct_span_err!(\n                             infcx.tcx.sess, closure_span, E0524,\n-                            \"the closure implements `{}` but not `{}`\",\n-                            found_kind,\n-                            kind);\n+                            \"expected a closure that implements the `{}` trait, but this closure \\\n+                             only implements `{}`\",\n+                            kind,\n+                            found_kind);\n                         err.span_note(\n                             obligation.cause.span,\n                             &format!(\"the requirement to implement `{}` derives from here\", kind));"}, {"sha": "a2949ef30c8d10fc67bad7b5ad22340c3d9720d1", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/de82fc4dc6bbb87e50618f40e8fc671fb016f815/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de82fc4dc6bbb87e50618f40e8fc671fb016f815/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=de82fc4dc6bbb87e50618f40e8fc671fb016f815", "patch": "@@ -179,9 +179,16 @@ fn deduce_expectations_from_obligations<'a,'tcx>(\n                 ty::Predicate::TypeOutlives(..) => None,\n                 ty::Predicate::WellFormed(..) => None,\n                 ty::Predicate::ObjectSafe(..) => None,\n-                ty::Predicate::ClosureKind(_closure_def_id, kind) => {\n-                    return Some(kind);\n-                }\n+\n+                // NB: This predicate is created by breaking down a\n+                // `ClosureType: FnFoo()` predicate, where\n+                // `ClosureType` represents some `TyClosure`. It can't\n+                // possibly be referring to the current closure,\n+                // because we haven't produced the `TyClosure` for\n+                // this closure yet; this is exactly why the other\n+                // code is looking for a self type of a unresolved\n+                // inference variable.\n+                ty::Predicate::ClosureKind(..) => None,\n             };\n             opt_trait_ref\n                 .and_then(|trait_ref| self_type_matches_expected_vid(fcx, trait_ref, expected_vid))"}, {"sha": "6792414c367906c9df2493931ad96f33164b16c8", "filename": "src/test/compile-fail/closure-wrong-kind.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de82fc4dc6bbb87e50618f40e8fc671fb016f815/src%2Ftest%2Fcompile-fail%2Fclosure-wrong-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de82fc4dc6bbb87e50618f40e8fc671fb016f815/src%2Ftest%2Fcompile-fail%2Fclosure-wrong-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-wrong-kind.rs?ref=de82fc4dc6bbb87e50618f40e8fc671fb016f815", "patch": "@@ -17,7 +17,6 @@ fn bar<T: Fn(u32)>(_: T) {}\n \n fn main() {\n     let x = X;\n-    let closure = |_| foo(x);\n-    //~^ ERROR the closure implements `FnOnce` but not `Fn`\n+    let closure = |_| foo(x);  //~ ERROR E0524\n     bar(closure);\n }"}]}