{"sha": "f46bd72e5f4dccc51c3b3db27ffedb5d136e18cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NmJkNzJlNWY0ZGNjYzUxYzNiM2RiMjdmZmVkYjVkMTM2ZTE4Y2M=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-02-17T19:38:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-17T19:38:04Z"}, "message": "Rollup merge of #82198 - SkiFire13:optimize-iter-is-sorted, r=sfackler\n\nUse internal iteration in Iterator::is_sorted_by", "tree": {"sha": "38ea7ffbd949d77720ef6a035b75e6e9676ce99b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38ea7ffbd949d77720ef6a035b75e6e9676ce99b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f46bd72e5f4dccc51c3b3db27ffedb5d136e18cc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgLXCcCRBK7hj4Ov3rIwAAdHIIAIIyaAoRZ23ln43SfVUOCq/5\nho9ab7b/ygm9sKs1lwPhu0dP5si/yGXPWpYxr57KsBNTQMYUttI5m4gYu3Gx9rlK\nWbkPUDTWLAbCS0BMzOMjXyLq+3rSnDkwyRNr46lzgxcwPJrnbpoq5B3fdmssFfJM\nZAEmofzlPBbXcnv9v4J/WYUE1ZqVXzstDdaTrEgUu3W3NXfbyXlhOqJwn4q8r9iA\nmTIBL6atIrggOdP92iYGLDFKPCS/4rywA1rurYEd+2quMJcMOPqib04Oze83aFa9\ndG5eyAyXjd6rp+ZBD0qreWiF4HKMTANSRUebrGg/AmP2TWt9DiMdScrKj2cZrM4=\n=RLm5\n-----END PGP SIGNATURE-----\n", "payload": "tree 38ea7ffbd949d77720ef6a035b75e6e9676ce99b\nparent 8e6bc14f526b4edd2360393f72c8b9467ac62bc6\nparent 61bb1836f8f2e72e9e92187cc763d0873d603b91\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1613590684 +0100\ncommitter GitHub <noreply@github.com> 1613590684 +0100\n\nRollup merge of #82198 - SkiFire13:optimize-iter-is-sorted, r=sfackler\n\nUse internal iteration in Iterator::is_sorted_by\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f46bd72e5f4dccc51c3b3db27ffedb5d136e18cc", "html_url": "https://github.com/rust-lang/rust/commit/f46bd72e5f4dccc51c3b3db27ffedb5d136e18cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f46bd72e5f4dccc51c3b3db27ffedb5d136e18cc/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e6bc14f526b4edd2360393f72c8b9467ac62bc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e6bc14f526b4edd2360393f72c8b9467ac62bc6", "html_url": "https://github.com/rust-lang/rust/commit/8e6bc14f526b4edd2360393f72c8b9467ac62bc6"}, {"sha": "61bb1836f8f2e72e9e92187cc763d0873d603b91", "url": "https://api.github.com/repos/rust-lang/rust/commits/61bb1836f8f2e72e9e92187cc763d0873d603b91", "html_url": "https://github.com/rust-lang/rust/commit/61bb1836f8f2e72e9e92187cc763d0873d603b91"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "a38b35a5b5c748cfab1214868aed3ecb2d811ebe", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f46bd72e5f4dccc51c3b3db27ffedb5d136e18cc/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46bd72e5f4dccc51c3b3db27ffedb5d136e18cc/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=f46bd72e5f4dccc51c3b3db27ffedb5d136e18cc", "patch": "@@ -3327,24 +3327,31 @@ pub trait Iterator {\n     ///\n     /// [`is_sorted`]: Iterator::is_sorted\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n-    fn is_sorted_by<F>(mut self, mut compare: F) -> bool\n+    fn is_sorted_by<F>(mut self, compare: F) -> bool\n     where\n         Self: Sized,\n         F: FnMut(&Self::Item, &Self::Item) -> Option<Ordering>,\n     {\n+        #[inline]\n+        fn check<'a, T>(\n+            last: &'a mut T,\n+            mut compare: impl FnMut(&T, &T) -> Option<Ordering> + 'a,\n+        ) -> impl FnMut(T) -> bool + 'a {\n+            move |curr| {\n+                if let Some(Ordering::Greater) | None = compare(&last, &curr) {\n+                    return false;\n+                }\n+                *last = curr;\n+                true\n+            }\n+        }\n+\n         let mut last = match self.next() {\n             Some(e) => e,\n             None => return true,\n         };\n \n-        while let Some(curr) = self.next() {\n-            if let Some(Ordering::Greater) | None = compare(&last, &curr) {\n-                return false;\n-            }\n-            last = curr;\n-        }\n-\n-        true\n+        self.all(check(&mut last, compare))\n     }\n \n     /// Checks if the elements of this iterator are sorted using the given key extraction"}]}