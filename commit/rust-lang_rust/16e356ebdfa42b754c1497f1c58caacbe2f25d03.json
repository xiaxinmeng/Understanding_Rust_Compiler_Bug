{"sha": "16e356ebdfa42b754c1497f1c58caacbe2f25d03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZTM1NmViZGZhNDJiNzU0YzE0OTdmMWM1OGNhYWNiZTJmMjVkMDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-12T06:24:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-12T06:24:10Z"}, "message": "Auto merge of #60396 - cuviper:ordered-retain, r=scottmcm\n\nDocument the order of {Vec,VecDeque,String}::retain\n\nIt's natural for `retain` to work in order from beginning to end, but\nthis wasn't actually documented to be the case. If we actually promise\nthis, then the caller can do useful things like track the index of each\nelement being tested, as [discussed in the forum][1]. This is now\ndocumented for `Vec`, `VecDeque`, and `String`.\n\n[1]: https://users.rust-lang.org/t/vec-retain-by-index/27697\n\n`HashMap` and `HashSet` also have `retain`, and the `hashbrown`\nimplementation does happen to use a plain `iter()` order too, but it's\nnot certain that this should always be the case for these types.\n\nr? @scottmcm", "tree": {"sha": "bad4da2fcfd6cda2059d84d8afbd8a97b4b7453d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bad4da2fcfd6cda2059d84d8afbd8a97b4b7453d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16e356ebdfa42b754c1497f1c58caacbe2f25d03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16e356ebdfa42b754c1497f1c58caacbe2f25d03", "html_url": "https://github.com/rust-lang/rust/commit/16e356ebdfa42b754c1497f1c58caacbe2f25d03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16e356ebdfa42b754c1497f1c58caacbe2f25d03/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d28e948b92d85b5b93f48075d010f799cf9642b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d28e948b92d85b5b93f48075d010f799cf9642b6", "html_url": "https://github.com/rust-lang/rust/commit/d28e948b92d85b5b93f48075d010f799cf9642b6"}, {"sha": "0545375ca6822b4b140cd853f368473d69b76227", "url": "https://api.github.com/repos/rust-lang/rust/commits/0545375ca6822b4b140cd853f368473d69b76227", "html_url": "https://github.com/rust-lang/rust/commit/0545375ca6822b4b140cd853f368473d69b76227"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "9a8d48083e67c676e2fffbfc7f32f9ef53e461ef", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/16e356ebdfa42b754c1497f1c58caacbe2f25d03/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e356ebdfa42b754c1497f1c58caacbe2f25d03/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=16e356ebdfa42b754c1497f1c58caacbe2f25d03", "patch": "@@ -1835,8 +1835,8 @@ impl<T> VecDeque<T> {\n     /// Retains only the elements specified by the predicate.\n     ///\n     /// In other words, remove all elements `e` such that `f(&e)` returns false.\n-    /// This method operates in place and preserves the order of the retained\n-    /// elements.\n+    /// This method operates in place, visiting each element exactly once in the\n+    /// original order, and preserves the order of the retained elements.\n     ///\n     /// # Examples\n     ///\n@@ -1848,6 +1848,20 @@ impl<T> VecDeque<T> {\n     /// buf.retain(|&x| x%2 == 0);\n     /// assert_eq!(buf, [2, 4]);\n     /// ```\n+    ///\n+    /// The exact order may be useful for tracking external state, like an index.\n+    ///\n+    /// ```\n+    /// use std::collections::VecDeque;\n+    ///\n+    /// let mut buf = VecDeque::new();\n+    /// buf.extend(1..6);\n+    ///\n+    /// let keep = [false, true, true, false, true];\n+    /// let mut i = 0;\n+    /// buf.retain(|_| (keep[i], i += 1).0);\n+    /// assert_eq!(buf, [2, 3, 5]);\n+    /// ```\n     #[stable(feature = \"vec_deque_retain\", since = \"1.4.0\")]\n     pub fn retain<F>(&mut self, mut f: F)\n         where F: FnMut(&T) -> bool"}, {"sha": "3fdcf95ccaa3f7a375e53c92a5b73a2823a6af46", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16e356ebdfa42b754c1497f1c58caacbe2f25d03/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e356ebdfa42b754c1497f1c58caacbe2f25d03/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=16e356ebdfa42b754c1497f1c58caacbe2f25d03", "patch": "@@ -1200,8 +1200,8 @@ impl String {\n     /// Retains only the characters specified by the predicate.\n     ///\n     /// In other words, remove all characters `c` such that `f(c)` returns `false`.\n-    /// This method operates in place and preserves the order of the retained\n-    /// characters.\n+    /// This method operates in place, visiting each character exactly once in the\n+    /// original order, and preserves the order of the retained characters.\n     ///\n     /// # Examples\n     ///\n@@ -1212,6 +1212,16 @@ impl String {\n     ///\n     /// assert_eq!(s, \"foobar\");\n     /// ```\n+    ///\n+    /// The exact order may be useful for tracking external state, like an index.\n+    ///\n+    /// ```\n+    /// let mut s = String::from(\"abcde\");\n+    /// let keep = [false, true, true, false, true];\n+    /// let mut i = 0;\n+    /// s.retain(|_| (keep[i], i += 1).0);\n+    /// assert_eq!(s, \"bce\");\n+    /// ```\n     #[inline]\n     #[stable(feature = \"string_retain\", since = \"1.26.0\")]\n     pub fn retain<F>(&mut self, mut f: F)"}, {"sha": "073d3ab5937035a148053e8e6243a8c300903ab2", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16e356ebdfa42b754c1497f1c58caacbe2f25d03/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e356ebdfa42b754c1497f1c58caacbe2f25d03/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=16e356ebdfa42b754c1497f1c58caacbe2f25d03", "patch": "@@ -937,8 +937,8 @@ impl<T> Vec<T> {\n     /// Retains only the elements specified by the predicate.\n     ///\n     /// In other words, remove all elements `e` such that `f(&e)` returns `false`.\n-    /// This method operates in place and preserves the order of the retained\n-    /// elements.\n+    /// This method operates in place, visiting each element exactly once in the\n+    /// original order, and preserves the order of the retained elements.\n     ///\n     /// # Examples\n     ///\n@@ -947,6 +947,16 @@ impl<T> Vec<T> {\n     /// vec.retain(|&x| x%2 == 0);\n     /// assert_eq!(vec, [2, 4]);\n     /// ```\n+    ///\n+    /// The exact order may be useful for tracking external state, like an index.\n+    ///\n+    /// ```\n+    /// let mut vec = vec![1, 2, 3, 4, 5];\n+    /// let keep = [false, true, true, false, true];\n+    /// let mut i = 0;\n+    /// vec.retain(|_| (keep[i], i += 1).0);\n+    /// assert_eq!(vec, [2, 3, 5]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn retain<F>(&mut self, mut f: F)\n         where F: FnMut(&T) -> bool"}]}