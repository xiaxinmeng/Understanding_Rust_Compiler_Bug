{"sha": "bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjOTA4NGI5YjdmMjExNDBmZmJjMDUxZWNiMmEwY2QwOGU4OGYzYmI=", "commit": {"author": {"name": "Chris Wong", "email": "lambda.fairy@gmail.com", "date": "2015-02-13T23:56:32Z"}, "committer": {"name": "Chris Wong", "email": "lambda.fairy@gmail.com", "date": "2015-02-13T23:56:32Z"}, "message": "Rename `fmt::Writer` to `fmt::Write`\n\nThis brings it in line with its namesake in `std::io`.\n\n[breaking-change]", "tree": {"sha": "7eca299eb3e3c7f1494f067bc6dcb4c119c279dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7eca299eb3e3c7f1494f067bc6dcb4c119c279dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb", "html_url": "https://github.com/rust-lang/rust/commit/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb/comments", "author": {"login": "lambda-fairy", "id": 1572323, "node_id": "MDQ6VXNlcjE1NzIzMjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1572323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambda-fairy", "html_url": "https://github.com/lambda-fairy", "followers_url": "https://api.github.com/users/lambda-fairy/followers", "following_url": "https://api.github.com/users/lambda-fairy/following{/other_user}", "gists_url": "https://api.github.com/users/lambda-fairy/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambda-fairy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambda-fairy/subscriptions", "organizations_url": "https://api.github.com/users/lambda-fairy/orgs", "repos_url": "https://api.github.com/users/lambda-fairy/repos", "events_url": "https://api.github.com/users/lambda-fairy/events{/privacy}", "received_events_url": "https://api.github.com/users/lambda-fairy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lambda-fairy", "id": 1572323, "node_id": "MDQ6VXNlcjE1NzIzMjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1572323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambda-fairy", "html_url": "https://github.com/lambda-fairy", "followers_url": "https://api.github.com/users/lambda-fairy/followers", "following_url": "https://api.github.com/users/lambda-fairy/following{/other_user}", "gists_url": "https://api.github.com/users/lambda-fairy/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambda-fairy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambda-fairy/subscriptions", "organizations_url": "https://api.github.com/users/lambda-fairy/orgs", "repos_url": "https://api.github.com/users/lambda-fairy/repos", "events_url": "https://api.github.com/users/lambda-fairy/events{/privacy}", "received_events_url": "https://api.github.com/users/lambda-fairy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf636c233dfeef5abf0de8fb35e23c0a161810d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf636c233dfeef5abf0de8fb35e23c0a161810d2", "html_url": "https://github.com/rust-lang/rust/commit/cf636c233dfeef5abf0de8fb35e23c0a161810d2"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "a2273fe875539672e28865244ed2e980b007d8e9", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb", "patch": "@@ -179,7 +179,7 @@\n //!\n //! impl fmt::Display for Vector2D {\n //!     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-//!         // The `f` value implements the `Writer` trait, which is what the\n+//!         // The `f` value implements the `Write` trait, which is what the\n //!         // write! macro is expecting. Note that this formatting ignores the\n //!         // various flags provided to format strings.\n //!         write!(f, \"({}, {})\", self.x, self.y)\n@@ -403,7 +403,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-pub use core::fmt::{Formatter, Result, Writer, rt};\n+pub use core::fmt::{Formatter, Result, Write, rt};\n pub use core::fmt::{Show, String, Octal, Binary};\n pub use core::fmt::{Display, Debug};\n pub use core::fmt::{LowerHex, UpperHex, Pointer};"}, {"sha": "69fd28d1723685067d77df6a650b693f6f7b09c2", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb", "patch": "@@ -950,7 +950,7 @@ pub trait ToString {\n impl<T: fmt::Display + ?Sized> ToString for T {\n     #[inline]\n     fn to_string(&self) -> String {\n-        use core::fmt::Writer;\n+        use core::fmt::Write;\n         let mut buf = String::new();\n         let _ = buf.write_fmt(format_args!(\"{}\", self));\n         buf.shrink_to_fit();\n@@ -984,7 +984,7 @@ impl<'a> Str for CowString<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl fmt::Writer for String {\n+impl fmt::Write for String {\n     #[inline]\n     fn write_str(&mut self, s: &str) -> fmt::Result {\n         self.push_str(s);"}, {"sha": "56b2c2a798370516e46088ddca0eabf18ddf5b24", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb", "patch": "@@ -314,7 +314,7 @@ pub fn float_to_str_bytes_common<T: Float, U, F>(\n                 end: &'a mut uint,\n             }\n \n-            impl<'a> fmt::Writer for Filler<'a> {\n+            impl<'a> fmt::Write for Filler<'a> {\n                 fn write_str(&mut self, s: &str) -> fmt::Result {\n                     slice::bytes::copy_memory(&mut self.buf[(*self.end)..],\n                                               s.as_bytes());"}, {"sha": "09733df35398f910f512ee28d8d5f8b62ca81cf6", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb", "patch": "@@ -57,14 +57,14 @@ pub struct Error;\n /// A collection of methods that are required to format a message into a stream.\n ///\n /// This trait is the type which this modules requires when formatting\n-/// information. This is similar to the standard library's `io::Writer` trait,\n+/// information. This is similar to the standard library's `io::Write` trait,\n /// but it is only intended for use in libcore.\n ///\n /// This trait should generally not be implemented by consumers of the standard\n-/// library. The `write!` macro accepts an instance of `io::Writer`, and the\n-/// `io::Writer` trait is favored over implementing this trait.\n+/// library. The `write!` macro accepts an instance of `io::Write`, and the\n+/// `io::Write` trait is favored over implementing this trait.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait Writer {\n+pub trait Write {\n     /// Writes a slice of bytes into this writer, returning whether the write\n     /// succeeded.\n     ///\n@@ -85,12 +85,12 @@ pub trait Writer {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn write_fmt(&mut self, args: Arguments) -> Result {\n         // This Adapter is needed to allow `self` (of type `&mut\n-        // Self`) to be cast to a FormatWriter (below) without\n+        // Self`) to be cast to a Write (below) without\n         // requiring a `Sized` bound.\n         struct Adapter<'a,T: ?Sized +'a>(&'a mut T);\n \n-        impl<'a, T: ?Sized> Writer for Adapter<'a, T>\n-            where T: Writer\n+        impl<'a, T: ?Sized> Write for Adapter<'a, T>\n+            where T: Write\n         {\n             fn write_str(&mut self, s: &str) -> Result {\n                 self.0.write_str(s)\n@@ -116,7 +116,7 @@ pub struct Formatter<'a> {\n     width: Option<uint>,\n     precision: Option<uint>,\n \n-    buf: &'a mut (Writer+'a),\n+    buf: &'a mut (Write+'a),\n     curarg: slice::Iter<'a, ArgumentV1<'a>>,\n     args: &'a [ArgumentV1<'a>],\n }\n@@ -367,7 +367,7 @@ pub trait UpperExp {\n ///   * output - the buffer to write output to\n ///   * args - the precompiled arguments generated by `format_args!`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn write(output: &mut Writer, args: Arguments) -> Result {\n+pub fn write(output: &mut Write, args: Arguments) -> Result {\n     let mut formatter = Formatter {\n         flags: 0,\n         width: None,"}, {"sha": "d79a31718555357fc8a06df0a8872388e0ed202e", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb", "patch": "@@ -371,7 +371,7 @@ impl std::error::FromError<fmt::Error> for EncoderError {\n pub type EncodeResult = Result<(), EncoderError>;\n pub type DecodeResult<T> = Result<T, DecoderError>;\n \n-fn escape_str(wr: &mut fmt::Writer, v: &str) -> EncodeResult {\n+fn escape_str(wr: &mut fmt::Write, v: &str) -> EncodeResult {\n     try!(wr.write_str(\"\\\"\"));\n \n     let mut start = 0;\n@@ -433,14 +433,14 @@ fn escape_str(wr: &mut fmt::Writer, v: &str) -> EncodeResult {\n     Ok(())\n }\n \n-fn escape_char(writer: &mut fmt::Writer, v: char) -> EncodeResult {\n+fn escape_char(writer: &mut fmt::Write, v: char) -> EncodeResult {\n     let mut buf = [0; 4];\n     let n = v.encode_utf8(&mut buf).unwrap();\n     let buf = unsafe { str::from_utf8_unchecked(&buf[..n]) };\n     escape_str(writer, buf)\n }\n \n-fn spaces(wr: &mut fmt::Writer, mut n: uint) -> EncodeResult {\n+fn spaces(wr: &mut fmt::Write, mut n: uint) -> EncodeResult {\n     const BUF: &'static str = \"                \";\n \n     while n >= BUF.len() {\n@@ -464,14 +464,14 @@ fn fmt_number_or_null(v: f64) -> string::String {\n \n /// A structure for implementing serialization to JSON.\n pub struct Encoder<'a> {\n-    writer: &'a mut (fmt::Writer+'a),\n+    writer: &'a mut (fmt::Write+'a),\n     is_emitting_map_key: bool,\n }\n \n impl<'a> Encoder<'a> {\n     /// Creates a new JSON encoder whose output will be written to the writer\n     /// specified.\n-    pub fn new(writer: &'a mut fmt::Writer) -> Encoder<'a> {\n+    pub fn new(writer: &'a mut fmt::Write) -> Encoder<'a> {\n         Encoder { writer: writer, is_emitting_map_key: false, }\n     }\n }\n@@ -709,15 +709,15 @@ impl<'a> ::Encoder for Encoder<'a> {\n /// Another encoder for JSON, but prints out human-readable JSON instead of\n /// compact data\n pub struct PrettyEncoder<'a> {\n-    writer: &'a mut (fmt::Writer+'a),\n+    writer: &'a mut (fmt::Write+'a),\n     curr_indent: uint,\n     indent: uint,\n     is_emitting_map_key: bool,\n }\n \n impl<'a> PrettyEncoder<'a> {\n     /// Creates a new encoder whose output will be written to the specified writer\n-    pub fn new(writer: &'a mut fmt::Writer) -> PrettyEncoder<'a> {\n+    pub fn new(writer: &'a mut fmt::Write) -> PrettyEncoder<'a> {\n         PrettyEncoder {\n             writer: writer,\n             curr_indent: 0,\n@@ -2527,7 +2527,7 @@ struct FormatShim<'a, 'b: 'a> {\n     inner: &'a mut fmt::Formatter<'b>,\n }\n \n-impl<'a, 'b> fmt::Writer for FormatShim<'a, 'b> {\n+impl<'a, 'b> fmt::Write for FormatShim<'a, 'b> {\n     fn write_str(&mut self, s: &str) -> fmt::Result {\n         match self.inner.write_str(s) {\n             Ok(_) => Ok(()),"}, {"sha": "89c45f60d1ca8640e312fc6f1cbcec4dd62a5d94", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb", "patch": "@@ -381,14 +381,14 @@ pub trait Write {\n     ///\n     /// This function will return any I/O error reported while formatting.\n     fn write_fmt(&mut self, fmt: fmt::Arguments) -> Result<()> {\n-        // Create a shim which translates a Writer to a fmt::Writer and saves\n+        // Create a shim which translates a Write to a fmt::Write and saves\n         // off I/O errors. instead of discarding them\n         struct Adaptor<'a, T: ?Sized + 'a> {\n             inner: &'a mut T,\n             error: Result<()>,\n         }\n \n-        impl<'a, T: Write + ?Sized> fmt::Writer for Adaptor<'a, T> {\n+        impl<'a, T: Write + ?Sized> fmt::Write for Adaptor<'a, T> {\n             fn write_str(&mut self, s: &str) -> fmt::Result {\n                 match self.inner.write_all(s.as_bytes()) {\n                     Ok(()) => Ok(()),"}, {"sha": "cf930ae736c854ab0c7946594b1de616675a49bf", "filename": "src/libstd/old_io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb/src%2Flibstd%2Fold_io%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb/src%2Flibstd%2Fold_io%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmod.rs?ref=bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb", "patch": "@@ -1023,14 +1023,14 @@ pub trait Writer {\n     ///\n     /// This function will return any I/O error reported while formatting.\n     fn write_fmt(&mut self, fmt: fmt::Arguments) -> IoResult<()> {\n-        // Create a shim which translates a Writer to a fmt::Writer and saves\n+        // Create a shim which translates a Writer to a fmt::Write and saves\n         // off I/O errors. instead of discarding them\n         struct Adaptor<'a, T: ?Sized +'a> {\n             inner: &'a mut T,\n             error: IoResult<()>,\n         }\n \n-        impl<'a, T: ?Sized + Writer> fmt::Writer for Adaptor<'a, T> {\n+        impl<'a, T: ?Sized + Writer> fmt::Write for Adaptor<'a, T> {\n             fn write_str(&mut self, s: &str) -> fmt::Result {\n                 match self.inner.write_all(s.as_bytes()) {\n                     Ok(()) => Ok(()),"}, {"sha": "6abe920e1eab1d501c6f40e0316f44ced7866dc8", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb", "patch": "@@ -496,7 +496,7 @@ pub extern fn rust_begin_unwind(msg: fmt::Arguments,\n #[inline(never)] #[cold]\n #[stable(since = \"1.0.0\", feature = \"rust1\")]\n pub fn begin_unwind_fmt(msg: fmt::Arguments, file_line: &(&'static str, uint)) -> ! {\n-    use fmt::Writer;\n+    use fmt::Write;\n \n     // We do two allocations here, unfortunately. But (a) they're\n     // required with the current scheme, and (b) we don't handle"}, {"sha": "d445c29902801fc9175489759fe1306299adf7b3", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb", "patch": "@@ -110,7 +110,7 @@ impl Stdio {\n     }\n }\n \n-impl fmt::Writer for Stdio {\n+impl fmt::Write for Stdio {\n     fn write_str(&mut self, data: &str) -> fmt::Result {\n         self.write_bytes(data.as_bytes());\n         Ok(()) // yes, we're lying\n@@ -122,13 +122,13 @@ pub fn dumb_print(args: fmt::Arguments) {\n }\n \n pub fn abort(args: fmt::Arguments) -> ! {\n-    use fmt::Writer;\n+    use fmt::Write;\n \n     struct BufWriter<'a> {\n         buf: &'a mut [u8],\n         pos: uint,\n     }\n-    impl<'a> fmt::Writer for BufWriter<'a> {\n+    impl<'a> fmt::Write for BufWriter<'a> {\n         fn write_str(&mut self, bytes: &str) -> fmt::Result {\n             let left = &mut self.buf[self.pos..];\n             let to_write = &bytes.as_bytes()[..cmp::min(bytes.len(), left.len())];"}, {"sha": "841aaa94e9b552e9f4de847450136245e7dff80e", "filename": "src/test/run-pass/colorful-write-macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs?ref=bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb", "patch": "@@ -21,7 +21,7 @@ struct Foo<'a> {\n \n struct Bar;\n \n-impl fmt::Writer for Bar {\n+impl fmt::Write for Bar {\n     fn write_str(&mut self, _: &str) -> fmt::Result {\n         Ok(())\n     }\n@@ -39,7 +39,7 @@ fn main() {\n \n     let mut s = Bar;\n     {\n-        use std::fmt::Writer;\n+        use std::fmt::Write;\n         write!(&mut s, \"test\");\n     }\n }"}, {"sha": "e5aade792edf01bd1a20a4f75aff9394cd8e12da", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=bc9084b9b7f21140ffbc051ecb2a0cd08e88f3bb", "patch": "@@ -165,9 +165,9 @@ pub fn main() {\n }\n \n // Basic test to make sure that we can invoke the `write!` macro with an\n-// io::Writer instance.\n+// fmt::Write instance.\n fn test_write() {\n-    use std::fmt::Writer;\n+    use std::fmt::Write;\n     let mut buf = String::new();\n     write!(&mut buf, \"{}\", 3);\n     {\n@@ -194,7 +194,7 @@ fn test_print() {\n // Just make sure that the macros are defined, there's not really a lot that we\n // can do with them just yet (to test the output)\n fn test_format_args() {\n-    use std::fmt::Writer;\n+    use std::fmt::Write;\n     let mut buf = String::new();\n     {\n         let w = &mut buf;"}]}