{"sha": "68d76c21c540afba3e76b177100c1d0787c9311c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZDc2YzIxYzU0MGFmYmEzZTc2YjE3NzEwMGMxZDA3ODdjOTMxMWM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-21T20:41:56Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-21T20:42:37Z"}, "message": "Port testing variables.", "tree": {"sha": "0377165670fff9ff16e167c57939cd747911ddbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0377165670fff9ff16e167c57939cd747911ddbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68d76c21c540afba3e76b177100c1d0787c9311c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68d76c21c540afba3e76b177100c1d0787c9311c", "html_url": "https://github.com/rust-lang/rust/commit/68d76c21c540afba3e76b177100c1d0787c9311c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68d76c21c540afba3e76b177100c1d0787c9311c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3057244a6b5f3e5fbfbcf0a74e285cc7704027d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3057244a6b5f3e5fbfbcf0a74e285cc7704027d", "html_url": "https://github.com/rust-lang/rust/commit/f3057244a6b5f3e5fbfbcf0a74e285cc7704027d"}], "stats": {"total": 317, "additions": 317, "deletions": 0}, "files": [{"sha": "e2f15f6792543aae5154b04306e69ad6c8ebe65b", "filename": "Makefile.in", "status": "modified", "additions": 317, "deletions": 0, "changes": 317, "blob_url": "https://github.com/rust-lang/rust/blob/68d76c21c540afba3e76b177100c1d0787c9311c/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/68d76c21c540afba3e76b177100c1d0787c9311c/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=68d76c21c540afba3e76b177100c1d0787c9311c", "patch": "@@ -474,6 +474,323 @@ llvmext/%.o: llvmext/%.cpp $(MKFILES)\n \t$(Q)ocamllex$(OPT) -q -o $@ $<\n \n \n+######################################################################\n+# Testing variables\n+######################################################################\n+\n+# Temporarily xfail tests broken by the nominal-tags change.\n+\n+NOMINAL_TAG_XFAILS := $(S)src/test/run-pass/mlist.rs\n+\n+# Temporarily xfail tests broken by the constant-tags change.\n+\n+CONST_TAG_XFAILS := $(S)src/test/run-pass/generic-tag.rs\n+\n+# Temporarily xfail some of the task tests, while debugging the\n+# overhauled inter-domain messaging system.\n+\n+TASK_XFAILS := $(addprefix $(S)src/test/run-pass/, \\\n+                 task-comm-8.rs \\\n+                 task-comm-10.rs \\\n+                 task-comm-15.rs \\\n+                 task-comm-12.rs \\\n+                 task-comm-2.rs \\\n+                 task-comm-9.rs \\\n+                 task-life-0.rs \\\n+                 alt-type-simple.rs \\\n+                 many.rs)\n+\n+TEST_XFAILS_BOOT := $(TASK_XFAILS) \\\n+                    $(NOMINAL_TAG_XFAILS) \\\n+                    $(CONST_TAG_XFAILS) \\\n+                    $(addprefix $(S)src/test/run-pass/, \\\n+                      arith-unsigned.rs \\\n+                      box-compare.rs \\\n+                      child-outlives-parent.rs \\\n+                      clone-with-exterior.rs \\\n+                      constrained-type.rs \\\n+                      destructor-ordering.rs \\\n+                      obj-as.rs \\\n+                      vec-slice.rs \\\n+                      fn-lval.rs \\\n+                      generic-bind-2.rs \\\n+                      generic-fn-box.rs \\\n+                      generic-tup.rs \\\n+                      iter-ret.rs \\\n+                      leak-tag-copy.rs \\\n+                      lib-io.rs \\\n+                      maybe-mutable.rs \\\n+                      mlist-cycle.rs \\\n+                      obj-as.rs \\\n+                      seq-compare.rs \\\n+                      task-comm.rs \\\n+                      task-comm-3.rs \\\n+                      vec-slice.rs \\\n+                      while-and-do-while.rs) \\\n+                    $(addprefix $(S)src/test/run-fail/, \\\n+                      task-comm-14.rs) \\\n+                    $(addprefix $(S)src/test/compile-fail/, \\\n+                      bad-expr-path.rs \\\n+                      import.rs \\\n+                      import2.rs \\\n+                      import3.rs \\\n+                      import4.rs \\\n+                      bad-recv.rs \\\n+                      bad-send.rs \\\n+                      infinite-vec-type-recursion.rs \\\n+                      tail-non-call.rs \\\n+                      writing-through-read-alias.rs)\n+\n+TEST_XFAILS_STAGE0 := $(addprefix $(S)src/test/run-pass/, \\\n+                        acyclic-unwind.rs \\\n+                        alt-pattern-drop.rs \\\n+                        alt-type-simple.rs \\\n+                        basic-1.rs \\\n+                        basic-2.rs \\\n+                        basic.rs \\\n+                        child-outlives-parent.rs \\\n+                        clone-with-exterior.rs \\\n+                        comm.rs \\\n+                        constrained-type.rs \\\n+                        destructor-ordering.rs \\\n+                        iter-ret.rs \\\n+                        lazychan.rs \\\n+                        lib-bitv.rs \\\n+                        lib-deque.rs \\\n+                        lib-int.rs \\\n+                        lib-io.rs \\\n+                        lib-map.rs \\\n+                        lib-rand.rs \\\n+                        lib-sha1.rs \\\n+                        lib-sort.rs \\\n+                        lib-str.rs \\\n+                        lib-str-buf.rs \\\n+                        lib-task.rs \\\n+                        lib-uint.rs \\\n+                        lib-vec-str-conversions.rs \\\n+                        lib-vec.rs \\\n+                        many.rs \\\n+                        mlist-cycle.rs \\\n+                        mlist.rs \\\n+                        mutable-alias-vec.rs \\\n+                        obj-as.rs \\\n+                        obj-dtor.rs \\\n+                        pred.rs \\\n+                        preempt.rs \\\n+                        rt-circular-buffer.rs \\\n+                        size-and-align.rs \\\n+                        spawn-fn.rs \\\n+                        spawn-module-qualified.rs \\\n+                        spawn.rs \\\n+                        str-append.rs \\\n+                        syntax-extension-fmt.rs \\\n+                        syntax-extension-shell.rs \\\n+                        task-comm-0.rs \\\n+                        task-comm-1.rs \\\n+                        task-comm-10.rs \\\n+                        task-comm-11.rs \\\n+                        task-comm-12.rs \\\n+                        task-comm-13-thread.rs \\\n+                        task-comm-13.rs \\\n+                        task-comm-15.rs \\\n+                        task-comm-2.rs \\\n+                        task-comm-3.rs \\\n+                        task-comm-4.rs \\\n+                        task-comm-5.rs \\\n+                        task-comm-6.rs \\\n+                        task-comm-7.rs \\\n+                        task-comm-8.rs \\\n+                        task-comm-9.rs \\\n+                        task-comm.rs \\\n+                        task-killjoin.rs \\\n+                        task-life-0.rs \\\n+                        threads.rs \\\n+                        type-sizes.rs \\\n+                        typestate-cfg-nesting.rs \\\n+                        user.rs \\\n+                        utf8.rs \\\n+                        vec-alloc-append.rs \\\n+                        vec-append.rs \\\n+                        vec-slice.rs \\\n+                        while-with-break.rs \\\n+                        yield.rs \\\n+                        yield2.rs \\\n+                        multi.rc \\\n+                        native-mod.rc \\\n+                        native.rc \\\n+                        ) \\\n+                     $(filter-out \\\n+                      $(addprefix $(S)src/test/compile-fail/, \\\n+                        alt-tag-nullary.rs \\\n+                        alt-tag-unary.rs \\\n+                        arg-count-mismatch.rs \\\n+                        arg-type-mismatch.rs \\\n+                        bad-expr-path.rs \\\n+                        bad-expr-path2.rs \\\n+                        bogus-tag.rs \\\n+                        fru-extra-field.rs \\\n+                        import.rs \\\n+                        import2.rs \\\n+                        import3.rs \\\n+                        import4.rs \\\n+                        import-loop.rs \\\n+                        import-loop-2.rs \\\n+                        multiline-comment-line-tracking.rs \\\n+                        output-type-mismatch.rs \\\n+                        rec-missing-fields.rs \\\n+                        reserved-dec.rs \\\n+                        reserved-f128.rs \\\n+                        reserved-f16.rs \\\n+                        reserved-f80.rs \\\n+                        reserved-m128.rs \\\n+                        reserved-m32.rs \\\n+                        reserved-m64.rs \\\n+                        tail-non-call.rs \\\n+                        tail-typeck.rs \\\n+                        type-shadow.rs \\\n+                        while-type-error.rs \\\n+                        wrong-ret-type.rs \\\n+                        ), \\\n+                     $(wildcard $(S)src/test/*fail/*.rs test/*fail/*.rc)) \\\n+                     $(S)src/test/bench/shootout/fannkuchredux.rs \\\n+                     $(S)src/test/bench/shootout/fasta.rs \\\n+                     $(S)src/test/bench/shootout/binarytrees.rs \\\n+                     $(wildcard $(S)src/test/bench/99-bottles/*rs)\n+\n+ifdef MINGW_CROSS\n+TEST_XFAILS_BOOT += $(S)src/test/run-pass/native-mod.rc\n+TEST_XFAILS_STAGE0 += $(S)src/test/run-pass/native-mod.rc\n+endif\n+ifdef CFG_WINDOWSY\n+TEST_XFAILS_BOOT += $(S)src/test/run-pass/native-mod.rc\n+TEST_XFAILS_STAGE0 += $(S)src/test/run-pass/native-mod.rc\n+endif\n+\n+BENCH_RS := $(wildcard $(S)src/test/bench/shootout/*.rs) \\\n+            $(wildcard $(S)src/test/bench/99-bottles/*.rs)\n+RPASS_RC := $(wildcard $(S)src/test/run-pass/*.rc)\n+RPASS_RS := $(wildcard $(S)src/test/run-pass/*.rs) $(BENCH_RS)\n+RFAIL_RC := $(wildcard $(S)src/test/run-fail/*.rc)\n+RFAIL_RS := $(wildcard $(S)src/test/run-fail/*.rs)\n+CFAIL_RC := $(wildcard $(S)src/test/compile-fail/*.rc)\n+CFAIL_RS := $(wildcard $(S)src/test/compile-fail/*.rs)\n+\n+ifdef CHECK_XFAILS\n+TEST_RPASS_CRATES_BOOT := $(filter $(TEST_XFAILS_BOOT), $(RPASS_RC))\n+TEST_RPASS_CRATES_STAGE0 := $(filter $(TEST_XFAILS_STAGE0), $(RPASS_RC))\n+TEST_RPASS_SOURCES_BOOT := $(filter $(TEST_XFAILS_BOOT), $(RPASS_RS))\n+TEST_RPASS_SOURCES_STAGE0 := $(filter $(TEST_XFAILS_STAGE0), $(RPASS_RS))\n+else\n+TEST_RPASS_CRATES_BOOT := $(filter-out $(TEST_XFAILS_BOOT), $(RPASS_RC))\n+TEST_RPASS_CRATES_STAGE0 := $(filter-out $(TEST_XFAILS_STAGE0), $(RPASS_RC))\n+TEST_RPASS_SOURCES_BOOT := $(filter-out $(TEST_XFAILS_BOOT), $(RPASS_RS))\n+TEST_RPASS_SOURCES_STAGE0 := $(filter-out $(TEST_XFAILS_STAGE0), $(RPASS_RS))\n+endif\n+\n+TEST_RPASS_EXES_BOOT := \\\n+              $(TEST_RPASS_CRATES_BOOT:.rc=.boot$(X)) \\\n+              $(TEST_RPASS_SOURCES_BOOT:.rs=.boot$(X))\n+TEST_RPASS_EXES_STAGE0 := \\\n+              $(TEST_RPASS_CRATES_STAGE0:.rc=.rustc$(X)) \\\n+              $(TEST_RPASS_SOURCES_STAGE0:.rs=.rustc$(X))\n+\n+TEST_RPASS_OUTS_BOOT  := \\\n+                 $(TEST_RPASS_EXES_BOOT:.boot$(X)=.boot.out)\n+TEST_RPASS_OUTS_STAGE0 := \\\n+                 $(TEST_RPASS_EXES_STAGE0:.rustc$(X)=.rustc.out)\n+\n+TEST_RPASS_TMPS_BOOT  := \\\n+  $(TEST_RPASS_EXES_BOOT:.boot$(X)=.boot$(X).tmp)\n+TEST_RPASS_TMPS_STAGE0 := \\\n+  $(TEST_RPASS_EXES_STAGE0:.rustc$(X)=.rustc$(X).tmp)\n+\n+\n+TEST_RFAIL_CRATES_BOOT := $(filter-out $(TEST_XFAILS_BOOT), $(RFAIL_RC))\n+TEST_RFAIL_CRATES_STAGE0 := $(filter-out $(TEST_XFAILS_STAGE0), $(RFAIL_RC))\n+TEST_RFAIL_SOURCES_BOOT := $(filter-out $(TEST_XFAILS_BOOT), $(RFAIL_RS))\n+TEST_RFAIL_SOURCES_STAGE0 := $(filter-out $(TEST_XFAILS_STAGE0), $(RFAIL_RS))\n+\n+TEST_RFAIL_EXES_BOOT := \\\n+              $(TEST_RFAIL_CRATES_BOOT:.rc=.boot$(X)) \\\n+              $(TEST_RFAIL_SOURCES_BOOT:.rs=.boot$(X))\n+TEST_RFAIL_EXES_STAGE0 := \\\n+              $(TEST_RFAIL_CRATES_STAGE0:.rc=.rustc$(X)) \\\n+              $(TEST_RFAIL_SOURCES_STAGE0:.rs=.rustc$(X))\n+\n+TEST_RFAIL_OUTS_BOOT  := \\\n+                  $(TEST_RFAIL_EXES_BOOT:.boot$(X)=.boot.out)\n+TEST_RFAIL_OUTS_STAGE0 := \\\n+                  $(TEST_RFAIL_EXES_STAGE0:.rustc$(X)=.rustc.out)\n+\n+TEST_RFAIL_TMPS_BOOT  := \\\n+  $(TEST_RFAIL_EXES_BOOT:.boot$(X)=.boot$(X).tmp)\n+TEST_RFAIL_TMPS_STAGE0 := \\\n+  $(TEST_RFAIL_EXES_STAGE0:.rustc$(X)=.rustc$(X).tmp)\n+\n+\n+TEST_CFAIL_CRATES_BOOT := $(filter-out $(TEST_XFAILS_BOOT), $(CFAIL_RC))\n+TEST_CFAIL_CRATES_STAGE0 := $(filter-out $(TEST_XFAILS_STAGE0), $(CFAIL_RC))\n+TEST_CFAIL_SOURCES_BOOT := $(filter-out $(TEST_XFAILS_BOOT), $(CFAIL_RS))\n+TEST_CFAIL_SOURCES_STAGE0 := $(filter-out $(TEST_XFAILS_STAGE0), $(CFAIL_RS))\n+\n+TEST_CFAIL_EXES_BOOT := \\\n+              $(TEST_CFAIL_CRATES_BOOT:.rc=.boot$(X)) \\\n+              $(TEST_CFAIL_SOURCES_BOOT:.rs=.boot$(X))\n+TEST_CFAIL_EXES_STAGE0 := \\\n+              $(TEST_CFAIL_CRATES_STAGE0:.rc=.rustc$(X)) \\\n+              $(TEST_CFAIL_SOURCES_STAGE0:.rs=.rustc$(X))\n+\n+TEST_CFAIL_OUTS_BOOT := \\\n+                $(TEST_CFAIL_EXES_BOOT:.boot$(X)=.boot.out)\n+TEST_CFAIL_OUTS_STAGE0 := \\\n+                $(TEST_CFAIL_EXES_STAGE0:.rustc$(X)=.rustc.out)\n+\n+TEST_CFAIL_TMPS_BOOT := \\\n+  $(TEST_CFAIL_EXES_BOOT:.boot$(X)=.boot$(X).tmp)\n+TEST_CFAIL_TMPS_STAGE0 := \\\n+  $(TEST_CFAIL_EXES_STAGE0:.rustc$(X)=.rustc$(X).tmp)\n+\n+\n+ALL_TEST_CRATES := $(TEST_CFAIL_CRATES_BOOT) \\\n+                   $(TEST_RFAIL_CRATES_BOOT) \\\n+                   $(TEST_RPASS_CRATES_BOOT) \\\n+                   $(TEST_CFAIL_CRATES_STAGE0) \\\n+                   $(TEST_RFAIL_CRATES_STAGE0) \\\n+                   $(TEST_RPASS_CRATES_STAGE0)\n+\n+ALL_TEST_SOURCES := $(TEST_CFAIL_SOURCES_BOOT) \\\n+                    $(TEST_RFAIL_SOURCES_BOOT) \\\n+                    $(TEST_RPASS_SOURCES_BOOT) \\\n+                    $(TEST_CFAIL_SOURCES_STAGE0) \\\n+                    $(TEST_RFAIL_SOURCES_STAGE0) \\\n+                    $(TEST_RPASS_SOURCES_STAGE0)\n+\n+ALL_TEST_INPUTS := $(wildcard $(S)src/test/*/*.rs   \\\n+                              $(S)src/test/*/*/*.rs \\\n+                              $(S)src/test/*/*.rc)\n+\n+# The test suite currently relies on logging to validate results so\n+# make sure that logging uses the default configuration\n+unexport RUST_LOG\n+\n+\n+check_nocompile: $(TEST_CFAIL_OUTS_BOOT) \\\n+                 $(TEST_CFAIL_OUTS_STAGE0)\n+\n+check: tidy \\\n+       $(TEST_RPASS_EXES_BOOT) $(TEST_RFAIL_EXES_BOOT) \\\n+       $(TEST_RPASS_OUTS_BOOT) $(TEST_RFAIL_OUTS_BOOT) \\\n+       $(TEST_CFAIL_OUTS_BOOT) \\\n+       $(TEST_RPASS_EXES_STAGE0) $(TEST_RFAIL_EXES_STAGE0) \\\n+       $(TEST_RPASS_OUTS_STAGE0) $(TEST_RFAIL_OUTS_STAGE0) \\\n+       $(TEST_CFAIL_OUTS_STAGE0)\n+\n+\n+compile-check: tidy \\\n+       $(TEST_RPASS_EXES_BOOT) $(TEST_RFAIL_EXES_BOOT) \\\n+       $(TEST_RPASS_EXES_STAGE0) $(TEST_RFAIL_EXES_STAGE0)\n+\n+\n ######################################################################\n # Testing rules\n ######################################################################"}]}