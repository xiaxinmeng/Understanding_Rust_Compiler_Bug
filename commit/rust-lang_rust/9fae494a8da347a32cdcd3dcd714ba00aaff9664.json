{"sha": "9fae494a8da347a32cdcd3dcd714ba00aaff9664", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYWU0OTRhOGRhMzQ3YTMyY2RjZDNkY2Q3MTRiYTAwYWFmZjk2NjQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-25T08:40:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-25T08:40:17Z"}, "message": "Move ParsedFile to top", "tree": {"sha": "9fe4fb51c374d036e22d5a60ce50b63dbe287142", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fe4fb51c374d036e22d5a60ce50b63dbe287142"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fae494a8da347a32cdcd3dcd714ba00aaff9664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fae494a8da347a32cdcd3dcd714ba00aaff9664", "html_url": "https://github.com/rust-lang/rust/commit/9fae494a8da347a32cdcd3dcd714ba00aaff9664", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fae494a8da347a32cdcd3dcd714ba00aaff9664/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f104458d45e30024f8a4a02c1ad4101ed74b08f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f104458d45e30024f8a4a02c1ad4101ed74b08f9", "html_url": "https://github.com/rust-lang/rust/commit/f104458d45e30024f8a4a02c1ad4101ed74b08f9"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "a0f17a68994b78f92bde6c0334e4e6d9b8a2292a", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fae494a8da347a32cdcd3dcd714ba00aaff9664/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fae494a8da347a32cdcd3dcd714ba00aaff9664/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=9fae494a8da347a32cdcd3dcd714ba00aaff9664", "patch": "@@ -27,8 +27,9 @@ use std::{\n };\n \n use libsyntax2::{\n+    ParsedFile,\n     TextUnit, TextRange, SmolStr,\n-    ast::{self, AstNode, NameOwner, ParsedFile},\n+    ast::{self, AstNode, NameOwner},\n     SyntaxKind::*,\n };\n use libeditor::{LineIndex, FileSymbol, find_node};"}, {"sha": "e8d32928ae0619c9b763636ce9309b70096b2ab6", "filename": "crates/libanalysis/src/module_map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fae494a8da347a32cdcd3dcd714ba00aaff9664/crates%2Flibanalysis%2Fsrc%2Fmodule_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fae494a8da347a32cdcd3dcd714ba00aaff9664/crates%2Flibanalysis%2Fsrc%2Fmodule_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fmodule_map.rs?ref=9fae494a8da347a32cdcd3dcd714ba00aaff9664", "patch": "@@ -4,7 +4,8 @@ use std::{\n \n use parking_lot::{RwLock, RwLockReadGuard, RwLockWriteGuard};\n use libsyntax2::{\n-    ast::{self, AstNode, NameOwner, ParsedFile},\n+    ParsedFile,\n+    ast::{self, AstNode, NameOwner},\n     SyntaxNode, SmolStr,\n };\n use {FileId, FileResolver};"}, {"sha": "c7c043b39d9f67a0ec729dfa11e97949735304ea", "filename": "crates/libeditor/src/code_actions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fae494a8da347a32cdcd3dcd714ba00aaff9664/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fae494a8da347a32cdcd3dcd714ba00aaff9664/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs?ref=9fae494a8da347a32cdcd3dcd714ba00aaff9664", "patch": "@@ -3,7 +3,8 @@ use std::{\n };\n \n use libsyntax2::{\n-    ast::{self, AstNode, AttrsOwner, TypeParamsOwner, NameOwner, ParsedFile},\n+    ParsedFile,\n+    ast::{self, AstNode, AttrsOwner, TypeParamsOwner, NameOwner},\n     SyntaxKind::COMMA,\n     SyntaxNodeRef,\n     algo::{"}, {"sha": "b2d1dab5886af418c67e93642f327cd1c4666445", "filename": "crates/libeditor/src/lib.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9fae494a8da347a32cdcd3dcd714ba00aaff9664/crates%2Flibeditor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fae494a8da347a32cdcd3dcd714ba00aaff9664/crates%2Flibeditor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Flib.rs?ref=9fae494a8da347a32cdcd3dcd714ba00aaff9664", "patch": "@@ -10,8 +10,7 @@ mod code_actions;\n mod typing;\n \n use libsyntax2::{\n-    ast::{self, NameOwner},\n-    AstNode,\n+    ast::{self, AstNode, NameOwner},\n     algo::{walk, find_leaf_at_offset},\n     SyntaxKind::{self, *},\n };\n@@ -52,11 +51,11 @@ pub enum RunnableKind {\n     Bin,\n }\n \n-pub fn parse(text: &str) -> ast::ParsedFile {\n-    ast::ParsedFile::parse(text)\n+pub fn parse(text: &str) -> ParsedFile {\n+    ParsedFile::parse(text)\n }\n \n-pub fn matching_brace(file: &ast::ParsedFile, offset: TextUnit) -> Option<TextUnit> {\n+pub fn matching_brace(file: &ParsedFile, offset: TextUnit) -> Option<TextUnit> {\n     const BRACES: &[SyntaxKind] = &[\n         L_CURLY, R_CURLY,\n         L_BRACK, R_BRACK,\n@@ -76,7 +75,7 @@ pub fn matching_brace(file: &ast::ParsedFile, offset: TextUnit) -> Option<TextUn\n     Some(matching_node.range().start())\n }\n \n-pub fn highlight(file: &ast::ParsedFile) -> Vec<HighlightedRange> {\n+pub fn highlight(file: &ParsedFile) -> Vec<HighlightedRange> {\n     let mut res = Vec::new();\n     for node in walk::preorder(file.syntax()) {\n         let tag = match node.kind() {\n@@ -99,7 +98,7 @@ pub fn highlight(file: &ast::ParsedFile) -> Vec<HighlightedRange> {\n     res\n }\n \n-pub fn diagnostics(file: &ast::ParsedFile) -> Vec<Diagnostic> {\n+pub fn diagnostics(file: &ParsedFile) -> Vec<Diagnostic> {\n     let mut res = Vec::new();\n \n     for node in walk::preorder(file.syntax()) {\n@@ -117,11 +116,11 @@ pub fn diagnostics(file: &ast::ParsedFile) -> Vec<Diagnostic> {\n     res\n }\n \n-pub fn syntax_tree(file: &ast::ParsedFile) -> String {\n+pub fn syntax_tree(file: &ParsedFile) -> String {\n     ::libsyntax2::utils::dump_tree(file.syntax())\n }\n \n-pub fn runnables(file: &ast::ParsedFile) -> Vec<Runnable> {\n+pub fn runnables(file: &ParsedFile) -> Vec<Runnable> {\n     file.ast()\n         .functions()\n         .filter_map(|f| {"}, {"sha": "8903af1771a3d6b4d8b7e1ba204d7ef5133e794d", "filename": "crates/libeditor/src/typing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fae494a8da347a32cdcd3dcd714ba00aaff9664/crates%2Flibeditor%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fae494a8da347a32cdcd3dcd714ba00aaff9664/crates%2Flibeditor%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Ftyping.rs?ref=9fae494a8da347a32cdcd3dcd714ba00aaff9664", "patch": "@@ -1,5 +1,5 @@\n use libsyntax2::{\n-    TextUnit, TextRange, SyntaxNodeRef,\n+    TextUnit, TextRange, SyntaxNodeRef, ParsedFile,\n     ast,\n     algo::{\n         walk::preorder,\n@@ -11,7 +11,7 @@ use libsyntax2::{\n \n use {ActionResult, EditBuilder};\n \n-pub fn join_lines(file: &ast::ParsedFile, range: TextRange) -> ActionResult {\n+pub fn join_lines(file: &ParsedFile, range: TextRange) -> ActionResult {\n     let range = if range.is_empty() {\n         let text = file.syntax().text();\n         let text = &text[TextRange::from_to(range.start(), TextUnit::of_str(&text))];"}, {"sha": "6217c5b74f52ffe75bbf573512b7eda9db60b58b", "filename": "crates/libsyntax2/src/ast/mod.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9fae494a8da347a32cdcd3dcd714ba00aaff9664/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fae494a8da347a32cdcd3dcd714ba00aaff9664/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs?ref=9fae494a8da347a32cdcd3dcd714ba00aaff9664", "patch": "@@ -4,8 +4,7 @@ use itertools::Itertools;\n use smol_str::SmolStr;\n \n use {\n-    SyntaxNode, SyntaxNodeRef, TreeRoot, SyntaxError,\n-    SyntaxKind::*,\n+    SyntaxNodeRef, SyntaxKind::*,\n };\n pub use self::generated::*;\n \n@@ -37,28 +36,6 @@ pub trait AttrsOwner<'a>: AstNode<'a> {\n     }\n }\n \n-#[derive(Clone, Debug)]\n-pub struct ParsedFile {\n-    root: SyntaxNode\n-}\n-\n-impl ParsedFile {\n-    pub fn parse(text: &str) -> Self {\n-        let root = ::parse(text);\n-        ParsedFile { root }\n-    }\n-    pub fn ast(&self) -> File {\n-        File::cast(self.syntax()).unwrap()\n-    }\n-    pub fn syntax(&self) -> SyntaxNodeRef {\n-        self.root.borrowed()\n-    }\n-    pub fn errors(&self) -> Vec<SyntaxError> {\n-        self.syntax().root.syntax_root().errors.clone()\n-    }\n-\n-}\n-\n impl<'a> FnDef<'a> {\n     pub fn has_atom_attr(&self, atom: &str) -> bool {\n         self.attrs()"}, {"sha": "b3efe2a181c549a1434312cc45310f6388f7b432", "filename": "crates/libsyntax2/src/lib.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9fae494a8da347a32cdcd3dcd714ba00aaff9664/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fae494a8da347a32cdcd3dcd714ba00aaff9664/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Flib.rs?ref=9fae494a8da347a32cdcd3dcd714ba00aaff9664", "patch": "@@ -44,12 +44,33 @@ pub mod text_utils;\n pub use {\n     text_unit::{TextRange, TextUnit},\n     smol_str::SmolStr,\n-    ast::{AstNode, ParsedFile},\n+    ast::AstNode,\n     lexer::{tokenize, Token},\n     syntax_kinds::SyntaxKind,\n     yellow::{SyntaxNode, SyntaxNodeRef, OwnedRoot, RefRoot, TreeRoot, SyntaxError},\n };\n \n+#[derive(Clone, Debug)]\n+pub struct ParsedFile {\n+    root: SyntaxNode\n+}\n+\n+impl ParsedFile {\n+    pub fn parse(text: &str) -> Self {\n+        let root = ::parse(text);\n+        ParsedFile { root }\n+    }\n+    pub fn ast(&self) -> ast::File {\n+        ast::File::cast(self.syntax()).unwrap()\n+    }\n+    pub fn syntax(&self) -> SyntaxNodeRef {\n+        self.root.borrowed()\n+    }\n+    pub fn errors(&self) -> Vec<SyntaxError> {\n+        self.syntax().root.syntax_root().errors.clone()\n+    }\n+\n+}\n \n pub fn parse(text: &str) -> SyntaxNode {\n     let tokens = tokenize(&text);"}]}