{"sha": "6a31385363f26f5324b2e125a96541efec88f60c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMzEzODUzNjNmMjZmNTMyNGIyZTEyNWE5NjU0MWVmZWM4OGY2MGM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-03T12:28:53Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-03T12:28:53Z"}, "message": "Misc target related improvements", "tree": {"sha": "b7acb12865bc6e1fec9445c1a8d5e987f85e55a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7acb12865bc6e1fec9445c1a8d5e987f85e55a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a31385363f26f5324b2e125a96541efec88f60c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a31385363f26f5324b2e125a96541efec88f60c", "html_url": "https://github.com/rust-lang/rust/commit/6a31385363f26f5324b2e125a96541efec88f60c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a31385363f26f5324b2e125a96541efec88f60c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55e077970891c33122ed34f7f8a061709ba01dc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/55e077970891c33122ed34f7f8a061709ba01dc3", "html_url": "https://github.com/rust-lang/rust/commit/55e077970891c33122ed34f7f8a061709ba01dc3"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "3d78eed77b94c373cfe533920501dbabb6f99470", "filename": "src/base.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6a31385363f26f5324b2e125a96541efec88f60c/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a31385363f26f5324b2e125a96541efec88f60c/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=6a31385363f26f5324b2e125a96541efec88f60c", "patch": "@@ -109,7 +109,14 @@ pub(crate) fn codegen_fn<'tcx>(\n     let context = &mut cx.cached_context;\n     context.func = func;\n \n-    crate::pretty_clif::write_clif_file(tcx, \"unopt\", None, instance, &context, &clif_comments);\n+    crate::pretty_clif::write_clif_file(\n+        tcx,\n+        \"unopt\",\n+        module.isa(),\n+        instance,\n+        &context,\n+        &clif_comments,\n+    );\n \n     // Verify function\n     verify_func(tcx, &clif_comments, &context.func);\n@@ -126,7 +133,13 @@ pub(crate) fn codegen_fn<'tcx>(\n \n     // Perform rust specific optimizations\n     tcx.sess.time(\"optimize clif ir\", || {\n-        crate::optimize::optimize_function(tcx, instance, context, &mut clif_comments);\n+        crate::optimize::optimize_function(\n+            tcx,\n+            module.isa(),\n+            instance,\n+            context,\n+            &mut clif_comments,\n+        );\n     });\n \n     // Define function\n@@ -141,7 +154,7 @@ pub(crate) fn codegen_fn<'tcx>(\n     crate::pretty_clif::write_clif_file(\n         tcx,\n         \"opt\",\n-        Some(module.isa()),\n+        module.isa(),\n         instance,\n         &context,\n         &clif_comments,"}, {"sha": "5d2c79e3e87a5166fd88a47f67843436730d3156", "filename": "src/driver/aot.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a31385363f26f5324b2e125a96541efec88f60c/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a31385363f26f5324b2e125a96541efec88f60c/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=6a31385363f26f5324b2e125a96541efec88f60c", "patch": "@@ -290,13 +290,15 @@ pub(crate) fn run_aot(\n         None\n     };\n \n+    // FIXME handle `-Ctarget-cpu=native`\n+    let target_cpu = tcx.sess.opts.cg.target_cpu.as_ref().unwrap_or(&tcx.sess.target.cpu).to_owned();\n     Box::new((\n         CodegenResults {\n             modules,\n             allocator_module,\n             metadata_module,\n             metadata,\n-            linker_info: LinkerInfo::new(tcx, crate::target_triple(tcx.sess).to_string()),\n+            linker_info: LinkerInfo::new(tcx, target_cpu),\n             crate_info: CrateInfo::new(tcx),\n         },\n         work_products,"}, {"sha": "f454d0efab8314ba0947cd155ed454a67ff76d3e", "filename": "src/driver/jit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a31385363f26f5324b2e125a96541efec88f60c/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a31385363f26f5324b2e125a96541efec88f60c/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=6a31385363f26f5324b2e125a96541efec88f60c", "patch": "@@ -159,7 +159,7 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n             AbiParam::new(jit_module.target_config().pointer_type()),\n         ],\n         returns: vec![AbiParam::new(jit_module.target_config().pointer_type() /*isize*/)],\n-        call_conv: CallConv::triple_default(&crate::target_triple(tcx.sess)),\n+        call_conv: jit_module.target_config().default_call_conv,\n     };\n     let start_func_id = jit_module.declare_function(\"main\", Linkage::Import, &start_sig).unwrap();\n     let finalized_start: *const u8 = jit_module.get_finalized_function(start_func_id);"}, {"sha": "61033d85a12740a827d1f443c7e76e567dfd54e9", "filename": "src/optimize/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6a31385363f26f5324b2e125a96541efec88f60c/src%2Foptimize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a31385363f26f5324b2e125a96541efec88f60c/src%2Foptimize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fmod.rs?ref=6a31385363f26f5324b2e125a96541efec88f60c", "patch": "@@ -1,17 +1,20 @@\n //! Various optimizations specific to cg_clif\n \n+use cranelift_codegen::isa::TargetIsa;\n+\n use crate::prelude::*;\n \n pub(crate) mod peephole;\n \n pub(crate) fn optimize_function<'tcx>(\n     tcx: TyCtxt<'tcx>,\n+    isa: &dyn TargetIsa,\n     instance: Instance<'tcx>,\n     ctx: &mut Context,\n     clif_comments: &mut crate::pretty_clif::CommentWriter,\n ) {\n     // FIXME classify optimizations over opt levels once we have more\n \n-    crate::pretty_clif::write_clif_file(tcx, \"preopt\", None, instance, &ctx, &*clif_comments);\n+    crate::pretty_clif::write_clif_file(tcx, \"preopt\", isa, instance, &ctx, &*clif_comments);\n     crate::base::verify_func(tcx, &*clif_comments, &ctx.func);\n }"}, {"sha": "2f278134d5b519a99526ec6b07b29a781d7d1f40", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6a31385363f26f5324b2e125a96541efec88f60c/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a31385363f26f5324b2e125a96541efec88f60c/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=6a31385363f26f5324b2e125a96541efec88f60c", "patch": "@@ -233,7 +233,7 @@ pub(crate) fn write_ir_file(\n pub(crate) fn write_clif_file<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     postfix: &str,\n-    isa: Option<&dyn cranelift_codegen::isa::TargetIsa>,\n+    isa: &dyn cranelift_codegen::isa::TargetIsa,\n     instance: Instance<'tcx>,\n     context: &cranelift_codegen::Context,\n     mut clif_comments: &CommentWriter,\n@@ -242,22 +242,19 @@ pub(crate) fn write_clif_file<'tcx>(\n         tcx,\n         || format!(\"{}.{}.clif\", tcx.symbol_name(instance).name, postfix),\n         |file| {\n-            let value_ranges = isa\n-                .map(|isa| context.build_value_labels_ranges(isa).expect(\"value location ranges\"));\n-\n             let mut clif = String::new();\n             cranelift_codegen::write::decorate_function(\n                 &mut clif_comments,\n                 &mut clif,\n                 &context.func,\n-                &DisplayFunctionAnnotations { isa, value_ranges: value_ranges.as_ref() },\n+                &DisplayFunctionAnnotations { isa: Some(isa), value_ranges: None },\n             )\n             .unwrap();\n \n             writeln!(file, \"test compile\")?;\n             writeln!(file, \"set is_pic\")?;\n             writeln!(file, \"set enable_simd\")?;\n-            writeln!(file, \"target {} haswell\", crate::target_triple(tcx.sess))?;\n+            writeln!(file, \"target {} nehalem\", crate::target_triple(tcx.sess))?;\n             writeln!(file)?;\n             file.write_all(clif.as_bytes())?;\n             Ok(())"}]}