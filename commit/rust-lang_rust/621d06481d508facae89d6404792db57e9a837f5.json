{"sha": "621d06481d508facae89d6404792db57e9a837f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMWQwNjQ4MWQ1MDhmYWNhZTg5ZDY0MDQ3OTJkYjU3ZTlhODM3ZjU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-06T10:05:59Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-06T10:05:59Z"}, "message": "atomic ordering docs", "tree": {"sha": "09e084c7c83e3b71ab313641deada2122e632c87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09e084c7c83e3b71ab313641deada2122e632c87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/621d06481d508facae89d6404792db57e9a837f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/621d06481d508facae89d6404792db57e9a837f5", "html_url": "https://github.com/rust-lang/rust/commit/621d06481d508facae89d6404792db57e9a837f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/621d06481d508facae89d6404792db57e9a837f5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c98d2e63f732682b057c8c453b08f9e12b262e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c98d2e63f732682b057c8c453b08f9e12b262e6", "html_url": "https://github.com/rust-lang/rust/commit/7c98d2e63f732682b057c8c453b08f9e12b262e6"}], "stats": {"total": 59, "additions": 48, "deletions": 11}, "files": [{"sha": "41e6376ff8c058169659ea3e68b69cccd8ad77ac", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 48, "deletions": 11, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/621d06481d508facae89d6404792db57e9a837f5/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621d06481d508facae89d6404792db57e9a837f5/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=621d06481d508facae89d6404792db57e9a837f5", "patch": "@@ -193,32 +193,67 @@ pub enum Ordering {\n     /// [`Monotonic`]: http://llvm.org/docs/Atomics.html#monotonic\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Relaxed,\n-    /// When coupled with a store, all previous writes become visible\n-    /// to the other threads that perform a load with [`Acquire`] ordering\n-    /// on the same value.\n+    /// When coupled with a store, all previous operations become ordered\n+    /// before any load of this value with [`Acquire`] (or stronger) ordering.\n+    /// In particular, all previous writes become visible to all threads\n+    /// that perform an [`Acquire`] (or stronger) load of this value.\n     ///\n+    /// Notice that using this ordering for an operation that combines loads\n+    /// and stores leads to a [`Relaxed`] load operation!\n+    ///\n+    /// This ordering is only applicable for operations that can perform a store.\n+    ///\n+    /// Corresponds to LLVM's [`Release`] ordering.\n+    ///\n+    /// [`Release`]: http://llvm.org/docs/Atomics.html#release\n     /// [`Acquire`]: http://llvm.org/docs/Atomics.html#acquire\n+    /// [`Relaxed`]: https://llvm.org/docs/Atomics.html#monotonic\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Release,\n-    /// When coupled with a load, all subsequent loads will see data\n-    /// written before a store with [`Release`] ordering on the same value\n-    /// in other threads.\n+    /// When coupled with a load, if the loaded value was written by a store operation with\n+    /// [`Release`] (or stronger) ordering, then all subsequent operations\n+    /// become ordered after that store. In particular, all subsequent loads will see data\n+    /// written before the store.\n     ///\n+    /// Notice that using this ordering for an operation that combines loads\n+    /// and stores leads to a [`Relaxed`] store operation!\n+    ///\n+    /// This ordering is only applicable for operations that can perform a load.\n+    ///\n+    /// Corresponds to LLVM's [`Acquire`] ordering.\n+    ///\n+    /// [`Acquire`]: http://llvm.org/docs/Atomics.html#acquire\n     /// [`Release`]: http://llvm.org/docs/Atomics.html#release\n+    /// [`Relaxed`]: https://llvm.org/docs/Atomics.html#monotonic\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Acquire,\n-    /// Has the effects of both [`Acquire`] and [`Release`] together.\n+    /// Has the effects of both [`Acquire`] and [`Release`] together:\n+    /// For loads it uses [`Acquire`] ordering. For stores it uses the [`Release`] ordering.\n+    ///\n+    /// Notice that in the case of `compare_and_swap`, it is possible that the operation ends up\n+    /// not performing any store and hence it has just `Acquire` ordering. However,\n+    /// `AcqRel` will never perform [`Relaxed`] accesses.\n     ///\n     /// This ordering is only applicable for operations that combine both loads and stores.\n     ///\n-    /// For loads it uses [`Acquire`] ordering. For stores it uses the [`Release`] ordering.\n+    /// Corresponds to LLVM's [`AcquireRelease`] ordering.\n     ///\n+    /// [`AcquireRelease`]: http://llvm.org/docs/Atomics.html#acquirerelease\n     /// [`Acquire`]: http://llvm.org/docs/Atomics.html#acquire\n     /// [`Release`]: http://llvm.org/docs/Atomics.html#release\n+    /// [`Relaxed`]: https://llvm.org/docs/Atomics.html#monotonic\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     AcqRel,\n-    /// Like `AcqRel` with the additional guarantee that all threads see all\n+    /// Like [`Acquire`]/[`Release`]/[`AcqRel`] (for load, store, and load-with-store\n+    /// operations, respectively) with the additional guarantee that all threads see all\n     /// sequentially consistent operations in the same order.\n+    ///\n+    /// Corresponds to LLVM's [`SequentiallyConsistent`] ordering.\n+    ///\n+    /// [`SequentiallyConsistent`]: http://llvm.org/docs/Atomics.html#sequentiallyconsistent\n+    /// [`Acquire`]: http://llvm.org/docs/Atomics.html#acquire\n+    /// [`Release`]: http://llvm.org/docs/Atomics.html#release\n+    /// [`AcqRel`]: https://llvm.org/docs/Atomics.html#acquirerelease\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     SeqCst,\n     // Prevent exhaustive matching to allow for future extension\n@@ -384,9 +419,11 @@ impl AtomicBool {\n     /// was updated.\n     ///\n     /// `compare_and_swap` also takes an [`Ordering`] argument which describes the memory\n-    /// ordering of this operation.\n+    /// ordering of this operation. Notice that even when using [`AcqRel`], the operation\n+    /// might fail and hence just perform an `Acquire` load, but not have `Release` semantics.\n     ///\n     /// [`Ordering`]: enum.Ordering.html\n+    /// [`Ordering`]: enum.Ordering.html#variant.AcqRel\n     /// [`bool`]: ../../../std/primitive.bool.html\n     ///\n     /// # Examples\n@@ -421,7 +458,7 @@ impl AtomicBool {\n     /// ordering of this operation. The first describes the required ordering if the\n     /// operation succeeds while the second describes the required ordering when the\n     /// operation fails. The failure ordering can't be [`Release`] or [`AcqRel`] and must\n-    /// be equivalent or weaker than the success ordering.\n+    /// be equivalent to or weaker than the success ordering.\n     ///\n     /// [`bool`]: ../../../std/primitive.bool.html\n     /// [`Ordering`]: enum.Ordering.html"}]}