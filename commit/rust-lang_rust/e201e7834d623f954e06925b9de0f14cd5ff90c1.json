{"sha": "e201e7834d623f954e06925b9de0f14cd5ff90c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMDFlNzgzNGQ2MjNmOTU0ZTA2OTI1YjlkZTBmMTRjZDVmZjkwYzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-09T13:55:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-09T13:57:53Z"}, "message": "Ascribe more correct types", "tree": {"sha": "4724422ed5f7242cd23987f30133dc211895154b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4724422ed5f7242cd23987f30133dc211895154b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e201e7834d623f954e06925b9de0f14cd5ff90c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e201e7834d623f954e06925b9de0f14cd5ff90c1", "html_url": "https://github.com/rust-lang/rust/commit/e201e7834d623f954e06925b9de0f14cd5ff90c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e201e7834d623f954e06925b9de0f14cd5ff90c1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5c07c2a0a1b4809c5aacef3c8e90034d00c3b03", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5c07c2a0a1b4809c5aacef3c8e90034d00c3b03", "html_url": "https://github.com/rust-lang/rust/commit/c5c07c2a0a1b4809c5aacef3c8e90034d00c3b03"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "146cc75df2ad1a0c0e860e9c84205509c058f610", "filename": "crates/ra_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e201e7834d623f954e06925b9de0f14cd5ff90c1/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e201e7834d623f954e06925b9de0f14cd5ff90c1/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=e201e7834d623f954e06925b9de0f14cd5ff90c1", "patch": "@@ -23,6 +23,7 @@ use crate::{AssistContext, AssistId, Assists};\n // ```\n pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let stmt = ctx.find_node_at_offset::<LetStmt>()?;\n+    let module = ctx.sema.scope(stmt.syntax()).module()?;\n     let expr = stmt.initializer()?;\n     let pat = stmt.pat()?;\n     // Must be a binding\n@@ -57,17 +58,17 @@ pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext) -> Optio\n         return None;\n     }\n \n-    let db = ctx.db;\n-    let new_type_string = ty.display_truncated(db, None).to_string();\n+    let inferred_type = ty.display_source_code(ctx.db, module.into()).ok()?;\n     acc.add(\n         AssistId(\"add_explicit_type\"),\n-        format!(\"Insert explicit type '{}'\", new_type_string),\n+        format!(\"Insert explicit type '{}'\", inferred_type),\n         pat_range,\n-        |edit| {\n-            if let Some(ascribed_ty) = ascribed_ty {\n-                edit.replace(ascribed_ty.syntax().text_range(), new_type_string);\n-            } else {\n-                edit.insert(name_range.end(), format!(\": {}\", new_type_string));\n+        |builder| match ascribed_ty {\n+            Some(ascribed_ty) => {\n+                builder.replace(ascribed_ty.syntax().text_range(), inferred_type);\n+            }\n+            None => {\n+                builder.insert(name_range.end(), format!(\": {}\", inferred_type));\n             }\n         },\n     )\n@@ -208,7 +209,7 @@ struct Test<K, T = u8> {\n }\n \n fn main() {\n-    let test<|>: Test<i32> = Test { t: 23, k: 33 };\n+    let test<|>: Test<i32, u8> = Test { t: 23, k: 33 };\n }\"#,\n         );\n     }"}]}