{"sha": "75822f2894498025d6a86bcaf30fa56118c7d3ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ODIyZjI4OTQ0OTgwMjVkNmE4NmJjYWYzMGZhNTYxMThjN2QzYWI=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-15T04:45:40Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-15T05:36:41Z"}, "message": "add a DeepClone trait\n\nfor deep copies through shared ownership boundaries", "tree": {"sha": "22210464695226860d71add6db6801634d775bc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22210464695226860d71add6db6801634d775bc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75822f2894498025d6a86bcaf30fa56118c7d3ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75822f2894498025d6a86bcaf30fa56118c7d3ab", "html_url": "https://github.com/rust-lang/rust/commit/75822f2894498025d6a86bcaf30fa56118c7d3ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75822f2894498025d6a86bcaf30fa56118c7d3ab/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa45958ec8362c1157d8d655fc8ec95ba3f811d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa45958ec8362c1157d8d655fc8ec95ba3f811d6", "html_url": "https://github.com/rust-lang/rust/commit/fa45958ec8362c1157d8d655fc8ec95ba3f811d6"}], "stats": {"total": 138, "additions": 126, "deletions": 12}, "files": [{"sha": "2ff860916c5b256318f70f02e33d15eea71d7e9a", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 45, "deletions": 7, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/75822f2894498025d6a86bcaf30fa56118c7d3ab/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75822f2894498025d6a86bcaf30fa56118c7d3ab/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=75822f2894498025d6a86bcaf30fa56118c7d3ab", "patch": "@@ -28,12 +28,6 @@ pub trait Clone {\n     fn clone(&self) -> Self;\n }\n \n-impl Clone for () {\n-    /// Return a copy of the value.\n-    #[inline(always)]\n-    fn clone(&self) -> () { () }\n-}\n-\n impl<T: Clone> Clone for ~T {\n     /// Return a deep copy of the owned box.\n     #[inline(always)]\n@@ -55,7 +49,7 @@ impl<T> Clone for @mut T {\n macro_rules! clone_impl(\n     ($t:ty) => {\n         impl Clone for $t {\n-            /// Return a copy of the value.\n+            /// Return a deep copy of the value.\n             #[inline(always)]\n             fn clone(&self) -> $t { *self }\n         }\n@@ -78,9 +72,53 @@ clone_impl!(float)\n clone_impl!(f32)\n clone_impl!(f64)\n \n+clone_impl!(())\n clone_impl!(bool)\n clone_impl!(char)\n \n+pub trait DeepClone {\n+    /// Return a deep copy of the object tree. Types with shared ownership are also copied via a\n+    /// deep copy, unlike `Clone`. Note that this is currently unimplemented for managed boxes, as\n+    /// it would need to handle cycles.\n+    fn deep_clone(&self) -> Self;\n+}\n+\n+macro_rules! deep_clone_impl(\n+    ($t:ty) => {\n+        impl DeepClone for $t {\n+            /// Return a deep copy of the value.\n+            #[inline(always)]\n+            fn deep_clone(&self) -> $t { *self }\n+        }\n+    }\n+)\n+\n+impl<T: DeepClone> DeepClone for ~T {\n+    /// Return a deep copy of the owned box.\n+    #[inline(always)]\n+    fn deep_clone(&self) -> ~T { ~(**self).deep_clone() }\n+}\n+\n+deep_clone_impl!(int)\n+deep_clone_impl!(i8)\n+deep_clone_impl!(i16)\n+deep_clone_impl!(i32)\n+deep_clone_impl!(i64)\n+\n+deep_clone_impl!(uint)\n+deep_clone_impl!(u8)\n+deep_clone_impl!(u16)\n+deep_clone_impl!(u32)\n+deep_clone_impl!(u64)\n+\n+deep_clone_impl!(float)\n+deep_clone_impl!(f32)\n+deep_clone_impl!(f64)\n+\n+deep_clone_impl!(())\n+deep_clone_impl!(bool)\n+deep_clone_impl!(char)\n+\n #[test]\n fn test_owned_clone() {\n     let a: ~int = ~5i;"}, {"sha": "4ed648161fc22e7762cc4c2a47755865d48b9d31", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75822f2894498025d6a86bcaf30fa56118c7d3ab/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75822f2894498025d6a86bcaf30fa56118c7d3ab/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=75822f2894498025d6a86bcaf30fa56118c7d3ab", "patch": "@@ -27,7 +27,7 @@ pub use io::{print, println};\n \n /* Reexported types and traits */\n \n-pub use clone::Clone;\n+pub use clone::{Clone, DeepClone};\n pub use cmp::{Eq, ApproxEq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater, Equiv};\n pub use container::{Container, Mutable, Map, Set};\n pub use hash::Hash;"}, {"sha": "41fcc1d402e0e382421dd053a8dcb9a68bbef85b", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 80, "deletions": 4, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/75822f2894498025d6a86bcaf30fa56118c7d3ab/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75822f2894498025d6a86bcaf30fa56118c7d3ab/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=75822f2894498025d6a86bcaf30fa56118c7d3ab", "patch": "@@ -76,6 +76,7 @@ impl<T: Owned> Drop for Rc<T> {\n \n \n impl<T: Owned> Clone for Rc<T> {\n+    /// Return a shallow copy of the reference counted pointer.\n     #[inline]\n     fn clone(&self) -> Rc<T> {\n         unsafe {\n@@ -85,9 +86,46 @@ impl<T: Owned> Clone for Rc<T> {\n     }\n }\n \n+impl<T: Owned + DeepClone> DeepClone for Rc<T> {\n+    /// Return a deep copy of the reference counted pointer.\n+    #[inline]\n+    fn deep_clone(&self) -> Rc<T> {\n+        Rc::new(self.borrow().deep_clone())\n+    }\n+}\n+\n #[cfg(test)]\n mod test_rc {\n     use super::*;\n+    use core::cell::Cell;\n+\n+    #[test]\n+    fn test_clone() {\n+        let x = Rc::new(Cell(5));\n+        let y = x.clone();\n+        do x.with_borrow |cell| {\n+            do value.with_mut_ref |inner| {\n+                *inner = 20;\n+            }\n+        }\n+        do y.with_borrow |value| {\n+            assert_eq!(value.take(), 20);\n+        }\n+    }\n+\n+    #[test]\n+    fn test_deep_clone() {\n+        let x = Rc::new(Cell(5));\n+        let y = x.deep_clone();\n+        do x.with_borrow |cell| {\n+            do value.with_mut_ref |inner| {\n+                *inner = 20;\n+            }\n+        }\n+        do y.with_borrow |value| {\n+            assert_eq!(value.take(), 5);\n+        }\n+    }\n \n     #[test]\n     fn test_simple() {\n@@ -149,24 +187,26 @@ pub impl<T: Owned> RcMut<T> {\n \n     /// Fails if there is already a mutable borrow of the box\n     #[inline]\n-    fn with_borrow(&self, f: &fn(&T)) {\n+    fn with_borrow<U>(&self, f: &fn(&T) -> U) -> U {\n         unsafe {\n             assert!((*self.ptr).borrow != Mutable);\n             let previous = (*self.ptr).borrow;\n             (*self.ptr).borrow = Immutable;\n-            f(&(*self.ptr).value);\n+            let res = f(&(*self.ptr).value);\n             (*self.ptr).borrow = previous;\n+            res\n         }\n     }\n \n     /// Fails if there is already a mutable or immutable borrow of the box\n     #[inline]\n-    fn with_mut_borrow(&self, f: &fn(&mut T)) {\n+    fn with_mut_borrow<U>(&self, f: &fn(&mut T) -> U) -> U {\n         unsafe {\n             assert!((*self.ptr).borrow == Nothing);\n             (*self.ptr).borrow = Mutable;\n-            f(&mut (*self.ptr).value);\n+            let res = f(&mut (*self.ptr).value);\n             (*self.ptr).borrow = Nothing;\n+            res\n         }\n     }\n }\n@@ -200,6 +240,7 @@ impl<T: Owned> Drop for RcMut<T> {\n }\n \n impl<T: Owned> Clone for RcMut<T> {\n+    /// Return a shallow copy of the reference counted pointer.\n     #[inline]\n     fn clone(&self) -> RcMut<T> {\n         unsafe {\n@@ -209,10 +250,45 @@ impl<T: Owned> Clone for RcMut<T> {\n     }\n }\n \n+impl<T: Owned + DeepClone> DeepClone for RcMut<T> {\n+    /// Return a deep copy of the reference counted pointer.\n+    #[inline]\n+    fn deep_clone(&self) -> RcMut<T> {\n+        do self.with_borrow |x| {\n+            // FIXME: #6497: should avoid freeze (slow)\n+            RcMut::new(x.deep_clone())\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod test_rc_mut {\n     use super::*;\n \n+    #[test]\n+    fn test_clone() {\n+        let x = RcMut::new(5);\n+        let y = x.clone();\n+        do x.with_mut_borrow |value| {\n+            *value = 20;\n+        }\n+        do y.with_borrow |value| {\n+            assert_eq!(*value, 20);\n+        }\n+    }\n+\n+    #[test]\n+    fn test_deep_clone() {\n+        let x = RcMut::new(5);\n+        let y = x.deep_clone();\n+        do x.with_mut_borrow |value| {\n+            *value = 20;\n+        }\n+        do y.with_borrow |value| {\n+            assert_eq!(*value, 5);\n+        }\n+    }\n+\n     #[test]\n     fn borrow_many() {\n         let x = RcMut::new(5);"}]}