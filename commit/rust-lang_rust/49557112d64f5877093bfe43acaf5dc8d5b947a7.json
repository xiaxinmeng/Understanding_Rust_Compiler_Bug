{"sha": "49557112d64f5877093bfe43acaf5dc8d5b947a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NTU3MTEyZDY0ZjU4NzcwOTNiZmU0M2FjYWY1ZGM4ZDViOTQ3YTc=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-10-20T12:07:31Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-10-20T12:07:31Z"}, "message": "Use TrustedLen for Vec's FromIterator and Extend", "tree": {"sha": "c224de6e42f94dc6e97530695a23f10a4af35242", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c224de6e42f94dc6e97530695a23f10a4af35242"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49557112d64f5877093bfe43acaf5dc8d5b947a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49557112d64f5877093bfe43acaf5dc8d5b947a7", "html_url": "https://github.com/rust-lang/rust/commit/49557112d64f5877093bfe43acaf5dc8d5b947a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49557112d64f5877093bfe43acaf5dc8d5b947a7/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ae9930e2fbdb2610843e6dc1ae0fb0759507218", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ae9930e2fbdb2610843e6dc1ae0fb0759507218", "html_url": "https://github.com/rust-lang/rust/commit/9ae9930e2fbdb2610843e6dc1ae0fb0759507218"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "23d6edd6d794e88c86cc7b2cfc2d0267365a2ee6", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49557112d64f5877093bfe43acaf5dc8d5b947a7/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49557112d64f5877093bfe43acaf5dc8d5b947a7/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=49557112d64f5877093bfe43acaf5dc8d5b947a7", "patch": "@@ -50,6 +50,7 @@\n #![feature(specialization)]\n #![feature(staged_api)]\n #![feature(step_by)]\n+#![feature(trusted_len)]\n #![feature(unicode)]\n #![feature(unique)]\n #![cfg_attr(test, feature(rand, test))]"}, {"sha": "cd628a39af8b83a63ebf3272234a56a0bd6ee876", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/49557112d64f5877093bfe43acaf5dc8d5b947a7/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49557112d64f5877093bfe43acaf5dc8d5b947a7/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=49557112d64f5877093bfe43acaf5dc8d5b947a7", "patch": "@@ -68,7 +68,7 @@ use core::cmp::Ordering;\n use core::fmt;\n use core::hash::{self, Hash};\n use core::intrinsics::{arith_offset, assume};\n-use core::iter::{FromIterator, FusedIterator};\n+use core::iter::{FromIterator, FusedIterator, TrustedLen};\n use core::mem;\n use core::ops::{Index, IndexMut};\n use core::ops;\n@@ -1589,23 +1589,49 @@ impl<T> SpecExtend<Vec<T>> for Vec<T> {\n     }\n }\n \n+trait IsTrustedLen : Iterator {\n+    fn trusted_len(&self) -> Option<usize> { None }\n+}\n+impl<I> IsTrustedLen for I where I: Iterator { }\n+\n+impl<I> IsTrustedLen for I where I: TrustedLen\n+{\n+    fn trusted_len(&self) -> Option<usize> {\n+        self.size_hint().1\n+    }\n+}\n+\n impl<T> Vec<T> {\n     fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {\n         // This function should be the moral equivalent of:\n         //\n         //      for item in iterator {\n         //          self.push(item);\n         //      }\n-        while let Some(element) = iterator.next() {\n-            let len = self.len();\n-            if len == self.capacity() {\n-                let (lower, _) = iterator.size_hint();\n-                self.reserve(lower.saturating_add(1));\n-            }\n+        if let Some(additional) = iterator.trusted_len() {\n+            self.reserve(additional);\n             unsafe {\n-                ptr::write(self.get_unchecked_mut(len), element);\n-                // NB can't overflow since we would have had to alloc the address space\n-                self.set_len(len + 1);\n+                let mut ptr = self.as_mut_ptr().offset(self.len() as isize);\n+                let mut local_len = SetLenOnDrop::new(&mut self.len);\n+                for element in iterator {\n+                    ptr::write(ptr, element);\n+                    ptr = ptr.offset(1);\n+                    // NB can't overflow since we would have had to alloc the address space\n+                    local_len.increment_len(1);\n+                }\n+            }\n+        } else {\n+            while let Some(element) = iterator.next() {\n+                let len = self.len();\n+                if len == self.capacity() {\n+                    let (lower, _) = iterator.size_hint();\n+                    self.reserve(lower.saturating_add(1));\n+                }\n+                unsafe {\n+                    ptr::write(self.get_unchecked_mut(len), element);\n+                    // NB can't overflow since we would have had to alloc the address space\n+                    self.set_len(len + 1);\n+                }\n             }\n         }\n     }"}]}