{"sha": "156458b3f6e170aaf57ca5ceab68ecb76dab7b6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NjQ1OGIzZjZlMTcwYWFmNTdjYTVjZWFiNjhlY2I3NmRhYjdiNmU=", "commit": {"author": {"name": "Jesse Ruderman", "email": "jruderman@gmail.com", "date": "2011-07-12T18:49:04Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-07-14T00:15:31Z"}, "message": "Fuzzer: test round trips through the pretty printer and parser", "tree": {"sha": "e372618d5a172240bbde4f7074e0ff9ea93cf96b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e372618d5a172240bbde4f7074e0ff9ea93cf96b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/156458b3f6e170aaf57ca5ceab68ecb76dab7b6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/156458b3f6e170aaf57ca5ceab68ecb76dab7b6e", "html_url": "https://github.com/rust-lang/rust/commit/156458b3f6e170aaf57ca5ceab68ecb76dab7b6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/156458b3f6e170aaf57ca5ceab68ecb76dab7b6e/comments", "author": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9036758191b0df7f80c1aaabaf149f67c35dd451", "url": "https://api.github.com/repos/rust-lang/rust/commits/9036758191b0df7f80c1aaabaf149f67c35dd451", "html_url": "https://github.com/rust-lang/rust/commit/9036758191b0df7f80c1aaabaf149f67c35dd451"}], "stats": {"total": 123, "additions": 86, "deletions": 37}, "files": [{"sha": "733308a7fc668d4a97e35b836c2467a1b2c518ff", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 86, "deletions": 37, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/156458b3f6e170aaf57ca5ceab68ecb76dab7b6e/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156458b3f6e170aaf57ca5ceab68ecb76dab7b6e/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=156458b3f6e170aaf57ca5ceab68ecb76dab7b6e", "patch": "@@ -12,20 +12,22 @@ import std::vec;\n import std::ivec;\n import std::str;\n import std::uint;\n+import std::option;\n \n import rustc::syntax::ast;\n import rustc::syntax::fold;\n import rustc::syntax::walk;\n import rustc::syntax::codemap;\n+import rustc::syntax::parse::parser;\n import rustc::syntax::print::pprust;\n \n+/*\n+// Imports for \"the rest of driver::compile_input\"\n import driver = rustc::driver::rustc; // see https://github.com/graydon/rust/issues/624\n import rustc::back::link;\n import rustc::driver::rustc::time;\n import rustc::driver::session;\n \n-/*\n-// Imports for \"the rest of driver::compile_input\"\n import rustc::metadata::creader;\n import rustc::metadata::cstore;\n import rustc::syntax::parse::parser;\n@@ -43,21 +45,21 @@ import rustc::util::ppaux;\n import rustc::lib::llvm;\n */\n \n+fn read_whole_file(&str filename) -> str {\n+    str::unsafe_from_bytes(io::file_reader(filename).read_whole_stream())\n+}\n+\n fn file_contains(&str filename, &str needle) -> bool {\n-    auto r = io::file_reader(filename);\n-    auto contents = str::unsafe_from_bytes(r.read_whole_stream());\n+    auto contents = read_whole_file(filename);\n     ret str::find(contents, needle) != -1;\n }\n \n+fn contains(&str haystack, &str needle) -> bool { str::find(haystack, needle) != -1 }\n+\n fn find_rust_files(&mutable str[] files, str path) {\n     if (str::ends_with(path, \".rs\")) {\n         if (file_contains(path, \"xfail-stage1\")) {\n             //log_err \"Skipping \" + path + \" because it is marked as xfail-stage1\";\n-        } else if (\n-            !str::ends_with(path, \"constrained-type.rs\") &&     // https://github.com/graydon/rust/issues/653\n-             str::find(path, \"utf8\") != -1 &&  // https://github.com/graydon/rust/issues/654\n-             true) {\n-            //log_err \"Skipping \" + path + \" because of a known bug\";\n         } else {\n             files += ~[path];\n         }\n@@ -68,10 +70,43 @@ fn find_rust_files(&mutable str[] files, str path) {\n     }\n }\n \n+fn safe_to_steal(ast::expr_ e) -> bool {\n+    alt (e) {\n+        // pretty-printer precedence issues -- https://github.com/graydon/rust/issues/670\n+        case (ast::expr_unary(_, _)) { false }\n+        case (ast::expr_lit(?lit)) {\n+            alt(lit.node) {\n+                case(ast::lit_str(_, _)) { true }\n+                case(ast::lit_char(_)) { true }\n+                case(ast::lit_int(_)) { false }\n+                case(ast::lit_uint(_)) { false }\n+                case(ast::lit_mach_int(_, _)) { false }\n+                case(ast::lit_float(_)) { false }\n+                case(ast::lit_mach_float(_, _)) { false }\n+                case(ast::lit_nil) { true }\n+                case(ast::lit_bool(_)) { true }\n+            }\n+        }\n+        case (ast::expr_cast(_, _)) { false }\n+        case (ast::expr_send(_, _)) { false }\n+        case (ast::expr_recv(_, _)) { false }\n+        case (ast::expr_assert(_)) { false }\n+        case (ast::expr_binary(_, _, _)) { false }\n+        case (ast::expr_assign(_, _)) { false }\n+        case (ast::expr_assign_op(_, _, _)) { false }\n+\n+        // \"if (ret) { }\" doesn't make sense, at least from a typecheck point of view, but for some reason it's rejected by the *parser*\n+        case (ast::expr_ret(option::none)) { false }\n+        case (ast::expr_put(option::none)) { false }\n+\n+        case (_) { true }\n+    }\n+}\n+\n fn steal_exprs(&ast::crate crate) -> ast::expr[] {\n     let @mutable ast::expr[] exprs = @mutable ~[];\n-    // \"Stash\" cannot be type-parameterized because of https://github.com/graydon/rust/issues/375\n-    fn stash_expr(@mutable ast::expr[] es, &@ast::expr e) { *es += ~[*e]; }\n+    // \"Stash\" is not type-parameterized because of the need for safe_to_steal\n+    fn stash_expr(@mutable ast::expr[] es, &@ast::expr e) { if (safe_to_steal(e.node)) { *es += ~[*e]; } else { /* now my indices are wrong :( */ } }\n     auto v = rec(visit_expr_pre = bind stash_expr(exprs, _) with walk::default_visitor());\n     walk::walk_crate(v, crate);\n     *exprs\n@@ -108,7 +143,9 @@ iter under(uint n) -> uint { let uint i = 0u; while (i < n) { put i; i += 1u; }\n \n fn devnull() -> io::writer { std::io::string_writer().get_writer() }\n \n-fn pp_variants(&ast::crate crate, &session::session sess, &str filename) {\n+fn as_str(fn (io::writer) f) -> str { auto w = std::io::string_writer(); f(w.get_writer()); w.get_str() }\n+\n+fn pp_variants(&ast::crate crate, &codemap::codemap cmap, &str filename) {\n     auto exprs = steal_exprs(crate);\n     auto exprsL = ivec::len(exprs);\n     if (exprsL < 100u) {\n@@ -117,44 +154,56 @@ fn pp_variants(&ast::crate crate, &session::session sess, &str filename) {\n             for each (uint j in under(uint::min(exprsL, 5u))) {\n                 log_err \"With... \" + pprust::expr_to_str(@exprs.(j));\n                 auto crate2 = @replace_expr_in_crate(crate, i, exprs.(j).node);\n-                pprust::print_crate(sess.get_codemap(), crate2, filename, devnull(), pprust::no_ann());\n+                check_roundtrip(crate2, cmap, filename + \".4.rs\");\n             }\n         }\n     }\n }\n \n+fn check_roundtrip(@ast::crate crate2, &codemap::codemap cmap, &str fakefilename) {\n+    auto str3 = as_str(bind pprust::print_crate(cmap, crate2, \"empty.rs\", _, pprust::no_ann()));\n+    auto cm4 = codemap::new_codemap();\n+    if (true\n+      && !contains(str3, \"][]\") // https://github.com/graydon/rust/issues/669\n+      && !contains(str3, \"][mutable]\") // https://github.com/graydon/rust/issues/669\n+      && !contains(str3, \"][mutable ]\") // https://github.com/graydon/rust/issues/669\n+      && !contains(str3, \"self\") // crazy rules enforced by parser rather than typechecker?\n+      && !contains(str3, \"spawn\") // more precedence issues\n+      && !contains(str3, \"bind\") // more precedence issues?\n+       ) {\n+        auto crate4 = parser::parse_crate_from_source_str(fakefilename, str3, ~[], cm4);\n+        // should compare crates at this point, but it's easier to compare strings\n+        auto str5 = as_str(bind pprust::print_crate(cmap, crate4, \"empty.rs\", _, pprust::no_ann()));\n+        if (!str::is_ascii(str3)) {\n+          log_err \"Non-ASCII in \" + fakefilename; // why does non-ASCII work correctly with \"rustc --pretty normal\" but not here???\n+        } else if (str3 != str5) {\n+          log_err \"Mismatch: \" + fakefilename;\n+          log_err \"str3:\\n\" + str3;\n+          log_err \"str5:\\n\" + str5;\n+          fail \"Mismatch\";\n+        }\n+   }\n+}\n+\n fn main(vec[str] args) {\n     auto files = ~[];\n     auto root = \"/Users/jruderman/code/rust/src/\"; // XXX\n     find_rust_files(files, root); // not using time here because that currently screws with passing-a-mutable-array\n     log_err uint::str(ivec::len(files)) + \" files\";\n \n-    auto binary = vec::shift[str](args);\n-    auto binary_dir = fs::dirname(binary);\n-\n-    let @session::options sopts =\n-        @rec(library=false,\n-             static=false,\n-             optimize=0u,\n-             debuginfo=false,\n-             verify=true,\n-             run_typestate=true,\n-             save_temps=false,\n-             stats=false,\n-             time_passes=false,\n-             time_llvm_passes=false,\n-             output_type=link::output_type_bitcode,\n-             library_search_paths=[binary_dir + \"/lib\"],\n-             sysroot=driver::get_default_sysroot(binary),\n-             cfg=~[],\n-             test=false);\n-\n     for (str file in files) {\n         log_err \"=== \" + file + \" ===\";\n-        let session::session sess = driver::build_session(sopts);\n-        let @ast::crate crate = time(true, \"parsing \" + file, bind driver::parse_input(sess, ~[], file));\n-        pprust::print_crate(sess.get_codemap(), crate, file, devnull(), pprust::no_ann());\n-        pp_variants(*crate, sess, file);\n+        auto cm = codemap::new_codemap();\n+        auto src = read_whole_file(file);\n+        auto crate = parser::parse_crate_from_source_str(file, src, ~[], cm);\n+        if (!contains(src, \"#macro\") // https://github.com/graydon/rust/issues/671\n+         && !str::ends_with(file, \"block-expr-precedence.rs\") // https://github.com/graydon/rust/issues/674\n+         && !str::ends_with(file, \"syntax-extension-fmt.rs\") // an issue where -2147483648 gains an extra negative sign each time through, which i can't reproduce using \"rustc --pretty normal\"???\n+) {\n+            check_roundtrip(crate, cm, file + \".pp.rs\");\n+        }\n+        //pprust::print_crate(cm, crate, file, devnull(), pprust::no_ann());\n+        //pp_variants(*crate, cm, file);\n     }\n }\n "}]}