{"sha": "502c519e7d15ca6d015b4ca48951e43e893c8cba", "node_id": "C_kwDOAAsO6NoAKDUwMmM1MTllN2QxNWNhNmQwMTViNGNhNDg5NTFlNDNlODkzYzhjYmE", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-05-03T17:56:10Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-05-05T14:28:14Z"}, "message": "Wrap float literals in their own node", "tree": {"sha": "b0cf2846d7978a2141d81edac007554490f1a737", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0cf2846d7978a2141d81edac007554490f1a737"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/502c519e7d15ca6d015b4ca48951e43e893c8cba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/502c519e7d15ca6d015b4ca48951e43e893c8cba", "html_url": "https://github.com/rust-lang/rust/commit/502c519e7d15ca6d015b4ca48951e43e893c8cba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/502c519e7d15ca6d015b4ca48951e43e893c8cba/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d5d16f18c6dde52a53071c604b8cc30739df7be", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d5d16f18c6dde52a53071c604b8cc30739df7be", "html_url": "https://github.com/rust-lang/rust/commit/2d5d16f18c6dde52a53071c604b8cc30739df7be"}], "stats": {"total": 162, "additions": 113, "deletions": 49}, "files": [{"sha": "84662aa27782d166eaf645dabad1b7d42872ee62", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=502c519e7d15ca6d015b4ca48951e43e893c8cba", "patch": "@@ -972,7 +972,7 @@ impl From<ast::LiteralKind> for Literal {\n                 }\n             }\n             LiteralKind::FloatNumber(lit) => {\n-                let ty = lit.suffix().and_then(BuiltinFloat::from_suffix);\n+                let ty = lit.suffix().and_then(|s| BuiltinFloat::from_suffix(&s));\n                 Literal::Float(Default::default(), ty)\n             }\n             LiteralKind::ByteString(bs) => {"}, {"sha": "45eb660a6c96550292f3476f5751a9d7ebef2525", "filename": "crates/hir-expand/src/builtin_fn_macro.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs?ref=502c519e7d15ca6d015b4ca48951e43e893c8cba", "patch": "@@ -4,10 +4,7 @@ use base_db::{AnchoredPath, Edition, FileId};\n use cfg::CfgExpr;\n use either::Either;\n use mbe::{parse_exprs_with_sep, parse_to_token_tree};\n-use syntax::{\n-    ast::{self, AstToken},\n-    SmolStr,\n-};\n+use syntax::{ast, SmolStr};\n \n use crate::{db::AstDatabase, name, quote, ExpandError, ExpandResult, MacroCallId, MacroCallLoc};\n \n@@ -358,14 +355,7 @@ fn unreachable_expand(\n }\n \n fn unquote_str(lit: &tt::Literal) -> Option<String> {\n-    let lit = ast::make::tokens::literal(&lit.to_string());\n-    let token = ast::String::cast(lit)?;\n-    token.value().map(|it| it.into_owned())\n-}\n-\n-fn unquote_byte_string(lit: &tt::Literal) -> Option<Vec<u8>> {\n-    let lit = ast::make::tokens::literal(&lit.to_string());\n-    let token = ast::ByteString::cast(lit)?;\n+    let token = ast::make::literal(&lit.to_string()).as_string()?;\n     token.value().map(|it| it.into_owned())\n }\n \n@@ -442,12 +432,16 @@ fn concat_bytes_expand(\n     for (i, t) in tt.token_trees.iter().enumerate() {\n         match t {\n             tt::TokenTree::Leaf(tt::Leaf::Literal(lit)) => {\n-                let token = ast::make::tokens::literal(&lit.to_string());\n-                match token.kind() {\n-                    syntax::SyntaxKind::BYTE => bytes.push(token.text().to_string()),\n-                    syntax::SyntaxKind::BYTE_STRING => {\n-                        let components = unquote_byte_string(lit).unwrap_or_else(Vec::new);\n-                        components.into_iter().for_each(|x| bytes.push(x.to_string()));\n+                let lit = ast::make::literal(&lit.to_string());\n+                match lit.kind() {\n+                    ast::LiteralKind::ByteString(s) => {\n+                        s.value()\n+                            .unwrap_or_default()\n+                            .into_iter()\n+                            .for_each(|x| bytes.push(x.to_string()));\n+                    }\n+                    ast::LiteralKind::Byte => {\n+                        bytes.push(lit.to_string());\n                     }\n                     _ => {\n                         err.get_or_insert(mbe::ExpandError::UnexpectedToken.into());\n@@ -481,10 +475,10 @@ fn concat_bytes_expand_subtree(\n     for (ti, tt) in tree.token_trees.iter().enumerate() {\n         match tt {\n             tt::TokenTree::Leaf(tt::Leaf::Literal(lit)) => {\n-                let lit = ast::make::tokens::literal(&lit.to_string());\n+                let lit = ast::make::literal(&lit.to_string());\n                 match lit.kind() {\n-                    syntax::SyntaxKind::BYTE | syntax::SyntaxKind::INT_NUMBER => {\n-                        bytes.push(lit.text().to_string())\n+                    ast::LiteralKind::IntNumber(_) | ast::LiteralKind::Byte => {\n+                        bytes.push(lit.to_string());\n                     }\n                     _ => {\n                         return Err(mbe::ExpandError::UnexpectedToken.into());"}, {"sha": "37f8a7e3b713767ab1a9e5dc9d6fa180c2d19c2b", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=502c519e7d15ca6d015b4ca48951e43e893c8cba", "patch": "@@ -29,7 +29,13 @@ pub(crate) fn literal(p: &mut Parser) -> Option<CompletedMarker> {\n         return None;\n     }\n     let m = p.start();\n-    p.bump_any();\n+    if p.at(FLOAT_NUMBER) {\n+        let f = p.start();\n+        p.bump(FLOAT_NUMBER);\n+        f.complete(p, FLOAT_LITERAL);\n+    } else {\n+        p.bump_any();\n+    }\n     Some(m.complete(p, LITERAL))\n }\n "}, {"sha": "47bf4ba92bff0559210dad2d107f7a133186aed7", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=502c519e7d15ca6d015b4ca48951e43e893c8cba", "patch": "@@ -227,6 +227,7 @@ pub enum SyntaxKind {\n     PATH,\n     PATH_SEGMENT,\n     LITERAL,\n+    FLOAT_LITERAL,\n     RENAME,\n     VISIBILITY,\n     WHERE_CLAUSE,\n@@ -386,5 +387,5 @@ impl SyntaxKind {\n     }\n }\n #[macro_export]\n-macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [Self] => { $ crate :: SyntaxKind :: SELF_TYPE_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [yield] => { $ crate :: SyntaxKind :: YIELD_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ crate :: SyntaxKind :: MACRO_RULES_KW } ; [lifetime_ident] => { $ crate :: SyntaxKind :: LIFETIME_IDENT } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; }\n+macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [Self] => { $ crate :: SyntaxKind :: SELF_TYPE_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [yield] => { $ crate :: SyntaxKind :: YIELD_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ crate :: SyntaxKind :: MACRO_RULES_KW } ; [lifetime_ident] => { $ crate :: SyntaxKind :: LIFETIME_IDENT } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; [float_number] => { $ crate :: SyntaxKind :: FLOAT_NUMBER } ; }\n pub use T;"}, {"sha": "065af27f10574e4e72c0b4469b8c06476b442bd7", "filename": "crates/parser/test_data/parser/inline/ok/0085_expr_literals.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast", "raw_url": "https://github.com/rust-lang/rust/raw/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast?ref=502c519e7d15ca6d015b4ca48951e43e893c8cba", "patch": "@@ -57,7 +57,8 @@ SOURCE_FILE\n           EQ \"=\"\n           WHITESPACE \" \"\n           LITERAL\n-            FLOAT_NUMBER \"2.0\"\n+            FLOAT_LITERAL\n+              FLOAT_NUMBER \"2.0\"\n           SEMICOLON \";\"\n         WHITESPACE \"\\n    \"\n         LET_STMT"}, {"sha": "903a1507d0c682482f5960216530b0046c8dcae1", "filename": "crates/parser/test_data/parser/ok/0056_neq_in_type.rast", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0056_neq_in_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0056_neq_in_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0056_neq_in_type.rast?ref=502c519e7d15ca6d015b4ca48951e43e893c8cba", "patch": "@@ -19,7 +19,8 @@ SOURCE_FILE\n             CAST_EXPR\n               METHOD_CALL_EXPR\n                 LITERAL\n-                  FLOAT_NUMBER \"1.0f32\"\n+                  FLOAT_LITERAL\n+                    FLOAT_NUMBER \"1.0f32\"\n                 DOT \".\"\n                 NAME_REF\n                   IDENT \"floor\"\n@@ -40,7 +41,8 @@ SOURCE_FILE\n             CAST_EXPR\n               METHOD_CALL_EXPR\n                 LITERAL\n-                  FLOAT_NUMBER \"1.0f32\"\n+                  FLOAT_LITERAL\n+                    FLOAT_NUMBER \"1.0f32\"\n                 DOT \".\"\n                 NAME_REF\n                   IDENT \"floor\""}, {"sha": "4b3e483bff4c3f6ec66ad337553a8770f497335c", "filename": "crates/syntax/rust.ungram", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fsyntax%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fsyntax%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Frust.ungram?ref=502c519e7d15ca6d015b4ca48951e43e893c8cba", "patch": "@@ -365,13 +365,16 @@ MacroExpr =\n \n Literal =\n   Attr* value:(\n-    'int_number' | 'float_number'\n+    'int_number' | FloatLiteral\n   | 'string' | 'raw_string'\n   | 'byte_string' | 'raw_byte_string'\n   | 'true' | 'false'\n   | 'char' | 'byte'\n   )\n \n+FloatLiteral =\n+  'float_number'\n+\n PathExpr =\n   Attr* Path\n "}, {"sha": "f4bff80c4cadf9b0d6dead5ff8b53791902a7fdf", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=502c519e7d15ca6d015b4ca48951e43e893c8cba", "patch": "@@ -282,7 +282,7 @@ pub enum LiteralKind {\n     String(ast::String),\n     ByteString(ast::ByteString),\n     IntNumber(ast::IntNumber),\n-    FloatNumber(ast::FloatNumber),\n+    FloatNumber(ast::FloatLiteral),\n     Char(ast::Char),\n     Byte(ast::Byte),\n     Bool(bool),\n@@ -297,16 +297,17 @@ impl ast::Literal {\n     }\n     pub fn kind(&self) -> LiteralKind {\n         let token = match self.value() {\n-            rowan::NodeOrToken::Node(_node) => unreachable!(),\n+            rowan::NodeOrToken::Node(node) => {\n+                return LiteralKind::FloatNumber(\n+                    ast::FloatLiteral::cast(node).expect(\"unreachable\"),\n+                );\n+            }\n             rowan::NodeOrToken::Token(token) => token,\n         };\n \n         if let Some(t) = ast::IntNumber::cast(token.clone()) {\n             return LiteralKind::IntNumber(t);\n         }\n-        if let Some(t) = ast::FloatNumber::cast(token.clone()) {\n-            return LiteralKind::FloatNumber(t);\n-        }\n         if let Some(t) = ast::String::cast(token.clone()) {\n             return LiteralKind::String(t);\n         }\n@@ -326,6 +327,26 @@ impl ast::Literal {\n             _ => unreachable!(),\n         }\n     }\n+\n+    pub fn as_string(&self) -> Option<ast::String> {\n+        match self.kind() {\n+            LiteralKind::String(it) => Some(it),\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn as_byte_string(&self) -> Option<ast::ByteString> {\n+        match self.kind() {\n+            LiteralKind::ByteString(it) => Some(it),\n+            _ => None,\n+        }\n+    }\n+}\n+\n+impl ast::FloatLiteral {\n+    pub fn suffix(&self) -> Option<String> {\n+        ast::FloatNumber::cast(self.syntax().last_token()?)?.suffix().map(|s| s.to_string())\n+    }\n }\n \n pub enum BlockModifier {"}, {"sha": "b294849937943563b5b3d70728a6ebddea1ac6fd", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=502c519e7d15ca6d015b4ca48951e43e893c8cba", "patch": "@@ -1085,6 +1085,16 @@ impl UnderscoreExpr {\n     pub fn underscore_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![_]) }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct FloatLiteral {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl FloatLiteral {\n+    pub fn float_number_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![float_number])\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct StmtList {\n     pub(crate) syntax: SyntaxNode,\n@@ -2719,6 +2729,17 @@ impl AstNode for UnderscoreExpr {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for FloatLiteral {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == FLOAT_LITERAL }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for StmtList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == STMT_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -4608,6 +4629,11 @@ impl std::fmt::Display for UnderscoreExpr {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for FloatLiteral {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for StmtList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "846f4f3c71a04467aafcc42c3cc6bdc359dd6bb7", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=502c519e7d15ca6d015b4ca48951e43e893c8cba", "patch": "@@ -799,6 +799,11 @@ pub fn struct_(\n     ))\n }\n \n+pub fn literal(text: &str) -> ast::Literal {\n+    assert_eq!(text.trim(), text);\n+    ast_from_text(&format!(\"fn f() {{ let _ = {}; }}\", text))\n+}\n+\n #[track_caller]\n fn ast_from_text<N: AstNode>(text: &str) -> N {\n     let parse = SourceFile::parse(text);\n@@ -827,7 +832,7 @@ pub fn token(kind: SyntaxKind) -> SyntaxToken {\n pub mod tokens {\n     use once_cell::sync::Lazy;\n \n-    use crate::{ast, AstNode, Parse, SourceFile, SyntaxKind::*, SyntaxToken};\n+    use crate::{AstNode, Parse, SourceFile, SyntaxKind::*, SyntaxToken};\n \n     pub(super) static SOURCE_FILE: Lazy<Parse<SourceFile>> = Lazy::new(|| {\n         SourceFile::parse(\n@@ -858,12 +863,6 @@ pub mod tokens {\n         sf.syntax().first_child_or_token().unwrap().into_token().unwrap()\n     }\n \n-    pub fn literal(text: &str) -> SyntaxToken {\n-        assert_eq!(text.trim(), text);\n-        let lit: ast::Literal = super::ast_from_text(&format!(\"fn f() {{ let _ = {}; }}\", text));\n-        lit.syntax().first_child_or_token().unwrap().into_token().unwrap()\n-    }\n-\n     pub fn single_newline() -> SyntaxToken {\n         let res = SOURCE_FILE\n             .tree()"}, {"sha": "3063396b4450e0159d7fee9a6e811796af8bae28", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=502c519e7d15ca6d015b4ca48951e43e893c8cba", "patch": "@@ -355,14 +355,24 @@ impl Radix {\n \n #[cfg(test)]\n mod tests {\n-    use crate::ast::{self, make, FloatNumber, IntNumber};\n+    use crate::ast::{self, make};\n \n     fn check_float_suffix<'a>(lit: &str, expected: impl Into<Option<&'a str>>) {\n-        assert_eq!(FloatNumber { syntax: make::tokens::literal(lit) }.suffix(), expected.into());\n+        let suffix = match make::literal(lit).kind() {\n+            ast::LiteralKind::FloatNumber(f) => f.suffix(),\n+            // `1f32` lexes as an INT_NUMBER\n+            ast::LiteralKind::IntNumber(i) => i.suffix().map(|s| s.to_string()),\n+            e => unreachable!(\"{e:?}\"),\n+        };\n+        assert_eq!(suffix.as_deref(), expected.into());\n     }\n \n     fn check_int_suffix<'a>(lit: &str, expected: impl Into<Option<&'a str>>) {\n-        assert_eq!(IntNumber { syntax: make::tokens::literal(lit) }.suffix(), expected.into());\n+        let i = match make::literal(lit).kind() {\n+            ast::LiteralKind::IntNumber(i) => i,\n+            _ => unreachable!(),\n+        };\n+        assert_eq!(i.suffix(), expected.into());\n     }\n \n     #[test]\n@@ -390,12 +400,11 @@ mod tests {\n     }\n \n     fn check_string_value<'a>(lit: &str, expected: impl Into<Option<&'a str>>) {\n-        assert_eq!(\n-            ast::String { syntax: make::tokens::literal(&format!(\"\\\"{}\\\"\", lit)) }\n-                .value()\n-                .as_deref(),\n-            expected.into()\n-        );\n+        let s = match make::literal(&format!(\"\\\"{}\\\"\", lit)).kind() {\n+            ast::LiteralKind::String(s) => s,\n+            _ => unreachable!(),\n+        };\n+        assert_eq!(s.value().as_deref(), expected.into());\n     }\n \n     #[test]"}, {"sha": "964bd6c8b3121c99ca41e98cc33bc9ae529bb116", "filename": "crates/syntax/src/tests/ast_src.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs?ref=502c519e7d15ca6d015b4ca48951e43e893c8cba", "patch": "@@ -183,6 +183,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"PATH\",\n         \"PATH_SEGMENT\",\n         \"LITERAL\",\n+        \"FLOAT_LITERAL\",\n         \"RENAME\",\n         \"VISIBILITY\",\n         \"WHERE_CLAUSE\","}, {"sha": "e18f575e375a0a1f301968838bcd48db06f81f7d", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502c519e7d15ca6d015b4ca48951e43e893c8cba/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=502c519e7d15ca6d015b4ca48951e43e893c8cba", "patch": "@@ -462,6 +462,7 @@ fn generate_syntax_kinds(grammar: KindsSrc<'_>) -> String {\n             [lifetime_ident] => { $crate::SyntaxKind::LIFETIME_IDENT };\n             [ident] => { $crate::SyntaxKind::IDENT };\n             [shebang] => { $crate::SyntaxKind::SHEBANG };\n+            [float_number] => { $crate::SyntaxKind::FLOAT_NUMBER };\n         }\n         pub use T;\n     };"}]}