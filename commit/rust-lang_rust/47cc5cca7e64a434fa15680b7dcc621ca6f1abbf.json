{"sha": "47cc5cca7e64a434fa15680b7dcc621ca6f1abbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3Y2M1Y2NhN2U2NGE0MzRmYTE1NjgwYjdkY2M2MjFjYTZmMWFiYmY=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-14T21:22:36Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-14T21:22:36Z"}, "message": "Update to use the new error type and correctly compile the doc tests", "tree": {"sha": "3d7030fc9720ec6496089ed6d6e1c3794d70c08b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d7030fc9720ec6496089ed6d6e1c3794d70c08b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47cc5cca7e64a434fa15680b7dcc621ca6f1abbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47cc5cca7e64a434fa15680b7dcc621ca6f1abbf", "html_url": "https://github.com/rust-lang/rust/commit/47cc5cca7e64a434fa15680b7dcc621ca6f1abbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47cc5cca7e64a434fa15680b7dcc621ca6f1abbf/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "685f06612dc8842b734181e380eae0f9b1a9483f", "url": "https://api.github.com/repos/rust-lang/rust/commits/685f06612dc8842b734181e380eae0f9b1a9483f", "html_url": "https://github.com/rust-lang/rust/commit/685f06612dc8842b734181e380eae0f9b1a9483f"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "3537a9f8656a2b039957cd0fef1d85078196f7d3", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/47cc5cca7e64a434fa15680b7dcc621ca6f1abbf/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47cc5cca7e64a434fa15680b7dcc621ca6f1abbf/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=47cc5cca7e64a434fa15680b7dcc621ca6f1abbf", "patch": "@@ -234,18 +234,14 @@ pub struct NulError(usize, Vec<u8>);\n \n /// An error indicating that a nul byte was not in the expected position.\n ///\n-/// The slice used to create a [`CStr`] or the vector used to create a\n-/// [`CString`] must have one and only one nul byte, positioned at the end.\n+/// The slice used to create a [`CStr`] must have one and only one nul byte,\n+/// positioned at the end.\n ///\n-/// This error is created by the\n-/// [`from_bytes_with_nul`][`CStr::from_bytes_with_nul`] method on\n-/// [`CStr`] or the [`from_vec_with_nul`][`CString::from_vec_with_nul`] method\n-/// on [`CString`]. See their documentation for more.\n+/// This error is created by the [`from_bytes_with_nul`] method on [`CStr`].\n+/// See its documentation for more.\n ///\n /// [`CStr`]: struct.CStr.html\n-/// [`CStr::from_bytes_with_nul`]: struct.CStr.html#method.from_bytes_with_nul\n-/// [`CString`]: struct.CString.html\n-/// [`CString::from_vec_with_nul`]: struct.CString.html#method.from_vec_with_nul\n+/// [`from_bytes_with_nul`]: struct.CStr.html#method.from_bytes_with_nul\n ///\n /// # Examples\n ///\n@@ -726,6 +722,7 @@ impl CString {\n     /// # Example\n     ///\n     /// ```\n+    /// #![feature(cstring_from_vec_with_nul)]\n     /// use std::ffi::CString;\n     /// assert_eq!(\n     ///     unsafe { CString::from_vec_with_nul_unchecked(b\"abc\\0\".to_vec()) },\n@@ -753,36 +750,44 @@ impl CString {\n     /// called without the ending nul byte.\n     ///\n     /// ```\n+    /// #![feature(cstring_from_vec_with_nul)]\n     /// use std::ffi::CString;\n     /// assert_eq!(\n     ///     CString::from_vec_with_nul(b\"abc\\0\".to_vec())\n     ///         .expect(\"CString::from_vec_with_nul failed\"),\n-    ///     CString::new(b\"abc\".to_vec())\n+    ///     CString::new(b\"abc\".to_vec()).expect(\"CString::new failed\")\n     /// );\n     /// ```\n     ///\n     /// A incorrectly formatted vector will produce an error.\n     ///\n     /// ```\n-    /// use std::ffi::{CString, FromBytesWithNulError};\n+    /// #![feature(cstring_from_vec_with_nul)]\n+    /// use std::ffi::{CString, FromVecWithNulError};\n     /// // Interior nul byte\n-    /// let _: FromBytesWithNulError = CString::from_vec_with_nul(b\"a\\0bc\".to_vec()).unwrap_err();\n+    /// let _: FromVecWithNulError = CString::from_vec_with_nul(b\"a\\0bc\".to_vec()).unwrap_err();\n     /// // No nul byte\n-    /// let _: FromBytesWithNulError = CString::from_vec_with_nul(b\"abc\".to_vec()).unwrap_err();\n+    /// let _: FromVecWithNulError = CString::from_vec_with_nul(b\"abc\".to_vec()).unwrap_err();\n     /// ```\n     ///\n     /// [`new`]: #method.new\n     #[unstable(feature = \"cstring_from_vec_with_nul\", issue = \"73179\")]\n-    pub fn from_vec_with_nul(v: Vec<u8>) -> Result<Self, FromBytesWithNulError> {\n+    pub fn from_vec_with_nul(v: Vec<u8>) -> Result<Self, FromVecWithNulError> {\n         let nul_pos = memchr::memchr(0, &v);\n         match nul_pos {\n             Some(nul_pos) if nul_pos + 1 == v.len() => {\n                 // SAFETY: We know there is only one nul byte, at the end\n                 // of the vec.\n                 Ok(unsafe { Self::from_vec_with_nul_unchecked(v) })\n             }\n-            Some(nul_pos) => Err(FromBytesWithNulError::interior_nul(nul_pos)),\n-            None => Err(FromBytesWithNulError::not_nul_terminated()),\n+            Some(nul_pos) => Err(FromVecWithNulError {\n+                error_kind: FromBytesWithNulErrorKind::InteriorNul(nul_pos),\n+                bytes: v,\n+            }),\n+            None => Err(FromVecWithNulError {\n+                error_kind: FromBytesWithNulErrorKind::NotNulTerminated,\n+                bytes: v,\n+            }),\n         }\n     }\n }"}]}