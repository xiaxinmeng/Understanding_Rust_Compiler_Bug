{"sha": "ba052bd8de1459acb6809215b0bedf4ea476ef9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMDUyYmQ4ZGUxNDU5YWNiNjgwOTIxNWIwYmVkZjRlYTQ3NmVmOWE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-07-17T18:13:50Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-07-19T15:43:35Z"}, "message": "Various diagnostics clean ups/tweaks\n\n* Always point at macros, including derive macros\n* Point at non-local items that introduce a trait requirement\n* On private associated item, point at definition", "tree": {"sha": "f6ed28030012d73e09f041b7f94d78fced448771", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6ed28030012d73e09f041b7f94d78fced448771"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba052bd8de1459acb6809215b0bedf4ea476ef9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba052bd8de1459acb6809215b0bedf4ea476ef9a", "html_url": "https://github.com/rust-lang/rust/commit/ba052bd8de1459acb6809215b0bedf4ea476ef9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba052bd8de1459acb6809215b0bedf4ea476ef9a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c78ebb7bdcfc924a20fd069891ffe1364d6814e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c78ebb7bdcfc924a20fd069891ffe1364d6814e7", "html_url": "https://github.com/rust-lang/rust/commit/c78ebb7bdcfc924a20fd069891ffe1364d6814e7"}], "stats": {"total": 1872, "additions": 1474, "deletions": 398}, "files": [{"sha": "e0389f448ebf29abf7a48d5bc6bedbfba329fdb7", "filename": "compiler/rustc_builtin_macros/src/derive.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -84,8 +84,10 @@ fn report_bad_target(sess: &Session, item: &Annotatable, span: Span) -> bool {\n             sess,\n             span,\n             E0774,\n-            \"`derive` may only be applied to structs, enums and unions\",\n+            \"`derive` may only be applied to `struct`s, `enum`s and `union`s\",\n         )\n+        .span_label(span, \"not applicable here\")\n+        .span_label(item.span(), \"not a `struct`, `enum` or `union`\")\n         .emit();\n     }\n     bad_target\n@@ -99,6 +101,7 @@ fn report_unexpected_literal(sess: &Session, lit: &ast::Lit) {\n         _ => \"for example, write `#[derive(Debug)]` for `Debug`\".to_string(),\n     };\n     struct_span_err!(sess, lit.span, E0777, \"expected path to a trait, found literal\",)\n+        .span_label(lit.span, \"not a trait\")\n         .help(&help_msg)\n         .emit();\n }"}, {"sha": "4ff9a301717159f67c28f3d16d7e980e153c46dc", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -148,11 +148,7 @@ fn cs_clone_shallow(\n             }\n             _ => cx.span_bug(\n                 trait_span,\n-                &format!(\n-                    \"unexpected substructure in \\\n-                                                    shallow `derive({})`\",\n-                    name\n-                ),\n+                &format!(\"unexpected substructure in shallow `derive({})`\", name),\n             ),\n         }\n     }"}, {"sha": "87272b1605b798ce9bf5678e2b20a815e23ab2ae", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -365,10 +365,7 @@ pub trait Emitter {\n                     continue;\n                 }\n \n-                if matches!(trace.kind, ExpnKind::Inlined) {\n-                    new_labels\n-                        .push((trace.call_site, \"in the inlined copy of this code\".to_string()));\n-                } else if always_backtrace {\n+                if always_backtrace && !matches!(trace.kind, ExpnKind::Inlined) {\n                     new_labels.push((\n                         trace.def_site,\n                         format!(\n@@ -398,13 +395,27 @@ pub trait Emitter {\n                 // and it needs an \"in this macro invocation\" label to match that.\n                 let redundant_span = trace.call_site.contains(sp);\n \n-                if !redundant_span && matches!(trace.kind, ExpnKind::Macro(MacroKind::Bang, _))\n-                    || always_backtrace\n-                {\n+                if !redundant_span || always_backtrace {\n+                    let msg: Cow<'static, _> = match trace.kind {\n+                        ExpnKind::Macro(MacroKind::Attr, _) => {\n+                            \"this procedural macro expansion\".into()\n+                        }\n+                        ExpnKind::Macro(MacroKind::Derive, _) => {\n+                            \"this derive macro expansion\".into()\n+                        }\n+                        ExpnKind::Macro(MacroKind::Bang, _) => \"this macro invocation\".into(),\n+                        ExpnKind::Inlined => \"the inlined copy of this code\".into(),\n+                        ExpnKind::Root => \"in the crate root\".into(),\n+                        ExpnKind::AstPass(kind) => kind.descr().into(),\n+                        ExpnKind::Desugaring(kind) => {\n+                            format!(\"this {} desugaring\", kind.descr()).into()\n+                        }\n+                    };\n                     new_labels.push((\n                         trace.call_site,\n                         format!(\n-                            \"in this macro invocation{}\",\n+                            \"in {}{}\",\n+                            msg,\n                             if macro_backtrace.len() > 1 && always_backtrace {\n                                 // only specify order when the macro\n                                 // backtrace is multiple levels deep"}, {"sha": "9499e4b5e7a2c86c268e9f72b882c806a24adc20", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -952,7 +952,7 @@ pub enum AstPass {\n }\n \n impl AstPass {\n-    fn descr(self) -> &'static str {\n+    pub fn descr(self) -> &'static str {\n         match self {\n             AstPass::StdImports => \"standard library imports\",\n             AstPass::TestHarness => \"test harness\",\n@@ -989,7 +989,7 @@ pub enum ForLoopLoc {\n \n impl DesugaringKind {\n     /// The description wording should combine well with \"desugaring of {}\".\n-    fn descr(self) -> &'static str {\n+    pub fn descr(self) -> &'static str {\n         match self {\n             DesugaringKind::CondTemporary => \"`if` or `while` condition\",\n             DesugaringKind::Async => \"`async` block or function\","}, {"sha": "02d87666e96d41ce0b572f1758dae28e7f6d8ec9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1928,12 +1928,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             ObligationCauseCode::ItemObligation(item_def_id) => {\n                 let item_name = tcx.def_path_str(item_def_id);\n                 let msg = format!(\"required by `{}`\", item_name);\n-                if let Some(sp) = tcx.hir().span_if_local(item_def_id) {\n-                    let sp = tcx.sess.source_map().guess_head_span(sp);\n-                    err.span_label(sp, &msg);\n-                } else {\n-                    err.note(&msg);\n-                }\n+                let sp = tcx\n+                    .hir()\n+                    .span_if_local(item_def_id)\n+                    .unwrap_or_else(|| tcx.def_span(item_def_id));\n+                let sp = tcx.sess.source_map().guess_head_span(sp);\n+                err.span_note(sp, &msg);\n             }\n             ObligationCauseCode::BindingObligation(item_def_id, span) => {\n                 let item_name = tcx.def_path_str(item_def_id);\n@@ -1952,7 +1952,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 if span != DUMMY_SP {\n                     err.span_label(span, &msg);\n                 } else {\n-                    err.note(&msg);\n+                    err.span_note(\n+                        tcx.def_span(item_def_id),\n+                        &format!(\"required by a bound in `{}`\", item_name),\n+                    );\n                 }\n             }\n             ObligationCauseCode::ObjectCastObligation(object_ty) => {\n@@ -1979,9 +1982,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n                 if self.tcx.sess.is_nightly_build() && is_const_fn {\n                     err.help(\n-                        \"create an inline `const` block, see RFC \\\n-                        #2920 <https://github.com/rust-lang/rfcs/pull/2920> \\\n-                        for more information\",\n+                        \"create an inline `const` block, see RFC #2920 \\\n+                         <https://github.com/rust-lang/rfcs/pull/2920> for more information\",\n                     );\n                 }\n             }\n@@ -2168,8 +2170,14 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 self.tcx.for_each_relevant_impl(\n                     parent_def_id,\n                     parent_trait_ref.self_ty().skip_binder(),\n-                    |impl_def_id| {\n-                        candidates.push(impl_def_id);\n+                    |impl_def_id| match self.tcx.hir().get_if_local(impl_def_id) {\n+                        Some(Node::Item(hir::Item {\n+                            kind: hir::ItemKind::Impl(hir::Impl { .. }),\n+                            ..\n+                        })) => {\n+                            candidates.push(impl_def_id);\n+                        }\n+                        _ => {}\n                     },\n                 );\n                 match &candidates[..] {"}, {"sha": "77586ce48529c897c94ad1733cc6a8927d69dceb", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -933,6 +933,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     item_name\n                 );\n                 err.span_label(item_name.span, &format!(\"private {}\", kind));\n+                let sp = self\n+                    .tcx\n+                    .hir()\n+                    .span_if_local(def_id)\n+                    .unwrap_or_else(|| self.tcx.def_span(def_id));\n+                err.span_label(sp, &format!(\"private {} defined here\", kind));\n                 self.suggest_valid_traits(&mut err, out_of_scope_traits);\n                 err.emit();\n             }"}, {"sha": "c7853f5275e01768b302490d51f6f59686c69094", "filename": "src/test/ui-fulldeps/session-derive-errors.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -56,6 +56,8 @@ LL | #[message = \"This error has a field, and references {name}\"]\n error: invalid format string: expected `'}'` but string was terminated\n   --> $DIR/session-derive-errors.rs:116:1\n    |\n+LL | #[derive(SessionDiagnostic)]\n+   |          ----------------- in this derive macro expansion\n LL | #[error = \"E0123\"]\n    |               - because of this opening brace\n LL | #[message = \"This is missing a closing brace: {name\"]\n@@ -67,6 +69,9 @@ LL | #[message = \"This is missing a closing brace: {name\"]\n error: invalid format string: unmatched `}` found\n   --> $DIR/session-derive-errors.rs:125:1\n    |\n+LL | #[derive(SessionDiagnostic)]\n+   |          ----------------- in this derive macro expansion\n+LL | #[error = \"E0123\"]\n LL | #[message = \"This is missing an opening brace: name}\"]\n    | ^ unmatched `}` in format string\n    |"}, {"sha": "628b48a45d76d6b19604f4a47537b4cbb7a4e2d6", "filename": "src/test/ui/allocator/not-an-allocator.stderr", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,37 +1,61 @@\n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n   --> $DIR/not-an-allocator.rs:2:1\n    |\n+LL | #[global_allocator]\n+   | ------------------- in this procedural macro expansion\n LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n-   = note: required by `std::alloc::GlobalAlloc::alloc`\n+note: required by `std::alloc::GlobalAlloc::alloc`\n+  --> $SRC_DIR/core/src/alloc/global.rs:LL:COL\n+   |\n+LL |     unsafe fn alloc(&self, layout: Layout) -> *mut u8;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n   --> $DIR/not-an-allocator.rs:2:1\n    |\n+LL | #[global_allocator]\n+   | ------------------- in this procedural macro expansion\n LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n-   = note: required by `std::alloc::GlobalAlloc::dealloc`\n+note: required by `std::alloc::GlobalAlloc::dealloc`\n+  --> $SRC_DIR/core/src/alloc/global.rs:LL:COL\n+   |\n+LL |     unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n   --> $DIR/not-an-allocator.rs:2:1\n    |\n+LL | #[global_allocator]\n+   | ------------------- in this procedural macro expansion\n LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n-   = note: required by `std::alloc::GlobalAlloc::realloc`\n+note: required by `std::alloc::GlobalAlloc::realloc`\n+  --> $SRC_DIR/core/src/alloc/global.rs:LL:COL\n+   |\n+LL |     unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n   --> $DIR/not-an-allocator.rs:2:1\n    |\n+LL | #[global_allocator]\n+   | ------------------- in this procedural macro expansion\n LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n-   = note: required by `std::alloc::GlobalAlloc::alloc_zeroed`\n+note: required by `std::alloc::GlobalAlloc::alloc_zeroed`\n+  --> $SRC_DIR/core/src/alloc/global.rs:LL:COL\n+   |\n+LL |     unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors"}, {"sha": "7a914c2a3907c673887f791bcc81458690230b7a", "filename": "src/test/ui/allocator/two-allocators.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -4,6 +4,7 @@ error: cannot define multiple global allocators\n LL | static A: System = System;\n    | -------------------------- previous global allocator defined here\n LL | #[global_allocator]\n+   | ------------------- in this procedural macro expansion\n LL | static B: System = System;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot define a new global allocator\n    |"}, {"sha": "ff56d112c8184254fd9645f52a097180504f37b9", "filename": "src/test/ui/associated-consts/associated-const-array-len.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-array-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-array-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-array-len.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/associated-const-array-len.rs:5:16\n    |\n-LL |     const ID: usize;\n-   |     ---------------- required by `Foo::ID`\n-...\n LL | const X: [i32; <i32 as Foo>::ID] = [0, 1, 2];\n    |                ^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n+   |\n+note: required by `Foo::ID`\n+  --> $DIR/associated-const-array-len.rs:2:5\n+   |\n+LL |     const ID: usize;\n+   |     ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "aa356c596f8a05586ff3d63f9aa68418ca31b4d5", "filename": "src/test/ui/associated-consts/associated-const-private-impl.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-private-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-private-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-private-impl.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0624]: associated constant `ID` is private\n   --> $DIR/associated-const-private-impl.rs:13:30\n    |\n+LL |             const ID: i32 = 1;\n+   |             ------------------ private associated constant defined here\n+...\n LL |     assert_eq!(1, bar1::Foo::ID);\n    |                              ^^ private associated constant\n "}, {"sha": "cea56cd5946c969ddbd9fb6d6d1a87c61b0f14cc", "filename": "src/test/ui/associated-consts/issue-63496.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,9 +1,6 @@\n error[E0283]: type annotations needed\n   --> $DIR/issue-63496.rs:4:21\n    |\n-LL |     const C: usize;\n-   |     --------------- required by `A::C`\n-LL | \n LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n    |                     ^^^^\n    |                     |\n@@ -12,13 +9,15 @@ LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n    |\n    = note: cannot satisfy `_: A`\n    = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n+note: required by `A::C`\n+  --> $DIR/issue-63496.rs:2:5\n+   |\n+LL |     const C: usize;\n+   |     ^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-63496.rs:4:33\n    |\n-LL |     const C: usize;\n-   |     --------------- required by `A::C`\n-LL | \n LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n    |                                 ^^^^\n    |                                 |\n@@ -27,6 +26,11 @@ LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n    |\n    = note: cannot satisfy `_: A`\n    = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n+note: required by `A::C`\n+  --> $DIR/issue-63496.rs:2:5\n+   |\n+LL |     const C: usize;\n+   |     ^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "33ab4bb967a9704135fa83e75bb38cff50417d56", "filename": "src/test/ui/associated-item/issue-48027.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -16,8 +16,6 @@ LL |     const X: usize;\n error[E0283]: type annotations needed\n   --> $DIR/issue-48027.rs:3:32\n    |\n-LL |     const X: usize;\n-   |     --------------- required by `Bar::X`\n LL |     fn return_n(&self) -> [u8; Bar::X];\n    |                                ^^^^^^\n    |                                |\n@@ -26,6 +24,11 @@ LL |     fn return_n(&self) -> [u8; Bar::X];\n    |\n    = note: cannot satisfy `_: Bar`\n    = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n+note: required by `Bar::X`\n+  --> $DIR/issue-48027.rs:2:5\n+   |\n+LL |     const X: usize;\n+   |     ^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "41e2d8ec314b777c707f2a661d388ca66aa98383", "filename": "src/test/ui/associated-types/associated-types-bound-failure.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,12 +1,14 @@\n error[E0277]: the trait bound `<G as GetToInt>::R: ToInt` is not satisfied\n   --> $DIR/associated-types-bound-failure.rs:19:19\n    |\n-LL |     fn to_int(&self) -> isize;\n-   |     -------------------------- required by `ToInt::to_int`\n-...\n LL |     ToInt::to_int(&g.get())\n    |                   ^^^^^^^^ the trait `ToInt` is not implemented for `<G as GetToInt>::R`\n    |\n+note: required by `ToInt::to_int`\n+  --> $DIR/associated-types-bound-failure.rs:6:5\n+   |\n+LL |     fn to_int(&self) -> isize;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider further restricting the associated type\n    |\n LL |     where G : GetToInt, <G as GetToInt>::R: ToInt"}, {"sha": "5f4b65bd131ee4129757a80d6a85ff776f03d80d", "filename": "src/test/ui/associated-types/associated-types-unconstrained.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,13 +1,15 @@\n error[E0283]: type annotations needed\n   --> $DIR/associated-types-unconstrained.rs:14:20\n    |\n-LL |     fn bar() -> isize;\n-   |     ------------------ required by `Foo::bar`\n-...\n LL |     let x: isize = Foo::bar();\n    |                    ^^^^^^^^ cannot infer type\n    |\n    = note: cannot satisfy `_: Foo`\n+note: required by `Foo::bar`\n+  --> $DIR/associated-types-unconstrained.rs:5:5\n+   |\n+LL |     fn bar() -> isize;\n+   |     ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7bf36d5e91515dbff90e8c892258273262f9ccc7", "filename": "src/test/ui/associated-types/issue-44153.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,9 +1,6 @@\n error[E0271]: type mismatch resolving `<() as Array>::Element == &()`\n   --> $DIR/issue-44153.rs:18:5\n    |\n-LL |     fn visit() {}\n-   |     ---------- required by `Visit::visit`\n-...\n LL |     <() as Visit>::visit();\n    |     ^^^^^^^^^^^^^^^^^^^^ expected `&()`, found `()`\n    |\n@@ -12,6 +9,11 @@ note: required because of the requirements on the impl of `Visit` for `()`\n    |\n LL | impl<'a> Visit for () where\n    |          ^^^^^     ^^\n+note: required by `Visit::visit`\n+  --> $DIR/issue-44153.rs:6:5\n+   |\n+LL |     fn visit() {}\n+   |     ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ba97e135790c16a0ded828d8426afe0448f178c2", "filename": "src/test/ui/async-await/issue-61076.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -5,7 +5,11 @@ LL |     foo()?;\n    |     ^^^^^^ the `?` operator cannot be applied to type `impl Future`\n    |\n    = help: the trait `Try` is not implemented for `impl Future`\n-   = note: required by `branch`\n+note: required by `branch`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider `await`ing on the `Future`\n    |\n LL |     foo().await?;\n@@ -18,7 +22,11 @@ LL |     t?;\n    |     ^^ the `?` operator cannot be applied to type `T`\n    |\n    = help: the trait `Try` is not implemented for `T`\n-   = note: required by `branch`\n+note: required by `branch`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider `await`ing on the `Future`\n    |\n LL |     t.await?;"}, {"sha": "e20e2e8f6ba3848bc327b112c2f449d88b8548c3", "filename": "src/test/ui/async-await/issue-70594.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -25,7 +25,11 @@ LL |     [1; ().await];\n    |         ^^^^^^^^ `()` is not a future\n    |\n    = help: the trait `Future` is not implemented for `()`\n-   = note: required by `poll`\n+note: required by `poll`\n+  --> $SRC_DIR/core/src/future/future.rs:LL:COL\n+   |\n+LL |     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e28ba74eb6339dd8ed00b71df6c07a21528b0af6", "filename": "src/test/ui/async-await/issue-84841.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fasync-await%2Fissue-84841.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fasync-await%2Fissue-84841.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-84841.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -5,7 +5,11 @@ LL |     test()?;\n    |     ^^^^^^^ the `?` operator cannot be applied to type `impl Future`\n    |\n    = help: the trait `Try` is not implemented for `impl Future`\n-   = note: required by `branch`\n+note: required by `branch`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/issue-84841.rs:9:11\n@@ -21,7 +25,11 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "946b8d19e6936a11e162723db023fbe1694f0c04", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -34,7 +34,11 @@ LL |     (|_| 2333).await;\n    |     ^^^^^^^^^^^^^^^^ `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]` is not a future\n    |\n    = help: the trait `Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n-   = note: required by `poll`\n+note: required by `poll`\n+  --> $SRC_DIR/core/src/future/future.rs:LL:COL\n+   |\n+LL |     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "8c581ff2229fc00889d0b9684cd75de5b2750938", "filename": "src/test/ui/async-await/pin-needed-to-poll-2.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -10,7 +10,11 @@ note: required because it appears within the type `Sleep`\n    |\n LL | struct Sleep(std::marker::PhantomPinned);\n    |        ^^^^^\n-   = note: required by `Pin::<P>::new`\n+note: required by `Pin::<P>::new`\n+  --> $SRC_DIR/core/src/pin.rs:LL:COL\n+   |\n+LL |     pub const fn new(pointer: P) -> Pin<P> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e8bb4aca9a9c9d5b92174d6cd4eb8cdb1228eb54", "filename": "src/test/ui/async-await/try-on-option-in-async.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -11,7 +11,11 @@ LL | |     }\n    | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `{integer}`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in an async closure that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option-in-async.rs:17:10\n@@ -26,7 +30,11 @@ LL | |     };\n    | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option-in-async.rs:26:6\n@@ -41,7 +49,11 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5e3b43a47eeeef69952049d75d122a9489cb600c", "filename": "src/test/ui/box/into-boxed-slice-fail.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fbox%2Finto-boxed-slice-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fbox%2Finto-boxed-slice-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox%2Finto-boxed-slice-fail.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -5,7 +5,11 @@ LL |     let _ = Box::into_boxed_slice(boxed_slice);\n    |                                   ^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n-   = note: required by `Box::<T, A>::into_boxed_slice`\n+note: required by `Box::<T, A>::into_boxed_slice`\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+   |\n+LL |     pub fn into_boxed_slice(boxed: Self) -> Box<[T], A> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/into-boxed-slice-fail.rs:7:13\n@@ -23,7 +27,11 @@ LL |     let _ = Box::into_boxed_slice(boxed_trait);\n    |                                   ^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `dyn Debug`\n-   = note: required by `Box::<T, A>::into_boxed_slice`\n+note: required by `Box::<T, A>::into_boxed_slice`\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+   |\n+LL |     pub fn into_boxed_slice(boxed: Self) -> Box<[T], A> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `dyn Debug` cannot be known at compilation time\n   --> $DIR/into-boxed-slice-fail.rs:11:13"}, {"sha": "ebd885a7d323f641baea3fd84a6abcd9602a1798", "filename": "src/test/ui/chalkify/type_wf.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,15 +1,17 @@\n error[E0277]: the trait bound `{float}: Foo` is not satisfied\n   --> $DIR/type_wf.rs:18:13\n    |\n-LL | struct S<T: Foo> {\n-   | ---------------- required by `S`\n-...\n LL |     let s = S {\n    |             ^ the trait `Foo` is not implemented for `{float}`\n    |\n    = help: the following implementations were found:\n              <Option<T> as Foo>\n              <i32 as Foo>\n+note: required by `S`\n+  --> $DIR/type_wf.rs:6:1\n+   |\n+LL | struct S<T: Foo> {\n+   | ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "09986f623fc4b393b742aa9d60243a50d2d1fef8", "filename": "src/test/ui/const-generics/dont-evaluate-array-len-on-err-1.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -3,9 +3,12 @@ error[E0277]: the trait bound `[Adt; _]: Foo` is not satisfied\n    |\n LL |         <[Adt; std::mem::size_of::<Self::Assoc>()] as Foo>::bar()\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `[Adt; _]`\n-...\n+   |\n+note: required by `Foo::bar`\n+  --> $DIR/dont-evaluate-array-len-on-err-1.rs:19:5\n+   |\n LL |     fn bar() {}\n-   |     -------- required by `Foo::bar`\n+   |     ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4e89e4a3b17e97b285dc5466b8145d2b1cc45f48", "filename": "src/test/ui/const-generics/exhaustive-value.full.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.full.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,9 +1,6 @@\n error[E0277]: the trait bound `(): Foo<N>` is not satisfied\n   --> $DIR/exhaustive-value.rs:266:5\n    |\n-LL |     fn test() {}\n-   |     --------- required by `Foo::test`\n-...\n LL |     <() as Foo<N>>::test()\n    |     ^^^^^^^^^^^^^^^^^^^^ the trait `Foo<N>` is not implemented for `()`\n    |\n@@ -13,6 +10,11 @@ LL |     <() as Foo<N>>::test()\n              <() as Foo<101_u8>>\n              <() as Foo<102_u8>>\n            and 252 others\n+note: required by `Foo::test`\n+  --> $DIR/exhaustive-value.rs:6:5\n+   |\n+LL |     fn test() {}\n+   |     ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4e89e4a3b17e97b285dc5466b8145d2b1cc45f48", "filename": "src/test/ui/const-generics/exhaustive-value.min.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.min.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,9 +1,6 @@\n error[E0277]: the trait bound `(): Foo<N>` is not satisfied\n   --> $DIR/exhaustive-value.rs:266:5\n    |\n-LL |     fn test() {}\n-   |     --------- required by `Foo::test`\n-...\n LL |     <() as Foo<N>>::test()\n    |     ^^^^^^^^^^^^^^^^^^^^ the trait `Foo<N>` is not implemented for `()`\n    |\n@@ -13,6 +10,11 @@ LL |     <() as Foo<N>>::test()\n              <() as Foo<101_u8>>\n              <() as Foo<102_u8>>\n            and 252 others\n+note: required by `Foo::test`\n+  --> $DIR/exhaustive-value.rs:6:5\n+   |\n+LL |     fn test() {}\n+   |     ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "382dd0ee5a64eaa909cbc9b8fdb4d26a2427ed08", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-1.stderr", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,16 +1,18 @@\n error[E0277]: the trait bound `A<{_: usize}>: Bar<{_: usize}>` is not satisfied\n   --> $DIR/unused-substs-1.rs:12:13\n    |\n-LL | / struct A<const N: usize>\n-LL | | where\n-LL | |     A<N>: Bar<N>;\n-   | |_________________- required by `A`\n-...\n-LL |       let _ = A;\n-   |               ^ the trait `Bar<{_: usize}>` is not implemented for `A<{_: usize}>`\n+LL |     let _ = A;\n+   |             ^ the trait `Bar<{_: usize}>` is not implemented for `A<{_: usize}>`\n    |\n    = help: the following implementations were found:\n              <A<7_usize> as Bar<N>>\n+note: required by `A`\n+  --> $DIR/unused-substs-1.rs:7:1\n+   |\n+LL | / struct A<const N: usize>\n+LL | | where\n+LL | |     A<N>: Bar<N>;\n+   | |_________________^\n \n error: aborting due to previous error\n "}, {"sha": "e848ddc55b7dff8be1152ab5cbfdef8a7dc9bebd", "filename": "src/test/ui/custom_test_frameworks/mismatch.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,8 @@\n error[E0277]: the trait bound `TestDescAndFn: Testable` is not satisfied\n   --> $DIR/mismatch.rs:9:1\n    |\n+LL | #[test]\n+   | ------- in this procedural macro expansion\n LL | fn wrong_kind(){}\n    | ^^^^^^^^^^^^^^^^^ the trait `Testable` is not implemented for `TestDescAndFn`\n    |"}, {"sha": "7e579ec22dd42762b36768d7a2aa463a3d9c25e9", "filename": "src/test/ui/derives/derive-on-trait-item-or-impl-item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderive-on-trait-item-or-impl-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderive-on-trait-item-or-impl-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-on-trait-item-or-impl-item.rs?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,14 +1,14 @@\n trait Foo {\n     #[derive(Clone)]\n-    //~^ ERROR `derive` may only be applied to structs, enums and unions\n+    //~^ ERROR `derive` may only be applied to `struct`s, `enum`s and `union`s\n     type Bar;\n }\n \n struct Bar;\n \n impl Bar {\n     #[derive(Clone)]\n-    //~^ ERROR `derive` may only be applied to structs, enums and unions\n+    //~^ ERROR `derive` may only be applied to `struct`s, `enum`s and `union`s\n     fn bar(&self) {}\n }\n "}, {"sha": "1fd97bdd5ec62f4f24df1a1d0bec0ee4fbe75891", "filename": "src/test/ui/derives/derive-on-trait-item-or-impl-item.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderive-on-trait-item-or-impl-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderive-on-trait-item-or-impl-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-on-trait-item-or-impl-item.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,14 +1,20 @@\n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/derive-on-trait-item-or-impl-item.rs:2:5\n    |\n LL |     #[derive(Clone)]\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^ not applicable here\n+LL |\n+LL |     type Bar;\n+   |     --------- not a `struct`, `enum` or `union`\n \n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/derive-on-trait-item-or-impl-item.rs:10:5\n    |\n LL |     #[derive(Clone)]\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^ not applicable here\n+LL |\n+LL |     fn bar(&self) {}\n+   |     ---------------- not a `struct`, `enum` or `union`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c5bc50e407b25787dbd8d5ca2278e6597311a926", "filename": "src/test/ui/derives/derives-span-Clone-enum-struct-variant.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,10 +1,17 @@\n error[E0277]: the trait bound `Error: Clone` is not satisfied\n   --> $DIR/derives-span-Clone-enum-struct-variant.rs:9:6\n    |\n+LL | #[derive(Clone)]\n+   |          ----- in this derive macro expansion\n+...\n LL |      x: Error\n    |      ^^^^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n-   = note: required by `clone`\n+note: required by `clone`\n+  --> $SRC_DIR/core/src/clone.rs:LL:COL\n+   |\n+LL |     fn clone(&self) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "a6dc818eb6fe4ea4786377c627695c123ef41ae3", "filename": "src/test/ui/derives/derives-span-Clone-enum.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,10 +1,17 @@\n error[E0277]: the trait bound `Error: Clone` is not satisfied\n   --> $DIR/derives-span-Clone-enum.rs:9:6\n    |\n+LL | #[derive(Clone)]\n+   |          ----- in this derive macro expansion\n+...\n LL |      Error\n    |      ^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n-   = note: required by `clone`\n+note: required by `clone`\n+  --> $SRC_DIR/core/src/clone.rs:LL:COL\n+   |\n+LL |     fn clone(&self) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "cf7b9ec276e2542e52adadf8f645899bad42f4d5", "filename": "src/test/ui/derives/derives-span-Clone-struct.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,10 +1,17 @@\n error[E0277]: the trait bound `Error: Clone` is not satisfied\n   --> $DIR/derives-span-Clone-struct.rs:8:5\n    |\n+LL | #[derive(Clone)]\n+   |          ----- in this derive macro expansion\n+LL | struct Struct {\n LL |     x: Error\n    |     ^^^^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n-   = note: required by `clone`\n+note: required by `clone`\n+  --> $SRC_DIR/core/src/clone.rs:LL:COL\n+   |\n+LL |     fn clone(&self) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "80733d62730d7a2fc78e3ddc5c377d34ec996cce", "filename": "src/test/ui/derives/derives-span-Clone-tuple-struct.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,10 +1,17 @@\n error[E0277]: the trait bound `Error: Clone` is not satisfied\n   --> $DIR/derives-span-Clone-tuple-struct.rs:8:5\n    |\n+LL | #[derive(Clone)]\n+   |          ----- in this derive macro expansion\n+LL | struct Struct(\n LL |     Error\n    |     ^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n-   = note: required by `clone`\n+note: required by `clone`\n+  --> $SRC_DIR/core/src/clone.rs:LL:COL\n+   |\n+LL |     fn clone(&self) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "bdcbbf0c75787cf67e4034ba329c2e15e8ae60ca", "filename": "src/test/ui/derives/derives-span-Debug-enum-struct-variant.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: `Error` doesn't implement `Debug`\n   --> $DIR/derives-span-Debug-enum-struct-variant.rs:9:6\n    |\n+LL | #[derive(Debug)]\n+   |          ----- in this derive macro expansion\n+...\n LL |      x: Error\n    |      ^^^^^^^^ `Error` cannot be formatted using `{:?}`\n    |"}, {"sha": "4ffb75935af9b996146a5a3e92a6719a31818a3e", "filename": "src/test/ui/derives/derives-span-Debug-enum.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: `Error` doesn't implement `Debug`\n   --> $DIR/derives-span-Debug-enum.rs:9:6\n    |\n+LL | #[derive(Debug)]\n+   |          ----- in this derive macro expansion\n+...\n LL |      Error\n    |      ^^^^^ `Error` cannot be formatted using `{:?}`\n    |"}, {"sha": "74d2460bb6906ba38e69f66b3f0c2e120d7d0a28", "filename": "src/test/ui/derives/derives-span-Debug-struct.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: `Error` doesn't implement `Debug`\n   --> $DIR/derives-span-Debug-struct.rs:8:5\n    |\n+LL | #[derive(Debug)]\n+   |          ----- in this derive macro expansion\n+LL | struct Struct {\n LL |     x: Error\n    |     ^^^^^^^^ `Error` cannot be formatted using `{:?}`\n    |"}, {"sha": "34ddb4e594377927288768dc0946b4f08ff8aa0f", "filename": "src/test/ui/derives/derives-span-Debug-tuple-struct.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: `Error` doesn't implement `Debug`\n   --> $DIR/derives-span-Debug-tuple-struct.rs:8:5\n    |\n+LL | #[derive(Debug)]\n+   |          ----- in this derive macro expansion\n+LL | struct Struct(\n LL |     Error\n    |     ^^^^^ `Error` cannot be formatted using `{:?}`\n    |"}, {"sha": "c60b6ac456ebf962e42821018a919f461e06bbc5", "filename": "src/test/ui/derives/derives-span-Default-struct.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,10 +1,17 @@\n error[E0277]: the trait bound `Error: Default` is not satisfied\n   --> $DIR/derives-span-Default-struct.rs:8:5\n    |\n+LL | #[derive(Default)]\n+   |          ------- in this derive macro expansion\n+LL | struct Struct {\n LL |     x: Error\n    |     ^^^^^^^^ the trait `Default` is not implemented for `Error`\n    |\n-   = note: required by `std::default::Default::default`\n+note: required by `std::default::Default::default`\n+  --> $SRC_DIR/core/src/default.rs:LL:COL\n+   |\n+LL |     fn default() -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "ed342f539da03e3f80e567b0bd8e90ed3cde3a39", "filename": "src/test/ui/derives/derives-span-Default-tuple-struct.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,10 +1,17 @@\n error[E0277]: the trait bound `Error: Default` is not satisfied\n   --> $DIR/derives-span-Default-tuple-struct.rs:8:5\n    |\n+LL | #[derive(Default)]\n+   |          ------- in this derive macro expansion\n+LL | struct Struct(\n LL |     Error\n    |     ^^^^^ the trait `Default` is not implemented for `Error`\n    |\n-   = note: required by `std::default::Default::default`\n+note: required by `std::default::Default::default`\n+  --> $SRC_DIR/core/src/default.rs:LL:COL\n+   |\n+LL |     fn default() -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "0a764053824562e9e265d3172dfb7bb7a0531b72", "filename": "src/test/ui/derives/derives-span-Eq-enum-struct-variant.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the trait bound `Error: Eq` is not satisfied\n   --> $DIR/derives-span-Eq-enum-struct-variant.rs:9:6\n    |\n+LL | #[derive(Eq,PartialEq)]\n+   |          -- in this derive macro expansion\n+...\n LL |      x: Error\n    |      ^^^^^^^^ the trait `Eq` is not implemented for `Error`\n    | "}, {"sha": "c17e2c518aa76246498c77ecafed04f9a6140bc8", "filename": "src/test/ui/derives/derives-span-Eq-enum.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the trait bound `Error: Eq` is not satisfied\n   --> $DIR/derives-span-Eq-enum.rs:9:6\n    |\n+LL | #[derive(Eq,PartialEq)]\n+   |          -- in this derive macro expansion\n+...\n LL |      Error\n    |      ^^^^^ the trait `Eq` is not implemented for `Error`\n    | "}, {"sha": "7a7640b40f627980bcaedd7aa7b3b0dca9fa4b15", "filename": "src/test/ui/derives/derives-span-Eq-struct.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the trait bound `Error: Eq` is not satisfied\n   --> $DIR/derives-span-Eq-struct.rs:8:5\n    |\n+LL | #[derive(Eq,PartialEq)]\n+   |          -- in this derive macro expansion\n+LL | struct Struct {\n LL |     x: Error\n    |     ^^^^^^^^ the trait `Eq` is not implemented for `Error`\n    | "}, {"sha": "35932986b0499660fd2f6b6e1b8621a7e3b76be4", "filename": "src/test/ui/derives/derives-span-Eq-tuple-struct.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the trait bound `Error: Eq` is not satisfied\n   --> $DIR/derives-span-Eq-tuple-struct.rs:8:5\n    |\n+LL | #[derive(Eq,PartialEq)]\n+   |          -- in this derive macro expansion\n+LL | struct Struct(\n LL |     Error\n    |     ^^^^^ the trait `Eq` is not implemented for `Error`\n    | "}, {"sha": "4616dadbe6bf7e7998c272f08901bcaf1aaa284b", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the trait bound `Error: Hash` is not satisfied\n   --> $DIR/derives-span-Hash-enum-struct-variant.rs:9:6\n    |\n+LL | #[derive(Hash)]\n+   |          ---- in this derive macro expansion\n+...\n LL |      x: Error\n    |      ^^^^^^^^ the trait `Hash` is not implemented for `Error`\n    | "}, {"sha": "ffc7f7bb7daafd2640ad7b97f02c3e09057efafe", "filename": "src/test/ui/derives/derives-span-Hash-enum.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the trait bound `Error: Hash` is not satisfied\n   --> $DIR/derives-span-Hash-enum.rs:8:6\n    |\n+LL | #[derive(Hash)]\n+   |          ---- in this derive macro expansion\n+...\n LL |      Error\n    |      ^^^^^ the trait `Hash` is not implemented for `Error`\n    | "}, {"sha": "14aebb4faace9b898f8c929941712391f45e6452", "filename": "src/test/ui/derives/derives-span-Hash-struct.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the trait bound `Error: Hash` is not satisfied\n   --> $DIR/derives-span-Hash-struct.rs:8:5\n    |\n+LL | #[derive(Hash)]\n+   |          ---- in this derive macro expansion\n+LL | struct Struct {\n LL |     x: Error\n    |     ^^^^^^^^ the trait `Hash` is not implemented for `Error`\n    | "}, {"sha": "50139dc3f0a7950824461cdbeb5d6d6d4724b1fd", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the trait bound `Error: Hash` is not satisfied\n   --> $DIR/derives-span-Hash-tuple-struct.rs:8:5\n    |\n+LL | #[derive(Hash)]\n+   |          ---- in this derive macro expansion\n+LL | struct Struct(\n LL |     Error\n    |     ^^^^^ the trait `Hash` is not implemented for `Error`\n    | "}, {"sha": "1e1cd715e6479343fc3ba6b9828a0a8d9cb8c6bd", "filename": "src/test/ui/derives/derives-span-Ord-enum-struct-variant.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,10 +1,17 @@\n error[E0277]: the trait bound `Error: Ord` is not satisfied\n   --> $DIR/derives-span-Ord-enum-struct-variant.rs:9:6\n    |\n+LL | #[derive(Ord,Eq,PartialOrd,PartialEq)]\n+   |          --- in this derive macro expansion\n+...\n LL |      x: Error\n    |      ^^^^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n-   = note: required by `std::cmp::Ord::cmp`\n+note: required by `std::cmp::Ord::cmp`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL |     fn cmp(&self, other: &Self) -> Ordering;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "43abe9a954738ca3cbe4f86009de01b75162107d", "filename": "src/test/ui/derives/derives-span-Ord-enum.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,10 +1,17 @@\n error[E0277]: the trait bound `Error: Ord` is not satisfied\n   --> $DIR/derives-span-Ord-enum.rs:9:6\n    |\n+LL | #[derive(Ord,Eq,PartialOrd,PartialEq)]\n+   |          --- in this derive macro expansion\n+...\n LL |      Error\n    |      ^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n-   = note: required by `std::cmp::Ord::cmp`\n+note: required by `std::cmp::Ord::cmp`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL |     fn cmp(&self, other: &Self) -> Ordering;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "44f6bab08c127854a2dd332374e30d3f6eb7e329", "filename": "src/test/ui/derives/derives-span-Ord-struct.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,10 +1,17 @@\n error[E0277]: the trait bound `Error: Ord` is not satisfied\n   --> $DIR/derives-span-Ord-struct.rs:8:5\n    |\n+LL | #[derive(Ord,Eq,PartialOrd,PartialEq)]\n+   |          --- in this derive macro expansion\n+LL | struct Struct {\n LL |     x: Error\n    |     ^^^^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n-   = note: required by `std::cmp::Ord::cmp`\n+note: required by `std::cmp::Ord::cmp`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL |     fn cmp(&self, other: &Self) -> Ordering;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "e604018245ae3a6aeb0e7882a4f36337ee85245a", "filename": "src/test/ui/derives/derives-span-Ord-tuple-struct.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,10 +1,17 @@\n error[E0277]: the trait bound `Error: Ord` is not satisfied\n   --> $DIR/derives-span-Ord-tuple-struct.rs:8:5\n    |\n+LL | #[derive(Ord,Eq,PartialOrd,PartialEq)]\n+   |          --- in this derive macro expansion\n+LL | struct Struct(\n LL |     Error\n    |     ^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n-   = note: required by `std::cmp::Ord::cmp`\n+note: required by `std::cmp::Ord::cmp`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL |     fn cmp(&self, other: &Self) -> Ordering;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "abcba6da8aaee74c3e06b4cf401456a211fa9b37", "filename": "src/test/ui/derives/derives-span-PartialEq-enum-struct-variant.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0369]: binary operation `==` cannot be applied to type `Error`\n   --> $DIR/derives-span-PartialEq-enum-struct-variant.rs:9:6\n    |\n+LL | #[derive(PartialEq)]\n+   |          --------- in this derive macro expansion\n+...\n LL |      x: Error\n    |      ^^^^^^^^\n    |\n@@ -10,6 +13,9 @@ LL |      x: Error\n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n   --> $DIR/derives-span-PartialEq-enum-struct-variant.rs:9:6\n    |\n+LL | #[derive(PartialEq)]\n+   |          --------- in this derive macro expansion\n+...\n LL |      x: Error\n    |      ^^^^^^^^\n    |"}, {"sha": "cdb40c39f169ce7657f767654dad57b169820ac1", "filename": "src/test/ui/derives/derives-span-PartialEq-enum.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0369]: binary operation `==` cannot be applied to type `Error`\n   --> $DIR/derives-span-PartialEq-enum.rs:9:6\n    |\n+LL | #[derive(PartialEq)]\n+   |          --------- in this derive macro expansion\n+...\n LL |      Error\n    |      ^^^^^\n    |\n@@ -10,6 +13,9 @@ LL |      Error\n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n   --> $DIR/derives-span-PartialEq-enum.rs:9:6\n    |\n+LL | #[derive(PartialEq)]\n+   |          --------- in this derive macro expansion\n+...\n LL |      Error\n    |      ^^^^^\n    |"}, {"sha": "4cf8851a098bcdb10289e9638e8953b78128ccea", "filename": "src/test/ui/derives/derives-span-PartialEq-struct.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0369]: binary operation `==` cannot be applied to type `Error`\n   --> $DIR/derives-span-PartialEq-struct.rs:8:5\n    |\n+LL | #[derive(PartialEq)]\n+   |          --------- in this derive macro expansion\n+LL | struct Struct {\n LL |     x: Error\n    |     ^^^^^^^^\n    |\n@@ -10,6 +13,9 @@ LL |     x: Error\n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n   --> $DIR/derives-span-PartialEq-struct.rs:8:5\n    |\n+LL | #[derive(PartialEq)]\n+   |          --------- in this derive macro expansion\n+LL | struct Struct {\n LL |     x: Error\n    |     ^^^^^^^^\n    |"}, {"sha": "66bc16873538984644b7ec65f93128f87b8c3e8f", "filename": "src/test/ui/derives/derives-span-PartialEq-tuple-struct.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0369]: binary operation `==` cannot be applied to type `Error`\n   --> $DIR/derives-span-PartialEq-tuple-struct.rs:8:5\n    |\n+LL | #[derive(PartialEq)]\n+   |          --------- in this derive macro expansion\n+LL | struct Struct(\n LL |     Error\n    |     ^^^^^\n    |\n@@ -10,6 +13,9 @@ LL |     Error\n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n   --> $DIR/derives-span-PartialEq-tuple-struct.rs:8:5\n    |\n+LL | #[derive(PartialEq)]\n+   |          --------- in this derive macro expansion\n+LL | struct Struct(\n LL |     Error\n    |     ^^^^^\n    |"}, {"sha": "9a716048e26aa0a0694bc974b9ef636cb6b33b20", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum-struct-variant.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,11 +1,18 @@\n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:9:6\n    |\n+LL | #[derive(PartialOrd,PartialEq)]\n+   |          ---------- in this derive macro expansion\n+...\n LL |      x: Error\n    |      ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+note: required by `std::cmp::PartialOrd::partial_cmp`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "c726d33eab0135ef850f8c547e5b98fbcf0294ce", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,11 +1,18 @@\n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-enum.rs:9:6\n    |\n+LL | #[derive(PartialOrd,PartialEq)]\n+   |          ---------- in this derive macro expansion\n+...\n LL |      Error\n    |      ^^^^^ no implementation for `Error < Error` and `Error > Error`\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+note: required by `std::cmp::PartialOrd::partial_cmp`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "a56c163ca788ae061cbeff8d8afb601f9559e4d7", "filename": "src/test/ui/derives/derives-span-PartialOrd-struct.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,11 +1,18 @@\n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-struct.rs:8:5\n    |\n+LL | #[derive(PartialOrd,PartialEq)]\n+   |          ---------- in this derive macro expansion\n+LL | struct Struct {\n LL |     x: Error\n    |     ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+note: required by `std::cmp::PartialOrd::partial_cmp`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "7a0a52e582444861a996ec12cc1aba12099cde47", "filename": "src/test/ui/derives/derives-span-PartialOrd-tuple-struct.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,11 +1,18 @@\n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-tuple-struct.rs:8:5\n    |\n+LL | #[derive(PartialOrd,PartialEq)]\n+   |          ---------- in this derive macro expansion\n+LL | struct Struct(\n LL |     Error\n    |     ^^^^^ no implementation for `Error < Error` and `Error > Error`\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+note: required by `std::cmp::PartialOrd::partial_cmp`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "09611555fb9a57d0972ca500327170efd6eb1631", "filename": "src/test/ui/derives/deriving-copyclone.stderr", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -10,7 +10,12 @@ LL |     is_copy(B { a: 1, b: C });\n    |             expected an implementor of trait `Copy`\n    |             help: consider borrowing here: `&B { a: 1, b: C }`\n    |\n-   = note: required because of the requirements on the impl of `Copy` for `B<C>`\n+note: required because of the requirements on the impl of `Copy` for `B<C>`\n+  --> $DIR/deriving-copyclone.rs:9:10\n+   |\n+LL | #[derive(Copy, Clone)]\n+   |          ^^^^\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `C: Clone` is not satisfied\n   --> $DIR/deriving-copyclone.rs:32:14\n@@ -24,7 +29,12 @@ LL |     is_clone(B { a: 1, b: C });\n    |              expected an implementor of trait `Clone`\n    |              help: consider borrowing here: `&B { a: 1, b: C }`\n    |\n-   = note: required because of the requirements on the impl of `Clone` for `B<C>`\n+note: required because of the requirements on the impl of `Clone` for `B<C>`\n+  --> $DIR/deriving-copyclone.rs:9:16\n+   |\n+LL | #[derive(Copy, Clone)]\n+   |                ^^^^^\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `D: Copy` is not satisfied\n   --> $DIR/deriving-copyclone.rs:35:13\n@@ -38,7 +48,12 @@ LL |     is_copy(B { a: 1, b: D });\n    |             expected an implementor of trait `Copy`\n    |             help: consider borrowing here: `&B { a: 1, b: D }`\n    |\n-   = note: required because of the requirements on the impl of `Copy` for `B<D>`\n+note: required because of the requirements on the impl of `Copy` for `B<D>`\n+  --> $DIR/deriving-copyclone.rs:9:10\n+   |\n+LL | #[derive(Copy, Clone)]\n+   |          ^^^^\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b97f87da4bfce22f357120e0fd88a310c207d411", "filename": "src/test/ui/derives/deriving-no-inner-impl-error-message.stderr", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0369]: binary operation `==` cannot be applied to type `NoCloneOrEq`\n   --> $DIR/deriving-no-inner-impl-error-message.rs:5:5\n    |\n+LL | #[derive(PartialEq)]\n+   |          --------- in this derive macro expansion\n+LL | struct E {\n LL |     x: NoCloneOrEq\n    |     ^^^^^^^^^^^^^^\n    |\n@@ -10,6 +13,9 @@ LL |     x: NoCloneOrEq\n error[E0369]: binary operation `!=` cannot be applied to type `NoCloneOrEq`\n   --> $DIR/deriving-no-inner-impl-error-message.rs:5:5\n    |\n+LL | #[derive(PartialEq)]\n+   |          --------- in this derive macro expansion\n+LL | struct E {\n LL |     x: NoCloneOrEq\n    |     ^^^^^^^^^^^^^^\n    |\n@@ -19,10 +25,17 @@ LL |     x: NoCloneOrEq\n error[E0277]: the trait bound `NoCloneOrEq: Clone` is not satisfied\n   --> $DIR/deriving-no-inner-impl-error-message.rs:10:5\n    |\n+LL | #[derive(Clone)]\n+   |          ----- in this derive macro expansion\n+LL | struct C {\n LL |     x: NoCloneOrEq\n    |     ^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `NoCloneOrEq`\n    |\n-   = note: required by `clone`\n+note: required by `clone`\n+  --> $SRC_DIR/core/src/clone.rs:LL:COL\n+   |\n+LL |     fn clone(&self) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors"}, {"sha": "9afffa90085908d0d6857bb44efbb4bb20a0f754", "filename": "src/test/ui/derives/deriving-non-type.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderiving-non-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderiving-non-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-non-type.rs?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -2,29 +2,29 @@\n \n struct S;\n \n-#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs, enums and unions\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to `struct`s, `enum`s and `union`s\n trait T { }\n \n-#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs, enums and unions\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to `struct`s, `enum`s and `union`s\n impl S { }\n \n-#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs, enums and unions\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to `struct`s, `enum`s and `union`s\n impl T for S { }\n \n-#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs, enums and unions\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to `struct`s, `enum`s and `union`s\n static s: usize = 0;\n \n-#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs, enums and unions\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to `struct`s, `enum`s and `union`s\n const c: usize = 0;\n \n-#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs, enums and unions\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to `struct`s, `enum`s and `union`s\n mod m { }\n \n-#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs, enums and unions\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to `struct`s, `enum`s and `union`s\n extern \"C\" { }\n \n-#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs, enums and unions\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to `struct`s, `enum`s and `union`s\n type A = usize;\n \n-#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs, enums and unions\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to `struct`s, `enum`s and `union`s\n fn main() { }"}, {"sha": "ef7ef54d1ae6b494d48f0baae983cc38fdfe40a6", "filename": "src/test/ui/derives/deriving-non-type.stderr", "status": "modified", "additions": 36, "deletions": 18, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderiving-non-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fderives%2Fderiving-non-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-non-type.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,56 +1,74 @@\n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/deriving-non-type.rs:5:1\n    |\n LL | #[derive(PartialEq)]\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^ not applicable here\n+LL | trait T { }\n+   | ----------- not a `struct`, `enum` or `union`\n \n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/deriving-non-type.rs:8:1\n    |\n LL | #[derive(PartialEq)]\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^ not applicable here\n+LL | impl S { }\n+   | ---------- not a `struct`, `enum` or `union`\n \n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/deriving-non-type.rs:11:1\n    |\n LL | #[derive(PartialEq)]\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^ not applicable here\n+LL | impl T for S { }\n+   | ---------------- not a `struct`, `enum` or `union`\n \n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/deriving-non-type.rs:14:1\n    |\n LL | #[derive(PartialEq)]\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^ not applicable here\n+LL | static s: usize = 0;\n+   | -------------------- not a `struct`, `enum` or `union`\n \n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/deriving-non-type.rs:17:1\n    |\n LL | #[derive(PartialEq)]\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^ not applicable here\n+LL | const c: usize = 0;\n+   | ------------------- not a `struct`, `enum` or `union`\n \n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/deriving-non-type.rs:20:1\n    |\n LL | #[derive(PartialEq)]\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^ not applicable here\n+LL | mod m { }\n+   | --------- not a `struct`, `enum` or `union`\n \n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/deriving-non-type.rs:23:1\n    |\n LL | #[derive(PartialEq)]\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^ not applicable here\n+LL | extern \"C\" { }\n+   | -------------- not a `struct`, `enum` or `union`\n \n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/deriving-non-type.rs:26:1\n    |\n LL | #[derive(PartialEq)]\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^ not applicable here\n+LL | type A = usize;\n+   | --------------- not a `struct`, `enum` or `union`\n \n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/deriving-non-type.rs:29:1\n    |\n LL | #[derive(PartialEq)]\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^ not applicable here\n+LL | fn main() { }\n+   | ------------- not a `struct`, `enum` or `union`\n \n error: aborting due to 9 previous errors\n "}, {"sha": "fcb4ea1d592b589d81bbeb0a174890e993335348", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,9 +1,6 @@\n error[E0277]: the trait bound `i8: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:24:21\n    |\n-LL |     fn bar(&self){}\n-   |     ------------- required by `Foo::bar`\n-...\n LL |     Foo::<i32>::bar(&1i8);\n    |                     ^^^^ the trait `Foo<i32>` is not implemented for `i8`\n    |\n@@ -13,13 +10,15 @@ LL |     Foo::<i32>::bar(&1i8);\n              <i8 as Foo<u32>>\n              <i8 as Foo<u64>>\n              <i8 as Foo<u8>>\n+note: required by `Foo::bar`\n+  --> $DIR/issue-39802-show-5-trait-impls.rs:2:5\n+   |\n+LL |     fn bar(&self){}\n+   |     ^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:25:21\n    |\n-LL |     fn bar(&self){}\n-   |     ------------- required by `Foo::bar`\n-...\n LL |     Foo::<i32>::bar(&1u8);\n    |                     ^^^^ the trait `Foo<i32>` is not implemented for `u8`\n    |\n@@ -28,13 +27,15 @@ LL |     Foo::<i32>::bar(&1u8);\n              <u8 as Foo<u16>>\n              <u8 as Foo<u32>>\n              <u8 as Foo<u64>>\n+note: required by `Foo::bar`\n+  --> $DIR/issue-39802-show-5-trait-impls.rs:2:5\n+   |\n+LL |     fn bar(&self){}\n+   |     ^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:26:21\n    |\n-LL |     fn bar(&self){}\n-   |     ------------- required by `Foo::bar`\n-...\n LL |     Foo::<i32>::bar(&true);\n    |                     ^^^^^ the trait `Foo<i32>` is not implemented for `bool`\n    |\n@@ -44,6 +45,11 @@ LL |     Foo::<i32>::bar(&true);\n              <bool as Foo<u16>>\n              <bool as Foo<u32>>\n            and 2 others\n+note: required by `Foo::bar`\n+  --> $DIR/issue-39802-show-5-trait-impls.rs:2:5\n+   |\n+LL |     fn bar(&self){}\n+   |     ^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b6078e302360612b8f7c218c8942345c99b57957", "filename": "src/test/ui/error-codes/E0283.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,13 +1,15 @@\n error[E0283]: type annotations needed\n   --> $DIR/E0283.rs:30:21\n    |\n-LL |     fn create() -> u32;\n-   |     ------------------- required by `Generator::create`\n-...\n LL |     let cont: u32 = Generator::create();\n    |                     ^^^^^^^^^^^^^^^^^ cannot infer type\n    |\n    = note: cannot satisfy `_: Generator`\n+note: required by `Generator::create`\n+  --> $DIR/E0283.rs:2:5\n+   |\n+LL |     fn create() -> u32;\n+   |     ^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/E0283.rs:35:24"}, {"sha": "e59b8a8ae35ac1bf3b854b4ac1286eadf274c2fc", "filename": "src/test/ui/error-codes/E0624.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ferror-codes%2FE0624.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ferror-codes%2FE0624.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0624.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0624]: associated function `method` is private\n   --> $DIR/E0624.rs:11:9\n    |\n+LL |         fn method(&self) {}\n+   |         ---------------- private associated function defined here\n+...\n LL |     foo.method();\n    |         ^^^^^^ private associated function\n "}, {"sha": "14697d89e822bb6d1eeb6cbabf51aaa4f5a67fdc", "filename": "src/test/ui/error-codes/E0777.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ferror-codes%2FE0777.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ferror-codes%2FE0777.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0777.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -2,7 +2,7 @@ error[E0777]: expected path to a trait, found literal\n   --> $DIR/E0777.rs:1:10\n    |\n LL | #[derive(\"Clone\")]\n-   |          ^^^^^^^\n+   |          ^^^^^^^ not a trait\n    |\n    = help: try using `#[derive(Clone)]`\n \n@@ -12,7 +12,7 @@ error[E0777]: expected path to a trait, found literal\n LL |   #[derive(\"Clone\n    |  __________^\n LL | | \")]\n-   | |_^\n+   | |_^ not a trait\n    |\n    = help: for example, write `#[derive(Debug)]` for `Debug`\n "}, {"sha": "f4a2330da177381d8e4dd887d5dbe68f629d3170", "filename": "src/test/ui/explore-issue-38412.stderr", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -84,18 +84,33 @@ error[E0624]: associated function `pub_crate` is private\n    |\n LL |     r.pub_crate();\n    |       ^^^^^^^^^ private associated function\n+   | \n+  ::: $DIR/auxiliary/pub-and-stability.rs:114:9\n+   |\n+LL |         pub(crate) fn pub_crate(&self) -> i32 { self.d_priv }\n+   |         ------------------------------------- private associated function defined here\n \n error[E0624]: associated function `pub_mod` is private\n   --> $DIR/explore-issue-38412.rs:51:7\n    |\n LL |     r.pub_mod();\n    |       ^^^^^^^ private associated function\n+   | \n+  ::: $DIR/auxiliary/pub-and-stability.rs:116:9\n+   |\n+LL |         pub(in m) fn pub_mod(&self) -> i32 { self.d_priv }\n+   |         ---------------------------------- private associated function defined here\n \n error[E0624]: associated function `private` is private\n   --> $DIR/explore-issue-38412.rs:52:7\n    |\n LL |     r.private();\n    |       ^^^^^^^ private associated function\n+   | \n+  ::: $DIR/auxiliary/pub-and-stability.rs:118:9\n+   |\n+LL |         fn private(&self) -> i32 { self.d_priv }\n+   |         ------------------------ private associated function defined here\n \n error[E0658]: use of unstable library feature 'unstable_undeclared'\n   --> $DIR/explore-issue-38412.rs:57:7\n@@ -120,18 +135,33 @@ error[E0624]: associated function `pub_crate` is private\n    |\n LL |     t.pub_crate();\n    |       ^^^^^^^^^ private associated function\n+   | \n+  ::: $DIR/auxiliary/pub-and-stability.rs:129:9\n+   |\n+LL |         pub(crate) fn pub_crate(&self) -> i32 { self.0 }\n+   |         ------------------------------------- private associated function defined here\n \n error[E0624]: associated function `pub_mod` is private\n   --> $DIR/explore-issue-38412.rs:64:7\n    |\n LL |     t.pub_mod();\n    |       ^^^^^^^ private associated function\n+   | \n+  ::: $DIR/auxiliary/pub-and-stability.rs:130:9\n+   |\n+LL |         pub(in m) fn pub_mod(&self) -> i32 { self.0 }\n+   |         ---------------------------------- private associated function defined here\n \n error[E0624]: associated function `private` is private\n   --> $DIR/explore-issue-38412.rs:65:7\n    |\n LL |     t.private();\n    |       ^^^^^^^ private associated function\n+   | \n+  ::: $DIR/auxiliary/pub-and-stability.rs:131:9\n+   |\n+LL |         fn private(&self) -> i32 { self.0 }\n+   |         ------------------------ private associated function defined here\n \n error: aborting due to 19 previous errors\n "}, {"sha": "86a352251b2020599743f0cd4fec020c20f4c9e7", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-derive.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-derive.rs?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -2,14 +2,14 @@\n // definitions.\n \n #[derive(Debug)]\n-//~^ ERROR `derive` may only be applied to structs, enums and unions\n+//~^ ERROR `derive` may only be applied to `struct`s, `enum`s and `union`s\n mod derive {\n     mod inner { #![derive(Debug)] }\n-    //~^ ERROR `derive` may only be applied to structs, enums and unions\n+    //~^ ERROR `derive` may only be applied to `struct`s, `enum`s and `union`s\n     //~| ERROR inner macro attributes are unstable\n \n     #[derive(Debug)]\n-    //~^ ERROR `derive` may only be applied to structs, enums and unions\n+    //~^ ERROR `derive` may only be applied to `struct`s, `enum`s and `union`s\n     fn derive() { }\n \n     #[derive(Copy, Clone)] // (can't derive Debug for unions)\n@@ -22,11 +22,11 @@ mod derive {\n     enum E { }\n \n     #[derive(Debug)]\n-    //~^ ERROR `derive` may only be applied to structs, enums and unions\n+    //~^ ERROR `derive` may only be applied to `struct`s, `enum`s and `union`s\n     type T = S;\n \n     #[derive(Debug)]\n-    //~^ ERROR `derive` may only be applied to structs, enums and unions\n+    //~^ ERROR `derive` may only be applied to `struct`s, `enum`s and `union`s\n     impl S { }\n }\n "}, {"sha": "bb8651ffb0955778c0d78a5689ca2e025da17e57", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-derive.stderr", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-derive.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,8 +1,17 @@\n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/issue-43106-gating-of-derive.rs:4:1\n    |\n-LL | #[derive(Debug)]\n-   | ^^^^^^^^^^^^^^^^\n+LL |   #[derive(Debug)]\n+   |   ^^^^^^^^^^^^^^^^ not applicable here\n+LL |\n+LL | / mod derive {\n+LL | |     mod inner { #![derive(Debug)] }\n+LL | |\n+LL | |\n+...  |\n+LL | |     impl S { }\n+LL | | }\n+   | |_- not a `struct`, `enum` or `union`\n \n error[E0658]: inner macro attributes are unstable\n   --> $DIR/issue-43106-gating-of-derive.rs:7:20\n@@ -13,29 +22,41 @@ LL |     mod inner { #![derive(Debug)] }\n    = note: see issue #54726 <https://github.com/rust-lang/rust/issues/54726> for more information\n    = help: add `#![feature(custom_inner_attributes)]` to the crate attributes to enable\n \n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/issue-43106-gating-of-derive.rs:7:17\n    |\n LL |     mod inner { #![derive(Debug)] }\n-   |                 ^^^^^^^^^^^^^^^^^\n+   |     ------------^^^^^^^^^^^^^^^^^--\n+   |     |           |\n+   |     |           not applicable here\n+   |     not a `struct`, `enum` or `union`\n \n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/issue-43106-gating-of-derive.rs:11:5\n    |\n LL |     #[derive(Debug)]\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^ not applicable here\n+LL |\n+LL |     fn derive() { }\n+   |     --------------- not a `struct`, `enum` or `union`\n \n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/issue-43106-gating-of-derive.rs:24:5\n    |\n LL |     #[derive(Debug)]\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^ not applicable here\n+LL |\n+LL |     type T = S;\n+   |     ----------- not a `struct`, `enum` or `union`\n \n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/issue-43106-gating-of-derive.rs:28:5\n    |\n LL |     #[derive(Debug)]\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^ not applicable here\n+LL |\n+LL |     impl S { }\n+   |     ---------- not a `struct`, `enum` or `union`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "0a68c24b6067cdfa2b41f6be87f541d2a1657aab", "filename": "src/test/ui/fmt/ifmt-unimpl.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -5,7 +5,11 @@ LL |     format!(\"{:X}\", \"3\");\n    |                     ^^^ the trait `UpperHex` is not implemented for `str`\n    |\n    = note: required because of the requirements on the impl of `UpperHex` for `&str`\n-   = note: required by `std::fmt::UpperHex::fmt`\n+note: required by `std::fmt::UpperHex::fmt`\n+  --> $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+   |\n+LL |     fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "7eac8c9c5a8df12fabbb531da3fe5942dfc9494e", "filename": "src/test/ui/for/for-c-in-str.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -6,7 +6,11 @@ LL |     for c in \"asdf\" {\n    |\n    = help: the trait `Iterator` is not implemented for `&str`\n    = note: required because of the requirements on the impl of `IntoIterator` for `&str`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "288243325c48c412064798a85a89becb012a869c", "filename": "src/test/ui/for/for-loop-bogosity.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ffor%2Ffor-loop-bogosity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ffor%2Ffor-loop-bogosity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-loop-bogosity.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -6,7 +6,11 @@ LL |     for x in bogus {\n    |\n    = help: the trait `Iterator` is not implemented for `MyStruct`\n    = note: required because of the requirements on the impl of `IntoIterator` for `MyStruct`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "dff743bc35b2dafd67d0decd1966f9ec7d8d84b1", "filename": "src/test/ui/generator/yield-outside-generator-issue-78653.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fgenerator%2Fyield-outside-generator-issue-78653.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fgenerator%2Fyield-outside-generator-issue-78653.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-outside-generator-issue-78653.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -13,7 +13,11 @@ LL |     yield || for i in 0 { }\n    = help: the trait `Iterator` is not implemented for `{integer}`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `{integer}`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "585ba16a491b7b5b6e38413293c224e70f627fb3", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -47,7 +47,11 @@ error[E0277]: the trait bound `T: Copy` is not satisfied\n LL |     type C where Self: Copy = String;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n-   = note: required because of the requirements on the impl of `Copy` for `Fooy<T>`\n+note: required because of the requirements on the impl of `Copy` for `Fooy<T>`\n+  --> $DIR/impl_bounds.rs:11:10\n+   |\n+LL | #[derive(Copy, Clone)]\n+   |          ^^^^\n note: the requirement `Fooy<T>: Copy` appears on the associated impl type `C` but not on the corresponding associated trait type\n   --> $DIR/impl_bounds.rs:7:5\n    |\n@@ -56,6 +60,7 @@ LL | trait Foo {\n ...\n LL |     type C where Self: Clone;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ this trait associated type doesn't have the requirement `Fooy<T>: Copy`\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::marker::Copy> Foo for Fooy<T> {\n@@ -67,7 +72,11 @@ error[E0277]: the trait bound `T: Copy` is not satisfied\n LL |     fn d() where Self: Copy {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n-   = note: required because of the requirements on the impl of `Copy` for `Fooy<T>`\n+note: required because of the requirements on the impl of `Copy` for `Fooy<T>`\n+  --> $DIR/impl_bounds.rs:11:10\n+   |\n+LL | #[derive(Copy, Clone)]\n+   |          ^^^^\n note: the requirement `Fooy<T>: Copy` appears on the impl method `d` but not on the corresponding trait method\n   --> $DIR/impl_bounds.rs:8:8\n    |\n@@ -76,6 +85,7 @@ LL | trait Foo {\n ...\n LL |     fn d() where Self: Clone;\n    |        ^ this trait method doesn't have the requirement `Fooy<T>: Copy`\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::marker::Copy> Foo for Fooy<T> {"}, {"sha": "3b89e8bc451518b1714dfd14df5a1c5603977b25", "filename": "src/test/ui/issues/issue-12997-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-12997-2.rs:8:1\n    |\n+LL | #[bench]\n+   | -------- in this procedural macro expansion\n LL | fn bar(x: isize) { }\n    | ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&mut Bencher`\n    |"}, {"sha": "ee1464fd8481105f4f87e2969c2dc80aaccaf7b2", "filename": "src/test/ui/issues/issue-17651.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -5,7 +5,11 @@ LL |     (|| Box::new(*(&[0][..])))();\n    |                  ^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[{integer}]`\n-   = note: required by `Box::<T>::new`\n+note: required by `Box::<T>::new`\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+   |\n+LL |     pub fn new(x: T) -> Self {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `[{integer}]` cannot be known at compilation time\n   --> $DIR/issue-17651.rs:5:9"}, {"sha": "25a90df45613b9b8e2777a9965c2b1b90c46f045", "filename": "src/test/ui/issues/issue-20605.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -6,7 +6,11 @@ LL |     for item in *things { *item = 0 }\n    |\n    = help: the trait `Sized` is not implemented for `dyn Iterator<Item = &'a mut u8>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `dyn Iterator<Item = &'a mut u8>`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c864381e6b0a629d9779de007a76361cefe74fec", "filename": "src/test/ui/issues/issue-21160.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,8 @@\n error[E0277]: the trait bound `Bar: Hash` is not satisfied\n   --> $DIR/issue-21160.rs:8:12\n    |\n+LL | #[derive(Hash)]\n+   |          ---- in this derive macro expansion\n LL | struct Foo(Bar);\n    |            ^^^ the trait `Hash` is not implemented for `Bar`\n    | "}, {"sha": "47f28d7c443fcce61b15e9860a0f4659223d2eca", "filename": "src/test/ui/issues/issue-21202.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-21202.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-21202.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21202.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -3,6 +3,11 @@ error[E0624]: associated function `foo` is private\n    |\n LL |         Foo::foo(&f);\n    |              ^^^ private associated function\n+   | \n+  ::: $DIR/auxiliary/issue-21202.rs:4:9\n+   |\n+LL |         fn foo(&self) { }\n+   |         ------------- private associated function defined here\n \n error: aborting due to previous error\n "}, {"sha": "70caeb0ea39092578f8c7d32a234dfd8504f645f", "filename": "src/test/ui/issues/issue-28098.stderr", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28098.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -5,7 +5,11 @@ LL |     let _ = Iterator::next(&mut ());\n    |                            ^^^^^^^ `()` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n-   = note: required by `std::iter::Iterator::next`\n+note: required by `std::iter::Iterator::next`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |     fn next(&mut self) -> Option<Self::Item>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `bool` is not an iterator\n   --> $DIR/issue-28098.rs:6:14\n@@ -15,7 +19,11 @@ LL |     for _ in false {}\n    |\n    = help: the trait `Iterator` is not implemented for `bool`\n    = note: required because of the requirements on the impl of `IntoIterator` for `bool`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:9:28\n@@ -24,7 +32,11 @@ LL |     let _ = Iterator::next(&mut ());\n    |                            ^^^^^^^ `()` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n-   = note: required by `std::iter::Iterator::next`\n+note: required by `std::iter::Iterator::next`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |     fn next(&mut self) -> Option<Self::Item>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:2:13\n@@ -41,7 +53,11 @@ LL |     let _ = Iterator::next(&mut ());\n    |                            ^^^^^^^ `()` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n-   = note: required by `std::iter::Iterator::next`\n+note: required by `std::iter::Iterator::next`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |     fn next(&mut self) -> Option<Self::Item>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:22:28\n@@ -50,7 +66,11 @@ LL |     let _ = Iterator::next(&mut ());\n    |                            ^^^^^^^ `()` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n-   = note: required by `std::iter::Iterator::next`\n+note: required by `std::iter::Iterator::next`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |     fn next(&mut self) -> Option<Self::Item>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `bool` is not an iterator\n   --> $DIR/issue-28098.rs:25:14\n@@ -60,7 +80,11 @@ LL |     for _ in false {}\n    |\n    = help: the trait `Iterator` is not implemented for `bool`\n    = note: required because of the requirements on the impl of `IntoIterator` for `bool`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:18:13"}, {"sha": "f00d5d32bbf28d6bc40fcfdb732e3cdebd512587", "filename": "src/test/ui/issues/issue-29147.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,13 +1,15 @@\n error[E0283]: type annotations needed\n   --> $DIR/issue-29147.rs:21:13\n    |\n-LL | trait Foo { fn xxx(&self); }\n-   |             -------------- required by `Foo::xxx`\n-...\n LL |     let _ = <S5<_>>::xxx;\n    |             ^^^^^^^^^^^^ cannot infer type for struct `S5<_>`\n    |\n    = note: cannot satisfy `S5<_>: Foo`\n+note: required by `Foo::xxx`\n+  --> $DIR/issue-29147.rs:10:13\n+   |\n+LL | trait Foo { fn xxx(&self); }\n+   |             ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "bc7eb0688ee84bb68bafa8803967f1f8b974b909", "filename": "src/test/ui/issues/issue-32709.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -8,7 +8,11 @@ LL |     Err(5)?;\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, {integer}>>` for `Result<i32, ()>`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d588214f5077c9f3d459e943bfd09d6e9e099c27", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -17,7 +17,11 @@ LL |     for _ in HashMap::new().iter().cloned() {}\n                   found tuple `(&_, &_)`\n    = note: required because of the requirements on the impl of `Iterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _, _> as Iterator>::Item == &_`\n   --> $DIR/issue-33941.rs:4:14\n@@ -28,7 +32,11 @@ LL |     for _ in HashMap::new().iter().cloned() {}\n    = note: expected reference `&_`\n                   found tuple `(&_, &_)`\n    = note: required because of the requirements on the impl of `Iterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n-   = note: required by `std::iter::Iterator::next`\n+note: required by `std::iter::Iterator::next`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |     fn next(&mut self) -> Option<Self::Item>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "fba75de8cc0523f8c746178f738a838df4ee0b11", "filename": "src/test/ui/issues/issue-34229.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -2,10 +2,16 @@ error[E0277]: can't compare `Comparable` with `Comparable`\n   --> $DIR/issue-34229.rs:2:46\n    |\n LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n-   |                                              ^^^^^^^^^^ no implementation for `Comparable < Comparable` and `Comparable > Comparable`\n+   |                     ----------               ^^^^^^^^^^ no implementation for `Comparable < Comparable` and `Comparable > Comparable`\n+   |                     |\n+   |                     in this derive macro expansion\n    |\n    = help: the trait `PartialOrd` is not implemented for `Comparable`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+note: required by `std::cmp::PartialOrd::partial_cmp`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "6f4567546d00b6a206282ac762f14af0b3080a6c", "filename": "src/test/ui/issues/issue-3763.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-3763.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-3763.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3763.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -13,12 +13,18 @@ LL |     let _woohoo = (Box::new(my_struct)).priv_field;\n error[E0624]: associated function `happyfun` is private\n   --> $DIR/issue-3763.rs:24:18\n    |\n+LL |         fn happyfun(&self) {}\n+   |         ------------------ private associated function defined here\n+...\n LL |     (&my_struct).happyfun();\n    |                  ^^^^^^^^ private associated function\n \n error[E0624]: associated function `happyfun` is private\n   --> $DIR/issue-3763.rs:26:27\n    |\n+LL |         fn happyfun(&self) {}\n+   |         ------------------ private associated function defined here\n+...\n LL |     (Box::new(my_struct)).happyfun();\n    |                           ^^^^^^^^ private associated function\n "}, {"sha": "f609e47e818d493bfb9447be009384952c30f312", "filename": "src/test/ui/issues/issue-39970.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,9 +1,6 @@\n error[E0271]: type mismatch resolving `for<'a> <() as Array<'a>>::Element == ()`\n   --> $DIR/issue-39970.rs:19:5\n    |\n-LL |     fn visit() {}\n-   |     ---------- required by `Visit::visit`\n-...\n LL |     <() as Visit>::visit();\n    |     ^^^^^^^^^^^^^^^^^^^^ expected `()`, found `&()`\n    |\n@@ -12,6 +9,11 @@ note: required because of the requirements on the impl of `Visit` for `()`\n    |\n LL | impl Visit for () where\n    |      ^^^^^     ^^\n+note: required by `Visit::visit`\n+  --> $DIR/issue-39970.rs:6:5\n+   |\n+LL |     fn visit() {}\n+   |     ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c0208e680841eec256346603280c756516055d05", "filename": "src/test/ui/issues/issue-43023.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-43023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-43023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43023.rs?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,19 +1,19 @@\n struct S;\n \n impl S {\n-    #[derive(Debug)] //~ ERROR `derive` may only be applied to structs, enums and unions\n+    #[derive(Debug)] //~ ERROR `derive` may only be applied to `struct`s, `enum`s and `union`s\n     fn f() {\n         file!();\n     }\n }\n \n trait Tr1 {\n-    #[derive(Debug)] //~ ERROR `derive` may only be applied to structs, enums and unions\n+    #[derive(Debug)] //~ ERROR `derive` may only be applied to `struct`s, `enum`s and `union`s\n     fn f();\n }\n \n trait Tr2 {\n-    #[derive(Debug)] //~ ERROR `derive` may only be applied to structs, enums and unions\n+    #[derive(Debug)] //~ ERROR `derive` may only be applied to `struct`s, `enum`s and `union`s\n     type F;\n }\n "}, {"sha": "007eb259594704110e040ce39dd10a78f3505b9c", "filename": "src/test/ui/issues/issue-43023.stderr", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-43023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-43023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43023.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,20 +1,28 @@\n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/issue-43023.rs:4:5\n    |\n-LL |     #[derive(Debug)]\n-   |     ^^^^^^^^^^^^^^^^\n+LL |       #[derive(Debug)]\n+   |       ^^^^^^^^^^^^^^^^ not applicable here\n+LL | /     fn f() {\n+LL | |         file!();\n+LL | |     }\n+   | |_____- not a `struct`, `enum` or `union`\n \n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/issue-43023.rs:11:5\n    |\n LL |     #[derive(Debug)]\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^ not applicable here\n+LL |     fn f();\n+   |     ------- not a `struct`, `enum` or `union`\n \n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/issue-43023.rs:16:5\n    |\n LL |     #[derive(Debug)]\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^ not applicable here\n+LL |     type F;\n+   |     ------- not a `struct`, `enum` or `union`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "119d84a068859f1ad043cd85533063160af0d9ec", "filename": "src/test/ui/issues/issue-49934.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-49934.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-49934.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49934.rs?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -7,24 +7,24 @@ fn main() {\n     struct Foo;\n \n     // fold_stmt (Mac)\n-    #[derive(Debug)] //~ ERROR `derive` may only be applied to structs, enums and unions\n+    #[derive(Debug)] //~ ERROR `derive` may only be applied to `struct`s, `enum`s and `union`s\n     println!(\"Hello, world!\");\n \n     // fold_stmt (Semi)\n-    #[derive(Debug)] //~ ERROR `derive` may only be applied to structs, enums and unions\n+    #[derive(Debug)] //~ ERROR `derive` may only be applied to `struct`s, `enum`s and `union`s\n     \"Hello, world!\";\n \n     // fold_stmt (Local)\n-    #[derive(Debug)] //~ ERROR `derive` may only be applied to structs, enums and unions\n+    #[derive(Debug)] //~ ERROR `derive` may only be applied to `struct`s, `enum`s and `union`s\n     let _ = \"Hello, world!\";\n \n     // visit_expr\n     let _ = #[derive(Debug)] \"Hello, world!\";\n-    //~^ ERROR `derive` may only be applied to structs, enums and unions\n+    //~^ ERROR `derive` may only be applied to `struct`s, `enum`s and `union`s\n \n     let _ = [\n         // filter_map_expr\n-        #[derive(Debug)] //~ ERROR `derive` may only be applied to structs, enums and unions\n+        #[derive(Debug)] //~ ERROR `derive` may only be applied to `struct`s, `enum`s and `union`s\n         \"Hello, world!\",\n     ];\n }"}, {"sha": "f2ff541bb9925026215b068ea5c113467cee182d", "filename": "src/test/ui/issues/issue-49934.stderr", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-49934.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-49934.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49934.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,32 +1,42 @@\n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/issue-49934.rs:10:5\n    |\n LL |     #[derive(Debug)]\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^ not applicable here\n+LL |     println!(\"Hello, world!\");\n+   |     -------------------------- not a `struct`, `enum` or `union`\n \n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/issue-49934.rs:14:5\n    |\n LL |     #[derive(Debug)]\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^ not applicable here\n+LL |     \"Hello, world!\";\n+   |     ---------------- not a `struct`, `enum` or `union`\n \n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/issue-49934.rs:18:5\n    |\n LL |     #[derive(Debug)]\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^ not applicable here\n+LL |     let _ = \"Hello, world!\";\n+   |     ------------------------ not a `struct`, `enum` or `union`\n \n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/issue-49934.rs:22:13\n    |\n LL |     let _ = #[derive(Debug)] \"Hello, world!\";\n-   |             ^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^ --------------- not a `struct`, `enum` or `union`\n+   |             |\n+   |             not applicable here\n \n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/issue-49934.rs:27:9\n    |\n LL |         #[derive(Debug)]\n-   |         ^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^ not applicable here\n+LL |         \"Hello, world!\",\n+   |         --------------- not a `struct`, `enum` or `union`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "b28fbff62b907f6569c61b5ac100e76a0e7125f6", "filename": "src/test/ui/issues/issue-53498.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-53498.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-53498.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53498.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0624]: associated function `foo` is private\n   --> $DIR/issue-53498.rs:16:27\n    |\n+LL |         fn foo() {}\n+   |         -------- private associated function defined here\n+...\n LL |     test::Foo::<test::B>::foo();\n    |                           ^^^ private associated function\n "}, {"sha": "a1715bd99e094c8bdd9373465c0dcc157a8bd0e7", "filename": "src/test/ui/issues/issue-58022.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -7,9 +7,6 @@ LL |         Foo(Box::new(*slice))\n error[E0283]: type annotations needed\n   --> $DIR/issue-58022.rs:4:25\n    |\n-LL |     const SIZE: usize;\n-   |     ------------------ required by `Foo::SIZE`\n-LL | \n LL |     fn new(slice: &[u8; Foo::SIZE]) -> Self;\n    |                         ^^^^^^^^^\n    |                         |\n@@ -18,6 +15,11 @@ LL |     fn new(slice: &[u8; Foo::SIZE]) -> Self;\n    |\n    = note: cannot satisfy `_: Foo`\n    = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n+note: required by `Foo::SIZE`\n+  --> $DIR/issue-58022.rs:2:5\n+   |\n+LL |     const SIZE: usize;\n+   |     ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "59a521c7360faaefb8e8ab376e301e9b12c69756", "filename": "src/test/ui/issues/issue-66353.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-66353.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-66353.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66353.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -7,11 +7,14 @@ LL |     _Func::< <() as _A>::AssocT >::func(());\n error[E0277]: the trait bound `(): _Func<_>` is not satisfied\n   --> $DIR/issue-66353.rs:12:41\n    |\n-LL |     fn func(_: Self);\n-   |     ----------------- required by `_Func::func`\n-...\n LL |     _Func::< <() as _A>::AssocT >::func(());\n    |                                         ^^ the trait `_Func<_>` is not implemented for `()`\n+   |\n+note: required by `_Func::func`\n+  --> $DIR/issue-66353.rs:4:5\n+   |\n+LL |     fn func(_: Self);\n+   |     ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "af3459a7d2d6fec7194d42c57f85009d3acfc8d3", "filename": "src/test/ui/issues/issue-72690.stderr", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -5,7 +5,11 @@ LL |     String::from(\"x\".as_ref());\n    |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n-   = note: required by `from`\n+note: required by `from`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn from(_: T) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0282]: type annotations needed\n   --> $DIR/issue-72690.rs:11:6\n@@ -30,7 +34,11 @@ LL |     String::from(\"x\".as_ref());\n    |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n-   = note: required by `from`\n+note: required by `from`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn from(_: T) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:25:5\n@@ -39,7 +47,11 @@ LL |     String::from(\"x\".as_ref());\n    |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n-   = note: required by `from`\n+note: required by `from`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn from(_: T) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:33:5\n@@ -48,7 +60,11 @@ LL |     String::from(\"x\".as_ref());\n    |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n-   = note: required by `from`\n+note: required by `from`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn from(_: T) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:41:5\n@@ -57,7 +73,11 @@ LL |     String::from(\"x\".as_ref());\n    |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n-   = note: required by `from`\n+note: required by `from`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn from(_: T) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:47:5\n@@ -66,7 +86,11 @@ LL |     String::from(\"x\".as_ref());\n    |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n-   = note: required by `from`\n+note: required by `from`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn from(_: T) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:55:5\n@@ -75,7 +99,11 @@ LL |     String::from(\"x\".as_ref());\n    |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n-   = note: required by `from`\n+note: required by `from`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn from(_: T) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 9 previous errors\n "}, {"sha": "60b2cbfdf4592f2ddcf24fef389c88d49ad2530a", "filename": "src/test/ui/iterators/integral.stderr", "status": "modified", "additions": 60, "deletions": 12, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fiterators%2Fintegral.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fiterators%2Fintegral.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fintegral.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -7,7 +7,11 @@ LL |     for _ in 42 {}\n    = help: the trait `Iterator` is not implemented for `{integer}`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `{integer}`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `u8` is not an iterator\n   --> $DIR/integral.rs:4:14\n@@ -18,7 +22,11 @@ LL |     for _ in 42 as u8 {}\n    = help: the trait `Iterator` is not implemented for `u8`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `u8`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `i8` is not an iterator\n   --> $DIR/integral.rs:6:14\n@@ -29,7 +37,11 @@ LL |     for _ in 42 as i8 {}\n    = help: the trait `Iterator` is not implemented for `i8`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `i8`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `u16` is not an iterator\n   --> $DIR/integral.rs:8:14\n@@ -40,7 +52,11 @@ LL |     for _ in 42 as u16 {}\n    = help: the trait `Iterator` is not implemented for `u16`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `u16`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `i16` is not an iterator\n   --> $DIR/integral.rs:10:14\n@@ -51,7 +67,11 @@ LL |     for _ in 42 as i16 {}\n    = help: the trait `Iterator` is not implemented for `i16`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `i16`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `u32` is not an iterator\n   --> $DIR/integral.rs:12:14\n@@ -62,7 +82,11 @@ LL |     for _ in 42 as u32 {}\n    = help: the trait `Iterator` is not implemented for `u32`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `u32`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `i32` is not an iterator\n   --> $DIR/integral.rs:14:14\n@@ -73,7 +97,11 @@ LL |     for _ in 42 as i32 {}\n    = help: the trait `Iterator` is not implemented for `i32`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `i32`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `u64` is not an iterator\n   --> $DIR/integral.rs:16:14\n@@ -84,7 +112,11 @@ LL |     for _ in 42 as u64 {}\n    = help: the trait `Iterator` is not implemented for `u64`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `u64`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `i64` is not an iterator\n   --> $DIR/integral.rs:18:14\n@@ -95,7 +127,11 @@ LL |     for _ in 42 as i64 {}\n    = help: the trait `Iterator` is not implemented for `i64`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `i64`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `usize` is not an iterator\n   --> $DIR/integral.rs:20:14\n@@ -106,7 +142,11 @@ LL |     for _ in 42 as usize {}\n    = help: the trait `Iterator` is not implemented for `usize`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `usize`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `isize` is not an iterator\n   --> $DIR/integral.rs:22:14\n@@ -117,7 +157,11 @@ LL |     for _ in 42 as isize {}\n    = help: the trait `Iterator` is not implemented for `isize`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `isize`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `{float}` is not an iterator\n   --> $DIR/integral.rs:24:14\n@@ -127,7 +171,11 @@ LL |     for _ in 42.0 {}\n    |\n    = help: the trait `Iterator` is not implemented for `{float}`\n    = note: required because of the requirements on the impl of `IntoIterator` for `{float}`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 12 previous errors\n "}, {"sha": "fdc33862c0aba1392f72c2c9d5e0fdcc6a7ea261", "filename": "src/test/ui/iterators/ranges.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fiterators%2Franges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fiterators%2Franges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Franges.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -7,7 +7,11 @@ LL |     for _ in ..10 {}\n    = help: the trait `Iterator` is not implemented for `RangeTo<{integer}>`\n    = note: `..end` is a `RangeTo`, which cannot be iterated on; you might have meant to have a bounded `Range`: `0..end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `RangeTo<{integer}>`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `RangeToInclusive<{integer}>` is not an iterator\n   --> $DIR/ranges.rs:4:14\n@@ -18,7 +22,11 @@ LL |     for _ in ..=10 {}\n    = help: the trait `Iterator` is not implemented for `RangeToInclusive<{integer}>`\n    = note: `..=end` is a `RangeToInclusive`, which cannot be iterated on; you might have meant to have a bounded `RangeInclusive`: `0..=end`\n    = note: required because of the requirements on the impl of `IntoIterator` for `RangeToInclusive<{integer}>`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f7089be2772968ce60112912f3ead2fcd4f14375", "filename": "src/test/ui/iterators/string.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fiterators%2Fstring.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fiterators%2Fstring.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fstring.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -6,7 +6,11 @@ LL |     for _ in \"\".to_owned() {}\n    |\n    = help: the trait `Iterator` is not implemented for `String`\n    = note: required because of the requirements on the impl of `IntoIterator` for `String`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `&str` is not an iterator\n   --> $DIR/string.rs:4:14\n@@ -16,7 +20,11 @@ LL |     for _ in \"\" {}\n    |\n    = help: the trait `Iterator` is not implemented for `&str`\n    = note: required because of the requirements on the impl of `IntoIterator` for `&str`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b2fdd2e1965818fbb2543551d1e88f21dc10e6a7", "filename": "src/test/ui/macros/trace_faulty_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.rs?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -39,5 +39,5 @@ fn main() {\n #[my_macro]\n fn use_bang_macro_as_attr() {}\n \n-#[derive(Debug)] //~ ERROR `derive` may only be applied to structs\n+#[derive(Debug)] //~ ERROR `derive` may only be applied to `struct`s\n fn use_derive_macro_as_attr() {}"}, {"sha": "38affde5f6c3301ac07522fe34fea420cb56c99b", "filename": "src/test/ui/macros/trace_faulty_macros.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -60,11 +60,13 @@ LL |     let a = pat_macro!();\n    |\n    = note: this error originates in the macro `pat_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/trace_faulty_macros.rs:42:1\n    |\n LL | #[derive(Debug)]\n-   | ^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^ not applicable here\n+LL | fn use_derive_macro_as_attr() {}\n+   | -------------------------------- not a `struct`, `enum` or `union`\n \n note: trace_macro\n   --> $DIR/trace_faulty_macros.rs:36:13"}, {"sha": "804b6282202be85cd9082d4bab3c18233cbcca47", "filename": "src/test/ui/on-unimplemented/multiple-impls.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,35 +1,41 @@\n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/multiple-impls.rs:33:18\n    |\n-LL |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     --------------------------------------------- required by `Index::index`\n-...\n LL |     Index::index(&[] as &[i32], 2u32);\n    |                  ^^^^^^^^^^^^^ trait message\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n+note: required by `Index::index`\n+  --> $DIR/multiple-impls.rs:12:5\n+   |\n+LL |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:36:18\n    |\n-LL |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     --------------------------------------------- required by `Index::index`\n-...\n LL |     Index::index(&[] as &[i32], Foo(2u32));\n    |                  ^^^^^^^^^^^^^ on impl for Foo\n    |\n    = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n+note: required by `Index::index`\n+  --> $DIR/multiple-impls.rs:12:5\n+   |\n+LL |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:39:18\n    |\n-LL |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     --------------------------------------------- required by `Index::index`\n-...\n LL |     Index::index(&[] as &[i32], Bar(2u32));\n    |                  ^^^^^^^^^^^^^ on impl for Bar\n    |\n    = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n+note: required by `Index::index`\n+  --> $DIR/multiple-impls.rs:12:5\n+   |\n+LL |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/multiple-impls.rs:33:5"}, {"sha": "bfd438e5cc215212efa3983cd252901ce12a56fc", "filename": "src/test/ui/on-unimplemented/on-impl.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/on-impl.rs:22:25\n    |\n-LL |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     --------------------------------------------- required by `Index::index`\n-...\n LL |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n    |                         ^^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n+note: required by `Index::index`\n+  --> $DIR/on-impl.rs:9:5\n+   |\n+LL |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/on-impl.rs:22:5"}, {"sha": "5c229431ad34cc2c0edb378e30498ba04142a37d", "filename": "src/test/ui/parser/struct-literal-in-for.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -25,7 +25,11 @@ LL | |     }.hi() {\n    |\n    = help: the trait `Iterator` is not implemented for `bool`\n    = note: required because of the requirements on the impl of `IntoIterator` for `bool`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "70e6fcb7a07ed2409e7ad8b6f0cae030a0acc69f", "filename": "src/test/ui/privacy/privacy1.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -157,30 +157,45 @@ LL |     trait B {\n error[E0624]: associated function `bar` is private\n   --> $DIR/privacy1.rs:77:23\n    |\n+LL |             fn bar() {}\n+   |             -------- private associated function defined here\n+...\n LL |         self::baz::A::bar();\n    |                       ^^^ private associated function\n \n error[E0624]: associated function `bar` is private\n   --> $DIR/privacy1.rs:95:13\n    |\n+LL |         fn bar() {}\n+   |         -------- private associated function defined here\n+...\n LL |     bar::A::bar();\n    |             ^^^ private associated function\n \n error[E0624]: associated function `bar` is private\n   --> $DIR/privacy1.rs:102:19\n    |\n+LL |         fn bar() {}\n+   |         -------- private associated function defined here\n+...\n LL |         ::bar::A::bar();\n    |                   ^^^ private associated function\n \n error[E0624]: associated function `bar` is private\n   --> $DIR/privacy1.rs:105:24\n    |\n+LL |             fn bar() {}\n+   |             -------- private associated function defined here\n+...\n LL |         ::bar::baz::A::bar();\n    |                        ^^^ private associated function\n \n error[E0624]: associated function `bar2` is private\n   --> $DIR/privacy1.rs:108:23\n    |\n+LL |             fn bar2(&self) {}\n+   |             -------------- private associated function defined here\n+...\n LL |         ::bar::baz::A.bar2();\n    |                       ^^^^ private associated function\n "}, {"sha": "bb54dce7e7e05d4d08e827dfbbfabe08f2c22dd4", "filename": "src/test/ui/privacy/private-impl-method.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-impl-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-impl-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-impl-method.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0624]: associated function `foo` is private\n   --> $DIR/private-impl-method.rs:20:7\n    |\n+LL |         fn foo(&self) {}\n+   |         ------------- private associated function defined here\n+...\n LL |     s.foo();\n    |       ^^^ private associated function\n "}, {"sha": "65329329933635e1e52aea8b8e627fcb230d12f2", "filename": "src/test/ui/privacy/private-method-cross-crate.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-cross-crate.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -3,6 +3,11 @@ error[E0624]: associated function `nap` is private\n    |\n LL |   nyan.nap();\n    |        ^^^ private associated function\n+   | \n+  ::: $DIR/auxiliary/cci_class_5.rs:8:9\n+   |\n+LL |         fn nap(&self) {}\n+   |         ------------- private associated function defined here\n \n error: aborting due to previous error\n "}, {"sha": "011a7fee478a65b35e1f6fc0e42f5671d9f00fdd", "filename": "src/test/ui/privacy/private-method-inherited.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-inherited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-inherited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-inherited.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0624]: associated function `f` is private\n   --> $DIR/private-method-inherited.rs:13:7\n    |\n+LL |         fn f(self) {}\n+   |         ---------- private associated function defined here\n+...\n LL |     x.f();\n    |       ^ private associated function\n "}, {"sha": "17c7179dc3684ed53186edb50a13f6f020c1281d", "filename": "src/test/ui/privacy/private-method.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0624]: associated function `nap` is private\n   --> $DIR/private-method.rs:22:8\n    |\n+LL |         fn nap(&self) {}\n+   |         ------------- private associated function defined here\n+...\n LL |   nyan.nap();\n    |        ^^^ private associated function\n "}, {"sha": "6950667f1ea0ba6810c373afdef82cac1f9c1a6b", "filename": "src/test/ui/privacy/restricted/test.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -55,12 +55,18 @@ LL |     S::default().x;\n error[E0624]: associated function `f` is private\n   --> $DIR/test.rs:32:18\n    |\n+LL |             pub(super) fn f(&self) {}\n+   |             ---------------------- private associated function defined here\n+...\n LL |     S::default().f();\n    |                  ^ private associated function\n \n error[E0624]: associated function `g` is private\n   --> $DIR/test.rs:33:8\n    |\n+LL |             pub(super) fn g() {}\n+   |             ----------------- private associated function defined here\n+...\n LL |     S::g();\n    |        ^ private associated function\n \n@@ -81,12 +87,22 @@ error[E0624]: associated function `g` is private\n    |\n LL |     u.g();\n    |       ^ private associated function\n+   | \n+  ::: $DIR/auxiliary/pub_restricted.rs:14:5\n+   |\n+LL |     pub(crate) fn g(&self) {}\n+   |     ---------------------- private associated function defined here\n \n error[E0624]: associated function `h` is private\n   --> $DIR/test.rs:46:7\n    |\n LL |     u.h();\n    |       ^ private associated function\n+   | \n+  ::: $DIR/auxiliary/pub_restricted.rs:15:5\n+   |\n+LL |     crate fn h(&self) {}\n+   |     ----------------- private associated function defined here\n \n error: aborting due to 12 previous errors\n "}, {"sha": "6c30e8f4f9558da2a9a3265d1d77c45bea2e0ed6", "filename": "src/test/ui/proc-macro/attributes-on-modules-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.rs?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -13,7 +13,7 @@ mod m {\n struct Y;\n type A = X; //~ ERROR cannot find type `X` in this scope\n \n-#[derive(Copy)] //~ ERROR `derive` may only be applied to structs, enums and unions\n+#[derive(Copy)] //~ ERROR `derive` may only be applied to `struct`s, `enum`s and `union`s\n mod n {}\n \n #[empty_attr]"}, {"sha": "bb6cbb6984d7c1dd30072f73fda3db31a1fd31ea", "filename": "src/test/ui/proc-macro/attributes-on-modules-fail.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,8 +1,10 @@\n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/attributes-on-modules-fail.rs:16:1\n    |\n LL | #[derive(Copy)]\n-   | ^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^ not applicable here\n+LL | mod n {}\n+   | -------- not a `struct`, `enum` or `union`\n \n error[E0658]: non-inline modules in proc macro input are unstable\n   --> $DIR/attributes-on-modules-fail.rs:20:1"}, {"sha": "c8b26b00597dee378dfe5fa38e8bf793307a3031", "filename": "src/test/ui/proc-macro/macros-in-extern-derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern-derive.rs?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,5 +1,5 @@\n extern \"C\" {\n-    #[derive(Copy)] //~ ERROR `derive` may only be applied to structs, enums and unions\n+    #[derive(Copy)] //~ ERROR `derive` may only be applied to `struct`s, `enum`s and `union`s\n     fn f();\n }\n "}, {"sha": "efd9ff22506ce1b82e7af512486380fdf26d834b", "filename": "src/test/ui/proc-macro/macros-in-extern-derive.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern-derive.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,8 +1,10 @@\n-error[E0774]: `derive` may only be applied to structs, enums and unions\n+error[E0774]: `derive` may only be applied to `struct`s, `enum`s and `union`s\n   --> $DIR/macros-in-extern-derive.rs:2:5\n    |\n LL |     #[derive(Copy)]\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^ not applicable here\n+LL |     fn f();\n+   |     ------- not a `struct`, `enum` or `union`\n \n error: aborting due to previous error\n "}, {"sha": "c3904d62c8df38c0ce536e8594f0bca9bc54ffa0", "filename": "src/test/ui/proc-macro/span-from-proc-macro.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fproc-macro%2Fspan-from-proc-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fproc-macro%2Fspan-from-proc-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-from-proc-macro.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -10,7 +10,7 @@ LL |             field: MissingType\n   ::: $DIR/span-from-proc-macro.rs:8:1\n    |\n LL | #[error_from_attribute]\n-   | ----------------------- in this macro invocation\n+   | ----------------------- in this procedural macro expansion\n \n error[E0412]: cannot find type `OtherMissingType` in this scope\n   --> $DIR/auxiliary/span-from-proc-macro.rs:46:21\n@@ -24,7 +24,7 @@ LL |             Variant(OtherMissingType)\n   ::: $DIR/span-from-proc-macro.rs:11:10\n    |\n LL | #[derive(ErrorFromDerive)]\n-   |          --------------- in this macro invocation\n+   |          --------------- in this derive macro expansion\n \n error[E0425]: cannot find value `my_ident` in this scope\n   --> $DIR/auxiliary/span-from-proc-macro.rs:29:9"}, {"sha": "b282fa7803f03a119cc1b5eb0b3c88975f1a3da2", "filename": "src/test/ui/range/range-1.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-1.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -12,7 +12,11 @@ LL |     for i in false..true {}\n    |\n    = note: required because of the requirements on the impl of `Iterator` for `std::ops::Range<bool>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `std::ops::Range<bool>`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `[{integer}]` cannot be known at compilation time\n   --> $DIR/range-1.rs:14:17"}, {"sha": "34c59fcb318a99df40f6829fc7d5d2fdea7ea3b2", "filename": "src/test/ui/range/range_traits-1.stderr", "status": "modified", "additions": 96, "deletions": 12, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Frange%2Frange_traits-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Frange%2Frange_traits-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange_traits-1.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,115 +1,199 @@\n error[E0277]: can't compare `std::ops::Range<usize>` with `std::ops::Range<usize>`\n   --> $DIR/range_traits-1.rs:5:5\n    |\n+LL | #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+   |                                ---------- in this derive macro expansion\n+LL | struct AllTheRanges {\n LL |     a: Range<usize>,\n    |     ^^^^^^^^^^^^^^^ no implementation for `std::ops::Range<usize> < std::ops::Range<usize>` and `std::ops::Range<usize> > std::ops::Range<usize>`\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::Range<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+note: required by `std::cmp::PartialOrd::partial_cmp`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeTo<usize>` with `std::ops::RangeTo<usize>`\n   --> $DIR/range_traits-1.rs:8:5\n    |\n+LL | #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+   |                                ---------- in this derive macro expansion\n+...\n LL |     b: RangeTo<usize>,\n    |     ^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeTo<usize> < std::ops::RangeTo<usize>` and `std::ops::RangeTo<usize> > std::ops::RangeTo<usize>`\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::RangeTo<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+note: required by `std::cmp::PartialOrd::partial_cmp`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeFrom<usize>` with `std::ops::RangeFrom<usize>`\n   --> $DIR/range_traits-1.rs:11:5\n    |\n+LL | #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+   |                                ---------- in this derive macro expansion\n+...\n LL |     c: RangeFrom<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeFrom<usize> < std::ops::RangeFrom<usize>` and `std::ops::RangeFrom<usize> > std::ops::RangeFrom<usize>`\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::RangeFrom<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+note: required by `std::cmp::PartialOrd::partial_cmp`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeFull` with `std::ops::RangeFull`\n   --> $DIR/range_traits-1.rs:14:5\n    |\n+LL | #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+   |                                ---------- in this derive macro expansion\n+...\n LL |     d: RangeFull,\n    |     ^^^^^^^^^^^^ no implementation for `std::ops::RangeFull < std::ops::RangeFull` and `std::ops::RangeFull > std::ops::RangeFull`\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::RangeFull`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+note: required by `std::cmp::PartialOrd::partial_cmp`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeInclusive<usize>` with `std::ops::RangeInclusive<usize>`\n   --> $DIR/range_traits-1.rs:17:5\n    |\n+LL | #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+   |                                ---------- in this derive macro expansion\n+...\n LL |     e: RangeInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeInclusive<usize> < std::ops::RangeInclusive<usize>` and `std::ops::RangeInclusive<usize> > std::ops::RangeInclusive<usize>`\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::RangeInclusive<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+note: required by `std::cmp::PartialOrd::partial_cmp`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeToInclusive<usize>` with `std::ops::RangeToInclusive<usize>`\n   --> $DIR/range_traits-1.rs:20:5\n    |\n+LL | #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+   |                                ---------- in this derive macro expansion\n+...\n LL |     f: RangeToInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeToInclusive<usize> < std::ops::RangeToInclusive<usize>` and `std::ops::RangeToInclusive<usize> > std::ops::RangeToInclusive<usize>`\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::RangeToInclusive<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n+note: required by `std::cmp::PartialOrd::partial_cmp`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL |     fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::Range<usize>: Ord` is not satisfied\n   --> $DIR/range_traits-1.rs:5:5\n    |\n+LL | #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+   |                                            --- in this derive macro expansion\n+LL | struct AllTheRanges {\n LL |     a: Range<usize>,\n    |     ^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::Range<usize>`\n    |\n-   = note: required by `std::cmp::Ord::cmp`\n+note: required by `std::cmp::Ord::cmp`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL |     fn cmp(&self, other: &Self) -> Ordering;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeTo<usize>: Ord` is not satisfied\n   --> $DIR/range_traits-1.rs:8:5\n    |\n+LL | #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+   |                                            --- in this derive macro expansion\n+...\n LL |     b: RangeTo<usize>,\n    |     ^^^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeTo<usize>`\n    |\n-   = note: required by `std::cmp::Ord::cmp`\n+note: required by `std::cmp::Ord::cmp`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL |     fn cmp(&self, other: &Self) -> Ordering;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeFrom<usize>: Ord` is not satisfied\n   --> $DIR/range_traits-1.rs:11:5\n    |\n+LL | #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+   |                                            --- in this derive macro expansion\n+...\n LL |     c: RangeFrom<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeFrom<usize>`\n    |\n-   = note: required by `std::cmp::Ord::cmp`\n+note: required by `std::cmp::Ord::cmp`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL |     fn cmp(&self, other: &Self) -> Ordering;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeFull: Ord` is not satisfied\n   --> $DIR/range_traits-1.rs:14:5\n    |\n+LL | #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+   |                                            --- in this derive macro expansion\n+...\n LL |     d: RangeFull,\n    |     ^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeFull`\n    |\n-   = note: required by `std::cmp::Ord::cmp`\n+note: required by `std::cmp::Ord::cmp`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL |     fn cmp(&self, other: &Self) -> Ordering;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeInclusive<usize>: Ord` is not satisfied\n   --> $DIR/range_traits-1.rs:17:5\n    |\n+LL | #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+   |                                            --- in this derive macro expansion\n+...\n LL |     e: RangeInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeInclusive<usize>`\n    |\n-   = note: required by `std::cmp::Ord::cmp`\n+note: required by `std::cmp::Ord::cmp`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL |     fn cmp(&self, other: &Self) -> Ordering;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeToInclusive<usize>: Ord` is not satisfied\n   --> $DIR/range_traits-1.rs:20:5\n    |\n+LL | #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+   |                                            --- in this derive macro expansion\n+...\n LL |     f: RangeToInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeToInclusive<usize>`\n    |\n-   = note: required by `std::cmp::Ord::cmp`\n+note: required by `std::cmp::Ord::cmp`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL |     fn cmp(&self, other: &Self) -> Ordering;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 12 previous errors"}, {"sha": "e33253b19c4bdba4d396239783a1d85cf8be7a49", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,8 @@\n error[E0277]: `main` has invalid return type `Result<f32, ParseFloatError>`\n   --> $DIR/termination-trait-test-wrong-type.rs:6:1\n    |\n+LL |   #[test]\n+   |   ------- in this procedural macro expansion\n LL | / fn can_parse_zero_as_f32() -> Result<f32, ParseFloatError> {\n LL | |     \"0\".parse()\n LL | | }"}, {"sha": "4950b65414161afc230c7b6882523b6eb37b62d3", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -502,7 +502,11 @@ LL |     if (let 0 = 0)? {}\n    |        ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n-   = note: required by `branch`\n+note: required by `branch`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/disallowed-positions.rs:46:19\n@@ -520,7 +524,11 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:56:8\n@@ -660,7 +668,11 @@ LL |         if let 0 = 0? {}\n    |                    ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n-   = note: required by `branch`\n+note: required by `branch`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:96:11\n@@ -690,7 +702,11 @@ LL |     while (let 0 = 0)? {}\n    |           ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n-   = note: required by `branch`\n+note: required by `branch`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/disallowed-positions.rs:110:22\n@@ -708,7 +724,11 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:120:11\n@@ -848,7 +868,11 @@ LL |         while let 0 = 0? {}\n    |                       ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n-   = note: required by `branch`\n+note: required by `branch`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0614]: type `bool` cannot be dereferenced\n   --> $DIR/disallowed-positions.rs:173:5\n@@ -869,7 +893,11 @@ LL |     (let 0 = 0)?;\n    |     ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n-   = note: required by `branch`\n+note: required by `branch`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/disallowed-positions.rs:183:16\n@@ -887,7 +915,11 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:198:10\n@@ -916,7 +948,11 @@ LL |         let 0 = 0?;\n    |                 ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n-   = note: required by `branch`\n+note: required by `branch`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 104 previous errors; 2 warnings emitted\n "}, {"sha": "24dfdf8ebc2990b54b7c5f8ca861093b81cf0c4a", "filename": "src/test/ui/span/issue-29595.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `u8: Tr` is not satisfied\n   --> $DIR/issue-29595.rs:6:17\n    |\n-LL |     const C: Self;\n-   |     -------------- required by `Tr::C`\n-...\n LL |     let a: u8 = Tr::C;\n    |                 ^^^^^ the trait `Tr` is not implemented for `u8`\n+   |\n+note: required by `Tr::C`\n+  --> $DIR/issue-29595.rs:2:5\n+   |\n+LL |     const C: Self;\n+   |     ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4be1b22fc6b4f4d3b926a4a217f49e198f55a603", "filename": "src/test/ui/static/static-method-privacy.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fstatic%2Fstatic-method-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fstatic%2Fstatic-method-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-method-privacy.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0624]: associated function `new` is private\n   --> $DIR/static-method-privacy.rs:9:19\n    |\n+LL |         fn new() -> S { S }\n+   |         ------------- private associated function defined here\n+...\n LL |     let _ = a::S::new();\n    |                   ^^^ private associated function\n "}, {"sha": "e0a22c2df1aca529b65b67bcf33bf55ddf09b838", "filename": "src/test/ui/structs/struct-path-alias-bounds.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `NoClone: Clone` is not satisfied\n   --> $DIR/struct-path-alias-bounds.rs:9:13\n    |\n-LL | struct S<T: Clone> { a: T }\n-   | ------------------ required by `S`\n-...\n LL |     let s = A { a: NoClone };\n    |             ^ the trait `Clone` is not implemented for `NoClone`\n+   |\n+note: required by `S`\n+  --> $DIR/struct-path-alias-bounds.rs:3:1\n+   |\n+LL | struct S<T: Clone> { a: T }\n+   | ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d5d51324e63c5969594c0e9f163a565461dc1edb", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -47,7 +47,11 @@ LL |     Pin::new(x)\n    |     ^^^^^^^^ the trait `Unpin` is not implemented for `dyn Future<Output = i32> + Send`\n    |\n    = note: consider using `Box::pin`\n-   = note: required by `Pin::<P>::new`\n+note: required by `Pin::<P>::new`\n+  --> $SRC_DIR/core/src/pin.rs:LL:COL\n+   |\n+LL |     pub const fn new(pointer: P) -> Pin<P> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `dyn Future<Output = i32> + Send` cannot be unpinned\n   --> $DIR/expected-boxed-future-isnt-pinned.rs:27:5\n@@ -56,7 +60,11 @@ LL |     Pin::new(Box::new(x))\n    |     ^^^^^^^^ the trait `Unpin` is not implemented for `dyn Future<Output = i32> + Send`\n    |\n    = note: consider using `Box::pin`\n-   = note: required by `Pin::<P>::new`\n+note: required by `Pin::<P>::new`\n+  --> $SRC_DIR/core/src/pin.rs:LL:COL\n+   |\n+LL |     pub const fn new(pointer: P) -> Pin<P> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/expected-boxed-future-isnt-pinned.rs:31:5"}, {"sha": "fcc49ef59d1294711d6e781e537976d074f83b66", "filename": "src/test/ui/suggestions/issue-72766.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -5,7 +5,11 @@ LL |     SadGirl {}.call()?;\n    |     ^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `impl Future`\n    |\n    = help: the trait `Try` is not implemented for `impl Future`\n-   = note: required by `branch`\n+note: required by `branch`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider `await`ing on the `Future`\n    |\n LL |     SadGirl {}.call().await?;"}, {"sha": "649517b7d99da6c8cffb3d78e81e8ee8c836df19", "filename": "src/test/ui/suggestions/issue-84973.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -6,9 +6,12 @@ LL |     let o = Other::new(f);\n    |                        |\n    |                        expected an implementor of trait `SomeTrait`\n    |                        help: consider borrowing here: `&f`\n-...\n+   |\n+note: required by `Other::<'a, G>::new`\n+  --> $DIR/issue-84973.rs:27:5\n+   |\n LL |     pub fn new(g: G) -> Self {\n-   |     ------------------------ required by `Other::<'a, G>::new`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4d1b5306bb130120b748809e34ebdd1726fe326a", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -5,7 +5,11 @@ LL |     let fp = BufWriter::new(fp);\n    |                             ^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n    |\n    = note: `std::io::Write` is implemented for `&mut dyn std::io::Write`, but not for `&dyn std::io::Write`\n-   = note: required by `BufWriter::<W>::new`\n+note: required by `BufWriter::<W>::new`\n+  --> $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL\n+   |\n+LL |     pub fn new(inner: W) -> BufWriter<W> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n   --> $DIR/mut-borrow-needed-by-trait.rs:17:14"}, {"sha": "e68152d5fc3aa7006495013fd672e89567bf8ea9", "filename": "src/test/ui/suggestions/suggest-change-mut.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -4,7 +4,11 @@ error[E0277]: the trait bound `&T: std::io::Read` is not satisfied\n LL |         let mut stream_reader = BufReader::new(&stream);\n    |                                                ^^^^^^^ the trait `std::io::Read` is not implemented for `&T`\n    |\n-   = note: required by `BufReader::<R>::new`\n+note: required by `BufReader::<R>::new`\n+  --> $SRC_DIR/std/src/io/buffered/bufreader.rs:LL:COL\n+   |\n+LL |     pub fn new(inner: R) -> BufReader<R> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider removing the leading `&`-reference\n    |\n LL |         let mut stream_reader = BufReader::new(stream);"}, {"sha": "a5c01484d424c5e2829a6c3ceeeb543e66dfd895", "filename": "src/test/ui/suggestions/suggest-remove-refs-1.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -9,7 +9,11 @@ LL |     for (i, _) in &v.iter().enumerate() {\n    |\n    = help: the trait `Iterator` is not implemented for `&Enumerate<std::slice::Iter<'_, {integer}>>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `&Enumerate<std::slice::Iter<'_, {integer}>>`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b128590f9d0e75de0daaf3a1e082b814ae8bd85a", "filename": "src/test/ui/suggestions/suggest-remove-refs-2.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -9,7 +9,11 @@ LL |     for (i, _) in & & & & &v.iter().enumerate() {\n    |\n    = help: the trait `Iterator` is not implemented for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1c32a33e3712fb3a61e488ba175cfc8be7ae369d", "filename": "src/test/ui/suggestions/suggest-remove-refs-3.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -13,7 +13,11 @@ LL | |          .enumerate() {\n    |\n    = help: the trait `Iterator` is not implemented for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n-   = note: required by `into_iter`\n+note: required by `into_iter`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5a9d4286ce6d10fe715c6fed1ec337d139b48bf0", "filename": "src/test/ui/traits/bad-sized.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -29,7 +29,11 @@ LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n    |                                     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `dyn Trait`\n-   = note: required by `Vec::<T>::new`\n+note: required by `Vec::<T>::new`\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   |\n+LL |     pub const fn new() -> Self {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time\n   --> $DIR/bad-sized.rs:4:37"}, {"sha": "7480d243f4e62fc3000c38c6c1694089583db0f2", "filename": "src/test/ui/traits/bound/on-structs-and-enums-locals.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -10,11 +10,14 @@ LL |     let baz: Foo<usize> = loop { };\n error[E0277]: the trait bound `{integer}: Trait` is not satisfied\n   --> $DIR/on-structs-and-enums-locals.rs:10:15\n    |\n-LL | struct Foo<T:Trait> {\n-   | ------------------- required by `Foo`\n-...\n LL |     let foo = Foo {\n    |               ^^^ the trait `Trait` is not implemented for `{integer}`\n+   |\n+note: required by `Foo`\n+  --> $DIR/on-structs-and-enums-locals.rs:5:1\n+   |\n+LL | struct Foo<T:Trait> {\n+   | ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ada2445c1c96259871914cd9f06756dbb9468f3a", "filename": "src/test/ui/traits/bound/on-structs-and-enums-xc1.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -15,7 +15,11 @@ error[E0277]: the trait bound `{integer}: Trait` is not satisfied\n LL |     let foo = Foo {\n    |               ^^^ the trait `Trait` is not implemented for `{integer}`\n    |\n-   = note: required by `Foo`\n+note: required by `Foo`\n+  --> $DIR/auxiliary/on_structs_and_enums_xc.rs:5:1\n+   |\n+LL | pub struct Foo<T:Trait> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "565899677bf1a74d55e7d39acf7d304edfcf2150", "filename": "src/test/ui/traits/cycle-cache-err-60010.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,9 +1,6 @@\n error[E0275]: overflow evaluating the requirement `SalsaStorage: RefUnwindSafe`\n   --> $DIR/cycle-cache-err-60010.rs:69:5\n    |\n-LL |     fn parse(&self) {\n-   |     --------------- required by `SourceDatabase::parse`\n-...\n LL |     SourceDatabase::parse(db);\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -25,6 +22,11 @@ note: required because of the requirements on the impl of `SourceDatabase` for `\n    |\n LL | impl<T> SourceDatabase for T\n    |         ^^^^^^^^^^^^^^     ^\n+note: required by `SourceDatabase::parse`\n+  --> $DIR/cycle-cache-err-60010.rs:14:5\n+   |\n+LL |     fn parse(&self) {\n+   |     ^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "bc7b863ca4f5175392ef1a0451c994a5575e7e0e", "filename": "src/test/ui/traits/inheritance/repeated-supertrait-ambig.stderr", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -18,21 +18,26 @@ LL | fn with_trait<C:CompareToInts + CompareTo<i32>>(c: &C) -> bool {\n error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfied\n   --> $DIR/repeated-supertrait-ambig.rs:34:5\n    |\n-LL |     fn same_as(&self, t: T) -> bool;\n-   |     -------------------------------- required by `CompareTo::same_as`\n-...\n LL |     <dyn CompareToInts>::same_as(c, 22)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n+   |\n+note: required by `CompareTo::same_as`\n+  --> $DIR/repeated-supertrait-ambig.rs:9:5\n+   |\n+LL |     fn same_as(&self, t: T) -> bool;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n   --> $DIR/repeated-supertrait-ambig.rs:38:5\n    |\n-LL |     fn same_as(&self, t: T) -> bool;\n-   |     -------------------------------- required by `CompareTo::same_as`\n-...\n LL |     CompareTo::same_as(c, 22)\n    |     ^^^^^^^^^^^^^^^^^^ the trait `CompareTo<i32>` is not implemented for `C`\n    |\n+note: required by `CompareTo::same_as`\n+  --> $DIR/repeated-supertrait-ambig.rs:9:5\n+   |\n+LL |     fn same_as(&self, t: T) -> bool;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider further restricting this bound\n    |\n LL | fn with_ufcs2<C:CompareToInts + CompareTo<i32>>(c: &C) -> bool {"}, {"sha": "23b78d023b600dc8f3665e3a5b6a6ea97eca3599", "filename": "src/test/ui/traits/issue-71136.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,11 +1,18 @@\n error[E0277]: the trait bound `Foo: Clone` is not satisfied\n   --> $DIR/issue-71136.rs:5:5\n    |\n+LL | #[derive(Clone)]\n+   |          ----- in this derive macro expansion\n+LL | struct FooHolster {\n LL |     the_foos: Vec<Foo>,\n    |     ^^^^^^^^^^^^^^^^^^ expected an implementor of trait `Clone`\n    |\n    = note: required because of the requirements on the impl of `Clone` for `Vec<Foo>`\n-   = note: required by `clone`\n+note: required by `clone`\n+  --> $SRC_DIR/core/src/clone.rs:LL:COL\n+   |\n+LL |     fn clone(&self) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "68347207bda45d10b0a6e046e513b6848c5fa979", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -17,7 +17,11 @@ LL |     let ips: Vec<_> = (0..100_000).map(|_| u32::from(0u32.into())).collect(\n    |                                            cannot infer type for type parameter `T` declared on the trait `From`\n    |\n    = note: cannot satisfy `u32: From<_>`\n-   = note: required by `from`\n+note: required by `from`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn from(_: T) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0283]: type annotations needed for `Box<T>`\n   --> $DIR/issue-77982.rs:35:16"}, {"sha": "2f5b4ad0e62c88069a285bf3bbade8d8e36fc3f4", "filename": "src/test/ui/traits/issue-79458.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,13 +1,20 @@\n error[E0277]: the trait bound `&mut T: Clone` is not satisfied\n   --> $DIR/issue-79458.rs:6:5\n    |\n+LL | #[derive(Clone)]\n+   |          ----- in this derive macro expansion\n+LL | struct Foo<'a, T> {\n LL |     bar: &'a mut T\n    |     ^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `&mut T`\n    |\n    = help: the following implementations were found:\n              <&T as Clone>\n    = note: `Clone` is implemented for `&T`, but not for `&mut T`\n-   = note: required by `clone`\n+note: required by `clone`\n+  --> $SRC_DIR/core/src/clone.rs:LL:COL\n+   |\n+LL |     fn clone(&self) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "2260dcfc70ea38f4d4eff58a6ca91234fba9d67a", "filename": "src/test/ui/traits/item-privacy.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -35,6 +35,9 @@ LL | use method::B;\n error[E0624]: associated function `a` is private\n   --> $DIR/item-privacy.rs:72:7\n    |\n+LL |         fn a(&self) { }\n+   |         ----------- private associated function defined here\n+...\n LL |     c.a();\n    |       ^ private associated function\n \n@@ -72,6 +75,9 @@ LL | use method::B;\n error[E0624]: associated function `a` is private\n   --> $DIR/item-privacy.rs:84:14\n    |\n+LL |         fn a(&self) { }\n+   |         ----------- private associated function defined here\n+...\n LL |     <dyn C>::a(&S);\n    |              ^ private associated function\n \n@@ -109,6 +115,9 @@ LL | use assoc_const::B;\n error[E0624]: associated constant `A` is private\n   --> $DIR/item-privacy.rs:101:14\n    |\n+LL |         const A: u8 = 0;\n+   |         ---------------- private associated constant defined here\n+...\n LL |     <dyn C>::A;\n    |              ^ private associated constant\n "}, {"sha": "8e991ec018c3e0c105bb4ff32074f132747b3d9d", "filename": "src/test/ui/traits/method-private.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fmethod-private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fmethod-private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmethod-private.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0624]: associated function `method` is private\n   --> $DIR/method-private.rs:19:9\n    |\n+LL |         fn method(&self) {}\n+   |         ---------------- private associated function defined here\n+...\n LL |     foo.method();\n    |         ^^^^^^ private associated function\n    |"}, {"sha": "cad298cf247330c7b075701557f1b254010f6698", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-error.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: `dummy::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:23:11\n    |\n-LL | struct Outer<T: Send>(T);\n-   | ------------------------- required by `Outer`\n-...\n LL |     Outer(TestType);\n    |           ^^^^^^^^ `dummy::TestType` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `dummy::TestType`\n+note: required by `Outer`\n+  --> $DIR/negated-auto-traits-error.rs:10:1\n+   |\n+LL | struct Outer<T: Send>(T);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `dummy::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:23:5"}, {"sha": "526c0e9ed540fa3485fbe1d8726246bdc19f87d8", "filename": "src/test/ui/traits/reservation-impl/no-use.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fno-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fno-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fno-use.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: the trait bound `(): MyTrait` is not satisfied\n   --> $DIR/no-use.rs:10:26\n    |\n-LL | trait MyTrait { fn foo(&self); }\n-   |                 -------------- required by `MyTrait::foo`\n-...\n LL |     <() as MyTrait>::foo(&());\n    |                          ^^^ the trait `MyTrait` is not implemented for `()`\n    |\n    = help: the following implementations were found:\n              <() as MyTrait>\n+note: required by `MyTrait::foo`\n+  --> $DIR/no-use.rs:5:17\n+   |\n+LL | trait MyTrait { fn foo(&self); }\n+   |                 ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c8c804a9013bfd80f3f4008156e4af9b95252c2b", "filename": "src/test/ui/traits/static-method-generic-inference.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fstatic-method-generic-inference.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,13 +1,15 @@\n error[E0283]: type annotations needed\n   --> $DIR/static-method-generic-inference.rs:24:25\n    |\n-LL |         fn new() -> T;\n-   |         -------------- required by `HasNew::new`\n-...\n LL |     let _f: base::Foo = base::HasNew::new();\n    |                         ^^^^^^^^^^^^^^^^^ cannot infer type\n    |\n    = note: cannot satisfy `_: HasNew<Foo>`\n+note: required by `HasNew::new`\n+  --> $DIR/static-method-generic-inference.rs:8:9\n+   |\n+LL |         fn new() -> T;\n+   |         ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f15e7e35839d584f8f37804ba6c7dd744a4217a4", "filename": "src/test/ui/traits/suggest-where-clause.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -38,7 +38,11 @@ error[E0277]: the trait bound `u64: From<T>` is not satisfied\n LL |     <u64 as From<T>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `From<T>` is not implemented for `u64`\n    |\n-   = note: required by `from`\n+note: required by `from`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn from(_: T) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n    |\n LL | fn check<T: Iterator, U: ?Sized>() where u64: From<T> {\n@@ -50,7 +54,11 @@ error[E0277]: the trait bound `u64: From<<T as Iterator>::Item>` is not satisfie\n LL |     <u64 as From<<T as Iterator>::Item>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<<T as Iterator>::Item>` is not implemented for `u64`\n    |\n-   = note: required by `from`\n+note: required by `from`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn from(_: T) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n    |\n LL | fn check<T: Iterator, U: ?Sized>() where u64: From<<T as Iterator>::Item> {\n@@ -62,7 +70,11 @@ error[E0277]: the trait bound `Misc<_>: From<T>` is not satisfied\n LL |     <Misc<_> as From<T>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<T>` is not implemented for `Misc<_>`\n    |\n-   = note: required by `from`\n+note: required by `from`\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn from(_: T) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `[T]` cannot be known at compilation time\n   --> $DIR/suggest-where-clause.rs:28:20"}, {"sha": "41a19bff8703b21571f1294198490fb422582903", "filename": "src/test/ui/trivial-bounds/trivial-bounds-leak.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -23,11 +23,14 @@ LL | pub trait Foo {\n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/trivial-bounds-leak.rs:25:15\n    |\n-LL |     fn test(&self);\n-   |     --------------- required by `Foo::test`\n-...\n LL |     Foo::test(&4i32);\n    |               ^^^^^ the trait `Foo` is not implemented for `i32`\n+   |\n+note: required by `Foo::test`\n+  --> $DIR/trivial-bounds-leak.rs:5:5\n+   |\n+LL |     fn test(&self);\n+   |     ^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/trivial-bounds-leak.rs:26:22"}, {"sha": "fce8dbab4856ca7daf4e4de7278e22f62cb8b29c", "filename": "src/test/ui/try-block/try-block-bad-type.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -8,7 +8,11 @@ LL |         Err(\"\")?;\n    = help: the following implementations were found:\n              <TryFromSliceError as From<Infallible>>\n    = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, &str>>` for `Result<u32, TryFromSliceError>`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<Result<i32, i32> as Try>::Output == &str`\n   --> $DIR/try-block-bad-type.rs:12:9\n@@ -29,7 +33,11 @@ LL |     let res: () = try { };\n    |                         ^ could not wrap the final value of the block as `()` doesn't implement `Try`\n    |\n    = help: the trait `Try` is not implemented for `()`\n-   = note: required by `from_output`\n+note: required by `from_output`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_output(output: Self::Output) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: a `try` block must return `Result` or `Option` (or another type that implements `Try`)\n   --> $DIR/try-block-bad-type.rs:20:26\n@@ -38,7 +46,11 @@ LL |     let res: i32 = try { 5 };\n    |                          ^ could not wrap the final value of the block as `i32` doesn't implement `Try`\n    |\n    = help: the trait `Try` is not implemented for `i32`\n-   = note: required by `from_output`\n+note: required by `from_output`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_output(output: Self::Output) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "4270df5b4063cc05439155017a371c7974f9e532", "filename": "src/test/ui/try-block/try-block-in-while.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -5,7 +5,11 @@ LL |     while try { false } {}\n    |                 ^^^^^ could not wrap the final value of the block as `bool` doesn't implement `Try`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n-   = note: required by `from_output`\n+note: required by `from_output`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_output(output: Self::Output) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5cecf9128bb2ca4118878aa27914d6116f7b8fc0", "filename": "src/test/ui/try-trait/bad-interconversion.stderr", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -11,7 +11,11 @@ LL |     Ok(Err(123_i32)?)\n              <u8 as From<NonZeroU8>>\n              <u8 as From<bool>>\n    = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, i32>>` for `Result<u64, u8>`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`\n   --> $DIR/bad-interconversion.rs:11:12\n@@ -25,7 +29,11 @@ LL | | }\n    | |_- this function returns a `Result`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<u64, String>`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used on `Result`s in a function that returns `Result`\n   --> $DIR/bad-interconversion.rs:17:31\n@@ -38,7 +46,11 @@ LL | | }\n    | |_- this function returns a `Result`\n    |\n    = help: the trait `FromResidual<ControlFlow<{integer}, Infallible>>` is not implemented for `Result<u64, String>`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used on `Option`s, not `Result`s, in a function that returns `Option`\n   --> $DIR/bad-interconversion.rs:22:22\n@@ -51,7 +63,11 @@ LL | | }\n    | |_- this function returns an `Option`\n    |\n    = help: the trait `FromResidual<Result<Infallible, &str>>` is not implemented for `Option<u16>`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used on `Option`s in a function that returns `Option`\n   --> $DIR/bad-interconversion.rs:27:33\n@@ -64,7 +80,11 @@ LL | | }\n    | |_- this function returns an `Option`\n    |\n    = help: the trait `FromResidual<ControlFlow<{integer}, Infallible>>` is not implemented for `Option<u64>`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used on `ControlFlow`s in a function that returns `ControlFlow`\n   --> $DIR/bad-interconversion.rs:32:39\n@@ -77,7 +97,11 @@ LL | | }\n    | |_- this function returns a `ControlFlow`\n    |\n    = help: the trait `FromResidual<Result<Infallible, &str>>` is not implemented for `ControlFlow<String>`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used on `ControlFlow`s in a function that returns `ControlFlow`\n   --> $DIR/bad-interconversion.rs:37:12\n@@ -91,7 +115,11 @@ LL | | }\n    | |_- this function returns a `ControlFlow`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `ControlFlow<u64>`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator in a function that returns `ControlFlow<B, _>` can only be used on other `ControlFlow<B, _>`s (with the same Break type)\n   --> $DIR/bad-interconversion.rs:43:29\n@@ -106,7 +134,11 @@ LL | | }\n    |\n    = help: the trait `FromResidual<ControlFlow<u8, Infallible>>` is not implemented for `ControlFlow<i64>`\n    = note: unlike `Result`, there's no `From`-conversion performed for `ControlFlow`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 8 previous errors\n "}, {"sha": "f89813e729fad60c22e2f8da16b3aec924137136", "filename": "src/test/ui/try-trait/option-to-result.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -10,7 +10,11 @@ LL | | }\n    | |_- this function returns a `Result`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<(), ()>`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used on `Option`s, not `Result`s, in a function that returns `Option`\n   --> $DIR/option-to-result.rs:11:6\n@@ -24,7 +28,11 @@ LL | | }\n    | |_- this function returns an `Option`\n    |\n    = help: the trait `FromResidual<Result<Infallible, i32>>` is not implemented for `Option<i32>`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bb65aae561f97949a5277c0435073d3e340ce7fc", "filename": "src/test/ui/try-trait/try-on-option-diagnostics.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -10,7 +10,11 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a closure that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option-diagnostics.rs:14:10\n@@ -25,7 +29,11 @@ LL | |     };\n    | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `{integer}`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a method that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option-diagnostics.rs:26:14\n@@ -38,7 +46,11 @@ LL | |         }\n    | |_________- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `()`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a trait method that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option-diagnostics.rs:39:14\n@@ -51,7 +63,11 @@ LL | |         }\n    | |_________- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `()`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "b522dd5709b2946601927dc00480e362887fd5c2", "filename": "src/test/ui/try-trait/try-on-option.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -10,7 +10,11 @@ LL | | }\n    | |_- this function returns a `Result`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<u32, ()>`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option.rs:13:6\n@@ -24,7 +28,11 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "dd893cadff77a2e85d9ab0628af77982c7c4c538", "filename": "src/test/ui/try-trait/try-operator-on-main.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -12,7 +12,11 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Result<Infallible, std::io::Error>>` is not implemented for `()`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n   --> $DIR/try-operator-on-main.rs:10:5\n@@ -21,7 +25,11 @@ LL |     ()?;\n    |     ^^^ the `?` operator cannot be applied to type `()`\n    |\n    = help: the trait `Try` is not implemented for `()`\n-   = note: required by `branch`\n+note: required by `branch`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-operator-on-main.rs:10:7\n@@ -39,7 +47,11 @@ LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n-   = note: required by `from_residual`\n+note: required by `from_residual`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn from_residual(residual: R) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `(): Try` is not satisfied\n   --> $DIR/try-operator-on-main.rs:14:25\n@@ -57,7 +69,11 @@ LL |     ()?;\n    |     ^^^ the `?` operator cannot be applied to type `()`\n    |\n    = help: the trait `Try` is not implemented for `()`\n-   = note: required by `branch`\n+note: required by `branch`\n+  --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n+   |\n+LL |     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "adf3fa2c8074820084d87d85c672aaa2953271de", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -23,28 +23,37 @@ error[E0277]: the trait bound `String: Copy` is not satisfied\n   --> $DIR/type-check-defaults.rs:11:17\n    |\n LL | struct Bounds<T:Copy=String>(T);\n-   | ----------------^^^^------------\n-   | |               |\n-   | |               the trait `Copy` is not implemented for `String`\n-   | required by `Bounds`\n+   |                 ^^^^ the trait `Copy` is not implemented for `String`\n+   |\n+note: required by `Bounds`\n+  --> $DIR/type-check-defaults.rs:11:1\n+   |\n+LL | struct Bounds<T:Copy=String>(T);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `String: Copy` is not satisfied\n   --> $DIR/type-check-defaults.rs:14:42\n    |\n LL | struct WhereClause<T=String>(T) where T: Copy;\n-   | -----------------------------------------^^^^-\n-   | |                                        |\n-   | |                                        the trait `Copy` is not implemented for `String`\n-   | required by `WhereClause`\n+   |                                          ^^^^ the trait `Copy` is not implemented for `String`\n+   |\n+note: required by `WhereClause`\n+  --> $DIR/type-check-defaults.rs:14:1\n+   |\n+LL | struct WhereClause<T=String>(T) where T: Copy;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `String: Copy` is not satisfied\n   --> $DIR/type-check-defaults.rs:17:20\n    |\n LL | trait TraitBound<T:Copy=String> {}\n-   | -------------------^^^^--------\n-   | |                  |\n-   | |                  the trait `Copy` is not implemented for `String`\n-   | required by `TraitBound`\n+   |                    ^^^^ the trait `Copy` is not implemented for `String`\n+   |\n+note: required by `TraitBound`\n+  --> $DIR/type-check-defaults.rs:17:1\n+   |\n+LL | trait TraitBound<T:Copy=String> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/type-check-defaults.rs:21:25\n@@ -63,12 +72,14 @@ error[E0277]: cannot add `u8` to `i32`\n   --> $DIR/type-check-defaults.rs:24:66\n    |\n LL | trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n-   | -----------------------------------------------------------------^^^^^^^\n-   | |                                                                |\n-   | |                                                                no implementation for `i32 + u8`\n-   | required by `ProjectionPred`\n+   |                                                                  ^^^^^^^ no implementation for `i32 + u8`\n    |\n    = help: the trait `Add<u8>` is not implemented for `i32`\n+note: required by `ProjectionPred`\n+  --> $DIR/type-check-defaults.rs:24:1\n+   |\n+LL | trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "a6b41520d67b1841786a40990f0c81e66287189b", "filename": "src/test/ui/type/type-params-in-different-spaces-2.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,12 +1,14 @@\n error[E0277]: the trait bound `Self: Tr<U>` is not satisfied\n   --> $DIR/type-params-in-different-spaces-2.rs:10:9\n    |\n-LL |     fn op(_: T) -> Self;\n-   |     -------------------- required by `Tr::op`\n-...\n LL |         Tr::op(u)\n    |         ^^^^^^ the trait `Tr<U>` is not implemented for `Self`\n    |\n+note: required by `Tr::op`\n+  --> $DIR/type-params-in-different-spaces-2.rs:5:5\n+   |\n+LL |     fn op(_: T) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^\n help: consider further restricting `Self`\n    |\n LL |     fn test<U>(u: U) -> Self where Self: Tr<U> {\n@@ -15,12 +17,14 @@ LL |     fn test<U>(u: U) -> Self where Self: Tr<U> {\n error[E0277]: the trait bound `Self: Tr<U>` is not satisfied\n   --> $DIR/type-params-in-different-spaces-2.rs:16:9\n    |\n-LL |     fn op(_: T) -> Self;\n-   |     -------------------- required by `Tr::op`\n-...\n LL |         Tr::op(u)\n    |         ^^^^^^ the trait `Tr<U>` is not implemented for `Self`\n    |\n+note: required by `Tr::op`\n+  --> $DIR/type-params-in-different-spaces-2.rs:5:5\n+   |\n+LL |     fn op(_: T) -> Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^\n help: consider further restricting `Self`\n    |\n LL |     fn test<U>(u: U) -> Self where Self: Tr<U> {"}, {"sha": "e30e4f5e7d3fd9caea78d069b224b8c6a521d9f8", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -5,7 +5,11 @@ LL |     <i32 as Add<u32>>::add(1, 2);\n    |     ^^^^^^^^^^^^^^^^^^^^^^ no implementation for `i32 + u32`\n    |\n    = help: the trait `Add<u32>` is not implemented for `i32`\n-   = note: required by `add`\n+note: required by `add`\n+  --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+   |\n+LL |     fn add(self, rhs: Rhs) -> Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/ufcs-qpath-self-mismatch.rs:6:28"}, {"sha": "be6ed8d56232e6b454300e0f38d73698926b3d6e", "filename": "src/test/ui/unevaluated_fixed_size_array_len.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Funevaluated_fixed_size_array_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Funevaluated_fixed_size_array_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funevaluated_fixed_size_array_len.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: the trait bound `[(); 0]: Foo` is not satisfied\n   --> $DIR/unevaluated_fixed_size_array_len.rs:12:5\n    |\n-LL |     fn foo();\n-   |     --------- required by `Foo::foo`\n-...\n LL |     <[(); 0] as Foo>::foo()\n    |     ^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `[(); 0]`\n    |\n    = help: the following implementations were found:\n              <[(); 1] as Foo>\n+note: required by `Foo::foo`\n+  --> $DIR/unevaluated_fixed_size_array_len.rs:4:5\n+   |\n+LL |     fn foo();\n+   |     ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c2fd8545f63ada897814cd02881adeb6f4107b64", "filename": "src/test/ui/union/union-derive-eq.mirunsafeck.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the trait bound `PartialEqNotEq: Eq` is not satisfied\n   --> $DIR/union-derive-eq.rs:16:5\n    |\n+LL | #[derive(Eq)]\n+   |          -- in this derive macro expansion\n+LL | union U2 {\n LL |     a: PartialEqNotEq,\n    |     ^^^^^^^^^^^^^^^^^ the trait `Eq` is not implemented for `PartialEqNotEq`\n    | "}, {"sha": "c2fd8545f63ada897814cd02881adeb6f4107b64", "filename": "src/test/ui/union/union-derive-eq.thirunsafeck.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the trait bound `PartialEqNotEq: Eq` is not satisfied\n   --> $DIR/union-derive-eq.rs:16:5\n    |\n+LL | #[derive(Eq)]\n+   |          -- in this derive macro expansion\n+LL | union U2 {\n LL |     a: PartialEqNotEq,\n    |     ^^^^^^^^^^^^^^^^^ the trait `Eq` is not implemented for `PartialEqNotEq`\n    | "}, {"sha": "cd8577818647a9036b849eba4a88d3503b7824e3", "filename": "src/test/ui/union/union-generic.mirunsafeck.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Funion%2Funion-generic.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Funion%2Funion-generic.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-generic.mirunsafeck.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,20 +1,26 @@\n error[E0277]: the trait bound `Rc<u32>: Copy` is not satisfied\n   --> $DIR/union-generic.rs:11:13\n    |\n-LL | union U<T: Copy> {\n-   | ---------------- required by `U`\n-...\n LL |     let u = U { a: Rc::new(0u32) };\n    |             ^ the trait `Copy` is not implemented for `Rc<u32>`\n+   |\n+note: required by `U`\n+  --> $DIR/union-generic.rs:6:1\n+   |\n+LL | union U<T: Copy> {\n+   | ^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `Rc<u32>: Copy` is not satisfied\n   --> $DIR/union-generic.rs:13:13\n    |\n-LL | union U<T: Copy> {\n-   | ---------------- required by `U`\n-...\n LL |     let u = U::<Rc<u32>> { a: Default::default() };\n    |             ^^^^^^^^^^^^ the trait `Copy` is not implemented for `Rc<u32>`\n+   |\n+note: required by `U`\n+  --> $DIR/union-generic.rs:6:1\n+   |\n+LL | union U<T: Copy> {\n+   | ^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cd8577818647a9036b849eba4a88d3503b7824e3", "filename": "src/test/ui/union/union-generic.thirunsafeck.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Funion%2Funion-generic.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Funion%2Funion-generic.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-generic.thirunsafeck.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -1,20 +1,26 @@\n error[E0277]: the trait bound `Rc<u32>: Copy` is not satisfied\n   --> $DIR/union-generic.rs:11:13\n    |\n-LL | union U<T: Copy> {\n-   | ---------------- required by `U`\n-...\n LL |     let u = U { a: Rc::new(0u32) };\n    |             ^ the trait `Copy` is not implemented for `Rc<u32>`\n+   |\n+note: required by `U`\n+  --> $DIR/union-generic.rs:6:1\n+   |\n+LL | union U<T: Copy> {\n+   | ^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `Rc<u32>: Copy` is not satisfied\n   --> $DIR/union-generic.rs:13:13\n    |\n-LL | union U<T: Copy> {\n-   | ---------------- required by `U`\n-...\n LL |     let u = U::<Rc<u32>> { a: Default::default() };\n    |             ^^^^^^^^^^^^ the trait `Copy` is not implemented for `Rc<u32>`\n+   |\n+note: required by `U`\n+  --> $DIR/union-generic.rs:6:1\n+   |\n+LL | union U<T: Copy> {\n+   | ^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "69b414cc8f92363ff1bcac98f75dee6f7507f796", "filename": "src/test/ui/xc-private-method.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fxc-private-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fxc-private-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fxc-private-method.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -3,12 +3,22 @@ error[E0624]: associated function `static_meth_struct` is private\n    |\n LL |     let _ = xc_private_method_lib::Struct::static_meth_struct();\n    |                                            ^^^^^^^^^^^^^^^^^^ private associated function\n+   | \n+  ::: $DIR/auxiliary/xc-private-method-lib.rs:8:5\n+   |\n+LL |     fn static_meth_struct() -> Struct {\n+   |     --------------------------------- private associated function defined here\n \n error[E0624]: associated function `static_meth_enum` is private\n   --> $DIR/xc-private-method.rs:9:42\n    |\n LL |     let _ = xc_private_method_lib::Enum::static_meth_enum();\n    |                                          ^^^^^^^^^^^^^^^^ private associated function\n+   | \n+  ::: $DIR/auxiliary/xc-private-method-lib.rs:23:5\n+   |\n+LL |     fn static_meth_enum() -> Enum {\n+   |     ----------------------------- private associated function defined here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "685ce0e0a186fc668d92225936fadd30e22ec8ed", "filename": "src/test/ui/xc-private-method2.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fxc-private-method2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba052bd8de1459acb6809215b0bedf4ea476ef9a/src%2Ftest%2Fui%2Fxc-private-method2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fxc-private-method2.stderr?ref=ba052bd8de1459acb6809215b0bedf4ea476ef9a", "patch": "@@ -3,12 +3,22 @@ error[E0624]: associated function `meth_struct` is private\n    |\n LL |     let _ = xc_private_method_lib::Struct{ x: 10 }.meth_struct();\n    |                                                    ^^^^^^^^^^^ private associated function\n+   | \n+  ::: $DIR/auxiliary/xc-private-method-lib.rs:12:5\n+   |\n+LL |     fn meth_struct(&self) -> isize {\n+   |     ------------------------------ private associated function defined here\n \n error[E0624]: associated function `meth_enum` is private\n   --> $DIR/xc-private-method2.rs:9:55\n    |\n LL |     let _ = xc_private_method_lib::Enum::Variant1(20).meth_enum();\n    |                                                       ^^^^^^^^^ private associated function\n+   | \n+  ::: $DIR/auxiliary/xc-private-method-lib.rs:27:5\n+   |\n+LL |     fn meth_enum(&self) -> isize {\n+   |     ---------------------------- private associated function defined here\n \n error: aborting due to 2 previous errors\n "}]}