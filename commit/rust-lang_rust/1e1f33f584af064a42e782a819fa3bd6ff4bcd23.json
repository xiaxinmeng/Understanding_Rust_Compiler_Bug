{"sha": "1e1f33f584af064a42e782a819fa3bd6ff4bcd23", "node_id": "C_kwDOAAsO6NoAKDFlMWYzM2Y1ODRhZjA2NGE0MmU3ODJhODE5ZmEzYmQ2ZmY0YmNkMjM", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-04-23T19:44:52Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-04-23T19:44:52Z"}, "message": "Use more targetted suggestion span for fully qualified path", "tree": {"sha": "5a020dacfc22976cc370be72daf51ec2d6d120d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a020dacfc22976cc370be72daf51ec2d6d120d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e1f33f584af064a42e782a819fa3bd6ff4bcd23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1f33f584af064a42e782a819fa3bd6ff4bcd23", "html_url": "https://github.com/rust-lang/rust/commit/1e1f33f584af064a42e782a819fa3bd6ff4bcd23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e1f33f584af064a42e782a819fa3bd6ff4bcd23/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acee1f47ef5d75bc9f9043f2be59e4e6ced6892b", "url": "https://api.github.com/repos/rust-lang/rust/commits/acee1f47ef5d75bc9f9043f2be59e4e6ced6892b", "html_url": "https://github.com/rust-lang/rust/commit/acee1f47ef5d75bc9f9043f2be59e4e6ced6892b"}], "stats": {"total": 62, "additions": 34, "deletions": 28}, "files": [{"sha": "623d655bcbb30b3330e0ca0d208cae9a0cacb2a5", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1e1f33f584af064a42e782a819fa3bd6ff4bcd23/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1f33f584af064a42e782a819fa3bd6ff4bcd23/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=1e1f33f584af064a42e782a819fa3bd6ff4bcd23", "patch": "@@ -734,19 +734,22 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 if !impl_candidates.is_empty() && e.span.contains(span)\n                     && let Some(expr) = exprs.first()\n                     && let ExprKind::Path(hir::QPath::Resolved(_, path)) = expr.kind\n-                    && let [path_segment] = path.segments\n+                    && let [_] = path.segments\n                 {\n                     let mut eraser = TypeParamEraser(self.tcx);\n                     let candidate_len = impl_candidates.len();\n                     let suggestions = impl_candidates.iter().map(|candidate| {\n                         let candidate = candidate.super_fold_with(&mut eraser);\n-                        format!(\n-                            \"{}::{}({})\",\n-                            candidate, segment.ident, path_segment.ident\n-                        )\n+                        vec![\n+                            (expr.span.shrink_to_lo(), format!(\"{}::{}(\", candidate, segment.ident)),\n+                            if exprs.len() == 1 {\n+                                (expr.span.shrink_to_hi().with_hi(e.span.hi()), \")\".to_string())\n+                            } else {\n+                                (expr.span.shrink_to_hi().with_hi(exprs[1].span.lo()), \", \".to_string())\n+                            },\n+                        ]\n                     });\n-                    err.span_suggestions(\n-                        e.span,\n+                    err.multipart_suggestions(\n                         &format!(\n                             \"use the fully qualified path for the potential candidate{}\",\n                             pluralize!(candidate_len),"}, {"sha": "e2bab486064f0fa8c38a9f5a4ff4cd5ce28eb6b9", "filename": "src/test/ui/error-codes/E0283.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e1f33f584af064a42e782a819fa3bd6ff4bcd23/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e1f33f584af064a42e782a819fa3bd6ff4bcd23/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr?ref=1e1f33f584af064a42e782a819fa3bd6ff4bcd23", "patch": "@@ -14,7 +14,6 @@ LL |     let bar = foo_impl.into() * 1u32;\n    |               |        |\n    |               |        cannot infer type for type parameter `T` declared on the trait `Into`\n    |               this method call resolves to `T`\n-   |               help: use the fully qualified path for the potential candidate: `<Impl as Into<u32>>::into(foo_impl)`\n    |\n note: multiple `impl`s satisfying `Impl: Into<_>` found\n   --> $DIR/E0283.rs:17:1\n@@ -24,6 +23,10 @@ LL | impl Into<u32> for Impl {\n    = note: and another `impl` found in the `core` crate:\n            - impl<T, U> Into<U> for T\n              where U: From<T>;\n+help: use the fully qualified path for the potential candidate\n+   |\n+LL |     let bar = <Impl as Into<u32>>::into(foo_impl) * 1u32;\n+   |               ++++++++++++++++++++++++++        ~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9a444be500c41ad076f3e5f946794f10f57af7e0", "filename": "src/test/ui/traits/do-not-mention-type-params-by-name-in-suggestion-issue-96292.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e1f33f584af064a42e782a819fa3bd6ff4bcd23/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1f33f584af064a42e782a819fa3bd6ff4bcd23/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.rs?ref=1e1f33f584af064a42e782a819fa3bd6ff4bcd23", "patch": "@@ -1,20 +1,20 @@\n struct Thing<X>(X);\n \n trait Method<T> {\n-    fn method(self) -> T;\n+    fn method(self, _: i32) -> T;\n }\n \n impl<X> Method<i32> for Thing<X> {\n-    fn method(self) -> i32 { 0 }\n+    fn method(self, _: i32) -> i32 { 0 }\n }\n \n impl<X> Method<u32> for Thing<X> {\n-    fn method(self) -> u32 { 0 }\n+    fn method(self, _: i32) -> u32 { 0 }\n }\n \n fn main() {\n     let thing = Thing(true);\n-    thing.method();\n+    thing.method(42);\n     //~^ ERROR type annotations needed\n     //~| ERROR type annotations needed\n }"}, {"sha": "0e52420ec43777568f0ea8c9c09157740f904c96", "filename": "src/test/ui/traits/do-not-mention-type-params-by-name-in-suggestion-issue-96292.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1e1f33f584af064a42e782a819fa3bd6ff4bcd23/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e1f33f584af064a42e782a819fa3bd6ff4bcd23/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.stderr?ref=1e1f33f584af064a42e782a819fa3bd6ff4bcd23", "patch": "@@ -1,17 +1,17 @@\n error[E0282]: type annotations needed\n   --> $DIR/do-not-mention-type-params-by-name-in-suggestion-issue-96292.rs:17:11\n    |\n-LL |     thing.method();\n-   |     ------^^^^^^--\n+LL |     thing.method(42);\n+   |     ------^^^^^^----\n    |     |     |\n    |     |     cannot infer type for type parameter `T` declared on the trait `Method`\n    |     this method call resolves to `T`\n \n error[E0283]: type annotations needed\n   --> $DIR/do-not-mention-type-params-by-name-in-suggestion-issue-96292.rs:17:11\n    |\n-LL |     thing.method();\n-   |     ------^^^^^^--\n+LL |     thing.method(42);\n+   |     ------^^^^^^----\n    |     |     |\n    |     |     cannot infer type for type parameter `T` declared on the trait `Method`\n    |     this method call resolves to `T`\n@@ -26,10 +26,10 @@ LL | impl<X> Method<u32> for Thing<X> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: use the fully qualified path for the potential candidates\n    |\n-LL |     <Thing<_> as Method<i32>>::method(thing);\n-   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-LL |     <Thing<_> as Method<u32>>::method(thing);\n-   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     <Thing<_> as Method<i32>>::method(thing, 42);\n+   |     ++++++++++++++++++++++++++++++++++     ~\n+LL |     <Thing<_> as Method<u32>>::method(thing, 42);\n+   |     ++++++++++++++++++++++++++++++++++     ~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "414e9e580c19d0221ee07f453f0df1ed675685f5", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1e1f33f584af064a42e782a819fa3bd6ff4bcd23/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e1f33f584af064a42e782a819fa3bd6ff4bcd23/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=1e1f33f584af064a42e782a819fa3bd6ff4bcd23", "patch": "@@ -36,14 +36,14 @@ LL |     opts.get(opt.as_ref());\n            - impl AsRef<str> for String;\n help: use the fully qualified path for the potential candidates\n    |\n-LL |     opts.get(<String as AsRef<OsStr>>::as_ref(opt));\n-   |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-LL |     opts.get(<String as AsRef<Path>>::as_ref(opt));\n-   |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-LL |     opts.get(<String as AsRef<[u8]>>::as_ref(opt));\n-   |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-LL |     opts.get(<String as AsRef<str>>::as_ref(opt));\n-   |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     opts.get(<str as AsRef<Path>>::as_ref(opt));\n+   |              +++++++++++++++++++++++++++++   ~\n+LL |     opts.get(<str as AsRef<OsStr>>::as_ref(opt));\n+   |              ++++++++++++++++++++++++++++++   ~\n+LL |     opts.get(<str as AsRef<str>>::as_ref(opt));\n+   |              ++++++++++++++++++++++++++++   ~\n+LL |     opts.get(<str as AsRef<[u8]>>::as_ref(opt));\n+   |              +++++++++++++++++++++++++++++   ~\n      and 4 other candidates\n \n error[E0283]: type annotations needed"}]}