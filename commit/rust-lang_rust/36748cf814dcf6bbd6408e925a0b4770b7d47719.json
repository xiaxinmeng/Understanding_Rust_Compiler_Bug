{"sha": "36748cf814dcf6bbd6408e925a0b4770b7d47719", "node_id": "C_kwDOAAsO6NoAKDM2NzQ4Y2Y4MTRkY2Y2YmJkNjQwOGU5MjVhMGI0NzcwYjdkNDc3MTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-23T06:01:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-23T06:01:48Z"}, "message": "Auto merge of #95173 - m-ou-se:sys-locks-module, r=dtolnay\n\nMove std::sys::{mutex, condvar, rwlock} to std::sys::locks.\n\nThis cleans up the the std::sys modules a bit by putting the locks in a single module called `locks` rather than spread over the three modules `mutex`, `condvar`, and `rwlock`. This makes it easier to organise lock implementations, which helps with https://github.com/rust-lang/rust/issues/93740.", "tree": {"sha": "77c3dc03911ea12ff43022a5a59316e18436668b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77c3dc03911ea12ff43022a5a59316e18436668b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36748cf814dcf6bbd6408e925a0b4770b7d47719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36748cf814dcf6bbd6408e925a0b4770b7d47719", "html_url": "https://github.com/rust-lang/rust/commit/36748cf814dcf6bbd6408e925a0b4770b7d47719", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36748cf814dcf6bbd6408e925a0b4770b7d47719/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b0bf9efc939341b48c6e9a335dee8a280085100", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0bf9efc939341b48c6e9a335dee8a280085100", "html_url": "https://github.com/rust-lang/rust/commit/7b0bf9efc939341b48c6e9a335dee8a280085100"}, {"sha": "733153f2e550d46fe6f794c969df91368580e0b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/733153f2e550d46fe6f794c969df91368580e0b8", "html_url": "https://github.com/rust-lang/rust/commit/733153f2e550d46fe6f794c969df91368580e0b8"}], "stats": {"total": 233, "additions": 133, "deletions": 100}, "files": [{"sha": "f60835300059614db23aab9ef959584b2262e043", "filename": "library/std/src/sys/hermit/condvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fcondvar.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -2,7 +2,7 @@ use crate::ffi::c_void;\n use crate::ptr;\n use crate::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n use crate::sys::hermit::abi;\n-use crate::sys::mutex::Mutex;\n+use crate::sys::locks::Mutex;\n use crate::time::Duration;\n \n // The implementation is inspired by Andrew D. Birrell's paper"}, {"sha": "08eca4238020495dfa767aabf8115256965f829c", "filename": "library/std/src/sys/hermit/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -22,14 +22,12 @@ pub mod alloc;\n pub mod args;\n #[path = \"../unix/cmath.rs\"]\n pub mod cmath;\n-pub mod condvar;\n pub mod env;\n pub mod fd;\n pub mod fs;\n #[path = \"../unsupported/io.rs\"]\n pub mod io;\n pub mod memchr;\n-pub mod mutex;\n pub mod net;\n pub mod os;\n #[path = \"../unix/os_str.rs\"]\n@@ -40,14 +38,23 @@ pub mod path;\n pub mod pipe;\n #[path = \"../unsupported/process.rs\"]\n pub mod process;\n-pub mod rwlock;\n pub mod stdio;\n pub mod thread;\n pub mod thread_local_dtor;\n #[path = \"../unsupported/thread_local_key.rs\"]\n pub mod thread_local_key;\n pub mod time;\n \n+mod condvar;\n+mod mutex;\n+mod rwlock;\n+\n+pub mod locks {\n+    pub use super::condvar::*;\n+    pub use super::mutex::*;\n+    pub use super::rwlock::*;\n+}\n+\n use crate::io::ErrorKind;\n \n #[allow(unused_extern_crates)]"}, {"sha": "1cca809764c8cab2b5966c5b7e27c14d80420116", "filename": "library/std/src/sys/hermit/rwlock.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -1,6 +1,5 @@\n use crate::cell::UnsafeCell;\n-use crate::sys::condvar::Condvar;\n-use crate::sys::mutex::Mutex;\n+use crate::sys::locks::{Condvar, Mutex};\n \n pub struct RWLock {\n     lock: Mutex,"}, {"sha": "ed26c52802748309f771d2c515d741ee6aa6d5fa", "filename": "library/std/src/sys/itron/condvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fcondvar.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -1,6 +1,6 @@\n //! POSIX conditional variable implementation based on user-space wait queues.\n use super::{abi, error::expect_success_aborting, spin::SpinMutex, task, time::with_tmos_strong};\n-use crate::{mem::replace, ptr::NonNull, sys::mutex::Mutex, time::Duration};\n+use crate::{mem::replace, ptr::NonNull, sys::locks::Mutex, time::Duration};\n \n // The implementation is inspired by the queue-based implementation shown in\n // Andrew D. Birrell's paper \"Implementing Condition Variables with Semaphores\""}, {"sha": "c9736880b0880819b1a3d0a624de48ef60526324", "filename": "library/std/src/sys/sgx/condvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fcondvar.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -1,4 +1,4 @@\n-use crate::sys::mutex::Mutex;\n+use crate::sys::locks::Mutex;\n use crate::time::Duration;\n \n use super::waitqueue::{SpinMutex, WaitQueue, WaitVariable};"}, {"sha": "1333edb9881a15acfc1e241058b689a30d57b1de", "filename": "library/std/src/sys/sgx/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -15,15 +15,13 @@ pub mod alloc;\n pub mod args;\n #[path = \"../unix/cmath.rs\"]\n pub mod cmath;\n-pub mod condvar;\n pub mod env;\n pub mod fd;\n #[path = \"../unsupported/fs.rs\"]\n pub mod fs;\n #[path = \"../unsupported/io.rs\"]\n pub mod io;\n pub mod memchr;\n-pub mod mutex;\n pub mod net;\n pub mod os;\n #[path = \"../unix/os_str.rs\"]\n@@ -33,12 +31,21 @@ pub mod path;\n pub mod pipe;\n #[path = \"../unsupported/process.rs\"]\n pub mod process;\n-pub mod rwlock;\n pub mod stdio;\n pub mod thread;\n pub mod thread_local_key;\n pub mod time;\n \n+mod condvar;\n+mod mutex;\n+mod rwlock;\n+\n+pub mod locks {\n+    pub use super::condvar::*;\n+    pub use super::mutex::*;\n+    pub use super::rwlock::*;\n+}\n+\n // SAFETY: must be called only once during runtime initialization.\n // NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n pub unsafe fn init(argc: isize, argv: *const *const u8) {"}, {"sha": "492b1a55475a2abae3a73934b501e933e559c571", "filename": "library/std/src/sys/solid/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fmod.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -37,14 +37,21 @@ pub mod path;\n pub mod pipe;\n #[path = \"../unsupported/process.rs\"]\n pub mod process;\n-pub mod rwlock;\n pub mod stdio;\n-pub use self::itron::{condvar, mutex, thread};\n+pub use self::itron::thread;\n pub mod memchr;\n pub mod thread_local_dtor;\n pub mod thread_local_key;\n pub mod time;\n \n+mod rwlock;\n+\n+pub mod locks {\n+    pub use super::itron::condvar::*;\n+    pub use super::itron::mutex::*;\n+    pub use super::rwlock::*;\n+}\n+\n // SAFETY: must be called only once during runtime initialization.\n // NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n pub unsafe fn init(_argc: isize, _argv: *const *const u8) {}"}, {"sha": "f07a9f93b79a54a66c36768938e5f445acc4072f", "filename": "library/std/src/sys/unix/locks/mod.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -0,0 +1,8 @@\n+mod pthread_condvar;\n+mod pthread_mutex;\n+mod pthread_remutex;\n+mod pthread_rwlock;\n+pub use pthread_condvar::{Condvar, MovableCondvar};\n+pub use pthread_mutex::{MovableMutex, Mutex};\n+pub use pthread_remutex::ReentrantMutex;\n+pub use pthread_rwlock::{MovableRWLock, RWLock};"}, {"sha": "099aa68706fa394f18855e8701b528ecf9478d01", "filename": "library/std/src/sys/unix/locks/pthread_condvar.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -1,5 +1,5 @@\n use crate::cell::UnsafeCell;\n-use crate::sys::mutex::{self, Mutex};\n+use crate::sys::locks::{pthread_mutex, Mutex};\n use crate::time::Duration;\n \n pub struct Condvar {\n@@ -79,7 +79,7 @@ impl Condvar {\n \n     #[inline]\n     pub unsafe fn wait(&self, mutex: &Mutex) {\n-        let r = libc::pthread_cond_wait(self.inner.get(), mutex::raw(mutex));\n+        let r = libc::pthread_cond_wait(self.inner.get(), pthread_mutex::raw(mutex));\n         debug_assert_eq!(r, 0);\n     }\n \n@@ -111,7 +111,7 @@ impl Condvar {\n         let timeout =\n             sec.map(|s| libc::timespec { tv_sec: s, tv_nsec: nsec as _ }).unwrap_or(TIMESPEC_MAX);\n \n-        let r = libc::pthread_cond_timedwait(self.inner.get(), mutex::raw(mutex), &timeout);\n+        let r = libc::pthread_cond_timedwait(self.inner.get(), pthread_mutex::raw(mutex), &timeout);\n         assert!(r == libc::ETIMEDOUT || r == 0);\n         r == 0\n     }\n@@ -169,7 +169,7 @@ impl Condvar {\n             .unwrap_or(TIMESPEC_MAX);\n \n         // And wait!\n-        let r = libc::pthread_cond_timedwait(self.inner.get(), mutex::raw(mutex), &timeout);\n+        let r = libc::pthread_cond_timedwait(self.inner.get(), pthread_mutex::raw(mutex), &timeout);\n         debug_assert!(r == libc::ETIMEDOUT || r == 0);\n \n         // ETIMEDOUT is not a totally reliable method of determining timeout due", "previous_filename": "library/std/src/sys/unix/condvar.rs"}, {"sha": "09cfa2f50eced10036319ac25ae8f122c99562ce", "filename": "library/std/src/sys/unix/locks/pthread_mutex.rs", "status": "renamed", "additions": 1, "deletions": 43, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -90,49 +90,7 @@ impl Mutex {\n     }\n }\n \n-pub struct ReentrantMutex {\n-    inner: UnsafeCell<libc::pthread_mutex_t>,\n-}\n-\n-unsafe impl Send for ReentrantMutex {}\n-unsafe impl Sync for ReentrantMutex {}\n-\n-impl ReentrantMutex {\n-    pub const unsafe fn uninitialized() -> ReentrantMutex {\n-        ReentrantMutex { inner: UnsafeCell::new(libc::PTHREAD_MUTEX_INITIALIZER) }\n-    }\n-\n-    pub unsafe fn init(&self) {\n-        let mut attr = MaybeUninit::<libc::pthread_mutexattr_t>::uninit();\n-        cvt_nz(libc::pthread_mutexattr_init(attr.as_mut_ptr())).unwrap();\n-        let attr = PthreadMutexAttr(&mut attr);\n-        cvt_nz(libc::pthread_mutexattr_settype(attr.0.as_mut_ptr(), libc::PTHREAD_MUTEX_RECURSIVE))\n-            .unwrap();\n-        cvt_nz(libc::pthread_mutex_init(self.inner.get(), attr.0.as_ptr())).unwrap();\n-    }\n-\n-    pub unsafe fn lock(&self) {\n-        let result = libc::pthread_mutex_lock(self.inner.get());\n-        debug_assert_eq!(result, 0);\n-    }\n-\n-    #[inline]\n-    pub unsafe fn try_lock(&self) -> bool {\n-        libc::pthread_mutex_trylock(self.inner.get()) == 0\n-    }\n-\n-    pub unsafe fn unlock(&self) {\n-        let result = libc::pthread_mutex_unlock(self.inner.get());\n-        debug_assert_eq!(result, 0);\n-    }\n-\n-    pub unsafe fn destroy(&self) {\n-        let result = libc::pthread_mutex_destroy(self.inner.get());\n-        debug_assert_eq!(result, 0);\n-    }\n-}\n-\n-struct PthreadMutexAttr<'a>(&'a mut MaybeUninit<libc::pthread_mutexattr_t>);\n+pub(super) struct PthreadMutexAttr<'a>(pub &'a mut MaybeUninit<libc::pthread_mutexattr_t>);\n \n impl Drop for PthreadMutexAttr<'_> {\n     fn drop(&mut self) {", "previous_filename": "library/std/src/sys/unix/mutex.rs"}, {"sha": "b006181ee3a0d4b483d1e82af794662eb7b09dee", "filename": "library/std/src/sys/unix/locks/pthread_remutex.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_remutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_remutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_remutex.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -0,0 +1,46 @@\n+use super::pthread_mutex::PthreadMutexAttr;\n+use crate::cell::UnsafeCell;\n+use crate::mem::MaybeUninit;\n+use crate::sys::cvt_nz;\n+\n+pub struct ReentrantMutex {\n+    inner: UnsafeCell<libc::pthread_mutex_t>,\n+}\n+\n+unsafe impl Send for ReentrantMutex {}\n+unsafe impl Sync for ReentrantMutex {}\n+\n+impl ReentrantMutex {\n+    pub const unsafe fn uninitialized() -> ReentrantMutex {\n+        ReentrantMutex { inner: UnsafeCell::new(libc::PTHREAD_MUTEX_INITIALIZER) }\n+    }\n+\n+    pub unsafe fn init(&self) {\n+        let mut attr = MaybeUninit::<libc::pthread_mutexattr_t>::uninit();\n+        cvt_nz(libc::pthread_mutexattr_init(attr.as_mut_ptr())).unwrap();\n+        let attr = PthreadMutexAttr(&mut attr);\n+        cvt_nz(libc::pthread_mutexattr_settype(attr.0.as_mut_ptr(), libc::PTHREAD_MUTEX_RECURSIVE))\n+            .unwrap();\n+        cvt_nz(libc::pthread_mutex_init(self.inner.get(), attr.0.as_ptr())).unwrap();\n+    }\n+\n+    pub unsafe fn lock(&self) {\n+        let result = libc::pthread_mutex_lock(self.inner.get());\n+        debug_assert_eq!(result, 0);\n+    }\n+\n+    #[inline]\n+    pub unsafe fn try_lock(&self) -> bool {\n+        libc::pthread_mutex_trylock(self.inner.get()) == 0\n+    }\n+\n+    pub unsafe fn unlock(&self) {\n+        let result = libc::pthread_mutex_unlock(self.inner.get());\n+        debug_assert_eq!(result, 0);\n+    }\n+\n+    pub unsafe fn destroy(&self) {\n+        let result = libc::pthread_mutex_destroy(self.inner.get());\n+        debug_assert_eq!(result, 0);\n+    }\n+}"}, {"sha": "1318c5b8e3a6104d98607672b91339d62e223924", "filename": "library/std/src/sys/unix/locks/pthread_rwlock.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "previous_filename": "library/std/src/sys/unix/rwlock.rs"}, {"sha": "e65c11b6d09faf5e39eac55c5dfb3eec0bc885f0", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -14,7 +14,6 @@ pub mod android;\n pub mod args;\n #[path = \"../unix/cmath.rs\"]\n pub mod cmath;\n-pub mod condvar;\n pub mod env;\n pub mod fd;\n pub mod fs;\n@@ -24,8 +23,8 @@ pub mod io;\n pub mod kernel_copy;\n #[cfg(target_os = \"l4re\")]\n mod l4re;\n+pub mod locks;\n pub mod memchr;\n-pub mod mutex;\n #[cfg(not(target_os = \"l4re\"))]\n pub mod net;\n #[cfg(target_os = \"l4re\")]\n@@ -36,7 +35,6 @@ pub mod path;\n pub mod pipe;\n pub mod process;\n pub mod rand;\n-pub mod rwlock;\n pub mod stack_overflow;\n pub mod stdio;\n pub mod thread;"}, {"sha": "8dbe03bad9b0d8e09c2d0e093f7cb0572d022f27", "filename": "library/std/src/sys/unsupported/locks/condvar.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -1,4 +1,4 @@\n-use crate::sys::mutex::Mutex;\n+use crate::sys::locks::Mutex;\n use crate::time::Duration;\n \n pub struct Condvar {}", "previous_filename": "library/std/src/sys/unsupported/condvar.rs"}, {"sha": "5634f10633963234e1ed703b7bdb5a8af7ca418b", "filename": "library/std/src/sys/unsupported/locks/mod.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmod.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -0,0 +1,6 @@\n+mod condvar;\n+mod mutex;\n+mod rwlock;\n+pub use condvar::{Condvar, MovableCondvar};\n+pub use mutex::{MovableMutex, Mutex, ReentrantMutex};\n+pub use rwlock::{MovableRWLock, RWLock};"}, {"sha": "b3203c16c50022bb6f67e436899dd7a9879640ed", "filename": "library/std/src/sys/unsupported/locks/mutex.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmutex.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "previous_filename": "library/std/src/sys/unsupported/mutex.rs"}, {"sha": "8438adeb5b533b6098daa9d8535effc57a62cd5b", "filename": "library/std/src/sys/unsupported/locks/rwlock.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Frwlock.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "previous_filename": "library/std/src/sys/unsupported/rwlock.rs"}, {"sha": "7bf6d40b76daa7746e676d85b9458362e6dcce14", "filename": "library/std/src/sys/unsupported/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -4,11 +4,10 @@ pub mod alloc;\n pub mod args;\n #[path = \"../unix/cmath.rs\"]\n pub mod cmath;\n-pub mod condvar;\n pub mod env;\n pub mod fs;\n pub mod io;\n-pub mod mutex;\n+pub mod locks;\n pub mod net;\n pub mod os;\n #[path = \"../unix/os_str.rs\"]\n@@ -17,7 +16,6 @@ pub mod os_str;\n pub mod path;\n pub mod pipe;\n pub mod process;\n-pub mod rwlock;\n pub mod stdio;\n pub mod thread;\n #[cfg(target_thread_local)]"}, {"sha": "683a07a34dcf9241c34edee980c37b042d6e2c9f", "filename": "library/std/src/sys/wasi/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -22,14 +22,12 @@ pub mod alloc;\n pub mod args;\n #[path = \"../unix/cmath.rs\"]\n pub mod cmath;\n-#[path = \"../unsupported/condvar.rs\"]\n-pub mod condvar;\n pub mod env;\n pub mod fd;\n pub mod fs;\n pub mod io;\n-#[path = \"../unsupported/mutex.rs\"]\n-pub mod mutex;\n+#[path = \"../unsupported/locks/mod.rs\"]\n+pub mod locks;\n pub mod net;\n pub mod os;\n #[path = \"../unix/os_str.rs\"]\n@@ -40,8 +38,6 @@ pub mod path;\n pub mod pipe;\n #[path = \"../unsupported/process.rs\"]\n pub mod process;\n-#[path = \"../unsupported/rwlock.rs\"]\n-pub mod rwlock;\n pub mod stdio;\n pub mod thread;\n #[path = \"../unsupported/thread_local_dtor.rs\"]"}, {"sha": "f06c07c54093fc06a63de784d5d6d3d410ca3d8a", "filename": "library/std/src/sys/wasm/atomics/condvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fcondvar.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -2,7 +2,7 @@ use crate::arch::wasm32;\n use crate::cmp;\n use crate::mem;\n use crate::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n-use crate::sys::mutex::Mutex;\n+use crate::sys::locks::Mutex;\n use crate::time::Duration;\n \n pub struct Condvar {"}, {"sha": "1cca809764c8cab2b5966c5b7e27c14d80420116", "filename": "library/std/src/sys/wasm/atomics/rwlock.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Frwlock.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -1,6 +1,5 @@\n use crate::cell::UnsafeCell;\n-use crate::sys::condvar::Condvar;\n-use crate::sys::mutex::Mutex;\n+use crate::sys::locks::{Condvar, Mutex};\n \n pub struct RWLock {\n     lock: Mutex,"}, {"sha": "9f6700caf14bf9dbc7d7c40e9b981ec94dd931dc", "filename": "library/std/src/sys/wasm/mod.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -50,22 +50,23 @@ pub mod time;\n cfg_if::cfg_if! {\n     if #[cfg(target_feature = \"atomics\")] {\n         #[path = \"atomics/condvar.rs\"]\n-        pub mod condvar;\n+        mod condvar;\n         #[path = \"atomics/mutex.rs\"]\n-        pub mod mutex;\n+        mod mutex;\n         #[path = \"atomics/rwlock.rs\"]\n-        pub mod rwlock;\n+        mod rwlock;\n+        pub mod locks {\n+            pub use super::condvar::*;\n+            pub use super::mutex::*;\n+            pub use super::rwlock::*;\n+        }\n         #[path = \"atomics/futex.rs\"]\n         pub mod futex;\n         #[path = \"atomics/thread.rs\"]\n         pub mod thread;\n     } else {\n-        #[path = \"../unsupported/condvar.rs\"]\n-        pub mod condvar;\n-        #[path = \"../unsupported/mutex.rs\"]\n-        pub mod mutex;\n-        #[path = \"../unsupported/rwlock.rs\"]\n-        pub mod rwlock;\n+        #[path = \"../unsupported/locks/mod.rs\"]\n+        pub mod locks;\n         #[path = \"../unsupported/thread.rs\"]\n         pub mod thread;\n     }"}, {"sha": "dfd8cfdceee75ab2efbf277e641617f5a49e31e8", "filename": "library/std/src/sys/windows/locks/condvar.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fcondvar.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -1,6 +1,6 @@\n use crate::cell::UnsafeCell;\n use crate::sys::c;\n-use crate::sys::mutex::{self, Mutex};\n+use crate::sys::locks::{mutex, Mutex};\n use crate::sys::os;\n use crate::time::Duration;\n \n@@ -31,7 +31,7 @@ impl Condvar {\n         let r = c::SleepConditionVariableSRW(\n             self.inner.get(),\n             mutex::raw(mutex),\n-            super::dur2timeout(dur),\n+            crate::sys::windows::dur2timeout(dur),\n             0,\n         );\n         if r == 0 {", "previous_filename": "library/std/src/sys/windows/condvar.rs"}, {"sha": "5634f10633963234e1ed703b7bdb5a8af7ca418b", "filename": "library/std/src/sys/windows/locks/mod.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmod.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -0,0 +1,6 @@\n+mod condvar;\n+mod mutex;\n+mod rwlock;\n+pub use condvar::{Condvar, MovableCondvar};\n+pub use mutex::{MovableMutex, Mutex, ReentrantMutex};\n+pub use rwlock::{MovableRWLock, RWLock};"}, {"sha": "56f91ebe5828721777df75b3bf4372545a867748", "filename": "library/std/src/sys/windows/locks/mutex.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmutex.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "previous_filename": "library/std/src/sys/windows/mutex.rs"}, {"sha": "b7a5b1e7accd0cb9b3188a58543ec0648d1649e1", "filename": "library/std/src/sys/windows/locks/rwlock.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Frwlock.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "previous_filename": "library/std/src/sys/windows/rwlock.rs"}, {"sha": "62814eaaa56679520e84a50411e3d5b5dd32608a", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -16,21 +16,19 @@ pub mod alloc;\n pub mod args;\n pub mod c;\n pub mod cmath;\n-pub mod condvar;\n pub mod env;\n pub mod fs;\n pub mod handle;\n pub mod io;\n+pub mod locks;\n pub mod memchr;\n-pub mod mutex;\n pub mod net;\n pub mod os;\n pub mod os_str;\n pub mod path;\n pub mod pipe;\n pub mod process;\n pub mod rand;\n-pub mod rwlock;\n pub mod thread;\n pub mod thread_local_dtor;\n pub mod thread_local_key;"}, {"sha": "67d4b1262091acba0d6cc169eea77a12c0ac2e4c", "filename": "library/std/src/sys_common/condvar.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -1,11 +1,10 @@\n-use crate::sys::condvar as imp;\n-use crate::sys::mutex as mutex_imp;\n+use crate::sys::locks as imp;\n use crate::sys_common::mutex::MovableMutex;\n use crate::time::Duration;\n \n mod check;\n \n-type CondvarCheck = <mutex_imp::MovableMutex as check::CondvarCheck>::Check;\n+type CondvarCheck = <imp::MovableMutex as check::CondvarCheck>::Check;\n \n /// An OS-based condition variable.\n pub struct Condvar {"}, {"sha": "47aff060d6f798cf3ec70c3784ba9da62277fb77", "filename": "library/std/src/sys_common/condvar/check.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -1,5 +1,5 @@\n use crate::sync::atomic::{AtomicUsize, Ordering};\n-use crate::sys::mutex as mutex_imp;\n+use crate::sys::locks as imp;\n use crate::sys_common::mutex::MovableMutex;\n \n pub trait CondvarCheck {\n@@ -8,7 +8,7 @@ pub trait CondvarCheck {\n \n /// For boxed mutexes, a `Condvar` will check it's only ever used with the same\n /// mutex, based on its (stable) address.\n-impl CondvarCheck for Box<mutex_imp::Mutex> {\n+impl CondvarCheck for Box<imp::Mutex> {\n     type Check = SameMutexCheck;\n }\n \n@@ -22,7 +22,7 @@ impl SameMutexCheck {\n         Self { addr: AtomicUsize::new(0) }\n     }\n     pub fn verify(&self, mutex: &MovableMutex) {\n-        let addr = mutex.raw() as *const mutex_imp::Mutex as usize;\n+        let addr = mutex.raw() as *const imp::Mutex as usize;\n         match self.addr.compare_exchange(0, addr, Ordering::SeqCst, Ordering::SeqCst) {\n             Ok(_) => {}               // Stored the address\n             Err(n) if n == addr => {} // Lost a race to store the same address\n@@ -33,7 +33,7 @@ impl SameMutexCheck {\n \n /// Unboxed mutexes may move, so `Condvar` can not require its address to stay\n /// constant.\n-impl CondvarCheck for mutex_imp::Mutex {\n+impl CondvarCheck for imp::Mutex {\n     type Check = NoCheck;\n }\n "}, {"sha": "12a09c9860501c32cc1d7fa1baf943915d31fa9f", "filename": "library/std/src/sys_common/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -1,4 +1,4 @@\n-use crate::sys::mutex as imp;\n+use crate::sys::locks as imp;\n \n /// An OS-based mutual exclusion lock, meant for use in static variables.\n ///"}, {"sha": "801c9c28dd388a871fada0b020427bfdde9fd1bd", "filename": "library/std/src/sys_common/remutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -5,7 +5,7 @@ use crate::marker::PhantomPinned;\n use crate::ops::Deref;\n use crate::panic::{RefUnwindSafe, UnwindSafe};\n use crate::pin::Pin;\n-use crate::sys::mutex as sys;\n+use crate::sys::locks as sys;\n \n /// A re-entrant mutual exclusion\n ///"}, {"sha": "eaee631270157c5a0d6a37b7eef961b6e98c8a23", "filename": "library/std/src/sys_common/rwlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36748cf814dcf6bbd6408e925a0b4770b7d47719/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs?ref=36748cf814dcf6bbd6408e925a0b4770b7d47719", "patch": "@@ -1,4 +1,4 @@\n-use crate::sys::rwlock as imp;\n+use crate::sys::locks as imp;\n \n /// An OS-based reader-writer lock, meant for use in static variables.\n ///"}]}