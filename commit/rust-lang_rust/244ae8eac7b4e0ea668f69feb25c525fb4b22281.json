{"sha": "244ae8eac7b4e0ea668f69feb25c525fb4b22281", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NGFlOGVhYzdiNGUwZWE2NjhmNjlmZWIyNWM1MjVmYjRiMjIyODE=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-11-29T04:22:21Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-11-29T04:22:21Z"}, "message": "Introduce try_read_value to avoid allocations.\n\nAttempt reading a primitive value out of any source lvalue and write\nthat into the destination without making an allocation if possible.", "tree": {"sha": "7386e86cdc24593655765a2e573d0c8eab852cf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7386e86cdc24593655765a2e573d0c8eab852cf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/244ae8eac7b4e0ea668f69feb25c525fb4b22281", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/244ae8eac7b4e0ea668f69feb25c525fb4b22281", "html_url": "https://github.com/rust-lang/rust/commit/244ae8eac7b4e0ea668f69feb25c525fb4b22281", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/244ae8eac7b4e0ea668f69feb25c525fb4b22281/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "140b21e09cc0389626e1365ac61dc278d5eb1ab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/140b21e09cc0389626e1365ac61dc278d5eb1ab6", "html_url": "https://github.com/rust-lang/rust/commit/140b21e09cc0389626e1365ac61dc278d5eb1ab6"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "c1b6e1e63b6e81158093fb6751040256d32b6b19", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/244ae8eac7b4e0ea668f69feb25c525fb4b22281/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/244ae8eac7b4e0ea668f69feb25c525fb4b22281/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=244ae8eac7b4e0ea668f69feb25c525fb4b22281", "patch": "@@ -1265,12 +1265,16 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             // if they referred to the same allocation, since then a change to one would\n             // implicitly change the other.\n             //\n-            // TODO(solson): It would be valid to attempt reading a primitive value out of\n-            // the source and writing that into the destination without making an\n-            // allocation. This would be a pure optimization.\n-            let dest_ptr = self.alloc_ptr(dest_ty)?;\n-            self.copy(src_ptr, dest_ptr, dest_ty)?;\n-            write_dest(self, Value::ByRef(dest_ptr));\n+            // It is a valid optimization to attempt reading a primitive value out of the\n+            // source and write that into the destination without making an allocation, so\n+            // we do so here.\n+            if let Ok(Some(src_val)) = self.try_read_value(src_ptr, dest_ty) {\n+                write_dest(self, src_val);\n+            } else {\n+                let dest_ptr = self.alloc_ptr(dest_ty)?;\n+                self.copy(src_ptr, dest_ptr, dest_ty)?;\n+                write_dest(self, Value::ByRef(dest_ptr));\n+            }\n \n         } else {\n             // Finally, we have the simple case where neither source nor destination are\n@@ -1400,6 +1404,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     }\n \n     fn read_value(&mut self, ptr: Pointer, ty: Ty<'tcx>) -> EvalResult<'tcx, Value> {\n+        if let Some(val) = self.try_read_value(ptr, ty)? {\n+            Ok(val)\n+        } else {\n+            bug!(\"primitive read failed for type: {:?}\", ty);\n+        }\n+    }\n+\n+    fn try_read_value(&mut self, ptr: Pointer, ty: Ty<'tcx>) -> EvalResult<'tcx, Option<Value>> {\n         use syntax::ast::FloatTy;\n \n         let val = match ty.sty {\n@@ -1439,11 +1451,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             ty::TyFloat(FloatTy::F32) => PrimVal::from_f32(self.memory.read_f32(ptr)?),\n             ty::TyFloat(FloatTy::F64) => PrimVal::from_f64(self.memory.read_f64(ptr)?),\n \n-            // TODO(solson): Should this even be here? Fn items aren't primvals, are they?\n-            ty::TyFnDef(def_id, substs, fn_ty) => {\n-                PrimVal::from_ptr(self.memory.create_fn_ptr(self.tcx, def_id, substs, fn_ty))\n-            },\n-\n             ty::TyFnPtr(_) => self.memory.read_ptr(ptr).map(PrimVal::from_ptr)?,\n             ty::TyBox(ty) |\n             ty::TyRef(_, ty::TypeAndMut { ty, .. }) |\n@@ -1460,7 +1467,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         ty::TyStr => PrimVal::from_uint(self.memory.read_usize(extra)?),\n                         _ => bug!(\"unsized primval ptr read from {:?}\", ty),\n                     };\n-                    return Ok(Value::ByValPair(PrimVal::from_ptr(p), extra));\n+                    return Ok(Some(Value::ByValPair(PrimVal::from_ptr(p), extra)));\n                 }\n             }\n \n@@ -1474,14 +1481,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         PrimVal::from_uint(self.memory.read_uint(ptr, size)?)\n                     }\n                 } else {\n-                    bug!(\"primitive read of non-clike enum: {:?}\", ty);\n+                    return Ok(None);\n                 }\n             },\n \n-            _ => bug!(\"primitive read of non-primitive type: {:?}\", ty),\n+            _ => return Ok(None),\n         };\n \n-        Ok(Value::ByVal(val))\n+        Ok(Some(Value::ByVal(val)))\n     }\n \n     fn frame(&self) -> &Frame<'tcx> {"}]}