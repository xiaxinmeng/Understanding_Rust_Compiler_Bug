{"sha": "a8b1ea159c1159d4b7e7f41d45c1f9e933e85e93", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4YjFlYTE1OWMxMTU5ZDRiN2U3ZjQxZDQ1YzFmOWU5MzNlODVlOTM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-07-12T02:00:56Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-07-12T02:12:02Z"}, "message": "Make the parser add correct spans to view_items\n\nCloses #650.", "tree": {"sha": "6c71cd21c8d8330a512a751d17ecf47bcf8ff455", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c71cd21c8d8330a512a751d17ecf47bcf8ff455"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8b1ea159c1159d4b7e7f41d45c1f9e933e85e93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8b1ea159c1159d4b7e7f41d45c1f9e933e85e93", "html_url": "https://github.com/rust-lang/rust/commit/a8b1ea159c1159d4b7e7f41d45c1f9e933e85e93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8b1ea159c1159d4b7e7f41d45c1f9e933e85e93/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23d1520398628a02f2d2551ae2a27bd28af269f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/23d1520398628a02f2d2551ae2a27bd28af269f2", "html_url": "https://github.com/rust-lang/rust/commit/23d1520398628a02f2d2551ae2a27bd28af269f2"}], "stats": {"total": 49, "additions": 19, "deletions": 30}, "files": [{"sha": "ba6813cd6ce2dcfa6f725ee67a746871eb8404a2", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 19, "deletions": 30, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a8b1ea159c1159d4b7e7f41d45c1f9e933e85e93/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b1ea159c1159d4b7e7f41d45c1f9e933e85e93/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=a8b1ea159c1159d4b7e7f41d45c1f9e933e85e93", "patch": "@@ -2291,25 +2291,20 @@ fn parse_optional_meta(&parser p) -> (@ast::meta_item)[] {\n     }\n }\n \n-fn parse_use(&parser p) -> @ast::view_item {\n-    auto lo = p.get_last_lo_pos();\n+fn parse_use(&parser p) -> ast::view_item_ {\n     auto ident = parse_ident(p);\n     auto metadata = parse_optional_meta(p);\n-    auto hi = p.get_hi_pos();\n-    expect(p, token::SEMI);\n-    auto use_decl = ast::view_item_use(ident, metadata, p.get_id());\n-    ret @spanned(lo, hi, use_decl);\n+    ret ast::view_item_use(ident, metadata, p.get_id());\n }\n \n fn parse_rest_import_name(&parser p, ast::ident first,\n                           option::t[ast::ident] def_ident) ->\n-   @ast::view_item {\n-    auto lo = p.get_lo_pos();\n+   ast::view_item_ {\n     let ast::ident[] identifiers = ~[first];\n     let bool glob = false;\n     while (true) {\n         alt (p.peek()) {\n-            case (token::SEMI) { p.bump(); break; }\n+            case (token::SEMI) { break; }\n             case (token::MOD_SEP) {\n                 if (glob) { p.fatal(\"cannot path into a glob\"); }\n                 p.bump();\n@@ -2327,31 +2322,25 @@ fn parse_rest_import_name(&parser p, ast::ident first,\n             case (_) { p.fatal(\"expecting an identifier, or '*'\"); }\n         }\n     }\n-    auto hi = p.get_hi_pos();\n-    auto import_decl;\n     alt (def_ident) {\n         case (some(?i)) {\n             if (glob) { p.fatal(\"globbed imports can't be renamed\"); }\n-            import_decl =\n-                ast::view_item_import(i, identifiers, p.get_id());\n+            ret ast::view_item_import(i, identifiers, p.get_id());\n         }\n         case (_) {\n             if (glob) {\n-                import_decl =\n-                    ast::view_item_import_glob(identifiers, p.get_id());\n+                ret ast::view_item_import_glob(identifiers, p.get_id());\n             } else {\n                 auto len = ivec::len(identifiers);\n-                import_decl =\n-                    ast::view_item_import(identifiers.(len - 1u), identifiers,\n+                ret ast::view_item_import(identifiers.(len - 1u), identifiers,\n                                           p.get_id());\n             }\n         }\n     }\n-    ret @spanned(lo, hi, import_decl);\n }\n \n fn parse_full_import_name(&parser p, ast::ident def_ident) ->\n-   @ast::view_item {\n+   ast::view_item_ {\n     alt (p.peek()) {\n         case (token::IDENT(?i, _)) {\n             p.bump();\n@@ -2362,7 +2351,7 @@ fn parse_full_import_name(&parser p, ast::ident def_ident) ->\n     fail;\n }\n \n-fn parse_import(&parser p) -> @ast::view_item {\n+fn parse_import(&parser p) -> ast::view_item_ {\n     alt (p.peek()) {\n         case (token::IDENT(?i, _)) {\n             p.bump();\n@@ -2381,20 +2370,20 @@ fn parse_import(&parser p) -> @ast::view_item {\n     fail;\n }\n \n-fn parse_export(&parser p) -> @ast::view_item {\n-    auto lo = p.get_last_lo_pos();\n+fn parse_export(&parser p) -> ast::view_item_ {\n     auto id = parse_ident(p);\n-    auto hi = p.get_hi_pos();\n-    expect(p, token::SEMI);\n-    ret @spanned(lo, hi, ast::view_item_export(id, p.get_id()));\n+    ret ast::view_item_export(id, p.get_id());\n }\n \n fn parse_view_item(&parser p) -> @ast::view_item {\n-    if (eat_word(p, \"use\")) {\n-        ret parse_use(p);\n-    } else if (eat_word(p, \"import\")) {\n-        ret parse_import(p);\n-    } else if (eat_word(p, \"export\")) { ret parse_export(p); } else { fail; }\n+    auto lo = p.get_lo_pos();\n+    auto the_item = if (eat_word(p, \"use\")) { parse_use(p) }\n+                    else if (eat_word(p, \"import\")) { parse_import(p) }\n+                    else if (eat_word(p, \"export\")) { parse_export(p) }\n+                    else { fail };\n+    auto hi = p.get_lo_pos();\n+    expect(p, token::SEMI);\n+    ret @spanned(lo, hi, the_item);\n }\n \n fn is_view_item(&parser p) -> bool {"}]}