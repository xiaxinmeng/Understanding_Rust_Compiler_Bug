{"sha": "f605f6e70a3a15b77900942933253d16dd3ce1f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MDVmNmU3MGEzYTE1Yjc3OTAwOTQyOTMzMjUzZDE2ZGQzY2UxZjY=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-05T21:32:25Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-05T21:32:25Z"}, "message": "Merge #188\n\n188: Introduce `SyntaxErrorKind` and `TextRange` to `SyntaxError` r=matklad a=aochagavia\n\n\n\nCo-authored-by: Adolfo Ochagav\u00eda <aochagavia92@gmail.com>\nCo-authored-by: Adolfo Ochagav\u00eda <github@adolfo.ochagavia.xyz>", "tree": {"sha": "a7e8c5097124f8dae7ef15af4b85b1c208d3358c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7e8c5097124f8dae7ef15af4b85b1c208d3358c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f605f6e70a3a15b77900942933253d16dd3ce1f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f605f6e70a3a15b77900942933253d16dd3ce1f6", "html_url": "https://github.com/rust-lang/rust/commit/f605f6e70a3a15b77900942933253d16dd3ce1f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f605f6e70a3a15b77900942933253d16dd3ce1f6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "43665eb166e1bd0319a1e13a97b753a536e4b4d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/43665eb166e1bd0319a1e13a97b753a536e4b4d2", "html_url": "https://github.com/rust-lang/rust/commit/43665eb166e1bd0319a1e13a97b753a536e4b4d2"}, {"sha": "59405bfe4ad0afa0b7ff533c7bfbc3ad4170604c", "url": "https://api.github.com/repos/rust-lang/rust/commits/59405bfe4ad0afa0b7ff533c7bfbc3ad4170604c", "html_url": "https://github.com/rust-lang/rust/commit/59405bfe4ad0afa0b7ff533c7bfbc3ad4170604c"}], "stats": {"total": 261, "additions": 193, "deletions": 68}, "files": [{"sha": "f92181b867cca5be593a0ebb6c7fad23247e6904", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f605f6e70a3a15b77900942933253d16dd3ce1f6/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f605f6e70a3a15b77900942933253d16dd3ce1f6/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=f605f6e70a3a15b77900942933253d16dd3ce1f6", "patch": "@@ -31,6 +31,7 @@ use ra_syntax::{\n     algo::find_leaf_at_offset,\n     ast::{self, AstNode, NameOwner},\n     File,\n+    Location,\n     SyntaxKind::{self, *},\n     SyntaxNodeRef, TextRange, TextUnit,\n };\n@@ -100,11 +101,18 @@ pub fn highlight(file: &File) -> Vec<HighlightedRange> {\n }\n \n pub fn diagnostics(file: &File) -> Vec<Diagnostic> {\n+    fn location_to_range(location: Location) -> TextRange {\n+        match location {\n+            Location::Offset(offset) => TextRange::offset_len(offset, 1.into()),\n+            Location::Range(range) => range,\n+        }\n+    }\n+\n     file.errors()\n         .into_iter()\n         .map(|err| Diagnostic {\n-            range: TextRange::offset_len(err.offset, 1.into()),\n-            msg: \"Syntax Error: \".to_string() + &err.msg,\n+            range: location_to_range(err.location()),\n+            msg: format!(\"Syntax Error: {}\", err),\n         })\n         .collect()\n }"}, {"sha": "1230028257b184545eba5ea5840e845db2a041f3", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f605f6e70a3a15b77900942933253d16dd3ce1f6/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f605f6e70a3a15b77900942933253d16dd3ce1f6/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=f605f6e70a3a15b77900942933253d16dd3ce1f6", "patch": "@@ -54,7 +54,7 @@ pub use crate::{\n     rowan::{SmolStr, TextRange, TextUnit},\n     syntax_kinds::SyntaxKind,\n     yellow::{\n-        Direction, OwnedRoot, RefRoot, SyntaxError, SyntaxNode, SyntaxNodeRef, TreeRoot, WalkEvent,\n+        Direction, OwnedRoot, RefRoot, SyntaxError, SyntaxNode, SyntaxNodeRef, TreeRoot, WalkEvent, Location,\n     },\n };\n "}, {"sha": "bf9c1cef09554526e2ac58079500ddeceeb29b95", "filename": "crates/ra_syntax/src/parser_impl/event.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f605f6e70a3a15b77900942933253d16dd3ce1f6/crates%2Fra_syntax%2Fsrc%2Fparser_impl%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f605f6e70a3a15b77900942933253d16dd3ce1f6/crates%2Fra_syntax%2Fsrc%2Fparser_impl%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparser_impl%2Fevent.rs?ref=f605f6e70a3a15b77900942933253d16dd3ce1f6", "patch": "@@ -13,6 +13,11 @@ use crate::{\n     SmolStr,\n     SyntaxKind::{self, *},\n     TextRange, TextUnit,\n+    yellow::syntax_error::{\n+        ParseError,\n+        SyntaxError,\n+        SyntaxErrorKind,\n+    },\n };\n use std::mem;\n \n@@ -75,7 +80,7 @@ pub(crate) enum Event {\n     },\n \n     Error {\n-        msg: String,\n+        msg: ParseError,\n     },\n }\n \n@@ -157,7 +162,10 @@ impl<'a, S: Sink> EventProcessor<'a, S> {\n                         .sum::<TextUnit>();\n                     self.leaf(kind, len, n_raw_tokens);\n                 }\n-                Event::Error { msg } => self.sink.error(msg, self.text_pos),\n+                Event::Error { msg } => self.sink.error(SyntaxError::new(\n+                    SyntaxErrorKind::ParseError(msg),\n+                    self.text_pos,\n+                )),\n             }\n         }\n         self.sink"}, {"sha": "cb6e370ac51d6f260f7968c19903d5fbc683117b", "filename": "crates/ra_syntax/src/parser_impl/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f605f6e70a3a15b77900942933253d16dd3ce1f6/crates%2Fra_syntax%2Fsrc%2Fparser_impl%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f605f6e70a3a15b77900942933253d16dd3ce1f6/crates%2Fra_syntax%2Fsrc%2Fparser_impl%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparser_impl%2Fmod.rs?ref=f605f6e70a3a15b77900942933253d16dd3ce1f6", "patch": "@@ -10,7 +10,11 @@ use crate::{\n         event::{Event, EventProcessor},\n         input::{InputPosition, ParserInput},\n     },\n-    SmolStr, TextUnit,\n+    SmolStr,\n+    yellow::syntax_error::{\n+        ParseError,\n+        SyntaxError,\n+    },\n };\n \n use crate::SyntaxKind::{self, EOF, TOMBSTONE};\n@@ -21,7 +25,7 @@ pub(crate) trait Sink {\n     fn leaf(&mut self, kind: SyntaxKind, text: SmolStr);\n     fn start_internal(&mut self, kind: SyntaxKind);\n     fn finish_internal(&mut self);\n-    fn error(&mut self, message: String, offset: TextUnit);\n+    fn error(&mut self, error: SyntaxError);\n     fn finish(self) -> Self::Tree;\n }\n \n@@ -144,7 +148,9 @@ impl<'t> ParserImpl<'t> {\n     }\n \n     pub(super) fn error(&mut self, msg: String) {\n-        self.event(Event::Error { msg })\n+        self.event(Event::Error {\n+            msg: ParseError(msg),\n+        })\n     }\n \n     pub(super) fn complete(&mut self, pos: u32, kind: SyntaxKind) {"}, {"sha": "3c4ea5c22b7600618e803826305c2314ebfead16", "filename": "crates/ra_syntax/src/reparsing.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f605f6e70a3a15b77900942933253d16dd3ce1f6/crates%2Fra_syntax%2Fsrc%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f605f6e70a3a15b77900942933253d16dd3ce1f6/crates%2Fra_syntax%2Fsrc%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Freparsing.rs?ref=f605f6e70a3a15b77900942933253d16dd3ce1f6", "patch": "@@ -165,20 +165,14 @@ fn merge_errors(\n ) -> Vec<SyntaxError> {\n     let mut res = Vec::new();\n     for e in old_errors {\n-        if e.offset <= old_node.range().start() {\n+        if e.offset() <= old_node.range().start() {\n             res.push(e)\n-        } else if e.offset >= old_node.range().end() {\n-            res.push(SyntaxError {\n-                msg: e.msg,\n-                offset: e.offset + TextUnit::of_str(&edit.insert) - edit.delete.len(),\n-            })\n+        } else if e.offset() >= old_node.range().end() {\n+            res.push(e.add_offset(TextUnit::of_str(&edit.insert) - edit.delete.len()));\n         }\n     }\n     for e in new_errors {\n-        res.push(SyntaxError {\n-            msg: e.msg,\n-            offset: e.offset + old_node.range().start(),\n-        })\n+        res.push(e.add_offset(old_node.range().start()));\n     }\n     res\n }"}, {"sha": "f0812ff289d6d205c4b760bfc5946041dd9ff784", "filename": "crates/ra_syntax/src/string_lexing/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f605f6e70a3a15b77900942933253d16dd3ce1f6/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f605f6e70a3a15b77900942933253d16dd3ce1f6/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fmod.rs?ref=f605f6e70a3a15b77900942933253d16dd3ce1f6", "patch": "@@ -100,10 +100,6 @@ impl<'a> Parser<'a> {\n     // Char parsing methods\n \n     fn parse_unicode_escape(&mut self, start: TextUnit) -> CharComponent {\n-        // Note: validation of UnicodeEscape will be done elsewhere:\n-        // * Only hex digits or underscores allowed\n-        // * Max 6 chars\n-        // * Within allowed range (must be at most 10FFFF)\n         match self.peek() {\n             Some('{') => {\n                 self.advance();\n@@ -127,9 +123,6 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_ascii_code_escape(&mut self, start: TextUnit) -> CharComponent {\n-        // Note: validation of AsciiCodeEscape will be done elsewhere:\n-        // * First digit is octal\n-        // * Second digit is hex\n         let code_start = self.get_pos();\n         while let Some(next) = self.peek() {\n             if next == '\\'' || (self.get_pos() - code_start == 2.into()) {\n@@ -144,9 +137,6 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_escape(&mut self, start: TextUnit) -> CharComponent {\n-        // Note: validation of AsciiEscape will be done elsewhere:\n-        // * The escape sequence is non-empty\n-        // * The escape sequence is valid\n         if self.peek().is_none() {\n             return CharComponent::new(TextRange::from_to(start, start), AsciiEscape);\n         }"}, {"sha": "288d7edd4e8eb684219f1f55317177e9680cb6af", "filename": "crates/ra_syntax/src/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f605f6e70a3a15b77900942933253d16dd3ce1f6/crates%2Fra_syntax%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f605f6e70a3a15b77900942933253d16dd3ce1f6/crates%2Fra_syntax%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Futils.rs?ref=f605f6e70a3a15b77900942933253d16dd3ce1f6", "patch": "@@ -4,7 +4,7 @@ use std::fmt::Write;\n /// Parse a file and create a string representation of the resulting parse tree.\n pub fn dump_tree(syntax: SyntaxNodeRef) -> String {\n     let mut errors: Vec<_> = syntax.root_data().to_vec();\n-    errors.sort_by_key(|e| e.offset);\n+    errors.sort_by_key(|e| e.offset());\n     let mut err_pos = 0;\n     let mut level = 0;\n     let mut buf = String::new();\n@@ -23,9 +23,9 @@ pub fn dump_tree(syntax: SyntaxNodeRef) -> String {\n                 writeln!(buf, \"{:?}\", node).unwrap();\n                 if node.first_child().is_none() {\n                     let off = node.range().end();\n-                    while err_pos < errors.len() && errors[err_pos].offset <= off {\n+                    while err_pos < errors.len() && errors[err_pos].offset() <= off {\n                         indent!();\n-                        writeln!(buf, \"err: `{}`\", errors[err_pos].msg).unwrap();\n+                        writeln!(buf, \"err: `{}`\", errors[err_pos]).unwrap();\n                         err_pos += 1;\n                     }\n                 }\n@@ -37,7 +37,7 @@ pub fn dump_tree(syntax: SyntaxNodeRef) -> String {\n \n     assert_eq!(level, 0);\n     for err in errors[err_pos..].iter() {\n-        writeln!(buf, \"err: `{}`\", err.msg).unwrap();\n+        writeln!(buf, \"err: `{}`\", err).unwrap();\n     }\n \n     buf"}, {"sha": "009f5052f92c72675501eadbefce5679d025bc92", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 61, "deletions": 23, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/f605f6e70a3a15b77900942933253d16dd3ce1f6/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f605f6e70a3a15b77900942933253d16dd3ce1f6/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=f605f6e70a3a15b77900942933253d16dd3ce1f6", "patch": "@@ -1,40 +1,78 @@\n use crate::{\n+    algo::visit::{visitor_ctx, VisitorCtx},\n     ast::{self, AstNode},\n     File,\n-    string_lexing,\n+    string_lexing::{self, CharComponentKind},\n     yellow::{\n         SyntaxError,\n+        SyntaxErrorKind::*,\n     },\n };\n \n pub(crate) fn validate(file: &File) -> Vec<SyntaxError> {\n     let mut errors = Vec::new();\n-    for d in file.root.borrowed().descendants() {\n-        if let Some(c) = ast::Char::cast(d) {\n-            let components = &mut string_lexing::parse_char_literal(c.text());\n-            let len = components.count();\n+    for node in file.root.borrowed().descendants() {\n+        let _ = visitor_ctx(&mut errors)\n+            .visit::<ast::Char, _>(validate_char)\n+            .accept(node);\n+    }\n+    errors\n+}\n \n-            if !components.has_closing_quote {\n-                errors.push(SyntaxError {\n-                    msg: \"Unclosed char literal\".to_string(),\n-                    offset: d.range().start(),\n-                });\n-            }\n+fn validate_char(node: ast::Char, errors: &mut Vec<SyntaxError>) {\n+    let mut components = string_lexing::parse_char_literal(node.text());\n+    let mut len = 0;\n+    for component in &mut components {\n+        len += 1;\n \n-            if len == 0 {\n-                errors.push(SyntaxError {\n-                    msg: \"Empty char literal\".to_string(),\n-                    offset: d.range().start(),\n-                });\n+        // Validate escapes\n+        let text = &node.text()[component.range];\n+        let range = component.range + node.syntax().range().start();\n+        use self::CharComponentKind::*;\n+        match component.kind {\n+            AsciiEscape => {\n+                if text.len() == 1 {\n+                    // Escape sequence consists only of leading `\\`\n+                    errors.push(SyntaxError::new(EmptyAsciiEscape, range));\n+                } else {\n+                    let escape_code = text.chars().skip(1).next().unwrap();\n+                    if !is_ascii_escape(escape_code) {\n+                        errors.push(SyntaxError::new(InvalidAsciiEscape, range));\n+                    }\n+                }\n             }\n-\n-            if len > 1 {\n-                errors.push(SyntaxError {\n-                    msg: \"Character literal should be only one character long\".to_string(),\n-                    offset: d.range().start(),\n-                });\n+            AsciiCodeEscape => {\n+                // TODO:\n+                // * First digit is octal\n+                // * Second digit is hex\n+            }\n+            UnicodeEscape => {\n+                // TODO:\n+                // * Only hex digits or underscores allowed\n+                // * Max 6 chars\n+                // * Within allowed range (must be at most 10FFFF)\n             }\n+            // Code points are always valid\n+            CodePoint => (),\n         }\n     }\n-    errors\n+\n+    if !components.has_closing_quote {\n+        errors.push(SyntaxError::new(UnclosedChar, node.syntax().range()));\n+    }\n+\n+    if len == 0 {\n+        errors.push(SyntaxError::new(EmptyChar, node.syntax().range()));\n+    }\n+\n+    if len > 1 {\n+        errors.push(SyntaxError::new(LongChar, node.syntax().range()));\n+    }\n+}\n+\n+fn is_ascii_escape(code: char) -> bool {\n+    match code {\n+        '\\'' | '\"' | 'n' | 'r' | 't' | '0' => true,\n+        _ => false,\n+    }\n }"}, {"sha": "9fcebfb93b9da4bb6bc2e83fd881a5a71081c7b6", "filename": "crates/ra_syntax/src/yellow/builder.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f605f6e70a3a15b77900942933253d16dd3ce1f6/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f605f6e70a3a15b77900942933253d16dd3ce1f6/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fbuilder.rs?ref=f605f6e70a3a15b77900942933253d16dd3ce1f6", "patch": "@@ -1,7 +1,7 @@\n use crate::{\n     parser_impl::Sink,\n     yellow::{GreenNode, RaTypes, SyntaxError},\n-    SmolStr, SyntaxKind, TextUnit,\n+    SmolStr, SyntaxKind,\n };\n use rowan::GreenNodeBuilder;\n \n@@ -34,11 +34,7 @@ impl Sink for GreenBuilder {\n         self.inner.finish_internal();\n     }\n \n-    fn error(&mut self, message: String, offset: TextUnit) {\n-        let error = SyntaxError {\n-            msg: message,\n-            offset,\n-        };\n+    fn error(&mut self, error: SyntaxError) {\n         self.errors.push(error)\n     }\n "}, {"sha": "6da9486489d2e5bdd1762c24e0353774a04c9671", "filename": "crates/ra_syntax/src/yellow/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f605f6e70a3a15b77900942933253d16dd3ce1f6/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f605f6e70a3a15b77900942933253d16dd3ce1f6/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fmod.rs?ref=f605f6e70a3a15b77900942933253d16dd3ce1f6", "patch": "@@ -1,15 +1,17 @@\n mod builder;\n+pub mod syntax_error;\n mod syntax_text;\n \n use self::syntax_text::SyntaxText;\n-use crate::{SmolStr, SyntaxKind, TextRange, TextUnit};\n+use crate::{SmolStr, SyntaxKind, TextRange};\n use rowan::Types;\n use std::{\n     fmt,\n     hash::{Hash, Hasher},\n };\n \n pub(crate) use self::builder::GreenBuilder;\n+pub use self::syntax_error::{SyntaxError, SyntaxErrorKind, Location};\n pub use rowan::{TreeRoot, WalkEvent};\n \n #[derive(Debug, Clone, Copy)]\n@@ -24,12 +26,6 @@ pub type RefRoot<'a> = ::rowan::RefRoot<'a, RaTypes>;\n \n pub type GreenNode = ::rowan::GreenNode<RaTypes>;\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash, Ord, PartialOrd)]\n-pub struct SyntaxError {\n-    pub msg: String,\n-    pub offset: TextUnit,\n-}\n-\n #[derive(Clone, Copy)]\n pub struct SyntaxNode<R: TreeRoot<RaTypes> = OwnedRoot>(::rowan::SyntaxNode<RaTypes, R>);\n pub type SyntaxNodeRef<'a> = SyntaxNode<RefRoot<'a>>;"}, {"sha": "f3df6bc15318b0e745158d19f5d9ee9b73ae17e0", "filename": "crates/ra_syntax/src/yellow/syntax_error.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/f605f6e70a3a15b77900942933253d16dd3ce1f6/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f605f6e70a3a15b77900942933253d16dd3ce1f6/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_error.rs?ref=f605f6e70a3a15b77900942933253d16dd3ce1f6", "patch": "@@ -0,0 +1,89 @@\n+use std::fmt;\n+\n+use crate::{TextRange, TextUnit};\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct SyntaxError {\n+    kind: SyntaxErrorKind,\n+    location: Location,\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub enum Location {\n+    Offset(TextUnit),\n+    Range(TextRange),\n+}\n+\n+impl Into<Location> for TextUnit {\n+    fn into(self) -> Location {\n+        Location::Offset(self)\n+    }\n+}\n+\n+impl Into<Location> for TextRange {\n+    fn into(self) -> Location {\n+        Location::Range(self)\n+    }\n+}\n+\n+impl SyntaxError {\n+    pub fn new<L: Into<Location>>(kind: SyntaxErrorKind, loc: L) -> SyntaxError {\n+        SyntaxError {\n+            kind,\n+            location: loc.into(),\n+        }\n+    }\n+\n+    pub fn location(&self) -> Location {\n+        self.location.clone()\n+    }\n+\n+    pub fn offset(&self) -> TextUnit {\n+        match self.location {\n+            Location::Offset(offset) => offset,\n+            Location::Range(range) => range.start(),\n+        }\n+    }\n+\n+    pub fn add_offset(mut self, plus_offset: TextUnit) -> SyntaxError {\n+        self.location = match self.location {\n+            Location::Range(range) => Location::Range(range + plus_offset),\n+            Location::Offset(offset) => Location::Offset(offset + plus_offset),\n+        };\n+\n+        self\n+    }\n+}\n+\n+impl fmt::Display for SyntaxError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.kind.fmt(f)\n+    }\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub enum SyntaxErrorKind {\n+    ParseError(ParseError),\n+    EmptyChar,\n+    UnclosedChar,\n+    LongChar,\n+    EmptyAsciiEscape,\n+    InvalidAsciiEscape,\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct ParseError(pub String);\n+\n+impl fmt::Display for SyntaxErrorKind {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        use self::SyntaxErrorKind::*;\n+        match self {\n+            EmptyAsciiEscape => write!(f, \"Empty escape sequence\"),\n+            InvalidAsciiEscape => write!(f, \"Invalid escape sequence\"),\n+            EmptyChar => write!(f, \"Empty char literal\"),\n+            UnclosedChar => write!(f, \"Unclosed char literal\"),\n+            LongChar => write!(f, \"Char literal should be one character long\"),\n+            ParseError(msg) => write!(f, \"{}\", msg.0),\n+        }\n+    }\n+}"}]}