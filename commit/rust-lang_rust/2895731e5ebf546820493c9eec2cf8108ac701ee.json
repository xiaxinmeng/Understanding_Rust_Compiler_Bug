{"sha": "2895731e5ebf546820493c9eec2cf8108ac701ee", "node_id": "C_kwDOAAsO6NoAKDI4OTU3MzFlNWViZjU0NjgyMDQ5M2M5ZWVjMmNmODEwOGFjNzAxZWU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-20T23:57:16Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-21T00:00:49Z"}, "message": "Name placeholder in some region errors", "tree": {"sha": "9989c9adf2f1c61b560fa0a5e94b692ae24b76b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9989c9adf2f1c61b560fa0a5e94b692ae24b76b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2895731e5ebf546820493c9eec2cf8108ac701ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2895731e5ebf546820493c9eec2cf8108ac701ee", "html_url": "https://github.com/rust-lang/rust/commit/2895731e5ebf546820493c9eec2cf8108ac701ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2895731e5ebf546820493c9eec2cf8108ac701ee/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "897304954922a89f8af8bc4b1c40c2e78a3c62b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/897304954922a89f8af8bc4b1c40c2e78a3c62b0", "html_url": "https://github.com/rust-lang/rust/commit/897304954922a89f8af8bc4b1c40c2e78a3c62b0"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "dd6a76f754ddf796f1a17f151f853f1364655502", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2895731e5ebf546820493c9eec2cf8108ac701ee/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2895731e5ebf546820493c9eec2cf8108ac701ee/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=2895731e5ebf546820493c9eec2cf8108ac701ee", "patch": "@@ -129,21 +129,16 @@ pub(super) fn note_and_explain_region<'tcx>(\n     alt_span: Option<Span>,\n ) {\n     let (description, span) = match *region {\n-        ty::ReEarlyBound(_) | ty::ReFree(_) | ty::ReStatic => {\n-            msg_span_from_free_region(tcx, region, alt_span)\n+        ty::ReEarlyBound(_) | ty::ReFree(_) | ty::RePlaceholder(_) | ty::ReStatic => {\n+            msg_span_from_named_region(tcx, region, alt_span)\n         }\n \n-        ty::RePlaceholder(_) => return,\n-\n         ty::ReError(_) => return,\n \n-        // FIXME(#13998) RePlaceholder should probably print like\n-        // ReFree rather than dumping Debug output on the user.\n-        //\n         // We shouldn't really be having unification failures with ReVar\n         // and ReLateBound though.\n         ty::ReVar(_) | ty::ReLateBound(..) | ty::ReErased => {\n-            (format!(\"lifetime {:?}\", region), alt_span)\n+            (format!(\"lifetime `{region}`\"), alt_span)\n         }\n     };\n \n@@ -157,12 +152,12 @@ fn explain_free_region<'tcx>(\n     region: ty::Region<'tcx>,\n     suffix: &str,\n ) {\n-    let (description, span) = msg_span_from_free_region(tcx, region, None);\n+    let (description, span) = msg_span_from_named_region(tcx, region, None);\n \n     label_msg_span(err, prefix, description, span, suffix);\n }\n \n-fn msg_span_from_free_region<'tcx>(\n+fn msg_span_from_named_region<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     region: ty::Region<'tcx>,\n     alt_span: Option<Span>,\n@@ -173,6 +168,18 @@ fn msg_span_from_free_region<'tcx>(\n             (msg, Some(span))\n         }\n         ty::ReStatic => (\"the static lifetime\".to_owned(), alt_span),\n+        ty::RePlaceholder(ty::PlaceholderRegion {\n+            name: ty::BoundRegionKind::BrNamed(def_id, name),\n+            ..\n+        }) => (format!(\"the lifetime `{name}` as defined here\"), Some(tcx.def_span(def_id))),\n+        ty::RePlaceholder(ty::PlaceholderRegion {\n+            name: ty::BoundRegionKind::BrAnon(_, Some(span)),\n+            ..\n+        }) => (format!(\"the anonymous lifetime defined here\"), Some(span)),\n+        ty::RePlaceholder(ty::PlaceholderRegion {\n+            name: ty::BoundRegionKind::BrAnon(_, None),\n+            ..\n+        }) => (format!(\"an anonymous lifetime\"), None),\n         _ => bug!(\"{:?}\", region),\n     }\n }"}, {"sha": "40429fe756f460f7031000be8dab39797430524a", "filename": "tests/ui/object-safety/object-safety-supertrait-mentions-GAT.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2895731e5ebf546820493c9eec2cf8108ac701ee/tests%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-GAT.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2895731e5ebf546820493c9eec2cf8108ac701ee/tests%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-GAT.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-GAT.stderr?ref=2895731e5ebf546820493c9eec2cf8108ac701ee", "patch": "@@ -1,5 +1,10 @@\n error[E0311]: the parameter type `Self` may not live long enough\n    |\n+note: the parameter type `Self` must be valid for the lifetime `'a` as defined here...\n+  --> $DIR/object-safety-supertrait-mentions-GAT.rs:9:26\n+   |\n+LL | trait SuperTrait<T>: for<'a> GatTrait<Gat<'a> = T> {\n+   |                          ^^\n    = help: consider adding an explicit lifetime bound `Self: 'a`...\n    = note: ...so that the type `Self` will meet its required lifetime bounds...\n note: ...that is required by this bound"}]}