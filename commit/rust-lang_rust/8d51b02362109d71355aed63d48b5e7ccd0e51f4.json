{"sha": "8d51b02362109d71355aed63d48b5e7ccd0e51f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNTFiMDIzNjIxMDlkNzEzNTVhZWQ2M2Q0OGI1ZTdjY2QwZTUxZjQ=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-05T13:12:41Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-05T13:12:41Z"}, "message": "Merge #414\n\n414: textDocument/hover returns both type name and doc_text r=matklad a=h-michael\n\nimplement #389\n\nCo-authored-by: Hirokazu Hata <h.hata.ai.t@gmail.com>", "tree": {"sha": "24bea7af02132d576c94cd43d699c166f8b2ea1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24bea7af02132d576c94cd43d699c166f8b2ea1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d51b02362109d71355aed63d48b5e7ccd0e51f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d51b02362109d71355aed63d48b5e7ccd0e51f4", "html_url": "https://github.com/rust-lang/rust/commit/8d51b02362109d71355aed63d48b5e7ccd0e51f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d51b02362109d71355aed63d48b5e7ccd0e51f4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "0f0969b64adffb99f1b284d268e653ea264c5afb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f0969b64adffb99f1b284d268e653ea264c5afb", "html_url": "https://github.com/rust-lang/rust/commit/0f0969b64adffb99f1b284d268e653ea264c5afb"}, {"sha": "341eb4ae87de8cebc3bfc564970a4f1430af4dc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/341eb4ae87de8cebc3bfc564970a4f1430af4dc1", "html_url": "https://github.com/rust-lang/rust/commit/341eb4ae87de8cebc3bfc564970a4f1430af4dc1"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "2fc4d3649455320b4788164ed262e2cea0ef110f", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8d51b02362109d71355aed63d48b5e7ccd0e51f4/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d51b02362109d71355aed63d48b5e7ccd0e51f4/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=8d51b02362109d71355aed63d48b5e7ccd0e51f4", "patch": "@@ -9,7 +9,7 @@ use languageserver_types::{\n     Range, WorkspaceEdit, ParameterInformation, ParameterLabel, SignatureInformation, Hover,\n     HoverContents, DocumentFormattingParams, DocumentHighlight,\n };\n-use ra_analysis::{FileId, FoldKind, Query, RunnableKind, FileRange, FilePosition, Severity};\n+use ra_analysis::{FileId, FoldKind, Query, RunnableKind, FileRange, FilePosition, Severity, NavigationTarget};\n use ra_syntax::{TextUnit, text_utils::intersect};\n use ra_text_edit::text_utils::contains_offset_nonstrict;\n use rustc_hash::FxHashMap;\n@@ -517,11 +517,20 @@ pub fn handle_hover(\n         Some(it) => it,\n     };\n     let mut result = Vec::new();\n+    let file_id = params.text_document.try_conv_with(&world)?;\n+    let file_range = FileRange {\n+        file_id,\n+        range: rr.reference_range,\n+    };\n+    if let Some(type_name) = get_type(&world, file_range) {\n+        result.push(type_name);\n+    }\n     for nav in rr.resolves_to {\n-        if let Some(docs) = world.analysis().doc_text_for(nav)? {\n+        if let Some(docs) = get_doc_text(&world, nav) {\n             result.push(docs);\n         }\n     }\n+\n     let range = rr.reference_range.conv_with(&line_index);\n     if result.len() > 0 {\n         return Ok(Some(Hover {\n@@ -753,3 +762,17 @@ fn to_diagnostic_severity(severity: Severity) -> DiagnosticSeverity {\n         WeakWarning => DiagnosticSeverity::Hint,\n     }\n }\n+\n+fn get_type(world: &ServerWorld, file_range: FileRange) -> Option<String> {\n+    match world.analysis().type_of(file_range) {\n+        Ok(result) => result,\n+        _ => None,\n+    }\n+}\n+\n+fn get_doc_text(world: &ServerWorld, nav: NavigationTarget) -> Option<String> {\n+    match world.analysis().doc_text_for(nav) {\n+        Ok(result) => result,\n+        _ => None,\n+    }\n+}"}]}