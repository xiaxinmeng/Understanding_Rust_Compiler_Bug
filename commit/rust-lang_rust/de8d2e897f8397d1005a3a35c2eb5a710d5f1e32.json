{"sha": "de8d2e897f8397d1005a3a35c2eb5a710d5f1e32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlOGQyZTg5N2Y4Mzk3ZDEwMDVhM2EzNWMyZWI1YTcxMGQ1ZjFlMzI=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-16T10:23:38Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-16T10:23:38Z"}, "message": "add regression test for #71805", "tree": {"sha": "c92475777929279c4b2164797a4cb36f9358d69f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c92475777929279c4b2164797a4cb36f9358d69f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de8d2e897f8397d1005a3a35c2eb5a710d5f1e32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de8d2e897f8397d1005a3a35c2eb5a710d5f1e32", "html_url": "https://github.com/rust-lang/rust/commit/de8d2e897f8397d1005a3a35c2eb5a710d5f1e32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de8d2e897f8397d1005a3a35c2eb5a710d5f1e32/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2b18274a890eb19db5f784b2fb6925eebcdf86f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b18274a890eb19db5f784b2fb6925eebcdf86f", "html_url": "https://github.com/rust-lang/rust/commit/a2b18274a890eb19db5f784b2fb6925eebcdf86f"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "6823d780aefa9caa318feff93489593b78fee527", "filename": "src/test/ui/const-generics/type-dependent/issue-71805.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/de8d2e897f8397d1005a3a35c2eb5a710d5f1e32/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71805.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8d2e897f8397d1005a3a35c2eb5a710d5f1e32/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71805.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71805.rs?ref=de8d2e897f8397d1005a3a35c2eb5a710d5f1e32", "patch": "@@ -0,0 +1,41 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+use std::mem::MaybeUninit;\n+\n+trait CollectSlice<'a>: Iterator {\n+    fn inner_array<const N: usize>(&mut self) -> [Self::Item; N];\n+\n+    fn collect_array<const N: usize>(&mut self) -> [Self::Item; N] {\n+        let result = self.inner_array();\n+        assert!(self.next().is_none());\n+        result\n+    }\n+}\n+\n+impl<'a, I: ?Sized> CollectSlice<'a> for I\n+where\n+    I: Iterator,\n+{\n+    fn inner_array<const N: usize>(&mut self) -> [Self::Item; N] {\n+        let mut result: [MaybeUninit<Self::Item>; N] =\n+            unsafe { MaybeUninit::uninit().assume_init() };\n+\n+        let mut count = 0;\n+        for (dest, item) in result.iter_mut().zip(self) {\n+            *dest = MaybeUninit::new(item);\n+            count += 1;\n+        }\n+\n+        assert_eq!(N, count);\n+\n+        let temp_ptr: *const [MaybeUninit<Self::Item>; N] = &result;\n+        unsafe { std::ptr::read(temp_ptr as *const [Self::Item; N]) }\n+    }\n+}\n+\n+fn main() {\n+    let mut foos = [0u64; 9].iter().cloned();\n+    let _bar: [u64; 9] = foos.collect_array::<9_usize>();\n+}"}]}