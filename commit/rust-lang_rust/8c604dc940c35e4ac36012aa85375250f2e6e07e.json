{"sha": "8c604dc940c35e4ac36012aa85375250f2e6e07e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNjA0ZGM5NDBjMzVlNGFjMzYwMTJhYTg1Mzc1MjUwZjJlNmUwN2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-06T21:18:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-06T21:18:50Z"}, "message": "Auto merge of #30629 - brson:emscripten-upstream, r=alexcrichton\n\nHere's another go at adding emscripten support. This needs to wait again on new [libc definitions](https://github.com/rust-lang-nursery/libc/pull/122) landing. To get the libc definitions right I had to add support for i686-unknown-linux-musl, which are very similar to emscripten's, which are derived from arm/musl.\n\nThis branch additionally removes the makefile dependency on the `EMSCRIPTEN` environment variable by not building the unused compiler-rt.\n\nAgain, this is not sufficient for actually compiling to asmjs since it needs additional LLVM patches.\n\nr? @alexcrichton", "tree": {"sha": "f3beddb6caac90034b3410c7249745f1386e1dd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3beddb6caac90034b3410c7249745f1386e1dd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c604dc940c35e4ac36012aa85375250f2e6e07e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c604dc940c35e4ac36012aa85375250f2e6e07e", "html_url": "https://github.com/rust-lang/rust/commit/8c604dc940c35e4ac36012aa85375250f2e6e07e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c604dc940c35e4ac36012aa85375250f2e6e07e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "915fa2a378a22d197ed85f2d563f443edb10b713", "url": "https://api.github.com/repos/rust-lang/rust/commits/915fa2a378a22d197ed85f2d563f443edb10b713", "html_url": "https://github.com/rust-lang/rust/commit/915fa2a378a22d197ed85f2d563f443edb10b713"}, {"sha": "7afb56f51e52030fbdda07c38f9ae09a1daeed9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7afb56f51e52030fbdda07c38f9ae09a1daeed9f", "html_url": "https://github.com/rust-lang/rust/commit/7afb56f51e52030fbdda07c38f9ae09a1daeed9f"}], "stats": {"total": 351, "additions": 319, "deletions": 32}, "files": [{"sha": "dde17e76d8a865123fc128a0dd94d9a483553464", "filename": "configure", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/configure", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -1305,6 +1305,12 @@ $ pacman -R cmake && pacman -S mingw-w64-x86_64-cmake\n             putvar CFG_DISABLE_JEMALLOC\n             ;;\n \n+        *-emscripten)\n+            step_msg \"targeting emscripten, disabling jemalloc\"\n+            CFG_DISABLE_JEMALLOC=1\n+            putvar CFG_DISABLE_JEMALLOC\n+            ;;\n+\n         *)\n             ;;\n     esac"}, {"sha": "66ab0c9bf9383a8d3319caa091db94c812ebe0c7", "filename": "mk/cfg/asmjs-unknown-emscripten.mk", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/mk%2Fcfg%2Fasmjs-unknown-emscripten.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/mk%2Fcfg%2Fasmjs-unknown-emscripten.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fasmjs-unknown-emscripten.mk?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -0,0 +1,23 @@\n+# asmjs-unknown-emscripten configuration\n+CC_asmjs-unknown-emscripten=emcc\n+CXX_asmjs-unknown-emscripten=em++\n+CPP_asmjs-unknown-emscripten=$(CPP)\n+AR_asmjs-unknown-emscripten=emar\n+CFG_LIB_NAME_asmjs-unknown-emscripten=lib$(1).so\n+CFG_STATIC_LIB_NAME_asmjs-unknown-emscripten=lib$(1).a\n+CFG_LIB_GLOB_asmjs-unknown-emscripten=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_asmjs-unknown-emscripten=lib$(1)-*.dylib.dSYM\n+CFG_JEMALLOC_CFLAGS_asmjs-unknown-emscripten := -m32 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_asmjs-unknown-emscripten := -Wall -Werror -g -fPIC -m32 $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_asmjs-unknown-emscripten := -fno-rtti $(CXXFLAGS)\n+CFG_GCCISH_LINK_FLAGS_asmjs-unknown-emscripten := -shared -fPIC -ldl -pthread  -lrt -g -m32\n+CFG_GCCISH_DEF_FLAG_asmjs-unknown-emscripten := -Wl,--export-dynamic,--dynamic-list=\n+CFG_LLC_FLAGS_asmjs-unknown-emscripten :=\n+CFG_INSTALL_NAME_asmjs-unknown-emscripten =\n+CFG_EXE_SUFFIX_asmjs-unknown-emscripten =\n+CFG_WINDOWSY_asmjs-unknown-emscripten :=\n+CFG_UNIXY_asmjs-unknown-emscripten := 1\n+CFG_LDPATH_asmjs-unknown-emscripten :=\n+CFG_RUN_asmjs-unknown-emscripten=$(2)\n+CFG_RUN_TARG_asmjs-unknown-emscripten=$(call CFG_RUN_asmjs-unknown-emscripten,,$(2))\n+CFG_GNU_TRIPLE_asmjs-unknown-emscripten := asmjs-unknown-emscripten"}, {"sha": "ac05798c7673b1d598cf75a4949ab294f2601f1d", "filename": "mk/cfg/i686-unknown-linux-musl.mk", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/mk%2Fcfg%2Fi686-unknown-linux-musl.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/mk%2Fcfg%2Fi686-unknown-linux-musl.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-unknown-linux-musl.mk?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -0,0 +1,28 @@\n+# i686-unknown-linux-musl configuration\n+CC_i686-unknown-linux-musl=$(CFG_MUSL_ROOT)/bin/musl-gcc\n+CXX_i686-unknown-linux-musl=notaprogram\n+CPP_i686-unknown-linux-musl=$(CFG_MUSL_ROOT)/bin/musl-gcc -E\n+AR_i686-unknown-linux-musl=$(AR)\n+CFG_INSTALL_ONLY_RLIB_i686-unknown-linux-musl = 1\n+CFG_LIB_NAME_i686-unknown-linux-musl=lib$(1).so\n+CFG_STATIC_LIB_NAME_i686-unknown-linux-musl=lib$(1).a\n+CFG_LIB_GLOB_i686-unknown-linux-musl=lib$(1)-*.so\n+CFG_JEMALLOC_CFLAGS_i686-unknown-linux-musl := -m32 -Wl,-melf_i386\n+CFG_GCCISH_CFLAGS_i686-unknown-linux-musl := -Wall -Werror -g -fPIC -m32 -Wl,-melf_i386\n+CFG_GCCISH_CXXFLAGS_i686-unknown-linux-musl :=\n+CFG_GCCISH_LINK_FLAGS_i686-unknown-linux-musl :=\n+CFG_GCCISH_DEF_FLAG_i686-unknown-linux-musl :=\n+CFG_LLC_FLAGS_i686-unknown-linux-musl :=\n+CFG_INSTALL_NAME_i686-unknown-linux-musl =\n+CFG_EXE_SUFFIX_i686-unknown-linux-musl =\n+CFG_WINDOWSY_i686-unknown-linux-musl :=\n+CFG_UNIXY_i686-unknown-linux-musl := 1\n+CFG_LDPATH_i686-unknown-linux-musl :=\n+CFG_RUN_i686-unknown-linux-musl=$(2)\n+CFG_RUN_TARG_i686-unknown-linux-musl=$(call CFG_RUN_i686-unknown-linux-musl,,$(2))\n+CFG_GNU_TRIPLE_i686-unknown-linux-musl := i686-unknown-linux-musl\n+CFG_THIRD_PARTY_OBJECTS_i686-unknown-linux-musl := crt1.o crti.o crtn.o\n+CFG_INSTALLED_OBJECTS_i686-unknown-linux-musl := crt1.o crti.o crtn.o\n+\n+NATIVE_DEPS_libc_T_i686-unknown-linux-musl += libc.a\n+NATIVE_DEPS_std_T_i686-unknown-linux-musl += libunwind.a crt1.o crti.o crtn.o"}, {"sha": "dff9c33f8db45f5687ffdc9f218513f157b4c000", "filename": "mk/main.mk", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -361,6 +361,9 @@ export CFG_DISABLE_UNSTABLE_FEATURES\n export RUSTC_BOOTSTRAP_KEY:=$(CFG_BOOTSTRAP_KEY)\n endif\n export CFG_BOOTSTRAP_KEY\n+ifdef CFG_MUSL_ROOT\n+export CFG_MUSL_ROOT\n+endif\n \n ######################################################################\n # Per-stage targets and runner"}, {"sha": "cfb210952bcfb419abe7d3c2c7b815969d2017e9", "filename": "mk/rt.mk", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -254,6 +254,15 @@ ifeq ($$(findstring freebsd,$(1)),freebsd)\n \tCOMPRT_CFLAGS_$(1) += -I/usr/include/c++/v1\n endif\n \n+ifeq ($$(findstring emscripten,$(1)),emscripten)\n+\n+# FIXME: emscripten doesn't use compiler-rt and can't build it without\n+# further hacks\n+$$(COMPRT_LIB_$(1)):\n+\ttouch $$@\n+\n+else\n+\n $$(COMPRT_LIB_$(1)): $$(COMPRT_DEPS) $$(MKFILE_DEPS)\n \t@$$(call E, make: compiler-rt)\n \t$$(Q)$$(MAKE) -C \"$(S)src/compiler-rt\" \\\n@@ -266,7 +275,10 @@ $$(COMPRT_LIB_$(1)): $$(COMPRT_DEPS) $$(MKFILE_DEPS)\n \t\tTargetTriple=$(1) \\\n \t\ttriple-builtins\n \t$$(Q)cp $$(COMPRT_BUILD_DIR_$(1))/triple/builtins/libcompiler_rt.a $$@\n+\n+endif # if emscripten\n endif\n+\n ################################################################################\n # libbacktrace\n #\n@@ -301,6 +313,12 @@ $$(BACKTRACE_LIB_$(1)):\n \ttouch $$@\n else\n \n+ifeq ($$(findstring emscripten,$(1)),emscripten)\n+# FIXME: libbacktrace doesn't understand the emscripten triple\n+$$(BACKTRACE_LIB_$(1)):\n+\ttouch $$@\n+else\n+\n ifdef CFG_ENABLE_FAST_MAKE\n BACKTRACE_DEPS := $(S)/.gitmodules\n else\n@@ -348,6 +366,7 @@ $$(BACKTRACE_LIB_$(1)): $$(BACKTRACE_BUILD_DIR_$(1))/Makefile $$(MKFILE_DEPS)\n \t\tINCDIR=$(S)src/libbacktrace\n \t$$(Q)cp $$(BACKTRACE_BUILD_DIR_$(1))/.libs/libbacktrace.a $$@\n \n+endif # endif for emscripten\n endif # endif for msvc\n endif # endif for ios\n endif # endif for darwin"}, {"sha": "ada6ea200d1d567f92a4ceff0e8c89f6b6b9bb87", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -1357,7 +1357,12 @@ fn make_lib_name(config: &Config, auxfile: &Path, testfile: &Path) -> PathBuf {\n \n fn make_exe_name(config: &Config, testfile: &Path) -> PathBuf {\n     let mut f = output_base_name(config, testfile);\n-    if !env::consts::EXE_SUFFIX.is_empty() {\n+    // FIXME: This is using the host architecture exe suffix, not target!\n+    if config.target == \"asmjs-unknown-emscripten\" {\n+        let mut fname = f.file_name().unwrap().to_os_string();\n+        fname.push(\".js\");\n+        f.set_file_name(&fname);\n+    } else if !env::consts::EXE_SUFFIX.is_empty() {\n         let mut fname = f.file_name().unwrap().to_os_string();\n         fname.push(env::consts::EXE_SUFFIX);\n         f.set_file_name(&fname);\n@@ -1370,6 +1375,12 @@ fn make_run_args(config: &Config, props: &TestProps, testfile: &Path)\n     // If we've got another tool to run under (valgrind),\n     // then split apart its command\n     let mut args = split_maybe_args(&config.runtool);\n+\n+    // If this is emscripten, then run tests under nodejs\n+    if config.target == \"asmjs-unknown-emscripten\" {\n+        args.push(\"nodejs\".to_owned());\n+    }\n+\n     let exe_file = make_exe_name(config, testfile);\n \n     // FIXME (#9639): This needs to handle non-utf8 paths"}, {"sha": "69b839c5b7d9d0e94cdf58623574ef3ecd8e9dc3", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -26,6 +26,7 @@ const OS_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"win32\", \"windows\"),\n     (\"windows\", \"windows\"),\n     (\"solaris\", \"solaris\"),\n+    (\"emscripten\", \"emscripten\"),\n ];\n \n const ARCH_TABLE: &'static [(&'static str, &'static str)] = &[\n@@ -44,6 +45,7 @@ const ARCH_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"sparc\", \"sparc\"),\n     (\"x86_64\", \"x86_64\"),\n     (\"xcore\", \"xcore\"),\n+    (\"asmjs\", \"asmjs\"),\n ];\n \n pub fn get_os(triple: &str) -> &'static str {"}, {"sha": "6a62e00d311692dbafa6f5dd1dd1acd85e2fe7dc", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -30,7 +30,8 @@ extern crate libc;\n               target_arch = \"arm\",\n               target_arch = \"mips\",\n               target_arch = \"powerpc\",\n-              target_arch = \"powerpc64\")))]\n+              target_arch = \"powerpc64\",\n+              target_arch = \"asmjs\")))]\n const MIN_ALIGN: usize = 8;\n #[cfg(all(any(target_arch = \"x86_64\",\n               target_arch = \"aarch64\")))]"}, {"sha": "b25640c2791b16a8b5fd8aed252be9b72ff12057", "filename": "src/librustc_back/target/asmjs_unknown_emscripten.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use super::{Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    let opts = TargetOptions {\n+        linker: \"emcc\".to_string(),\n+        ar: \"emar\".to_string(),\n+\n+        dynamic_linking: false,\n+        executables: true,\n+        exe_suffix: \".js\".to_string(),\n+        no_compiler_rt: true,\n+        linker_is_gnu: true,\n+        allow_asm: false,\n+        archive_format: \"gnu\".to_string(),\n+        obj_is_bitcode: true,\n+        .. Default::default()\n+    };\n+    Target {\n+        llvm_target: \"asmjs-unknown-emscripten\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_os: \"emscripten\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        arch: \"asmjs\".to_string(),\n+        options: opts,\n+    }\n+}"}, {"sha": "77bc7bb51755d6a6fe52775130f5c69cdfbe6706", "filename": "src/librustc_back/target/i686_unknown_linux_musl.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_musl.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// See x86_64_unknown_linux_musl for explanation of arguments\n+\n+use target::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::linux_base::opts();\n+    base.cpu = \"pentium4\".to_string();\n+    base.pre_link_args.push(\"-m32\".to_string());\n+    base.pre_link_args.push(\"-Wl,-melf_i386\".to_string());\n+\n+    base.pre_link_args.push(\"-nostdlib\".to_string());\n+    base.pre_link_args.push(\"-static\".to_string());\n+    base.pre_link_args.push(\"-Wl,--eh-frame-hdr\".to_string());\n+\n+    base.pre_link_args.push(\"-Wl,-(\".to_string());\n+    base.post_link_args.push(\"-Wl,-)\".to_string());\n+\n+    base.pre_link_objects_exe.push(\"crt1.o\".to_string());\n+    base.pre_link_objects_exe.push(\"crti.o\".to_string());\n+    base.post_link_objects.push(\"crtn.o\".to_string());\n+\n+    base.dynamic_linking = false;\n+    base.has_rpath = false;\n+    base.position_independent_executables = false;\n+\n+    Target {\n+        llvm_target: \"i686-unknown-linux-musl\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        arch: \"x86\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"musl\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "c61ae547a2254d2e3fd1cfeab747a0277fe11a0c", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -204,6 +204,10 @@ pub struct TargetOptions {\n     /// Flag indicating whether ELF TLS (e.g. #[thread_local]) is available for\n     /// this target.\n     pub has_elf_tls: bool,\n+    // This is mainly for easy compatibility with emscripten.\n+    // If we give emcc .o files that are actually .bc files it\n+    // will 'just work'.\n+    pub obj_is_bitcode: bool,\n }\n \n impl Default for TargetOptions {\n@@ -251,6 +255,7 @@ impl Default for TargetOptions {\n             exe_allocation_crate: \"alloc_system\".to_string(),\n             allow_asm: true,\n             has_elf_tls: false,\n+            obj_is_bitcode: false,\n         }\n     }\n }\n@@ -426,6 +431,7 @@ impl Target {\n             armv7_unknown_linux_gnueabihf,\n             aarch64_unknown_linux_gnu,\n             x86_64_unknown_linux_musl,\n+            i686_unknown_linux_musl,\n             mips_unknown_linux_musl,\n             mipsel_unknown_linux_musl,\n \n@@ -461,7 +467,8 @@ impl Target {\n             x86_64_pc_windows_msvc,\n             i686_pc_windows_msvc,\n \n-            le32_unknown_nacl\n+            le32_unknown_nacl,\n+            asmjs_unknown_emscripten\n         );\n \n "}, {"sha": "75d8e44989bf42f40601cb595f68c5d1cc866c29", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -244,7 +244,6 @@ pub struct ModuleConfig {\n     emit_ir: bool,\n     emit_asm: bool,\n     emit_obj: bool,\n-\n     // Miscellaneous flags.  These are mostly copied from command-line\n     // options.\n     no_verify: bool,\n@@ -254,7 +253,11 @@ pub struct ModuleConfig {\n     vectorize_loop: bool,\n     vectorize_slp: bool,\n     merge_functions: bool,\n-    inline_threshold: Option<usize>\n+    inline_threshold: Option<usize>,\n+    // Instead of creating an object file by doing LLVM codegen, just\n+    // make the object file bitcode. Provides easy compatibility with\n+    // emscripten's ecc compiler, when used as the linker.\n+    obj_is_bitcode: bool,\n }\n \n unsafe impl Send for ModuleConfig { }\n@@ -272,6 +275,7 @@ impl ModuleConfig {\n             emit_ir: false,\n             emit_asm: false,\n             emit_obj: false,\n+            obj_is_bitcode: false,\n \n             no_verify: false,\n             no_prepopulate_passes: false,\n@@ -290,6 +294,7 @@ impl ModuleConfig {\n         self.no_builtins = trans.no_builtins;\n         self.time_passes = sess.time_passes();\n         self.inline_threshold = sess.opts.cg.inline_threshold;\n+        self.obj_is_bitcode = sess.target.target.options.obj_is_bitcode;\n \n         // Copy what clang does by turning on loop vectorization at O2 and\n         // slp vectorization at O3. Otherwise configure other optimization aspects\n@@ -530,11 +535,21 @@ unsafe fn optimize_and_codegen(cgcx: &CodegenContext,\n         f(cpm);\n     }\n \n-    if config.emit_bc {\n-        let ext = format!(\"{}.bc\", name_extra);\n-        let out = output_names.with_extension(&ext);\n-        let out = path2cstr(&out);\n-        llvm::LLVMWriteBitcodeToFile(llmod, out.as_ptr());\n+    // Change what we write and cleanup based on whether obj files are\n+    // just llvm bitcode. In that case write bitcode, and possibly\n+    // delete the bitcode if it wasn't requested. Don't generate the\n+    // machine code, instead copy the .o file from the .bc\n+    let write_bc = config.emit_bc || config.obj_is_bitcode;\n+    let rm_bc = !config.emit_bc && config.obj_is_bitcode;\n+    let write_obj = config.emit_obj && !config.obj_is_bitcode;\n+    let copy_bc_to_obj = config.emit_obj && config.obj_is_bitcode;\n+\n+    let bc_out = output_names.with_extension(&format!(\"{}.bc\", name_extra));\n+    let obj_out = output_names.with_extension(&format!(\"{}.o\", name_extra));\n+\n+    if write_bc {\n+        let bc_out_c = path2cstr(&bc_out);\n+        llvm::LLVMWriteBitcodeToFile(llmod, bc_out_c.as_ptr());\n     }\n \n     time(config.time_passes, &format!(\"codegen passes [{}]\", cgcx.worker), || {\n@@ -568,14 +583,27 @@ unsafe fn optimize_and_codegen(cgcx: &CodegenContext,\n             }\n         }\n \n-        if config.emit_obj {\n-            let path = output_names.with_extension(&format!(\"{}.o\", name_extra));\n+        if write_obj {\n             with_codegen(tm, llmod, config.no_builtins, |cpm| {\n-                write_output_file(cgcx.handler, tm, cpm, llmod, &path, llvm::ObjectFileType);\n+                write_output_file(cgcx.handler, tm, cpm, llmod, &obj_out, llvm::ObjectFileType);\n             });\n         }\n     });\n \n+    if copy_bc_to_obj {\n+        debug!(\"copying bitcode {:?} to obj {:?}\", bc_out, obj_out);\n+        if let Err(e) = fs::copy(&bc_out, &obj_out) {\n+            cgcx.handler.err(&format!(\"failed to copy bitcode to object file: {}\", e));\n+        }\n+    }\n+\n+    if rm_bc {\n+        debug!(\"removing_bitcode {:?}\", bc_out);\n+        if let Err(e) = fs::remove_file(&bc_out) {\n+            cgcx.handler.err(&format!(\"failed to remove bitcode: {}\", e));\n+        }\n+    }\n+\n     llvm::LLVMDisposeModule(llmod);\n     llvm::LLVMContextDispose(llcx);\n     llvm::LLVMRustDisposeTargetMachine(tm);"}, {"sha": "8c10be44ffde335b5605bd590d2865e74b1c2509", "filename": "src/librustc_trans/trans/cabi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -21,6 +21,7 @@ use trans::cabi_aarch64;\n use trans::cabi_powerpc;\n use trans::cabi_powerpc64;\n use trans::cabi_mips;\n+use trans::cabi_asmjs;\n use trans::type_::Type;\n \n #[derive(Clone, Copy, PartialEq)]\n@@ -129,6 +130,7 @@ pub fn compute_abi_info(ccx: &CrateContext,\n         \"mips\" => cabi_mips::compute_abi_info(ccx, atys, rty, ret_def),\n         \"powerpc\" => cabi_powerpc::compute_abi_info(ccx, atys, rty, ret_def),\n         \"powerpc64\" => cabi_powerpc64::compute_abi_info(ccx, atys, rty, ret_def),\n+        \"asmjs\" => cabi_asmjs::compute_abi_info(ccx, atys, rty, ret_def),\n         a => ccx.sess().fatal(&format!(\"unrecognized arch \\\"{}\\\" in target specification\", a)\n                               ),\n     }"}, {"sha": "823f333f3317b77469f242958dd0088ceb62796c", "filename": "src/librustc_trans/trans/cabi_asmjs.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibrustc_trans%2Ftrans%2Fcabi_asmjs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibrustc_trans%2Ftrans%2Fcabi_asmjs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_asmjs.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use trans::cabi::FnType;\n+use trans::cabi_arm;\n+use trans::context::CrateContext;\n+use trans::type_::Type;\n+\n+pub fn compute_abi_info(ccx: &CrateContext,\n+                        atys: &[Type],\n+                        rty: Type,\n+                        ret_def: bool) -> FnType {\n+    cabi_arm::compute_abi_info(ccx, atys, rty, ret_def,\n+                               cabi_arm::Flavor::General)\n+}"}, {"sha": "1b8bab7a4ee7035b522672adb2e591999491c862", "filename": "src/librustc_trans/trans/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -30,6 +30,7 @@ mod builder;\n mod cabi;\n mod cabi_aarch64;\n mod cabi_arm;\n+mod cabi_asmjs;\n mod cabi_mips;\n mod cabi_powerpc;\n mod cabi_powerpc64;"}, {"sha": "08e33fad40e0dafdee27437e387c5b7adcbe3d45", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -197,7 +197,8 @@ mod tests {\n           target_os = \"bitrig\",\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n-          target_os = \"solaris\"))]\n+          target_os = \"solaris\",\n+          target_os = \"emscripten\"))]\n mod dl {\n     use prelude::v1::*;\n "}, {"sha": "fa48efb27881b3f5b5a4f8d1303176870c3cad9e", "filename": "src/libstd/env.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -844,6 +844,17 @@ mod os {\n     pub const EXE_EXTENSION: &'static str = \"pexe\";\n }\n \n+#[cfg(target_os = \"emscripten\")]\n+mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"emscripten\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \".js\";\n+    pub const EXE_EXTENSION: &'static str = \"js\";\n+}\n+\n #[cfg(target_arch = \"x86\")]\n mod arch {\n     pub const ARCH: &'static str = \"x86\";\n@@ -884,6 +895,11 @@ mod arch {\n     pub const ARCH: &'static str = \"le32\";\n }\n \n+#[cfg(target_arch = \"asmjs\")]\n+mod arch {\n+    pub const ARCH: &'static str = \"asmjs\";\n+}\n+\n #[cfg(test)]\n mod tests {\n     use prelude::v1::*;"}, {"sha": "10d37f9f59779461f7a9ce030131c7214b8e40c5", "filename": "src/libstd/os/linux/raw.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fraw.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -26,15 +26,23 @@ pub use self::arch::{off_t, ino_t, nlink_t, blksize_t, blkcnt_t, stat, time_t};\n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"le32\",\n           target_arch = \"powerpc\",\n-          target_arch = \"arm\"))]\n+          target_arch = \"arm\",\n+          target_arch = \"asmjs\"))]\n mod arch {\n     use super::{dev_t, mode_t};\n     use os::raw::{c_long, c_short};\n     use os::unix::raw::{gid_t, uid_t};\n \n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i32;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n-    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = u32;\n+\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    #[cfg(not(any(target_env = \"musl\", target_arch = \"asmjs\")))]\n+    pub type ino_t = u32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    #[cfg(any(target_env = \"musl\", target_arch = \"asmjs\"))]\n+    pub type ino_t = u64;\n+\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i32;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i32;"}, {"sha": "e15c8d67a8a6c7638fed251a420f649b3d3a5023", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -32,4 +32,9 @@ pub use sys::ext as windows;\n #[cfg(target_os = \"openbsd\")]   pub mod openbsd;\n #[cfg(target_os = \"solaris\")]   pub mod solaris;\n \n+// Emscripten is just like linux\n+#[cfg(target_os = \"emscripten\")]\n+#[path = \"linux/mod.rs\"]\n+pub mod emscripten;\n+\n pub mod raw;"}, {"sha": "4200e105ceaad43cb39809e5df43c6f95a9b94e0", "filename": "src/libstd/os/raw.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -13,12 +13,14 @@\n #![stable(feature = \"raw_os\", since = \"1.1.0\")]\n \n #[cfg(any(target_os = \"android\",\n+          target_os = \"emscripten\",\n           all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                        target_arch = \"arm\",\n                                        target_arch = \"powerpc\",\n                                        target_arch = \"powerpc64\"))))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = u8;\n #[cfg(not(any(target_os = \"android\",\n+              target_os = \"emscripten\",\n               all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                            target_arch = \"arm\",\n                                            target_arch = \"powerpc\","}, {"sha": "584175406645103804ca32eef87ddd2370d90375", "filename": "src/libstd/sys/common/args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fsys%2Fcommon%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fsys%2Fcommon%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fargs.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -39,7 +39,8 @@ pub fn clone() -> Option<Vec<Vec<u8>>> { imp::clone() }\n           target_os = \"bitrig\",\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n-          target_os = \"solaris\"))]\n+          target_os = \"solaris\",\n+          target_os = \"emscripten\"))]\n mod imp {\n     use prelude::v1::*;\n "}, {"sha": "3f70afe6ad76e9f7164a9ee8443de01b503519af", "filename": "src/libstd/sys/common/libunwind.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -86,6 +86,10 @@ pub const unwinder_private_data_size: usize = 2;\n #[cfg(any(target_arch = \"powerpc\", target_arch = \"powerpc64\"))]\n pub const unwinder_private_data_size: usize = 2;\n \n+#[cfg(target_arch = \"asmjs\")]\n+// FIXME: Copied from arm. Need to confirm.\n+pub const unwinder_private_data_size: usize = 20;\n+\n #[repr(C)]\n pub struct _Unwind_Exception {\n     pub exception_class: _Unwind_Exception_Class,"}, {"sha": "56628a4c7545e8f26af27b71562d9a322d180d33", "filename": "src/libstd/sys/common/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -45,7 +45,7 @@ pub mod unwind;\n pub mod util;\n pub mod wtf8;\n \n-#[cfg(any(all(unix, not(any(target_os = \"macos\", target_os = \"ios\"))),\n+#[cfg(any(all(unix, not(any(target_os = \"macos\", target_os = \"ios\", target_os = \"emscripten\"))),\n           all(windows, target_env = \"gnu\")))]\n pub mod gnu;\n "}, {"sha": "02e53854727f7dc25a470cab20742c473fea961a", "filename": "src/libstd/sys/unix/backtrace/printing/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fmod.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -10,10 +10,12 @@\n \n pub use self::imp::print;\n \n-#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\",\n+          target_os = \"emscripten\"))]\n #[path = \"dladdr.rs\"]\n mod imp;\n \n-#[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n+#[cfg(not(any(target_os = \"macos\", target_os = \"ios\",\n+              target_os = \"emscripten\")))]\n #[path = \"gnu.rs\"]\n mod imp;"}, {"sha": "727624dad7c1f247a41b70accaffade19b51f241", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -293,7 +293,8 @@ impl DirEntry {\n     #[cfg(any(target_os = \"macos\",\n               target_os = \"ios\",\n               target_os = \"linux\",\n-              target_os = \"solaris\"))]\n+              target_os = \"solaris\",\n+              target_os = \"emscripten\"))]\n     pub fn ino(&self) -> raw::ino_t {\n         self.entry.d_ino\n     }\n@@ -326,7 +327,8 @@ impl DirEntry {\n         }\n     }\n     #[cfg(any(target_os = \"android\",\n-              target_os = \"linux\"))]\n+              target_os = \"linux\",\n+              target_os = \"emscripten\"))]\n     fn name_bytes(&self) -> &[u8] {\n         unsafe {\n             CStr::from_ptr(self.entry.d_name.as_ptr()).to_bytes()"}, {"sha": "9cae36fb7260b45763a4ee5b4d42cf9f28aee244", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -26,6 +26,7 @@ use ops::Neg;\n #[cfg(target_os = \"netbsd\")]    pub use os::netbsd as platform;\n #[cfg(target_os = \"openbsd\")]   pub use os::openbsd as platform;\n #[cfg(target_os = \"solaris\")]   pub use os::solaris as platform;\n+#[cfg(target_os = \"emscripten\")] pub use os::emscripten as platform;\n \n #[macro_use]\n pub mod weak;"}, {"sha": "9def3adc303435a16d2bba07fa5cbc851c4ddba1", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -38,7 +38,8 @@ static ENV_LOCK: StaticMutex = StaticMutex::new();\n /// Returns the platform-specific value of errno\n pub fn errno() -> i32 {\n     extern {\n-        #[cfg_attr(any(target_os = \"linux\"), link_name = \"__errno_location\")]\n+        #[cfg_attr(any(target_os = \"linux\", target_os = \"emscripten\"),\n+                   link_name = \"__errno_location\")]\n         #[cfg_attr(any(target_os = \"bitrig\",\n                        target_os = \"netbsd\",\n                        target_os = \"openbsd\",\n@@ -235,7 +236,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     }\n }\n \n-#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+#[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"emscripten\"))]\n pub fn current_exe() -> io::Result<PathBuf> {\n     ::fs::read_link(\"/proc/self/exe\")\n }\n@@ -385,7 +386,8 @@ pub fn args() -> Args {\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n           target_os = \"solaris\",\n-          target_os = \"nacl\"))]\n+          target_os = \"nacl\",\n+          target_os = \"emscripten\"))]\n pub fn args() -> Args {\n     use sys_common;\n     let bytes = sys_common::args::clone().unwrap_or(Vec::new());"}, {"sha": "f881070d241439274f60fe6d35e0b0519e2c3efc", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -131,7 +131,8 @@ impl fmt::Debug for Command {\n pub struct ExitStatus(c_int);\n \n #[cfg(any(target_os = \"linux\", target_os = \"android\",\n-          target_os = \"nacl\", target_os = \"solaris\"))]\n+          target_os = \"nacl\", target_os = \"solaris\",\n+          target_os = \"emscripten\"))]\n mod status_imp {\n     pub fn WIFEXITED(status: i32) -> bool { (status & 0xff) == 0 }\n     pub fn WEXITSTATUS(status: i32) -> i32 { (status >> 8) & 0xff }"}, {"sha": "793a2ecae89f17729733926468709fc799619ffb", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -81,7 +81,9 @@ impl Thread {\n         debug_assert_eq!(ret, 0);\n     }\n \n-    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+    #[cfg(any(target_os = \"linux\",\n+              target_os = \"android\",\n+              target_os = \"emscripten\"))]\n     pub fn set_name(name: &str) {\n         const PR_SET_NAME: libc::c_int = 15;\n         let cname = CString::new(name).unwrap_or_else(|_| {\n@@ -166,7 +168,7 @@ impl Drop for Thread {\n     }\n }\n \n-#[cfg(all(not(target_os = \"linux\"),\n+#[cfg(all(not(all(target_os = \"linux\", not(target_env = \"musl\"))),\n           not(target_os = \"macos\"),\n           not(target_os = \"bitrig\"),\n           not(all(target_os = \"netbsd\", not(target_vendor = \"rumprun\"))),\n@@ -179,7 +181,7 @@ pub mod guard {\n }\n \n \n-#[cfg(any(target_os = \"linux\",\n+#[cfg(any(all(target_os = \"linux\", not(target_env = \"musl\")),\n           target_os = \"macos\",\n           target_os = \"bitrig\",\n           all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),"}, {"sha": "5693cc10a0f72437a38bc21f6debf5f1727b171d", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c604dc940c35e4ac36012aa85375250f2e6e07e/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=8c604dc940c35e4ac36012aa85375250f2e6e07e", "patch": "@@ -928,7 +928,8 @@ fn get_concurrency() -> usize {\n               target_os = \"macos\",\n               target_os = \"ios\",\n               target_os = \"android\",\n-              target_os = \"solaris\"))]\n+              target_os = \"solaris\",\n+              target_os = \"emscripten\"))]\n     fn num_cpus() -> usize {\n         unsafe { libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as usize }\n     }\n@@ -1174,14 +1175,16 @@ impl MetricMap {\n /// elimination.\n ///\n /// This function is a no-op, and does not even read from `dummy`.\n-#[cfg(not(all(target_os = \"nacl\", target_arch = \"le32\")))]\n+#[cfg(not(any(all(target_os = \"nacl\", target_arch = \"le32\"),\n+              target_arch = \"asmjs\")))]\n pub fn black_box<T>(dummy: T) -> T {\n     // we need to \"use\" the argument in some way LLVM can't\n     // introspect.\n     unsafe { asm!(\"\" : : \"r\"(&dummy)) }\n     dummy\n }\n-#[cfg(all(target_os = \"nacl\", target_arch = \"le32\"))]\n+#[cfg(any(all(target_os = \"nacl\", target_arch = \"le32\"),\n+          target_arch = \"asmjs\"))]\n #[inline(never)]\n pub fn black_box<T>(dummy: T) -> T {\n     dummy"}]}