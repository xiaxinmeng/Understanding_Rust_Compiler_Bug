{"sha": "08324fe6f7ac24be4c8bfcab42b12ee447635c80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MzI0ZmU2ZjdhYzI0YmU0YzhiZmNhYjQyYjEyZWU0NDc2MzVjODA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-10T15:19:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-10T15:19:46Z"}, "message": "Auto merge of #74953 - JulianKnodt:master, r=lcnr\n\nRemove restriction on type parameters preceding consts w/ feature const-generics\n\nRemoved the restriction on type parameters preceding const parameters when the feature const-generics is enabled.\n\nBuilds on #74676, which deals with unsorted generic parameters. This just lifts the check in lowering the AST to HIR that permits consts and types to be reordered with respect to each other. Lifetimes still must precede both\n\nThis change is not intended for min-const-generics, and is gated behind the `#![feature(const_generics)]`.\n\nOne thing is that it also permits type parameters without a default to come after consts, which I expected to not work, and was hoping to get more guidance on whether that should be permitted or how to prevent it otherwise.\n\nI did not go through the RFC process for this pull request because there was prior work to get this feature added. In the previous PR that was cited, work was done to enable this change.\n\nr? @lcnr", "tree": {"sha": "d499377d00aff85d051aebd59935a21fb8892e3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d499377d00aff85d051aebd59935a21fb8892e3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08324fe6f7ac24be4c8bfcab42b12ee447635c80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08324fe6f7ac24be4c8bfcab42b12ee447635c80", "html_url": "https://github.com/rust-lang/rust/commit/08324fe6f7ac24be4c8bfcab42b12ee447635c80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08324fe6f7ac24be4c8bfcab42b12ee447635c80/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c336d46263999cce87de899220d7b92d11f1c85", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c336d46263999cce87de899220d7b92d11f1c85", "html_url": "https://github.com/rust-lang/rust/commit/4c336d46263999cce87de899220d7b92d11f1c85"}, {"sha": "64f643782245b25326c6e9a76bf78c798f1ae168", "url": "https://api.github.com/repos/rust-lang/rust/commits/64f643782245b25326c6e9a76bf78c798f1ae168", "html_url": "https://github.com/rust-lang/rust/commit/64f643782245b25326c6e9a76bf78c798f1ae168"}], "stats": {"total": 265, "additions": 190, "deletions": 75}, "files": [{"sha": "a0541158bc2c5f500f9f575e482e8dedde8c2ddd", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=08324fe6f7ac24be4c8bfcab42b12ee447635c80", "patch": "@@ -35,6 +35,7 @@ use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n+use std::cmp::Ordering;\n use std::convert::TryFrom;\n use std::fmt;\n use std::iter;\n@@ -309,19 +310,49 @@ pub type GenericBounds = Vec<GenericBound>;\n /// Specifies the enforced ordering for generic parameters. In the future,\n /// if we wanted to relax this order, we could override `PartialEq` and\n /// `PartialOrd`, to allow the kinds to be unordered.\n-#[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Clone, Copy)]\n+#[derive(Hash, Clone, Copy)]\n pub enum ParamKindOrd {\n     Lifetime,\n     Type,\n-    Const,\n+    // `unordered` is only `true` if `sess.has_features().const_generics`\n+    // is active. Specifically, if it's only `min_const_generics`, it will still require\n+    // ordering consts after types.\n+    Const { unordered: bool },\n+}\n+\n+impl Ord for ParamKindOrd {\n+    fn cmp(&self, other: &Self) -> Ordering {\n+        use ParamKindOrd::*;\n+        let to_int = |v| match v {\n+            Lifetime => 0,\n+            Type | Const { unordered: true } => 1,\n+            // technically both consts should be ordered equally,\n+            // but only one is ever encountered at a time, so this is\n+            // fine.\n+            Const { unordered: false } => 2,\n+        };\n+\n+        to_int(*self).cmp(&to_int(*other))\n+    }\n+}\n+impl PartialOrd for ParamKindOrd {\n+    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+impl PartialEq for ParamKindOrd {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.cmp(other) == Ordering::Equal\n+    }\n }\n+impl Eq for ParamKindOrd {}\n \n impl fmt::Display for ParamKindOrd {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             ParamKindOrd::Lifetime => \"lifetime\".fmt(f),\n             ParamKindOrd::Type => \"type\".fmt(f),\n-            ParamKindOrd::Const => \"const\".fmt(f),\n+            ParamKindOrd::Const { .. } => \"const\".fmt(f),\n         }\n     }\n }"}, {"sha": "244377dfa1d2c42b8e492eeba23fad0fe64adb41", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=08324fe6f7ac24be4c8bfcab42b12ee447635c80", "patch": "@@ -773,13 +773,13 @@ fn validate_generic_param_order<'a>(\n         err.span_suggestion(\n             span,\n             &format!(\n-                \"reorder the parameters: lifetimes, then types{}\",\n-                if sess.features_untracked().const_generics\n-                    || sess.features_untracked().min_const_generics\n-                {\n-                    \", then consts\"\n+                \"reorder the parameters: lifetimes{}\",\n+                if sess.features_untracked().const_generics {\n+                    \", then consts and types\"\n+                } else if sess.features_untracked().min_const_generics {\n+                    \", then consts, then types\"\n                 } else {\n-                    \"\"\n+                    \", then types\"\n                 },\n             ),\n             ordered_params.clone(),\n@@ -1156,7 +1156,11 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     GenericParamKind::Type { default: _ } => (ParamKindOrd::Type, ident),\n                     GenericParamKind::Const { ref ty, kw_span: _ } => {\n                         let ty = pprust::ty_to_string(ty);\n-                        (ParamKindOrd::Const, Some(format!(\"const {}: {}\", param.ident, ty)))\n+                        let unordered = self.session.features_untracked().const_generics;\n+                        (\n+                            ParamKindOrd::Const { unordered },\n+                            Some(format!(\"const {}: {}\", param.ident, ty)),\n+                        )\n                     }\n                 };\n                 (kind, Some(&*param.bounds), param.ident.span, ident)"}, {"sha": "2be100ae33662174e16a127c54c18e04a0e580ef", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=08324fe6f7ac24be4c8bfcab42b12ee447635c80", "patch": "@@ -489,28 +489,31 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             kind,\n         );\n \n+        let unordered = sess.features_untracked().const_generics;\n         let kind_ord = match kind {\n             \"lifetime\" => ParamKindOrd::Lifetime,\n             \"type\" => ParamKindOrd::Type,\n-            \"constant\" => ParamKindOrd::Const,\n+            \"constant\" => ParamKindOrd::Const { unordered },\n             // It's more concise to match on the string representation, though it means\n             // the match is non-exhaustive.\n             _ => bug!(\"invalid generic parameter kind {}\", kind),\n         };\n         let arg_ord = match arg {\n             GenericArg::Lifetime(_) => ParamKindOrd::Lifetime,\n             GenericArg::Type(_) => ParamKindOrd::Type,\n-            GenericArg::Const(_) => ParamKindOrd::Const,\n+            GenericArg::Const(_) => ParamKindOrd::Const { unordered },\n         };\n \n-        // This note will be true as long as generic parameters are strictly ordered by their kind.\n-        let (first, last) =\n-            if kind_ord < arg_ord { (kind, arg.descr()) } else { (arg.descr(), kind) };\n-        err.note(&format!(\"{} arguments must be provided before {} arguments\", first, last));\n-\n-        if let Some(help) = help {\n-            err.help(help);\n+        // This note is only true when generic parameters are strictly ordered by their kind.\n+        if kind_ord.cmp(&arg_ord) != core::cmp::Ordering::Equal {\n+            let (first, last) =\n+                if kind_ord < arg_ord { (kind, arg.descr()) } else { (arg.descr(), kind) };\n+            err.note(&format!(\"{} arguments must be provided before {} arguments\", first, last));\n+            if let Some(help) = help {\n+                err.help(help);\n+            }\n         }\n+\n         err.emit();\n     }\n \n@@ -672,7 +675,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                                         ParamKindOrd::Type\n                                                     }\n                                                     GenericParamDefKind::Const => {\n-                                                        ParamKindOrd::Const\n+                                                        ParamKindOrd::Const {\n+                                                            unordered: tcx\n+                                                                .sess\n+                                                                .features_untracked()\n+                                                                .const_generics,\n+                                                        }\n                                                     }\n                                                 },\n                                                 param,"}, {"sha": "9e071e674e709317cf547b7c2236d46915936585", "filename": "src/test/ui/const-generics/argument_order.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs?ref=08324fe6f7ac24be4c8bfcab42b12ee447635c80", "patch": "@@ -1,14 +1,13 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![allow(incomplete_features)]\n \n-struct Bad<const N: usize, T> { //~ ERROR type parameters must be declared prior\n+struct Bad<const N: usize, T> {\n     arr: [u8; { N }],\n     another: T,\n }\n \n struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n-    //~^ ERROR type parameters must be declared prior\n-    //~| ERROR lifetime parameters must be declared prior\n+    //~^ ERROR lifetime parameters must be declared prior\n     a: &'a T,\n     b: &'b U,\n }"}, {"sha": "d6546a768d23f962977228dd8ab011a68b1d6785", "filename": "src/test/ui/const-generics/argument_order.stderr", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr?ref=08324fe6f7ac24be4c8bfcab42b12ee447635c80", "patch": "@@ -1,39 +1,18 @@\n-error: type parameters must be declared prior to const parameters\n-  --> $DIR/argument_order.rs:4:28\n-   |\n-LL | struct Bad<const N: usize, T> {\n-   |           -----------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const N: usize>`\n-\n error: lifetime parameters must be declared prior to const parameters\n   --> $DIR/argument_order.rs:9:32\n    |\n LL | struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n-   |               -----------------^^-----^^-------------------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T, U, const N: usize, const M: usize>`\n-\n-error: type parameters must be declared prior to const parameters\n-  --> $DIR/argument_order.rs:9:36\n-   |\n-LL | struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n-   |               ---------------------^----------------------^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T, U, const N: usize, const M: usize>`\n-\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/argument_order.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   |               -----------------^^-----^^-------------------- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, const N: usize, T, const M: usize, U>`\n \n error[E0747]: lifetime provided when a type was expected\n-  --> $DIR/argument_order.rs:17:23\n+  --> $DIR/argument_order.rs:16:23\n    |\n LL |     let _: AlsoBad<7, 'static, u32, 'static, 17, u16>;\n    |                       ^^^^^^^\n    |\n    = note: lifetime arguments must be provided before type arguments\n-   = help: reorder the arguments: lifetimes, then types, then consts: `<'a, 'b, T, U, N, M>`\n+   = help: reorder the arguments: lifetimes, then consts: `<'a, 'b, N, T, M, U>`\n \n-error: aborting due to 4 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0747`."}, {"sha": "13ca56ad3e69b59f1e92455c2aa86d7a0430d767", "filename": "src/test/ui/const-generics/const-arg-type-arg-misordered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs?ref=08324fe6f7ac24be4c8bfcab42b12ee447635c80", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![allow(incomplete_features)]\n \n type Array<T, const N: usize> = [T; N];\n "}, {"sha": "2e2bfed51fb26b050d15b57014c1ec483f1548e5", "filename": "src/test/ui/const-generics/const-arg-type-arg-misordered.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr?ref=08324fe6f7ac24be4c8bfcab42b12ee447635c80", "patch": "@@ -1,21 +1,9 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-arg-type-arg-misordered.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n error[E0747]: constant provided when a type was expected\n   --> $DIR/const-arg-type-arg-misordered.rs:6:35\n    |\n LL | fn foo<const N: usize>() -> Array<N, ()> {\n    |                                   ^\n-   |\n-   = note: type arguments must be provided before constant arguments\n-   = help: reorder the arguments: types, then consts: `<T, N>`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0747`."}, {"sha": "0d787d9a67b590d5ccd052ca8bbe563d80f05ad9", "filename": "src/test/ui/const-generics/const-param-before-other-params.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs?ref=08324fe6f7ac24be4c8bfcab42b12ee447635c80", "patch": "@@ -5,8 +5,6 @@ fn bar<const X: (), 'a>(_: &'a ()) {\n     //~^ ERROR lifetime parameters must be declared prior to const parameters\n }\n \n-fn foo<const X: (), T>(_: &T) {\n-    //~^ ERROR type parameters must be declared prior to const parameters\n-}\n+fn foo<const X: (), T>(_: &T) {}\n \n fn main() {}"}, {"sha": "1194dd30f61b93074555fdd400c9f89b179a3fcb", "filename": "src/test/ui/const-generics/const-param-before-other-params.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr?ref=08324fe6f7ac24be4c8bfcab42b12ee447635c80", "patch": "@@ -2,13 +2,7 @@ error: lifetime parameters must be declared prior to const parameters\n   --> $DIR/const-param-before-other-params.rs:4:21\n    |\n LL | fn bar<const X: (), 'a>(_: &'a ()) {\n-   |       --------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const X: ()>`\n+   |       --------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const X: ()>`\n \n-error: type parameters must be declared prior to const parameters\n-  --> $DIR/const-param-before-other-params.rs:8:21\n-   |\n-LL | fn foo<const X: (), T>(_: &T) {\n-   |       --------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const X: ()>`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "72967640a8e62eba02eeeb7b5046ca668cfce176", "filename": "src/test/ui/const-generics/defaults/complex-unord-param.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs?ref=08324fe6f7ac24be4c8bfcab42b12ee447635c80", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+// Checks a complicated usage of unordered params\n+\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+#![allow(dead_code)]\n+\n+struct NestedArrays<'a, const N: usize, A: 'a, const M: usize, T:'a =u32> {\n+  args: &'a [&'a [T; M]; N],\n+  specifier: A,\n+}\n+\n+fn main() {\n+  let array = [1, 2, 3];\n+  let nest = [&array];\n+  let _ = NestedArrays {\n+    args: &nest,\n+    specifier: true,\n+  };\n+}"}, {"sha": "ea3a8c14b98cb2d38c76a4c687895121e63e620b", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs?ref=08324fe6f7ac24be4c8bfcab42b12ee447635c80", "patch": "@@ -0,0 +1,12 @@\n+// Checks that lifetimes cannot be interspersed between consts and types.\n+\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n+//~^ Error lifetime parameters must be declared prior to const parameters\n+\n+struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n+//~^ Error lifetime parameters must be declared prior to type parameters\n+\n+fn main() {}"}, {"sha": "0f6d7f1065af83c78047ff5a0f151a556529d677", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.stderr?ref=08324fe6f7ac24be4c8bfcab42b12ee447635c80", "patch": "@@ -0,0 +1,14 @@\n+error: lifetime parameters must be declared prior to const parameters\n+  --> $DIR/intermixed-lifetime.rs:6:28\n+   |\n+LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n+   |           -----------------^^---------- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T>`\n+\n+error: lifetime parameters must be declared prior to type parameters\n+  --> $DIR/intermixed-lifetime.rs:9:37\n+   |\n+LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n+   |           --------------------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T>`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d57190ea3bbabc4cee234135d6448573cfd7bdd5", "filename": "src/test/ui/const-generics/defaults/needs-feature.min.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.min.stderr?ref=08324fe6f7ac24be4c8bfcab42b12ee447635c80", "patch": "@@ -0,0 +1,8 @@\n+error: type parameters must be declared prior to const parameters\n+  --> $DIR/needs-feature.rs:10:26\n+   |\n+LL | struct A<const N: usize, T=u32>(T);\n+   |         -----------------^----- help: reorder the parameters: lifetimes, then consts, then types: `<T, const N: usize>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "3b6f63a8efecd7cdbeaac62a34bb82f7b41d593d", "filename": "src/test/ui/const-generics/defaults/needs-feature.none.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.none.stderr?ref=08324fe6f7ac24be4c8bfcab42b12ee447635c80", "patch": "@@ -0,0 +1,18 @@\n+error: type parameters must be declared prior to const parameters\n+  --> $DIR/needs-feature.rs:10:26\n+   |\n+LL | struct A<const N: usize, T=u32>(T);\n+   |         -----------------^----- help: reorder the parameters: lifetimes, then types: `<T, const N: usize>`\n+\n+error[E0658]: const generics are unstable\n+  --> $DIR/needs-feature.rs:10:16\n+   |\n+LL | struct A<const N: usize, T=u32>(T);\n+   |                ^\n+   |\n+   = note: see issue #74878 <https://github.com/rust-lang/rust/issues/74878> for more information\n+   = help: add `#![feature(min_const_generics)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "ec02dbf407d6ddb8de1cf75cffb6afefe1fac3f3", "filename": "src/test/ui/const-generics/defaults/needs-feature.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.rs?ref=08324fe6f7ac24be4c8bfcab42b12ee447635c80", "patch": "@@ -0,0 +1,17 @@\n+//[full] run-pass\n+// Verifies that having generic parameters after constants is not permitted without the\n+// `const_generics` feature.\n+// revisions: none min full\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+struct A<const N: usize, T=u32>(T);\n+//[none]~^ ERROR type parameters must be declared prior\n+//[none]~| ERROR const generics are unstable\n+//[min]~^^^ ERROR type parameters must be declared prior\n+\n+fn main() {\n+  let _: A<3> = A(0);\n+}"}, {"sha": "b282dfd37cc4a86aa93e8425d4e1736d4c5d1b7d", "filename": "src/test/ui/const-generics/defaults/simple-defaults.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs?ref=08324fe6f7ac24be4c8bfcab42b12ee447635c80", "patch": "@@ -0,0 +1,15 @@\n+// run-pass\n+// Checks some basic test cases for defaults.\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+#![allow(dead_code)]\n+\n+struct FixedOutput<'a, const N: usize, T=u32> {\n+  out: &'a [T; N],\n+}\n+\n+trait FixedOutputter {\n+  fn out(&self) -> FixedOutput<'_, 10>;\n+}\n+\n+fn main() {}"}, {"sha": "fc977d6617c563a647beceed9e06211ad953727a", "filename": "src/test/ui/const-generics/type-after-const-ok.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Ftype-after-const-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fconst-generics%2Ftype-after-const-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-after-const-ok.rs?ref=08324fe6f7ac24be4c8bfcab42b12ee447635c80", "patch": "@@ -0,0 +1,10 @@\n+// run-pass\n+// Verifies that having generic parameters after constants is permitted\n+\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+#[allow(dead_code)]\n+struct A<const N: usize, T>(T);\n+\n+fn main() {}"}, {"sha": "5e97339f148c5cbcaa97e0140d240e1359296411", "filename": "src/test/ui/issues/issue-59508-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fissues%2Fissue-59508-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08324fe6f7ac24be4c8bfcab42b12ee447635c80/src%2Ftest%2Fui%2Fissues%2Fissue-59508-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59508-1.stderr?ref=08324fe6f7ac24be4c8bfcab42b12ee447635c80", "patch": "@@ -2,7 +2,7 @@ error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/issue-59508-1.rs:12:25\n    |\n LL |     pub fn do_things<T, 'a, 'b: 'a>() {\n-   |                     ----^^--^^----- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b: 'a, T>`\n+   |                     ----^^--^^----- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b: 'a, T>`\n \n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-59508-1.rs:2:12"}]}