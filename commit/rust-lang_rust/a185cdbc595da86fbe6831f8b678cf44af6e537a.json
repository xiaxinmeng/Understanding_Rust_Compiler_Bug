{"sha": "a185cdbc595da86fbe6831f8b678cf44af6e537a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExODVjZGJjNTk1ZGE4NmZiZTY4MzFmOGI2NzhjZjQ0YWY2ZTUzN2E=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-16T13:35:16Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-23T12:51:00Z"}, "message": "Iterate to encode def_kind.", "tree": {"sha": "5feaa63c3a56b116d0a436853255459eb666d261", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5feaa63c3a56b116d0a436853255459eb666d261"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a185cdbc595da86fbe6831f8b678cf44af6e537a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a185cdbc595da86fbe6831f8b678cf44af6e537a", "html_url": "https://github.com/rust-lang/rust/commit/a185cdbc595da86fbe6831f8b678cf44af6e537a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a185cdbc595da86fbe6831f8b678cf44af6e537a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c58a6fa422dd7c5bcf4f9d32d096c3d42f313240", "url": "https://api.github.com/repos/rust-lang/rust/commits/c58a6fa422dd7c5bcf4f9d32d096c3d42f313240", "html_url": "https://github.com/rust-lang/rust/commit/c58a6fa422dd7c5bcf4f9d32d096c3d42f313240"}], "stats": {"total": 129, "additions": 57, "deletions": 72}, "files": [{"sha": "828c025d38d0bfe62a1874f28e09fd38540adc98", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a185cdbc595da86fbe6831f8b678cf44af6e537a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a185cdbc595da86fbe6831f8b678cf44af6e537a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=a185cdbc595da86fbe6831f8b678cf44af6e537a", "patch": "@@ -130,7 +130,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n     static_mutability => { cdata.static_mutability(def_id.index) }\n     generator_kind => { cdata.generator_kind(def_id.index) }\n-    def_kind => { cdata.def_kind(def_id.index) }\n+    opt_def_kind => { Some(cdata.def_kind(def_id.index)) }\n     def_span => { cdata.get_span(def_id.index, &tcx.sess) }\n     def_ident_span => {\n         cdata.try_item_ident(def_id.index, &tcx.sess).ok().map(|ident| ident.span)"}, {"sha": "2b22ef0374c575f778e9d1af413a51c5105423b9", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 27, "deletions": 59, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/a185cdbc595da86fbe6831f8b678cf44af6e537a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a185cdbc595da86fbe6831f8b678cf44af6e537a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=a185cdbc595da86fbe6831f8b678cf44af6e537a", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::{join, Lrc};\n use rustc_hir as hir;\n-use rustc_hir::def::{CtorKind, DefKind};\n+use rustc_hir::def::{CtorOf, DefKind};\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathData;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n@@ -725,6 +725,14 @@ impl EncodeContext<'a, 'tcx> {\n         let hir = tcx.hir();\n         for local_id in hir.iter_local_def_id() {\n             let def_id = local_id.to_def_id();\n+            let def_kind = tcx.opt_def_kind(local_id);\n+            let def_kind = if let Some(def_kind) = def_kind { def_kind } else { continue };\n+            record!(self.tables.def_kind[def_id] <- match def_kind {\n+                // Replace Ctor by the enclosing object to avoid leaking details in children crates.\n+                DefKind::Ctor(CtorOf::Struct, _) => DefKind::Struct,\n+                DefKind::Ctor(CtorOf::Variant, _) => DefKind::Variant,\n+                def_kind => def_kind,\n+            });\n             record!(self.tables.span[def_id] <- tcx.def_span(def_id));\n         }\n     }\n@@ -752,7 +760,6 @@ impl EncodeContext<'a, 'tcx> {\n             is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n         };\n \n-        record!(self.tables.def_kind[def_id] <- DefKind::Variant);\n         record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));\n         record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n         record!(self.tables.attributes[def_id] <- &self.tcx.get_attrs(def_id)[..]);\n@@ -792,7 +799,6 @@ impl EncodeContext<'a, 'tcx> {\n             is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n         };\n \n-        record!(self.tables.def_kind[def_id] <- DefKind::Variant);\n         record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));\n         record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n         self.encode_stability(def_id);\n@@ -844,7 +850,6 @@ impl EncodeContext<'a, 'tcx> {\n             expansion: tcx.hir().definitions().expansion_that_defined(local_def_id),\n         };\n \n-        record!(self.tables.def_kind[def_id] <- DefKind::Mod);\n         record!(self.tables.kind[def_id] <- EntryKind::Mod(self.lazy(data)));\n         record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n         record!(self.tables.attributes[def_id] <- attrs);\n@@ -875,7 +880,6 @@ impl EncodeContext<'a, 'tcx> {\n         let variant_id = tcx.hir().local_def_id_to_hir_id(variant.def_id.expect_local());\n         let variant_data = tcx.hir().expect_variant_data(variant_id);\n \n-        record!(self.tables.def_kind[def_id] <- DefKind::Field);\n         record!(self.tables.kind[def_id] <- EntryKind::Field);\n         record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n         record!(self.tables.attributes[def_id] <- variant_data.fields()[field_index].attrs);\n@@ -901,7 +905,6 @@ impl EncodeContext<'a, 'tcx> {\n             is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n         };\n \n-        record!(self.tables.def_kind[def_id] <- DefKind::Struct);\n         record!(self.tables.kind[def_id] <- EntryKind::Struct(self.lazy(data), adt_def.repr));\n         record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n         record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n@@ -976,7 +979,6 @@ impl EncodeContext<'a, 'tcx> {\n                 );\n                 let rendered_const = self.lazy(RenderedConst(rendered));\n \n-                record!(self.tables.def_kind[def_id] <- DefKind::AssocConst);\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocConst(\n                     container,\n                     Default::default(),\n@@ -997,7 +999,6 @@ impl EncodeContext<'a, 'tcx> {\n                 } else {\n                     bug!()\n                 };\n-                record!(self.tables.def_kind[def_id] <- DefKind::AssocFn);\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocFn(self.lazy(AssocFnData {\n                     fn_data,\n                     container,\n@@ -1006,7 +1007,6 @@ impl EncodeContext<'a, 'tcx> {\n             }\n             ty::AssocKind::Type => {\n                 self.encode_explicit_item_bounds(def_id);\n-                record!(self.tables.def_kind[def_id] <- DefKind::AssocTy);\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocType(container));\n             }\n         }\n@@ -1084,7 +1084,6 @@ impl EncodeContext<'a, 'tcx> {\n                 if let hir::ImplItemKind::Const(_, body_id) = ast_item.kind {\n                     let qualifs = self.tcx.at(ast_item.span).mir_const_qualif(def_id);\n \n-                    record!(self.tables.def_kind[def_id] <- DefKind::AssocConst);\n                     record!(self.tables.kind[def_id] <- EntryKind::AssocConst(\n                         container,\n                         qualifs,\n@@ -1104,15 +1103,13 @@ impl EncodeContext<'a, 'tcx> {\n                 } else {\n                     bug!()\n                 };\n-                record!(self.tables.def_kind[def_id] <- DefKind::AssocFn);\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocFn(self.lazy(AssocFnData {\n                     fn_data,\n                     container,\n                     has_self: impl_item.fn_has_self_parameter,\n                 })));\n             }\n             ty::AssocKind::Type => {\n-                record!(self.tables.def_kind[def_id] <- DefKind::AssocTy);\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocType(container));\n             }\n         }\n@@ -1251,19 +1248,12 @@ impl EncodeContext<'a, 'tcx> {\n \n         self.encode_ident_span(def_id, item.ident);\n \n-        let (def_kind, entry_kind) = match item.kind {\n-            hir::ItemKind::Static(_, hir::Mutability::Mut, _) => {\n-                (DefKind::Static, EntryKind::MutStatic)\n-            }\n-            hir::ItemKind::Static(_, hir::Mutability::Not, _) => {\n-                (DefKind::Static, EntryKind::ImmStatic)\n-            }\n+        let entry_kind = match item.kind {\n+            hir::ItemKind::Static(_, hir::Mutability::Mut, _) => EntryKind::MutStatic,\n+            hir::ItemKind::Static(_, hir::Mutability::Not, _) => EntryKind::ImmStatic,\n             hir::ItemKind::Const(_, body_id) => {\n                 let qualifs = self.tcx.at(item.span).mir_const_qualif(def_id);\n-                (\n-                    DefKind::Const,\n-                    EntryKind::Const(qualifs, self.encode_rendered_const_for_body(body_id)),\n-                )\n+                EntryKind::Const(qualifs, self.encode_rendered_const_for_body(body_id))\n             }\n             hir::ItemKind::Fn(ref sig, .., body) => {\n                 let data = FnData {\n@@ -1272,21 +1262,19 @@ impl EncodeContext<'a, 'tcx> {\n                     param_names: self.encode_fn_param_names_for_body(body),\n                 };\n \n-                (DefKind::Fn, EntryKind::Fn(self.lazy(data)))\n+                EntryKind::Fn(self.lazy(data))\n             }\n             hir::ItemKind::Mod(ref m) => {\n                 return self.encode_info_for_mod(item.hir_id, m, &item.attrs);\n             }\n-            hir::ItemKind::ForeignMod { .. } => (DefKind::ForeignMod, EntryKind::ForeignMod),\n-            hir::ItemKind::GlobalAsm(..) => (DefKind::GlobalAsm, EntryKind::GlobalAsm),\n-            hir::ItemKind::TyAlias(..) => (DefKind::TyAlias, EntryKind::Type),\n+            hir::ItemKind::ForeignMod { .. } => EntryKind::ForeignMod,\n+            hir::ItemKind::GlobalAsm(..) => EntryKind::GlobalAsm,\n+            hir::ItemKind::TyAlias(..) => EntryKind::Type,\n             hir::ItemKind::OpaqueTy(..) => {\n                 self.encode_explicit_item_bounds(def_id);\n-                (DefKind::OpaqueTy, EntryKind::OpaqueTy)\n-            }\n-            hir::ItemKind::Enum(..) => {\n-                (DefKind::Enum, EntryKind::Enum(self.tcx.adt_def(def_id).repr))\n+                EntryKind::OpaqueTy\n             }\n+            hir::ItemKind::Enum(..) => EntryKind::Enum(self.tcx.adt_def(def_id).repr),\n             hir::ItemKind::Struct(ref struct_def, _) => {\n                 let adt_def = self.tcx.adt_def(def_id);\n                 let variant = adt_def.non_enum_variant();\n@@ -1298,31 +1286,29 @@ impl EncodeContext<'a, 'tcx> {\n                     .ctor_hir_id()\n                     .map(|ctor_hir_id| self.tcx.hir().local_def_id(ctor_hir_id).local_def_index);\n \n-                let ek = EntryKind::Struct(\n+                EntryKind::Struct(\n                     self.lazy(VariantData {\n                         ctor_kind: variant.ctor_kind,\n                         discr: variant.discr,\n                         ctor,\n                         is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n                     }),\n                     adt_def.repr,\n-                );\n-                (DefKind::Struct, ek)\n+                )\n             }\n             hir::ItemKind::Union(..) => {\n                 let adt_def = self.tcx.adt_def(def_id);\n                 let variant = adt_def.non_enum_variant();\n \n-                let ek = EntryKind::Union(\n+                EntryKind::Union(\n                     self.lazy(VariantData {\n                         ctor_kind: variant.ctor_kind,\n                         discr: variant.discr,\n                         ctor: None,\n                         is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n                     }),\n                     adt_def.repr,\n-                );\n-                (DefKind::Union, ek)\n+                )\n             }\n             hir::ItemKind::Impl(hir::Impl { defaultness, .. }) => {\n                 let trait_ref = self.tcx.impl_trait_ref(def_id);\n@@ -1352,7 +1338,7 @@ impl EncodeContext<'a, 'tcx> {\n                 let data =\n                     ImplData { polarity, defaultness, parent_impl: parent, coerce_unsized_info };\n \n-                (DefKind::Impl, EntryKind::Impl(self.lazy(data)))\n+                EntryKind::Impl(self.lazy(data))\n             }\n             hir::ItemKind::Trait(..) => {\n                 let trait_def = self.tcx.trait_def(def_id);\n@@ -1364,14 +1350,13 @@ impl EncodeContext<'a, 'tcx> {\n                     specialization_kind: trait_def.specialization_kind,\n                 };\n \n-                (DefKind::Trait, EntryKind::Trait(self.lazy(data)))\n+                EntryKind::Trait(self.lazy(data))\n             }\n-            hir::ItemKind::TraitAlias(..) => (DefKind::TraitAlias, EntryKind::TraitAlias),\n+            hir::ItemKind::TraitAlias(..) => EntryKind::TraitAlias,\n             hir::ItemKind::ExternCrate(_) | hir::ItemKind::Use(..) => {\n                 bug!(\"cannot encode info for item {:?}\", item)\n             }\n         };\n-        record!(self.tables.def_kind[def_id] <- def_kind);\n         record!(self.tables.kind[def_id] <- entry_kind);\n         record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n         record!(self.tables.attributes[def_id] <- item.attrs);\n@@ -1491,7 +1476,6 @@ impl EncodeContext<'a, 'tcx> {\n     /// Serialize the text of exported macros\n     fn encode_info_for_macro_def(&mut self, macro_def: &hir::MacroDef<'_>) {\n         let def_id = self.tcx.hir().local_def_id(macro_def.hir_id).to_def_id();\n-        record!(self.tables.def_kind[def_id] <- DefKind::Macro(MacroKind::Bang));\n         record!(self.tables.kind[def_id] <- EntryKind::MacroDef(self.lazy(macro_def.ast.clone())));\n         record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n         record!(self.tables.attributes[def_id] <- macro_def.attrs);\n@@ -1500,14 +1484,7 @@ impl EncodeContext<'a, 'tcx> {\n         self.encode_deprecation(def_id);\n     }\n \n-    fn encode_info_for_generic_param(\n-        &mut self,\n-        def_id: DefId,\n-        def_kind: DefKind,\n-        kind: EntryKind,\n-        encode_type: bool,\n-    ) {\n-        record!(self.tables.def_kind[def_id] <- def_kind);\n+    fn encode_info_for_generic_param(&mut self, def_id: DefId, kind: EntryKind, encode_type: bool) {\n         record!(self.tables.kind[def_id] <- kind);\n         if encode_type {\n             self.encode_item_type(def_id);\n@@ -1525,12 +1502,10 @@ impl EncodeContext<'a, 'tcx> {\n         match ty.kind() {\n             ty::Generator(..) => {\n                 let data = self.tcx.generator_kind(def_id).unwrap();\n-                record!(self.tables.def_kind[def_id.to_def_id()] <- DefKind::Generator);\n                 record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::Generator(data));\n             }\n \n             ty::Closure(..) => {\n-                record!(self.tables.def_kind[def_id.to_def_id()] <- DefKind::Closure);\n                 record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::Closure);\n             }\n \n@@ -1559,7 +1534,6 @@ impl EncodeContext<'a, 'tcx> {\n         let const_data = self.encode_rendered_const_for_body(body_id);\n         let qualifs = self.tcx.mir_const_qualif(def_id);\n \n-        record!(self.tables.def_kind[def_id.to_def_id()] <- DefKind::AnonConst);\n         record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::AnonConst(qualifs, const_data));\n         self.encode_item_type(def_id.to_def_id());\n         self.encode_generics(def_id.to_def_id());\n@@ -1822,19 +1796,15 @@ impl EncodeContext<'a, 'tcx> {\n                     },\n                     param_names: self.encode_fn_param_names(names),\n                 };\n-                record!(self.tables.def_kind[def_id] <- DefKind::Fn);\n                 record!(self.tables.kind[def_id] <- EntryKind::ForeignFn(self.lazy(data)));\n             }\n             hir::ForeignItemKind::Static(_, hir::Mutability::Mut) => {\n-                record!(self.tables.def_kind[def_id] <- DefKind::Static);\n                 record!(self.tables.kind[def_id] <- EntryKind::ForeignMutStatic);\n             }\n             hir::ForeignItemKind::Static(_, hir::Mutability::Not) => {\n-                record!(self.tables.def_kind[def_id] <- DefKind::Static);\n                 record!(self.tables.kind[def_id] <- EntryKind::ForeignImmStatic);\n             }\n             hir::ForeignItemKind::Type => {\n-                record!(self.tables.def_kind[def_id] <- DefKind::ForeignTy);\n                 record!(self.tables.kind[def_id] <- EntryKind::ForeignType);\n             }\n         }\n@@ -1912,7 +1882,6 @@ impl EncodeContext<'a, 'tcx> {\n                 GenericParamKind::Type { ref default, .. } => {\n                     self.encode_info_for_generic_param(\n                         def_id.to_def_id(),\n-                        DefKind::TyParam,\n                         EntryKind::TypeParam,\n                         default.is_some(),\n                     );\n@@ -1923,7 +1892,6 @@ impl EncodeContext<'a, 'tcx> {\n                 GenericParamKind::Const { .. } => {\n                     self.encode_info_for_generic_param(\n                         def_id.to_def_id(),\n-                        DefKind::ConstParam,\n                         EntryKind::ConstParam,\n                         true,\n                     );"}, {"sha": "70819c9b3b54edda4e3bf90a6e4e5692421ee79e", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a185cdbc595da86fbe6831f8b678cf44af6e537a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a185cdbc595da86fbe6831f8b678cf44af6e537a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=a185cdbc595da86fbe6831f8b678cf44af6e537a", "patch": "@@ -1,7 +1,6 @@\n use self::collector::NodeCollector;\n \n use crate::hir::{Owner, OwnerNodes};\n-use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n use rustc_ast as ast;\n use rustc_data_structures::svh::Svh;\n@@ -187,14 +186,14 @@ impl<'hir> Map<'hir> {\n         self.tcx.definitions.iter_local_def_id()\n     }\n \n-    pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {\n+    pub fn opt_def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {\n         // FIXME(eddyb) support `find` on the crate root.\n         if local_def_id.to_def_id().index == CRATE_DEF_INDEX {\n-            return DefKind::Mod;\n+            return Some(DefKind::Mod);\n         }\n \n         let hir_id = self.local_def_id_to_hir_id(local_def_id);\n-        match self.get(hir_id) {\n+        let def_kind = match self.find(hir_id)? {\n             Node::Item(item) => match item.kind {\n                 ItemKind::Static(..) => DefKind::Static,\n                 ItemKind::Const(..) => DefKind::Const,\n@@ -265,8 +264,14 @@ impl<'hir> Map<'hir> {\n             | Node::Lifetime(_)\n             | Node::Visibility(_)\n             | Node::Block(_)\n-            | Node::Crate(_) => bug!(\"def_kind: unsupported node: {}\", self.node_to_string(hir_id)),\n-        }\n+            | Node::Crate(_) => return None,\n+        };\n+        Some(def_kind)\n+    }\n+\n+    pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {\n+        self.opt_def_kind(local_def_id)\n+            .unwrap_or_else(|| bug!(\"def_kind: unsupported node: {:?}\", local_def_id))\n     }\n \n     fn find_entry(&self, id: HirId) -> Option<Entry<'hir>> {\n@@ -1110,7 +1115,3 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {\n         None => format!(\"unknown node{}\", id_str),\n     }\n }\n-\n-pub fn provide(providers: &mut Providers) {\n-    providers.def_kind = |tcx, def_id| tcx.hir().def_kind(def_id.expect_local());\n-}"}, {"sha": "e96f3f2a29475bd8e54ba0503e8941f0163d9b76", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a185cdbc595da86fbe6831f8b678cf44af6e537a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a185cdbc595da86fbe6831f8b678cf44af6e537a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=a185cdbc595da86fbe6831f8b678cf44af6e537a", "patch": "@@ -94,5 +94,5 @@ pub fn provide(providers: &mut Providers) {\n             span_bug!(hir.span(hir_id), \"fn_arg_names: unexpected item {:?}\", id);\n         }\n     };\n-    map::provide(providers);\n+    providers.opt_def_kind = |tcx, def_id| tcx.hir().opt_def_kind(def_id.expect_local());\n }"}, {"sha": "e23d04f8211f32299bbfae259a5d88376ec1945a", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a185cdbc595da86fbe6831f8b678cf44af6e537a/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a185cdbc595da86fbe6831f8b678cf44af6e537a/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=a185cdbc595da86fbe6831f8b678cf44af6e537a", "patch": "@@ -878,7 +878,7 @@ rustc_queries! {\n             cache_on_disk_if { true }\n         }\n \n-        query def_kind(def_id: DefId) -> DefKind {\n+        query opt_def_kind(def_id: DefId) -> Option<DefKind> {\n             desc { |tcx| \"looking up definition kind of `{}`\", tcx.def_path_str(def_id) }\n         }\n "}, {"sha": "f580cb14dc988cf7dd4989ef97a094dbc3076aa1", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a185cdbc595da86fbe6831f8b678cf44af6e537a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a185cdbc595da86fbe6831f8b678cf44af6e537a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=a185cdbc595da86fbe6831f8b678cf44af6e537a", "patch": "@@ -130,3 +130,19 @@ mod sealed {\n }\n \n use sealed::IntoQueryParam;\n+\n+impl TyCtxt<'tcx> {\n+    pub fn def_kind(self, def_id: impl IntoQueryParam<DefId>) -> DefKind {\n+        let def_id = def_id.into_query_param();\n+        self.opt_def_kind(def_id)\n+            .unwrap_or_else(|| bug!(\"def_kind: unsupported node: {:?}\", def_id))\n+    }\n+}\n+\n+impl TyCtxtAt<'tcx> {\n+    pub fn def_kind(self, def_id: impl IntoQueryParam<DefId>) -> DefKind {\n+        let def_id = def_id.into_query_param();\n+        self.opt_def_kind(def_id)\n+            .unwrap_or_else(|| bug!(\"def_kind: unsupported node: {:?}\", def_id))\n+    }\n+}"}]}