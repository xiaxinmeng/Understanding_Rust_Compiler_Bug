{"sha": "1be9fe6a449148d2f31b3e82f4d983630442d981", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZTlmZTZhNDQ5MTQ4ZDJmMzFiM2U4MmY0ZDk4MzYzMDQ0MmQ5ODE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-05-20T19:21:14Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-05-20T19:24:58Z"}, "message": "Refactor azure pipelines configuration\n\nThis commit is intended to go through and review/refactor the azure\npipelines configuration we have. The major changes are:\n\n* The separate `{windows,macos,linux}.yml` files are now all merged into\n  one `run.yml`. This allows a shared \"master flow\" for all platforms\n  with divergence only where necessary.\n\n* Some install steps have been separated as `install-*.yml` scripts,\n  where each script internally matches on the appropriate OS and then\n  delegates accordingly.\n\n* Some various bits and pieces of cruft have been removed which were\n  artifacts of Travis's setup or similar.", "tree": {"sha": "c68ec12f2f41acd9820460bb6fad28c335f33847", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c68ec12f2f41acd9820460bb6fad28c335f33847"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1be9fe6a449148d2f31b3e82f4d983630442d981", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1be9fe6a449148d2f31b3e82f4d983630442d981", "html_url": "https://github.com/rust-lang/rust/commit/1be9fe6a449148d2f31b3e82f4d983630442d981", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1be9fe6a449148d2f31b3e82f4d983630442d981/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79d28c203fbf46739d2e3f1f2f3e62bdf1ac5563", "url": "https://api.github.com/repos/rust-lang/rust/commits/79d28c203fbf46739d2e3f1f2f3e62bdf1ac5563", "html_url": "https://github.com/rust-lang/rust/commit/79d28c203fbf46739d2e3f1f2f3e62bdf1ac5563"}], "stats": {"total": 396, "additions": 174, "deletions": 222}, "files": [{"sha": "3b6cfed70719a85d1bf7178a354ba39a08e4e58f", "filename": ".azure-pipelines/auto.yml", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1be9fe6a449148d2f31b3e82f4d983630442d981/.azure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1be9fe6a449148d2f31b3e82f4d983630442d981/.azure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fauto.yml?ref=1be9fe6a449148d2f31b3e82f4d983630442d981", "patch": "@@ -11,11 +11,10 @@ variables:\n \n jobs:\n - job: Linux\n-  timeoutInMinutes: 180\n   pool:\n     vmImage: ubuntu-16.04\n   steps:\n-  - template: steps/linux.yml\n+  - template: steps/run.yml\n   strategy:\n     matrix:\n       x86_64-gnu-llvm-6.0:\n@@ -151,13 +150,12 @@ jobs:\n         IMAGE: mingw-check\n \n - job: macOS\n-  timeoutInMinutes: 180\n   pool:\n     vmImage: macos-10.13\n   steps:\n   - checkout: self\n     fetchDepth: 2\n-  - template: steps/macos.yml\n+  - template: steps/run.yml\n   strategy:\n     matrix:\n       # OSX builders running tests, these run the full test suite.\n@@ -216,11 +214,10 @@ jobs:\n \n \n - job: Windows\n-  timeoutInMinutes: 180\n   pool:\n     vmImage: 'vs2017-win2016'\n   steps:\n-  - template: steps/windows.yml\n+  - template: steps/run.yml\n   strategy:\n     matrix:\n #      # 32/64 bit MSVC tests"}, {"sha": "84c9454fee57f7c2a23037c5a89f37130be3ea56", "filename": ".azure-pipelines/pr.yml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1be9fe6a449148d2f31b3e82f4d983630442d981/.azure-pipelines%2Fpr.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1be9fe6a449148d2f31b3e82f4d983630442d981/.azure-pipelines%2Fpr.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fpr.yml?ref=1be9fe6a449148d2f31b3e82f4d983630442d981", "patch": "@@ -8,11 +8,10 @@ pr:\n \n jobs:\n - job: Linux\n-  timeoutInMinutes: 180\n   pool:\n     vmImage: ubuntu-16.04\n   steps:\n-    - template: steps/linux.yml\n+    - template: steps/run.yml\n   strategy:\n     matrix:\n       x86_64-gnu-llvm-6.0:"}, {"sha": "9e3545ea93cba075e96d8948054e4402cac7231c", "filename": ".azure-pipelines/steps/install-clang.yml", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1be9fe6a449148d2f31b3e82f4d983630442d981/.azure-pipelines%2Fsteps%2Finstall-clang.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1be9fe6a449148d2f31b3e82f4d983630442d981/.azure-pipelines%2Fsteps%2Finstall-clang.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Finstall-clang.yml?ref=1be9fe6a449148d2f31b3e82f4d983630442d981", "patch": "@@ -0,0 +1,40 @@\n+steps:\n+\n+- bash: |\n+    set -e\n+    curl -f http://releases.llvm.org/7.0.0/clang+llvm-7.0.0-x86_64-apple-darwin.tar.xz | tar xJf -\n+\n+    export CC=`pwd`/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang\n+    echo \"##vso[task.setvariable variable=CC]$CC\"\n+\n+    export CXX=`pwd`/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang++\n+    echo \"##vso[task.setvariable variable=CXX]$CXX\"\n+\n+    # Configure `AR` specifically so rustbuild doesn't try to infer it as\n+    # `clang-ar` by accident.\n+    echo \"##vso[task.setvariable variable=AR]ar\"\n+  displayName: Install clang (OSX)\n+  condition: eq(variables['Agent.OS'], 'Darwin')\n+\n+# If we're compiling for MSVC then we, like most other distribution builders,\n+# switch to clang as the compiler. This'll allow us eventually to enable LTO\n+# amongst LLVM and rustc. Note that we only do this on MSVC as I don't think\n+# clang has an output mode compatible with MinGW that we need. If it does we\n+# should switch to clang for MinGW as well!\n+#\n+# Note that the LLVM installer is an NSIS installer\n+#\n+# Original downloaded here came from\n+# http://releases.llvm.org/7.0.0/LLVM-7.0.0-win64.exe\n+- script: |\n+    powershell -Command \"iwr -outf %TEMP%\\LLVM-7.0.0-win64.exe https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/LLVM-7.0.0-win64.exe\"\n+    set CLANG_DIR=%CD%\\citools\\clang-rust\n+    %TEMP%\\LLVM-7.0.0-win64.exe /S /NCRC /D=%CLANG_DIR%\n+    set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --set llvm.clang-cl=%CLANG_DIR%\\bin\\clang-cl.exe\n+    echo ##vso[task.setvariable variable=RUST_CONFIGURE_ARGS]%RUST_CONFIGURE_ARGS%\n+  condition: and(eq(variables['Agent.OS'], 'Darwin'), eq(variables['MINGW_URL'],''))\n+  displayName: Install clang (Windows)\n+\n+# Note that we don't install clang on Linux since its compiler story is just so\n+# different. Each container has its own toolchain configured appropriately\n+# already."}, {"sha": "6933f4e9f2794e801908adbb873b8ccb209b19fd", "filename": ".azure-pipelines/steps/install-sccache.yml", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1be9fe6a449148d2f31b3e82f4d983630442d981/.azure-pipelines%2Fsteps%2Finstall-sccache.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1be9fe6a449148d2f31b3e82f4d983630442d981/.azure-pipelines%2Fsteps%2Finstall-sccache.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Finstall-sccache.yml?ref=1be9fe6a449148d2f31b3e82f4d983630442d981", "patch": "@@ -0,0 +1,21 @@\n+steps:\n+\n+- bash: |\n+    set -e\n+    curl -fo /usr/local/bin/sccache https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2018-04-02-sccache-x86_64-apple-darwin\n+    chmod +x /usr/local/bin/sccache\n+  displayName: Install sccache (OSX)\n+  condition: eq(variables['Agent.OS'], 'Darwin')\n+\n+- script: |\n+    md sccache\n+    powershell -Command \"iwr -outf sccache\\sccache.exe https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2018-04-26-sccache-x86_64-pc-windows-msvc\"\n+    echo ##vso[task.prependpath]%CD%\\sccache\n+  displayName: Install sccache (Windows)\n+  condition: eq(variables['Agent.OS'], 'Windows_NT')\n+\n+# Note that we don't install sccache on Linux since it's installed elsewhere\n+# through all the containers.\n+#\n+# FIXME: we should probably install sccache outside the containers and then\n+# mount it inside the containers so we can centralize all installation here."}, {"sha": "4eab460543bbc48582271f6df860797f98b240b1", "filename": ".azure-pipelines/steps/install-windows-build-deps.yml", "status": "renamed", "additions": 19, "deletions": 84, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/1be9fe6a449148d2f31b3e82f4d983630442d981/.azure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1be9fe6a449148d2f31b3e82f4d983630442d981/.azure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml?ref=1be9fe6a449148d2f31b3e82f4d983630442d981", "patch": "@@ -1,19 +1,17 @@\n steps:\n-- checkout: self\n-  fetchDepth: 2\n-\n-- bash: |\n-    set -x\n-    git submodule\n-    export SUBMODULES_EXCLUDES=$(git submodule | grep -Eow 'src/[^ ]+' | sed 's/\\(.*\\)/--exclude=\\1\\/\\.git/')\n-    echo \"##vso[task.setvariable variable=SUBMODULES_EXCLUDES;]$SUBMODULES_EXCLUDES\"\n-\n-- script: |\n-    REM echo hack as drive D is too small\n-    IF NOT \"%DISABLE_DISK_SPACE_HACK%\"==\"1\" (\n-      mkdir c:\\MORE_SPACE\n-      mklink /J build c:\\MORE_SPACE\n-    )\n+# FIXME: are these still needed?\n+# - bash: |\n+#     set -x\n+#     git submodule\n+#     export SUBMODULES_EXCLUDES=$(git submodule | grep -Eow 'src/[^ ]+' | sed 's/\\(.*\\)/--exclude=\\1\\/\\.git/')\n+#     echo \"##vso[task.setvariable variable=SUBMODULES_EXCLUDES;]$SUBMODULES_EXCLUDES\"\n+#\n+# - script: |\n+#     REM echo hack as drive D is too small\n+#     IF NOT \"%DISABLE_DISK_SPACE_HACK%\"==\"1\" (\n+#       mkdir c:\\MORE_SPACE\n+#       mklink /J build c:\\MORE_SPACE\n+#     )\n \n - script: |\n     set MSYS_PATH=%CD%\\citools\\msys64\n@@ -31,6 +29,7 @@ steps:\n     echo ##vso[task.setvariable variable=MSYS_PATH]%MSYS_PATH%\n     echo ##vso[task.prependpath]%MSYS_PATH%\\usr\\bin\n   displayName: Install msys2\n+  condition: eq(variables['Agent.OS'], 'Windows_NT')\n \n # If we need to download a custom MinGW, do so here and set the path\n # appropriately.\n@@ -44,28 +43,9 @@ steps:\n     powershell -Command \"iwr -outf %MINGW_ARCHIVE% %MINGW_URL%/%MINGW_ARCHIVE%\"\n     7z x -y %MINGW_ARCHIVE% > nul\n     echo ##vso[task.prependpath]%CD%\\%MINGW_DIR%\\bin\n-  condition: and(succeeded(), ne(variables['MINGW_URL'],''))\n+  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), ne(variables['MINGW_URL'],''))\n   displayName: Download custom MinGW\n \n-# If we're compiling for MSVC then we, like most other distribution builders,\n-# switch to clang as the compiler. This'll allow us eventually to enable LTO\n-# amongst LLVM and rustc. Note that we only do this on MSVC as I don't think\n-# clang has an output mode compatible with MinGW that we need. If it does we\n-# should switch to clang for MinGW as well!\n-#\n-# Note that the LLVM installer is an NSIS installer\n-#\n-# Original downloaded here came from\n-# http://releases.llvm.org/7.0.0/LLVM-7.0.0-win64.exe\n-- script: |\n-    powershell -Command \"iwr -outf %TEMP%\\LLVM-7.0.0-win64.exe https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/LLVM-7.0.0-win64.exe\"\n-    set CLANG_DIR=%CD%\\citools\\clang-rust\n-    %TEMP%\\LLVM-7.0.0-win64.exe /S /NCRC /D=%CLANG_DIR%\n-    set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --set llvm.clang-cl=%CLANG_DIR%\\bin\\clang-cl.exe\n-    echo ##vso[task.setvariable variable=RUST_CONFIGURE_ARGS]%RUST_CONFIGURE_ARGS%\n-  condition: and(succeeded(), eq(variables['MINGW_URL'],''))\n-  displayName: Download clang\n-\n # Here we do a pretty heinous thing which is to mangle the MinGW installation\n # we just had above. Currently, as of this writing, we're using MinGW-w64\n # builds of gcc, and that's currently at 6.3.0. We use 6.3.0 as it appears to\n@@ -87,28 +67,20 @@ steps:\n     echo ON\n     powershell -Command \"iwr -outf 2017-04-20-%MSYS_BITS%bit-gdborig.exe %MINGW_URL%/2017-04-20-%MSYS_BITS%bit-gdborig.exe\"\n     mv 2017-04-20-%MSYS_BITS%bit-gdborig.exe %MINGW_DIR%\\bin\\gdborig.exe\n-  condition: and(succeeded(), ne(variables['MINGW_URL'],''))\n+  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), ne(variables['MINGW_URL'],''))\n   displayName: Override with 6.3.0 gdb with 6.2.0 gdb\n \n # Otherwise pull in the MinGW installed on appveyor\n - script: |\n-    echo Find mingw\n-    set PATH | findstr /i msys\n-    set PATH | findstr /i mingw\n     echo ##vso[task.prependpath]%MSYS_PATH%\\mingw%MSYS_BITS%\\bin\n-  condition: and(succeeded(), eq(variables['MINGW_URL'],''))\n+  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['MINGW_URL'],''))\n   displayName: Add MinGW to path\n \n - script: |\n     copy C:\\Python27amd64\\python.exe C:\\Python27amd64\\python2.7.exe\n     echo ##vso[task.prependpath]C:\\Python27amd64\n   displayName: Prefer the \"native\" Python as LLVM has trouble building with MSYS sometimes\n-\n-- script: |\n-    md sccache\n-    powershell -Command \"iwr -outf sccache\\sccache.exe https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2018-04-26-sccache-x86_64-pc-windows-msvc\"\n-    echo ##vso[task.prependpath]%CD%\\sccache\n-  displayName: Download and install sccache\n+  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))\n \n # Note that this is originally from the github releases patch of Ninja\n - script: |\n@@ -120,41 +92,4 @@ steps:\n     echo ##vso[task.setvariable variable=RUST_CONFIGURE_ARGS]%RUST_CONFIGURE_ARGS%\n     echo ##vso[task.prependpath]%CD%\\ninja\n   displayName: Download and install ninja\n-\n-- script: |\n-    mkdir handle\n-    powershell -Command \"iwr -outf 2017-05-15-Handle.zip https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-05-15-Handle.zip\"\n-    7z x -ohandle 2017-05-15-Handle.zip\n-    del 2017-05-15-Handle.zip\n-    set PATH=%PATH%;%CD%\\handle\n-    handle.exe -accepteula -help\n-    echo ##vso[task.setvariable variable=PATH]%PATH%\n-  displayName: Help debug handle issues\n-\n-- template: show-environment-variables.yml\n-\n-- script: |\n-    REM echo force the specific VS version\n-    IF \"%VCVARS_BAT%\" NEQ \"\" (\n-      CALL \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build\\%VCVARS_BAT%\"\n-    )\n-\n-    where sccache\n-    where rev\n-    set | findstr /v SCCACHE_AZURE_CONNECTION_STRING\n-\n-    if not exist D:\\cache\\rustsrc\\NUL mkdir D:\\cache\\rustsrc\n-\n-    sh src/ci/init_repo.sh . /d/cache/rustsrc\n-    sh src/ci/run.sh\n-  env:\n-    CI: true\n-    CI_JOB_NAME: $(System.JobDisplayName)\n-    SRC: .\n-    NO_CCACHE: 1\n-\n-    # explicitly decrypt secret variables\n-    # see https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch\n-    AWS_ACCESS_KEY_ID: $(SCCACHE_AWS_ACCESS_KEY_ID)\n-    AWS_SECRET_ACCESS_KEY: $(SCCACHE_AWS_SECRET_ACCESS_KEY)\n-  displayName: Run script\n+  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))", "previous_filename": ".azure-pipelines/steps/windows.yml"}, {"sha": "70327de92e812427e38f4790e6616cdb9cf3e51f", "filename": ".azure-pipelines/steps/linux.yml", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/79d28c203fbf46739d2e3f1f2f3e62bdf1ac5563/.azure-pipelines%2Fsteps%2Flinux.yml", "raw_url": "https://github.com/rust-lang/rust/raw/79d28c203fbf46739d2e3f1f2f3e62bdf1ac5563/.azure-pipelines%2Fsteps%2Flinux.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Flinux.yml?ref=79d28c203fbf46739d2e3f1f2f3e62bdf1ac5563", "patch": "@@ -1,32 +0,0 @@\n-steps:\n-- checkout: self\n-  fetchDepth: 2\n-\n-- template: show-environment-variables.yml\n-- template: show-disk-usage.yml\n-\n-- bash: |\n-    sudo apt install gdb\n-\n-    export PATH=$PATH:$HOME/.local/bin:$HOME/Library/Python/2.7/bin/:$HOME\n-    echo \"##vso[task.prependpath]$HOME/.local/bin\"\n-    echo \"##vso[task.prependpath]$HOME/Library/Python/2.7/bin\"\n-    echo \"##vso[task.prependpath]$HOME\"\n-\n-    mkdir -p $HOME/rustsrc\n-  displayName:  Prep\n-\n-- bash: |\n-    export RUN_SCRIPT=\"$BUILD_SOURCESDIRECTORY/src/ci/init_repo.sh . $HOME/rustsrc && src/ci/docker/run.sh $IMAGE\"\n-    echo \"##vso[task.setvariable variable=IMAGE]$IMAGE\"\n-    echo \"##vso[task.setvariable variable=RUN_SCRIPT]$RUN_SCRIPT\"\n-  displayName: Prepare run script\n-\n-- template: show-environment-variables.yml\n-\n-- bash: sudo sh -c 'echo \"/checkout/obj/cores/core.%p.%E\" > /proc/sys/kernel/core_pattern'\n-  displayName: Enable core dump\n-\n-- template: verify-publish-toolstate.yml\n-\n-- template: run-script.yml"}, {"sha": "5976f31502f7a2f77dff5617103ed86d56838572", "filename": ".azure-pipelines/steps/macos.yml", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/79d28c203fbf46739d2e3f1f2f3e62bdf1ac5563/.azure-pipelines%2Fsteps%2Fmacos.yml", "raw_url": "https://github.com/rust-lang/rust/raw/79d28c203fbf46739d2e3f1f2f3e62bdf1ac5563/.azure-pipelines%2Fsteps%2Fmacos.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Fmacos.yml?ref=79d28c203fbf46739d2e3f1f2f3e62bdf1ac5563", "patch": "@@ -1,44 +0,0 @@\n-steps:\n-- template: show-disk-usage.yml\n-\n-- bash: |\n-    export PATH=$PATH:$HOME/.local/bin:$HOME/Library/Python/2.7/bin/\n-    mkdir -p $HOME/rustsrc\n-    echo \"##vso[task.setvariable variable=PATH;]$PATH\"\n-\n-    curl -fo /usr/local/bin/sccache https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2018-04-02-sccache-x86_64-apple-darwin\n-    chmod +x /usr/local/bin/sccache\n-\n-    export CC=`pwd`/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang\n-    echo \"##vso[task.setvariable variable=CC]$CC\"\n-\n-    export CXX=`pwd`/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang++\n-    echo \"##vso[task.setvariable variable=CXX]$CXX\"\n-\n-    echo \"##vso[task.setvariable variable=AR]ar\"\n-  displayName: Prep\n-\n-- bash: brew install gnu-tar\n-  displayName: install a tar that works well\n-\n-- bash: |\n-    curl -f http://releases.llvm.org/7.0.0/clang+llvm-7.0.0-x86_64-apple-darwin.tar.xz | tar xJf -\n-  displayName: Download clang\n-\n-- bash: |\n-    brew update\n-    brew install xz\n-    brew install swig\n-  condition: and(succeeded(), eq(variables['RUST_CHECK_TARGET'],'dist'))\n-  displayName: Install xz and swigw\n-\n-- bash: |\n-    export RUN_SCRIPT=\"$BUILD_SOURCESDIRECTORY/src/ci/init_repo.sh . $HOME/rustsrc && src/ci/run.sh\"\n-    echo \"##vso[task.setvariable variable=RUN_SCRIPT]$RUN_SCRIPT\"\n-  displayName: Prepare run script (init and run)\n-\n-- template: show-environment-variables.yml\n-\n-- template: verify-publish-toolstate.yml\n-\n-- template: run-script.yml"}, {"sha": "0e6af4d6d12bd743736d538cc141fd2d9484c31c", "filename": ".azure-pipelines/steps/run-script.yml", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/79d28c203fbf46739d2e3f1f2f3e62bdf1ac5563/.azure-pipelines%2Fsteps%2Frun-script.yml", "raw_url": "https://github.com/rust-lang/rust/raw/79d28c203fbf46739d2e3f1f2f3e62bdf1ac5563/.azure-pipelines%2Fsteps%2Frun-script.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Frun-script.yml?ref=79d28c203fbf46739d2e3f1f2f3e62bdf1ac5563", "patch": "@@ -1,35 +0,0 @@\n-steps:\n-\n-- bash: |\n-    # Log time information from this machine and an external machine for insight into possible\n-    # clock drift. Timezones don't matter since relative deltas give all the necessary info.\n-    date && (curl -fs --head https://google.com | grep ^Date: | sed 's/Date: //g' || true)\n-\n-    which sccache\n-    \"$RUN_SCRIPT\"\n-\n-    date && (curl -fs --head https://google.com | grep ^Date: | sed 's/Date: //g' || true)\n-  env:\n-    CI: true\n-    CI_JOB_NAME: $(IMAGE)\n-    SRC: .\n-\n-    # Explicitly decrypt secret variables\n-    # See https://docs.microsoft.com/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#secret-variables\n-    AWS_ACCESS_KEY_ID: $(SCCACHE_AWS_ACCESS_KEY_ID)\n-    AWS_SECRET_ACCESS_KEY: $(SCCACHE_AWS_SECRET_ACCESS_KEY)\n-  displayName: Run script\n-\n-- bash: |\n-    deploy_dir=rustc-builds\n-    if [ \"$DEPLOY_ALT\" == \"1\" ]; then\n-        deploy_dir=rustc-builds-alt\n-    fi\n-    aws s3 cp --no-progress --recursive --acl public-read ./deploy s3://$DEPLOY_BUCKET/$deploy_dir\n-  env:\n-    # Explicitly decrypt secret variables\n-    # See https://docs.microsoft.com/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#secret-variables\n-    AWS_ACCESS_KEY_ID: $(SCCACHE_AWS_ACCESS_KEY_ID)\n-    AWS_SECRET_ACCESS_KEY: $(SCCACHE_AWS_SECRET_ACCESS_KEY)\n-  condition: and(succeeded(), or(eq(variables.DEPLOY, '1'), eq(variables.DEPLOY_ALT, '1')))\n-  displayName: Upload artifacts"}, {"sha": "06bb8eb4dc8e99886f7f67463bfb903bb117d678", "filename": ".azure-pipelines/steps/run.yml", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/1be9fe6a449148d2f31b3e82f4d983630442d981/.azure-pipelines%2Fsteps%2Frun.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1be9fe6a449148d2f31b3e82f4d983630442d981/.azure-pipelines%2Fsteps%2Frun.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Frun.yml?ref=1be9fe6a449148d2f31b3e82f4d983630442d981", "patch": "@@ -0,0 +1,89 @@\n+# FIXME(linux): need to configure core dumps, enable them, and then dump\n+# backtraces on failure from all core dumps:\n+#\n+# - bash: sudo apt install gdb\n+# - bash: sudo sh -c 'echo \"/checkout/obj/cores/core.%p.%E\" > /proc/sys/kernel/core_pattern'\n+#\n+# Check travis config for `gdb --batch` command to print all crash logs\n+\n+steps:\n+- checkout: self\n+  fetchDepth: 2\n+\n+- bash: printenv | sort\n+  displayName: Show environment variables\n+\n+- bash: |\n+    set -e\n+    df -h\n+    du . | sort -nr | head -n100\n+  displayName: Show disk usage\n+  # FIXME: this hasn't been tested, but maybe it works on Windows? Should test!\n+  condition: ne(variables['Agent.OS'], 'Windows_NT')\n+\n+- template: install-sccache.yml\n+- template: install-clang.yml\n+\n+# Install some dependencies needed to build LLDB/Clang, currently only needed\n+# during the `dist` target\n+- bash: |\n+    set -e\n+    brew update\n+    brew install xz\n+    brew install swig\n+  displayName: Install build dependencies (OSX)\n+  condition: and(eq(variables['Agent.OS'], 'Darwin'), eq(variables['RUST_CHECK_TARGET'],'dist'))\n+\n+- template: install-windows-build-deps.yml\n+\n+# Check out all our submodules, but more quickly than using git by using one of\n+# our custom scripts\n+- bash: |\n+    set -e\n+    mkdir -p $HOME/rustsrc\n+    $BUILD_SOURCESDIRECTORY/src/ci/init_repo.sh . $HOME/rustsrc\n+  condition: ne(variables['Agent.OS'], 'Windows_NT')\n+  displayName: Check out submodules (Unix)\n+- script: |\n+    if not exist D:\\cache\\rustsrc\\NUL mkdir D:\\cache\\rustsrc\n+    sh src/ci/init_repo.sh . /d/cache/rustsrc\n+  condition: eq(variables['Agent.OS'], 'Windows_NT')\n+  displayName: Check out submodules (Windows)\n+\n+# Configure our CI_JOB_NAME variable which log analyzers can use for the main\n+# step to see what's going on.\n+- bash: echo \"##vso[task.setvariable variable=CI_JOB_NAME]$SYSTEM_JOBNAME\"\n+  condition: eq(variables['Agent.OS'], 'Windows_NT')\n+  displayName: Configure Job Name (Windows)\n+\n+# As a quick smoke check on the otherwise very fast mingw-check linux builder\n+# check our own internal scripts.\n+- bash: |\n+    set -e\n+    git clone --depth=1 https://github.com/rust-lang-nursery/rust-toolstate.git\n+    cd rust-toolstate\n+    python2.7 \"$BUILD_SOURCESDIRECTORY/src/tools/publish_toolstate.py\" \"$(git rev-parse HEAD)\" \"$(git log --format=%s -n1 HEAD)\" \"\" \"\"\n+    cd ..\n+    rm -rf rust-toolstate\n+  condition: and(succeeded(), eq(variables['IMAGE'], 'mingw-check'))\n+  displayName: Verify the publish_toolstate script works\n+\n+- script: sh src/ci/run.sh\n+  timeoutInMinutes: 180\n+  env:\n+    CI: true\n+    SRC: .\n+    AWS_SECRET_ACCESS_KEY: $(SCCACHE_AWS_SECRET_ACCESS_KEY)\n+  displayName: Run build\n+\n+- bash: |\n+    set -e\n+    deploy_dir=rustc-builds\n+    if [ \"$DEPLOY_ALT\" == \"1\" ]; then\n+        deploy_dir=rustc-builds-alt\n+    fi\n+    aws s3 cp --no-progress --recursive --acl public-read ./deploy s3://$DEPLOY_BUCKET/$deploy_dir\n+  env:\n+    AWS_SECRET_ACCESS_KEY: $(SCCACHE_AWS_SECRET_ACCESS_KEY)\n+  condition: and(succeeded(), or(eq(variables.DEPLOY, '1'), eq(variables.DEPLOY_ALT, '1')))\n+  displayName: Upload artifacts"}, {"sha": "902d8036471742a8e2a26efc9ccbeb36ec4b04d3", "filename": ".azure-pipelines/steps/show-disk-usage.yml", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/79d28c203fbf46739d2e3f1f2f3e62bdf1ac5563/.azure-pipelines%2Fsteps%2Fshow-disk-usage.yml", "raw_url": "https://github.com/rust-lang/rust/raw/79d28c203fbf46739d2e3f1f2f3e62bdf1ac5563/.azure-pipelines%2Fsteps%2Fshow-disk-usage.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Fshow-disk-usage.yml?ref=79d28c203fbf46739d2e3f1f2f3e62bdf1ac5563", "patch": "@@ -1,5 +0,0 @@\n-steps:\n-- bash: |\n-    df -h\n-    du . | sort -nr | head -n100\n-  displayName: Show disk usage"}, {"sha": "f6ed063ec6be5d872e6c0def8289bb8f34f35070", "filename": ".azure-pipelines/steps/show-environment-variables.yml", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79d28c203fbf46739d2e3f1f2f3e62bdf1ac5563/.azure-pipelines%2Fsteps%2Fshow-environment-variables.yml", "raw_url": "https://github.com/rust-lang/rust/raw/79d28c203fbf46739d2e3f1f2f3e62bdf1ac5563/.azure-pipelines%2Fsteps%2Fshow-environment-variables.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Fshow-environment-variables.yml?ref=79d28c203fbf46739d2e3f1f2f3e62bdf1ac5563", "patch": "@@ -1,3 +0,0 @@\n-steps:\n-- bash: printenv | sort\n-  displayName: Show environment variables\n\\ No newline at end of file"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": ".azure-pipelines/steps/verify-publish-toolstate.yml", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1be9fe6a449148d2f31b3e82f4d983630442d981/.azure-pipelines%2Fsteps%2Fverify-publish-toolstate.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1be9fe6a449148d2f31b3e82f4d983630442d981/.azure-pipelines%2Fsteps%2Fverify-publish-toolstate.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Fverify-publish-toolstate.yml?ref=1be9fe6a449148d2f31b3e82f4d983630442d981", "patch": "@@ -1,9 +0,0 @@\n-steps:\n-- bash: |\n-    git clone --depth=1 https://github.com/rust-lang-nursery/rust-toolstate.git\n-    cd rust-toolstate\n-    python2.7 \"$BUILD_SOURCESDIRECTORY/src/tools/publish_toolstate.py\" \"$(git rev-parse HEAD)\" \"$(git log --format=%s -n1 HEAD)\" \"\" \"\"\n-    cd ..\n-    rm -rf rust-toolstate\n-  condition: and(succeeded(), eq(variables['IMAGE'], 'mingw-check'))\n-  displayName: Verify the publish_toolstate script works"}, {"sha": "e04804d2deedbe26ae9acaa339d5bc28fd27ca67", "filename": ".azure-pipelines/try.yml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1be9fe6a449148d2f31b3e82f4d983630442d981/.azure-pipelines%2Ftry.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1be9fe6a449148d2f31b3e82f4d983630442d981/.azure-pipelines%2Ftry.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Ftry.yml?ref=1be9fe6a449148d2f31b3e82f4d983630442d981", "patch": "@@ -11,7 +11,6 @@ variables:\n \n jobs:\n - job: Linux\n-  timeoutInMinutes: 180\n   pool:\n     vmImage: ubuntu-16.04\n   strategy:\n@@ -27,4 +26,4 @@ jobs:\n         IMAGE: dist-x86_64-linux\n         DEPLOY_ALT: 1\n   steps:\n-  - template: steps/linux.yml\n+  - template: steps/run.yml"}]}