{"sha": "e921e3f04513ffb094208a538a2835d4dc77b991", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MjFlM2YwNDUxM2ZmYjA5NDIwOGE1MzhhMjgzNWQ0ZGM3N2I5OTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-02T17:24:56Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-02T18:50:13Z"}, "message": "Rollup test fixes and rebase conflicts", "tree": {"sha": "0fc18976815572ac2f9cab2e01236243e684eb4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fc18976815572ac2f9cab2e01236243e684eb4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e921e3f04513ffb094208a538a2835d4dc77b991", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e921e3f04513ffb094208a538a2835d4dc77b991", "html_url": "https://github.com/rust-lang/rust/commit/e921e3f04513ffb094208a538a2835d4dc77b991", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e921e3f04513ffb094208a538a2835d4dc77b991/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f2ead1629ce544d98f35225061d216abd86d5a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f2ead1629ce544d98f35225061d216abd86d5a6", "html_url": "https://github.com/rust-lang/rust/commit/1f2ead1629ce544d98f35225061d216abd86d5a6"}], "stats": {"total": 151, "additions": 56, "deletions": 95}, "files": [{"sha": "a8abb595034b5d7b54fb0b7e94d4d736cdbac314", "filename": "src/doc/reference.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -3177,7 +3177,6 @@ then the expression completes.\n Some examples of call expressions:\n \n ```\n-# use std::str::from_str;\n # fn add(x: int, y: int) -> int { 0 }\n \n let x: int = add(1, 2);"}, {"sha": "5f8789bf1c70c80f3a105150dc5642eb18e5fde8", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -113,39 +113,20 @@ impl<S: hash::Writer, Sized? T: Hash<S>> Hash<S> for Box<T> {\n     }\n }\n \n-#[cfg(not(stage0))]\n-impl Box<Any> {\n-    pub fn downcast<T: 'static>(self) -> Result<Box<T>, Box<Any>> {\n-        if self.is::<T>() {\n-            unsafe {\n-                // Get the raw representation of the trait object\n-                let to: TraitObject =\n-                    mem::transmute::<Box<Any>, TraitObject>(self);\n-\n-                // Extract the data pointer\n-                Ok(mem::transmute(to.data))\n-            }\n-        } else {\n-            Err(self)\n-        }\n-    }\n-}\n-\n /// Extension methods for an owning `Any` trait object.\n #[unstable = \"post-DST and coherence changes, this will not be a trait but \\\n               rather a direct `impl` on `Box<Any>`\"]\n-#[cfg(stage0)]\n pub trait BoxAny {\n     /// Returns the boxed value if it is of type `T`, or\n     /// `Err(Self)` if it isn't.\n     #[stable]\n     fn downcast<T: 'static>(self) -> Result<Box<T>, Self>;\n }\n \n-#[stable]\n-#[cfg(stage0)]\n impl BoxAny for Box<Any> {\n     #[inline]\n+    #[unstable = \"method may be renamed with respect to other downcasting \\\n+                  methods\"]\n     fn downcast<T: 'static>(self) -> Result<Box<T>, Box<Any>> {\n         if self.is::<T>() {\n             unsafe {"}, {"sha": "6ea624df0343994e4705eba76774dce842ac30c5", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -92,7 +92,7 @@ use core::iter::{Chain, Enumerate, Repeat, Skip, Take, repeat, Cloned};\n use core::iter::{mod, FromIterator};\n use core::num::Int;\n use core::ops::Index;\n-use core::slice::{Iter, IterMut};\n+use core::slice;\n use core::{u8, u32, uint};\n use bitv_set; //so meta\n "}, {"sha": "d831a57893bd77754980a174b6ff9d9452e507c4", "filename": "src/libcore/option.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -723,8 +723,6 @@ impl<T: Default> Option<T> {\n     /// `None` on error.\n     ///\n     /// ```\n-    /// use std::str::from_str;\n-    ///\n     /// let good_year_from_input = \"1909\";\n     /// let bad_year_from_input = \"190blarg\";\n     /// let good_year = good_year_from_input.parse().unwrap_or_default();"}, {"sha": "bd1c6dbcf1e9a4166d4a111cbbc32166dab2969f", "filename": "src/libcore/result.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -449,7 +449,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// ```\n     /// use std::io::IoResult;\n-    /// use std::str::from_str;\n     ///\n     /// let mut buffer = &mut b\"1\\n2\\n3\\n4\\n\";\n     ///"}, {"sha": "5cd62675c1dc3c53da7f6067f5e11d8c2a09911f", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -23,7 +23,6 @@ use syntax::diagnostic;\n use syntax::diagnostic::{Emitter, Handler, Level, mk_handler};\n \n use std::c_str::{ToCStr, CString};\n-use std::comm::channel;\n use std::io::Command;\n use std::io::fs;\n use std::iter::Unfold;"}, {"sha": "a87044bb3b3ba02e9ebe7902ea3ebd0bb1447ec8", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -402,7 +402,7 @@ fn escape_str(wr: &mut fmt::Writer, v: &str) -> fmt::Result {\n }\n \n fn escape_char(writer: &mut fmt::Writer, v: char) -> fmt::Result {\n-    let mut buf = [0, .. 4];\n+    let mut buf = [0; 4];\n     let n = v.encode_utf8(&mut buf).unwrap();\n     let buf = unsafe { str::from_utf8_unchecked(buf[0..n]) };\n     escape_str(writer, buf)"}, {"sha": "539fcb23bb05d0ba1721dc026f2e9a28552113bd", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -1918,7 +1918,7 @@ impl fmt::Show for FilePermission {\n #[cfg(test)]\n mod tests {\n     use self::BadReaderBehavior::*;\n-    use super::{IoResult, Reader, MemReader, NoProgress, InvalidInput};\n+    use super::{IoResult, MemReader, NoProgress, InvalidInput};\n     use prelude::v1::*;\n     use uint;\n "}, {"sha": "e073f76af825ce77628696d262a99af136589f6b", "filename": "src/libstd/io/timer.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibstd%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibstd%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftimer.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -225,8 +225,6 @@ fn in_ms_u64(d: Duration) -> u64 {\n \n #[cfg(test)]\n mod test {\n-    use prelude::v1::*;\n-\n     use super::Timer;\n     use thread::Thread;\n     use time::Duration;"}, {"sha": "a6d30dc5778d58b5522307d3d5418ff6cb82b080", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -1119,10 +1119,6 @@ fn prefix_len(p: Option<PathPrefix>) -> uint {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::v1::Option::{mod, Some, None};\n-    use prelude::v1::{Vec, Clone, AsSlice, SliceExt, CloneSliceExt, IteratorExt};\n-    use prelude::v1::{DoubleEndedIteratorExt, Str, ToString, GenericPath};\n-\n     use super::PathPrefix::*;\n     use super::parse_prefix;\n     use super::*;"}, {"sha": "19b8f5e62cf5532eacc2491f9ebe043315b3fc5b", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -307,7 +307,7 @@ mod tests {\n         static C: StaticCondvar = CONDVAR_INIT;\n         static M: StaticMutex = MUTEX_INIT;\n \n-        let mut g = M.lock().unwrap();\n+        let g = M.lock().unwrap();\n         let _t = Thread::spawn(move|| {\n             let _g = M.lock().unwrap();\n             C.notify_one();\n@@ -386,6 +386,6 @@ mod tests {\n         g = C.wait(g).unwrap();\n         drop(g);\n \n-        C.wait(M2.lock().unwrap()).unwrap();\n+        let _ = C.wait(M2.lock().unwrap()).unwrap();\n     }\n }"}, {"sha": "43554d7c335a4c4471084162593651789fcc2c64", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -337,7 +337,6 @@ mod test {\n     use prelude::v1::*;\n \n     use thread::Thread;\n-    use super::*;\n     use sync::mpsc::*;\n \n     // Don't use the libstd version so we can pull in the right Select structure"}, {"sha": "270c57f1ec07b111468b5274b1ba174f0c38f10c", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -447,7 +447,7 @@ mod test {\n     fn test_mutex_arc_poison() {\n         let arc = Arc::new(Mutex::new(1i));\n         let arc2 = arc.clone();\n-        Thread::spawn(move|| {\n+        let _ = Thread::spawn(move|| {\n             let lock = arc2.lock().unwrap();\n             assert_eq!(*lock, 2);\n         }).join();"}, {"sha": "bdf1bf3dfd02ceca099d0be7d70e2cc3324be749", "filename": "src/libstd/sys/common/helper_thread.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -23,7 +23,6 @@\n use prelude::v1::*;\n \n use cell::UnsafeCell;\n-use comm::{channel, Sender, Receiver};\n use mem;\n use rt;\n use sync::{StaticMutex, StaticCondvar};"}, {"sha": "623f3f6a89c9db9d7e423c086bf17d2d8881fd3c", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -10,8 +10,6 @@\n \n use prelude::v1::*;\n \n-use prelude::*;\n-\n use libc;\n use c_str::CString;\n use mem;"}, {"sha": "1034f0615d9947754672a679affbdd4eaf1bcbf2", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -24,13 +24,12 @@ use num;\n use mem;\n use io::{mod, IoResult, IoError};\n use sync::{Once, ONCE_INIT};\n-use comm::Sender;\n \n macro_rules! helper_init { (static $name:ident: Helper<$m:ty>) => (\n     static $name: Helper<$m> = Helper {\n         lock: ::sync::MUTEX_INIT,\n         cond: ::sync::CONDVAR_INIT,\n-        chan: ::cell::UnsafeCell { value: 0 as *mut Sender<$m> },\n+        chan: ::cell::UnsafeCell { value: 0 as *mut ::sync::mpsc::Sender<$m> },\n         signal: ::cell::UnsafeCell { value: 0 },\n         initialized: ::cell::UnsafeCell { value: false },\n         shutdown: ::cell::UnsafeCell { value: false },"}, {"sha": "343b78543bfd01dcd35107a3f9d2b411c2a46c1b", "filename": "src/libstd/sys/windows/timer.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibstd%2Fsys%2Fwindows%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibstd%2Fsys%2Fwindows%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftimer.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -25,10 +25,9 @@ use prelude::v1::*;\n \n use libc;\n use ptr;\n-use comm;\n \n-use comm::{channel, Sender, Receiver};\n use io::IoResult;\n+use sync::mpsc::{channel, Sender, Receiver, TryRecvError};\n use sys::c;\n use sys::fs::FileDesc;\n use sys_common::helper_thread::Helper;\n@@ -72,7 +71,7 @@ fn helper(input: libc::HANDLE, messages: Receiver<Req>, _: ()) {\n                         chans.push((c, one));\n                     }\n                     Ok(RemoveTimer(obj, c)) => {\n-                        c.send(());\n+                        c.send(()).unwrap();\n                         match objs.iter().position(|&o| o == obj) {\n                             Some(i) => {\n                                 drop(objs.remove(i));\n@@ -81,7 +80,7 @@ fn helper(input: libc::HANDLE, messages: Receiver<Req>, _: ()) {\n                             None => {}\n                         }\n                     }\n-                    Err(comm::Disconnected) => {\n+                    Err(TryRecvError::Disconnected) => {\n                         assert_eq!(objs.len(), 1);\n                         assert_eq!(chans.len(), 0);\n                         break 'outer;\n@@ -133,7 +132,7 @@ impl Timer {\n \n         let (tx, rx) = channel();\n         HELPER.send(RemoveTimer(self.obj, tx));\n-        rx.recv();\n+        rx.recv().unwrap();\n \n         self.on_worker = false;\n     }"}, {"sha": "3c87309dabcf3ceb06e91edc35f009df841eb00e", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -443,8 +443,8 @@ mod test {\n     use prelude::v1::*;\n \n     use any::{Any, AnyRefExt};\n-    use boxed::BoxAny;\n     use sync::mpsc::{channel, Sender};\n+    use boxed::BoxAny;\n     use result;\n     use std::io::{ChanReader, ChanWriter};\n     use super::{Thread, Builder};"}, {"sha": "285d193e7da8bcba46d631f8e221a25e631311f9", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -18,8 +18,7 @@\n // different scalability characteristics compared to the select\n // version.\n \n-use std::comm::{channel, Sender, Receiver};\n-use std::comm;\n+use std::sync::mpsc::{channel, Sender, Receiver};\n use std::os;\n use std::str::from_str;\n use std::thread::Thread;\n@@ -38,8 +37,8 @@ fn server(requests: &Receiver<request>, responses: &Sender<uint>) {\n     let mut count = 0u;\n     let mut done = false;\n     while !done {\n-        match requests.recv_opt() {\n-          Ok(request::get_count) => { responses.send(count.clone()); }\n+        match requests.recv() {\n+          Ok(request::get_count) => { responses.send(count.clone()).unwrap(); }\n           Ok(request::bytes(b)) => {\n             //println!(\"server: received {} bytes\", b);\n             count += b;\n@@ -48,7 +47,7 @@ fn server(requests: &Receiver<request>, responses: &Sender<uint>) {\n           _ => { }\n         }\n     }\n-    responses.send(count);\n+    responses.send(count).unwrap();\n     //println!(\"server exiting\");\n }\n \n@@ -69,7 +68,7 @@ fn run(args: &[String]) {\n             worker_results.push(Thread::spawn(move|| {\n                 for _ in range(0u, size / workers) {\n                     //println!(\"worker {}: sending {} bytes\", i, num_bytes);\n-                    to_child.send(request::bytes(num_bytes));\n+                    to_child.send(request::bytes(num_bytes)).unwrap();\n                 }\n                 //println!(\"worker {} exiting\", i);\n             }));\n@@ -83,9 +82,9 @@ fn run(args: &[String]) {\n         }\n \n         //println!(\"sending stop message\");\n-        to_child.send(request::stop);\n+        to_child.send(request::stop).unwrap();\n         move_out(to_child);\n-        result = Some(from_child.recv());\n+        result = Some(from_child.recv().unwrap());\n     });\n     let result = result.unwrap();\n     print!(\"Count is {}\\n\", result);"}, {"sha": "ef22aac776e0334727370b5fcba0cdeedd431af4", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -14,9 +14,8 @@\n //\n // I *think* it's the same, more or less.\n \n-use std::comm::{channel, Sender, Receiver};\n+use std::sync::mpsc::{channel, Sender, Receiver};\n use std::os;\n-use std::str::from_str;\n use std::thread::Thread;\n use std::time::Duration;\n use std::uint;\n@@ -33,7 +32,7 @@ fn server(requests: &Receiver<request>, responses: &Sender<uint>) {\n     let mut count: uint = 0;\n     let mut done = false;\n     while !done {\n-        match requests.recv_opt() {\n+        match requests.recv() {\n           Ok(request::get_count) => { responses.send(count.clone()); }\n           Ok(request::bytes(b)) => {\n             //println!(\"server: received {} bytes\", b);\n@@ -50,8 +49,8 @@ fn server(requests: &Receiver<request>, responses: &Sender<uint>) {\n fn run(args: &[String]) {\n     let (to_parent, from_child) = channel();\n \n-    let size = from_str::<uint>(args[1].as_slice()).unwrap();\n-    let workers = from_str::<uint>(args[2].as_slice()).unwrap();\n+    let size = args[1].parse::<uint>().unwrap();\n+    let workers = args[2].parse::<uint>().unwrap();\n     let num_bytes = 100;\n     let mut result = None;\n     let mut to_parent = Some(to_parent);\n@@ -93,7 +92,7 @@ fn run(args: &[String]) {\n         //println!(\"sending stop message\");\n         //to_child.send(stop);\n         //move_out(to_child);\n-        result = Some(from_child.recv());\n+        result = Some(from_child.recv().unwrap());\n     });\n     let result = result.unwrap();\n     print!(\"Count is {}\\n\", result);"}, {"sha": "de9e6629fbfc04d57c361723d5572491bc14d583", "filename": "src/test/bench/rt-messaging-ping-pong.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -17,7 +17,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::comm::channel;\n+use std::sync::mpsc::channel;\n use std::os;\n use std::str::from_str;\n use std::thread::Thread;"}, {"sha": "8b212555d4011cdb2d7d1a301d2b4172127befd8", "filename": "src/test/bench/rt-parfib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Frt-parfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Frt-parfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-parfib.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::comm::channel;\n+use std::sync::mpsc::channel;\n use std::os;\n-use std::str::from_str;\n use std::thread::Thread;\n use std::uint;\n \n@@ -28,15 +27,15 @@ fn parfib(n: uint) -> uint {\n         tx.send(parfib(n-1));\n     }).detach();\n     let m2 = parfib(n-2);\n-    return (rx.recv() + m2);\n+    return (rx.recv().unwrap() + m2);\n }\n \n fn main() {\n \n     let args = os::args();\n     let args = args.as_slice();\n     let n = if args.len() == 2 {\n-        from_str::<uint>(args[1].as_slice()).unwrap()\n+        args[1].parse::<uint>().unwrap()\n     } else {\n         10\n     };"}, {"sha": "c7a43d61a9a86b1215626a292fbbdafc597ca76f", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -75,7 +75,7 @@ fn main() {\n     } else if args.len() <= 1u {\n         8\n     } else {\n-        from_str(args[1].as_slice()).unwrap()\n+        args[1].parse().unwrap()\n     };\n     let min_depth = 4;\n     let max_depth = if min_depth + 2 > n {min_depth + 2} else {n};"}, {"sha": "030c627b6f71e4df6c23ae8daadbd8f7d766628f", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -41,7 +41,7 @@\n // no-pretty-expanded\n \n use self::Color::{Red, Yellow, Blue};\n-use std::comm::{channel, Sender, Receiver};\n+use std::sync::mpsc::{channel, Sender, Receiver};\n use std::fmt;\n use std::str::from_str;\n use std::thread::Thread;\n@@ -154,7 +154,7 @@ fn creature(\n \n     loop {\n         // ask for a pairing\n-        to_rendezvous.send(CreatureInfo {name: name, color: color});\n+        to_rendezvous.send(CreatureInfo {name: name, color: color}).unwrap();\n \n         // log and change, or quit\n         match rendezvous.next() {\n@@ -172,7 +172,7 @@ fn creature(\n     }\n     // log creatures met and evil clones of self\n     let report = format!(\"{}{}\", creatures_met, Number(evil_clones_met));\n-    to_rendezvous_log.send(report);\n+    to_rendezvous_log.send(report).unwrap();\n }\n \n fn rendezvous(nn: uint, set: Vec<Color>) {\n@@ -204,13 +204,13 @@ fn rendezvous(nn: uint, set: Vec<Color>) {\n \n     // set up meetings...\n     for _ in range(0, nn) {\n-        let fst_creature = from_creatures.recv();\n-        let snd_creature = from_creatures.recv();\n+        let fst_creature = from_creatures.recv().unwrap();\n+        let snd_creature = from_creatures.recv().unwrap();\n \n         creatures_met += 2;\n \n-        to_creature[fst_creature.name].send(snd_creature);\n-        to_creature[snd_creature.name].send(fst_creature);\n+        to_creature[fst_creature.name].send(snd_creature).unwrap();\n+        to_creature[snd_creature.name].send(fst_creature).unwrap();\n     }\n \n     // tell each creature to stop"}, {"sha": "7dca2b24fc11e8fa9b9ef817f74ee26d9fd4e990", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -186,7 +186,7 @@ fn fannkuch(n: i32) -> (i32, i32) {\n fn main() {\n     let n = std::os::args().as_slice()\n         .get(1)\n-        .and_then(|arg| from_str(arg.as_slice()))\n+        .and_then(|arg| arg.parse())\n         .unwrap_or(2i32);\n \n     let (checksum, maxflips) = fannkuch(n);"}, {"sha": "d92d30ca844af51570a4d608aa43e66355e09f83", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -20,7 +20,7 @@ extern crate collections;\n use std::ascii::{AsciiExt, OwnedAsciiExt};\n use std::cmp::Ordering::{mod, Less, Greater, Equal};\n use std::collections::HashMap;\n-use std::comm::{channel, Sender, Receiver};\n+use std::sync::mpsc::{channel, Sender, Receiver};\n use std::mem::replace;\n use std::num::Float;\n use std::option;\n@@ -120,7 +120,7 @@ fn make_sequence_processor(sz: uint,\n \n    loop {\n \n-       line = from_parent.recv();\n+       line = from_parent.recv().unwrap();\n        if line == Vec::new() { break; }\n \n        carry.push_all(line.as_slice());\n@@ -222,6 +222,6 @@ fn main() {\n \n    // now fetch and print result messages\n    for (ii, _sz) in sizes.iter().enumerate() {\n-       println!(\"{}\", from_child[ii].recv());\n+       println!(\"{}\", from_child[ii].recv().unwrap());\n    }\n }"}, {"sha": "0c3152d4780f2b8382432ff02f64166815d18724", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -40,7 +40,7 @@\n \n // no-pretty-expanded FIXME #15189\n \n-use std::comm::channel;\n+use std::sync::mpsc::channel;\n use std::sync::Arc;\n use std::thread::Thread;\n \n@@ -315,13 +315,13 @@ fn par_search(masks: Vec<Vec<Vec<u64>>>) -> Data {\n         Thread::spawn(move|| {\n             let mut data = Data::new();\n             search(&*masks, m, 1, List::Cons(m, &List::Nil), &mut data);\n-            tx.send(data);\n+            tx.send(data).unwrap();\n         }).detach();\n     }\n \n     // collecting the results\n     drop(tx);\n-    let mut data = rx.recv();\n+    let mut data = rx.recv().unwrap();\n     for d in rx.iter() { data.reduce_from(d); }\n     data\n }"}, {"sha": "78b5ac00b45e0f4591df351d2ab4eea229101d92", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -20,7 +20,7 @@\n \n extern crate getopts;\n \n-use std::comm::{channel, Sender};\n+use std::sync::mpsc::{channel, Sender};\n use std::os;\n use std::result::Result::{Ok, Err};\n use std::str::from_str;\n@@ -30,22 +30,22 @@ use std::time::Duration;\n fn fib(n: int) -> int {\n     fn pfib(tx: &Sender<int>, n: int) {\n         if n == 0 {\n-            tx.send(0);\n+            tx.send(0).unwrap();\n         } else if n <= 2 {\n-            tx.send(1);\n+            tx.send(1).unwrap();\n         } else {\n             let (tx1, rx) = channel();\n             let tx2 = tx1.clone();\n             Thread::spawn(move|| pfib(&tx2, n - 1)).detach();\n             let tx2 = tx1.clone();\n             Thread::spawn(move|| pfib(&tx2, n - 2)).detach();\n-            tx.send(rx.recv() + rx.recv());\n+            tx.send(rx.recv().unwrap() + rx.recv().unwrap());\n         }\n     }\n \n     let (tx, rx) = channel();\n     Thread::spawn(move|| pfib(&tx, n) ).detach();\n-    rx.recv()\n+    rx.recv().unwrap()\n }\n \n struct Config {"}, {"sha": "543597d8c8118401180698d55389f6c70453103e", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -38,7 +38,7 @@\n // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n-use std::comm::{channel, Sender, Receiver};\n+use std::sync::mpsc::{channel, Sender, Receiver};\n use std::str::from_str;\n use std::thread::Thread;\n "}, {"sha": "a0278a63a51d9c6a389cb0068bd09728271dc078", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -17,14 +17,14 @@\n \n // ignore-pretty very bad with line comments\n \n-use std::comm::{mod, channel};\n+use std::sync::mpsc::{channel, Sender};\n use std::os;\n use std::str::from_str;\n use std::task;\n use std::thread::Thread;\n use std::uint;\n \n-fn child_generation(gens_left: uint, tx: comm::Sender<()>) {\n+fn child_generation(gens_left: uint, tx: Sender<()>) {\n     // This used to be O(n^2) in the number of generations that ever existed.\n     // With this code, only as many generations are alive at a time as tasks\n     // alive at a time,\n@@ -35,7 +35,7 @@ fn child_generation(gens_left: uint, tx: comm::Sender<()>) {\n         if gens_left > 0 {\n             child_generation(gens_left - 1, tx); // recurse\n         } else {\n-            tx.send(())\n+            tx.send(()).unwrap()\n         }\n     }).detach();\n }\n@@ -52,7 +52,7 @@ fn main() {\n \n     let (tx, rx) = channel();\n     child_generation(from_str::<uint>(args[1].as_slice()).unwrap(), tx);\n-    if rx.recv_opt().is_err() {\n+    if rx.recv().is_err() {\n         panic!(\"it happened when we slumbered\");\n     }\n }"}, {"sha": "b86e553e100ddc289e0847eadd3cf40543ecdc67", "filename": "src/test/compile-fail/issue-19883.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fcompile-fail%2Fissue-19883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e921e3f04513ffb094208a538a2835d4dc77b991/src%2Ftest%2Fcompile-fail%2Fissue-19883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19883.rs?ref=e921e3f04513ffb094208a538a2835d4dc77b991", "patch": "@@ -19,7 +19,7 @@ trait From<Src> {\n trait To {\n     // This is a typo, the return type should be `<Dst as From<Self>>::Output`\n     fn to<Dst: From<Self>>(self) -> <Dst as From<Self>>::Dst {\n-    //~ error: the trait `core::kinds::Sized` is not implemented\n+    //~^ error: the trait `core::kinds::Sized` is not implemented\n         From::from(self)\n     }\n }"}]}