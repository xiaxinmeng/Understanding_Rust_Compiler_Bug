{"sha": "4b23503b4285f7dd9ee92fd267b3cafaa723a048", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMjM1MDNiNDI4NWY3ZGQ5ZWU5MmZkMjY3YjNjYWZhYTcyM2EwNDg=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-25T20:40:24Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-27T17:34:17Z"}, "message": "Remove shrink_to_tcx_lifetime\n\nThere's no longer two distinct gcx and tcx lifetimes which made this\nnecessary (or, at least, the code compiles -- it's possible we got\nbetter at normalizing, but that seems unlikely).", "tree": {"sha": "a17df3140dd4e22c5fd2c3f6678da58aaa78752a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a17df3140dd4e22c5fd2c3f6678da58aaa78752a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b23503b4285f7dd9ee92fd267b3cafaa723a048", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b23503b4285f7dd9ee92fd267b3cafaa723a048", "html_url": "https://github.com/rust-lang/rust/commit/4b23503b4285f7dd9ee92fd267b3cafaa723a048", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b23503b4285f7dd9ee92fd267b3cafaa723a048/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a4d55ddb89521899da2d1b6bf047ce01386595e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a4d55ddb89521899da2d1b6bf047ce01386595e", "html_url": "https://github.com/rust-lang/rust/commit/0a4d55ddb89521899da2d1b6bf047ce01386595e"}], "stats": {"total": 107, "additions": 9, "deletions": 98}, "files": [{"sha": "34aa4ee78da30c780d6b00648923fc8f13689dca", "filename": "src/librustc/traits/query/type_op/ascribe_user_type.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b23503b4285f7dd9ee92fd267b3cafaa723a048/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b23503b4285f7dd9ee92fd267b3cafaa723a048/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs?ref=4b23503b4285f7dd9ee92fd267b3cafaa723a048", "patch": "@@ -1,4 +1,4 @@\n-use crate::infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n+use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n use crate::traits::query::Fallible;\n use crate::hir::def_id::DefId;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n@@ -37,12 +37,6 @@ impl<'tcx> super::QueryTypeOp<'tcx> for AscribeUserType<'tcx> {\n     ) -> Fallible<CanonicalizedQueryResponse<'tcx, ()>> {\n         tcx.type_op_ascribe_user_type(canonicalized)\n     }\n-\n-    fn shrink_to_tcx_lifetime(\n-        v: &'a CanonicalizedQueryResponse<'tcx, ()>,\n-    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, ()>> {\n-        v\n-    }\n }\n \n BraceStructTypeFoldableImpl! {"}, {"sha": "3653f9268dcdea393fccc854894ce64bee772d99", "filename": "src/librustc/traits/query/type_op/eq.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b23503b4285f7dd9ee92fd267b3cafaa723a048/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b23503b4285f7dd9ee92fd267b3cafaa723a048/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs?ref=4b23503b4285f7dd9ee92fd267b3cafaa723a048", "patch": "@@ -1,4 +1,4 @@\n-use crate::infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n+use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n@@ -34,12 +34,6 @@ impl<'tcx> super::QueryTypeOp<'tcx> for Eq<'tcx> {\n     ) -> Fallible<CanonicalizedQueryResponse<'tcx, ()>> {\n         tcx.type_op_eq(canonicalized)\n     }\n-\n-    fn shrink_to_tcx_lifetime(\n-        v: &'a CanonicalizedQueryResponse<'tcx, ()>,\n-    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, ()>> {\n-        v\n-    }\n }\n \n BraceStructTypeFoldableImpl! {"}, {"sha": "12a834fbda6bd46011257b1398accaa32c9a03fa", "filename": "src/librustc/traits/query/type_op/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b23503b4285f7dd9ee92fd267b3cafaa723a048/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b23503b4285f7dd9ee92fd267b3cafaa723a048/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=4b23503b4285f7dd9ee92fd267b3cafaa723a048", "patch": "@@ -1,4 +1,4 @@\n-use crate::infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n+use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n use crate::traits::query::outlives_bounds::OutlivesBound;\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n@@ -38,12 +38,6 @@ impl<'tcx> super::QueryTypeOp<'tcx> for ImpliedOutlivesBounds<'tcx> {\n \n         tcx.implied_outlives_bounds(canonicalized)\n     }\n-\n-    fn shrink_to_tcx_lifetime(\n-        v: &'a CanonicalizedQueryResponse<'tcx, Self::QueryResponse>,\n-    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, Self::QueryResponse>> {\n-        v\n-    }\n }\n \n BraceStructTypeFoldableImpl! {"}, {"sha": "98e535234b6302b9888330976a5476f89b01a4b6", "filename": "src/librustc/traits/query/type_op/mod.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4b23503b4285f7dd9ee92fd267b3cafaa723a048/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b23503b4285f7dd9ee92fd267b3cafaa723a048/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=4b23503b4285f7dd9ee92fd267b3cafaa723a048", "patch": "@@ -1,6 +1,6 @@\n use crate::infer::canonical::{\n-    Canonical, Canonicalized, CanonicalizedQueryResponse, OriginalQueryValues,\n-    QueryRegionConstraints, QueryResponse,\n+    Canonicalized, CanonicalizedQueryResponse, OriginalQueryValues,\n+    QueryRegionConstraints,\n };\n use crate::infer::{InferCtxt, InferOk};\n use std::fmt;\n@@ -66,22 +66,6 @@ pub trait QueryTypeOp<'tcx>: fmt::Debug + Sized + TypeFoldable<'tcx> + 'tcx {\n         canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Self>>,\n     ) -> Fallible<CanonicalizedQueryResponse<'tcx, Self::QueryResponse>>;\n \n-    /// Casts a lifted query result (which is in the tcx lifetime)\n-    /// into the tcx lifetime. This is always just an identity cast,\n-    /// but the generic code doesn't realize it -- put another way, in\n-    /// the generic code, we have a `Lifted<'tcx, Self::QueryResponse>`\n-    /// and we want to convert that to a `Self::QueryResponse`. This is\n-    /// not a priori valid, so we can't do it -- but in practice, it\n-    /// is always a no-op (e.g., the lifted form of a type,\n-    /// `Ty<'tcx>`, is a subtype of `Ty<'tcx>`). So we have to push\n-    /// the operation into the impls that know more specifically what\n-    /// `QueryResponse` is. This operation would (maybe) be nicer with\n-    /// something like HKTs or GATs, since then we could make\n-    /// `QueryResponse` parametric and `'tcx` and `'tcx` etc.\n-    fn shrink_to_tcx_lifetime(\n-        lifted_query_result: &'a CanonicalizedQueryResponse<'tcx, Self::QueryResponse>,\n-    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, Self::QueryResponse>>;\n-\n     fn fully_perform_into(\n         query_key: ParamEnvAnd<'tcx, Self>,\n         infcx: &InferCtxt<'_, 'tcx>,\n@@ -99,7 +83,6 @@ pub trait QueryTypeOp<'tcx>: fmt::Debug + Sized + TypeFoldable<'tcx> + 'tcx {\n         let canonical_self =\n             infcx.canonicalize_hr_query_hack(&query_key, &mut canonical_var_values);\n         let canonical_result = Self::perform_query(infcx.tcx, canonical_self)?;\n-        let canonical_result = Self::shrink_to_tcx_lifetime(&canonical_result);\n \n         let param_env = query_key.param_env;\n "}, {"sha": "2138f792d45bbd5ea07308030f61849b2e5695c9", "filename": "src/librustc/traits/query/type_op/normalize.rs", "status": "modified", "additions": 1, "deletions": 37, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4b23503b4285f7dd9ee92fd267b3cafaa723a048/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b23503b4285f7dd9ee92fd267b3cafaa723a048/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs?ref=4b23503b4285f7dd9ee92fd267b3cafaa723a048", "patch": "@@ -1,4 +1,4 @@\n-use crate::infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n+use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n use std::fmt;\n use crate::traits::query::Fallible;\n use crate::ty::fold::TypeFoldable;\n@@ -38,25 +38,13 @@ where\n     ) -> Fallible<CanonicalizedQueryResponse<'tcx, Self::QueryResponse>> {\n         T::type_op_method(tcx, canonicalized)\n     }\n-\n-    fn shrink_to_tcx_lifetime(\n-        v: &'a CanonicalizedQueryResponse<'tcx, T>,\n-    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, T>> {\n-        T::shrink_to_tcx_lifetime(v)\n-    }\n }\n \n pub trait Normalizable<'tcx>: fmt::Debug + TypeFoldable<'tcx> + Lift<'tcx> + Copy {\n     fn type_op_method(\n         tcx: TyCtxt<'tcx>,\n         canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n     ) -> Fallible<CanonicalizedQueryResponse<'tcx, Self>>;\n-\n-    /// Converts from the `'tcx` (lifted) form of `Self` into the `tcx`\n-    /// form of `Self`.\n-    fn shrink_to_tcx_lifetime(\n-        v: &'a CanonicalizedQueryResponse<'tcx, Self>,\n-    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, Self>>;\n }\n \n impl Normalizable<'tcx> for Ty<'tcx> {\n@@ -66,12 +54,6 @@ impl Normalizable<'tcx> for Ty<'tcx> {\n     ) -> Fallible<CanonicalizedQueryResponse<'tcx, Self>> {\n         tcx.type_op_normalize_ty(canonicalized)\n     }\n-\n-    fn shrink_to_tcx_lifetime(\n-        v: &'a CanonicalizedQueryResponse<'tcx, Self>,\n-    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, Self>> {\n-        v\n-    }\n }\n \n impl Normalizable<'tcx> for ty::Predicate<'tcx> {\n@@ -81,12 +63,6 @@ impl Normalizable<'tcx> for ty::Predicate<'tcx> {\n     ) -> Fallible<CanonicalizedQueryResponse<'tcx, Self>> {\n         tcx.type_op_normalize_predicate(canonicalized)\n     }\n-\n-    fn shrink_to_tcx_lifetime(\n-        v: &'a CanonicalizedQueryResponse<'tcx, Self>,\n-    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, Self>> {\n-        v\n-    }\n }\n \n impl Normalizable<'tcx> for ty::PolyFnSig<'tcx> {\n@@ -96,12 +72,6 @@ impl Normalizable<'tcx> for ty::PolyFnSig<'tcx> {\n     ) -> Fallible<CanonicalizedQueryResponse<'tcx, Self>> {\n         tcx.type_op_normalize_poly_fn_sig(canonicalized)\n     }\n-\n-    fn shrink_to_tcx_lifetime(\n-        v: &'a CanonicalizedQueryResponse<'tcx, Self>,\n-    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, Self>> {\n-        v\n-    }\n }\n \n impl Normalizable<'tcx> for ty::FnSig<'tcx> {\n@@ -111,12 +81,6 @@ impl Normalizable<'tcx> for ty::FnSig<'tcx> {\n     ) -> Fallible<CanonicalizedQueryResponse<'tcx, Self>> {\n         tcx.type_op_normalize_fn_sig(canonicalized)\n     }\n-\n-    fn shrink_to_tcx_lifetime(\n-        v: &'a CanonicalizedQueryResponse<'tcx, Self>,\n-    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, Self>> {\n-        v\n-    }\n }\n \n BraceStructTypeFoldableImpl! {"}, {"sha": "9b956f3e55408a9d6bd4616eab4e317833829ff7", "filename": "src/librustc/traits/query/type_op/outlives.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b23503b4285f7dd9ee92fd267b3cafaa723a048/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b23503b4285f7dd9ee92fd267b3cafaa723a048/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=4b23503b4285f7dd9ee92fd267b3cafaa723a048", "patch": "@@ -1,4 +1,4 @@\n-use crate::infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n+use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n use crate::traits::query::dropck_outlives::trivial_dropck_outlives;\n use crate::traits::query::dropck_outlives::DropckOutlivesResult;\n use crate::traits::query::Fallible;\n@@ -53,12 +53,6 @@ impl super::QueryTypeOp<'tcx> for DropckOutlives<'tcx> {\n \n         tcx.dropck_outlives(canonicalized)\n     }\n-\n-    fn shrink_to_tcx_lifetime(\n-        lifted_query_result: &'a CanonicalizedQueryResponse<'tcx, Self::QueryResponse>,\n-    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, Self::QueryResponse>> {\n-        lifted_query_result\n-    }\n }\n \n BraceStructTypeFoldableImpl! {"}, {"sha": "2a908d0f66e5b6e30706af011b21940250a09b8c", "filename": "src/librustc/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b23503b4285f7dd9ee92fd267b3cafaa723a048/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b23503b4285f7dd9ee92fd267b3cafaa723a048/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=4b23503b4285f7dd9ee92fd267b3cafaa723a048", "patch": "@@ -1,4 +1,4 @@\n-use crate::infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n+use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Predicate, TyCtxt};\n \n@@ -43,12 +43,6 @@ impl<'tcx> super::QueryTypeOp<'tcx> for ProvePredicate<'tcx> {\n     ) -> Fallible<CanonicalizedQueryResponse<'tcx, ()>> {\n         tcx.type_op_prove_predicate(canonicalized)\n     }\n-\n-    fn shrink_to_tcx_lifetime(\n-        v: &'a CanonicalizedQueryResponse<'tcx, ()>,\n-    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, ()>> {\n-        v\n-    }\n }\n \n BraceStructTypeFoldableImpl! {"}, {"sha": "c89a55daa095e1763d1f43baa7aca9eeea687286", "filename": "src/librustc/traits/query/type_op/subtype.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b23503b4285f7dd9ee92fd267b3cafaa723a048/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b23503b4285f7dd9ee92fd267b3cafaa723a048/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs?ref=4b23503b4285f7dd9ee92fd267b3cafaa723a048", "patch": "@@ -1,4 +1,4 @@\n-use crate::infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n+use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n use crate::traits::query::Fallible;\n use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n@@ -34,12 +34,6 @@ impl<'tcx> super::QueryTypeOp<'tcx> for Subtype<'tcx> {\n     ) -> Fallible<CanonicalizedQueryResponse<'tcx, ()>> {\n         tcx.type_op_subtype(canonicalized)\n     }\n-\n-    fn shrink_to_tcx_lifetime(\n-        v: &'a CanonicalizedQueryResponse<'tcx, ()>,\n-    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, ()>> {\n-        v\n-    }\n }\n \n BraceStructTypeFoldableImpl! {"}]}