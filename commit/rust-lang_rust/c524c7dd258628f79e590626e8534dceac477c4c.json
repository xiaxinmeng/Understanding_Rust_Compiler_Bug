{"sha": "c524c7dd258628f79e590626e8534dceac477c4c", "node_id": "C_kwDOAAsO6NoAKGM1MjRjN2RkMjU4NjI4Zjc5ZTU5MDYyNmU4NTM0ZGNlYWM0NzdjNGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-17T03:04:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-17T03:04:22Z"}, "message": "Auto merge of #98588 - b-naber:valtrees-cleanup, r=lcnr\n\nUse only ty::Unevaluated<'tcx, ()> in type system\n\nr? `@lcnr`", "tree": {"sha": "2a5f2caf2d851d3e169cff8431c9efa6f4a76477", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a5f2caf2d851d3e169cff8431c9efa6f4a76477"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c524c7dd258628f79e590626e8534dceac477c4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c524c7dd258628f79e590626e8534dceac477c4c", "html_url": "https://github.com/rust-lang/rust/commit/c524c7dd258628f79e590626e8534dceac477c4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c524c7dd258628f79e590626e8534dceac477c4c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95a992a68694d8bf3959bd2c0ac27ce9e9208b59", "url": "https://api.github.com/repos/rust-lang/rust/commits/95a992a68694d8bf3959bd2c0ac27ce9e9208b59", "html_url": "https://github.com/rust-lang/rust/commit/95a992a68694d8bf3959bd2c0ac27ce9e9208b59"}, {"sha": "d77248e6d201aca593bac3393bd7ad0159909cff", "url": "https://api.github.com/repos/rust-lang/rust/commits/d77248e6d201aca593bac3393bd7ad0159909cff", "html_url": "https://github.com/rust-lang/rust/commit/d77248e6d201aca593bac3393bd7ad0159909cff"}], "stats": {"total": 708, "additions": 384, "deletions": 324}, "files": [{"sha": "63b2088f7fc099f7a0183dd7d6f3535ca54cd408", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -2,6 +2,7 @@ use rustc_index::vec::IndexVec;\n use rustc_infer::infer::{InferCtxt, NllRegionVariableOrigin};\n use rustc_middle::mir::visit::{MutVisitor, TyContext};\n use rustc_middle::mir::{Body, Location, Promoted};\n+use rustc_middle::mir::{Constant, ConstantKind};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n \n@@ -37,6 +38,21 @@ where\n     })\n }\n \n+// FIXME(valtrees): This function is necessary because `fold_regions`\n+// panics for mir constants in the visitor.\n+//\n+// Once `visit_mir_constant` is removed we can also remove this function\n+// and just use `renumber_regions`.\n+fn renumber_regions_in_mir_constant<'tcx>(\n+    infcx: &InferCtxt<'_, 'tcx>,\n+    value: ConstantKind<'tcx>,\n+) -> ConstantKind<'tcx> {\n+    infcx.tcx.super_fold_regions(value, |_region, _depth| {\n+        let origin = NllRegionVariableOrigin::Existential { from_forall: false };\n+        infcx.next_nll_region_var(origin)\n+    })\n+}\n+\n struct NllVisitor<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n }\n@@ -48,6 +64,13 @@ impl<'a, 'tcx> NllVisitor<'a, 'tcx> {\n     {\n         renumber_regions(self.infcx, value)\n     }\n+\n+    fn renumber_regions_in_mir_constant(\n+        &mut self,\n+        value: ConstantKind<'tcx>,\n+    ) -> ConstantKind<'tcx> {\n+        renumber_regions_in_mir_constant(self.infcx, value)\n+    }\n }\n \n impl<'a, 'tcx> MutVisitor<'tcx> for NllVisitor<'a, 'tcx> {\n@@ -77,7 +100,10 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NllVisitor<'a, 'tcx> {\n         debug!(?region);\n     }\n \n-    fn visit_const(&mut self, constant: &mut ty::Const<'tcx>, _location: Location) {\n-        *constant = self.renumber_regions(*constant);\n+    #[instrument(skip(self), level = \"debug\")]\n+    fn visit_constant(&mut self, constant: &mut Constant<'tcx>, _location: Location) {\n+        let literal = constant.literal;\n+        constant.literal = self.renumber_regions_in_mir_constant(literal);\n+        debug!(\"constant: {:#?}\", constant);\n     }\n }"}, {"sha": "373411e1b7827b5bb80675c96992ddb0a5cbfbee", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -355,11 +355,15 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n             let tcx = self.tcx();\n             let maybe_uneval = match constant.literal {\n                 ConstantKind::Ty(ct) => match ct.kind() {\n-                    ty::ConstKind::Unevaluated(uv) => Some(uv),\n+                    ty::ConstKind::Unevaluated(_) => {\n+                        bug!(\"should not encounter unevaluated ConstantKind::Ty here, got {:?}\", ct)\n+                    }\n                     _ => None,\n                 },\n+                ConstantKind::Unevaluated(uv, _) => Some(uv),\n                 _ => None,\n             };\n+\n             if let Some(uv) = maybe_uneval {\n                 if let Some(promoted) = uv.promoted {\n                     let check_err = |verifier: &mut TypeVerifier<'a, 'b, 'tcx>,\n@@ -1813,12 +1817,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     fn check_operand(&mut self, op: &Operand<'tcx>, location: Location) {\n         if let Operand::Constant(constant) = op {\n             let maybe_uneval = match constant.literal {\n-                ConstantKind::Ty(ct) => match ct.kind() {\n-                    ty::ConstKind::Unevaluated(uv) => Some(uv),\n-                    _ => None,\n-                },\n-                _ => None,\n+                ConstantKind::Val(..) | ConstantKind::Ty(_) => None,\n+                ConstantKind::Unevaluated(uv, _) => Some(uv),\n             };\n+\n             if let Some(uv) = maybe_uneval {\n                 if uv.promoted.is_none() {\n                     let tcx = self.tcx();"}, {"sha": "6b4ed9b9d4053911b786715c1ef1060495060be8", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 31, "deletions": 42, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -41,36 +41,30 @@ impl ConstantCx {\n pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n     let mut all_constants_ok = true;\n     for constant in &fx.mir.required_consts {\n-        let const_ = match fx.monomorphize(constant.literal) {\n-            ConstantKind::Ty(ct) => ct,\n+        let unevaluated = match fx.monomorphize(constant.literal) {\n+            ConstantKind::Ty(ct) => match ct.kind() {\n+                ConstKind::Unevaluated(uv) => uv.expand(),\n+                ConstKind::Value(_) => continue,\n+                ConstKind::Param(_)\n+                | ConstKind::Infer(_)\n+                | ConstKind::Bound(_, _)\n+                | ConstKind::Placeholder(_)\n+                | ConstKind::Error(_) => unreachable!(\"{:?}\", ct),\n+            },\n+            ConstantKind::Unevaluated(uv, _) => uv,\n             ConstantKind::Val(..) => continue,\n         };\n-        match const_.kind() {\n-            ConstKind::Value(_) => {}\n-            ConstKind::Unevaluated(unevaluated) => {\n-                if let Err(err) =\n-                    fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None)\n-                {\n-                    all_constants_ok = false;\n-                    match err {\n-                        ErrorHandled::Reported(_) | ErrorHandled::Linted => {\n-                            fx.tcx.sess.span_err(constant.span, \"erroneous constant encountered\");\n-                        }\n-                        ErrorHandled::TooGeneric => {\n-                            span_bug!(\n-                                constant.span,\n-                                \"codegen encountered polymorphic constant: {:?}\",\n-                                err\n-                            );\n-                        }\n-                    }\n+\n+        if let Err(err) = fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {\n+            all_constants_ok = false;\n+            match err {\n+                ErrorHandled::Reported(_) | ErrorHandled::Linted => {\n+                    fx.tcx.sess.span_err(constant.span, \"erroneous constant encountered\");\n+                }\n+                ErrorHandled::TooGeneric => {\n+                    span_bug!(constant.span, \"codegen encountered polymorphic constant: {:?}\", err);\n                 }\n             }\n-            ConstKind::Param(_)\n-            | ConstKind::Infer(_)\n-            | ConstKind::Bound(_, _)\n-            | ConstKind::Placeholder(_)\n-            | ConstKind::Error(_) => unreachable!(\"{:?}\", const_),\n         }\n     }\n     all_constants_ok\n@@ -122,36 +116,28 @@ pub(crate) fn codegen_constant<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     constant: &Constant<'tcx>,\n ) -> CValue<'tcx> {\n-    let const_ = match fx.monomorphize(constant.literal) {\n-        ConstantKind::Ty(ct) => ct,\n-        ConstantKind::Val(val, ty) => return codegen_const_value(fx, val, ty),\n-    };\n-    let const_val = match const_.kind() {\n-        ConstKind::Value(valtree) => fx.tcx.valtree_to_const_val((const_.ty(), valtree)),\n-        ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n+    let (const_val, ty) = match fx.monomorphize(constant.literal) {\n+        ConstantKind::Ty(const_) => unreachable!(\"{:?}\", const_),\n+        ConstantKind::Unevaluated(ty::Unevaluated { def, substs, promoted }, ty)\n             if fx.tcx.is_static(def.did) =>\n         {\n             assert!(substs.is_empty());\n             assert!(promoted.is_none());\n \n-            return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty())).to_cvalue(fx);\n+            return codegen_static_ref(fx, def.did, fx.layout_of(ty)).to_cvalue(fx);\n         }\n-        ConstKind::Unevaluated(unevaluated) => {\n+        ConstantKind::Unevaluated(unevaluated, ty) => {\n             match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {\n-                Ok(const_val) => const_val,\n+                Ok(const_val) => (const_val, ty),\n                 Err(_) => {\n                     span_bug!(constant.span, \"erroneous constant not captured by required_consts\");\n                 }\n             }\n         }\n-        ConstKind::Param(_)\n-        | ConstKind::Infer(_)\n-        | ConstKind::Bound(_, _)\n-        | ConstKind::Placeholder(_)\n-        | ConstKind::Error(_) => unreachable!(\"{:?}\", const_),\n+        ConstantKind::Val(val, ty) => (val, ty),\n     };\n \n-    codegen_const_value(fx, const_val, const_.ty())\n+    codegen_const_value(fx, const_val, ty)\n }\n \n pub(crate) fn codegen_const_value<'tcx>(\n@@ -496,6 +482,9 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                 .eval_for_mir(fx.tcx, ParamEnv::reveal_all())\n                 .try_to_value(fx.tcx),\n             ConstantKind::Val(val, _) => Some(val),\n+            ConstantKind::Unevaluated(uv, _) => {\n+                fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), uv, None).ok()\n+            }\n         },\n         // FIXME(rust-lang/rust#85105): Casts like `IMM8 as u32` result in the const being stored\n         // inside a temporary before being passed to the intrinsic requiring the const argument."}, {"sha": "4c6ab457c494557eb80cbea49cb1745a467b9d6a", "filename": "compiler/rustc_codegen_ssa/src/mir/constant.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -25,26 +25,26 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         constant: &mir::Constant<'tcx>,\n     ) -> Result<ConstValue<'tcx>, ErrorHandled> {\n         let ct = self.monomorphize(constant.literal);\n-        let ct = match ct {\n-            mir::ConstantKind::Ty(ct) => ct,\n+        let uv = match ct {\n+            mir::ConstantKind::Ty(ct) => match ct.kind() {\n+                ty::ConstKind::Unevaluated(uv) => uv.expand(),\n+                ty::ConstKind::Value(val) => {\n+                    return Ok(self.cx.tcx().valtree_to_const_val((ct.ty(), val)));\n+                }\n+                err => span_bug!(\n+                    constant.span,\n+                    \"encountered bad ConstKind after monomorphizing: {:?}\",\n+                    err\n+                ),\n+            },\n+            mir::ConstantKind::Unevaluated(uv, _) => uv,\n             mir::ConstantKind::Val(val, _) => return Ok(val),\n         };\n-        match ct.kind() {\n-            ty::ConstKind::Unevaluated(ct) => self\n-                .cx\n-                .tcx()\n-                .const_eval_resolve(ty::ParamEnv::reveal_all(), ct, None)\n-                .map_err(|err| {\n-                    self.cx.tcx().sess.span_err(constant.span, \"erroneous constant encountered\");\n-                    err\n-                }),\n-            ty::ConstKind::Value(val) => Ok(self.cx.tcx().valtree_to_const_val((ct.ty(), val))),\n-            err => span_bug!(\n-                constant.span,\n-                \"encountered bad ConstKind after monomorphizing: {:?}\",\n-                err\n-            ),\n-        }\n+\n+        self.cx.tcx().const_eval_resolve(ty::ParamEnv::reveal_all(), uv, None).map_err(|err| {\n+            self.cx.tcx().sess.span_err(constant.span, \"erroneous constant encountered\");\n+            err\n+        })\n     }\n \n     /// process constant containing SIMD shuffle indices"}, {"sha": "29c745a0886f81617cfe22048a5ea3b1abc19b6e", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -564,8 +564,16 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 throw_inval!(AlreadyReported(reported))\n             }\n             ty::ConstKind::Unevaluated(uv) => {\n+                // NOTE: We evaluate to a `ValTree` here as a check to ensure\n+                // we're working with valid constants, even though we never need it.\n                 let instance = self.resolve(uv.def, uv.substs)?;\n-                Ok(self.eval_to_allocation(GlobalId { instance, promoted: uv.promoted })?.into())\n+                let cid = GlobalId { instance, promoted: None };\n+                let _valtree = self\n+                    .tcx\n+                    .eval_to_valtree(self.param_env.and(cid))?\n+                    .unwrap_or_else(|| bug!(\"unable to create ValTree for {:?}\", uv));\n+\n+                Ok(self.eval_to_allocation(cid)?.into())\n             }\n             ty::ConstKind::Bound(..) | ty::ConstKind::Infer(..) => {\n                 span_bug!(self.cur_span(), \"const_to_op: Unexpected ConstKind {:?}\", c)\n@@ -586,6 +594,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match val {\n             mir::ConstantKind::Ty(ct) => self.const_to_op(*ct, layout),\n             mir::ConstantKind::Val(val, ty) => self.const_val_to_op(*val, *ty, layout),\n+            mir::ConstantKind::Unevaluated(uv, _) => {\n+                let instance = self.resolve(uv.def, uv.substs)?;\n+                Ok(self.eval_to_allocation(GlobalId { instance, promoted: uv.promoted })?.into())\n+            }\n         }\n     }\n "}, {"sha": "6c73ef5a8fa01f49aff322c8d32cb97e743b2435", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -346,31 +346,43 @@ where\n     };\n \n     // Check the qualifs of the value of `const` items.\n-    if let Some(ct) = constant.literal.const_for_ty() {\n-        if let ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) = ct.kind()\n-        {\n-            // Use qualifs of the type for the promoted. Promoteds in MIR body should be possible\n-            // only for `NeedsNonConstDrop` with precise drop checking. This is the only const\n-            // check performed after the promotion. Verify that with an assertion.\n-            assert!(promoted.is_none() || Q::ALLOW_PROMOTED);\n-            // Don't peek inside trait associated constants.\n-            if promoted.is_none() && cx.tcx.trait_of_item(def.did).is_none() {\n-                let qualifs = if let Some((did, param_did)) = def.as_const_arg() {\n-                    cx.tcx.at(constant.span).mir_const_qualif_const_arg((did, param_did))\n-                } else {\n-                    cx.tcx.at(constant.span).mir_const_qualif(def.did)\n-                };\n-\n-                if !Q::in_qualifs(&qualifs) {\n-                    return false;\n-                }\n+    // FIXME(valtrees): check whether const qualifs should behave the same\n+    // way for type and mir constants.\n+    let uneval = match constant.literal {\n+        ConstantKind::Ty(ct) if matches!(ct.kind(), ty::ConstKind::Unevaluated(_)) => {\n+            let ty::ConstKind::Unevaluated(uv) = ct.kind() else { unreachable!() };\n \n-                // Just in case the type is more specific than\n-                // the definition, e.g., impl associated const\n-                // with type parameters, take it into account.\n+            Some(uv.expand())\n+        }\n+        ConstantKind::Ty(_) => None,\n+        ConstantKind::Unevaluated(uv, _) => Some(uv),\n+        ConstantKind::Val(..) => None,\n+    };\n+\n+    if let Some(ty::Unevaluated { def, substs: _, promoted }) = uneval {\n+        // Use qualifs of the type for the promoted. Promoteds in MIR body should be possible\n+        // only for `NeedsNonConstDrop` with precise drop checking. This is the only const\n+        // check performed after the promotion. Verify that with an assertion.\n+        assert!(promoted.is_none() || Q::ALLOW_PROMOTED);\n+\n+        // Don't peek inside trait associated constants.\n+        if promoted.is_none() && cx.tcx.trait_of_item(def.did).is_none() {\n+            let qualifs = if let Some((did, param_did)) = def.as_const_arg() {\n+                cx.tcx.at(constant.span).mir_const_qualif_const_arg((did, param_did))\n+            } else {\n+                cx.tcx.at(constant.span).mir_const_qualif(def.did)\n+            };\n+\n+            if !Q::in_qualifs(&qualifs) {\n+                return false;\n             }\n+\n+            // Just in case the type is more specific than\n+            // the definition, e.g., impl associated const\n+            // with type parameters, take it into account.\n         }\n     }\n+\n     // Otherwise use the qualifs of the type.\n     Q::in_any_value_of_ty(cx, constant.literal.ty())\n }"}, {"sha": "f7a7cc88a5257c21e30e3ca7b2b798222a3cc31c", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -840,21 +840,15 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                 promoted.span = span;\n                 promoted.local_decls[RETURN_PLACE] = LocalDecl::new(ty, span);\n                 let substs = tcx.erase_regions(InternalSubsts::identity_for_item(tcx, def.did));\n-                let _const = tcx.mk_const(ty::ConstS {\n-                    ty,\n-                    kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n-                        def,\n-                        substs,\n-                        promoted: Some(promoted_id),\n-                    }),\n-                });\n+                let uneval = ty::Unevaluated { def, substs, promoted: Some(promoted_id) };\n \n                 Operand::Constant(Box::new(Constant {\n                     span,\n                     user_ty: None,\n-                    literal: ConstantKind::from_const(_const, tcx),\n+                    literal: ConstantKind::Unevaluated(uneval, ty),\n                 }))\n             };\n+\n             let blocks = self.source.basic_blocks.as_mut();\n             let local_decls = &mut self.source.local_decls;\n             let loc = candidate.location;"}, {"sha": "c406df9e4111606eba1f8d84617b5ee0442bedd5", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -743,7 +743,8 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                 }\n             }\n             ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n-                assert_eq!(promoted, None);\n+                assert_eq!(promoted, ());\n+\n                 let substs = self.relate_with_variance(\n                     ty::Variance::Invariant,\n                     ty::VarianceDiagInfo::default(),\n@@ -964,13 +965,15 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                 }\n             }\n             ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n-                assert_eq!(promoted, None);\n+                assert_eq!(promoted, ());\n+\n                 let substs = self.relate_with_variance(\n                     ty::Variance::Invariant,\n                     ty::VarianceDiagInfo::default(),\n                     substs,\n                     substs,\n                 )?;\n+\n                 Ok(self.tcx().mk_const(ty::ConstS {\n                     ty: c.ty(),\n                     kind: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),"}, {"sha": "eb20c089dc7125407325f726e95bedd396a77f43", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -1673,7 +1673,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn try_const_eval_resolve(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n-        unevaluated: ty::Unevaluated<'tcx>,\n+        unevaluated: ty::Unevaluated<'tcx, ()>,\n         ty: Ty<'tcx>,\n         span: Option<Span>,\n     ) -> Result<ty::Const<'tcx>, ErrorHandled> {\n@@ -1708,7 +1708,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn const_eval_resolve(\n         &self,\n         mut param_env: ty::ParamEnv<'tcx>,\n-        unevaluated: ty::Unevaluated<'tcx>,\n+        unevaluated: ty::Unevaluated<'tcx, ()>,\n         span: Option<Span>,\n     ) -> EvalToValTreeResult<'tcx> {\n         let mut substs = self.resolve_vars_if_possible(unevaluated.substs);\n@@ -1717,7 +1717,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         // Postpone the evaluation of constants whose substs depend on inference\n         // variables\n         if substs.has_infer_types_or_consts() {\n-            let ac = AbstractConst::new(self.tcx, unevaluated.shrink());\n+            let ac = AbstractConst::new(self.tcx, unevaluated);\n             match ac {\n                 Ok(None) => {\n                     substs = InternalSubsts::identity_for_item(self.tcx, unevaluated.def.did);\n@@ -1739,11 +1739,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         debug!(?param_env_erased);\n         debug!(?substs_erased);\n \n-        let unevaluated = ty::Unevaluated {\n-            def: unevaluated.def,\n-            substs: substs_erased,\n-            promoted: unevaluated.promoted,\n-        };\n+        let unevaluated =\n+            ty::Unevaluated { def: unevaluated.def, substs: substs_erased, promoted: () };\n \n         // The return value is the evaluated value which doesn't contain any reference to inference\n         // variables, thus we don't need to substitute back the original values."}, {"sha": "4207988d700d9a6c66d3a8a6c26bb32141ccc238", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -63,7 +63,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn const_eval_resolve_for_typeck(\n         self,\n         param_env: ty::ParamEnv<'tcx>,\n-        ct: ty::Unevaluated<'tcx>,\n+        ct: ty::Unevaluated<'tcx, ()>,\n         span: Option<Span>,\n     ) -> EvalToValTreeResult<'tcx> {\n         // Cannot resolve `Unevaluated` constants that contain inference\n@@ -78,7 +78,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         match ty::Instance::resolve_opt_const_arg(self, param_env, ct.def, ct.substs) {\n             Ok(Some(instance)) => {\n-                let cid = GlobalId { instance, promoted: ct.promoted };\n+                let cid = GlobalId { instance, promoted: None };\n                 self.const_eval_global_id_for_typeck(param_env, cid, span)\n             }\n             Ok(None) => Err(ErrorHandled::TooGeneric),"}, {"sha": "3d7a6230e4d237b5e72740896953d09ad0a6cb6a", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 60, "deletions": 24, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -3,7 +3,7 @@\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/mir/index.html\n \n use crate::mir::interpret::{\n-    AllocRange, ConstAllocation, ConstValue, GlobalAlloc, LitToConstInput, Scalar,\n+    AllocRange, ConstAllocation, ConstValue, ErrorHandled, GlobalAlloc, LitToConstInput, Scalar,\n };\n use crate::mir::visit::MirVisitable;\n use crate::ty::codec::{TyDecoder, TyEncoder};\n@@ -2047,6 +2047,10 @@ pub struct Constant<'tcx> {\n pub enum ConstantKind<'tcx> {\n     /// This constant came from the type system\n     Ty(ty::Const<'tcx>),\n+\n+    /// An unevaluated mir constant which is not part of the type system.\n+    Unevaluated(ty::Unevaluated<'tcx, Option<Promoted>>, Ty<'tcx>),\n+\n     /// This constant cannot go back into the type system, as it represents\n     /// something the type system cannot handle (e.g. pointers).\n     Val(interpret::ConstValue<'tcx>, Ty<'tcx>),\n@@ -2072,20 +2076,11 @@ impl<'tcx> Constant<'tcx> {\n }\n \n impl<'tcx> ConstantKind<'tcx> {\n-    /// Returns `None` if the constant is not trivially safe for use in the type system.\n-    #[inline]\n-    pub fn const_for_ty(&self) -> Option<ty::Const<'tcx>> {\n-        match self {\n-            ConstantKind::Ty(c) => Some(*c),\n-            ConstantKind::Val(..) => None,\n-        }\n-    }\n-\n     #[inline(always)]\n     pub fn ty(&self) -> Ty<'tcx> {\n         match self {\n             ConstantKind::Ty(c) => c.ty(),\n-            ConstantKind::Val(_, ty) => *ty,\n+            ConstantKind::Val(_, ty) | ConstantKind::Unevaluated(_, ty) => *ty,\n         }\n     }\n \n@@ -2097,6 +2092,7 @@ impl<'tcx> ConstantKind<'tcx> {\n                 _ => None,\n             },\n             ConstantKind::Val(val, _) => Some(val),\n+            ConstantKind::Unevaluated(..) => None,\n         }\n     }\n \n@@ -2111,6 +2107,7 @@ impl<'tcx> ConstantKind<'tcx> {\n                 _ => None,\n             },\n             ConstantKind::Val(val, _) => val.try_to_scalar(),\n+            ConstantKind::Unevaluated(..) => None,\n         }\n     }\n \n@@ -2143,6 +2140,14 @@ impl<'tcx> ConstantKind<'tcx> {\n                 }\n             }\n             Self::Val(_, _) => self,\n+            Self::Unevaluated(uneval, ty) => {\n+                // FIXME: We might want to have a `try_eval`-like function on `Unevaluated`\n+                match tcx.const_eval_resolve(param_env, uneval, None) {\n+                    Ok(val) => Self::Val(val, ty),\n+                    Err(ErrorHandled::TooGeneric | ErrorHandled::Linted) => self,\n+                    Err(_) => Self::Ty(tcx.const_error(ty)),\n+                }\n+            }\n         }\n     }\n \n@@ -2168,6 +2173,18 @@ impl<'tcx> ConstantKind<'tcx> {\n                     tcx.layout_of(param_env.with_reveal_all_normalized(tcx).and(ty)).ok()?.size;\n                 val.try_to_bits(size)\n             }\n+            Self::Unevaluated(uneval, ty) => {\n+                match tcx.const_eval_resolve(param_env, *uneval, None) {\n+                    Ok(val) => {\n+                        let size = tcx\n+                            .layout_of(param_env.with_reveal_all_normalized(tcx).and(*ty))\n+                            .ok()?\n+                            .size;\n+                        val.try_to_bits(size)\n+                    }\n+                    Err(_) => None,\n+                }\n+            }\n         }\n     }\n \n@@ -2176,6 +2193,12 @@ impl<'tcx> ConstantKind<'tcx> {\n         match self {\n             Self::Ty(ct) => ct.try_eval_bool(tcx, param_env),\n             Self::Val(val, _) => val.try_to_bool(),\n+            Self::Unevaluated(uneval, _) => {\n+                match tcx.const_eval_resolve(param_env, *uneval, None) {\n+                    Ok(val) => val.try_to_bool(),\n+                    Err(_) => None,\n+                }\n+            }\n         }\n     }\n \n@@ -2184,6 +2207,12 @@ impl<'tcx> ConstantKind<'tcx> {\n         match self {\n             Self::Ty(ct) => ct.try_eval_usize(tcx, param_env),\n             Self::Val(val, _) => val.try_to_machine_usize(tcx),\n+            Self::Unevaluated(uneval, _) => {\n+                match tcx.const_eval_resolve(param_env, *uneval, None) {\n+                    Ok(val) => val.try_to_machine_usize(tcx),\n+                    Err(_) => None,\n+                }\n+            }\n         }\n     }\n \n@@ -2279,15 +2308,16 @@ impl<'tcx> ConstantKind<'tcx> {\n         let substs =\n             ty::InlineConstSubsts::new(tcx, ty::InlineConstSubstsParts { parent_substs, ty })\n                 .substs;\n-        debug_assert!(!substs.has_free_regions());\n-        Self::Ty(tcx.mk_const(ty::ConstS {\n-            kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n-                def: ty::WithOptConstParam::unknown(def_id).to_global(),\n-                substs,\n-                promoted: None,\n-            }),\n-            ty,\n-        }))\n+\n+        let uneval = ty::Unevaluated {\n+            def: ty::WithOptConstParam::unknown(def_id).to_global(),\n+            substs,\n+            promoted: None,\n+        };\n+\n+        debug_assert!(!uneval.has_free_regions());\n+\n+        Self::Unevaluated(uneval, ty)\n     }\n \n     #[instrument(skip(tcx), level = \"debug\", ret)]\n@@ -2380,14 +2410,14 @@ impl<'tcx> ConstantKind<'tcx> {\n                 debug!(\"error encountered during evaluation\");\n                 // Error was handled in `const_eval_resolve`. Here we just create a\n                 // new unevaluated const and error hard later in codegen\n-                Self::Ty(tcx.mk_const(ty::ConstS {\n-                    kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                Self::Unevaluated(\n+                    ty::Unevaluated {\n                         def: def.to_global(),\n                         substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n                         promoted: None,\n-                    }),\n+                    },\n                     ty,\n-                }))\n+                )\n             }\n         }\n     }\n@@ -2398,6 +2428,7 @@ impl<'tcx> ConstantKind<'tcx> {\n                 let const_val = tcx.valtree_to_const_val((c.ty(), valtree));\n                 Self::Val(const_val, c.ty())\n             }\n+            ty::ConstKind::Unevaluated(uv) => Self::Unevaluated(uv.expand(), c.ty()),\n             _ => Self::Ty(c),\n         }\n     }\n@@ -2596,6 +2627,11 @@ impl<'tcx> Display for ConstantKind<'tcx> {\n         match *self {\n             ConstantKind::Ty(c) => pretty_print_const(c, fmt, true),\n             ConstantKind::Val(val, ty) => pretty_print_const_value(val, ty, fmt, true),\n+            // FIXME(valtrees): Correctly print mir constants.\n+            ConstantKind::Unevaluated(..) => {\n+                fmt.write_str(\"_\")?;\n+                Ok(())\n+            }\n         }\n     }\n }"}, {"sha": "0b42137d4e3cd5cfe381a6673db7c0c16ff0de66", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -464,19 +464,29 @@ impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n             let val = match literal {\n                 ConstantKind::Ty(ct) => match ct.kind() {\n                     ty::ConstKind::Param(p) => format!(\"Param({})\", p),\n-                    ty::ConstKind::Unevaluated(uv) => format!(\n-                        \"Unevaluated({}, {:?}, {:?})\",\n-                        self.tcx.def_path_str(uv.def.did),\n-                        uv.substs,\n-                        uv.promoted,\n-                    ),\n+                    ty::ConstKind::Unevaluated(uv) => {\n+                        format!(\n+                            \"Unevaluated({}, {:?}, {:?})\",\n+                            self.tcx.def_path_str(uv.def.did),\n+                            uv.substs,\n+                            uv.promoted,\n+                        )\n+                    }\n                     ty::ConstKind::Value(val) => format!(\"Value({})\", fmt_valtree(&val)),\n                     ty::ConstKind::Error(_) => \"Error\".to_string(),\n                     // These variants shouldn't exist in the MIR.\n                     ty::ConstKind::Placeholder(_)\n                     | ty::ConstKind::Infer(_)\n                     | ty::ConstKind::Bound(..) => bug!(\"unexpected MIR constant: {:?}\", literal),\n                 },\n+                ConstantKind::Unevaluated(uv, _) => {\n+                    format!(\n+                        \"Unevaluated({}, {:?}, {:?})\",\n+                        self.tcx.def_path_str(uv.def.did),\n+                        uv.substs,\n+                        uv.promoted,\n+                    )\n+                }\n                 // To keep the diffs small, we render this like we render `ty::Const::Value`.\n                 //\n                 // This changes once `ty::Const::Value` is represented using valtrees.\n@@ -696,9 +706,9 @@ pub fn write_allocations<'tcx>(\n     struct CollectAllocIds(BTreeSet<AllocId>);\n \n     impl<'tcx> Visitor<'tcx> for CollectAllocIds {\n-        fn visit_constant(&mut self, c: &Constant<'tcx>, loc: Location) {\n+        fn visit_constant(&mut self, c: &Constant<'tcx>, _: Location) {\n             match c.literal {\n-                ConstantKind::Ty(c) => self.visit_const(c, loc),\n+                ConstantKind::Ty(_) | ConstantKind::Unevaluated(..) => {}\n                 ConstantKind::Val(val, _) => {\n                     self.0.extend(alloc_ids_from_const_val(val));\n                 }"}, {"sha": "9d098c8083ece5e2a98bed14e29310bfe64bfe27", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -65,6 +65,9 @@ impl<'tcx> TypeSuperFoldable<'tcx> for ConstantKind<'tcx> {\n         match self {\n             ConstantKind::Ty(c) => Ok(ConstantKind::Ty(c.try_fold_with(folder)?)),\n             ConstantKind::Val(v, t) => Ok(ConstantKind::Val(v, t.try_fold_with(folder)?)),\n+            ConstantKind::Unevaluated(uv, t) => {\n+                Ok(ConstantKind::Unevaluated(uv.try_fold_with(folder)?, t.try_fold_with(folder)?))\n+            }\n         }\n     }\n }"}, {"sha": "be19bb486d4b5878bd87b85c646a2b0b0fd7c3a6", "filename": "compiler/rustc_middle/src/mir/type_visitable.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -19,6 +19,10 @@ impl<'tcx> TypeSuperVisitable<'tcx> for ConstantKind<'tcx> {\n         match *self {\n             ConstantKind::Ty(c) => c.visit_with(visitor),\n             ConstantKind::Val(_, t) => t.visit_with(visitor),\n+            ConstantKind::Unevaluated(uv, t) => {\n+                uv.visit_with(visitor)?;\n+                t.visit_with(visitor)\n+            }\n         }\n     }\n }"}, {"sha": "d9b24566bf14a2ca64880f168ad2d823d94ae72b", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -237,14 +237,6 @@ macro_rules! make_mir_visitor {\n                 self.super_region(region);\n             }\n \n-            fn visit_const(\n-                &mut self,\n-                constant: $(& $mutability)? ty::Const<'tcx>,\n-                _: Location,\n-            ) {\n-                self.super_const(constant);\n-            }\n-\n             fn visit_substs(\n                 &mut self,\n                 substs: & $($mutability)? SubstsRef<'tcx>,\n@@ -877,8 +869,9 @@ macro_rules! make_mir_visitor {\n                 self.visit_span($(& $mutability)? *span);\n                 drop(user_ty); // no visit method for this\n                 match literal {\n-                    ConstantKind::Ty(ct) => self.visit_const($(& $mutability)? *ct, location),\n+                    ConstantKind::Ty(_) => {}\n                     ConstantKind::Val(_, ty) => self.visit_ty($(& $mutability)? *ty, TyContext::Location(location)),\n+                    ConstantKind::Unevaluated(_, ty) => self.visit_ty($(& $mutability)? *ty, TyContext::Location(location)),\n                 }\n             }\n \n@@ -916,9 +909,6 @@ macro_rules! make_mir_visitor {\n             fn super_region(&mut self, _region: $(& $mutability)? ty::Region<'tcx>) {\n             }\n \n-            fn super_const(&mut self, _const: $(& $mutability)? ty::Const<'tcx>) {\n-            }\n-\n             fn super_substs(&mut self, _substs: & $($mutability)? SubstsRef<'tcx>) {\n             }\n "}, {"sha": "86b4150505fd9bdad8d4d3f374a0e281393834c9", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -853,9 +853,9 @@ mod size_asserts {\n     static_assert_size!(Expr<'_>, 64);\n     static_assert_size!(ExprKind<'_>, 40);\n     #[cfg(not(bootstrap))]\n-    static_assert_size!(Pat<'_>, 64);\n+    static_assert_size!(Pat<'_>, 72);\n     #[cfg(not(bootstrap))]\n-    static_assert_size!(PatKind<'_>, 48);\n+    static_assert_size!(PatKind<'_>, 56);\n     #[cfg(not(bootstrap))]\n     static_assert_size!(Stmt<'_>, 48);\n     #[cfg(not(bootstrap))]"}, {"sha": "8f79b4705ad60442499b6940bd497d63650d69fb", "filename": "compiler/rustc_middle/src/ty/abstract_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -42,7 +42,7 @@ impl<'tcx> AbstractConst<'tcx> {\n         ct: ty::Const<'tcx>,\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorGuaranteed> {\n         match ct.kind() {\n-            ty::ConstKind::Unevaluated(uv) => AbstractConst::new(tcx, uv.shrink()),\n+            ty::ConstKind::Unevaluated(uv) => AbstractConst::new(tcx, uv),\n             ty::ConstKind::Error(DelaySpanBugEmitted { reported, .. }) => Err(reported),\n             _ => Ok(None),\n         }"}, {"sha": "339ff4d35930d91817b73be26f3b3517a534963f", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -41,7 +41,7 @@ pub struct ConstS<'tcx> {\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(ConstS<'_>, 48);\n+static_assert_size!(ConstS<'_>, 40);\n \n impl<'tcx> Const<'tcx> {\n     #[inline]\n@@ -84,7 +84,7 @@ impl<'tcx> Const<'tcx> {\n                 kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                     def: def.to_global(),\n                     substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n-                    promoted: None,\n+                    promoted: (),\n                 }),\n                 ty,\n             }),\n@@ -181,7 +181,7 @@ impl<'tcx> Const<'tcx> {\n                     kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                         def: ty::WithOptConstParam::unknown(def_id).to_global(),\n                         substs,\n-                        promoted: None,\n+                        promoted: (),\n                     }),\n                     ty,\n                 })"}, {"sha": "4550152804ea8d0226b49b5d144881b412a2b13a", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -11,6 +11,7 @@ use rustc_macros::HashStable;\n use rustc_target::abi::Size;\n \n use super::ScalarInt;\n+\n /// An unevaluated, potentially generic, constant.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Lift)]\n #[derive(Hash, HashStable)]\n@@ -66,7 +67,7 @@ pub enum ConstKind<'tcx> {\n \n     /// Used in the HIR by using `Unevaluated` everywhere and later normalizing to one of the other\n     /// variants when the code is monomorphic enough for that.\n-    Unevaluated(Unevaluated<'tcx>),\n+    Unevaluated(Unevaluated<'tcx, ()>),\n \n     /// Used to hold computed value.\n     Value(ty::ValTree<'tcx>),\n@@ -77,7 +78,7 @@ pub enum ConstKind<'tcx> {\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(ConstKind<'_>, 40);\n+static_assert_size!(ConstKind<'_>, 32);\n \n impl<'tcx> ConstKind<'tcx> {\n     #[inline]\n@@ -184,6 +185,8 @@ impl<'tcx> ConstKind<'tcx> {\n         if let ConstKind::Unevaluated(unevaluated) = self {\n             use crate::mir::interpret::ErrorHandled;\n \n+            assert_eq!(unevaluated.promoted, ());\n+\n             // HACK(eddyb) this erases lifetimes even though `const_eval_resolve`\n             // also does later, but we want to do it before checking for\n             // inference variables.\n@@ -204,7 +207,7 @@ impl<'tcx> ConstKind<'tcx> {\n                 tcx.param_env(unevaluated.def.did).and(ty::Unevaluated {\n                     def: unevaluated.def,\n                     substs: InternalSubsts::identity_for_item(tcx, unevaluated.def.did),\n-                    promoted: unevaluated.promoted,\n+                    promoted: (),\n                 })\n             } else {\n                 param_env_and\n@@ -228,7 +231,7 @@ impl<'tcx> ConstKind<'tcx> {\n                     }\n                 }\n                 EvalMode::Mir => {\n-                    match tcx.const_eval_resolve(param_env, unevaluated, None) {\n+                    match tcx.const_eval_resolve(param_env, unevaluated.expand(), None) {\n                         // NOTE(eddyb) `val` contains no lifetimes/types/consts,\n                         // and we use the original type, so nothing from `substs`\n                         // (which may be identity substs, see above),"}, {"sha": "ed0eefd98ad87b963142d3210a9e69044d7f1e02", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -302,6 +302,17 @@ impl<'tcx> TyCtxt<'tcx> {\n     {\n         value.fold_with(&mut RegionFolder::new(self, &mut f))\n     }\n+\n+    pub fn super_fold_regions<T>(\n+        self,\n+        value: T,\n+        mut f: impl FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,\n+    ) -> T\n+    where\n+        T: TypeSuperFoldable<'tcx>,\n+    {\n+        value.super_fold_with(&mut RegionFolder::new(self, &mut f))\n+    }\n }\n \n /// Folds over the substructure of a type, visiting its component"}, {"sha": "97bddb93eb4d3ff3711fcf5dace04380981b2e4e", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -1201,15 +1201,9 @@ pub trait PrettyPrinter<'tcx>:\n         }\n \n         match ct.kind() {\n-            ty::ConstKind::Unevaluated(ty::Unevaluated {\n-                def,\n-                substs,\n-                promoted: Some(promoted),\n-            }) => {\n-                p!(print_value_path(def.did, substs));\n-                p!(write(\"::{:?}\", promoted));\n-            }\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted: None }) => {\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n+                assert_eq!(promoted, ());\n+\n                 match self.tcx().def_kind(def.did) {\n                     DefKind::Static(..) | DefKind::Const | DefKind::AssocConst => {\n                         p!(print_value_path(def.did, substs))"}, {"sha": "af31f54981f8df71c74b2de474ca00167c18577c", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -615,7 +615,7 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n         (ty::ConstKind::Unevaluated(au), ty::ConstKind::Unevaluated(bu))\n             if tcx.features().generic_const_exprs =>\n         {\n-            tcx.try_unify_abstract_consts(relation.param_env().and((au.shrink(), bu.shrink())))\n+            tcx.try_unify_abstract_consts(relation.param_env().and((au, bu)))\n         }\n \n         // While this is slightly incorrect, it shouldn't matter for `min_const_generics`\n@@ -624,6 +624,8 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n         (ty::ConstKind::Unevaluated(au), ty::ConstKind::Unevaluated(bu))\n             if au.def == bu.def && au.promoted == bu.promoted =>\n         {\n+            assert_eq!(au.promoted, ());\n+\n             let substs = relation.relate_with_variance(\n                 ty::Variance::Invariant,\n                 ty::VarianceDiagInfo::default(),\n@@ -634,7 +636,7 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n                 kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                     def: au.def,\n                     substs,\n-                    promoted: au.promoted,\n+                    promoted: (),\n                 }),\n                 ty: a.ty(),\n             }));"}, {"sha": "c9bec130cc8fe99de9f7b19e8acadad9205ceacb", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -2,26 +2,18 @@\n \n use crate::build::{parse_float_into_constval, Builder};\n use rustc_ast as ast;\n-use rustc_hir::def_id::DefId;\n use rustc_middle::mir::interpret::{\n     Allocation, ConstValue, LitToConstError, LitToConstInput, Scalar,\n };\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n-use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, CanonicalUserTypeAnnotation, Ty, TyCtxt};\n+use rustc_middle::ty::{self, CanonicalUserTypeAnnotation, TyCtxt};\n use rustc_target::abi::Size;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Compile `expr`, yielding a compile-time constant. Assumes that\n     /// `expr` is a valid compile-time constant!\n     pub(crate) fn as_constant(&mut self, expr: &Expr<'tcx>) -> Constant<'tcx> {\n-        let create_uneval_from_def_id =\n-            |tcx: TyCtxt<'tcx>, def_id: DefId, ty: Ty<'tcx>, substs: SubstsRef<'tcx>| {\n-                let uneval = ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs);\n-                tcx.mk_const(ty::ConstS { kind: ty::ConstKind::Unevaluated(uneval), ty })\n-            };\n-\n         let this = self;\n         let tcx = this.tcx;\n         let Expr { ty, temp_lifetime: _, span, ref kind } = *expr;\n@@ -73,7 +65,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         inferred_ty: ty,\n                     })\n                 });\n-                let literal = ConstantKind::Ty(create_uneval_from_def_id(tcx, def_id, ty, substs));\n+\n+                let uneval = ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs);\n+                let literal = ConstantKind::Unevaluated(uneval, ty);\n \n                 Constant { user_ty, span, literal }\n             }\n@@ -85,7 +79,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Constant { user_ty: None, span, literal }\n             }\n             ExprKind::ConstBlock { did: def_id, substs } => {\n-                let literal = ConstantKind::Ty(create_uneval_from_def_id(tcx, def_id, ty, substs));\n+                let uneval = ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs);\n+                let literal = ConstantKind::Unevaluated(uneval, ty);\n \n                 Constant { user_ty: None, span, literal }\n             }"}, {"sha": "e712741b7c9abdb552920045a6cd64a3ace96129", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -565,23 +565,19 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         let value = value.eval(self.tcx, self.param_env);\n \n         match value {\n-            mir::ConstantKind::Ty(c) => {\n-                match c.kind() {\n-                    ConstKind::Param(_) => {\n-                        self.errors.push(PatternError::ConstParamInPattern(span));\n-                        return PatKind::Wild;\n-                    }\n-                    ConstKind::Unevaluated(_) => {\n-                        // If we land here it means the const can't be evaluated because it's `TooGeneric`.\n-                        self.tcx\n-                            .sess\n-                            .span_err(span, \"constant pattern depends on a generic parameter\");\n-                        return PatKind::Wild;\n-                    }\n-                    _ => bug!(\"Expected either ConstKind::Param or ConstKind::Unevaluated\"),\n+            mir::ConstantKind::Ty(c) => match c.kind() {\n+                ConstKind::Param(_) => {\n+                    self.errors.push(PatternError::ConstParamInPattern(span));\n+                    return PatKind::Wild;\n                 }\n-            }\n+                _ => bug!(\"Expected ConstKind::Param\"),\n+            },\n             mir::ConstantKind::Val(_, _) => self.const_to_pat(value, id, span, false).kind,\n+            mir::ConstantKind::Unevaluated(..) => {\n+                // If we land here it means the const can't be evaluated because it's `TooGeneric`.\n+                self.tcx.sess.span_err(span, \"constant pattern depends on a generic parameter\");\n+                return PatKind::Wild;\n+            }\n         }\n     }\n "}, {"sha": "37e78f4ac07d019bdc085ac14bda3cc68b2f8db1", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -22,9 +22,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::layout::{LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n-use rustc_middle::ty::{\n-    self, ConstInt, ConstKind, Instance, ParamEnv, ScalarInt, Ty, TyCtxt, TypeVisitable,\n-};\n+use rustc_middle::ty::{self, ConstInt, Instance, ParamEnv, ScalarInt, Ty, TyCtxt, TypeVisitable};\n use rustc_session::lint;\n use rustc_span::Span;\n use rustc_target::abi::{HasDataLayout, Size, TargetDataLayout};\n@@ -301,18 +299,15 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 let err = ConstEvalErr::new(&self.ecx, error, Some(c.span));\n                 if let Some(lint_root) = self.lint_root(source_info) {\n                     let lint_only = match c.literal {\n-                        ConstantKind::Ty(ct) => match ct.kind() {\n+                        ConstantKind::Ty(ct) => ct.needs_subst(),\n+                        ConstantKind::Unevaluated(\n+                            ty::Unevaluated { def: _, substs: _, promoted: Some(_) },\n+                            _,\n+                        ) => {\n                             // Promoteds must lint and not error as the user didn't ask for them\n-                            ConstKind::Unevaluated(ty::Unevaluated {\n-                                def: _,\n-                                substs: _,\n-                                promoted: Some(_),\n-                            }) => true,\n-                            // Out of backwards compatibility we cannot report hard errors in unused\n-                            // generic functions using associated constants of the generic parameters.\n-                            _ => c.literal.needs_subst(),\n-                        },\n-                        ConstantKind::Val(_, ty) => ty.needs_subst(),\n+                            true\n+                        }\n+                        ConstantKind::Unevaluated(..) | ConstantKind::Val(..) => c.needs_subst(),\n                     };\n                     if lint_only {\n                         // Out of backwards compatibility we cannot report hard errors in unused"}, {"sha": "d00a384cb44ec2a6c57a1adef2a85edea65639da", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs}\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, ConstKind, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_session::config::OptLevel;\n use rustc_span::def_id::DefId;\n use rustc_span::{hygiene::ExpnKind, ExpnData, LocalExpnId, Span};\n@@ -604,11 +604,11 @@ impl<'tcx> Inliner<'tcx> {\n                 // `required_consts`, here we may not only have `ConstKind::Unevaluated`\n                 // because we are calling `subst_and_normalize_erasing_regions`.\n                 caller_body.required_consts.extend(\n-                    callee_body.required_consts.iter().copied().filter(|&ct| {\n-                        match ct.literal.const_for_ty() {\n-                            Some(ct) => matches!(ct.kind(), ConstKind::Unevaluated(_)),\n-                            None => true,\n+                    callee_body.required_consts.iter().copied().filter(|&ct| match ct.literal {\n+                        ConstantKind::Ty(_) => {\n+                            bug!(\"should never encounter ty::Unevaluated in `required_consts`\")\n                         }\n+                        ConstantKind::Val(..) | ConstantKind::Unevaluated(..) => true,\n                     }),\n                 );\n             }"}, {"sha": "cc75947d9dda73b2f38b6e47cc03a5bf47311e2b", "filename": "compiler/rustc_mir_transform/src/required_consts.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -1,5 +1,5 @@\n use rustc_middle::mir::visit::Visitor;\n-use rustc_middle::mir::{Constant, Location};\n+use rustc_middle::mir::{Constant, ConstantKind, Location};\n use rustc_middle::ty::ConstKind;\n \n pub struct RequiredConstsVisitor<'a, 'tcx> {\n@@ -15,8 +15,13 @@ impl<'a, 'tcx> RequiredConstsVisitor<'a, 'tcx> {\n impl<'tcx> Visitor<'tcx> for RequiredConstsVisitor<'_, 'tcx> {\n     fn visit_constant(&mut self, constant: &Constant<'tcx>, _: Location) {\n         let literal = constant.literal;\n-        if let Some(ct) = literal.const_for_ty() && let ConstKind::Unevaluated(_) = ct.kind() {\n-            self.required_consts.push(*constant);\n+        match literal {\n+            ConstantKind::Ty(c) => match c.kind() {\n+                ConstKind::Param(_) => {}\n+                _ => bug!(\"only ConstKind::Param should be encountered here, got {:#?}\", c),\n+            },\n+            ConstantKind::Unevaluated(..) => self.required_consts.push(*constant),\n+            ConstantKind::Val(..) => {}\n         }\n     }\n }"}, {"sha": "f1a25a60d529234cb662fb54caebcdbaad905a48", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 11, "deletions": 33, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -770,7 +770,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 ty::ConstKind::Unevaluated(ct) => {\n                     debug!(?ct);\n                     let param_env = ty::ParamEnv::reveal_all();\n-                    match self.tcx.const_eval_resolve(param_env, ct, None) {\n+                    match self.tcx.const_eval_resolve(param_env, ct.expand(), None) {\n                         // The `monomorphize` call should have evaluated that constant already.\n                         Ok(val) => val,\n                         Err(ErrorHandled::Reported(_) | ErrorHandled::Linted) => return,\n@@ -783,44 +783,22 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 }\n                 _ => return,\n             },\n-        };\n-        collect_const_value(self.tcx, val, self.output);\n-        self.visit_ty(literal.ty(), TyContext::Location(location));\n-    }\n-\n-    #[instrument(skip(self), level = \"debug\")]\n-    fn visit_const(&mut self, constant: ty::Const<'tcx>, location: Location) {\n-        debug!(\"visiting const {:?} @ {:?}\", constant, location);\n-\n-        let substituted_constant = self.monomorphize(constant);\n-        let param_env = ty::ParamEnv::reveal_all();\n-\n-        match substituted_constant.kind() {\n-            ty::ConstKind::Value(val) => {\n-                let const_val = self.tcx.valtree_to_const_val((constant.ty(), val));\n-                collect_const_value(self.tcx, const_val, self.output)\n-            }\n-            ty::ConstKind::Unevaluated(unevaluated) => {\n-                match self.tcx.const_eval_resolve(param_env, unevaluated, None) {\n+            mir::ConstantKind::Unevaluated(uv, _) => {\n+                let param_env = ty::ParamEnv::reveal_all();\n+                match self.tcx.const_eval_resolve(param_env, uv, None) {\n                     // The `monomorphize` call should have evaluated that constant already.\n-                    Ok(val) => span_bug!(\n-                        self.body.source_info(location).span,\n-                        \"collection encountered the unevaluated constant {} which evaluated to {:?}\",\n-                        substituted_constant,\n-                        val\n-                    ),\n-                    Err(ErrorHandled::Reported(_) | ErrorHandled::Linted) => {}\n+                    Ok(val) => val,\n+                    Err(ErrorHandled::Reported(_) | ErrorHandled::Linted) => return,\n                     Err(ErrorHandled::TooGeneric) => span_bug!(\n                         self.body.source_info(location).span,\n-                        \"collection encountered polymorphic constant: {}\",\n-                        substituted_constant\n+                        \"collection encountered polymorphic constant: {:?}\",\n+                        literal\n                     ),\n                 }\n             }\n-            _ => {}\n-        }\n-\n-        self.super_const(constant);\n+        };\n+        collect_const_value(self.tcx, val, self.output);\n+        MirVisitor::visit_ty(self, literal.ty(), TyContext::Location(location));\n     }\n \n     fn visit_terminator(&mut self, terminator: &mir::Terminator<'tcx>, location: Location) {"}, {"sha": "71cab023215eca2a18895300a723c48efe1595a2", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::{def::DefKind, def_id::DefId, ConstContext};\n use rustc_index::bit_set::FiniteBitSet;\n use rustc_middle::mir::{\n     visit::{TyContext, Visitor},\n-    Local, LocalDecl, Location,\n+    Constant, ConstantKind, Local, LocalDecl, Location,\n };\n use rustc_middle::ty::{\n     self,\n@@ -270,8 +270,15 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n         self.super_local_decl(local, local_decl);\n     }\n \n-    fn visit_const(&mut self, c: Const<'tcx>, _: Location) {\n-        c.visit_with(self);\n+    fn visit_constant(&mut self, ct: &Constant<'tcx>, location: Location) {\n+        match ct.literal {\n+            ConstantKind::Ty(c) => {\n+                c.visit_with(self);\n+            }\n+            ConstantKind::Val(_, ty) | ConstantKind::Unevaluated(_, ty) => {\n+                Visitor::visit_ty(self, ty, TyContext::Location(location))\n+            }\n+        }\n     }\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>, _: TyContext) {\n@@ -292,7 +299,26 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n                 self.unused_parameters.clear(param.index);\n                 ControlFlow::CONTINUE\n             }\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted: Some(p)})\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n+                if matches!(self.tcx.def_kind(def.did), DefKind::AnonConst) =>\n+            {\n+                assert_eq!(promoted, ());\n+\n+                self.visit_child_body(def.did, substs);\n+                ControlFlow::CONTINUE\n+            }\n+            _ => c.super_visit_with(self),\n+        }\n+    }\n+\n+    fn visit_mir_const(&mut self, constant: ConstantKind<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        if !constant.has_param_types_or_consts() {\n+            return ControlFlow::CONTINUE;\n+        }\n+\n+        match constant {\n+            ConstantKind::Ty(ct) => ct.visit_with(self),\n+            ConstantKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted: Some(p) }, _)\n                 // Avoid considering `T` unused when constants are of the form:\n                 //   `<Self as Foo<T>>::foo::promoted[p]`\n                 if self.def_id == def.did && !self.tcx.generics_of(def.did).has_self =>\n@@ -303,13 +329,9 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n                 self.visit_body(&promoted[p]);\n                 ControlFlow::CONTINUE\n             }\n-            ty::ConstKind::Unevaluated(uv)\n-                if matches!(self.tcx.def_kind(uv.def.did), DefKind::AnonConst | DefKind::InlineConst) =>\n-            {\n-                self.visit_child_body(uv.def.did, uv.substs);\n-                ControlFlow::CONTINUE\n+            ConstantKind::Val(..) | ConstantKind::Unevaluated(..) => {\n+                constant.super_visit_with(self)\n             }\n-            _ => c.super_visit_with(self),\n         }\n     }\n "}, {"sha": "bcdfa4f12d353aea602a775c80149943db77a5ed", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -834,7 +834,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                                     let reported =\n                                         tcx.sess.emit_err(UnableToConstructConstantValue {\n                                             span: tcx.def_span(def_id),\n-                                            unevaluated,\n+                                            unevaluated: unevaluated.expand(),\n                                         });\n                                     Err(ErrorHandled::Reported(reported))\n                                 }"}, {"sha": "5a213987e87b30e2d6fc40d0c79b7df15264c1fc", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -183,7 +183,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                 FailureKind::Concrete => {}\n             }\n         }\n-        let concrete = infcx.const_eval_resolve(param_env, uv.expand(), Some(span));\n+        let concrete = infcx.const_eval_resolve(param_env, uv, Some(span));\n         match concrete {\n             Err(ErrorHandled::TooGeneric) => {\n                 Err(NotConstEvaluatable::Error(infcx.tcx.sess.delay_span_bug(\n@@ -210,7 +210,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n         // and hopefully soon change this to an error.\n         //\n         // See #74595 for more details about this.\n-        let concrete = infcx.const_eval_resolve(param_env, uv.expand(), Some(span));\n+        let concrete = infcx.const_eval_resolve(param_env, uv, Some(span));\n \n         match concrete {\n           // If we're evaluating a foreign constant, under a nightly compiler without generic"}, {"sha": "a81fef60aedf7283a6c027d2aa06cf53bfb3efb4", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -505,11 +505,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                         if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n                             (c1.kind(), c2.kind())\n                         {\n-                            if infcx.try_unify_abstract_consts(\n-                                a.shrink(),\n-                                b.shrink(),\n-                                obligation.param_env,\n-                            ) {\n+                            if infcx.try_unify_abstract_consts(a, b, obligation.param_env) {\n                                 return ProcessResult::Changed(vec![]);\n                             }\n                         }"}, {"sha": "17afd325f03a219732fbb8aed59f0d8877bf8cad", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -366,7 +366,9 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                     _ => mir::ConstantKind::Ty(const_folded),\n                 }\n             }\n-            mir::ConstantKind::Val(_, _) => constant.try_super_fold_with(self)?,\n+            mir::ConstantKind::Val(_, _) | mir::ConstantKind::Unevaluated(..) => {\n+                constant.try_super_fold_with(self)?\n+            }\n         })\n     }\n "}, {"sha": "75bd2c89f54e47497621d08cbba76b3b03a4d902", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -699,11 +699,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n                             (c1.kind(), c2.kind())\n                         {\n-                            if self.infcx.try_unify_abstract_consts(\n-                                a.shrink(),\n-                                b.shrink(),\n-                                obligation.param_env,\n-                            ) {\n+                            if self.infcx.try_unify_abstract_consts(a, b, obligation.param_env) {\n                                 return Ok(EvaluatedToOk);\n                             }\n                         }"}, {"sha": "5ea28fb47cf4fbd1f29dd8a4038535a66751b6b9", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -456,7 +456,7 @@ impl<'tcx> WfPredicates<'tcx> {\n                             self.out.extend(obligations);\n \n                             let predicate =\n-                                ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(uv.shrink()))\n+                                ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(uv))\n                                     .to_predicate(self.tcx());\n                             let cause = self.cause(traits::WellFormed(None));\n                             self.out.push(traits::Obligation::with_depth("}, {"sha": "44c4fc48d3f0f6428aceba9cb640e3570138fd4e", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -222,17 +222,6 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n         debug!(\"AbstractConstBuilder::build: body={:?}\", &*self.body);\n         self.recurse_build(self.body_id)?;\n \n-        for n in self.nodes.iter() {\n-            if let Node::Leaf(ct) = n {\n-                if let ty::ConstKind::Unevaluated(ct) = ct.kind() {\n-                    // `AbstractConst`s should not contain any promoteds as they require references which\n-                    // are not allowed.\n-                    assert_eq!(ct.promoted, None);\n-                    assert_eq!(ct, self.tcx.erase_regions(ct));\n-                }\n-            }\n-        }\n-\n         Ok(self.tcx.arena.alloc_from_iter(self.nodes.into_iter()))\n     }\n "}, {"sha": "f9660b4a7fa171b4320f49589054e0fbcfe17486", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -2368,10 +2368,10 @@ fn const_evaluatable_predicates_of<'tcx>(\n             let def_id = self.tcx.hir().local_def_id(c.hir_id);\n             let ct = ty::Const::from_anon_const(self.tcx, def_id);\n             if let ty::ConstKind::Unevaluated(uv) = ct.kind() {\n-                assert_eq!(uv.promoted, None);\n+                assert_eq!(uv.promoted, ());\n                 let span = self.tcx.hir().span(c.hir_id);\n                 self.preds.insert((\n-                    ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(uv.shrink()))\n+                    ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(uv))\n                         .to_predicate(self.tcx),\n                     span,\n                 ));"}, {"sha": "3eaedaf10830a6be11f0d7086664c7e445c7903b", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -235,14 +235,13 @@ pub(crate) fn name_from_pat(p: &hir::Pat<'_>) -> Symbol {\n pub(crate) fn print_const(cx: &DocContext<'_>, n: ty::Const<'_>) -> String {\n     match n.kind() {\n         ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) => {\n-            let mut s = if let Some(def) = def.as_local() {\n+            assert_eq!(promoted, ());\n+            let s = if let Some(def) = def.as_local() {\n                 print_const_expr(cx.tcx, cx.tcx.hir().body_owned_by(def.did))\n             } else {\n                 inline::print_inlined_const(cx.tcx, def.did)\n             };\n-            if let Some(promoted) = promoted {\n-                s.push_str(&format!(\"::{:?}\", promoted))\n-            }\n+\n             s\n         }\n         _ => {"}, {"sha": "248abb8fd0e5b3a2a1a2428795b59fc6905b990c", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -17,7 +17,7 @@\n -         StorageLive(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:32: +0:34\n -         StorageLive(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:33: +0:34\n -         _5 = const {alloc1: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:+0:33: +0:34\n-+         _6 = const BAR::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n++         _6 = const _;                    // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:44\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:9:33: 9:34\n -                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc1)) }"}, {"sha": "8ce895fe72b0073f72043c83b374dab7fe2c1a34", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -19,7 +19,7 @@\n -         StorageLive(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:32: +0:45\n -         StorageLive(_5);                 // scope 1 at $DIR/const-promotion-extern-static.rs:+0:42: +0:43\n -         _5 = const {alloc3: *const i32}; // scope 1 at $DIR/const-promotion-extern-static.rs:+0:42: +0:43\n-+         _6 = const FOO::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n++         _6 = const _;                    // scope 0 at $DIR/const-promotion-extern-static.rs:+0:31: +0:55\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n -                                          // + literal: Const { ty: *const i32, val: Value(Scalar(alloc3)) }"}, {"sha": "c27b19679a8396cdda5345064801d6b28b0d20e1", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -25,7 +25,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _9 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n                                            // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }"}, {"sha": "c27b19679a8396cdda5345064801d6b28b0d20e1", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -25,7 +25,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _9 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n                                            // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }"}, {"sha": "bea7114c7df3ba1dcca0ffb33c97ebacbb177e40", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -16,7 +16,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:9: +2:10\n           StorageLive(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:30\n           StorageLive(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n-          _3 = const FOO;                  // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n+          _3 = const _;                    // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n                                            // mir::Constant\n                                            // + span: $DIR/const_prop_fails_gracefully.rs:8:13: 8:16\n                                            // + literal: Const { ty: &i32, val: Unevaluated(FOO, [], None) }"}, {"sha": "a07bdd99825d6975b75882ad77da4ea6844a884c", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -8,9 +8,8 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n--         _1 = const <bool as NeedsDrop>::NEEDS; // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n+          _1 = const _;                    // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n -         switchInt(move _1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n-+         _1 = const false;                // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n +         switchInt(const false) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n       }\n   "}, {"sha": "09ce67ff15dd5af6ca5f40924f411d15234b9f11", "filename": "src/test/mir-opt/const_prop/ref_deref.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -11,7 +11,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-          _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n+          _4 = const _;                    // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref.rs:5:6: 5:10\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }"}, {"sha": "902cd7850311450f8c57f68af4cb93e305241e17", "filename": "src/test/mir-opt/const_prop/ref_deref.main.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -14,7 +14,7 @@\n -         StorageLive(_3);                 // scope 0 at $DIR/ref_deref.rs:+1:8: +1:9\n -         _3 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:+1:8: +1:9\n -         _2 = &_3;                        // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-+         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n++         _4 = const _;                    // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n +                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref.rs:5:6: 5:10\n +                                          // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }"}, {"sha": "ec3d90433159db1b596990220f44be4458e051cb", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -11,7 +11,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n           StorageLive(_2);                 // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n-          _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n+          _4 = const _;                    // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref_project.rs:6:6: 6:17\n                                            // + literal: Const { ty: &(i32, i32), val: Unevaluated(main, [], Some(promoted[0])) }"}, {"sha": "cd0616e65baf847974e037b19474cf8f47439f98", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -14,7 +14,7 @@\n -         StorageLive(_3);                 // scope 0 at $DIR/ref_deref_project.rs:+1:8: +1:14\n -         _3 = (const 4_i32, const 5_i32); // scope 0 at $DIR/ref_deref_project.rs:+1:8: +1:14\n -         _2 = &(_3.1: i32);               // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n-+         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n++         _4 = const _;                    // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n +                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref_project.rs:6:6: 6:17\n +                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(main, [], Some(promoted[0])) }"}, {"sha": "624376769b70f07143a889a388522b2967141357", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -19,7 +19,7 @@\n           StorageLive(_2);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n           StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _9 = const _;                    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }"}, {"sha": "624376769b70f07143a889a388522b2967141357", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -19,7 +19,7 @@\n           StorageLive(_2);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n           StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _9 = const _;                    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }"}, {"sha": "c353c375aa963378b784df57f999431538b6741a", "filename": "src/test/mir-opt/derefer_complex_case.main.Derefer.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_complex_case.main.Derefer.diff?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -28,7 +28,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n           StorageLive(_2);                 // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n-          _14 = const main::promoted[0];   // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n+          _14 = const _;                   // scope 0 at $DIR/derefer_complex_case.rs:+1:17: +1:26\n                                            // mir::Constant\n                                            // + span: $DIR/derefer_complex_case.rs:6:17: 6:26\n                                            // + literal: Const { ty: &[i32; 2], val: Unevaluated(main, [], Some(promoted[0])) }"}, {"sha": "7e017373b4410e5e9487b0c02b8f614f3b4047b9", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -38,7 +38,7 @@\n +         StorageLive(_8);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n +         _8 = &mut (*_7);                 // scope 0 at $DIR/inline-into-box-place.rs:+1:33: +1:43\n +         StorageLive(_9);                 // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         _9 = const alloc::raw_vec::RawVec::<u32>::NEW; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         _9 = const _;                    // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)"}, {"sha": "cabc1a92024fc51e14ed10fcf231b7fe14c0f6ae", "filename": "src/test/mir-opt/inline/inline_retag.bar.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -32,7 +32,7 @@ fn bar() -> bool {\n         _2 = _1;                         // scope 1 at $DIR/inline-retag.rs:+2:5: +2:6\n         StorageLive(_3);                 // scope 1 at $DIR/inline-retag.rs:+2:7: +2:9\n         StorageLive(_4);                 // scope 1 at $DIR/inline-retag.rs:+2:7: +2:9\n-        _10 = const bar::promoted[1];    // scope 1 at $DIR/inline-retag.rs:+2:7: +2:9\n+        _10 = const _;                   // scope 1 at $DIR/inline-retag.rs:+2:7: +2:9\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:7: 12:9\n                                          // + literal: Const { ty: &i32, val: Unevaluated(bar, [], Some(promoted[1])) }\n@@ -43,7 +43,7 @@ fn bar() -> bool {\n         Retag(_3);                       // scope 1 at $DIR/inline-retag.rs:+2:7: +2:9\n         StorageLive(_6);                 // scope 1 at $DIR/inline-retag.rs:+2:11: +2:14\n         StorageLive(_7);                 // scope 1 at $DIR/inline-retag.rs:+2:11: +2:14\n-        _9 = const bar::promoted[0];     // scope 1 at $DIR/inline-retag.rs:+2:11: +2:14\n+        _9 = const _;                    // scope 1 at $DIR/inline-retag.rs:+2:11: +2:14\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:11: 12:14\n                                          // + literal: Const { ty: &i32, val: Unevaluated(bar, [], Some(promoted[0])) }"}, {"sha": "76d8d9396255bdea02df4675571f79e7549b4731", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -87,7 +87,7 @@\n           StorageLive(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _10 = &_1;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _28 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _28 = const _;                   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }"}, {"sha": "8659ddfdb00cc208224ed0ac1241dc76ea5e4cd7", "filename": "src/test/mir-opt/issue_99325.main.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fissue_99325.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fissue_99325.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_99325.main.mir_map.0.mir?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -2,7 +2,7 @@\n \n | User Type Annotations\n | 0: user_ty: Canonical { max_universe: U0, variables: [], value: TypeOf(DefId(0:3 ~ issue_99325[8f58]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Value(Branch([Leaf(0x41), Leaf(0x41), Leaf(0x41), Leaf(0x41)])) }], user_self_ty: None }) }, span: $DIR/issue-99325.rs:10:16: 10:46, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n-| 1: user_ty: Canonical { max_universe: U0, variables: [], value: TypeOf(DefId(0:3 ~ issue_99325[8f58]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:8 ~ issue_99325[8f58]::main::{constant#1}), const_param_did: Some(DefId(0:4 ~ issue_99325[8f58]::function_with_bytes::BYTES)) }, substs: [], promoted: None }) }], user_self_ty: None }) }, span: $DIR/issue-99325.rs:11:16: 11:68, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n+| 1: user_ty: Canonical { max_universe: U0, variables: [], value: TypeOf(DefId(0:3 ~ issue_99325[8f58]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:8 ~ issue_99325[8f58]::main::{constant#1}), const_param_did: Some(DefId(0:4 ~ issue_99325[8f58]::function_with_bytes::BYTES)) }, substs: [], promoted: () }) }], user_self_ty: None }) }, span: $DIR/issue-99325.rs:11:16: 11:68, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/issue-99325.rs:+0:15: +0:15"}, {"sha": "a648e5d672dc85283c03f99aa46e3590f229c5bf", "filename": "src/test/mir-opt/lower_intrinsics.discriminant.LowerIntrinsics.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -44,7 +44,7 @@\n           StorageLive(_5);                 // scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:45\n           StorageLive(_6);                 // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n           StorageLive(_7);                 // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n-          _19 = const discriminant::<T>::promoted[2]; // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n+          _19 = const _;                   // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:50:42: 50:44\n                                            // + literal: Const { ty: &i32, val: Unevaluated(discriminant, [T], Some(promoted[2])) }\n@@ -65,7 +65,7 @@\n           StorageLive(_9);                 // scope 0 at $DIR/lower_intrinsics.rs:+3:5: +3:46\n           StorageLive(_10);                // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n           StorageLive(_11);                // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n-          _18 = const discriminant::<T>::promoted[1]; // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n+          _18 = const _;                   // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:51:42: 51:45\n                                            // + literal: Const { ty: &(), val: Unevaluated(discriminant, [T], Some(promoted[1])) }\n@@ -86,7 +86,7 @@\n           StorageLive(_13);                // scope 0 at $DIR/lower_intrinsics.rs:+4:5: +4:48\n           StorageLive(_14);                // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n           StorageLive(_15);                // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n-          _17 = const discriminant::<T>::promoted[0]; // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n+          _17 = const _;                   // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:52:42: 52:47\n                                            // + literal: Const { ty: &E, val: Unevaluated(discriminant, [T], Some(promoted[0])) }"}, {"sha": "b193a8d76fcba0ad10bebe883398c774781c7864", "filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -51,7 +51,7 @@ fn full_tested_match() -> () {\n \n     bb5: {\n         StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n-        _11 = const full_tested_match::promoted[0]; // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n+        _11 = const _;                   // scope 0 at $DIR/match_false_edges.rs:+2:14: +2:15\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:14:14: 14:15\n                                          // + literal: Const { ty: &Option<i32>, val: Unevaluated(full_tested_match, [], Some(promoted[0])) }"}, {"sha": "899bb67fb3ae5e730c5a561aa3c4fd4408147974", "filename": "src/test/mir-opt/retag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -121,7 +121,7 @@ fn array_casts() -> () {\n         _14 = &_15;                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         Retag(_14);                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageLive(_18);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-        _35 = const array_casts::promoted[0]; // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _35 = const _;                   // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                          // + literal: Const { ty: &usize, val: Unevaluated(array_casts, [], Some(promoted[0])) }"}, {"sha": "7212de52fc378b1f7d403d2d57cf7230e952d1c6", "filename": "src/test/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c524c7dd258628f79e590626e8534dceac477c4c/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=c524c7dd258628f79e590626e8534dceac477c4c", "patch": "@@ -142,7 +142,7 @@ fn main() -> () {\n         Retag(_20);                      // scope 7 at $DIR/retag.rs:+18:5: +18:24\n         StorageLive(_22);                // scope 7 at $DIR/retag.rs:+18:21: +18:23\n         StorageLive(_23);                // scope 7 at $DIR/retag.rs:+18:21: +18:23\n-        _28 = const main::promoted[0];   // scope 7 at $DIR/retag.rs:+18:21: +18:23\n+        _28 = const _;                   // scope 7 at $DIR/retag.rs:+18:21: +18:23\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:48:21: 48:23\n                                          // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }"}]}