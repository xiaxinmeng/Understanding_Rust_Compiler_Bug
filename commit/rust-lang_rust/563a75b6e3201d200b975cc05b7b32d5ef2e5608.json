{"sha": "563a75b6e3201d200b975cc05b7b32d5ef2e5608", "node_id": "C_kwDOAAsO6NoAKDU2M2E3NWI2ZTMyMDFkMjAwYjk3NWNjMDViN2IzMmQ1ZWYyZTU2MDg", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-09-03T01:22:43Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-09-03T22:05:02Z"}, "message": "Add a Machine hook for inline assembly", "tree": {"sha": "fb693032a028cc13f4a58ef8e614c90c0aea6cb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb693032a028cc13f4a58ef8e614c90c0aea6cb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/563a75b6e3201d200b975cc05b7b32d5ef2e5608", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/563a75b6e3201d200b975cc05b7b32d5ef2e5608", "html_url": "https://github.com/rust-lang/rust/commit/563a75b6e3201d200b975cc05b7b32d5ef2e5608", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/563a75b6e3201d200b975cc05b7b32d5ef2e5608/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dec689432fac6720b2f18101ac28a21add98b1b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dec689432fac6720b2f18101ac28a21add98b1b8", "html_url": "https://github.com/rust-lang/rust/commit/dec689432fac6720b2f18101ac28a21add98b1b8"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "530e252b7c077ed0a0f4d0cfdb2c0d5c3357a62b", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/563a75b6e3201d200b975cc05b7b32d5ef2e5608/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/563a75b6e3201d200b975cc05b7b32d5ef2e5608/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=563a75b6e3201d200b975cc05b7b32d5ef2e5608", "patch": "@@ -6,6 +6,7 @@ use std::borrow::{Borrow, Cow};\n use std::fmt::Debug;\n use std::hash::Hash;\n \n+use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_middle::mir;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::DefId;\n@@ -323,6 +324,15 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         kind: Option<MemoryKind<Self::MemoryKind>>,\n     ) -> InterpResult<'tcx, Cow<'b, Allocation<Self::Provenance, Self::AllocExtra>>>;\n \n+    fn eval_inline_asm(\n+        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        _template: &'tcx [InlineAsmTemplatePiece],\n+        _operands: &[mir::InlineAsmOperand<'tcx>],\n+        _options: InlineAsmOptions,\n+    ) -> InterpResult<'tcx> {\n+        throw_unsup_format!(\"inline assembly is not supported\")\n+    }\n+\n     /// Hook for performing extra checks on a memory read access.\n     ///\n     /// Takes read-only access to the allocation so we can keep all the memory read"}, {"sha": "50a82aa0e72c9c7fe55013f4f6e73cae8e55ba70", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/563a75b6e3201d200b975cc05b7b32d5ef2e5608/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/563a75b6e3201d200b975cc05b7b32d5ef2e5608/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=563a75b6e3201d200b975cc05b7b32d5ef2e5608", "patch": "@@ -1,5 +1,6 @@\n use std::borrow::Cow;\n \n+use rustc_ast::ast::InlineAsmOptions;\n use rustc_middle::ty::layout::{FnAbiOf, LayoutOf};\n use rustc_middle::ty::Instance;\n use rustc_middle::{\n@@ -166,8 +167,16 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 terminator.kind\n             ),\n \n-            // Inline assembly can't be interpreted.\n-            InlineAsm { .. } => throw_unsup_format!(\"inline assembly is not supported\"),\n+            InlineAsm { template, ref operands, options, destination, .. } => {\n+                M::eval_inline_asm(self, template, operands, options)?;\n+                if options.contains(InlineAsmOptions::NORETURN) {\n+                    throw_ub_format!(\"returned from noreturn inline assembly\");\n+                }\n+                self.go_to_block(\n+                    destination\n+                        .expect(\"InlineAsm terminators without noreturn must have a destination\"),\n+                )\n+            }\n         }\n \n         Ok(())"}]}