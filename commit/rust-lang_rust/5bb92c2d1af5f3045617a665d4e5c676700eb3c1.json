{"sha": "5bb92c2d1af5f3045617a665d4e5c676700eb3c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViYjkyYzJkMWFmNWYzMDQ1NjE3YTY2NWQ0ZTVjNjc2NzAwZWIzYzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-11T08:59:19Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-11T08:59:19Z"}, "message": "impl fmt::Display for BuiltinType", "tree": {"sha": "b3cbebc3d63e1ab1af73cf17434809057a25ec6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3cbebc3d63e1ab1af73cf17434809057a25ec6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bb92c2d1af5f3045617a665d4e5c676700eb3c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bb92c2d1af5f3045617a665d4e5c676700eb3c1", "html_url": "https://github.com/rust-lang/rust/commit/5bb92c2d1af5f3045617a665d4e5c676700eb3c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bb92c2d1af5f3045617a665d4e5c676700eb3c1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "113d7e44b7d4dee1be6a3d9fd8c724a3fff37b26", "url": "https://api.github.com/repos/rust-lang/rust/commits/113d7e44b7d4dee1be6a3d9fd8c724a3fff37b26", "html_url": "https://github.com/rust-lang/rust/commit/113d7e44b7d4dee1be6a3d9fd8c724a3fff37b26"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "2ec0c83fe58ee16f5fa00dc7718957975cd78dfb", "filename": "crates/ra_hir_def/src/builtin_type.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5bb92c2d1af5f3045617a665d4e5c676700eb3c1/crates%2Fra_hir_def%2Fsrc%2Fbuiltin_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bb92c2d1af5f3045617a665d4e5c676700eb3c1/crates%2Fra_hir_def%2Fsrc%2Fbuiltin_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbuiltin_type.rs?ref=5bb92c2d1af5f3045617a665d4e5c676700eb3c1", "patch": "@@ -3,6 +3,8 @@\n //! A peculiarity of built-in types is that they are always available and are\n //! not associated with any particular crate.\n \n+use std::fmt;\n+\n use hir_expand::name::{self, Name};\n \n #[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]\n@@ -61,3 +63,33 @@ impl BuiltinType {\n         (name::F64, BuiltinType::Float { bitness: FloatBitness::X64 }),\n     ];\n }\n+\n+impl fmt::Display for BuiltinType {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let type_name = match self {\n+            BuiltinType::Char => \"char\",\n+            BuiltinType::Bool => \"bool\",\n+            BuiltinType::Str => \"str\",\n+            BuiltinType::Int { signedness, bitness } => match (signedness, bitness) {\n+                (Signedness::Signed, IntBitness::Xsize) => \"isize\",\n+                (Signedness::Signed, IntBitness::X8) => \"i8\",\n+                (Signedness::Signed, IntBitness::X16) => \"i16\",\n+                (Signedness::Signed, IntBitness::X32) => \"i32\",\n+                (Signedness::Signed, IntBitness::X64) => \"i64\",\n+                (Signedness::Signed, IntBitness::X128) => \"i128\",\n+\n+                (Signedness::Unsigned, IntBitness::Xsize) => \"usize\",\n+                (Signedness::Unsigned, IntBitness::X8) => \"u8\",\n+                (Signedness::Unsigned, IntBitness::X16) => \"u16\",\n+                (Signedness::Unsigned, IntBitness::X32) => \"u32\",\n+                (Signedness::Unsigned, IntBitness::X64) => \"u64\",\n+                (Signedness::Unsigned, IntBitness::X128) => \"u128\",\n+            },\n+            BuiltinType::Float { bitness } => match bitness {\n+                FloatBitness::X32 => \"f32\",\n+                FloatBitness::X64 => \"f64\",\n+            },\n+        };\n+        f.write_str(type_name)\n+    }\n+}"}, {"sha": "cc41390b25775af7831bdfd6a9196a32d5bdeb76", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bb92c2d1af5f3045617a665d4e5c676700eb3c1/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bb92c2d1af5f3045617a665d4e5c676700eb3c1/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=5bb92c2d1af5f3045617a665d4e5c676700eb3c1", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir::{Adt, BuiltinType, HasSource, HirDisplay};\n+use hir::{Adt, HasSource, HirDisplay};\n use ra_db::SourceDatabase;\n use ra_syntax::{\n     algo::{ancestors_at_offset, find_covering_element, find_node_at_offset},\n@@ -132,11 +132,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                 hir::ModuleDef::Static(it) => res.extend(from_def_source(db, it)),\n                 hir::ModuleDef::Trait(it) => res.extend(from_def_source(db, it)),\n                 hir::ModuleDef::TypeAlias(it) => res.extend(from_def_source(db, it)),\n-                hir::ModuleDef::BuiltinType(it) => {\n-                    if let Some(b) = BuiltinType::ALL.iter().find(|(_, ty)| *ty == it) {\n-                        res.extend(Some(b.0.to_string()))\n-                    }\n-                }\n+                hir::ModuleDef::BuiltinType(it) => res.extend(Some(it.to_string())),\n             },\n             Some(SelfType(ty)) => {\n                 if let Some((adt_def, _)) = ty.as_adt() {"}]}