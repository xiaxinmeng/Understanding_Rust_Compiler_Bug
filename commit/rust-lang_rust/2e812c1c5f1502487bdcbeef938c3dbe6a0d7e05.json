{"sha": "2e812c1c5f1502487bdcbeef938c3dbe6a0d7e05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlODEyYzFjNWYxNTAyNDg3YmRjYmVlZjkzOGMzZGJlNmEwZDdlMDU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-31T02:36:45Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-31T03:33:34Z"}, "message": "parser::pat: remove .fatal calls", "tree": {"sha": "c6fd37320f64a0cbf8f14385ecd6643e5d2706c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6fd37320f64a0cbf8f14385ecd6643e5d2706c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e812c1c5f1502487bdcbeef938c3dbe6a0d7e05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e812c1c5f1502487bdcbeef938c3dbe6a0d7e05", "html_url": "https://github.com/rust-lang/rust/commit/2e812c1c5f1502487bdcbeef938c3dbe6a0d7e05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e812c1c5f1502487bdcbeef938c3dbe6a0d7e05/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fba12591217cd4f1980e0d6fc5b2dee897799d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fba12591217cd4f1980e0d6fc5b2dee897799d1", "html_url": "https://github.com/rust-lang/rust/commit/6fba12591217cd4f1980e0d6fc5b2dee897799d1"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "e608b86c76a29447201b8d63d5fc7ce75e3a0779", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2e812c1c5f1502487bdcbeef938c3dbe6a0d7e05/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e812c1c5f1502487bdcbeef938c3dbe6a0d7e05/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=2e812c1c5f1502487bdcbeef938c3dbe6a0d7e05", "patch": "@@ -673,7 +673,7 @@ impl<'a> Parser<'a> {\n         let expected = expected.unwrap_or(\"pattern\");\n         let msg = format!(\"expected {}, found {}\", expected, super::token_descr(&self.token));\n \n-        let mut err = self.fatal(&msg);\n+        let mut err = self.struct_span_err(self.token.span, &msg);\n         err.span_label(self.token.span, format!(\"expected {}\", expected));\n \n         let sp = self.sess.source_map().start_point(self.token.span);\n@@ -807,12 +807,8 @@ impl<'a> Parser<'a> {\n     /// Parse a struct (\"record\") pattern (e.g. `Foo { ... }` or `Foo::Bar { ... }`).\n     fn parse_pat_struct(&mut self, qself: Option<QSelf>, path: Path) -> PResult<'a, PatKind> {\n         if qself.is_some() {\n-            let msg = \"unexpected `{` after qualified path\";\n-            let mut err = self.fatal(msg);\n-            err.span_label(self.token.span, msg);\n-            return Err(err);\n+            return self.error_qpath_before_pat(&path, \"{\");\n         }\n-\n         self.bump();\n         let (fields, etc) = self.parse_pat_fields().unwrap_or_else(|mut e| {\n             e.emit();\n@@ -826,15 +822,22 @@ impl<'a> Parser<'a> {\n     /// Parse tuple struct or tuple variant pattern (e.g. `Foo(...)` or `Foo::Bar(...)`).\n     fn parse_pat_tuple_struct(&mut self, qself: Option<QSelf>, path: Path) -> PResult<'a, PatKind> {\n         if qself.is_some() {\n-            let msg = \"unexpected `(` after qualified path\";\n-            let mut err = self.fatal(msg);\n-            err.span_label(self.token.span, msg);\n-            return Err(err);\n+            return self.error_qpath_before_pat(&path, \"(\");\n         }\n         let (fields, _) = self.parse_paren_comma_seq(|p| p.parse_pat_with_or_inner())?;\n         Ok(PatKind::TupleStruct(path, fields))\n     }\n \n+    /// Error when there's a qualified path, e.g. `<Foo as Bar>::Baz`\n+    /// as the path of e.g., a tuple or record struct pattern.\n+    fn error_qpath_before_pat(&mut self, path: &Path, token: &str) -> PResult<'a, PatKind> {\n+        let msg = &format!(\"unexpected `{}` after qualified path\", token);\n+        let mut err = self.struct_span_err(self.token.span, msg);\n+        err.span_label(self.token.span, msg);\n+        err.span_label(path.span, \"the qualified path\");\n+        Err(err)\n+    }\n+\n     /// Parses the fields of a struct-like pattern.\n     fn parse_pat_fields(&mut self) -> PResult<'a, (Vec<FieldPat>, bool)> {\n         let mut fields = Vec::new();\n@@ -877,7 +880,8 @@ impl<'a> Parser<'a> {\n                     break;\n                 }\n                 let token_str = super::token_descr(&self.token);\n-                let mut err = self.fatal(&format!(\"expected `}}`, found {}\", token_str));\n+                let msg = &format!(\"expected `}}`, found {}\", token_str);\n+                let mut err = self.struct_span_err(self.token.span, msg);\n \n                 err.span_label(self.token.span, \"expected `}`\");\n                 let mut comma_sp = None;"}, {"sha": "d6fdf353f07af3f9e5c790d31b61aabcfd3b9eac", "filename": "src/test/ui/parser/brace-after-qualified-path-in-match.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e812c1c5f1502487bdcbeef938c3dbe6a0d7e05/src%2Ftest%2Fui%2Fparser%2Fbrace-after-qualified-path-in-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e812c1c5f1502487bdcbeef938c3dbe6a0d7e05/src%2Ftest%2Fui%2Fparser%2Fbrace-after-qualified-path-in-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbrace-after-qualified-path-in-match.stderr?ref=2e812c1c5f1502487bdcbeef938c3dbe6a0d7e05", "patch": "@@ -2,7 +2,9 @@ error: unexpected `{` after qualified path\n   --> $DIR/brace-after-qualified-path-in-match.rs:3:27\n    |\n LL |         <T as Trait>::Type{key: value} => (),\n-   |                           ^ unexpected `{` after qualified path\n+   |         ------------------^ unexpected `{` after qualified path\n+   |         |\n+   |         the qualified path\n \n error: aborting due to previous error\n "}, {"sha": "af21f9195467ae0511287ecd646031ae0f95a982", "filename": "src/test/ui/parser/paren-after-qualified-path-in-match.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e812c1c5f1502487bdcbeef938c3dbe6a0d7e05/src%2Ftest%2Fui%2Fparser%2Fparen-after-qualified-path-in-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e812c1c5f1502487bdcbeef938c3dbe6a0d7e05/src%2Ftest%2Fui%2Fparser%2Fparen-after-qualified-path-in-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fparen-after-qualified-path-in-match.stderr?ref=2e812c1c5f1502487bdcbeef938c3dbe6a0d7e05", "patch": "@@ -2,7 +2,9 @@ error: unexpected `(` after qualified path\n   --> $DIR/paren-after-qualified-path-in-match.rs:3:27\n    |\n LL |         <T as Trait>::Type(2) => (),\n-   |                           ^ unexpected `(` after qualified path\n+   |         ------------------^ unexpected `(` after qualified path\n+   |         |\n+   |         the qualified path\n \n error: aborting due to previous error\n "}, {"sha": "1634fdde7d29504a048100fccebcb26b9244aa61", "filename": "src/test/ui/suggestions/vec-macro-in-pattern.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e812c1c5f1502487bdcbeef938c3dbe6a0d7e05/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e812c1c5f1502487bdcbeef938c3dbe6a0d7e05/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.stderr?ref=2e812c1c5f1502487bdcbeef938c3dbe6a0d7e05", "patch": "@@ -5,11 +5,12 @@ LL |         Some(vec![_x]) => (),\n    |              ^^^^^^^^\n    |              |\n    |              unexpected `(` after qualified path\n+   |              the qualified path\n    |              in this macro invocation\n    |              help: use a slice pattern here instead: `[_x]`\n    |\n    = help: for more information, see https://doc.rust-lang.org/edition-guide/rust-2018/slice-patterns.html\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}]}