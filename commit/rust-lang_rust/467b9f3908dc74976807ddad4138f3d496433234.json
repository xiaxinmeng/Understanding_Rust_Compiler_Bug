{"sha": "467b9f3908dc74976807ddad4138f3d496433234", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2N2I5ZjM5MDhkYzc0OTc2ODA3ZGRhZDQxMzhmM2Q0OTY0MzMyMzQ=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-03-13T22:43:39Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-14T22:52:48Z"}, "message": "Implement the rest of the binary trees shootout benchmark", "tree": {"sha": "7b27f371d90c37a1c28133c53bd91db248ffca5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b27f371d90c37a1c28133c53bd91db248ffca5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/467b9f3908dc74976807ddad4138f3d496433234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/467b9f3908dc74976807ddad4138f3d496433234", "html_url": "https://github.com/rust-lang/rust/commit/467b9f3908dc74976807ddad4138f3d496433234", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/467b9f3908dc74976807ddad4138f3d496433234/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "922f69387dab9f751ab110055d5b9638dbae6a78", "url": "https://api.github.com/repos/rust-lang/rust/commits/922f69387dab9f751ab110055d5b9638dbae6a78", "html_url": "https://github.com/rust-lang/rust/commit/922f69387dab9f751ab110055d5b9638dbae6a78"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "a570f3330641f073225ffcd8a576dc73e7dbc26c", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/467b9f3908dc74976807ddad4138f3d496433234/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/467b9f3908dc74976807ddad4138f3d496433234/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=467b9f3908dc74976807ddad4138f3d496433234", "patch": "@@ -576,6 +576,7 @@ TEST_XFAILS_RUSTC := $(addprefix test/run-pass/, \\\n                         ), \\\n                       $(wildcard test/*fail/*.rs test/*fail/*.rc)) \\\n                      test/bench/shootout/fasta.rs \\\n+                     test/bench/shootout/binary-trees.rs \\\n                      $(wildcard test/bench/99-bottles/*rs)\n \n ifdef MINGW_CROSS"}, {"sha": "92bedb8b9e64ddf256ac0928050526a349daf215", "filename": "src/test/bench/shootout/binary-trees.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/467b9f3908dc74976807ddad4138f3d496433234/src%2Ftest%2Fbench%2Fshootout%2Fbinary-trees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467b9f3908dc74976807ddad4138f3d496433234/src%2Ftest%2Fbench%2Fshootout%2Fbinary-trees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout%2Fbinary-trees.rs?ref=467b9f3908dc74976807ddad4138f3d496433234", "patch": "@@ -1,3 +1,7 @@\n+use std;\n+\n+import std._int;\n+\n tag tree {\n   nil;\n   node(@tree, @tree, int);\n@@ -14,5 +18,57 @@ fn item_check(@tree t) -> int {\n   }\n }\n \n+fn bottom_up_tree(int item, int depth) -> @tree{\n+  if (depth > 0) {\n+    ret @node(bottom_up_tree(2 * item - 1, depth - 1),\n+              bottom_up_tree(2 * item, depth - 1),\n+              item);\n+  } else {\n+    ret @nil;\n+  }\n+}\n+\n fn main() {\n+\n+  auto n = 8;\n+  auto min_depth = 4;\n+  auto max_depth;\n+  if (min_depth + 2 > n) {\n+    max_depth = min_depth + 2;\n+  } else {\n+    max_depth = n;\n+  }\n+\n+  auto stretch_depth = max_depth + 1;\n+\n+  auto stretch_tree = bottom_up_tree(0, stretch_depth);\n+  log #fmt(\"stretch tree of depth %d\\t check: %d\",\n+           stretch_depth, item_check(stretch_tree));\n+\n+  auto long_lived_tree = bottom_up_tree(0, max_depth);\n+\n+  auto depth = min_depth;\n+  while (depth <= max_depth) {\n+    auto iterations = _int.pow(2, (max_depth - depth + min_depth) as uint);\n+    auto chk = 0;\n+\n+    auto i = 1;\n+    while (i <= iterations) {\n+      auto temp_tree = bottom_up_tree(i, depth);\n+      chk += item_check(temp_tree);\n+\n+      temp_tree = bottom_up_tree(-i, depth);\n+      chk += item_check(temp_tree);\n+\n+      i += 1;\n+    }\n+\n+    log #fmt(\"%d\\t trees of depth %d\\t check: %d\",\n+             iterations * 2, depth, chk);\n+\n+    depth += 2;\n+  }\n+\n+  log #fmt(\"long lived trees of depth %d\\t check: %d\",\n+           max_depth, item_check(long_lived_tree));\n }\n\\ No newline at end of file"}]}