{"sha": "9900ea352b1b7dbcbe290bbb62f436c91818c5d1", "node_id": "C_kwDOAAsO6NoAKDk5MDBlYTM1MmIxYjdkYmNiZTI5MGJiYjYyZjQzNmM5MTgxOGM1ZDE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-28T17:53:01Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-13T06:06:48Z"}, "message": "Cache more queries on disk.", "tree": {"sha": "a3dc7fe7489312081ebdbfd7b7dbf6e24b34e780", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3dc7fe7489312081ebdbfd7b7dbf6e24b34e780"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9900ea352b1b7dbcbe290bbb62f436c91818c5d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9900ea352b1b7dbcbe290bbb62f436c91818c5d1", "html_url": "https://github.com/rust-lang/rust/commit/9900ea352b1b7dbcbe290bbb62f436c91818c5d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a08bd7873ac755f93286f087fdc398380c69e21", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a08bd7873ac755f93286f087fdc398380c69e21", "html_url": "https://github.com/rust-lang/rust/commit/3a08bd7873ac755f93286f087fdc398380c69e21"}], "stats": {"total": 187, "additions": 104, "deletions": 83}, "files": [{"sha": "c52fbaf0061f69cbf199cde6e5ad6ab8fe9a067d", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=9900ea352b1b7dbcbe290bbb62f436c91818c5d1", "patch": "@@ -2129,7 +2129,7 @@ pub struct FnSig<'hir> {\n // The bodies for items are stored \"out of line\", in a separate\n // hashmap in the `Crate`. Here we just record the hir-id of the item\n // so it can fetched later.\n-#[derive(Copy, Clone, PartialEq, Eq, Encodable, Debug, HashStable_Generic)]\n+#[derive(Copy, Clone, PartialEq, Eq, Encodable, Decodable, Debug, HashStable_Generic)]\n pub struct TraitItemId {\n     pub def_id: LocalDefId,\n }\n@@ -2192,7 +2192,7 @@ pub enum TraitItemKind<'hir> {\n // The bodies for items are stored \"out of line\", in a separate\n // hashmap in the `Crate`. Here we just record the hir-id of the item\n // so it can fetched later.\n-#[derive(Copy, Clone, PartialEq, Eq, Encodable, Debug, HashStable_Generic)]\n+#[derive(Copy, Clone, PartialEq, Eq, Encodable, Decodable, Debug, HashStable_Generic)]\n pub struct ImplItemId {\n     pub def_id: LocalDefId,\n }\n@@ -2787,7 +2787,7 @@ impl<'hir> VariantData<'hir> {\n // The bodies for items are stored \"out of line\", in a separate\n // hashmap in the `Crate`. Here we just record the hir-id of the item\n // so it can fetched later.\n-#[derive(Copy, Clone, PartialEq, Eq, Encodable, Debug, Hash, HashStable_Generic)]\n+#[derive(Copy, Clone, PartialEq, Eq, Encodable, Decodable, Debug, Hash, HashStable_Generic)]\n pub struct ItemId {\n     pub def_id: LocalDefId,\n }\n@@ -3034,7 +3034,7 @@ pub enum AssocItemKind {\n // The bodies for items are stored \"out of line\", in a separate\n // hashmap in the `Crate`. Here we just record the hir-id of the item\n // so it can fetched later.\n-#[derive(Copy, Clone, PartialEq, Eq, Encodable, Debug, HashStable_Generic)]\n+#[derive(Copy, Clone, PartialEq, Eq, Encodable, Decodable, Debug, HashStable_Generic)]\n pub struct ForeignItemId {\n     pub def_id: LocalDefId,\n }"}, {"sha": "a8c611e18ff395c8bedcaa26937ffafe6364389c", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=9900ea352b1b7dbcbe290bbb62f436c91818c5d1", "patch": "@@ -65,12 +65,6 @@ impl<S: Encoder, I: Idx, T: Encodable<S>> Encodable<S> for IndexVec<I, T> {\n     }\n }\n \n-impl<S: Encoder, I: Idx, T: Encodable<S>> Encodable<S> for &IndexVec<I, T> {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        Encodable::encode(&self.raw, s)\n-    }\n-}\n-\n impl<D: Decoder, I: Idx, T: Decodable<D>> Decodable<D> for IndexVec<I, T> {\n     fn decode(d: &mut D) -> Self {\n         IndexVec { raw: Decodable::decode(d), _marker: PhantomData }"}, {"sha": "7a017e2b77a9a2f2bd9f0941d145a71f52f0c798", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=9900ea352b1b7dbcbe290bbb62f436c91818c5d1", "patch": "@@ -25,7 +25,6 @@ use rustc_middle::middle::exported_symbols::{\n     metadata_symbol_name, ExportedSymbol, SymbolExportInfo,\n };\n use rustc_middle::mir::interpret;\n-use rustc_middle::thir;\n use rustc_middle::traits::specialization_graph;\n use rustc_middle::ty::codec::TyEncoder;\n use rustc_middle::ty::fast_reject::{self, SimplifiedType, TreatParams};\n@@ -351,18 +350,6 @@ impl<'a, 'tcx> TyEncoder<'tcx> for EncodeContext<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {\n-    fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {\n-        (**self).encode(s)\n-    }\n-}\n-\n-impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for &'tcx [(ty::Predicate<'tcx>, Span)] {\n-    fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {\n-        (**self).encode(s)\n-    }\n-}\n-\n /// Helper trait to allow overloading `EncodeContext::lazy` for iterators.\n trait EncodeContentsForLazy<'a, 'tcx, T: ?Sized + LazyMeta> {\n     fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) -> T::Meta;"}, {"sha": "def061aaea0683830c92fe15c85b4f48cd638147", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=9900ea352b1b7dbcbe290bbb62f436c91818c5d1", "patch": "@@ -82,7 +82,7 @@ macro_rules! arena_types {\n             [] upvars_mentioned: rustc_data_structures::fx::FxIndexMap<rustc_hir::HirId, rustc_hir::Upvar>,\n             [] object_safety_violations: rustc_middle::traits::ObjectSafetyViolation,\n             [] codegen_unit: rustc_middle::mir::mono::CodegenUnit<'tcx>,\n-            [] attribute: rustc_ast::Attribute,\n+            [decode] attribute: rustc_ast::Attribute,\n             [] name_set: rustc_data_structures::fx::FxHashSet<rustc_span::symbol::Symbol>,\n             [] hir_id_set: rustc_hir::HirIdSet,\n \n@@ -95,9 +95,6 @@ macro_rules! arena_types {\n             // since we need to allocate this type on both the `rustc_hir` arena\n             // (during lowering) and the `librustc_middle` arena (for decoding MIR)\n             [decode] asm_template: rustc_ast::InlineAsmTemplatePiece,\n-\n-            // This is used to decode the &'tcx [Span] for InlineAsm's line_spans.\n-            [decode] span: rustc_span::Span,\n             [decode] used_trait_imports: rustc_data_structures::fx::FxHashSet<rustc_hir::def_id::LocalDefId>,\n             [decode] impl_source: rustc_middle::traits::ImplSource<'tcx, ()>,\n "}, {"sha": "b50f121eff24fcb02dc9374905f79d230ad30a23", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=9900ea352b1b7dbcbe290bbb62f436c91818c5d1", "patch": "@@ -36,7 +36,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Owner<'tcx> {\n \n /// Gather the LocalDefId for each item-like within a module, including items contained within\n /// bodies.  The Ids are in visitor order.  This is used to partition a pass between modules.\n-#[derive(Debug, HashStable)]\n+#[derive(Debug, HashStable, Encodable, Decodable)]\n pub struct ModuleItems {\n     submodules: Box<[LocalDefId]>,\n     items: Box<[ItemId]>,"}, {"sha": "8b11e35a7c3f788b3e3e88dcea20cb58942e0643", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=9900ea352b1b7dbcbe290bbb62f436c91818c5d1", "patch": "@@ -29,7 +29,7 @@ pub enum StabilityLevel {\n }\n \n /// An entry in the `depr_map`.\n-#[derive(Copy, Clone, HashStable, Debug)]\n+#[derive(Copy, Clone, HashStable, Debug, Encodable, Decodable)]\n pub struct DeprecationEntry {\n     /// The metadata of the attribute associated with this entry.\n     pub attr: Deprecation,"}, {"sha": "c691669790591c1ad1a92338f4eea2b0bef04250", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=9900ea352b1b7dbcbe290bbb62f436c91818c5d1", "patch": "@@ -59,6 +59,7 @@ rustc_queries! {\n     query hir_module_items(key: LocalDefId) -> rustc_middle::hir::ModuleItems {\n         storage(ArenaCacheSelector<'tcx>)\n         desc { |tcx| \"HIR module items in `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        cache_on_disk_if { true }\n     }\n \n     /// Gives access to the HIR node for the HIR owner `key`.\n@@ -128,6 +129,7 @@ rustc_queries! {\n     /// parameter. e.g. `fn example<const N: usize=3>` called on `N` would return `3`.\n     query const_param_default(param: DefId) -> ty::Const<'tcx> {\n         desc { |tcx| \"compute const default for a given parameter `{}`\", tcx.def_path_str(param)  }\n+        cache_on_disk_if { param.is_local() }\n         separate_provide_extern\n     }\n \n@@ -223,6 +225,7 @@ rustc_queries! {\n     /// Bounds from the parent (e.g. with nested impl trait) are not included.\n     query explicit_item_bounds(key: DefId) -> &'tcx [(ty::Predicate<'tcx>, Span)] {\n         desc { |tcx| \"finding item bounds for `{}`\", tcx.def_path_str(key) }\n+        cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }\n \n@@ -508,13 +511,15 @@ rustc_queries! {\n     /// Returns the predicates written explicitly by the user.\n     query explicit_predicates_of(key: DefId) -> ty::GenericPredicates<'tcx> {\n         desc { |tcx| \"computing explicit predicates of `{}`\", tcx.def_path_str(key) }\n+        cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }\n \n     /// Returns the inferred outlives predicates (e.g., for `struct\n     /// Foo<'a, T> { x: &'a T }`, this would return `T: 'a`).\n     query inferred_outlives_of(key: DefId) -> &'tcx [(ty::Predicate<'tcx>, Span)] {\n         desc { |tcx| \"computing inferred outlives predicates of `{}`\", tcx.def_path_str(key) }\n+        cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }\n \n@@ -526,6 +531,7 @@ rustc_queries! {\n     /// additional acyclicity requirements).\n     query super_predicates_of(key: DefId) -> ty::GenericPredicates<'tcx> {\n         desc { |tcx| \"computing the super predicates of `{}`\", tcx.def_path_str(key) }\n+        cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }\n \n@@ -549,6 +555,7 @@ rustc_queries! {\n     query trait_def(key: DefId) -> ty::TraitDef {\n         desc { |tcx| \"computing trait definition for `{}`\", tcx.def_path_str(key) }\n         storage(ArenaCacheSelector<'tcx>)\n+        cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }\n     query adt_def(key: DefId) -> ty::AdtDef<'tcx> {\n@@ -558,6 +565,7 @@ rustc_queries! {\n     }\n     query adt_destructor(key: DefId) -> Option<ty::Destructor> {\n         desc { |tcx| \"computing `Drop` impl for `{}`\", tcx.def_path_str(key) }\n+        cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }\n \n@@ -587,11 +595,13 @@ rustc_queries! {\n     /// `is_const_fn` function.\n     query impl_constness(key: DefId) -> hir::Constness {\n         desc { |tcx| \"checking if item is const fn: `{}`\", tcx.def_path_str(key) }\n+        cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }\n \n     query asyncness(key: DefId) -> hir::IsAsync {\n         desc { |tcx| \"checking if the function is async: `{}`\", tcx.def_path_str(key) }\n+        cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }\n \n@@ -609,12 +619,14 @@ rustc_queries! {\n     /// Returns `true` if this is a foreign item (i.e., linked via `extern { ... }`).\n     query is_foreign_item(key: DefId) -> bool {\n         desc { |tcx| \"checking if `{}` is a foreign item\", tcx.def_path_str(key) }\n+        cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }\n \n     /// Returns `Some(generator_kind)` if the node pointed to by `def_id` is a generator.\n     query generator_kind(def_id: DefId) -> Option<hir::GeneratorKind> {\n         desc { |tcx| \"looking up generator kind of `{}`\", tcx.def_path_str(def_id) }\n+        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n     }\n \n@@ -627,6 +639,7 @@ rustc_queries! {\n     /// Maps from the `DefId` of a type or region parameter to its (inferred) variance.\n     query variances_of(def_id: DefId) -> &'tcx [ty::Variance] {\n         desc { |tcx| \"computing the variances of `{}`\", tcx.def_path_str(def_id) }\n+        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n     }\n \n@@ -639,13 +652,15 @@ rustc_queries! {\n     /// Maps from an impl/trait `DefId` to a list of the `DefId`s of its items.\n     query associated_item_def_ids(key: DefId) -> &'tcx [DefId] {\n         desc { |tcx| \"collecting associated items of `{}`\", tcx.def_path_str(key) }\n+        cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }\n \n     /// Maps from a trait item to the trait item \"descriptor\".\n     query associated_item(key: DefId) -> ty::AssocItem {\n         desc { |tcx| \"computing associated item data for `{}`\", tcx.def_path_str(key) }\n         storage(ArenaCacheSelector<'tcx>)\n+        cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }\n \n@@ -685,10 +700,12 @@ rustc_queries! {\n     /// Return `None` if this is an inherent impl.\n     query impl_trait_ref(impl_id: DefId) -> Option<ty::TraitRef<'tcx>> {\n         desc { |tcx| \"computing trait implemented by `{}`\", tcx.def_path_str(impl_id) }\n+        cache_on_disk_if { impl_id.is_local() }\n         separate_provide_extern\n     }\n     query impl_polarity(impl_id: DefId) -> ty::ImplPolarity {\n         desc { |tcx| \"computing implementation polarity of `{}`\", tcx.def_path_str(impl_id) }\n+        cache_on_disk_if { impl_id.is_local() }\n         separate_provide_extern\n     }\n \n@@ -701,6 +718,7 @@ rustc_queries! {\n     /// Methods in these implementations don't need to be exported.\n     query inherent_impls(key: DefId) -> &'tcx [DefId] {\n         desc { |tcx| \"collecting inherent impls for `{}`\", tcx.def_path_str(key) }\n+        cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }\n \n@@ -745,6 +763,7 @@ rustc_queries! {\n     /// Computes the signature of the function.\n     query fn_sig(key: DefId) -> ty::PolyFnSig<'tcx> {\n         desc { |tcx| \"computing function signature of `{}`\", tcx.def_path_str(key) }\n+        cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }\n \n@@ -820,6 +839,7 @@ rustc_queries! {\n     /// Caches `CoerceUnsized` kinds for impls on custom types.\n     query coerce_unsized_info(key: DefId) -> ty::adjustment::CoerceUnsizedInfo {\n         desc { |tcx| \"computing CoerceUnsized info for `{}`\", tcx.def_path_str(key) }\n+        cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }\n \n@@ -1033,28 +1053,33 @@ rustc_queries! {\n \n     query opt_def_kind(def_id: DefId) -> Option<DefKind> {\n         desc { |tcx| \"looking up definition kind of `{}`\", tcx.def_path_str(def_id) }\n+        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n     }\n \n     /// Gets the span for the definition.\n     query def_span(def_id: DefId) -> Span {\n         desc { |tcx| \"looking up span for `{}`\", tcx.def_path_str(def_id) }\n+        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n     }\n \n     /// Gets the span for the identifier of the definition.\n     query def_ident_span(def_id: DefId) -> Option<Span> {\n         desc { |tcx| \"looking up span for `{}`'s identifier\", tcx.def_path_str(def_id) }\n+        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n     }\n \n     query lookup_stability(def_id: DefId) -> Option<attr::Stability> {\n         desc { |tcx| \"looking up stability of `{}`\", tcx.def_path_str(def_id) }\n+        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n     }\n \n     query lookup_const_stability(def_id: DefId) -> Option<attr::ConstStability> {\n         desc { |tcx| \"looking up const stability of `{}`\", tcx.def_path_str(def_id) }\n+        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n     }\n \n@@ -1064,6 +1089,7 @@ rustc_queries! {\n \n     query lookup_deprecation_entry(def_id: DefId) -> Option<DeprecationEntry> {\n         desc { |tcx| \"checking whether `{}` is deprecated\", tcx.def_path_str(def_id) }\n+        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n     }\n \n@@ -1074,6 +1100,7 @@ rustc_queries! {\n \n     query item_attrs(def_id: DefId) -> &'tcx [ast::Attribute] {\n         desc { |tcx| \"collecting attributes of `{}`\", tcx.def_path_str(def_id) }\n+        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n     }\n \n@@ -1090,33 +1117,39 @@ rustc_queries! {\n \n     query fn_arg_names(def_id: DefId) -> &'tcx [rustc_span::symbol::Ident] {\n         desc { |tcx| \"looking up function parameter names for `{}`\", tcx.def_path_str(def_id) }\n+        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n     }\n     /// Gets the rendered value of the specified constant or associated constant.\n     /// Used by rustdoc.\n     query rendered_const(def_id: DefId) -> String {\n         storage(ArenaCacheSelector<'tcx>)\n         desc { |tcx| \"rendering constant intializer of `{}`\", tcx.def_path_str(def_id) }\n+        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n     }\n     query impl_parent(def_id: DefId) -> Option<DefId> {\n         desc { |tcx| \"computing specialization parent impl of `{}`\", tcx.def_path_str(def_id) }\n+        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n     }\n \n     /// Given an `associated_item`, find the trait it belongs to.\n     /// Return `None` if the `DefId` is not an associated item.\n     query trait_of_item(associated_item: DefId) -> Option<DefId> {\n         desc { |tcx| \"finding trait defining `{}`\", tcx.def_path_str(associated_item) }\n+        cache_on_disk_if { associated_item.is_local() }\n         separate_provide_extern\n     }\n \n     query is_ctfe_mir_available(key: DefId) -> bool {\n         desc { |tcx| \"checking if item has ctfe mir available: `{}`\", tcx.def_path_str(key) }\n+        cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }\n     query is_mir_available(key: DefId) -> bool {\n         desc { |tcx| \"checking if item has mir available: `{}`\", tcx.def_path_str(key) }\n+        cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }\n \n@@ -1358,6 +1391,7 @@ rustc_queries! {\n \n     query impl_defaultness(def_id: DefId) -> hir::Defaultness {\n         desc { |tcx| \"looking up whether `{}` is a default impl\", tcx.def_path_str(def_id) }\n+        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n     }\n \n@@ -1391,6 +1425,7 @@ rustc_queries! {\n     }\n     query is_reachable_non_generic(def_id: DefId) -> bool {\n         desc { |tcx| \"checking whether `{}` is an exported symbol\", tcx.def_path_str(def_id) }\n+        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n     }\n     query is_unreachable_local_definition(def_id: LocalDefId) -> bool {\n@@ -1705,9 +1740,9 @@ rustc_queries! {\n     /// - All names contained in `exported_symbols(cnum)` are guaranteed to\n     ///   correspond to a publicly visible symbol in `cnum` machine code.\n     /// - The `exported_symbols` sets of different crates do not intersect.\n-    query exported_symbols(_: CrateNum)\n-        -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportInfo)] {\n+    query exported_symbols(cnum: CrateNum) -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportInfo)] {\n         desc { \"exported_symbols\" }\n+        cache_on_disk_if { *cnum == LOCAL_CRATE }\n         separate_provide_extern\n     }\n "}, {"sha": "2c93af506679d08c6789b491ef0778c89a867c1e", "filename": "compiler/rustc_middle/src/ty/assoc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs?ref=9900ea352b1b7dbcbe290bbb62f436c91818c5d1", "patch": "@@ -9,7 +9,7 @@ use rustc_span::symbol::{Ident, Symbol};\n \n use super::{TyCtxt, Visibility};\n \n-#[derive(Clone, Copy, PartialEq, Eq, Debug, HashStable, Hash)]\n+#[derive(Clone, Copy, PartialEq, Eq, Debug, HashStable, Hash, Encodable, Decodable)]\n pub enum AssocItemContainer {\n     TraitContainer(DefId),\n     ImplContainer(DefId),\n@@ -41,7 +41,7 @@ impl AssocItemContainer {\n }\n \n /// Information about an associated item\n-#[derive(Copy, Clone, Debug, PartialEq, HashStable, Eq, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, HashStable, Eq, Hash, Encodable, Decodable)]\n pub struct AssocItem {\n     pub def_id: DefId,\n     pub name: Symbol,\n@@ -81,7 +81,7 @@ impl AssocItem {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Debug, HashStable, Eq, Hash)]\n+#[derive(Copy, Clone, PartialEq, Debug, HashStable, Eq, Hash, Encodable, Decodable)]\n pub enum AssocKind {\n     Const,\n     Fn,"}, {"sha": "2a5191008a9effc9e2906442e1ae7f1bc1687796", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=9900ea352b1b7dbcbe290bbb62f436c91818c5d1", "patch": "@@ -168,25 +168,6 @@ impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for AllocId {\n     }\n }\n \n-macro_rules! encodable_via_deref {\n-    ($($t:ty),+) => {\n-        $(impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for $t {\n-            fn encode(&self, e: &mut E) -> Result<(), E::Error> {\n-                (**self).encode(e)\n-            }\n-        })*\n-    }\n-}\n-\n-encodable_via_deref! {\n-    &'tcx ty::TypeckResults<'tcx>,\n-    &'tcx traits::ImplSource<'tcx, ()>,\n-    &'tcx mir::Body<'tcx>,\n-    &'tcx mir::UnsafetyCheckResult,\n-    &'tcx mir::BorrowCheckResult<'tcx>,\n-    &'tcx mir::coverage::CodeRegion\n-}\n-\n pub trait TyDecoder<'tcx>: Decoder {\n     const CLEAR_CROSS_CRATE: bool;\n \n@@ -466,6 +447,33 @@ macro_rules! impl_arena_allocatable_decoders {\n rustc_hir::arena_types!(impl_arena_allocatable_decoders);\n arena_types!(impl_arena_allocatable_decoders);\n \n+macro_rules! impl_arena_copy_decoder {\n+    (<$tcx:tt> $($ty:ty,)*) => {\n+        $(impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for $ty {\n+            #[inline]\n+            fn decode(decoder: &mut D) -> &'tcx Self {\n+                decoder.tcx().arena.alloc(Decodable::decode(decoder))\n+            }\n+        }\n+\n+        impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [$ty] {\n+            #[inline]\n+            fn decode(decoder: &mut D) -> &'tcx Self {\n+                decoder.tcx().arena.alloc_from_iter(<Vec<_> as Decodable<D>>::decode(decoder))\n+            }\n+        })*\n+    };\n+}\n+\n+impl_arena_copy_decoder! {<'tcx>\n+    Span,\n+    rustc_span::symbol::Ident,\n+    ty::Variance,\n+    rustc_span::def_id::DefId,\n+    rustc_span::def_id::LocalDefId,\n+    (rustc_middle::middle::exported_symbols::ExportedSymbol<'tcx>, rustc_middle::middle::exported_symbols::SymbolExportInfo),\n+}\n+\n #[macro_export]\n macro_rules! implement_ty_decoder {\n     ($DecoderName:ident <$($typaram:tt),*>) => {"}, {"sha": "3c9e96df59aa43f8151992feabaf2d6d6f883519", "filename": "compiler/rustc_middle/src/ty/list.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs?ref=9900ea352b1b7dbcbe290bbb62f436c91818c5d1", "patch": "@@ -122,13 +122,6 @@ impl<S: Encoder, T: Encodable<S>> Encodable<S> for List<T> {\n     }\n }\n \n-impl<S: Encoder, T: Encodable<S>> Encodable<S> for &List<T> {\n-    #[inline]\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        (**self).encode(s)\n-    }\n-}\n-\n impl<T: PartialEq> PartialEq for List<T> {\n     #[inline]\n     fn eq(&self, other: &List<T>) -> bool {"}, {"sha": "e21cdcb7303e4566ebf97ad1ac8594fe9998a1e4", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=9900ea352b1b7dbcbe290bbb62f436c91818c5d1", "patch": "@@ -228,7 +228,7 @@ impl fmt::Display for ImplPolarity {\n     }\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, TyEncodable, TyDecodable, HashStable)]\n+#[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, Encodable, Decodable, HashStable)]\n pub enum Visibility {\n     /// Visible everywhere (including in other crates).\n     Public,\n@@ -1629,7 +1629,7 @@ where\n     }\n }\n \n-#[derive(Copy, Clone, Debug, HashStable)]\n+#[derive(Copy, Clone, Debug, HashStable, Encodable, Decodable)]\n pub struct Destructor {\n     /// The `DefId` of the destructor method\n     pub did: DefId,"}, {"sha": "2fa030f9b3fb6bbec4895c3088ce71b497c9a767", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=9900ea352b1b7dbcbe290bbb62f436c91818c5d1", "patch": "@@ -21,7 +21,7 @@ use rustc_middle::dep_graph::{self, DepKindStruct, SerializedDepNodeIndex};\n use rustc_middle::ty::query::{query_keys, query_storage, query_stored, query_values};\n use rustc_middle::ty::query::{ExternProviders, Providers, QueryEngine};\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_span::def_id::LocalDefId;\n+use rustc_span::def_id::{LocalDefId, LOCAL_CRATE};\n use rustc_span::Span;\n \n #[macro_use]"}, {"sha": "c492040852763c48a630d15c51675eb493aa52be", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=9900ea352b1b7dbcbe290bbb62f436c91818c5d1", "patch": "@@ -788,10 +788,24 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for &'tcx [rustc_ast::InlineAsm\n     }\n }\n \n-impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for &'tcx [Span] {\n-    fn decode(d: &mut CacheDecoder<'a, 'tcx>) -> Self {\n-        RefDecodable::decode(d)\n-    }\n+macro_rules! impl_ref_decoder {\n+    (<$tcx:tt> $($ty:ty,)*) => {\n+        $(impl<'a, $tcx> Decodable<CacheDecoder<'a, $tcx>> for &$tcx [$ty] {\n+            fn decode(d: &mut CacheDecoder<'a, $tcx>) -> Self {\n+                RefDecodable::decode(d)\n+            }\n+        })*\n+    };\n+}\n+\n+impl_ref_decoder! {<'tcx>\n+    Span,\n+    rustc_ast::Attribute,\n+    rustc_span::symbol::Ident,\n+    ty::Variance,\n+    rustc_span::def_id::DefId,\n+    rustc_span::def_id::LocalDefId,\n+    (rustc_middle::middle::exported_symbols::ExportedSymbol<'tcx>, rustc_middle::middle::exported_symbols::SymbolExportInfo),\n }\n \n //- ENCODING -------------------------------------------------------------------"}, {"sha": "761e988360a3ba641185f2a15c8bb418f335608d", "filename": "compiler/rustc_serialize/src/collection_impls.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_serialize%2Fsrc%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_serialize%2Fsrc%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fcollection_impls.rs?ref=9900ea352b1b7dbcbe290bbb62f436c91818c5d1", "patch": "@@ -171,16 +171,6 @@ where\n     }\n }\n \n-impl<E: Encoder, T, S> Encodable<E> for &HashSet<T, S>\n-where\n-    T: Encodable<E> + Eq,\n-    S: BuildHasher,\n-{\n-    fn encode(&self, s: &mut E) -> Result<(), E::Error> {\n-        (**self).encode(s)\n-    }\n-}\n-\n impl<D: Decoder, T, S> Decodable<D> for HashSet<T, S>\n where\n     T: Decodable<D> + Hash + Eq,"}, {"sha": "36e575b2427af3d4ecb3d7710c5ae417bef5eef7", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9900ea352b1b7dbcbe290bbb62f436c91818c5d1/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=9900ea352b1b7dbcbe290bbb62f436c91818c5d1", "patch": "@@ -268,6 +268,15 @@ direct_serialize_impls! {\n     char emit_char read_char\n }\n \n+impl<S: Encoder, T: ?Sized> Encodable<S> for &T\n+where\n+    T: Encodable<S>,\n+{\n+    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n+        (**self).encode(s)\n+    }\n+}\n+\n impl<S: Encoder> Encodable<S> for ! {\n     fn encode(&self, _s: &mut S) -> Result<(), S::Error> {\n         unreachable!()\n@@ -298,12 +307,6 @@ impl<S: Encoder> Encodable<S> for str {\n     }\n }\n \n-impl<S: Encoder> Encodable<S> for &str {\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_str(self)\n-    }\n-}\n-\n impl<S: Encoder> Encodable<S> for String {\n     fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n         s.emit_str(&self[..])"}]}