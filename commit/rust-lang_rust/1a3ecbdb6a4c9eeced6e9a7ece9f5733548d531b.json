{"sha": "1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b", "node_id": "C_kwDOAAsO6NoAKDFhM2VjYmRiNmE0YzllZWNlZDZlOWE3ZWNlOWY1NzMzNTQ4ZDUzMWI", "commit": {"author": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-09-02T08:29:40Z"}, "committer": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-09-14T00:49:10Z"}, "message": "make `mk_attr_id` part of `ParseSess`", "tree": {"sha": "5a1b1e1d8d396190a02f9483db02166737895e8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a1b1e1d8d396190a02f9483db02166737895e8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b", "html_url": "https://github.com/rust-lang/rust/commit/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/comments", "author": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17cbdfd07178349d0a3cecb8e7dde8f915666ced", "url": "https://api.github.com/repos/rust-lang/rust/commits/17cbdfd07178349d0a3cecb8e7dde8f915666ced", "html_url": "https://github.com/rust-lang/rust/commit/17cbdfd07178349d0a3cecb8e7dde8f915666ced"}], "stats": {"total": 115, "additions": 88, "deletions": 27}, "files": [{"sha": "dfb5330677c450b783645de5eb8cb3f18b2e0d6e", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b", "patch": "@@ -2523,8 +2523,8 @@ impl<S: Encoder> Encodable<S> for AttrId {\n }\n \n impl<D: Decoder> Decodable<D> for AttrId {\n-    fn decode(_: &mut D) -> AttrId {\n-        crate::attr::mk_attr_id()\n+    default fn decode(_: &mut D) -> AttrId {\n+        panic!(\"cannot decode `AttrId` with `{}`\", std::any::type_name::<D>());\n     }\n }\n "}, {"sha": "67affb622f8daffa1a6146c8856619f6874e93bc", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b", "patch": "@@ -11,11 +11,13 @@ use crate::tokenstream::{DelimSpan, Spacing, TokenTree};\n use crate::tokenstream::{LazyAttrTokenStream, TokenStream};\n use crate::util::comments;\n \n+use rustc_data_structures::sync::WorkerLocal;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_span::source_map::BytePos;\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::Span;\n \n+use std::cell::Cell;\n use std::iter;\n \n pub struct MarkedAttrs(GrowableBitSet<AttrId>);\n@@ -346,52 +348,67 @@ pub fn mk_nested_word_item(ident: Ident) -> NestedMetaItem {\n     NestedMetaItem::MetaItem(mk_word_item(ident))\n }\n \n-pub(crate) fn mk_attr_id() -> AttrId {\n-    use std::sync::atomic::AtomicU32;\n-    use std::sync::atomic::Ordering;\n+pub struct AttrIdGenerator(WorkerLocal<Cell<u32>>);\n \n-    static NEXT_ATTR_ID: AtomicU32 = AtomicU32::new(0);\n+impl AttrIdGenerator {\n+    pub fn new() -> Self {\n+        // We use `(index as u32).reverse_bits()` to initialize the\n+        // starting value of AttrId in each worker thread.\n+        // The `index` is the index of the worker thread.\n+        // This ensures that the AttrId generated in each thread is unique.\n+        AttrIdGenerator(WorkerLocal::new(|index| Cell::new((index as u32).reverse_bits())))\n+    }\n \n-    let id = NEXT_ATTR_ID.fetch_add(1, Ordering::SeqCst);\n-    assert!(id != u32::MAX);\n-    AttrId::from_u32(id)\n+    pub fn mk_attr_id(&self) -> AttrId {\n+        let id = self.0.get();\n+        self.0.set(id + 1);\n+        AttrId::from_u32(id)\n+    }\n }\n \n-pub fn mk_attr(style: AttrStyle, path: Path, args: MacArgs, span: Span) -> Attribute {\n-    mk_attr_from_item(AttrItem { path, args, tokens: None }, None, style, span)\n+pub fn mk_attr(\n+    g: &AttrIdGenerator,\n+    style: AttrStyle,\n+    path: Path,\n+    args: MacArgs,\n+    span: Span,\n+) -> Attribute {\n+    mk_attr_from_item(g, AttrItem { path, args, tokens: None }, None, style, span)\n }\n \n pub fn mk_attr_from_item(\n+    g: &AttrIdGenerator,\n     item: AttrItem,\n     tokens: Option<LazyAttrTokenStream>,\n     style: AttrStyle,\n     span: Span,\n ) -> Attribute {\n     Attribute {\n         kind: AttrKind::Normal(P(ast::NormalAttr { item, tokens })),\n-        id: mk_attr_id(),\n+        id: g.mk_attr_id(),\n         style,\n         span,\n     }\n }\n \n /// Returns an inner attribute with the given value and span.\n-pub fn mk_attr_inner(item: MetaItem) -> Attribute {\n-    mk_attr(AttrStyle::Inner, item.path, item.kind.mac_args(item.span), item.span)\n+pub fn mk_attr_inner(g: &AttrIdGenerator, item: MetaItem) -> Attribute {\n+    mk_attr(g, AttrStyle::Inner, item.path, item.kind.mac_args(item.span), item.span)\n }\n \n /// Returns an outer attribute with the given value and span.\n-pub fn mk_attr_outer(item: MetaItem) -> Attribute {\n-    mk_attr(AttrStyle::Outer, item.path, item.kind.mac_args(item.span), item.span)\n+pub fn mk_attr_outer(g: &AttrIdGenerator, item: MetaItem) -> Attribute {\n+    mk_attr(g, AttrStyle::Outer, item.path, item.kind.mac_args(item.span), item.span)\n }\n \n pub fn mk_doc_comment(\n+    g: &AttrIdGenerator,\n     comment_kind: CommentKind,\n     style: AttrStyle,\n     data: Symbol,\n     span: Span,\n ) -> Attribute {\n-    Attribute { kind: AttrKind::DocComment(comment_kind, data), id: mk_attr_id(), style, span }\n+    Attribute { kind: AttrKind::DocComment(comment_kind, data), id: g.mk_attr_id(), style, span }\n }\n \n pub fn list_contains_name(items: &[NestedMetaItem], name: Symbol) -> bool {"}, {"sha": "7f5e09938cbc91d5ab44859ecf3b909e9ba9f3d1", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b", "patch": "@@ -1552,7 +1552,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let uc_nested = attr::mk_nested_word_item(uc_ident);\n                 attr::mk_list_item(allow_ident, vec![uc_nested])\n             };\n-            attr::mk_attr_outer(allow)\n+            attr::mk_attr_outer(&self.tcx.sess.parse_sess.attr_id_generator, allow)\n         };\n         let attrs: AttrVec = thin_vec![attr];\n "}, {"sha": "b87c6f78d7285434845e94b3d788a88064a658a7", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b", "patch": "@@ -22,6 +22,7 @@ use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, IdentPrinter, Symbol};\n use rustc_span::{BytePos, FileName, Span};\n \n+use rustc_ast::attr::AttrIdGenerator;\n use std::borrow::Cow;\n \n pub use self::delimited::IterDelimited;\n@@ -107,6 +108,7 @@ pub fn print_crate<'a>(\n     ann: &'a dyn PpAnn,\n     is_expanded: bool,\n     edition: Edition,\n+    g: &AttrIdGenerator,\n ) -> String {\n     let mut s =\n         State { s: pp::Printer::new(), comments: Some(Comments::new(sm, filename, input)), ann };\n@@ -120,15 +122,15 @@ pub fn print_crate<'a>(\n         // `#![feature(prelude_import)]`\n         let pi_nested = attr::mk_nested_word_item(Ident::with_dummy_span(sym::prelude_import));\n         let list = attr::mk_list_item(Ident::with_dummy_span(sym::feature), vec![pi_nested]);\n-        let fake_attr = attr::mk_attr_inner(list);\n+        let fake_attr = attr::mk_attr_inner(g, list);\n         s.print_attribute(&fake_attr);\n \n         // Currently, in Rust 2018 we don't have `extern crate std;` at the crate\n         // root, so this is not needed, and actually breaks things.\n         if edition == Edition::Edition2015 {\n             // `#![no_std]`\n             let no_std_meta = attr::mk_word_item(Ident::with_dummy_span(sym::no_std));\n-            let fake_attr = attr::mk_attr_inner(no_std_meta);\n+            let fake_attr = attr::mk_attr_inner(g, no_std_meta);\n             s.print_attribute(&fake_attr);\n         }\n     }"}, {"sha": "db05c00d2118ab856151c294f0e0b463ed988301", "filename": "compiler/rustc_builtin_macros/src/cmdline_attrs.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_builtin_macros%2Fsrc%2Fcmdline_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_builtin_macros%2Fsrc%2Fcmdline_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcmdline_attrs.rs?ref=1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b", "patch": "@@ -28,7 +28,13 @@ pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -\n             continue;\n         }\n \n-        krate.attrs.push(mk_attr(AttrStyle::Inner, path, args, start_span.to(end_span)));\n+        krate.attrs.push(mk_attr(\n+            &parse_sess.attr_id_generator,\n+            AttrStyle::Inner,\n+            path,\n+            args,\n+            start_span.to(end_span),\n+        ));\n     }\n \n     krate"}, {"sha": "e0fb7affb3498438de838549ceba3624654f3cd6", "filename": "compiler/rustc_builtin_macros/src/derive.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs?ref=1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b", "patch": "@@ -32,7 +32,8 @@ impl MultiItemModifier for Expander {\n             ecx.resolver.resolve_derives(ecx.current_expansion.id, ecx.force_mode, &|| {\n                 let template =\n                     AttributeTemplate { list: Some(\"Trait1, Trait2, ...\"), ..Default::default() };\n-                let attr = attr::mk_attr_outer(meta_item.clone());\n+                let attr =\n+                    attr::mk_attr_outer(&sess.parse_sess.attr_id_generator, meta_item.clone());\n                 validate_attr::check_builtin_attribute(\n                     &sess.parse_sess,\n                     &attr,"}, {"sha": "561ca00c7197515f8a4672d0085a606f01599e79", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b", "patch": "@@ -187,7 +187,10 @@ impl<'a> MutVisitor for EntryPointCleaner<'a> {\n                     let dc_nested =\n                         attr::mk_nested_word_item(Ident::new(sym::dead_code, self.def_site));\n                     let allow_dead_code_item = attr::mk_list_item(allow_ident, vec![dc_nested]);\n-                    let allow_dead_code = attr::mk_attr_outer(allow_dead_code_item);\n+                    let allow_dead_code = attr::mk_attr_outer(\n+                        &self.sess.parse_sess.attr_id_generator,\n+                        allow_dead_code_item,\n+                    );\n                     let attrs = attrs\n                         .into_iter()\n                         .filter(|attr| {"}, {"sha": "2874fa0caff6fb297365abda296ab3ad942167e6", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b", "patch": "@@ -396,6 +396,7 @@ pub fn print_after_parsing(\n                     annotation.pp_ann(),\n                     false,\n                     parse.edition,\n+                    &sess.parse_sess.attr_id_generator,\n                 )\n             })\n         }\n@@ -438,6 +439,7 @@ pub fn print_after_hir_lowering<'tcx>(\n                     annotation.pp_ann(),\n                     true,\n                     parse.edition,\n+                    &sess.parse_sess.attr_id_generator,\n                 )\n             })\n         }"}, {"sha": "50d2be3cee5e0b3d71cbb0c861f14d78a4fdbbe4", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b", "patch": "@@ -616,7 +616,7 @@ impl<'a> ExtCtxt<'a> {\n     }\n \n     pub fn attribute(&self, mi: ast::MetaItem) -> ast::Attribute {\n-        attr::mk_attr_outer(mi)\n+        attr::mk_attr_outer(&self.sess.parse_sess.attr_id_generator, mi)\n     }\n \n     pub fn meta_word(&self, sp: Span, w: Symbol) -> ast::MetaItem {"}, {"sha": "8d4e3640748631250921c9a57068c142e5a59a1b", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b", "patch": "@@ -424,7 +424,13 @@ impl<'a> StripUnconfigured<'a> {\n         );\n         trees.push(bracket_group);\n         let tokens = Some(LazyAttrTokenStream::new(AttrTokenStream::new(trees)));\n-        let attr = attr::mk_attr_from_item(item, tokens, attr.style, item_span);\n+        let attr = attr::mk_attr_from_item(\n+            &self.sess.parse_sess.attr_id_generator,\n+            item,\n+            tokens,\n+            attr.style,\n+            item_span,\n+        );\n         if attr.has_name(sym::crate_type) {\n             self.sess.parse_sess.buffer_lint(\n                 rustc_lint_defs::builtin::DEPRECATED_CFG_ATTR_CRATE_TYPE_NAME,"}, {"sha": "830417eea1a0a3582cee1a3d75864120411252d5", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b", "patch": "@@ -450,6 +450,13 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {\n     }\n }\n \n+impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ast::AttrId {\n+    fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ast::AttrId {\n+        let sess = d.sess.expect(\"can't decode AttrId without Session\");\n+        sess.parse_sess.attr_id_generator.mk_attr_id()\n+    }\n+}\n+\n impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {\n     fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {\n         let cdata = decoder.cdata();"}, {"sha": "5fd69b15ecc04acbc5995036299efde6e1491a5c", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b", "patch": "@@ -87,6 +87,7 @@ impl<'a> Parser<'a> {\n                 // Always make an outer attribute - this allows us to recover from a misplaced\n                 // inner attribute.\n                 Some(attr::mk_doc_comment(\n+                    &self.sess.attr_id_generator,\n                     comment_kind,\n                     ast::AttrStyle::Outer,\n                     data,\n@@ -138,7 +139,13 @@ impl<'a> Parser<'a> {\n                     this.error_on_forbidden_inner_attr(attr_sp, inner_parse_policy);\n                 }\n \n-                Ok(attr::mk_attr_from_item(item, None, style, attr_sp))\n+                Ok(attr::mk_attr_from_item(\n+                    &self.sess.attr_id_generator,\n+                    item,\n+                    None,\n+                    style,\n+                    attr_sp,\n+                ))\n             } else {\n                 let token_str = pprust::token_to_string(&this.token);\n                 let msg = &format!(\"expected `#`, found `{token_str}`\");\n@@ -291,7 +298,13 @@ impl<'a> Parser<'a> {\n             } else if let token::DocComment(comment_kind, attr_style, data) = self.token.kind {\n                 if attr_style == ast::AttrStyle::Inner {\n                     self.bump();\n-                    Some(attr::mk_doc_comment(comment_kind, attr_style, data, self.prev_token.span))\n+                    Some(attr::mk_doc_comment(\n+                        &self.sess.attr_id_generator,\n+                        comment_kind,\n+                        attr_style,\n+                        data,\n+                        self.prev_token.span,\n+                    ))\n                 } else {\n                     None\n                 }"}, {"sha": "0389b2a06a3403923aa1f6b447d91a5c2c256e3a", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=1a3ecbdb6a4c9eeced6e9a7ece9f5733548d531b", "patch": "@@ -21,6 +21,7 @@ use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n use rustc_span::{Span, Symbol};\n \n+use rustc_ast::attr::AttrIdGenerator;\n use std::str;\n \n /// The set of keys (and, optionally, values) that define the compilation\n@@ -219,6 +220,8 @@ pub struct ParseSess {\n     /// Spans passed to `proc_macro::quote_span`. Each span has a numerical\n     /// identifier represented by its position in the vector.\n     pub proc_macro_quoted_spans: Lock<Vec<Span>>,\n+    /// Used to generate new `AttrId`s. Every `AttrId` is unique.\n+    pub attr_id_generator: AttrIdGenerator,\n }\n \n impl ParseSess {\n@@ -257,6 +260,7 @@ impl ParseSess {\n             type_ascription_path_suggestions: Default::default(),\n             assume_incomplete_release: false,\n             proc_macro_quoted_spans: Default::default(),\n+            attr_id_generator: AttrIdGenerator::new(),\n         }\n     }\n "}]}