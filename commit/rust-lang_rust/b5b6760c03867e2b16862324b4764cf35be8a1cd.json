{"sha": "b5b6760c03867e2b16862324b4764cf35be8a1cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YjY3NjBjMDM4NjdlMmIxNjg2MjMyNGI0NzY0Y2YzNWJlOGExY2Q=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2021-01-11T04:27:32Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2021-01-11T04:27:32Z"}, "message": "Weak::into_raw shouldn't translate sentinel value", "tree": {"sha": "4f5e82b73f2b641f5b5f3e91bdc870dba7919023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f5e82b73f2b641f5b5f3e91bdc870dba7919023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5b6760c03867e2b16862324b4764cf35be8a1cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5b6760c03867e2b16862324b4764cf35be8a1cd", "html_url": "https://github.com/rust-lang/rust/commit/b5b6760c03867e2b16862324b4764cf35be8a1cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5b6760c03867e2b16862324b4764cf35be8a1cd/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "747dbcb3255399396ca16c8462c5a809423c7350", "url": "https://api.github.com/repos/rust-lang/rust/commits/747dbcb3255399396ca16c8462c5a809423c7350", "html_url": "https://github.com/rust-lang/rust/commit/747dbcb3255399396ca16c8462c5a809423c7350"}], "stats": {"total": 48, "additions": 21, "deletions": 27}, "files": [{"sha": "43affa396c9d725e161dc0e102011c643d2db64a", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b5b6760c03867e2b16862324b4764cf35be8a1cd/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b6760c03867e2b16862324b4764cf35be8a1cd/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=b5b6760c03867e2b16862324b4764cf35be8a1cd", "patch": "@@ -848,7 +848,7 @@ impl<T: ?Sized> Rc<T> {\n     pub fn downgrade(this: &Self) -> Weak<T> {\n         this.inner().inc_weak();\n         // Make sure we do not create a dangling Weak\n-        debug_assert!(!is_dangling(this.ptr));\n+        debug_assert!(!is_dangling(this.ptr.as_ptr()));\n         Weak { ptr: this.ptr }\n     }\n \n@@ -1837,8 +1837,8 @@ impl<T> Weak<T> {\n     }\n }\n \n-pub(crate) fn is_dangling<T: ?Sized>(ptr: NonNull<T>) -> bool {\n-    let address = ptr.as_ptr() as *mut () as usize;\n+pub(crate) fn is_dangling<T: ?Sized>(ptr: *mut T) -> bool {\n+    let address = ptr as *mut () as usize;\n     address == usize::MAX\n }\n \n@@ -1879,17 +1879,15 @@ impl<T: ?Sized> Weak<T> {\n     pub fn as_ptr(&self) -> *const T {\n         let ptr: *mut RcBox<T> = NonNull::as_ptr(self.ptr);\n \n-        if is_dangling(self.ptr) {\n-            // If the pointer is dangling, we return a null pointer as the dangling sentinel.\n-            // We can't return the usize::MAX sentinel, as that could valid if T is ZST.\n-            // SAFETY: we have to return a known sentinel here that cannot be produced for\n-            // a valid pointer, so that `from_raw` can reverse this transformation.\n-            (ptr as *mut T).set_ptr_value(ptr::null_mut())\n+        if is_dangling(ptr) {\n+            // If the pointer is dangling, we return the sentinel directly. This cannot be\n+            // a valid payload address, as it is at least as aligned as RcBox (usize).\n+            ptr as *const T\n         } else {\n             // SAFETY: if is_dangling returns false, then the pointer is dereferencable.\n             // The payload may be dropped at this point, and we have to maintain provenance,\n             // so use raw pointer manipulation.\n-            unsafe { &raw mut (*ptr).value }\n+            unsafe { &raw const (*ptr).value }\n         }\n     }\n \n@@ -1973,10 +1971,9 @@ impl<T: ?Sized> Weak<T> {\n     pub unsafe fn from_raw(ptr: *const T) -> Self {\n         // See Weak::as_ptr for context on how the input pointer is derived.\n \n-        let ptr = if ptr.is_null() {\n-            // If we get a null pointer, this is a dangling weak.\n-            // SAFETY: this is the same sentinel as used in Weak::new and is_dangling\n-            (ptr as *mut RcBox<T>).set_ptr_value(usize::MAX as *mut _)\n+        let ptr = if is_dangling(ptr as *mut T) {\n+            // This is a dangling Weak.\n+            ptr as *mut RcBox<T>\n         } else {\n             // Otherwise, we're guaranteed the pointer came from a nondangling Weak.\n             // SAFETY: data_offset is safe to call, as ptr references a real (potentially dropped) T.\n@@ -2052,7 +2049,7 @@ impl<T: ?Sized> Weak<T> {\n     /// (i.e., when this `Weak` was created by `Weak::new`).\n     #[inline]\n     fn inner(&self) -> Option<WeakInner<'_>> {\n-        if is_dangling(self.ptr) {\n+        if is_dangling(self.ptr.as_ptr()) {\n             None\n         } else {\n             // We are careful to *not* create a reference covering the \"data\" field, as"}, {"sha": "8917e2d4b400a1b5ff40d0906e99733f63b421b0", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b5b6760c03867e2b16862324b4764cf35be8a1cd/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b6760c03867e2b16862324b4764cf35be8a1cd/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=b5b6760c03867e2b16862324b4764cf35be8a1cd", "patch": "@@ -885,7 +885,7 @@ impl<T: ?Sized> Arc<T> {\n             match this.inner().weak.compare_exchange_weak(cur, cur + 1, Acquire, Relaxed) {\n                 Ok(_) => {\n                     // Make sure we do not create a dangling Weak\n-                    debug_assert!(!is_dangling(this.ptr));\n+                    debug_assert!(!is_dangling(this.ptr.as_ptr()));\n                     return Weak { ptr: this.ptr };\n                 }\n                 Err(old) => cur = old,\n@@ -1664,12 +1664,10 @@ impl<T: ?Sized> Weak<T> {\n     pub fn as_ptr(&self) -> *const T {\n         let ptr: *mut ArcInner<T> = NonNull::as_ptr(self.ptr);\n \n-        if is_dangling(self.ptr) {\n-            // If the pointer is dangling, we return a null pointer as the dangling sentinel.\n-            // We can't return the usize::MAX sentinel, as that could valid if T is ZST.\n-            // SAFETY: we have to return a known sentinel here that cannot be produced for\n-            // a valid pointer, so that `from_raw` can reverse this transformation.\n-            (ptr as *mut T).set_ptr_value(ptr::null_mut())\n+        if is_dangling(ptr) {\n+            // If the pointer is dangling, we return the sentinel directly. This cannot be\n+            // a valid payload address, as it is at least as aligned as ArcInner (usize).\n+            ptr as *const T\n         } else {\n             // SAFETY: if is_dangling returns false, then the pointer is dereferencable.\n             // The payload may be dropped at this point, and we have to maintain provenance,\n@@ -1758,10 +1756,9 @@ impl<T: ?Sized> Weak<T> {\n     pub unsafe fn from_raw(ptr: *const T) -> Self {\n         // See Weak::as_ptr for context on how the input pointer is derived.\n \n-        let ptr = if ptr.is_null() {\n-            // If we get a null pointer, this is a dangling weak.\n-            // SAFETY: this is the same sentinel as used in Weak::new and is_dangling\n-            (ptr as *mut ArcInner<T>).set_ptr_value(usize::MAX as *mut _)\n+        let ptr = if is_dangling(ptr as *mut T) {\n+            // This is a dangling Weak.\n+            ptr as *mut ArcInner<T>\n         } else {\n             // Otherwise, we're guaranteed the pointer came from a nondangling Weak.\n             // SAFETY: data_offset is safe to call, as ptr references a real (potentially dropped) T.\n@@ -1877,7 +1874,7 @@ impl<T: ?Sized> Weak<T> {\n     /// (i.e., when this `Weak` was created by `Weak::new`).\n     #[inline]\n     fn inner(&self) -> Option<WeakInner<'_>> {\n-        if is_dangling(self.ptr) {\n+        if is_dangling(self.ptr.as_ptr()) {\n             None\n         } else {\n             // We are careful to *not* create a reference covering the \"data\" field, as"}]}