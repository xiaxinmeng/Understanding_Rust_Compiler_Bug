{"sha": "a1c4cf6889f69dc335a3f0b42b29e4d9a081005d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYzRjZjY4ODlmNjlkYzMzNWEzZjBiNDJiMjllNGQ5YTA4MTAwNWQ=", "commit": {"author": {"name": "Matthias Einwag", "email": "matthias.einwag@live.com", "date": "2019-02-07T06:56:33Z"}, "committer": {"name": "Matthias Einwag", "email": "matthias.einwag@live.com", "date": "2019-02-07T06:56:33Z"}, "message": "Change RawWaker constructor to const fn", "tree": {"sha": "41f0c683d9f7adea20139205b076677ad37323ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41f0c683d9f7adea20139205b076677ad37323ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1c4cf6889f69dc335a3f0b42b29e4d9a081005d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c4cf6889f69dc335a3f0b42b29e4d9a081005d", "html_url": "https://github.com/rust-lang/rust/commit/a1c4cf6889f69dc335a3f0b42b29e4d9a081005d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1c4cf6889f69dc335a3f0b42b29e4d9a081005d/comments", "author": {"login": "Matthias247", "id": 6330334, "node_id": "MDQ6VXNlcjYzMzAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6330334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Matthias247", "html_url": "https://github.com/Matthias247", "followers_url": "https://api.github.com/users/Matthias247/followers", "following_url": "https://api.github.com/users/Matthias247/following{/other_user}", "gists_url": "https://api.github.com/users/Matthias247/gists{/gist_id}", "starred_url": "https://api.github.com/users/Matthias247/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Matthias247/subscriptions", "organizations_url": "https://api.github.com/users/Matthias247/orgs", "repos_url": "https://api.github.com/users/Matthias247/repos", "events_url": "https://api.github.com/users/Matthias247/events{/privacy}", "received_events_url": "https://api.github.com/users/Matthias247/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Matthias247", "id": 6330334, "node_id": "MDQ6VXNlcjYzMzAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6330334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Matthias247", "html_url": "https://github.com/Matthias247", "followers_url": "https://api.github.com/users/Matthias247/followers", "following_url": "https://api.github.com/users/Matthias247/following{/other_user}", "gists_url": "https://api.github.com/users/Matthias247/gists{/gist_id}", "starred_url": "https://api.github.com/users/Matthias247/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Matthias247/subscriptions", "organizations_url": "https://api.github.com/users/Matthias247/orgs", "repos_url": "https://api.github.com/users/Matthias247/repos", "events_url": "https://api.github.com/users/Matthias247/events{/privacy}", "received_events_url": "https://api.github.com/users/Matthias247/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e7ef03141c40e34bd740bfe521b656387af9d56", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7ef03141c40e34bd740bfe521b656387af9d56", "html_url": "https://github.com/rust-lang/rust/commit/8e7ef03141c40e34bd740bfe521b656387af9d56"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "21f0a8cea4168a87667a3aa571545aa92091a4d5", "filename": "src/libcore/task/wake.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a1c4cf6889f69dc335a3f0b42b29e4d9a081005d/src%2Flibcore%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c4cf6889f69dc335a3f0b42b29e4d9a081005d/src%2Flibcore%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fwake.rs?ref=a1c4cf6889f69dc335a3f0b42b29e4d9a081005d", "patch": "@@ -19,9 +19,29 @@ pub struct RawWaker {\n     /// that is associated with the task.\n     /// The value of this field gets passed to all functions that are part of\n     /// the vtable as the first parameter.\n-    pub data: *const (),\n+    data: *const (),\n     /// Virtual function pointer table that customizes the behavior of this waker.\n-    pub vtable: &'static RawWakerVTable,\n+    vtable: &'static RawWakerVTable,\n+}\n+\n+impl RawWaker {\n+    /// Creates a new `RawWaker` from the provided `data` pointer and `vtable`.\n+    ///\n+    /// The `data` pointer can be used to store arbitrary data as required\n+    /// by the executor. This could be e.g. a type-erased pointer to an `Arc`\n+    /// that is associated with the task.\n+    /// The value of this poiner will get passed to all functions that are part\n+    /// of the `vtable` as the first parameter.\n+    ///\n+    /// The `vtable` customizes the behavior of a `Waker` which gets created\n+    /// from a `RawWaker`. For each operation on the `Waker`, the associated\n+    /// function in the `vtable` of the underlying `RawWaker` will be called.\n+    pub const fn new(data: *const (), vtable: &'static RawWakerVTable) -> RawWaker {\n+        RawWaker {\n+            data,\n+            vtable,\n+        }\n+    }\n }\n \n /// A virtual function pointer table (vtable) that specifies the behavior\n@@ -102,8 +122,8 @@ impl Waker {\n     /// Creates a new `Waker` from [`RawWaker`].\n     ///\n     /// The behavior of the returned `Waker` is undefined if the contract defined\n-    /// in [RawWaker]'s documentation is not upheld. Therefore this method is\n-    /// unsafe.\n+    /// in [`RawWaker`]'s and [`RawWakerVTable`]'s documentation is not upheld.\n+    /// Therefore this method is unsafe.\n     pub unsafe fn new_unchecked(waker: RawWaker) -> Waker {\n         Waker {\n             waker,"}, {"sha": "034e378af7f19267fab999cfd1852bbc4db8b06a", "filename": "src/test/run-pass/auxiliary/arc_wake.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a1c4cf6889f69dc335a3f0b42b29e4d9a081005d/src%2Ftest%2Frun-pass%2Fauxiliary%2Farc_wake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c4cf6889f69dc335a3f0b42b29e4d9a081005d/src%2Ftest%2Frun-pass%2Fauxiliary%2Farc_wake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Farc_wake.rs?ref=a1c4cf6889f69dc335a3f0b42b29e4d9a081005d", "patch": "@@ -25,10 +25,7 @@ pub trait ArcWake {\n         let ptr = Arc::into_raw(wake) as *const();\n \n         unsafe {\n-            Waker::new_unchecked(RawWaker{\n-                data: ptr,\n-                vtable: waker_vtable!(Self),\n-            })\n+            Waker::new_unchecked(RawWaker::new(ptr, waker_vtable!(Self)))\n         }\n     }\n }\n@@ -44,10 +41,7 @@ unsafe fn increase_refcount<T: ArcWake>(data: *const()) {\n \n unsafe fn clone_arc_raw<T: ArcWake>(data: *const()) -> RawWaker {\n     increase_refcount::<T>(data);\n-    RawWaker {\n-        data: data,\n-        vtable: waker_vtable!(T),\n-    }\n+    RawWaker::new(data, waker_vtable!(T))\n }\n \n unsafe fn drop_arc_raw<T: ArcWake>(data: *const()) {"}]}