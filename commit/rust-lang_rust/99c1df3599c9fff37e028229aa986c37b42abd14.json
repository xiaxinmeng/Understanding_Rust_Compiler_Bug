{"sha": "99c1df3599c9fff37e028229aa986c37b42abd14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YzFkZjM1OTljOWZmZjM3ZTAyODIyOWFhOTg2YzM3YjQyYWJkMTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-15T08:13:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-15T08:13:22Z"}, "message": "Merge #4880\n\n4880: \"fill match arms\" assist: Match on bind patterns r=flodiebold a=tobz1000\n\nThis prevents duplication of match arms where the pre-existing arm is a bind pattern.\n\nCo-authored-by: Toby Dimmick <tobydimmick@pm.me>", "tree": {"sha": "b61c7af7c41949aa91d803408b97b09972e08001", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b61c7af7c41949aa91d803408b97b09972e08001"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99c1df3599c9fff37e028229aa986c37b42abd14", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe5y2iCRBK7hj4Ov3rIwAAdHIIABh2KmHVz5jGeP6rETQF5pOu\nHVKo3MFw4G649p+Im9klsfs2aKu7U8jUO1GfQYHBAHJrdxud5IL3O6rKIeUsa96u\nUK+UkSzxKtAoV/4V1AVs54x2tnTIBzrrO8jfRoM9434LC+GMQusJ+JDAjOeyQ84o\nNdy3azs1nFK1Yg+D5oZW3Df36jJvnYIttuY0siolAVT7Cqv78cebifEqjfgdZ6lt\nd4PO7KU1dxPtENivpBHEN4e6BVK06MzS0Rc6+NiJ4Zvt3KSC0HOn2NkF/s2BhPIs\nhdbwWRqINJKgjaAz23QBZt/QlJiTaWRuc5ODFIKN7Duf3TFzuG/EHt5IDsoPf9I=\n=NzBj\n-----END PGP SIGNATURE-----\n", "payload": "tree b61c7af7c41949aa91d803408b97b09972e08001\nparent 017331a53c1eeaa1253d2829165627bfa27dc124\nparent 41f5471f3e5dab3da345361a0924391d6267373f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1592208802 +0000\ncommitter GitHub <noreply@github.com> 1592208802 +0000\n\nMerge #4880\n\n4880: \"fill match arms\" assist: Match on bind patterns r=flodiebold a=tobz1000\n\nThis prevents duplication of match arms where the pre-existing arm is a bind pattern.\n\nCo-authored-by: Toby Dimmick <tobydimmick@pm.me>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99c1df3599c9fff37e028229aa986c37b42abd14", "html_url": "https://github.com/rust-lang/rust/commit/99c1df3599c9fff37e028229aa986c37b42abd14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99c1df3599c9fff37e028229aa986c37b42abd14/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "017331a53c1eeaa1253d2829165627bfa27dc124", "url": "https://api.github.com/repos/rust-lang/rust/commits/017331a53c1eeaa1253d2829165627bfa27dc124", "html_url": "https://github.com/rust-lang/rust/commit/017331a53c1eeaa1253d2829165627bfa27dc124"}, {"sha": "41f5471f3e5dab3da345361a0924391d6267373f", "url": "https://api.github.com/repos/rust-lang/rust/commits/41f5471f3e5dab3da345361a0924391d6267373f", "html_url": "https://github.com/rust-lang/rust/commit/41f5471f3e5dab3da345361a0924391d6267373f"}], "stats": {"total": 50, "additions": 48, "deletions": 2}, "files": [{"sha": "569efb76876a7b379c5d23234885599e4787835f", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/99c1df3599c9fff37e028229aa986c37b42abd14/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c1df3599c9fff37e028229aa986c37b42abd14/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=99c1df3599c9fff37e028229aa986c37b42abd14", "patch": "@@ -136,8 +136,20 @@ fn is_variant_missing(existing_arms: &mut Vec<MatchArm>, var: &Pat) -> bool {\n }\n \n fn does_pat_match_variant(pat: &Pat, var: &Pat) -> bool {\n-    let pat_head = pat.syntax().first_child().map(|node| node.text());\n-    let var_head = var.syntax().first_child().map(|node| node.text());\n+    let first_node_text = |pat: &Pat| pat.syntax().first_child().map(|node| node.text());\n+\n+    let pat_head = match pat {\n+        Pat::BindPat(bind_pat) => {\n+            if let Some(p) = bind_pat.pat() {\n+                first_node_text(&p)\n+            } else {\n+                return false;\n+            }\n+        }\n+        pat => first_node_text(pat),\n+    };\n+\n+    let var_head = first_node_text(var);\n \n     pat_head == var_head\n }\n@@ -350,6 +362,40 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn partial_fill_bind_pat() {\n+        check_assist(\n+            fill_match_arms,\n+            r#\"\n+            enum A {\n+                As,\n+                Bs,\n+                Cs(Option<i32>),\n+            }\n+            fn main() {\n+                match A::As<|> {\n+                    A::As(_) => {}\n+                    a @ A::Bs(_) => {}\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            enum A {\n+                As,\n+                Bs,\n+                Cs(Option<i32>),\n+            }\n+            fn main() {\n+                match A::As {\n+                    A::As(_) => {}\n+                    a @ A::Bs(_) => {}\n+                    $0A::Cs(_) => {}\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n     #[test]\n     fn fill_match_arms_empty_body() {\n         check_assist("}]}