{"sha": "c491bf939ee715b8624000e5b6fb033acda26826", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0OTFiZjkzOWVlNzE1Yjg2MjQwMDBlNWI2ZmIwMzNhY2RhMjY4MjY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-04T23:04:10Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-04T23:04:10Z"}, "message": "std: Camel case smallintmap", "tree": {"sha": "72f91e7b9ac46b45387adc1decdd3502bacd25ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72f91e7b9ac46b45387adc1decdd3502bacd25ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c491bf939ee715b8624000e5b6fb033acda26826", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c491bf939ee715b8624000e5b6fb033acda26826", "html_url": "https://github.com/rust-lang/rust/commit/c491bf939ee715b8624000e5b6fb033acda26826", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c491bf939ee715b8624000e5b6fb033acda26826/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc", "html_url": "https://github.com/rust-lang/rust/commit/200959d7cef647b34e1d7cf7f4ed2c28b65fc7dc"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "25cb53f7eaa91696b13e4695fcd0441d5365791d", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c491bf939ee715b8624000e5b6fb033acda26826/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c491bf939ee715b8624000e5b6fb033acda26826/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=c491bf939ee715b8624000e5b6fb033acda26826", "patch": "@@ -12,24 +12,24 @@ use map::map;\n \n // FIXME (#2347): Should not be @; there's a bug somewhere in rustc that\n // requires this to be.\n-type smallintmap_<T: copy> = {v: DVec<Option<T>>};\n+type SmallIntMap_<T: copy> = {v: DVec<Option<T>>};\n \n-enum smallintmap<T:copy> {\n-    smallintmap_(@smallintmap_<T>)\n+enum SmallIntMap<T:copy> {\n+    SmallIntMap_(@SmallIntMap_<T>)\n }\n \n /// Create a smallintmap\n-fn mk<T: copy>() -> smallintmap<T> {\n+fn mk<T: copy>() -> SmallIntMap<T> {\n     let v = DVec();\n-    return smallintmap_(@{v: v});\n+    return SmallIntMap_(@{v: v});\n }\n \n /**\n  * Add a value to the map. If the map already contains a value for\n  * the specified key then the original value is replaced.\n  */\n #[inline(always)]\n-fn insert<T: copy>(self: smallintmap<T>, key: uint, +val: T) {\n+fn insert<T: copy>(self: SmallIntMap<T>, key: uint, +val: T) {\n     //io::println(fmt!(\"%?\", key));\n     self.v.grow_set_elt(key, None, Some(val));\n }\n@@ -38,7 +38,7 @@ fn insert<T: copy>(self: smallintmap<T>, key: uint, +val: T) {\n  * Get the value for the specified key. If the key does not exist\n  * in the map then returns none\n  */\n-pure fn find<T: copy>(self: smallintmap<T>, key: uint) -> Option<T> {\n+pure fn find<T: copy>(self: SmallIntMap<T>, key: uint) -> Option<T> {\n     if key < self.v.len() { return self.v.get_elt(key); }\n     return None::<T>;\n }\n@@ -50,7 +50,7 @@ pure fn find<T: copy>(self: smallintmap<T>, key: uint) -> Option<T> {\n  *\n  * If the key does not exist in the map\n  */\n-pure fn get<T: copy>(self: smallintmap<T>, key: uint) -> T {\n+pure fn get<T: copy>(self: SmallIntMap<T>, key: uint) -> T {\n     match find(self, key) {\n       None => {\n         error!(\"smallintmap::get(): key not present\");\n@@ -61,12 +61,12 @@ pure fn get<T: copy>(self: smallintmap<T>, key: uint) -> T {\n }\n \n /// Returns true if the map contains a value for the specified key\n-fn contains_key<T: copy>(self: smallintmap<T>, key: uint) -> bool {\n+fn contains_key<T: copy>(self: SmallIntMap<T>, key: uint) -> bool {\n     return !option::is_none(find(self, key));\n }\n \n /// Implements the map::map interface for smallintmap\n-impl<V: copy> smallintmap<V>: map::map<uint, V> {\n+impl<V: copy> SmallIntMap<V>: map::map<uint, V> {\n     pure fn size() -> uint {\n         let mut sz = 0u;\n         for self.v.each |item| {\n@@ -137,7 +137,7 @@ impl<V: copy> smallintmap<V>: map::map<uint, V> {\n     }\n }\n \n-impl<V: copy> smallintmap<V>: ops::Index<uint, V> {\n+impl<V: copy> SmallIntMap<V>: ops::Index<uint, V> {\n     pure fn index(&&key: uint) -> V {\n         unchecked {\n             get(self, key)\n@@ -146,6 +146,6 @@ impl<V: copy> smallintmap<V>: ops::Index<uint, V> {\n }\n \n /// Cast the given smallintmap to a map::map\n-fn as_map<V: copy>(s: smallintmap<V>) -> map::map<uint, V> {\n+fn as_map<V: copy>(s: SmallIntMap<V>) -> map::map<uint, V> {\n     s as map::map::<uint, V>\n }"}, {"sha": "1b3d2125f1c4176cf676d7d74245c102bb89d5cc", "filename": "src/libstd/std.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c491bf939ee715b8624000e5b6fb033acda26826/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c491bf939ee715b8624000e5b6fb033acda26826/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=c491bf939ee715b8624000e5b6fb033acda26826", "patch": "@@ -65,7 +65,6 @@ mod list;\n #[allow(non_camel_case_types)] // XXX\n mod map;\n mod rope;\n-#[allow(non_camel_case_types)] // XXX\n mod smallintmap;\n mod sort;\n mod treemap;"}, {"sha": "df7fe24b0c2944f87ddb10de8f006a47069edb0b", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c491bf939ee715b8624000e5b6fb033acda26826/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c491bf939ee715b8624000e5b6fb033acda26826/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=c491bf939ee715b8624000e5b6fb033acda26826", "patch": "@@ -5,7 +5,7 @@ use syntax::{ast, ast_util, visit};\n use syntax::attr;\n use syntax::codemap::span;\n use std::map::{map,hashmap,int_hash,hash_from_strs};\n-use std::smallintmap::{map,smallintmap};\n+use std::smallintmap::{map,SmallIntMap};\n use io::WriterUtil;\n use util::ppaux::{ty_to_str};\n use middle::pat_util::{pat_bindings};\n@@ -187,7 +187,7 @@ fn get_lint_dict() -> lint_dict {\n }\n \n // This is a highly not-optimal set of data structure decisions.\n-type lint_modes = smallintmap<level>;\n+type lint_modes = SmallIntMap<level>;\n type lint_mode_map = hashmap<ast::node_id, lint_modes>;\n \n // settings_map maps node ids of items with non-default lint settings\n@@ -223,7 +223,7 @@ fn get_lint_settings_level(settings: lint_settings,\n // This is kind of unfortunate. It should be somewhere else, or we should use\n // a persistent data structure...\n fn clone_lint_modes(modes: lint_modes) -> lint_modes {\n-    std::smallintmap::smallintmap_(@{v: copy modes.v})\n+    std::smallintmap::SmallIntMap_(@{v: copy modes.v})\n }\n \n type ctxt_ = {dict: lint_dict,"}, {"sha": "5debbf6b0066462b1d187edcc5b5e5cfd058cb98", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c491bf939ee715b8624000e5b6fb033acda26826/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c491bf939ee715b8624000e5b6fb033acda26826/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=c491bf939ee715b8624000e5b6fb033acda26826", "patch": "@@ -640,7 +640,7 @@ type type_cache = hashmap<ast::def_id, ty_param_bounds_and_ty>;\n \n type constness_cache = hashmap<ast::def_id, const_eval::constness>;\n \n-type node_type_table = @smallintmap::smallintmap<t>;\n+type node_type_table = @smallintmap::SmallIntMap<t>;\n \n fn mk_rcache() -> creader_cache {\n     type val = {cnum: int, pos: uint, len: uint};"}, {"sha": "f5c0892219fae464818d903160e4a9a92d464f1d", "filename": "src/rustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c491bf939ee715b8624000e5b6fb033acda26826/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c491bf939ee715b8624000e5b6fb033acda26826/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=c491bf939ee715b8624000e5b6fb033acda26826", "patch": "@@ -1,14 +1,15 @@\n use combine::combine;\n use integral::*;\n use to_str::to_str;\n+use std::smallintmap::SmallIntMap;\n \n enum var_value<V:copy, T:copy> {\n     redirect(V),\n     root(T, uint),\n }\n \n struct vals_and_bindings<V:copy, T:copy> {\n-    vals: smallintmap<var_value<V, T>>;\n+    vals: SmallIntMap<var_value<V, T>>;\n     mut bindings: ~[(V, var_value<V, T>)];\n }\n "}]}