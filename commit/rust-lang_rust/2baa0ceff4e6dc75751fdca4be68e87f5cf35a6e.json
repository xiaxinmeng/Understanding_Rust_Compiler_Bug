{"sha": "2baa0ceff4e6dc75751fdca4be68e87f5cf35a6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYWEwY2VmZjRlNmRjNzU3NTFmZGNhNGJlNjhlODdmNWNmMzVhNmU=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-08T16:45:13Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-12T16:13:05Z"}, "message": "Don't reuse bindings for `ref mut`\n\nReusing bindings causes errors later in lowering:\n\n```\n error[E0596]: cannot borrow `vec` as mutable, as it is not declared as mutable\n  --> /checkout/src/test/ui/async-await/argument-patterns.rs:12:20\n   |\nLL | async fn b(n: u32, ref mut vec: A) {\n   |                    ^^^^^^^^^^^\n   |                    |\n   |                    cannot borrow as mutable\n   |                    help: consider changing this to be mutable: `mut vec`\n```", "tree": {"sha": "2cd8bec01e33fc21d2d41ac8490434c7691c21be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cd8bec01e33fc21d2d41ac8490434c7691c21be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2baa0ceff4e6dc75751fdca4be68e87f5cf35a6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2baa0ceff4e6dc75751fdca4be68e87f5cf35a6e", "html_url": "https://github.com/rust-lang/rust/commit/2baa0ceff4e6dc75751fdca4be68e87f5cf35a6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2baa0ceff4e6dc75751fdca4be68e87f5cf35a6e/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "380b222f52ee2f506d35ba89bbd8f83f6469f31f", "url": "https://api.github.com/repos/rust-lang/rust/commits/380b222f52ee2f506d35ba89bbd8f83f6469f31f", "html_url": "https://github.com/rust-lang/rust/commit/380b222f52ee2f506d35ba89bbd8f83f6469f31f"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "1335bb02580f67e85df1eedcdf0866dbef22abda", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2baa0ceff4e6dc75751fdca4be68e87f5cf35a6e/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2baa0ceff4e6dc75751fdca4be68e87f5cf35a6e/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=2baa0ceff4e6dc75751fdca4be68e87f5cf35a6e", "patch": "@@ -1102,6 +1102,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         ident,\n                         _,\n                     ) => (ident, true),\n+                    // For `ref mut` arguments, we can't reuse the binding, but\n+                    // we can keep the same name for the parameter.\n+                    // This lets rustdoc render it correctly in documentation.\n+                    hir::PatKind::Binding(_, _, ident, _) => (ident, false),\n                     _ => {\n                         // Replace the ident for bindings that aren't simple.\n                         let name = format!(\"__arg{}\", index);"}, {"sha": "d7c890738299da0ad225774fff0604e06756bdca", "filename": "src/test/rustdoc/async-fn.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2baa0ceff4e6dc75751fdca4be68e87f5cf35a6e/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2baa0ceff4e6dc75751fdca4be68e87f5cf35a6e/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-fn.rs?ref=2baa0ceff4e6dc75751fdca4be68e87f5cf35a6e", "patch": "@@ -20,6 +20,12 @@ pub async unsafe fn qux() -> char {\n     '\u26a0'\n }\n \n+// @has async_fn/fn.mut_args.html '//pre[@class=\"rust fn\"]' 'pub async fn mut_args(a: usize)'\n+pub async fn mut_args(mut a: usize) {}\n+\n+// @has async_fn/fn.mut_ref.html '//pre[@class=\"rust fn\"]' 'pub async fn mut_ref(x: i32)'\n+pub async fn mut_ref(ref mut x: i32) {}\n+\n trait Bar {}\n \n impl Bar for () {}\n@@ -32,9 +38,11 @@ pub async fn quux() -> impl Bar {\n // @has async_fn/struct.Foo.html\n // @matches - '//code' 'pub async fn f\\(\\)$'\n // @matches - '//code' 'pub async unsafe fn g\\(\\)$'\n+// @matches - '//code' 'pub async fn mut_self\\(self, first: usize\\)$'\n pub struct Foo;\n \n impl Foo {\n     pub async fn f() {}\n     pub async unsafe fn g() {}\n+    pub async fn mut_self(mut self, mut first: usize) {}\n }"}]}