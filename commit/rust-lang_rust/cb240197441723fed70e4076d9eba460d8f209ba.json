{"sha": "cb240197441723fed70e4076d9eba460d8f209ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMjQwMTk3NDQxNzIzZmVkNzBlNDA3NmQ5ZWJhNDYwZDhmMjA5YmE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-26T03:22:46Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-10-05T20:59:05Z"}, "message": "std: check bounds for ints/uints in {To,From}Primitive", "tree": {"sha": "0f90d3c22f8295267a56c4d5714e83f4a6462329", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f90d3c22f8295267a56c4d5714e83f4a6462329"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb240197441723fed70e4076d9eba460d8f209ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb240197441723fed70e4076d9eba460d8f209ba", "html_url": "https://github.com/rust-lang/rust/commit/cb240197441723fed70e4076d9eba460d8f209ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb240197441723fed70e4076d9eba460d8f209ba/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01be9e9904be9c3c492fa0718a9f4677ea02b8f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/01be9e9904be9c3c492fa0718a9f4677ea02b8f6", "html_url": "https://github.com/rust-lang/rust/commit/01be9e9904be9c3c492fa0718a9f4677ea02b8f6"}], "stats": {"total": 658, "additions": 598, "deletions": 60}, "files": [{"sha": "d0a09ac7ef2075de6b383d74e9eebc458207ec3f", "filename": "src/libstd/num/num.rs", "status": "modified", "additions": 598, "deletions": 60, "changes": 658, "blob_url": "https://github.com/rust-lang/rust/blob/cb240197441723fed70e4076d9eba460d8f209ba/src%2Flibstd%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb240197441723fed70e4076d9eba460d8f209ba/src%2Flibstd%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fnum.rs?ref=cb240197441723fed70e4076d9eba460d8f209ba", "patch": "@@ -431,41 +431,200 @@ pub trait ToPrimitive {\n     }\n }\n \n-macro_rules! impl_to_primitive(\n+macro_rules! impl_to_primitive_int_to_int(\n+    ($SrcT:ty, $DstT:ty) => (\n+        {\n+            if Primitive::bits(None::<$SrcT>) <= Primitive::bits(None::<$DstT>) {\n+                Some(*self as $DstT)\n+            } else {\n+                let n = *self as i64;\n+                let min_value: $DstT = Bounded::min_value();\n+                let max_value: $DstT = Bounded::max_value();\n+                if min_value as i64 <= n && n <= max_value as i64 {\n+                    Some(*self as $DstT)\n+                } else {\n+                    None\n+                }\n+            }\n+        }\n+    )\n+)\n+\n+macro_rules! impl_to_primitive_int_to_uint(\n+    ($SrcT:ty, $DstT:ty) => (\n+        {\n+            let zero: $SrcT = Zero::zero();\n+            let max_value: $DstT = Bounded::max_value();\n+            if zero <= *self && *self as u64 <= max_value as u64 {\n+                Some(*self as $DstT)\n+            } else {\n+                None\n+            }\n+        }\n+    )\n+)\n+\n+macro_rules! impl_to_primitive_int(\n+    ($T:ty) => (\n+        impl ToPrimitive for $T {\n+            #[inline]\n+            fn to_int(&self) -> Option<int> { impl_to_primitive_int_to_int!($T, int) }\n+            #[inline]\n+            fn to_i8(&self) -> Option<i8> { impl_to_primitive_int_to_int!($T, i8) }\n+            #[inline]\n+            fn to_i16(&self) -> Option<i16> { impl_to_primitive_int_to_int!($T, i16) }\n+            #[inline]\n+            fn to_i32(&self) -> Option<i32> { impl_to_primitive_int_to_int!($T, i32) }\n+            #[inline]\n+            fn to_i64(&self) -> Option<i64> { impl_to_primitive_int_to_int!($T, i64) }\n+\n+            #[inline]\n+            fn to_uint(&self) -> Option<uint> { impl_to_primitive_int_to_uint!($T, uint) }\n+            #[inline]\n+            fn to_u8(&self) -> Option<u8> { impl_to_primitive_int_to_uint!($T, u8) }\n+            #[inline]\n+            fn to_u16(&self) -> Option<u16> { impl_to_primitive_int_to_uint!($T, u16) }\n+            #[inline]\n+            fn to_u32(&self) -> Option<u32> { impl_to_primitive_int_to_uint!($T, u32) }\n+            #[inline]\n+            fn to_u64(&self) -> Option<u64> { impl_to_primitive_int_to_uint!($T, u64) }\n+\n+            #[inline]\n+            fn to_f32(&self) -> Option<f32> { Some(*self as f32) }\n+            #[inline]\n+            fn to_f64(&self) -> Option<f64> { Some(*self as f64) }\n+        }\n+    )\n+)\n+\n+impl_to_primitive_int!(int)\n+impl_to_primitive_int!(i8)\n+impl_to_primitive_int!(i16)\n+impl_to_primitive_int!(i32)\n+impl_to_primitive_int!(i64)\n+\n+macro_rules! impl_to_primitive_uint_to_int(\n+    ($DstT:ty) => (\n+        {\n+            let max_value: $DstT = Bounded::max_value();\n+            if *self as u64 <= max_value as u64 {\n+                Some(*self as $DstT)\n+            } else {\n+                None\n+            }\n+        }\n+    )\n+)\n+\n+macro_rules! impl_to_primitive_uint_to_uint(\n+    ($SrcT:ty, $DstT:ty) => (\n+        {\n+            if Primitive::bits(None::<$SrcT>) <= Primitive::bits(None::<$DstT>) {\n+                Some(*self as $DstT)\n+            } else {\n+                let zero: $SrcT = Zero::zero();\n+                let max_value: $DstT = Bounded::max_value();\n+                if zero <= *self && *self as u64 <= max_value as u64 {\n+                    Some(*self as $DstT)\n+                } else {\n+                    None\n+                }\n+            }\n+        }\n+    )\n+)\n+\n+macro_rules! impl_to_primitive_uint(\n     ($T:ty) => (\n         impl ToPrimitive for $T {\n-            #[inline] fn to_int(&self)   -> Option<int>   { Some(*self as int)   }\n-            #[inline] fn to_i8(&self)    -> Option<i8>    { Some(*self as i8)    }\n-            #[inline] fn to_i16(&self)   -> Option<i16>   { Some(*self as i16)   }\n-            #[inline] fn to_i32(&self)   -> Option<i32>   { Some(*self as i32)   }\n-            #[inline] fn to_i64(&self)   -> Option<i64>   { Some(*self as i64)   }\n-\n-            #[inline] fn to_uint(&self)  -> Option<uint>  { Some(*self as uint)  }\n-            #[inline] fn to_u8(&self)    -> Option<u8>    { Some(*self as u8)    }\n-            #[inline] fn to_u16(&self)   -> Option<u16>   { Some(*self as u16)   }\n-            #[inline] fn to_u32(&self)   -> Option<u32>   { Some(*self as u32)   }\n-            #[inline] fn to_u64(&self)   -> Option<u64>   { Some(*self as u64)   }\n-\n-            #[inline] fn to_float(&self) -> Option<float> { Some(*self as float) }\n-            #[inline] fn to_f32(&self)   -> Option<f32>   { Some(*self as f32)   }\n-            #[inline] fn to_f64(&self)   -> Option<f64>   { Some(*self as f64)   }\n+            #[inline]\n+            fn to_int(&self) -> Option<int> { impl_to_primitive_uint_to_int!(int) }\n+            #[inline]\n+            fn to_i8(&self) -> Option<i8> { impl_to_primitive_uint_to_int!(i8) }\n+            #[inline]\n+            fn to_i16(&self) -> Option<i16> { impl_to_primitive_uint_to_int!(i16) }\n+            #[inline]\n+            fn to_i32(&self) -> Option<i32> { impl_to_primitive_uint_to_int!(i32) }\n+            #[inline]\n+            fn to_i64(&self) -> Option<i64> { impl_to_primitive_uint_to_int!(i64) }\n+\n+            #[inline]\n+            fn to_uint(&self) -> Option<uint> { impl_to_primitive_uint_to_uint!($T, uint) }\n+            #[inline]\n+            fn to_u8(&self) -> Option<u8> { impl_to_primitive_uint_to_uint!($T, u8) }\n+            #[inline]\n+            fn to_u16(&self) -> Option<u16> { impl_to_primitive_uint_to_uint!($T, u16) }\n+            #[inline]\n+            fn to_u32(&self) -> Option<u32> { impl_to_primitive_uint_to_uint!($T, u32) }\n+            #[inline]\n+            fn to_u64(&self) -> Option<u64> { impl_to_primitive_uint_to_uint!($T, u64) }\n+\n+            #[inline]\n+            fn to_f32(&self) -> Option<f32> { Some(*self as f32) }\n+            #[inline]\n+            fn to_f64(&self) -> Option<f64> { Some(*self as f64) }\n+        }\n+    )\n+)\n+\n+impl_to_primitive_uint!(uint)\n+impl_to_primitive_uint!(u8)\n+impl_to_primitive_uint!(u16)\n+impl_to_primitive_uint!(u32)\n+impl_to_primitive_uint!(u64)\n+\n+macro_rules! impl_to_primitive_float_to_float(\n+    ($SrcT:ty, $DstT:ty) => (\n+        if Primitive::bits(None::<$SrcT>) <= Primitive::bits(None::<$DstT>) {\n+            Some(*self as $DstT)\n+        } else {\n+            let n = *self as f64;\n+            let min_value: $SrcT = Bounded::min_value();\n+            let max_value: $SrcT = Bounded::max_value();\n+            if min_value as f64 <= n && n <= max_value as f64 {\n+                Some(*self as $DstT)\n+            } else {\n+                None\n+            }\n+        }\n+    )\n+)\n+\n+macro_rules! impl_to_primitive_float(\n+    ($T:ty) => (\n+        impl ToPrimitive for $T {\n+            #[inline]\n+            fn to_int(&self) -> Option<int> { Some(*self as int) }\n+            #[inline]\n+            fn to_i8(&self) -> Option<i8> { Some(*self as i8) }\n+            #[inline]\n+            fn to_i16(&self) -> Option<i16> { Some(*self as i16) }\n+            #[inline]\n+            fn to_i32(&self) -> Option<i32> { Some(*self as i32) }\n+            #[inline]\n+            fn to_i64(&self) -> Option<i64> { Some(*self as i64) }\n+\n+            #[inline]\n+            fn to_uint(&self) -> Option<uint> { Some(*self as uint) }\n+            #[inline]\n+            fn to_u8(&self) -> Option<u8> { Some(*self as u8) }\n+            #[inline]\n+            fn to_u16(&self) -> Option<u16> { Some(*self as u16) }\n+            #[inline]\n+            fn to_u32(&self) -> Option<u32> { Some(*self as u32) }\n+            #[inline]\n+            fn to_u64(&self) -> Option<u64> { Some(*self as u64) }\n+\n+            #[inline]\n+            fn to_f32(&self) -> Option<f32> { impl_to_primitive_float_to_float!($T, f32) }\n+            #[inline]\n+            fn to_f64(&self) -> Option<f64> { impl_to_primitive_float_to_float!($T, f64) }\n         }\n     )\n )\n \n-impl_to_primitive!(u8)\n-impl_to_primitive!(u16)\n-impl_to_primitive!(u32)\n-impl_to_primitive!(u64)\n-impl_to_primitive!(uint)\n-impl_to_primitive!(i8)\n-impl_to_primitive!(i16)\n-impl_to_primitive!(i32)\n-impl_to_primitive!(i64)\n-impl_to_primitive!(int)\n-impl_to_primitive!(f32)\n-impl_to_primitive!(f64)\n-impl_to_primitive!(float)\n+impl_to_primitive_float!(f32)\n+impl_to_primitive_float!(f64)\n \n /// A generic trait for converting a number to a value.\n pub trait FromPrimitive {\n@@ -609,40 +768,38 @@ pub fn from_f64<A: FromPrimitive>(n: f64) -> Option<A> {\n }\n \n macro_rules! impl_from_primitive(\n-    ($T:ty) => (\n+    ($T:ty, $to_ty:expr) => (\n         impl FromPrimitive for $T {\n-            #[inline] fn from_int(n: int)     -> Option<$T> { Some(n as $T) }\n-            #[inline] fn from_i8(n: i8)       -> Option<$T> { Some(n as $T) }\n-            #[inline] fn from_i16(n: i16)     -> Option<$T> { Some(n as $T) }\n-            #[inline] fn from_i32(n: i32)     -> Option<$T> { Some(n as $T) }\n-            #[inline] fn from_i64(n: i64)     -> Option<$T> { Some(n as $T) }\n-\n-            #[inline] fn from_uint(n: uint)   -> Option<$T> { Some(n as $T) }\n-            #[inline] fn from_u8(n: u8)       -> Option<$T> { Some(n as $T) }\n-            #[inline] fn from_u16(n: u16)     -> Option<$T> { Some(n as $T) }\n-            #[inline] fn from_u32(n: u32)     -> Option<$T> { Some(n as $T) }\n-            #[inline] fn from_u64(n: u64)     -> Option<$T> { Some(n as $T) }\n-\n-            #[inline] fn from_float(n: float) -> Option<$T> { Some(n as $T) }\n-            #[inline] fn from_f32(n: f32)     -> Option<$T> { Some(n as $T) }\n-            #[inline] fn from_f64(n: f64)     -> Option<$T> { Some(n as $T) }\n+            #[inline] fn from_int(n: int) -> Option<$T> { $to_ty }\n+            #[inline] fn from_i8(n: i8) -> Option<$T> { $to_ty }\n+            #[inline] fn from_i16(n: i16) -> Option<$T> { $to_ty }\n+            #[inline] fn from_i32(n: i32) -> Option<$T> { $to_ty }\n+            #[inline] fn from_i64(n: i64) -> Option<$T> { $to_ty }\n+\n+            #[inline] fn from_uint(n: uint) -> Option<$T> { $to_ty }\n+            #[inline] fn from_u8(n: u8) -> Option<$T> { $to_ty }\n+            #[inline] fn from_u16(n: u16) -> Option<$T> { $to_ty }\n+            #[inline] fn from_u32(n: u32) -> Option<$T> { $to_ty }\n+            #[inline] fn from_u64(n: u64) -> Option<$T> { $to_ty }\n+\n+            #[inline] fn from_f32(n: f32) -> Option<$T> { $to_ty }\n+            #[inline] fn from_f64(n: f64) -> Option<$T> { $to_ty }\n         }\n     )\n )\n \n-impl_from_primitive!(u8)\n-impl_from_primitive!(u16)\n-impl_from_primitive!(u32)\n-impl_from_primitive!(u64)\n-impl_from_primitive!(uint)\n-impl_from_primitive!(i8)\n-impl_from_primitive!(i16)\n-impl_from_primitive!(i32)\n-impl_from_primitive!(i64)\n-impl_from_primitive!(int)\n-impl_from_primitive!(f32)\n-impl_from_primitive!(f64)\n-impl_from_primitive!(float)\n+impl_from_primitive!(int, n.to_int())\n+impl_from_primitive!(i8, n.to_i8())\n+impl_from_primitive!(i16, n.to_i16())\n+impl_from_primitive!(i32, n.to_i32())\n+impl_from_primitive!(i64, n.to_i64())\n+impl_from_primitive!(uint, n.to_uint())\n+impl_from_primitive!(u8, n.to_u8())\n+impl_from_primitive!(u16, n.to_u16())\n+impl_from_primitive!(u32, n.to_u32())\n+impl_from_primitive!(u64, n.to_u64())\n+impl_from_primitive!(f32, n.to_f32())\n+impl_from_primitive!(f64, n.to_f64())\n \n /// Cast from one machine scalar to another\n ///\n@@ -820,8 +977,22 @@ pub fn test_num<T:Num + NumCast>(ten: T, two: T) {\n #[cfg(test)]\n mod tests {\n     use prelude::*;\n-    use uint;\n     use super::*;\n+    use int;\n+    use i8;\n+    use i16;\n+    use i32;\n+    use i64;\n+    use int;\n+    use u8;\n+    use u16;\n+    use u32;\n+    use u64;\n+    use uint;\n+    use u8;\n+    use u16;\n+    use u32;\n+    use u64;\n \n     macro_rules! test_cast_20(\n         ($_20:expr) => ({\n@@ -837,7 +1008,6 @@ mod tests {\n             assert_eq!(20i16, _20.to_i16().unwrap());\n             assert_eq!(20i32, _20.to_i32().unwrap());\n             assert_eq!(20i64, _20.to_i64().unwrap());\n-            assert_eq!(20f,   _20.to_float().unwrap());\n             assert_eq!(20f32, _20.to_f32().unwrap());\n             assert_eq!(20f64, _20.to_f64().unwrap());\n \n@@ -882,6 +1052,374 @@ mod tests {\n     #[test] fn test_f32_cast()   { test_cast_20!(20f32) }\n     #[test] fn test_f64_cast()   { test_cast_20!(20f64) }\n \n+    #[test]\n+    fn test_cast_range_int_min() {\n+        assert_eq!(int::min_value.to_int(),  Some(int::min_value as int));\n+        assert_eq!(int::min_value.to_i8(),   None);\n+        assert_eq!(int::min_value.to_i16(),  None);\n+        // int::min_value.to_i32() is word-size specific\n+        assert_eq!(int::min_value.to_i64(),  Some(int::min_value as i64));\n+        assert_eq!(int::min_value.to_uint(), None);\n+        assert_eq!(int::min_value.to_u8(),   None);\n+        assert_eq!(int::min_value.to_u16(),  None);\n+        assert_eq!(int::min_value.to_u32(),  None);\n+        assert_eq!(int::min_value.to_u64(),  None);\n+\n+        #[cfg(target_word_size = \"32\")]\n+        fn check_word_size() {\n+            assert_eq!(int::min_value.to_i32(), Some(int::min_value as i32));\n+        }\n+\n+        #[cfg(target_word_size = \"64\")]\n+        fn check_word_size() {\n+            assert_eq!(int::min_value.to_i32(), None);\n+        }\n+\n+        check_word_size();\n+    }\n+\n+    #[test]\n+    fn test_cast_range_i8_min() {\n+        assert_eq!(i8::min_value.to_int(),  Some(i8::min_value as int));\n+        assert_eq!(i8::min_value.to_i8(),   Some(i8::min_value as i8));\n+        assert_eq!(i8::min_value.to_i16(),  Some(i8::min_value as i16));\n+        assert_eq!(i8::min_value.to_i32(),  Some(i8::min_value as i32));\n+        assert_eq!(i8::min_value.to_i64(),  Some(i8::min_value as i64));\n+        assert_eq!(i8::min_value.to_uint(), None);\n+        assert_eq!(i8::min_value.to_u8(),   None);\n+        assert_eq!(i8::min_value.to_u16(),  None);\n+        assert_eq!(i8::min_value.to_u32(),  None);\n+        assert_eq!(i8::min_value.to_u64(),  None);\n+    }\n+\n+    #[test]\n+    fn test_cast_range_i16_min() {\n+        assert_eq!(i16::min_value.to_int(),  Some(i16::min_value as int));\n+        assert_eq!(i16::min_value.to_i8(),   None);\n+        assert_eq!(i16::min_value.to_i16(),  Some(i16::min_value as i16));\n+        assert_eq!(i16::min_value.to_i32(),  Some(i16::min_value as i32));\n+        assert_eq!(i16::min_value.to_i64(),  Some(i16::min_value as i64));\n+        assert_eq!(i16::min_value.to_uint(), None);\n+        assert_eq!(i16::min_value.to_u8(),   None);\n+        assert_eq!(i16::min_value.to_u16(),  None);\n+        assert_eq!(i16::min_value.to_u32(),  None);\n+        assert_eq!(i16::min_value.to_u64(),  None);\n+    }\n+\n+    #[test]\n+    fn test_cast_range_i32_min() {\n+        assert_eq!(i32::min_value.to_int(),  Some(i32::min_value as int));\n+        assert_eq!(i32::min_value.to_i8(),   None);\n+        assert_eq!(i32::min_value.to_i16(),  None);\n+        assert_eq!(i32::min_value.to_i32(),  Some(i32::min_value as i32));\n+        assert_eq!(i32::min_value.to_i64(),  Some(i32::min_value as i64));\n+        assert_eq!(i32::min_value.to_uint(), None);\n+        assert_eq!(i32::min_value.to_u8(),   None);\n+        assert_eq!(i32::min_value.to_u16(),  None);\n+        assert_eq!(i32::min_value.to_u32(),  None);\n+        assert_eq!(i32::min_value.to_u64(),  None);\n+    }\n+\n+    #[test]\n+    fn test_cast_range_i64_min() {\n+        // i64::min_value.to_int() is word-size specific\n+        assert_eq!(i64::min_value.to_i8(),   None);\n+        assert_eq!(i64::min_value.to_i16(),  None);\n+        assert_eq!(i64::min_value.to_i32(),  None);\n+        assert_eq!(i64::min_value.to_i64(),  Some(i64::min_value as i64));\n+        assert_eq!(i64::min_value.to_uint(), None);\n+        assert_eq!(i64::min_value.to_u8(),   None);\n+        assert_eq!(i64::min_value.to_u16(),  None);\n+        assert_eq!(i64::min_value.to_u32(),  None);\n+        assert_eq!(i64::min_value.to_u64(),  None);\n+\n+        #[cfg(target_word_size = \"32\")]\n+        fn check_word_size() {\n+            assert_eq!(i64::min_value.to_int(), None);\n+        }\n+\n+        #[cfg(target_word_size = \"64\")]\n+        fn check_word_size() {\n+            assert_eq!(i64::min_value.to_int(), Some(i64::min_value as int));\n+        }\n+\n+        check_word_size();\n+    }\n+\n+    #[test]\n+    fn test_cast_range_int_max() {\n+        assert_eq!(int::max_value.to_int(),  Some(int::max_value as int));\n+        assert_eq!(int::max_value.to_i8(),   None);\n+        assert_eq!(int::max_value.to_i16(),  None);\n+        // int::max_value.to_i32() is word-size specific\n+        assert_eq!(int::max_value.to_i64(),  Some(int::max_value as i64));\n+        assert_eq!(int::max_value.to_u8(),   None);\n+        assert_eq!(int::max_value.to_u16(),  None);\n+        // int::max_value.to_u32() is word-size specific\n+        assert_eq!(int::max_value.to_u64(),  Some(int::max_value as u64));\n+\n+        #[cfg(target_word_size = \"32\")]\n+        fn check_word_size() {\n+            assert_eq!(int::max_value.to_i32(), Some(int::max_value as i32));\n+            assert_eq!(int::max_value.to_u32(), Some(int::max_value as u32));\n+        }\n+\n+        #[cfg(target_word_size = \"64\")]\n+        fn check_word_size() {\n+            assert_eq!(int::max_value.to_i32(), None);\n+            assert_eq!(int::max_value.to_u32(), None);\n+        }\n+\n+        check_word_size();\n+    }\n+\n+    #[test]\n+    fn test_cast_range_i8_max() {\n+        assert_eq!(i8::max_value.to_int(),  Some(i8::max_value as int));\n+        assert_eq!(i8::max_value.to_i8(),   Some(i8::max_value as i8));\n+        assert_eq!(i8::max_value.to_i16(),  Some(i8::max_value as i16));\n+        assert_eq!(i8::max_value.to_i32(),  Some(i8::max_value as i32));\n+        assert_eq!(i8::max_value.to_i64(),  Some(i8::max_value as i64));\n+        assert_eq!(i8::max_value.to_uint(), Some(i8::max_value as uint));\n+        assert_eq!(i8::max_value.to_u8(),   Some(i8::max_value as u8));\n+        assert_eq!(i8::max_value.to_u16(),  Some(i8::max_value as u16));\n+        assert_eq!(i8::max_value.to_u32(),  Some(i8::max_value as u32));\n+        assert_eq!(i8::max_value.to_u64(),  Some(i8::max_value as u64));\n+    }\n+\n+    #[test]\n+    fn test_cast_range_i16_max() {\n+        assert_eq!(i16::max_value.to_int(),  Some(i16::max_value as int));\n+        assert_eq!(i16::max_value.to_i8(),   None);\n+        assert_eq!(i16::max_value.to_i16(),  Some(i16::max_value as i16));\n+        assert_eq!(i16::max_value.to_i32(),  Some(i16::max_value as i32));\n+        assert_eq!(i16::max_value.to_i64(),  Some(i16::max_value as i64));\n+        assert_eq!(i16::max_value.to_uint(), Some(i16::max_value as uint));\n+        assert_eq!(i16::max_value.to_u8(),   None);\n+        assert_eq!(i16::max_value.to_u16(),  Some(i16::max_value as u16));\n+        assert_eq!(i16::max_value.to_u32(),  Some(i16::max_value as u32));\n+        assert_eq!(i16::max_value.to_u64(),  Some(i16::max_value as u64));\n+    }\n+\n+    #[test]\n+    fn test_cast_range_i32_max() {\n+        assert_eq!(i32::max_value.to_int(),  Some(i32::max_value as int));\n+        assert_eq!(i32::max_value.to_i8(),   None);\n+        assert_eq!(i32::max_value.to_i16(),  None);\n+        assert_eq!(i32::max_value.to_i32(),  Some(i32::max_value as i32));\n+        assert_eq!(i32::max_value.to_i64(),  Some(i32::max_value as i64));\n+        assert_eq!(i32::max_value.to_uint(), Some(i32::max_value as uint));\n+        assert_eq!(i32::max_value.to_u8(),   None);\n+        assert_eq!(i32::max_value.to_u16(),  None);\n+        assert_eq!(i32::max_value.to_u32(),  Some(i32::max_value as u32));\n+        assert_eq!(i32::max_value.to_u64(),  Some(i32::max_value as u64));\n+    }\n+\n+    #[test]\n+    fn test_cast_range_i64_max() {\n+        // i64::max_value.to_int() is word-size specific\n+        assert_eq!(i64::max_value.to_i8(),   None);\n+        assert_eq!(i64::max_value.to_i16(),  None);\n+        assert_eq!(i64::max_value.to_i32(),  None);\n+        assert_eq!(i64::max_value.to_i64(),  Some(i64::max_value as i64));\n+        // i64::max_value.to_uint() is word-size specific\n+        assert_eq!(i64::max_value.to_u8(),   None);\n+        assert_eq!(i64::max_value.to_u16(),  None);\n+        assert_eq!(i64::max_value.to_u32(),  None);\n+        assert_eq!(i64::max_value.to_u64(),  Some(i64::max_value as u64));\n+\n+        #[cfg(target_word_size = \"32\")]\n+        fn check_word_size() {\n+            assert_eq!(i64::max_value.to_int(),  None);\n+            assert_eq!(i64::max_value.to_uint(), None);\n+        }\n+\n+        #[cfg(target_word_size = \"64\")]\n+        fn check_word_size() {\n+            assert_eq!(i64::max_value.to_int(),  Some(i64::max_value as int));\n+            assert_eq!(i64::max_value.to_uint(), Some(i64::max_value as uint));\n+        }\n+\n+        check_word_size();\n+    }\n+\n+    #[test]\n+    fn test_cast_range_uint_min() {\n+        assert_eq!(uint::min_value.to_int(),  Some(uint::min_value as int));\n+        assert_eq!(uint::min_value.to_i8(),   Some(uint::min_value as i8));\n+        assert_eq!(uint::min_value.to_i16(),  Some(uint::min_value as i16));\n+        assert_eq!(uint::min_value.to_i32(),  Some(uint::min_value as i32));\n+        assert_eq!(uint::min_value.to_i64(),  Some(uint::min_value as i64));\n+        assert_eq!(uint::min_value.to_uint(), Some(uint::min_value as uint));\n+        assert_eq!(uint::min_value.to_u8(),   Some(uint::min_value as u8));\n+        assert_eq!(uint::min_value.to_u16(),  Some(uint::min_value as u16));\n+        assert_eq!(uint::min_value.to_u32(),  Some(uint::min_value as u32));\n+        assert_eq!(uint::min_value.to_u64(),  Some(uint::min_value as u64));\n+    }\n+\n+    #[test]\n+    fn test_cast_range_u8_min() {\n+        assert_eq!(u8::min_value.to_int(),  Some(u8::min_value as int));\n+        assert_eq!(u8::min_value.to_i8(),   Some(u8::min_value as i8));\n+        assert_eq!(u8::min_value.to_i16(),  Some(u8::min_value as i16));\n+        assert_eq!(u8::min_value.to_i32(),  Some(u8::min_value as i32));\n+        assert_eq!(u8::min_value.to_i64(),  Some(u8::min_value as i64));\n+        assert_eq!(u8::min_value.to_uint(), Some(u8::min_value as uint));\n+        assert_eq!(u8::min_value.to_u8(),   Some(u8::min_value as u8));\n+        assert_eq!(u8::min_value.to_u16(),  Some(u8::min_value as u16));\n+        assert_eq!(u8::min_value.to_u32(),  Some(u8::min_value as u32));\n+        assert_eq!(u8::min_value.to_u64(),  Some(u8::min_value as u64));\n+    }\n+\n+    #[test]\n+    fn test_cast_range_u16_min() {\n+        assert_eq!(u16::min_value.to_int(),  Some(u16::min_value as int));\n+        assert_eq!(u16::min_value.to_i8(),   Some(u16::min_value as i8));\n+        assert_eq!(u16::min_value.to_i16(),  Some(u16::min_value as i16));\n+        assert_eq!(u16::min_value.to_i32(),  Some(u16::min_value as i32));\n+        assert_eq!(u16::min_value.to_i64(),  Some(u16::min_value as i64));\n+        assert_eq!(u16::min_value.to_uint(), Some(u16::min_value as uint));\n+        assert_eq!(u16::min_value.to_u8(),   Some(u16::min_value as u8));\n+        assert_eq!(u16::min_value.to_u16(),  Some(u16::min_value as u16));\n+        assert_eq!(u16::min_value.to_u32(),  Some(u16::min_value as u32));\n+        assert_eq!(u16::min_value.to_u64(),  Some(u16::min_value as u64));\n+    }\n+\n+    #[test]\n+    fn test_cast_range_u32_min() {\n+        assert_eq!(u32::min_value.to_int(),  Some(u32::min_value as int));\n+        assert_eq!(u32::min_value.to_i8(),   Some(u32::min_value as i8));\n+        assert_eq!(u32::min_value.to_i16(),  Some(u32::min_value as i16));\n+        assert_eq!(u32::min_value.to_i32(),  Some(u32::min_value as i32));\n+        assert_eq!(u32::min_value.to_i64(),  Some(u32::min_value as i64));\n+        assert_eq!(u32::min_value.to_uint(), Some(u32::min_value as uint));\n+        assert_eq!(u32::min_value.to_u8(),   Some(u32::min_value as u8));\n+        assert_eq!(u32::min_value.to_u16(),  Some(u32::min_value as u16));\n+        assert_eq!(u32::min_value.to_u32(),  Some(u32::min_value as u32));\n+        assert_eq!(u32::min_value.to_u64(),  Some(u32::min_value as u64));\n+    }\n+\n+    #[test]\n+    fn test_cast_range_u64_min() {\n+        assert_eq!(u64::min_value.to_int(),  Some(u64::min_value as int));\n+        assert_eq!(u64::min_value.to_i8(),   Some(u64::min_value as i8));\n+        assert_eq!(u64::min_value.to_i16(),  Some(u64::min_value as i16));\n+        assert_eq!(u64::min_value.to_i32(),  Some(u64::min_value as i32));\n+        assert_eq!(u64::min_value.to_i64(),  Some(u64::min_value as i64));\n+        assert_eq!(u64::min_value.to_uint(), Some(u64::min_value as uint));\n+        assert_eq!(u64::min_value.to_u8(),   Some(u64::min_value as u8));\n+        assert_eq!(u64::min_value.to_u16(),  Some(u64::min_value as u16));\n+        assert_eq!(u64::min_value.to_u32(),  Some(u64::min_value as u32));\n+        assert_eq!(u64::min_value.to_u64(),  Some(u64::min_value as u64));\n+    }\n+\n+    #[test]\n+    fn test_cast_range_uint_max() {\n+        assert_eq!(uint::max_value.to_int(),  None);\n+        assert_eq!(uint::max_value.to_i8(),   None);\n+        assert_eq!(uint::max_value.to_i16(),  None);\n+        assert_eq!(uint::max_value.to_i32(),  None);\n+        // uint::max_value.to_i64() is word-size specific\n+        assert_eq!(uint::max_value.to_u8(),   None);\n+        assert_eq!(uint::max_value.to_u16(),  None);\n+        // uint::max_value.to_u32() is word-size specific\n+        assert_eq!(uint::max_value.to_u64(),  Some(uint::max_value as u64));\n+\n+        #[cfg(target_word_size = \"32\")]\n+        fn check_word_size() {\n+            assert_eq!(uint::max_value.to_u32(), Some(uint::max_value as u32));\n+            assert_eq!(uint::max_value.to_i64(), Some(uint::max_value as i64));\n+        }\n+\n+        #[cfg(target_word_size = \"64\")]\n+        fn check_word_size() {\n+            assert_eq!(uint::max_value.to_u32(), None);\n+            assert_eq!(uint::max_value.to_i64(), None);\n+        }\n+\n+        check_word_size();\n+    }\n+\n+    #[test]\n+    fn test_cast_range_u8_max() {\n+        assert_eq!(u8::max_value.to_int(),  Some(u8::max_value as int));\n+        assert_eq!(u8::max_value.to_i8(),   None);\n+        assert_eq!(u8::max_value.to_i16(),  Some(u8::max_value as i16));\n+        assert_eq!(u8::max_value.to_i32(),  Some(u8::max_value as i32));\n+        assert_eq!(u8::max_value.to_i64(),  Some(u8::max_value as i64));\n+        assert_eq!(u8::max_value.to_uint(), Some(u8::max_value as uint));\n+        assert_eq!(u8::max_value.to_u8(),   Some(u8::max_value as u8));\n+        assert_eq!(u8::max_value.to_u16(),  Some(u8::max_value as u16));\n+        assert_eq!(u8::max_value.to_u32(),  Some(u8::max_value as u32));\n+        assert_eq!(u8::max_value.to_u64(),  Some(u8::max_value as u64));\n+    }\n+\n+    #[test]\n+    fn test_cast_range_u16_max() {\n+        assert_eq!(u16::max_value.to_int(),  Some(u16::max_value as int));\n+        assert_eq!(u16::max_value.to_i8(),   None);\n+        assert_eq!(u16::max_value.to_i16(),  None);\n+        assert_eq!(u16::max_value.to_i32(),  Some(u16::max_value as i32));\n+        assert_eq!(u16::max_value.to_i64(),  Some(u16::max_value as i64));\n+        assert_eq!(u16::max_value.to_uint(), Some(u16::max_value as uint));\n+        assert_eq!(u16::max_value.to_u8(),   None);\n+        assert_eq!(u16::max_value.to_u16(),  Some(u16::max_value as u16));\n+        assert_eq!(u16::max_value.to_u32(),  Some(u16::max_value as u32));\n+        assert_eq!(u16::max_value.to_u64(),  Some(u16::max_value as u64));\n+    }\n+\n+    #[test]\n+    fn test_cast_range_u32_max() {\n+        // u32::max_value.to_int() is word-size specific\n+        assert_eq!(u32::max_value.to_i8(),   None);\n+        assert_eq!(u32::max_value.to_i16(),  None);\n+        assert_eq!(u32::max_value.to_i32(),  None);\n+        assert_eq!(u32::max_value.to_i64(),  Some(u32::max_value as i64));\n+        assert_eq!(u32::max_value.to_uint(), Some(u32::max_value as uint));\n+        assert_eq!(u32::max_value.to_u8(),   None);\n+        assert_eq!(u32::max_value.to_u16(),  None);\n+        assert_eq!(u32::max_value.to_u32(),  Some(u32::max_value as u32));\n+        assert_eq!(u32::max_value.to_u64(),  Some(u32::max_value as u64));\n+\n+        #[cfg(target_word_size = \"32\")]\n+        fn check_word_size() {\n+            assert_eq!(u32::max_value.to_int(),  None);\n+        }\n+\n+        #[cfg(target_word_size = \"64\")]\n+        fn check_word_size() {\n+            assert_eq!(u32::max_value.to_int(),  Some(u32::max_value as int));\n+        }\n+\n+        check_word_size();\n+    }\n+\n+    #[test]\n+    fn test_cast_range_u64_max() {\n+        assert_eq!(u64::max_value.to_int(),  None);\n+        assert_eq!(u64::max_value.to_i8(),   None);\n+        assert_eq!(u64::max_value.to_i16(),  None);\n+        assert_eq!(u64::max_value.to_i32(),  None);\n+        assert_eq!(u64::max_value.to_i64(),  None);\n+        // u64::max_value.to_uint() is word-size specific\n+        assert_eq!(u64::max_value.to_u8(),   None);\n+        assert_eq!(u64::max_value.to_u16(),  None);\n+        assert_eq!(u64::max_value.to_u32(),  None);\n+        assert_eq!(u64::max_value.to_u64(),  Some(u64::max_value as u64));\n+\n+        #[cfg(target_word_size = \"32\")]\n+        fn check_word_size() {\n+            assert_eq!(u64::max_value.to_uint(), None);\n+        }\n+\n+        #[cfg(target_word_size = \"64\")]\n+        fn check_word_size() {\n+            assert_eq!(u64::max_value.to_uint(), Some(u64::max_value as uint));\n+        }\n+\n+        check_word_size();\n+    }\n+\n     #[test]\n     fn test_saturating_add_uint() {\n         use uint::max_value;"}]}