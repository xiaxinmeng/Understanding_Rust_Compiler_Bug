{"sha": "014f7f4092da54315c4f4a781f2e8879a2372120", "node_id": "C_kwDOAAsO6NoAKDAxNGY3ZjQwOTJkYTU0MzE1YzRmNGE3ODFmMmU4ODc5YTIzNzIxMjA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-03T17:06:41Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-11T14:17:27Z"}, "message": "Remove some redundant arguments", "tree": {"sha": "dc9239beac9a237e1ad9238b35f5aa1ec6f47934", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc9239beac9a237e1ad9238b35f5aa1ec6f47934"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/014f7f4092da54315c4f4a781f2e8879a2372120", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/014f7f4092da54315c4f4a781f2e8879a2372120", "html_url": "https://github.com/rust-lang/rust/commit/014f7f4092da54315c4f4a781f2e8879a2372120", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/014f7f4092da54315c4f4a781f2e8879a2372120/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11fa0850f03ae49fe1053a21bcdcf8a301668ad8", "url": "https://api.github.com/repos/rust-lang/rust/commits/11fa0850f03ae49fe1053a21bcdcf8a301668ad8", "html_url": "https://github.com/rust-lang/rust/commit/11fa0850f03ae49fe1053a21bcdcf8a301668ad8"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "c450c276366e156220e09c14077eb72c23e4727b", "filename": "compiler/rustc_errors/src/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/014f7f4092da54315c4f4a781f2e8879a2372120/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014f7f4092da54315c4f4a781f2e8879a2372120/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs?ref=014f7f4092da54315c4f4a781f2e8879a2372120", "patch": "@@ -52,7 +52,6 @@ impl Emitter for AnnotateSnippetEmitterWriter {\n         let (mut primary_span, suggestions) = self.primary_span_formatted(&diag, &fluent_args);\n \n         self.fix_multispans_in_extern_macros_and_render_macro_backtrace(\n-            &self.source_map,\n             &mut primary_span,\n             &mut children,\n             &diag.level,"}, {"sha": "94df0c03b954e2952adffdf33b88fad11b7a18f7", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/014f7f4092da54315c4f4a781f2e8879a2372120/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014f7f4092da54315c4f4a781f2e8879a2372120/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=014f7f4092da54315c4f4a781f2e8879a2372120", "patch": "@@ -314,7 +314,6 @@ pub trait Emitter: Translate {\n \n     fn fix_multispans_in_extern_macros_and_render_macro_backtrace(\n         &self,\n-        source_map: &Option<Lrc<SourceMap>>,\n         span: &mut MultiSpan,\n         children: &mut Vec<SubDiagnostic>,\n         level: &Level,\n@@ -340,7 +339,7 @@ pub trait Emitter: Translate {\n             .collect();\n \n         if !backtrace {\n-            self.fix_multispans_in_extern_macros(source_map, span, children);\n+            self.fix_multispans_in_extern_macros(span, children);\n         }\n \n         self.render_multispans_macro_backtrace(span, children, backtrace);\n@@ -480,23 +479,22 @@ pub trait Emitter: Translate {\n     // this will change the span to point at the use site.\n     fn fix_multispans_in_extern_macros(\n         &self,\n-        source_map: &Option<Lrc<SourceMap>>,\n         span: &mut MultiSpan,\n         children: &mut Vec<SubDiagnostic>,\n     ) {\n-        let Some(source_map) = source_map else { return };\n         debug!(\"fix_multispans_in_extern_macros: before: span={:?} children={:?}\", span, children);\n-        self.fix_multispan_in_extern_macros(source_map, span);\n+        self.fix_multispan_in_extern_macros(span);\n         for child in children.iter_mut() {\n-            self.fix_multispan_in_extern_macros(source_map, &mut child.span);\n+            self.fix_multispan_in_extern_macros(&mut child.span);\n         }\n         debug!(\"fix_multispans_in_extern_macros: after: span={:?} children={:?}\", span, children);\n     }\n \n     // This \"fixes\" MultiSpans that contain `Span`s pointing to locations inside of external macros.\n     // Since these locations are often difficult to read,\n     // we move these spans from the external macros to their corresponding use site.\n-    fn fix_multispan_in_extern_macros(&self, source_map: &Lrc<SourceMap>, span: &mut MultiSpan) {\n+    fn fix_multispan_in_extern_macros(&self, span: &mut MultiSpan) {\n+        let Some(source_map) = self.source_map() else { return };\n         // First, find all the spans in external macros and point instead at their use site.\n         let replacements: Vec<(Span, Span)> = span\n             .primary_spans()\n@@ -544,7 +542,6 @@ impl Emitter for EmitterWriter {\n         debug!(\"emit_diagnostic: suggestions={:?}\", suggestions);\n \n         self.fix_multispans_in_extern_macros_and_render_macro_backtrace(\n-            &self.sm,\n             &mut primary_span,\n             &mut children,\n             &diag.level,"}]}