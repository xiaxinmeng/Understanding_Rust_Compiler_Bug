{"sha": "26b1ed1b92a1c3ea9e511e81a456401777dbf425", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2YjFlZDFiOTJhMWMzZWE5ZTUxMWU4MWE0NTY0MDE3NzdkYmY0MjU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-08-24T15:51:10Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-09-15T19:48:10Z"}, "message": "rustc: add unstable support for --extern crate_name without a path.", "tree": {"sha": "b87b9daa02f1f1e935aaafefc11f1d194748d21f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b87b9daa02f1f1e935aaafefc11f1d194748d21f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26b1ed1b92a1c3ea9e511e81a456401777dbf425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26b1ed1b92a1c3ea9e511e81a456401777dbf425", "html_url": "https://github.com/rust-lang/rust/commit/26b1ed1b92a1c3ea9e511e81a456401777dbf425", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26b1ed1b92a1c3ea9e511e81a456401777dbf425/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afc2149c05c7f56602fc63af64b4ffe6223e5114", "url": "https://api.github.com/repos/rust-lang/rust/commits/afc2149c05c7f56602fc63af64b4ffe6223e5114", "html_url": "https://github.com/rust-lang/rust/commit/afc2149c05c7f56602fc63af64b4ffe6223e5114"}], "stats": {"total": 64, "additions": 37, "deletions": 27}, "files": [{"sha": "4c0eeba74415076b3616e2edab6df8a32da371b7", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/26b1ed1b92a1c3ea9e511e81a456401777dbf425/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b1ed1b92a1c3ea9e511e81a456401777dbf425/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=26b1ed1b92a1c3ea9e511e81a456401777dbf425", "patch": "@@ -275,18 +275,18 @@ impl OutputTypes {\n // DO NOT switch BTreeMap or BTreeSet out for an unsorted container type! That\n // would break dependency tracking for commandline arguments.\n #[derive(Clone, Hash)]\n-pub struct Externs(BTreeMap<String, BTreeSet<String>>);\n+pub struct Externs(BTreeMap<String, BTreeSet<Option<String>>>);\n \n impl Externs {\n-    pub fn new(data: BTreeMap<String, BTreeSet<String>>) -> Externs {\n+    pub fn new(data: BTreeMap<String, BTreeSet<Option<String>>>) -> Externs {\n         Externs(data)\n     }\n \n-    pub fn get(&self, key: &str) -> Option<&BTreeSet<String>> {\n+    pub fn get(&self, key: &str) -> Option<&BTreeSet<Option<String>>> {\n         self.0.get(key)\n     }\n \n-    pub fn iter<'a>(&'a self) -> BTreeMapIter<'a, String, BTreeSet<String>> {\n+    pub fn iter<'a>(&'a self) -> BTreeMapIter<'a, String, BTreeSet<Option<String>>> {\n         self.0.iter()\n     }\n }\n@@ -2169,6 +2169,8 @@ pub fn build_session_options_and_crate_config(\n     let cfg = parse_cfgspecs(matches.opt_strs(\"cfg\"));\n     let test = matches.opt_present(\"test\");\n \n+    let is_unstable_enabled = nightly_options::is_unstable_enabled(matches);\n+\n     prints.extend(matches.opt_strs(\"print\").into_iter().map(|s| match &*s {\n         \"crate-name\" => PrintRequest::CrateName,\n         \"file-names\" => PrintRequest::FileNames,\n@@ -2182,15 +2184,13 @@ pub fn build_session_options_and_crate_config(\n         \"tls-models\" => PrintRequest::TlsModels,\n         \"native-static-libs\" => PrintRequest::NativeStaticLibs,\n         \"target-spec-json\" => {\n-            if nightly_options::is_unstable_enabled(matches) {\n+            if is_unstable_enabled {\n                 PrintRequest::TargetSpec\n             } else {\n                 early_error(\n                     error_format,\n-                    &format!(\n-                        \"the `-Z unstable-options` flag must also be passed to \\\n-                         enable the target-spec-json print option\"\n-                    ),\n+                    \"the `-Z unstable-options` flag must also be passed to \\\n+                     enable the target-spec-json print option\",\n                 );\n             }\n         }\n@@ -2220,18 +2220,19 @@ pub fn build_session_options_and_crate_config(\n             Some(s) => s,\n             None => early_error(error_format, \"--extern value must not be empty\"),\n         };\n-        let location = match parts.next() {\n-            Some(s) => s,\n-            None => early_error(\n+        let location = parts.next().map(|s| s.to_string());\n+        if location.is_none() && !is_unstable_enabled {\n+            early_error(\n                 error_format,\n-                \"--extern value must be of the format `foo=bar`\",\n-            ),\n+                \"the `-Z unstable-options` flag must also be passed to \\\n+                 enable `--extern crate_name` without `=path`\",\n+            );\n         };\n \n         externs\n             .entry(name.to_string())\n             .or_default()\n-            .insert(location.to_string());\n+            .insert(location);\n     }\n \n     let crate_name = matches.opt_str(\"crate-name\");\n@@ -2687,33 +2688,33 @@ mod tests {\n         v1.externs = Externs::new(mk_map(vec![\n             (\n                 String::from(\"a\"),\n-                mk_set(vec![String::from(\"b\"), String::from(\"c\")]),\n+                mk_set(vec![Some(String::from(\"b\")), Some(String::from(\"c\"))]),\n             ),\n             (\n                 String::from(\"d\"),\n-                mk_set(vec![String::from(\"e\"), String::from(\"f\")]),\n+                mk_set(vec![Some(String::from(\"e\")), Some(String::from(\"f\"))]),\n             ),\n         ]));\n \n         v2.externs = Externs::new(mk_map(vec![\n             (\n                 String::from(\"d\"),\n-                mk_set(vec![String::from(\"e\"), String::from(\"f\")]),\n+                mk_set(vec![Some(String::from(\"e\")), Some(String::from(\"f\"))]),\n             ),\n             (\n                 String::from(\"a\"),\n-                mk_set(vec![String::from(\"b\"), String::from(\"c\")]),\n+                mk_set(vec![Some(String::from(\"b\")), Some(String::from(\"c\"))]),\n             ),\n         ]));\n \n         v3.externs = Externs::new(mk_map(vec![\n             (\n                 String::from(\"a\"),\n-                mk_set(vec![String::from(\"b\"), String::from(\"c\")]),\n+                mk_set(vec![Some(String::from(\"b\")), Some(String::from(\"c\"))]),\n             ),\n             (\n                 String::from(\"d\"),\n-                mk_set(vec![String::from(\"f\"), String::from(\"e\")]),\n+                mk_set(vec![Some(String::from(\"f\")), Some(String::from(\"e\"))]),\n             ),\n         ]));\n "}, {"sha": "e28bb26082040f314b4ea6f3f5d0a05019ac7ed5", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/26b1ed1b92a1c3ea9e511e81a456401777dbf425/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b1ed1b92a1c3ea9e511e81a456401777dbf425/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=26b1ed1b92a1c3ea9e511e81a456401777dbf425", "patch": "@@ -132,7 +132,8 @@ impl<'a> CrateLoader<'a> {\n             // from the strings on the command line.\n             let source = &self.cstore.get_crate_data(cnum).source;\n             if let Some(locs) = self.sess.opts.externs.get(&*name.as_str()) {\n-                let found = locs.iter().any(|l| {\n+                // Only use `--extern crate_name=path` here, not `--extern crate_name`.\n+                let found = locs.iter().filter_map(|l| l.as_ref()).any(|l| {\n                     let l = fs::canonicalize(l).ok();\n                     source.dylib.as_ref().map(|p| &p.0) == l.as_ref() ||\n                     source.rlib.as_ref().map(|p| &p.0) == l.as_ref()"}, {"sha": "02207c63b34642ae7522391ffdda27ce2039db9b", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/26b1ed1b92a1c3ea9e511e81a456401777dbf425/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b1ed1b92a1c3ea9e511e81a456401777dbf425/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=26b1ed1b92a1c3ea9e511e81a456401777dbf425", "patch": "@@ -438,7 +438,12 @@ impl<'a> Context<'a> {\n         if self.hash.is_none() {\n             self.should_match_name = false;\n             if let Some(s) = self.sess.opts.externs.get(&self.crate_name.as_str()) {\n-                return self.find_commandline_library(s.iter());\n+                // Only use `--extern crate_name=path` here, not `--extern crate_name`.\n+                if s.iter().any(|l| l.is_some()) {\n+                    return self.find_commandline_library(\n+                        s.iter().filter_map(|l| l.as_ref()),\n+                    );\n+                }\n             }\n             self.should_match_name = true;\n         }"}, {"sha": "73057b19016c6a6081095cec2216e44bb1e44879", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/26b1ed1b92a1c3ea9e511e81a456401777dbf425/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b1ed1b92a1c3ea9e511e81a456401777dbf425/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=26b1ed1b92a1c3ea9e511e81a456401777dbf425", "patch": "@@ -609,16 +609,19 @@ where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n /// Extracts `--extern CRATE=PATH` arguments from `matches` and\n /// returns a map mapping crate names to their paths or else an\n /// error message.\n+// FIXME(eddyb) This shouldn't be duplicated with `rustc::session`.\n fn parse_externs(matches: &getopts::Matches) -> Result<Externs, String> {\n     let mut externs: BTreeMap<_, BTreeSet<_>> = BTreeMap::new();\n     for arg in &matches.opt_strs(\"extern\") {\n         let mut parts = arg.splitn(2, '=');\n         let name = parts.next().ok_or(\"--extern value must not be empty\".to_string())?;\n-        let location = parts.next()\n-                                 .ok_or(\"--extern value must be of the format `foo=bar`\"\n-                                    .to_string())?;\n+        let location = parts.next().map(|s| s.to_string());\n+        if location.is_none() && !nightly_options::is_unstable_enabled(matches) {\n+            return Err(\"the `-Z unstable-options` flag must also be passed to \\\n+                        enable `--extern crate_name` without `=path`\".to_string());\n+        }\n         let name = name.to_string();\n-        externs.entry(name).or_default().insert(location.to_string());\n+        externs.entry(name).or_default().insert(location);\n     }\n     Ok(Externs::new(externs))\n }"}]}