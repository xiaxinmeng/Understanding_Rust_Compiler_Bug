{"sha": "4853a6e78e7ad6ec2ad63c3f23929ed027255b3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NTNhNmU3OGU3YWQ2ZWMyYWQ2M2MzZjIzOTI5ZWQwMjcyNTViM2Y=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-07T17:01:56Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-16T04:19:00Z"}, "message": "Take sys/vxworks/stdio from sys/unix instead.", "tree": {"sha": "b61c1a7832b97c77da5ccf261127425808741b94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b61c1a7832b97c77da5ccf261127425808741b94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4853a6e78e7ad6ec2ad63c3f23929ed027255b3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4853a6e78e7ad6ec2ad63c3f23929ed027255b3f", "html_url": "https://github.com/rust-lang/rust/commit/4853a6e78e7ad6ec2ad63c3f23929ed027255b3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4853a6e78e7ad6ec2ad63c3f23929ed027255b3f/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d526f6eee0e700084a28dad482b66891038a8f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d526f6eee0e700084a28dad482b66891038a8f5", "html_url": "https://github.com/rust-lang/rust/commit/5d526f6eee0e700084a28dad482b66891038a8f5"}], "stats": {"total": 70, "additions": 1, "deletions": 69}, "files": [{"sha": "3b5f2f8561ff6d8fa057adf234dcd799f0aef616", "filename": "library/std/src/sys/vxworks/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4853a6e78e7ad6ec2ad63c3f23929ed027255b3f/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4853a6e78e7ad6ec2ad63c3f23929ed027255b3f/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs?ref=4853a6e78e7ad6ec2ad63c3f23929ed027255b3f", "patch": "@@ -30,6 +30,7 @@ pub mod rand;\n pub mod rwlock;\n #[path = \"../unix/stack_overflow.rs\"]\n pub mod stack_overflow;\n+#[path = \"../unix/stdio.rs\"]\n pub mod stdio;\n #[path = \"../unix/thread.rs\"]\n pub mod thread;"}, {"sha": "92e9f205b4e6e2edaf2c7ac85c31f6bed2e00f88", "filename": "library/std/src/sys/vxworks/stdio.rs", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/5d526f6eee0e700084a28dad482b66891038a8f5/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d526f6eee0e700084a28dad482b66891038a8f5/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fstdio.rs?ref=5d526f6eee0e700084a28dad482b66891038a8f5", "patch": "@@ -1,69 +0,0 @@\n-use crate::io;\n-use crate::sys::fd::FileDesc;\n-\n-pub struct Stdin(());\n-pub struct Stdout(());\n-pub struct Stderr(());\n-\n-impl Stdin {\n-    pub const fn new() -> Stdin {\n-        Stdin(())\n-    }\n-}\n-\n-impl io::Read for Stdin {\n-    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n-        let fd = FileDesc::new(libc::STDIN_FILENO);\n-        let ret = fd.read(buf);\n-        fd.into_raw(); // do not close this FD\n-        ret\n-    }\n-}\n-\n-impl Stdout {\n-    pub const fn new() -> Stdout {\n-        Stdout(())\n-    }\n-}\n-\n-impl io::Write for Stdout {\n-    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        let fd = FileDesc::new(libc::STDOUT_FILENO);\n-        let ret = fd.write(buf);\n-        fd.into_raw(); // do not close this FD\n-        ret\n-    }\n-\n-    fn flush(&mut self) -> io::Result<()> {\n-        Ok(())\n-    }\n-}\n-\n-impl Stderr {\n-    pub const fn new() -> Stderr {\n-        Stderr(())\n-    }\n-}\n-\n-impl io::Write for Stderr {\n-    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        let fd = FileDesc::new(libc::STDERR_FILENO);\n-        let ret = fd.write(buf);\n-        fd.into_raw(); // do not close this FD\n-        ret\n-    }\n-\n-    fn flush(&mut self) -> io::Result<()> {\n-        Ok(())\n-    }\n-}\n-\n-pub fn is_ebadf(err: &io::Error) -> bool {\n-    err.raw_os_error() == Some(libc::EBADF as i32)\n-}\n-\n-pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;\n-\n-pub fn panic_output() -> Option<impl io::Write> {\n-    Some(Stderr::new())\n-}"}]}