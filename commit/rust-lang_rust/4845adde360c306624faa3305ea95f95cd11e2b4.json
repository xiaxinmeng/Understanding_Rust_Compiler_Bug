{"sha": "4845adde360c306624faa3305ea95f95cd11e2b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NDVhZGRlMzYwYzMwNjYyNGZhYTMzMDVlYTk1Zjk1Y2QxMWUyYjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-22T23:26:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-22T23:26:54Z"}, "message": "Auto merge of #37301 - jseyfried:improve_metadata_modules, r=eddyb\n\nmetadata: improve some confusing type and module names\n\nr? @eddyb", "tree": {"sha": "f5f4cc1fa4fe8306bcbdcef1516eecc40aab639d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5f4cc1fa4fe8306bcbdcef1516eecc40aab639d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4845adde360c306624faa3305ea95f95cd11e2b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4845adde360c306624faa3305ea95f95cd11e2b4", "html_url": "https://github.com/rust-lang/rust/commit/4845adde360c306624faa3305ea95f95cd11e2b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4845adde360c306624faa3305ea95f95cd11e2b4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a117bba12535b7632a9fa08072f26e19aa5c0a94", "url": "https://api.github.com/repos/rust-lang/rust/commits/a117bba12535b7632a9fa08072f26e19aa5c0a94", "html_url": "https://github.com/rust-lang/rust/commit/a117bba12535b7632a9fa08072f26e19aa5c0a94"}, {"sha": "f3993d1a7f9176140f233ff93ea68f76d80d8250", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3993d1a7f9176140f233ff93ea68f76d80d8250", "html_url": "https://github.com/rust-lang/rust/commit/f3993d1a7f9176140f233ff93ea68f76d80d8250"}], "stats": {"total": 137, "additions": 59, "deletions": 78}, "files": [{"sha": "9b27f7a29e9a87832c7813c14646b25c9d11c1a8", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4845adde360c306624faa3305ea95f95cd11e2b4/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4845adde360c306624faa3305ea95f95cd11e2b4/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=4845adde360c306624faa3305ea95f95cd11e2b4", "patch": "@@ -645,7 +645,8 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n     // its contents but the results of name resolution on those contents. Hopefully we'll push\n     // this back at some point.\n     let _ignore = sess.dep_graph.in_ignore();\n-    let mut crate_loader = CrateLoader::new(sess, &cstore, &krate, crate_name);\n+    let mut crate_loader = CrateLoader::new(sess, &cstore, crate_name, krate.config.clone());\n+    crate_loader.preprocess(&krate);\n     let resolver_arenas = Resolver::arenas();\n     let mut resolver =\n         Resolver::new(sess, &krate, make_glob_map, &mut crate_loader, &resolver_arenas);"}, {"sha": "cb001688da286e24c49249e40a51670841a9cc72", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4845adde360c306624faa3305ea95f95cd11e2b4/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4845adde360c306624faa3305ea95f95cd11e2b4/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=4845adde360c306624faa3305ea95f95cd11e2b4", "patch": "@@ -77,7 +77,7 @@ use rustc::session::config::nightly_options;\n use rustc::session::early_error;\n use rustc::lint::Lint;\n use rustc::lint;\n-use rustc_metadata::loader;\n+use rustc_metadata::locator;\n use rustc_metadata::cstore::CStore;\n use rustc::util::common::time;\n \n@@ -578,8 +578,7 @@ impl RustcDefaultCalls {\n                 &Input::File(ref ifile) => {\n                     let path = &(*ifile);\n                     let mut v = Vec::new();\n-                    loader::list_file_metadata(&sess.target.target, path, &mut v)\n-                        .unwrap();\n+                    locator::list_file_metadata(&sess.target.target, path, &mut v).unwrap();\n                     println!(\"{}\", String::from_utf8(v).unwrap());\n                 }\n                 &Input::Str { .. } => {"}, {"sha": "7ae3f6f81079e9cf75723d12e55021add8b5e181", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 39, "deletions": 53, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/4845adde360c306624faa3305ea95f95cd11e2b4/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4845adde360c306624faa3305ea95f95cd11e2b4/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=4845adde360c306624faa3305ea95f95cd11e2b4", "patch": "@@ -11,7 +11,7 @@\n //! Validates all used crates and extern libraries and loads their metadata\n \n use cstore::{self, CStore, CrateSource, MetadataBlob};\n-use loader::{self, CratePaths};\n+use locator::{self, CratePaths};\n use macro_import;\n use schema::CrateRoot;\n \n@@ -40,14 +40,14 @@ use syntax::parse::token::InternedString;\n use syntax_pos::{self, Span, mk_sp};\n use log;\n \n-pub struct CrateLoader<'a> {\n-    pub sess: &'a Session,\n-    pub creader: CrateReader<'a>,\n-    cstore: &'a CStore,\n+pub struct Library {\n+    pub dylib: Option<(PathBuf, PathKind)>,\n+    pub rlib: Option<(PathBuf, PathKind)>,\n+    pub metadata: MetadataBlob,\n }\n \n-pub struct CrateReader<'a> {\n-    sess: &'a Session,\n+pub struct CrateLoader<'a> {\n+    pub sess: &'a Session,\n     cstore: &'a CStore,\n     next_crate_num: CrateNum,\n     foreign_item_map: FnvHashMap<String, Vec<ast::NodeId>>,\n@@ -129,7 +129,7 @@ struct ExtensionCrate {\n \n enum PMDSource {\n     Registered(Rc<cstore::CrateMetadata>),\n-    Owned(loader::Library),\n+    Owned(Library),\n }\n \n impl Deref for PMDSource {\n@@ -145,7 +145,7 @@ impl Deref for PMDSource {\n \n enum LoadResult {\n     Previous(CrateNum),\n-    Loaded(loader::Library),\n+    Loaded(Library),\n }\n \n pub struct Macros {\n@@ -159,13 +159,13 @@ pub struct Macros {\n     pub dylib: Option<PathBuf>,\n }\n \n-impl<'a> CrateReader<'a> {\n+impl<'a> CrateLoader<'a> {\n     pub fn new(sess: &'a Session,\n                cstore: &'a CStore,\n                local_crate_name: &str,\n                local_crate_config: ast::CrateConfig)\n-               -> CrateReader<'a> {\n-        CrateReader {\n+               -> Self {\n+        CrateLoader {\n             sess: sess,\n             cstore: cstore,\n             next_crate_num: cstore.next_crate_num(),\n@@ -281,7 +281,7 @@ impl<'a> CrateReader<'a> {\n                       ident: &str,\n                       name: &str,\n                       span: Span,\n-                      lib: loader::Library,\n+                      lib: Library,\n                       explicitly_linked: bool)\n                       -> (CrateNum, Rc<cstore::CrateMetadata>,\n                           cstore::CrateSource) {\n@@ -306,7 +306,7 @@ impl<'a> CrateReader<'a> {\n         // Maintain a reference to the top most crate.\n         let root = if root.is_some() { root } else { &crate_paths };\n \n-        let loader::Library { dylib, rlib, metadata } = lib;\n+        let Library { dylib, rlib, metadata } = lib;\n \n         let cnum_map = self.resolve_crate_deps(root, &crate_root, &metadata, cnum, span);\n \n@@ -352,7 +352,7 @@ impl<'a> CrateReader<'a> {\n             Some(cnum) => LoadResult::Previous(cnum),\n             None => {\n                 info!(\"falling back to a load\");\n-                let mut load_ctxt = loader::Context {\n+                let mut locate_ctxt = locator::Context {\n                     sess: self.sess,\n                     span: span,\n                     ident: ident,\n@@ -368,9 +368,9 @@ impl<'a> CrateReader<'a> {\n                     rejected_via_version: vec!(),\n                     should_match_name: true,\n                 };\n-                match self.load(&mut load_ctxt) {\n+                match self.load(&mut locate_ctxt) {\n                     Some(result) => result,\n-                    None => load_ctxt.report_load_errs(),\n+                    None => locate_ctxt.report_errs(),\n                 }\n             }\n         };\n@@ -390,8 +390,8 @@ impl<'a> CrateReader<'a> {\n         }\n     }\n \n-    fn load(&mut self, loader: &mut loader::Context) -> Option<LoadResult> {\n-        let library = match loader.maybe_load_library_crate() {\n+    fn load(&mut self, locate_ctxt: &mut locator::Context) -> Option<LoadResult> {\n+        let library = match locate_ctxt.maybe_load_library_crate() {\n             Some(lib) => lib,\n             None => return None,\n         };\n@@ -405,11 +405,11 @@ impl<'a> CrateReader<'a> {\n         // don't want to match a host crate against an equivalent target one\n         // already loaded.\n         let root = library.metadata.get_root();\n-        if loader.triple == self.sess.opts.target_triple {\n+        if locate_ctxt.triple == self.sess.opts.target_triple {\n             let mut result = LoadResult::Loaded(library);\n             self.cstore.iter_crate_data(|cnum, data| {\n                 if data.name() == root.name && root.hash == data.hash() {\n-                    assert!(loader.hash.is_none());\n+                    assert!(locate_ctxt.hash.is_none());\n                     info!(\"load success, going to previous cnum: {}\", cnum);\n                     result = LoadResult::Previous(cnum);\n                 }\n@@ -494,7 +494,7 @@ impl<'a> CrateReader<'a> {\n         let mut target_only = false;\n         let ident = info.ident.clone();\n         let name = info.name.clone();\n-        let mut load_ctxt = loader::Context {\n+        let mut locate_ctxt = locator::Context {\n             sess: self.sess,\n             span: span,\n             ident: &ident[..],\n@@ -510,7 +510,7 @@ impl<'a> CrateReader<'a> {\n             rejected_via_version: vec!(),\n             should_match_name: true,\n         };\n-        let library = self.load(&mut load_ctxt).or_else(|| {\n+        let library = self.load(&mut locate_ctxt).or_else(|| {\n             if !is_cross {\n                 return None\n             }\n@@ -519,15 +519,15 @@ impl<'a> CrateReader<'a> {\n             target_only = true;\n             should_link = info.should_link;\n \n-            load_ctxt.target = &self.sess.target.target;\n-            load_ctxt.triple = target_triple;\n-            load_ctxt.filesearch = self.sess.target_filesearch(PathKind::Crate);\n+            locate_ctxt.target = &self.sess.target.target;\n+            locate_ctxt.triple = target_triple;\n+            locate_ctxt.filesearch = self.sess.target_filesearch(PathKind::Crate);\n \n-            self.load(&mut load_ctxt)\n+            self.load(&mut locate_ctxt)\n         });\n         let library = match library {\n             Some(l) => l,\n-            None => load_ctxt.report_load_errs(),\n+            None => locate_ctxt.report_errs(),\n         };\n \n         let (dylib, metadata) = match library {\n@@ -890,7 +890,7 @@ impl<'a> CrateReader<'a> {\n }\n \n impl ExtensionCrate {\n-    fn register(self, creader: &mut CrateReader) {\n+    fn register(self, loader: &mut CrateLoader) {\n         if !self.should_link {\n             return\n         }\n@@ -901,31 +901,17 @@ impl ExtensionCrate {\n         };\n \n         // Register crate now to avoid double-reading metadata\n-        creader.register_crate(&None,\n-                               &self.ident,\n-                               &self.name,\n-                               self.span,\n-                               library,\n-                               true);\n+        loader.register_crate(&None, &self.ident, &self.name, self.span, library, true);\n     }\n }\n \n impl<'a> CrateLoader<'a> {\n-    pub fn new(sess: &'a Session, cstore: &'a CStore, krate: &ast::Crate, crate_name: &str)\n-               -> Self {\n-        let loader = CrateLoader {\n-            sess: sess,\n-            cstore: cstore,\n-            creader: CrateReader::new(sess, cstore, crate_name, krate.config.clone()),\n-        };\n-\n+    pub fn preprocess(&mut self, krate: &ast::Crate) {\n         for attr in krate.attrs.iter().filter(|m| m.name() == \"link_args\") {\n             if let Some(ref linkarg) = attr.value_str() {\n-                loader.cstore.add_used_link_args(&linkarg);\n+                self.cstore.add_used_link_args(&linkarg);\n             }\n         }\n-\n-        loader\n     }\n \n     fn process_foreign_mod(&mut self, i: &ast::Item, fm: &ast::ForeignMod) {\n@@ -982,7 +968,7 @@ impl<'a> CrateLoader<'a> {\n                 Some(name) => name,\n                 None => continue,\n             };\n-            let list = self.creader.foreign_item_map.entry(lib_name.to_string())\n+            let list = self.foreign_item_map.entry(lib_name.to_string())\n                                                     .or_insert(Vec::new());\n             list.extend(fm.items.iter().map(|it| it.id));\n         }\n@@ -991,8 +977,8 @@ impl<'a> CrateLoader<'a> {\n \n impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n     fn postprocess(&mut self, krate: &ast::Crate) {\n-        self.creader.inject_allocator_crate();\n-        self.creader.inject_panic_runtime(krate);\n+        self.inject_allocator_crate();\n+        self.inject_panic_runtime(krate);\n \n         if log_enabled!(log::INFO) {\n             dump_crates(&self.cstore);\n@@ -1001,7 +987,7 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n         for &(ref name, kind) in &self.sess.opts.libs {\n             register_native_lib(self.sess, self.cstore, None, name.clone(), kind);\n         }\n-        self.creader.register_statically_included_foreign_items();\n+        self.register_statically_included_foreign_items();\n     }\n \n     fn process_item(&mut self, item: &ast::Item, definitions: &hir_map::Definitions) {\n@@ -1024,12 +1010,12 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n             }\n         }\n \n-        if let Some(info) = self.creader.extract_crate_info(item) {\n+        if let Some(info) = self.extract_crate_info(item) {\n             if !info.should_link {\n                 return;\n             }\n \n-            let (cnum, ..) = self.creader.resolve_crate(\n+            let (cnum, ..) = self.resolve_crate(\n                 &None, &info.ident, &info.name, None, item.span, PathKind::Crate, true,\n             );\n \n@@ -1038,7 +1024,7 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n \n             let extern_crate =\n                 ExternCrate { def_id: def_id, span: item.span, direct: true, path_len: len };\n-            self.creader.update_extern_crate(cnum, extern_crate, &mut FnvHashSet());\n+            self.update_extern_crate(cnum, extern_crate, &mut FnvHashSet());\n \n             self.cstore.add_extern_mod_stmt_cnum(info.id, cnum);\n         }"}, {"sha": "a87e61c4c944c54ec213e1b8b131470ab789eedf", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4845adde360c306624faa3305ea95f95cd11e2b4/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4845adde360c306624faa3305ea95f95cd11e2b4/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=4845adde360c306624faa3305ea95f95cd11e2b4", "patch": "@@ -11,7 +11,7 @@\n // The crate store - a central repo for information collected about external\n // crates and libraries\n \n-use loader;\n+use locator;\n use schema;\n \n use rustc::dep_graph::DepGraph;\n@@ -43,7 +43,7 @@ pub type CrateNumMap = IndexVec<CrateNum, CrateNum>;\n \n pub enum MetadataBlob {\n     Inflated(Bytes),\n-    Archive(loader::ArchiveMetadata),\n+    Archive(locator::ArchiveMetadata),\n }\n \n /// Holds information about a syntax_pos::FileMap imported from another crate."}, {"sha": "7637b769f937755fcfe62c23190634fd0b090b61", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4845adde360c306624faa3305ea95f95cd11e2b4/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4845adde360c306624faa3305ea95f95cd11e2b4/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=4845adde360c306624faa3305ea95f95cd11e2b4", "patch": "@@ -10,7 +10,7 @@\n \n use cstore;\n use encoder;\n-use loader;\n+use locator;\n use schema;\n \n use rustc::middle::cstore::{InlinedItem, CrateStore, CrateSource, ExternCrate};\n@@ -497,12 +497,12 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n \n     fn metadata_filename(&self) -> &str\n     {\n-        loader::METADATA_FILENAME\n+        locator::METADATA_FILENAME\n     }\n \n     fn metadata_section_name(&self, target: &Target) -> &str\n     {\n-        loader::meta_section_name(target)\n+        locator::meta_section_name(target)\n     }\n \n     fn used_crates(&self, prefer: LinkagePreference) -> Vec<(CrateNum, Option<PathBuf>)>", "previous_filename": "src/librustc_metadata/csearch.rs"}, {"sha": "c0fc1a7065cc0d34dd5d894056320fea77cd6925", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4845adde360c306624faa3305ea95f95cd11e2b4/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4845adde360c306624faa3305ea95f95cd11e2b4/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=4845adde360c306624faa3305ea95f95cd11e2b4", "patch": "@@ -53,12 +53,12 @@ mod index_builder;\n mod index;\n mod encoder;\n mod decoder;\n-mod csearch;\n+mod cstore_impl;\n mod schema;\n \n pub mod creader;\n pub mod cstore;\n-pub mod loader;\n+pub mod locator;\n pub mod macro_import;\n \n __build_diagnostic_array! { librustc_metadata, DIAGNOSTICS }"}, {"sha": "e684cd16366ec41ca5d030b863a33646eed31d98", "filename": "src/librustc_metadata/locator.rs", "status": "renamed", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4845adde360c306624faa3305ea95f95cd11e2b4/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4845adde360c306624faa3305ea95f95cd11e2b4/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=4845adde360c306624faa3305ea95f95cd11e2b4", "patch": "@@ -210,9 +210,10 @@\n //!\n //! That's the general overview of loading crates in the compiler, but it's by\n //! no means all of the necessary details. Take a look at the rest of\n-//! metadata::loader or metadata::creader for all the juicy details!\n+//! metadata::locator or metadata::creader for all the juicy details!\n \n use cstore::MetadataBlob;\n+use creader::Library;\n use schema::{METADATA_HEADER, rustc_version};\n \n use rustc::hir::svh::Svh;\n@@ -263,12 +264,6 @@ pub struct Context<'a> {\n     pub should_match_name: bool,\n }\n \n-pub struct Library {\n-    pub dylib: Option<(PathBuf, PathKind)>,\n-    pub rlib: Option<(PathBuf, PathKind)>,\n-    pub metadata: MetadataBlob,\n-}\n-\n pub struct ArchiveMetadata {\n     _archive: ArchiveRO,\n     // points into self._archive\n@@ -315,10 +310,10 @@ impl<'a> Context<'a> {\n     }\n \n     pub fn load_library_crate(&mut self) -> Library {\n-        self.find_library_crate().unwrap_or_else(|| self.report_load_errs())\n+        self.find_library_crate().unwrap_or_else(|| self.report_errs())\n     }\n \n-    pub fn report_load_errs(&mut self) -> ! {\n+    pub fn report_errs(&mut self) -> ! {\n         let add = match self.root {\n             &None => String::new(),\n             &Some(ref r) => format!(\" which `{}` depends on\",", "previous_filename": "src/librustc_metadata/loader.rs"}, {"sha": "ddc254a16d9f496a0a7e7b3fc5e07ee974eec468", "filename": "src/librustc_metadata/macro_import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4845adde360c306624faa3305ea95f95cd11e2b4/src%2Flibrustc_metadata%2Fmacro_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4845adde360c306624faa3305ea95f95cd11e2b4/src%2Flibrustc_metadata%2Fmacro_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fmacro_import.rs?ref=4845adde360c306624faa3305ea95f95cd11e2b4", "patch": "@@ -110,7 +110,7 @@ impl<'a> CrateLoader<'a> {\n             if sel.is_empty() && reexport.is_empty() {\n                 // Make sure we can read macros from `#[no_link]` crates.\n                 if no_link {\n-                    self.creader.read_macros(vi);\n+                    self.read_macros(vi);\n                 }\n                 return Vec::new();\n             }\n@@ -122,7 +122,7 @@ impl<'a> CrateLoader<'a> {\n             return Vec::new();\n         }\n \n-        let mut macros = self.creader.read_macros(vi);\n+        let mut macros = self.read_macros(vi);\n         let mut ret = Vec::new();\n         let mut seen = HashSet::new();\n "}, {"sha": "669df3ad95065ae8195e1a1e5e6768be6fef6aa5", "filename": "src/librustc_plugin/load.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4845adde360c306624faa3305ea95f95cd11e2b4/src%2Flibrustc_plugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4845adde360c306624faa3305ea95f95cd11e2b4/src%2Flibrustc_plugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fload.rs?ref=4845adde360c306624faa3305ea95f95cd11e2b4", "patch": "@@ -11,7 +11,7 @@\n //! Used by `rustc` when loading a plugin.\n \n use rustc::session::Session;\n-use rustc_metadata::creader::CrateReader;\n+use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::CStore;\n use registry::Registry;\n \n@@ -33,7 +33,7 @@ pub struct PluginRegistrar {\n \n struct PluginLoader<'a> {\n     sess: &'a Session,\n-    reader: CrateReader<'a>,\n+    reader: CrateLoader<'a>,\n     plugins: Vec<PluginRegistrar>,\n }\n \n@@ -96,7 +96,7 @@ impl<'a> PluginLoader<'a> {\n             -> PluginLoader<'a> {\n         PluginLoader {\n             sess: sess,\n-            reader: CrateReader::new(sess, cstore, crate_name, crate_config),\n+            reader: CrateLoader::new(sess, cstore, crate_name, crate_config),\n             plugins: vec![],\n         }\n     }"}]}