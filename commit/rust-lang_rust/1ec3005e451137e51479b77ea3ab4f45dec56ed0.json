{"sha": "1ec3005e451137e51479b77ea3ab4f45dec56ed0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYzMwMDVlNDUxMTM3ZTUxNDc5Yjc3ZWEzYWI0ZjQ1ZGVjNTZlZDA=", "commit": {"author": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-02-11T17:52:39Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-02-27T07:01:41Z"}, "message": "fix fallout from libsyntax enumpocalypse", "tree": {"sha": "4f9934619f6023cde50cf461c33cea0433fa04f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f9934619f6023cde50cf461c33cea0433fa04f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ec3005e451137e51479b77ea3ab4f45dec56ed0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec3005e451137e51479b77ea3ab4f45dec56ed0", "html_url": "https://github.com/rust-lang/rust/commit/1ec3005e451137e51479b77ea3ab4f45dec56ed0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ec3005e451137e51479b77ea3ab4f45dec56ed0/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eb7c56bd43b2ae12ef8b92e7258d520099a5347", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb7c56bd43b2ae12ef8b92e7258d520099a5347", "html_url": "https://github.com/rust-lang/rust/commit/7eb7c56bd43b2ae12ef8b92e7258d520099a5347"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "94f9cf6546d709f1dcf2900e79865bae8780ee6f", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ec3005e451137e51479b77ea3ab4f45dec56ed0/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec3005e451137e51479b77ea3ab4f45dec56ed0/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=1ec3005e451137e51479b77ea3ab4f45dec56ed0", "patch": "@@ -1003,7 +1003,7 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                 self.gate_feature(\"type_ascription\", e.span,\n                                   \"type ascription is experimental\");\n             }\n-            ast::ExprRange(_, _, ast::RangeLimits::Closed) => {\n+            ast::ExprKind::Range(_, _, ast::RangeLimits::Closed) => {\n                 self.gate_feature(\"inclusive_range_syntax\",\n                                   e.span,\n                                   \"inclusive range syntax is experimental\");"}, {"sha": "e772641aca5a6187cf29ea4d7329eab745e7b93a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ec3005e451137e51479b77ea3ab4f45dec56ed0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec3005e451137e51479b77ea3ab4f45dec56ed0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1ec3005e451137e51479b77ea3ab4f45dec56ed0", "patch": "@@ -2056,7 +2056,7 @@ impl<'a> Parser<'a> {\n                     start: Option<P<Expr>>,\n                     end: Option<P<Expr>>,\n                     limits: RangeLimits)\n-                    -> ast::Expr_ {\n+                    -> ast::ExprKind {\n         ExprKind::Range(start, end, limits)\n     }\n "}, {"sha": "55c1af44cab856aa197d8b9bdd75baa2690e3fc5", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ec3005e451137e51479b77ea3ab4f45dec56ed0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec3005e451137e51479b77ea3ab4f45dec56ed0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=1ec3005e451137e51479b77ea3ab4f45dec56ed0", "patch": "@@ -2163,7 +2163,7 @@ impl<'a> State<'a> {\n                 try!(self.print_expr(&index));\n                 try!(word(&mut self.s, \"]\"));\n             }\n-            ast::ExprKing::Range(ref start, ref end, limits) => {\n+            ast::ExprKind::Range(ref start, ref end, limits) => {\n                 if let &Some(ref e) = start {\n                     try!(self.print_expr(&e));\n                 }"}]}