{"sha": "f749d97b8a1fdea250642f9f92d050452a081d37", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NDlkOTdiOGExZmRlYTI1MDY0MmY5ZjkyZDA1MDQ1MmEwODFkMzc=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-06-14T00:15:45Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-06-29T03:01:15Z"}, "message": "Add regression test for #86208\n\nThis test does not test the output as well as I would like, but I think\nI am limited by htmldocck. I would really just like to strip all the\nHTML tags from the output for the sake of the different `@has` checks,\nbut that doesn't seem to be currently possible.", "tree": {"sha": "a869e4423c36a5d78745dedf0312077bcd929d5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a869e4423c36a5d78745dedf0312077bcd929d5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f749d97b8a1fdea250642f9f92d050452a081d37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f749d97b8a1fdea250642f9f92d050452a081d37", "html_url": "https://github.com/rust-lang/rust/commit/f749d97b8a1fdea250642f9f92d050452a081d37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f749d97b8a1fdea250642f9f92d050452a081d37/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18db83fde5192252fa17188ebb13bf48679db01f", "url": "https://api.github.com/repos/rust-lang/rust/commits/18db83fde5192252fa17188ebb13bf48679db01f", "html_url": "https://github.com/rust-lang/rust/commit/18db83fde5192252fa17188ebb13bf48679db01f"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "e3550aea472483faffa354021ee277052c2db610", "filename": "src/test/rustdoc/macro_rules-matchers.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f749d97b8a1fdea250642f9f92d050452a081d37/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f749d97b8a1fdea250642f9f92d050452a081d37/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacro_rules-matchers.rs?ref=f749d97b8a1fdea250642f9f92d050452a081d37", "patch": "@@ -0,0 +1,42 @@\n+// This is a regression test for issue #86208.\n+// It is also a general test of macro_rules! display.\n+\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/macro.todo.html'\n+// @has - '//span[@class=\"macro\"]' 'macro_rules!'\n+// @has - '//span[@class=\"ident\"]' 'todo'\n+// Note: count = 2 * ('=' + '>') + '+' = 2 * (1 + 1) + 1 = 5\n+// @count - '//span[@class=\"op\"]' 5\n+\n+// @has - '{ ()'\n+// @has - '//span[@class=\"op\"]' '='\n+// @has - '//span[@class=\"op\"]' '>'\n+// @has - '{ ... };'\n+\n+// @has - '($('\n+// @has - '//span[@class=\"macro-nonterminal\"]' '$'\n+// @has - '//span[@class=\"macro-nonterminal\"]' 'arg'\n+// @has - ':'\n+// @has - '//span[@class=\"ident\"]' 'tt'\n+// @has - '//span[@class=\"op\"]' '+'\n+// @has - ')'\n+pub use std::todo;\n+\n+mod mod1 {\n+    // @has 'foo/macro.macro1.html'\n+    // @has - 'macro_rules!'\n+    // @has - 'macro1'\n+    // @has - '{ ()'\n+    // @has - '($('\n+    // @has - 'arg'\n+    // @has - 'expr'\n+    // @has - ','\n+    // @has - '+'\n+    // @has - ')'\n+    #[macro_export]\n+    macro_rules! macro1 {\n+        () => {};\n+        ($($arg:expr),+) => { stringify!($($arg),+) };\n+    }\n+}"}]}