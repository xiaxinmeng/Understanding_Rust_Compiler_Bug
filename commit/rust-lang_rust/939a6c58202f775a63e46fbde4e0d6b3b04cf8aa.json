{"sha": "939a6c58202f775a63e46fbde4e0d6b3b04cf8aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzOWE2YzU4MjAyZjc3NWE2M2U0NmZiZGU0ZTBkNmIzYjA0Y2Y4YWE=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-23T15:29:59Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-23T15:29:59Z"}, "message": "Get rid of GenericsArg wrapper type\n\n`GenericsArg` is basically identical to `ast::GenericParam`.\nJust use the latter.", "tree": {"sha": "2a6f95e5798d18f0adaa67fdc4280bca1300a873", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a6f95e5798d18f0adaa67fdc4280bca1300a873"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/939a6c58202f775a63e46fbde4e0d6b3b04cf8aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/939a6c58202f775a63e46fbde4e0d6b3b04cf8aa", "html_url": "https://github.com/rust-lang/rust/commit/939a6c58202f775a63e46fbde4e0d6b3b04cf8aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/939a6c58202f775a63e46fbde4e0d6b3b04cf8aa/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ef6bccea37839b3d33cbadc15e5e243b6371ea5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef6bccea37839b3d33cbadc15e5e243b6371ea5", "html_url": "https://github.com/rust-lang/rust/commit/1ef6bccea37839b3d33cbadc15e5e243b6371ea5"}], "stats": {"total": 79, "additions": 23, "deletions": 56}, "files": [{"sha": "d09d95699b7d7e04e74c26f465341ab2817bd89c", "filename": "src/items.rs", "status": "modified", "additions": 14, "deletions": 43, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/939a6c58202f775a63e46fbde4e0d6b3b04cf8aa/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939a6c58202f775a63e46fbde4e0d6b3b04cf8aa/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=939a6c58202f775a63e46fbde4e0d6b3b04cf8aa", "patch": "@@ -30,9 +30,9 @@ use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n use spanned::Spanned;\n use types::join_bounds;\n-use utils::{colon_spaces, contains_skip, end_typaram, first_line_width, format_abi,\n-            format_constness, format_defaultness, format_mutability, format_unsafety,\n-            format_visibility, is_attributes_extendable, last_line_contains_single_line_comment,\n+use utils::{colon_spaces, contains_skip, first_line_width, format_abi, format_constness,\n+            format_defaultness, format_mutability, format_unsafety, format_visibility,\n+            is_attributes_extendable, last_line_contains_single_line_comment,\n             last_line_used_width, last_line_width, mk_sp, semicolon_for_expr, starts_with_newline,\n             stmt_expr, trim_newlines, trimmed_last_line_width};\n use vertical::rewrite_with_alignment;\n@@ -1871,12 +1871,8 @@ fn rewrite_fn_base(\n         .generics\n         .params\n         .iter()\n-        .filter_map(|p| match p {\n-            &ast::GenericParam::Type(ref t) => Some(t),\n-            _ => None,\n-        })\n         .last()\n-        .map_or(lo_after_visibility, |tp| end_typaram(tp));\n+        .map_or(lo_after_visibility, |param| param.span().hi());\n     let args_end = if fd.inputs.is_empty() {\n         context\n             .codemap\n@@ -2346,47 +2342,13 @@ fn rewrite_generics_inner(\n     // FIXME: convert bounds to where clauses where they get too big or if\n     // there is a where clause at all.\n \n-    // Wrapper type\n-    enum GenericsArg<'a> {\n-        Lifetime(&'a ast::LifetimeDef),\n-        TyParam(&'a ast::TyParam),\n-    }\n-    impl<'a> Rewrite for GenericsArg<'a> {\n-        fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-            match *self {\n-                GenericsArg::Lifetime(lifetime) => lifetime.rewrite(context, shape),\n-                GenericsArg::TyParam(ty) => ty.rewrite(context, shape),\n-            }\n-        }\n-    }\n-    impl<'a> Spanned for GenericsArg<'a> {\n-        fn span(&self) -> Span {\n-            match *self {\n-                GenericsArg::Lifetime(lifetime) => lifetime.span(),\n-                GenericsArg::TyParam(ty) => ty.span(),\n-            }\n-        }\n-    }\n-\n     if generics.params.is_empty() {\n         return Some(String::new());\n     }\n \n-    let generics_args = generics\n-        .params\n-        .iter()\n-        .filter_map(|p| match p {\n-            &ast::GenericParam::Lifetime(ref l) => Some(l),\n-            _ => None,\n-        })\n-        .map(|lt| GenericsArg::Lifetime(lt))\n-        .chain(generics.params.iter().filter_map(|ty| match ty {\n-            &ast::GenericParam::Type(ref ty) => Some(GenericsArg::TyParam(ty)),\n-            _ => None,\n-        }));\n     let items = itemize_list(\n         context.codemap,\n-        generics_args,\n+        generics.params.iter(),\n         \">\",\n         \",\",\n         |arg| arg.span().lo(),\n@@ -2868,3 +2830,12 @@ impl Rewrite for ast::ForeignItem {\n         )\n     }\n }\n+\n+impl Rewrite for ast::GenericParam {\n+    fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n+        match *self {\n+            ast::GenericParam::Lifetime(ref lifetime_def) => lifetime_def.rewrite(context, shape),\n+            ast::GenericParam::Type(ref ty) => ty.rewrite(context, shape),\n+        }\n+    }\n+}"}, {"sha": "eb36a1174289d506aa5e5819b29257a56ecb7142", "filename": "src/spanned.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/939a6c58202f775a63e46fbde4e0d6b3b04cf8aa/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939a6c58202f775a63e46fbde4e0d6b3b04cf8aa/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=939a6c58202f775a63e46fbde4e0d6b3b04cf8aa", "patch": "@@ -105,6 +105,15 @@ impl Spanned for ast::Arg {\n     }\n }\n \n+impl Spanned for ast::GenericParam {\n+    fn span(&self) -> Span {\n+        match *self {\n+            ast::GenericParam::Lifetime(ref lifetime_def) => lifetime_def.span(),\n+            ast::GenericParam::Type(ref ty) => ty.span(),\n+        }\n+    }\n+}\n+\n impl Spanned for ast::StructField {\n     fn span(&self) -> Span {\n         span_with_attrs_lo_hi!(self, self.span.lo(), self.ty.span.hi())"}, {"sha": "1bad8aecdf416449a27ce0ffa11ddf7c7530d4dc", "filename": "src/utils.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/939a6c58202f775a63e46fbde4e0d6b3b04cf8aa/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939a6c58202f775a63e46fbde4e0d6b3b04cf8aa/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=939a6c58202f775a63e46fbde4e0d6b3b04cf8aa", "patch": "@@ -213,19 +213,6 @@ pub fn contains_skip(attrs: &[Attribute]) -> bool {\n         .any(|a| a.meta().map_or(false, |a| is_skip(&a)))\n }\n \n-// Find the end of a TyParam\n-#[inline]\n-pub fn end_typaram(typaram: &ast::TyParam) -> BytePos {\n-    typaram\n-        .bounds\n-        .last()\n-        .map_or(typaram.span, |bound| match *bound {\n-            ast::RegionTyParamBound(ref lt) => lt.span,\n-            ast::TraitTyParamBound(ref prt, _) => prt.span,\n-        })\n-        .hi()\n-}\n-\n #[inline]\n pub fn semicolon_for_expr(context: &RewriteContext, expr: &ast::Expr) -> bool {\n     match expr.node {"}]}