{"sha": "9d712177a34d42c9d78aab4a77d1a36692bc7fc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNzEyMTc3YTM0ZDQyYzlkNzhhYWI0YTc3ZDFhMzY2OTJiYzdmYzE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-10T21:29:31Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-10T21:29:31Z"}, "message": "Refactor \"not FFI-safe\" diagnostic", "tree": {"sha": "9cf948a8e4749d10a9e731c403cdc782fb235acb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cf948a8e4749d10a9e731c403cdc782fb235acb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d712177a34d42c9d78aab4a77d1a36692bc7fc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d712177a34d42c9d78aab4a77d1a36692bc7fc1", "html_url": "https://github.com/rust-lang/rust/commit/9d712177a34d42c9d78aab4a77d1a36692bc7fc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79368db1ce0b6c14d295593a1c12ab691e74b41c", "url": "https://api.github.com/repos/rust-lang/rust/commits/79368db1ce0b6c14d295593a1c12ab691e74b41c", "html_url": "https://github.com/rust-lang/rust/commit/79368db1ce0b6c14d295593a1c12ab691e74b41c"}], "stats": {"total": 334, "additions": 202, "deletions": 132}, "files": [{"sha": "3b8c06ba154c605218c2939f980b2f7c10fb691a", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 45, "deletions": 27, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=9d712177a34d42c9d78aab4a77d1a36692bc7fc1", "patch": "@@ -859,30 +859,62 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         }\n     }\n \n+    fn emit_ffi_unsafe_type_lint(\n+        &mut self,\n+        ty: Ty<'tcx>,\n+        sp: Span,\n+        note: &str,\n+        help: Option<&str>,\n+    ) {\n+        let mut diag = self.cx.struct_span_lint(\n+            IMPROPER_CTYPES,\n+            sp,\n+            &format!(\"`extern` block uses type `{}`, which is not FFI-safe\", ty),\n+        );\n+        diag.span_label(sp, \"not FFI-safe\");\n+        if let Some(help) = help {\n+            diag.help(help);\n+        }\n+        diag.note(note);\n+        if let ty::Adt(def, _) = ty.sty {\n+            if let Some(sp) = self.cx.tcx.hir().span_if_local(def.did) {\n+                diag.span_note(sp, \"type defined here\");\n+            }\n+        }\n+        diag.emit();\n+    }\n+\n     fn check_for_opaque_ty(&mut self, sp: Span, ty: Ty<'tcx>) -> bool {\n         use crate::rustc::ty::TypeFoldable;\n \n-        struct ProhibitOpaqueTypes<'a, 'tcx> {\n-            cx: &'a LateContext<'a, 'tcx>,\n-            sp: Span,\n+        struct ProhibitOpaqueTypes<'tcx> {\n+            ty: Option<Ty<'tcx>>,\n         };\n \n-        impl<'a, 'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueTypes<'a, 'tcx> {\n+        impl<'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueTypes<'tcx> {\n             fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool {\n                 if let ty::Opaque(..) = ty.sty {\n-                    self.cx.span_lint(IMPROPER_CTYPES,\n-                        self.sp,\n-                        &format!(\"`extern` block uses type `{}` which is not FFI-safe: \\\n-                                  opaque types have no C equivalent\", ty));\n+                    self.ty = Some(ty);\n                     true\n                 } else {\n                     ty.super_visit_with(self)\n                 }\n             }\n         }\n \n-        let mut visitor = ProhibitOpaqueTypes { cx: self.cx, sp };\n-        ty.visit_with(&mut visitor)\n+        let mut visitor = ProhibitOpaqueTypes { ty: None };\n+        ty.visit_with(&mut visitor);\n+        if let Some(ty) = visitor.ty {\n+            self.emit_ffi_unsafe_type_lint(\n+                ty,\n+                sp,\n+                \"opaque types have no C equivalent\",\n+                None,\n+            );\n+            true\n+        } else {\n+            false\n+        }\n     }\n \n     fn check_type_for_ffi_and_report_errors(&mut self, sp: Span, ty: Ty<'tcx>) {\n@@ -900,24 +932,10 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         match self.check_type_for_ffi(&mut FxHashSet::default(), ty) {\n             FfiResult::FfiSafe => {}\n             FfiResult::FfiPhantom(ty) => {\n-                self.cx.span_lint(IMPROPER_CTYPES,\n-                                  sp,\n-                                  &format!(\"`extern` block uses type `{}` which is not FFI-safe: \\\n-                                            composed only of `PhantomData`\", ty));\n+                self.emit_ffi_unsafe_type_lint(ty, sp, \"composed only of `PhantomData`\", None);\n             }\n-            FfiResult::FfiUnsafe { ty: unsafe_ty, reason, help } => {\n-                let msg = format!(\"`extern` block uses type `{}` which is not FFI-safe: {}\",\n-                                  unsafe_ty, reason);\n-                let mut diag = self.cx.struct_span_lint(IMPROPER_CTYPES, sp, &msg);\n-                if let Some(s) = help {\n-                    diag.help(s);\n-                }\n-                if let ty::Adt(def, _) = unsafe_ty.sty {\n-                    if let Some(sp) = self.cx.tcx.hir().span_if_local(def.did) {\n-                        diag.span_note(sp, \"type defined here\");\n-                    }\n-                }\n-                diag.emit();\n+            FfiResult::FfiUnsafe { ty, reason, help } => {\n+                self.emit_ffi_unsafe_type_lint(ty, sp, reason, help);\n             }\n         }\n     }"}, {"sha": "328a4c982b81e6bb1839bda5e9d8c49c7eb8fc7b", "filename": "src/test/ui/issues/issue-14309.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Fissues%2Fissue-14309.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Fissues%2Fissue-14309.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14309.rs?ref=9d712177a34d42c9d78aab4a77d1a36692bc7fc1", "patch": "@@ -27,7 +27,7 @@ struct D {\n }\n \n extern \"C\" {\n-    fn foo(x: A); //~ ERROR type `A` which is not FFI-safe\n+    fn foo(x: A); //~ ERROR type `A`, which is not FFI-safe\n     fn bar(x: B); //~ ERROR type `A`\n     fn baz(x: C);\n     fn qux(x: A2); //~ ERROR type `A`"}, {"sha": "f598e1f9e2f6dc797bef7b6f691744ec549b58c3", "filename": "src/test/ui/issues/issue-14309.stderr", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Fissues%2Fissue-14309.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Fissues%2Fissue-14309.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14309.stderr?ref=9d712177a34d42c9d78aab4a77d1a36692bc7fc1", "patch": "@@ -1,15 +1,16 @@\n-error: `extern` block uses type `A` which is not FFI-safe: this struct has unspecified layout\n+error: `extern` block uses type `A`, which is not FFI-safe\n   --> $DIR/issue-14309.rs:30:15\n    |\n LL |     fn foo(x: A);\n-   |               ^\n+   |               ^ not FFI-safe\n    |\n note: lint level defined here\n   --> $DIR/issue-14309.rs:1:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n note: type defined here\n   --> $DIR/issue-14309.rs:4:1\n    |\n@@ -18,13 +19,14 @@ LL | |     x: i32\n LL | | }\n    | |_^\n \n-error: `extern` block uses type `A` which is not FFI-safe: this struct has unspecified layout\n+error: `extern` block uses type `A`, which is not FFI-safe\n   --> $DIR/issue-14309.rs:31:15\n    |\n LL |     fn bar(x: B);\n-   |               ^\n+   |               ^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n note: type defined here\n   --> $DIR/issue-14309.rs:4:1\n    |\n@@ -33,13 +35,14 @@ LL | |     x: i32\n LL | | }\n    | |_^\n \n-error: `extern` block uses type `A` which is not FFI-safe: this struct has unspecified layout\n+error: `extern` block uses type `A`, which is not FFI-safe\n   --> $DIR/issue-14309.rs:33:15\n    |\n LL |     fn qux(x: A2);\n-   |               ^^\n+   |               ^^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n note: type defined here\n   --> $DIR/issue-14309.rs:4:1\n    |\n@@ -48,13 +51,14 @@ LL | |     x: i32\n LL | | }\n    | |_^\n \n-error: `extern` block uses type `A` which is not FFI-safe: this struct has unspecified layout\n+error: `extern` block uses type `A`, which is not FFI-safe\n   --> $DIR/issue-14309.rs:34:16\n    |\n LL |     fn quux(x: B2);\n-   |                ^^\n+   |                ^^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n note: type defined here\n   --> $DIR/issue-14309.rs:4:1\n    |\n@@ -63,13 +67,14 @@ LL | |     x: i32\n LL | | }\n    | |_^\n \n-error: `extern` block uses type `A` which is not FFI-safe: this struct has unspecified layout\n+error: `extern` block uses type `A`, which is not FFI-safe\n   --> $DIR/issue-14309.rs:36:16\n    |\n LL |     fn fred(x: D);\n-   |                ^\n+   |                ^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n note: type defined here\n   --> $DIR/issue-14309.rs:4:1\n    |"}, {"sha": "a3c6751ad897cde3b2859e4d4bcba0a47fb87212", "filename": "src/test/ui/issues/issue-16250.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Fissues%2Fissue-16250.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Fissues%2Fissue-16250.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16250.rs?ref=9d712177a34d42c9d78aab4a77d1a36692bc7fc1", "patch": "@@ -3,7 +3,7 @@\n pub struct Foo;\n \n extern {\n-    pub fn foo(x: (Foo)); //~ ERROR unspecified layout\n+    pub fn foo(x: (Foo)); //~ ERROR `extern` block uses type `Foo`\n }\n \n fn main() {"}, {"sha": "5686ac3774215cd6d4b2a75b528f472d15ed6c8c", "filename": "src/test/ui/issues/issue-16250.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Fissues%2Fissue-16250.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Fissues%2Fissue-16250.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16250.stderr?ref=9d712177a34d42c9d78aab4a77d1a36692bc7fc1", "patch": "@@ -1,8 +1,8 @@\n-error: `extern` block uses type `Foo` which is not FFI-safe: this struct has unspecified layout\n+error: `extern` block uses type `Foo`, which is not FFI-safe\n   --> $DIR/issue-16250.rs:6:20\n    |\n LL |     pub fn foo(x: (Foo));\n-   |                    ^^^\n+   |                    ^^^ not FFI-safe\n    |\n note: lint level defined here\n   --> $DIR/issue-16250.rs:1:9\n@@ -11,6 +11,7 @@ LL | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: `#[deny(improper_ctypes)]` implied by `#[deny(warnings)]`\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n note: type defined here\n   --> $DIR/issue-16250.rs:3:1\n    |"}, {"sha": "3898e67a07f7e34fbe7ed09b04da5c112f8a8e20", "filename": "src/test/ui/lint/lint-ctypes-enum.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.rs?ref=9d712177a34d42c9d78aab4a77d1a36692bc7fc1", "patch": "@@ -36,36 +36,37 @@ struct Rust<T>(T);\n \n extern {\n    fn zf(x: Z);\n-   fn uf(x: U); //~ ERROR enum has no representation hint\n-   fn bf(x: B); //~ ERROR enum has no representation hint\n-   fn tf(x: T); //~ ERROR enum has no representation hint\n+   fn uf(x: U); //~ ERROR `extern` block uses type `U`\n+   fn bf(x: B); //~ ERROR `extern` block uses type `B`\n+   fn tf(x: T); //~ ERROR `extern` block uses type `T`\n    fn repr_c(x: ReprC);\n    fn repr_u8(x: U8);\n    fn repr_isize(x: Isize);\n    fn option_ref(x: Option<&'static u8>);\n    fn option_fn(x: Option<extern \"C\" fn()>);\n    fn nonnull(x: Option<std::ptr::NonNull<u8>>);\n-   fn unique(x: Option<std::ptr::Unique<u8>>); //~ ERROR enum has no representation hint\n+   fn unique(x: Option<std::ptr::Unique<u8>>);\n+   //~^ ERROR `extern` block uses type `std::option::Option<std::ptr::Unique<u8>>`\n    fn nonzero_u8(x: Option<num::NonZeroU8>);\n    fn nonzero_u16(x: Option<num::NonZeroU16>);\n    fn nonzero_u32(x: Option<num::NonZeroU32>);\n    fn nonzero_u64(x: Option<num::NonZeroU64>);\n    fn nonzero_u128(x: Option<num::NonZeroU128>);\n-   //~^ ERROR 128-bit integers don't currently have a known stable ABI\n+   //~^ ERROR `extern` block uses type `u128`\n    fn nonzero_usize(x: Option<num::NonZeroUsize>);\n    fn nonzero_i8(x: Option<num::NonZeroI8>);\n    fn nonzero_i16(x: Option<num::NonZeroI16>);\n    fn nonzero_i32(x: Option<num::NonZeroI32>);\n    fn nonzero_i64(x: Option<num::NonZeroI64>);\n    fn nonzero_i128(x: Option<num::NonZeroI128>);\n-   //~^ ERROR 128-bit integers don't currently have a known stable ABI\n+   //~^ ERROR `extern` block uses type `i128`\n    fn nonzero_isize(x: Option<num::NonZeroIsize>);\n    fn transparent_struct(x: Option<TransparentStruct<num::NonZeroU8>>);\n    fn transparent_enum(x: Option<TransparentEnum<num::NonZeroU8>>);\n    fn transparent_union(x: Option<TransparentUnion<num::NonZeroU8>>);\n-   //~^ ERROR enum has no representation hint\n-   fn repr_rust(x: Option<Rust<num::NonZeroU8>>); //~ ERROR enum has no representation hint\n-   fn no_result(x: Result<(), num::NonZeroI32>); //~ ERROR enum has no representation hint\n+   //~^ ERROR `extern` block uses type\n+   fn repr_rust(x: Option<Rust<num::NonZeroU8>>); //~ ERROR `extern` block uses type\n+   fn no_result(x: Result<(), num::NonZeroI32>); //~ ERROR `extern` block uses type\n }\n \n-pub fn main() { }\n+pub fn main() {}"}, {"sha": "81939e6ee206ca22621707d128cf9825d4797850", "filename": "src/test/ui/lint/lint-ctypes-enum.stderr", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr?ref=9d712177a34d42c9d78aab4a77d1a36692bc7fc1", "patch": "@@ -1,90 +1,101 @@\n-error: `extern` block uses type `U` which is not FFI-safe: enum has no representation hint\n+error: `extern` block uses type `U`, which is not FFI-safe\n   --> $DIR/lint-ctypes-enum.rs:39:13\n    |\n LL |    fn uf(x: U);\n-   |             ^\n+   |             ^ not FFI-safe\n    |\n note: lint level defined here\n   --> $DIR/lint-ctypes-enum.rs:3:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n    = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n+   = note: enum has no representation hint\n note: type defined here\n   --> $DIR/lint-ctypes-enum.rs:9:1\n    |\n LL | enum U { A }\n    | ^^^^^^^^^^^^\n \n-error: `extern` block uses type `B` which is not FFI-safe: enum has no representation hint\n+error: `extern` block uses type `B`, which is not FFI-safe\n   --> $DIR/lint-ctypes-enum.rs:40:13\n    |\n LL |    fn bf(x: B);\n-   |             ^\n+   |             ^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n+   = note: enum has no representation hint\n note: type defined here\n   --> $DIR/lint-ctypes-enum.rs:10:1\n    |\n LL | enum B { C, D }\n    | ^^^^^^^^^^^^^^^\n \n-error: `extern` block uses type `T` which is not FFI-safe: enum has no representation hint\n+error: `extern` block uses type `T`, which is not FFI-safe\n   --> $DIR/lint-ctypes-enum.rs:41:13\n    |\n LL |    fn tf(x: T);\n-   |             ^\n+   |             ^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n+   = note: enum has no representation hint\n note: type defined here\n   --> $DIR/lint-ctypes-enum.rs:11:1\n    |\n LL | enum T { E, F, G }\n    | ^^^^^^^^^^^^^^^^^^\n \n-error: `extern` block uses type `std::option::Option<std::ptr::Unique<u8>>` which is not FFI-safe: enum has no representation hint\n+error: `extern` block uses type `std::option::Option<std::ptr::Unique<u8>>`, which is not FFI-safe\n   --> $DIR/lint-ctypes-enum.rs:48:17\n    |\n LL |    fn unique(x: Option<std::ptr::Unique<u8>>);\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n+   = note: enum has no representation hint\n \n-error: `extern` block uses type `u128` which is not FFI-safe: 128-bit integers don't currently have a known stable ABI\n-  --> $DIR/lint-ctypes-enum.rs:53:23\n+error: `extern` block uses type `u128`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-enum.rs:54:23\n    |\n LL |    fn nonzero_u128(x: Option<num::NonZeroU128>);\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: 128-bit integers don't currently have a known stable ABI\n \n-error: `extern` block uses type `i128` which is not FFI-safe: 128-bit integers don't currently have a known stable ABI\n-  --> $DIR/lint-ctypes-enum.rs:60:23\n+error: `extern` block uses type `i128`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-enum.rs:61:23\n    |\n LL |    fn nonzero_i128(x: Option<num::NonZeroI128>);\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: 128-bit integers don't currently have a known stable ABI\n \n-error: `extern` block uses type `std::option::Option<TransparentUnion<std::num::NonZeroU8>>` which is not FFI-safe: enum has no representation hint\n-  --> $DIR/lint-ctypes-enum.rs:65:28\n+error: `extern` block uses type `std::option::Option<TransparentUnion<std::num::NonZeroU8>>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-enum.rs:66:28\n    |\n LL |    fn transparent_union(x: Option<TransparentUnion<num::NonZeroU8>>);\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n+   = note: enum has no representation hint\n \n-error: `extern` block uses type `std::option::Option<Rust<std::num::NonZeroU8>>` which is not FFI-safe: enum has no representation hint\n-  --> $DIR/lint-ctypes-enum.rs:67:20\n+error: `extern` block uses type `std::option::Option<Rust<std::num::NonZeroU8>>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-enum.rs:68:20\n    |\n LL |    fn repr_rust(x: Option<Rust<num::NonZeroU8>>);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n+   = note: enum has no representation hint\n \n-error: `extern` block uses type `std::result::Result<(), std::num::NonZeroI32>` which is not FFI-safe: enum has no representation hint\n-  --> $DIR/lint-ctypes-enum.rs:68:20\n+error: `extern` block uses type `std::result::Result<(), std::num::NonZeroI32>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-enum.rs:69:20\n    |\n LL |    fn no_result(x: Result<(), num::NonZeroI32>);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n+   = note: enum has no representation hint\n \n error: aborting due to 9 previous errors\n "}, {"sha": "e20503a395c89b7df6d2c7d9da2cab88fc893275", "filename": "src/test/ui/lint/lint-ctypes.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs?ref=9d712177a34d42c9d78aab4a77d1a36692bc7fc1", "patch": "@@ -54,12 +54,13 @@ extern {\n     pub fn trait_type(p: &dyn Clone); //~ ERROR uses type `dyn std::clone::Clone`\n     pub fn tuple_type(p: (i32, i32)); //~ ERROR uses type `(i32, i32)`\n     pub fn tuple_type2(p: I32Pair); //~ ERROR uses type `(i32, i32)`\n-    pub fn zero_size(p: ZeroSize); //~ ERROR struct has no fields\n-    pub fn zero_size_phantom(p: ZeroSizeWithPhantomData); //~ ERROR composed only of `PhantomData`\n+    pub fn zero_size(p: ZeroSize); //~ ERROR uses type `ZeroSize`\n+    pub fn zero_size_phantom(p: ZeroSizeWithPhantomData);\n+    //~^ ERROR uses type `ZeroSizeWithPhantomData`\n     pub fn zero_size_phantom_toplevel()\n-        -> ::std::marker::PhantomData<bool>; //~ ERROR: composed only of `PhantomData`\n-    pub fn fn_type(p: RustFn); //~ ERROR function pointer has Rust-specific\n-    pub fn fn_type2(p: fn()); //~ ERROR function pointer has Rust-specific\n+        -> ::std::marker::PhantomData<bool>; //~ ERROR uses type `std::marker::PhantomData<bool>`\n+    pub fn fn_type(p: RustFn); //~ ERROR uses type `fn()`\n+    pub fn fn_type2(p: fn()); //~ ERROR uses type `fn()`\n     pub fn fn_contained(p: RustBadRet); //~ ERROR: uses type `std::boxed::Box<u32>`\n     pub fn transparent_i128(p: TransparentI128); //~ ERROR: uses type `i128`\n     pub fn transparent_str(p: TransparentStr); //~ ERROR: uses type `str`"}, {"sha": "e533a767b317f536c8f359cba1fd4fe335fa5346", "filename": "src/test/ui/lint/lint-ctypes.stderr", "status": "modified", "additions": 78, "deletions": 47, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr?ref=9d712177a34d42c9d78aab4a77d1a36692bc7fc1", "patch": "@@ -1,170 +1,201 @@\n-error: `extern` block uses type `Foo` which is not FFI-safe: this struct has unspecified layout\n+error: `extern` block uses type `Foo`, which is not FFI-safe\n   --> $DIR/lint-ctypes.rs:46:28\n    |\n LL |     pub fn ptr_type1(size: *const Foo);\n-   |                            ^^^^^^^^^^\n+   |                            ^^^^^^^^^^ not FFI-safe\n    |\n note: lint level defined here\n   --> $DIR/lint-ctypes.rs:4:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n note: type defined here\n   --> $DIR/lint-ctypes.rs:24:1\n    |\n LL | pub struct Foo;\n    | ^^^^^^^^^^^^^^^\n \n-error: `extern` block uses type `Foo` which is not FFI-safe: this struct has unspecified layout\n+error: `extern` block uses type `Foo`, which is not FFI-safe\n   --> $DIR/lint-ctypes.rs:47:28\n    |\n LL |     pub fn ptr_type2(size: *const Foo);\n-   |                            ^^^^^^^^^^\n+   |                            ^^^^^^^^^^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n note: type defined here\n   --> $DIR/lint-ctypes.rs:24:1\n    |\n LL | pub struct Foo;\n    | ^^^^^^^^^^^^^^^\n \n-error: `extern` block uses type `[u32]` which is not FFI-safe: slices have no C equivalent\n+error: `extern` block uses type `[u32]`, which is not FFI-safe\n   --> $DIR/lint-ctypes.rs:48:26\n    |\n LL |     pub fn slice_type(p: &[u32]);\n-   |                          ^^^^^^\n+   |                          ^^^^^^ not FFI-safe\n    |\n    = help: consider using a raw pointer instead\n+   = note: slices have no C equivalent\n \n-error: `extern` block uses type `str` which is not FFI-safe: string slices have no C equivalent\n+error: `extern` block uses type `str`, which is not FFI-safe\n   --> $DIR/lint-ctypes.rs:49:24\n    |\n LL |     pub fn str_type(p: &str);\n-   |                        ^^^^\n+   |                        ^^^^ not FFI-safe\n    |\n    = help: consider using `*const u8` and a length instead\n+   = note: string slices have no C equivalent\n \n-error: `extern` block uses type `std::boxed::Box<u32>` which is not FFI-safe: this struct has unspecified layout\n+error: `extern` block uses type `std::boxed::Box<u32>`, which is not FFI-safe\n   --> $DIR/lint-ctypes.rs:50:24\n    |\n LL |     pub fn box_type(p: Box<u32>);\n-   |                        ^^^^^^^^\n+   |                        ^^^^^^^^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n \n-error: `extern` block uses type `char` which is not FFI-safe: the `char` type has no C equivalent\n+error: `extern` block uses type `char`, which is not FFI-safe\n   --> $DIR/lint-ctypes.rs:51:25\n    |\n LL |     pub fn char_type(p: char);\n-   |                         ^^^^\n+   |                         ^^^^ not FFI-safe\n    |\n    = help: consider using `u32` or `libc::wchar_t` instead\n+   = note: the `char` type has no C equivalent\n \n-error: `extern` block uses type `i128` which is not FFI-safe: 128-bit integers don't currently have a known stable ABI\n+error: `extern` block uses type `i128`, which is not FFI-safe\n   --> $DIR/lint-ctypes.rs:52:25\n    |\n LL |     pub fn i128_type(p: i128);\n-   |                         ^^^^\n+   |                         ^^^^ not FFI-safe\n+   |\n+   = note: 128-bit integers don't currently have a known stable ABI\n \n-error: `extern` block uses type `u128` which is not FFI-safe: 128-bit integers don't currently have a known stable ABI\n+error: `extern` block uses type `u128`, which is not FFI-safe\n   --> $DIR/lint-ctypes.rs:53:25\n    |\n LL |     pub fn u128_type(p: u128);\n-   |                         ^^^^\n+   |                         ^^^^ not FFI-safe\n+   |\n+   = note: 128-bit integers don't currently have a known stable ABI\n \n-error: `extern` block uses type `dyn std::clone::Clone` which is not FFI-safe: trait objects have no C equivalent\n+error: `extern` block uses type `dyn std::clone::Clone`, which is not FFI-safe\n   --> $DIR/lint-ctypes.rs:54:26\n    |\n LL |     pub fn trait_type(p: &dyn Clone);\n-   |                          ^^^^^^^^^^\n+   |                          ^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: trait objects have no C equivalent\n \n-error: `extern` block uses type `(i32, i32)` which is not FFI-safe: tuples have unspecified layout\n+error: `extern` block uses type `(i32, i32)`, which is not FFI-safe\n   --> $DIR/lint-ctypes.rs:55:26\n    |\n LL |     pub fn tuple_type(p: (i32, i32));\n-   |                          ^^^^^^^^^^\n+   |                          ^^^^^^^^^^ not FFI-safe\n    |\n    = help: consider using a struct instead\n+   = note: tuples have unspecified layout\n \n-error: `extern` block uses type `(i32, i32)` which is not FFI-safe: tuples have unspecified layout\n+error: `extern` block uses type `(i32, i32)`, which is not FFI-safe\n   --> $DIR/lint-ctypes.rs:56:27\n    |\n LL |     pub fn tuple_type2(p: I32Pair);\n-   |                           ^^^^^^^\n+   |                           ^^^^^^^ not FFI-safe\n    |\n    = help: consider using a struct instead\n+   = note: tuples have unspecified layout\n \n-error: `extern` block uses type `ZeroSize` which is not FFI-safe: this struct has no fields\n+error: `extern` block uses type `ZeroSize`, which is not FFI-safe\n   --> $DIR/lint-ctypes.rs:57:25\n    |\n LL |     pub fn zero_size(p: ZeroSize);\n-   |                         ^^^^^^^^\n+   |                         ^^^^^^^^ not FFI-safe\n    |\n    = help: consider adding a member to this struct\n+   = note: this struct has no fields\n note: type defined here\n   --> $DIR/lint-ctypes.rs:20:1\n    |\n LL | pub struct ZeroSize;\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: `extern` block uses type `ZeroSizeWithPhantomData` which is not FFI-safe: composed only of `PhantomData`\n+error: `extern` block uses type `ZeroSizeWithPhantomData`, which is not FFI-safe\n   --> $DIR/lint-ctypes.rs:58:33\n    |\n LL |     pub fn zero_size_phantom(p: ZeroSizeWithPhantomData);\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: composed only of `PhantomData`\n+note: type defined here\n+  --> $DIR/lint-ctypes.rs:43:1\n+   |\n+LL | pub struct ZeroSizeWithPhantomData(::std::marker::PhantomData<i32>);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `extern` block uses type `std::marker::PhantomData<bool>` which is not FFI-safe: composed only of `PhantomData`\n-  --> $DIR/lint-ctypes.rs:60:12\n+error: `extern` block uses type `std::marker::PhantomData<bool>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes.rs:61:12\n    |\n LL |         -> ::std::marker::PhantomData<bool>;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: composed only of `PhantomData`\n \n-error: `extern` block uses type `fn()` which is not FFI-safe: this function pointer has Rust-specific calling convention\n-  --> $DIR/lint-ctypes.rs:61:23\n+error: `extern` block uses type `fn()`, which is not FFI-safe\n+  --> $DIR/lint-ctypes.rs:62:23\n    |\n LL |     pub fn fn_type(p: RustFn);\n-   |                       ^^^^^^\n+   |                       ^^^^^^ not FFI-safe\n    |\n    = help: consider using an `extern fn(...) -> ...` function pointer instead\n+   = note: this function pointer has Rust-specific calling convention\n \n-error: `extern` block uses type `fn()` which is not FFI-safe: this function pointer has Rust-specific calling convention\n-  --> $DIR/lint-ctypes.rs:62:24\n+error: `extern` block uses type `fn()`, which is not FFI-safe\n+  --> $DIR/lint-ctypes.rs:63:24\n    |\n LL |     pub fn fn_type2(p: fn());\n-   |                        ^^^^\n+   |                        ^^^^ not FFI-safe\n    |\n    = help: consider using an `extern fn(...) -> ...` function pointer instead\n+   = note: this function pointer has Rust-specific calling convention\n \n-error: `extern` block uses type `std::boxed::Box<u32>` which is not FFI-safe: this struct has unspecified layout\n-  --> $DIR/lint-ctypes.rs:63:28\n+error: `extern` block uses type `std::boxed::Box<u32>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes.rs:64:28\n    |\n LL |     pub fn fn_contained(p: RustBadRet);\n-   |                            ^^^^^^^^^^\n+   |                            ^^^^^^^^^^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n \n-error: `extern` block uses type `i128` which is not FFI-safe: 128-bit integers don't currently have a known stable ABI\n-  --> $DIR/lint-ctypes.rs:64:32\n+error: `extern` block uses type `i128`, which is not FFI-safe\n+  --> $DIR/lint-ctypes.rs:65:32\n    |\n LL |     pub fn transparent_i128(p: TransparentI128);\n-   |                                ^^^^^^^^^^^^^^^\n+   |                                ^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: 128-bit integers don't currently have a known stable ABI\n \n-error: `extern` block uses type `str` which is not FFI-safe: string slices have no C equivalent\n-  --> $DIR/lint-ctypes.rs:65:31\n+error: `extern` block uses type `str`, which is not FFI-safe\n+  --> $DIR/lint-ctypes.rs:66:31\n    |\n LL |     pub fn transparent_str(p: TransparentStr);\n-   |                               ^^^^^^^^^^^^^^\n+   |                               ^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = help: consider using `*const u8` and a length instead\n+   = note: string slices have no C equivalent\n \n-error: `extern` block uses type `std::boxed::Box<u32>` which is not FFI-safe: this struct has unspecified layout\n-  --> $DIR/lint-ctypes.rs:66:30\n+error: `extern` block uses type `std::boxed::Box<u32>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes.rs:67:30\n    |\n LL |     pub fn transparent_fn(p: TransparentBadFn);\n-   |                              ^^^^^^^^^^^^^^^^\n+   |                              ^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n \n error: aborting due to 20 previous errors\n "}, {"sha": "25d5f8ec68aa0db0f600bf69a9bea428e039c940", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs?ref=9d712177a34d42c9d78aab4a77d1a36692bc7fc1", "patch": "@@ -10,7 +10,7 @@ pub fn ret_closure() -> A {\n \n extern \"C\" {\n     pub fn a(_: A);\n-    //~^ ERROR `extern` block uses type `A` which is not FFI-safe: opaque types have no C equivalent\n+    //~^ ERROR `extern` block uses type `A`, which is not FFI-safe\n }\n \n fn main() {}"}, {"sha": "136d564d1ab3dd7a354be92cf43c43a38e28878a", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr?ref=9d712177a34d42c9d78aab4a77d1a36692bc7fc1", "patch": "@@ -1,14 +1,15 @@\n-error: `extern` block uses type `A` which is not FFI-safe: opaque types have no C equivalent\n+error: `extern` block uses type `A`, which is not FFI-safe\n   --> $DIR/opaque-ty-ffi-unsafe.rs:12:17\n    |\n LL |     pub fn a(_: A);\n-   |                 ^\n+   |                 ^ not FFI-safe\n    |\n note: lint level defined here\n   --> $DIR/opaque-ty-ffi-unsafe.rs:3:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n+   = note: opaque types have no C equivalent\n \n error: aborting due to previous error\n "}, {"sha": "1367835e6778122fc41e1b7697fc94a9151cac8b", "filename": "src/test/ui/union/union-repr-c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Funion%2Funion-repr-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Funion%2Funion-repr-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-repr-c.rs?ref=9d712177a34d42c9d78aab4a77d1a36692bc7fc1", "patch": "@@ -12,7 +12,7 @@ union W {\n \n extern \"C\" {\n     static FOREIGN1: U; // OK\n-    static FOREIGN2: W; //~ ERROR union has unspecified layout\n+    static FOREIGN2: W; //~ ERROR `extern` block uses type `W`\n }\n \n fn main() {}"}, {"sha": "c8bc0380dee68f7d6ab8badb86612a9ff53ad344", "filename": "src/test/ui/union/union-repr-c.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Funion%2Funion-repr-c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d712177a34d42c9d78aab4a77d1a36692bc7fc1/src%2Ftest%2Fui%2Funion%2Funion-repr-c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-repr-c.stderr?ref=9d712177a34d42c9d78aab4a77d1a36692bc7fc1", "patch": "@@ -1,15 +1,16 @@\n-error: `extern` block uses type `W` which is not FFI-safe: this union has unspecified layout\n+error: `extern` block uses type `W`, which is not FFI-safe\n   --> $DIR/union-repr-c.rs:15:22\n    |\n LL |     static FOREIGN2: W;\n-   |                      ^\n+   |                      ^ not FFI-safe\n    |\n note: lint level defined here\n   --> $DIR/union-repr-c.rs:2:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this union\n+   = note: this union has unspecified layout\n note: type defined here\n   --> $DIR/union-repr-c.rs:9:1\n    |"}]}