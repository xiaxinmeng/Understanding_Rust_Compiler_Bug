{"sha": "a3297562f6c1bb8ca7bcb80d265fc41dc10d5a9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMjk3NTYyZjZjMWJiOGNhN2JjYjgwZDI2NWZjNDFkYzEwZDVhOWY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-11-17T13:30:08Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-11-26T13:02:23Z"}, "message": "Show the sign of signed interpreter values", "tree": {"sha": "9974c5fa926b523230e7693718a530745f4ab387", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9974c5fa926b523230e7693718a530745f4ab387"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3297562f6c1bb8ca7bcb80d265fc41dc10d5a9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3297562f6c1bb8ca7bcb80d265fc41dc10d5a9f", "html_url": "https://github.com/rust-lang/rust/commit/a3297562f6c1bb8ca7bcb80d265fc41dc10d5a9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3297562f6c1bb8ca7bcb80d265fc41dc10d5a9f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f6f66fcdc4abf110171ee06b1a72bdd2883b74f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f6f66fcdc4abf110171ee06b1a72bdd2883b74f", "html_url": "https://github.com/rust-lang/rust/commit/0f6f66fcdc4abf110171ee06b1a72bdd2883b74f"}], "stats": {"total": 43, "additions": 40, "deletions": 3}, "files": [{"sha": "34265055ed44fdad866f49257ec872f98b4a7cdf", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3297562f6c1bb8ca7bcb80d265fc41dc10d5a9f/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3297562f6c1bb8ca7bcb80d265fc41dc10d5a9f/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=a3297562f6c1bb8ca7bcb80d265fc41dc10d5a9f", "patch": "@@ -417,13 +417,13 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         if self.binary_op(BinOp::Rem, a, b)?.to_bits()? != 0 {\n             // Then, check if `b` is -1, which is the \"min_value / -1\" case.\n             let minus1 = Scalar::from_int(-1, dest.layout.size);\n-            let b = b.to_scalar().unwrap();\n-            if b == minus1 {\n+            let b_scalar = b.to_scalar().unwrap();\n+            if b_scalar == minus1 {\n                 throw_ub_format!(\"exact_div: result of dividing MIN by -1 cannot be represented\")\n             } else {\n                 throw_ub_format!(\n                     \"exact_div: {} cannot be divided by {} without remainder\",\n-                    a.to_scalar().unwrap(),\n+                    a,\n                     b,\n                 )\n             }"}, {"sha": "292584f6a6b2e980395320b7c86210f4f62a9bb3", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a3297562f6c1bb8ca7bcb80d265fc41dc10d5a9f/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3297562f6c1bb8ca7bcb80d265fc41dc10d5a9f/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=a3297562f6c1bb8ca7bcb80d265fc41dc10d5a9f", "patch": "@@ -19,6 +19,7 @@ use super::{\n };\n pub use rustc::mir::interpret::ScalarMaybeUndef;\n use rustc_macros::HashStable;\n+use syntax::ast;\n \n /// An `Immediate` represents a single immediate self-contained Rust value.\n ///\n@@ -93,6 +94,42 @@ pub struct ImmTy<'tcx, Tag=()> {\n     pub layout: TyLayout<'tcx>,\n }\n \n+// `Tag: Copy` because some methods on `Scalar` consume them by value\n+impl<Tag: Copy> std::fmt::Display for ImmTy<'tcx, Tag> {\n+    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        match &self.imm {\n+            Immediate::Scalar(ScalarMaybeUndef::Scalar(s)) => match s.to_bits(self.layout.size) {\n+                Ok(s) => {\n+                    match self.layout.ty.kind {\n+                        ty::Int(_) => return write!(\n+                            fmt, \"{}\",\n+                            super::sign_extend(s, self.layout.size) as i128,\n+                        ),\n+                        ty::Uint(_) => return write!(fmt, \"{}\", s),\n+                        ty::Bool if s == 0 => return fmt.write_str(\"false\"),\n+                        ty::Bool if s == 1 => return fmt.write_str(\"true\"),\n+                        ty::Char => if let Some(c) =\n+                            u32::try_from(s).ok().and_then(std::char::from_u32) {\n+                            return write!(fmt, \"{}\", c);\n+                        },\n+                        ty::Float(ast::FloatTy::F32) => if let Ok(u) = u32::try_from(s) {\n+                            return write!(fmt, \"{}\", f32::from_bits(u));\n+                        },\n+                        ty::Float(ast::FloatTy::F64) => if let Ok(u) = u64::try_from(s) {\n+                            return write!(fmt, \"{}\", f64::from_bits(u));\n+                        },\n+                        _ => {},\n+                    }\n+                    write!(fmt, \"{:x}\", s)\n+                },\n+                Err(_) => fmt.write_str(\"{pointer}\"),\n+            },\n+            Immediate::Scalar(ScalarMaybeUndef::Undef) => fmt.write_str(\"{undef}\"),\n+            Immediate::ScalarPair(..) => fmt.write_str(\"{wide pointer or tuple}\"),\n+        }\n+    }\n+}\n+\n impl<'tcx, Tag> ::std::ops::Deref for ImmTy<'tcx, Tag> {\n     type Target = Immediate<Tag>;\n     #[inline(always)]"}]}