{"sha": "15d50deeb457d5761802dd1066f7bfbeaf71c2cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZDUwZGVlYjQ1N2Q1NzYxODAyZGQxMDY2ZjdiZmJlYWY3MWMyY2I=", "commit": {"author": {"name": "LooMaclin", "email": "loo.maclin@protonmail.com", "date": "2019-04-18T23:10:59Z"}, "committer": {"name": "LooMaclin", "email": "loo.maclin@protonmail.com", "date": "2019-04-18T23:10:59Z"}, "message": "Improve miri's error reporting in check_in_alloc", "tree": {"sha": "03de94cb13d1d1a6589e7268ea58486b2e026447", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03de94cb13d1d1a6589e7268ea58486b2e026447"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15d50deeb457d5761802dd1066f7bfbeaf71c2cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15d50deeb457d5761802dd1066f7bfbeaf71c2cb", "html_url": "https://github.com/rust-lang/rust/commit/15d50deeb457d5761802dd1066f7bfbeaf71c2cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15d50deeb457d5761802dd1066f7bfbeaf71c2cb/comments", "author": {"login": "LooMaclin", "id": 10957765, "node_id": "MDQ6VXNlcjEwOTU3NzY1", "avatar_url": "https://avatars.githubusercontent.com/u/10957765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LooMaclin", "html_url": "https://github.com/LooMaclin", "followers_url": "https://api.github.com/users/LooMaclin/followers", "following_url": "https://api.github.com/users/LooMaclin/following{/other_user}", "gists_url": "https://api.github.com/users/LooMaclin/gists{/gist_id}", "starred_url": "https://api.github.com/users/LooMaclin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LooMaclin/subscriptions", "organizations_url": "https://api.github.com/users/LooMaclin/orgs", "repos_url": "https://api.github.com/users/LooMaclin/repos", "events_url": "https://api.github.com/users/LooMaclin/events{/privacy}", "received_events_url": "https://api.github.com/users/LooMaclin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LooMaclin", "id": 10957765, "node_id": "MDQ6VXNlcjEwOTU3NzY1", "avatar_url": "https://avatars.githubusercontent.com/u/10957765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LooMaclin", "html_url": "https://github.com/LooMaclin", "followers_url": "https://api.github.com/users/LooMaclin/followers", "following_url": "https://api.github.com/users/LooMaclin/following{/other_user}", "gists_url": "https://api.github.com/users/LooMaclin/gists{/gist_id}", "starred_url": "https://api.github.com/users/LooMaclin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LooMaclin/subscriptions", "organizations_url": "https://api.github.com/users/LooMaclin/orgs", "repos_url": "https://api.github.com/users/LooMaclin/repos", "events_url": "https://api.github.com/users/LooMaclin/events{/privacy}", "received_events_url": "https://api.github.com/users/LooMaclin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d97ad383412970b39275226bdfde7393d73867f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d97ad383412970b39275226bdfde7393d73867f", "html_url": "https://github.com/rust-lang/rust/commit/0d97ad383412970b39275226bdfde7393d73867f"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "79ef81e81eb1f1840b11e745fb8e449277b1324b", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/15d50deeb457d5761802dd1066f7bfbeaf71c2cb/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d50deeb457d5761802dd1066f7bfbeaf71c2cb/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=15d50deeb457d5761802dd1066f7bfbeaf71c2cb", "patch": "@@ -25,19 +25,19 @@ pub enum InboundsCheck {\n /// Used by `check_in_alloc` to indicate context of check\n #[derive(Debug, Copy, Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub enum CheckInAllocMsg {\n-    MemoryAccess,\n+    MemoryAccessTest,\n     NullPointerTest,\n-    PointerArithmetic,\n-    OutOfBounds,\n+    PointerArithmeticTest,\n+    InboundsTest,\n }\n \n impl Display for CheckInAllocMsg {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}\", match *self {\n-            CheckInAllocMsg::MemoryAccess => \"memory access\",\n-            CheckInAllocMsg::NullPointer => \"null pointer\",\n-            CheckInAllocMsg::PointerArithmetic => \"pointer arithmetic\",\n-            CheckInAllocMsg::OutOfBounds => \"out of bounds\",\n+            CheckInAllocMsg::MemoryAccessTest => \"Memory access\",\n+            CheckInAllocMsg::NullPointerTest => \"Null pointer\",\n+            CheckInAllocMsg::PointerArithmeticTest => \"Pointer arithmetic\",\n+            CheckInAllocMsg::InboundsTest => \"Inbounds\",\n         })\n     }\n }"}, {"sha": "2fe6982fdf82176b4fe86fc1f6c5b71f137abc35", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15d50deeb457d5761802dd1066f7bfbeaf71c2cb/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d50deeb457d5761802dd1066f7bfbeaf71c2cb/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=15d50deeb457d5761802dd1066f7bfbeaf71c2cb", "patch": "@@ -461,7 +461,7 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for InterpError<'tcx, O> {\n         use self::InterpError::*;\n         match *self {\n             PointerOutOfBounds { ptr, msg, allocation_size } => {\n-                write!(f, \"Pointer must be in-bounds{} at offset {}, but is outside bounds of \\\n+                write!(f, \"{} test failed: pointer must be in-bounds at offset {}, but is outside bounds of \\\n                            allocation {} which has size {}\", msg,\n                        ptr.offset.bytes(), ptr.alloc_id, allocation_size.bytes())\n             },"}, {"sha": "b176a0ac61f3ae26be2894af398fa9672e99c52d", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15d50deeb457d5761802dd1066f7bfbeaf71c2cb/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d50deeb457d5761802dd1066f7bfbeaf71c2cb/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=15d50deeb457d5761802dd1066f7bfbeaf71c2cb", "patch": "@@ -253,7 +253,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n                 // check this is not NULL -- which we can ensure only if this is in-bounds\n                 // of some (potentially dead) allocation.\n                 let align = self.check_bounds_ptr(ptr, InboundsCheck::MaybeDead,\n-                                                  CheckInAllocMsg::NullPointer)?;\n+                                                  CheckInAllocMsg::NullPointerTest)?;\n                 (ptr.offset.bytes(), align)\n             }\n             Scalar::Bits { bits, size } => {"}, {"sha": "8d9550e8f07be6c32513596c17ccb0ee46e7c523", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15d50deeb457d5761802dd1066f7bfbeaf71c2cb/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d50deeb457d5761802dd1066f7bfbeaf71c2cb/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=15d50deeb457d5761802dd1066f7bfbeaf71c2cb", "patch": "@@ -668,7 +668,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                         // The niche must be just 0 (which an inbounds pointer value never is)\n                         let ptr_valid = niche_start == 0 && variants_start == variants_end &&\n                             self.memory.check_bounds_ptr(ptr, InboundsCheck::MaybeDead,\n-                                                         CheckInAllocMsg::OutOfBounds).is_ok();\n+                                                         CheckInAllocMsg::NullPointerTest).is_ok();\n                         if !ptr_valid {\n                             return err!(InvalidDiscriminant(raw_discr.erase_tag()));\n                         }"}, {"sha": "ebba704e4f4d663504265f31679fab2231e76bc4", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15d50deeb457d5761802dd1066f7bfbeaf71c2cb/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d50deeb457d5761802dd1066f7bfbeaf71c2cb/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=15d50deeb457d5761802dd1066f7bfbeaf71c2cb", "patch": "@@ -394,7 +394,7 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n                         try_validation!(\n                             self.ecx.memory\n                                 .get(ptr.alloc_id)?\n-                                .check_bounds(self.ecx, ptr, size, CheckInAllocMsg::OutOfBounds),\n+                                .check_bounds(self.ecx, ptr, size, CheckInAllocMsg::InboundsTest),\n                             \"dangling (not entirely in bounds) reference\", self.path);\n                     }\n                     // Check if we have encountered this pointer+layout combination"}]}