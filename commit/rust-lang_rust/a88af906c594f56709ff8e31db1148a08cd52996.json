{"sha": "a88af906c594f56709ff8e31db1148a08cd52996", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4OGFmOTA2YzU5NGY1NjcwOWZmOGUzMWRiMTE0OGEwOGNkNTI5OTY=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-05-24T19:18:42Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-05-27T22:20:58Z"}, "message": "Programs using spawn terminate", "tree": {"sha": "d109bd4962eb04a683fb1a40862bd3520c737fff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d109bd4962eb04a683fb1a40862bd3520c737fff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a88af906c594f56709ff8e31db1148a08cd52996", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a88af906c594f56709ff8e31db1148a08cd52996", "html_url": "https://github.com/rust-lang/rust/commit/a88af906c594f56709ff8e31db1148a08cd52996", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a88af906c594f56709ff8e31db1148a08cd52996/comments", "author": null, "committer": null, "parents": [{"sha": "dad426419c1c93a90d458d8eee307df7ddb0fc05", "url": "https://api.github.com/repos/rust-lang/rust/commits/dad426419c1c93a90d458d8eee307df7ddb0fc05", "html_url": "https://github.com/rust-lang/rust/commit/dad426419c1c93a90d458d8eee307df7ddb0fc05"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "723fd1c27144b3975dbecce8c8ca01784b10e309", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a88af906c594f56709ff8e31db1148a08cd52996/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a88af906c594f56709ff8e31db1148a08cd52996/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a88af906c594f56709ff8e31db1148a08cd52996", "patch": "@@ -760,6 +760,9 @@ fn type_of_inner(&@crate_ctxt cx, &ast::span sp, &ty::t t) -> TypeRef {\n         case (ty::ty_chan(?t)) {\n             llty = T_ptr(T_chan(type_of_inner(cx, sp, t)));\n         }\n+        case (ty::ty_task) {\n+            llty = T_taskptr(cx.tn);\n+        }\n         case (ty::ty_tup(?elts)) {\n             let vec[TypeRef] tys = [];\n             for (ty::mt elt in elts) {\n@@ -2014,6 +2017,11 @@ fn make_free_glue(&@block_ctxt cx, ValueRef v0, &ty::t t) {\n             rslt = res(cx, C_int(0));\n         }\n \n+        case (ty::ty_task) {\n+            // TODO: call upcall_kill\n+            rslt = res(cx, C_nil());\n+        }\n+\n         case (ty::ty_obj(_)) {\n \n             auto box_cell =\n@@ -2107,6 +2115,10 @@ fn make_drop_glue(&@block_ctxt cx, ValueRef v0, &ty::t t) {\n             rslt = decr_refcnt_maybe_free(cx, v0, v0, t);\n         }\n \n+        case (ty::ty_task) {\n+            rslt = decr_refcnt_maybe_free(cx, v0, v0, t);\n+        }\n+\n         case (ty::ty_obj(_)) {\n             auto box_cell =\n                 cx.build.GEP(v0,\n@@ -5984,6 +5996,10 @@ fn trans_spawn(&@block_ctxt cx,\n     }\n     */\n \n+    auto task_ty = node_ann_type(bcx.fcx.lcx.ccx, ann);\n+    auto dropref = clean(bind drop_ty(_, new_task, task_ty));\n+    find_scope_cx(bcx).cleanups += [dropref];\n+\n     ret res(bcx, new_task);\n }\n "}, {"sha": "3d12d16d5284dd457285357f5a21b9465e840d48", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a88af906c594f56709ff8e31db1148a08cd52996/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a88af906c594f56709ff8e31db1148a08cd52996/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=a88af906c594f56709ff8e31db1148a08cd52996", "patch": "@@ -951,6 +951,7 @@ fn type_is_boxed(&ctxt cx, &t ty) -> bool {\n         case (ty_box(_)) { ret true; }\n         case (ty_port(_)) { ret true; }\n         case (ty_chan(_)) { ret true; }\n+        case (ty_task) { ret true; }\n         case (_) { ret false; }\n     }\n     fail;"}, {"sha": "bf4c9325d39dc2ce0248dcc425ddbca03e8d1056", "filename": "src/test/run-pass/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a88af906c594f56709ff8e31db1148a08cd52996/src%2Ftest%2Frun-pass%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a88af906c594f56709ff8e31db1148a08cd52996/src%2Ftest%2Frun-pass%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn.rs?ref=a88af906c594f56709ff8e31db1148a08cd52996", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n \n fn main() {\n-  spawn child(10);\n+  auto t = spawn child(10);\n }\n \n fn child(int i) {"}]}