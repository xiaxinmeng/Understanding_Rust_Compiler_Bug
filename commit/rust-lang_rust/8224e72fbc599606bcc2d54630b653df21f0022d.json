{"sha": "8224e72fbc599606bcc2d54630b653df21f0022d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMjRlNzJmYmM1OTk2MDZiY2MyZDU0NjMwYjY1M2RmMjFmMDAyMmQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-07T06:21:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-07T06:21:03Z"}, "message": "Rollup merge of #86016 - luqmana:infer-linker-flavor, r=petrochenkov\n\nUnify duplicate linker_and_flavor methods in rustc_codegen_{cranelift,ssa}.\n\nThe two methods were exactly the same so this removes the cranelift copy. This will help make sure both they don't get out of sync.", "tree": {"sha": "865d8aec368ec4b3245c076cc20d70b37fc1dad8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/865d8aec368ec4b3245c076cc20d70b37fc1dad8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8224e72fbc599606bcc2d54630b653df21f0022d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8224e72fbc599606bcc2d54630b653df21f0022d", "html_url": "https://github.com/rust-lang/rust/commit/8224e72fbc599606bcc2d54630b653df21f0022d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8224e72fbc599606bcc2d54630b653df21f0022d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab73115be09f002cecb5055cf716922fde7b7091", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab73115be09f002cecb5055cf716922fde7b7091", "html_url": "https://github.com/rust-lang/rust/commit/ab73115be09f002cecb5055cf716922fde7b7091"}, {"sha": "20beb555655802dc84ba48185b43b61e22d808ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/20beb555655802dc84ba48185b43b61e22d808ad", "html_url": "https://github.com/rust-lang/rust/commit/20beb555655802dc84ba48185b43b61e22d808ad"}], "stats": {"total": 90, "additions": 1, "deletions": 89}, "files": [{"sha": "f86236ef3eafc6eee6c6a476bb19d2fed1f13ce4", "filename": "src/toolchain.rs", "status": "modified", "additions": 1, "deletions": 89, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/8224e72fbc599606bcc2d54630b653df21f0022d/src%2Ftoolchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8224e72fbc599606bcc2d54630b653df21f0022d/src%2Ftoolchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftoolchain.rs?ref=8224e72fbc599606bcc2d54630b653df21f0022d", "patch": "@@ -2,9 +2,8 @@\n \n use std::path::PathBuf;\n \n-use rustc_middle::bug;\n+use rustc_codegen_ssa::back::link::linker_and_flavor;\n use rustc_session::Session;\n-use rustc_target::spec::LinkerFlavor;\n \n /// Tries to infer the path of a binary for the target toolchain from the linker name.\n pub(crate) fn get_toolchain_binary(sess: &Session, tool: &str) -> PathBuf {\n@@ -30,90 +29,3 @@ pub(crate) fn get_toolchain_binary(sess: &Session, tool: &str) -> PathBuf {\n \n     linker\n }\n-\n-// Adapted from https://github.com/rust-lang/rust/blob/5db778affee7c6600c8e7a177c48282dab3f6292/src/librustc_codegen_ssa/back/link.rs#L848-L931\n-fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n-    fn infer_from(\n-        sess: &Session,\n-        linker: Option<PathBuf>,\n-        flavor: Option<LinkerFlavor>,\n-    ) -> Option<(PathBuf, LinkerFlavor)> {\n-        match (linker, flavor) {\n-            (Some(linker), Some(flavor)) => Some((linker, flavor)),\n-            // only the linker flavor is known; use the default linker for the selected flavor\n-            (None, Some(flavor)) => Some((\n-                PathBuf::from(match flavor {\n-                    LinkerFlavor::Em => {\n-                        if cfg!(windows) {\n-                            \"emcc.bat\"\n-                        } else {\n-                            \"emcc\"\n-                        }\n-                    }\n-                    LinkerFlavor::Gcc => {\n-                        if cfg!(any(target_os = \"solaris\", target_os = \"illumos\")) {\n-                            // On historical Solaris systems, \"cc\" may have\n-                            // been Sun Studio, which is not flag-compatible\n-                            // with \"gcc\".  This history casts a long shadow,\n-                            // and many modern illumos distributions today\n-                            // ship GCC as \"gcc\" without also making it\n-                            // available as \"cc\".\n-                            \"gcc\"\n-                        } else {\n-                            \"cc\"\n-                        }\n-                    }\n-                    LinkerFlavor::Ld => \"ld\",\n-                    LinkerFlavor::Msvc => \"link.exe\",\n-                    LinkerFlavor::Lld(_) => \"lld\",\n-                    LinkerFlavor::PtxLinker => \"rust-ptx-linker\",\n-                    LinkerFlavor::BpfLinker => \"bpf-linker\",\n-                }),\n-                flavor,\n-            )),\n-            (Some(linker), None) => {\n-                let stem = linker.file_stem().and_then(|stem| stem.to_str()).unwrap_or_else(|| {\n-                    sess.fatal(\"couldn't extract file stem from specified linker\")\n-                });\n-\n-                let flavor = if stem == \"emcc\" {\n-                    LinkerFlavor::Em\n-                } else if stem == \"gcc\"\n-                    || stem.ends_with(\"-gcc\")\n-                    || stem == \"clang\"\n-                    || stem.ends_with(\"-clang\")\n-                {\n-                    LinkerFlavor::Gcc\n-                } else if stem == \"ld\" || stem == \"ld.lld\" || stem.ends_with(\"-ld\") {\n-                    LinkerFlavor::Ld\n-                } else if stem == \"link\" || stem == \"lld-link\" {\n-                    LinkerFlavor::Msvc\n-                } else if stem == \"lld\" || stem == \"rust-lld\" {\n-                    LinkerFlavor::Lld(sess.target.lld_flavor)\n-                } else {\n-                    // fall back to the value in the target spec\n-                    sess.target.linker_flavor\n-                };\n-\n-                Some((linker, flavor))\n-            }\n-            (None, None) => None,\n-        }\n-    }\n-\n-    // linker and linker flavor specified via command line have precedence over what the target\n-    // specification specifies\n-    if let Some(ret) = infer_from(sess, sess.opts.cg.linker.clone(), sess.opts.cg.linker_flavor) {\n-        return ret;\n-    }\n-\n-    if let Some(ret) = infer_from(\n-        sess,\n-        sess.target.linker.clone().map(PathBuf::from),\n-        Some(sess.target.linker_flavor),\n-    ) {\n-        return ret;\n-    }\n-\n-    bug!(\"Not enough information provided to determine how to invoke the linker\");\n-}"}]}