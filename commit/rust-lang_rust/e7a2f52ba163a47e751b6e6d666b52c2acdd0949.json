{"sha": "e7a2f52ba163a47e751b6e6d666b52c2acdd0949", "node_id": "C_kwDOAAsO6NoAKGU3YTJmNTJiYTE2M2E0N2U3NTFiNmU2ZDY2NmI1MmMyYWNkZDA5NDk", "commit": {"author": {"name": "b-naber", "email": "b_naber@gmx.de", "date": "2023-05-04T21:03:57Z"}, "committer": {"name": "b-naber", "email": "b_naber@gmx.de", "date": "2023-05-10T16:03:52Z"}, "message": "don't inline polymorphic adt instances whose fields contain projections\nin DropGlue.", "tree": {"sha": "2305971c67a1883c2b80fa6ea276adf72ae92dd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2305971c67a1883c2b80fa6ea276adf72ae92dd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7a2f52ba163a47e751b6e6d666b52c2acdd0949", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7a2f52ba163a47e751b6e6d666b52c2acdd0949", "html_url": "https://github.com/rust-lang/rust/commit/e7a2f52ba163a47e751b6e6d666b52c2acdd0949", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7a2f52ba163a47e751b6e6d666b52c2acdd0949/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7871bec7aaad47e8bfaca4fc06c5cb96c466917f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7871bec7aaad47e8bfaca4fc06c5cb96c466917f", "html_url": "https://github.com/rust-lang/rust/commit/7871bec7aaad47e8bfaca4fc06c5cb96c466917f"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "18895072c3b96460639477235fa4e402c56755e1", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e7a2f52ba163a47e751b6e6d666b52c2acdd0949/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a2f52ba163a47e751b6e6d666b52c2acdd0949/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=e7a2f52ba163a47e751b6e6d666b52c2acdd0949", "patch": "@@ -272,15 +272,10 @@ where\n                 let field = FieldIdx::new(i);\n                 let subpath = self.elaborator.field_subpath(variant_path, field);\n                 let tcx = self.tcx();\n-                assert_eq!(self.elaborator.param_env().reveal(), Reveal::All);\n \n-                let fty = f.ty(tcx, substs);\n-                let field_ty = match tcx\n-                    .try_normalize_erasing_regions(self.elaborator.param_env(), f.ty(tcx, substs))\n-                {\n-                    Ok(f_ty) => f_ty,\n-                    Err(_) => fty,\n-                };\n+                assert_eq!(self.elaborator.param_env().reveal(), Reveal::All);\n+                let field_ty =\n+                    tcx.normalize_erasing_regions(self.elaborator.param_env(), f.ty(tcx, substs));\n \n                 (tcx.mk_place_field(base_place, field, field_ty), subpath)\n             })"}, {"sha": "092bbcea0ca72678ead2ee7d666608a574a74017", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e7a2f52ba163a47e751b6e6d666b52c2acdd0949/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a2f52ba163a47e751b6e6d666b52c2acdd0949/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=e7a2f52ba163a47e751b6e6d666b52c2acdd0949", "patch": "@@ -7,6 +7,7 @@ use rustc_index::Idx;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n+use rustc_middle::ty::TypeVisitableExt;\n use rustc_middle::ty::{self, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_session::config::OptLevel;\n use rustc_span::{hygiene::ExpnKind, ExpnData, LocalExpnId, Span};\n@@ -168,7 +169,7 @@ impl<'tcx> Inliner<'tcx> {\n         let callee_attrs = self.tcx.codegen_fn_attrs(callsite.callee.def_id());\n         self.check_codegen_attributes(callsite, callee_attrs)?;\n         self.check_mir_is_available(caller_body, &callsite.callee)?;\n-        let callee_body = self.tcx.instance_mir(callsite.callee.def);\n+        let callee_body = try_instance_mir(self.tcx, callsite.callee.def)?;\n         self.check_mir_body(callsite, callee_body, callee_attrs)?;\n \n         if !self.tcx.consider_optimizing(|| {\n@@ -1124,3 +1125,27 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n         }\n     }\n }\n+\n+#[instrument(skip(tcx), level = \"debug\")]\n+fn try_instance_mir<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    instance: InstanceDef<'tcx>,\n+) -> Result<&'tcx Body<'tcx>, &'static str> {\n+    match instance {\n+        ty::InstanceDef::DropGlue(_, Some(ty)) => match ty.kind() {\n+            ty::Adt(def, substs) => {\n+                let fields = def.all_fields();\n+                for field in fields {\n+                    let field_ty = field.ty(tcx, substs);\n+                    if field_ty.has_param() && field_ty.has_projections() {\n+                        return Err(\"cannot build drop shim for polymorphic type\");\n+                    }\n+                }\n+\n+                Ok(tcx.instance_mir(instance))\n+            }\n+            _ => Ok(tcx.instance_mir(instance)),\n+        },\n+        _ => Ok(tcx.instance_mir(instance)),\n+    }\n+}"}]}