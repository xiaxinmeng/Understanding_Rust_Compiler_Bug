{"sha": "6b3ede3f7bc502eba7bbd202b4b9312d812adcd7", "node_id": "C_kwDOAAsO6NoAKDZiM2VkZTNmN2JjNTAyZWJhN2JiZDIwMmI0YjkzMTJkODEyYWRjZDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-13T14:59:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-13T14:59:39Z"}, "message": "Auto merge of #103009 - Dylan-DPC:rollup-9c2tng6, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #102765 (Suggest `==` to the first expr which has `ExprKind::Assign` kind)\n - #102854 (openbsd: don't reallocate a guard page on the stack.)\n - #102904 (Print return-position `impl Trait` in trait verbosely if `-Zverbose`)\n - #102947 (Sort elaborated existential predicates in `object_ty_for_trait`)\n - #102956 (Use `full_res` instead of `expect_full_res`)\n - #102999 (Delay `is_intrinsic` query until after we've determined the callee is a function)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "44edbc5c1be113234c8a472094690e024eea298a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44edbc5c1be113234c8a472094690e024eea298a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7", "html_url": "https://github.com/rust-lang/rust/commit/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4891d57f7aab37b5d6a84f2901c0bb8903111d53", "url": "https://api.github.com/repos/rust-lang/rust/commits/4891d57f7aab37b5d6a84f2901c0bb8903111d53", "html_url": "https://github.com/rust-lang/rust/commit/4891d57f7aab37b5d6a84f2901c0bb8903111d53"}, {"sha": "0f12b40bff417f0e5b83df8f8213e0886c61101f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f12b40bff417f0e5b83df8f8213e0886c61101f", "html_url": "https://github.com/rust-lang/rust/commit/0f12b40bff417f0e5b83df8f8213e0886c61101f"}], "stats": {"total": 181, "additions": 164, "deletions": 17}, "files": [{"sha": "22a61774e8cf76c3765e8d6c1d80f1907a54820a", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=6b3ede3f7bc502eba7bbd202b4b9312d812adcd7", "patch": "@@ -909,8 +909,6 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                     return;\n                 }\n \n-                let is_intrinsic = tcx.is_intrinsic(callee);\n-\n                 if !tcx.is_const_fn_raw(callee) {\n                     if !tcx.is_const_default_method(callee) {\n                         // To get to here we must have already found a const impl for the\n@@ -970,7 +968,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                     // We do not use `const` modifiers for intrinsic \"functions\", as intrinsics are\n                     // `extern` functions, and these have no way to get marked `const`. So instead we\n                     // use `rustc_const_(un)stable` attributes to mean that the intrinsic is `const`\n-                    if self.ccx.is_const_stable_const_fn() || is_intrinsic {\n+                    if self.ccx.is_const_stable_const_fn() || tcx.is_intrinsic(callee) {\n                         self.check_op(ops::FnCallUnstable(callee, None));\n                         return;\n                     }"}, {"sha": "34c257845971e4617462413929e2b50dfef2f7e7", "filename": "compiler/rustc_hir_analysis/src/check/expr.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fexpr.rs?ref=6b3ede3f7bc502eba7bbd202b4b9312d812adcd7", "patch": "@@ -1051,8 +1051,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 rhs_expr,\n             ) = lhs.kind\n             {\n+                // if x == 1 && y == 2 { .. }\n+                //                 +\n                 let actual_lhs_ty = self.check_expr(&rhs_expr);\n                 (Applicability::MaybeIncorrect, self.can_coerce(rhs_ty, actual_lhs_ty))\n+            } else if let ExprKind::Binary(\n+                Spanned { node: hir::BinOpKind::And | hir::BinOpKind::Or, .. },\n+                lhs_expr,\n+                _,\n+            ) = rhs.kind\n+            {\n+                // if x == 1 && y == 2 { .. }\n+                //       +\n+                let actual_rhs_ty = self.check_expr(&lhs_expr);\n+                (Applicability::MaybeIncorrect, self.can_coerce(actual_rhs_ty, lhs_ty))\n             } else {\n                 (Applicability::MaybeIncorrect, false)\n             };"}, {"sha": "66354196b4e51e2af20870b809f106d3438f32fe", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=6b3ede3f7bc502eba7bbd202b4b9312d812adcd7", "patch": "@@ -637,7 +637,9 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(print_def_path(def_id, &[]));\n             }\n             ty::Projection(ref data) => {\n-                if self.tcx().def_kind(data.item_def_id) == DefKind::ImplTraitPlaceholder {\n+                if !(self.tcx().sess.verbose() || NO_QUERIES.with(|q| q.get()))\n+                    && self.tcx().def_kind(data.item_def_id) == DefKind::ImplTraitPlaceholder\n+                {\n                     return self.pretty_print_opaque_impl_type(data.item_def_id, data.substs);\n                 } else {\n                     p!(print(data))"}, {"sha": "cc877e2fd30ca79a395532444a8a4e06a0326a12", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=6b3ede3f7bc502eba7bbd202b4b9312d812adcd7", "patch": "@@ -1969,7 +1969,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     None\n                 }\n             })\n-            .map(|res| res.expect_full_res())\n+            .and_then(|res| res.full_res())\n             .filter(|res| {\n                 // Permit the types that unambiguously always\n                 // result in the same type constructor being used"}, {"sha": "545524f63a7bccaf5548766e5935ea1b539f2b8a", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=6b3ede3f7bc502eba7bbd202b4b9312d812adcd7", "patch": "@@ -581,17 +581,24 @@ fn object_ty_for_trait<'tcx>(\n     });\n     debug!(?trait_predicate);\n \n-    let elaborated_predicates = elaborate_trait_ref(tcx, trait_ref).filter_map(|obligation| {\n-        debug!(?obligation);\n-        let pred = obligation.predicate.to_opt_poly_projection_pred()?;\n-        Some(pred.map_bound(|p| {\n-            ty::ExistentialPredicate::Projection(ty::ExistentialProjection {\n-                item_def_id: p.projection_ty.item_def_id,\n-                substs: p.projection_ty.substs,\n-                term: p.term,\n-            })\n-        }))\n-    });\n+    let mut elaborated_predicates: Vec<_> = elaborate_trait_ref(tcx, trait_ref)\n+        .filter_map(|obligation| {\n+            debug!(?obligation);\n+            let pred = obligation.predicate.to_opt_poly_projection_pred()?;\n+            Some(pred.map_bound(|p| {\n+                ty::ExistentialPredicate::Projection(ty::ExistentialProjection {\n+                    item_def_id: p.projection_ty.item_def_id,\n+                    substs: p.projection_ty.substs,\n+                    term: p.term,\n+                })\n+            }))\n+        })\n+        .collect();\n+    // NOTE: Since #37965, the existential predicates list has depended on the\n+    // list of predicates to be sorted. This is mostly to enforce that the primary\n+    // predicate comes first.\n+    elaborated_predicates.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));\n+    elaborated_predicates.dedup();\n \n     let existential_predicates = tcx\n         .mk_poly_existential_predicates(iter::once(trait_predicate).chain(elaborated_predicates));"}, {"sha": "42ac6fcd8bf3677235fb1417b659cc7910495d7f", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=6b3ede3f7bc502eba7bbd202b4b9312d812adcd7", "patch": "@@ -766,6 +766,16 @@ pub mod guard {\n             const GUARD_PAGES: usize = 1;\n             let guard = guardaddr..guardaddr + GUARD_PAGES * page_size;\n             Some(guard)\n+        } else if cfg!(target_os = \"openbsd\") {\n+            // OpenBSD stack already includes a guard page, and stack is\n+            // immutable.\n+            //\n+            // We'll just note where we expect rlimit to start\n+            // faulting, so our handler can report \"stack overflow\", and\n+            // trust that the kernel's own stack guard will work.\n+            let stackptr = get_stack_start_aligned()?;\n+            let stackaddr = stackptr.addr();\n+            Some(stackaddr - page_size..stackaddr)\n         } else {\n             // Reallocate the last page of the stack.\n             // This ensures SIGBUS will be raised on"}, {"sha": "843391cffb273df4a6726cfa53c032405592cbd9", "filename": "src/test/ui/object-safety/issue-102933.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/src%2Ftest%2Fui%2Fobject-safety%2Fissue-102933.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/src%2Ftest%2Fui%2Fobject-safety%2Fissue-102933.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fissue-102933.rs?ref=6b3ede3f7bc502eba7bbd202b4b9312d812adcd7", "patch": "@@ -0,0 +1,25 @@\n+// check-pass\n+\n+use std::future::Future;\n+\n+pub trait Service {\n+    type Response;\n+    type Future: Future<Output = Self::Response>;\n+}\n+\n+pub trait A1: Service<Response = i32> {}\n+\n+pub trait A2: Service<Future = Box<dyn Future<Output = i32>>> + A1 {\n+    fn foo(&self) {}\n+}\n+\n+pub trait B1: Service<Future = Box<dyn Future<Output = i32>>> {}\n+\n+pub trait B2: Service<Response = i32> + B1 {\n+    fn foo(&self) {}\n+}\n+\n+fn main() {\n+    let x: &dyn A2 = todo!();\n+    let x: &dyn B2 = todo!();\n+}"}, {"sha": "c6feca6f32f608ddb947b0f5448ee280ac8d6e4e", "filename": "src/test/ui/resolve/issue-102946.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/src%2Ftest%2Fui%2Fresolve%2Fissue-102946.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/src%2Ftest%2Fui%2Fresolve%2Fissue-102946.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-102946.rs?ref=6b3ede3f7bc502eba7bbd202b4b9312d812adcd7", "patch": "@@ -0,0 +1,7 @@\n+impl Error for str::Utf8Error {\n+    //~^ ERROR cannot find trait `Error` in this scope\n+    //~| ERROR ambiguous associated type\n+    fn description(&self)  {}\n+}\n+\n+fn main() {}"}, {"sha": "65be0258e6dba759a465622c62d21ee663999997", "filename": "src/test/ui/resolve/issue-102946.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/src%2Ftest%2Fui%2Fresolve%2Fissue-102946.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/src%2Ftest%2Fui%2Fresolve%2Fissue-102946.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-102946.stderr?ref=6b3ede3f7bc502eba7bbd202b4b9312d812adcd7", "patch": "@@ -0,0 +1,26 @@\n+error[E0405]: cannot find trait `Error` in this scope\n+  --> $DIR/issue-102946.rs:1:6\n+   |\n+LL | impl Error for str::Utf8Error {\n+   |      ^^^^^ not found in this scope\n+   |\n+help: consider importing this trait\n+   |\n+LL | use std::error::Error;\n+   |\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/issue-102946.rs:1:16\n+   |\n+LL | impl Error for str::Utf8Error {\n+   |                ^^^^^^^^^^^^^^\n+   |\n+help: you are looking for the module in `std`, not the primitive type\n+   |\n+LL | impl Error for std::str::Utf8Error {\n+   |                +++++\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0223, E0405.\n+For more information about an error, try `rustc --explain E0223`."}, {"sha": "e0df72003844ce586fa524bf1d0019141dd6caea", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-102985.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-102985.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-102985.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-102985.rs?ref=6b3ede3f7bc502eba7bbd202b4b9312d812adcd7", "patch": "@@ -0,0 +1,11 @@\n+#![feature(const_trait_impl)]\n+\n+struct Bug {\n+    inner: [(); match || 1 {\n+        n => n(),\n+        //~^ ERROR the trait bound\n+        //~| ERROR cannot call non-const fn `Bug::inner::{constant#0}::{closure#0}` in constants\n+    }],\n+}\n+\n+fn main() {}"}, {"sha": "14d87e7cdc64a417f454a12e8368bfc860df6a8b", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-102985.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-102985.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-102985.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-102985.stderr?ref=6b3ede3f7bc502eba7bbd202b4b9312d812adcd7", "patch": "@@ -0,0 +1,26 @@\n+error[E0277]: the trait bound `[closure@$DIR/issue-102985.rs:4:23: 4:25]: ~const Fn<()>` is not satisfied\n+  --> $DIR/issue-102985.rs:5:14\n+   |\n+LL |         n => n(),\n+   |              ^^^ expected an `Fn<()>` closure, found `[closure@$DIR/issue-102985.rs:4:23: 4:25]`\n+   |\n+   = help: the trait `~const Fn<()>` is not implemented for closure `[closure@$DIR/issue-102985.rs:4:23: 4:25]`\n+note: the trait `Fn<()>` is implemented for `[closure@$DIR/issue-102985.rs:4:23: 4:25]`, but that implementation is not `const`\n+  --> $DIR/issue-102985.rs:5:14\n+   |\n+LL |         n => n(),\n+   |              ^^^\n+   = note: wrap the `[closure@$DIR/issue-102985.rs:4:23: 4:25]` in a closure with no arguments: `|| { /* code */ }`\n+\n+error[E0015]: cannot call non-const fn `Bug::inner::{constant#0}::{closure#0}` in constants\n+  --> $DIR/issue-102985.rs:5:14\n+   |\n+LL |         n => n(),\n+   |              ^^^\n+   |\n+   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0015, E0277.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "ada250df24695ac5f6fb95d1eb844f8e063b141e", "filename": "src/test/ui/type/type-check/assignment-in-if.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.rs?ref=6b3ede3f7bc502eba7bbd202b4b9312d812adcd7", "patch": "@@ -53,4 +53,10 @@ fn main() {\n         //~| ERROR mismatched types\n         println!(\"{}\", x);\n     }\n+\n+    if x = 1 && x == 1 {\n+        //~^ ERROR mismatched types\n+        //~| ERROR mismatched types\n+        println!(\"{}\", x);\n+    }\n }"}, {"sha": "8ab08e25e30920213a4c8e03cc669b11adcce23b", "filename": "src/test/ui/type/type-check/assignment-in-if.stderr", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b3ede3f7bc502eba7bbd202b4b9312d812adcd7/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.stderr?ref=6b3ede3f7bc502eba7bbd202b4b9312d812adcd7", "patch": "@@ -104,6 +104,23 @@ help: you might have meant to compare for equality\n LL |     if x == x && x == x && x == x {\n    |                               +\n \n-error: aborting due to 11 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/assignment-in-if.rs:57:12\n+   |\n+LL |     if x = 1 && x == 1 {\n+   |            ^ expected `bool`, found integer\n+\n+error[E0308]: mismatched types\n+  --> $DIR/assignment-in-if.rs:57:8\n+   |\n+LL |     if x = 1 && x == 1 {\n+   |        ^^^^^^^^^^^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to compare for equality\n+   |\n+LL |     if x == 1 && x == 1 {\n+   |           +\n+\n+error: aborting due to 13 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}