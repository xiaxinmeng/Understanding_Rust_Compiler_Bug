{"sha": "b850620d389a6f1690630e7d182583adede67f3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NTA2MjBkMzg5YTZmMTY5MDYzMGU3ZDE4MjU4M2FkZWRlNjdmM2E=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-12T07:36:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-12T07:36:01Z"}, "message": "Rollup merge of #65965 - GuillaumeGomez:clean-up-librustc_typeck-error-codes, r=Mark-Simulacrum\n\nClean up librustc_typeck error_codes file\n\nr? @Dylan-DPC", "tree": {"sha": "73fc4cd6009615ca64182b83b6c1fcaecd6493aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73fc4cd6009615ca64182b83b6c1fcaecd6493aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b850620d389a6f1690630e7d182583adede67f3a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdymDhCRBK7hj4Ov3rIwAAdHIIABVH41QtfMhu4gxgBtWPQSjo\nYvLqcxMmJCOX3q2f1NMdlQ+X+o4kbNrG3WujTb5r1vKu7dmdRcMo3YNeMXYxlbDg\nF+1PDnZCAXw+KghUB/NfjvbRsiKTc9klAzBCRo5++K2MpDVUYvyALDy0nDYi+FcW\nUh+OVp6K6OpaW3UQlcYPUO2mARLj0B9fn6utJjKjI4DLwXXsNbEWEd8G7PCmrHNs\nRH2A5DNB6RI3PRAP7KztRxpiOVzPmIwVCtU/JSnB2AHbesRvTjafkky0nZM5El4D\ne8ptBkmVXoQabo2ntarEoclywunUMCAA/L4Lzc+oo7X/cOGe1doowbggly3HqAk=\n=nA30\n-----END PGP SIGNATURE-----\n", "payload": "tree 73fc4cd6009615ca64182b83b6c1fcaecd6493aa\nparent e931f00f658b59481925deb0152503038ca69b9e\nparent db1dd8f80016e80a617587935557108371c17c73\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573544161 +0900\ncommitter GitHub <noreply@github.com> 1573544161 +0900\n\nRollup merge of #65965 - GuillaumeGomez:clean-up-librustc_typeck-error-codes, r=Mark-Simulacrum\n\nClean up librustc_typeck error_codes file\n\nr? @Dylan-DPC\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b850620d389a6f1690630e7d182583adede67f3a", "html_url": "https://github.com/rust-lang/rust/commit/b850620d389a6f1690630e7d182583adede67f3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b850620d389a6f1690630e7d182583adede67f3a/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e931f00f658b59481925deb0152503038ca69b9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e931f00f658b59481925deb0152503038ca69b9e", "html_url": "https://github.com/rust-lang/rust/commit/e931f00f658b59481925deb0152503038ca69b9e"}, {"sha": "db1dd8f80016e80a617587935557108371c17c73", "url": "https://api.github.com/repos/rust-lang/rust/commits/db1dd8f80016e80a617587935557108371c17c73", "html_url": "https://github.com/rust-lang/rust/commit/db1dd8f80016e80a617587935557108371c17c73"}], "stats": {"total": 208, "additions": 132, "deletions": 76}, "files": [{"sha": "560abeb705704576f7614fa8cb6b2320c669965e", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 132, "deletions": 76, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/b850620d389a6f1690630e7d182583adede67f3a/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b850620d389a6f1690630e7d182583adede67f3a/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=b850620d389a6f1690630e7d182583adede67f3a", "patch": "@@ -3,9 +3,9 @@\n syntax::register_diagnostics! {\n \n E0023: r##\"\n-A pattern used to match against an enum variant must provide a sub-pattern for\n-each field of the enum variant. This error indicates that a pattern attempted to\n-extract an incorrect number of fields from a variant.\n+A pattern attempted to extract an incorrect number of fields from a variant.\n+\n+Erroneous code example:\n \n ```\n enum Fruit {\n@@ -14,6 +14,9 @@ enum Fruit {\n }\n ```\n \n+A pattern used to match against an enum variant must provide a sub-pattern for\n+each field of the enum variant.\n+\n Here the `Apple` variant has two fields, and should be matched against like so:\n \n ```\n@@ -53,8 +56,9 @@ uses the same number.\n \"##,\n \n E0025: r##\"\n-Each field of a struct can only be bound once in a pattern. Erroneous code\n-example:\n+Each field of a struct can only be bound once in a pattern.\n+\n+Erroneous code example:\n \n ```compile_fail,E0025\n struct Foo {\n@@ -89,65 +93,47 @@ fn main(){\n \"##,\n \n E0026: r##\"\n-This error indicates that a struct pattern attempted to extract a non-existent\n-field from a struct. Struct fields are identified by the name used before the\n-colon `:` so struct patterns should resemble the declaration of the struct type\n-being matched.\n-\n-```\n-// Correct matching.\n-struct Thing {\n-    x: u32,\n-    y: u32\n-}\n-\n-let thing = Thing { x: 1, y: 2 };\n+A struct pattern attempted to extract a non-existent field from a struct.\n \n-match thing {\n-    Thing { x: xfield, y: yfield } => {}\n-}\n-```\n-\n-If you are using shorthand field patterns but want to refer to the struct field\n-by a different name, you should rename it explicitly.\n-\n-Change this:\n+Erroneous code example:\n \n ```compile_fail,E0026\n struct Thing {\n     x: u32,\n-    y: u32\n+    y: u32,\n }\n \n let thing = Thing { x: 0, y: 0 };\n \n match thing {\n-    Thing { x, z } => {}\n+    Thing { x, z } => {} // error: `Thing::z` field doesn't exist\n }\n ```\n \n-To this:\n+If you are using shorthand field patterns but want to refer to the struct field\n+by a different name, you should rename it explicitly. Struct fields are\n+identified by the name used before the colon `:` so struct patterns should\n+resemble the declaration of the struct type being matched.\n \n ```\n struct Thing {\n     x: u32,\n-    y: u32\n+    y: u32,\n }\n \n let thing = Thing { x: 0, y: 0 };\n \n match thing {\n-    Thing { x, y: z } => {}\n+    Thing { x, y: z } => {} // we renamed `y` to `z`\n }\n ```\n \"##,\n \n E0027: r##\"\n-This error indicates that a pattern for a struct fails to specify a sub-pattern\n-for every one of the struct's fields. Ensure that each field from the struct's\n-definition is mentioned in the pattern, or use `..` to ignore unwanted fields.\n+A pattern for a struct fails to specify a sub-pattern for every one of the\n+struct's fields.\n \n-For example:\n+Erroneous code example:\n \n ```compile_fail,E0027\n struct Dog {\n@@ -163,7 +149,8 @@ match d {\n }\n ```\n \n-This is correct (explicit):\n+To fix this error, ensure that each field from the struct's definition is\n+mentioned in the pattern, or use `..` to ignore unwanted fields. Example:\n \n ```\n struct Dog {\n@@ -185,11 +172,9 @@ match d {\n \"##,\n \n E0029: r##\"\n-In a match expression, only numbers and characters can be matched against a\n-range. This is because the compiler checks that the range is non-empty at\n-compile-time, and is unable to evaluate arbitrary comparison functions. If you\n-want to capture values of an orderable type between two end-points, you can use\n-a guard.\n+Something other than numbers and characters has been used for a range.\n+\n+Erroneous code example:\n \n ```compile_fail,E0029\n let string = \"salutations !\";\n@@ -207,14 +192,18 @@ match string {\n     _ => {}\n }\n ```\n+\n+In a match expression, only numbers and characters can be matched against a\n+range. This is because the compiler checks that the range is non-empty at\n+compile-time, and is unable to evaluate arbitrary comparison functions. If you\n+want to capture values of an orderable type between two end-points, you can use\n+a guard.\n \"##,\n \n E0033: r##\"\n-This error indicates that a pointer to a trait type cannot be implicitly\n-dereferenced by a pattern. Every trait defines a type, but because the\n-size of trait implementers isn't fixed, this type has no compile-time size.\n-Therefore, all accesses to trait types must be through pointers. If you\n-encounter this error you should try to avoid dereferencing the pointer.\n+A trait type has been dereferenced.\n+\n+Erroneous code example:\n \n ```compile_fail,E0033\n # trait SomeTrait { fn method_one(&self){} fn method_two(&self){} }\n@@ -229,6 +218,12 @@ trait_obj.method_one();\n trait_obj.method_two();\n ```\n \n+A pointer to a trait type cannot be implicitly dereferenced by a pattern. Every\n+trait defines a type, but because the size of trait implementers isn't fixed,\n+this type has no compile-time size. Therefore, all accesses to trait types must\n+be through pointers. If you encounter this error you should try to avoid\n+dereferencing the pointer.\n+\n You can read more about trait objects in the [Trait Objects] section of the\n Reference.\n \n@@ -237,7 +232,9 @@ Reference.\n \n E0034: r##\"\n The compiler doesn't know what method to call because more than one method\n-has the same prototype. Erroneous code example:\n+has the same prototype.\n+\n+Erroneous code example:\n \n ```compile_fail,E0034\n struct Test;\n@@ -323,11 +320,9 @@ fn main() {\n \"##,\n \n E0040: r##\"\n-It is not allowed to manually call destructors in Rust. It is also not\n-necessary to do this since `drop` is called automatically whenever a value goes\n-out of scope.\n+It is not allowed to manually call destructors in Rust.\n \n-Here's an example of this error:\n+Erroneous code example:\n \n ```compile_fail,E0040\n struct Foo {\n@@ -345,11 +340,33 @@ fn main() {\n     x.drop(); // error: explicit use of destructor method\n }\n ```\n+\n+It is unnecessary to do this since `drop` is called automatically whenever a\n+value goes out of scope. However, if you really need to drop a value by hand,\n+you can use the `std::mem::drop` function:\n+\n+```\n+struct Foo {\n+    x: i32,\n+}\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        println!(\"kaboom\");\n+    }\n+}\n+\n+fn main() {\n+    let mut x = Foo { x: -7 };\n+    drop(x); // ok!\n+}\n+```\n \"##,\n \n E0044: r##\"\n You cannot use type or const parameters on foreign items.\n-Example of erroneous code:\n+\n+Erroneous code example:\n \n ```compile_fail,E0044\n extern { fn some_func<T>(x: T); }\n@@ -365,21 +382,21 @@ extern { fn some_func_i64(x: i64); }\n \"##,\n \n E0045: r##\"\n-Rust only supports variadic parameters for interoperability with C code in its\n-FFI. As such, variadic parameters can only be used with functions which are\n-using the C ABI. Examples of erroneous code:\n+Variadic parameters have been used on a non-C ABI function.\n \n-```compile_fail\n-#![feature(unboxed_closures)]\n-\n-extern \"rust-call\" { fn foo(x: u8, ...); }\n+Erroneous code example:\n \n-// or\n+```compile_fail,E0045\n+#![feature(unboxed_closures)]\n \n-fn foo(x: u8, ...) {}\n+extern \"rust-call\" {\n+    fn foo(x: u8, ...); // error!\n+}\n ```\n \n-To fix such code, put them in an extern \"C\" block:\n+Rust only supports variadic parameters for interoperability with C code in its\n+FFI. As such, variadic parameters can only be used with functions which are\n+using the C ABI. To fix such code, put them in an extern \"C\" block:\n \n ```\n extern \"C\" {\n@@ -389,7 +406,9 @@ extern \"C\" {\n \"##,\n \n E0046: r##\"\n-Items are missing in a trait implementation. Erroneous code example:\n+Items are missing in a trait implementation.\n+\n+Erroneous code example:\n \n ```compile_fail,E0046\n trait Foo {\n@@ -421,11 +440,10 @@ impl Foo for Bar {\n \"##,\n \n E0049: r##\"\n-This error indicates that an attempted implementation of a trait method\n-has the wrong number of type or const parameters.\n+An attempted implementation of a trait method has the wrong number of type or\n+const parameters.\n \n-For example, the trait below has a method `foo` with a type parameter `T`,\n-but the implementation of `foo` for the type `Bar` is missing this parameter:\n+Erroneous code example:\n \n ```compile_fail,E0049\n trait Foo {\n@@ -440,15 +458,31 @@ impl Foo for Bar {\n     fn foo(x: bool) -> Self { Bar }\n }\n ```\n+\n+For example, the `Foo` trait has a method `foo` with a type parameter `T`,\n+but the implementation of `foo` for the type `Bar` is missing this parameter.\n+To fix this error, they must have the same type parameters:\n+\n+```\n+trait Foo {\n+    fn foo<T: Default>(x: T) -> Self;\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {\n+    fn foo<T: Default>(x: T) -> Self { // ok!\n+        Bar\n+    }\n+}\n+```\n \"##,\n \n E0050: r##\"\n-This error indicates that an attempted implementation of a trait method\n-has the wrong number of function parameters.\n+An attempted implementation of a trait method has the wrong number of function\n+parameters.\n \n-For example, the trait below has a method `foo` with two function parameters\n-(`&self` and `u8`), but the implementation of `foo` for the type `Bar` omits\n-the `u8` parameter:\n+Erroneous code example:\n \n ```compile_fail,E0050\n trait Foo {\n@@ -463,13 +497,31 @@ impl Foo for Bar {\n     fn foo(&self) -> bool { true }\n }\n ```\n+\n+For example, the `Foo` trait has a method `foo` with two function parameters\n+(`&self` and `u8`), but the implementation of `foo` for the type `Bar` omits\n+the `u8` parameter. To fix this error, they must have the same parameters:\n+\n+```\n+trait Foo {\n+    fn foo(&self, x: u8) -> bool;\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {\n+    fn foo(&self, x: u8) -> bool { // ok!\n+        true\n+    }\n+}\n+```\n \"##,\n \n E0053: r##\"\n The parameters of any trait method must match between a trait implementation\n and the trait definition.\n \n-Here are a couple examples of this error:\n+Erroneous code example:\n \n ```compile_fail,E0053\n trait Foo {\n@@ -490,8 +542,9 @@ impl Foo for Bar {\n \"##,\n \n E0054: r##\"\n-It is not allowed to cast to a bool. If you are trying to cast a numeric type\n-to a bool, you can compare it with zero instead:\n+It is not allowed to cast to a bool.\n+\n+Erroneous code example:\n \n ```compile_fail,E0054\n let x = 5;\n@@ -500,6 +553,9 @@ let x = 5;\n let x_is_nonzero = x as bool;\n ```\n \n+If you are trying to cast a numeric type to a bool, you can compare it with\n+zero instead:\n+\n ```\n let x = 5;\n "}]}