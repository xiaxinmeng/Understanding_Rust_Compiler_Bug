{"sha": "75b19579fb22b91ded35cdda3c381b17faa63798", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YjE5NTc5ZmIyMmI5MWRlZDM1Y2RkYTNjMzgxYjE3ZmFhNjM3OTg=", "commit": {"author": {"name": "garyemerson", "email": "gmohammadioun@gmail.com", "date": "2019-02-04T23:26:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-04T23:26:33Z"}, "message": "update split docs\n\nSome confusion about split popped up at https://news.ycombinator.com/item?id=19080931 since the docs sorta sound like `&str`, `char` and closures are the only types that can be patterns.\r\n\r\ncc @steveklabnik", "tree": {"sha": "6ed34b6a765de08b72defd5e01aaffb370a6e5b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ed34b6a765de08b72defd5e01aaffb370a6e5b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75b19579fb22b91ded35cdda3c381b17faa63798", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcWMopCRBK7hj4Ov3rIwAAdHIIAC84aEHNXE/IdjDSKIN4iWMR\nXAl4OXNjvGITDR1Te+KllMW14ZV5kEoAkkbzbDe9RnvAzakWL1Uz9VOjtZzChWyT\nkNsGhomiQoSZytYcORuDdUwzcKgoGktfRbW+vGQkmSd6RIpPMIYLfVnfbfXd5LPN\njCMZZwkO7XSYLBz5DIFvIaGYvdXcdQQXLgQGUmRxuHk6mmADR6xXiq6U4gzvUKUc\nzkZ9bDZnc28tptdsCBF4vM3WDAoZLn+b6jEvUuNlFGeaC0TObaAHihPq5cc/Wmj3\nmQ3IDIH/mnrpbapFK3nS/uwWnwLXYdkPC1v+mfbezTApaLZciSW7wZn0/0s0tU4=\n=VUDm\n-----END PGP SIGNATURE-----\n", "payload": "tree 6ed34b6a765de08b72defd5e01aaffb370a6e5b9\nparent 8ae730a442cc8af6a487a137ae9ba78f89edbba6\nauthor garyemerson <gmohammadioun@gmail.com> 1549322793 -0800\ncommitter GitHub <noreply@github.com> 1549322793 -0800\n\nupdate split docs\n\nSome confusion about split popped up at https://news.ycombinator.com/item?id=19080931 since the docs sorta sound like `&str`, `char` and closures are the only types that can be patterns.\r\n\r\ncc @steveklabnik"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75b19579fb22b91ded35cdda3c381b17faa63798", "html_url": "https://github.com/rust-lang/rust/commit/75b19579fb22b91ded35cdda3c381b17faa63798", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75b19579fb22b91ded35cdda3c381b17faa63798/comments", "author": {"login": "garyemerson", "id": 5726308, "node_id": "MDQ6VXNlcjU3MjYzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5726308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/garyemerson", "html_url": "https://github.com/garyemerson", "followers_url": "https://api.github.com/users/garyemerson/followers", "following_url": "https://api.github.com/users/garyemerson/following{/other_user}", "gists_url": "https://api.github.com/users/garyemerson/gists{/gist_id}", "starred_url": "https://api.github.com/users/garyemerson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/garyemerson/subscriptions", "organizations_url": "https://api.github.com/users/garyemerson/orgs", "repos_url": "https://api.github.com/users/garyemerson/repos", "events_url": "https://api.github.com/users/garyemerson/events{/privacy}", "received_events_url": "https://api.github.com/users/garyemerson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ae730a442cc8af6a487a137ae9ba78f89edbba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae730a442cc8af6a487a137ae9ba78f89edbba6", "html_url": "https://github.com/rust-lang/rust/commit/8ae730a442cc8af6a487a137ae9ba78f89edbba6"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "e9190cc3ddf1b5ec6a78354781827cc9b7ea17b8", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/75b19579fb22b91ded35cdda3c381b17faa63798/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b19579fb22b91ded35cdda3c381b17faa63798/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=75b19579fb22b91ded35cdda3c381b17faa63798", "patch": "@@ -2961,8 +2961,8 @@ impl str {\n     /// An iterator over substrings of this string slice, separated by\n     /// characters matched by a pattern.\n     ///\n-    /// The pattern can be a `&str`, [`char`], or a closure that determines the\n-    /// split.\n+    /// The pattern can be any type that implements the Pattern trait. Notable\n+    /// examples are `&str`, [`char`], and closures that determines the split.\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3078,8 +3078,8 @@ impl str {\n     /// An iterator over substrings of the given string slice, separated by\n     /// characters matched by a pattern and yielded in reverse order.\n     ///\n-    /// The pattern can be a `&str`, [`char`], or a closure that determines the\n-    /// split.\n+    /// The pattern can be any type that implements the Pattern trait. Notable\n+    /// examples are `&str`, [`char`], and closures that determines the split.\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3128,8 +3128,8 @@ impl str {\n     /// An iterator over substrings of the given string slice, separated by\n     /// characters matched by a pattern.\n     ///\n-    /// The pattern can be a `&str`, [`char`], or a closure that determines the\n-    /// split.\n+    /// The pattern can be any type that implements the Pattern trait. Notable\n+    /// examples are `&str`, [`char`], and closures that determines the split.\n     ///\n     /// Equivalent to [`split`], except that the trailing substring\n     /// is skipped if empty.\n@@ -3175,8 +3175,8 @@ impl str {\n     /// An iterator over substrings of `self`, separated by characters\n     /// matched by a pattern and yielded in reverse order.\n     ///\n-    /// The pattern can be a simple `&str`, [`char`], or a closure that\n-    /// determines the split.\n+    /// The pattern can be any type that implements the Pattern trait. Notable\n+    /// examples are `&str`, [`char`], and closures that determines the split.\n     /// Additional libraries might provide more complex patterns like\n     /// regular expressions.\n     ///\n@@ -3222,8 +3222,8 @@ impl str {\n     /// If `n` substrings are returned, the last substring (the `n`th substring)\n     /// will contain the remainder of the string.\n     ///\n-    /// The pattern can be a `&str`, [`char`], or a closure that determines the\n-    /// split.\n+    /// The pattern can be any type that implements the Pattern trait. Notable\n+    /// examples are `&str`, [`char`], and closures that determines the split.\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3275,8 +3275,8 @@ impl str {\n     /// If `n` substrings are returned, the last substring (the `n`th substring)\n     /// will contain the remainder of the string.\n     ///\n-    /// The pattern can be a `&str`, [`char`], or a closure that\n-    /// determines the split.\n+    /// The pattern can be any type that implements the Pattern trait. Notable\n+    /// examples are `&str`, [`char`], and closures that determines the split.\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3319,8 +3319,8 @@ impl str {\n     /// An iterator over the disjoint matches of a pattern within the given string\n     /// slice.\n     ///\n-    /// The pattern can be a `&str`, [`char`], or a closure that\n-    /// determines if a character matches.\n+    /// The pattern can be any type that implements the Pattern trait. Notable\n+    /// examples are `&str`, [`char`], and closures that determines the split.\n     ///\n     /// # Iterator behavior\n     ///"}]}