{"sha": "d2219c2e2e287d50c0f9761203d26d5fe3b0e639", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMjE5YzJlMmUyODdkNTBjMGY5NzYxMjAzZDI2ZDVmZTNiMGU2Mzk=", "commit": {"author": {"name": "Jeremy Fitzhardinge", "email": "jsgf@fb.com", "date": "2019-07-30T22:57:10Z"}, "committer": {"name": "Jeremy Fitzhardinge", "email": "jsgf@fb.com", "date": "2019-08-20T02:06:46Z"}, "message": "rustc: implement argsfiles for command line\n\nThis makes `rustc` support `@path` arguments on the command line. The `path` is opened and the file is interpreted\nas new command line options which are logically inserted at that point in the command-line. The options in the file\nare one per line. The file is UTF-8 encoded, and may have either Unix or Windows line endings.\nIt does not support recursive use of `@path`.\n\nThis is useful for very large command lines, or when command-lines are being generated into files by other tooling.", "tree": {"sha": "ffa424e0cfa2350cbc589c6ce85f2865e0ce81ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffa424e0cfa2350cbc589c6ce85f2865e0ce81ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2219c2e2e287d50c0f9761203d26d5fe3b0e639", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2219c2e2e287d50c0f9761203d26d5fe3b0e639", "html_url": "https://github.com/rust-lang/rust/commit/d2219c2e2e287d50c0f9761203d26d5fe3b0e639", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/comments", "author": {"login": "jsgf", "id": 147966, "node_id": "MDQ6VXNlcjE0Nzk2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/147966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsgf", "html_url": "https://github.com/jsgf", "followers_url": "https://api.github.com/users/jsgf/followers", "following_url": "https://api.github.com/users/jsgf/following{/other_user}", "gists_url": "https://api.github.com/users/jsgf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsgf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsgf/subscriptions", "organizations_url": "https://api.github.com/users/jsgf/orgs", "repos_url": "https://api.github.com/users/jsgf/repos", "events_url": "https://api.github.com/users/jsgf/events{/privacy}", "received_events_url": "https://api.github.com/users/jsgf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsgf", "id": 147966, "node_id": "MDQ6VXNlcjE0Nzk2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/147966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsgf", "html_url": "https://github.com/jsgf", "followers_url": "https://api.github.com/users/jsgf/followers", "following_url": "https://api.github.com/users/jsgf/following{/other_user}", "gists_url": "https://api.github.com/users/jsgf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsgf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsgf/subscriptions", "organizations_url": "https://api.github.com/users/jsgf/orgs", "repos_url": "https://api.github.com/users/jsgf/repos", "events_url": "https://api.github.com/users/jsgf/events{/privacy}", "received_events_url": "https://api.github.com/users/jsgf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "859657f2c5dbe2cf55cf7a7665383a81e676bdf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/859657f2c5dbe2cf55cf7a7665383a81e676bdf3", "html_url": "https://github.com/rust-lang/rust/commit/859657f2c5dbe2cf55cf7a7665383a81e676bdf3"}], "stats": {"total": 308, "additions": 304, "deletions": 4}, "files": [{"sha": "5eea9c86879001ef9a13ee6f3c8ecbc487697ccc", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=d2219c2e2e287d50c0f9761203d26d5fe3b0e639", "patch": "@@ -304,3 +304,10 @@ to customize the output:\n \n Note that it is invalid to combine the `--json` argument with the `--color`\n argument, and it is required to combine `--json` with `--error-format=json`.\n+\n+## `@path`: load command-line flags from a path\n+\n+If you specify `@path` on the command-line, then it will open `path` and read\n+command line options from it. These options are one per line; a blank line indicates\n+an empty option. The file can use Unix or Windows style line endings, and must be\n+encoded as UTF-8."}, {"sha": "a59f9afd8beb555a53b94a9405d8135c5334a169", "filename": "src/librustc_driver/args/mod.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Flibrustc_driver%2Fargs%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Flibrustc_driver%2Fargs%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fargs%2Fmod.rs?ref=d2219c2e2e287d50c0f9761203d26d5fe3b0e639", "patch": "@@ -0,0 +1,84 @@\n+use std::env;\n+use std::error;\n+use std::fmt;\n+use std::fs;\n+use std::io;\n+use std::str;\n+use std::sync::atomic::{AtomicBool, Ordering};\n+\n+#[cfg(test)]\n+mod tests;\n+\n+static USED_ARGSFILE_FEATURE: AtomicBool = AtomicBool::new(false);\n+\n+pub fn used_unstable_argsfile() -> bool {\n+    USED_ARGSFILE_FEATURE.load(Ordering::Relaxed)\n+}\n+\n+pub struct ArgsIter {\n+    base: env::ArgsOs,\n+    file: std::vec::IntoIter<String>,\n+}\n+\n+impl ArgsIter {\n+    pub fn new() -> Self {\n+        ArgsIter { base: env::args_os(), file: vec![].into_iter() }\n+    }\n+}\n+\n+impl Iterator for ArgsIter {\n+    type Item = Result<String, Error>;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        loop {\n+            if let Some(line) = self.file.next() {\n+                return Some(Ok(line));\n+            }\n+\n+            let arg =\n+                self.base.next().map(|arg| arg.into_string().map_err(|_| Error::Utf8Error(None)));\n+            match arg {\n+                Some(Err(err)) => return Some(Err(err)),\n+                Some(Ok(ref arg)) if arg.starts_with(\"@\") => {\n+                    let path = &arg[1..];\n+                    let file = match fs::read_to_string(path) {\n+                        Ok(file) => {\n+                            USED_ARGSFILE_FEATURE.store(true, Ordering::Relaxed);\n+                            file\n+                        }\n+                        Err(ref err) if err.kind() == io::ErrorKind::InvalidData => {\n+                            return Some(Err(Error::Utf8Error(Some(path.to_string()))));\n+                        }\n+                        Err(err) => return Some(Err(Error::IOError(path.to_string(), err))),\n+                    };\n+                    self.file =\n+                        file.lines().map(ToString::to_string).collect::<Vec<_>>().into_iter();\n+                }\n+                Some(Ok(arg)) => return Some(Ok(arg)),\n+                None => return None,\n+            }\n+        }\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub enum Error {\n+    Utf8Error(Option<String>),\n+    IOError(String, io::Error),\n+}\n+\n+impl fmt::Display for Error {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Error::Utf8Error(None) => write!(fmt, \"Utf8 error\"),\n+            Error::Utf8Error(Some(path)) => write!(fmt, \"Utf8 error in {}\", path),\n+            Error::IOError(path, err) => write!(fmt, \"IO Error: {}: {}\", path, err),\n+        }\n+    }\n+}\n+\n+impl error::Error for Error {\n+    fn description(&self) -> &'static str {\n+        \"argument error\"\n+    }\n+}"}, {"sha": "080dd5cb746c36d261a6411cdb6e0e0ba02bddd5", "filename": "src/librustc_driver/args/tests.rs", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Flibrustc_driver%2Fargs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Flibrustc_driver%2Fargs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fargs%2Ftests.rs?ref=d2219c2e2e287d50c0f9761203d26d5fe3b0e639", "patch": "@@ -0,0 +1,145 @@\n+use super::*;\n+\n+use std::str;\n+\n+fn want_args(v: impl IntoIterator<Item = &'static str>) -> Vec<String> {\n+    v.into_iter().map(String::from).collect()\n+}\n+\n+fn got_args(file: &[u8]) -> Result<Vec<String>, Error> {\n+    let ret = str::from_utf8(file)\n+        .map_err(|_| Error::Utf8Error(None))?\n+        .lines()\n+        .map(ToString::to_string)\n+        .collect::<Vec<_>>();\n+    Ok(ret)\n+}\n+\n+#[test]\n+fn nothing() {\n+    let file = b\"\";\n+\n+    assert_eq!(got_args(file).unwrap(), want_args(vec![]));\n+}\n+\n+#[test]\n+fn empty() {\n+    let file = b\"\\n\";\n+\n+    assert_eq!(got_args(file).unwrap(), want_args(vec![\"\"]));\n+}\n+\n+#[test]\n+fn simple() {\n+    let file = b\"foo\";\n+\n+    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\"]));\n+}\n+\n+#[test]\n+fn simple_eol() {\n+    let file = b\"foo\\n\";\n+\n+    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\"]));\n+}\n+\n+#[test]\n+fn multi() {\n+    let file = b\"foo\\nbar\";\n+\n+    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\", \"bar\"]));\n+}\n+\n+#[test]\n+fn multi_eol() {\n+    let file = b\"foo\\nbar\\n\";\n+\n+    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\", \"bar\"]));\n+}\n+\n+#[test]\n+fn multi_empty() {\n+    let file = b\"foo\\n\\nbar\";\n+\n+    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\", \"\", \"bar\"]));\n+}\n+\n+#[test]\n+fn multi_empty_eol() {\n+    let file = b\"foo\\n\\nbar\\n\";\n+\n+    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\", \"\", \"bar\"]));\n+}\n+\n+#[test]\n+fn multi_empty_start() {\n+    let file = b\"\\nfoo\\nbar\";\n+\n+    assert_eq!(got_args(file).unwrap(), want_args(vec![\"\", \"foo\", \"bar\"]));\n+}\n+\n+#[test]\n+fn multi_empty_end() {\n+    let file = b\"foo\\nbar\\n\\n\";\n+\n+    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\", \"bar\", \"\"]));\n+}\n+\n+#[test]\n+fn simple_eol_crlf() {\n+    let file = b\"foo\\r\\n\";\n+\n+    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\"]));\n+}\n+\n+#[test]\n+fn multi_crlf() {\n+    let file = b\"foo\\r\\nbar\";\n+\n+    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\", \"bar\"]));\n+}\n+\n+#[test]\n+fn multi_eol_crlf() {\n+    let file = b\"foo\\r\\nbar\\r\\n\";\n+\n+    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\", \"bar\"]));\n+}\n+\n+#[test]\n+fn multi_empty_crlf() {\n+    let file = b\"foo\\r\\n\\r\\nbar\";\n+\n+    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\", \"\", \"bar\"]));\n+}\n+\n+#[test]\n+fn multi_empty_eol_crlf() {\n+    let file = b\"foo\\r\\n\\r\\nbar\\r\\n\";\n+\n+    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\", \"\", \"bar\"]));\n+}\n+\n+#[test]\n+fn multi_empty_start_crlf() {\n+    let file = b\"\\r\\nfoo\\r\\nbar\";\n+\n+    assert_eq!(got_args(file).unwrap(), want_args(vec![\"\", \"foo\", \"bar\"]));\n+}\n+\n+#[test]\n+fn multi_empty_end_crlf() {\n+    let file = b\"foo\\r\\nbar\\r\\n\\r\\n\";\n+\n+    assert_eq!(got_args(file).unwrap(), want_args(vec![\"foo\", \"bar\", \"\"]));\n+}\n+\n+#[test]\n+fn bad_utf8() {\n+    let file = b\"foo\\x80foo\";\n+\n+    match got_args(file).unwrap_err() {\n+        Error::Utf8Error(_) => (),\n+        bad => panic!(\"bad err: {:?}\", bad),\n+    }\n+}"}, {"sha": "4843c1a951b3109a834659a72b8b8674c8b6d4bd", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=d2219c2e2e287d50c0f9761203d26d5fe3b0e639", "patch": "@@ -66,6 +66,7 @@ use syntax::symbol::sym;\n use syntax_pos::{DUMMY_SP, MultiSpan, FileName};\n \n pub mod pretty;\n+mod args;\n \n /// Exit status code used for successful compilation and help output.\n pub const EXIT_SUCCESS: i32 = 0;\n@@ -777,11 +778,17 @@ fn usage(verbose: bool, include_unstable_options: bool) {\n     } else {\n         \"\\n    --help -v           Print the full set of options rustc accepts\"\n     };\n-    println!(\"{options}\\nAdditional help:\n+    let at_path = if verbose && nightly_options::is_nightly_build() {\n+        \"    @path               Read newline separated options from `path`\\n\"\n+    } else {\n+        \"\"\n+    };\n+    println!(\"{options}{at_path}\\nAdditional help:\n     -C help             Print codegen options\n     -W help             \\\n               Print 'lint' options and default settings{nightly}{verbose}\\n\",\n              options = options.usage(message),\n+             at_path = at_path,\n              nightly = nightly_help,\n              verbose = verbose_help);\n }\n@@ -1008,6 +1015,12 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n     //   (unstable option being used on stable)\n     nightly_options::check_nightly_options(&matches, &config::rustc_optgroups());\n \n+    // Late check to see if @file was used without unstable options enabled\n+    if crate::args::used_unstable_argsfile() && !nightly_options::is_unstable_enabled(&matches) {\n+        early_error(ErrorOutputType::default(),\n+            \"@path is unstable - use -Z unstable-options to enable its use\");\n+    }\n+\n     if matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n         // Only show unstable options in --help if we accept unstable options.\n         usage(matches.opt_present(\"verbose\"), nightly_options::is_unstable_enabled(&matches));\n@@ -1186,10 +1199,10 @@ pub fn main() {\n     init_rustc_env_logger();\n     let mut callbacks = TimePassesCallbacks::default();\n     let result = report_ices_to_stderr_if_any(|| {\n-        let args = env::args_os().enumerate()\n-            .map(|(i, arg)| arg.into_string().unwrap_or_else(|arg| {\n+        let args = args::ArgsIter::new().enumerate()\n+            .map(|(i, arg)| arg.unwrap_or_else(|err| {\n                 early_error(ErrorOutputType::default(),\n-                            &format!(\"Argument {} is not valid Unicode: {:?}\", i, arg))\n+                            &format!(\"Argument {} is not valid: {}\", i, err))\n             }))\n             .collect::<Vec<_>>();\n         run_compiler(&args, &mut callbacks, None, None)"}, {"sha": "c070b0c2400d84bf703e9c647d2b988c60fca366", "filename": "src/test/ui/commandline-argfile-badutf8.args", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.args", "raw_url": "https://github.com/rust-lang/rust/raw/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.args", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.args?ref=d2219c2e2e287d50c0f9761203d26d5fe3b0e639", "patch": "@@ -0,0 +1,2 @@\n+--cfg\n+unbroken\ufffd\n\\ No newline at end of file"}, {"sha": "c017e7b5ea60b89dc9ae47f3b8b7d09fb7b5ea66", "filename": "src/test/ui/commandline-argfile-badutf8.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.rs?ref=d2219c2e2e287d50c0f9761203d26d5fe3b0e639", "patch": "@@ -0,0 +1,14 @@\n+// Check to see if we can get parameters from an @argsfile file\n+//\n+// build-fail\n+// normalize-stderr-test: \"Argument \\d+\" -> \"Argument $$N\"\n+// compile-flags: --cfg cmdline_set @{{src-base}}/commandline-argfile-badutf8.args\n+\n+#[cfg(not(cmdline_set))]\n+compile_error!(\"cmdline_set not set\");\n+\n+#[cfg(not(unbroken))]\n+compile_error!(\"unbroken not set\");\n+\n+fn main() {\n+}"}, {"sha": "cd8a03e34eac986010c17503d367091765c36e3f", "filename": "src/test/ui/commandline-argfile-badutf8.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.stderr?ref=d2219c2e2e287d50c0f9761203d26d5fe3b0e639", "patch": "@@ -0,0 +1,2 @@\n+error: Argument $N is not valid: Utf8 error in $DIR/commandline-argfile-badutf8.args\n+"}, {"sha": "34faf07633599005ce6c4135cd412bfe05c8c59e", "filename": "src/test/ui/commandline-argfile-missing.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Ftest%2Fui%2Fcommandline-argfile-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Ftest%2Fui%2Fcommandline-argfile-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommandline-argfile-missing.rs?ref=d2219c2e2e287d50c0f9761203d26d5fe3b0e639", "patch": "@@ -0,0 +1,16 @@\n+// Check to see if we can get parameters from an @argsfile file\n+//\n+// build-fail\n+// normalize-stderr-test: \"Argument \\d+\" -> \"Argument $$N\"\n+// normalize-stderr-test: \"os error \\d+\" -> \"os error $$ERR\"\n+// normalize-stderr-test: \"commandline-argfile-missing.args:[^(]*\" -> \"commandline-argfile-missing.args: $$FILE_MISSING \"\n+// compile-flags: --cfg cmdline_set @{{src-base}}/commandline-argfile-missing.args\n+\n+#[cfg(not(cmdline_set))]\n+compile_error!(\"cmdline_set not set\");\n+\n+#[cfg(not(unbroken))]\n+compile_error!(\"unbroken not set\");\n+\n+fn main() {\n+}"}, {"sha": "c0017782f2eb391b8b99513dbbbcc5334197484e", "filename": "src/test/ui/commandline-argfile-missing.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Ftest%2Fui%2Fcommandline-argfile-missing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Ftest%2Fui%2Fcommandline-argfile-missing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommandline-argfile-missing.stderr?ref=d2219c2e2e287d50c0f9761203d26d5fe3b0e639", "patch": "@@ -0,0 +1,2 @@\n+error: Argument $N is not valid: IO Error: $DIR/commandline-argfile-missing.args: $FILE_MISSING (os error $ERR)\n+"}, {"sha": "972938bf6c8dddf9a1a3a24d94e3fdc20f07fc29", "filename": "src/test/ui/commandline-argfile.args", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Ftest%2Fui%2Fcommandline-argfile.args", "raw_url": "https://github.com/rust-lang/rust/raw/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Ftest%2Fui%2Fcommandline-argfile.args", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommandline-argfile.args?ref=d2219c2e2e287d50c0f9761203d26d5fe3b0e639", "patch": "@@ -0,0 +1,2 @@\n+--cfg\n+unbroken\n\\ No newline at end of file"}, {"sha": "fc1ba0c8d677d7a57d8d3eb9c1e415107449ccb6", "filename": "src/test/ui/commandline-argfile.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Ftest%2Fui%2Fcommandline-argfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2219c2e2e287d50c0f9761203d26d5fe3b0e639/src%2Ftest%2Fui%2Fcommandline-argfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommandline-argfile.rs?ref=d2219c2e2e287d50c0f9761203d26d5fe3b0e639", "patch": "@@ -0,0 +1,13 @@\n+// Check to see if we can get parameters from an @argsfile file\n+//\n+// build-pass\n+// compile-flags: --cfg cmdline_set @{{src-base}}/commandline-argfile.args\n+\n+#[cfg(not(cmdline_set))]\n+compile_error!(\"cmdline_set not set\");\n+\n+#[cfg(not(unbroken))]\n+compile_error!(\"unbroken not set\");\n+\n+fn main() {\n+}"}]}