{"sha": "03ef8a081ef713609a65e71ed41c6775aeb138aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZWY4YTA4MWVmNzEzNjA5YTY1ZTcxZWQ0MWM2Nzc1YWViMTM4YWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-09T00:29:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-09T00:29:47Z"}, "message": "Auto merge of #76260 - xd009642:rfc/2867, r=jonas-schievink\n\nImplementation of RFC2867\n\nhttps://github.com/rust-lang/rust/issues/74727\n\nSo I've started work on this, I think my next steps are to make use of the `instruction_set` value in the llvm codegen but this is the point where I begin to get a bit lost. I'm looking at the code but it would be nice to have some guidance on what I've currently done and what I'm doing next :smile:", "tree": {"sha": "93f00603d6f1b4e7258c20e696619ffd8e727fa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93f00603d6f1b4e7258c20e696619ffd8e727fa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03ef8a081ef713609a65e71ed41c6775aeb138aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03ef8a081ef713609a65e71ed41c6775aeb138aa", "html_url": "https://github.com/rust-lang/rust/commit/03ef8a081ef713609a65e71ed41c6775aeb138aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03ef8a081ef713609a65e71ed41c6775aeb138aa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a84c4f9c82fbcae8e12201c141518c357d88410", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a84c4f9c82fbcae8e12201c141518c357d88410", "html_url": "https://github.com/rust-lang/rust/commit/8a84c4f9c82fbcae8e12201c141518c357d88410"}, {"sha": "bdb3f7716b567178ebda5006ed62cbe476408ef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb3f7716b567178ebda5006ed62cbe476408ef3", "html_url": "https://github.com/rust-lang/rust/commit/bdb3f7716b567178ebda5006ed62cbe476408ef3"}], "stats": {"total": 251, "additions": 247, "deletions": 4}, "files": [{"sha": "325af56f3cd8cf9a198c34db759322c685cb28f5", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=03ef8a081ef713609a65e71ed41c6775aeb138aa", "patch": "@@ -75,6 +75,12 @@ pub enum InlineAttr {\n     Never,\n }\n \n+#[derive(Clone, Encodable, Decodable)]\n+pub enum InstructionSetAttr {\n+    ArmA32,\n+    ArmT32,\n+}\n+\n #[derive(Clone, Encodable, Decodable)]\n pub enum OptimizeAttr {\n     None,"}, {"sha": "f02c30c3ee392046301ecb97c583c1f785d982ab", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=03ef8a081ef713609a65e71ed41c6775aeb138aa", "patch": "@@ -18,7 +18,7 @@ use crate::attributes;\n use crate::llvm::AttributePlace::Function;\n use crate::llvm::{self, Attribute};\n use crate::llvm_util;\n-pub use rustc_attr::{InlineAttr, OptimizeAttr};\n+pub use rustc_attr::{InlineAttr, InstructionSetAttr, OptimizeAttr};\n \n use crate::context::CodegenCx;\n use crate::value::Value;\n@@ -310,6 +310,10 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n             let feature = &f.as_str();\n             format!(\"+{}\", llvm_util::to_llvm_feature(cx.tcx.sess, feature))\n         }))\n+        .chain(codegen_fn_attrs.instruction_set.iter().map(|x| match x {\n+            InstructionSetAttr::ArmA32 => \"-thumb-mode\".to_string(),\n+            InstructionSetAttr::ArmT32 => \"+thumb-mode\".to_string(),\n+        }))\n         .collect::<Vec<String>>()\n         .join(\",\");\n "}, {"sha": "0a88759f84c9ab77975922a5bbb86cbff2b43fb1", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=03ef8a081ef713609a65e71ed41c6775aeb138aa", "patch": "@@ -460,6 +460,8 @@ E0774: include_str!(\"./error_codes/E0774.md\"),\n E0775: include_str!(\"./error_codes/E0775.md\"),\n E0776: include_str!(\"./error_codes/E0776.md\"),\n E0777: include_str!(\"./error_codes/E0777.md\"),\n+E0778: include_str!(\"./error_codes/E0778.md\"),\n+E0779: include_str!(\"./error_codes/E0779.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "467362dca58fdf15fe3d694463661b80e50a9a1a", "filename": "compiler/rustc_error_codes/src/error_codes/E0778.md", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0778.md", "raw_url": "https://github.com/rust-lang/rust/raw/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0778.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0778.md?ref=03ef8a081ef713609a65e71ed41c6775aeb138aa", "patch": "@@ -0,0 +1,35 @@\n+The `instruction_set` attribute was malformed.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0778\n+#![feature(isa_attribute)]\n+\n+#[instruction_set()] // error: expected one argument\n+pub fn something() {}\n+fn main() {}\n+```\n+\n+The parenthesized `instruction_set` attribute requires the parameter to be\n+specified:\n+\n+```\n+#![feature(isa_attribute)]\n+\n+#[cfg_attr(target_arch=\"arm\", instruction_set(arm::a32))]\n+fn something() {}\n+```\n+\n+or:\n+\n+```\n+#![feature(isa_attribute)]\n+\n+#[cfg_attr(target_arch=\"arm\", instruction_set(arm::t32))]\n+fn something() {}\n+```\n+\n+For more information see the [`instruction_set` attribute][isa-attribute]\n+section of the Reference.\n+\n+[isa-attribute]: https://doc.rust-lang.org/reference/attributes/codegen.html"}, {"sha": "146e20c262659213cf4337ab751457433c84800d", "filename": "compiler/rustc_error_codes/src/error_codes/E0779.md", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0779.md", "raw_url": "https://github.com/rust-lang/rust/raw/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0779.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0779.md?ref=03ef8a081ef713609a65e71ed41c6775aeb138aa", "patch": "@@ -0,0 +1,32 @@\n+An unknown argument was given to the `instruction_set` attribute.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0779\n+#![feature(isa_attribute)]\n+\n+#[instruction_set(intel::x64)] // error: invalid argument\n+pub fn something() {}\n+fn main() {}\n+```\n+\n+The `instruction_set` attribute only supports two arguments currently:\n+\n+ * arm::a32\n+ * arm::t32\n+\n+All other arguments given to the `instruction_set` attribute will return this\n+error. Example:\n+\n+```\n+#![feature(isa_attribute)]\n+\n+#[cfg_attr(target_arch=\"arm\", instruction_set(arm::a32))] // ok!\n+pub fn something() {}\n+fn main() {}\n+```\n+\n+For more information see the [`instruction_set` attribute][isa-attribute]\n+section of the Reference.\n+\n+[isa-attribute]: https://doc.rust-lang.org/reference/attributes/codegen.html"}, {"sha": "8a7f0517e732b1a7354adcae35b9d7bac64589df", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=03ef8a081ef713609a65e71ed41c6775aeb138aa", "patch": "@@ -599,6 +599,9 @@ declare_features! (\n     /// Allows argument and return position `impl Trait` in a `const fn`.\n     (active, const_impl_trait, \"1.48.0\", Some(77463), None),\n \n+    /// Allows `#[instruction_set(_)]` attribute\n+    (active, isa_attribute, \"1.48.0\", Some(74727), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "527a49b05389af33e4e5aabf7ce0601637406c1f", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=03ef8a081ef713609a65e71ed41c6775aeb138aa", "patch": "@@ -336,6 +336,8 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         optimize, AssumedUsed, template!(List: \"size|speed\"), optimize_attribute,\n         experimental!(optimize),\n     ),\n+    // RFC 2867\n+    gated!(instruction_set, AssumedUsed, template!(List: \"set\"), isa_attribute, experimental!(instruction_set)),\n \n     gated!(ffi_returns_twice, AssumedUsed, template!(Word), experimental!(ffi_returns_twice)),\n     gated!(ffi_pure, AssumedUsed, template!(Word), experimental!(ffi_pure)),"}, {"sha": "d6c6cef17513dc732cb4852731569a43ddbbbd84", "filename": "compiler/rustc_middle/src/ich/impls_hir.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_hir.rs?ref=03ef8a081ef713609a65e71ed41c6775aeb138aa", "patch": "@@ -221,6 +221,12 @@ impl<'hir> HashStable<StableHashingContext<'hir>> for attr::InlineAttr {\n     }\n }\n \n+impl<'hir> HashStable<StableHashingContext<'hir>> for attr::InstructionSetAttr {\n+    fn hash_stable(&self, hcx: &mut StableHashingContext<'hir>, hasher: &mut StableHasher) {\n+        mem::discriminant(self).hash_stable(hcx, hasher);\n+    }\n+}\n+\n impl<'hir> HashStable<StableHashingContext<'hir>> for attr::OptimizeAttr {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'hir>, hasher: &mut StableHasher) {\n         mem::discriminant(self).hash_stable(hcx, hasher);"}, {"sha": "a4363bb580a2f6c6ad5db697126e765debd23f11", "filename": "compiler/rustc_middle/src/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=03ef8a081ef713609a65e71ed41c6775aeb138aa", "patch": "@@ -1,5 +1,5 @@\n use crate::mir::mono::Linkage;\n-use rustc_attr::{InlineAttr, OptimizeAttr};\n+use rustc_attr::{InlineAttr, InstructionSetAttr, OptimizeAttr};\n use rustc_session::config::SanitizerSet;\n use rustc_span::symbol::Symbol;\n \n@@ -34,6 +34,10 @@ pub struct CodegenFnAttrs {\n     /// The `#[no_sanitize(...)]` attribute. Indicates sanitizers for which\n     /// instrumentation should be disabled inside the annotated function.\n     pub no_sanitize: SanitizerSet,\n+    /// The `#[instruction_set(set)]` attribute. Indicates if the generated code should\n+    /// be generated against a specific instruction set. Only usable on architectures which allow\n+    /// switching between multiple instruction sets.\n+    pub instruction_set: Option<InstructionSetAttr>,\n }\n \n bitflags! {\n@@ -98,6 +102,7 @@ impl CodegenFnAttrs {\n             linkage: None,\n             link_section: None,\n             no_sanitize: SanitizerSet::empty(),\n+            instruction_set: None,\n         }\n     }\n "}, {"sha": "223a0758f008bc2f98c22cc9a14a6b25c2e8cba2", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=03ef8a081ef713609a65e71ed41c6775aeb138aa", "patch": "@@ -212,6 +212,7 @@ symbols! {\n         _d,\n         _e,\n         _task_context,\n+        a32,\n         aarch64_target_feature,\n         abi,\n         abi_amdgpu_kernel,\n@@ -256,6 +257,7 @@ symbols! {\n         arbitrary_enum_discriminant,\n         arbitrary_self_types,\n         arith_offset,\n+        arm,\n         arm_target_feature,\n         array,\n         arrays,\n@@ -592,11 +594,13 @@ symbols! {\n         inlateout,\n         inline,\n         inout,\n+        instruction_set,\n         intel,\n         into_iter,\n         into_result,\n         intrinsics,\n         irrefutable_let_patterns,\n+        isa_attribute,\n         isize,\n         issue,\n         issue_5723_bootstrap,\n@@ -1065,6 +1069,7 @@ symbols! {\n         sym,\n         sync,\n         sync_trait,\n+        t32,\n         target_arch,\n         target_endian,\n         target_env,"}, {"sha": "a184934a99d868c5c959f032b03f72f65456a499", "filename": "compiler/rustc_target/src/spec/armv4t_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs?ref=03ef8a081ef713609a65e71ed41c6775aeb138aa", "patch": "@@ -20,6 +20,7 @@ pub fn target() -> TargetResult {\n             max_atomic_width: Some(32),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            has_thumb_interworking: true,\n             ..base\n         },\n     })"}, {"sha": "015d27415ace9525379f15ca10c4b6ec39e7b797", "filename": "compiler/rustc_target/src/spec/armv5te_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs?ref=03ef8a081ef713609a65e71ed41c6775aeb138aa", "patch": "@@ -20,6 +20,7 @@ pub fn target() -> TargetResult {\n             max_atomic_width: Some(32),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            has_thumb_interworking: true,\n             ..base\n         },\n     })"}, {"sha": "e35d805126164ab70070c6b8a4eb9f6fe54f98a2", "filename": "compiler/rustc_target/src/spec/armv5te_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs?ref=03ef8a081ef713609a65e71ed41c6775aeb138aa", "patch": "@@ -23,6 +23,7 @@ pub fn target() -> TargetResult {\n             max_atomic_width: Some(32),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}mcount\".to_string(),\n+            has_thumb_interworking: true,\n             ..base\n         },\n     })"}, {"sha": "a98dbbc4ed1446a9771ec19be43be9155cc65104", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=03ef8a081ef713609a65e71ed41c6775aeb138aa", "patch": "@@ -994,6 +994,10 @@ pub struct TargetOptions {\n     /// used to locate unwinding information is passed\n     /// (only has effect if the linker is `ld`-like).\n     pub eh_frame_header: bool,\n+\n+    /// Is true if the target is an ARM architecture using thumb v1 which allows for\n+    /// thumb and arm interworking.\n+    pub has_thumb_interworking: bool,\n }\n \n impl Default for TargetOptions {\n@@ -1086,6 +1090,7 @@ impl Default for TargetOptions {\n             llvm_args: vec![],\n             use_ctors_section: false,\n             eh_frame_header: true,\n+            has_thumb_interworking: false,\n         }\n     }\n }\n@@ -1479,6 +1484,7 @@ impl Target {\n         key!(llvm_args, list);\n         key!(use_ctors_section, bool);\n         key!(eh_frame_header, bool);\n+        key!(has_thumb_interworking, bool);\n \n         // NB: The old name is deprecated, but support for it is retained for\n         // compatibility.\n@@ -1717,6 +1723,7 @@ impl ToJson for Target {\n         target_option_val!(llvm_args);\n         target_option_val!(use_ctors_section);\n         target_option_val!(eh_frame_header);\n+        target_option_val!(has_thumb_interworking);\n \n         if default.unsupported_abis != self.options.unsupported_abis {\n             d.insert("}, {"sha": "e8b614e8345ee8f3c84a1f5b763c067b329d2599", "filename": "compiler/rustc_target/src/spec/thumbv4t_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs?ref=03ef8a081ef713609a65e71ed41c6775aeb138aa", "patch": "@@ -55,6 +55,7 @@ pub fn target() -> TargetResult {\n \n             // don't have atomic compare-and-swap\n             atomic_cas: false,\n+            has_thumb_interworking: true,\n \n             ..super::thumb_base::opts()\n         },"}, {"sha": "b64a1ce7c308269846c10c2a2fea30da21522cad", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 71, "deletions": 2, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ef8a081ef713609a65e71ed41c6775aeb138aa/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=03ef8a081ef713609a65e71ed41c6775aeb138aa", "patch": "@@ -21,8 +21,8 @@ use crate::constrained_generic_params as cgp;\n use crate::errors;\n use crate::middle::resolve_lifetime as rl;\n use rustc_ast as ast;\n-use rustc_ast::MetaItemKind;\n-use rustc_attr::{list_contains_name, InlineAttr, OptimizeAttr};\n+use rustc_ast::{MetaItemKind, NestedMetaItem};\n+use rustc_attr::{list_contains_name, InlineAttr, InstructionSetAttr, OptimizeAttr};\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_errors::{struct_span_err, Applicability};\n@@ -2647,6 +2647,75 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                     }\n                 }\n             }\n+        } else if tcx.sess.check_name(attr, sym::instruction_set) {\n+            codegen_fn_attrs.instruction_set = match attr.meta().map(|i| i.kind) {\n+                Some(MetaItemKind::List(ref items)) => match items.as_slice() {\n+                    [NestedMetaItem::MetaItem(set)] => {\n+                        let segments =\n+                            set.path.segments.iter().map(|x| x.ident.name).collect::<Vec<_>>();\n+                        match segments.as_slice() {\n+                            [sym::arm, sym::a32] | [sym::arm, sym::t32] => {\n+                                if !tcx.sess.target.target.options.has_thumb_interworking {\n+                                    struct_span_err!(\n+                                        tcx.sess.diagnostic(),\n+                                        attr.span,\n+                                        E0779,\n+                                        \"target does not support `#[instruction_set]`\"\n+                                    )\n+                                    .emit();\n+                                    None\n+                                } else if segments[1] == sym::a32 {\n+                                    Some(InstructionSetAttr::ArmA32)\n+                                } else if segments[1] == sym::t32 {\n+                                    Some(InstructionSetAttr::ArmT32)\n+                                } else {\n+                                    unreachable!()\n+                                }\n+                            }\n+                            _ => {\n+                                struct_span_err!(\n+                                    tcx.sess.diagnostic(),\n+                                    attr.span,\n+                                    E0779,\n+                                    \"invalid instruction set specified\",\n+                                )\n+                                .emit();\n+                                None\n+                            }\n+                        }\n+                    }\n+                    [] => {\n+                        struct_span_err!(\n+                            tcx.sess.diagnostic(),\n+                            attr.span,\n+                            E0778,\n+                            \"`#[instruction_set]` requires an argument\"\n+                        )\n+                        .emit();\n+                        None\n+                    }\n+                    _ => {\n+                        struct_span_err!(\n+                            tcx.sess.diagnostic(),\n+                            attr.span,\n+                            E0779,\n+                            \"cannot specify more than one instruction set\"\n+                        )\n+                        .emit();\n+                        None\n+                    }\n+                },\n+                _ => {\n+                    struct_span_err!(\n+                        tcx.sess.diagnostic(),\n+                        attr.span,\n+                        E0778,\n+                        \"must specify an instruction set\"\n+                    )\n+                    .emit();\n+                    None\n+                }\n+            };\n         }\n     }\n "}, {"sha": "60e5c2598f1eebbfcac772589ddba93ce144ec3c", "filename": "src/test/ui/error-codes/E0778.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03ef8a081ef713609a65e71ed41c6775aeb138aa/src%2Ftest%2Fui%2Ferror-codes%2FE0778.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ef8a081ef713609a65e71ed41c6775aeb138aa/src%2Ftest%2Fui%2Ferror-codes%2FE0778.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0778.rs?ref=03ef8a081ef713609a65e71ed41c6775aeb138aa", "patch": "@@ -0,0 +1,8 @@\n+#![feature(isa_attribute)]\n+\n+#[instruction_set()] //~ ERROR\n+fn no_isa_defined() {\n+}\n+\n+fn main() {\n+}"}, {"sha": "6ecae79242377921a1c97dc8010762fa39671222", "filename": "src/test/ui/error-codes/E0778.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/03ef8a081ef713609a65e71ed41c6775aeb138aa/src%2Ftest%2Fui%2Ferror-codes%2FE0778.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03ef8a081ef713609a65e71ed41c6775aeb138aa/src%2Ftest%2Fui%2Ferror-codes%2FE0778.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0778.stderr?ref=03ef8a081ef713609a65e71ed41c6775aeb138aa", "patch": "@@ -0,0 +1,9 @@\n+error[E0778]: `#[instruction_set]` requires an argument\n+  --> $DIR/E0778.rs:3:1\n+   |\n+LL | #[instruction_set()]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0778`."}, {"sha": "1b4dbce20360ce64838731776ce403cfab95a2c3", "filename": "src/test/ui/error-codes/E0779.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03ef8a081ef713609a65e71ed41c6775aeb138aa/src%2Ftest%2Fui%2Ferror-codes%2FE0779.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ef8a081ef713609a65e71ed41c6775aeb138aa/src%2Ftest%2Fui%2Ferror-codes%2FE0779.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0779.rs?ref=03ef8a081ef713609a65e71ed41c6775aeb138aa", "patch": "@@ -0,0 +1,6 @@\n+#![feature(isa_attribute)]\n+\n+#[instruction_set(arm::magic)] //~ ERROR\n+fn main() {\n+\n+}"}, {"sha": "da787260d4f6d31c2ee546a6ff9a6ea40efe8b81", "filename": "src/test/ui/error-codes/E0779.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/03ef8a081ef713609a65e71ed41c6775aeb138aa/src%2Ftest%2Fui%2Ferror-codes%2FE0779.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03ef8a081ef713609a65e71ed41c6775aeb138aa/src%2Ftest%2Fui%2Ferror-codes%2FE0779.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0779.stderr?ref=03ef8a081ef713609a65e71ed41c6775aeb138aa", "patch": "@@ -0,0 +1,9 @@\n+error[E0779]: invalid instruction set specified\n+  --> $DIR/E0779.rs:3:1\n+   |\n+LL | #[instruction_set(arm::magic)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0779`."}, {"sha": "cb02a0955e913ea2846d2670de69f496fd9b0856", "filename": "src/test/ui/feature-gate-isa_attribute.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03ef8a081ef713609a65e71ed41c6775aeb138aa/src%2Ftest%2Fui%2Ffeature-gate-isa_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ef8a081ef713609a65e71ed41c6775aeb138aa/src%2Ftest%2Fui%2Ffeature-gate-isa_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-isa_attribute.rs?ref=03ef8a081ef713609a65e71ed41c6775aeb138aa", "patch": "@@ -0,0 +1,6 @@\n+#[instruction_set]\n+//~^ ERROR the `#[instruction_set]` attribute is an experimental feature [E0658]\n+//~| ERROR malformed `instruction_set` attribute input\n+//~| ERROR must specify an instruction set [E0778]\n+fn main() {\n+}"}, {"sha": "2a95a80ca6178235e8b82c55125dec5c2be24461", "filename": "src/test/ui/feature-gate-isa_attribute.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/03ef8a081ef713609a65e71ed41c6775aeb138aa/src%2Ftest%2Fui%2Ffeature-gate-isa_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03ef8a081ef713609a65e71ed41c6775aeb138aa/src%2Ftest%2Fui%2Ffeature-gate-isa_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-isa_attribute.stderr?ref=03ef8a081ef713609a65e71ed41c6775aeb138aa", "patch": "@@ -0,0 +1,25 @@\n+error: malformed `instruction_set` attribute input\n+  --> $DIR/feature-gate-isa_attribute.rs:1:1\n+   |\n+LL | #[instruction_set]\n+   | ^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[instruction_set(set)]`\n+\n+error[E0658]: the `#[instruction_set]` attribute is an experimental feature\n+  --> $DIR/feature-gate-isa_attribute.rs:1:1\n+   |\n+LL | #[instruction_set]\n+   | ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #74727 <https://github.com/rust-lang/rust/issues/74727> for more information\n+   = help: add `#![feature(isa_attribute)]` to the crate attributes to enable\n+\n+error[E0778]: must specify an instruction set\n+  --> $DIR/feature-gate-isa_attribute.rs:1:1\n+   |\n+LL | #[instruction_set]\n+   | ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0658, E0778.\n+For more information about an error, try `rustc --explain E0658`."}]}