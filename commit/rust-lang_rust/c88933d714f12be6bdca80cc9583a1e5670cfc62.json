{"sha": "c88933d714f12be6bdca80cc9583a1e5670cfc62", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ODkzM2Q3MTRmMTJiZTZiZGNhODBjYzk1ODNhMWU1NjcwY2ZjNjI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-01T00:31:24Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-01T00:33:20Z"}, "message": "rustc: Implement unary move. Closes #917.", "tree": {"sha": "8d17f1dc5cec7892ff7cc71bb4b5cf0d3a883f1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d17f1dc5cec7892ff7cc71bb4b5cf0d3a883f1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c88933d714f12be6bdca80cc9583a1e5670cfc62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c88933d714f12be6bdca80cc9583a1e5670cfc62", "html_url": "https://github.com/rust-lang/rust/commit/c88933d714f12be6bdca80cc9583a1e5670cfc62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c88933d714f12be6bdca80cc9583a1e5670cfc62/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4bb8f8aafd25b9d5e68481af7088ab9e47c1e29", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4bb8f8aafd25b9d5e68481af7088ab9e47c1e29", "html_url": "https://github.com/rust-lang/rust/commit/c4bb8f8aafd25b9d5e68481af7088ab9e47c1e29"}], "stats": {"total": 72, "additions": 48, "deletions": 24}, "files": [{"sha": "172de551ad0a9902b930c21a6b9a5343d493c03d", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=c88933d714f12be6bdca80cc9583a1e5670cfc62", "patch": "@@ -15,7 +15,7 @@ syn match     rustAssert      \"assert\\(\\w\\)*\"\n syn keyword   rustKeyword     alt again as break\n syn keyword   rustKeyword     check claim const copy do drop else export extern fail\n syn keyword   rustKeyword     for if impl import in let log\n-syn keyword   rustKeyword     loop mod mut new of owned pure\n+syn keyword   rustKeyword     loop mod move mut new of owned pure\n syn keyword   rustKeyword     ret self to unchecked\n syn match     rustKeyword     \"unsafe\" \" Allows also matching unsafe::foo()\n syn keyword   rustKeyword     use while with"}, {"sha": "43b0a4047b6103d764ca388adb0343c12970a841", "filename": "src/libcore/future.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Flibcore%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Flibcore%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture.rs?ref=c88933d714f12be6bdca80cc9583a1e5670cfc62", "patch": "@@ -60,7 +60,7 @@ fn from_value<A>(+val: A) -> future<A> {\n     })\n }\n \n-macro_rules! move{\n+macro_rules! move_it {\n     {$x:expr} => { unsafe { let y <- *ptr::addr_of($x); y } }\n }\n \n@@ -78,7 +78,7 @@ fn from_port<A:send>(-port: future_pipe::client::waiting<A>) -> future<A> {\n         port_ <-> *port;\n         let port = option::unwrap(port_);\n         alt recv(port) {\n-          future_pipe::completed(data) { move!{data} }\n+          future_pipe::completed(data) { move_it!{data} }\n         }\n     }\n }"}, {"sha": "3d115463844ce4f199acd06daa5e3662d7a4cec0", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=c88933d714f12be6bdca80cc9583a1e5670cfc62", "patch": "@@ -22,13 +22,13 @@ export stream, port, chan, shared_chan, port_set, channel;\n \n const SPIN_COUNT: uint = 0;\n \n-macro_rules! move {\n+macro_rules! move_it {\n     { $x:expr } => { unsafe { let y <- *ptr::addr_of($x); y } }\n }\n \n // This is to help make sure we only move out of enums in safe\n // places. Once there is unary move, it can be removed.\n-fn move<T>(-x: T) -> T { x }\n+fn move_it<T>(-x: T) -> T { x }\n \n enum state {\n     empty,\n@@ -228,7 +228,7 @@ class buffer_resource<T: send> {\n     }\n \n     drop unsafe {\n-        let b = move!{self.buffer};\n+        let b = move_it!{self.buffer};\n         //let p = ptr::addr_of(*b);\n         //error!{\"drop %?\", p};\n         let old_count = atomic_sub_rel(b.header.ref_count, 1);\n@@ -725,10 +725,10 @@ impl port<T: send> of recv<T> for port<T> {\n     fn try_recv() -> option<T> {\n         let mut endp = none;\n         endp <-> self.endp;\n-        alt move(pipes::try_recv(unwrap(endp))) {\n+        alt move_it(pipes::try_recv(unwrap(endp))) {\n           some(streamp::data(x, endp)) {\n-            self.endp = some(move!{endp});\n-            some(move!{x})\n+            self.endp = some(move_it!{endp});\n+            some(move_it!{x})\n           }\n           none { none }\n         }\n@@ -770,9 +770,9 @@ class port_set<T: send> : recv<T> {\n             let i = wait_many(self.ports.map(|p| p.header()));\n             // dereferencing an unsafe pointer nonsense to appease the\n             // borrowchecker.\n-            alt move(unsafe {(*ptr::addr_of(self.ports[i])).try_recv()}) {\n+            alt move_it(unsafe {(*ptr::addr_of(self.ports[i])).try_recv()}) {\n               some(m) {\n-                  result = some(move!{m});\n+                  result = some(move_it!{m});\n               }\n               none {\n                 // Remove this port."}, {"sha": "8c2b6dc3490c340223bef06966ac342629a699b2", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c88933d714f12be6bdca80cc9583a1e5670cfc62", "patch": "@@ -322,6 +322,7 @@ enum expr_ {\n \n     expr_copy(@expr),\n     expr_move(@expr, @expr),\n+    expr_unary_move(@expr),\n     expr_assign(@expr, @expr),\n     expr_swap(@expr, @expr),\n     expr_assign_op(binop, @expr, @expr),"}, {"sha": "5e533f3f49421fbc10cd1e4f3d595687f4059248", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=c88933d714f12be6bdca80cc9583a1e5670cfc62", "patch": "@@ -454,6 +454,7 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n             expr_move(fld.fold_expr(el), fld.fold_expr(er))\n           }\n           expr_copy(e) { expr_copy(fld.fold_expr(e)) }\n+          expr_unary_move(e) { expr_unary_move(fld.fold_expr(e)) }\n           expr_assign(el, er) {\n             expr_assign(fld.fold_expr(el), fld.fold_expr(er))\n           }"}, {"sha": "aaafbf0ef243dbff7202ddd37870953696660b9e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c88933d714f12be6bdca80cc9583a1e5670cfc62", "patch": "@@ -31,12 +31,12 @@ import ast::{_mod, add, alt_check, alt_exhaustive, arg, arm, attribute,\n              expr_index, expr_lit, expr_log, expr_loop,\n              expr_loop_body, expr_mac, expr_move, expr_new, expr_path,\n              expr_rec, expr_ret, expr_swap, expr_struct, expr_tup, expr_unary,\n-             expr_vec, expr_vstore, expr_while, extern_fn, field, fn_decl,\n-             foreign_item, foreign_item_fn, foreign_mod, ident, impure_fn,\n-             infer, init_assign, init_move, initializer, instance_var, item,\n-             item_, item_class, item_const, item_enum, item_fn,\n-             item_foreign_mod, item_impl, item_mac, item_mod, item_trait,\n-             item_ty, lit, lit_, lit_bool, lit_float, lit_int,\n+             expr_unary_move, expr_vec, expr_vstore, expr_while, extern_fn,\n+             field, fn_decl, foreign_item, foreign_item_fn, foreign_mod,\n+             ident, impure_fn, infer, init_assign, init_move, initializer,\n+             instance_var, item, item_, item_class, item_const, item_enum,\n+             item_fn, item_foreign_mod, item_impl, item_mac, item_mod,\n+             item_trait, item_ty, lit, lit_, lit_bool, lit_float, lit_int,\n              lit_int_unsuffixed, lit_nil, lit_str, lit_uint, local, m_const,\n              m_imm, m_mutbl, mac_, mac_aq, mac_ellipsis,\n              mac_invoc, mac_invoc_tt, mac_var, matcher, match_nonterminal,\n@@ -854,6 +854,10 @@ class parser {\n             let e = self.parse_expr();\n             ex = expr_copy(e);\n             hi = e.span.hi;\n+        } else if self.eat_keyword(~\"move\") {\n+            let e = self.parse_expr();\n+            ex = expr_unary_move(e);\n+            hi = e.span.hi;\n         } else if self.token == token::MOD_SEP ||\n             is_ident(self.token) && !self.is_keyword(~\"true\") &&\n             !self.is_keyword(~\"false\") {"}, {"sha": "1d4e67c5d14d15e3ecc0e90d5acf1d659debee62", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=c88933d714f12be6bdca80cc9583a1e5670cfc62", "patch": "@@ -327,7 +327,7 @@ fn restricted_keyword_table() -> hashmap<~str, ()> {\n         ~\"fail\", ~\"false\", ~\"fn\", ~\"for\",\n         ~\"if\", ~\"iface\", ~\"impl\", ~\"import\",\n         ~\"let\", ~\"log\", ~\"loop\",\n-        ~\"match\", ~\"mod\", ~\"module\", ~\"mut\",\n+        ~\"match\", ~\"mod\", ~\"module\", ~\"move\", ~\"mut\",\n         ~\"new\",\n         ~\"owned\",\n         ~\"pure\","}, {"sha": "41e795fd43681ecc93dae7739ea7a8f9b8c6f11f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c88933d714f12be6bdca80cc9583a1e5670cfc62", "patch": "@@ -1100,6 +1100,7 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         print_block(s, blk);\n       }\n       ast::expr_copy(e) { word_space(s, ~\"copy\"); print_expr(s, e); }\n+      ast::expr_unary_move(e) { word_space(s, ~\"move\"); print_expr(s, e); }\n       ast::expr_move(lhs, rhs) {\n         print_expr(s, lhs);\n         space(s.s);"}, {"sha": "050d7e5812076650dcf9c08fbf2e4d43dc2f3b88", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=c88933d714f12be6bdca80cc9583a1e5670cfc62", "patch": "@@ -408,6 +408,7 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n       expr_block(b) { v.visit_block(b, e, v); }\n       expr_assign(a, b) { v.visit_expr(b, e, v); v.visit_expr(a, e, v); }\n       expr_copy(a) { v.visit_expr(a, e, v); }\n+      expr_unary_move(a) { v.visit_expr(a, e, v); }\n       expr_move(a, b) { v.visit_expr(b, e, v); v.visit_expr(a, e, v); }\n       expr_swap(a, b) { v.visit_expr(a, e, v); v.visit_expr(b, e, v); }\n       expr_assign_op(_, a, b) {"}, {"sha": "36b35dbbdbcfcf298bb761e1c7aee28e5cfdd52d", "filename": "src/rustc/middle/borrowck/categorization.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs?ref=c88933d714f12be6bdca80cc9583a1e5670cfc62", "patch": "@@ -181,7 +181,8 @@ impl public_methods for borrowck_ctxt {\n           ast::expr_new(*) | ast::expr_binary(*) | ast::expr_while(*) |\n           ast::expr_block(*) | ast::expr_loop(*) | ast::expr_alt(*) |\n           ast::expr_lit(*) | ast::expr_break | ast::expr_mac(*) |\n-          ast::expr_again | ast::expr_rec(*) | ast::expr_struct(*) {\n+          ast::expr_again | ast::expr_rec(*) | ast::expr_struct(*) |\n+          ast::expr_unary_move(*) {\n             ret self.cat_rvalue(expr, expr_ty);\n           }\n         }"}, {"sha": "8a65a1b056782619c63f8eac583dccbe99003b64", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=c88933d714f12be6bdca80cc9583a1e5670cfc62", "patch": "@@ -470,8 +470,8 @@ fn visit_expr(expr: @expr, &&self: @ir_maps, vt: vt<@ir_maps>) {\n       expr_loop_body(*) | expr_do_body(*) | expr_cast(*) |\n       expr_unary(*) | expr_fail(*) |\n       expr_break | expr_again | expr_lit(_) | expr_ret(*) |\n-      expr_block(*) | expr_move(*) | expr_assign(*) | expr_swap(*) |\n-      expr_assign_op(*) | expr_mac(*) | expr_struct(*) {\n+      expr_block(*) | expr_move(*) | expr_unary_move(*) | expr_assign(*) |\n+      expr_swap(*) | expr_assign_op(*) | expr_mac(*) | expr_struct(*) => {\n           visit::visit_expr(expr, self, vt);\n       }\n     }\n@@ -1104,6 +1104,7 @@ class liveness {\n           expr_assert(e) |\n           expr_addr_of(_, e) |\n           expr_copy(e) |\n+          expr_unary_move(e) |\n           expr_loop_body(e) |\n           expr_do_body(e) |\n           expr_cast(e, _) |\n@@ -1430,6 +1431,12 @@ fn check_expr(expr: @expr, &&self: @liveness, vt: vt<@liveness>) {\n         visit::visit_expr(expr, self, vt);\n       }\n \n+      expr_unary_move(r) {\n+        self.check_move_from_expr(r, vt);\n+\n+        visit::visit_expr(expr, self, vt);\n+      }\n+\n       expr_assign_op(_, l, _) {\n         self.check_lvalue(l, vt);\n "}, {"sha": "96e7c74f25dcf3da88886aa95773e3cc2701b68e", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=c88933d714f12be6bdca80cc9583a1e5670cfc62", "patch": "@@ -3682,7 +3682,7 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n           ast::expr_do_body(blk) {\n             ret trans_expr(bcx, blk, dest);\n           }\n-          ast::expr_copy(a) {\n+          ast::expr_copy(a) | ast::expr_unary_move(a) {\n             if !expr_is_lval(bcx, a) {\n                 ret trans_expr(bcx, a, dest);\n             }"}, {"sha": "8ab6fbfc6eba7bbae8369d4c66fbd74e3f270b84", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=c88933d714f12be6bdca80cc9583a1e5670cfc62", "patch": "@@ -158,7 +158,7 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n       expr_rec(_, _) | expr_struct(*) | expr_tup(_) |\n       expr_unary(box(_), _) | expr_unary(uniq(_), _) |\n       expr_binary(add, _, _) |\n-      expr_copy(_) | expr_move(_, _) {\n+      expr_copy(_) | expr_move(_, _) | expr_unary_move(_) {\n         node_type_needs(cx, use_repr, e.id);\n       }\n       expr_cast(base, _) {"}, {"sha": "db9084cbad161cc020b3b76a10b01afa3bb3461a", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=c88933d714f12be6bdca80cc9583a1e5670cfc62", "patch": "@@ -1416,7 +1416,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         bot = check_expr_with(fcx, e, ty::mk_bool(tcx));\n         fcx.write_nil(id);\n       }\n-      ast::expr_copy(a) {\n+      ast::expr_copy(a) | ast::expr_unary_move(a) {\n         bot = check_expr(fcx, a, expected);\n         fcx.write_ty(id, fcx.expr_ty(a));\n       }"}, {"sha": "5178d5a1e9b06c12513a3b3c8f7dfc7baa98822c", "filename": "src/test/compile-fail/unary-move.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Ftest%2Fcompile-fail%2Funary-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88933d714f12be6bdca80cc9583a1e5670cfc62/src%2Ftest%2Fcompile-fail%2Funary-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funary-move.rs?ref=c88933d714f12be6bdca80cc9583a1e5670cfc62", "patch": "@@ -0,0 +1,8 @@\n+// error-pattern: use of moved variable\n+\n+fn main() {\n+    let x = 3;\n+    let y = move x;\n+    debug!(\"%d\", x);\n+}\n+"}]}