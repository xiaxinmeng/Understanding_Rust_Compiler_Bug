{"sha": "85d6029c136f155a2b994be8ef7b2ed0876428bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZDYwMjljMTM2ZjE1NWEyYjk5NGJlOGVmN2IyZWQwODc2NDI4YmY=", "commit": {"author": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2021-09-04T14:44:26Z"}, "committer": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2021-09-04T14:44:26Z"}, "message": "`AbstractConst::root`: Always run `subst` when `Node` is `Leaf`", "tree": {"sha": "46ae44fc088d121e398a5934fc527d77c71f3ee6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46ae44fc088d121e398a5934fc527d77c71f3ee6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85d6029c136f155a2b994be8ef7b2ed0876428bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85d6029c136f155a2b994be8ef7b2ed0876428bf", "html_url": "https://github.com/rust-lang/rust/commit/85d6029c136f155a2b994be8ef7b2ed0876428bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85d6029c136f155a2b994be8ef7b2ed0876428bf/comments", "author": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72a51c39c69256c8a8256e775f2764a1983048d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/72a51c39c69256c8a8256e775f2764a1983048d4", "html_url": "https://github.com/rust-lang/rust/commit/72a51c39c69256c8a8256e775f2764a1983048d4"}], "stats": {"total": 52, "additions": 25, "deletions": 27}, "files": [{"sha": "96a398ddf0507a833acbf55dfc61e97b8b6e2d30", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/85d6029c136f155a2b994be8ef7b2ed0876428bf/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85d6029c136f155a2b994be8ef7b2ed0876428bf/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=85d6029c136f155a2b994be8ef7b2ed0876428bf", "patch": "@@ -23,7 +23,7 @@ use rustc_middle::mir::abstract_const::Node as ACNode;\n use rustc_middle::span_bug;\n use rustc_middle::ty::fold::TypeVisitor;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::subst::{InternalSubsts, Subst};\n+use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, Const, GenericParamDefKind, TraitRef, Ty, TyCtxt, TypeFoldable};\n use rustc_session::lint;\n use rustc_span::hygiene::Transparency;\n@@ -153,11 +153,8 @@ where\n         tcx: TyCtxt<'tcx>,\n         ct: AbstractConst<'tcx>,\n     ) -> ControlFlow<V::BreakTy> {\n-        const_evaluatable::walk_abstract_const(tcx, ct, |node| match node.root() {\n-            ACNode::Leaf(leaf) => {\n-                let leaf = leaf.subst(tcx, ct.substs);\n-                self.visit_const(leaf)\n-            }\n+        const_evaluatable::walk_abstract_const(tcx, ct, |node| match node.root(tcx, ct.substs) {\n+            ACNode::Leaf(leaf) => self.visit_const(leaf),\n             ACNode::Cast(_, _, ty) => self.visit_ty(ty),\n             ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {\n                 ControlFlow::CONTINUE"}, {"sha": "f070e9dd5e5d549c45c1b1b988f808a837f96c6d", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/85d6029c136f155a2b994be8ef7b2ed0876428bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85d6029c136f155a2b994be8ef7b2ed0876428bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=85d6029c136f155a2b994be8ef7b2ed0876428bf", "patch": "@@ -8,6 +8,7 @@\n //! In this case we try to build an abstract representation of this constant using\n //! `mir_abstract_const` which can then be checked for structural equality with other\n //! generic constants mentioned in the `caller_bounds` of the current environment.\n+use crate::traits::ty::subst::GenericArg;\n use rustc_errors::ErrorReported;\n use rustc_hir::def::DefKind;\n use rustc_index::bit_set::BitSet;\n@@ -80,9 +81,8 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                     Concrete,\n                 }\n                 let mut failure_kind = FailureKind::Concrete;\n-                walk_abstract_const::<!, _>(tcx, ct, |node| match node.root() {\n+                walk_abstract_const::<!, _>(tcx, ct, |node| match node.root(tcx, ct.substs) {\n                     Node::Leaf(leaf) => {\n-                        let leaf = leaf.subst(tcx, ct.substs);\n                         if leaf.has_infer_types_or_consts() {\n                             failure_kind = FailureKind::MentionsInfer;\n                         } else if leaf.definitely_has_param_types_or_consts(tcx) {\n@@ -92,7 +92,6 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                         ControlFlow::CONTINUE\n                     }\n                     Node::Cast(_, _, ty) => {\n-                        let ty = ty.subst(tcx, ct.substs);\n                         if ty.has_infer_types_or_consts() {\n                             failure_kind = FailureKind::MentionsInfer;\n                         } else if ty.definitely_has_param_types_or_consts(tcx) {\n@@ -218,8 +217,12 @@ impl<'tcx> AbstractConst<'tcx> {\n     }\n \n     #[inline]\n-    pub fn root(self) -> Node<'tcx> {\n-        self.inner.last().copied().unwrap()\n+    pub fn root(self, tcx: TyCtxt<'tcx>, substs: &[GenericArg<'tcx>]) -> Node<'tcx> {\n+        let mut node = self.inner.last().copied().unwrap();\n+        if let Node::Leaf(leaf) = node {\n+            node = Node::Leaf(leaf.subst(tcx, substs));\n+        }\n+        node\n     }\n }\n \n@@ -587,7 +590,7 @@ where\n         f: &mut dyn FnMut(AbstractConst<'tcx>) -> ControlFlow<R>,\n     ) -> ControlFlow<R> {\n         f(ct)?;\n-        let root = ct.root();\n+        let root = ct.root(tcx, ct.substs);\n         match root {\n             Node::Leaf(_) => ControlFlow::CONTINUE,\n             Node::Binop(_, l, r) => {\n@@ -615,27 +618,23 @@ pub(super) fn try_unify<'tcx>(\n     // We substitute generics repeatedly to allow AbstractConsts to unify where a\n     // ConstKind::Unevalated could be turned into an AbstractConst that would unify e.g.\n     // Param(N) should unify with Param(T), substs: [Unevaluated(\"T2\", [Unevaluated(\"T3\", [Param(N)])])]\n-    while let Node::Leaf(a_ct) = a.root() {\n-        let a_ct = a_ct.subst(tcx, a.substs);\n+    while let Node::Leaf(a_ct) = a.root(tcx, a.substs) {\n         match AbstractConst::from_const(tcx, a_ct) {\n             Ok(Some(a_act)) => a = a_act,\n             Ok(None) => break,\n             Err(_) => return true,\n         }\n     }\n-    while let Node::Leaf(b_ct) = b.root() {\n-        let b_ct = b_ct.subst(tcx, b.substs);\n+    while let Node::Leaf(b_ct) = b.root(tcx, b.substs) {\n         match AbstractConst::from_const(tcx, b_ct) {\n             Ok(Some(b_act)) => b = b_act,\n             Ok(None) => break,\n             Err(_) => return true,\n         }\n     }\n \n-    match (a.root(), b.root()) {\n+    match (a.root(tcx, a.substs), b.root(tcx, b.substs)) {\n         (Node::Leaf(a_ct), Node::Leaf(b_ct)) => {\n-            let a_ct = a_ct.subst(tcx, a.substs);\n-            let b_ct = b_ct.subst(tcx, b.substs);\n             if a_ct.ty != b_ct.ty {\n                 return false;\n             }"}, {"sha": "dee95a3be386c12863841f97d06fe486f38993ff", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/85d6029c136f155a2b994be8ef7b2ed0876428bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85d6029c136f155a2b994be8ef7b2ed0876428bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=85d6029c136f155a2b994be8ef7b2ed0876428bf", "patch": "@@ -838,14 +838,16 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n             // constants which are not considered const evaluatable.\n             use rustc_middle::mir::abstract_const::Node;\n             if let Ok(Some(ct)) = AbstractConst::new(self.tcx, uv.shrink()) {\n-                const_evaluatable::walk_abstract_const(self.tcx, ct, |node| match node.root() {\n-                    Node::Leaf(leaf) => {\n-                        let leaf = leaf.subst(self.tcx, ct.substs);\n-                        self.visit_const(leaf)\n-                    }\n-                    Node::Cast(_, _, ty) => self.visit_ty(ty),\n-                    Node::Binop(..) | Node::UnaryOp(..) | Node::FunctionCall(_, _) => {\n-                        ControlFlow::CONTINUE\n+                const_evaluatable::walk_abstract_const(self.tcx, ct, |node| {\n+                    match node.root(self.tcx, ct.substs) {\n+                        Node::Leaf(leaf) => {\n+                            // let leaf = leaf.subst(self.tcx, ct.substs);\n+                            self.visit_const(leaf)\n+                        }\n+                        Node::Cast(_, _, ty) => self.visit_ty(ty),\n+                        Node::Binop(..) | Node::UnaryOp(..) | Node::FunctionCall(_, _) => {\n+                            ControlFlow::CONTINUE\n+                        }\n                     }\n                 })\n             } else {"}]}