{"sha": "5714e2c11b939628247dd0107545e2feb8b74b47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MTRlMmMxMWI5Mzk2MjgyNDdkZDAxMDc1NDVlMmZlYjhiNzRiNDc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-05-02T09:24:41Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-05-02T09:49:15Z"}, "message": "libcore: optimize string joining routines.\n\nThis makes concat/connect/connect_slices about 20% faster, and takes\n`repeat` from O(n^2) to O(n), and lowers the constant factor.", "tree": {"sha": "0400666e55a666c12e779e0defc3e9e2cf70c114", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0400666e55a666c12e779e0defc3e9e2cf70c114"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5714e2c11b939628247dd0107545e2feb8b74b47", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5714e2c11b939628247dd0107545e2feb8b74b47", "html_url": "https://github.com/rust-lang/rust/commit/5714e2c11b939628247dd0107545e2feb8b74b47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5714e2c11b939628247dd0107545e2feb8b74b47/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afcb9e9d868238accfdff2089684470bf89a92f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/afcb9e9d868238accfdff2089684470bf89a92f8", "html_url": "https://github.com/rust-lang/rust/commit/afcb9e9d868238accfdff2089684470bf89a92f8"}], "stats": {"total": 118, "additions": 106, "deletions": 12}, "files": [{"sha": "f3181b26bd7e02f914543462dd97fdd60688cb47", "filename": "src/libcore/str.rs", "status": "modified", "additions": 106, "deletions": 12, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/5714e2c11b939628247dd0107545e2feb8b74b47/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5714e2c11b939628247dd0107545e2feb8b74b47/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=5714e2c11b939628247dd0107545e2feb8b74b47", "patch": "@@ -241,38 +241,132 @@ pub fn append(lhs: ~str, rhs: &str) -> ~str {\n \n /// Concatenate a vector of strings\n pub fn concat(v: &[~str]) -> ~str {\n-    let mut s: ~str = ~\"\";\n-    for vec::each(v) |ss| {\n-        push_str(&mut s, *ss);\n+    if v.is_empty() { return ~\"\"; }\n+\n+    let mut len = 0;\n+    for v.each |ss| {\n+        len += ss.len();\n+    }\n+    let mut s = ~\"\";\n+\n+    reserve(&mut s, len);\n+\n+    unsafe {\n+        do as_buf(s) |buf, _len| {\n+            let mut buf = ::cast::transmute_mut_unsafe(buf);\n+            for v.each |ss| {\n+                do as_buf(*ss) |ssbuf, sslen| {\n+                    let sslen = sslen - 1;\n+                    ptr::copy_memory(buf, ssbuf, sslen);\n+                    buf = buf.offset(sslen);\n+                }\n+            }\n+        }\n+        raw::set_len(&mut s, len);\n     }\n     s\n }\n \n /// Concatenate a vector of strings, placing a given separator between each\n pub fn connect(v: &[~str], sep: &str) -> ~str {\n+    if v.is_empty() { return ~\"\"; }\n+\n+    // concat is faster\n+    if sep.is_empty() { return concat(v); }\n+\n+    // this is wrong without the guarantee that v is non-empty\n+    let mut len = sep.len() * (v.len() - 1);\n+    for v.each |ss| {\n+        len += ss.len();\n+    }\n     let mut s = ~\"\", first = true;\n-    for vec::each(v) |ss| {\n-        if first { first = false; } else { push_str(&mut s, sep); }\n-        push_str(&mut s, *ss);\n+\n+    reserve(&mut s, len);\n+\n+    unsafe {\n+        do as_buf(s) |buf, _len| {\n+            do as_buf(sep) |sepbuf, seplen| {\n+                let seplen = seplen - 1;\n+                let mut buf = ::cast::transmute_mut_unsafe(buf);\n+                for v.each |ss| {\n+                    do as_buf(*ss) |ssbuf, sslen| {\n+                        let sslen = sslen - 1;\n+                        if first {\n+                            first = false;\n+                        } else {\n+                            ptr::copy_memory(buf, sepbuf, seplen);\n+                            buf = buf.offset(seplen);\n+                        }\n+                        ptr::copy_memory(buf, ssbuf, sslen);\n+                        buf = buf.offset(sslen);\n+                    }\n+                }\n+            }\n+        }\n+        raw::set_len(&mut s, len);\n     }\n     s\n }\n \n /// Concatenate a vector of strings, placing a given separator between each\n pub fn connect_slices(v: &[&str], sep: &str) -> ~str {\n+    if v.is_empty() { return ~\"\"; }\n+\n+    // this is wrong without the guarantee that v is non-empty\n+    let mut len = sep.len() * (v.len() - 1);\n+    for v.each |ss| {\n+        len += ss.len();\n+    }\n     let mut s = ~\"\", first = true;\n-    for vec::each(v) |ss| {\n-        if first { first = false; } else { push_str(&mut s, sep); }\n-        push_str(&mut s, *ss);\n+\n+    reserve(&mut s, len);\n+\n+    unsafe {\n+        do as_buf(s) |buf, _len| {\n+            do as_buf(sep) |sepbuf, seplen| {\n+                let seplen = seplen - 1;\n+                let mut buf = ::cast::transmute_mut_unsafe(buf);\n+                for vec::each(v) |ss| {\n+                    do as_buf(*ss) |ssbuf, sslen| {\n+                        let sslen = sslen - 1;\n+                        if first {\n+                            first = false;\n+                        } else if seplen > 0 {\n+                            ptr::copy_memory(buf, sepbuf, seplen);\n+                            buf = buf.offset(seplen);\n+                        }\n+                        ptr::copy_memory(buf, ssbuf, sslen);\n+                        buf = buf.offset(sslen);\n+                    }\n+                }\n+            }\n+        }\n+        raw::set_len(&mut s, len);\n     }\n     s\n }\n \n /// Given a string, make a new string with repeated copies of it\n pub fn repeat(ss: &str, nn: uint) -> ~str {\n-    let mut acc = ~\"\";\n-    for nn.times { acc += ss; }\n-    acc\n+    do as_buf(ss) |buf, len| {\n+        let mut ret = ~\"\";\n+        // ignore the NULL terminator\n+        let len = len - 1;\n+        reserve(&mut ret, nn * len);\n+\n+        unsafe {\n+            do as_buf(ret) |rbuf, _len| {\n+                let mut rbuf = ::cast::transmute_mut_unsafe(rbuf);\n+\n+                for nn.times {\n+                    ptr::copy_memory(rbuf, buf, len);\n+                    rbuf = rbuf.offset(len);\n+                }\n+            }\n+            raw::set_len(&mut ret, nn * len);\n+        }\n+        ret\n+    }\n }\n \n /*"}]}