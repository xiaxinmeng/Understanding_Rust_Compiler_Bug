{"sha": "1412ff5512f3642feb2a2f363d92f4a4416dfcb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MTJmZjU1MTJmMzY0MmZlYjJhMmYzNjNkOTJmNGE0NDE2ZGZjYjI=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-08-26T13:46:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-26T13:46:31Z"}, "message": "Rollup merge of #43776 - zackmdavis:feature_gate_fn_must_use, r=alexcrichton\n\nfeature-gate #[must_use] for functions as `fn_must_use`\n\n@eddyb I [was](https://github.com/rust-lang/rust/pull/43728#issuecomment-320854120) [dithering](https://github.com/rust-lang/rust/pull/43728#issuecomment-320856407) on this, but [your comment](https://github.com/rust-lang/rust/issues/43302#issuecomment-321174989) makes it sound like we do want a feature gate for this? Please advise.\n\nr? @eddyb", "tree": {"sha": "4710310edf4bad63c1e82c4f7dceb871fca0e0c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4710310edf4bad63c1e82c4f7dceb871fca0e0c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1412ff5512f3642feb2a2f363d92f4a4416dfcb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1412ff5512f3642feb2a2f363d92f4a4416dfcb2", "html_url": "https://github.com/rust-lang/rust/commit/1412ff5512f3642feb2a2f363d92f4a4416dfcb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1412ff5512f3642feb2a2f363d92f4a4416dfcb2/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7070dd019d70b089a9983571dc40b2f9ee16cf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7070dd019d70b089a9983571dc40b2f9ee16cf5", "html_url": "https://github.com/rust-lang/rust/commit/e7070dd019d70b089a9983571dc40b2f9ee16cf5"}, {"sha": "35c449419cfbd2bc1abc81077c95ef43ed766f97", "url": "https://api.github.com/repos/rust-lang/rust/commits/35c449419cfbd2bc1abc81077c95ef43ed766f97", "html_url": "https://github.com/rust-lang/rust/commit/35c449419cfbd2bc1abc81077c95ef43ed766f97"}], "stats": {"total": 162, "additions": 128, "deletions": 34}, "files": [{"sha": "cbc4ebe90fd091070c9ec648f8b049d8905254df", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1412ff5512f3642feb2a2f363d92f4a4416dfcb2/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1412ff5512f3642feb2a2f363d92f4a4416dfcb2/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=1412ff5512f3642feb2a2f363d92f4a4416dfcb2", "patch": "@@ -160,21 +160,25 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         };\n \n         let mut fn_warned = false;\n-        let maybe_def = match expr.node {\n-            hir::ExprCall(ref callee, _) => {\n-                match callee.node {\n-                    hir::ExprPath(ref qpath) => Some(cx.tables.qpath_def(qpath, callee.hir_id)),\n-                    _ => None\n-                }\n-            },\n-            hir::ExprMethodCall(..) => {\n-                cx.tables.type_dependent_defs().get(expr.hir_id).cloned()\n-            },\n-            _ => { None }\n-        };\n-        if let Some(def) = maybe_def {\n-            let def_id = def.def_id();\n-            fn_warned = check_must_use(cx, def_id, s.span, \"return value of \");\n+        if cx.tcx.sess.features.borrow().fn_must_use {\n+            let maybe_def = match expr.node {\n+                hir::ExprCall(ref callee, _) => {\n+                    match callee.node {\n+                        hir::ExprPath(ref qpath) => {\n+                            Some(cx.tables.qpath_def(qpath, callee.hir_id))\n+                        },\n+                        _ => None\n+                    }\n+                },\n+                hir::ExprMethodCall(..) => {\n+                    cx.tables.type_dependent_defs().get(expr.hir_id).cloned()\n+                },\n+                _ => None\n+            };\n+            if let Some(def) = maybe_def {\n+                let def_id = def.def_id();\n+                fn_warned = check_must_use(cx, def_id, s.span, \"return value of \");\n+            }\n         }\n \n         if !(ty_warned || fn_warned) {"}, {"sha": "09574d5ba129e80282dea9f6ff850371507d1166", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 70, "deletions": 13, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/1412ff5512f3642feb2a2f363d92f4a4416dfcb2/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1412ff5512f3642feb2a2f363d92f4a4416dfcb2/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=1412ff5512f3642feb2a2f363d92f4a4416dfcb2", "patch": "@@ -112,8 +112,8 @@ macro_rules! declare_features {\n // was set. This is most important for knowing when a particular feature became\n // stable (active).\n //\n-// NB: The featureck.py script parses this information directly out of the source\n-// so take care when modifying it.\n+// NB: tools/tidy/src/features.rs parses this information directly out of the\n+// source, so take care when modifying it.\n \n declare_features! (\n     (active, asm, \"1.0.0\", Some(29722)),\n@@ -372,6 +372,9 @@ declare_features! (\n \n     // #[doc(cfg(...))]\n     (active, doc_cfg, \"1.21.0\", Some(43781)),\n+\n+    // allow `#[must_use]` on functions (RFC 1940)\n+    (active, fn_must_use, \"1.21.0\", Some(43302)),\n );\n \n declare_features! (\n@@ -915,20 +918,27 @@ struct Context<'a> {\n }\n \n macro_rules! gate_feature_fn {\n-    ($cx: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr) => {{\n-        let (cx, has_feature, span, name, explain) = ($cx, $has_feature, $span, $name, $explain);\n+    ($cx: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr, $level: expr) => {{\n+        let (cx, has_feature, span,\n+             name, explain, level) = ($cx, $has_feature, $span, $name, $explain, $level);\n         let has_feature: bool = has_feature(&$cx.features);\n         debug!(\"gate_feature(feature = {:?}, span = {:?}); has? {}\", name, span, has_feature);\n         if !has_feature && !span.allows_unstable() {\n-            emit_feature_err(cx.parse_sess, name, span, GateIssue::Language, explain);\n+            leveled_feature_err(cx.parse_sess, name, span, GateIssue::Language, explain, level)\n+                .emit();\n         }\n     }}\n }\n \n macro_rules! gate_feature {\n     ($cx: expr, $feature: ident, $span: expr, $explain: expr) => {\n-        gate_feature_fn!($cx, |x:&Features| x.$feature, $span, stringify!($feature), $explain)\n-    }\n+        gate_feature_fn!($cx, |x:&Features| x.$feature, $span,\n+                         stringify!($feature), $explain, GateStrength::Hard)\n+    };\n+    ($cx: expr, $feature: ident, $span: expr, $explain: expr, $level: expr) => {\n+        gate_feature_fn!($cx, |x:&Features| x.$feature, $span,\n+                         stringify!($feature), $explain, $level)\n+    };\n }\n \n impl<'a> Context<'a> {\n@@ -938,7 +948,7 @@ impl<'a> Context<'a> {\n         for &(n, ty, ref gateage) in BUILTIN_ATTRIBUTES {\n             if name == n {\n                 if let Gated(_, name, desc, ref has_feature) = *gateage {\n-                    gate_feature_fn!(self, has_feature, attr.span, name, desc);\n+                    gate_feature_fn!(self, has_feature, attr.span, name, desc, GateStrength::Hard);\n                 }\n                 debug!(\"check_attribute: {:?} is builtin, {:?}, {:?}\", attr.path, ty, gateage);\n                 return;\n@@ -1008,24 +1018,42 @@ pub enum GateIssue {\n     Library(Option<u32>)\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n+pub enum GateStrength {\n+    /// A hard error. (Most feature gates should use this.)\n+    Hard,\n+    /// Only a warning. (Use this only as backwards-compatibility demands.)\n+    Soft,\n+}\n+\n pub fn emit_feature_err(sess: &ParseSess, feature: &str, span: Span, issue: GateIssue,\n                         explain: &str) {\n     feature_err(sess, feature, span, issue, explain).emit();\n }\n \n pub fn feature_err<'a>(sess: &'a ParseSess, feature: &str, span: Span, issue: GateIssue,\n-                   explain: &str) -> DiagnosticBuilder<'a> {\n+                       explain: &str) -> DiagnosticBuilder<'a> {\n+    leveled_feature_err(sess, feature, span, issue, explain, GateStrength::Hard)\n+}\n+\n+fn leveled_feature_err<'a>(sess: &'a ParseSess, feature: &str, span: Span, issue: GateIssue,\n+                           explain: &str, level: GateStrength) -> DiagnosticBuilder<'a> {\n     let diag = &sess.span_diagnostic;\n \n     let issue = match issue {\n         GateIssue::Language => find_lang_feature_issue(feature),\n         GateIssue::Library(lib) => lib,\n     };\n \n-    let mut err = if let Some(n) = issue {\n-        diag.struct_span_err(span, &format!(\"{} (see issue #{})\", explain, n))\n+    let explanation = if let Some(n) = issue {\n+        format!(\"{} (see issue #{})\", explain, n)\n     } else {\n-        diag.struct_span_err(span, explain)\n+        explain.to_owned()\n+    };\n+\n+    let mut err = match level {\n+        GateStrength::Hard => diag.struct_span_err(span, &explanation),\n+        GateStrength::Soft => diag.struct_span_warn(span, &explanation),\n     };\n \n     // #23973: do not suggest `#![feature(...)]` if we are in beta/stable\n@@ -1035,7 +1063,15 @@ pub fn feature_err<'a>(sess: &'a ParseSess, feature: &str, span: Span, issue: Ga\n                           feature));\n     }\n \n+    // If we're on stable and only emitting a \"soft\" warning, add a note to\n+    // clarify that the feature isn't \"on\" (rather than being on but\n+    // warning-worthy).\n+    if !sess.unstable_features.is_nightly_build() && level == GateStrength::Soft {\n+        err.help(\"a nightly build of the compiler is required to enable this feature\");\n+    }\n+\n     err\n+\n }\n \n const EXPLAIN_BOX_SYNTAX: &'static str =\n@@ -1092,6 +1128,12 @@ macro_rules! gate_feature_post {\n         if !span.allows_unstable() {\n             gate_feature!(cx.context, $feature, span, $explain)\n         }\n+    }};\n+    ($cx: expr, $feature: ident, $span: expr, $explain: expr, $level: expr) => {{\n+        let (cx, span) = ($cx, $span);\n+        if !span.allows_unstable() {\n+            gate_feature!(cx.context, $feature, span, $explain, $level)\n+        }\n     }}\n }\n \n@@ -1234,6 +1276,11 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                         function may change over time, for now \\\n                                         a top-level `fn main()` is required\");\n                 }\n+                if attr::contains_name(&i.attrs[..], \"must_use\") {\n+                    gate_feature_post!(&self, fn_must_use, i.span,\n+                                       \"`#[must_use]` on functions is experimental\",\n+                                       GateStrength::Soft);\n+                }\n             }\n \n             ast::ItemKind::Struct(..) => {\n@@ -1271,7 +1318,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                     and possibly buggy\");\n             }\n \n-            ast::ItemKind::Impl(_, polarity, defaultness, _, _, _, _) => {\n+            ast::ItemKind::Impl(_, polarity, defaultness, _, _, _, ref impl_items) => {\n                 if polarity == ast::ImplPolarity::Negative {\n                     gate_feature_post!(&self, optin_builtin_traits,\n                                        i.span,\n@@ -1284,6 +1331,16 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                        i.span,\n                                        \"specialization is unstable\");\n                 }\n+\n+                for impl_item in impl_items {\n+                    if let ast::ImplItemKind::Method(..) = impl_item.node {\n+                        if attr::contains_name(&impl_item.attrs[..], \"must_use\") {\n+                            gate_feature_post!(&self, fn_must_use, impl_item.span,\n+                                               \"`#[must_use]` on methods is experimental\",\n+                                               GateStrength::Soft);\n+                        }\n+                    }\n+                }\n             }\n \n             ast::ItemKind::MacroDef(ast::MacroDef { legacy: false, .. }) => {"}, {"sha": "2dd6b904072676243b72b9ef882460c0b00b6633", "filename": "src/test/compile-fail/feature-gate-fn_must_use.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1412ff5512f3642feb2a2f363d92f4a4416dfcb2/src%2Ftest%2Fcompile-fail%2Ffeature-gate-fn_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1412ff5512f3642feb2a2f363d92f4a4416dfcb2/src%2Ftest%2Fcompile-fail%2Ffeature-gate-fn_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-fn_must_use.rs?ref=1412ff5512f3642feb2a2f363d92f4a4416dfcb2", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+struct MyStruct;\n+\n+impl MyStruct {\n+    #[must_use]\n+    fn need_to_use_method() -> bool { true } //~ WARN `#[must_use]` on methods is experimental\n+}\n+\n+#[must_use]\n+fn need_to_use_it() -> bool { true } //~ WARN `#[must_use]` on functions is experimental\n+\n+\n+// Feature gates are tidy-required to have a specially named (or\n+// comment-annotated) compile-fail test (which MUST fail), but for\n+// backwards-compatibility reasons, we want `#[must_use]` on functions to be\n+// compilable even if the `fn_must_use` feature is absent, thus necessitating\n+// the usage of `#[rustc_error]` here, pragmatically if awkwardly solving this\n+// dilemma until a superior solution can be devised.\n+#[rustc_error]\n+fn main() {} //~ ERROR compilation successful"}, {"sha": "204190d64acc1f61a33a02b7e02a510c52ce464d", "filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1412ff5512f3642feb2a2f363d92f4a4416dfcb2/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1412ff5512f3642feb2a2f363d92f4a4416dfcb2/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=1412ff5512f3642feb2a2f363d92f4a4416dfcb2", "patch": "@@ -680,6 +680,7 @@ mod must_use {\n     mod inner { #![must_use=\"1400\"] }\n \n     #[must_use = \"1400\"] fn f() { }\n+    //~^ WARN `#[must_use]` on functions is experimental\n \n     #[must_use = \"1400\"] struct S;\n "}, {"sha": "c549ded4db2188ea4d06d4cd42e16c9812a95f22", "filename": "src/test/ui/lint/fn_must_use.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1412ff5512f3642feb2a2f363d92f4a4416dfcb2/src%2Ftest%2Fui%2Flint%2Ffn_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1412ff5512f3642feb2a2f363d92f4a4416dfcb2/src%2Ftest%2Fui%2Flint%2Ffn_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffn_must_use.rs?ref=1412ff5512f3642feb2a2f363d92f4a4416dfcb2", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(fn_must_use)]\n #![warn(unused_must_use)]\n \n struct MyStruct {"}, {"sha": "242837793a0bf2f4acd1d92d6248189eeee9b443", "filename": "src/test/ui/lint/fn_must_use.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1412ff5512f3642feb2a2f363d92f4a4416dfcb2/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1412ff5512f3642feb2a2f363d92f4a4416dfcb2/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffn_must_use.stderr?ref=1412ff5512f3642feb2a2f363d92f4a4416dfcb2", "patch": "@@ -1,18 +1,18 @@\n warning: unused return value of `need_to_use_this_value` which must be used: it's important\n-  --> $DIR/fn_must_use.rs:30:5\n+  --> $DIR/fn_must_use.rs:31:5\n    |\n-30 |     need_to_use_this_value();\n+31 |     need_to_use_this_value();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/fn_must_use.rs:11:9\n+  --> $DIR/fn_must_use.rs:12:9\n    |\n-11 | #![warn(unused_must_use)]\n+12 | #![warn(unused_must_use)]\n    |         ^^^^^^^^^^^^^^^\n \n warning: unused return value of `MyStruct::need_to_use_this_method_value` which must be used\n-  --> $DIR/fn_must_use.rs:33:5\n+  --> $DIR/fn_must_use.rs:34:5\n    |\n-33 |     m.need_to_use_this_method_value();\n+34 |     m.need_to_use_this_method_value();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n "}]}