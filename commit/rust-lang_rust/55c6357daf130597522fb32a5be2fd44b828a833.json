{"sha": "55c6357daf130597522fb32a5be2fd44b828a833", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YzYzNTdkYWYxMzA1OTc1MjJmYjMyYTViZTJmZDQ0YjgyOGE4MzM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-01T17:39:16Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-09T15:02:13Z"}, "message": "micro-optimize empty predicate and normalize lists", "tree": {"sha": "cdd1a7d3fd4e50d05aae203a20d6904d012fa1d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdd1a7d3fd4e50d05aae203a20d6904d012fa1d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55c6357daf130597522fb32a5be2fd44b828a833", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55c6357daf130597522fb32a5be2fd44b828a833", "html_url": "https://github.com/rust-lang/rust/commit/55c6357daf130597522fb32a5be2fd44b828a833", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55c6357daf130597522fb32a5be2fd44b828a833/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73a09f35b114d9ddf10e29df4e730d15e64f58c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/73a09f35b114d9ddf10e29df4e730d15e64f58c7", "html_url": "https://github.com/rust-lang/rust/commit/73a09f35b114d9ddf10e29df4e730d15e64f58c7"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "0dc2d5ab258da3e087d01ca43784d7c4228bf308", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/55c6357daf130597522fb32a5be2fd44b828a833/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c6357daf130597522fb32a5be2fd44b828a833/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=55c6357daf130597522fb32a5be2fd44b828a833", "patch": "@@ -1551,31 +1551,36 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     where\n         T: IntoIterator<Item = ty::Predicate<'tcx>> + Clone,\n     {\n+        let cause = self.misc(self.last_span);\n+        let obligations: Vec<_> = predicates\n+            .into_iter()\n+            .map(|p| traits::Obligation::new(cause.clone(), self.param_env, p))\n+            .collect();\n+\n+        // Micro-optimization\n+        if obligations.is_empty() {\n+            return;\n+        }\n+\n         // This intermediate vector is mildly unfortunate, in that we\n         // sometimes create it even when logging is disabled, but only\n         // if debug-info is enabled, and I doubt it is actually\n         // expensive. -nmatsakis\n         let predicates_vec: Vec<_> = if cfg!(debug_assertions) {\n-            predicates.clone().into_iter().collect()\n+            obligations.iter().map(|o| o.predicate).collect()\n         } else {\n             Vec::new()\n         };\n \n         debug!(\n             \"prove_predicates(predicates={:?}, location={:?})\",\n-            predicates_vec,\n-            location,\n+            predicates_vec, location,\n         );\n \n         self.fully_perform_op(\n             location.at_self(),\n             || format!(\"prove_predicates({:?})\", predicates_vec),\n-            |this| {\n-                let cause = this.misc(this.last_span);\n-                let obligations = predicates\n-                    .into_iter()\n-                    .map(|p| traits::Obligation::new(cause.clone(), this.param_env, p))\n-                    .collect();\n+            |_this| {\n                 Ok(InferOk {\n                     value: (),\n                     obligations,\n@@ -1615,12 +1620,18 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     where\n         T: fmt::Debug + TypeFoldable<'tcx>,\n     {\n+        // Micro-optimization: avoid work when we don't have to\n+        if !value.has_projections() {\n+            return value.clone();\n+        }\n+\n         debug!(\"normalize(value={:?}, location={:?})\", value, location);\n         self.fully_perform_op(\n             location.to_locations(),\n             || format!(\"normalize(value={:?})\", value),\n             |this| {\n-                let Normalized { value, obligations } = this.infcx\n+                let Normalized { value, obligations } = this\n+                    .infcx\n                     .at(&this.misc(this.last_span), this.param_env)\n                     .normalize(value)\n                     .unwrap_or_else(|NoSolution| {"}]}