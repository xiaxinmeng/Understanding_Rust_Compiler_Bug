{"sha": "68a747efe048e8e92eedafaa27b0c0d2f317f04d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4YTc0N2VmZTA0OGU4ZTkyZWVkYWZhYTI3YjBjMGQyZjMxN2YwNGQ=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-02T22:27:26Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-07T21:41:08Z"}, "message": "Remove redundant code", "tree": {"sha": "8ee6269e84db5bbb51422becae24b2943cb43a90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ee6269e84db5bbb51422becae24b2943cb43a90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68a747efe048e8e92eedafaa27b0c0d2f317f04d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68a747efe048e8e92eedafaa27b0c0d2f317f04d", "html_url": "https://github.com/rust-lang/rust/commit/68a747efe048e8e92eedafaa27b0c0d2f317f04d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68a747efe048e8e92eedafaa27b0c0d2f317f04d/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f", "html_url": "https://github.com/rust-lang/rust/commit/50e06ee95ab12bc204fdce557ab0fb7aa5e5ab2f"}], "stats": {"total": 183, "additions": 80, "deletions": 103}, "files": [{"sha": "eacdd3449910b58600a4b19bc554536ea1e5595b", "filename": "crates/completion/src/config.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/68a747efe048e8e92eedafaa27b0c0d2f317f04d/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a747efe048e8e92eedafaa27b0c0d2f317f04d/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fconfig.rs?ref=68a747efe048e8e92eedafaa27b0c0d2f317f04d", "patch": "@@ -15,12 +15,12 @@ pub struct CompletionConfig {\n     pub add_call_argument_snippets: bool,\n     pub snippet_cap: Option<SnippetCap>,\n     pub merge: Option<MergeBehaviour>,\n-    /// A set of capabilities, enabled on the cliend and supported on the server.\n-    pub resolve_capabilities: FxHashSet<CompletionResolveCapability>,\n+    /// A set of capabilities, enabled on the client and supported on the server.\n+    pub active_resolve_capabilities: FxHashSet<CompletionResolveCapability>,\n }\n \n-/// A resolve capability, supported on a server.\n-/// If the client registers any of those in its completion resolve capabilities,\n+/// A resolve capability, supported on the server.\n+/// If the client registers any completion resolve capabilities,\n /// the server is able to render completion items' corresponding fields later,\n /// not during an initial completion item request.\n /// See https://github.com/rust-analyzer/rust-analyzer/issues/6366 for more details.\n@@ -37,8 +37,11 @@ impl CompletionConfig {\n     }\n \n     /// Whether the completions' additional edits are calculated later, during a resolve request or not.\n-    pub fn should_resolve_additional_edits_immediately(&self) -> bool {\n-        !self.resolve_capabilities.contains(&CompletionResolveCapability::AdditionalTextEdits)\n+    /// See `CompletionResolveCapability` for the details.\n+    pub fn resolve_edits_immediately(&self) -> bool {\n+        !self\n+            .active_resolve_capabilities\n+            .contains(&CompletionResolveCapability::AdditionalTextEdits)\n     }\n }\n \n@@ -56,7 +59,7 @@ impl Default for CompletionConfig {\n             add_call_argument_snippets: true,\n             snippet_cap: Some(SnippetCap { _private: () }),\n             merge: Some(MergeBehaviour::Full),\n-            resolve_capabilities: FxHashSet::default(),\n+            active_resolve_capabilities: FxHashSet::default(),\n         }\n     }\n }"}, {"sha": "2b4f1ea14eedbcb6dd146ae4f460fa42fb4e505d", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68a747efe048e8e92eedafaa27b0c0d2f317f04d/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a747efe048e8e92eedafaa27b0c0d2f317f04d/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=68a747efe048e8e92eedafaa27b0c0d2f317f04d", "patch": "@@ -194,10 +194,7 @@ impl<'a> Render<'a> {\n                     local_name,\n                 )\n                 .kind(CompletionItemKind::UnresolvedReference)\n-                .add_import(\n-                    import_to_add,\n-                    self.ctx.completion.config.should_resolve_additional_edits_immediately(),\n-                )\n+                .add_import(import_to_add, self.ctx.completion.config.resolve_edits_immediately())\n                 .build();\n                 return Some(item);\n             }\n@@ -252,10 +249,7 @@ impl<'a> Render<'a> {\n \n         let item = item\n             .kind(kind)\n-            .add_import(\n-                import_to_add,\n-                self.ctx.completion.config.should_resolve_additional_edits_immediately(),\n-            )\n+            .add_import(import_to_add, self.ctx.completion.config.resolve_edits_immediately())\n             .set_documentation(docs)\n             .set_ref_match(ref_match)\n             .build();"}, {"sha": "4a91fe3c71ad82e7cecfa593998827426e150b5a", "filename": "crates/completion/src/render/enum_variant.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/68a747efe048e8e92eedafaa27b0c0d2f317f04d/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a747efe048e8e92eedafaa27b0c0d2f317f04d/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs?ref=68a747efe048e8e92eedafaa27b0c0d2f317f04d", "patch": "@@ -71,10 +71,7 @@ impl<'a> EnumVariantRender<'a> {\n         .kind(CompletionItemKind::EnumVariant)\n         .set_documentation(self.variant.docs(self.ctx.db()))\n         .set_deprecated(self.ctx.is_deprecated(self.variant))\n-        .add_import(\n-            import_to_add,\n-            self.ctx.completion.config.should_resolve_additional_edits_immediately(),\n-        )\n+        .add_import(import_to_add, self.ctx.completion.config.resolve_edits_immediately())\n         .detail(self.detail());\n \n         if self.variant_kind == StructKind::Tuple {"}, {"sha": "20f2b9b7ee0ba2b54a300363b2fa58b2dc7c0319", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/68a747efe048e8e92eedafaa27b0c0d2f317f04d/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a747efe048e8e92eedafaa27b0c0d2f317f04d/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=68a747efe048e8e92eedafaa27b0c0d2f317f04d", "patch": "@@ -47,10 +47,7 @@ impl<'a> FunctionRender<'a> {\n             .set_deprecated(self.ctx.is_deprecated(self.func))\n             .detail(self.detail())\n             .add_call_parens(self.ctx.completion, self.name, params)\n-            .add_import(\n-                import_to_add,\n-                self.ctx.completion.config.should_resolve_additional_edits_immediately(),\n-            )\n+            .add_import(import_to_add, self.ctx.completion.config.resolve_edits_immediately())\n             .build()\n     }\n "}, {"sha": "be7c5365917ad5f7459b0c89a0bb2a8b09c6d10c", "filename": "crates/completion/src/render/macro_.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/68a747efe048e8e92eedafaa27b0c0d2f317f04d/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a747efe048e8e92eedafaa27b0c0d2f317f04d/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs?ref=68a747efe048e8e92eedafaa27b0c0d2f317f04d", "patch": "@@ -50,10 +50,7 @@ impl<'a> MacroRender<'a> {\n                 .kind(CompletionItemKind::Macro)\n                 .set_documentation(self.docs.clone())\n                 .set_deprecated(self.ctx.is_deprecated(self.macro_))\n-                .add_import(\n-                    import_to_add,\n-                    self.ctx.completion.config.should_resolve_additional_edits_immediately(),\n-                )\n+                .add_import(import_to_add, self.ctx.completion.config.resolve_edits_immediately())\n                 .detail(self.detail());\n \n         let needs_bang = self.needs_bang();"}, {"sha": "f00605258b88f4fdad9ce16ecdf98283d4c78e89", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68a747efe048e8e92eedafaa27b0c0d2f317f04d/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a747efe048e8e92eedafaa27b0c0d2f317f04d/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=68a747efe048e8e92eedafaa27b0c0d2f317f04d", "patch": "@@ -388,7 +388,7 @@ impl Config {\n             }\n \n             self.completion.allow_snippets(false);\n-            self.completion.resolve_capabilities =\n+            self.completion.active_resolve_capabilities =\n                 enabled_completions_resolve_capabilities(caps).unwrap_or_default();\n             if let Some(completion) = &doc_caps.completion {\n                 if let Some(completion_item) = &completion.completion_item {"}, {"sha": "55c7b0c668df01517be28bf8a38ad41fb57dda6c", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 59, "deletions": 18, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/68a747efe048e8e92eedafaa27b0c0d2f317f04d/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a747efe048e8e92eedafaa27b0c0d2f317f04d/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=68a747efe048e8e92eedafaa27b0c0d2f317f04d", "patch": "@@ -8,9 +8,10 @@ use std::{\n };\n \n use ide::{\n-    FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData, NavigationTarget, Query,\n-    RangeInfo, Runnable, RunnableKind, SearchScope, TextEdit,\n+    FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData, ImportToAdd, LineIndex,\n+    NavigationTarget, Query, RangeInfo, Runnable, RunnableKind, SearchScope, TextEdit,\n };\n+use ide_db::helpers::{insert_use, mod_path_to_ast};\n use itertools::Itertools;\n use lsp_server::ErrorCode;\n use lsp_types::{\n@@ -35,9 +36,9 @@ use crate::{\n     config::RustfmtConfig,\n     from_json, from_proto,\n     global_state::{CompletionResolveData, GlobalState, GlobalStateSnapshot},\n+    line_endings::LineEndings,\n     lsp_ext::{self, InlayHint, InlayHintsParams},\n-    to_proto::{self, append_import_edits},\n-    LspError, Result,\n+    to_proto, LspError, Result,\n };\n \n pub(crate) fn handle_analyzer_status(\n@@ -577,20 +578,19 @@ pub(crate) fn handle_completion(\n         .into_iter()\n         .enumerate()\n         .flat_map(|(item_index, item)| {\n-            let mut new_completion_items = to_proto::completion_item(\n-                &line_index,\n-                line_endings,\n-                item.clone(),\n-                snap.config.completion.should_resolve_additional_edits_immediately(),\n-            );\n-\n-            let item_id = serde_json::to_value(&item_index)\n-                .expect(&format!(\"Should be able to serialize usize value {}\", item_index));\n-            completion_resolve_data\n-                .insert(item_index, CompletionResolveData { file_id: position.file_id, item });\n-            for new_item in &mut new_completion_items {\n-                new_item.data = Some(item_id.clone());\n+            let mut new_completion_items =\n+                to_proto::completion_item(&line_index, line_endings, item.clone());\n+\n+            if !snap.config.completion.active_resolve_capabilities.is_empty() {\n+                let item_id = serde_json::to_value(&item_index)\n+                    .expect(&format!(\"Should be able to serialize usize value {}\", item_index));\n+                completion_resolve_data\n+                    .insert(item_index, CompletionResolveData { file_id: position.file_id, item });\n+                for new_item in &mut new_completion_items {\n+                    new_item.data = Some(item_id.clone());\n+                }\n             }\n+\n             new_completion_items\n         })\n         .collect();\n@@ -620,7 +620,7 @@ pub(crate) fn handle_resolve_completion(\n     };\n \n     let snap = &global_state.snapshot();\n-    for supported_completion_resolve_cap in &snap.config.completion.resolve_capabilities {\n+    for supported_completion_resolve_cap in &snap.config.completion.active_resolve_capabilities {\n         match supported_completion_resolve_cap {\n             ide::CompletionResolveCapability::AdditionalTextEdits => {\n                 // FIXME actually add all additional edits here?\n@@ -1598,3 +1598,44 @@ fn should_skip_target(runnable: &Runnable, cargo_spec: Option<&CargoTargetSpec>)\n         _ => false,\n     }\n }\n+\n+fn append_import_edits(\n+    completion: &mut lsp_types::CompletionItem,\n+    import_to_add: &ImportToAdd,\n+    line_index: &LineIndex,\n+    line_endings: LineEndings,\n+) {\n+    let new_edits = import_into_edits(import_to_add, line_index, line_endings);\n+    if let Some(original_additional_edits) = completion.additional_text_edits.as_mut() {\n+        if let Some(mut new_edits) = new_edits {\n+            original_additional_edits.extend(new_edits.drain(..))\n+        }\n+    } else {\n+        completion.additional_text_edits = new_edits;\n+    }\n+}\n+\n+fn import_into_edits(\n+    import_to_add: &ImportToAdd,\n+    line_index: &LineIndex,\n+    line_endings: LineEndings,\n+) -> Option<Vec<lsp_types::TextEdit>> {\n+    let _p = profile::span(\"add_import_edits\");\n+\n+    let rewriter = insert_use::insert_use(\n+        &import_to_add.import_scope,\n+        mod_path_to_ast(&import_to_add.import_path),\n+        import_to_add.merge_behaviour,\n+    );\n+    let old_ast = rewriter.rewrite_root()?;\n+    let mut import_insert = TextEdit::builder();\n+    algo::diff(&old_ast, &rewriter.rewrite(&old_ast)).into_text_edit(&mut import_insert);\n+    let import_edit = import_insert.finish();\n+\n+    Some(\n+        import_edit\n+            .into_iter()\n+            .map(|indel| to_proto::text_edit(line_index, line_endings, indel))\n+            .collect_vec(),\n+    )\n+}"}, {"sha": "01eabe8526a561e279a41be34635e1c49ce46f09", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 5, "deletions": 57, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/68a747efe048e8e92eedafaa27b0c0d2f317f04d/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a747efe048e8e92eedafaa27b0c0d2f317f04d/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=68a747efe048e8e92eedafaa27b0c0d2f317f04d", "patch": "@@ -7,16 +7,12 @@ use std::{\n use ide::{\n     Assist, AssistKind, CallInfo, CompletionItem, CompletionItemKind, Documentation,\n     FileSystemEdit, Fold, FoldKind, Highlight, HighlightModifier, HighlightTag, HighlightedRange,\n-    ImportToAdd, Indel, InlayHint, InlayKind, InsertTextFormat, LineIndex, Markup,\n-    NavigationTarget, ReferenceAccess, ResolvedAssist, Runnable, Severity, SourceChange,\n-    SourceFileEdit, TextEdit,\n-};\n-use ide_db::{\n-    base_db::{FileId, FileRange},\n-    helpers::{insert_use, mod_path_to_ast},\n+    Indel, InlayHint, InlayKind, InsertTextFormat, LineIndex, Markup, NavigationTarget,\n+    ReferenceAccess, ResolvedAssist, Runnable, Severity, SourceChange, SourceFileEdit, TextEdit,\n };\n+use ide_db::base_db::{FileId, FileRange};\n use itertools::Itertools;\n-use syntax::{algo, SyntaxKind, TextRange, TextSize};\n+use syntax::{SyntaxKind, TextRange, TextSize};\n \n use crate::{\n     cargo_target_spec::CargoTargetSpec, global_state::GlobalStateSnapshot,\n@@ -162,7 +158,6 @@ pub(crate) fn completion_item(\n     line_index: &LineIndex,\n     line_endings: LineEndings,\n     completion_item: CompletionItem,\n-    should_resolve_additional_edits_immediately: bool,\n ) -> Vec<lsp_types::CompletionItem> {\n     fn set_score(res: &mut lsp_types::CompletionItem, label: &str) {\n         res.preselect = Some(true);\n@@ -238,13 +233,7 @@ pub(crate) fn completion_item(\n \n     for mut r in all_results.iter_mut() {\n         r.insert_text_format = Some(insert_text_format(completion_item.insert_text_format()));\n-        if !should_resolve_additional_edits_immediately {\n-            if let Some(unapplied_import_data) = completion_item.import_to_add() {\n-                append_import_edits(r, unapplied_import_data, line_index, line_endings);\n-            }\n-        }\n     }\n-\n     all_results\n }\n \n@@ -828,47 +817,6 @@ pub(crate) fn markup_content(markup: Markup) -> lsp_types::MarkupContent {\n     lsp_types::MarkupContent { kind: lsp_types::MarkupKind::Markdown, value }\n }\n \n-pub(crate) fn import_into_edits(\n-    import_to_add: &ImportToAdd,\n-    line_index: &LineIndex,\n-    line_endings: LineEndings,\n-) -> Option<Vec<lsp_types::TextEdit>> {\n-    let _p = profile::span(\"add_import_edits\");\n-\n-    let rewriter = insert_use::insert_use(\n-        &import_to_add.import_scope,\n-        mod_path_to_ast(&import_to_add.import_path),\n-        import_to_add.merge_behaviour,\n-    );\n-    let old_ast = rewriter.rewrite_root()?;\n-    let mut import_insert = TextEdit::builder();\n-    algo::diff(&old_ast, &rewriter.rewrite(&old_ast)).into_text_edit(&mut import_insert);\n-    let import_edit = import_insert.finish();\n-\n-    Some(\n-        import_edit\n-            .into_iter()\n-            .map(|indel| text_edit(line_index, line_endings, indel))\n-            .collect_vec(),\n-    )\n-}\n-\n-pub(crate) fn append_import_edits(\n-    completion: &mut lsp_types::CompletionItem,\n-    import_to_add: &ImportToAdd,\n-    line_index: &LineIndex,\n-    line_endings: LineEndings,\n-) {\n-    let new_edits = import_into_edits(import_to_add, line_index, line_endings);\n-    if let Some(original_additional_edits) = completion.additional_text_edits.as_mut() {\n-        if let Some(mut new_edits) = new_edits {\n-            original_additional_edits.extend(new_edits.drain(..))\n-        }\n-    } else {\n-        completion.additional_text_edits = new_edits;\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use ide::Analysis;\n@@ -897,7 +845,7 @@ mod tests {\n             .unwrap()\n             .into_iter()\n             .filter(|c| c.label().ends_with(\"arg\"))\n-            .map(|c| completion_item(&line_index, LineEndings::Unix, c, true))\n+            .map(|c| completion_item(&line_index, LineEndings::Unix, c))\n             .flat_map(|comps| comps.into_iter().map(|c| (c.label, c.sort_text)))\n             .collect();\n         expect_test::expect![[r#\""}]}