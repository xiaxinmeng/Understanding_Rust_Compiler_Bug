{"sha": "9d9903c5a50bb1f5b5fc3045b86172279eff7d30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkOTkwM2M1YTUwYmIxZjViNWZjMzA0NWI4NjE3MjI3OWVmZjdkMzA=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-07-14T19:22:48Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-09-12T15:38:33Z"}, "message": "Allow Weak::as_ptr and friends for unsized T", "tree": {"sha": "63b30dcacb62a73c551c0e8d97623fb0eb9135a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63b30dcacb62a73c551c0e8d97623fb0eb9135a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d9903c5a50bb1f5b5fc3045b86172279eff7d30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d9903c5a50bb1f5b5fc3045b86172279eff7d30", "html_url": "https://github.com/rust-lang/rust/commit/9d9903c5a50bb1f5b5fc3045b86172279eff7d30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d9903c5a50bb1f5b5fc3045b86172279eff7d30/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e7406c9569dce75a042ce079918cf03cfca842a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7406c9569dce75a042ce079918cf03cfca842a", "html_url": "https://github.com/rust-lang/rust/commit/5e7406c9569dce75a042ce079918cf03cfca842a"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "f064881717d635790a6527fbba92ca93f47e2099", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9d9903c5a50bb1f5b5fc3045b86172279eff7d30/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9903c5a50bb1f5b5fc3045b86172279eff7d30/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=9d9903c5a50bb1f5b5fc3045b86172279eff7d30", "patch": "@@ -1509,7 +1509,16 @@ impl<T> Weak<T> {\n     pub fn new() -> Weak<T> {\n         Weak { ptr: NonNull::new(usize::MAX as *mut ArcInner<T>).expect(\"MAX is not 0\") }\n     }\n+}\n \n+/// Helper type to allow accessing the reference counts without\n+/// making any assertions about the data field.\n+struct WeakInner<'a> {\n+    weak: &'a atomic::AtomicUsize,\n+    strong: &'a atomic::AtomicUsize,\n+}\n+\n+impl<T: ?Sized> Weak<T> {\n     /// Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.\n     ///\n     /// The pointer is valid only if there are some strong references. The pointer may be dangling,\n@@ -1642,16 +1651,7 @@ impl<T> Weak<T> {\n         // SAFETY: we now have recovered the original Weak pointer, so can create the Weak.\n         unsafe { Weak { ptr: NonNull::new_unchecked(ptr) } }\n     }\n-}\n \n-/// Helper type to allow accessing the reference counts without\n-/// making any assertions about the data field.\n-struct WeakInner<'a> {\n-    weak: &'a atomic::AtomicUsize,\n-    strong: &'a atomic::AtomicUsize,\n-}\n-\n-impl<T: ?Sized> Weak<T> {\n     /// Attempts to upgrade the `Weak` pointer to an [`Arc`], delaying\n     /// dropping of the inner value if successful.\n     ///"}]}