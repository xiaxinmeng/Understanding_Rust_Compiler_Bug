{"sha": "005fa14358d78bc2da3c68933fce0aa58159d944", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNWZhMTQzNThkNzhiYzJkYTNjNjg5MzNmY2UwYWE1ODE1OWQ5NDQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-12-22T21:35:02Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-06T02:05:50Z"}, "message": "Annotate the compiler with information about what it is doing when.", "tree": {"sha": "4355cfb4930384cc3639fe46b3e2fef1a2a436e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4355cfb4930384cc3639fe46b3e2fef1a2a436e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/005fa14358d78bc2da3c68933fce0aa58159d944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/005fa14358d78bc2da3c68933fce0aa58159d944", "html_url": "https://github.com/rust-lang/rust/commit/005fa14358d78bc2da3c68933fce0aa58159d944", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/005fa14358d78bc2da3c68933fce0aa58159d944/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa265869baf55d59d310edf76fef50026d7c70e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa265869baf55d59d310edf76fef50026d7c70e3", "html_url": "https://github.com/rust-lang/rust/commit/aa265869baf55d59d310edf76fef50026d7c70e3"}], "stats": {"total": 221, "additions": 171, "deletions": 50}, "files": [{"sha": "0ac5160c29e25c2b01d7173bb90d03cecee7cf40", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -25,6 +25,7 @@\n //! for all lint attributes.\n use self::TargetLint::*;\n \n+use dep_graph::DepNode;\n use middle::privacy::AccessLevels;\n use middle::ty;\n use session::{early_error, Session};\n@@ -1071,6 +1072,8 @@ impl LateLintPass for GatherNodeLevels {\n ///\n /// Consumes the `lint_store` field of the `Session`.\n pub fn check_crate(tcx: &ty::ctxt, access_levels: &AccessLevels) {\n+    let _task = tcx.dep_graph.in_task(DepNode::LateLintCheck);\n+\n     let krate = tcx.map.krate();\n     let mut cx = LateContext::new(tcx, krate, access_levels);\n "}, {"sha": "a9b3043e0909569e72558d3bab10e7ddba2598bd", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -24,6 +24,7 @@\n // - It's not possible to take the address of a static item with unsafe interior. This is enforced\n // by borrowck::gather_loans\n \n+use dep_graph::DepNode;\n use middle::ty::cast::{CastKind};\n use middle::const_eval::{self, ConstEvalErr};\n use middle::const_eval::ErrKind::IndexOpFeatureGated;\n@@ -842,13 +843,12 @@ fn check_adjustments<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Exp\n }\n \n pub fn check_crate(tcx: &ty::ctxt) {\n-    tcx.map.krate().visit_all_items(&mut CheckCrateVisitor {\n+    tcx.visit_all_items_in_krate(DepNode::CheckConst, &mut CheckCrateVisitor {\n         tcx: tcx,\n         mode: Mode::Var,\n         qualif: ConstQualif::NOT_CONST,\n         rvalue_borrows: NodeMap()\n     });\n-\n     tcx.sess.abort_if_errors();\n }\n "}, {"sha": "972f9e2c64d0e195aa8b33d4ee2eb15cf8cf53c5", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -12,6 +12,7 @@ pub use self::Constructor::*;\n use self::Usefulness::*;\n use self::WitnessPreference::*;\n \n+use dep_graph::DepNode;\n use middle::const_eval::{compare_const_vals, ConstVal};\n use middle::const_eval::{eval_const_expr, eval_const_expr_partial};\n use middle::const_eval::{const_expr_to_pat, lookup_const_by_id};\n@@ -155,7 +156,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MatchCheckCtxt<'a, 'tcx> {\n }\n \n pub fn check_crate(tcx: &ty::ctxt) {\n-    tcx.map.krate().visit_all_items(&mut MatchCheckCtxt {\n+    tcx.visit_all_items_in_krate(DepNode::MatchCheck, &mut MatchCheckCtxt {\n         tcx: tcx,\n         param_env: tcx.empty_parameter_environment(),\n     });"}, {"sha": "8a3e039ac6e535cc2fcc2d514d449b22b8d0f465", "filename": "src/librustc/middle/check_rvalues.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -11,21 +11,21 @@\n // Checks that all rvalues in a crate have statically known size. check_crate\n // is the public starting point.\n \n+use dep_graph::DepNode;\n use middle::expr_use_visitor as euv;\n use middle::infer;\n use middle::mem_categorization as mc;\n use middle::ty::ParameterEnvironment;\n use middle::ty;\n \n-use syntax::ast;\n use rustc_front::hir;\n-use syntax::codemap::Span;\n use rustc_front::intravisit;\n+use syntax::ast;\n+use syntax::codemap::Span;\n \n-pub fn check_crate(tcx: &ty::ctxt,\n-                   krate: &hir::Crate) {\n+pub fn check_crate(tcx: &ty::ctxt) {\n     let mut rvcx = RvalueContext { tcx: tcx };\n-    krate.visit_all_items(&mut rvcx);\n+    tcx.visit_all_items_in_krate(DepNode::RvalueCheck, &mut rvcx);\n }\n \n struct RvalueContext<'a, 'tcx: 'a> {"}, {"sha": "1386ef91c70bf49e0ec7209f2252cbd9cb1bbcfa", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -12,6 +12,7 @@\n // closely. The idea is that all reachable symbols are live, codes called\n // from live codes are live, and everything else is dead.\n \n+use dep_graph::DepNode;\n use front::map as ast_map;\n use rustc_front::hir;\n use rustc_front::intravisit::{self, Visitor};\n@@ -590,6 +591,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> {\n }\n \n pub fn check_crate(tcx: &ty::ctxt, access_levels: &privacy::AccessLevels) {\n+    let _task = tcx.dep_graph.in_task(DepNode::DeadCheck);\n     let krate = tcx.map.krate();\n     let live_symbols = find_live(tcx, access_levels, krate);\n     let mut visitor = DeadVisitor { tcx: tcx, live_symbols: live_symbols };"}, {"sha": "f1eed256dd156be3cc0e7eb45b608f43ae5e70ec", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use dep_graph::DepNode;\n use middle::def::DefFn;\n use middle::def_id::DefId;\n use middle::subst::{Subst, Substs, EnumeratedItems};\n@@ -29,7 +30,7 @@ pub fn check_crate(tcx: &ctxt) {\n         dummy_sized_ty: tcx.types.isize,\n         dummy_unsized_ty: tcx.mk_slice(tcx.types.isize),\n     };\n-    tcx.map.krate().visit_all_items(&mut visitor);\n+    tcx.visit_all_items_in_krate(DepNode::IntrinsicCheck, &mut visitor);\n }\n \n struct IntrinsicCheckingVisitor<'a, 'tcx: 'a> {"}, {"sha": "738440adf416d9280ff08a92a998db81e66c4f87", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -15,6 +15,7 @@\n // makes all other generics or inline functions that it references\n // reachable as well.\n \n+use dep_graph::DepNode;\n use front::map as ast_map;\n use middle::def;\n use middle::def_id::DefId;\n@@ -349,6 +350,7 @@ impl<'a, 'v> Visitor<'v> for CollectPrivateImplItemsVisitor<'a> {\n pub fn find_reachable(tcx: &ty::ctxt,\n                       access_levels: &privacy::AccessLevels)\n                       -> NodeSet {\n+    let _task = tcx.dep_graph.in_task(DepNode::Reachability);\n \n     let mut reachable_context = ReachableContext::new(tcx);\n "}, {"sha": "8d5c0c98885b2e77e05418050ee1ff6f060d3069", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -13,6 +13,7 @@\n \n pub use self::StabilityLevel::*;\n \n+use dep_graph::DepNode;\n use session::Session;\n use lint;\n use middle::cstore::{CrateStore, LOCAL_CRATE};\n@@ -328,6 +329,7 @@ impl<'tcx> Index<'tcx> {\n /// features used.\n pub fn check_unstable_api_usage(tcx: &ty::ctxt)\n                                 -> FnvHashMap<InternedString, StabilityLevel> {\n+    let _task = tcx.dep_graph.in_task(DepNode::StabilityCheck);\n     let ref active_lib_features = tcx.sess.features.borrow().declared_lib_features;\n \n     // Put the active features into a map for quick lookup\n@@ -341,8 +343,7 @@ pub fn check_unstable_api_usage(tcx: &ty::ctxt)\n     };\n     intravisit::walk_crate(&mut checker, tcx.map.krate());\n \n-    let used_features = checker.used_features;\n-    return used_features;\n+    checker.used_features\n }\n \n struct Checker<'a, 'tcx: 'a> {"}, {"sha": "dddd6f8bc85d790dd19c404e2d74f2de46a17e00", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -15,10 +15,12 @@ pub use self::FulfillmentErrorCode::*;\n pub use self::Vtable::*;\n pub use self::ObligationCauseCode::*;\n \n+use dep_graph::DepNode;\n use middle::def_id::DefId;\n use middle::free_region::FreeRegionMap;\n use middle::subst;\n use middle::ty::{self, HasTypeFlags, Ty};\n+use middle::ty::fast_reject;\n use middle::ty::fold::TypeFoldable;\n use middle::infer::{self, fixup_err_to_string, InferCtxt};\n \n@@ -599,6 +601,18 @@ impl<'tcx> FulfillmentError<'tcx> {\n }\n \n impl<'tcx> TraitObligation<'tcx> {\n+    /// Creates the dep-node for selecting/evaluating this trait reference.\n+    fn dep_node(&self, tcx: &ty::ctxt<'tcx>) -> DepNode {\n+        let simplified_ty =\n+            fast_reject::simplify_type(tcx,\n+                                       self.predicate.skip_binder().self_ty(), // (*)\n+                                       true);\n+\n+        // (*) skip_binder is ok because `simplify_type` doesn't care about regions\n+\n+        DepNode::TraitSelect(self.predicate.def_id(), simplified_ty)\n+    }\n+\n     fn self_ty(&self) -> ty::Binder<Ty<'tcx>> {\n         ty::Binder(self.predicate.skip_binder().self_ty())\n     }"}, {"sha": "bd92f9748669f8fee6f6aab97a4b27efe337cd0c", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -310,6 +310,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         debug!(\"select({:?})\", obligation);\n         assert!(!obligation.predicate.has_escaping_regions());\n \n+        let dep_node = obligation.dep_node(self.tcx());\n+        let _task = self.tcx().dep_graph.in_task(dep_node);\n+\n         let stack = self.push_stack(TraitObligationStackList::empty(), obligation);\n         match try!(self.candidate_from_obligation(&stack)) {\n             None => {\n@@ -411,7 +414,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// accurate if inference variables are involved.\n     pub fn evaluate_obligation_conservatively(&mut self,\n                                               obligation: &PredicateObligation<'tcx>)\n-                               -> bool\n+                                              -> bool\n     {\n         debug!(\"evaluate_obligation_conservatively({:?})\",\n                obligation);"}, {"sha": "f9d18e9929709b972039844af18b41602e38302e", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -51,6 +51,7 @@ use syntax::parse::token::{InternedString, special_idents};\n \n use rustc_front::hir;\n use rustc_front::hir::{ItemImpl, ItemTrait};\n+use rustc_front::intravisit::Visitor;\n \n pub use self::sty::{Binder, DebruijnIndex};\n pub use self::sty::{BuiltinBound, BuiltinBounds, ExistentialBounds};\n@@ -1946,7 +1947,14 @@ fn lookup_locally_or_in_crate_store<V, F>(descr: &str,\n         panic!(\"No def'n found for {:?} in tcx.{}\", def_id, descr);\n     }\n     let v = load_external();\n-    map.borrow_mut().insert(def_id, v.clone());\n+\n+    // Don't consider this a write from the current task, since we are\n+    // loading from another crate. (Note that the current task will\n+    // already have registered a read in the call to `get` above.)\n+    dep_graph.with_ignore(|| {\n+        map.borrow_mut().insert(def_id, v.clone());\n+    });\n+\n     v\n }\n \n@@ -2458,6 +2466,10 @@ impl<'tcx> ctxt<'tcx> {\n             return\n         }\n \n+        // The primitive is not local, hence we are reading this out\n+        // of metadata.\n+        let _ignore = self.dep_graph.in_ignore();\n+\n         if self.populated_external_primitive_impls.borrow().contains(&primitive_def_id) {\n             return\n         }\n@@ -2480,6 +2492,10 @@ impl<'tcx> ctxt<'tcx> {\n             return\n         }\n \n+        // The type is not local, hence we are reading this out of\n+        // metadata and don't need to track edges.\n+        let _ignore = self.dep_graph.in_ignore();\n+\n         if self.populated_external_types.borrow().contains(&type_id) {\n             return\n         }\n@@ -2505,6 +2521,10 @@ impl<'tcx> ctxt<'tcx> {\n             return\n         }\n \n+        // The type is not local, hence we are reading this out of\n+        // metadata and don't need to track edges.\n+        let _ignore = self.dep_graph.in_ignore();\n+\n         let def = self.lookup_trait_def(trait_id);\n         if def.flags.get().intersects(TraitFlags::IMPLS_VALID) {\n             return;\n@@ -2727,6 +2747,15 @@ impl<'tcx> ctxt<'tcx> {\n     pub fn upvar_capture(&self, upvar_id: ty::UpvarId) -> Option<ty::UpvarCapture> {\n         Some(self.tables.borrow().upvar_capture_map.get(&upvar_id).unwrap().clone())\n     }\n+\n+\n+    pub fn visit_all_items_in_krate<V,F>(&self,\n+                                         dep_node_fn: F,\n+                                         visitor: &mut V)\n+        where F: FnMut(DefId) -> DepNode, V: Visitor<'tcx>\n+    {\n+        dep_graph::visit_all_items_in_krate(self, dep_node_fn, visitor);\n+    }\n }\n \n /// The category of explicit self."}, {"sha": "0134bcdf1757b2913f6dbcb70b4b13b5157687e3", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -125,6 +125,8 @@ pub struct Options {\n     pub parse_only: bool,\n     pub no_trans: bool,\n     pub treat_err_as_bug: bool,\n+    pub incremental_compilation: bool,\n+    pub dump_dep_graph: bool,\n     pub no_analysis: bool,\n     pub debugging_opts: DebuggingOptions,\n     pub prints: Vec<PrintRequest>,\n@@ -234,6 +236,8 @@ pub fn basic_options() -> Options {\n         parse_only: false,\n         no_trans: false,\n         treat_err_as_bug: false,\n+        incremental_compilation: false,\n+        dump_dep_graph: false,\n         no_analysis: false,\n         debugging_opts: basic_debugging_options(),\n         prints: Vec::new(),\n@@ -606,6 +610,10 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"run all passes except translation; no output\"),\n     treat_err_as_bug: bool = (false, parse_bool,\n           \"treat all errors that occur as bugs\"),\n+    incr_comp: bool = (false, parse_bool,\n+          \"enable incremental compilation (experimental)\"),\n+    dump_dep_graph: bool = (false, parse_bool,\n+          \"dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv)\"),\n     no_analysis: bool = (false, parse_bool,\n           \"parse and expand the source, but run no analysis\"),\n     extra_plugins: Vec<String> = (Vec::new(), parse_list,\n@@ -932,6 +940,8 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let parse_only = debugging_opts.parse_only;\n     let no_trans = debugging_opts.no_trans;\n     let treat_err_as_bug = debugging_opts.treat_err_as_bug;\n+    let incremental_compilation = debugging_opts.incr_comp;\n+    let dump_dep_graph = debugging_opts.dump_dep_graph;\n     let no_analysis = debugging_opts.no_analysis;\n \n     if debugging_opts.debug_llvm {\n@@ -1106,6 +1116,8 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         parse_only: parse_only,\n         no_trans: no_trans,\n         treat_err_as_bug: treat_err_as_bug,\n+        incremental_compilation: incremental_compilation || dump_dep_graph,\n+        dump_dep_graph: dump_dep_graph,\n         no_analysis: no_analysis,\n         debugging_opts: debugging_opts,\n         prints: prints,"}, {"sha": "631149e69d77ecdd024def52cc4ab33f43169517", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -20,6 +20,7 @@ pub use self::MovedValueUseKind::*;\n \n use self::InteriorKind::*;\n \n+use rustc::dep_graph::DepNode;\n use rustc::front::map as hir_map;\n use rustc::front::map::blocks::FnParts;\n use rustc::middle::cfg;\n@@ -109,7 +110,7 @@ pub fn check_crate(tcx: &ty::ctxt) {\n         }\n     };\n \n-    tcx.map.krate().visit_all_items(&mut bccx);\n+    tcx.visit_all_items_in_krate(DepNode::BorrowCheck, &mut bccx);\n \n     if tcx.sess.borrowck_stats() {\n         println!(\"--- borrowck stats ---\");"}, {"sha": "d172bfb441358e6ca180ff91b04443c541aec4fb", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -801,7 +801,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n                                    time(time_passes,\n                                         \"rvalue checking\",\n-                                        || middle::check_rvalues::check_crate(tcx, krate));\n+                                        || middle::check_rvalues::check_crate(tcx));\n \n                                    // Avoid overwhelming user with errors if type checking failed.\n                                    // I'm not sure how helpful this is, to be honest, but it avoids"}, {"sha": "ba5ecc22e747487123ecc94ccbed98953653cee5", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -204,6 +204,7 @@ impl PpSourceMode {\n                                                         let annotation = TypedAnnotation {\n                                                             tcx: tcx,\n                                                         };\n+                                                        let _ignore = tcx.dep_graph.in_ignore();\n                                                         f(&annotation,\n                                                           payload,\n                                                           &ast_map.forest.krate)"}, {"sha": "08174272a9bc5267a6d7f9240366a2f78fe65aad", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -23,6 +23,7 @@ extern crate rustc_front;\n use build;\n use graphviz;\n use transform::*;\n+use rustc::dep_graph::DepNode;\n use rustc::mir::repr::Mir;\n use hair::cx::Cx;\n use std::fs::File;\n@@ -47,7 +48,7 @@ pub fn build_mir_for_crate<'tcx>(tcx: &ty::ctxt<'tcx>) -> MirMap<'tcx> {\n             tcx: tcx,\n             map: &mut map,\n         };\n-        tcx.map.krate().visit_all_items(&mut dump);\n+        tcx.visit_all_items_in_krate(DepNode::MirMapConstruction, &mut dump);\n     }\n     map\n }"}, {"sha": "955e68be0b00699ce293eab597a4f7790e544e81", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -35,6 +35,7 @@ use std::mem::replace;\n use rustc_front::hir;\n use rustc_front::intravisit::{self, Visitor};\n \n+use rustc::dep_graph::DepNode;\n use rustc::lint;\n use rustc::middle::def;\n use rustc::middle::def_id::DefId;\n@@ -1674,6 +1675,8 @@ pub fn check_crate(tcx: &ty::ctxt,\n                    export_map: &def::ExportMap,\n                    external_exports: ExternalExports)\n                    -> AccessLevels {\n+    let _task = tcx.dep_graph.in_task(DepNode::Privacy);\n+\n     let krate = tcx.map.krate();\n \n     // Sanity check to make sure that all privacy usage and controls are"}, {"sha": "e1edbf4a1276dc963d13858c4510c03d45c0c1bf", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -182,8 +182,10 @@ pub fn find_crate_name(sess: Option<&Session>,\n     \"rust_out\".to_string()\n }\n \n-pub fn build_link_meta(sess: &Session, krate: &hir::Crate,\n-                       name: &str) -> LinkMeta {\n+pub fn build_link_meta(sess: &Session,\n+                       krate: &hir::Crate,\n+                       name: &str)\n+                       -> LinkMeta {\n     let r = LinkMeta {\n         crate_name: name.to_owned(),\n         crate_hash: Svh::calculate(&sess.opts.cg.metadata, krate),"}, {"sha": "e1343c73acfa90cfbd0db544dd8b4bdbbecc2a51", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -716,6 +716,8 @@ pub fn process_crate<'l, 'tcx>(tcx: &'l ty::ctxt<'tcx>,\n                                analysis: &ty::CrateAnalysis,\n                                cratename: &str,\n                                odir: Option<&Path>) {\n+    let _ignore = tcx.dep_graph.in_ignore();\n+\n     if generated_code(krate.span) {\n         return;\n     }"}, {"sha": "6dffdf74140654ededa4cfb086988b38b566fffd", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -43,6 +43,7 @@ use middle::weak_lang_items;\n use middle::pat_util::simple_name;\n use middle::subst::Substs;\n use middle::ty::{self, Ty, HasTypeFlags};\n+use rustc::dep_graph::DepNode;\n use rustc::front::map as hir_map;\n use rustc::util::common::time;\n use rustc_mir::mir_map::MirMap;\n@@ -2978,9 +2979,16 @@ pub fn trans_crate<'tcx>(tcx: &ty::ctxt<'tcx>,\n                          mir_map: &MirMap<'tcx>,\n                          analysis: ty::CrateAnalysis)\n                          -> CrateTranslation {\n-    let ty::CrateAnalysis { export_map, reachable, name, .. } = analysis;\n+    let _task = tcx.dep_graph.in_task(DepNode::TransCrate);\n+\n+    // Be careful with this krate: obviously it gives access to the\n+    // entire contents of the krate. So if you push any subtasks of\n+    // `TransCrate`, you need to be careful to register \"reads\" of the\n+    // particular items that will be processed.\n     let krate = tcx.map.krate();\n \n+    let ty::CrateAnalysis { export_map, reachable, name, .. } = analysis;\n+\n     let check_overflow = if let Some(v) = tcx.sess.opts.debugging_opts.force_overflow_checks {\n         v\n     } else {\n@@ -3186,7 +3194,16 @@ impl<'a, 'tcx, 'v> Visitor<'v> for TransItemsWithinModVisitor<'a, 'tcx> {\n                 // skip modules, they will be uncovered by the TransModVisitor\n             }\n             _ => {\n-                trans_item(self.ccx, i);\n+                let def_id = self.ccx.tcx().map.local_def_id(i.id);\n+                let tcx = self.ccx.tcx();\n+\n+                // Create a subtask for trans'ing a particular item. We are\n+                // giving `trans_item` access to this item, so also record a read.\n+                tcx.dep_graph.with_task(DepNode::TransCrateItem(def_id), || {\n+                    tcx.dep_graph.read(DepNode::Hir(def_id));\n+                    trans_item(self.ccx, i);\n+                });\n+\n                 intravisit::walk_item(self, i);\n             }\n         }"}, {"sha": "89399043c964e6ab9b73879ece47aa81981c0954", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -15,12 +15,13 @@ use middle::subst::Substs;\n use trans::base::{push_ctxt, trans_item, get_item_val, trans_fn};\n use trans::common::*;\n \n+use rustc::dep_graph::DepNode;\n use rustc_front::hir;\n \n-fn instantiate_inline(ccx: &CrateContext, fn_id: DefId)\n-    -> Option<DefId> {\n+fn instantiate_inline(ccx: &CrateContext, fn_id: DefId) -> Option<DefId> {\n     debug!(\"instantiate_inline({:?})\", fn_id);\n     let _icx = push_ctxt(\"instantiate_inline\");\n+    let _task = ccx.tcx().dep_graph.in_task(DepNode::TransInlinedItem(fn_id));\n \n     match ccx.external().borrow().get(&fn_id) {\n         Some(&Some(node_id)) => {"}, {"sha": "d8a3cc50ff4ee5b92157b1547073a4b35ae9e275", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -37,6 +37,7 @@ use trans::machine;\n use trans::type_::Type;\n use middle::ty::{self, Ty, HasTypeFlags};\n use middle::subst::Substs;\n+use rustc::dep_graph::DepNode;\n use rustc_front::hir;\n use syntax::abi::{self, RustIntrinsic};\n use syntax::ast;\n@@ -101,6 +102,7 @@ pub fn span_transmute_size_error(a: &Session, b: Span, msg: &str) {\n /// Performs late verification that intrinsics are used correctly. At present,\n /// the only intrinsic that needs such verification is `transmute`.\n pub fn check_intrinsics(ccx: &CrateContext) {\n+    let _task = ccx.tcx().dep_graph.in_task(DepNode::IntrinsicUseCheck);\n     let mut last_failing_id = None;\n     for transmute_restriction in ccx.tcx().transmute_restrictions.borrow().iter() {\n         // Sometimes, a single call to transmute will push multiple"}, {"sha": "14adc84f701f898af4ca6b9556f18fd94b9dee09", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -82,6 +82,7 @@ use self::TupleArgumentsFlag::*;\n \n use astconv::{self, ast_region_to_region, ast_ty_to_ty, AstConv, PathParamMode};\n use check::_match::pat_ctxt;\n+use dep_graph::DepNode;\n use fmt_macros::{Parser, Piece, Position};\n use middle::astconv_util::prohibit_type_params;\n use middle::cstore::LOCAL_CRATE;\n@@ -384,34 +385,33 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckItemBodiesVisitor<'a, 'tcx> {\n \n pub fn check_wf_new(ccx: &CrateCtxt) {\n     ccx.tcx.sess.abort_if_new_errors(|| {\n-        let krate = ccx.tcx.map.krate();\n         let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(ccx);\n-        krate.visit_all_items(&mut visit);\n+        ccx.tcx.visit_all_items_in_krate(DepNode::WfCheck, &mut visit);\n     });\n }\n \n pub fn check_item_types(ccx: &CrateCtxt) {\n     ccx.tcx.sess.abort_if_new_errors(|| {\n-        let krate = ccx.tcx.map.krate();\n         let mut visit = CheckItemTypesVisitor { ccx: ccx };\n-        krate.visit_all_items(&mut visit);\n+        ccx.tcx.visit_all_items_in_krate(DepNode::TypeckItemType, &mut visit);\n     });\n }\n \n pub fn check_item_bodies(ccx: &CrateCtxt) {\n     ccx.tcx.sess.abort_if_new_errors(|| {\n-        let krate = ccx.tcx.map.krate();\n         let mut visit = CheckItemBodiesVisitor { ccx: ccx };\n-        krate.visit_all_items(&mut visit);\n+        ccx.tcx.visit_all_items_in_krate(DepNode::TypeckItemBody, &mut visit);\n     });\n }\n \n pub fn check_drop_impls(ccx: &CrateCtxt) {\n     ccx.tcx.sess.abort_if_new_errors(|| {\n+        let _task = ccx.tcx.dep_graph.in_task(DepNode::Dropck);\n         let drop_trait = match ccx.tcx.lang_items.drop_trait() {\n             Some(id) => ccx.tcx.lookup_trait_def(id), None => { return }\n         };\n         drop_trait.for_each_impl(ccx.tcx, |drop_impl_did| {\n+            let _task = ccx.tcx.dep_graph.in_task(DepNode::DropckImpl(drop_impl_did));\n             if drop_impl_did.is_local() {\n                 match dropck::check_drop_impl(ccx.tcx, drop_impl_did) {\n                     Ok(()) => {}"}, {"sha": "07c920829d978210cfa9db4b7503b901104b97fb", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -39,9 +39,10 @@ use std::rc::Rc;\n use syntax::codemap::Span;\n use syntax::parse::token;\n use util::nodemap::{DefIdMap, FnvHashMap};\n+use rustc::dep_graph::DepNode;\n use rustc::front::map as hir_map;\n use rustc_front::intravisit;\n-use rustc_front::hir::{Item, ItemImpl,Crate};\n+use rustc_front::hir::{Item, ItemImpl};\n use rustc_front::hir;\n \n mod orphan;\n@@ -104,11 +105,13 @@ impl<'a, 'tcx, 'v> intravisit::Visitor<'v> for CoherenceCheckVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n-    fn check(&self, krate: &Crate) {\n+    fn check(&self) {\n         // Check implementations and traits. This populates the tables\n         // containing the inherent methods and extension methods. It also\n         // builds up the trait inheritance table.\n-        krate.visit_all_items(&mut CoherenceCheckVisitor { cc: self });\n+        self.crate_context.tcx.visit_all_items_in_krate(\n+            DepNode::CoherenceCheckImpl,\n+            &mut CoherenceCheckVisitor { cc: self });\n \n         // Copy over the inherent impls we gathered up during the walk into\n         // the tcx.\n@@ -513,11 +516,13 @@ fn enforce_trait_manually_implementable(tcx: &ty::ctxt, sp: Span, trait_def_id:\n }\n \n pub fn check_coherence(crate_context: &CrateCtxt) {\n+    let _task = crate_context.tcx.dep_graph.in_task(DepNode::Coherence);\n+    let infcx = new_infer_ctxt(crate_context.tcx, &crate_context.tcx.tables, None, true);\n     CoherenceChecker {\n         crate_context: crate_context,\n-        inference_context: new_infer_ctxt(crate_context.tcx, &crate_context.tcx.tables, None, true),\n+        inference_context: infcx,\n         inherent_impls: RefCell::new(FnvHashMap()),\n-    }.check(crate_context.tcx.map.krate());\n+    }.check();\n     unsafety::check(crate_context.tcx);\n     orphan::check(crate_context.tcx);\n     overlap::check(crate_context.tcx);"}, {"sha": "69eb7f51f37852228d2a41f30eaba1e2b6e50507", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -17,12 +17,13 @@ use middle::traits;\n use middle::ty;\n use syntax::ast;\n use syntax::codemap::Span;\n+use rustc::dep_graph::DepNode;\n use rustc_front::intravisit;\n use rustc_front::hir;\n \n pub fn check(tcx: &ty::ctxt) {\n     let mut orphan = OrphanChecker { tcx: tcx };\n-    tcx.map.krate().visit_all_items(&mut orphan);\n+    tcx.visit_all_items_in_krate(DepNode::CoherenceOrphanCheck, &mut orphan);\n }\n \n struct OrphanChecker<'cx, 'tcx:'cx> {\n@@ -234,10 +235,10 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                     }\n                     Err(traits::OrphanCheckErr::UncoveredTy(param_ty)) => {\n                         span_err!(self.tcx.sess, item.span, E0210,\n-                                \"type parameter `{}` must be used as the type parameter for \\\n-                                 some local type (e.g. `MyStruct<T>`); only traits defined in \\\n-                                 the current crate can be implemented for a type parameter\",\n-                                param_ty);\n+                                  \"type parameter `{}` must be used as the type parameter for \\\n+                                   some local type (e.g. `MyStruct<T>`); only traits defined in \\\n+                                   the current crate can be implemented for a type parameter\",\n+                                  param_ty);\n                         return;\n                     }\n                 }"}, {"sha": "6135cf1d32a01114a2c45f844d885da0a4e7c5b4", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -79,6 +79,7 @@ use middle::ty::{VariantKind};\n use middle::ty::fold::{TypeFolder};\n use middle::ty::util::IntTypeExt;\n use rscope::*;\n+use rustc::dep_graph::DepNode;\n use rustc::front::map as hir_map;\n use util::common::{ErrorReported, memoized};\n use util::nodemap::{FnvHashMap, FnvHashSet};\n@@ -174,13 +175,11 @@ struct CollectItemTypesVisitor<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx, 'v> intravisit::Visitor<'v> for CollectItemTypesVisitor<'a, 'tcx> {\n-    fn visit_item(&mut self, i: &hir::Item) {\n-        convert_item(self.ccx, i);\n-        intravisit::walk_item(self, i);\n-    }\n-    fn visit_foreign_item(&mut self, i: &hir::ForeignItem) {\n-        convert_foreign_item(self.ccx, i);\n-        intravisit::walk_foreign_item(self, i);\n+    fn visit_item(&mut self, item: &hir::Item) {\n+        let tcx = self.ccx.tcx;\n+        let item_def_id = tcx.map.local_def_id(item.id);\n+        let _task = tcx.dep_graph.in_task(DepNode::CollectItem(item_def_id));\n+        convert_item(self.ccx, item);\n     }\n }\n \n@@ -703,8 +702,12 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n     debug!(\"convert: item {} with id {}\", it.name, it.id);\n     match it.node {\n         // These don't define types.\n-        hir::ItemExternCrate(_) | hir::ItemUse(_) |\n-        hir::ItemForeignMod(_) | hir::ItemMod(_) => {\n+        hir::ItemExternCrate(_) | hir::ItemUse(_) | hir::ItemMod(_) => {\n+        }\n+        hir::ItemForeignMod(ref foreign_mod) => {\n+            for item in &foreign_mod.items {\n+                convert_foreign_item(ccx, item);\n+            }\n         }\n         hir::ItemEnum(ref enum_definition, _) => {\n             let (scheme, predicates) = convert_typed_item(ccx, it);\n@@ -1455,6 +1458,11 @@ fn type_scheme_of_item<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                                 it: &hir::Item)\n                                 -> ty::TypeScheme<'tcx>\n {\n+    // Computing the type scheme of an item is a discrete task:\n+    let item_def_id = ccx.tcx.map.local_def_id(it.id);\n+    let _task = ccx.tcx.dep_graph.in_task(DepNode::TypeScheme(item_def_id));\n+    ccx.tcx.dep_graph.read(DepNode::Hir(item_def_id)); // we have access to `it`\n+\n     memoized(&ccx.tcx.tcache,\n              ccx.tcx.map.local_def_id(it.id),\n              |_| compute_type_scheme_of_item(ccx, it))\n@@ -1571,13 +1579,18 @@ fn convert_typed_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n \n fn type_scheme_of_foreign_item<'a, 'tcx>(\n     ccx: &CrateCtxt<'a, 'tcx>,\n-    it: &hir::ForeignItem,\n+    item: &hir::ForeignItem,\n     abi: abi::Abi)\n     -> ty::TypeScheme<'tcx>\n {\n+    // Computing the type scheme of a foreign item is a discrete task:\n+    let item_def_id = ccx.tcx.map.local_def_id(item.id);\n+    let _task = ccx.tcx.dep_graph.in_task(DepNode::TypeScheme(item_def_id));\n+    ccx.tcx.dep_graph.read(DepNode::Hir(item_def_id)); // we have access to `item`\n+\n     memoized(&ccx.tcx.tcache,\n-             ccx.tcx.map.local_def_id(it.id),\n-             |_| compute_type_scheme_of_foreign_item(ccx, it, abi))\n+             ccx.tcx.map.local_def_id(item.id),\n+             |_| compute_type_scheme_of_foreign_item(ccx, item, abi))\n }\n \n fn compute_type_scheme_of_foreign_item<'a, 'tcx>("}, {"sha": "580d200eb73a71c06494a119f61817ab0cc42afe", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -92,6 +92,7 @@ extern crate rustc_platform_intrinsics as intrinsics;\n extern crate rustc_front;\n extern crate rustc_back;\n \n+pub use rustc::dep_graph;\n pub use rustc::front;\n pub use rustc::lint;\n pub use rustc::middle;"}, {"sha": "ce0e9e14035f51073965dccb22157995648eb48c", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -266,6 +266,7 @@ use self::ParamKind::*;\n \n use arena;\n use arena::TypedArena;\n+use dep_graph::DepNode;\n use middle::def_id::DefId;\n use middle::resolve_lifetime as rl;\n use middle::subst;\n@@ -280,6 +281,7 @@ use rustc_front::intravisit::Visitor;\n use util::nodemap::NodeMap;\n \n pub fn infer_variance(tcx: &ty::ctxt) {\n+    let _task = tcx.dep_graph.in_task(DepNode::Variance);\n     let krate = tcx.map.krate();\n     let mut arena = arena::TypedArena::new();\n     let terms_cx = determine_parameters_to_be_inferred(tcx, &mut arena, krate);"}, {"sha": "d57d1bcd92da505454cb45ad23818b0550cbb6ff", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/005fa14358d78bc2da3c68933fce0aa58159d944/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=005fa14358d78bc2da3c68933fce0aa58159d944", "patch": "@@ -154,6 +154,7 @@ pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n                                         &name,\n                                         resolve::MakeGlobMap::No,\n                                         |tcx, _, analysis| {\n+        let _ignore = tcx.dep_graph.in_ignore();\n         let ty::CrateAnalysis { access_levels, .. } = analysis;\n \n         // Convert from a NodeId set to a DefId set since we don't always have easy access"}]}