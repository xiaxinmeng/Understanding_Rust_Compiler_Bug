{"sha": "9bc95a4bc99321d69369912aba53de2d477a2bce", "node_id": "C_kwDOAAsO6NoAKDliYzk1YTRiYzk5MzIxZDY5MzY5OTEyYWJhNTNkZTJkNDc3YTJiY2U", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-15T15:52:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-15T15:52:36Z"}, "message": "Rollup merge of #112304 - GuillaumeGomez:re-exports, r=notriddle\n\nAdd chapter in rustdoc book for re-exports and add a regression test for `#[doc(hidden)]` behaviour\n\nFixes https://github.com/rust-lang/rust/issues/109449.\nFixes https://github.com/rust-lang/rust/issues/53417.\n\nAfter the discussion in #109697, I made a few PRs to fix a few corner cases:\n * https://github.com/rust-lang/rust/pull/112178\n * https://github.com/rust-lang/rust/pull/112108\n * https://github.com/rust-lang/rust/pull/111997\n\nWith this I think I covered all cases. Only thing missing at this point was a chapter covering re-exports in the rustdoc book.\n\nr? `@notriddle`", "tree": {"sha": "11367bdcec09c6cb09aa844878c7e8fe1822dca3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11367bdcec09c6cb09aa844878c7e8fe1822dca3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bc95a4bc99321d69369912aba53de2d477a2bce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkizPECRBK7hj4Ov3rIwAA4qwIAKvjqAggBWkXZU9F4HaCOiqX\nueg6nJtsoIiawIT3m3nYVcvsXkvFr7fcDG4zC9oM7jxDdHVryHFcAAzKPjpC8XPW\nf15to9UPveRQEoiM26ZFTU/hP1JDHJTGApmHOT0Tp1F0MtoJJgcPThHeVuhQBuhl\nWstEAgVA+/ZO4KvTlMqKQFXh7WTN/4M9XQvr2NEmqlD8AOQTJJMJ+M6G8xLj4lXM\niLqRRCpxJdQ93pteB+L+HfxUC8n/M2wydcfFK7b0vLWnYUu5JwRTP4VrP1n4UavJ\ncmIlAK4+B4bZdtF7V6gAYCW4Dx0FGzvPxMV2i4g5NxFjIMSpQDvqjrG11L2Ega8=\n=ErMX\n-----END PGP SIGNATURE-----\n", "payload": "tree 11367bdcec09c6cb09aa844878c7e8fe1822dca3\nparent f530016f50799aba1a39df2fb881324e6e9193aa\nparent 44b13658857441fa8879e43f5e28f15a221f2b8e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686844356 +0200\ncommitter GitHub <noreply@github.com> 1686844356 +0200\n\nRollup merge of #112304 - GuillaumeGomez:re-exports, r=notriddle\n\nAdd chapter in rustdoc book for re-exports and add a regression test for `#[doc(hidden)]` behaviour\n\nFixes https://github.com/rust-lang/rust/issues/109449.\nFixes https://github.com/rust-lang/rust/issues/53417.\n\nAfter the discussion in #109697, I made a few PRs to fix a few corner cases:\n * https://github.com/rust-lang/rust/pull/112178\n * https://github.com/rust-lang/rust/pull/112108\n * https://github.com/rust-lang/rust/pull/111997\n\nWith this I think I covered all cases. Only thing missing at this point was a chapter covering re-exports in the rustdoc book.\n\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bc95a4bc99321d69369912aba53de2d477a2bce", "html_url": "https://github.com/rust-lang/rust/commit/9bc95a4bc99321d69369912aba53de2d477a2bce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bc95a4bc99321d69369912aba53de2d477a2bce/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f530016f50799aba1a39df2fb881324e6e9193aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/f530016f50799aba1a39df2fb881324e6e9193aa", "html_url": "https://github.com/rust-lang/rust/commit/f530016f50799aba1a39df2fb881324e6e9193aa"}, {"sha": "44b13658857441fa8879e43f5e28f15a221f2b8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/44b13658857441fa8879e43f5e28f15a221f2b8e", "html_url": "https://github.com/rust-lang/rust/commit/44b13658857441fa8879e43f5e28f15a221f2b8e"}], "stats": {"total": 324, "additions": 323, "deletions": 1}, "files": [{"sha": "12a8b2b8db4b6d24ad2c2f59a3d628615a99e47f", "filename": "src/doc/rustdoc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc95a4bc99321d69369912aba53de2d477a2bce/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/9bc95a4bc99321d69369912aba53de2d477a2bce/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md?ref=9bc95a4bc99321d69369912aba53de2d477a2bce", "patch": "@@ -7,6 +7,7 @@\n - [How to write documentation](how-to-write-documentation.md)\n     - [What to include (and exclude)](write-documentation/what-to-include.md)\n     - [The `#[doc]` attribute](write-documentation/the-doc-attribute.md)\n+    - [Re-exports](write-documentation/re-exports.md)\n     - [Linking to items by name](write-documentation/linking-to-items-by-name.md)\n     - [Documentation tests](write-documentation/documentation-tests.md)\n - [Rustdoc-specific lints](lints.md)"}, {"sha": "593428b8a70a5920479d56255a8a5e8e05ccb035", "filename": "src/doc/rustdoc/src/write-documentation/re-exports.md", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/9bc95a4bc99321d69369912aba53de2d477a2bce/src%2Fdoc%2Frustdoc%2Fsrc%2Fwrite-documentation%2Fre-exports.md", "raw_url": "https://github.com/rust-lang/rust/raw/9bc95a4bc99321d69369912aba53de2d477a2bce/src%2Fdoc%2Frustdoc%2Fsrc%2Fwrite-documentation%2Fre-exports.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fwrite-documentation%2Fre-exports.md?ref=9bc95a4bc99321d69369912aba53de2d477a2bce", "patch": "@@ -0,0 +1,172 @@\n+# Re-exports\n+\n+Let's start by explaining what are re-exports. To do so, we will use an example where we are\n+writing a library (named `lib`) with some types dispatched in sub-modules:\n+\n+```rust\n+pub mod sub_module1 {\n+    pub struct Foo;\n+}\n+pub mod sub_module2 {\n+    pub struct AnotherFoo;\n+}\n+```\n+\n+Users can import them like this:\n+\n+```rust,ignore (inline)\n+use lib::sub_module1::Foo;\n+use lib::sub_module2::AnotherFoo;\n+```\n+\n+But what if you want the types to be available directly at the crate root or if we don't want the\n+modules to be visible for users? That's where re-exports come in:\n+\n+```rust,ignore (inline)\n+// `sub_module1` and `sub_module2` are not visible outside.\n+mod sub_module1 {\n+    pub struct Foo;\n+}\n+mod sub_module2 {\n+    pub struct AnotherFoo;\n+}\n+// We re-export both types:\n+pub use crate::sub_module1::Foo;\n+pub use crate::sub_module2::AnotherFoo;\n+```\n+\n+And now users will be able to do:\n+\n+```rust,ignore (inline)\n+use lib::{Foo, AnotherFoo};\n+```\n+\n+And since both `sub_module1` and `sub_module2` are private, users won't be able to import them.\n+\n+Now what's interesting is that the generated documentation for this crate will show both `Foo` and\n+`AnotherFoo` directly at the crate root, meaning they have been inlined. There are a few rules to\n+know whether or not a re-exported item will be inlined.\n+\n+## Inlining rules\n+\n+If a public item comes from a private module, it will be inlined:\n+\n+```rust,ignore (inline)\n+mod private_module {\n+    pub struct Public;\n+}\n+pub mod public_mod {\n+    // `Public` will inlined here since `private_module` is private.\n+    pub use super::private_module::Public;\n+}\n+// `Public` will not be inlined here since `public_mod` is public.\n+pub use self::public_mod::Public;\n+```\n+\n+Likewise, if an item inherits `#[doc(hidden)]` from any of its ancestors, it will be inlined:\n+\n+```rust,ignore (inline)\n+#[doc(hidden)]\n+pub mod public_mod {\n+    pub struct Public;\n+}\n+// `Public` be inlined since its parent (`public_mod`) has `#[doc(hidden)]`.\n+pub use self::public_mod::Public;\n+```\n+\n+If an item has `#[doc(hidden)]`, it won't be inlined (nor visible in the generated documentation):\n+\n+```rust,ignore (inline)\n+// This struct won't be visible.\n+#[doc(hidden)]\n+pub struct Hidden;\n+\n+// This re-export won't be visible.\n+pub use self::Hidden as InlinedHidden;\n+```\n+\n+The same applies on re-exports themselves: if you have multiple re-exports and some of them have\n+`#[doc(hidden)]`, then these ones (and only these) own't appear in the documentation:\n+\n+```rust,ignore (inline)\n+mod private_mod {\n+    /// First\n+    pub struct InPrivate;\n+}\n+\n+/// Second\n+#[doc(hidden)]\n+pub use self::private_mod::InPrivate as Hidden;\n+/// Third\n+pub use self::Hidden as Visible;\n+```\n+\n+In this case, `InPrivate` will be inlined as `Visible`. However, its documentation will be\n+`First Third` and not `First Second Third` because the re-export with `Second` as documentation has\n+`#[doc(hidden)]`, therefore, all its attributes are ignored.\n+\n+## Inlining with `#[doc(inline)]`\n+\n+You can use the `#[doc(inline)]` attribute if you want to force an item to be inlined:\n+\n+```rust,ignore (inline)\n+pub mod public_mod {\n+    pub struct Public;\n+}\n+#[doc(inline)]\n+pub use self::public_mod::Public;\n+```\n+\n+With this code, even though `public_mod::Public` is public and present in the documentation, the\n+`Public` type will be present both at the crate root and in the `public_mod` module.\n+\n+## Preventing inlining with `#[doc(no_inline)]`\n+\n+On the opposite of the `#[doc(inline)]` attribute, if you want to prevent an item from being\n+inlined, you can use `#[doc(no_inline)]`:\n+\n+```rust,ignore (inline)\n+mod private_mod {\n+    pub struct Public;\n+}\n+#[doc(no_inline)]\n+pub use self::private_mod::Public;\n+```\n+\n+In the generated documentation, you will see a re-export at the crate root and not the type\n+directly.\n+\n+## Attributes\n+\n+When an item is inlined, its doc comments and most of its attributes will be inlined along with it:\n+\n+```rust,ignore (inline)\n+mod private_mod {\n+    /// First\n+    #[cfg(a)]\n+    pub struct InPrivate;\n+    /// Second\n+    #[cfg(b)]\n+    pub use self::InPrivate as Second;\n+}\n+\n+/// Third\n+#[doc(inline)]\n+#[cfg(c)]\n+pub use self::private_mod::Second as Visible;\n+```\n+\n+In this case, `Visible` will have as documentation `First Second Third` and will also have as `cfg`:\n+`#[cfg(a, b, c)]`.\n+\n+[Intra-doc links](./linking-to-items-by-name.md) are resolved relative to where the doc comment is\n+defined.\n+\n+There are a few attributes which are not inlined though:\n+ * `#[doc(alias=\"\")]`\n+ * `#[doc(inline)]`\n+ * `#[doc(no_inline)]`\n+ * `#[doc(hidden)]` (because the re-export itself and its attributes are ignored).\n+\n+All other attributes are inherited when inlined, so that the documentation matches the behavior if\n+the inlined item was directly defined at the spot where it's shown."}, {"sha": "046d018543f386135de35978cbfd9ef5d3763240", "filename": "src/doc/rustdoc/src/write-documentation/the-doc-attribute.md", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9bc95a4bc99321d69369912aba53de2d477a2bce/src%2Fdoc%2Frustdoc%2Fsrc%2Fwrite-documentation%2Fthe-doc-attribute.md", "raw_url": "https://github.com/rust-lang/rust/raw/9bc95a4bc99321d69369912aba53de2d477a2bce/src%2Fdoc%2Frustdoc%2Fsrc%2Fwrite-documentation%2Fthe-doc-attribute.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fwrite-documentation%2Fthe-doc-attribute.md?ref=9bc95a4bc99321d69369912aba53de2d477a2bce", "patch": "@@ -223,12 +223,18 @@ Now we'll have a `Re-exports` line, and `Bar` will not link to anywhere.\n One special case: In Rust 2018 and later, if you `pub use` one of your dependencies, `rustdoc` will\n not eagerly inline it as a module unless you add `#[doc(inline)]`.\n \n+If you want to know more about inlining rules, take a look at the\n+[`re-exports` chapter](./re-exports.md).\n+\n ### `hidden`\n \n <span id=\"dochidden\"></span>\n \n Any item annotated with `#[doc(hidden)]` will not appear in the documentation, unless\n-the `strip-hidden` pass is removed.\n+the `strip-hidden` pass is removed. Re-exported items where one of its ancestors has\n+`#[doc(hidden)]` will be considered the same as private.\n+\n+You can find more information in the [`re-exports` chapter](./re-exports.md).\n \n ### `alias`\n "}, {"sha": "b0c22540180487a644bb4168db6640f8b432efbd", "filename": "tests/rustdoc/issue-109449-doc-hidden-reexports.rs", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/9bc95a4bc99321d69369912aba53de2d477a2bce/tests%2Frustdoc%2Fissue-109449-doc-hidden-reexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc95a4bc99321d69369912aba53de2d477a2bce/tests%2Frustdoc%2Fissue-109449-doc-hidden-reexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-109449-doc-hidden-reexports.rs?ref=9bc95a4bc99321d69369912aba53de2d477a2bce", "patch": "@@ -0,0 +1,143 @@\n+// Test to enforce rules over re-exports inlining from\n+// <https://github.com/rust-lang/rust/issues/109449>.\n+\n+#![crate_name = \"foo\"]\n+\n+mod private_module {\n+    #[doc(hidden)]\n+    pub struct Public;\n+    #[doc(hidden)]\n+    pub type Bar = ();\n+}\n+\n+#[doc(hidden)]\n+mod module {\n+    pub struct Public2;\n+    pub type Bar2 = ();\n+}\n+\n+#[doc(hidden)]\n+pub type Bar3 = ();\n+#[doc(hidden)]\n+pub struct FooFoo;\n+\n+// Checking that re-exporting a `#[doc(hidden)]` item will NOT inline it.\n+pub mod single_reexport {\n+    // @has 'foo/single_reexport/index.html'\n+\n+    // First we check that we have 4 type aliases.\n+    // @count - '//*[@id=\"main-content\"]/*[@class=\"item-table\"]//code' 4\n+\n+    // Then we check that we have the correct link for each re-export.\n+\n+    // @!has - '//*[@href=\"struct.Foo.html\"]' 'Foo'\n+    // @has - '//*[@id=\"reexport.Foo\"]/code' 'pub use crate::private_module::Public as Foo;'\n+    pub use crate::private_module::Public as Foo;\n+    // @!has - '//*[@href=\"type.Foo2.html\"]' 'Foo2'\n+    // @has - '//*[@id=\"reexport.Foo2\"]/code' 'pub use crate::private_module::Bar as Foo2;'\n+    pub use crate::private_module::Bar as Foo2;\n+    // @!has - '//*[@href=\"type.Yo.html\"]' 'Yo'\n+    // @has - '//*[@id=\"reexport.Yo\"]/code' 'pub use crate::Bar3 as Yo;'\n+    pub use crate::Bar3 as Yo;\n+    // @!has - '//*[@href=\"struct.Yo2.html\"]' 'Yo2'\n+    // @has - '//*[@id=\"reexport.Yo2\"]/code' 'pub use crate::FooFoo as Yo2;'\n+    pub use crate::FooFoo as Yo2;\n+\n+    // Checking that each file is also created as expected.\n+    // @!has 'foo/single_reexport/struct.Foo.html'\n+    // @!has 'foo/single_reexport/type.Foo2.html'\n+    // @!has 'foo/single_reexport/type.Yo.html'\n+    // @!has 'foo/single_reexport/struct.Yo2.html'\n+}\n+\n+// However, re-exporting an item inheriting `#[doc(hidden)]` will inline it.\n+pub mod single_reexport_inherit_hidden {\n+    // @has 'foo/single_reexport_inherit_hidden/index.html'\n+\n+    // @has - '//*[@href=\"struct.Foo3.html\"]' 'Foo3'\n+    pub use crate::module::Public2 as Foo3;\n+    // @has - '//*[@href=\"type.Foo4.html\"]' 'Foo4'\n+    pub use crate::module::Bar2 as Foo4;\n+\n+    // @has 'foo/single_reexport_inherit_hidden/struct.Foo3.html'\n+    // @has 'foo/single_reexport_inherit_hidden/type.Foo4.html'\n+}\n+\n+pub mod single_reexport_no_inline {\n+    // First we ensure that we only have re-exports and no inlined items.\n+    // @has 'foo/single_reexport_no_inline/index.html'\n+    // @count - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 1\n+    // @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Re-exports'\n+\n+    // Now we check that we don't have links to the items, just `pub use`.\n+    // @has - '//*[@id=\"main-content\"]//*' 'pub use crate::private_module::Public as XFoo;'\n+    // @!has - '//*[@id=\"main-content\"]//a' 'XFoo'\n+    #[doc(no_inline)]\n+    pub use crate::private_module::Public as XFoo;\n+    // @has - '//*[@id=\"main-content\"]//*' 'pub use crate::private_module::Bar as Foo2;'\n+    // @!has - '//*[@id=\"main-content\"]//a' 'Foo2'\n+    #[doc(no_inline)]\n+    pub use crate::private_module::Bar as Foo2;\n+    // @has - '//*[@id=\"main-content\"]//*' 'pub use crate::Bar3 as Yo;'\n+    // @!has - '//*[@id=\"main-content\"]//a' 'Yo'\n+    #[doc(no_inline)]\n+    pub use crate::Bar3 as Yo;\n+    // @has - '//*[@id=\"main-content\"]//*' 'pub use crate::FooFoo as Yo2;'\n+    // @!has - '//*[@id=\"main-content\"]//a' 'Yo2'\n+    #[doc(no_inline)]\n+    pub use crate::FooFoo as Yo2;\n+    // @has - '//*[@id=\"main-content\"]//*' 'pub use crate::module::Public2 as Foo3;'\n+    // @!has - '//*[@id=\"main-content\"]//a' 'Foo3'\n+    #[doc(no_inline)]\n+    pub use crate::module::Public2 as Foo3;\n+    // @has - '//*[@id=\"main-content\"]//*' 'pub use crate::module::Bar2 as Foo4;'\n+    // @!has - '//*[@id=\"main-content\"]//a' 'Foo4'\n+    #[doc(no_inline)]\n+    pub use crate::module::Bar2 as Foo4;\n+}\n+\n+// Checking that glob re-exports don't inline `#[doc(hidden)]` items.\n+pub mod glob_reexport {\n+    // With glob re-exports, we don't inline `#[doc(hidden)]` items so only `module` items\n+    // should be inlined.\n+    // @has 'foo/glob_reexport/index.html'\n+    // @count - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 3\n+    // @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Re-exports'\n+    // @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Structs'\n+    // @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Type Definitions'\n+\n+    // Now we check we have 1 re-export and 2 inlined items.\n+    // If not item from a glob re-export is visible, we don't show the re-export.\n+    // @!has - '//*[@id=\"main-content\"]//*' 'pub use crate::private_module::*;'\n+    pub use crate::private_module::*;\n+    // @has - '//*[@id=\"main-content\"]//*' 'pub use crate::*;'\n+    pub use crate::*;\n+    // This one should be inlined.\n+    // @!has - '//*[@id=\"main-content\"]//*' 'pub use crate::module::*;'\n+    // @has - '//*[@id=\"main-content\"]//a[@href=\"struct.Public2.html\"]' 'Public2'\n+    // @has - '//*[@id=\"main-content\"]//a[@href=\"type.Bar2.html\"]' 'Bar2'\n+    // And we check that the two files were created too.\n+    // @has 'foo/glob_reexport/struct.Public2.html'\n+    // @has 'foo/glob_reexport/type.Bar2.html'\n+    pub use crate::module::*;\n+}\n+\n+mod private {\n+    /// Original.\n+    pub struct Bar3;\n+}\n+\n+// Checking that `#[doc(hidden)]` re-exports documentation isn't generated.\n+pub mod doc_hidden_reexport {\n+    // @has 'foo/doc_hidden_reexport/index.html'\n+    // Ensure there is only one item in this page and that it's a struct.\n+    // @count - '//*[@class=\"item-name\"]' 1\n+    // @has - '//a[@class=\"struct\"]' 'Reexport'\n+    // Check that the `#[doc(hidden)]` re-export's attributes are not taken into account.\n+    // @has - '//*[@class=\"desc docblock-short\"]' 'Visible. Original.'\n+    /// Hidden.\n+    #[doc(hidden)]\n+    pub use crate::private::Bar3;\n+    /// Visible.\n+    pub use self::Bar3 as Reexport;\n+}"}]}