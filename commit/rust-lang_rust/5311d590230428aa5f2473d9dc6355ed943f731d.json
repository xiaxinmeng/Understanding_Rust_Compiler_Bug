{"sha": "5311d590230428aa5f2473d9dc6355ed943f731d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMTFkNTkwMjMwNDI4YWE1ZjI0NzNkOWRjNjM1NWVkOTQzZjczMWQ=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-05-30T23:14:40Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-01T00:02:49Z"}, "message": "extra::term: better error handling and win32 compat", "tree": {"sha": "87973e07c624a716544684bba299e7668296a0cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87973e07c624a716544684bba299e7668296a0cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5311d590230428aa5f2473d9dc6355ed943f731d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5311d590230428aa5f2473d9dc6355ed943f731d", "html_url": "https://github.com/rust-lang/rust/commit/5311d590230428aa5f2473d9dc6355ed943f731d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5311d590230428aa5f2473d9dc6355ed943f731d/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "100ee8409789edb290a1d3309f70286c6a799a7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/100ee8409789edb290a1d3309f70286c6a799a7c", "html_url": "https://github.com/rust-lang/rust/commit/100ee8409789edb290a1d3309f70286c6a799a7c"}], "stats": {"total": 141, "additions": 99, "deletions": 42}, "files": [{"sha": "26a9e568e6134b0f4407a5c516825b325abe4317", "filename": "src/libextra/term.rs", "status": "modified", "additions": 44, "deletions": 5, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5311d590230428aa5f2473d9dc6355ed943f731d/src%2Flibextra%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5311d590230428aa5f2473d9dc6355ed943f731d/src%2Flibextra%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterm.rs?ref=5311d590230428aa5f2473d9dc6355ed943f731d", "patch": "@@ -43,12 +43,20 @@ pub static color_bright_magenta: u8 = 13u8;\n pub static color_bright_cyan: u8 = 14u8;\n pub static color_bright_white: u8 = 15u8;\n \n+#[cfg(not(target_os = \"win32\"))]\n pub struct Terminal {\n     color_supported: bool,\n     priv out: @io::Writer,\n     priv ti: ~TermInfo\n }\n \n+#[cfg(target_os = \"win32\")]\n+pub struct Terminal {\n+    color_supported: bool,\n+    priv out: @io::Writer,\n+}\n+\n+#[cfg(not(target_os = \"win32\"))]\n pub impl Terminal {\n     pub fn new(out: @io::Writer) -> Result<Terminal, ~str> {\n         let term = os::getenv(\"TERM\");\n@@ -74,19 +82,50 @@ pub impl Terminal {\n     }\n     fn fg(&self, color: u8) {\n         if self.color_supported {\n-            self.out.write(expand(*self.ti.strings.find_equiv(&(\"setaf\")).unwrap(), \n-                                  [Number(color as int)], [], []));\n+            let s = expand(*self.ti.strings.find_equiv(&(\"setaf\")).unwrap(),\n+                           [Number(color as int)], [], []);\n+            if s.is_ok() {\n+                self.out.write(s.get());\n+            } else {\n+                warn!(s.get_err());\n+            }\n         }\n     }\n     fn bg(&self, color: u8) {\n         if self.color_supported {\n-            self.out.write(expand(*self.ti.strings.find_equiv(&(\"setab\")).unwrap(),\n-                                  [Number(color as int)], [], []));\n+            let s = expand(*self.ti.strings.find_equiv(&(\"setab\")).unwrap(),\n+                           [Number(color as int)], [], []);\n+            if s.is_ok() {\n+                self.out.write(s.get());\n+            } else {\n+                warn!(s.get_err());\n+            }\n         }\n     }\n     fn reset(&self) {\n         if self.color_supported {\n-            self.out.write(expand(*self.ti.strings.find_equiv(&(\"op\")).unwrap(), [], [], []));\n+            let s = expand(*self.ti.strings.find_equiv(&(\"op\")).unwrap(), [], [], []);\n+            if s.is_ok() {\n+                self.out.write(s.get());\n+            } else {\n+                warn!(s.get_err());\n+            }\n         }\n     }\n }\n+\n+#[cfg(target_os = \"win32\")]\n+pub impl Terminal {\n+    pub fn new(out: @io::Writer) -> Result<Terminal, ~str> {\n+        return Ok(Terminal {out: out, color_supported: false});\n+    }\n+\n+    fn fg(&self, color: u8) {\n+    }\n+\n+    fn bg(&self, color: u8) {\n+    }\n+\n+    fn reset(&self) {\n+    }\n+}"}, {"sha": "aee4b44944996bbd9cf20a80977c9cd194a96864", "filename": "src/libextra/terminfo/parm.rs", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5311d590230428aa5f2473d9dc6355ed943f731d/src%2Flibextra%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5311d590230428aa5f2473d9dc6355ed943f731d/src%2Flibextra%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparm.rs?ref=5311d590230428aa5f2473d9dc6355ed943f731d", "patch": "@@ -27,13 +27,27 @@ enum States {\n     IfBody\n }\n \n+/// Types of parameters a capability can use\n pub enum Param {\n     String(~str),\n     Char(char),\n     Number(int)\n }\n \n-pub fn expand(cap: &[u8], params: &mut [Param], sta: &mut [Param], dyn: &mut [Param]) -> ~[u8] {\n+/**\n+  Expand a parameterized capability\n+\n+  # Arguments\n+  * `cap`    - string to expand\n+  * `params` - vector of params for %p1 etc\n+  * `sta`    - vector of params corresponding to static variables\n+  * `dyn`    - vector of params corresponding to stativ variables\n+\n+  To be compatible with ncurses, `sta` and `dyn` should be the same between calls to `expand` for\n+  multiple capabilities for the same terminal.\n+  */\n+pub fn expand(cap: &[u8], params: &mut [Param], sta: &mut [Param], dyn: &mut [Param]) \n+    -> Result<~[u8], ~str> {\n     assert!(cap.len() != 0, \"expanding an empty capability makes no sense\");\n     assert!(params.len() <= 9, \"only 9 parameters are supported by capability strings\");\n \n@@ -68,15 +82,15 @@ pub fn expand(cap: &[u8], params: &mut [Param], sta: &mut [Param], dyn: &mut [Pa\n                     '%' => { output.push(cap[i]); state = Nothing },\n                     'c' => match stack.pop() {\n                         Char(c) => output.push(c as u8),\n-                        _       => fail!(\"a non-char was used with %c\")\n+                        _       => return Err(~\"a non-char was used with %c\")\n                     },\n                     's' => match stack.pop() {\n                         String(s) => output.push_all(s.to_bytes()),\n-                        _         => fail!(\"a non-str was used with %s\")\n+                        _         => return Err(~\"a non-str was used with %s\")\n                     },\n                     'd' => match stack.pop() {\n                         Number(x) => output.push_all(x.to_str().to_bytes()),\n-                        _         => fail!(\"a non-number was used with %d\")\n+                        _         => return Err(~\"a non-number was used with %d\")\n                     },\n                     'p' => state = PushParam,\n                     'P' => state = SetVar,\n@@ -85,52 +99,52 @@ pub fn expand(cap: &[u8], params: &mut [Param], sta: &mut [Param], dyn: &mut [Pa\n                     '{' => state = IntConstant,\n                     'l' => match stack.pop() {\n                         String(s) => stack.push(Number(s.len() as int)),\n-                        _         => fail!(\"a non-str was used with %l\")\n+                        _         => return Err(~\"a non-str was used with %l\")\n                     },\n                     '+' => match (stack.pop(), stack.pop()) {\n                         (Number(x), Number(y)) => stack.push(Number(x + y)),\n-                        (_, _) => fail!(\"non-numbers on stack with +\")\n+                        (_, _) => return Err(~\"non-numbers on stack with +\")\n                     },\n                     '-' => match (stack.pop(), stack.pop()) {\n                         (Number(x), Number(y)) => stack.push(Number(x - y)),\n-                        (_, _) => fail!(\"non-numbers on stack with -\")\n+                        (_, _) => return Err(~\"non-numbers on stack with -\")\n                     },\n                     '*' => match (stack.pop(), stack.pop()) {\n                         (Number(x), Number(y)) => stack.push(Number(x * y)),\n-                        (_, _) => fail!(\"non-numbers on stack with *\")\n+                        (_, _) => return Err(~\"non-numbers on stack with *\")\n                     },\n                     '/' => match (stack.pop(), stack.pop()) {\n                         (Number(x), Number(y)) => stack.push(Number(x / y)),\n-                        (_, _) => fail!(\"non-numbers on stack with /\")\n+                        (_, _) => return Err(~\"non-numbers on stack with /\")\n                     },\n                     'm' => match (stack.pop(), stack.pop()) {\n                         (Number(x), Number(y)) => stack.push(Number(x % y)),\n-                        (_, _) => fail!(\"non-numbers on stack with %\")\n+                        (_, _) => return Err(~\"non-numbers on stack with %\")\n                     },\n                     '&' => match (stack.pop(), stack.pop()) {\n                         (Number(x), Number(y)) => stack.push(Number(x & y)),\n-                        (_, _) => fail!(\"non-numbers on stack with &\")\n+                        (_, _) => return Err(~\"non-numbers on stack with &\")\n                     },\n                     '|' => match (stack.pop(), stack.pop()) {\n                         (Number(x), Number(y)) => stack.push(Number(x | y)),\n-                        (_, _) => fail!(\"non-numbers on stack with |\")\n+                        (_, _) => return Err(~\"non-numbers on stack with |\")\n                     },\n-                    'A' => fail!(\"logical operations unimplemented\"),\n-                    'O' => fail!(\"logical operations unimplemented\"),\n-                    '!' => fail!(\"logical operations unimplemented\"),\n+                    'A' => return Err(~\"logical operations unimplemented\"),\n+                    'O' => return Err(~\"logical operations unimplemented\"),\n+                    '!' => return Err(~\"logical operations unimplemented\"),\n                     '~' => match stack.pop() {\n                         Number(x) => stack.push(Number(!x)),\n-                        _         => fail!(\"non-number on stack with %~\")\n+                        _         => return Err(~\"non-number on stack with %~\")\n                     },\n                     'i' => match (copy params[0], copy params[1]) {\n                         (Number(x), Number(y)) => {\n                             params[0] = Number(x + 1);\n                             params[1] = Number(y + 1);\n                         },\n-                        (_, _) => fail!(\"first two params not numbers with %i\")\n+                        (_, _) => return Err(~\"first two params not numbers with %i\")\n                     },\n-                    '?' => state = fail!(\"if expressions unimplemented\"),\n-                    _ => fail!(\"unrecognized format option %c\", cur)\n+                    '?' => state = return Err(fmt!(\"if expressions unimplemented (%?)\", cap)),\n+                    _ => return Err(fmt!(\"unrecognized format option %c\", cur))\n                 }\n             },\n             PushParam => {\n@@ -145,7 +159,7 @@ pub fn expand(cap: &[u8], params: &mut [Param], sta: &mut [Param], dyn: &mut [Pa\n                     let idx = (cur as u8) - ('a' as u8);\n                     dyn[idx] = stack.pop();\n                 } else {\n-                    fail!(\"bad variable name in %P\");\n+                    return Err(~\"bad variable name in %P\");\n                 }\n             },\n             GetVar => {\n@@ -156,7 +170,7 @@ pub fn expand(cap: &[u8], params: &mut [Param], sta: &mut [Param], dyn: &mut [Pa\n                     let idx = (cur as u8) - ('a' as u8);\n                     stack.push(copy dyn[idx]);\n                 } else {\n-                    fail!(\"bad variable name in %g\");\n+                    return Err(~\"bad variable name in %g\");\n                 }\n             },\n             CharConstant => {\n@@ -174,14 +188,14 @@ pub fn expand(cap: &[u8], params: &mut [Param], sta: &mut [Param], dyn: &mut [Pa\n                 intstate.push(cur as u8);\n                 old_state = Nothing;\n             }\n-            _ => fail!(\"unimplemented state\")\n+            _ => return Err(~\"unimplemented state\")\n         }\n         if state == old_state {\n             state = Nothing;\n         }\n         i += 1;\n     }\n-    output\n+    Ok(output)\n }\n \n #[cfg(test)]"}, {"sha": "e63ec1ab5f9911c2ed7be69328febf92d8cff661", "filename": "src/libextra/terminfo/parser/compiled.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5311d590230428aa5f2473d9dc6355ed943f731d/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5311d590230428aa5f2473d9dc6355ed943f731d/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs?ref=5311d590230428aa5f2473d9dc6355ed943f731d", "patch": "@@ -1,6 +1,4 @@\n /// ncurses-compatible compiled terminfo format parsing (term(5))\n-///\n-/// does *not* handle obsolete termcap capabilities!\n \n use core::prelude::*;\n \n@@ -150,6 +148,7 @@ pub static stringnames: &'static[&'static str] = &'static[ \"cbt\", \"_\", \"cr\", \"cs\n     \"OTG3\", \"OTG1\", \"OTG4\", \"OTGR\", \"OTGL\", \"OTGU\", \"OTGD\", \"OTGH\", \"OTGV\", \"OTGC\", \"meml\", \"memu\",\n     \"box1\"];\n \n+/// Parse a compiled terminfo entry, using long capability names if `longnames` is true\n pub fn parse(file: @Reader, longnames: bool) -> Result<~TermInfo, ~str> {\n     let bnames, snames, nnames;\n "}, {"sha": "c2ff8a46ed4530cc1d6521bbf199d1b74dc60b2a", "filename": "src/libextra/terminfo/searcher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5311d590230428aa5f2473d9dc6355ed943f731d/src%2Flibextra%2Fterminfo%2Fsearcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5311d590230428aa5f2473d9dc6355ed943f731d/src%2Flibextra%2Fterminfo%2Fsearcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fsearcher.rs?ref=5311d590230428aa5f2473d9dc6355ed943f731d", "patch": "@@ -12,10 +12,10 @@\n /// Does not support hashed database, only filesystem!\n \n use core::prelude::*;\n-use core::{os, str, vec};\n+use core::{os, str};\n use core::os::getenv;\n use core::io::{file_reader, Reader};\n-use path = core::path::PosixPath;\n+use path = core::path::Path;\n \n /// Return path to database entry for `term`\n pub fn get_dbpath_for_term(term: &str) -> Option<~path> {"}, {"sha": "141a5b6bf7f9b72b663b00ce6b5ac63c1f3af3fb", "filename": "src/libextra/terminfo/terminfo.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5311d590230428aa5f2473d9dc6355ed943f731d/src%2Flibextra%2Fterminfo%2Fterminfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5311d590230428aa5f2473d9dc6355ed943f731d/src%2Flibextra%2Fterminfo%2Fterminfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fterminfo.rs?ref=5311d590230428aa5f2473d9dc6355ed943f731d", "patch": "@@ -10,10 +10,15 @@\n \n use core::hashmap::HashMap;\n \n+/// A parsed terminfo entry.\n pub struct TermInfo {\n+    /// Names for the terminal\n     names: ~[~str],\n+    /// Map of capability name to boolean value\n     bools: HashMap<~str, bool>,\n+    /// Map of capability name to numeric value\n     numbers: HashMap<~str, u16>,\n+    /// Map of capability name to raw (unexpanded) string\n     strings: HashMap<~str, ~[u8]>\n }\n "}, {"sha": "8071546136f067b3e48f5d9f874aebb1609fc251", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5311d590230428aa5f2473d9dc6355ed943f731d/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5311d590230428aa5f2473d9dc6355ed943f731d/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=5311d590230428aa5f2473d9dc6355ed943f731d", "patch": "@@ -280,7 +280,7 @@ pub fn need_dir(s: &Path) {\n fn pretty_message<'a>(msg: &'a str, prefix: &'a str, color: u8, out: @io::Writer) {\n     let term = term::Terminal::new(out);\n     match term {\n-        Ok(ref t) if t.color_supported => {\n+        Ok(ref t) => {\n             t.fg(color);\n             out.write_str(prefix);\n             t.reset();"}, {"sha": "fa4a74b895454408841b3e618b7f1bf0b1f86639", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5311d590230428aa5f2473d9dc6355ed943f731d/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5311d590230428aa5f2473d9dc6355ed943f731d/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=5311d590230428aa5f2473d9dc6355ed943f731d", "patch": "@@ -191,26 +191,26 @@ fn diagnosticcolor(lvl: level) -> u8 {\n }\n \n fn print_diagnostic(topic: &str, lvl: level, msg: &str) {\n-    let term = term::Terminal::new(io::stderr());\n+    let t = term::Terminal::new(io::stderr());\n \n     let stderr = io::stderr();\n \n     if !topic.is_empty() {\n         stderr.write_str(fmt!(\"%s \", topic));\n     }\n \n-    match term {\n-        Ok(t) => {\n+    match t {\n+        Ok(term) => {\n             if stderr.get_type() == io::Screen {\n-                t.fg(diagnosticcolor(lvl));\n+                term.fg(diagnosticcolor(lvl));\n                 stderr.write_str(fmt!(\"%s: \", diagnosticstr(lvl)));\n-                t.reset();\n+                term.reset();\n                 stderr.write_str(fmt!(\"%s\\n\", msg));\n+            } else {\n+                stderr.write_str(fmt!(\"%s: %s\\n\", diagnosticstr(lvl), msg));\n             }\n-        }\n-        Err(_) => {\n-            stderr.write_str(fmt!(\"%s: %s\\n\", diagnosticstr(lvl), msg));\n-        }\n+        },\n+        _ => stderr.write_str(fmt!(\"%s: %s\\n\", diagnosticstr(lvl), msg))\n     }\n }\n "}]}