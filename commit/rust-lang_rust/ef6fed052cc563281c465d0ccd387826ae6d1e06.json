{"sha": "ef6fed052cc563281c465d0ccd387826ae6d1e06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNmZlZDA1MmNjNTYzMjgxYzQ2NWQwY2NkMzg3ODI2YWU2ZDFlMDY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-23T00:14:59Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-23T00:14:59Z"}, "message": "Correctly classify Rename Names", "tree": {"sha": "377fe2f4797460c17b929e4ff53009bfdb8e4fe6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/377fe2f4797460c17b929e4ff53009bfdb8e4fe6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef6fed052cc563281c465d0ccd387826ae6d1e06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef6fed052cc563281c465d0ccd387826ae6d1e06", "html_url": "https://github.com/rust-lang/rust/commit/ef6fed052cc563281c465d0ccd387826ae6d1e06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef6fed052cc563281c465d0ccd387826ae6d1e06/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b744e3369d1f0115a7802b1b587707ff0e7234bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b744e3369d1f0115a7802b1b587707ff0e7234bb", "html_url": "https://github.com/rust-lang/rust/commit/b744e3369d1f0115a7802b1b587707ff0e7234bb"}], "stats": {"total": 103, "additions": 78, "deletions": 25}, "files": [{"sha": "d0201d315dbe3d4fed3ba781a303c6d3ad9937db", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/ef6fed052cc563281c465d0ccd387826ae6d1e06/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6fed052cc563281c465d0ccd387826ae6d1e06/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=ef6fed052cc563281c465d0ccd387826ae6d1e06", "patch": "@@ -3780,4 +3780,63 @@ struct Foo;\n             \"#]],\n         )\n     }\n+\n+    #[test]\n+    fn hover_rename() {\n+        check(\n+            r#\"\n+use self as foo$0;\n+            \"#,\n+            expect![[r#\"\n+                *foo*\n+\n+                ```rust\n+                extern crate test\n+                ```\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+mod bar {}\n+use bar::{self as foo$0};\n+            \"#,\n+            expect![[r#\"\n+                *foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                mod bar\n+                ```\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+mod bar {\n+    use super as foo$0;\n+}\n+            \"#,\n+            expect![[r#\"\n+                *foo*\n+\n+                ```rust\n+                extern crate test\n+                ```\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+use crate as foo$0;\n+            \"#,\n+            expect![[r#\"\n+                *foo*\n+\n+                ```rust\n+                extern crate test\n+                ```\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "28d68c6d3ed6d6689e6858346302230430e6a5ab", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ef6fed052cc563281c465d0ccd387826ae6d1e06/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6fed052cc563281c465d0ccd387826ae6d1e06/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=ef6fed052cc563281c465d0ccd387826ae6d1e06", "patch": "@@ -10,8 +10,8 @@ use hir::{\n     PathResolution, Semantics, Visibility,\n };\n use syntax::{\n-    ast::{self, AstNode, PathSegmentKind},\n-    match_ast, SyntaxKind, SyntaxNode,\n+    ast::{self, AstNode},\n+    match_ast, SyntaxKind,\n };\n \n use crate::RootDatabase;\n@@ -134,29 +134,23 @@ impl NameClass {\n                     if let Some(use_tree) = it.syntax().parent().and_then(ast::UseTree::cast) {\n                         let path = use_tree.path()?;\n                         let path_segment = path.segment()?;\n-                        let name_ref_class = path_segment\n-                            .kind()\n-                            .and_then(|kind| {\n-                                match kind {\n-                                    // The rename might be from a `self` token, so fallback to the name higher\n-                                    // in the use tree.\n-                                    PathSegmentKind::SelfKw => {\n-                                        let use_tree = use_tree\n-                                            .syntax()\n-                                            .parent()\n-                                            .as_ref()\n-                                            // Skip over UseTreeList\n-                                            .and_then(SyntaxNode::parent)\n-                                            .and_then(ast::UseTree::cast)?;\n-                                        let path = use_tree.path()?;\n-                                        let path_segment = path.segment()?;\n-                                        path_segment.name_ref()\n-                                    },\n-                                    PathSegmentKind::Name(name_ref) => Some(name_ref),\n-                                    _ => None,\n-                                }\n-                            })\n-                            .and_then(|name_ref| NameRefClass::classify(sema, &name_ref))?;\n+                        let name_ref = path_segment.name_ref()?;\n+                        let name_ref = if name_ref.self_token().is_some() {\n+                             use_tree\n+                                .syntax()\n+                                .parent()\n+                                .as_ref()\n+                                // Skip over UseTreeList\n+                                .and_then(|it| {\n+                                    let use_tree = it.parent().and_then(ast::UseTree::cast)?;\n+                                    let path = use_tree.path()?;\n+                                    let path_segment = path.segment()?;\n+                                    path_segment.name_ref()\n+                                }).unwrap_or(name_ref)\n+                        } else {\n+                            name_ref\n+                        };\n+                        let name_ref_class = NameRefClass::classify(sema, &name_ref)?;\n \n                         Some(NameClass::Definition(match name_ref_class {\n                             NameRefClass::Definition(def) => def,"}]}