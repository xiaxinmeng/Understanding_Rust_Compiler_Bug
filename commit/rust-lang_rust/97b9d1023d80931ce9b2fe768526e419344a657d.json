{"sha": "97b9d1023d80931ce9b2fe768526e419344a657d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3YjlkMTAyM2Q4MDkzMWNlOWIyZmU3Njg1MjZlNDE5MzQ0YTY1N2Q=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-31T01:54:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-31T01:54:07Z"}, "message": "Rollup merge of #65850 - mikeyhew:patch-1, r=nikomatsakis\n\nUpdate comments re type parameter hack in object safety\n\nTo check if a method's receiver type is object safe, we create a new receiver type by substituting in a bogus type parameter (let's call it `U`) for `Self`, and checking that the unmodified receiver type implements `DispatchFromDyn<receiver type with Self = U>`. It would be better to use `dyn Trait` directly, and the only reason we don't is because it triggers another check that `Trait` is object safe, resulting in a query cycle. Once the feature `object_safe_for_dispatch` (tracking issue https://github.com/rust-lang/rust/issues/43561) is stabilized, this will no longer be the case, and we'll be able to use `dyn Trait` as the unsized `Self` type. I've updated the comments in object_safety.rs accordingly.\n\ncc @Centril @nikomatsakis @bovinebuddha", "tree": {"sha": "60a678dbf1f7ebf93a0d23c35b289aa7222555aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60a678dbf1f7ebf93a0d23c35b289aa7222555aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97b9d1023d80931ce9b2fe768526e419344a657d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJduj6/CRBK7hj4Ov3rIwAAdHIIADJk+nD5QW4KQ4lxQK6X7Mxm\nKf5dl5THVMf2j0wz+06kxX6gPIAbzuUiGn6apZfmXEs4NhBP3lSVHCK8gCuF+ifo\nWUldmoK7/KIT72DwMgXYlhokhj3g2Fg5SGbNPsz0RqcWsYaMJH7NG3RKYCfRkJhZ\nTyO0SICinJS8CtDGqK3K1r8VmvzC/VnTsGkvJTl/+lj3iFDE0jGGbzqlP72USCIW\n2Hi+S3c6poDY+AJjj263PB6Pz4AlsHsrBC7OFISBMht9JNEW01Z7q/8w5G63zJqL\n7WZjcAtl7NG+3FYtdpc65NRjYL7fjINrX5d0kCy+xvMYh3FidklT3prDEzGML7Q=\n=HsDv\n-----END PGP SIGNATURE-----\n", "payload": "tree 60a678dbf1f7ebf93a0d23c35b289aa7222555aa\nparent 0bd4037931042103a702bc8bf8aeca8ca5c7264b\nparent fb4095df94bf07dc745a0c0e07adc93b52f04673\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1572486847 +0100\ncommitter GitHub <noreply@github.com> 1572486847 +0100\n\nRollup merge of #65850 - mikeyhew:patch-1, r=nikomatsakis\n\nUpdate comments re type parameter hack in object safety\n\nTo check if a method's receiver type is object safe, we create a new receiver type by substituting in a bogus type parameter (let's call it `U`) for `Self`, and checking that the unmodified receiver type implements `DispatchFromDyn<receiver type with Self = U>`. It would be better to use `dyn Trait` directly, and the only reason we don't is because it triggers another check that `Trait` is object safe, resulting in a query cycle. Once the feature `object_safe_for_dispatch` (tracking issue https://github.com/rust-lang/rust/issues/43561) is stabilized, this will no longer be the case, and we'll be able to use `dyn Trait` as the unsized `Self` type. I've updated the comments in object_safety.rs accordingly.\n\ncc @Centril @nikomatsakis @bovinebuddha\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97b9d1023d80931ce9b2fe768526e419344a657d", "html_url": "https://github.com/rust-lang/rust/commit/97b9d1023d80931ce9b2fe768526e419344a657d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97b9d1023d80931ce9b2fe768526e419344a657d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bd4037931042103a702bc8bf8aeca8ca5c7264b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bd4037931042103a702bc8bf8aeca8ca5c7264b", "html_url": "https://github.com/rust-lang/rust/commit/0bd4037931042103a702bc8bf8aeca8ca5c7264b"}, {"sha": "fb4095df94bf07dc745a0c0e07adc93b52f04673", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb4095df94bf07dc745a0c0e07adc93b52f04673", "html_url": "https://github.com/rust-lang/rust/commit/fb4095df94bf07dc745a0c0e07adc93b52f04673"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "8ded1417ee570985e8d32d1cb62c9e70a735dd45", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97b9d1023d80931ce9b2fe768526e419344a657d/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97b9d1023d80931ce9b2fe768526e419344a657d/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=97b9d1023d80931ce9b2fe768526e419344a657d", "patch": "@@ -520,9 +520,11 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// a pointer.\n     ///\n     /// In practice, we cannot use `dyn Trait` explicitly in the obligation because it would result\n-    /// in a new check that `Trait` is object safe, creating a cycle. So instead, we fudge a little\n-    /// by introducing a new type parameter `U` such that `Self: Unsize<U>` and `U: Trait + ?Sized`,\n-    /// and use `U` in place of `dyn Trait`. Written as a chalk-style query:\n+    /// in a new check that `Trait` is object safe, creating a cycle (until object_safe_for_dispatch\n+    /// is stabilized, see tracking issue https://github.com/rust-lang/rust/issues/43561).\n+    /// Instead, we fudge a little by introducing a new type parameter `U` such that\n+    /// `Self: Unsize<U>` and `U: Trait + ?Sized`, and use `U` in place of `dyn Trait`.\n+    /// Written as a chalk-style query:\n     ///\n     ///     forall (U: Trait + ?Sized) {\n     ///         if (Self: Unsize<U>) {\n@@ -556,8 +558,8 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         // the type `U` in the query\n         // use a bogus type parameter to mimick a forall(U) query using u32::MAX for now.\n-        // FIXME(mikeyhew) this is a total hack, and we should replace it when real forall queries\n-        // are implemented\n+        // FIXME(mikeyhew) this is a total hack. Once object_safe_for_dispatch is stabilized, we can\n+        // replace this with `dyn Trait`\n         let unsized_self_ty: Ty<'tcx> = self.mk_ty_param(\n             ::std::u32::MAX,\n             Symbol::intern(\"RustaceansAreAwesome\"),"}]}