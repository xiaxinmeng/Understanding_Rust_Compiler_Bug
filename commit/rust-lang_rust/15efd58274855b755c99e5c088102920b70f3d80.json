{"sha": "15efd58274855b755c99e5c088102920b70f3d80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZWZkNTgyNzQ4NTViNzU1Yzk5ZTVjMDg4MTAyOTIwYjcwZjNkODA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-31T17:30:14Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-31T17:30:14Z"}, "message": "cleanup", "tree": {"sha": "20f34929cb92cee869b36c0f808b9e07494562b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20f34929cb92cee869b36c0f808b9e07494562b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15efd58274855b755c99e5c088102920b70f3d80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15efd58274855b755c99e5c088102920b70f3d80", "html_url": "https://github.com/rust-lang/rust/commit/15efd58274855b755c99e5c088102920b70f3d80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15efd58274855b755c99e5c088102920b70f3d80/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d773a46c91cd38862f2324de2bdf8a4fbbf1683", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d773a46c91cd38862f2324de2bdf8a4fbbf1683", "html_url": "https://github.com/rust-lang/rust/commit/2d773a46c91cd38862f2324de2bdf8a4fbbf1683"}], "stats": {"total": 83, "additions": 48, "deletions": 35}, "files": [{"sha": "ab22052d995c94601a3592acf8480a465cb09e87", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 48, "deletions": 35, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/15efd58274855b755c99e5c088102920b70f3d80/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15efd58274855b755c99e5c088102920b70f3d80/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=15efd58274855b755c99e5c088102920b70f3d80", "patch": "@@ -470,42 +470,16 @@ impl<'a> PoolDispatcher<'a> {\n             self.world.cancel_requests();\n         }\n \n-        let world = self.world.snapshot();\n-        let sender = self.sender.clone();\n-        self.pool.execute(move || {\n-            let response = match f(world, params) {\n-                Ok(resp) => RawResponse::ok::<R>(id, &resp),\n-                Err(e) => match e.downcast::<LspError>() {\n-                    Ok(lsp_error) => RawResponse::err(id, lsp_error.code, lsp_error.message),\n-                    Err(e) => {\n-                        if is_canceled(&e) {\n-                            // FIXME: When https://github.com/Microsoft/vscode-languageserver-node/issues/457\n-                            // gets fixed, we can return the proper response.\n-                            // This works around the issue where \"content modified\" error would continuously\n-                            // show an message pop-up in VsCode\n-                            // RawResponse::err(\n-                            //     id,\n-                            //     ErrorCode::ContentModified as i32,\n-                            //     \"content modified\".to_string(),\n-                            // )\n-                            RawResponse {\n-                                id,\n-                                result: Some(serde_json::to_value(&()).unwrap()),\n-                                error: None,\n-                            }\n-                        } else {\n-                            RawResponse::err(\n-                                id,\n-                                ErrorCode::InternalError as i32,\n-                                format!(\"{}\\n{}\", e, e.backtrace()),\n-                            )\n-                        }\n-                    }\n-                },\n-            };\n-            let task = Task::Respond(response);\n-            sender.send(task).unwrap();\n+        self.pool.execute({\n+            let world = self.world.snapshot();\n+            let sender = self.sender.clone();\n+            move || {\n+                let result = f(world, params);\n+                let task = result_to_task::<R>(id, result);\n+                sender.send(task).unwrap();\n+            }\n         });\n+\n         Ok(self)\n     }\n \n@@ -518,6 +492,45 @@ impl<'a> PoolDispatcher<'a> {\n     }\n }\n \n+fn result_to_task<R>(id: u64, result: Result<R::Result>) -> Task\n+where\n+    R: req::Request + 'static,\n+    R::Params: DeserializeOwned + Send + 'static,\n+    R::Result: Serialize + 'static,\n+{\n+    let response = match result {\n+        Ok(resp) => RawResponse::ok::<R>(id, &resp),\n+        Err(e) => match e.downcast::<LspError>() {\n+            Ok(lsp_error) => RawResponse::err(id, lsp_error.code, lsp_error.message),\n+            Err(e) => {\n+                if is_canceled(&e) {\n+                    // FIXME: When https://github.com/Microsoft/vscode-languageserver-node/issues/457\n+                    // gets fixed, we can return the proper response.\n+                    // This works around the issue where \"content modified\" error would continuously\n+                    // show an message pop-up in VsCode\n+                    // RawResponse::err(\n+                    //     id,\n+                    //     ErrorCode::ContentModified as i32,\n+                    //     \"content modified\".to_string(),\n+                    // )\n+                    RawResponse {\n+                        id,\n+                        result: Some(serde_json::to_value(&()).unwrap()),\n+                        error: None,\n+                    }\n+                } else {\n+                    RawResponse::err(\n+                        id,\n+                        ErrorCode::InternalError as i32,\n+                        format!(\"{}\\n{}\", e, e.backtrace()),\n+                    )\n+                }\n+            }\n+        },\n+    };\n+    Task::Respond(response)\n+}\n+\n fn update_file_notifications_on_threadpool(\n     pool: &ThreadPool,\n     world: ServerWorld,"}]}