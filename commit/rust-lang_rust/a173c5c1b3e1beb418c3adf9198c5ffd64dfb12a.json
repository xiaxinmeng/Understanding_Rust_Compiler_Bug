{"sha": "a173c5c1b3e1beb418c3adf9198c5ffd64dfb12a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNzNjNWMxYjNlMWJlYjQxOGMzYWRmOTE5OGM1ZmZkNjRkZmIxMmE=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-17T18:05:51Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-22T17:05:58Z"}, "message": "Add const-stability helpers", "tree": {"sha": "b116812164593ed8c012d98a95572a6f5cd3135e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b116812164593ed8c012d98a95572a6f5cd3135e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a173c5c1b3e1beb418c3adf9198c5ffd64dfb12a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a173c5c1b3e1beb418c3adf9198c5ffd64dfb12a", "html_url": "https://github.com/rust-lang/rust/commit/a173c5c1b3e1beb418c3adf9198c5ffd64dfb12a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a173c5c1b3e1beb418c3adf9198c5ffd64dfb12a/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "110e59e70e21b2c93dc0cd48f22dea292cf62b75", "url": "https://api.github.com/repos/rust-lang/rust/commits/110e59e70e21b2c93dc0cd48f22dea292cf62b75", "html_url": "https://github.com/rust-lang/rust/commit/110e59e70e21b2c93dc0cd48f22dea292cf62b75"}], "stats": {"total": 55, "additions": 45, "deletions": 10}, "files": [{"sha": "b49945f3f9dfd2aef104c50477f16b6b4065dbd5", "filename": "compiler/rustc_mir/src/transform/check_consts/mod.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a173c5c1b3e1beb418c3adf9198c5ffd64dfb12a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a173c5c1b3e1beb418c3adf9198c5ffd64dfb12a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=a173c5c1b3e1beb418c3adf9198c5ffd64dfb12a", "patch": "@@ -51,6 +51,12 @@ impl ConstCx<'mir, 'tcx> {\n     pub fn const_kind(&self) -> hir::ConstContext {\n         self.const_kind.expect(\"`const_kind` must not be called on a non-const fn\")\n     }\n+\n+    pub fn is_const_stable_const_fn(&self) -> bool {\n+        self.const_kind == Some(hir::ConstContext::ConstFn)\n+            && self.tcx.features().staged_api\n+            && is_const_stable(self.tcx, self.def_id.to_def_id())\n+    }\n }\n \n /// Returns `true` if this `DefId` points to one of the official `panic` lang items.\n@@ -63,3 +69,35 @@ pub fn allow_internal_unstable(tcx: TyCtxt<'tcx>, def_id: DefId, feature_gate: S\n     attr::allow_internal_unstable(&tcx.sess, attrs)\n         .map_or(false, |mut features| features.any(|name| name == feature_gate))\n }\n+\n+// Returns `true` if the given `const fn` is \"const-stable\".\n+//\n+// Const-stability is only relevant for `const fn` within a `staged_api` crate. Only \"const-stable\"\n+// functions can be called in a const-context by users of the stable compiler. \"const-stable\"\n+// functions are subject to more stringent restrictions than \"const-unstable\" functions: They\n+// cannot use unstable features and can only call other \"const-stable\" functions.\n+pub fn is_const_stable(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+    use attr::{ConstStability, Stability, StabilityLevel};\n+\n+    // Const-stability is only relevant for `const fn`.\n+    assert!(tcx.is_const_fn_raw(def_id));\n+\n+    // Functions with `#[rustc_const_unstable]` are const-unstable.\n+    match tcx.lookup_const_stability(def_id) {\n+        Some(ConstStability { level: StabilityLevel::Unstable { .. }, .. }) => return false,\n+        Some(ConstStability { level: StabilityLevel::Stable { .. }, .. }) => return true,\n+        None => {}\n+    }\n+\n+    // Functions with `#[unstable]` are const-unstable.\n+    //\n+    // FIXME(ecstaticmorse): We should keep const-stability attributes wholly separate from normal stability\n+    // attributes. `#[unstable]` should be irrelevant.\n+    if let Some(Stability { level: StabilityLevel::Unstable { .. }, .. }) =\n+        tcx.lookup_stability(def_id)\n+    {\n+        return false;\n+    }\n+\n+    true\n+}"}, {"sha": "2dfd7e2171cec46271859c0ca52c0c25362ecad9", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a173c5c1b3e1beb418c3adf9198c5ffd64dfb12a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a173c5c1b3e1beb418c3adf9198c5ffd64dfb12a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=a173c5c1b3e1beb418c3adf9198c5ffd64dfb12a", "patch": "@@ -18,9 +18,7 @@ pub fn non_const<O: NonConstOp>(ccx: &ConstCx<'_, '_>, op: O, span: Span) {\n         Status::Allowed => return,\n \n         Status::Unstable(gate) if ccx.tcx.features().enabled(gate) => {\n-            let unstable_in_stable = ccx.const_kind() == hir::ConstContext::ConstFn\n-                && ccx.tcx.features().enabled(sym::staged_api)\n-                && !ccx.tcx.has_attr(ccx.def_id.to_def_id(), sym::rustc_const_unstable)\n+            let unstable_in_stable = ccx.is_const_stable_const_fn()\n                 && !super::allow_internal_unstable(ccx.tcx, ccx.def_id.to_def_id(), gate);\n \n             if unstable_in_stable {"}, {"sha": "e34511211c67943bc5ce59109e126050194637e6", "filename": "compiler/rustc_mir/src/transform/check_consts/post_drop_elaboration.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a173c5c1b3e1beb418c3adf9198c5ffd64dfb12a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a173c5c1b3e1beb418c3adf9198c5ffd64dfb12a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs?ref=a173c5c1b3e1beb418c3adf9198c5ffd64dfb12a", "patch": "@@ -11,13 +11,13 @@ use super::ConstCx;\n \n /// Returns `true` if we should use the more precise live drop checker that runs after drop\n /// elaboration.\n-pub fn checking_enabled(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> bool {\n+pub fn checking_enabled(ccx: &ConstCx<'_, '_>) -> bool {\n     // Const-stable functions must always use the stable live drop checker.\n-    if tcx.features().staged_api && !tcx.has_attr(def_id.to_def_id(), sym::rustc_const_unstable) {\n+    if ccx.is_const_stable_const_fn() {\n         return false;\n     }\n \n-    tcx.features().const_precise_live_drops\n+    ccx.tcx.features().const_precise_live_drops\n }\n \n /// Look for live drops in a const context.\n@@ -30,12 +30,11 @@ pub fn check_live_drops(tcx: TyCtxt<'tcx>, def_id: LocalDefId, body: &mir::Body<\n         return;\n     }\n \n-    if !checking_enabled(tcx, def_id) {\n+    let ccx = ConstCx { body, tcx, def_id, const_kind, param_env: tcx.param_env(def_id) };\n+    if !checking_enabled(&ccx) {\n         return;\n     }\n \n-    let ccx = ConstCx { body, tcx, def_id, const_kind, param_env: tcx.param_env(def_id) };\n-\n     let mut visitor = CheckLiveDrops { ccx: &ccx, qualifs: Qualifs::default() };\n \n     visitor.visit_body(body);"}, {"sha": "af9d7cc1aa529dd7522fe0371d22c2a7f49436b1", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a173c5c1b3e1beb418c3adf9198c5ffd64dfb12a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a173c5c1b3e1beb418c3adf9198c5ffd64dfb12a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=a173c5c1b3e1beb418c3adf9198c5ffd64dfb12a", "patch": "@@ -551,7 +551,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n             | TerminatorKind::DropAndReplace { place: dropped_place, .. } => {\n                 // If we are checking live drops after drop-elaboration, don't emit duplicate\n                 // errors here.\n-                if super::post_drop_elaboration::checking_enabled(self.tcx, self.def_id) {\n+                if super::post_drop_elaboration::checking_enabled(self.ccx) {\n                     return;\n                 }\n "}]}