{"sha": "f71741bac41a5373791958d4a0a36c84d83b1bd5", "node_id": "C_kwDOAAsO6NoAKGY3MTc0MWJhYzQxYTUzNzM3OTE5NThkNGEwYTM2Yzg0ZDgzYjFiZDU", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@fb.com", "date": "2022-10-26T22:12:19Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2023-05-20T22:12:53Z"}, "message": "[rustc_ty_utils] Add the LLVM `noalias` parameter attribute to `drop_in_place` in certain cases.\n\nLLVM can make use of the `noalias` parameter attribute on the parameter to\n`drop_in_place` in areas like argument promotion. Because the Rust compiler\nfully controls the code for `drop_in_place`, it can soundly deduce parameter\nattributes on it. In the case of a value that has a programmer-defined Drop\nimplementation, we know that the first thing `drop_in_place` will do is pass a\npointer to the object to `Drop::drop`. `Drop::drop` takes `&mut`, so it must be\nguaranteed that there are no pointers to the object upon entering that\nfunction. Therefore, it should be safe to mark `noalias` there.\n\nWith this patch, we mark `noalias` only when the type is a value with a\nprogrammer-defined Drop implementation. This is possibly overly conservative,\nbut I thought that proceeding cautiously was best in this instance.", "tree": {"sha": "762bbc4bb5d452de51ebcb77b96cc251f6ec40dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/762bbc4bb5d452de51ebcb77b96cc251f6ec40dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f71741bac41a5373791958d4a0a36c84d83b1bd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f71741bac41a5373791958d4a0a36c84d83b1bd5", "html_url": "https://github.com/rust-lang/rust/commit/f71741bac41a5373791958d4a0a36c84d83b1bd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f71741bac41a5373791958d4a0a36c84d83b1bd5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e77366b57b799dfa3ce1fcb850c068723a3213ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/e77366b57b799dfa3ce1fcb850c068723a3213ee", "html_url": "https://github.com/rust-lang/rust/commit/e77366b57b799dfa3ce1fcb850c068723a3213ee"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "9b0d34b89794f56b17a8201b0b3ed40f0f221821", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f71741bac41a5373791958d4a0a36c84d83b1bd5/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71741bac41a5373791958d4a0a36c84d83b1bd5/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=f71741bac41a5373791958d4a0a36c84d83b1bd5", "patch": "@@ -238,6 +238,7 @@ fn adjust_for_rust_scalar<'tcx>(\n     layout: TyAndLayout<'tcx>,\n     offset: Size,\n     is_return: bool,\n+    is_drop_target: bool,\n ) {\n     // Booleans are always a noundef i1 that needs to be zero-extended.\n     if scalar.is_bool() {\n@@ -307,6 +308,25 @@ fn adjust_for_rust_scalar<'tcx>(\n             }\n         }\n     }\n+\n+    // If this is the argument to `drop_in_place`, the contents of which we fully control as the\n+    // compiler, then we may be able to mark that argument `noalias`. Currently, we're conservative\n+    // and do so only if `drop_in_place` results in a direct call to the programmer's `drop` method.\n+    // The `drop` method requires `&mut self`, so we're effectively just propagating the `noalias`\n+    // guarantee from `drop` upward to `drop_in_place` in this case.\n+    if is_drop_target {\n+        match *layout.ty.kind() {\n+            ty::RawPtr(inner) => {\n+                if let ty::Adt(adt_def, _) = inner.ty.kind() {\n+                    if adt_def.destructor(cx.tcx()).is_some() {\n+                        debug!(\"marking drop_in_place argument as noalias\");\n+                        attrs.set(ArgAttribute::NoAlias);\n+                    }\n+                }\n+            }\n+            _ => bug!(\"drop target isn't a raw pointer\"),\n+        }\n+    }\n }\n \n // FIXME(eddyb) perhaps group the signature/type-containing (or all of them?)\n@@ -362,10 +382,16 @@ fn fn_abi_new_uncached<'tcx>(\n     use SpecAbi::*;\n     let rust_abi = matches!(sig.abi, RustIntrinsic | PlatformIntrinsic | Rust | RustCall);\n \n+    let is_drop_in_place = match (cx.tcx.lang_items().drop_in_place_fn(), fn_def_id) {\n+        (Some(drop_in_place_fn), Some(fn_def_id)) => drop_in_place_fn == fn_def_id,\n+        _ => false,\n+    };\n+\n     let arg_of = |ty: Ty<'tcx>, arg_idx: Option<usize>| -> Result<_, FnAbiError<'tcx>> {\n         let span = tracing::debug_span!(\"arg_of\");\n         let _entered = span.enter();\n         let is_return = arg_idx.is_none();\n+        let is_drop_target = is_drop_in_place && arg_idx == Some(0);\n \n         let layout = cx.layout_of(ty)?;\n         let layout = if force_thin_self_ptr && arg_idx == Some(0) {\n@@ -379,7 +405,15 @@ fn fn_abi_new_uncached<'tcx>(\n \n         let mut arg = ArgAbi::new(cx, layout, |layout, scalar, offset| {\n             let mut attrs = ArgAttributes::new();\n-            adjust_for_rust_scalar(*cx, &mut attrs, scalar, *layout, offset, is_return);\n+            adjust_for_rust_scalar(\n+                *cx,\n+                &mut attrs,\n+                scalar,\n+                *layout,\n+                offset,\n+                is_return,\n+                is_drop_target,\n+            );\n             attrs\n         });\n "}, {"sha": "bd9de4ad9728bd2fa120f75578d3ae9182940b88", "filename": "tests/codegen/drop-in-place-noalias.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f71741bac41a5373791958d4a0a36c84d83b1bd5/tests%2Fcodegen%2Fdrop-in-place-noalias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71741bac41a5373791958d4a0a36c84d83b1bd5/tests%2Fcodegen%2Fdrop-in-place-noalias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fdrop-in-place-noalias.rs?ref=f71741bac41a5373791958d4a0a36c84d83b1bd5", "patch": "@@ -0,0 +1,34 @@\n+// Tests that the compiler can mark `drop_in_place` as `noalias` when safe to do so.\n+\n+#![crate_type=\"lib\"]\n+\n+use std::hint::black_box;\n+\n+// CHECK: define{{.*}}drop_in_place{{.*}}Foo{{.*}}({{.*}}noalias{{.*}})\n+\n+#[repr(C)]\n+pub struct Foo {\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+}\n+\n+impl Drop for Foo {\n+    #[inline(never)]\n+    fn drop(&mut self) {\n+        black_box(self.a);\n+    }\n+}\n+\n+extern {\n+    fn bar();\n+    fn baz(foo: Foo);\n+}\n+\n+pub fn haha() {\n+    let foo = Foo { a: 1, b: 2, c: 3 };\n+    unsafe {\n+        bar();\n+        baz(foo);\n+    }\n+}"}]}