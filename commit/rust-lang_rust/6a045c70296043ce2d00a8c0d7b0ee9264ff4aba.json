{"sha": "6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "node_id": "C_kwDOAAsO6NoAKDZhMDQ1YzcwMjk2MDQzY2UyZDAwYThjMGQ3YjBlZTkyNjRmZjRhYmE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-07T11:46:43Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-07T11:46:43Z"}, "message": "Introduce NameRefContext", "tree": {"sha": "18bc32ec828d392bec7172eef6bc1d03bf2948e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18bc32ec828d392bec7172eef6bc1d03bf2948e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "html_url": "https://github.com/rust-lang/rust/commit/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dc83f5a90248c53fca38eaee7392a5485a375a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc83f5a90248c53fca38eaee7392a5485a375a3", "html_url": "https://github.com/rust-lang/rust/commit/1dc83f5a90248c53fca38eaee7392a5485a375a3"}], "stats": {"total": 251, "additions": 145, "deletions": 106}, "files": [{"sha": "ec95021ec029ad474ed4273563c85055559fed4a", "filename": "crates/ide-completion/src/completions/attribute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "patch": "@@ -69,8 +69,8 @@ pub(crate) fn complete_known_attribute_input(\n }\n \n pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (is_absolute_path, qualifier, is_inner, annotated_item_kind) = match ctx.path_context {\n-        Some(PathCompletionCtx {\n+    let (is_absolute_path, qualifier, is_inner, annotated_item_kind) = match ctx.path_context() {\n+        Some(&PathCompletionCtx {\n             kind: PathKind::Attr { kind, annotated_item_kind },\n             is_absolute_path,\n             ref qualifier,"}, {"sha": "19414e4b31568ff117e5ba9a1f445edd9734cf8c", "filename": "crates/ide-completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "patch": "@@ -11,9 +11,12 @@ use crate::{\n };\n \n pub(crate) fn complete_derive(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (qualifier, is_absolute_path) = match ctx.path_context {\n-        Some(PathCompletionCtx {\n-            kind: PathKind::Derive, ref qualifier, is_absolute_path, ..\n+    let (qualifier, is_absolute_path) = match ctx.path_context() {\n+        Some(&PathCompletionCtx {\n+            kind: PathKind::Derive,\n+            ref qualifier,\n+            is_absolute_path,\n+            ..\n         }) => (qualifier, is_absolute_path),\n         _ => return,\n     };"}, {"sha": "af0f38a3d8d968f4f35d624c638be33849fb1544", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "patch": "@@ -3,8 +3,7 @@\n use ide_db::FxHashSet;\n \n use crate::{\n-    context::{CompletionContext, PathCompletionCtx, PathKind},\n-    patterns::ImmediateLocation,\n+    context::{CompletionContext, DotAccess, NameRefContext, PathCompletionCtx, PathKind},\n     Completions,\n };\n \n@@ -20,7 +19,10 @@ pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n         _ => return,\n     };\n \n-    if matches!(ctx.completion_location, Some(ImmediateLocation::MethodCall { .. })) {\n+    if matches!(\n+        ctx.nameref_ctx,\n+        Some(NameRefContext { dot_access: Some(DotAccess::Method { .. }), .. }),\n+    ) {\n         cov_mark::hit!(test_no_struct_field_completion_for_method_call);\n     } else {\n         complete_fields(\n@@ -38,7 +40,7 @@ fn complete_undotted_self(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.config.enable_self_on_the_fly {\n         return;\n     }\n-    match ctx.path_context {\n+    match ctx.path_context() {\n         Some(PathCompletionCtx {\n             is_absolute_path: false,\n             qualifier: None,"}, {"sha": "a2a17d92185c428d623385fe98fae4b0728ee48c", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "patch": "@@ -14,7 +14,7 @@ pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext)\n         return;\n     }\n \n-    let (&is_absolute_path, qualifier) = match &ctx.path_context {\n+    let (&is_absolute_path, qualifier) = match ctx.path_context() {\n         Some(PathCompletionCtx {\n             kind: PathKind::Expr { .. },\n             is_absolute_path,"}, {"sha": "bfa4c06f922c03678356386d763983f2fe88deed", "filename": "crates/ide-completion/src/completions/flyimport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "patch": "@@ -119,7 +119,7 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n         return None;\n     }\n     // FIXME: This should be encoded in a different way\n-    if ctx.pattern_ctx.is_none() && ctx.path_context.is_none() && !ctx.has_dot_receiver() {\n+    if ctx.pattern_ctx.is_none() && ctx.path_context().is_none() && !ctx.has_dot_receiver() {\n         // completion inside `ast::Name` of a item declaration\n         return None;\n     }"}, {"sha": "ebbc33c2da0db7d293cd5572239bbc1b03792e69", "filename": "crates/ide-completion/src/completions/item_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs?ref=6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "patch": "@@ -12,7 +12,7 @@ pub(crate) fn complete_item_list(acc: &mut Completions, ctx: &CompletionContext)\n         return;\n     }\n \n-    let (&is_absolute_path, qualifier) = match &ctx.path_context {\n+    let (&is_absolute_path, qualifier) = match ctx.path_context() {\n         Some(PathCompletionCtx {\n             kind: PathKind::Item { .. },\n             is_absolute_path,"}, {"sha": "766ab4fcd7d3313aff8a39c4ecd296db1c3f8f4d", "filename": "crates/ide-completion/src/completions/keyword.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "patch": "@@ -124,8 +124,8 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         add_keyword(\"mut\", \"mut \");\n     }\n \n-    let (can_be_stmt, in_loop_body) = match ctx.path_context {\n-        Some(PathCompletionCtx {\n+    let (can_be_stmt, in_loop_body) = match ctx.path_context() {\n+        Some(&PathCompletionCtx {\n             is_absolute_path: false,\n             kind: PathKind::Expr { in_block_expr, in_loop_body, .. },\n             .."}, {"sha": "211ca4e531b65fccfceb67e642ad7ac01cbeda62", "filename": "crates/ide-completion/src/completions/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "patch": "@@ -17,7 +17,7 @@ pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n     };\n     let refutable = patctx.refutability == PatternRefutability::Refutable;\n \n-    if let Some(path_ctx) = &ctx.path_context {\n+    if let Some(path_ctx) = ctx.path_context() {\n         pattern_path_completion(acc, ctx, path_ctx);\n         return;\n     }"}, {"sha": "ef765a345a5e5386af85bc29706452cbc6c21ae5", "filename": "crates/ide-completion/src/completions/postfix.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "patch": "@@ -13,9 +13,8 @@ use text_edit::TextEdit;\n \n use crate::{\n     completions::postfix::format_like::add_format_like_completions,\n-    context::CompletionContext,\n+    context::{CompletionContext, DotAccess, NameRefContext},\n     item::{Builder, CompletionRelevancePostfixMatch},\n-    patterns::ImmediateLocation,\n     CompletionItem, CompletionItemKind, CompletionRelevance, Completions, SnippetScope,\n };\n \n@@ -24,11 +23,15 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n         return;\n     }\n \n-    let (dot_receiver, receiver_is_ambiguous_float_literal) = match &ctx.completion_location {\n-        Some(ImmediateLocation::MethodCall { receiver: Some(it), .. }) => (it, false),\n-        Some(ImmediateLocation::FieldAccess {\n-            receiver: Some(it),\n-            receiver_is_ambiguous_float_literal,\n+    let (dot_receiver, receiver_is_ambiguous_float_literal) = match &ctx.nameref_ctx {\n+        Some(NameRefContext {\n+            dot_access: Some(DotAccess::Method { receiver: Some(it), .. }),\n+            ..\n+        }) => (it, false),\n+        Some(NameRefContext {\n+            dot_access:\n+                Some(DotAccess::Field { receiver: Some(it), receiver_is_ambiguous_float_literal }),\n+            ..\n         }) => (it, *receiver_is_ambiguous_float_literal),\n         _ => return,\n     };"}, {"sha": "2bae19c84fd7f62588711e4aabcf8ba20633a00f", "filename": "crates/ide-completion/src/completions/snippet.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "patch": "@@ -17,7 +17,7 @@ fn snippet(ctx: &CompletionContext, cap: SnippetCap, label: &str, snippet: &str)\n }\n \n pub(crate) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n-    let can_be_stmt = match ctx.path_context {\n+    let &can_be_stmt = match ctx.path_context() {\n         Some(PathCompletionCtx {\n             is_absolute_path: false,\n             qualifier: None,\n@@ -43,7 +43,7 @@ pub(crate) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionConte\n }\n \n pub(crate) fn complete_item_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n-    let path_kind = match ctx.path_context {\n+    let path_kind = match ctx.path_context() {\n         Some(PathCompletionCtx {\n             is_absolute_path: false,\n             qualifier: None,"}, {"sha": "9381548e5ed9549c371aaac1e86551ed89048abd", "filename": "crates/ide-completion/src/completions/type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs?ref=6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "patch": "@@ -17,7 +17,7 @@ pub(crate) fn complete_type_path(acc: &mut Completions, ctx: &CompletionContext)\n         return;\n     }\n \n-    let (&is_absolute_path, qualifier) = match &ctx.path_context {\n+    let (&is_absolute_path, qualifier) = match ctx.path_context() {\n         Some(PathCompletionCtx { kind: PathKind::Type, is_absolute_path, qualifier, .. }) => {\n             (is_absolute_path, qualifier)\n         }"}, {"sha": "d52a348eb87dee9b7fc9313bcd156f63b88c47d4", "filename": "crates/ide-completion/src/completions/use_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "patch": "@@ -11,7 +11,7 @@ use crate::{\n };\n \n pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (&is_absolute_path, qualifier) = match &ctx.path_context {\n+    let (&is_absolute_path, qualifier) = match ctx.path_context() {\n         Some(PathCompletionCtx { kind: PathKind::Use, is_absolute_path, qualifier, .. }) => {\n             (is_absolute_path, qualifier)\n         }"}, {"sha": "b5e86b62d1a55b845c1c11894631192e31ab2ddf", "filename": "crates/ide-completion/src/completions/vis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs?ref=6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "patch": "@@ -8,7 +8,7 @@ use crate::{\n };\n \n pub(crate) fn complete_vis(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (&is_absolute_path, qualifier, &has_in_token) = match &ctx.path_context {\n+    let (&is_absolute_path, qualifier, &has_in_token) = match ctx.path_context() {\n         Some(PathCompletionCtx {\n             kind: PathKind::Vis { has_in_token },\n             is_absolute_path,"}, {"sha": "e6b41ffbd455700f107fd388cb3f10a19c838078", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 100, "deletions": 39, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "patch": "@@ -14,7 +14,7 @@ use ide_db::{\n };\n use syntax::{\n     algo::{find_node_at_offset, non_trivia_sibling},\n-    ast::{self, AttrKind, HasName, NameOrNameRef},\n+    ast::{self, AttrKind, HasArgList, HasName, NameOrNameRef},\n     match_ast, AstNode, NodeOrToken,\n     SyntaxKind::{self, *},\n     SyntaxNode, SyntaxToken, TextRange, TextSize, T,\n@@ -148,6 +148,26 @@ pub(super) enum NameContext {\n     Variant,\n }\n \n+#[derive(Debug)]\n+pub(super) struct NameRefContext {\n+    pub(super) dot_access: Option<DotAccess>,\n+    pub(super) path_ctx: Option<PathCompletionCtx>,\n+}\n+\n+#[derive(Debug)]\n+pub(super) enum DotAccess {\n+    Field {\n+        receiver: Option<ast::Expr>,\n+        /// True if the receiver is an integer and there is no ident in the original file after it yet\n+        /// like `0.$0`\n+        receiver_is_ambiguous_float_literal: bool,\n+    },\n+    Method {\n+        receiver: Option<ast::Expr>,\n+        has_parens: bool,\n+    },\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub(crate) enum ParamKind {\n     Function(ast::Fn),\n@@ -195,8 +215,8 @@ pub(crate) struct CompletionContext<'a> {\n \n     pub(super) name_ctx: Option<NameContext>,\n     pub(super) lifetime_ctx: Option<LifetimeContext>,\n+    pub(super) nameref_ctx: Option<NameRefContext>,\n     pub(super) pattern_ctx: Option<PatternContext>,\n-    pub(super) path_context: Option<PathCompletionCtx>,\n \n     pub(super) existing_derives: FxHashSet<hir::Macro>,\n \n@@ -237,21 +257,18 @@ impl<'a> CompletionContext<'a> {\n     }\n \n     pub(crate) fn dot_receiver(&self) -> Option<&ast::Expr> {\n-        match &self.completion_location {\n-            Some(\n-                ImmediateLocation::MethodCall { receiver, .. }\n-                | ImmediateLocation::FieldAccess { receiver, .. },\n-            ) => receiver.as_ref(),\n+        match &self.nameref_ctx {\n+            Some(NameRefContext {\n+                dot_access:\n+                    Some(DotAccess::Method { receiver, .. } | DotAccess::Field { receiver, .. }),\n+                ..\n+            }) => receiver.as_ref(),\n             _ => None,\n         }\n     }\n \n     pub(crate) fn has_dot_receiver(&self) -> bool {\n-        matches!(\n-            &self.completion_location,\n-            Some(ImmediateLocation::FieldAccess { receiver, .. } | ImmediateLocation::MethodCall { receiver,.. })\n-                if receiver.is_some()\n-        )\n+        self.dot_receiver().is_some()\n     }\n \n     pub(crate) fn expects_assoc_item(&self) -> bool {\n@@ -324,21 +341,25 @@ impl<'a> CompletionContext<'a> {\n             || matches!(self.name_ctx, Some(NameContext::Module(_) | NameContext::Rename))\n     }\n \n+    pub(crate) fn path_context(&self) -> Option<&PathCompletionCtx> {\n+        self.nameref_ctx.as_ref().and_then(|ctx| ctx.path_ctx.as_ref())\n+    }\n+\n     pub(crate) fn expects_expression(&self) -> bool {\n-        matches!(self.path_context, Some(PathCompletionCtx { kind: PathKind::Expr { .. }, .. }))\n+        matches!(self.path_context(), Some(PathCompletionCtx { kind: PathKind::Expr { .. }, .. }))\n     }\n \n     pub(crate) fn expects_type(&self) -> bool {\n-        matches!(self.path_context, Some(PathCompletionCtx { kind: PathKind::Type, .. }))\n+        matches!(self.path_context(), Some(PathCompletionCtx { kind: PathKind::Type, .. }))\n     }\n \n     pub(crate) fn path_is_call(&self) -> bool {\n-        self.path_context.as_ref().map_or(false, |it| it.has_call_parens)\n+        self.path_context().map_or(false, |it| it.has_call_parens)\n     }\n \n     pub(crate) fn is_non_trivial_path(&self) -> bool {\n         matches!(\n-            self.path_context,\n+            self.path_context(),\n             Some(\n                 PathCompletionCtx { is_absolute_path: true, .. }\n                     | PathCompletionCtx { qualifier: Some(_), .. }\n@@ -347,11 +368,11 @@ impl<'a> CompletionContext<'a> {\n     }\n \n     pub(crate) fn path_qual(&self) -> Option<&ast::Path> {\n-        self.path_context.as_ref().and_then(|it| it.qualifier.as_ref().map(|it| &it.path))\n+        self.path_context().and_then(|it| it.qualifier.as_ref().map(|it| &it.path))\n     }\n \n     pub(crate) fn path_kind(&self) -> Option<PathKind> {\n-        self.path_context.as_ref().map(|it| it.kind)\n+        self.path_context().map(|it| it.kind)\n     }\n \n     pub(crate) fn is_immediately_after_macro_bang(&self) -> bool {\n@@ -498,17 +519,17 @@ impl<'a> CompletionContext<'a> {\n             function_def: None,\n             impl_def: None,\n             name_syntax: None,\n-            lifetime_ctx: None,\n-            pattern_ctx: None,\n-            name_ctx: None,\n+            incomplete_let: false,\n             completion_location: None,\n             prev_sibling: None,\n             fake_attribute_under_caret: None,\n             previous_token: None,\n-            path_context: None,\n-            locals,\n-            incomplete_let: false,\n+            name_ctx: None,\n+            lifetime_ctx: None,\n+            nameref_ctx: None,\n+            pattern_ctx: None,\n             existing_derives: Default::default(),\n+            locals,\n         };\n         ctx.expand_and_fill(\n             original_file.syntax().clone(),\n@@ -843,11 +864,13 @@ impl<'a> CompletionContext<'a> {\n             {\n                 self.name_syntax =\n                     find_node_at_offset(&original_file, name_ref.syntax().text_range().start());\n-                if let Some((path_ctx, _)) =\n+                if let Some((mut nameref_ctx, _)) =\n                     Self::classify_name_ref(&self.sema, &original_file, name_ref)\n                 {\n-                    self.path_context =\n-                        Some(PathCompletionCtx { kind: PathKind::Derive, ..path_ctx });\n+                    if let Some(path_ctx) = &mut nameref_ctx.path_ctx {\n+                        path_ctx.kind = PathKind::Derive;\n+                    }\n+                    self.nameref_ctx = Some(nameref_ctx);\n                 }\n             }\n             return;\n@@ -878,10 +901,10 @@ impl<'a> CompletionContext<'a> {\n                 self.lifetime_ctx = Self::classify_lifetime(&self.sema, original_file, lifetime);\n             }\n             ast::NameLike::NameRef(name_ref) => {\n-                if let Some((path_ctx, pat_ctx)) =\n+                if let Some((nameref_ctx, pat_ctx)) =\n                     Self::classify_name_ref(&self.sema, original_file, name_ref)\n                 {\n-                    self.path_context = Some(path_ctx);\n+                    self.nameref_ctx = Some(nameref_ctx);\n                     self.pattern_ctx = pat_ctx;\n                 }\n             }\n@@ -968,11 +991,53 @@ impl<'a> CompletionContext<'a> {\n         sema: &Semantics<RootDatabase>,\n         original_file: &SyntaxNode,\n         name_ref: ast::NameRef,\n-    ) -> Option<(PathCompletionCtx, Option<PatternContext>)> {\n+    ) -> Option<(NameRefContext, Option<PatternContext>)> {\n         let parent = name_ref.syntax().parent()?;\n-        let segment = ast::PathSegment::cast(parent)?;\n-        let path = segment.parent_path();\n \n+        let mut nameref_ctx = NameRefContext { dot_access: None, path_ctx: None };\n+\n+        fn find_in_original_file<N: AstNode>(\n+            x: Option<N>,\n+            original_file: &SyntaxNode,\n+        ) -> Option<N> {\n+            fn find_node_with_range<N: AstNode>(\n+                syntax: &SyntaxNode,\n+                range: TextRange,\n+            ) -> Option<N> {\n+                let range = syntax.text_range().intersect(range)?;\n+                syntax.covering_element(range).ancestors().find_map(N::cast)\n+            }\n+            x.map(|e| e.syntax().text_range()).and_then(|r| find_node_with_range(original_file, r))\n+        }\n+        let segment = match_ast! {\n+            match parent {\n+                ast::PathSegment(segment) => segment,\n+                ast::FieldExpr(field) => {\n+                    let receiver = find_in_original_file(field.expr(), original_file);\n+                    let receiver_is_ambiguous_float_literal = match &receiver {\n+                        Some(ast::Expr::Literal(l)) => matches! {\n+                            l.kind(),\n+                            ast::LiteralKind::FloatNumber { .. } if l.syntax().last_token().map_or(false, |it| it.kind() == T![.])\n+                        },\n+                        _ => false,\n+                    };\n+                    nameref_ctx.dot_access = Some(DotAccess::Field { receiver, receiver_is_ambiguous_float_literal });\n+                    return Some((nameref_ctx, None));\n+                },\n+                ast::MethodCallExpr(method) => {\n+                    nameref_ctx.dot_access = Some(\n+                        DotAccess::Method {\n+                            receiver: find_in_original_file(method.receiver(), original_file),\n+                            has_parens: method.arg_list().map_or(false, |it| it.l_paren_token().is_some())\n+                        }\n+                    );\n+                    return Some((nameref_ctx, None));\n+                },\n+                _ => return None,\n+            }\n+        };\n+\n+        let path = segment.parent_path();\n         let mut path_ctx = PathCompletionCtx {\n             has_call_parens: false,\n             has_macro_bang: false,\n@@ -1109,17 +1174,13 @@ impl<'a> CompletionContext<'a> {\n                     is_infer_qualifier,\n                 }\n             });\n-            return Some((path_ctx, pat_ctx));\n-        }\n-\n-        if let Some(segment) = path.segment() {\n+        } else if let Some(segment) = path.segment() {\n             if segment.coloncolon_token().is_some() {\n                 path_ctx.is_absolute_path = true;\n-                return Some((path_ctx, pat_ctx));\n             }\n         }\n-\n-        Some((path_ctx, pat_ctx))\n+        nameref_ctx.path_ctx = Some(path_ctx);\n+        Some((nameref_ctx, pat_ctx))\n     }\n }\n "}, {"sha": "07b2ac4297f3a8e063f69e01399ae4259d7657ad", "filename": "crates/ide-completion/src/patterns.rs", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fpatterns.rs?ref=6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "patch": "@@ -8,7 +8,7 @@ use hir::Semantics;\n use ide_db::RootDatabase;\n use syntax::{\n     algo::non_trivia_sibling,\n-    ast::{self, HasArgList, HasLoopBody, HasName},\n+    ast::{self, HasLoopBody, HasName},\n     match_ast, AstNode, Direction, SyntaxElement,\n     SyntaxKind::*,\n     SyntaxNode, SyntaxToken, TextRange, TextSize,\n@@ -51,16 +51,6 @@ pub(crate) enum ImmediateLocation {\n     TypeBound,\n     /// Original file ast node\n     TypeAnnotation(TypeAnnotation),\n-    /// Original file ast node\n-    MethodCall {\n-        receiver: Option<ast::Expr>,\n-        has_parens: bool,\n-    },\n-    /// Original file ast node\n-    FieldAccess {\n-        receiver: Option<ast::Expr>,\n-        receiver_is_ambiguous_float_literal: bool,\n-    },\n     // Only set from a type arg\n     /// Original file ast node\n     GenericArgList(ast::GenericArgList),\n@@ -226,25 +216,6 @@ pub(crate) fn determine_location(\n             ast::GenericArgList(_) => sema\n                 .find_node_at_offset_with_macros(original_file, offset)\n                 .map(ImmediateLocation::GenericArgList)?,\n-            ast::FieldExpr(it) => {\n-                let receiver = find_in_original_file(it.expr(), original_file);\n-                let receiver_is_ambiguous_float_literal = if let Some(ast::Expr::Literal(l)) = &receiver {\n-                    match l.kind() {\n-                        ast::LiteralKind::FloatNumber { .. } => l.to_string().ends_with('.'),\n-                        _ => false,\n-                    }\n-                } else {\n-                    false\n-                };\n-                ImmediateLocation::FieldAccess {\n-                    receiver,\n-                    receiver_is_ambiguous_float_literal,\n-                }\n-            },\n-            ast::MethodCallExpr(it) => ImmediateLocation::MethodCall {\n-                receiver: find_in_original_file(it.receiver(), original_file),\n-                has_parens: it.arg_list().map_or(false, |it| it.l_paren_token().is_some())\n-            },\n             ast::Const(it) => {\n                 if !it.ty().map_or(false, |x| x.syntax().text_range().contains(offset)) {\n                     return None;"}, {"sha": "01c9bfdb85ce37fad6303fdcb21b7dacb95749e0", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "patch": "@@ -272,7 +272,7 @@ fn render_resolution_simple_(\n \n     // Add `<>` for generic types\n     let type_path_no_ty_args = matches!(\n-        ctx.completion.path_context,\n+        ctx.completion.path_context(),\n         Some(PathCompletionCtx { kind: PathKind::Type, has_type_args: false, .. })\n     ) && ctx.completion.config.add_call_parenthesis;\n     if type_path_no_ty_args {"}, {"sha": "93c64eec6f800178a0d76e28e89759b296307a80", "filename": "crates/ide-completion/src/render/function.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs?ref=6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "patch": "@@ -7,9 +7,8 @@ use stdx::{format_to, to_lower_snake_case};\n use syntax::SmolStr;\n \n use crate::{\n-    context::{CompletionContext, PathCompletionCtx, PathKind},\n+    context::{CompletionContext, DotAccess, NameRefContext, PathCompletionCtx, PathKind},\n     item::{Builder, CompletionItem, CompletionItemKind, CompletionRelevance},\n-    patterns::ImmediateLocation,\n     render::{compute_exact_name_match, compute_ref_match, compute_type_match, RenderContext},\n };\n \n@@ -196,7 +195,7 @@ fn should_add_parens(ctx: &CompletionContext) -> bool {\n         return false;\n     }\n \n-    match ctx.path_context {\n+    match ctx.path_context() {\n         Some(PathCompletionCtx { kind: PathKind::Expr { .. }, has_call_parens: true, .. }) => {\n             return false\n         }\n@@ -208,8 +207,8 @@ fn should_add_parens(ctx: &CompletionContext) -> bool {\n     };\n \n     if matches!(\n-        ctx.completion_location,\n-        Some(ImmediateLocation::MethodCall { has_parens: true, .. })\n+        ctx.nameref_ctx,\n+        Some(NameRefContext { dot_access: Some(DotAccess::Method { has_parens: true, .. }), .. })\n     ) {\n         return false;\n     }"}, {"sha": "e6540e6ac53c845c9d3e61685b235b624eee66be", "filename": "crates/ide-completion/src/render/literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs?ref=6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "patch": "@@ -52,7 +52,7 @@ fn render(\n     let db = completion.db;\n     let kind = thing.kind(db);\n     let has_call_parens =\n-        matches!(completion.path_context, Some(PathCompletionCtx { has_call_parens: true, .. }));\n+        matches!(completion.path_context(), Some(PathCompletionCtx { has_call_parens: true, .. }));\n \n     let fields = thing.fields(completion)?;\n     let (qualified_name, short_qualified_name, qualified) = match path {"}, {"sha": "9c51a6311a4dbc5a736fc59727be5acc14e6a688", "filename": "crates/ide-completion/src/render/macro_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs?ref=6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "patch": "@@ -33,8 +33,8 @@ fn render(\n     let is_fn_like = macro_.is_fn_like(completion.db);\n     let (bra, ket) = if is_fn_like { guess_macro_braces(&name, docs_str) } else { (\"\", \"\") };\n \n-    let needs_bang = match completion.path_context {\n-        Some(PathCompletionCtx { kind, has_macro_bang, .. }) => {\n+    let needs_bang = match completion.path_context() {\n+        Some(&PathCompletionCtx { kind, has_macro_bang, .. }) => {\n             is_fn_like && kind != PathKind::Use && !has_macro_bang\n         }\n         _ => is_fn_like,"}, {"sha": "5b403ae8cccb29e8f7eb84799890485f061a1aa8", "filename": "crates/ide-completion/src/render/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs?ref=6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "patch": "@@ -78,7 +78,7 @@ fn render_pat(\n     fields_omitted: bool,\n ) -> Option<String> {\n     let has_call_parens = matches!(\n-        ctx.completion.path_context,\n+        ctx.completion.path_context(),\n         Some(PathCompletionCtx { has_call_parens: true, .. })\n     );\n     let mut pat = match kind {"}]}