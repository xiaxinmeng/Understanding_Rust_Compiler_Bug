{"sha": "740fb57f5ddacddd9bcf074df701bcc50b46e69f", "node_id": "C_kwDOAAsO6NoAKDc0MGZiNTdmNWRkYWNkZGQ5YmNmMDc0ZGY3MDFiY2M1MGI0NmU2OWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-12T19:15:08Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-12-14T02:36:12Z"}, "message": "clippy fixes", "tree": {"sha": "2733990e4aa87e962cd14cd712cd92b698a150ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2733990e4aa87e962cd14cd712cd92b698a150ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/740fb57f5ddacddd9bcf074df701bcc50b46e69f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/740fb57f5ddacddd9bcf074df701bcc50b46e69f", "html_url": "https://github.com/rust-lang/rust/commit/740fb57f5ddacddd9bcf074df701bcc50b46e69f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/740fb57f5ddacddd9bcf074df701bcc50b46e69f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f40b1d9f1aeabca7a6e28d2d32d8458943111957", "url": "https://api.github.com/repos/rust-lang/rust/commits/f40b1d9f1aeabca7a6e28d2d32d8458943111957", "html_url": "https://github.com/rust-lang/rust/commit/f40b1d9f1aeabca7a6e28d2d32d8458943111957"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "4d845547cdfed179647f86dca9bd0e36c3740211", "filename": "src/bin/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/740fb57f5ddacddd9bcf074df701bcc50b46e69f/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740fb57f5ddacddd9bcf074df701bcc50b46e69f/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=740fb57f5ddacddd9bcf074df701bcc50b46e69f", "patch": "@@ -26,7 +26,7 @@ fn main() {\n     let exit_code = match execute(&opts) {\n         Ok(code) => code,\n         Err(e) => {\n-            eprintln!(\"{}\", e.to_string());\n+            eprintln!(\"{}\", e);\n             1\n         }\n     };"}, {"sha": "edd004ac63f0b7fd234437a3230b7f1751ed2968", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/740fb57f5ddacddd9bcf074df701bcc50b46e69f/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740fb57f5ddacddd9bcf074df701bcc50b46e69f/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=740fb57f5ddacddd9bcf074df701bcc50b46e69f", "patch": "@@ -2003,9 +2003,7 @@ fn choose_rhs<R: Rewrite>(\n     has_rhs_comment: bool,\n ) -> Option<String> {\n     match orig_rhs {\n-        Some(ref new_str) if new_str.is_empty() => {\n-            return Some(String::new());\n-        }\n+        Some(ref new_str) if new_str.is_empty() => Some(String::new()),\n         Some(ref new_str)\n             if !new_str.contains('\\n') && unicode_str_width(new_str) <= shape.width =>\n         {"}, {"sha": "b39480a0ef908b74d6d55a80384a70e66bf3f292", "filename": "src/formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/740fb57f5ddacddd9bcf074df701bcc50b46e69f/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740fb57f5ddacddd9bcf074df701bcc50b46e69f/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=740fb57f5ddacddd9bcf074df701bcc50b46e69f", "patch": "@@ -76,7 +76,7 @@ fn should_skip_module<T: FormatHandler>(\n         return true;\n     }\n \n-    if !input_is_stdin && context.ignore_file(&path) {\n+    if !input_is_stdin && context.ignore_file(path) {\n         return true;\n     }\n "}, {"sha": "a77b7c10876025dfc195b2eeaba9c6b1f931c647", "filename": "src/items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/740fb57f5ddacddd9bcf074df701bcc50b46e69f/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740fb57f5ddacddd9bcf074df701bcc50b46e69f/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=740fb57f5ddacddd9bcf074df701bcc50b46e69f", "patch": "@@ -1535,15 +1535,15 @@ pub(crate) fn rewrite_type_alias<'a, 'b>(\n     // https://rustc-dev-guide.rust-lang.org/opaque-types-type-alias-impl-trait.html\n     // https://github.com/rust-dev-tools/fmt-rfcs/blob/master/guide/items.md#type-aliases\n     match (visitor_kind, &op_ty) {\n-        (Item(_) | AssocTraitItem(_) | ForeignItem(_), Some(ref op_bounds)) => {\n+        (Item(_) | AssocTraitItem(_) | ForeignItem(_), Some(op_bounds)) => {\n             let op = OpaqueType { bounds: op_bounds };\n             rewrite_ty(rw_info, Some(bounds), Some(&op), vis)\n         }\n         (Item(_) | AssocTraitItem(_) | ForeignItem(_), None) => {\n             rewrite_ty(rw_info, Some(bounds), ty_opt, vis)\n         }\n         (AssocImplItem(_), _) => {\n-            let result = if let Some(ref op_bounds) = op_ty {\n+            let result = if let Some(op_bounds) = op_ty {\n                 let op = OpaqueType { bounds: op_bounds };\n                 rewrite_ty(rw_info, Some(bounds), Some(&op), &DEFAULT_VISIBILITY)\n             } else {\n@@ -3124,7 +3124,7 @@ impl Rewrite for ast::ForeignItem {\n                     let inner_attrs = inner_attributes(&self.attrs);\n                     let fn_ctxt = visit::FnCtxt::Foreign;\n                     visitor.visit_fn(\n-                        visit::FnKind::Fn(fn_ctxt, self.ident, &sig, &self.vis, Some(body)),\n+                        visit::FnKind::Fn(fn_ctxt, self.ident, sig, &self.vis, Some(body)),\n                         generics,\n                         &sig.decl,\n                         self.span,\n@@ -3137,7 +3137,7 @@ impl Rewrite for ast::ForeignItem {\n                         context,\n                         shape.indent,\n                         self.ident,\n-                        &FnSig::from_method_sig(&sig, generics, &self.vis),\n+                        &FnSig::from_method_sig(sig, generics, &self.vis),\n                         span,\n                         FnBraceStyle::None,\n                     )\n@@ -3166,7 +3166,7 @@ impl Rewrite for ast::ForeignItem {\n                 .map(|s| s + \";\")\n             }\n             ast::ForeignItemKind::TyAlias(ref ty_alias) => {\n-                let (kind, span) = (&ItemVisitorKind::ForeignItem(&self), self.span);\n+                let (kind, span) = (&ItemVisitorKind::ForeignItem(self), self.span);\n                 rewrite_type_alias(ty_alias, context, shape.indent, kind, span)\n             }\n             ast::ForeignItemKind::MacCall(ref mac) => {"}, {"sha": "7aa0315f18c262b21a678830251902ef7a333f9b", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/740fb57f5ddacddd9bcf074df701bcc50b46e69f/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740fb57f5ddacddd9bcf074df701bcc50b46e69f/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=740fb57f5ddacddd9bcf074df701bcc50b46e69f", "patch": "@@ -448,10 +448,8 @@ where\n                     true\n                 } else if starts_with_newline(comment) {\n                     false\n-                } else if comment.trim().contains('\\n') || comment.trim().len() > width {\n-                    true\n                 } else {\n-                    false\n+                    comment.trim().contains('\\n') || comment.trim().len() > width\n                 };\n \n                 rewrite_comment("}, {"sha": "1896a4744fe440987775bbe35e3c7a9cf52eb150", "filename": "src/visitor.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/740fb57f5ddacddd9bcf074df701bcc50b46e69f/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740fb57f5ddacddd9bcf074df701bcc50b46e69f/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=740fb57f5ddacddd9bcf074df701bcc50b46e69f", "patch": "@@ -552,7 +552,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                             _ => visit::FnCtxt::Foreign,\n                         };\n                         self.visit_fn(\n-                            visit::FnKind::Fn(fn_ctxt, item.ident, &sig, &item.vis, Some(body)),\n+                            visit::FnKind::Fn(fn_ctxt, item.ident, sig, &item.vis, Some(body)),\n                             generics,\n                             &sig.decl,\n                             item.span,\n@@ -562,14 +562,14 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     } else {\n                         let indent = self.block_indent;\n                         let rewrite = self.rewrite_required_fn(\n-                            indent, item.ident, &sig, &item.vis, generics, item.span,\n+                            indent, item.ident, sig, &item.vis, generics, item.span,\n                         );\n                         self.push_rewrite(item.span, rewrite);\n                     }\n                 }\n                 ast::ItemKind::TyAlias(ref ty_alias) => {\n                     use ItemVisitorKind::Item;\n-                    self.visit_ty_alias_kind(ty_alias, &Item(&item), item.span);\n+                    self.visit_ty_alias_kind(ty_alias, &Item(item), item.span);\n                 }\n                 ast::ItemKind::GlobalAsm(..) => {\n                     let snippet = Some(self.snippet(item.span).to_owned());\n@@ -619,17 +619,17 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         skip_out_of_file_lines_range_visitor!(self, ai.span);\n \n         if self.visit_attrs(&ai.attrs, ast::AttrStyle::Outer) {\n-            self.push_skipped_with_span(&ai.attrs.as_slice(), skip_span, skip_span);\n+            self.push_skipped_with_span(ai.attrs.as_slice(), skip_span, skip_span);\n             return;\n         }\n \n         // TODO(calebcartwright): consider enabling box_patterns feature gate\n         match (&ai.kind, visitor_kind) {\n             (ast::AssocItemKind::Const(..), AssocTraitItem(_)) => {\n-                self.visit_static(&StaticParts::from_trait_item(&ai))\n+                self.visit_static(&StaticParts::from_trait_item(ai))\n             }\n             (ast::AssocItemKind::Const(..), AssocImplItem(_)) => {\n-                self.visit_static(&StaticParts::from_impl_item(&ai))\n+                self.visit_static(&StaticParts::from_impl_item(ai))\n             }\n             (ast::AssocItemKind::Fn(ref fn_kind), _) => {\n                 let ast::Fn {"}]}