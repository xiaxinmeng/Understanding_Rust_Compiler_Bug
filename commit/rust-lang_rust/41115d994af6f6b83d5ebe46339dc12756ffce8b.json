{"sha": "41115d994af6f6b83d5ebe46339dc12756ffce8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMTE1ZDk5NGFmNmY2YjgzZDVlYmU0NjMzOWRjMTI3NTZmZmNlOGI=", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2020-04-19T18:38:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-19T18:38:07Z"}, "message": "Formatting and naming", "tree": {"sha": "8e4e096090f2cac3c3c795ea95bf06db4129de41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e4e096090f2cac3c3c795ea95bf06db4129de41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41115d994af6f6b83d5ebe46339dc12756ffce8b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJenJqPCRBK7hj4Ov3rIwAAdHIIAGgaBqcL9489GKulgGGc9og+\nTkOR2vB9+c23r4XojHuazjO7MuhKzpgdKiEFXg+rtJGANbu/qMiqARSk5afhm4Td\nap/i4jT6JgOUXeU9qAOmX8VZmwGSjKKiJkjpixnZRY/VNnWpwQvIpz6u29sKCKzm\nEbU/ZdO7Wnx9OmOvY/J7ONkO39Qyp4y0dBKj3aiySCmShs7PgAq3QD9I1YMUuMCm\nQ2l0LYh2dzQjSHmfItZYJrWZ9KIrJL4Im5WGCfiyQydfhlHQUe28G2TVVcRF9qzN\nZv6HLlpu6SmSS4DXPv8wuggJzr2iny5JyezSPvX/u9w6PTZYl0RqYyh8L1YDApc=\n=fhYa\n-----END PGP SIGNATURE-----\n", "payload": "tree 8e4e096090f2cac3c3c795ea95bf06db4129de41\nparent d7f1a1ed2ba5a83ebd9903024308ff96b924e463\nauthor Philipp Krones <hello@philkrones.com> 1587321487 +0200\ncommitter GitHub <noreply@github.com> 1587321487 +0200\n\nFormatting and naming"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41115d994af6f6b83d5ebe46339dc12756ffce8b", "html_url": "https://github.com/rust-lang/rust/commit/41115d994af6f6b83d5ebe46339dc12756ffce8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41115d994af6f6b83d5ebe46339dc12756ffce8b/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7f1a1ed2ba5a83ebd9903024308ff96b924e463", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7f1a1ed2ba5a83ebd9903024308ff96b924e463", "html_url": "https://github.com/rust-lang/rust/commit/d7f1a1ed2ba5a83ebd9903024308ff96b924e463"}], "stats": {"total": 73, "additions": 38, "deletions": 35}, "files": [{"sha": "3bfef6f4bed129bc2756dce58b9dca2bc3e7e938", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41115d994af6f6b83d5ebe46339dc12756ffce8b/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41115d994af6f6b83d5ebe46339dc12756ffce8b/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=41115d994af6f6b83d5ebe46339dc12756ffce8b", "patch": "@@ -50,7 +50,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EmptyEnum {\n                     EMPTY_ENUM,\n                     item.span,\n                     \"enum with no variants\",\n-                    Some(item.span),\n+                    None,\n                     \"consider using the uninhabited type `!` (never type) or a wrapper \\\n                     around it to introduce a type which can't be instantiated\",\n                 );"}, {"sha": "cd65b337980e99b5d1ba8c8030a5dbdbbe9cdcbf", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/41115d994af6f6b83d5ebe46339dc12756ffce8b/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41115d994af6f6b83d5ebe46339dc12756ffce8b/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=41115d994af6f6b83d5ebe46339dc12756ffce8b", "patch": "@@ -2473,34 +2473,37 @@ fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'a, '\n                 match_type(cx, ty, &paths::HASHMAP) {\n                 if method.ident.name == sym!(len) {\n                     let span = shorten_needless_collect_span(expr);\n-                    span_lint_and_sugg(cx,\n+                    span_lint_and_sugg(\n+                        cx,\n                         NEEDLESS_COLLECT,\n                         span,\n                         NEEDLESS_COLLECT_MSG,\n-                            \"replace with\",\n-                            \".count()\".to_string(),\n-                            Applicability::MachineApplicable,\n-                        );\n+                        \"replace with\",\n+                        \".count()\".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n                 }\n                 if method.ident.name == sym!(is_empty) {\n                     let span = shorten_needless_collect_span(expr);\n-                    span_lint_and_sugg(cx,\n+                    span_lint_and_sugg(\n+                        cx,\n                         NEEDLESS_COLLECT,\n                         span,\n                         NEEDLESS_COLLECT_MSG,\n                         \"replace with\",\n                         \".next().is_none()\".to_string(),\n                         Applicability::MachineApplicable,\n-                        );\n+                    );\n                 }\n                 if method.ident.name == sym!(contains) {\n                     let contains_arg = snippet(cx, args[1].span, \"??\");\n                     let span = shorten_needless_collect_span(expr);\n-                    span_lint_and_then(cx,\n+                    span_lint_and_then(\n+                        cx,\n                         NEEDLESS_COLLECT,\n                         span,\n                         NEEDLESS_COLLECT_MSG,\n-                    |db| {\n+                        |db| {\n                             let (arg, pred) = if contains_arg.starts_with('&') {\n                                 (\"x\", &contains_arg[1..])\n                             } else {"}, {"sha": "5c9117d5b81cd6c62de819caa00c87e626fe8b77", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41115d994af6f6b83d5ebe46339dc12756ffce8b/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41115d994af6f6b83d5ebe46339dc12756ffce8b/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=41115d994af6f6b83d5ebe46339dc12756ffce8b", "patch": "@@ -291,7 +291,6 @@ impl EarlyLintPass for Return {\n                     String::new(),\n                     Applicability::MachineApplicable,\n                 );\n-\n             }\n         }\n     }"}, {"sha": "093ef3191088d1afc32c5a239bc00c114fc1b33a", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/41115d994af6f6b83d5ebe46339dc12756ffce8b/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41115d994af6f6b83d5ebe46339dc12756ffce8b/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=41115d994af6f6b83d5ebe46339dc12756ffce8b", "patch": "@@ -70,15 +70,15 @@ pub fn span_lint_and_help<'a, T: LintContext>(\n     help_span: Option<Span>,\n     help: &str,\n ) {\n-    cx.struct_span_lint(lint, span, |ldb| {\n-        let mut db = ldb.build(msg);\n+    cx.struct_span_lint(lint, span, |diag| {\n+        let mut diag = diag.build(msg);\n         if let Some(help_span) = help_span {\n-            db.span_help(help_span, help);\n+            diag.span_help(help_span, help);\n         } else {\n-            db.help(help);\n+            diag.help(help);\n         }\n-        docs_link(&mut db, lint);\n-        db.emit();\n+        docs_link(&mut diag, lint);\n+        diag.emit();\n     });\n }\n \n@@ -111,12 +111,12 @@ pub fn span_lint_and_note<'a, T: LintContext>(\n     note_span: Option<Span>,\n     note: &str,\n ) {\n-    cx.struct_span_lint(lint, span, |ldb| {\n-        let mut db = ldb.build(msg);\n+    cx.struct_span_lint(lint, span, |diag| {\n+        let mut diag = diag.build(msg);\n         if let Some(note_span) = note_span {\n-            db.span_note(note_span, note);\n+            diag.span_note(note_span, note);\n         } else {\n-            db.note(note);\n+            diag.note(note);\n         }\n         docs_link(&mut diag, lint);\n         diag.emit();"}, {"sha": "ed90905ce32b8b8351b45d58fd5fa940bdcc9570", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/41115d994af6f6b83d5ebe46339dc12756ffce8b/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41115d994af6f6b83d5ebe46339dc12756ffce8b/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=41115d994af6f6b83d5ebe46339dc12756ffce8b", "patch": "@@ -163,25 +163,25 @@ declare_clippy_lint! {\n     /// *Example:**\n     /// Bad:\n     /// ```rust,ignore\n-    /// span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n-    ///     db.span_suggestion(\n+    /// span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |diag| {\n+    ///     diag.span_suggestion(\n     ///         expr.span,\n     ///         help_msg,\n     ///         sugg.to_string(),\n     ///         Applicability::MachineApplicable,\n     ///     );\n     /// });\n-    /// span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n-    ///     db.span_help(expr.span, help_msg);\n+    /// span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |diag| {\n+    ///     diag.span_help(expr.span, help_msg);\n     /// });\n-    /// span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n-    ///     db.help(help_msg);\n+    /// span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |diag| {\n+    ///     diag.help(help_msg);\n     /// });\n-    /// span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n-    ///     db.span_note(expr.span, note_msg);\n+    /// span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |diag| {\n+    ///     diag.span_note(expr.span, note_msg);\n     /// });\n-    /// span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n-    ///     db.note(note_msg);\n+    /// span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |diag| {\n+    ///     diag.note(note_msg);\n     /// });\n     /// ```\n     ///\n@@ -258,9 +258,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n                 if_chain! {\n                     if let ExprKind::AddrOf(_, _, ref inner_exp) = expr.kind;\n                     if let ExprKind::Struct(_, ref fields, _) = inner_exp.kind;\n-                    let field = fields.iter()\n-                    .find(|f| f.ident.as_str() == \"desc\")\n-                    .expect(\"lints must have a description field\");\n+                    let field = fields\n+                        .iter()\n+                        .find(|f| f.ident.as_str() == \"desc\")\n+                        .expect(\"lints must have a description field\");\n                     if let ExprKind::Lit(Spanned {\n                         node: LitKind::Str(ref sym, _),\n                         ..\n@@ -396,7 +397,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CompilerLintFunctions {\n             if let Some(sugg) = self.map.get(&*fn_name.as_str());\n             let ty = walk_ptrs_ty(cx.tables.expr_ty(&args[0]));\n             if match_type(cx, ty, &paths::EARLY_CONTEXT)\n-            || match_type(cx, ty, &paths::LATE_CONTEXT);\n+                || match_type(cx, ty, &paths::LATE_CONTEXT);\n             then {\n                 span_lint_and_help(\n                     cx,"}]}