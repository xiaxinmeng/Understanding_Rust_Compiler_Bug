{"sha": "3e6b03c2d87a1f54bfde2ea82b1f85aa4df04909", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNmIwM2MyZDg3YTFmNTRiZmRlMmVhODJiMWY4NWFhNGRmMDQ5MDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-27T19:44:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-27T19:44:22Z"}, "message": "Auto merge of #27230 - GuillaumeGomez:patch-1, r=brson\n\nPart of #24407.\r\ncc @Manishearth", "tree": {"sha": "4abee7223c01f330e04cff4a177f476f907fed9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4abee7223c01f330e04cff4a177f476f907fed9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e6b03c2d87a1f54bfde2ea82b1f85aa4df04909", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e6b03c2d87a1f54bfde2ea82b1f85aa4df04909", "html_url": "https://github.com/rust-lang/rust/commit/3e6b03c2d87a1f54bfde2ea82b1f85aa4df04909", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e6b03c2d87a1f54bfde2ea82b1f85aa4df04909/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbda6f9cca931f772de1985114d442729c80914b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbda6f9cca931f772de1985114d442729c80914b", "html_url": "https://github.com/rust-lang/rust/commit/bbda6f9cca931f772de1985114d442729c80914b"}, {"sha": "fc65f5551d00b4a83192cc054b6294cf855ba748", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc65f5551d00b4a83192cc054b6294cf855ba748", "html_url": "https://github.com/rust-lang/rust/commit/fc65f5551d00b4a83192cc054b6294cf855ba748"}], "stats": {"total": 165, "additions": 156, "deletions": 9}, "files": [{"sha": "5ddc2547fd9cba42fdf02acdfeea3fa86f5d3c75", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 156, "deletions": 9, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b03c2d87a1f54bfde2ea82b1f85aa4df04909/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b03c2d87a1f54bfde2ea82b1f85aa4df04909/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=3e6b03c2d87a1f54bfde2ea82b1f85aa4df04909", "patch": "@@ -397,6 +397,115 @@ impl Bar {\n ```\n \"##,\n \n+E0417: r##\"\n+A static variable was referenced in a pattern. Example of erroneous code:\n+\n+```\n+static FOO : i32 = 0;\n+\n+match 0 {\n+    FOO => {} // error: static variables cannot be referenced in a\n+              //        pattern, use a `const` instead\n+    _ => {}\n+}\n+```\n+\n+The compiler needs to know the value of the pattern at compile time;\n+compile-time patterns can defined via const or enum items. Please verify\n+that the identifier is spelled correctly, and if so, use a const instead\n+of static to define it. Example:\n+\n+```\n+const FOO : i32 = 0;\n+\n+match 0 {\n+    FOO => {} // ok!\n+    _ => {}\n+}\n+```\n+\"##,\n+\n+E0424: r##\"\n+The `self` keyword was used in a static method. Example of erroneous code:\n+\n+```\n+struct Foo;\n+\n+impl Foo {\n+    fn bar(self) {}\n+\n+    fn foo() {\n+        self.bar(); // error: `self` is not available in a static method.\n+    }\n+}\n+```\n+\n+Please check if the method's argument list should have contained `self`,\n+`&self`, or `&mut self` (in case you didn't want to create a static\n+method), and add it if so. Example:\n+\n+```\n+struct Foo;\n+\n+impl Foo {\n+    fn bar(self) {}\n+\n+    fn foo(self) {\n+        self.bar(); // ok!\n+    }\n+}\n+```\n+\"##,\n+\n+E0425: r##\"\n+An unresolved name was used. Example of erroneous codes:\n+\n+```\n+something_that_doesnt_exist::foo;\n+// error: unresolved name `something_that_doesnt_exist::foo`\n+\n+// or:\n+trait Foo {\n+    fn bar() {\n+        Self; // error: unresolved name `Self`\n+    }\n+}\n+```\n+\n+Please verify you didn't misspell the name or that you're not using an\n+invalid object. Example:\n+\n+```\n+enum something_that_does_exist {\n+    foo\n+}\n+// or:\n+mod something_that_does_exist {\n+    pub static foo : i32 = 0i32;\n+}\n+\n+something_that_does_exist::foo; // ok!\n+```\n+\"##,\n+\n+E0426: r##\"\n+An undeclared label was used. Example of erroneous code:\n+\n+```\n+loop {\n+    break 'a; // error: use of undeclared label `'a`\n+}\n+```\n+\n+Please verify you spelt or declare the label correctly. Example:\n+\n+```\n+'a: loop {\n+    break 'a; // ok!\n+}\n+```\n+\"##,\n+\n E0428: r##\"\n A type or module has been defined more than once. Example of erroneous\n code:\n@@ -415,6 +524,53 @@ struct Bar2; // ok!\n ```\n \"##,\n \n+E0430: r##\"\n+The `self` import appears more than once in the list. Erroneous code example:\n+\n+```\n+use something::{self, self}; // error: `self` import can only appear once in\n+                             //        the list\n+```\n+\n+Please verify you didn't misspell the import name or remove the duplicated\n+`self` import. Example:\n+\n+```\n+use something::self; // ok!\n+```\n+\"##,\n+\n+E0431: r##\"\n+`self` import was made. Erroneous code example:\n+\n+```\n+use {self}; // error: `self` import can only appear in an import list with a\n+            //        non-empty prefix\n+```\n+\n+You cannot import the current module into itself, please remove this import\n+or verify you didn't misspell it.\n+\"##,\n+\n+E0432: r##\"\n+An import was unresolved. Erroneous code example:\n+\n+```\n+use something::Foo; // error: unresolved import `something::Foo`.\n+```\n+\n+Please verify you didn't misspell the import name or the import does exist\n+in the module from where you tried to import it. Example:\n+\n+```\n+use something::Foo; // ok!\n+\n+mod something {\n+    pub struct Foo;\n+}\n+```\n+\"##,\n+\n E0433: r##\"\n Invalid import. Example of erroneous code:\n \n@@ -499,24 +655,15 @@ register_diagnostics! {\n     E0414, // only irrefutable patterns allowed here\n     E0415, // identifier is bound more than once in this parameter list\n     E0416, // identifier is bound more than once in the same pattern\n-    E0417, // static variables cannot be referenced in a pattern, use a\n-           // `const` instead\n     E0418, // is not an enum variant, struct or const\n     E0419, // unresolved enum variant, struct or const\n     E0420, // is not an associated const\n     E0421, // unresolved associated const\n     E0422, // does not name a structure\n     E0423, // is a struct variant name, but this expression uses it like a\n            // function name\n-    E0424, // `self` is not available in a static method.\n-    E0425, // unresolved name\n-    E0426, // use of undeclared label\n     E0427, // cannot use `ref` binding mode with ...\n     E0429, // `self` imports are only allowed within a { } list\n-    E0430, // `self` import can only appear once in the list\n-    E0431, // `self` import can only appear in an import list with a non-empty\n-           // prefix\n-    E0432, // unresolved import\n     E0434, // can't capture dynamic environment in a fn item\n     E0435, // attempt to use a non-constant value in a constant\n }"}]}