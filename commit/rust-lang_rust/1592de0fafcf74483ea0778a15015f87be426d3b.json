{"sha": "1592de0fafcf74483ea0778a15015f87be426d3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1OTJkZTBmYWZjZjc0NDgzZWEwNzc4YTE1MDE1Zjg3YmU0MjZkM2I=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-10T17:51:15Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-10T21:31:06Z"}, "message": "replace lambda with fn@", "tree": {"sha": "3aa9aa6c47c6e9799e54846a8fad4913e9488ec3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aa9aa6c47c6e9799e54846a8fad4913e9488ec3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1592de0fafcf74483ea0778a15015f87be426d3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1592de0fafcf74483ea0778a15015f87be426d3b", "html_url": "https://github.com/rust-lang/rust/commit/1592de0fafcf74483ea0778a15015f87be426d3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1592de0fafcf74483ea0778a15015f87be426d3b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b911587dfed1cc1973b361865c3632a2e2cffde", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b911587dfed1cc1973b361865c3632a2e2cffde", "html_url": "https://github.com/rust-lang/rust/commit/8b911587dfed1cc1973b361865c3632a2e2cffde"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "8578556b28e080a59232c4443211dc9d0e762d04", "filename": "src/comp/middle/freevars.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1592de0fafcf74483ea0778a15015f87be426d3b/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1592de0fafcf74483ea0778a15015f87be426d3b/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffreevars.rs?ref=1592de0fafcf74483ea0778a15015f87be426d3b", "patch": "@@ -36,8 +36,7 @@ fn collect_freevars(def_map: resolve::def_map, blk: ast::blk)\n \n     fn ignore_item(_i: @ast::item, &&_depth: int, _v: visit::vt<int>) { }\n \n-    let walk_expr =\n-        fn@ (expr: @ast::expr, &&depth: int, v: visit::vt<int>) {\n+    let walk_expr = fn@(expr: @ast::expr, &&depth: int, v: visit::vt<int>) {\n             alt expr.node {\n               ast::expr_fn(proto, decl, _, captures) {\n                 if proto != ast::proto_bare {\n@@ -89,8 +88,8 @@ fn annotate_freevars(def_map: resolve::def_map, crate: @ast::crate) ->\n    freevar_map {\n     let freevars = new_int_hash();\n \n-    let walk_fn = fn@ (_fk: visit::fn_kind, _decl: ast::fn_decl,\n-                          blk: ast::blk, _sp: span, nid: ast::node_id) {\n+    let walk_fn = fn@(_fk: visit::fn_kind, _decl: ast::fn_decl,\n+                      blk: ast::blk, _sp: span, nid: ast::node_id) {\n         let vars = collect_freevars(def_map, blk);\n         freevars.insert(nid, vars);\n     };"}, {"sha": "398d47469f4b284b802b84599bd5117b68072f0a", "filename": "src/comp/middle/trans_closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1592de0fafcf74483ea0778a15015f87be426d3b/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1592de0fafcf74483ea0778a15015f87be426d3b/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs?ref=1592de0fafcf74483ea0778a15015f87be426d3b", "patch": "@@ -209,8 +209,8 @@ fn allocate_cbox(bcx: @block_ctxt,\n     let ccx = bcx_ccx(bcx);\n \n     let alloc_in_heap = fn@(bcx: @block_ctxt,\n-                               xchgheap: bool,\n-                               &temp_cleanups: [ValueRef])\n+                            xchgheap: bool,\n+                            &temp_cleanups: [ValueRef])\n         -> (@block_ctxt, ValueRef) {\n \n         // n.b. If you are wondering why we don't use"}, {"sha": "be926322f647b502fa1e499d66706b590c8fff05", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1592de0fafcf74483ea0778a15015f87be426d3b/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1592de0fafcf74483ea0778a15015f87be426d3b/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=1592de0fafcf74483ea0778a15015f87be426d3b", "patch": "@@ -1172,9 +1172,8 @@ fn gather_locals(ccx: @crate_ctxt,\n         };\n     let tcx = ccx.tcx;\n \n-    let next_var_id = fn@ () -> int { let rv = *nvi; *nvi += 1; ret rv; };\n-    let assign =\n-        fn@ (nid: ast::node_id, ty_opt: option::t<ty::t>) {\n+    let next_var_id = fn@() -> int { let rv = *nvi; *nvi += 1; ret rv; };\n+    let assign = fn@(nid: ast::node_id, ty_opt: option::t<ty::t>) {\n             let var_id = next_var_id();\n             locals.insert(nid, var_id);\n             alt ty_opt {\n@@ -1205,16 +1204,14 @@ fn gather_locals(ccx: @crate_ctxt,\n     }\n \n     // Add explicitly-declared locals.\n-    let visit_local =\n-        fn@ (local: @ast::local, &&e: (), v: visit::vt<()>) {\n+    let visit_local = fn@(local: @ast::local, &&e: (), v: visit::vt<()>) {\n             let local_ty = ast_ty_to_ty_crate_infer(ccx, local.node.ty);\n             assign(local.node.id, local_ty);\n             visit::visit_local(local, e, v);\n         };\n \n     // Add pattern bindings.\n-    let visit_pat =\n-        fn@ (p: @ast::pat, &&e: (), v: visit::vt<()>) {\n+    let visit_pat = fn@(p: @ast::pat, &&e: (), v: visit::vt<()>) {\n             alt p.node {\n               ast::pat_bind(_, _) { assign(p.id, none); }\n               _ {/* no-op */ }\n@@ -1725,8 +1722,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         // functions. This is so that we have more information about the types\n         // of arguments when we typecheck the functions. This isn't really the\n         // right way to do this.\n-        let check_args =\n-            fn@ (check_blocks: bool) -> bool {\n+        let check_args = fn@(check_blocks: bool) -> bool {\n                 let i = 0u;\n                 let bot = false;\n                 for a_opt: option::t<@ast::expr> in args {"}, {"sha": "2025d8312c4790afe86e68907c025196612dd91a", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1592de0fafcf74483ea0778a15015f87be426d3b/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1592de0fafcf74483ea0778a15015f87be426d3b/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=1592de0fafcf74483ea0778a15015f87be426d3b", "patch": "@@ -168,7 +168,7 @@ fn bad_expr_word_table() -> hashmap<str, ()> {\n     let words = new_str_hash();\n     for word in [\"mod\", \"if\", \"else\", \"while\", \"do\", \"alt\", \"for\", \"break\",\n                  \"cont\", \"ret\", \"be\", \"fail\", \"type\", \"resource\", \"check\",\n-                 \"assert\", \"claim\", \"native\", \"fn\", \"fn@\", \"pure\",\n+                 \"assert\", \"claim\", \"native\", \"fn\", \"pure\",\n                  \"unsafe\", \"block\", \"import\", \"export\", \"let\", \"const\",\n                  \"log\", \"tag\", \"obj\", \"copy\", \"sendfn\", \"impl\", \"iface\"] {\n         words.insert(word, ());\n@@ -515,8 +515,10 @@ fn parse_ty(p: parser, colons_before_params: bool) -> @ast::ty {\n     } else if eat_word(p, \"block\") {\n         t = parse_ty_fn(ast::proto_block, p);\n     } else if eat_word(p, \"lambda\") {\n+        //(breaks prettyprinting!) p.warn(\"lambda is deprecated, use fn@\");\n         t = parse_ty_fn(ast::proto_box, p);\n     } else if eat_word(p, \"sendfn\") {\n+        //(breaks prettyprinting!) p.warn(\"sendfn is deprecated, use fn~\");\n         t = parse_ty_fn(ast::proto_uniq, p);\n     } else if eat_word(p, \"obj\") {\n         t = ast::ty_obj(parse_ty_methods(p, false));\n@@ -822,8 +824,10 @@ fn parse_bottom_expr(p: parser) -> pexpr {\n     } else if eat_word(p, \"block\") {\n         ret pexpr(parse_fn_expr(p, ast::proto_block));\n     } else if eat_word(p, \"lambda\") {\n+        //(breaks prettyprinting!) p.warn(\"lambda is deprecated, use fn@\");\n         ret pexpr(parse_fn_expr(p, ast::proto_box));\n     } else if eat_word(p, \"sendfn\") {\n+        //(breaks prettyprinting!) p.warn(\"sendfn is deprecated, use fn~\");\n         ret pexpr(parse_fn_expr(p, ast::proto_uniq));\n     } else if eat_word(p, \"unchecked\") {\n         ret pexpr(parse_block_expr(p, lo, ast::unchecked_blk));"}]}