{"sha": "d3f981b144c742c3e886a6234002a716a177bc98", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZjk4MWIxNDRjNzQyYzNlODg2YTYyMzQwMDJhNzE2YTE3N2JjOTg=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-09-15T10:03:03Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-09-15T11:27:34Z"}, "message": "Move is_const_fn to under TyCtxt", "tree": {"sha": "85bdca64b363c73c14835de7270306322031da88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85bdca64b363c73c14835de7270306322031da88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3f981b144c742c3e886a6234002a716a177bc98", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmFB2KgACgkQAn35M4hi\nrd2BsA//Y92nIJyS5BXY0v8gTxrlANzvygyuxCB+5spwnPQa1Lrovd28DH8tdWTO\n3JLVH+8DjfyaSVG4/wzhrDffOl/R++YwmkDGLaCU2GsaDka4oakEpfJPj3TWt3JR\ndRH6yDZ9SoO+d/5C3e11SgeKt5xxO05hwI6hA9oc4XzZp7BNbO8FJ/kVIe6rKYht\n4XgUtwbYHUIEseY0bXLeqT5BdqcIsSgLzDuNLvn3UI/TLjne0Nzu723/T2NECqwV\nFvMUlavd+SJPOOJ7Dbgnih/2kDYB50PNI3+BBaAOaHYhHOhjKS49Ab8+2n2bYBZ1\n4BKEjf2hIi4sCO2GEJyvKCVhBYDaeJqR1JLX11K2TkMYMPkh+1CArsb5G0DErz+K\nLxC1sx+cnk4pLW4URSLvaL06eXBPCQpNuX8BU0/k7cFfbktl+mA2Y9nApMV/uzcz\nPwihdnUJ0/oabVSfAhmPVUcG1Jx9Xo+8OYQ6dNkCd4pSrjVWUGT/PHDCqx/a/plf\ndJ/tKgwLzO/TT1o46o+5vjC7SSoICEMPLVznOOPd2WL/K8+XqizmsD5CQGaSfZ/r\nnb0JJ910DKXlP6p2gIJbAzHoGXaxs6T+OgSFxtXmzF9P87bFBCQWfalNPhYkr0Ef\n93gFeGsmn3CxUmqWPObGZKuUfMBZn93FM64PNX5jwfz374LCbgk=\n=Irgw\n-----END PGP SIGNATURE-----", "payload": "tree 85bdca64b363c73c14835de7270306322031da88\nparent cdeba02ff71416e014f7130f75166890688be986\nauthor Deadbeef <ent3rm4n@gmail.com> 1631700183 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1631705254 +0000\n\nMove is_const_fn to under TyCtxt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f981b144c742c3e886a6234002a716a177bc98", "html_url": "https://github.com/rust-lang/rust/commit/d3f981b144c742c3e886a6234002a716a177bc98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3f981b144c742c3e886a6234002a716a177bc98/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdeba02ff71416e014f7130f75166890688be986", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdeba02ff71416e014f7130f75166890688be986", "html_url": "https://github.com/rust-lang/rust/commit/cdeba02ff71416e014f7130f75166890688be986"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "df4cc295fac5f420eb97061786f51e8e6cd509de", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d3f981b144c742c3e886a6234002a716a177bc98/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f981b144c742c3e886a6234002a716a177bc98/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=d3f981b144c742c3e886a6234002a716a177bc98", "patch": "@@ -6,23 +6,6 @@ use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::abi::Abi;\n \n-/// Whether the `def_id` counts as const fn in your current crate, considering all active\n-/// feature gates\n-pub fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    tcx.is_const_fn_raw(def_id)\n-        && match is_unstable_const_fn(tcx, def_id) {\n-            Some(feature_name) => {\n-                // has a `rustc_const_unstable` attribute, check whether the user enabled the\n-                // corresponding feature gate.\n-                tcx.features().declared_lib_features.iter().any(|&(sym, _)| sym == feature_name)\n-            }\n-            // functions without const stability are either stable user written\n-            // const fn or the user is using feature gates and we thus don't\n-            // care what they do\n-            None => true,\n-        }\n-}\n-\n /// Whether the `def_id` is an unstable const fn and what feature gate is necessary to enable it\n pub fn is_unstable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Symbol> {\n     if tcx.is_const_fn_raw(def_id) {\n@@ -77,7 +60,7 @@ fn is_const_fn_raw(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n }\n \n fn is_promotable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    is_const_fn(tcx, def_id)\n+    tcx.is_const_fn(def_id)\n         && match tcx.lookup_const_stability(def_id) {\n             Some(stab) => {\n                 if cfg!(debug_assertions) && stab.promotable {"}, {"sha": "35c6ae201037a15371de549a643eb316846af52d", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3f981b144c742c3e886a6234002a716a177bc98/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f981b144c742c3e886a6234002a716a177bc98/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=d3f981b144c742c3e886a6234002a716a177bc98", "patch": "@@ -26,7 +26,6 @@ use rustc_index::vec::{Idx, IndexVec};\n use std::cell::Cell;\n use std::{cmp, iter, mem};\n \n-use crate::const_eval::{is_const_fn, is_unstable_const_fn};\n use crate::transform::check_consts::{is_lang_panic_fn, qualifs, ConstCx};\n use crate::transform::MirPass;\n \n@@ -656,8 +655,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n \n         let is_const_fn = match *fn_ty.kind() {\n             ty::FnDef(def_id, _) => {\n-                is_const_fn(self.tcx, def_id)\n-                    || is_unstable_const_fn(self.tcx, def_id).is_some()\n+                self.tcx.is_const_fn_raw(def_id)\n                     || is_lang_panic_fn(self.tcx, def_id)\n             }\n             _ => false,\n@@ -1079,7 +1077,7 @@ pub fn is_const_fn_in_array_repeat_expression<'tcx>(\n                 if let ty::FnDef(def_id, _) = *literal.ty().kind() {\n                     if let Some((destination_place, _)) = destination {\n                         if destination_place == place {\n-                            if is_const_fn(ccx.tcx, def_id) {\n+                            if ccx.tcx.is_const_fn(def_id) {\n                                 return true;\n                             }\n                         }"}, {"sha": "2521b34a6b94ee993305fc0dd04978fc7e56fe04", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d3f981b144c742c3e886a6234002a716a177bc98/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f981b144c742c3e886a6234002a716a177bc98/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=d3f981b144c742c3e886a6234002a716a177bc98", "patch": "@@ -2741,6 +2741,26 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {\n         self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))\n     }\n+\n+    /// Whether the `def_id` counts as const fn in the current crate, considering all active\n+    /// feature gates\n+    pub fn is_const_fn(self, def_id: DefId) -> bool {\n+        if self.is_const_fn_raw(def_id) {\n+            match self.lookup_const_stability(def_id) {\n+                Some(stability) if stability.level.is_unstable() => {\n+                    // has a `rustc_const_unstable` attribute, check whether the user enabled the\n+                    // corresponding feature gate.\n+                    self.features().declared_lib_features.iter().any(|&(sym, _)| sym == stability.feature)\n+                }\n+                // functions without const stability are either stable user written\n+                // const fn or the user is using feature gates and we thus don't\n+                // care what they do\n+                _ => true,\n+            }\n+        } else {\n+            false\n+        }\n+    }\n }\n \n impl TyCtxtAt<'tcx> {"}, {"sha": "ae7e818f106a6ddb0cf412fe7e96e2381bc5308e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f981b144c742c3e886a6234002a716a177bc98/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f981b144c742c3e886a6234002a716a177bc98/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d3f981b144c742c3e886a6234002a716a177bc98", "patch": "@@ -11,7 +11,7 @@ crate mod utils;\n \n use rustc_ast as ast;\n use rustc_attr as attr;\n-use rustc_const_eval::const_eval::{is_const_fn, is_unstable_const_fn};\n+use rustc_const_eval::const_eval::is_unstable_const_fn;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n@@ -787,7 +787,7 @@ fn clean_fn_or_proc_macro(\n             let mut func = (sig, generics, body_id).clean(cx);\n             let def_id = item.def_id.to_def_id();\n             func.header.constness =\n-                if is_const_fn(cx.tcx, def_id) && is_unstable_const_fn(cx.tcx, def_id).is_none() {\n+                if cx.tcx.is_const_fn(def_id) && is_unstable_const_fn(cx.tcx, def_id).is_none() {\n                     hir::Constness::Const\n                 } else {\n                     hir::Constness::NotConst"}, {"sha": "beddc6f09be810772babeacf95c051a040e9e6b4", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3f981b144c742c3e886a6234002a716a177bc98/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f981b144c742c3e886a6234002a716a177bc98/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=d3f981b144c742c3e886a6234002a716a177bc98", "patch": "@@ -18,7 +18,6 @@\n extern crate rustc_ast;\n extern crate rustc_ast_pretty;\n extern crate rustc_attr;\n-extern crate rustc_const_eval;\n extern crate rustc_data_structures;\n extern crate rustc_errors;\n extern crate rustc_hir;"}, {"sha": "67dda33e9daaf4a0f515d2db3b1e28903b708237", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f981b144c742c3e886a6234002a716a177bc98/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f981b144c742c3e886a6234002a716a177bc98/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=d3f981b144c742c3e886a6234002a716a177bc98", "patch": "@@ -364,7 +364,7 @@ fn check_terminator(\n }\n \n fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<&RustcVersion>) -> bool {\n-    rustc_const_eval::const_eval::is_const_fn(tcx, def_id)\n+    tcx.is_const_fn(def_id)\n         && tcx.lookup_const_stability(def_id).map_or(true, |const_stab| {\n             if let rustc_attr::StabilityLevel::Stable { since } = const_stab.level {\n                 // Checking MSRV is manually necessary because `rustc` has no such concept. This entire"}]}