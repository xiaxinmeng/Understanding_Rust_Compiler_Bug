{"sha": "14546cd5010b57735a76e1fa420405cb36092963", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NTQ2Y2Q1MDEwYjU3NzM1YTc2ZTFmYTQyMDQwNWNiMzYwOTI5NjM=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-08-01T08:13:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-01T08:13:06Z"}, "message": "Rollup merge of #52907 - pnkfelix:issue-52877-original-source-should-precede-suggestions, r=petrochenkov\n\nNLL: On \"cannot move out of type\" error, print original before rewrite\n\nNLL: On \"cannot move out of type\" error, print original source before rewrite.\n\n * Arguably this change is sometimes injecting noise into the output  (namely in the cases where the suggested rewrite is inline with the   suggestion and we end up highlighting the original source code).   I would not be opposed to something more aggressive/dynamic, like   revising the suggestion code to automatically print the original  source when necessary (e.g. when the error does not have a span   that includes the span of the suggestion).\n\n * Also, as another note on this change: The doc comment for `Diagnostic::span_suggestion`  says:\n```rust\n    /// The message\n    ///\n    /// * should not end in any punctuation (a `:` is added automatically)\n    /// * should not be a question\n    /// * should not contain any parts like \"the following\", \"as shown\"\n```\n  *  but the `:` is *not* added when the emitted line appears  out-of-line relative to the suggestion. I find that to be an  unfortunate UI experience.\n\n----\n\nAs a drive-by fix, also changed code to combine multiple suggestions for a pattern into a single multipart suggestion (which vastly improves user experience IMO).\n\n----\n\nIncludes the updates to expected NLL diagnostics.\n\nFix #52877", "tree": {"sha": "05851b759f93030348e7d0e47c3955c64747865e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05851b759f93030348e7d0e47c3955c64747865e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14546cd5010b57735a76e1fa420405cb36092963", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbYWuSCRBK7hj4Ov3rIwAAdHIIAEwl9hoWfAZwtAbCO0h2Af9/\npI08jRcWwySznFaE9/q/ZGc2Z/2VyIHKqmhazvYe52eDWjs6OgzLeYW4y1+XrO7n\n9OvN9ioCIvdLd5Jt/ZTEPH5auLcBTgrZjpbiyRvt2tCYiq4bWbz4XygKJF6iXGAV\nKCyIHlZC/1FeSg+dK1+zKMlKAGskyFwm9J2Z3fsZi2Es0POZoOiss34zb7Fjy/OB\nzEfoCOFpSNfHhP7jjVu0MPgny9NflUv8dduGxG3IWMZCtPafmjkr8TbBgwdhmjz3\nG9COie5lD3AGb5DX0Kb5ZxDrEnu2u3d9naS21n9trpNTStyj7l7tGSQdczGAgPk=\n=0H7B\n-----END PGP SIGNATURE-----\n", "payload": "tree 05851b759f93030348e7d0e47c3955c64747865e\nparent ac2b3c37123ef4407ccf50888e1cc21dbbac7e57\nparent a5a3f765eb36aee69bfdaba1f82760973b63c780\nauthor Pietro Albini <pietro@pietroalbini.org> 1533111186 +0200\ncommitter GitHub <noreply@github.com> 1533111186 +0200\n\nRollup merge of #52907 - pnkfelix:issue-52877-original-source-should-precede-suggestions, r=petrochenkov\n\nNLL: On \"cannot move out of type\" error, print original before rewrite\n\nNLL: On \"cannot move out of type\" error, print original source before rewrite.\n\n * Arguably this change is sometimes injecting noise into the output  (namely in the cases where the suggested rewrite is inline with the   suggestion and we end up highlighting the original source code).   I would not be opposed to something more aggressive/dynamic, like   revising the suggestion code to automatically print the original  source when necessary (e.g. when the error does not have a span   that includes the span of the suggestion).\n\n * Also, as another note on this change: The doc comment for `Diagnostic::span_suggestion`  says:\n```rust\n    /// The message\n    ///\n    /// * should not end in any punctuation (a `:` is added automatically)\n    /// * should not be a question\n    /// * should not contain any parts like \"the following\", \"as shown\"\n```\n  *  but the `:` is *not* added when the emitted line appears  out-of-line relative to the suggestion. I find that to be an  unfortunate UI experience.\n\n----\n\nAs a drive-by fix, also changed code to combine multiple suggestions for a pattern into a single multipart suggestion (which vastly improves user experience IMO).\n\n----\n\nIncludes the updates to expected NLL diagnostics.\n\nFix #52877\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14546cd5010b57735a76e1fa420405cb36092963", "html_url": "https://github.com/rust-lang/rust/commit/14546cd5010b57735a76e1fa420405cb36092963", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14546cd5010b57735a76e1fa420405cb36092963/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac2b3c37123ef4407ccf50888e1cc21dbbac7e57", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac2b3c37123ef4407ccf50888e1cc21dbbac7e57", "html_url": "https://github.com/rust-lang/rust/commit/ac2b3c37123ef4407ccf50888e1cc21dbbac7e57"}, {"sha": "a5a3f765eb36aee69bfdaba1f82760973b63c780", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5a3f765eb36aee69bfdaba1f82760973b63c780", "html_url": "https://github.com/rust-lang/rust/commit/a5a3f765eb36aee69bfdaba1f82760973b63c780"}], "stats": {"total": 130, "additions": 86, "deletions": 44}, "files": [{"sha": "4d988fef450b8a527f5a5e341dca51b9a62e779d", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/14546cd5010b57735a76e1fa420405cb36092963/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14546cd5010b57735a76e1fa420405cb36092963/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=14546cd5010b57735a76e1fa420405cb36092963", "patch": "@@ -341,7 +341,8 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 // another match arm\n                 binds_to.sort();\n                 binds_to.dedup();\n-                for local in binds_to {\n+                let mut multipart_suggestion = Vec::with_capacity(binds_to.len());\n+                for (j, local) in binds_to.into_iter().enumerate() {\n                     let bind_to = &self.mir.local_decls[local];\n                     let binding_span = bind_to.source_info.span;\n \n@@ -350,13 +351,15 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                         Mutability::Not => \"ref\",\n                         Mutability::Mut => \"ref mut\",\n                     };\n+                    if j == 0 {\n+                        err.span_label(binding_span, format!(\"data moved here\"));\n+                    } else {\n+                        err.span_label(binding_span, format!(\"... and here\"));\n+                    }\n                     match bind_to.name {\n                         Some(name) => {\n-                            err.span_suggestion(\n-                                binding_span,\n-                                \"to prevent move, use ref or ref mut\",\n-                                format!(\"{} {:?}\", ref_kind, name),\n-                            );\n+                            multipart_suggestion.push((binding_span,\n+                                                       format!(\"{} {}\", ref_kind, name)));\n                         }\n                         None => {\n                             err.span_label(\n@@ -366,6 +369,8 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                         }\n                     }\n                 }\n+                err.multipart_suggestion(\"to prevent move, use ref or ref mut\",\n+                                         multipart_suggestion);\n             }\n             // Nothing to suggest.\n             GroupedMoveError::OtherIllegalMove { .. } => (),"}, {"sha": "1b913471924b799a19fbcefa11978ce2bef67d0a", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.nll.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14546cd5010b57735a76e1fa420405cb36092963/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14546cd5010b57735a76e1fa420405cb36092963/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr?ref=14546cd5010b57735a76e1fa420405cb36092963", "patch": "@@ -19,14 +19,16 @@ error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n    |\n LL |     match (S {f: \"foo\".to_string(), g: \"bar\".to_string()}) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n+...\n+LL |             f: _s,\n+   |                -- data moved here\n+LL |             g: _t\n+   |                -- ... and here\n help: to prevent move, use ref or ref mut\n    |\n LL |             f: ref _s,\n-   |                ^^^^^^\n-help: to prevent move, use ref or ref mut\n-   |\n LL |             g: ref _t\n-   |                ^^^^^^\n+   |\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-move-error-with-note.rs:57:11"}, {"sha": "95a7894d532546e1f8dd942b7c11e536c906eb22", "filename": "src/test/ui/borrowck/borrowck-move-out-of-vec-tail.nll.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/14546cd5010b57735a76e1fa420405cb36092963/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14546cd5010b57735a76e1fa420405cb36092963/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr?ref=14546cd5010b57735a76e1fa420405cb36092963", "patch": "@@ -3,14 +3,19 @@ error[E0508]: cannot move out of type `[Foo]`, a non-copy slice\n    |\n LL |             match tail {\n    |                   ^^^^ cannot move out of here\n+LL |                 &[Foo { string: a },\n+   |                                 - data moved here\n+...\n+LL |                   Foo { string: b }] => {\n+   |                                 - ... and here\n help: to prevent move, use ref or ref mut\n    |\n LL |                 &[Foo { string: ref a },\n-   |                                 ^^^^^\n-help: to prevent move, use ref or ref mut\n-   |\n+LL |                 //~^ ERROR cannot move out of type `[Foo]`\n+LL |                 //~| cannot move out\n+LL |                 //~| to prevent move\n LL |                   Foo { string: ref b }] => {\n-   |                                 ^^^^^\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "2779132590e2c00b57e1b06f1a9d372b2af166fd", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.nll.stderr", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/14546cd5010b57735a76e1fa420405cb36092963/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14546cd5010b57735a76e1fa420405cb36092963/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr?ref=14546cd5010b57735a76e1fa420405cb36092963", "patch": "@@ -28,7 +28,10 @@ error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy sli\n LL |     match vec {\n    |           ^^^ cannot move out of here\n LL |         &mut [_a, //~ ERROR cannot move out\n-   |               -- help: to prevent move, use ref or ref mut: `ref _a`\n+   |               --\n+   |               |\n+   |               data moved here\n+   |               help: to prevent move, use ref or ref mut: `ref _a`\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:57:13\n@@ -46,7 +49,10 @@ LL |     match vec {\n    |           ^^^ cannot move out of here\n ...\n LL |          _b] => {}\n-   |          -- help: to prevent move, use ref or ref mut: `ref _b`\n+   |          --\n+   |          |\n+   |          data moved here\n+   |          help: to prevent move, use ref or ref mut: `ref _b`\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:70:13\n@@ -62,18 +68,15 @@ error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy sli\n    |\n LL |     match vec {\n    |           ^^^ cannot move out of here\n+LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n+   |               --  --  -- ... and here\n+   |               |   |\n+   |               |   ... and here\n+   |               data moved here\n help: to prevent move, use ref or ref mut\n    |\n-LL |         &mut [ref _a, _b, _c] => {}  //~ ERROR cannot move out\n-   |               ^^^^^^\n-help: to prevent move, use ref or ref mut\n-   |\n-LL |         &mut [_a, ref _b, _c] => {}  //~ ERROR cannot move out\n-   |                   ^^^^^^\n-help: to prevent move, use ref or ref mut\n-   |\n-LL |         &mut [_a, _b, ref _c] => {}  //~ ERROR cannot move out\n-   |                       ^^^^^^\n+LL |         &mut [ref _a, ref _b, ref _c] => {}  //~ ERROR cannot move out\n+   |               ^^^^^^  ^^^^^^  ^^^^^^\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:82:13"}, {"sha": "20713c3392e8e9c23e0f2cfe66337beee321ede3", "filename": "src/test/ui/borrowck/issue-51415.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14546cd5010b57735a76e1fa420405cb36092963/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14546cd5010b57735a76e1fa420405cb36092963/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.nll.stderr?ref=14546cd5010b57735a76e1fa420405cb36092963", "patch": "@@ -4,6 +4,7 @@ error[E0507]: cannot move out of borrowed content\n LL |     let opt = a.iter().enumerate().find(|(_, &s)| {\n    |                                          ^^^^^-^\n    |                                          |    |\n+   |                                          |    data moved here\n    |                                          |    help: to prevent move, use ref or ref mut: `ref s`\n    |                                          cannot move out of borrowed content\n "}, {"sha": "a1fbcf1430db93b2b4a40c3077ee87db39a4cce9", "filename": "src/test/ui/codemap_tests/overlapping_spans.nll.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14546cd5010b57735a76e1fa420405cb36092963/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14546cd5010b57735a76e1fa420405cb36092963/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_spans.nll.stderr?ref=14546cd5010b57735a76e1fa420405cb36092963", "patch": "@@ -4,7 +4,10 @@ error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n LL |     match (S {f:\"foo\".to_string()}) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n LL |         S {f:_s} => {} //~ ERROR cannot move out\n-   |              -- help: to prevent move, use ref or ref mut: `ref _s`\n+   |              --\n+   |              |\n+   |              data moved here\n+   |              help: to prevent move, use ref or ref mut: `ref _s`\n \n error: aborting due to previous error\n "}, {"sha": "29bda252b9115f180495870e819928142669be9c", "filename": "src/test/ui/issue-12567.nll.stderr", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/14546cd5010b57735a76e1fa420405cb36092963/src%2Ftest%2Fui%2Fissue-12567.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14546cd5010b57735a76e1fa420405cb36092963/src%2Ftest%2Fui%2Fissue-12567.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-12567.nll.stderr?ref=14546cd5010b57735a76e1fa420405cb36092963", "patch": "@@ -3,28 +3,40 @@ error[E0508]: cannot move out of type `[T]`, a non-copy slice\n    |\n LL |     match (l1, l2) {\n    |           ^^^^^^^^ cannot move out of here\n+LL |         (&[], &[]) => println!(\"both empty\"),\n+LL |         (&[], &[hd, ..]) | (&[hd, ..], &[])\n+   |                 -- data moved here\n+...\n+LL |         (&[hd1, ..], &[hd2, ..])\n+   |                        --- ... and here\n help: to prevent move, use ref or ref mut\n    |\n LL |         (&[], &[ref hd, ..]) | (&[hd, ..], &[])\n-   |                 ^^^^^^\n-help: to prevent move, use ref or ref mut\n-   |\n+LL |             => println!(\"one empty\"),\n+LL |         //~^^ ERROR: cannot move out of type `[T]`, a non-copy slice\n+LL |         //~^^^ ERROR: cannot move out of type `[T]`, a non-copy slice\n LL |         (&[hd1, ..], &[ref hd2, ..])\n-   |                        ^^^^^^^\n+   |\n \n error[E0508]: cannot move out of type `[T]`, a non-copy slice\n   --> $DIR/issue-12567.rs:14:11\n    |\n LL |     match (l1, l2) {\n    |           ^^^^^^^^ cannot move out of here\n+LL |         (&[], &[]) => println!(\"both empty\"),\n+LL |         (&[], &[hd, ..]) | (&[hd, ..], &[])\n+   |                 -- data moved here\n+...\n+LL |         (&[hd1, ..], &[hd2, ..])\n+   |            --- ... and here\n help: to prevent move, use ref or ref mut\n    |\n LL |         (&[], &[ref hd, ..]) | (&[hd, ..], &[])\n-   |                 ^^^^^^\n-help: to prevent move, use ref or ref mut\n-   |\n+LL |             => println!(\"one empty\"),\n+LL |         //~^^ ERROR: cannot move out of type `[T]`, a non-copy slice\n+LL |         //~^^^ ERROR: cannot move out of type `[T]`, a non-copy slice\n LL |         (&[ref hd1, ..], &[hd2, ..])\n-   |            ^^^^^^^\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "53d60d3f6d649a4b4ec0b3d9efbc1dc8c14f4ba7", "filename": "src/test/ui/nll/move-errors.stderr", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/14546cd5010b57735a76e1fa420405cb36092963/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14546cd5010b57735a76e1fa420405cb36092963/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr?ref=14546cd5010b57735a76e1fa420405cb36092963", "patch": "@@ -59,6 +59,7 @@ error[E0509]: cannot move out of type `D`, which implements the `Drop` trait\n LL |     let C(D(s)) = c;\n    |             -     ^ cannot move out of here\n    |             |\n+   |             data moved here\n    |             help: to prevent move, use ref or ref mut: `ref s`\n \n error[E0507]: cannot move out of borrowed content\n@@ -88,7 +89,10 @@ LL |     match x {\n    |           ^ cannot move out of here\n ...\n LL |         B::U(D(s)) => (),\n-   |                - help: to prevent move, use ref or ref mut: `ref s`\n+   |                -\n+   |                |\n+   |                data moved here\n+   |                help: to prevent move, use ref or ref mut: `ref s`\n \n error[E0509]: cannot move out of type `D`, which implements the `Drop` trait\n   --> $DIR/move-errors.rs:105:11\n@@ -97,7 +101,10 @@ LL |     match x {\n    |           ^ cannot move out of here\n ...\n LL |         (D(s), &t) => (),\n-   |            - help: to prevent move, use ref or ref mut: `ref s`\n+   |            -\n+   |            |\n+   |            data moved here\n+   |            help: to prevent move, use ref or ref mut: `ref s`\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/move-errors.rs:105:11\n@@ -106,21 +113,25 @@ LL |     match x {\n    |           ^ cannot move out of borrowed content\n ...\n LL |         (D(s), &t) => (),\n-   |                 - help: to prevent move, use ref or ref mut: `ref t`\n+   |                 -\n+   |                 |\n+   |                 data moved here\n+   |                 help: to prevent move, use ref or ref mut: `ref t`\n \n error[E0509]: cannot move out of type `F`, which implements the `Drop` trait\n   --> $DIR/move-errors.rs:115:11\n    |\n LL |     match x {\n    |           ^ cannot move out of here\n+LL |     //~^ ERROR\n+LL |         F(s, mut t) => (),\n+   |           -  ----- ... and here\n+   |           |\n+   |           data moved here\n help: to prevent move, use ref or ref mut\n    |\n-LL |         F(ref s, mut t) => (),\n-   |           ^^^^^\n-help: to prevent move, use ref or ref mut\n-   |\n-LL |         F(s, ref mut t) => (),\n-   |              ^^^^^^^^^\n+LL |         F(ref s, ref mut t) => (),\n+   |           ^^^^^  ^^^^^^^^^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/move-errors.rs:123:11"}]}