{"sha": "50b39b2b65be6f0d3eca29c24abccc8bafffcea5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwYjM5YjJiNjViZTZmMGQzZWNhMjljMjRhYmNjYzhiYWZmZmNlYTU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-02-21T13:21:04Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-02-21T13:21:04Z"}, "message": "Add new rustdoc-gui test suite", "tree": {"sha": "792c00327ba1cd6869a03165b0046207ace2c896", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/792c00327ba1cd6869a03165b0046207ace2c896"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50b39b2b65be6f0d3eca29c24abccc8bafffcea5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50b39b2b65be6f0d3eca29c24abccc8bafffcea5", "html_url": "https://github.com/rust-lang/rust/commit/50b39b2b65be6f0d3eca29c24abccc8bafffcea5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50b39b2b65be6f0d3eca29c24abccc8bafffcea5/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7c23ab933ebc1f205c3b59f4ebc85d40f67d404", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c23ab933ebc1f205c3b59f4ebc85d40f67d404", "html_url": "https://github.com/rust-lang/rust/commit/e7c23ab933ebc1f205c3b59f4ebc85d40f67d404"}], "stats": {"total": 185, "additions": 184, "deletions": 1}, "files": [{"sha": "08f10fbd794aa3c3fe79325cdff3762073840a6b", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50b39b2b65be6f0d3eca29c24abccc8bafffcea5/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b39b2b65be6f0d3eca29c24abccc8bafffcea5/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=50b39b2b65be6f0d3eca29c24abccc8bafffcea5", "patch": "@@ -440,6 +440,7 @@ impl<'a> Builder<'a> {\n                 test::CompiletestTest,\n                 test::RustdocJSStd,\n                 test::RustdocJSNotStd,\n+                test::RustdocGUI,\n                 test::RustdocTheme,\n                 test::RustdocUi,\n                 test::RustdocJson,"}, {"sha": "d50d605d5c695cd24e6bcb5e1277bbc982123029", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50b39b2b65be6f0d3eca29c24abccc8bafffcea5/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b39b2b65be6f0d3eca29c24abccc8bafffcea5/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=50b39b2b65be6f0d3eca29c24abccc8bafffcea5", "patch": "@@ -174,6 +174,7 @@ pub struct Config {\n     pub mandir: Option<PathBuf>,\n     pub codegen_tests: bool,\n     pub nodejs: Option<PathBuf>,\n+    pub npm: Option<PathBuf>,\n     pub gdb: Option<PathBuf>,\n     pub python: Option<PathBuf>,\n     pub cargo_native_static: bool,\n@@ -364,6 +365,7 @@ struct Build {\n     fast_submodules: Option<bool>,\n     gdb: Option<String>,\n     nodejs: Option<String>,\n+    npm: Option<String>,\n     python: Option<String>,\n     locked_deps: Option<bool>,\n     vendor: Option<bool>,\n@@ -654,6 +656,7 @@ impl Config {\n         };\n \n         config.nodejs = build.nodejs.map(PathBuf::from);\n+        config.npm = build.npm.map(PathBuf::from);\n         config.gdb = build.gdb.map(PathBuf::from);\n         config.python = build.python.map(PathBuf::from);\n         set(&mut config.low_priority, build.low_priority);"}, {"sha": "5d708d3b25c12f3e7db7402be58e5b05997554fa", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50b39b2b65be6f0d3eca29c24abccc8bafffcea5/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b39b2b65be6f0d3eca29c24abccc8bafffcea5/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=50b39b2b65be6f0d3eca29c24abccc8bafffcea5", "patch": "@@ -637,6 +637,10 @@ impl Build {\n         self.out.join(&*target.triple).join(\"doc\")\n     }\n \n+    fn test_out(&self, target: TargetSelection) -> PathBuf {\n+        self.out.join(&*target.triple).join(\"test\")\n+    }\n+\n     /// Output directory for all documentation for a target\n     fn compiler_doc_out(&self, target: TargetSelection) -> PathBuf {\n         self.out.join(&*target.triple).join(\"compiler-doc\")"}, {"sha": "ed0cbdf97b0910d716ac83c2d91a0c7ea466dd6f", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50b39b2b65be6f0d3eca29c24abccc8bafffcea5/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b39b2b65be6f0d3eca29c24abccc8bafffcea5/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=50b39b2b65be6f0d3eca29c24abccc8bafffcea5", "patch": "@@ -113,6 +113,13 @@ pub fn check(build: &mut Build) {\n         .or_else(|| cmd_finder.maybe_have(\"node\"))\n         .or_else(|| cmd_finder.maybe_have(\"nodejs\"));\n \n+    build.config.npm = build\n+        .config\n+        .npm\n+        .take()\n+        .map(|p| cmd_finder.must_have(p))\n+        .or_else(|| cmd_finder.maybe_have(\"npm\"));\n+\n     build.config.gdb = build\n         .config\n         .gdb"}, {"sha": "49d56f4cbdfe3ea4f5c046c16dd197b4195ce5e1", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/50b39b2b65be6f0d3eca29c24abccc8bafffcea5/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b39b2b65be6f0d3eca29c24abccc8bafffcea5/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=50b39b2b65be6f0d3eca29c24abccc8bafffcea5", "patch": "@@ -688,6 +688,78 @@ impl Step for RustdocJSNotStd {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct RustdocGUI {\n+    pub target: TargetSelection,\n+    pub compiler: Compiler,\n+}\n+\n+impl Step for RustdocGUI {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/test/rustdoc-gui\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        let compiler = run.builder.compiler(run.builder.top_stage, run.build_triple());\n+        run.builder.ensure(RustdocGUI { target: run.target, compiler });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) {\n+        if let (Some(nodejs), Some(npm)) = (&builder.config.nodejs, &builder.config.npm) {\n+            builder.ensure(compile::Std { compiler: self.compiler, target: self.target });\n+\n+            // The goal here is to check if the necessary packages are installed, and if not, we\n+            // display a warning and move on.\n+            let mut command = Command::new(&npm);\n+            command.arg(\"list\").arg(\"--depth=0\");\n+            let lines = command\n+                .output()\n+                .map(|output| String::from_utf8_lossy(&output.stdout).to_string())\n+                .unwrap_or(String::new());\n+            if !lines.contains(&\" browser-ui-test@\") {\n+                println!(\n+                    \"warning: rustdoc-gui test suite cannot be run because npm `browser-ui-test` \\\n+                     dependency is missing\",\n+                );\n+                println!(\n+                    \"If you want to install the `{0}` dependency, run `npm install {0}`\",\n+                    \"browser-ui-test\",\n+                );\n+                return;\n+            }\n+\n+            let out_dir = builder.test_out(self.target).join(\"rustdoc-gui\");\n+            let mut command = builder.rustdoc_cmd(self.compiler);\n+            command.arg(\"src/test/rustdoc-gui/lib.rs\").arg(\"-o\").arg(&out_dir);\n+            builder.run(&mut command);\n+\n+            for file in fs::read_dir(\"src/test/rustdoc-gui\").unwrap() {\n+                let file = file.unwrap();\n+                let file_path = file.path();\n+                let file_name = file.file_name();\n+\n+                if !file_name.to_str().unwrap().ends_with(\".goml\") {\n+                    continue;\n+                }\n+                let mut command = Command::new(&nodejs);\n+                command\n+                    .arg(\"src/tools/rustdoc-gui/tester.js\")\n+                    .arg(\"--doc-folder\")\n+                    .arg(out_dir.join(\"test_docs\"))\n+                    .arg(\"--test-file\")\n+                    .arg(file_path);\n+                builder.run(&mut command);\n+            }\n+        } else {\n+            builder.info(\"No nodejs found, skipping \\\"src/test/rustdoc-gui\\\" tests\");\n+        }\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Tidy;\n \n@@ -1048,6 +1120,9 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         if let Some(ref nodejs) = builder.config.nodejs {\n             cmd.arg(\"--nodejs\").arg(nodejs);\n         }\n+        if let Some(ref npm) = builder.config.npm {\n+            cmd.arg(\"--npm\").arg(npm);\n+        }\n \n         let mut flags = if is_rustdoc { Vec::new() } else { vec![\"-Crpath\".to_string()] };\n         if !is_rustdoc {"}, {"sha": "99cbcf316a25c95542a9b696d29776922766edd5", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b39b2b65be6f0d3eca29c24abccc8bafffcea5/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b39b2b65be6f0d3eca29c24abccc8bafffcea5/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=50b39b2b65be6f0d3eca29c24abccc8bafffcea5", "patch": "@@ -344,6 +344,8 @@ pub struct Config {\n \n     /// Path to a NodeJS executable. Used for JS doctests, emscripten and WASM tests\n     pub nodejs: Option<String>,\n+    /// Path to a npm executable. Used for rustdoc GUI tests\n+    pub npm: Option<String>,\n }\n \n #[derive(Debug, Clone)]"}, {"sha": "5f263ea87db1804796faf0fb9986f4a372d0fade", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b39b2b65be6f0d3eca29c24abccc8bafffcea5/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b39b2b65be6f0d3eca29c24abccc8bafffcea5/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=50b39b2b65be6f0d3eca29c24abccc8bafffcea5", "patch": "@@ -126,6 +126,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         .reqopt(\"\", \"llvm-components\", \"list of LLVM components built in\", \"LIST\")\n         .optopt(\"\", \"llvm-bin-dir\", \"Path to LLVM's `bin` directory\", \"PATH\")\n         .optopt(\"\", \"nodejs\", \"the name of nodejs\", \"PATH\")\n+        .optopt(\"\", \"npm\", \"the name of npm\", \"PATH\")\n         .optopt(\"\", \"remote-test-client\", \"path to the remote test client\", \"PATH\")\n         .optopt(\n             \"\",\n@@ -264,6 +265,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         linker: matches.opt_str(\"linker\"),\n         llvm_components: matches.opt_str(\"llvm-components\").unwrap(),\n         nodejs: matches.opt_str(\"nodejs\"),\n+        npm: matches.opt_str(\"npm\"),\n     }\n }\n "}, {"sha": "61b21bce10be245b300553c93324d51117bd6c7d", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b39b2b65be6f0d3eca29c24abccc8bafffcea5/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b39b2b65be6f0d3eca29c24abccc8bafffcea5/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=50b39b2b65be6f0d3eca29c24abccc8bafffcea5", "patch": "@@ -1585,7 +1585,7 @@ impl<'test> TestCx<'test> {\n \n         let aux_dir = self.aux_output_dir_name();\n \n-        let rustdoc_path = self.config.rustdoc_path.as_ref().expect(\"--rustdoc-path passed\");\n+        let rustdoc_path = self.config.rustdoc_path.as_ref().expect(\"--rustdoc-path not passed\");\n         let mut rustdoc = Command::new(rustdoc_path);\n \n         rustdoc"}, {"sha": "a67e2455478f88a14a7fb6c794c83f4cb74030c1", "filename": "src/tools/rustdoc-gui/tester.js", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/50b39b2b65be6f0d3eca29c24abccc8bafffcea5/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/50b39b2b65be6f0d3eca29c24abccc8bafffcea5/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=50b39b2b65be6f0d3eca29c24abccc8bafffcea5", "patch": "@@ -0,0 +1,89 @@\n+// This package needs to be install:\n+//\n+// ```\n+// npm install browser-ui-test\n+// ```\n+const path = require('path');\n+const {Options, runTest} = require('browser-ui-test');\n+\n+function showHelp() {\n+    console.log(\"rustdoc-js options:\");\n+    console.log(\"  --doc-folder [PATH]        : location of the generated doc folder\");\n+    console.log(\"  --help                     : show this message then quit\");\n+    console.log(\"  --test-file [PATH]         : location of the JS test file\");\n+}\n+\n+function parseOptions(args) {\n+    var opts = {\n+        \"doc_folder\": \"\",\n+        \"test_file\": \"\",\n+    };\n+    var correspondances = {\n+        \"--doc-folder\": \"doc_folder\",\n+        \"--test-file\": \"test_file\",\n+    };\n+\n+    for (var i = 0; i < args.length; ++i) {\n+        if (args[i] === \"--doc-folder\"\n+            || args[i] === \"--test-file\") {\n+            i += 1;\n+            if (i >= args.length) {\n+                console.log(\"Missing argument after `\" + args[i - 1] + \"` option.\");\n+                return null;\n+            }\n+            opts[correspondances[args[i - 1]]] = args[i];\n+        } else if (args[i] === \"--help\") {\n+            showHelp();\n+            process.exit(0);\n+        } else {\n+            console.log(\"Unknown option `\" + args[i] + \"`.\");\n+            console.log(\"Use `--help` to see the list of options\");\n+            return null;\n+        }\n+    }\n+    if (opts[\"test_file\"].length < 1) {\n+        console.log(\"Missing `--test-file` option.\");\n+    } else if (opts[\"doc_folder\"].length < 1) {\n+        console.log(\"Missing `--doc-folder` option.\");\n+    } else {\n+        return opts;\n+    }\n+    return null;\n+}\n+\n+function checkFile(test_file, opts, loaded, index) {\n+    const test_name = path.basename(test_file, \".js\");\n+\n+    process.stdout.write('Checking \"' + test_name + '\" ... ');\n+    return runChecks(test_file, loaded, index);\n+}\n+\n+function main(argv) {\n+    var opts = parseOptions(argv.slice(2));\n+    if (opts === null) {\n+        process.exit(1);\n+    }\n+\n+    const options = new Options();\n+    try {\n+        // This is more convenient that setting fields one by one.\n+        options.parseArguments([\n+            '--no-screenshot',\n+            \"--variable\", \"DOC_PATH\", opts[\"doc_folder\"],\n+        ]);\n+    } catch (error) {\n+        console.error(`invalid argument: ${error}`);\n+        process.exit(1);\n+    }\n+\n+    runTest(opts[\"test_file\"], options).then(out => {\n+        const [output, nb_failures] = out;\n+        console.log(output);\n+        process.exit(nb_failures);\n+    }).catch(err => {\n+        console.error(err);\n+        process.exit(1);\n+    });\n+}\n+\n+main(process.argv);"}]}