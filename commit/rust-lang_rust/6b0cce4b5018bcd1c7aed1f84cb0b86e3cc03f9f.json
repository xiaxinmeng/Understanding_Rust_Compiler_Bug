{"sha": "6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "node_id": "C_kwDOAAsO6NoAKDZiMGNjZTRiNTAxOGJjZDFjN2FlZDFmODRjYjBiODZlM2NjMDNmOWY", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-03T07:34:26Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-05T16:51:16Z"}, "message": "review comments: do not always point at init expr", "tree": {"sha": "a8184ac7fad4c0231213f6124d6c555d5940843c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8184ac7fad4c0231213f6124d6c555d5940843c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "html_url": "https://github.com/rust-lang/rust/commit/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48094a4a6f53ee3be636b4166a7841505bb7cabc", "url": "https://api.github.com/repos/rust-lang/rust/commits/48094a4a6f53ee3be636b4166a7841505bb7cabc", "html_url": "https://github.com/rust-lang/rust/commit/48094a4a6f53ee3be636b4166a7841505bb7cabc"}], "stats": {"total": 112, "additions": 14, "deletions": 98}, "files": [{"sha": "c50d03b944ffd8a1536015114e137b1b63a599da", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "patch": "@@ -355,6 +355,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n         }\n+        if span_labels.len() < 2 {\n+            return false;\n+        }\n         for (sp, label) in span_labels {\n             err.span_label(sp, &label);\n         }"}, {"sha": "7873cf964cbbc978b278bf3cf58b0a5320152d66", "filename": "src/test/ui/argument-suggestions/two-mismatch-notes.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.stderr?ref=6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "patch": "@@ -1,8 +1,6 @@\n error[E0308]: arguments to this function are incorrect\n   --> $DIR/two-mismatch-notes.rs:10:5\n    |\n-LL |     let w = Wrapper::<isize>(1isize);\n-   |             ------------------------ here the type of `w` is inferred to be `Wrapper<isize>`\n LL |     foo(f, w);\n    |     ^^^\n    |"}, {"sha": "627bf05bba2d9c77110d0f7b00af849089c8b5d1", "filename": "src/test/ui/async-await/dont-suggest-missing-await.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr?ref=6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "patch": "@@ -1,8 +1,6 @@\n error[E0308]: mismatched types\n   --> $DIR/dont-suggest-missing-await.rs:14:18\n    |\n-LL |         let x = make_u32();\n-   |                 ---------- here the type of `x` is inferred to be `impl Future<Output = u32>`\n LL |         take_u32(x)\n    |         -------- ^ expected `u32`, found opaque type\n    |         |"}, {"sha": "a5958baffbaf72719eb8ba87c6f3f17163c2ea4b", "filename": "src/test/ui/async-await/suggest-missing-await-closure.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr?ref=6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "patch": "@@ -1,8 +1,6 @@\n error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await-closure.rs:16:18\n    |\n-LL |         let x = make_u32();\n-   |                 ---------- here the type of `x` is inferred to be `impl Future<Output = u32>`\n LL |         take_u32(x)\n    |         -------- ^ expected `u32`, found opaque type\n    |         |"}, {"sha": "1196601ace09087eb0433a807758f949eb2657d7", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "patch": "@@ -1,8 +1,6 @@\n error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await.rs:12:14\n    |\n-LL |     let x = make_u32();\n-   |             ---------- here the type of `x` is inferred to be `impl Future<Output = u32>`\n LL |     take_u32(x)\n    |     -------- ^ expected `u32`, found opaque type\n    |     |"}, {"sha": "3a89d30a05d2042b7106730d21aabcf5b20b2306", "filename": "src/test/ui/closures/closure-return-type-mismatch.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-mismatch.stderr?ref=6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "patch": "@@ -1,8 +1,6 @@\n error[E0308]: mismatched types\n   --> $DIR/closure-return-type-mismatch.rs:7:9\n    |\n-LL |         let a = true;\n-   |                 ---- here the type of `a` is inferred to be `bool`\n LL |         a\n    |         ^ expected `&str`, found `bool`\n    |"}, {"sha": "1207dc7e7a2ff4415da00c5e039b3e4b16418d39", "filename": "src/test/ui/coercion/coerce-to-bang.stderr", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr?ref=6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "patch": "@@ -33,9 +33,6 @@ LL | fn foo(x: usize, y: !, z: usize) { }\n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:26:12\n    |\n-LL |     let b = 22;\n-   |             -- here the type of `b` is inferred to be `{integer}`\n-LL |     let c = 44;\n LL |     foo(a, b, c); // ... and hence a reference to `a` is expected to diverge.\n    |     ---    ^ expected `!`, found integer\n    |     |\n@@ -52,9 +49,6 @@ LL | fn foo(x: usize, y: !, z: usize) { }\n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:36:12\n    |\n-LL |     let b = 22;\n-   |             -- here the type of `b` is inferred to be `{integer}`\n-LL |     let c = 44;\n LL |     foo(a, b, c);\n    |     ---    ^ expected `!`, found integer\n    |     |\n@@ -71,9 +65,6 @@ LL | fn foo(x: usize, y: !, z: usize) { }\n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:45:12\n    |\n-LL |     let b = 22;\n-   |             -- here the type of `b` is inferred to be `{integer}`\n-LL |     let c = 44;\n LL |     foo(a, b, c);\n    |     ---    ^ expected `!`, found integer\n    |     |"}, {"sha": "5701017dc3471adad820c7ec5268b5725cc2f13a", "filename": "src/test/ui/generic-associated-types/collections-project-default.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.stderr?ref=6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "patch": "@@ -4,9 +4,6 @@ error[E0308]: mismatched types\n LL | fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n    |                                     ------------------------------------ expected `<C as Collection<i32>>::Sibling<f32>` because of return type\n ...\n-LL |     let mut res = <C::Family as CollectionFamily>::Member::<f32>::empty();\n-   |                   ------------------------------------------------------- here the type of `res` is inferred to be `<<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>`\n-...\n LL |     res\n    |     ^^^ expected Collection::Sibling, found CollectionFamily::Member\n    |"}, {"sha": "660dfe9ed3d51bc7617b139fd900ba1b773f3137", "filename": "src/test/ui/issues/issue-15783.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fissues%2Fissue-15783.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fissues%2Fissue-15783.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15783.stderr?ref=6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "patch": "@@ -1,8 +1,6 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-15783.rs:8:19\n    |\n-LL |     let x = Some(&[name]);\n-   |             ------------- here the type of `x` is inferred to be `Option<&[&str; 1]>`\n LL |     let msg = foo(x);\n    |               --- ^ expected slice `[&str]`, found array `[&str; 1]`\n    |               |"}, {"sha": "56b9e073330a6237817715f5c4827f70d6f30fad", "filename": "src/test/ui/let-else/let-else-ref-bindings.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings.stderr?ref=6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "patch": "@@ -19,9 +19,6 @@ LL |     let Some(ref a): Option<&[u8]> = &some else { return };\n error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:24:34\n    |\n-LL |     let some = Some(bytes);\n-   |                ----------- here the type of `some` is inferred to be `Option<Vec<u8>>`\n-...\n LL |     let Some(a): Option<&[u8]> = some else { return };\n    |                  -------------   ^^^^ expected `&[u8]`, found struct `Vec`\n    |                  |\n@@ -62,9 +59,6 @@ LL |     let Some(ref mut a): Option<&mut [u8]> = &mut some else { return };\n error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:52:38\n    |\n-LL |     let mut some = Some(bytes);\n-   |                    ----------- here the type of `some` is inferred to be `Option<Vec<u8>>`\n-...\n LL |     let Some(a): Option<&mut [u8]> = some else { return };\n    |                  -----------------   ^^^^ expected `&mut [u8]`, found struct `Vec`\n    |                  |"}, {"sha": "82addab94792ac06c4ce8ba5c9563451d42ff514", "filename": "src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.stderr", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr?ref=6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "patch": "@@ -10,9 +10,6 @@ LL | #![feature(unsized_locals, unsized_fn_params)]\n error[E0308]: mismatched types\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:87:24\n    |\n-LL |     let z = x.foo();\n-   |             ------- here the type of `z` is inferred to be `u32`\n-...\n LL |     let _seetype: () = z;\n    |                   --   ^ expected `()`, found `u32`\n    |                   |\n@@ -21,9 +18,6 @@ LL |     let _seetype: () = z;\n error[E0308]: mismatched types\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:104:24\n    |\n-LL |     let z = x.foo();\n-   |             ------- here the type of `z` is inferred to be `u64`\n-...\n LL |     let _seetype: () = z;\n    |                   --   ^ expected `()`, found `u64`\n    |                   |\n@@ -66,9 +60,6 @@ LL |     let z = FinalFoo::foo(x);\n error[E0308]: mismatched types\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:139:24\n    |\n-LL |     let z = x.foo();\n-   |             ------- here the type of `z` is inferred to be `u8`\n-...\n LL |     let _seetype: () = z;\n    |                   --   ^ expected `()`, found `u8`\n    |                   |\n@@ -77,9 +68,6 @@ LL |     let _seetype: () = z;\n error[E0308]: mismatched types\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:157:24\n    |\n-LL |     let z = x.foo();\n-   |             ------- here the type of `z` is inferred to be `u32`\n-...\n LL |     let _seetype: () = z;\n    |                   --   ^ expected `()`, found `u32`\n    |                   |\n@@ -88,9 +76,6 @@ LL |     let _seetype: () = z;\n error[E0308]: mismatched types\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:174:24\n    |\n-LL |     let z = x.foo();\n-   |             ------- here the type of `z` is inferred to be `u32`\n-...\n LL |     let _seetype: () = z;\n    |                   --   ^ expected `()`, found `u32`\n    |                   |"}, {"sha": "ff1a836c9aec034b7e2cbd5e929b5a190a05b89a", "filename": "src/test/ui/mismatched_types/abridged.stderr", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr?ref=6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "patch": "@@ -53,39 +53,23 @@ LL |     Ok(Foo { bar: 1 })\n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:39:5\n    |\n-LL |   fn d() -> X<X<String, String>, String> {\n-   |             ---------------------------- expected `X<X<String, String>, String>` because of return type\n-LL |       let x = X {\n-   |  _____________-\n-LL | |         x: X {\n-LL | |             x: \"\".to_string(),\n-LL | |             y: 2,\n-LL | |         },\n-LL | |         y: 3,\n-LL | |     };\n-   | |_____- here the type of `x` is inferred to be `X<X<String, {integer}>, {integer}>`\n-LL |       x\n-   |       ^ expected struct `String`, found integer\n+LL | fn d() -> X<X<String, String>, String> {\n+   |           ---------------------------- expected `X<X<String, String>, String>` because of return type\n+...\n+LL |     x\n+   |     ^ expected struct `String`, found integer\n    |\n    = note: expected struct `X<X<_, String>, String>`\n               found struct `X<X<_, {integer}>, {integer}>`\n \n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:50:5\n    |\n-LL |   fn e() -> X<X<String, String>, String> {\n-   |             ---------------------------- expected `X<X<String, String>, String>` because of return type\n-LL |       let x = X {\n-   |  _____________-\n-LL | |         x: X {\n-LL | |             x: \"\".to_string(),\n-LL | |             y: 2,\n-LL | |         },\n-LL | |         y: \"\".to_string(),\n-LL | |     };\n-   | |_____- here the type of `x` is inferred to be `X<X<String, {integer}>, String>`\n-LL |       x\n-   |       ^ expected struct `String`, found integer\n+LL | fn e() -> X<X<String, String>, String> {\n+   |           ---------------------------- expected `X<X<String, String>, String>` because of return type\n+...\n+LL |     x\n+   |     ^ expected struct `String`, found integer\n    |\n    = note: expected struct `X<X<_, String>, _>`\n               found struct `X<X<_, {integer}>, _>`"}, {"sha": "9f0c0074d674ceac43093dc128f3cf1266f9a550", "filename": "src/test/ui/parser/struct-literal-variant-in-if.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-variant-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-variant-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-variant-in-if.stderr?ref=6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "patch": "@@ -51,8 +51,6 @@ LL |     if x == E::V { field } {}\n error[E0308]: mismatched types\n   --> $DIR/struct-literal-variant-in-if.rs:10:20\n    |\n-LL |     let field = true;\n-   |                 ---- here the type of `field` is inferred to be `bool`\n LL |     if x == E::V { field } {}\n    |     ---------------^^^^^--\n    |     |              |"}, {"sha": "498a112fa9bb3f7434e6031827821cf9ba38bb69", "filename": "src/test/ui/rfc-2497-if-let-chains/ensure-that-let-else-does-not-interact-with-let-chains.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr?ref=6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "patch": "@@ -100,9 +100,6 @@ LL |     let Some(n) = opt && let another = n else {\n error[E0308]: mismatched types\n   --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:9:19\n    |\n-LL |     let opt = Some(1i32);\n-   |               ---------- here the type of `opt` is inferred to be `Option<i32>`\n-...\n LL |     let Some(n) = opt && n == 1 else {\n    |                   ^^^ expected `bool`, found enum `Option`\n    |\n@@ -123,9 +120,6 @@ LL |     let Some(n) = opt && n == 1 else {\n error[E0308]: mismatched types\n   --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:15:19\n    |\n-LL |     let opt = Some(1i32);\n-   |               ---------- here the type of `opt` is inferred to be `Option<i32>`\n-...\n LL |     let Some(n) = opt && let another = n else {\n    |                   ^^^ expected `bool`, found enum `Option`\n    |"}, {"sha": "b039ce2cc9209fc81f5e967dd762c032c5ec57c3", "filename": "src/test/ui/structs/struct-base-wrong-type.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fstructs%2Fstruct-base-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fstructs%2Fstruct-base-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-base-wrong-type.stderr?ref=6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "patch": "@@ -13,8 +13,6 @@ LL | static foo_i: Foo = Foo { a: 2, ..4 };\n error[E0308]: mismatched types\n   --> $DIR/struct-base-wrong-type.rs:12:27\n    |\n-LL |     let b = Bar { x: 5 };\n-   |             ------------ here the type of `b` is inferred to be `Bar`\n LL |     let f = Foo { a: 2, ..b };\n    |                           ^ expected struct `Foo`, found struct `Bar`\n "}, {"sha": "9b619ac9a3f502fcc4983655dec8070c4362bd77", "filename": "src/test/ui/suggestions/call-boxed.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fsuggestions%2Fcall-boxed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fsuggestions%2Fcall-boxed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcall-boxed.stderr?ref=6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "patch": "@@ -4,10 +4,7 @@ error[E0308]: mismatched types\n LL |     let mut x = 1i32;\n    |                 ---- expected due to this value\n LL |     let y = Box::new(|| 1);\n-   |             --------------\n-   |             |        |\n-   |             |        the found closure\n-   |             here the type of `y` is inferred to be `Box<[closure@call-boxed.rs:3:22]>`\n+   |                      -- the found closure\n LL |     x = y;\n    |         ^ expected `i32`, found struct `Box`\n    |"}, {"sha": "8c9a41a202767813306bf508a328f785ad74e45c", "filename": "src/test/ui/suggestions/issue-86100-tuple-paren-comma.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.stderr?ref=6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "patch": "@@ -49,8 +49,6 @@ LL |     let _s = S { _s: (\"abc\".to_string(),) };\n error[E0308]: mismatched types\n   --> $DIR/issue-86100-tuple-paren-comma.rs:23:22\n    |\n-LL |     let t = (1, 2);\n-   |             ------ here the type of `t` is inferred to be `({integer}, {integer})`\n LL |     let _x: (i32,) = (t);\n    |             ------   ^^^ expected a tuple with 1 element, found one with 2 elements\n    |             |"}, {"sha": "7924d3db06f36efb7ce39b5e0740200fc312099e", "filename": "src/test/ui/traits/issue-52893.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.stderr?ref=6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "patch": "@@ -4,8 +4,6 @@ error[E0308]: mismatched types\n LL | impl<F, Name, P> AddClass<Name, F> for Class<P>\n    |      - this type parameter\n ...\n-LL |         let output = builder.to_ref();\n-   |                      ---------------- here the type of `output` is inferred to be `Class<P>`\n LL |         builder.push(output);\n    |                 ---- ^^^^^^ expected type parameter `F`, found struct `Class`\n    |                 |"}, {"sha": "0a503e1fe58c1a503c2e81fb136d0e70368dd24d", "filename": "src/test/ui/tuple/wrong_argument_ice-3.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr?ref=6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "patch": "@@ -1,9 +1,6 @@\n error[E0061]: this method takes 1 argument but 2 arguments were supplied\n   --> $DIR/wrong_argument_ice-3.rs:9:16\n    |\n-LL |     let new_group = vec![String::new()];\n-   |                     ------------------- here the type of `new_group` is inferred to be `Vec<String>`\n-...\n LL |         groups.push(new_group, vec![process]);\n    |                ^^^^            ------------- argument of type `Vec<&Process>` unexpected\n    |"}, {"sha": "fcafd315ebf5450e5f0ea68e6281a6d52969bf46", "filename": "src/test/ui/type/type-mismatch-same-crate-name.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr?ref=6b0cce4b5018bcd1c7aed1f84cb0b86e3cc03f9f", "patch": "@@ -1,9 +1,6 @@\n error[E0308]: mismatched types\n   --> $DIR/type-mismatch-same-crate-name.rs:16:20\n    |\n-LL |     let foo2 = {extern crate crate_a2 as a; a::Foo};\n-   |                ------------------------------------ here the type of `foo2` is inferred to be `Foo`\n-...\n LL |         a::try_foo(foo2);\n    |         ---------- ^^^^ expected struct `main::a::Foo`, found a different struct `main::a::Foo`\n    |         |\n@@ -30,9 +27,6 @@ LL | pub fn try_foo(x: Foo){}\n error[E0308]: mismatched types\n   --> $DIR/type-mismatch-same-crate-name.rs:20:20\n    |\n-LL |     let bar2 = {extern crate crate_a2 as a; a::bar()};\n-   |                -------------------------------------- here the type of `bar2` is inferred to be `Box<dyn Bar>`\n-...\n LL |         a::try_bar(bar2);\n    |         ---------- ^^^^ expected trait `main::a::Bar`, found a different trait `main::a::Bar`\n    |         |"}]}