{"sha": "a074bd7334978a7d32395c66404b8f5294b1811e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNzRiZDczMzQ5NzhhN2QzMjM5NWM2NjQwNGI4ZjUyOTRiMTgxMWU=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-06-27T19:50:59Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-06-27T19:50:59Z"}, "message": "Display #[non_exhaustive] in rustdoc on types.", "tree": {"sha": "b91dac7a432fed67db210d8b99e024872d9774ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b91dac7a432fed67db210d8b99e024872d9774ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a074bd7334978a7d32395c66404b8f5294b1811e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlsz6qMACgkQAXYLT59T\n8VQrVg/5AXBlbd3dFiFW+7zL2grViDTC8pju9ojoJXsOI/q/oJeFDTc8vOKMXc0k\nWIq8qDqANdwMbMVq5UOsfJWW5fL2uZACxhhxB79Y/jh5+iJgivlM1JEVjbjkUwY9\nMM60Hh+/Zou7YINM4FQtDLHZWCSA679wx6e5JfWjtO40/t2oXggl06nNbakWYgMG\nb36n93OYfHU2KoAaEPxFc0DVXPS4U7OgtO4gllsSGYv3DkkZEb74jTcNYpCs4UjU\ne5WfjBIdAOfqGnMOekF6GvZSOO6+DCswuvUNw2jOhx5XPc8K6x6iCLCkUy0x+fHb\nAnO/WTlehvjrUlKq3xay3zkPpAoCOUlpjGu9IT708oisofFXURjIERALp8p0DF8w\nZrn1g+GLAqKUIAcDl6+0AfYa7wctwtMsQ8Zo1nsghjQXpf1WH6oQ6RDeESV9Cbq9\nb+1KxpYIwQxlZkJgc6xYDj1lrdlTjwr0gUHFqMpw3ImdZ63mYxVF090a9DqNZmZv\nq3HVUsCf+NxewdCN1MX33KiGA+2pCDBNV0u+TqPoKqCPowGTOd+H+GjUX7R+R1D2\n3AC7fInEh9yyKG+iqaCd0Tm4YNfUtifwgEHlc0WbexNjFNvm4dLNVBywUb075huc\nu9yAwViLYDyfpkeiIVq7dg2OjPuHU3EeavM0/Tzd/CuVTEmLIuo=\n=5nIH\n-----END PGP SIGNATURE-----", "payload": "tree b91dac7a432fed67db210d8b99e024872d9774ae\nparent ed0350e94569d74bdfe0e612fedfd5ab173f5242\nauthor David Wood <david@davidtw.co> 1530129059 +0100\ncommitter David Wood <david@davidtw.co> 1530129059 +0100\n\nDisplay #[non_exhaustive] in rustdoc on types.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a074bd7334978a7d32395c66404b8f5294b1811e", "html_url": "https://github.com/rust-lang/rust/commit/a074bd7334978a7d32395c66404b8f5294b1811e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a074bd7334978a7d32395c66404b8f5294b1811e/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed0350e94569d74bdfe0e612fedfd5ab173f5242", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed0350e94569d74bdfe0e612fedfd5ab173f5242", "html_url": "https://github.com/rust-lang/rust/commit/ed0350e94569d74bdfe0e612fedfd5ab173f5242"}], "stats": {"total": 78, "additions": 75, "deletions": 3}, "files": [{"sha": "f9d00230112368882bc6415b838fe283df2d33db", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a074bd7334978a7d32395c66404b8f5294b1811e/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a074bd7334978a7d32395c66404b8f5294b1811e/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=a074bd7334978a7d32395c66404b8f5294b1811e", "patch": "@@ -229,6 +229,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                 def_id: self.next_def_id(def_id.krate),\n                 stability: None,\n                 deprecation: None,\n+                non_exhaustive: false,\n                 inner: ImplItem(Impl {\n                     unsafety: hir::Unsafety::Normal,\n                     generics: new_generics,"}, {"sha": "3029eba06378cea4e7dd6729ee5fd2e15cedc3e2", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a074bd7334978a7d32395c66404b8f5294b1811e/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a074bd7334978a7d32395c66404b8f5294b1811e/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=a074bd7334978a7d32395c66404b8f5294b1811e", "patch": "@@ -111,6 +111,7 @@ pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name, visited: &mut FxHa\n         visibility: Some(clean::Public),\n         stability: cx.tcx.lookup_stability(did).clean(cx),\n         deprecation: cx.tcx.lookup_deprecation(did).clean(cx),\n+        non_exhaustive: false,\n         def_id: did,\n     });\n     Some(ret)\n@@ -412,6 +413,7 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n         visibility: Some(clean::Inherited),\n         stability: tcx.lookup_stability(did).clean(cx),\n         deprecation: tcx.lookup_deprecation(did).clean(cx),\n+        non_exhaustive: false,\n         def_id: did,\n     });\n }"}, {"sha": "441a49c328a6b52560ee9221f7a06b9b9ff5844a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a074bd7334978a7d32395c66404b8f5294b1811e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a074bd7334978a7d32395c66404b8f5294b1811e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a074bd7334978a7d32395c66404b8f5294b1811e", "patch": "@@ -192,6 +192,7 @@ impl<'a, 'tcx, 'rcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx, 'rcx>\n                     visibility: Some(Public),\n                     stability: get_stability(cx, def_id),\n                     deprecation: get_deprecation(cx, def_id),\n+                    non_exhaustive: false,\n                     def_id,\n                     inner: PrimitiveItem(prim),\n                 }\n@@ -204,6 +205,7 @@ impl<'a, 'tcx, 'rcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx, 'rcx>\n                     visibility: Some(Public),\n                     stability: get_stability(cx, def_id),\n                     deprecation: get_deprecation(cx, def_id),\n+                    non_exhaustive: false,\n                     def_id,\n                     inner: KeywordItem(kw),\n                 }\n@@ -366,6 +368,7 @@ pub struct Item {\n     pub def_id: DefId,\n     pub stability: Option<Stability>,\n     pub deprecation: Option<Deprecation>,\n+    pub non_exhaustive: bool,\n }\n \n impl fmt::Debug for Item {\n@@ -625,6 +628,7 @@ impl Clean<Item> for doctree::Module {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n+            non_exhaustive: false,\n             def_id: cx.tcx.hir.local_def_id(self.id),\n             inner: ModuleItem(Module {\n                is_crate: self.is_crate,\n@@ -2117,6 +2121,7 @@ impl Clean<Item> for doctree::Function {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n+            non_exhaustive: false,\n             def_id: cx.tcx.hir.local_def_id(self.id),\n             inner: FunctionItem(Function {\n                 decl,\n@@ -2298,6 +2303,7 @@ impl Clean<Item> for doctree::Trait {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n+            non_exhaustive: false,\n             inner: TraitItem(Trait {\n                 auto: self.is_auto.clean(cx),\n                 unsafety: self.unsafety,\n@@ -2367,6 +2373,7 @@ impl Clean<Item> for hir::TraitItem {\n             visibility: None,\n             stability: get_stability(cx, cx.tcx.hir.local_def_id(self.id)),\n             deprecation: get_deprecation(cx, cx.tcx.hir.local_def_id(self.id)),\n+            non_exhaustive: false,\n             inner,\n         }\n     }\n@@ -2395,6 +2402,7 @@ impl Clean<Item> for hir::ImplItem {\n             visibility: self.vis.clean(cx),\n             stability: get_stability(cx, cx.tcx.hir.local_def_id(self.id)),\n             deprecation: get_deprecation(cx, cx.tcx.hir.local_def_id(self.id)),\n+            non_exhaustive: false,\n             inner,\n         }\n     }\n@@ -2541,6 +2549,7 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n             visibility,\n             stability: get_stability(cx, self.def_id),\n             deprecation: get_deprecation(cx, self.def_id),\n+            non_exhaustive: false,\n             def_id: self.def_id,\n             attrs: inline::load_attrs(cx, self.def_id),\n             source: cx.tcx.def_span(self.def_id).clean(cx),\n@@ -3194,6 +3203,7 @@ impl Clean<Item> for hir::StructField {\n             visibility: self.vis.clean(cx),\n             stability: get_stability(cx, cx.tcx.hir.local_def_id(self.id)),\n             deprecation: get_deprecation(cx, cx.tcx.hir.local_def_id(self.id)),\n+            non_exhaustive: false,\n             def_id: cx.tcx.hir.local_def_id(self.id),\n             inner: StructFieldItem(self.ty.clean(cx)),\n         }\n@@ -3209,6 +3219,7 @@ impl<'tcx> Clean<Item> for ty::FieldDef {\n             visibility: self.vis.clean(cx),\n             stability: get_stability(cx, self.did),\n             deprecation: get_deprecation(cx, self.did),\n+            non_exhaustive: false,\n             def_id: self.did,\n             inner: StructFieldItem(cx.tcx.type_of(self.did).clean(cx)),\n         }\n@@ -3273,6 +3284,7 @@ impl Clean<Vec<Item>> for doctree::Struct {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n+            non_exhaustive: self.non_exhaustive,\n             inner: StructItem(Struct {\n                 struct_type: self.struct_type,\n                 generics: self.generics.clean(cx),\n@@ -3298,6 +3310,7 @@ impl Clean<Vec<Item>> for doctree::Union {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n+            non_exhaustive: false,\n             inner: UnionItem(Union {\n                 struct_type: self.struct_type,\n                 generics: self.generics.clean(cx),\n@@ -3350,6 +3363,7 @@ impl Clean<Vec<Item>> for doctree::Enum {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n+            non_exhaustive: self.non_exhaustive,\n             inner: EnumItem(Enum {\n                 variants: self.variants.clean(cx),\n                 generics: self.generics.clean(cx),\n@@ -3375,6 +3389,7 @@ impl Clean<Item> for doctree::Variant {\n             visibility: None,\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n+            non_exhaustive: false,\n             def_id: cx.tcx.hir.local_def_id(self.def.id()),\n             inner: VariantItem(Variant {\n                 kind: self.def.clean(cx),\n@@ -3405,6 +3420,7 @@ impl<'tcx> Clean<Item> for ty::VariantDef {\n                             def_id: field.did,\n                             stability: get_stability(cx, field.did),\n                             deprecation: get_deprecation(cx, field.did),\n+                            non_exhaustive: false,\n                             inner: StructFieldItem(cx.tcx.type_of(field.did).clean(cx))\n                         }\n                     }).collect()\n@@ -3420,6 +3436,7 @@ impl<'tcx> Clean<Item> for ty::VariantDef {\n             inner: VariantItem(Variant { kind: kind }),\n             stability: get_stability(cx, self.did),\n             deprecation: get_deprecation(cx, self.did),\n+            non_exhaustive: false,\n         }\n     }\n }\n@@ -3671,6 +3688,7 @@ impl Clean<Item> for doctree::Typedef {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n+            non_exhaustive: false,\n             inner: TypedefItem(Typedef {\n                 type_: self.ty.clean(cx),\n                 generics: self.gen.clean(cx),\n@@ -3722,6 +3740,7 @@ impl Clean<Item> for doctree::Static {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n+            non_exhaustive: false,\n             inner: StaticItem(Static {\n                 type_: self.type_.clean(cx),\n                 mutability: self.mutability.clean(cx),\n@@ -3747,6 +3766,7 @@ impl Clean<Item> for doctree::Constant {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n+            non_exhaustive: false,\n             inner: ConstantItem(Constant {\n                 type_: self.type_.clean(cx),\n                 expr: print_const_expr(cx, self.expr),\n@@ -3835,6 +3855,7 @@ impl Clean<Vec<Item>> for doctree::Impl {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n+            non_exhaustive: false,\n             inner: ImplItem(Impl {\n                 unsafety: self.unsafety,\n                 generics: self.generics.clean(cx),\n@@ -3921,6 +3942,7 @@ impl Clean<Item> for doctree::ExternCrate {\n             visibility: self.vis.clean(cx),\n             stability: None,\n             deprecation: None,\n+            non_exhaustive: false,\n             inner: ExternCrateItem(self.name.clean(cx), self.path.clone())\n         }\n     }\n@@ -3967,6 +3989,7 @@ impl Clean<Vec<Item>> for doctree::Import {\n             visibility: self.vis.clean(cx),\n             stability: None,\n             deprecation: None,\n+            non_exhaustive: false,\n             inner: ImportItem(inner)\n         }]\n     }\n@@ -4035,6 +4058,7 @@ impl Clean<Item> for hir::ForeignItem {\n             visibility: self.vis.clean(cx),\n             stability: get_stability(cx, cx.tcx.hir.local_def_id(self.id)),\n             deprecation: get_deprecation(cx, cx.tcx.hir.local_def_id(self.id)),\n+            non_exhaustive: false,\n             inner,\n         }\n     }\n@@ -4209,6 +4233,7 @@ impl Clean<Item> for doctree::Macro {\n             visibility: Some(Public),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n+            non_exhaustive: false,\n             def_id: self.def_id,\n             inner: MacroItem(Macro {\n                 source: format!(\"macro_rules! {} {{\\n{}}}\","}, {"sha": "f0eb1ffd5ab69c851347aeadab1c1fa8f5487878", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a074bd7334978a7d32395c66404b8f5294b1811e/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a074bd7334978a7d32395c66404b8f5294b1811e/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=a074bd7334978a7d32395c66404b8f5294b1811e", "patch": "@@ -97,6 +97,7 @@ pub struct Struct {\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n+    pub non_exhaustive: bool,\n     pub id: NodeId,\n     pub struct_type: StructType,\n     pub name: Name,\n@@ -123,6 +124,7 @@ pub struct Enum {\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n+    pub non_exhaustive: bool,\n     pub variants: hir::HirVec<Variant>,\n     pub generics: hir::Generics,\n     pub attrs: hir::HirVec<ast::Attribute>,"}, {"sha": "8d191357cbe1f5d854eaf81ab4b11578b6e66783", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a074bd7334978a7d32395c66404b8f5294b1811e/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a074bd7334978a7d32395c66404b8f5294b1811e/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=a074bd7334978a7d32395c66404b8f5294b1811e", "patch": "@@ -90,15 +90,25 @@ pub trait DocFolder : Sized {\n \n     /// don't override!\n     fn fold_item_recur(&mut self, item: Item) -> Option<Item> {\n-        let Item { attrs, name, source, visibility, def_id, inner, stability, deprecation } = item;\n+        let Item {\n+            attrs,\n+            name,\n+            source,\n+            visibility,\n+            def_id,\n+            inner,\n+            stability,\n+            deprecation,\n+            non_exhaustive\n+        } = item;\n \n         let inner = match inner {\n             StrippedItem(box i) => StrippedItem(box self.fold_inner_recur(i)),\n             _ => self.fold_inner_recur(inner),\n         };\n \n         Some(Item { attrs, name, source, inner, visibility,\n-                    stability, deprecation, def_id })\n+                    stability, deprecation, non_exhaustive, def_id })\n     }\n \n     fn fold_mod(&mut self, m: Module) -> Module {"}, {"sha": "d37f4e9393502a01a926de4624cfc6261f05dcb5", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a074bd7334978a7d32395c66404b8f5294b1811e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a074bd7334978a7d32395c66404b8f5294b1811e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=a074bd7334978a7d32395c66404b8f5294b1811e", "patch": "@@ -2194,6 +2194,7 @@ fn document(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item) -> fmt::Re\n         info!(\"Documenting {}\", name);\n     }\n     document_stability(w, cx, item)?;\n+    document_non_exhaustive(w, item)?;\n     let prefix = render_assoc_const_value(item);\n     document_full(w, item, cx, &prefix)?;\n     Ok(())\n@@ -2262,6 +2263,28 @@ fn document_stability(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item)\n     Ok(())\n }\n \n+fn document_non_exhaustive(w: &mut fmt::Formatter, item: &clean::Item) -> fmt::Result {\n+    if item.non_exhaustive {\n+        write!(w, r##\"\n+        <div class='non-exhaustive'>\n+            <div class='stab non-exhaustive'>\n+                <details>\n+                    <summary>\n+                        <span class=microscope>\ud83d\udd2c</span>\n+                        This type is marked as non exhaustive.\n+                    </summary>\n+                    <p>\n+                    This type will require a wildcard arm in any match statements or constructors.\n+                    </p>\n+                </details>\n+            </div>\n+        </div>\n+        \"##)?;\n+    }\n+\n+    Ok(())\n+}\n+\n fn name_key(name: &str) -> (&str, u64, usize) {\n     // find number at end\n     let split = name.bytes().rposition(|b| b < b'0' || b'9' < b).map_or(0, |s| s + 1);"}, {"sha": "3c3372aedd48c16a3c670fd9a0639da1f726a15f", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a074bd7334978a7d32395c66404b8f5294b1811e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/a074bd7334978a7d32395c66404b8f5294b1811e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=a074bd7334978a7d32395c66404b8f5294b1811e", "patch": "@@ -188,6 +188,7 @@ a.test-arrow {\n \tborder-color: #66afe9;\n }\n \n+.stab.non-exhaustive { background: #F5F5F5; border-color: #D3D3D3; }\n .stab.unstable { background: #FFF5D6; border-color: #FFC600; }\n .stab.deprecated { background: #F3DFFF; border-color: #7F0087; }\n .stab.portability { background: #C4ECFF; border-color: #7BA5DB; }\n@@ -400,4 +401,4 @@ kbd {\n }\n .search-results td span.grey {\n \tcolor: #999;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "2dbcb945b49fbb0c4596d58e5f87e12f2e9f412e", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a074bd7334978a7d32395c66404b8f5294b1811e/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a074bd7334978a7d32395c66404b8f5294b1811e/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=a074bd7334978a7d32395c66404b8f5294b1811e", "patch": "@@ -89,6 +89,12 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n             .and_then(|def_id| self.cx.tcx.lookup_deprecation(def_id))\n     }\n \n+    fn non_exhaustive(&self, id: ast::NodeId) -> bool {\n+        self.cx.tcx.hir.opt_local_def_id(id)\n+            .map(|def_id| self.cx.tcx.has_attr(def_id, \"non_exhaustive\"))\n+            .unwrap_or(false)\n+    }\n+\n     pub fn visit(&mut self, krate: &hir::Crate) {\n         self.attrs = krate.attrs.clone();\n \n@@ -119,6 +125,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n             vis: item.vis.clone(),\n             stab: self.stability(item.id),\n             depr: self.deprecation(item.id),\n+            non_exhaustive: self.non_exhaustive(item.id),\n             attrs: item.attrs.clone(),\n             generics: generics.clone(),\n             fields: sd.fields().iter().cloned().collect(),\n@@ -162,6 +169,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n             vis: it.vis.clone(),\n             stab: self.stability(it.id),\n             depr: self.deprecation(it.id),\n+            non_exhaustive: self.non_exhaustive(it.id),\n             generics: params.clone(),\n             attrs: it.attrs.clone(),\n             id: it.id,"}]}