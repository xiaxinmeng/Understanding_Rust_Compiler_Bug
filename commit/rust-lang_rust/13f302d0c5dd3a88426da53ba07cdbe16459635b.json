{"sha": "13f302d0c5dd3a88426da53ba07cdbe16459635b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZjMwMmQwYzVkZDNhODg0MjZkYTUzYmEwN2NkYmUxNjQ1OTYzNWI=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-12-15T06:52:55Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-12-19T07:31:52Z"}, "message": "Update doc comment for std::rt", "tree": {"sha": "2dc937b6a11a25ce3f99dc94a28d33d858f3500c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dc937b6a11a25ce3f99dc94a28d33d858f3500c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13f302d0c5dd3a88426da53ba07cdbe16459635b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13f302d0c5dd3a88426da53ba07cdbe16459635b", "html_url": "https://github.com/rust-lang/rust/commit/13f302d0c5dd3a88426da53ba07cdbe16459635b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13f302d0c5dd3a88426da53ba07cdbe16459635b/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ffd9f49c340c350080bfe6c1be9e3aaccd549d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ffd9f49c340c350080bfe6c1be9e3aaccd549d0", "html_url": "https://github.com/rust-lang/rust/commit/4ffd9f49c340c350080bfe6c1be9e3aaccd549d0"}], "stats": {"total": 37, "additions": 6, "deletions": 31}, "files": [{"sha": "acc05cbf1403255ce6bc3b0fe765431b3cb4fdcd", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/13f302d0c5dd3a88426da53ba07cdbe16459635b/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f302d0c5dd3a88426da53ba07cdbe16459635b/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=13f302d0c5dd3a88426da53ba07cdbe16459635b", "patch": "@@ -8,38 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Runtime services, including the task scheduler and I/O dispatcher\n+//! Runtime services\n //!\n-//! The `rt` module provides the private runtime infrastructure necessary to support core language\n-//! features like the exchange and local heap, logging, local data and unwinding. It also\n-//! implements the default task scheduler and task model. Initialization routines are provided for\n-//! setting up runtime resources in common configurations, including that used by `rustc` when\n-//! generating executables.\n-//!\n-//! It is intended that the features provided by `rt` can be factored in a way such that the core\n-//! library can be built with different 'profiles' for different use cases, e.g. excluding the task\n-//! scheduler. A number of runtime features though are critical to the functioning of the language\n-//! and an implementation must be provided regardless of the execution environment.\n-//!\n-//! Of foremost importance is the global exchange heap, in the module `heap`. Very little practical\n-//! Rust code can be written without access to the global heap. Unlike most of `rt` the global heap\n-//! is truly a global resource and generally operates independently of the rest of the runtime.\n-//!\n-//! All other runtime features are task-local, including the local heap, local storage, logging and\n-//! the stack unwinder.\n-//!\n-//! The relationship between `rt` and the rest of the core library is not entirely clear yet and\n-//! some modules will be moving into or out of `rt` as development proceeds.\n-//!\n-//! Several modules in `core` are clients of `rt`:\n-//!\n-//! * `std::task` - The user-facing interface to the Rust task model.\n-//! * `std::local_data` - The interface to local data.\n-//! * `std::unstable::lang` - Miscellaneous lang items, some of which rely on `std::rt`.\n-//! * `std::cleanup` - Local heap destruction.\n-//! * `std::io` - In the future `std::io` will use an `rt` implementation.\n-//! * `std::logging`\n-//! * `std::comm`\n+//! The `rt` module provides a narrow set of runtime services,\n+//! including the global heap (exported in `heap`) and unwinding and\n+//! backtrace support. The APIs in this module are highly unstable,\n+//! and should be considered as private implementation details for the\n+//! time being.\n \n #![experimental]\n "}]}