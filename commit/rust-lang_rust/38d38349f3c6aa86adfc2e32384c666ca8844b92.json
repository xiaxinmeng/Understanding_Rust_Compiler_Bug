{"sha": "38d38349f3c6aa86adfc2e32384c666ca8844b92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZDM4MzQ5ZjNjNmFhODZhZGZjMmUzMjM4NGM2NjZjYTg4NDRiOTI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-26T23:46:24Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-14T16:31:31Z"}, "message": "typeck: workaround WF hole in `to_const`.", "tree": {"sha": "2e03de81a8ef63b461deaa67d8210c52bf22a0d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e03de81a8ef63b461deaa67d8210c52bf22a0d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38d38349f3c6aa86adfc2e32384c666ca8844b92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38d38349f3c6aa86adfc2e32384c666ca8844b92", "html_url": "https://github.com/rust-lang/rust/commit/38d38349f3c6aa86adfc2e32384c666ca8844b92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38d38349f3c6aa86adfc2e32384c666ca8844b92/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bbc33aaf049bd14d862333a2914bc78b4bd4f24", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bbc33aaf049bd14d862333a2914bc78b4bd4f24", "html_url": "https://github.com/rust-lang/rust/commit/2bbc33aaf049bd14d862333a2914bc78b4bd4f24"}], "stats": {"total": 128, "additions": 112, "deletions": 16}, "files": [{"sha": "3aff70390fadca15f65af4ef48e622dd8b83662b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=38d38349f3c6aa86adfc2e32384c666ca8844b92", "patch": "@@ -3311,8 +3311,31 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     pub fn to_const(&self, ast_c: &hir::AnonConst) -> &'tcx ty::Const<'tcx> {\n-        let c = self.tcx.hir().local_def_id(ast_c.hir_id).expect_local();\n-        ty::Const::from_anon_const(self.tcx, c)\n+        let const_def_id = self.tcx.hir().local_def_id(ast_c.hir_id).expect_local();\n+        let c = ty::Const::from_anon_const(self.tcx, const_def_id);\n+\n+        // HACK(eddyb) emulate what a `WellFormedConst` obligation would do.\n+        // This code should be replaced with the proper WF handling ASAP.\n+        if let ty::ConstKind::Unevaluated(def_id, substs, promoted) = c.val {\n+            assert!(promoted.is_none());\n+\n+            // HACK(eddyb) let's hope these are always empty.\n+            // let obligations = self.nominal_obligations(def_id, substs);\n+            // self.out.extend(obligations);\n+\n+            let cause = traits::ObligationCause::new(\n+                self.tcx.def_span(const_def_id.to_def_id()),\n+                self.body_id,\n+                traits::MiscObligation,\n+            );\n+            self.register_predicate(traits::Obligation::new(\n+                cause,\n+                self.param_env,\n+                ty::Predicate::ConstEvaluatable(def_id, substs),\n+            ));\n+        }\n+\n+        c\n     }\n \n     // If the type given by the user has free regions, save it for later, since"}, {"sha": "ad6f4970367a7b5c0dd533bc751eb89e020f11e7", "filename": "src/test/compile-fail/issue-52443.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs?ref=38d38349f3c6aa86adfc2e32384c666ca8844b92", "patch": "@@ -8,4 +8,9 @@ fn main() {\n     //~| WARN denote infinite loops with\n     [(); { for _ in 0usize.. {}; 0}];\n     //~^ ERROR `for` is not allowed in a `const`\n+    //~| ERROR calls in constants are limited to constant functions\n+    //~| ERROR references in constants may only refer to immutable values\n+    //~| ERROR calls in constants are limited to constant functions\n+    //~| ERROR constant contains unimplemented expression type\n+    //~| ERROR evaluation of constant value failed\n }"}, {"sha": "5d068eb7fc83ccaa4d60312237a94364af140ff4", "filename": "src/test/ui/const-generics/issues/issue-62456.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs?ref=38d38349f3c6aa86adfc2e32384c666ca8844b92", "patch": "@@ -1,10 +1,9 @@\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n \n-// build-pass\n-\n fn foo<const N: usize>() {\n     let _ = [0u64; N + 1];\n+    //~^ ERROR constant expression depends on a generic parameter\n }\n \n fn main() {}"}, {"sha": "96a07110e73cc599e79705d75d4a50be45646dce", "filename": "src/test/ui/const-generics/issues/issue-62456.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.stderr?ref=38d38349f3c6aa86adfc2e32384c666ca8844b92", "patch": "@@ -6,5 +6,13 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-warning: 1 warning emitted\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-62456.rs:5:20\n+   |\n+LL |     let _ = [0u64; N + 1];\n+   |                    ^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "264e693a008281140dd5e95c708d98a10b9450ba", "filename": "src/test/ui/const-generics/issues/issue-62504.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs?ref=38d38349f3c6aa86adfc2e32384c666ca8844b92", "patch": "@@ -17,6 +17,7 @@ impl<const X: usize> ArrayHolder<X> {\n     pub const fn new() -> Self {\n         ArrayHolder([0; Self::SIZE])\n         //~^ ERROR: mismatched types\n+        //~| ERROR constant expression depends on a generic parameter\n     }\n }\n "}, {"sha": "a3a864f770cb87bf11607a95bac0e09069bf9aed", "filename": "src/test/ui/const-generics/issues/issue-62504.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.stderr?ref=38d38349f3c6aa86adfc2e32384c666ca8844b92", "patch": "@@ -7,6 +7,14 @@ LL |         ArrayHolder([0; Self::SIZE])\n    = note: expected array `[u32; _]`\n               found array `[u32; _]`\n \n-error: aborting due to previous error\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-62504.rs:18:25\n+   |\n+LL |         ArrayHolder([0; Self::SIZE])\n+   |                         ^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "73ba4fa6aae880b9f47c4e4890a4468458daebff", "filename": "src/test/ui/const-generics/issues/issue-66205.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs?ref=38d38349f3c6aa86adfc2e32384c666ca8844b92", "patch": "@@ -1,10 +1,9 @@\n-// check-pass\n-\n #![allow(incomplete_features, dead_code, unconditional_recursion)]\n #![feature(const_generics)]\n \n fn fact<const N: usize>() {\n     fact::<{ N - 1 }>();\n+    //~^ ERROR constant expression depends on a generic parameter\n }\n \n fn main() {}"}, {"sha": "2bd013e8b41f2cdd8a147efc79ce06fcb400185e", "filename": "src/test/ui/const-generics/issues/issue-66205.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.stderr?ref=38d38349f3c6aa86adfc2e32384c666ca8844b92", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-66205.rs:5:12\n+   |\n+LL |     fact::<{ N - 1 }>();\n+   |            ^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "c8ee18212398554b480de9ec045c255d3e3ecbe8", "filename": "src/test/ui/const-generics/issues/issue-67739.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs?ref=38d38349f3c6aa86adfc2e32384c666ca8844b92", "patch": "@@ -1,7 +1,5 @@\n // Regression test for #67739\n \n-// check-pass\n-\n #![allow(incomplete_features)]\n #![feature(const_generics)]\n \n@@ -12,6 +10,7 @@ pub trait Trait {\n \n     fn associated_size(&self) -> usize {\n         [0u8; mem::size_of::<Self::Associated>()];\n+        //~^ ERROR constant expression depends on a generic parameter\n         0\n     }\n }"}, {"sha": "27a56b8eb02b2a0692f28bf6042155c77320600f", "filename": "src/test/ui/const-generics/issues/issue-67739.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.stderr?ref=38d38349f3c6aa86adfc2e32384c666ca8844b92", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-67739.rs:12:15\n+   |\n+LL |         [0u8; mem::size_of::<Self::Associated>()];\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "07fb491015a853c184acda4426dff1e36928bfd2", "filename": "src/test/ui/consts/const-eval/issue-52442.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs?ref=38d38349f3c6aa86adfc2e32384c666ca8844b92", "patch": "@@ -1,4 +1,6 @@\n fn main() {\n     [();  { &loop { break } as *const _ as usize } ];\n     //~^ ERROR `loop` is not allowed in a `const`\n+    //~| ERROR casting pointers to integers in constants is unstable\n+    //~| ERROR evaluation of constant value failed\n }"}, {"sha": "eda2dbf0b6b1569ff8f412bf2436b78b325f2106", "filename": "src/test/ui/consts/const-eval/issue-52442.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr?ref=38d38349f3c6aa86adfc2e32384c666ca8844b92", "patch": "@@ -7,6 +7,22 @@ LL |     [();  { &loop { break } as *const _ as usize } ];\n    = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: casting pointers to integers in constants is unstable\n+  --> $DIR/issue-52442.rs:2:13\n+   |\n+LL |     [();  { &loop { break } as *const _ as usize } ];\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n+   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-52442.rs:2:13\n+   |\n+LL |     [();  { &loop { break } as *const _ as usize } ];\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors have detailed explanations: E0080, E0658.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "d719bf1b97161668d5fb305df2f6e81448788f70", "filename": "src/test/ui/consts/issue-52432.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.rs?ref=38d38349f3c6aa86adfc2e32384c666ca8844b92", "patch": "@@ -6,4 +6,5 @@ fn main() {\n     //~| ERROR: type annotations needed\n     [(); &(static || {}) as *const _ as usize];\n     //~^ ERROR: closures cannot be static\n+    //~| ERROR evaluation of constant value failed\n }"}, {"sha": "e9539d24118a0533bbc18e447589c3693d2fd9ad", "filename": "src/test/ui/consts/issue-52432.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.stderr?ref=38d38349f3c6aa86adfc2e32384c666ca8844b92", "patch": "@@ -16,7 +16,13 @@ error[E0282]: type annotations needed\n LL |     [(); &(static |x| {}) as *const _ as usize];\n    |                    ^ consider giving this closure parameter a type\n \n-error: aborting due to 3 previous errors\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-52432.rs:7:10\n+   |\n+LL |     [(); &(static || {}) as *const _ as usize];\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0282, E0697.\n-For more information about an error, try `rustc --explain E0282`.\n+Some errors have detailed explanations: E0080, E0282, E0697.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "6ac3eb53cb319f533712083153e327aa016f8150", "filename": "src/test/ui/issues/issue-69602-type-err-during-codegen-ice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs?ref=38d38349f3c6aa86adfc2e32384c666ca8844b92", "patch": "@@ -19,4 +19,5 @@ impl TraitB for B { //~ ERROR not all trait items implemented, missing: `MyA`\n \n fn main() {\n     let _ = [0; B::VALUE];\n+    //~^ ERROR constant expression depends on a generic parameter\n }"}, {"sha": "175e6b0eaa0dd9b902bde2452d47aa7f31886125", "filename": "src/test/ui/issues/issue-69602-type-err-during-codegen-ice.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38d38349f3c6aa86adfc2e32384c666ca8844b92/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr?ref=38d38349f3c6aa86adfc2e32384c666ca8844b92", "patch": "@@ -13,7 +13,15 @@ LL |     type MyA: TraitA;\n LL | impl TraitB for B {\n    | ^^^^^^^^^^^^^^^^^ missing `MyA` in implementation\n \n-error: aborting due to 2 previous errors\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-69602-type-err-during-codegen-ice.rs:21:17\n+   |\n+LL |     let _ = [0; B::VALUE];\n+   |                 ^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0046, E0437.\n For more information about an error, try `rustc --explain E0046`."}]}