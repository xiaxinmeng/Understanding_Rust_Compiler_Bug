{"sha": "9d94ffad44f2b250e498f162cd498aed62877c8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkOTRmZmFkNDRmMmIyNTBlNDk4ZjE2MmNkNDk4YWVkNjI4NzdjOGU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-01T11:23:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-01T11:28:50Z"}, "message": "Place cursor correctly when completing assoc fns with self", "tree": {"sha": "0a08b79f8fb8f5da53e5d700d827d325cd326178", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a08b79f8fb8f5da53e5d700d827d325cd326178"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d94ffad44f2b250e498f162cd498aed62877c8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d94ffad44f2b250e498f162cd498aed62877c8e", "html_url": "https://github.com/rust-lang/rust/commit/9d94ffad44f2b250e498f162cd498aed62877c8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d94ffad44f2b250e498f162cd498aed62877c8e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02955661a0e8b39fd0b887b245f0e1284ea8f504", "url": "https://api.github.com/repos/rust-lang/rust/commits/02955661a0e8b39fd0b887b245f0e1284ea8f504", "html_url": "https://github.com/rust-lang/rust/commit/02955661a0e8b39fd0b887b245f0e1284ea8f504"}], "stats": {"total": 95, "additions": 64, "deletions": 31}, "files": [{"sha": "bc23bea3fafa8266e7d8adea49883ef8e7909dd1", "filename": "crates/completion/src/completions/qualified_path.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9d94ffad44f2b250e498f162cd498aed62877c8e/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d94ffad44f2b250e498f162cd498aed62877c8e/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=9d94ffad44f2b250e498f162cd498aed62877c8e", "patch": "@@ -353,10 +353,10 @@ impl S {\n fn foo() { let _ = S::<|> }\n \"#,\n             expect![[r#\"\n-                ct C   const C: i32 = 42;\n-                ta T   type T = i32;\n-                fn a() fn a()\n-                me b() fn b(&self)\n+                ct C    const C: i32 = 42;\n+                ta T    type T = i32;\n+                fn a()  fn a()\n+                me b(\u2026) fn b(&self)\n             \"#]],\n         );\n     }\n@@ -503,14 +503,14 @@ trait Sub: Super {\n fn foo<T: Sub>() { T::<|> }\n \"#,\n             expect![[r#\"\n-                ct C2          const C2: ();\n-                ct CONST       const CONST: u8;\n-                ta SubTy       type SubTy;\n-                ta Ty          type Ty;\n-                fn func()      fn func()\n-                me method()    fn method(&self)\n-                fn subfunc()   fn subfunc()\n-                me submethod() fn submethod(&self)\n+                ct C2           const C2: ();\n+                ct CONST        const CONST: u8;\n+                ta SubTy        type SubTy;\n+                ta Ty           type Ty;\n+                fn func()       fn func()\n+                me method(\u2026)    fn method(&self)\n+                fn subfunc()    fn subfunc()\n+                me submethod(\u2026) fn submethod(&self)\n             \"#]],\n         );\n     }\n@@ -543,14 +543,14 @@ impl<T> Sub for Wrap<T> {\n }\n \"#,\n             expect![[r#\"\n-                ct C2          const C2: () = ();\n-                ct CONST       const CONST: u8 = 0;\n-                ta SubTy       type SubTy;\n-                ta Ty          type Ty;\n-                fn func()      fn func()\n-                me method()    fn method(&self)\n-                fn subfunc()   fn subfunc()\n-                me submethod() fn submethod(&self)\n+                ct C2           const C2: () = ();\n+                ct CONST        const CONST: u8 = 0;\n+                ta SubTy        type SubTy;\n+                ta Ty           type Ty;\n+                fn func()       fn func()\n+                me method(\u2026)    fn method(&self)\n+                fn subfunc()    fn subfunc()\n+                me submethod(\u2026) fn submethod(&self)\n             \"#]],\n         );\n     }"}, {"sha": "ce8718bd542de50ae2961f870c9f8db1989b90c3", "filename": "crates/completion/src/render/builder_ext.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d94ffad44f2b250e498f162cd498aed62877c8e/crates%2Fcompletion%2Fsrc%2Frender%2Fbuilder_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d94ffad44f2b250e498f162cd498aed62877c8e/crates%2Fcompletion%2Fsrc%2Frender%2Fbuilder_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fbuilder_ext.rs?ref=9d94ffad44f2b250e498f162cd498aed62877c8e", "patch": "@@ -5,6 +5,7 @@ use test_utils::mark;\n \n use crate::{item::Builder, CompletionContext};\n \n+#[derive(Debug)]\n pub(super) enum Params {\n     Named(Vec<String>),\n     Anonymous(usize),"}, {"sha": "00e3eb203e3ac4bb5bc3f0055d325d568feef873", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 42, "deletions": 11, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/9d94ffad44f2b250e498f162cd498aed62877c8e/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d94ffad44f2b250e498f162cd498aed62877c8e/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=9d94ffad44f2b250e498f162cd498aed62877c8e", "patch": "@@ -2,6 +2,7 @@\n \n use hir::{HasSource, Type};\n use syntax::{ast::Fn, display::function_declaration};\n+use test_utils::mark;\n \n use crate::{\n     item::{CompletionItem, CompletionItemKind, CompletionKind, ImportToAdd},\n@@ -67,24 +68,32 @@ impl<'a> FunctionRender<'a> {\n     }\n \n     fn params(&self) -> Params {\n+        let ast_params = match self.ast_node.param_list() {\n+            Some(it) => it,\n+            None => return Params::Named(Vec::new()),\n+        };\n+\n+        let mut params_pats = Vec::new();\n         let params_ty = if self.ctx.completion.dot_receiver.is_some() {\n             self.func.method_params(self.ctx.db()).unwrap_or_default()\n         } else {\n+            if let Some(s) = ast_params.self_param() {\n+                mark::hit!(parens_for_method_call_as_assoc_fn);\n+                params_pats.push(Some(s.to_string()));\n+            }\n             self.func.assoc_fn_params(self.ctx.db())\n         };\n-        let params = self\n-            .ast_node\n-            .param_list()\n+        params_pats\n+            .extend(ast_params.params().into_iter().map(|it| it.pat().map(|it| it.to_string())));\n+\n+        let params = params_pats\n             .into_iter()\n-            .flat_map(|it| it.params())\n             .zip(params_ty)\n-            .flat_map(|(it, param_ty)| {\n-                if let Some(pat) = it.pat() {\n-                    let name = pat.to_string();\n-                    let arg = name.trim_start_matches(\"mut \").trim_start_matches('_');\n-                    return Some(self.add_arg(arg, param_ty.ty()));\n-                }\n-                None\n+            .flat_map(|(pat, param_ty)| {\n+                let pat = pat?;\n+                let name = pat.to_string();\n+                let arg = name.trim_start_matches(\"mut \").trim_start_matches('_');\n+                Some(self.add_arg(arg, param_ty.ty()))\n             })\n             .collect();\n         Params::Named(params)\n@@ -176,6 +185,28 @@ fn bar(s: &S) {\n         );\n     }\n \n+    #[test]\n+    fn parens_for_method_call_as_assoc_fn() {\n+        mark::check!(parens_for_method_call_as_assoc_fn);\n+        check_edit(\n+            \"foo\",\n+            r#\"\n+struct S;\n+impl S {\n+    fn foo(&self) {}\n+}\n+fn main() { S::f<|> }\n+\"#,\n+            r#\"\n+struct S;\n+impl S {\n+    fn foo(&self) {}\n+}\n+fn main() { S::foo(${1:&self})$0 }\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn suppress_arg_snippets() {\n         mark::check!(suppress_arg_snippets);"}, {"sha": "4500050f1bdb0c2ec54e498cde96c03bc238f923", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d94ffad44f2b250e498f162cd498aed62877c8e/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d94ffad44f2b250e498f162cd498aed62877c8e/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=9d94ffad44f2b250e498f162cd498aed62877c8e", "patch": "@@ -806,6 +806,7 @@ impl From<Mutability> for Access {\n     }\n }\n \n+#[derive(Debug)]\n pub struct Param {\n     ty: Type,\n }"}]}