{"sha": "728f3976f0dc0efee8f686d7ec7ecf2d3e7d9d6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyOGYzOTc2ZjBkYzBlZmVlOGY2ODZkN2VjN2VjZjJkM2U3ZDlkNmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-21T16:10:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-21T16:10:03Z"}, "message": "Auto merge of #6771 - MortenLohne:master, r=flip1995\n\nFix FP in inherent_to_string when the function has generic parameters\n\nMinimal example of the false positive:\n````\nstruct G;\n\nimpl G {\n    fn to_string<const _N: usize>(&self) -> String {\n        \"G.to_string()\".to_string()\n    }\n}\n\nfn main() {\n    let g = G;\n    g.to_string::<1>();\n}\n````\nClippy emits an `inherent_to_string` warning, and suggests that we implement `Display` for `G` instead. However, this is not possible, since the generic parameter _N only exists in this function, not in `G` itself. This particular example uses const generics, which is where the issue is most likely to come up, but this PR skips the lint if the `to_string` function has any kind of generic parameters.\n\nchangelog: Fix FP in `inherent_to_string`", "tree": {"sha": "8c54216edcaf586f99f1993e688836bb96b14612", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c54216edcaf586f99f1993e688836bb96b14612"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/728f3976f0dc0efee8f686d7ec7ecf2d3e7d9d6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/728f3976f0dc0efee8f686d7ec7ecf2d3e7d9d6d", "html_url": "https://github.com/rust-lang/rust/commit/728f3976f0dc0efee8f686d7ec7ecf2d3e7d9d6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/728f3976f0dc0efee8f686d7ec7ecf2d3e7d9d6d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "208e95781b7c12e85e912e76a0d2d3f41846e48e", "url": "https://api.github.com/repos/rust-lang/rust/commits/208e95781b7c12e85e912e76a0d2d3f41846e48e", "html_url": "https://github.com/rust-lang/rust/commit/208e95781b7c12e85e912e76a0d2d3f41846e48e"}, {"sha": "19a377510c3de9a7404f690d52a5de761ce2aafd", "url": "https://api.github.com/repos/rust-lang/rust/commits/19a377510c3de9a7404f690d52a5de761ce2aafd", "html_url": "https://github.com/rust-lang/rust/commit/19a377510c3de9a7404f690d52a5de761ce2aafd"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "0b23cdaa9f0a18d6c4e03fc137a7bcb9a88bf778", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/728f3976f0dc0efee8f686d7ec7ecf2d3e7d9d6d/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728f3976f0dc0efee8f686d7ec7ecf2d3e7d9d6d/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=728f3976f0dc0efee8f686d7ec7ecf2d3e7d9d6d", "patch": "@@ -106,6 +106,7 @@ impl<'tcx> LateLintPass<'tcx> for InherentToString {\n             let decl = &signature.decl;\n             if decl.implicit_self.has_implicit_self();\n             if decl.inputs.len() == 1;\n+            if impl_item.generics.params.is_empty();\n \n             // Check if return type is String\n             if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym::string_type);"}, {"sha": "6e65fdbd04e7dafc7acfae04f81d757218b2bb9c", "filename": "tests/ui/inherent_to_string.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/728f3976f0dc0efee8f686d7ec7ecf2d3e7d9d6d/tests%2Fui%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728f3976f0dc0efee8f686d7ec7ecf2d3e7d9d6d/tests%2Fui%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finherent_to_string.rs?ref=728f3976f0dc0efee8f686d7ec7ecf2d3e7d9d6d", "patch": "@@ -14,6 +14,7 @@ struct C;\n struct D;\n struct E;\n struct F;\n+struct G;\n \n impl A {\n     // Should be detected; emit warning\n@@ -73,6 +74,13 @@ impl F {\n     }\n }\n \n+impl G {\n+    // Should not be detected, as it does not match the function signature\n+    fn to_string<const _N: usize>(&self) -> String {\n+        \"G.to_string()\".to_string()\n+    }\n+}\n+\n fn main() {\n     let a = A;\n     a.to_string();\n@@ -93,4 +101,7 @@ fn main() {\n \n     let f = F;\n     f.to_string(1);\n+\n+    let g = G;\n+    g.to_string::<1>();\n }"}, {"sha": "f5fcc193b4d8a2332af013451b679751b0629d68", "filename": "tests/ui/inherent_to_string.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/728f3976f0dc0efee8f686d7ec7ecf2d3e7d9d6d/tests%2Fui%2Finherent_to_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/728f3976f0dc0efee8f686d7ec7ecf2d3e7d9d6d/tests%2Fui%2Finherent_to_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finherent_to_string.stderr?ref=728f3976f0dc0efee8f686d7ec7ecf2d3e7d9d6d", "patch": "@@ -1,5 +1,5 @@\n error: implementation of inherent method `to_string(&self) -> String` for type `A`\n-  --> $DIR/inherent_to_string.rs:20:5\n+  --> $DIR/inherent_to_string.rs:21:5\n    |\n LL | /     fn to_string(&self) -> String {\n LL | |         \"A.to_string()\".to_string()\n@@ -10,7 +10,7 @@ LL | |     }\n    = help: implement trait `Display` for type `A` instead\n \n error: type `C` implements inherent method `to_string(&self) -> String` which shadows the implementation of `Display`\n-  --> $DIR/inherent_to_string.rs:44:5\n+  --> $DIR/inherent_to_string.rs:45:5\n    |\n LL | /     fn to_string(&self) -> String {\n LL | |         \"C.to_string()\".to_string()"}]}