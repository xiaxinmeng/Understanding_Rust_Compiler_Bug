{"sha": "df7899e47a83fb5544d09d2db9405762d3ce29b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNzg5OWU0N2E4M2ZiNTU0NGQwOWQyZGI5NDA1NzYyZDNjZTI5Yjc=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-01T14:41:29Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-01T14:41:29Z"}, "message": "Add unwrap block assist #4156\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "3a9ad151b5ce6688ae617071bc2a04dd68a9078b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a9ad151b5ce6688ae617071bc2a04dd68a9078b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df7899e47a83fb5544d09d2db9405762d3ce29b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df7899e47a83fb5544d09d2db9405762d3ce29b7", "html_url": "https://github.com/rust-lang/rust/commit/df7899e47a83fb5544d09d2db9405762d3ce29b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df7899e47a83fb5544d09d2db9405762d3ce29b7/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc34162450797f5756ce2b44f1a3fe73d8e2dce4", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc34162450797f5756ce2b44f1a3fe73d8e2dce4", "html_url": "https://github.com/rust-lang/rust/commit/dc34162450797f5756ce2b44f1a3fe73d8e2dce4"}], "stats": {"total": 69, "additions": 23, "deletions": 46}, "files": [{"sha": "71d6d462b62f033ad450e665be97b3c10f8a75de", "filename": "crates/ra_assists/src/handlers/unwrap_block.rs", "status": "modified", "additions": 23, "deletions": 46, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/df7899e47a83fb5544d09d2db9405762d3ce29b7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7899e47a83fb5544d09d2db9405762d3ce29b7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=df7899e47a83fb5544d09d2db9405762d3ce29b7", "patch": "@@ -1,8 +1,8 @@\n use crate::{Assist, AssistCtx, AssistId};\n \n-use ast::LoopBodyOwner;\n+use ast::{BlockExpr, Expr, LoopBodyOwner};\n use ra_fmt::unwrap_trivial_block;\n-use ra_syntax::{ast, AstNode};\n+use ra_syntax::{ast, AstNode, TextRange};\n \n // Assist: unwrap_block\n //\n@@ -26,24 +26,14 @@ pub(crate) fn unwrap_block(ctx: AssistCtx) -> Option<Assist> {\n         // if expression\n         let mut expr_to_unwrap: Option<ast::Expr> = None;\n         for block_expr in if_expr.blocks() {\n-            if let Some(block) = block_expr.block() {\n-                let cursor_in_range =\n-                    block.l_curly_token()?.text_range().contains_range(ctx.frange.range);\n-\n-                if cursor_in_range {\n-                    let exprto = unwrap_trivial_block(block_expr);\n-                    expr_to_unwrap = Some(exprto);\n-                    break;\n-                }\n+            if let Some(expr) = excract_expr(ctx.frange.range, block_expr) {\n+                expr_to_unwrap = Some(expr);\n+                break;\n             }\n         }\n         let expr_to_unwrap = expr_to_unwrap?;\n         // Find if we are in a else if block\n-        let ancestor = ctx\n-            .sema\n-            .ancestors_with_macros(if_expr.syntax().clone())\n-            .skip(1)\n-            .find_map(ast::IfExpr::cast);\n+        let ancestor = if_expr.syntax().ancestors().skip(1).find_map(ast::IfExpr::cast);\n \n         if let Some(ancestor) = ancestor {\n             Some((ast::Expr::IfExpr(ancestor), expr_to_unwrap))\n@@ -53,42 +43,18 @@ pub(crate) fn unwrap_block(ctx: AssistCtx) -> Option<Assist> {\n     } else if let Some(for_expr) = ctx.find_node_at_offset::<ast::ForExpr>() {\n         // for expression\n         let block_expr = for_expr.loop_body()?;\n-        let block = block_expr.block()?;\n-        let cursor_in_range = block.l_curly_token()?.text_range().contains_range(ctx.frange.range);\n-\n-        if cursor_in_range {\n-            let expr_to_unwrap = unwrap_trivial_block(block_expr);\n-\n-            Some((ast::Expr::ForExpr(for_expr), expr_to_unwrap))\n-        } else {\n-            None\n-        }\n+        excract_expr(ctx.frange.range, block_expr)\n+            .map(|expr_to_unwrap| (ast::Expr::ForExpr(for_expr), expr_to_unwrap))\n     } else if let Some(while_expr) = ctx.find_node_at_offset::<ast::WhileExpr>() {\n         // while expression\n         let block_expr = while_expr.loop_body()?;\n-        let block = block_expr.block()?;\n-        let cursor_in_range = block.l_curly_token()?.text_range().contains_range(ctx.frange.range);\n-\n-        if cursor_in_range {\n-            let expr_to_unwrap = unwrap_trivial_block(block_expr);\n-\n-            Some((ast::Expr::WhileExpr(while_expr), expr_to_unwrap))\n-        } else {\n-            None\n-        }\n+        excract_expr(ctx.frange.range, block_expr)\n+            .map(|expr_to_unwrap| (ast::Expr::WhileExpr(while_expr), expr_to_unwrap))\n     } else if let Some(loop_expr) = ctx.find_node_at_offset::<ast::LoopExpr>() {\n         // loop expression\n         let block_expr = loop_expr.loop_body()?;\n-        let block = block_expr.block()?;\n-        let cursor_in_range = block.l_curly_token()?.text_range().contains_range(ctx.frange.range);\n-\n-        if cursor_in_range {\n-            let expr_to_unwrap = unwrap_trivial_block(block_expr);\n-\n-            Some((ast::Expr::LoopExpr(loop_expr), expr_to_unwrap))\n-        } else {\n-            None\n-        }\n+        excract_expr(ctx.frange.range, block_expr)\n+            .map(|expr_to_unwrap| (ast::Expr::LoopExpr(loop_expr), expr_to_unwrap))\n     } else {\n         None\n     };\n@@ -114,6 +80,17 @@ pub(crate) fn unwrap_block(ctx: AssistCtx) -> Option<Assist> {\n     })\n }\n \n+fn excract_expr(cursor_range: TextRange, block_expr: BlockExpr) -> Option<Expr> {\n+    let block = block_expr.block()?;\n+    let cursor_in_range = block.l_curly_token()?.text_range().contains_range(cursor_range);\n+\n+    if cursor_in_range {\n+        Some(unwrap_trivial_block(block_expr))\n+    } else {\n+        None\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::helpers::{check_assist, check_assist_not_applicable};"}]}