{"sha": "69c66286a9a3240309cc5474478ad0a2186e2bce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YzY2Mjg2YTlhMzI0MDMwOWNjNTQ3NDQ3OGFkMGEyMTg2ZTJiY2U=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-09T14:46:12Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-19T20:17:54Z"}, "message": "Reintroduce special pretty-printing for `$crate` when it's necessary for proc macros", "tree": {"sha": "3727676a66520a20a27bd2769c9cd21ffa03fe04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3727676a66520a20a27bd2769c9cd21ffa03fe04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69c66286a9a3240309cc5474478ad0a2186e2bce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69c66286a9a3240309cc5474478ad0a2186e2bce", "html_url": "https://github.com/rust-lang/rust/commit/69c66286a9a3240309cc5474478ad0a2186e2bce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69c66286a9a3240309cc5474478ad0a2186e2bce/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bc67da378db40b23a426ea6384b2660c29a002c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc67da378db40b23a426ea6384b2660c29a002c", "html_url": "https://github.com/rust-lang/rust/commit/2bc67da378db40b23a426ea6384b2660c29a002c"}], "stats": {"total": 417, "additions": 403, "deletions": 14}, "files": [{"sha": "6cfa9f95082e0829e3c8d06429eea73bb20d509f", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/69c66286a9a3240309cc5474478ad0a2186e2bce/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c66286a9a3240309cc5474478ad0a2186e2bce/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=69c66286a9a3240309cc5474478ad0a2186e2bce", "patch": "@@ -1035,4 +1035,15 @@ impl<'a, 'b> Visitor<'a> for BuildReducedGraphVisitor<'a, 'b> {\n         }\n         visit::walk_attribute(self, attr);\n     }\n+\n+    fn visit_ident(&mut self, ident: Ident) {\n+        if ident.name == keywords::DollarCrate.name() {\n+            let name = match self.resolver.resolve_crate_root(ident).kind {\n+                ModuleKind::Def(_, name) if name != keywords::Invalid.name() => name,\n+                _ => keywords::Crate.name(),\n+            };\n+            ident.span.ctxt().set_dollar_crate_name(name);\n+        }\n+        visit::walk_ident(self, ident);\n+    }\n }"}, {"sha": "5e7707f4e5c3c4dc45bae63b9238a3201b20281f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/69c66286a9a3240309cc5474478ad0a2186e2bce/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c66286a9a3240309cc5474478ad0a2186e2bce/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=69c66286a9a3240309cc5474478ad0a2186e2bce", "patch": "@@ -724,7 +724,11 @@ pub trait PrintState<'a> {\n                 self.writer().word(\"::\")?\n             }\n             if segment.ident.name != keywords::PathRoot.name() {\n-                self.writer().word(segment.ident.as_str().get())?;\n+                if segment.ident.name == keywords::DollarCrate.name() {\n+                    self.print_dollar_crate(segment.ident)?;\n+                } else {\n+                    self.writer().word(segment.ident.as_str().get())?;\n+                }\n             }\n         }\n         Ok(())\n@@ -837,6 +841,21 @@ pub trait PrintState<'a> {\n     }\n \n     fn nbsp(&mut self) -> io::Result<()> { self.writer().word(\" \") }\n+\n+    // AST pretty-printer is used as a fallback for turning AST structures into token streams for\n+    // proc macros. Additionally, proc macros may stringify their input and expect it survive the\n+    // stringification (especially true for proc macro derives written between Rust 1.15 and 1.30).\n+    // So we need to somehow pretty-print `$crate` in paths in a way preserving at least some of\n+    // its hygiene data, most importantly name of the crate it refers to.\n+    // As a result we print `$crate` as `crate` if it refers to the local crate\n+    // and as `::other_crate_name` if it refers to some other crate.\n+    fn print_dollar_crate(&mut self, ident: ast::Ident) -> io::Result<()> {\n+        let name = ident.span.ctxt().dollar_crate_name();\n+        if !ast::Ident::with_empty_ctxt(name).is_path_segment_keyword() {\n+            self.writer().word(\"::\")?;\n+        }\n+        self.writer().word(name.as_str().get())\n+    }\n }\n \n impl<'a> PrintState<'a> for State<'a> {\n@@ -2446,7 +2465,11 @@ impl<'a> State<'a> {\n                           -> io::Result<()>\n     {\n         if segment.ident.name != keywords::PathRoot.name() {\n-            self.print_ident(segment.ident)?;\n+            if segment.ident.name == keywords::DollarCrate.name() {\n+                self.print_dollar_crate(segment.ident)?;\n+            } else {\n+                self.print_ident(segment.ident)?;\n+            }\n             if let Some(ref args) = segment.args {\n                 self.print_generic_args(args, colons_before_params)?;\n             }"}, {"sha": "3dc884a94c0dc200be3bd9b4410b895777a79bf6", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/69c66286a9a3240309cc5474478ad0a2186e2bce/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c66286a9a3240309cc5474478ad0a2186e2bce/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=69c66286a9a3240309cc5474478ad0a2186e2bce", "patch": "@@ -18,11 +18,11 @@\n use GLOBALS;\n use Span;\n use edition::{Edition, DEFAULT_EDITION};\n-use symbol::Symbol;\n+use symbol::{keywords, Symbol};\n \n use serialize::{Encodable, Decodable, Encoder, Decoder};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use std::fmt;\n+use std::{fmt, mem};\n \n /// A SyntaxContext represents a chain of macro expansions (represented by marks).\n #[derive(Clone, Copy, PartialEq, Eq, Default, PartialOrd, Ord, Hash)]\n@@ -37,6 +37,8 @@ struct SyntaxContextData {\n     opaque: SyntaxContext,\n     // This context, but with all transparent marks filtered away.\n     opaque_and_semitransparent: SyntaxContext,\n+    // Name of the crate to which `$crate` with this context would resolve.\n+    dollar_crate_name: Symbol,\n }\n \n /// A mark is a unique id associated with a macro expansion.\n@@ -200,6 +202,7 @@ impl HygieneData {\n                 prev_ctxt: SyntaxContext(0),\n                 opaque: SyntaxContext(0),\n                 opaque_and_semitransparent: SyntaxContext(0),\n+                dollar_crate_name: keywords::DollarCrate.name(),\n             }],\n             markings: FxHashMap::default(),\n             default_edition: DEFAULT_EDITION,\n@@ -258,6 +261,7 @@ impl SyntaxContext {\n                 prev_ctxt: SyntaxContext::empty(),\n                 opaque: SyntaxContext::empty(),\n                 opaque_and_semitransparent: SyntaxContext::empty(),\n+                dollar_crate_name: keywords::DollarCrate.name(),\n             });\n             SyntaxContext(data.syntax_contexts.len() as u32 - 1)\n         })\n@@ -324,6 +328,7 @@ impl SyntaxContext {\n                         prev_ctxt,\n                         opaque: new_opaque,\n                         opaque_and_semitransparent: new_opaque,\n+                        dollar_crate_name: keywords::DollarCrate.name(),\n                     });\n                     new_opaque\n                 });\n@@ -341,6 +346,7 @@ impl SyntaxContext {\n                         prev_ctxt,\n                         opaque,\n                         opaque_and_semitransparent: new_opaque_and_semitransparent,\n+                        dollar_crate_name: keywords::DollarCrate.name(),\n                     });\n                     new_opaque_and_semitransparent\n                 });\n@@ -356,6 +362,7 @@ impl SyntaxContext {\n                     prev_ctxt,\n                     opaque,\n                     opaque_and_semitransparent,\n+                    dollar_crate_name: keywords::DollarCrate.name(),\n                 });\n                 new_opaque_and_semitransparent_and_transparent\n             })\n@@ -510,6 +517,21 @@ impl SyntaxContext {\n     pub fn outer(self) -> Mark {\n         HygieneData::with(|data| data.syntax_contexts[self.0 as usize].outer_mark)\n     }\n+\n+    pub fn dollar_crate_name(self) -> Symbol {\n+        HygieneData::with(|data| data.syntax_contexts[self.0 as usize].dollar_crate_name)\n+    }\n+\n+    pub fn set_dollar_crate_name(self, dollar_crate_name: Symbol) {\n+        HygieneData::with(|data| {\n+            let prev_dollar_crate_name = mem::replace(\n+                &mut data.syntax_contexts[self.0 as usize].dollar_crate_name, dollar_crate_name\n+            );\n+            assert!(dollar_crate_name == prev_dollar_crate_name ||\n+                    prev_dollar_crate_name == keywords::DollarCrate.name(),\n+                    \"$crate name is reset for a syntax context\");\n+        })\n+    }\n }\n \n impl fmt::Debug for SyntaxContext {"}, {"sha": "3b01ab3a47b6a30ada6d0ac8dc2d936d208f7dda", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69c66286a9a3240309cc5474478ad0a2186e2bce/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/69c66286a9a3240309cc5474478ad0a2186e2bce/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=69c66286a9a3240309cc5474478ad0a2186e2bce", "patch": "@@ -39,8 +39,8 @@\n \n \n \n-                  ((::fmt::format as\n-                       for<'r> fn(std::fmt::Arguments<'r>) -> std::string::String {std::fmt::format})(((<::fmt::Arguments>::new_v1\n+                  (($crate::fmt::format as\n+                       for<'r> fn(std::fmt::Arguments<'r>) -> std::string::String {std::fmt::format})(((<$crate::fmt::Arguments>::new_v1\n                                                                                                            as\n                                                                                                            fn(&[&str], &[std::fmt::ArgumentV1<'_>]) -> std::fmt::Arguments<'_> {std::fmt::Arguments<'_>::new_v1})((&([(\"test\"\n                                                                                                                                                                                                                           as"}, {"sha": "8f15a2b975bf342567e64c121c7cdd3cfac4b0f3", "filename": "src/test/ui/proc-macro/auxiliary/dollar-crate-external.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/69c66286a9a3240309cc5474478ad0a2186e2bce/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fdollar-crate-external.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c66286a9a3240309cc5474478ad0a2186e2bce/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fdollar-crate-external.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fdollar-crate-external.rs?ref=69c66286a9a3240309cc5474478ad0a2186e2bce", "patch": "@@ -0,0 +1,16 @@\n+pub type S = u8;\n+\n+#[macro_export]\n+macro_rules! external {\n+    () => {\n+        dollar_crate::m! {\n+            struct M($crate::S);\n+        }\n+\n+        #[dollar_crate::a]\n+        struct A($crate::S);\n+\n+        #[derive(dollar_crate::d)]\n+        struct D($crate::S);\n+    };\n+}"}, {"sha": "d0ea850d4e3231a07e048d0c3e4b36b087907062", "filename": "src/test/ui/proc-macro/auxiliary/dollar-crate.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/69c66286a9a3240309cc5474478ad0a2186e2bce/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fdollar-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c66286a9a3240309cc5474478ad0a2186e2bce/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fdollar-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fdollar-crate.rs?ref=69c66286a9a3240309cc5474478ad0a2186e2bce", "patch": "@@ -7,6 +7,22 @@ extern crate proc_macro;\n use proc_macro::TokenStream;\n \n #[proc_macro]\n-pub fn normalize(input: TokenStream) -> TokenStream {\n+pub fn m(input: TokenStream) -> TokenStream {\n+    println!(\"PROC MACRO INPUT (PRETTY-PRINTED): {}\", input);\n+    println!(\"PROC MACRO INPUT: {:#?}\", input);\n+    input.into_iter().collect()\n+}\n+\n+#[proc_macro_attribute]\n+pub fn a(_args: TokenStream, input: TokenStream) -> TokenStream {\n+    println!(\"ATTRIBUTE INPUT (PRETTY-PRINTED): {}\", input);\n+    println!(\"ATTRIBUTE INPUT: {:#?}\", input);\n+    input.into_iter().collect()\n+}\n+\n+#[proc_macro_derive(d)]\n+pub fn d(input: TokenStream) -> TokenStream {\n+    println!(\"DERIVE INPUT (PRETTY-PRINTED): {}\", input);\n+    println!(\"DERIVE INPUT: {:#?}\", input);\n     input.into_iter().collect()\n }"}, {"sha": "3f4a01cb2dca98e041d3e8cdd5026798455ef813", "filename": "src/test/ui/proc-macro/dollar-crate.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/69c66286a9a3240309cc5474478ad0a2186e2bce/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c66286a9a3240309cc5474478ad0a2186e2bce/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.rs?ref=69c66286a9a3240309cc5474478ad0a2186e2bce", "patch": "@@ -1,16 +1,34 @@\n-// compile-pass\n+// edition:2018\n+// compile-flags:--extern dollar_crate --extern dollar_crate_external\n // aux-build:dollar-crate.rs\n+// aux-build:dollar-crate-external.rs\n \n-extern crate dollar_crate;\n+// Anonymize unstable non-dummy spans while still showing dummy spans `0..0`.\n+// normalize-stdout-test \"bytes\\([^0]\\w*\\.\\.(\\w+)\\)\" -> \"bytes(LO..$1)\"\n+// normalize-stdout-test \"bytes\\((\\w+)\\.\\.[^0]\\w*\\)\" -> \"bytes($1..HI)\"\n \n type S = u8;\n \n-macro_rules! check { () => {\n-    dollar_crate::normalize! {\n-        type A = $crate::S;\n+mod local {\n+    macro_rules! local {\n+        () => {\n+            dollar_crate::m! {\n+                struct M($crate::S);\n+            }\n+\n+            #[dollar_crate::a]\n+            struct A($crate::S);\n+\n+            #[derive(dollar_crate::d)]\n+            struct D($crate::S); //~ ERROR the name `D` is defined multiple times\n+        };\n     }\n-}}\n \n-check!();\n+    local!();\n+}\n+\n+mod external {\n+    dollar_crate_external::external!(); //~ ERROR the name `D` is defined multiple times\n+}\n \n fn main() {}"}, {"sha": "171562a5aff20520926c7979f93bbad2efb18a1d", "filename": "src/test/ui/proc-macro/dollar-crate.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/69c66286a9a3240309cc5474478ad0a2186e2bce/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69c66286a9a3240309cc5474478ad0a2186e2bce/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stderr?ref=69c66286a9a3240309cc5474478ad0a2186e2bce", "patch": "@@ -0,0 +1,23 @@\n+error[E0428]: the name `D` is defined multiple times\n+  --> $DIR/dollar-crate.rs:23:13\n+   |\n+LL |             struct D($crate::S); //~ ERROR the name `D` is defined multiple times\n+   |             ^^^^^^^^^^^^^^^^^^^^ `D` redefined here\n+...\n+LL |     local!();\n+   |     --------- in this macro invocation\n+   |\n+   = note: `D` must be defined only once in the type namespace of this module\n+\n+error[E0428]: the name `D` is defined multiple times\n+  --> $DIR/dollar-crate.rs:31:5\n+   |\n+LL |     dollar_crate_external::external!(); //~ ERROR the name `D` is defined multiple times\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `D` redefined here\n+   |\n+   = note: `D` must be defined only once in the type namespace of this module\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0428`."}, {"sha": "8e254854e32e68ee914bb116e21f96712ed82bab", "filename": "src/test/ui/proc-macro/dollar-crate.stdout", "status": "added", "additions": 260, "deletions": 0, "changes": 260, "blob_url": "https://github.com/rust-lang/rust/blob/69c66286a9a3240309cc5474478ad0a2186e2bce/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/69c66286a9a3240309cc5474478ad0a2186e2bce/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout?ref=69c66286a9a3240309cc5474478ad0a2186e2bce", "patch": "@@ -0,0 +1,260 @@\n+PROC MACRO INPUT (PRETTY-PRINTED): struct M ( $crate :: S ) ;\n+PROC MACRO INPUT: TokenStream [\n+    Ident {\n+        ident: \"struct\",\n+        span: #2 bytes(LO..HI)\n+    },\n+    Ident {\n+        ident: \"M\",\n+        span: #2 bytes(LO..HI)\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"$crate\",\n+                span: #2 bytes(LO..HI)\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Joint,\n+                span: #2 bytes(LO..HI)\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: #2 bytes(LO..HI)\n+            },\n+            Ident {\n+                ident: \"S\",\n+                span: #2 bytes(LO..HI)\n+            }\n+        ],\n+        span: #2 bytes(LO..HI)\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: #2 bytes(LO..HI)\n+    }\n+]\n+ATTRIBUTE INPUT (PRETTY-PRINTED): struct A(crate::S);\n+ATTRIBUTE INPUT: TokenStream [\n+    Ident {\n+        ident: \"struct\",\n+        span: #0 bytes(0..0)\n+    },\n+    Ident {\n+        ident: \"A\",\n+        span: #0 bytes(0..0)\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"crate\",\n+                span: #0 bytes(0..0)\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Joint,\n+                span: #0 bytes(0..0)\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: #0 bytes(0..0)\n+            },\n+            Ident {\n+                ident: \"S\",\n+                span: #0 bytes(0..0)\n+            }\n+        ],\n+        span: #0 bytes(0..0)\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: #0 bytes(0..0)\n+    }\n+]\n+DERIVE INPUT (PRETTY-PRINTED): struct D(crate::S);\n+DERIVE INPUT: TokenStream [\n+    Ident {\n+        ident: \"struct\",\n+        span: #0 bytes(0..0)\n+    },\n+    Ident {\n+        ident: \"D\",\n+        span: #0 bytes(0..0)\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"crate\",\n+                span: #0 bytes(0..0)\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Joint,\n+                span: #0 bytes(0..0)\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: #0 bytes(0..0)\n+            },\n+            Ident {\n+                ident: \"S\",\n+                span: #0 bytes(0..0)\n+            }\n+        ],\n+        span: #0 bytes(0..0)\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: #0 bytes(0..0)\n+    }\n+]\n+PROC MACRO INPUT (PRETTY-PRINTED): struct M ( $crate :: S ) ;\n+PROC MACRO INPUT: TokenStream [\n+    Ident {\n+        ident: \"struct\",\n+        span: #10 bytes(LO..HI)\n+    },\n+    Ident {\n+        ident: \"M\",\n+        span: #10 bytes(LO..HI)\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"$crate\",\n+                span: #10 bytes(LO..HI)\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Joint,\n+                span: #10 bytes(LO..HI)\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: #10 bytes(LO..HI)\n+            },\n+            Ident {\n+                ident: \"S\",\n+                span: #10 bytes(LO..HI)\n+            }\n+        ],\n+        span: #10 bytes(LO..HI)\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: #10 bytes(LO..HI)\n+    }\n+]\n+ATTRIBUTE INPUT (PRETTY-PRINTED): struct A(::dollar_crate_external::S);\n+ATTRIBUTE INPUT: TokenStream [\n+    Ident {\n+        ident: \"struct\",\n+        span: #0 bytes(0..0)\n+    },\n+    Ident {\n+        ident: \"A\",\n+        span: #0 bytes(0..0)\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [\n+            Punct {\n+                ch: ':',\n+                spacing: Joint,\n+                span: #0 bytes(0..0)\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: #0 bytes(0..0)\n+            },\n+            Ident {\n+                ident: \"dollar_crate_external\",\n+                span: #0 bytes(0..0)\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Joint,\n+                span: #0 bytes(0..0)\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: #0 bytes(0..0)\n+            },\n+            Ident {\n+                ident: \"S\",\n+                span: #0 bytes(0..0)\n+            }\n+        ],\n+        span: #0 bytes(0..0)\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: #0 bytes(0..0)\n+    }\n+]\n+DERIVE INPUT (PRETTY-PRINTED): struct D(::dollar_crate_external::S);\n+DERIVE INPUT: TokenStream [\n+    Ident {\n+        ident: \"struct\",\n+        span: #0 bytes(0..0)\n+    },\n+    Ident {\n+        ident: \"D\",\n+        span: #0 bytes(0..0)\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [\n+            Punct {\n+                ch: ':',\n+                spacing: Joint,\n+                span: #0 bytes(0..0)\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: #0 bytes(0..0)\n+            },\n+            Ident {\n+                ident: \"dollar_crate_external\",\n+                span: #0 bytes(0..0)\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Joint,\n+                span: #0 bytes(0..0)\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: #0 bytes(0..0)\n+            },\n+            Ident {\n+                ident: \"S\",\n+                span: #0 bytes(0..0)\n+            }\n+        ],\n+        span: #0 bytes(0..0)\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: #0 bytes(0..0)\n+    }\n+]"}]}