{"sha": "efd619467df28b48b97250b2857b18a032b5dab6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZDYxOTQ2N2RmMjhiNDhiOTcyNTBiMjg1N2IxOGEwMzJiNWRhYjY=", "commit": {"author": {"name": "Palmer Cox", "email": "p@lmercox.com", "date": "2013-12-12T01:40:27Z"}, "committer": {"name": "\u201cPalmer", "email": "pcox@intelligent.net", "date": "2013-12-21T01:40:16Z"}, "message": "Remove remainder field from MutChunkIter\n\nThis field is no longer necessary now that #9629 is fixed since we can just\naccess the length of the remaining slice directly.", "tree": {"sha": "549956f3cf9bbbfc8d2cfa948ddf041b81df77d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/549956f3cf9bbbfc8d2cfa948ddf041b81df77d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efd619467df28b48b97250b2857b18a032b5dab6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efd619467df28b48b97250b2857b18a032b5dab6", "html_url": "https://github.com/rust-lang/rust/commit/efd619467df28b48b97250b2857b18a032b5dab6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efd619467df28b48b97250b2857b18a032b5dab6/comments", "author": null, "committer": null, "parents": [{"sha": "9d1de0b699a669d01ea5ecd3dea0424ab94db369", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d1de0b699a669d01ea5ecd3dea0424ab94db369", "html_url": "https://github.com/rust-lang/rust/commit/9d1de0b699a669d01ea5ecd3dea0424ab94db369"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "17e961723cfdc45eb703419cb2bd778c1e3fa2d1", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/efd619467df28b48b97250b2857b18a032b5dab6/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd619467df28b48b97250b2857b18a032b5dab6/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=efd619467df28b48b97250b2857b18a032b5dab6", "patch": "@@ -2127,8 +2127,7 @@ impl<'a,T> MutableVector<'a, T> for &'a mut [T] {\n     #[inline]\n     fn mut_chunks(self, chunk_size: uint) -> MutChunkIter<'a, T> {\n         assert!(chunk_size > 0);\n-        let len = self.len();\n-        MutChunkIter { v: self, chunk_size: chunk_size, remaining: len }\n+        MutChunkIter { v: self, chunk_size: chunk_size }\n     }\n \n     fn mut_shift_ref(&mut self) -> &'a mut T {\n@@ -2568,31 +2567,29 @@ impl<'a, T> DoubleEndedIterator<&'a mut [T]> for MutSplitIterator<'a, T> {\n /// the remainder.\n pub struct MutChunkIter<'a, T> {\n     priv v: &'a mut [T],\n-    priv chunk_size: uint,\n-    priv remaining: uint\n+    priv chunk_size: uint\n }\n \n impl<'a, T> Iterator<&'a mut [T]> for MutChunkIter<'a, T> {\n     #[inline]\n     fn next(&mut self) -> Option<&'a mut [T]> {\n-        if self.remaining == 0 {\n+        if self.v.len() == 0 {\n             None\n         } else {\n-            let sz = cmp::min(self.remaining, self.chunk_size);\n+            let sz = cmp::min(self.v.len(), self.chunk_size);\n             let tmp = util::replace(&mut self.v, &mut []);\n             let (head, tail) = tmp.mut_split_at(sz);\n             self.v = tail;\n-            self.remaining -= sz;\n             Some(head)\n         }\n     }\n \n     #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) {\n-        if self.remaining == 0 {\n+        if self.v.len() == 0 {\n             (0, Some(0))\n         } else {\n-            let (n, rem) = self.remaining.div_rem(&self.chunk_size);\n+            let (n, rem) = self.v.len().div_rem(&self.chunk_size);\n             let n = if rem > 0 { n + 1 } else { n };\n             (n, Some(n))\n         }\n@@ -2602,15 +2599,15 @@ impl<'a, T> Iterator<&'a mut [T]> for MutChunkIter<'a, T> {\n impl<'a, T> DoubleEndedIterator<&'a mut [T]> for MutChunkIter<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a mut [T]> {\n-        if self.remaining == 0 {\n+        if self.v.len() == 0 {\n             None\n         } else {\n-            let remainder = self.remaining % self.chunk_size;\n+            let remainder = self.v.len() % self.chunk_size;\n             let sz = if remainder != 0 { remainder } else { self.chunk_size };\n             let tmp = util::replace(&mut self.v, &mut []);\n-            let (head, tail) = tmp.mut_split_at(self.remaining - sz);\n+            let tmp_len = tmp.len();\n+            let (head, tail) = tmp.mut_split_at(tmp_len - sz);\n             self.v = head;\n-            self.remaining -= sz;\n             Some(tail)\n         }\n     }"}]}