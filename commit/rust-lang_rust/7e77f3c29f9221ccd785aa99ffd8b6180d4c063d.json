{"sha": "7e77f3c29f9221ccd785aa99ffd8b6180d4c063d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNzdmM2MyOWY5MjIxY2NkNzg1YWE5OWZmZDhiNjE4MGQ0YzA2M2Q=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-11T01:46:22Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-10-24T09:40:45Z"}, "message": "Update clippy for latest rustc changes\n\nSpecifically, this revises the clippy integration to utilize a new\ncallback to register its lints, as the prior editing of lint store in\nSession is no longer possible.", "tree": {"sha": "fc324709e260f06163910872ea4a36efdd74c70a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc324709e260f06163910872ea4a36efdd74c70a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e77f3c29f9221ccd785aa99ffd8b6180d4c063d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl2xcaUACgkQaTCGhp1Q\nZjd0BBAAp8PTyaUd3/d5d39UGqJkeLRUCdtH/fZUPm4NL8WXIb8h86xDyODfTqfI\nXlBDT6JZvLIBCWkOqwQwurwG1ZJDwyK1NcAQHdJhoJoLUfwg5ubi/7TJWIj/O/0k\nkZLjv20zuKXOHepMeBWnjyYhNkbt26cAnWxNFz9Zx0rtymAKJ2OIqgBc3G2Rx6qF\nRnBpjl3csZhSNpPEvtois0uwzz0JUYpS0PQwxnoi3O6vYv0d1F/EF8MKpiEc3Yhc\nZAR4WSH3baReic79NmhK+ybbCVBghYqaAmjXer/dnByh16ImcTcRWIGaqk/DyzlE\ngOQV0mA2oi14NVOyirzg8c7w4QAM3/BBDaE4XGSaeVhtUqpTSgQXT63xvAWgCYQH\nBx9oFJR8xMwhMveRY8tgZhxMMhEQgoqsQb3yBBssrSThwZWN5p92TA7rckTxOY4D\niUlsfQfSjpttF7mEx605n/axL9+dx9fvqJBWwAhkQjb25PF7PaU1TE2CuXWaPsjs\nY1v2G9N8sN9q1I7sPQnfrQW024pEHBuAGtMiXLn3YLTJPQ1eBrf+Uo7sO/b7gPM/\nMwyBzmeGqt8lqkyRK5cwt396ADCWCRYog2sjdlIW0C12JYKoSMfZHAzYWXzIXNTt\nI7sSeXrSdkzSSOuM9FE5KAit8bzk9ILoOUDfb1Z1MqK2fsM95/g=\n=YI8I\n-----END PGP SIGNATURE-----", "payload": "tree fc324709e260f06163910872ea4a36efdd74c70a\nparent 87536f00e32cd01392cebc7c39dc14e49766586b\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1570758382 -0400\ncommitter flip1995 <hello@philkrones.com> 1571910045 +0200\n\nUpdate clippy for latest rustc changes\n\nSpecifically, this revises the clippy integration to utilize a new\ncallback to register its lints, as the prior editing of lint store in\nSession is no longer possible.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e77f3c29f9221ccd785aa99ffd8b6180d4c063d", "html_url": "https://github.com/rust-lang/rust/commit/7e77f3c29f9221ccd785aa99ffd8b6180d4c063d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e77f3c29f9221ccd785aa99ffd8b6180d4c063d/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87536f00e32cd01392cebc7c39dc14e49766586b", "url": "https://api.github.com/repos/rust-lang/rust/commits/87536f00e32cd01392cebc7c39dc14e49766586b", "html_url": "https://github.com/rust-lang/rust/commit/87536f00e32cd01392cebc7c39dc14e49766586b"}], "stats": {"total": 2003, "additions": 1149, "deletions": 854}, "files": [{"sha": "3512972c55e6c47e3e0d1341e39bb69fcc387a9a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1122, "deletions": 795, "changes": 1917, "blob_url": "https://github.com/rust-lang/rust/blob/7e77f3c29f9221ccd785aa99ffd8b6180d4c063d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77f3c29f9221ccd785aa99ffd8b6180d4c063d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=7e77f3c29f9221ccd785aa99ffd8b6180d4c063d", "patch": "@@ -41,6 +41,9 @@ extern crate syntax_expand;\n #[allow(unused_extern_crates)]\n extern crate syntax_pos;\n \n+use rustc::lint::{self, LintId};\n+use rustc::session::Session;\n+use rustc_data_structures::fx::FxHashSet;\n use toml;\n \n /// Macro used to declare a Clippy lint.\n@@ -303,33 +306,20 @@ mod reexport {\n /// level (i.e `#![cfg_attr(...)]`) will still be expanded even when using a pre-expansion pass.\n ///\n /// Used in `./src/driver.rs`.\n-pub fn register_pre_expansion_lints(\n-    session: &rustc::session::Session,\n-    store: &mut rustc::lint::LintStore,\n-    conf: &Conf,\n-) {\n-    store.register_pre_expansion_pass(Some(session), true, false, box write::Write);\n-    store.register_pre_expansion_pass(\n-        Some(session),\n-        true,\n-        false,\n-        box redundant_field_names::RedundantFieldNames,\n-    );\n-    store.register_pre_expansion_pass(\n-        Some(session),\n-        true,\n-        false,\n-        box non_expressive_names::NonExpressiveNames {\n-            single_char_binding_names_threshold: conf.single_char_binding_names_threshold,\n-        },\n-    );\n-    store.register_pre_expansion_pass(Some(session), true, false, box attrs::DeprecatedCfgAttribute);\n-    store.register_pre_expansion_pass(Some(session), true, false, box dbg_macro::DbgMacro);\n+pub fn register_pre_expansion_lints(store: &mut rustc::lint::LintStore, conf: &Conf) {\n+    store.register_pre_expansion_pass(|| box write::Write);\n+    store.register_pre_expansion_pass(|| box redundant_field_names::RedundantFieldNames);\n+    let p = conf.single_char_binding_names_threshold;\n+    store.register_pre_expansion_pass(move || box non_expressive_names::NonExpressiveNames {\n+        single_char_binding_names_threshold: p,\n+    });\n+    store.register_pre_expansion_pass(|| box attrs::DeprecatedCfgAttribute);\n+    store.register_pre_expansion_pass(|| box dbg_macro::DbgMacro);\n }\n \n #[doc(hidden)]\n-pub fn read_conf(reg: &rustc_driver::plugin::Registry<'_>) -> Conf {\n-    match utils::conf::file_from_args(reg.args()) {\n+pub fn read_conf(args: &[syntax::ast::NestedMetaItem], sess: &Session) -> Conf {\n+    match utils::conf::file_from_args(args) {\n         Ok(file_name) => {\n             // if the user specified a file, it must exist, otherwise default to `clippy.toml` but\n             // do not require the file to exist\n@@ -339,18 +329,16 @@ pub fn read_conf(reg: &rustc_driver::plugin::Registry<'_>) -> Conf {\n                 match utils::conf::lookup_conf_file() {\n                     Ok(path) => path,\n                     Err(error) => {\n-                        reg.sess\n-                            .struct_err(&format!(\"error finding Clippy's configuration file: {}\", error))\n+                        sess.struct_err(&format!(\"error finding Clippy's configuration file: {}\", error))\n                             .emit();\n                         None\n-                    },\n+                    }\n                 }\n             };\n \n             let file_name = file_name.map(|file_name| {\n                 if file_name.is_relative() {\n-                    reg.sess\n-                        .local_crate_source_file\n+                    sess.local_crate_source_file\n                         .as_ref()\n                         .and_then(|file| std::path::Path::new(&file).parent().map(std::path::Path::to_path_buf))\n                         .unwrap_or_default()\n@@ -364,24 +352,22 @@ pub fn read_conf(reg: &rustc_driver::plugin::Registry<'_>) -> Conf {\n \n             // all conf errors are non-fatal, we just use the default conf in case of error\n             for error in errors {\n-                reg.sess\n-                    .struct_err(&format!(\n-                        \"error reading Clippy's configuration file `{}`: {}\",\n-                        file_name.as_ref().and_then(|p| p.to_str()).unwrap_or(\"\"),\n-                        error\n-                    ))\n-                    .emit();\n+                sess.struct_err(&format!(\n+                    \"error reading Clippy's configuration file `{}`: {}\",\n+                    file_name.as_ref().and_then(|p| p.to_str()).unwrap_or(\"\"),\n+                    error\n+                ))\n+                .emit();\n             }\n \n             conf\n-        },\n+        }\n         Err((err, span)) => {\n-            reg.sess\n-                .struct_span_err(span, err)\n+            sess.struct_span_err(span, err)\n                 .span_note(span, \"Clippy will use default configuration\")\n                 .emit();\n             toml::from_str(\"\").expect(\"we never error on empty config files\")\n-        },\n+        }\n     }\n }\n \n@@ -390,9 +376,8 @@ pub fn read_conf(reg: &rustc_driver::plugin::Registry<'_>) -> Conf {\n /// Used in `./src/driver.rs`.\n #[allow(clippy::too_many_lines)]\n #[rustfmt::skip]\n-pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Conf) {\n-    let mut store = reg.sess.lint_store.borrow_mut();\n-    register_removed_non_tool_lints(&mut store);\n+pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf) {\n+    register_removed_non_tool_lints(store);\n \n     // begin deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n     store.register_removed(\n@@ -449,778 +434,1120 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n     );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n-    reg.register_late_lint_pass(box serde_api::SerdeAPI);\n-    reg.register_early_lint_pass(box utils::internal_lints::ClippyLintsInternal);\n-    reg.register_late_lint_pass(box utils::internal_lints::CompilerLintFunctions::new());\n-    reg.register_late_lint_pass(box utils::internal_lints::LintWithoutLintPass::default());\n-    reg.register_late_lint_pass(box utils::internal_lints::OuterExpnDataPass);\n-    reg.register_late_lint_pass(box utils::inspector::DeepCodeInspector);\n-    reg.register_late_lint_pass(box utils::author::Author);\n-    reg.register_late_lint_pass(box types::Types);\n-    reg.register_late_lint_pass(box booleans::NonminimalBool);\n-    reg.register_late_lint_pass(box eq_op::EqOp);\n-    reg.register_early_lint_pass(box enum_variants::EnumVariantNames::new(conf.enum_variant_name_threshold));\n-    reg.register_late_lint_pass(box enum_glob_use::EnumGlobUse);\n-    reg.register_late_lint_pass(box enum_clike::UnportableVariant);\n-    reg.register_late_lint_pass(box excessive_precision::ExcessivePrecision);\n-    reg.register_late_lint_pass(box bit_mask::BitMask::new(conf.verbose_bit_mask_threshold));\n-    reg.register_late_lint_pass(box ptr::Ptr);\n-    reg.register_late_lint_pass(box needless_bool::NeedlessBool);\n-    reg.register_late_lint_pass(box needless_bool::BoolComparison);\n-    reg.register_late_lint_pass(box approx_const::ApproxConstant);\n-    reg.register_late_lint_pass(box misc::MiscLints);\n-    reg.register_early_lint_pass(box precedence::Precedence);\n-    reg.register_early_lint_pass(box needless_continue::NeedlessContinue);\n-    reg.register_late_lint_pass(box eta_reduction::EtaReduction);\n-    reg.register_late_lint_pass(box identity_op::IdentityOp);\n-    reg.register_late_lint_pass(box erasing_op::ErasingOp);\n-    reg.register_early_lint_pass(box items_after_statements::ItemsAfterStatements);\n-    reg.register_late_lint_pass(box mut_mut::MutMut);\n-    reg.register_late_lint_pass(box mut_reference::UnnecessaryMutPassed);\n-    reg.register_late_lint_pass(box len_zero::LenZero);\n-    reg.register_late_lint_pass(box attrs::Attributes);\n-    reg.register_early_lint_pass(box collapsible_if::CollapsibleIf);\n-    reg.register_late_lint_pass(box block_in_if_condition::BlockInIfCondition);\n-    reg.register_late_lint_pass(box unicode::Unicode);\n-    reg.register_late_lint_pass(box strings::StringAdd);\n-    reg.register_early_lint_pass(box returns::Return);\n-    reg.register_late_lint_pass(box implicit_return::ImplicitReturn);\n-    reg.register_late_lint_pass(box methods::Methods);\n-    reg.register_late_lint_pass(box map_clone::MapClone);\n-    reg.register_late_lint_pass(box shadow::Shadow);\n-    reg.register_late_lint_pass(box types::LetUnitValue);\n-    reg.register_late_lint_pass(box types::UnitCmp);\n-    reg.register_late_lint_pass(box loops::Loops);\n-    reg.register_late_lint_pass(box main_recursion::MainRecursion::default());\n-    reg.register_late_lint_pass(box lifetimes::Lifetimes);\n-    reg.register_late_lint_pass(box entry::HashMapPass);\n-    reg.register_late_lint_pass(box ranges::Ranges);\n-    reg.register_late_lint_pass(box types::Casts);\n-    reg.register_late_lint_pass(box types::TypeComplexity::new(conf.type_complexity_threshold));\n-    reg.register_late_lint_pass(box matches::Matches);\n-    reg.register_late_lint_pass(box minmax::MinMaxPass);\n-    reg.register_late_lint_pass(box open_options::OpenOptions);\n-    reg.register_late_lint_pass(box zero_div_zero::ZeroDiv);\n-    reg.register_late_lint_pass(box mutex_atomic::Mutex);\n-    reg.register_late_lint_pass(box needless_update::NeedlessUpdate);\n-    reg.register_late_lint_pass(box needless_borrow::NeedlessBorrow::default());\n-    reg.register_late_lint_pass(box needless_borrowed_ref::NeedlessBorrowedRef);\n-    reg.register_late_lint_pass(box no_effect::NoEffect);\n-    reg.register_late_lint_pass(box temporary_assignment::TemporaryAssignment);\n-    reg.register_late_lint_pass(box transmute::Transmute);\n-    reg.register_late_lint_pass(\n-        box cognitive_complexity::CognitiveComplexity::new(conf.cognitive_complexity_threshold)\n+    // begin register lints, do not remove this comment, it\u2019s used in `update_lints`\n+    store.register_lints(&[\n+        &approx_const::APPROX_CONSTANT,\n+        &arithmetic::FLOAT_ARITHMETIC,\n+        &arithmetic::INTEGER_ARITHMETIC,\n+        &assertions_on_constants::ASSERTIONS_ON_CONSTANTS,\n+        &assign_ops::ASSIGN_OP_PATTERN,\n+        &assign_ops::MISREFACTORED_ASSIGN_OP,\n+        &attrs::DEPRECATED_CFG_ATTR,\n+        &attrs::DEPRECATED_SEMVER,\n+        &attrs::EMPTY_LINE_AFTER_OUTER_ATTR,\n+        &attrs::INLINE_ALWAYS,\n+        &attrs::UNKNOWN_CLIPPY_LINTS,\n+        &attrs::USELESS_ATTRIBUTE,\n+        &bit_mask::BAD_BIT_MASK,\n+        &bit_mask::INEFFECTIVE_BIT_MASK,\n+        &bit_mask::VERBOSE_BIT_MASK,\n+        &blacklisted_name::BLACKLISTED_NAME,\n+        &block_in_if_condition::BLOCK_IN_IF_CONDITION_EXPR,\n+        &block_in_if_condition::BLOCK_IN_IF_CONDITION_STMT,\n+        &booleans::LOGIC_BUG,\n+        &booleans::NONMINIMAL_BOOL,\n+        &bytecount::NAIVE_BYTECOUNT,\n+        &cargo_common_metadata::CARGO_COMMON_METADATA,\n+        &checked_conversions::CHECKED_CONVERSIONS,\n+        &cognitive_complexity::COGNITIVE_COMPLEXITY,\n+        &collapsible_if::COLLAPSIBLE_IF,\n+        &comparison_chain::COMPARISON_CHAIN,\n+        &copies::IFS_SAME_COND,\n+        &copies::IF_SAME_THEN_ELSE,\n+        &copies::MATCH_SAME_ARMS,\n+        &copy_iterator::COPY_ITERATOR,\n+        &dbg_macro::DBG_MACRO,\n+        &default_trait_access::DEFAULT_TRAIT_ACCESS,\n+        &derive::DERIVE_HASH_XOR_EQ,\n+        &derive::EXPL_IMPL_CLONE_ON_COPY,\n+        &doc::DOC_MARKDOWN,\n+        &doc::MISSING_SAFETY_DOC,\n+        &doc::NEEDLESS_DOCTEST_MAIN,\n+        &double_comparison::DOUBLE_COMPARISONS,\n+        &double_parens::DOUBLE_PARENS,\n+        &drop_bounds::DROP_BOUNDS,\n+        &drop_forget_ref::DROP_COPY,\n+        &drop_forget_ref::DROP_REF,\n+        &drop_forget_ref::FORGET_COPY,\n+        &drop_forget_ref::FORGET_REF,\n+        &duration_subsec::DURATION_SUBSEC,\n+        &else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n+        &empty_enum::EMPTY_ENUM,\n+        &entry::MAP_ENTRY,\n+        &enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT,\n+        &enum_glob_use::ENUM_GLOB_USE,\n+        &enum_variants::ENUM_VARIANT_NAMES,\n+        &enum_variants::MODULE_INCEPTION,\n+        &enum_variants::MODULE_NAME_REPETITIONS,\n+        &enum_variants::PUB_ENUM_VARIANT_NAMES,\n+        &eq_op::EQ_OP,\n+        &eq_op::OP_REF,\n+        &erasing_op::ERASING_OP,\n+        &escape::BOXED_LOCAL,\n+        &eta_reduction::REDUNDANT_CLOSURE,\n+        &eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS,\n+        &eval_order_dependence::DIVERGING_SUB_EXPRESSION,\n+        &eval_order_dependence::EVAL_ORDER_DEPENDENCE,\n+        &excessive_precision::EXCESSIVE_PRECISION,\n+        &explicit_write::EXPLICIT_WRITE,\n+        &fallible_impl_from::FALLIBLE_IMPL_FROM,\n+        &format::USELESS_FORMAT,\n+        &formatting::POSSIBLE_MISSING_COMMA,\n+        &formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n+        &formatting::SUSPICIOUS_ELSE_FORMATTING,\n+        &formatting::SUSPICIOUS_UNARY_OP_FORMATTING,\n+        &functions::DOUBLE_MUST_USE,\n+        &functions::MUST_USE_CANDIDATE,\n+        &functions::MUST_USE_UNIT,\n+        &functions::NOT_UNSAFE_PTR_ARG_DEREF,\n+        &functions::TOO_MANY_ARGUMENTS,\n+        &functions::TOO_MANY_LINES,\n+        &get_last_with_len::GET_LAST_WITH_LEN,\n+        &identity_conversion::IDENTITY_CONVERSION,\n+        &identity_op::IDENTITY_OP,\n+        &if_not_else::IF_NOT_ELSE,\n+        &implicit_return::IMPLICIT_RETURN,\n+        &indexing_slicing::INDEXING_SLICING,\n+        &indexing_slicing::OUT_OF_BOUNDS_INDEXING,\n+        &infallible_destructuring_match::INFALLIBLE_DESTRUCTURING_MATCH,\n+        &infinite_iter::INFINITE_ITER,\n+        &infinite_iter::MAYBE_INFINITE_ITER,\n+        &inherent_impl::MULTIPLE_INHERENT_IMPL,\n+        &inherent_to_string::INHERENT_TO_STRING,\n+        &inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY,\n+        &inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n+        &int_plus_one::INT_PLUS_ONE,\n+        &integer_division::INTEGER_DIVISION,\n+        &items_after_statements::ITEMS_AFTER_STATEMENTS,\n+        &large_enum_variant::LARGE_ENUM_VARIANT,\n+        &len_zero::LEN_WITHOUT_IS_EMPTY,\n+        &len_zero::LEN_ZERO,\n+        &let_if_seq::USELESS_LET_IF_SEQ,\n+        &lifetimes::EXTRA_UNUSED_LIFETIMES,\n+        &lifetimes::NEEDLESS_LIFETIMES,\n+        &literal_representation::DECIMAL_LITERAL_REPRESENTATION,\n+        &literal_representation::INCONSISTENT_DIGIT_GROUPING,\n+        &literal_representation::LARGE_DIGIT_GROUPS,\n+        &literal_representation::MISTYPED_LITERAL_SUFFIXES,\n+        &literal_representation::UNREADABLE_LITERAL,\n+        &loops::EMPTY_LOOP,\n+        &loops::EXPLICIT_COUNTER_LOOP,\n+        &loops::EXPLICIT_INTO_ITER_LOOP,\n+        &loops::EXPLICIT_ITER_LOOP,\n+        &loops::FOR_KV_MAP,\n+        &loops::FOR_LOOP_OVER_OPTION,\n+        &loops::FOR_LOOP_OVER_RESULT,\n+        &loops::ITER_NEXT_LOOP,\n+        &loops::MANUAL_MEMCPY,\n+        &loops::MUT_RANGE_BOUND,\n+        &loops::NEEDLESS_COLLECT,\n+        &loops::NEEDLESS_RANGE_LOOP,\n+        &loops::NEVER_LOOP,\n+        &loops::REVERSE_RANGE_LOOP,\n+        &loops::WHILE_IMMUTABLE_CONDITION,\n+        &loops::WHILE_LET_LOOP,\n+        &loops::WHILE_LET_ON_ITERATOR,\n+        &main_recursion::MAIN_RECURSION,\n+        &map_clone::MAP_CLONE,\n+        &map_unit_fn::OPTION_MAP_UNIT_FN,\n+        &map_unit_fn::RESULT_MAP_UNIT_FN,\n+        &matches::MATCH_AS_REF,\n+        &matches::MATCH_BOOL,\n+        &matches::MATCH_OVERLAPPING_ARM,\n+        &matches::MATCH_REF_PATS,\n+        &matches::MATCH_WILD_ERR_ARM,\n+        &matches::SINGLE_MATCH,\n+        &matches::SINGLE_MATCH_ELSE,\n+        &matches::WILDCARD_ENUM_MATCH_ARM,\n+        &mem_discriminant::MEM_DISCRIMINANT_NON_ENUM,\n+        &mem_forget::MEM_FORGET,\n+        &mem_replace::MEM_REPLACE_OPTION_WITH_NONE,\n+        &mem_replace::MEM_REPLACE_WITH_UNINIT,\n+        &methods::CHARS_LAST_CMP,\n+        &methods::CHARS_NEXT_CMP,\n+        &methods::CLONE_DOUBLE_REF,\n+        &methods::CLONE_ON_COPY,\n+        &methods::CLONE_ON_REF_PTR,\n+        &methods::EXPECT_FUN_CALL,\n+        &methods::FILTER_MAP,\n+        &methods::FILTER_MAP_NEXT,\n+        &methods::FILTER_NEXT,\n+        &methods::FIND_MAP,\n+        &methods::FLAT_MAP_IDENTITY,\n+        &methods::GET_UNWRAP,\n+        &methods::INEFFICIENT_TO_STRING,\n+        &methods::INTO_ITER_ON_ARRAY,\n+        &methods::INTO_ITER_ON_REF,\n+        &methods::ITER_CLONED_COLLECT,\n+        &methods::ITER_NTH,\n+        &methods::ITER_SKIP_NEXT,\n+        &methods::MANUAL_SATURATING_ARITHMETIC,\n+        &methods::MAP_FLATTEN,\n+        &methods::NEW_RET_NO_SELF,\n+        &methods::OK_EXPECT,\n+        &methods::OPTION_AND_THEN_SOME,\n+        &methods::OPTION_EXPECT_USED,\n+        &methods::OPTION_MAP_OR_NONE,\n+        &methods::OPTION_MAP_UNWRAP_OR,\n+        &methods::OPTION_MAP_UNWRAP_OR_ELSE,\n+        &methods::OPTION_UNWRAP_USED,\n+        &methods::OR_FUN_CALL,\n+        &methods::RESULT_EXPECT_USED,\n+        &methods::RESULT_MAP_UNWRAP_OR_ELSE,\n+        &methods::RESULT_UNWRAP_USED,\n+        &methods::SEARCH_IS_SOME,\n+        &methods::SHOULD_IMPLEMENT_TRAIT,\n+        &methods::SINGLE_CHAR_PATTERN,\n+        &methods::STRING_EXTEND_CHARS,\n+        &methods::SUSPICIOUS_MAP,\n+        &methods::TEMPORARY_CSTRING_AS_PTR,\n+        &methods::UNINIT_ASSUMED_INIT,\n+        &methods::UNNECESSARY_FILTER_MAP,\n+        &methods::UNNECESSARY_FOLD,\n+        &methods::USELESS_ASREF,\n+        &methods::WRONG_PUB_SELF_CONVENTION,\n+        &methods::WRONG_SELF_CONVENTION,\n+        &minmax::MIN_MAX,\n+        &misc::CMP_NAN,\n+        &misc::CMP_OWNED,\n+        &misc::FLOAT_CMP,\n+        &misc::FLOAT_CMP_CONST,\n+        &misc::MODULO_ONE,\n+        &misc::SHORT_CIRCUIT_STATEMENT,\n+        &misc::TOPLEVEL_REF_ARG,\n+        &misc::USED_UNDERSCORE_BINDING,\n+        &misc::ZERO_PTR,\n+        &misc_early::BUILTIN_TYPE_SHADOW,\n+        &misc_early::DOUBLE_NEG,\n+        &misc_early::DUPLICATE_UNDERSCORE_ARGUMENT,\n+        &misc_early::MIXED_CASE_HEX_LITERALS,\n+        &misc_early::REDUNDANT_CLOSURE_CALL,\n+        &misc_early::REDUNDANT_PATTERN,\n+        &misc_early::UNNEEDED_FIELD_PATTERN,\n+        &misc_early::UNNEEDED_WILDCARD_PATTERN,\n+        &misc_early::UNSEPARATED_LITERAL_SUFFIX,\n+        &misc_early::ZERO_PREFIXED_LITERAL,\n+        &missing_const_for_fn::MISSING_CONST_FOR_FN,\n+        &missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS,\n+        &missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS,\n+        &mul_add::MANUAL_MUL_ADD,\n+        &multiple_crate_versions::MULTIPLE_CRATE_VERSIONS,\n+        &mut_mut::MUT_MUT,\n+        &mut_reference::UNNECESSARY_MUT_PASSED,\n+        &mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL,\n+        &mutex_atomic::MUTEX_ATOMIC,\n+        &mutex_atomic::MUTEX_INTEGER,\n+        &needless_bool::BOOL_COMPARISON,\n+        &needless_bool::NEEDLESS_BOOL,\n+        &needless_borrow::NEEDLESS_BORROW,\n+        &needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE,\n+        &needless_continue::NEEDLESS_CONTINUE,\n+        &needless_pass_by_value::NEEDLESS_PASS_BY_VALUE,\n+        &needless_update::NEEDLESS_UPDATE,\n+        &neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD,\n+        &neg_multiply::NEG_MULTIPLY,\n+        &new_without_default::NEW_WITHOUT_DEFAULT,\n+        &no_effect::NO_EFFECT,\n+        &no_effect::UNNECESSARY_OPERATION,\n+        &non_copy_const::BORROW_INTERIOR_MUTABLE_CONST,\n+        &non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST,\n+        &non_expressive_names::JUST_UNDERSCORES_AND_DIGITS,\n+        &non_expressive_names::MANY_SINGLE_CHAR_NAMES,\n+        &non_expressive_names::SIMILAR_NAMES,\n+        &ok_if_let::IF_LET_SOME_RESULT,\n+        &open_options::NONSENSICAL_OPEN_OPTIONS,\n+        &overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n+        &panic_unimplemented::PANIC,\n+        &panic_unimplemented::PANIC_PARAMS,\n+        &panic_unimplemented::TODO,\n+        &panic_unimplemented::UNIMPLEMENTED,\n+        &panic_unimplemented::UNREACHABLE,\n+        &partialeq_ne_impl::PARTIALEQ_NE_IMPL,\n+        &path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE,\n+        &precedence::PRECEDENCE,\n+        &ptr::CMP_NULL,\n+        &ptr::MUT_FROM_REF,\n+        &ptr::PTR_ARG,\n+        &ptr_offset_with_cast::PTR_OFFSET_WITH_CAST,\n+        &question_mark::QUESTION_MARK,\n+        &ranges::ITERATOR_STEP_BY_ZERO,\n+        &ranges::RANGE_MINUS_ONE,\n+        &ranges::RANGE_PLUS_ONE,\n+        &ranges::RANGE_ZIP_WITH_LEN,\n+        &redundant_clone::REDUNDANT_CLONE,\n+        &redundant_field_names::REDUNDANT_FIELD_NAMES,\n+        &redundant_pattern_matching::REDUNDANT_PATTERN_MATCHING,\n+        &redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES,\n+        &reference::DEREF_ADDROF,\n+        &reference::REF_IN_DEREF,\n+        &regex::INVALID_REGEX,\n+        &regex::REGEX_MACRO,\n+        &regex::TRIVIAL_REGEX,\n+        &replace_consts::REPLACE_CONSTS,\n+        &returns::LET_AND_RETURN,\n+        &returns::NEEDLESS_RETURN,\n+        &returns::UNUSED_UNIT,\n+        &serde_api::SERDE_API_MISUSE,\n+        &shadow::SHADOW_REUSE,\n+        &shadow::SHADOW_SAME,\n+        &shadow::SHADOW_UNRELATED,\n+        &slow_vector_initialization::SLOW_VECTOR_INITIALIZATION,\n+        &strings::STRING_ADD,\n+        &strings::STRING_ADD_ASSIGN,\n+        &strings::STRING_LIT_AS_BYTES,\n+        &suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL,\n+        &suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL,\n+        &swap::ALMOST_SWAPPED,\n+        &swap::MANUAL_SWAP,\n+        &temporary_assignment::TEMPORARY_ASSIGNMENT,\n+        &trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n+        &transmute::CROSSPOINTER_TRANSMUTE,\n+        &transmute::TRANSMUTE_BYTES_TO_STR,\n+        &transmute::TRANSMUTE_INT_TO_BOOL,\n+        &transmute::TRANSMUTE_INT_TO_CHAR,\n+        &transmute::TRANSMUTE_INT_TO_FLOAT,\n+        &transmute::TRANSMUTE_PTR_TO_PTR,\n+        &transmute::TRANSMUTE_PTR_TO_REF,\n+        &transmute::UNSOUND_COLLECTION_TRANSMUTE,\n+        &transmute::USELESS_TRANSMUTE,\n+        &transmute::WRONG_TRANSMUTE,\n+        &transmuting_null::TRANSMUTING_NULL,\n+        &trivially_copy_pass_by_ref::TRIVIALLY_COPY_PASS_BY_REF,\n+        &try_err::TRY_ERR,\n+        &types::ABSURD_EXTREME_COMPARISONS,\n+        &types::BORROWED_BOX,\n+        &types::BOX_VEC,\n+        &types::CAST_LOSSLESS,\n+        &types::CAST_POSSIBLE_TRUNCATION,\n+        &types::CAST_POSSIBLE_WRAP,\n+        &types::CAST_PRECISION_LOSS,\n+        &types::CAST_PTR_ALIGNMENT,\n+        &types::CAST_REF_TO_MUT,\n+        &types::CAST_SIGN_LOSS,\n+        &types::CHAR_LIT_AS_U8,\n+        &types::FN_TO_NUMERIC_CAST,\n+        &types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n+        &types::IMPLICIT_HASHER,\n+        &types::INVALID_UPCAST_COMPARISONS,\n+        &types::LET_UNIT_VALUE,\n+        &types::LINKEDLIST,\n+        &types::OPTION_OPTION,\n+        &types::TYPE_COMPLEXITY,\n+        &types::UNIT_ARG,\n+        &types::UNIT_CMP,\n+        &types::UNNECESSARY_CAST,\n+        &types::VEC_BOX,\n+        &unicode::NON_ASCII_LITERAL,\n+        &unicode::UNICODE_NOT_NFC,\n+        &unicode::ZERO_WIDTH_SPACE,\n+        &unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n+        &unused_io_amount::UNUSED_IO_AMOUNT,\n+        &unused_label::UNUSED_LABEL,\n+        &unused_self::UNUSED_SELF,\n+        &unwrap::PANICKING_UNWRAP,\n+        &unwrap::UNNECESSARY_UNWRAP,\n+        &use_self::USE_SELF,\n+        &vec::USELESS_VEC,\n+        &wildcard_dependencies::WILDCARD_DEPENDENCIES,\n+        &write::PRINTLN_EMPTY_STRING,\n+        &write::PRINT_LITERAL,\n+        &write::PRINT_STDOUT,\n+        &write::PRINT_WITH_NEWLINE,\n+        &write::USE_DEBUG,\n+        &write::WRITELN_EMPTY_STRING,\n+        &write::WRITE_LITERAL,\n+        &write::WRITE_WITH_NEWLINE,\n+        &zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n+    ]);\n+    // end register lints, do not remove this comment, it\u2019s used in `update_lints`\n+\n+    store.register_late_pass(|| box serde_api::SerdeAPI);\n+    store.register_late_pass(|| box utils::internal_lints::CompilerLintFunctions::new());\n+    store.register_late_pass(|| box utils::internal_lints::LintWithoutLintPass::default());\n+    store.register_late_pass(|| box utils::internal_lints::OuterExpnDataPass);\n+    store.register_late_pass(|| box utils::inspector::DeepCodeInspector);\n+    store.register_late_pass(|| box utils::author::Author);\n+    store.register_late_pass(|| box types::Types);\n+    store.register_late_pass(|| box booleans::NonminimalBool);\n+    store.register_late_pass(|| box eq_op::EqOp);\n+    store.register_late_pass(|| box enum_glob_use::EnumGlobUse);\n+    store.register_late_pass(|| box enum_clike::UnportableVariant);\n+    store.register_late_pass(|| box excessive_precision::ExcessivePrecision);\n+    let p = conf.verbose_bit_mask_threshold;\n+    store.register_late_pass(move || box bit_mask::BitMask::new(p));\n+    store.register_late_pass(|| box ptr::Ptr);\n+    store.register_late_pass(|| box needless_bool::NeedlessBool);\n+    store.register_late_pass(|| box needless_bool::BoolComparison);\n+    store.register_late_pass(|| box approx_const::ApproxConstant);\n+    store.register_late_pass(|| box misc::MiscLints);\n+    store.register_late_pass(|| box eta_reduction::EtaReduction);\n+    store.register_late_pass(|| box identity_op::IdentityOp);\n+    store.register_late_pass(|| box erasing_op::ErasingOp);\n+    store.register_late_pass(|| box mut_mut::MutMut);\n+    store.register_late_pass(|| box mut_reference::UnnecessaryMutPassed);\n+    store.register_late_pass(|| box len_zero::LenZero);\n+    store.register_late_pass(|| box attrs::Attributes);\n+    store.register_late_pass(|| box block_in_if_condition::BlockInIfCondition);\n+    store.register_late_pass(|| box unicode::Unicode);\n+    store.register_late_pass(|| box strings::StringAdd);\n+    store.register_late_pass(|| box implicit_return::ImplicitReturn);\n+    store.register_late_pass(|| box methods::Methods);\n+    store.register_late_pass(|| box map_clone::MapClone);\n+    store.register_late_pass(|| box shadow::Shadow);\n+    store.register_late_pass(|| box types::LetUnitValue);\n+    store.register_late_pass(|| box types::UnitCmp);\n+    store.register_late_pass(|| box loops::Loops);\n+    store.register_late_pass(|| box main_recursion::MainRecursion::default());\n+    store.register_late_pass(|| box lifetimes::Lifetimes);\n+    store.register_late_pass(|| box entry::HashMapPass);\n+    store.register_late_pass(|| box ranges::Ranges);\n+    store.register_late_pass(|| box types::Casts);\n+    let p = conf.type_complexity_threshold;\n+    store.register_late_pass(move || box types::TypeComplexity::new(p));\n+    store.register_late_pass(|| box matches::Matches);\n+    store.register_late_pass(|| box minmax::MinMaxPass);\n+    store.register_late_pass(|| box open_options::OpenOptions);\n+    store.register_late_pass(|| box zero_div_zero::ZeroDiv);\n+    store.register_late_pass(|| box mutex_atomic::Mutex);\n+    store.register_late_pass(|| box needless_update::NeedlessUpdate);\n+    store.register_late_pass(|| box needless_borrow::NeedlessBorrow::default());\n+    store.register_late_pass(|| box needless_borrowed_ref::NeedlessBorrowedRef);\n+    store.register_late_pass(|| box no_effect::NoEffect);\n+    store.register_late_pass(|| box temporary_assignment::TemporaryAssignment);\n+    store.register_late_pass(|| box transmute::Transmute);\n+    let p = conf.cognitive_complexity_threshold;\n+    store.register_late_pass(move || box cognitive_complexity::CognitiveComplexity::new(p));\n+    let a = conf.too_large_for_stack;\n+    store.register_late_pass(move || box escape::BoxedLocal{too_large_for_stack: a});\n+    store.register_late_pass(|| box panic_unimplemented::PanicUnimplemented);\n+    store.register_late_pass(|| box strings::StringLitAsBytes);\n+    store.register_late_pass(|| box derive::Derive);\n+    store.register_late_pass(|| box types::CharLitAsU8);\n+    store.register_late_pass(|| box vec::UselessVec);\n+    store.register_late_pass(|| box drop_bounds::DropBounds);\n+    store.register_late_pass(|| box get_last_with_len::GetLastWithLen);\n+    store.register_late_pass(|| box drop_forget_ref::DropForgetRef);\n+    store.register_late_pass(|| box empty_enum::EmptyEnum);\n+    store.register_late_pass(|| box types::AbsurdExtremeComparisons);\n+    store.register_late_pass(|| box types::InvalidUpcastComparisons);\n+    store.register_late_pass(|| box regex::Regex::default());\n+    store.register_late_pass(|| box copies::CopyAndPaste);\n+    store.register_late_pass(|| box copy_iterator::CopyIterator);\n+    store.register_late_pass(|| box format::UselessFormat);\n+    store.register_late_pass(|| box swap::Swap);\n+    store.register_late_pass(|| box overflow_check_conditional::OverflowCheckConditional);\n+    store.register_late_pass(|| box unused_label::UnusedLabel);\n+    store.register_late_pass(|| box new_without_default::NewWithoutDefault::default());\n+    let p = conf.blacklisted_names.iter().cloned().collect::<FxHashSet<_>>();\n+    store.register_late_pass(move || box blacklisted_name::BlacklistedName::new(p.clone()));\n+    let a1 = conf.too_many_arguments_threshold;\n+    let a2 = conf.too_many_lines_threshold;\n+    store.register_late_pass(move || box functions::Functions::new(a1, a2));\n+    let p = conf.doc_valid_idents.iter().cloned().collect::<FxHashSet<_>>();\n+    store.register_late_pass(move || box doc::DocMarkdown::new(p.clone()));\n+    store.register_late_pass(|| box neg_multiply::NegMultiply);\n+    store.register_late_pass(|| box mem_discriminant::MemDiscriminant);\n+    store.register_late_pass(|| box mem_forget::MemForget);\n+    store.register_late_pass(|| box mem_replace::MemReplace);\n+    store.register_late_pass(|| box arithmetic::Arithmetic::default());\n+    store.register_late_pass(|| box assign_ops::AssignOps);\n+    store.register_late_pass(|| box let_if_seq::LetIfSeq);\n+    store.register_late_pass(|| box eval_order_dependence::EvalOrderDependence);\n+    store.register_late_pass(|| box missing_doc::MissingDoc::new());\n+    store.register_late_pass(|| box missing_inline::MissingInline);\n+    store.register_late_pass(|| box ok_if_let::OkIfLet);\n+    store.register_late_pass(|| box redundant_pattern_matching::RedundantPatternMatching);\n+    store.register_late_pass(|| box partialeq_ne_impl::PartialEqNeImpl);\n+    store.register_late_pass(|| box unused_io_amount::UnusedIoAmount);\n+    let p = conf.enum_variant_size_threshold;\n+    store.register_late_pass(move || box large_enum_variant::LargeEnumVariant::new(p));\n+    store.register_late_pass(|| box explicit_write::ExplicitWrite);\n+    store.register_late_pass(|| box needless_pass_by_value::NeedlessPassByValue);\n+    let p = trivially_copy_pass_by_ref::TriviallyCopyPassByRef::new(\n+        conf.trivial_copy_size_limit,\n+        &sess.target,\n     );\n-    reg.register_late_lint_pass(box escape::BoxedLocal{too_large_for_stack: conf.too_large_for_stack});\n-    reg.register_early_lint_pass(box misc_early::MiscEarlyLints);\n-    reg.register_late_lint_pass(box panic_unimplemented::PanicUnimplemented);\n-    reg.register_late_lint_pass(box strings::StringLitAsBytes);\n-    reg.register_late_lint_pass(box derive::Derive);\n-    reg.register_late_lint_pass(box types::CharLitAsU8);\n-    reg.register_late_lint_pass(box vec::UselessVec);\n-    reg.register_late_lint_pass(box drop_bounds::DropBounds);\n-    reg.register_late_lint_pass(box get_last_with_len::GetLastWithLen);\n-    reg.register_late_lint_pass(box drop_forget_ref::DropForgetRef);\n-    reg.register_late_lint_pass(box empty_enum::EmptyEnum);\n-    reg.register_late_lint_pass(box types::AbsurdExtremeComparisons);\n-    reg.register_late_lint_pass(box types::InvalidUpcastComparisons);\n-    reg.register_late_lint_pass(box regex::Regex::default());\n-    reg.register_late_lint_pass(box copies::CopyAndPaste);\n-    reg.register_late_lint_pass(box copy_iterator::CopyIterator);\n-    reg.register_late_lint_pass(box format::UselessFormat);\n-    reg.register_early_lint_pass(box formatting::Formatting);\n-    reg.register_late_lint_pass(box swap::Swap);\n-    reg.register_early_lint_pass(box if_not_else::IfNotElse);\n-    reg.register_early_lint_pass(box else_if_without_else::ElseIfWithoutElse);\n-    reg.register_early_lint_pass(box int_plus_one::IntPlusOne);\n-    reg.register_late_lint_pass(box overflow_check_conditional::OverflowCheckConditional);\n-    reg.register_late_lint_pass(box unused_label::UnusedLabel);\n-    reg.register_late_lint_pass(box new_without_default::NewWithoutDefault::default());\n-    reg.register_late_lint_pass(box blacklisted_name::BlacklistedName::new(\n-            conf.blacklisted_names.iter().cloned().collect()\n-    ));\n-    reg.register_late_lint_pass(box functions::Functions::new(conf.too_many_arguments_threshold, conf.too_many_lines_threshold));\n-    reg.register_late_lint_pass(box doc::DocMarkdown::new(conf.doc_valid_idents.iter().cloned().collect()));\n-    reg.register_late_lint_pass(box neg_multiply::NegMultiply);\n-    reg.register_early_lint_pass(box unsafe_removed_from_name::UnsafeNameRemoval);\n-    reg.register_late_lint_pass(box mem_discriminant::MemDiscriminant);\n-    reg.register_late_lint_pass(box mem_forget::MemForget);\n-    reg.register_late_lint_pass(box mem_replace::MemReplace);\n-    reg.register_late_lint_pass(box arithmetic::Arithmetic::default());\n-    reg.register_late_lint_pass(box assign_ops::AssignOps);\n-    reg.register_late_lint_pass(box let_if_seq::LetIfSeq);\n-    reg.register_late_lint_pass(box eval_order_dependence::EvalOrderDependence);\n-    reg.register_late_lint_pass(box missing_doc::MissingDoc::new());\n-    reg.register_late_lint_pass(box missing_inline::MissingInline);\n-    reg.register_late_lint_pass(box ok_if_let::OkIfLet);\n-    reg.register_late_lint_pass(box redundant_pattern_matching::RedundantPatternMatching);\n-    reg.register_late_lint_pass(box partialeq_ne_impl::PartialEqNeImpl);\n-    reg.register_early_lint_pass(box reference::DerefAddrOf);\n-    reg.register_early_lint_pass(box reference::RefInDeref);\n-    reg.register_early_lint_pass(box double_parens::DoubleParens);\n-    reg.register_late_lint_pass(box unused_io_amount::UnusedIoAmount);\n-    reg.register_late_lint_pass(box large_enum_variant::LargeEnumVariant::new(conf.enum_variant_size_threshold));\n-    reg.register_late_lint_pass(box explicit_write::ExplicitWrite);\n-    reg.register_late_lint_pass(box needless_pass_by_value::NeedlessPassByValue);\n-    reg.register_late_lint_pass(box trivially_copy_pass_by_ref::TriviallyCopyPassByRef::new(\n-            conf.trivial_copy_size_limit,\n-            &reg.sess.target,\n-    ));\n-    reg.register_early_lint_pass(box literal_representation::LiteralDigitGrouping);\n-    reg.register_early_lint_pass(box literal_representation::DecimalLiteralRepresentation::new(\n-            conf.literal_representation_threshold\n-    ));\n-    reg.register_late_lint_pass(box try_err::TryErr);\n-    reg.register_late_lint_pass(box use_self::UseSelf);\n-    reg.register_late_lint_pass(box bytecount::ByteCount);\n-    reg.register_late_lint_pass(box infinite_iter::InfiniteIter);\n-    reg.register_late_lint_pass(box inline_fn_without_body::InlineFnWithoutBody);\n-    reg.register_late_lint_pass(box identity_conversion::IdentityConversion::default());\n-    reg.register_late_lint_pass(box types::ImplicitHasher);\n-    reg.register_early_lint_pass(box redundant_static_lifetimes::RedundantStaticLifetimes);\n-    reg.register_late_lint_pass(box fallible_impl_from::FallibleImplFrom);\n-    reg.register_late_lint_pass(box replace_consts::ReplaceConsts);\n-    reg.register_late_lint_pass(box types::UnitArg);\n-    reg.register_late_lint_pass(box double_comparison::DoubleComparisons);\n-    reg.register_late_lint_pass(box question_mark::QuestionMark);\n-    reg.register_late_lint_pass(box suspicious_trait_impl::SuspiciousImpl);\n-    reg.register_early_lint_pass(box cargo_common_metadata::CargoCommonMetadata);\n-    reg.register_early_lint_pass(box multiple_crate_versions::MultipleCrateVersions);\n-    reg.register_early_lint_pass(box wildcard_dependencies::WildcardDependencies);\n-    reg.register_late_lint_pass(box map_unit_fn::MapUnit);\n-    reg.register_late_lint_pass(box infallible_destructuring_match::InfallibleDestructingMatch);\n-    reg.register_late_lint_pass(box inherent_impl::MultipleInherentImpl::default());\n-    reg.register_late_lint_pass(box neg_cmp_op_on_partial_ord::NoNegCompOpForPartialOrd);\n-    reg.register_late_lint_pass(box unwrap::Unwrap);\n-    reg.register_late_lint_pass(box duration_subsec::DurationSubsec);\n-    reg.register_late_lint_pass(box default_trait_access::DefaultTraitAccess);\n-    reg.register_late_lint_pass(box indexing_slicing::IndexingSlicing);\n-    reg.register_late_lint_pass(box non_copy_const::NonCopyConst);\n-    reg.register_late_lint_pass(box ptr_offset_with_cast::PtrOffsetWithCast);\n-    reg.register_late_lint_pass(box redundant_clone::RedundantClone);\n-    reg.register_late_lint_pass(box slow_vector_initialization::SlowVectorInit);\n-    reg.register_late_lint_pass(box types::RefToMut);\n-    reg.register_late_lint_pass(box assertions_on_constants::AssertionsOnConstants);\n-    reg.register_late_lint_pass(box missing_const_for_fn::MissingConstForFn);\n-    reg.register_late_lint_pass(box transmuting_null::TransmutingNull);\n-    reg.register_late_lint_pass(box path_buf_push_overwrite::PathBufPushOverwrite);\n-    reg.register_late_lint_pass(box checked_conversions::CheckedConversions);\n-    reg.register_late_lint_pass(box integer_division::IntegerDivision);\n-    reg.register_late_lint_pass(box inherent_to_string::InherentToString);\n-    reg.register_late_lint_pass(box trait_bounds::TraitBounds);\n-    reg.register_late_lint_pass(box comparison_chain::ComparisonChain);\n-    reg.register_late_lint_pass(box mul_add::MulAddCheck);\n-    reg.register_late_lint_pass(box unused_self::UnusedSelf);\n-    reg.register_late_lint_pass(box mutable_debug_assertion::DebugAssertWithMutCall);\n+    store.register_late_pass(move || box p);\n+    store.register_late_pass(|| box try_err::TryErr);\n+    store.register_late_pass(|| box use_self::UseSelf);\n+    store.register_late_pass(|| box bytecount::ByteCount);\n+    store.register_late_pass(|| box infinite_iter::InfiniteIter);\n+    store.register_late_pass(|| box inline_fn_without_body::InlineFnWithoutBody);\n+    store.register_late_pass(|| box identity_conversion::IdentityConversion::default());\n+    store.register_late_pass(|| box types::ImplicitHasher);\n+    store.register_late_pass(|| box fallible_impl_from::FallibleImplFrom);\n+    store.register_late_pass(|| box replace_consts::ReplaceConsts);\n+    store.register_late_pass(|| box types::UnitArg);\n+    store.register_late_pass(|| box double_comparison::DoubleComparisons);\n+    store.register_late_pass(|| box question_mark::QuestionMark);\n+    store.register_late_pass(|| box suspicious_trait_impl::SuspiciousImpl);\n+    store.register_late_pass(|| box map_unit_fn::MapUnit);\n+    store.register_late_pass(|| box infallible_destructuring_match::InfallibleDestructingMatch);\n+    store.register_late_pass(|| box inherent_impl::MultipleInherentImpl::default());\n+    store.register_late_pass(|| box neg_cmp_op_on_partial_ord::NoNegCompOpForPartialOrd);\n+    store.register_late_pass(|| box unwrap::Unwrap);\n+    store.register_late_pass(|| box duration_subsec::DurationSubsec);\n+    store.register_late_pass(|| box default_trait_access::DefaultTraitAccess);\n+    store.register_late_pass(|| box indexing_slicing::IndexingSlicing);\n+    store.register_late_pass(|| box non_copy_const::NonCopyConst);\n+    store.register_late_pass(|| box ptr_offset_with_cast::PtrOffsetWithCast);\n+    store.register_late_pass(|| box redundant_clone::RedundantClone);\n+    store.register_late_pass(|| box slow_vector_initialization::SlowVectorInit);\n+    store.register_late_pass(|| box types::RefToMut);\n+    store.register_late_pass(|| box assertions_on_constants::AssertionsOnConstants);\n+    store.register_late_pass(|| box missing_const_for_fn::MissingConstForFn);\n+    store.register_late_pass(|| box transmuting_null::TransmutingNull);\n+    store.register_late_pass(|| box path_buf_push_overwrite::PathBufPushOverwrite);\n+    store.register_late_pass(|| box checked_conversions::CheckedConversions);\n+    store.register_late_pass(|| box integer_division::IntegerDivision);\n+    store.register_late_pass(|| box inherent_to_string::InherentToString);\n+    store.register_late_pass(|| box trait_bounds::TraitBounds);\n+    store.register_late_pass(|| box comparison_chain::ComparisonChain);\n+    store.register_late_pass(|| box mul_add::MulAddCheck);\n+\n+    store.register_early_pass(|| box reference::DerefAddrOf);\n+    store.register_early_pass(|| box reference::RefInDeref);\n+    store.register_early_pass(|| box double_parens::DoubleParens);\n+    store.register_early_pass(|| box unsafe_removed_from_name::UnsafeNameRemoval);\n+    store.register_early_pass(|| box if_not_else::IfNotElse);\n+    store.register_early_pass(|| box else_if_without_else::ElseIfWithoutElse);\n+    store.register_early_pass(|| box int_plus_one::IntPlusOne);\n+    store.register_early_pass(|| box formatting::Formatting);\n+    store.register_early_pass(|| box misc_early::MiscEarlyLints);\n+    store.register_early_pass(|| box returns::Return);\n+    store.register_early_pass(|| box collapsible_if::CollapsibleIf);\n+    store.register_early_pass(|| box items_after_statements::ItemsAfterStatements);\n+    store.register_early_pass(|| box precedence::Precedence);\n+    store.register_early_pass(|| box needless_continue::NeedlessContinue);\n+    store.register_early_pass(|| box redundant_static_lifetimes::RedundantStaticLifetimes);\n+    store.register_early_pass(|| box cargo_common_metadata::CargoCommonMetadata);\n+    store.register_early_pass(|| box multiple_crate_versions::MultipleCrateVersions);\n+    store.register_early_pass(|| box wildcard_dependencies::WildcardDependencies);\n+    store.register_early_pass(|| box literal_representation::LiteralDigitGrouping);\n+    let p = conf.literal_representation_threshold;\n+    store.register_early_pass(move || box literal_representation::DecimalLiteralRepresentation::new(p));\n+    store.register_early_pass(|| box utils::internal_lints::ClippyLintsInternal);\n+    let p = conf.enum_variant_name_threshold;\n+    store.register_early_pass(move || box enum_variants::EnumVariantNames::new(p));\n \n-    reg.register_lint_group(\"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n-        arithmetic::FLOAT_ARITHMETIC,\n-        arithmetic::INTEGER_ARITHMETIC,\n-        dbg_macro::DBG_MACRO,\n-        else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n-        implicit_return::IMPLICIT_RETURN,\n-        indexing_slicing::INDEXING_SLICING,\n-        inherent_impl::MULTIPLE_INHERENT_IMPL,\n-        integer_division::INTEGER_DIVISION,\n-        literal_representation::DECIMAL_LITERAL_REPRESENTATION,\n-        matches::WILDCARD_ENUM_MATCH_ARM,\n-        mem_forget::MEM_FORGET,\n-        methods::CLONE_ON_REF_PTR,\n-        methods::GET_UNWRAP,\n-        methods::OPTION_EXPECT_USED,\n-        methods::OPTION_UNWRAP_USED,\n-        methods::RESULT_EXPECT_USED,\n-        methods::RESULT_UNWRAP_USED,\n-        methods::WRONG_PUB_SELF_CONVENTION,\n-        misc::FLOAT_CMP_CONST,\n-        missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS,\n-        missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS,\n-        panic_unimplemented::PANIC,\n-        panic_unimplemented::TODO,\n-        panic_unimplemented::UNIMPLEMENTED,\n-        panic_unimplemented::UNREACHABLE,\n-        shadow::SHADOW_REUSE,\n-        shadow::SHADOW_SAME,\n-        strings::STRING_ADD,\n-        write::PRINT_STDOUT,\n-        write::USE_DEBUG,\n+    store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n+        LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n+        LintId::of(&arithmetic::INTEGER_ARITHMETIC),\n+        LintId::of(&dbg_macro::DBG_MACRO),\n+        LintId::of(&else_if_without_else::ELSE_IF_WITHOUT_ELSE),\n+        LintId::of(&implicit_return::IMPLICIT_RETURN),\n+        LintId::of(&indexing_slicing::INDEXING_SLICING),\n+        LintId::of(&inherent_impl::MULTIPLE_INHERENT_IMPL),\n+        LintId::of(&integer_division::INTEGER_DIVISION),\n+        LintId::of(&literal_representation::DECIMAL_LITERAL_REPRESENTATION),\n+        LintId::of(&matches::WILDCARD_ENUM_MATCH_ARM),\n+        LintId::of(&mem_forget::MEM_FORGET),\n+        LintId::of(&methods::CLONE_ON_REF_PTR),\n+        LintId::of(&methods::GET_UNWRAP),\n+        LintId::of(&methods::OPTION_EXPECT_USED),\n+        LintId::of(&methods::OPTION_UNWRAP_USED),\n+        LintId::of(&methods::RESULT_EXPECT_USED),\n+        LintId::of(&methods::RESULT_UNWRAP_USED),\n+        LintId::of(&methods::WRONG_PUB_SELF_CONVENTION),\n+        LintId::of(&misc::FLOAT_CMP_CONST),\n+        LintId::of(&missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS),\n+        LintId::of(&missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS),\n+        LintId::of(&panic_unimplemented::PANIC),\n+        LintId::of(&panic_unimplemented::TODO),\n+        LintId::of(&panic_unimplemented::UNIMPLEMENTED),\n+        LintId::of(&panic_unimplemented::UNREACHABLE),\n+        LintId::of(&shadow::SHADOW_REUSE),\n+        LintId::of(&shadow::SHADOW_SAME),\n+        LintId::of(&strings::STRING_ADD),\n+        LintId::of(&write::PRINT_STDOUT),\n+        LintId::of(&write::USE_DEBUG),\n     ]);\n \n-    reg.register_lint_group(\"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n-        attrs::INLINE_ALWAYS,\n-        checked_conversions::CHECKED_CONVERSIONS,\n-        copies::MATCH_SAME_ARMS,\n-        copy_iterator::COPY_ITERATOR,\n-        default_trait_access::DEFAULT_TRAIT_ACCESS,\n-        derive::EXPL_IMPL_CLONE_ON_COPY,\n-        doc::DOC_MARKDOWN,\n-        empty_enum::EMPTY_ENUM,\n-        enum_glob_use::ENUM_GLOB_USE,\n-        enum_variants::MODULE_NAME_REPETITIONS,\n-        enum_variants::PUB_ENUM_VARIANT_NAMES,\n-        eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS,\n-        functions::MUST_USE_CANDIDATE,\n-        functions::TOO_MANY_LINES,\n-        if_not_else::IF_NOT_ELSE,\n-        infinite_iter::MAYBE_INFINITE_ITER,\n-        items_after_statements::ITEMS_AFTER_STATEMENTS,\n-        literal_representation::LARGE_DIGIT_GROUPS,\n-        loops::EXPLICIT_INTO_ITER_LOOP,\n-        loops::EXPLICIT_ITER_LOOP,\n-        matches::SINGLE_MATCH_ELSE,\n-        methods::FILTER_MAP,\n-        methods::FILTER_MAP_NEXT,\n-        methods::FIND_MAP,\n-        methods::MAP_FLATTEN,\n-        methods::OPTION_MAP_UNWRAP_OR,\n-        methods::OPTION_MAP_UNWRAP_OR_ELSE,\n-        methods::RESULT_MAP_UNWRAP_OR_ELSE,\n-        misc::USED_UNDERSCORE_BINDING,\n-        misc_early::UNSEPARATED_LITERAL_SUFFIX,\n-        mut_mut::MUT_MUT,\n-        needless_continue::NEEDLESS_CONTINUE,\n-        needless_pass_by_value::NEEDLESS_PASS_BY_VALUE,\n-        non_expressive_names::SIMILAR_NAMES,\n-        replace_consts::REPLACE_CONSTS,\n-        shadow::SHADOW_UNRELATED,\n-        strings::STRING_ADD_ASSIGN,\n-        trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n-        types::CAST_LOSSLESS,\n-        types::CAST_POSSIBLE_TRUNCATION,\n-        types::CAST_POSSIBLE_WRAP,\n-        types::CAST_PRECISION_LOSS,\n-        types::CAST_SIGN_LOSS,\n-        types::INVALID_UPCAST_COMPARISONS,\n-        types::LINKEDLIST,\n-        unicode::NON_ASCII_LITERAL,\n-        unicode::UNICODE_NOT_NFC,\n-        unused_self::UNUSED_SELF,\n-        use_self::USE_SELF,\n+    store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n+        LintId::of(&attrs::INLINE_ALWAYS),\n+        LintId::of(&checked_conversions::CHECKED_CONVERSIONS),\n+        LintId::of(&copies::MATCH_SAME_ARMS),\n+        LintId::of(&copy_iterator::COPY_ITERATOR),\n+        LintId::of(&default_trait_access::DEFAULT_TRAIT_ACCESS),\n+        LintId::of(&derive::EXPL_IMPL_CLONE_ON_COPY),\n+        LintId::of(&doc::DOC_MARKDOWN),\n+        LintId::of(&empty_enum::EMPTY_ENUM),\n+        LintId::of(&enum_glob_use::ENUM_GLOB_USE),\n+        LintId::of(&enum_variants::MODULE_NAME_REPETITIONS),\n+        LintId::of(&enum_variants::PUB_ENUM_VARIANT_NAMES),\n+        LintId::of(&eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS),\n+        LintId::of(&functions::MUST_USE_CANDIDATE),\n+        LintId::of(&functions::TOO_MANY_LINES),\n+        LintId::of(&if_not_else::IF_NOT_ELSE),\n+        LintId::of(&infinite_iter::MAYBE_INFINITE_ITER),\n+        LintId::of(&items_after_statements::ITEMS_AFTER_STATEMENTS),\n+        LintId::of(&literal_representation::LARGE_DIGIT_GROUPS),\n+        LintId::of(&loops::EXPLICIT_INTO_ITER_LOOP),\n+        LintId::of(&loops::EXPLICIT_ITER_LOOP),\n+        LintId::of(&matches::SINGLE_MATCH_ELSE),\n+        LintId::of(&methods::FILTER_MAP),\n+        LintId::of(&methods::FILTER_MAP_NEXT),\n+        LintId::of(&methods::FIND_MAP),\n+        LintId::of(&methods::MAP_FLATTEN),\n+        LintId::of(&methods::OPTION_MAP_UNWRAP_OR),\n+        LintId::of(&methods::OPTION_MAP_UNWRAP_OR_ELSE),\n+        LintId::of(&methods::RESULT_MAP_UNWRAP_OR_ELSE),\n+        LintId::of(&misc::USED_UNDERSCORE_BINDING),\n+        LintId::of(&misc_early::UNSEPARATED_LITERAL_SUFFIX),\n+        LintId::of(&mut_mut::MUT_MUT),\n+        LintId::of(&needless_continue::NEEDLESS_CONTINUE),\n+        LintId::of(&needless_pass_by_value::NEEDLESS_PASS_BY_VALUE),\n+        LintId::of(&non_expressive_names::SIMILAR_NAMES),\n+        LintId::of(&replace_consts::REPLACE_CONSTS),\n+        LintId::of(&shadow::SHADOW_UNRELATED),\n+        LintId::of(&strings::STRING_ADD_ASSIGN),\n+        LintId::of(&trait_bounds::TYPE_REPETITION_IN_BOUNDS),\n+        LintId::of(&types::CAST_LOSSLESS),\n+        LintId::of(&types::CAST_POSSIBLE_TRUNCATION),\n+        LintId::of(&types::CAST_POSSIBLE_WRAP),\n+        LintId::of(&types::CAST_PRECISION_LOSS),\n+        LintId::of(&types::CAST_SIGN_LOSS),\n+        LintId::of(&types::INVALID_UPCAST_COMPARISONS),\n+        LintId::of(&types::LINKEDLIST),\n+        LintId::of(&unicode::NON_ASCII_LITERAL),\n+        LintId::of(&unicode::UNICODE_NOT_NFC),\n+        LintId::of(&unused_self::UNUSED_SELF),\n+        LintId::of(&use_self::USE_SELF),\n     ]);\n \n-    reg.register_lint_group(\"clippy::internal\", Some(\"clippy_internal\"), vec![\n-        utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n-        utils::internal_lints::COMPILER_LINT_FUNCTIONS,\n-        utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n-        utils::internal_lints::OUTER_EXPN_EXPN_DATA,\n+    store.register_group(true, \"clippy::internal\", Some(\"clippy_internal\"), vec![\n+        LintId::of(&utils::internal_lints::CLIPPY_LINTS_INTERNAL),\n+        LintId::of(&utils::internal_lints::COMPILER_LINT_FUNCTIONS),\n+        LintId::of(&utils::internal_lints::LINT_WITHOUT_LINT_PASS),\n+        LintId::of(&utils::internal_lints::OUTER_EXPN_EXPN_DATA),\n     ]);\n \n-    reg.register_lint_group(\"clippy::all\", Some(\"clippy\"), vec![\n-        approx_const::APPROX_CONSTANT,\n-        assertions_on_constants::ASSERTIONS_ON_CONSTANTS,\n-        assign_ops::ASSIGN_OP_PATTERN,\n-        assign_ops::MISREFACTORED_ASSIGN_OP,\n-        attrs::DEPRECATED_CFG_ATTR,\n-        attrs::DEPRECATED_SEMVER,\n-        attrs::UNKNOWN_CLIPPY_LINTS,\n-        attrs::USELESS_ATTRIBUTE,\n-        bit_mask::BAD_BIT_MASK,\n-        bit_mask::INEFFECTIVE_BIT_MASK,\n-        bit_mask::VERBOSE_BIT_MASK,\n-        blacklisted_name::BLACKLISTED_NAME,\n-        block_in_if_condition::BLOCK_IN_IF_CONDITION_EXPR,\n-        block_in_if_condition::BLOCK_IN_IF_CONDITION_STMT,\n-        booleans::LOGIC_BUG,\n-        booleans::NONMINIMAL_BOOL,\n-        bytecount::NAIVE_BYTECOUNT,\n-        cognitive_complexity::COGNITIVE_COMPLEXITY,\n-        collapsible_if::COLLAPSIBLE_IF,\n-        comparison_chain::COMPARISON_CHAIN,\n-        copies::IFS_SAME_COND,\n-        copies::IF_SAME_THEN_ELSE,\n-        derive::DERIVE_HASH_XOR_EQ,\n-        doc::MISSING_SAFETY_DOC,\n-        doc::NEEDLESS_DOCTEST_MAIN,\n-        double_comparison::DOUBLE_COMPARISONS,\n-        double_parens::DOUBLE_PARENS,\n-        drop_bounds::DROP_BOUNDS,\n-        drop_forget_ref::DROP_COPY,\n-        drop_forget_ref::DROP_REF,\n-        drop_forget_ref::FORGET_COPY,\n-        drop_forget_ref::FORGET_REF,\n-        duration_subsec::DURATION_SUBSEC,\n-        entry::MAP_ENTRY,\n-        enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT,\n-        enum_variants::ENUM_VARIANT_NAMES,\n-        enum_variants::MODULE_INCEPTION,\n-        eq_op::EQ_OP,\n-        eq_op::OP_REF,\n-        erasing_op::ERASING_OP,\n-        escape::BOXED_LOCAL,\n-        eta_reduction::REDUNDANT_CLOSURE,\n-        eval_order_dependence::DIVERGING_SUB_EXPRESSION,\n-        eval_order_dependence::EVAL_ORDER_DEPENDENCE,\n-        excessive_precision::EXCESSIVE_PRECISION,\n-        explicit_write::EXPLICIT_WRITE,\n-        format::USELESS_FORMAT,\n-        formatting::POSSIBLE_MISSING_COMMA,\n-        formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n-        formatting::SUSPICIOUS_ELSE_FORMATTING,\n-        formatting::SUSPICIOUS_UNARY_OP_FORMATTING,\n-        functions::DOUBLE_MUST_USE,\n-        functions::MUST_USE_UNIT,\n-        functions::NOT_UNSAFE_PTR_ARG_DEREF,\n-        functions::TOO_MANY_ARGUMENTS,\n-        get_last_with_len::GET_LAST_WITH_LEN,\n-        identity_conversion::IDENTITY_CONVERSION,\n-        identity_op::IDENTITY_OP,\n-        indexing_slicing::OUT_OF_BOUNDS_INDEXING,\n-        infallible_destructuring_match::INFALLIBLE_DESTRUCTURING_MATCH,\n-        infinite_iter::INFINITE_ITER,\n-        inherent_to_string::INHERENT_TO_STRING,\n-        inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY,\n-        inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n-        int_plus_one::INT_PLUS_ONE,\n-        large_enum_variant::LARGE_ENUM_VARIANT,\n-        len_zero::LEN_WITHOUT_IS_EMPTY,\n-        len_zero::LEN_ZERO,\n-        let_if_seq::USELESS_LET_IF_SEQ,\n-        lifetimes::EXTRA_UNUSED_LIFETIMES,\n-        lifetimes::NEEDLESS_LIFETIMES,\n-        literal_representation::INCONSISTENT_DIGIT_GROUPING,\n-        literal_representation::MISTYPED_LITERAL_SUFFIXES,\n-        literal_representation::UNREADABLE_LITERAL,\n-        loops::EMPTY_LOOP,\n-        loops::EXPLICIT_COUNTER_LOOP,\n-        loops::FOR_KV_MAP,\n-        loops::FOR_LOOP_OVER_OPTION,\n-        loops::FOR_LOOP_OVER_RESULT,\n-        loops::ITER_NEXT_LOOP,\n-        loops::MANUAL_MEMCPY,\n-        loops::MUT_RANGE_BOUND,\n-        loops::NEEDLESS_COLLECT,\n-        loops::NEEDLESS_RANGE_LOOP,\n-        loops::NEVER_LOOP,\n-        loops::REVERSE_RANGE_LOOP,\n-        loops::WHILE_IMMUTABLE_CONDITION,\n-        loops::WHILE_LET_LOOP,\n-        loops::WHILE_LET_ON_ITERATOR,\n-        main_recursion::MAIN_RECURSION,\n-        map_clone::MAP_CLONE,\n-        map_unit_fn::OPTION_MAP_UNIT_FN,\n-        map_unit_fn::RESULT_MAP_UNIT_FN,\n-        matches::MATCH_AS_REF,\n-        matches::MATCH_BOOL,\n-        matches::MATCH_OVERLAPPING_ARM,\n-        matches::MATCH_REF_PATS,\n-        matches::MATCH_WILD_ERR_ARM,\n-        matches::SINGLE_MATCH,\n-        mem_discriminant::MEM_DISCRIMINANT_NON_ENUM,\n-        mem_replace::MEM_REPLACE_OPTION_WITH_NONE,\n-        mem_replace::MEM_REPLACE_WITH_UNINIT,\n-        methods::CHARS_LAST_CMP,\n-        methods::CHARS_NEXT_CMP,\n-        methods::CLONE_DOUBLE_REF,\n-        methods::CLONE_ON_COPY,\n-        methods::EXPECT_FUN_CALL,\n-        methods::FILTER_NEXT,\n-        methods::FLAT_MAP_IDENTITY,\n-        methods::INEFFICIENT_TO_STRING,\n-        methods::INTO_ITER_ON_ARRAY,\n-        methods::INTO_ITER_ON_REF,\n-        methods::ITER_CLONED_COLLECT,\n-        methods::ITER_NTH,\n-        methods::ITER_SKIP_NEXT,\n-        methods::MANUAL_SATURATING_ARITHMETIC,\n-        methods::NEW_RET_NO_SELF,\n-        methods::OK_EXPECT,\n-        methods::OPTION_AND_THEN_SOME,\n-        methods::OPTION_MAP_OR_NONE,\n-        methods::OR_FUN_CALL,\n-        methods::SEARCH_IS_SOME,\n-        methods::SHOULD_IMPLEMENT_TRAIT,\n-        methods::SINGLE_CHAR_PATTERN,\n-        methods::STRING_EXTEND_CHARS,\n-        methods::SUSPICIOUS_MAP,\n-        methods::TEMPORARY_CSTRING_AS_PTR,\n-        methods::UNINIT_ASSUMED_INIT,\n-        methods::UNNECESSARY_FILTER_MAP,\n-        methods::UNNECESSARY_FOLD,\n-        methods::USELESS_ASREF,\n-        methods::WRONG_SELF_CONVENTION,\n-        minmax::MIN_MAX,\n-        misc::CMP_NAN,\n-        misc::CMP_OWNED,\n-        misc::FLOAT_CMP,\n-        misc::MODULO_ONE,\n-        misc::SHORT_CIRCUIT_STATEMENT,\n-        misc::TOPLEVEL_REF_ARG,\n-        misc::ZERO_PTR,\n-        misc_early::BUILTIN_TYPE_SHADOW,\n-        misc_early::DOUBLE_NEG,\n-        misc_early::DUPLICATE_UNDERSCORE_ARGUMENT,\n-        misc_early::MIXED_CASE_HEX_LITERALS,\n-        misc_early::REDUNDANT_CLOSURE_CALL,\n-        misc_early::REDUNDANT_PATTERN,\n-        misc_early::UNNEEDED_FIELD_PATTERN,\n-        misc_early::UNNEEDED_WILDCARD_PATTERN,\n-        misc_early::ZERO_PREFIXED_LITERAL,\n-        mul_add::MANUAL_MUL_ADD,\n-        mut_reference::UNNECESSARY_MUT_PASSED,\n-        mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL,\n-        mutex_atomic::MUTEX_ATOMIC,\n-        needless_bool::BOOL_COMPARISON,\n-        needless_bool::NEEDLESS_BOOL,\n-        needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE,\n-        needless_update::NEEDLESS_UPDATE,\n-        neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD,\n-        neg_multiply::NEG_MULTIPLY,\n-        new_without_default::NEW_WITHOUT_DEFAULT,\n-        no_effect::NO_EFFECT,\n-        no_effect::UNNECESSARY_OPERATION,\n-        non_copy_const::BORROW_INTERIOR_MUTABLE_CONST,\n-        non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST,\n-        non_expressive_names::JUST_UNDERSCORES_AND_DIGITS,\n-        non_expressive_names::MANY_SINGLE_CHAR_NAMES,\n-        ok_if_let::IF_LET_SOME_RESULT,\n-        open_options::NONSENSICAL_OPEN_OPTIONS,\n-        overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n-        panic_unimplemented::PANIC_PARAMS,\n-        partialeq_ne_impl::PARTIALEQ_NE_IMPL,\n-        precedence::PRECEDENCE,\n-        ptr::CMP_NULL,\n-        ptr::MUT_FROM_REF,\n-        ptr::PTR_ARG,\n-        ptr_offset_with_cast::PTR_OFFSET_WITH_CAST,\n-        question_mark::QUESTION_MARK,\n-        ranges::ITERATOR_STEP_BY_ZERO,\n-        ranges::RANGE_MINUS_ONE,\n-        ranges::RANGE_PLUS_ONE,\n-        ranges::RANGE_ZIP_WITH_LEN,\n-        redundant_clone::REDUNDANT_CLONE,\n-        redundant_field_names::REDUNDANT_FIELD_NAMES,\n-        redundant_pattern_matching::REDUNDANT_PATTERN_MATCHING,\n-        redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES,\n-        reference::DEREF_ADDROF,\n-        reference::REF_IN_DEREF,\n-        regex::INVALID_REGEX,\n-        regex::REGEX_MACRO,\n-        regex::TRIVIAL_REGEX,\n-        returns::LET_AND_RETURN,\n-        returns::NEEDLESS_RETURN,\n-        returns::UNUSED_UNIT,\n-        serde_api::SERDE_API_MISUSE,\n-        slow_vector_initialization::SLOW_VECTOR_INITIALIZATION,\n-        strings::STRING_LIT_AS_BYTES,\n-        suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL,\n-        suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL,\n-        swap::ALMOST_SWAPPED,\n-        swap::MANUAL_SWAP,\n-        temporary_assignment::TEMPORARY_ASSIGNMENT,\n-        transmute::CROSSPOINTER_TRANSMUTE,\n-        transmute::TRANSMUTE_BYTES_TO_STR,\n-        transmute::TRANSMUTE_INT_TO_BOOL,\n-        transmute::TRANSMUTE_INT_TO_CHAR,\n-        transmute::TRANSMUTE_INT_TO_FLOAT,\n-        transmute::TRANSMUTE_PTR_TO_PTR,\n-        transmute::TRANSMUTE_PTR_TO_REF,\n-        transmute::UNSOUND_COLLECTION_TRANSMUTE,\n-        transmute::USELESS_TRANSMUTE,\n-        transmute::WRONG_TRANSMUTE,\n-        transmuting_null::TRANSMUTING_NULL,\n-        trivially_copy_pass_by_ref::TRIVIALLY_COPY_PASS_BY_REF,\n-        try_err::TRY_ERR,\n-        types::ABSURD_EXTREME_COMPARISONS,\n-        types::BORROWED_BOX,\n-        types::BOX_VEC,\n-        types::CAST_PTR_ALIGNMENT,\n-        types::CAST_REF_TO_MUT,\n-        types::CHAR_LIT_AS_U8,\n-        types::FN_TO_NUMERIC_CAST,\n-        types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n-        types::IMPLICIT_HASHER,\n-        types::LET_UNIT_VALUE,\n-        types::OPTION_OPTION,\n-        types::TYPE_COMPLEXITY,\n-        types::UNIT_ARG,\n-        types::UNIT_CMP,\n-        types::UNNECESSARY_CAST,\n-        types::VEC_BOX,\n-        unicode::ZERO_WIDTH_SPACE,\n-        unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n-        unused_io_amount::UNUSED_IO_AMOUNT,\n-        unused_label::UNUSED_LABEL,\n-        unwrap::PANICKING_UNWRAP,\n-        unwrap::UNNECESSARY_UNWRAP,\n-        vec::USELESS_VEC,\n-        write::PRINTLN_EMPTY_STRING,\n-        write::PRINT_LITERAL,\n-        write::PRINT_WITH_NEWLINE,\n-        write::WRITELN_EMPTY_STRING,\n-        write::WRITE_LITERAL,\n-        write::WRITE_WITH_NEWLINE,\n-        zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n+    store.register_group(true, \"clippy::all\", Some(\"clippy\"), vec![\n+        LintId::of(&approx_const::APPROX_CONSTANT),\n+        LintId::of(&assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n+        LintId::of(&assign_ops::ASSIGN_OP_PATTERN),\n+        LintId::of(&assign_ops::MISREFACTORED_ASSIGN_OP),\n+        LintId::of(&attrs::DEPRECATED_CFG_ATTR),\n+        LintId::of(&attrs::DEPRECATED_SEMVER),\n+        LintId::of(&attrs::UNKNOWN_CLIPPY_LINTS),\n+        LintId::of(&attrs::USELESS_ATTRIBUTE),\n+        LintId::of(&bit_mask::BAD_BIT_MASK),\n+        LintId::of(&bit_mask::INEFFECTIVE_BIT_MASK),\n+        LintId::of(&bit_mask::VERBOSE_BIT_MASK),\n+        LintId::of(&blacklisted_name::BLACKLISTED_NAME),\n+        LintId::of(&block_in_if_condition::BLOCK_IN_IF_CONDITION_EXPR),\n+        LintId::of(&block_in_if_condition::BLOCK_IN_IF_CONDITION_STMT),\n+        LintId::of(&booleans::LOGIC_BUG),\n+        LintId::of(&booleans::NONMINIMAL_BOOL),\n+        LintId::of(&bytecount::NAIVE_BYTECOUNT),\n+        LintId::of(&cognitive_complexity::COGNITIVE_COMPLEXITY),\n+        LintId::of(&collapsible_if::COLLAPSIBLE_IF),\n+        LintId::of(&comparison_chain::COMPARISON_CHAIN),\n+        LintId::of(&copies::IFS_SAME_COND),\n+        LintId::of(&copies::IF_SAME_THEN_ELSE),\n+        LintId::of(&derive::DERIVE_HASH_XOR_EQ),\n+        LintId::of(&doc::MISSING_SAFETY_DOC),\n+        LintId::of(&doc::NEEDLESS_DOCTEST_MAIN),\n+        LintId::of(&double_comparison::DOUBLE_COMPARISONS),\n+        LintId::of(&double_parens::DOUBLE_PARENS),\n+        LintId::of(&drop_bounds::DROP_BOUNDS),\n+        LintId::of(&drop_forget_ref::DROP_COPY),\n+        LintId::of(&drop_forget_ref::DROP_REF),\n+        LintId::of(&drop_forget_ref::FORGET_COPY),\n+        LintId::of(&drop_forget_ref::FORGET_REF),\n+        LintId::of(&duration_subsec::DURATION_SUBSEC),\n+        LintId::of(&entry::MAP_ENTRY),\n+        LintId::of(&enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT),\n+        LintId::of(&enum_variants::ENUM_VARIANT_NAMES),\n+        LintId::of(&enum_variants::MODULE_INCEPTION),\n+        LintId::of(&eq_op::EQ_OP),\n+        LintId::of(&eq_op::OP_REF),\n+        LintId::of(&erasing_op::ERASING_OP),\n+        LintId::of(&escape::BOXED_LOCAL),\n+        LintId::of(&eta_reduction::REDUNDANT_CLOSURE),\n+        LintId::of(&eval_order_dependence::DIVERGING_SUB_EXPRESSION),\n+        LintId::of(&eval_order_dependence::EVAL_ORDER_DEPENDENCE),\n+        LintId::of(&excessive_precision::EXCESSIVE_PRECISION),\n+        LintId::of(&explicit_write::EXPLICIT_WRITE),\n+        LintId::of(&format::USELESS_FORMAT),\n+        LintId::of(&formatting::POSSIBLE_MISSING_COMMA),\n+        LintId::of(&formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n+        LintId::of(&formatting::SUSPICIOUS_ELSE_FORMATTING),\n+        LintId::of(&formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n+        LintId::of(&functions::DOUBLE_MUST_USE),\n+        LintId::of(&functions::MUST_USE_UNIT),\n+        LintId::of(&functions::NOT_UNSAFE_PTR_ARG_DEREF),\n+        LintId::of(&functions::TOO_MANY_ARGUMENTS),\n+        LintId::of(&get_last_with_len::GET_LAST_WITH_LEN),\n+        LintId::of(&identity_conversion::IDENTITY_CONVERSION),\n+        LintId::of(&identity_op::IDENTITY_OP),\n+        LintId::of(&indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n+        LintId::of(&infallible_destructuring_match::INFALLIBLE_DESTRUCTURING_MATCH),\n+        LintId::of(&infinite_iter::INFINITE_ITER),\n+        LintId::of(&inherent_to_string::INHERENT_TO_STRING),\n+        LintId::of(&inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY),\n+        LintId::of(&inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n+        LintId::of(&int_plus_one::INT_PLUS_ONE),\n+        LintId::of(&large_enum_variant::LARGE_ENUM_VARIANT),\n+        LintId::of(&len_zero::LEN_WITHOUT_IS_EMPTY),\n+        LintId::of(&len_zero::LEN_ZERO),\n+        LintId::of(&let_if_seq::USELESS_LET_IF_SEQ),\n+        LintId::of(&lifetimes::EXTRA_UNUSED_LIFETIMES),\n+        LintId::of(&lifetimes::NEEDLESS_LIFETIMES),\n+        LintId::of(&literal_representation::INCONSISTENT_DIGIT_GROUPING),\n+        LintId::of(&literal_representation::MISTYPED_LITERAL_SUFFIXES),\n+        LintId::of(&literal_representation::UNREADABLE_LITERAL),\n+        LintId::of(&loops::EMPTY_LOOP),\n+        LintId::of(&loops::EXPLICIT_COUNTER_LOOP),\n+        LintId::of(&loops::FOR_KV_MAP),\n+        LintId::of(&loops::FOR_LOOP_OVER_OPTION),\n+        LintId::of(&loops::FOR_LOOP_OVER_RESULT),\n+        LintId::of(&loops::ITER_NEXT_LOOP),\n+        LintId::of(&loops::MANUAL_MEMCPY),\n+        LintId::of(&loops::MUT_RANGE_BOUND),\n+        LintId::of(&loops::NEEDLESS_COLLECT),\n+        LintId::of(&loops::NEEDLESS_RANGE_LOOP),\n+        LintId::of(&loops::NEVER_LOOP),\n+        LintId::of(&loops::REVERSE_RANGE_LOOP),\n+        LintId::of(&loops::WHILE_IMMUTABLE_CONDITION),\n+        LintId::of(&loops::WHILE_LET_LOOP),\n+        LintId::of(&loops::WHILE_LET_ON_ITERATOR),\n+        LintId::of(&main_recursion::MAIN_RECURSION),\n+        LintId::of(&map_clone::MAP_CLONE),\n+        LintId::of(&map_unit_fn::OPTION_MAP_UNIT_FN),\n+        LintId::of(&map_unit_fn::RESULT_MAP_UNIT_FN),\n+        LintId::of(&matches::MATCH_AS_REF),\n+        LintId::of(&matches::MATCH_BOOL),\n+        LintId::of(&matches::MATCH_OVERLAPPING_ARM),\n+        LintId::of(&matches::MATCH_REF_PATS),\n+        LintId::of(&matches::MATCH_WILD_ERR_ARM),\n+        LintId::of(&matches::SINGLE_MATCH),\n+        LintId::of(&mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n+        LintId::of(&mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n+        LintId::of(&mem_replace::MEM_REPLACE_WITH_UNINIT),\n+        LintId::of(&methods::CHARS_LAST_CMP),\n+        LintId::of(&methods::CHARS_NEXT_CMP),\n+        LintId::of(&methods::CLONE_DOUBLE_REF),\n+        LintId::of(&methods::CLONE_ON_COPY),\n+        LintId::of(&methods::EXPECT_FUN_CALL),\n+        LintId::of(&methods::FILTER_NEXT),\n+        LintId::of(&methods::FLAT_MAP_IDENTITY),\n+        LintId::of(&methods::INEFFICIENT_TO_STRING),\n+        LintId::of(&methods::INTO_ITER_ON_ARRAY),\n+        LintId::of(&methods::INTO_ITER_ON_REF),\n+        LintId::of(&methods::ITER_CLONED_COLLECT),\n+        LintId::of(&methods::ITER_NTH),\n+        LintId::of(&methods::ITER_SKIP_NEXT),\n+        LintId::of(&methods::MANUAL_SATURATING_ARITHMETIC),\n+        LintId::of(&methods::NEW_RET_NO_SELF),\n+        LintId::of(&methods::OK_EXPECT),\n+        LintId::of(&methods::OPTION_AND_THEN_SOME),\n+        LintId::of(&methods::OPTION_MAP_OR_NONE),\n+        LintId::of(&methods::OR_FUN_CALL),\n+        LintId::of(&methods::SEARCH_IS_SOME),\n+        LintId::of(&methods::SHOULD_IMPLEMENT_TRAIT),\n+        LintId::of(&methods::SINGLE_CHAR_PATTERN),\n+        LintId::of(&methods::STRING_EXTEND_CHARS),\n+        LintId::of(&methods::SUSPICIOUS_MAP),\n+        LintId::of(&methods::TEMPORARY_CSTRING_AS_PTR),\n+        LintId::of(&methods::UNINIT_ASSUMED_INIT),\n+        LintId::of(&methods::UNNECESSARY_FILTER_MAP),\n+        LintId::of(&methods::UNNECESSARY_FOLD),\n+        LintId::of(&methods::USELESS_ASREF),\n+        LintId::of(&methods::WRONG_SELF_CONVENTION),\n+        LintId::of(&minmax::MIN_MAX),\n+        LintId::of(&misc::CMP_NAN),\n+        LintId::of(&misc::CMP_OWNED),\n+        LintId::of(&misc::FLOAT_CMP),\n+        LintId::of(&misc::MODULO_ONE),\n+        LintId::of(&misc::SHORT_CIRCUIT_STATEMENT),\n+        LintId::of(&misc::TOPLEVEL_REF_ARG),\n+        LintId::of(&misc::ZERO_PTR),\n+        LintId::of(&misc_early::BUILTIN_TYPE_SHADOW),\n+        LintId::of(&misc_early::DOUBLE_NEG),\n+        LintId::of(&misc_early::DUPLICATE_UNDERSCORE_ARGUMENT),\n+        LintId::of(&misc_early::MIXED_CASE_HEX_LITERALS),\n+        LintId::of(&misc_early::REDUNDANT_CLOSURE_CALL),\n+        LintId::of(&misc_early::REDUNDANT_PATTERN),\n+        LintId::of(&misc_early::UNNEEDED_FIELD_PATTERN),\n+        LintId::of(&misc_early::UNNEEDED_WILDCARD_PATTERN),\n+        LintId::of(&misc_early::ZERO_PREFIXED_LITERAL),\n+        LintId::of(&mul_add::MANUAL_MUL_ADD),\n+        LintId::of(&mut_reference::UNNECESSARY_MUT_PASSED),\n+        LintId::of(&mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),\n+        LintId::of(&mutex_atomic::MUTEX_ATOMIC),\n+        LintId::of(&needless_bool::BOOL_COMPARISON),\n+        LintId::of(&needless_bool::NEEDLESS_BOOL),\n+        LintId::of(&needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),\n+        LintId::of(&needless_update::NEEDLESS_UPDATE),\n+        LintId::of(&neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD),\n+        LintId::of(&neg_multiply::NEG_MULTIPLY),\n+        LintId::of(&new_without_default::NEW_WITHOUT_DEFAULT),\n+        LintId::of(&no_effect::NO_EFFECT),\n+        LintId::of(&no_effect::UNNECESSARY_OPERATION),\n+        LintId::of(&non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),\n+        LintId::of(&non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n+        LintId::of(&non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n+        LintId::of(&non_expressive_names::MANY_SINGLE_CHAR_NAMES),\n+        LintId::of(&ok_if_let::IF_LET_SOME_RESULT),\n+        LintId::of(&open_options::NONSENSICAL_OPEN_OPTIONS),\n+        LintId::of(&overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n+        LintId::of(&panic_unimplemented::PANIC_PARAMS),\n+        LintId::of(&partialeq_ne_impl::PARTIALEQ_NE_IMPL),\n+        LintId::of(&precedence::PRECEDENCE),\n+        LintId::of(&ptr::CMP_NULL),\n+        LintId::of(&ptr::MUT_FROM_REF),\n+        LintId::of(&ptr::PTR_ARG),\n+        LintId::of(&ptr_offset_with_cast::PTR_OFFSET_WITH_CAST),\n+        LintId::of(&question_mark::QUESTION_MARK),\n+        LintId::of(&ranges::ITERATOR_STEP_BY_ZERO),\n+        LintId::of(&ranges::RANGE_MINUS_ONE),\n+        LintId::of(&ranges::RANGE_PLUS_ONE),\n+        LintId::of(&ranges::RANGE_ZIP_WITH_LEN),\n+        LintId::of(&redundant_clone::REDUNDANT_CLONE),\n+        LintId::of(&redundant_field_names::REDUNDANT_FIELD_NAMES),\n+        LintId::of(&redundant_pattern_matching::REDUNDANT_PATTERN_MATCHING),\n+        LintId::of(&redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n+        LintId::of(&reference::DEREF_ADDROF),\n+        LintId::of(&reference::REF_IN_DEREF),\n+        LintId::of(&regex::INVALID_REGEX),\n+        LintId::of(&regex::REGEX_MACRO),\n+        LintId::of(&regex::TRIVIAL_REGEX),\n+        LintId::of(&returns::LET_AND_RETURN),\n+        LintId::of(&returns::NEEDLESS_RETURN),\n+        LintId::of(&returns::UNUSED_UNIT),\n+        LintId::of(&serde_api::SERDE_API_MISUSE),\n+        LintId::of(&slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n+        LintId::of(&strings::STRING_LIT_AS_BYTES),\n+        LintId::of(&suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n+        LintId::of(&suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n+        LintId::of(&swap::ALMOST_SWAPPED),\n+        LintId::of(&swap::MANUAL_SWAP),\n+        LintId::of(&temporary_assignment::TEMPORARY_ASSIGNMENT),\n+        LintId::of(&transmute::CROSSPOINTER_TRANSMUTE),\n+        LintId::of(&transmute::TRANSMUTE_BYTES_TO_STR),\n+        LintId::of(&transmute::TRANSMUTE_INT_TO_BOOL),\n+        LintId::of(&transmute::TRANSMUTE_INT_TO_CHAR),\n+        LintId::of(&transmute::TRANSMUTE_INT_TO_FLOAT),\n+        LintId::of(&transmute::TRANSMUTE_PTR_TO_PTR),\n+        LintId::of(&transmute::TRANSMUTE_PTR_TO_REF),\n+        LintId::of(&transmute::UNSOUND_COLLECTION_TRANSMUTE),\n+        LintId::of(&transmute::USELESS_TRANSMUTE),\n+        LintId::of(&transmute::WRONG_TRANSMUTE),\n+        LintId::of(&transmuting_null::TRANSMUTING_NULL),\n+        LintId::of(&trivially_copy_pass_by_ref::TRIVIALLY_COPY_PASS_BY_REF),\n+        LintId::of(&try_err::TRY_ERR),\n+        LintId::of(&types::ABSURD_EXTREME_COMPARISONS),\n+        LintId::of(&types::BORROWED_BOX),\n+        LintId::of(&types::BOX_VEC),\n+        LintId::of(&types::CAST_PTR_ALIGNMENT),\n+        LintId::of(&types::CAST_REF_TO_MUT),\n+        LintId::of(&types::CHAR_LIT_AS_U8),\n+        LintId::of(&types::FN_TO_NUMERIC_CAST),\n+        LintId::of(&types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n+        LintId::of(&types::IMPLICIT_HASHER),\n+        LintId::of(&types::LET_UNIT_VALUE),\n+        LintId::of(&types::OPTION_OPTION),\n+        LintId::of(&types::TYPE_COMPLEXITY),\n+        LintId::of(&types::UNIT_ARG),\n+        LintId::of(&types::UNIT_CMP),\n+        LintId::of(&types::UNNECESSARY_CAST),\n+        LintId::of(&types::VEC_BOX),\n+        LintId::of(&unicode::ZERO_WIDTH_SPACE),\n+        LintId::of(&unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n+        LintId::of(&unused_io_amount::UNUSED_IO_AMOUNT),\n+        LintId::of(&unused_label::UNUSED_LABEL),\n+        LintId::of(&unwrap::PANICKING_UNWRAP),\n+        LintId::of(&unwrap::UNNECESSARY_UNWRAP),\n+        LintId::of(&vec::USELESS_VEC),\n+        LintId::of(&write::PRINTLN_EMPTY_STRING),\n+        LintId::of(&write::PRINT_LITERAL),\n+        LintId::of(&write::PRINT_WITH_NEWLINE),\n+        LintId::of(&write::WRITELN_EMPTY_STRING),\n+        LintId::of(&write::WRITE_LITERAL),\n+        LintId::of(&write::WRITE_WITH_NEWLINE),\n+        LintId::of(&zero_div_zero::ZERO_DIVIDED_BY_ZERO),\n     ]);\n \n-    reg.register_lint_group(\"clippy::style\", Some(\"clippy_style\"), vec![\n-        assertions_on_constants::ASSERTIONS_ON_CONSTANTS,\n-        assign_ops::ASSIGN_OP_PATTERN,\n-        attrs::UNKNOWN_CLIPPY_LINTS,\n-        bit_mask::VERBOSE_BIT_MASK,\n-        blacklisted_name::BLACKLISTED_NAME,\n-        block_in_if_condition::BLOCK_IN_IF_CONDITION_EXPR,\n-        block_in_if_condition::BLOCK_IN_IF_CONDITION_STMT,\n-        collapsible_if::COLLAPSIBLE_IF,\n-        comparison_chain::COMPARISON_CHAIN,\n-        doc::MISSING_SAFETY_DOC,\n-        doc::NEEDLESS_DOCTEST_MAIN,\n-        enum_variants::ENUM_VARIANT_NAMES,\n-        enum_variants::MODULE_INCEPTION,\n-        eq_op::OP_REF,\n-        eta_reduction::REDUNDANT_CLOSURE,\n-        excessive_precision::EXCESSIVE_PRECISION,\n-        formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n-        formatting::SUSPICIOUS_ELSE_FORMATTING,\n-        formatting::SUSPICIOUS_UNARY_OP_FORMATTING,\n-        functions::DOUBLE_MUST_USE,\n-        functions::MUST_USE_UNIT,\n-        infallible_destructuring_match::INFALLIBLE_DESTRUCTURING_MATCH,\n-        inherent_to_string::INHERENT_TO_STRING,\n-        len_zero::LEN_WITHOUT_IS_EMPTY,\n-        len_zero::LEN_ZERO,\n-        let_if_seq::USELESS_LET_IF_SEQ,\n-        literal_representation::INCONSISTENT_DIGIT_GROUPING,\n-        literal_representation::UNREADABLE_LITERAL,\n-        loops::EMPTY_LOOP,\n-        loops::FOR_KV_MAP,\n-        loops::NEEDLESS_RANGE_LOOP,\n-        loops::WHILE_LET_ON_ITERATOR,\n-        main_recursion::MAIN_RECURSION,\n-        map_clone::MAP_CLONE,\n-        matches::MATCH_BOOL,\n-        matches::MATCH_OVERLAPPING_ARM,\n-        matches::MATCH_REF_PATS,\n-        matches::MATCH_WILD_ERR_ARM,\n-        matches::SINGLE_MATCH,\n-        mem_replace::MEM_REPLACE_OPTION_WITH_NONE,\n-        methods::CHARS_LAST_CMP,\n-        methods::INTO_ITER_ON_REF,\n-        methods::ITER_CLONED_COLLECT,\n-        methods::ITER_SKIP_NEXT,\n-        methods::MANUAL_SATURATING_ARITHMETIC,\n-        methods::NEW_RET_NO_SELF,\n-        methods::OK_EXPECT,\n-        methods::OPTION_MAP_OR_NONE,\n-        methods::SHOULD_IMPLEMENT_TRAIT,\n-        methods::STRING_EXTEND_CHARS,\n-        methods::UNNECESSARY_FOLD,\n-        methods::WRONG_SELF_CONVENTION,\n-        misc::TOPLEVEL_REF_ARG,\n-        misc::ZERO_PTR,\n-        misc_early::BUILTIN_TYPE_SHADOW,\n-        misc_early::DOUBLE_NEG,\n-        misc_early::DUPLICATE_UNDERSCORE_ARGUMENT,\n-        misc_early::MIXED_CASE_HEX_LITERALS,\n-        misc_early::REDUNDANT_PATTERN,\n-        misc_early::UNNEEDED_FIELD_PATTERN,\n-        mut_reference::UNNECESSARY_MUT_PASSED,\n-        neg_multiply::NEG_MULTIPLY,\n-        new_without_default::NEW_WITHOUT_DEFAULT,\n-        non_expressive_names::JUST_UNDERSCORES_AND_DIGITS,\n-        non_expressive_names::MANY_SINGLE_CHAR_NAMES,\n-        ok_if_let::IF_LET_SOME_RESULT,\n-        panic_unimplemented::PANIC_PARAMS,\n-        ptr::CMP_NULL,\n-        ptr::PTR_ARG,\n-        question_mark::QUESTION_MARK,\n-        redundant_field_names::REDUNDANT_FIELD_NAMES,\n-        redundant_pattern_matching::REDUNDANT_PATTERN_MATCHING,\n-        redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES,\n-        regex::REGEX_MACRO,\n-        regex::TRIVIAL_REGEX,\n-        returns::LET_AND_RETURN,\n-        returns::NEEDLESS_RETURN,\n-        returns::UNUSED_UNIT,\n-        strings::STRING_LIT_AS_BYTES,\n-        try_err::TRY_ERR,\n-        types::FN_TO_NUMERIC_CAST,\n-        types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n-        types::IMPLICIT_HASHER,\n-        types::LET_UNIT_VALUE,\n-        unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n-        write::PRINTLN_EMPTY_STRING,\n-        write::PRINT_LITERAL,\n-        write::PRINT_WITH_NEWLINE,\n-        write::WRITELN_EMPTY_STRING,\n-        write::WRITE_LITERAL,\n-        write::WRITE_WITH_NEWLINE,\n+    store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n+        LintId::of(&assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n+        LintId::of(&assign_ops::ASSIGN_OP_PATTERN),\n+        LintId::of(&attrs::UNKNOWN_CLIPPY_LINTS),\n+        LintId::of(&bit_mask::VERBOSE_BIT_MASK),\n+        LintId::of(&blacklisted_name::BLACKLISTED_NAME),\n+        LintId::of(&block_in_if_condition::BLOCK_IN_IF_CONDITION_EXPR),\n+        LintId::of(&block_in_if_condition::BLOCK_IN_IF_CONDITION_STMT),\n+        LintId::of(&collapsible_if::COLLAPSIBLE_IF),\n+        LintId::of(&comparison_chain::COMPARISON_CHAIN),\n+        LintId::of(&doc::MISSING_SAFETY_DOC),\n+        LintId::of(&doc::NEEDLESS_DOCTEST_MAIN),\n+        LintId::of(&enum_variants::ENUM_VARIANT_NAMES),\n+        LintId::of(&enum_variants::MODULE_INCEPTION),\n+        LintId::of(&eq_op::OP_REF),\n+        LintId::of(&eta_reduction::REDUNDANT_CLOSURE),\n+        LintId::of(&excessive_precision::EXCESSIVE_PRECISION),\n+        LintId::of(&formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n+        LintId::of(&formatting::SUSPICIOUS_ELSE_FORMATTING),\n+        LintId::of(&formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n+        LintId::of(&functions::DOUBLE_MUST_USE),\n+        LintId::of(&functions::MUST_USE_UNIT),\n+        LintId::of(&infallible_destructuring_match::INFALLIBLE_DESTRUCTURING_MATCH),\n+        LintId::of(&inherent_to_string::INHERENT_TO_STRING),\n+        LintId::of(&len_zero::LEN_WITHOUT_IS_EMPTY),\n+        LintId::of(&len_zero::LEN_ZERO),\n+        LintId::of(&let_if_seq::USELESS_LET_IF_SEQ),\n+        LintId::of(&literal_representation::INCONSISTENT_DIGIT_GROUPING),\n+        LintId::of(&literal_representation::UNREADABLE_LITERAL),\n+        LintId::of(&loops::EMPTY_LOOP),\n+        LintId::of(&loops::FOR_KV_MAP),\n+        LintId::of(&loops::NEEDLESS_RANGE_LOOP),\n+        LintId::of(&loops::WHILE_LET_ON_ITERATOR),\n+        LintId::of(&main_recursion::MAIN_RECURSION),\n+        LintId::of(&map_clone::MAP_CLONE),\n+        LintId::of(&matches::MATCH_BOOL),\n+        LintId::of(&matches::MATCH_OVERLAPPING_ARM),\n+        LintId::of(&matches::MATCH_REF_PATS),\n+        LintId::of(&matches::MATCH_WILD_ERR_ARM),\n+        LintId::of(&matches::SINGLE_MATCH),\n+        LintId::of(&mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n+        LintId::of(&methods::CHARS_LAST_CMP),\n+        LintId::of(&methods::INTO_ITER_ON_REF),\n+        LintId::of(&methods::ITER_CLONED_COLLECT),\n+        LintId::of(&methods::ITER_SKIP_NEXT),\n+        LintId::of(&methods::MANUAL_SATURATING_ARITHMETIC),\n+        LintId::of(&methods::NEW_RET_NO_SELF),\n+        LintId::of(&methods::OK_EXPECT),\n+        LintId::of(&methods::OPTION_MAP_OR_NONE),\n+        LintId::of(&methods::SHOULD_IMPLEMENT_TRAIT),\n+        LintId::of(&methods::STRING_EXTEND_CHARS),\n+        LintId::of(&methods::UNNECESSARY_FOLD),\n+        LintId::of(&methods::WRONG_SELF_CONVENTION),\n+        LintId::of(&misc::TOPLEVEL_REF_ARG),\n+        LintId::of(&misc::ZERO_PTR),\n+        LintId::of(&misc_early::BUILTIN_TYPE_SHADOW),\n+        LintId::of(&misc_early::DOUBLE_NEG),\n+        LintId::of(&misc_early::DUPLICATE_UNDERSCORE_ARGUMENT),\n+        LintId::of(&misc_early::MIXED_CASE_HEX_LITERALS),\n+        LintId::of(&misc_early::REDUNDANT_PATTERN),\n+        LintId::of(&misc_early::UNNEEDED_FIELD_PATTERN),\n+        LintId::of(&mut_reference::UNNECESSARY_MUT_PASSED),\n+        LintId::of(&neg_multiply::NEG_MULTIPLY),\n+        LintId::of(&new_without_default::NEW_WITHOUT_DEFAULT),\n+        LintId::of(&non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n+        LintId::of(&non_expressive_names::MANY_SINGLE_CHAR_NAMES),\n+        LintId::of(&ok_if_let::IF_LET_SOME_RESULT),\n+        LintId::of(&panic_unimplemented::PANIC_PARAMS),\n+        LintId::of(&ptr::CMP_NULL),\n+        LintId::of(&ptr::PTR_ARG),\n+        LintId::of(&question_mark::QUESTION_MARK),\n+        LintId::of(&redundant_field_names::REDUNDANT_FIELD_NAMES),\n+        LintId::of(&redundant_pattern_matching::REDUNDANT_PATTERN_MATCHING),\n+        LintId::of(&redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n+        LintId::of(&regex::REGEX_MACRO),\n+        LintId::of(&regex::TRIVIAL_REGEX),\n+        LintId::of(&returns::LET_AND_RETURN),\n+        LintId::of(&returns::NEEDLESS_RETURN),\n+        LintId::of(&returns::UNUSED_UNIT),\n+        LintId::of(&strings::STRING_LIT_AS_BYTES),\n+        LintId::of(&try_err::TRY_ERR),\n+        LintId::of(&types::FN_TO_NUMERIC_CAST),\n+        LintId::of(&types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n+        LintId::of(&types::IMPLICIT_HASHER),\n+        LintId::of(&types::LET_UNIT_VALUE),\n+        LintId::of(&unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n+        LintId::of(&write::PRINTLN_EMPTY_STRING),\n+        LintId::of(&write::PRINT_LITERAL),\n+        LintId::of(&write::PRINT_WITH_NEWLINE),\n+        LintId::of(&write::WRITELN_EMPTY_STRING),\n+        LintId::of(&write::WRITE_LITERAL),\n+        LintId::of(&write::WRITE_WITH_NEWLINE),\n     ]);\n \n-    reg.register_lint_group(\"clippy::complexity\", Some(\"clippy_complexity\"), vec![\n-        assign_ops::MISREFACTORED_ASSIGN_OP,\n-        attrs::DEPRECATED_CFG_ATTR,\n-        booleans::NONMINIMAL_BOOL,\n-        cognitive_complexity::COGNITIVE_COMPLEXITY,\n-        double_comparison::DOUBLE_COMPARISONS,\n-        double_parens::DOUBLE_PARENS,\n-        duration_subsec::DURATION_SUBSEC,\n-        eval_order_dependence::DIVERGING_SUB_EXPRESSION,\n-        eval_order_dependence::EVAL_ORDER_DEPENDENCE,\n-        explicit_write::EXPLICIT_WRITE,\n-        format::USELESS_FORMAT,\n-        functions::TOO_MANY_ARGUMENTS,\n-        get_last_with_len::GET_LAST_WITH_LEN,\n-        identity_conversion::IDENTITY_CONVERSION,\n-        identity_op::IDENTITY_OP,\n-        int_plus_one::INT_PLUS_ONE,\n-        lifetimes::EXTRA_UNUSED_LIFETIMES,\n-        lifetimes::NEEDLESS_LIFETIMES,\n-        loops::EXPLICIT_COUNTER_LOOP,\n-        loops::MUT_RANGE_BOUND,\n-        loops::WHILE_LET_LOOP,\n-        map_unit_fn::OPTION_MAP_UNIT_FN,\n-        map_unit_fn::RESULT_MAP_UNIT_FN,\n-        matches::MATCH_AS_REF,\n-        methods::CHARS_NEXT_CMP,\n-        methods::CLONE_ON_COPY,\n-        methods::FILTER_NEXT,\n-        methods::FLAT_MAP_IDENTITY,\n-        methods::OPTION_AND_THEN_SOME,\n-        methods::SEARCH_IS_SOME,\n-        methods::SUSPICIOUS_MAP,\n-        methods::UNNECESSARY_FILTER_MAP,\n-        methods::USELESS_ASREF,\n-        misc::SHORT_CIRCUIT_STATEMENT,\n-        misc_early::REDUNDANT_CLOSURE_CALL,\n-        misc_early::UNNEEDED_WILDCARD_PATTERN,\n-        misc_early::ZERO_PREFIXED_LITERAL,\n-        needless_bool::BOOL_COMPARISON,\n-        needless_bool::NEEDLESS_BOOL,\n-        needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE,\n-        needless_update::NEEDLESS_UPDATE,\n-        neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD,\n-        no_effect::NO_EFFECT,\n-        no_effect::UNNECESSARY_OPERATION,\n-        overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n-        partialeq_ne_impl::PARTIALEQ_NE_IMPL,\n-        precedence::PRECEDENCE,\n-        ptr_offset_with_cast::PTR_OFFSET_WITH_CAST,\n-        ranges::RANGE_MINUS_ONE,\n-        ranges::RANGE_PLUS_ONE,\n-        ranges::RANGE_ZIP_WITH_LEN,\n-        reference::DEREF_ADDROF,\n-        reference::REF_IN_DEREF,\n-        swap::MANUAL_SWAP,\n-        temporary_assignment::TEMPORARY_ASSIGNMENT,\n-        transmute::CROSSPOINTER_TRANSMUTE,\n-        transmute::TRANSMUTE_BYTES_TO_STR,\n-        transmute::TRANSMUTE_INT_TO_BOOL,\n-        transmute::TRANSMUTE_INT_TO_CHAR,\n-        transmute::TRANSMUTE_INT_TO_FLOAT,\n-        transmute::TRANSMUTE_PTR_TO_PTR,\n-        transmute::TRANSMUTE_PTR_TO_REF,\n-        transmute::USELESS_TRANSMUTE,\n-        types::BORROWED_BOX,\n-        types::CHAR_LIT_AS_U8,\n-        types::OPTION_OPTION,\n-        types::TYPE_COMPLEXITY,\n-        types::UNIT_ARG,\n-        types::UNNECESSARY_CAST,\n-        types::VEC_BOX,\n-        unused_label::UNUSED_LABEL,\n-        unwrap::UNNECESSARY_UNWRAP,\n-        zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n+    store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec![\n+        LintId::of(&assign_ops::MISREFACTORED_ASSIGN_OP),\n+        LintId::of(&attrs::DEPRECATED_CFG_ATTR),\n+        LintId::of(&booleans::NONMINIMAL_BOOL),\n+        LintId::of(&cognitive_complexity::COGNITIVE_COMPLEXITY),\n+        LintId::of(&double_comparison::DOUBLE_COMPARISONS),\n+        LintId::of(&double_parens::DOUBLE_PARENS),\n+        LintId::of(&duration_subsec::DURATION_SUBSEC),\n+        LintId::of(&eval_order_dependence::DIVERGING_SUB_EXPRESSION),\n+        LintId::of(&eval_order_dependence::EVAL_ORDER_DEPENDENCE),\n+        LintId::of(&explicit_write::EXPLICIT_WRITE),\n+        LintId::of(&format::USELESS_FORMAT),\n+        LintId::of(&functions::TOO_MANY_ARGUMENTS),\n+        LintId::of(&get_last_with_len::GET_LAST_WITH_LEN),\n+        LintId::of(&identity_conversion::IDENTITY_CONVERSION),\n+        LintId::of(&identity_op::IDENTITY_OP),\n+        LintId::of(&int_plus_one::INT_PLUS_ONE),\n+        LintId::of(&lifetimes::EXTRA_UNUSED_LIFETIMES),\n+        LintId::of(&lifetimes::NEEDLESS_LIFETIMES),\n+        LintId::of(&loops::EXPLICIT_COUNTER_LOOP),\n+        LintId::of(&loops::MUT_RANGE_BOUND),\n+        LintId::of(&loops::WHILE_LET_LOOP),\n+        LintId::of(&map_unit_fn::OPTION_MAP_UNIT_FN),\n+        LintId::of(&map_unit_fn::RESULT_MAP_UNIT_FN),\n+        LintId::of(&matches::MATCH_AS_REF),\n+        LintId::of(&methods::CHARS_NEXT_CMP),\n+        LintId::of(&methods::CLONE_ON_COPY),\n+        LintId::of(&methods::FILTER_NEXT),\n+        LintId::of(&methods::FLAT_MAP_IDENTITY),\n+        LintId::of(&methods::OPTION_AND_THEN_SOME),\n+        LintId::of(&methods::SEARCH_IS_SOME),\n+        LintId::of(&methods::SUSPICIOUS_MAP),\n+        LintId::of(&methods::UNNECESSARY_FILTER_MAP),\n+        LintId::of(&methods::USELESS_ASREF),\n+        LintId::of(&misc::SHORT_CIRCUIT_STATEMENT),\n+        LintId::of(&misc_early::REDUNDANT_CLOSURE_CALL),\n+        LintId::of(&misc_early::UNNEEDED_WILDCARD_PATTERN),\n+        LintId::of(&misc_early::ZERO_PREFIXED_LITERAL),\n+        LintId::of(&needless_bool::BOOL_COMPARISON),\n+        LintId::of(&needless_bool::NEEDLESS_BOOL),\n+        LintId::of(&needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),\n+        LintId::of(&needless_update::NEEDLESS_UPDATE),\n+        LintId::of(&neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD),\n+        LintId::of(&no_effect::NO_EFFECT),\n+        LintId::of(&no_effect::UNNECESSARY_OPERATION),\n+        LintId::of(&overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n+        LintId::of(&partialeq_ne_impl::PARTIALEQ_NE_IMPL),\n+        LintId::of(&precedence::PRECEDENCE),\n+        LintId::of(&ptr_offset_with_cast::PTR_OFFSET_WITH_CAST),\n+        LintId::of(&ranges::RANGE_MINUS_ONE),\n+        LintId::of(&ranges::RANGE_PLUS_ONE),\n+        LintId::of(&ranges::RANGE_ZIP_WITH_LEN),\n+        LintId::of(&reference::DEREF_ADDROF),\n+        LintId::of(&reference::REF_IN_DEREF),\n+        LintId::of(&swap::MANUAL_SWAP),\n+        LintId::of(&temporary_assignment::TEMPORARY_ASSIGNMENT),\n+        LintId::of(&transmute::CROSSPOINTER_TRANSMUTE),\n+        LintId::of(&transmute::TRANSMUTE_BYTES_TO_STR),\n+        LintId::of(&transmute::TRANSMUTE_INT_TO_BOOL),\n+        LintId::of(&transmute::TRANSMUTE_INT_TO_CHAR),\n+        LintId::of(&transmute::TRANSMUTE_INT_TO_FLOAT),\n+        LintId::of(&transmute::TRANSMUTE_PTR_TO_PTR),\n+        LintId::of(&transmute::TRANSMUTE_PTR_TO_REF),\n+        LintId::of(&transmute::USELESS_TRANSMUTE),\n+        LintId::of(&types::BORROWED_BOX),\n+        LintId::of(&types::CHAR_LIT_AS_U8),\n+        LintId::of(&types::OPTION_OPTION),\n+        LintId::of(&types::TYPE_COMPLEXITY),\n+        LintId::of(&types::UNIT_ARG),\n+        LintId::of(&types::UNNECESSARY_CAST),\n+        LintId::of(&types::VEC_BOX),\n+        LintId::of(&unused_label::UNUSED_LABEL),\n+        LintId::of(&unwrap::UNNECESSARY_UNWRAP),\n+        LintId::of(&zero_div_zero::ZERO_DIVIDED_BY_ZERO),\n     ]);\n \n-    reg.register_lint_group(\"clippy::correctness\", Some(\"clippy_correctness\"), vec![\n-        approx_const::APPROX_CONSTANT,\n-        attrs::DEPRECATED_SEMVER,\n-        attrs::USELESS_ATTRIBUTE,\n-        bit_mask::BAD_BIT_MASK,\n-        bit_mask::INEFFECTIVE_BIT_MASK,\n-        booleans::LOGIC_BUG,\n-        copies::IFS_SAME_COND,\n-        copies::IF_SAME_THEN_ELSE,\n-        derive::DERIVE_HASH_XOR_EQ,\n-        drop_bounds::DROP_BOUNDS,\n-        drop_forget_ref::DROP_COPY,\n-        drop_forget_ref::DROP_REF,\n-        drop_forget_ref::FORGET_COPY,\n-        drop_forget_ref::FORGET_REF,\n-        enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT,\n-        eq_op::EQ_OP,\n-        erasing_op::ERASING_OP,\n-        formatting::POSSIBLE_MISSING_COMMA,\n-        functions::NOT_UNSAFE_PTR_ARG_DEREF,\n-        indexing_slicing::OUT_OF_BOUNDS_INDEXING,\n-        infinite_iter::INFINITE_ITER,\n-        inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY,\n-        inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n-        literal_representation::MISTYPED_LITERAL_SUFFIXES,\n-        loops::FOR_LOOP_OVER_OPTION,\n-        loops::FOR_LOOP_OVER_RESULT,\n-        loops::ITER_NEXT_LOOP,\n-        loops::NEVER_LOOP,\n-        loops::REVERSE_RANGE_LOOP,\n-        loops::WHILE_IMMUTABLE_CONDITION,\n-        mem_discriminant::MEM_DISCRIMINANT_NON_ENUM,\n-        mem_replace::MEM_REPLACE_WITH_UNINIT,\n-        methods::CLONE_DOUBLE_REF,\n-        methods::INTO_ITER_ON_ARRAY,\n-        methods::TEMPORARY_CSTRING_AS_PTR,\n-        methods::UNINIT_ASSUMED_INIT,\n-        minmax::MIN_MAX,\n-        misc::CMP_NAN,\n-        misc::FLOAT_CMP,\n-        misc::MODULO_ONE,\n-        mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL,\n-        non_copy_const::BORROW_INTERIOR_MUTABLE_CONST,\n-        non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST,\n-        open_options::NONSENSICAL_OPEN_OPTIONS,\n-        ptr::MUT_FROM_REF,\n-        ranges::ITERATOR_STEP_BY_ZERO,\n-        regex::INVALID_REGEX,\n-        serde_api::SERDE_API_MISUSE,\n-        suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL,\n-        suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL,\n-        swap::ALMOST_SWAPPED,\n-        transmute::UNSOUND_COLLECTION_TRANSMUTE,\n-        transmute::WRONG_TRANSMUTE,\n-        transmuting_null::TRANSMUTING_NULL,\n-        types::ABSURD_EXTREME_COMPARISONS,\n-        types::CAST_PTR_ALIGNMENT,\n-        types::CAST_REF_TO_MUT,\n-        types::UNIT_CMP,\n-        unicode::ZERO_WIDTH_SPACE,\n-        unused_io_amount::UNUSED_IO_AMOUNT,\n-        unwrap::PANICKING_UNWRAP,\n+    store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), vec![\n+        LintId::of(&approx_const::APPROX_CONSTANT),\n+        LintId::of(&attrs::DEPRECATED_SEMVER),\n+        LintId::of(&attrs::USELESS_ATTRIBUTE),\n+        LintId::of(&bit_mask::BAD_BIT_MASK),\n+        LintId::of(&bit_mask::INEFFECTIVE_BIT_MASK),\n+        LintId::of(&booleans::LOGIC_BUG),\n+        LintId::of(&copies::IFS_SAME_COND),\n+        LintId::of(&copies::IF_SAME_THEN_ELSE),\n+        LintId::of(&derive::DERIVE_HASH_XOR_EQ),\n+        LintId::of(&drop_bounds::DROP_BOUNDS),\n+        LintId::of(&drop_forget_ref::DROP_COPY),\n+        LintId::of(&drop_forget_ref::DROP_REF),\n+        LintId::of(&drop_forget_ref::FORGET_COPY),\n+        LintId::of(&drop_forget_ref::FORGET_REF),\n+        LintId::of(&enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT),\n+        LintId::of(&eq_op::EQ_OP),\n+        LintId::of(&erasing_op::ERASING_OP),\n+        LintId::of(&formatting::POSSIBLE_MISSING_COMMA),\n+        LintId::of(&functions::NOT_UNSAFE_PTR_ARG_DEREF),\n+        LintId::of(&indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n+        LintId::of(&infinite_iter::INFINITE_ITER),\n+        LintId::of(&inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY),\n+        LintId::of(&inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n+        LintId::of(&literal_representation::MISTYPED_LITERAL_SUFFIXES),\n+        LintId::of(&loops::FOR_LOOP_OVER_OPTION),\n+        LintId::of(&loops::FOR_LOOP_OVER_RESULT),\n+        LintId::of(&loops::ITER_NEXT_LOOP),\n+        LintId::of(&loops::NEVER_LOOP),\n+        LintId::of(&loops::REVERSE_RANGE_LOOP),\n+        LintId::of(&loops::WHILE_IMMUTABLE_CONDITION),\n+        LintId::of(&mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n+        LintId::of(&mem_replace::MEM_REPLACE_WITH_UNINIT),\n+        LintId::of(&methods::CLONE_DOUBLE_REF),\n+        LintId::of(&methods::INTO_ITER_ON_ARRAY),\n+        LintId::of(&methods::TEMPORARY_CSTRING_AS_PTR),\n+        LintId::of(&methods::UNINIT_ASSUMED_INIT),\n+        LintId::of(&minmax::MIN_MAX),\n+        LintId::of(&misc::CMP_NAN),\n+        LintId::of(&misc::FLOAT_CMP),\n+        LintId::of(&misc::MODULO_ONE),\n+        LintId::of(&mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),\n+        LintId::of(&non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),\n+        LintId::of(&non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n+        LintId::of(&open_options::NONSENSICAL_OPEN_OPTIONS),\n+        LintId::of(&ptr::MUT_FROM_REF),\n+        LintId::of(&ranges::ITERATOR_STEP_BY_ZERO),\n+        LintId::of(&regex::INVALID_REGEX),\n+        LintId::of(&serde_api::SERDE_API_MISUSE),\n+        LintId::of(&suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n+        LintId::of(&suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n+        LintId::of(&swap::ALMOST_SWAPPED),\n+        LintId::of(&transmute::UNSOUND_COLLECTION_TRANSMUTE),\n+        LintId::of(&transmute::WRONG_TRANSMUTE),\n+        LintId::of(&transmuting_null::TRANSMUTING_NULL),\n+        LintId::of(&types::ABSURD_EXTREME_COMPARISONS),\n+        LintId::of(&types::CAST_PTR_ALIGNMENT),\n+        LintId::of(&types::CAST_REF_TO_MUT),\n+        LintId::of(&types::UNIT_CMP),\n+        LintId::of(&unicode::ZERO_WIDTH_SPACE),\n+        LintId::of(&unused_io_amount::UNUSED_IO_AMOUNT),\n+        LintId::of(&unwrap::PANICKING_UNWRAP),\n     ]);\n \n-    reg.register_lint_group(\"clippy::perf\", Some(\"clippy_perf\"), vec![\n-        bytecount::NAIVE_BYTECOUNT,\n-        entry::MAP_ENTRY,\n-        escape::BOXED_LOCAL,\n-        large_enum_variant::LARGE_ENUM_VARIANT,\n-        loops::MANUAL_MEMCPY,\n-        loops::NEEDLESS_COLLECT,\n-        methods::EXPECT_FUN_CALL,\n-        methods::INEFFICIENT_TO_STRING,\n-        methods::ITER_NTH,\n-        methods::OR_FUN_CALL,\n-        methods::SINGLE_CHAR_PATTERN,\n-        misc::CMP_OWNED,\n-        mul_add::MANUAL_MUL_ADD,\n-        mutex_atomic::MUTEX_ATOMIC,\n-        redundant_clone::REDUNDANT_CLONE,\n-        slow_vector_initialization::SLOW_VECTOR_INITIALIZATION,\n-        trivially_copy_pass_by_ref::TRIVIALLY_COPY_PASS_BY_REF,\n-        types::BOX_VEC,\n-        vec::USELESS_VEC,\n+    store.register_group(true, \"clippy::perf\", Some(\"clippy_perf\"), vec![\n+        LintId::of(&bytecount::NAIVE_BYTECOUNT),\n+        LintId::of(&entry::MAP_ENTRY),\n+        LintId::of(&escape::BOXED_LOCAL),\n+        LintId::of(&large_enum_variant::LARGE_ENUM_VARIANT),\n+        LintId::of(&loops::MANUAL_MEMCPY),\n+        LintId::of(&loops::NEEDLESS_COLLECT),\n+        LintId::of(&methods::EXPECT_FUN_CALL),\n+        LintId::of(&methods::INEFFICIENT_TO_STRING),\n+        LintId::of(&methods::ITER_NTH),\n+        LintId::of(&methods::OR_FUN_CALL),\n+        LintId::of(&methods::SINGLE_CHAR_PATTERN),\n+        LintId::of(&misc::CMP_OWNED),\n+        LintId::of(&mul_add::MANUAL_MUL_ADD),\n+        LintId::of(&mutex_atomic::MUTEX_ATOMIC),\n+        LintId::of(&redundant_clone::REDUNDANT_CLONE),\n+        LintId::of(&slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n+        LintId::of(&trivially_copy_pass_by_ref::TRIVIALLY_COPY_PASS_BY_REF),\n+        LintId::of(&types::BOX_VEC),\n+        LintId::of(&vec::USELESS_VEC),\n     ]);\n \n-    reg.register_lint_group(\"clippy::cargo\", Some(\"clippy_cargo\"), vec![\n-        cargo_common_metadata::CARGO_COMMON_METADATA,\n-        multiple_crate_versions::MULTIPLE_CRATE_VERSIONS,\n-        wildcard_dependencies::WILDCARD_DEPENDENCIES,\n+    store.register_group(true, \"clippy::cargo\", Some(\"clippy_cargo\"), vec![\n+        LintId::of(&cargo_common_metadata::CARGO_COMMON_METADATA),\n+        LintId::of(&multiple_crate_versions::MULTIPLE_CRATE_VERSIONS),\n+        LintId::of(&wildcard_dependencies::WILDCARD_DEPENDENCIES),\n     ]);\n \n-    reg.register_lint_group(\"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n-        attrs::EMPTY_LINE_AFTER_OUTER_ATTR,\n-        fallible_impl_from::FALLIBLE_IMPL_FROM,\n-        missing_const_for_fn::MISSING_CONST_FOR_FN,\n-        mutex_atomic::MUTEX_INTEGER,\n-        needless_borrow::NEEDLESS_BORROW,\n-        path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE,\n+    store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n+        LintId::of(&attrs::EMPTY_LINE_AFTER_OUTER_ATTR),\n+        LintId::of(&fallible_impl_from::FALLIBLE_IMPL_FROM),\n+        LintId::of(&missing_const_for_fn::MISSING_CONST_FOR_FN),\n+        LintId::of(&mutex_atomic::MUTEX_INTEGER),\n+        LintId::of(&needless_borrow::NEEDLESS_BORROW),\n+        LintId::of(&path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE),\n     ]);\n }\n "}, {"sha": "a5617f781a600f3790b06aa6e69b0310dca481c7", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e77f3c29f9221ccd785aa99ffd8b6180d4c063d/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77f3c29f9221ccd785aa99ffd8b6180d4c063d/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=7e77f3c29f9221ccd785aa99ffd8b6180d4c063d", "patch": "@@ -54,6 +54,7 @@ declare_clippy_lint! {\n     \"functions taking small copyable arguments by reference\"\n }\n \n+#[derive(Copy, Clone)]\n pub struct TriviallyCopyPassByRef {\n     limit: u64,\n }\n@@ -159,7 +160,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n                         return;\n                     }\n                 }\n-            },\n+            }\n             FnKind::Method(..) => (),\n             _ => return,\n         }"}, {"sha": "d2f81066ddeabaf8446b8dc215d388e162fcad9c", "filename": "src/driver.rs", "status": "modified", "additions": 13, "deletions": 44, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7e77f3c29f9221ccd785aa99ffd8b6180d4c063d/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77f3c29f9221ccd785aa99ffd8b6180d4c063d/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=7e77f3c29f9221ccd785aa99ffd8b6180d4c063d", "patch": "@@ -61,51 +61,20 @@ fn test_arg_value() {\n struct ClippyCallbacks;\n \n impl rustc_driver::Callbacks for ClippyCallbacks {\n-    fn after_parsing(&mut self, compiler: &interface::Compiler) -> rustc_driver::Compilation {\n-        let sess = compiler.session();\n-        let mut registry = rustc_driver::plugin::registry::Registry::new(\n-            sess,\n-            compiler\n-                .parse()\n-                .expect(\n-                    \"at this compilation stage \\\n-                     the crate must be parsed\",\n-                )\n-                .peek()\n-                .span,\n-        );\n-        registry.args_hidden = Some(Vec::new());\n-\n-        let conf = clippy_lints::read_conf(&registry);\n-        clippy_lints::register_plugins(&mut registry, &conf);\n-\n-        let rustc_driver::plugin::registry::Registry {\n-            early_lint_passes,\n-            late_lint_passes,\n-            lint_groups,\n-            llvm_passes,\n-            attributes,\n-            ..\n-        } = registry;\n-        let mut ls = sess.lint_store.borrow_mut();\n-        for pass in early_lint_passes {\n-            ls.register_early_pass(Some(sess), true, false, pass);\n-        }\n-        for pass in late_lint_passes {\n-            ls.register_late_pass(Some(sess), true, false, false, pass);\n-        }\n-\n-        for (name, (to, deprecated_name)) in lint_groups {\n-            ls.register_group(Some(sess), true, name, deprecated_name, to);\n-        }\n-        clippy_lints::register_pre_expansion_lints(sess, &mut ls, &conf);\n-        clippy_lints::register_renamed(&mut ls);\n-\n-        sess.plugin_llvm_passes.borrow_mut().extend(llvm_passes);\n-        sess.plugin_attributes.borrow_mut().extend(attributes);\n+    fn config(&mut self, config: &mut interface::Config) {\n+        let previous = config.register_lints.take();\n+        config.register_lints = Some(Box::new(move |sess, mut lint_store| {\n+            // technically we're ~guaranteed that this is none but might as well call anything that\n+            // is there already. Certainly it can't hurt.\n+            if let Some(previous) = &previous {\n+                (previous)(sess, lint_store);\n+            }\n \n-        // Continue execution\n-        rustc_driver::Compilation::Continue\n+            let conf = clippy_lints::read_conf(&[], &sess);\n+            clippy_lints::register_plugins(&mut lint_store, &sess, &conf);\n+            clippy_lints::register_pre_expansion_lints(&mut lint_store, &conf);\n+            clippy_lints::register_renamed(&mut lint_store);\n+        }));\n     }\n }\n "}, {"sha": "6b398f6b9aa4a5949efc3b205d6b17deabca1a80", "filename": "src/lib.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7e77f3c29f9221ccd785aa99ffd8b6180d4c063d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77f3c29f9221ccd785aa99ffd8b6180d4c063d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7e77f3c29f9221ccd785aa99ffd8b6180d4c063d", "patch": "@@ -11,22 +11,20 @@ use self::rustc_driver::plugin::Registry;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry<'_>) {\n-    reg.sess.lint_store.with_read_lock(|lint_store| {\n-        for (lint, _, _) in lint_store.get_lint_groups() {\n-            reg.sess\n-                .struct_warn(\n-                    \"the clippy plugin is being deprecated, please use cargo clippy or rls with the clippy feature\",\n-                )\n-                .emit();\n-            if lint == \"clippy\" {\n-                // cargo clippy run on a crate that also uses the plugin\n-                return;\n-            }\n+    for (lint, _, _) in reg.lint_store.get_lint_groups() {\n+        reg.sess\n+            .struct_warn(\n+                \"the clippy plugin is being deprecated, please use cargo clippy or rls with the clippy feature\",\n+            )\n+            .emit();\n+        if lint == \"clippy\" {\n+            // cargo clippy run on a crate that also uses the plugin\n+            return;\n         }\n-    });\n+    }\n \n-    let conf = clippy_lints::read_conf(reg);\n-    clippy_lints::register_plugins(reg, &conf);\n+    let conf = clippy_lints::read_conf(reg.args(), &reg.sess);\n+    clippy_lints::register_plugins(&mut reg.lint_store, &reg.sess, &conf);\n }\n \n // only exists to let the dogfood integration test works."}]}