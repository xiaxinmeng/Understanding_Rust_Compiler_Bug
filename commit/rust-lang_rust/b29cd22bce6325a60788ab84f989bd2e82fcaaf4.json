{"sha": "b29cd22bce6325a60788ab84f989bd2e82fcaaf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyOWNkMjJiY2U2MzI1YTYwNzg4YWI4NGY5ODliZDJlODJmY2FhZjQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-09T14:34:23Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-10T13:02:54Z"}, "message": "std: replace str::all/any fns and methods with iterators", "tree": {"sha": "dfa42affe6369b9595b462b4ee15fdaf88ff8b3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfa42affe6369b9595b462b4ee15fdaf88ff8b3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b29cd22bce6325a60788ab84f989bd2e82fcaaf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b29cd22bce6325a60788ab84f989bd2e82fcaaf4", "html_url": "https://github.com/rust-lang/rust/commit/b29cd22bce6325a60788ab84f989bd2e82fcaaf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b29cd22bce6325a60788ab84f989bd2e82fcaaf4/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e8982bdb26208d9d9ed4cdcbcd21cc9ef35bd46", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e8982bdb26208d9d9ed4cdcbcd21cc9ef35bd46", "html_url": "https://github.com/rust-lang/rust/commit/1e8982bdb26208d9d9ed4cdcbcd21cc9ef35bd46"}], "stats": {"total": 75, "additions": 15, "deletions": 60}, "files": [{"sha": "153a8de8029fa4cf3fc6cc1468ea6b978c92b76e", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b29cd22bce6325a60788ab84f989bd2e82fcaaf4/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29cd22bce6325a60788ab84f989bd2e82fcaaf4/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=b29cd22bce6325a60788ab84f989bd2e82fcaaf4", "patch": "@@ -13,6 +13,7 @@ use core::prelude::*;\n use common::config;\n use common;\n \n+use core::iterator::IteratorUtil;\n use core::io;\n use core::os;\n use core::str;"}, {"sha": "6812f6e44556134316d563b5e149f48bac66d11d", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b29cd22bce6325a60788ab84f989bd2e82fcaaf4/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29cd22bce6325a60788ab84f989bd2e82fcaaf4/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=b29cd22bce6325a60788ab84f989bd2e82fcaaf4", "patch": "@@ -735,7 +735,7 @@ fn _arm_exec_compiled_test(config: &config, props: &TestProps,\n     let cmdline = make_cmdline(\"\", args.prog, args.args);\n \n     // get bare program string\n-    let tvec: ~[~str] = args.prog.split_iter('/').transform(|ts| ts.to_owned()).collect();\n+    let mut tvec: ~[~str] = args.prog.split_iter('/').transform(|ts| ts.to_owned()).collect();\n     let prog_short = tvec.pop();\n \n     // copy to target"}, {"sha": "30a2b5f862768876574e262fbd8622cd3ea9b641", "filename": "src/libextra/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b29cd22bce6325a60788ab84f989bd2e82fcaaf4/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29cd22bce6325a60788ab84f989bd2e82fcaaf4/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=b29cd22bce6325a60788ab84f989bd2e82fcaaf4", "patch": "@@ -567,7 +567,7 @@ impl Parser {\n     }\n \n     fn parse_ident(&mut self, ident: &str, value: Json) -> Result<Json, Error> {\n-        if str::all(ident, |c| c == self.next_char()) {\n+        if ident.iter().all(|c| c == self.next_char()) {\n             self.bump();\n             Ok(value)\n         } else {"}, {"sha": "36ebd10ae17b7c40b5773d8f109c01fb67024c08", "filename": "src/libextra/semver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b29cd22bce6325a60788ab84f989bd2e82fcaaf4/src%2Flibextra%2Fsemver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29cd22bce6325a60788ab84f989bd2e82fcaaf4/src%2Flibextra%2Fsemver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsemver.rs?ref=b29cd22bce6325a60788ab84f989bd2e82fcaaf4", "patch": "@@ -14,6 +14,7 @@\n \n use core::prelude::*;\n \n+use core::iterator::IteratorUtil;\n use core::char;\n use core::cmp;\n use core::io::{ReaderUtil};\n@@ -168,7 +169,7 @@ fn take_num(rdr: @io::Reader, ch: char) -> (uint, char) {\n \n fn take_ident(rdr: @io::Reader, ch: char) -> (Identifier, char) {\n     let (s,ch) = take_nonempty_prefix(rdr, ch, char::is_alphanumeric);\n-    if s.all(char::is_digit) {\n+    if s.iter().all(char::is_digit) {\n         match uint::from_str(s) {\n             None => { bad_parse::cond.raise(()); (Numeric(0), ch) },\n             Some(i) => (Numeric(i), ch)"}, {"sha": "6bb5b2e0cfcc89bfd3df03ab43a422cb863e2879", "filename": "src/librustdoc/unindent_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b29cd22bce6325a60788ab84f989bd2e82fcaaf4/src%2Flibrustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29cd22bce6325a60788ab84f989bd2e82fcaaf4/src%2Flibrustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Funindent_pass.rs?ref=b29cd22bce6325a60788ab84f989bd2e82fcaaf4", "patch": "@@ -63,7 +63,7 @@ fn unindent(s: &str) -> ~str {\n         } else {\n             saw_first_line = true;\n             let mut spaces = 0;\n-            do str::all(*line) |char| {\n+            do line.iter().all |char| {\n                 // Only comparing against space because I wouldn't\n                 // know what to do with mixed whitespace chars\n                 if char == ' ' {"}, {"sha": "eb78120c6bed3dff4240f980289c54053bd898c4", "filename": "src/libstd/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b29cd22bce6325a60788ab84f989bd2e82fcaaf4/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29cd22bce6325a60788ab84f989bd2e82fcaaf4/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=b29cd22bce6325a60788ab84f989bd2e82fcaaf4", "patch": "@@ -508,7 +508,7 @@ impl GenericPath for PosixPath {\n     }\n \n     fn with_filename(&self, f: &str) -> PosixPath {\n-        assert!(! str::any(f, |c| windows::is_sep(c)));\n+        assert!(! f.iter().all(windows::is_sep));\n         self.dir_path().push(f)\n     }\n \n@@ -722,7 +722,7 @@ impl GenericPath for WindowsPath {\n     }\n \n     fn with_filename(&self, f: &str) -> WindowsPath {\n-        assert!(! str::any(f, |c| windows::is_sep(c)));\n+        assert!(! f.iter().all(windows::is_sep));\n         self.dir_path().push(f)\n     }\n "}, {"sha": "29598bc48fa41a076c0c1ff989da4781c3280c9a", "filename": "src/libstd/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b29cd22bce6325a60788ab84f989bd2e82fcaaf4/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29cd22bce6325a60788ab84f989bd2e82fcaaf4/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=b29cd22bce6325a60788ab84f989bd2e82fcaaf4", "patch": "@@ -588,7 +588,7 @@ pub fn make_command_line(prog: &str, args: &[~str]) -> ~str {\n     return cmd;\n \n     fn append_arg(cmd: &mut ~str, arg: &str) {\n-        let quote = arg.any(|c| c == ' ' || c == '\\t');\n+        let quote = arg.iter().any(|c| c == ' ' || c == '\\t');\n         if quote {\n             cmd.push_char('\"');\n         }"}, {"sha": "09ea6a5dfa9b2bfce521ab5ceb274ee18576f0f7", "filename": "src/libstd/str.rs", "status": "modified", "additions": 2, "deletions": 50, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b29cd22bce6325a60788ab84f989bd2e82fcaaf4/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29cd22bce6325a60788ab84f989bd2e82fcaaf4/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=b29cd22bce6325a60788ab84f989bd2e82fcaaf4", "patch": "@@ -1175,22 +1175,6 @@ impl<'self> Equiv<~str> for &'self str {\n Section: Iterating through strings\n */\n \n-/**\n- * Return true if a predicate matches all characters or if the string\n- * contains no characters\n- */\n-pub fn all(s: &str, it: &fn(char) -> bool) -> bool {\n-    all_between(s, 0u, len(s), it)\n-}\n-\n-/**\n- * Return true if a predicate matches any character (and false if it\n- * matches none or there are no characters)\n- */\n-pub fn any(ss: &str, pred: &fn(char) -> bool) -> bool {\n-    !all(ss, |cc| !pred(cc))\n-}\n-\n /// Apply a function to each character\n pub fn map(ss: &str, ff: &fn(char) -> char) -> ~str {\n     let mut result = ~\"\";\n@@ -1675,7 +1659,7 @@ pub fn is_empty(s: &str) -> bool { len(s) == 0u }\n  * Whitespace characters are determined by `char::is_whitespace`\n  */\n pub fn is_whitespace(s: &str) -> bool {\n-    return all(s, char::is_whitespace);\n+    s.iter().all(char::is_whitespace)\n }\n \n /**\n@@ -1684,7 +1668,7 @@ pub fn is_whitespace(s: &str) -> bool {\n  * Alphanumeric characters are determined by `char::is_alphanumeric`\n  */\n fn is_alphanumeric(s: &str) -> bool {\n-    return all(s, char::is_alphanumeric);\n+    s.iter().all(char::is_alphanumeric)\n }\n \n /// Returns the string length/size in bytes not counting the null terminator\n@@ -2467,8 +2451,6 @@ pub mod traits {}\n \n #[allow(missing_doc)]\n pub trait StrSlice<'self> {\n-    fn all(&self, it: &fn(char) -> bool) -> bool;\n-    fn any(&self, it: &fn(char) -> bool) -> bool;\n     fn contains<'a>(&self, needle: &'a str) -> bool;\n     fn contains_char(&self, needle: char) -> bool;\n     fn iter(&self) -> StrCharIterator<'self>;\n@@ -2514,18 +2496,6 @@ pub trait StrSlice<'self> {\n \n /// Extension methods for strings\n impl<'self> StrSlice<'self> for &'self str {\n-    /**\n-     * Return true if a predicate matches all characters or if the string\n-     * contains no characters\n-     */\n-    #[inline]\n-    fn all(&self, it: &fn(char) -> bool) -> bool { all(*self, it) }\n-    /**\n-     * Return true if a predicate matches any character (and false if it\n-     * matches none or there are no characters)\n-     */\n-    #[inline]\n-    fn any(&self, it: &fn(char) -> bool) -> bool { any(*self, it) }\n     /// Returns true if one string contains another\n     #[inline]\n     fn contains<'a>(&self, needle: &'a str) -> bool {\n@@ -3522,24 +3492,6 @@ mod tests {\n         assert_eq!(~\"YMCA\", map(\"ymca\", |c| unsafe {libc::toupper(c as c_char)} as char));\n     }\n \n-    #[test]\n-    fn test_all() {\n-        assert_eq!(true, all(\"\", char::is_uppercase));\n-        assert_eq!(false, all(\"ymca\", char::is_uppercase));\n-        assert_eq!(true, all(\"YMCA\", char::is_uppercase));\n-        assert_eq!(false, all(\"yMCA\", char::is_uppercase));\n-        assert_eq!(false, all(\"YMCy\", char::is_uppercase));\n-    }\n-\n-    #[test]\n-    fn test_any() {\n-        assert_eq!(false, any(\"\", char::is_uppercase));\n-        assert_eq!(false, any(\"ymca\", char::is_uppercase));\n-        assert_eq!(true, any(\"YMCA\", char::is_uppercase));\n-        assert_eq!(true, any(\"yMCA\", char::is_uppercase));\n-        assert_eq!(true, any(\"Ymcy\", char::is_uppercase));\n-    }\n-\n     #[test]\n     fn test_chars() {\n         let ss = ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";"}, {"sha": "a4a1b7a171d33311692042377ac802b0395ab35c", "filename": "src/libstd/str/ascii.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b29cd22bce6325a60788ab84f989bd2e82fcaaf4/src%2Flibstd%2Fstr%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29cd22bce6325a60788ab84f989bd2e82fcaaf4/src%2Flibstd%2Fstr%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr%2Fascii.rs?ref=b29cd22bce6325a60788ab84f989bd2e82fcaaf4", "patch": "@@ -226,8 +226,8 @@ mod tests {\n         assert_eq!('`'.to_ascii().to_upper().to_char(), '`');\n         assert_eq!('{'.to_ascii().to_upper().to_char(), '{');\n \n-        assert!(str::all(\"banana\", |c| c.is_ascii()));\n-        assert!(! str::all(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", |c| c.is_ascii()));\n+        assert!(\"banana\".iter().all(|c| c.is_ascii()));\n+        assert!(!\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".iter().all(|c| c.is_ascii()));\n     }\n \n     #[test]"}, {"sha": "f615f1321df9f2168868bc7e278d8814b9dc4e04", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b29cd22bce6325a60788ab84f989bd2e82fcaaf4/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29cd22bce6325a60788ab84f989bd2e82fcaaf4/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=b29cd22bce6325a60788ab84f989bd2e82fcaaf4", "patch": "@@ -19,6 +19,7 @@ use ext::tt::transcribe::{dup_tt_reader};\n use parse::token;\n use parse::token::{str_to_ident};\n \n+use core::iterator::IteratorUtil;\n use core::char;\n use core::either;\n use core::str;\n@@ -245,7 +246,7 @@ fn consume_whitespace_and_comments(rdr: @mut StringReader)\n \n pub fn is_line_non_doc_comment(s: &str) -> bool {\n     let s = s.trim_right();\n-    s.len() > 3 && s.all(|ch| ch == '/')\n+    s.len() > 3 && s.iter().all(|ch| ch == '/')\n }\n \n // PRECONDITION: rdr.curr is not whitespace"}]}