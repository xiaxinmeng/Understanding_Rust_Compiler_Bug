{"sha": "67bc866e5934e19c37fd7a115cdc8142fcb8c51d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3YmM4NjZlNTkzNGUxOWMzN2ZkN2ExMTVjZGM4MTQyZmNiOGM1MWQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-14T04:07:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-14T04:07:28Z"}, "message": "Rollup merge of #82121 - lopopolo:pathbuf-osstring-extend, r=joshtriplett\n\nImplement Extend and FromIterator for OsString\n\nAdd the following trait impls:\n\n- `impl Extend<OsString> for OsString`\n- `impl<'a> Extend<&'a OsStr> for OsString`\n- `impl FromIterator<OsString> for OsString`\n- `impl<'a> FromIterator<&'a OsStr> for OsString`\n\nBecause `OsString` is a platform string with no particular semantics, concatenating them together seems acceptable.\n\nI came across a use case for these trait impls in https://github.com/artichoke/artichoke/pull/1089:\n\nArtichoke is a Ruby interpreter. Its CLI accepts multiple `-e` switches for executing inline Ruby code, like:\n\n```console\n$ cargo -q run --bin artichoke -- -e '2.times {' -e 'puts \"foo: #{__LINE__}\"' -e '}'\nfoo: 2\nfoo: 2\n```\n\nI use `clap` for command line argument parsing, which collects these `-e` commands into a `Vec<OsString>`. To pass these commands to the interpreter for `Eval`, I need to join them together. Combining these impls with `Iterator::intersperse` https://github.com/rust-lang/rust/issues/79524 would enable me to build a single bit of Ruby code.\n\nCurrently, I'm doing something like:\n\n```rust\nlet mut commands = commands.into_iter();\nlet mut buf = if let Some(command) = commands.next() {\n    command\n} else {\n    return Ok(Ok(()));\n};\nfor command in commands {\n    buf.push(\"\\n\");\n    buf.push(command);\n}\n```\n\nIf there's interest, I'd also like to add impls for `Cow<'a, OsStr>`, which would avoid allocating the `\"\\n\"` `OsString` in the concatenate + intersperse use case.", "tree": {"sha": "866b0e116a0ac14b46c453443ed36e28ac65d1c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/866b0e116a0ac14b46c453443ed36e28ac65d1c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67bc866e5934e19c37fd7a115cdc8142fcb8c51d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgTYwBCRBK7hj4Ov3rIwAAdHIIAGckoaTGFp1ldXq3VEmFV654\nvDyhiSKX6p2p6rQ9DXIX6du8KNb6OwajlxeB1E9TmTSgR60Xev/lQrTTS2fIEDX9\nbG5/TYhyhujRETTCvPdt/qRrxKr7wR0TNsmR73MXa8+rUGFE/S/XtjcoN6Jq797I\n+ePVvR+oyh72ieAGEl7XxhusbJzTKpRMlLW5wwOCgZQ+JX//i+PmLtYuyTMDmNEY\nWFSwMMOGPhXCdGOOXtllJKWjS6QZa739pTnbYZg3HhCm2jmBy+m1tT3SYZK15pTR\nNswLRBnhMBDOBrqbV/okQYfbefpOOWygtGEv0oqPIzsKUXjf9ZfM4v1Mu4tq394=\n=rDhB\n-----END PGP SIGNATURE-----\n", "payload": "tree 866b0e116a0ac14b46c453443ed36e28ac65d1c4\nparent 6caa350503044420d4fd0cc324b3295a0c19cc70\nparent 05ea200213fe30967fff38ebac887c52803aabd5\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1615694848 +0900\ncommitter GitHub <noreply@github.com> 1615694848 +0900\n\nRollup merge of #82121 - lopopolo:pathbuf-osstring-extend, r=joshtriplett\n\nImplement Extend and FromIterator for OsString\n\nAdd the following trait impls:\n\n- `impl Extend<OsString> for OsString`\n- `impl<'a> Extend<&'a OsStr> for OsString`\n- `impl FromIterator<OsString> for OsString`\n- `impl<'a> FromIterator<&'a OsStr> for OsString`\n\nBecause `OsString` is a platform string with no particular semantics, concatenating them together seems acceptable.\n\nI came across a use case for these trait impls in https://github.com/artichoke/artichoke/pull/1089:\n\nArtichoke is a Ruby interpreter. Its CLI accepts multiple `-e` switches for executing inline Ruby code, like:\n\n```console\n$ cargo -q run --bin artichoke -- -e '2.times {' -e 'puts \"foo: #{__LINE__}\"' -e '}'\nfoo: 2\nfoo: 2\n```\n\nI use `clap` for command line argument parsing, which collects these `-e` commands into a `Vec<OsString>`. To pass these commands to the interpreter for `Eval`, I need to join them together. Combining these impls with `Iterator::intersperse` https://github.com/rust-lang/rust/issues/79524 would enable me to build a single bit of Ruby code.\n\nCurrently, I'm doing something like:\n\n```rust\nlet mut commands = commands.into_iter();\nlet mut buf = if let Some(command) = commands.next() {\n    command\n} else {\n    return Ok(Ok(()));\n};\nfor command in commands {\n    buf.push(\"\\n\");\n    buf.push(command);\n}\n```\n\nIf there's interest, I'd also like to add impls for `Cow<'a, OsStr>`, which would avoid allocating the `\"\\n\"` `OsString` in the concatenate + intersperse use case.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67bc866e5934e19c37fd7a115cdc8142fcb8c51d", "html_url": "https://github.com/rust-lang/rust/commit/67bc866e5934e19c37fd7a115cdc8142fcb8c51d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67bc866e5934e19c37fd7a115cdc8142fcb8c51d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6caa350503044420d4fd0cc324b3295a0c19cc70", "url": "https://api.github.com/repos/rust-lang/rust/commits/6caa350503044420d4fd0cc324b3295a0c19cc70", "html_url": "https://github.com/rust-lang/rust/commit/6caa350503044420d4fd0cc324b3295a0c19cc70"}, {"sha": "05ea200213fe30967fff38ebac887c52803aabd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/05ea200213fe30967fff38ebac887c52803aabd5", "html_url": "https://github.com/rust-lang/rust/commit/05ea200213fe30967fff38ebac887c52803aabd5"}], "stats": {"total": 86, "additions": 86, "deletions": 0}, "files": [{"sha": "ce52ffc0241b04802c53e44b51119ceb09de659b", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/67bc866e5934e19c37fd7a115cdc8142fcb8c51d/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67bc866e5934e19c37fd7a115cdc8142fcb8c51d/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=67bc866e5934e19c37fd7a115cdc8142fcb8c51d", "patch": "@@ -5,6 +5,7 @@ use crate::borrow::{Borrow, Cow};\n use crate::cmp;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n+use crate::iter::{Extend, FromIterator};\n use crate::ops;\n use crate::rc::Rc;\n use crate::str::FromStr;\n@@ -1192,3 +1193,88 @@ impl FromStr for OsString {\n         Ok(OsString::from(s))\n     }\n }\n+\n+#[stable(feature = \"osstring_extend\", since = \"1.52.0\")]\n+impl Extend<OsString> for OsString {\n+    #[inline]\n+    fn extend<T: IntoIterator<Item = OsString>>(&mut self, iter: T) {\n+        for s in iter {\n+            self.push(&s);\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"osstring_extend\", since = \"1.52.0\")]\n+impl<'a> Extend<&'a OsStr> for OsString {\n+    #[inline]\n+    fn extend<T: IntoIterator<Item = &'a OsStr>>(&mut self, iter: T) {\n+        for s in iter {\n+            self.push(s);\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"osstring_extend\", since = \"1.52.0\")]\n+impl<'a> Extend<Cow<'a, OsStr>> for OsString {\n+    #[inline]\n+    fn extend<T: IntoIterator<Item = Cow<'a, OsStr>>>(&mut self, iter: T) {\n+        for s in iter {\n+            self.push(&s);\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"osstring_extend\", since = \"1.52.0\")]\n+impl FromIterator<OsString> for OsString {\n+    #[inline]\n+    fn from_iter<I: IntoIterator<Item = OsString>>(iter: I) -> Self {\n+        let mut iterator = iter.into_iter();\n+\n+        // Because we're iterating over `OsString`s, we can avoid at least\n+        // one allocation by getting the first string from the iterator\n+        // and appending to it all the subsequent strings.\n+        match iterator.next() {\n+            None => OsString::new(),\n+            Some(mut buf) => {\n+                buf.extend(iterator);\n+                buf\n+            }\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"osstring_extend\", since = \"1.52.0\")]\n+impl<'a> FromIterator<&'a OsStr> for OsString {\n+    #[inline]\n+    fn from_iter<I: IntoIterator<Item = &'a OsStr>>(iter: I) -> Self {\n+        let mut buf = Self::new();\n+        for s in iter {\n+            buf.push(s);\n+        }\n+        buf\n+    }\n+}\n+\n+#[stable(feature = \"osstring_extend\", since = \"1.52.0\")]\n+impl<'a> FromIterator<Cow<'a, OsStr>> for OsString {\n+    #[inline]\n+    fn from_iter<I: IntoIterator<Item = Cow<'a, OsStr>>>(iter: I) -> Self {\n+        let mut iterator = iter.into_iter();\n+\n+        // Because we're iterating over `OsString`s, we can avoid at least\n+        // one allocation by getting the first owned string from the iterator\n+        // and appending to it all the subsequent strings.\n+        match iterator.next() {\n+            None => OsString::new(),\n+            Some(Cow::Owned(mut buf)) => {\n+                buf.extend(iterator);\n+                buf\n+            }\n+            Some(Cow::Borrowed(buf)) => {\n+                let mut buf = OsString::from(buf);\n+                buf.extend(iterator);\n+                buf\n+            }\n+        }\n+    }\n+}"}]}