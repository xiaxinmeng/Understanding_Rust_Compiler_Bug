{"sha": "349415d1c67df81e18519a7d2c6375901ec31b3d", "node_id": "C_kwDOAAsO6NoAKDM0OTQxNWQxYzY3ZGY4MWUxODUxOWE3ZDJjNjM3NTkwMWVjMzFiM2Q", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-09-09T18:01:06Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-10-07T12:06:19Z"}, "message": "Remove TypeckResults from InferCtxt", "tree": {"sha": "473e5978a9b4a1fbc33f1306962728e55ea5cf0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/473e5978a9b4a1fbc33f1306962728e55ea5cf0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/349415d1c67df81e18519a7d2c6375901ec31b3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/349415d1c67df81e18519a7d2c6375901ec31b3d", "html_url": "https://github.com/rust-lang/rust/commit/349415d1c67df81e18519a7d2c6375901ec31b3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/349415d1c67df81e18519a7d2c6375901ec31b3d/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a68373217e610e2e6768bae27c6b15e0377faad", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a68373217e610e2e6768bae27c6b15e0377faad", "html_url": "https://github.com/rust-lang/rust/commit/4a68373217e610e2e6768bae27c6b15e0377faad"}], "stats": {"total": 520, "additions": 240, "deletions": 280}, "files": [{"sha": "f185e402fc6dee77ea3b749fc9a4400b7d9b5094", "filename": "compiler/rustc_borrowck/src/constraint_generation.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -14,8 +14,8 @@ use crate::{\n     places_conflict, region_infer::values::LivenessValues,\n };\n \n-pub(super) fn generate_constraints<'cx, 'tcx>(\n-    infcx: &InferCtxt<'cx, 'tcx>,\n+pub(super) fn generate_constraints<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n     liveness_constraints: &mut LivenessValues<RegionVid>,\n     all_facts: &mut Option<AllFacts>,\n     location_table: &LocationTable,\n@@ -37,16 +37,16 @@ pub(super) fn generate_constraints<'cx, 'tcx>(\n }\n \n /// 'cg = the duration of the constraint generation process itself.\n-struct ConstraintGeneration<'cg, 'cx, 'tcx> {\n-    infcx: &'cg InferCtxt<'cx, 'tcx>,\n+struct ConstraintGeneration<'cg, 'tcx> {\n+    infcx: &'cg InferCtxt<'tcx>,\n     all_facts: &'cg mut Option<AllFacts>,\n     location_table: &'cg LocationTable,\n     liveness_constraints: &'cg mut LivenessValues<RegionVid>,\n     borrow_set: &'cg BorrowSet<'tcx>,\n     body: &'cg Body<'tcx>,\n }\n \n-impl<'cg, 'cx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'tcx> {\n+impl<'cg, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'tcx> {\n     fn visit_basic_block_data(&mut self, bb: BasicBlock, data: &BasicBlockData<'tcx>) {\n         self.super_basic_block_data(bb, data);\n     }\n@@ -156,7 +156,7 @@ impl<'cg, 'cx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'tcx> {\n     }\n }\n \n-impl<'cx, 'cg, 'tcx> ConstraintGeneration<'cx, 'cg, 'tcx> {\n+impl<'cx, 'tcx> ConstraintGeneration<'cx, 'tcx> {\n     /// Some variable with type `live_ty` is \"regular live\" at\n     /// `location` -- i.e., it may be used later. This means that all\n     /// regions appearing in the type `live_ty` must be live at"}, {"sha": "fc79953c2dd311888769c056639c1123705e9b30", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -407,7 +407,7 @@ impl<'tcx> TypeOpInfo<'tcx> for crate::type_check::InstantiateOpaqueType<'tcx> {\n #[instrument(skip(fulfill_cx, infcx), level = \"debug\")]\n fn try_extract_error_from_fulfill_cx<'tcx>(\n     mut fulfill_cx: Box<dyn TraitEngine<'tcx> + 'tcx>,\n-    infcx: &InferCtxt<'_, 'tcx>,\n+    infcx: &InferCtxt<'tcx>,\n     placeholder_region: ty::Region<'tcx>,\n     error_region: Option<ty::Region<'tcx>>,\n ) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>> {\n@@ -427,7 +427,7 @@ fn try_extract_error_from_fulfill_cx<'tcx>(\n }\n \n fn try_extract_error_from_region_constraints<'tcx>(\n-    infcx: &InferCtxt<'_, 'tcx>,\n+    infcx: &InferCtxt<'tcx>,\n     placeholder_region: ty::Region<'tcx>,\n     error_region: Option<ty::Region<'tcx>>,\n     region_constraints: &RegionConstraintData<'tcx>,"}, {"sha": "5211f2127ed0729865416e522e2ebea94a9a74d6", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -150,8 +150,8 @@ fn mir_borrowck<'tcx>(\n /// region ids on which the borrow checking was performed together with Polonius\n /// facts.\n #[instrument(skip(infcx, input_body, input_promoted), fields(id=?input_body.source.with_opt_param().as_local().unwrap()), level = \"debug\")]\n-fn do_mir_borrowck<'a, 'tcx>(\n-    infcx: &InferCtxt<'a, 'tcx>,\n+fn do_mir_borrowck<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n     input_body: &Body<'tcx>,\n     input_promoted: &IndexVec<Promoted, Body<'tcx>>,\n     return_body_with_facts: bool,\n@@ -474,7 +474,7 @@ pub struct BodyWithBorrowckFacts<'tcx> {\n }\n \n struct MirBorrowckCtxt<'cx, 'tcx> {\n-    infcx: &'cx InferCtxt<'cx, 'tcx>,\n+    infcx: &'cx InferCtxt<'tcx>,\n     param_env: ParamEnv<'tcx>,\n     body: &'cx Body<'tcx>,\n     move_data: &'cx MoveData<'tcx>,"}, {"sha": "08fdd28eb01b7392e5a701d0e1ffc7e0b9221871", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -55,8 +55,8 @@ pub(crate) struct NllOutput<'tcx> {\n /// regions (e.g., region parameters) declared on the function. That set will need to be given to\n /// `compute_regions`.\n #[instrument(skip(infcx, param_env, body, promoted), level = \"debug\")]\n-pub(crate) fn replace_regions_in_mir<'cx, 'tcx>(\n-    infcx: &InferCtxt<'cx, 'tcx>,\n+pub(crate) fn replace_regions_in_mir<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body: &mut Body<'tcx>,\n     promoted: &mut IndexVec<Promoted, Body<'tcx>>,\n@@ -155,7 +155,7 @@ fn populate_polonius_move_facts(\n ///\n /// This may result in errors being reported.\n pub(crate) fn compute_regions<'cx, 'tcx>(\n-    infcx: &InferCtxt<'cx, 'tcx>,\n+    infcx: &InferCtxt<'tcx>,\n     universal_regions: UniversalRegions<'tcx>,\n     body: &Body<'tcx>,\n     promoted: &IndexVec<Promoted, Body<'tcx>>,\n@@ -318,8 +318,8 @@ pub(crate) fn compute_regions<'cx, 'tcx>(\n     }\n }\n \n-pub(super) fn dump_mir_results<'a, 'tcx>(\n-    infcx: &InferCtxt<'a, 'tcx>,\n+pub(super) fn dump_mir_results<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n     body: &Body<'tcx>,\n     regioncx: &RegionInferenceContext<'tcx>,\n     closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,\n@@ -368,8 +368,8 @@ pub(super) fn dump_mir_results<'a, 'tcx>(\n     };\n }\n \n-pub(super) fn dump_annotation<'a, 'tcx>(\n-    infcx: &InferCtxt<'a, 'tcx>,\n+pub(super) fn dump_annotation<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n     body: &Body<'tcx>,\n     regioncx: &RegionInferenceContext<'tcx>,\n     closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,"}, {"sha": "4cefd1ec387d6c71a1a840fcffefbfb6d61279c2", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -565,7 +565,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     #[instrument(skip(self, infcx, body, polonius_output), level = \"debug\")]\n     pub(super) fn solve(\n         &mut self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         body: &Body<'tcx>,\n         polonius_output: Option<Rc<PoloniusOutput>>,\n@@ -835,7 +835,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// 'a`. See `TypeTest` for more details.\n     fn check_type_tests(\n         &self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         body: &Body<'tcx>,\n         mut propagated_outlives_requirements: Option<&mut Vec<ClosureOutlivesRequirement<'tcx>>>,\n@@ -923,7 +923,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     #[instrument(level = \"debug\", skip(self, infcx, propagated_outlives_requirements))]\n     fn try_promote_type_test(\n         &self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         body: &Body<'tcx>,\n         type_test: &TypeTest<'tcx>,\n@@ -1036,7 +1036,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     #[instrument(level = \"debug\", skip(self, infcx))]\n     fn try_promote_type_test_subject(\n         &self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         ty: Ty<'tcx>,\n     ) -> Option<ClosureOutlivesSubject<'tcx>> {\n         let tcx = infcx.tcx;\n@@ -1212,7 +1212,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// `point`.\n     fn eval_verify_bound(\n         &self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         body: &Body<'tcx>,\n         generic_ty: Ty<'tcx>,\n@@ -1262,7 +1262,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n     fn eval_if_eq(\n         &self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         generic_ty: Ty<'tcx>,\n         lower_bound: RegionVid,\n@@ -1718,7 +1718,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n     fn check_member_constraints(\n         &self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         errors_buffer: &mut RegionErrors<'tcx>,\n     ) {\n         let member_constraints = self.member_constraints.clone();"}, {"sha": "bed8914b3e2cde4d667787529631d7790ce53b9b", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -63,7 +63,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     #[instrument(level = \"debug\", skip(self, infcx), ret)]\n     pub(crate) fn infer_opaque_types(\n         &self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         opaque_ty_decls: VecMap<OpaqueTypeKey<'tcx>, (OpaqueHiddenType<'tcx>, OpaqueTyOrigin)>,\n     ) -> VecMap<LocalDefId, OpaqueHiddenType<'tcx>> {\n         let mut result: VecMap<LocalDefId, OpaqueHiddenType<'tcx>> = VecMap::new();\n@@ -194,7 +194,7 @@ pub trait InferCtxtExt<'tcx> {\n     ) -> Ty<'tcx>;\n }\n \n-impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n+impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n     /// Given the fully resolved, instantiated type for an opaque\n     /// type, i.e., the value of an inference variable like C1 or C2\n     /// (*), computes the \"definition type\" for an opaque type"}, {"sha": "d737432f0ef6897e0f1ac91c20288ec816042a6f", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n /// inference variables, returning the number of variables created.\n #[instrument(skip(infcx, body, promoted), level = \"debug\")]\n pub fn renumber_mir<'tcx>(\n-    infcx: &InferCtxt<'_, 'tcx>,\n+    infcx: &InferCtxt<'tcx>,\n     body: &mut Body<'tcx>,\n     promoted: &mut IndexVec<Promoted, Body<'tcx>>,\n ) {\n@@ -28,7 +28,7 @@ pub fn renumber_mir<'tcx>(\n /// Replaces all regions appearing in `value` with fresh inference\n /// variables.\n #[instrument(skip(infcx), level = \"debug\")]\n-pub fn renumber_regions<'tcx, T>(infcx: &InferCtxt<'_, 'tcx>, value: T) -> T\n+pub fn renumber_regions<'tcx, T>(infcx: &InferCtxt<'tcx>, value: T) -> T\n where\n     T: TypeFoldable<'tcx>,\n {\n@@ -44,7 +44,7 @@ where\n // Once `visit_mir_constant` is removed we can also remove this function\n // and just use `renumber_regions`.\n fn renumber_regions_in_mir_constant<'tcx>(\n-    infcx: &InferCtxt<'_, 'tcx>,\n+    infcx: &InferCtxt<'tcx>,\n     value: ConstantKind<'tcx>,\n ) -> ConstantKind<'tcx> {\n     infcx.tcx.super_fold_regions(value, |_region, _depth| {\n@@ -54,7 +54,7 @@ fn renumber_regions_in_mir_constant<'tcx>(\n }\n \n struct NllVisitor<'a, 'tcx> {\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n+    infcx: &'a InferCtxt<'tcx>,\n }\n \n impl<'a, 'tcx> NllVisitor<'a, 'tcx> {"}, {"sha": "d5bfc2f520826c7163b12fdd187a6ef6d0bfa17d", "filename": "compiler/rustc_borrowck/src/type_check/constraint_conversion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -19,7 +19,7 @@ use crate::{\n };\n \n pub(crate) struct ConstraintConversion<'a, 'tcx> {\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n+    infcx: &'a InferCtxt<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     universal_regions: &'a UniversalRegions<'tcx>,\n     /// Each RBP `GK: 'a` is assumed to be true. These encode\n@@ -43,7 +43,7 @@ pub(crate) struct ConstraintConversion<'a, 'tcx> {\n \n impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n     pub(crate) fn new(\n-        infcx: &'a InferCtxt<'a, 'tcx>,\n+        infcx: &'a InferCtxt<'tcx>,\n         universal_regions: &'a UniversalRegions<'tcx>,\n         region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n         implicit_region_bound: ty::Region<'tcx>,"}, {"sha": "7d4219d70d95b966e90b7770f955cff1c520165c", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -48,7 +48,7 @@ pub(crate) struct CreateResult<'tcx> {\n }\n \n pub(crate) fn create<'tcx>(\n-    infcx: &InferCtxt<'_, 'tcx>,\n+    infcx: &InferCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     implicit_region_bound: ty::Region<'tcx>,\n     universal_regions: &Rc<UniversalRegions<'tcx>>,\n@@ -197,7 +197,7 @@ impl UniversalRegionRelations<'_> {\n }\n \n struct UniversalRegionRelationsBuilder<'this, 'tcx> {\n-    infcx: &'this InferCtxt<'this, 'tcx>,\n+    infcx: &'this InferCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     universal_regions: Rc<UniversalRegions<'tcx>>,\n     implicit_region_bound: ty::Region<'tcx>,"}, {"sha": "3a0465ea56d13e3d9e8997fda67d9cbb56b6401b", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -123,7 +123,7 @@ mod relate_tys;\n /// - `move_data` -- move-data constructed when performing the maybe-init dataflow analysis\n /// - `elements` -- MIR region map\n pub(crate) fn type_check<'mir, 'tcx>(\n-    infcx: &InferCtxt<'_, 'tcx>,\n+    infcx: &InferCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body: &Body<'tcx>,\n     promoted: &IndexVec<Promoted, Body<'tcx>>,\n@@ -876,7 +876,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n /// way, it accrues region constraints -- these can later be used by\n /// NLL region checking.\n struct TypeChecker<'a, 'tcx> {\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n+    infcx: &'a InferCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     last_span: Span,\n     body: &'a Body<'tcx>,\n@@ -946,7 +946,7 @@ pub(crate) struct MirTypeckRegionConstraints<'tcx> {\n impl<'tcx> MirTypeckRegionConstraints<'tcx> {\n     fn placeholder_region(\n         &mut self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         placeholder: ty::PlaceholderRegion,\n     ) -> ty::Region<'tcx> {\n         let placeholder_index = self.placeholder_indices.insert(placeholder);\n@@ -1030,7 +1030,7 @@ impl Locations {\n \n impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     fn new(\n-        infcx: &'a InferCtxt<'a, 'tcx>,\n+        infcx: &'a InferCtxt<'tcx>,\n         body: &'a Body<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n@@ -2744,7 +2744,7 @@ impl<'tcx> TypeOp<'tcx> for InstantiateOpaqueType<'tcx> {\n     /// constraints in our `InferCtxt`\n     type ErrorInfo = InstantiateOpaqueType<'tcx>;\n \n-    fn fully_perform(mut self, infcx: &InferCtxt<'_, 'tcx>) -> Fallible<TypeOpOutput<'tcx, Self>> {\n+    fn fully_perform(mut self, infcx: &InferCtxt<'tcx>) -> Fallible<TypeOpOutput<'tcx, Self>> {\n         let (mut output, region_constraints) = scrape_region_constraints(infcx, || {\n             Ok(InferOk { value: (), obligations: self.obligations.clone() })\n         })?;"}, {"sha": "51d262a881b8cbae3f2ff178b1f74591bde88623", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -219,7 +219,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n     /// signature. This will also compute the relationships that are\n     /// known between those regions.\n     pub fn new(\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         mir_def: ty::WithOptConstParam<LocalDefId>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Self {\n@@ -382,7 +382,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n }\n \n struct UniversalRegionsBuilder<'cx, 'tcx> {\n-    infcx: &'cx InferCtxt<'cx, 'tcx>,\n+    infcx: &'cx InferCtxt<'tcx>,\n     mir_def: ty::WithOptConstParam<LocalDefId>,\n     mir_hir_id: HirId,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -699,7 +699,7 @@ trait InferCtxtExt<'tcx> {\n     );\n }\n \n-impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n+impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n     fn replace_free_regions_with_nll_infer_vars<T>(\n         &self,\n         origin: NllRegionVariableOrigin,"}, {"sha": "c6f5570b2975cf39fcf0a424fa62a11f585a9b35", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -712,8 +712,8 @@ fn check_region_bounds_on_impl_item<'tcx>(\n }\n \n #[instrument(level = \"debug\", skip(infcx))]\n-fn extract_spans_for_error_reporting<'a, 'tcx>(\n-    infcx: &infer::InferCtxt<'a, 'tcx>,\n+fn extract_spans_for_error_reporting<'tcx>(\n+    infcx: &infer::InferCtxt<'tcx>,\n     terr: TypeError<'_>,\n     cause: &ObligationCause<'tcx>,\n     impl_m: &ty::AssocItem,"}, {"sha": "e273571edbd3973db256724700b4dfb7d639840d", "filename": "compiler/rustc_hir_analysis/src/check/inherited.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Finherited.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -6,7 +6,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::HirIdMap;\n use rustc_infer::infer;\n-use rustc_infer::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n+use rustc_infer::infer::{DefiningAnchor, InferCtxt, InferOk, TyCtxtInferExt};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -30,7 +30,7 @@ use std::ops::Deref;\n /// `bar()` will each have their own `FnCtxt`, but they will\n /// share the inherited fields.\n pub struct Inherited<'a, 'tcx> {\n-    pub(super) infcx: InferCtxt<'a, 'tcx>,\n+    pub(super) infcx: InferCtxt<'tcx>,\n \n     pub(super) typeck_results: &'a RefCell<ty::TypeckResults<'tcx>>,\n \n@@ -71,7 +71,7 @@ pub struct Inherited<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Deref for Inherited<'a, 'tcx> {\n-    type Target = InferCtxt<'a, 'tcx>;\n+    type Target = InferCtxt<'tcx>;\n     fn deref(&self) -> &Self::Target {\n         &self.infcx\n     }\n@@ -83,6 +83,7 @@ impl<'a, 'tcx> Deref for Inherited<'a, 'tcx> {\n pub struct InheritedBuilder<'tcx> {\n     infcx: infer::InferCtxtBuilder<'tcx>,\n     def_id: LocalDefId,\n+    typeck_results: RefCell<ty::TypeckResults<'tcx>>,\n }\n \n impl<'tcx> Inherited<'_, 'tcx> {\n@@ -93,7 +94,7 @@ impl<'tcx> Inherited<'_, 'tcx> {\n             infcx: tcx\n                 .infer_ctxt()\n                 .ignoring_regions()\n-                .with_fresh_in_progress_typeck_results(hir_owner)\n+                .with_opaque_type_inference(DefiningAnchor::Bind(hir_owner.def_id))\n                 .with_normalize_fn_sig_for_diagnostic(Lrc::new(move |infcx, fn_sig| {\n                     if fn_sig.has_escaping_bound_vars() {\n                         return fn_sig;\n@@ -117,6 +118,7 @@ impl<'tcx> Inherited<'_, 'tcx> {\n                     })\n                 })),\n             def_id,\n+            typeck_results: RefCell::new(ty::TypeckResults::new(hir_owner)),\n         }\n     }\n }\n@@ -127,16 +129,18 @@ impl<'tcx> InheritedBuilder<'tcx> {\n         F: for<'a> FnOnce(Inherited<'a, 'tcx>) -> R,\n     {\n         let def_id = self.def_id;\n-        self.infcx.enter(|infcx| f(Inherited::new(infcx, def_id)))\n+        self.infcx.enter(|infcx| f(Inherited::new(infcx, def_id, &self.typeck_results)))\n     }\n }\n \n impl<'a, 'tcx> Inherited<'a, 'tcx> {\n-    fn new(infcx: InferCtxt<'a, 'tcx>, def_id: LocalDefId) -> Self {\n+    fn new(\n+        infcx: InferCtxt<'tcx>,\n+        def_id: LocalDefId,\n+        typeck_results: &'a RefCell<ty::TypeckResults<'tcx>>,\n+    ) -> Self {\n         let tcx = infcx.tcx;\n         let body_id = tcx.hir().maybe_body_owned_by(def_id);\n-        let typeck_results =\n-            infcx.in_progress_typeck_results.expect(\"building `FnCtxt` without typeck results\");\n \n         Inherited {\n             typeck_results,"}, {"sha": "9a2bd9c95edd7ae197b7a3174dab855f3d217922", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -699,7 +699,7 @@ fn resolve_regions_with_wf_tys<'tcx>(\n     id: hir::HirId,\n     param_env: ty::ParamEnv<'tcx>,\n     wf_tys: &FxHashSet<Ty<'tcx>>,\n-    add_constraints: impl for<'a> FnOnce(&'a InferCtxt<'a, 'tcx>, &'a RegionBoundPairs<'tcx>),\n+    add_constraints: impl for<'a> FnOnce(&'a InferCtxt<'tcx>, &'a RegionBoundPairs<'tcx>),\n ) -> bool {\n     // Unfortunately, we have to use a new `InferCtxt` each call, because\n     // region constraints get added and solved there and we need to test each"}, {"sha": "3583769b7cd646c068c8ce477f51ea9848cf517b", "filename": "compiler/rustc_hir_analysis/src/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwriteback.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -700,7 +700,7 @@ impl Locatable for hir::HirId {\n /// unresolved types and so forth.\n struct Resolver<'cx, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    infcx: &'cx InferCtxt<'cx, 'tcx>,\n+    infcx: &'cx InferCtxt<'tcx>,\n     span: &'cx dyn Locatable,\n     body: &'tcx hir::Body<'tcx>,\n "}, {"sha": "cbc3769901d724daf22d6955f61fb30ea5105bf8", "filename": "compiler/rustc_hir_analysis/src/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_hir_analysis%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_hir_analysis%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fexpr_use_visitor.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -134,7 +134,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n     /// - `typeck_results` --- typeck results for the code being analyzed\n     pub fn new(\n         delegate: &'a mut (dyn Delegate<'tcx> + 'a),\n-        infcx: &'a InferCtxt<'a, 'tcx>,\n+        infcx: &'a InferCtxt<'tcx>,\n         body_owner: LocalDefId,\n         param_env: ty::ParamEnv<'tcx>,\n         typeck_results: &'a ty::TypeckResults<'tcx>,"}, {"sha": "a6880c7e77ac3ebc645cd844865e4cdf19de6f0d", "filename": "compiler/rustc_hir_analysis/src/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_hir_analysis%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_hir_analysis%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fmem_categorization.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -92,7 +92,7 @@ impl HirNode for hir::Pat<'_> {\n #[derive(Clone)]\n pub(crate) struct MemCategorizationContext<'a, 'tcx> {\n     pub(crate) typeck_results: &'a ty::TypeckResults<'tcx>,\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n+    infcx: &'a InferCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body_owner: LocalDefId,\n     upvars: Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>>,\n@@ -103,7 +103,7 @@ pub(crate) type McResult<T> = Result<T, ()>;\n impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n     /// Creates a `MemCategorizationContext`.\n     pub(crate) fn new(\n-        infcx: &'a InferCtxt<'a, 'tcx>,\n+        infcx: &'a InferCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         body_owner: LocalDefId,\n         typeck_results: &'a ty::TypeckResults<'tcx>,"}, {"sha": "5ff3779fa1438ba11aff507786ce3de4ed0bbaa5", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -31,7 +31,7 @@ use rustc_middle::ty::relate::{Relate, TypeRelation};\n use rustc_middle::ty::{Const, ImplSubject};\n \n pub struct At<'a, 'tcx> {\n-    pub infcx: &'a InferCtxt<'a, 'tcx>,\n+    pub infcx: &'a InferCtxt<'tcx>,\n     pub cause: &'a ObligationCause<'tcx>,\n     pub param_env: ty::ParamEnv<'tcx>,\n     /// Whether we should define opaque types\n@@ -48,9 +48,9 @@ pub struct Trace<'a, 'tcx> {\n     trace: TypeTrace<'tcx>,\n }\n \n-impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n+impl<'tcx> InferCtxt<'tcx> {\n     #[inline]\n-    pub fn at(\n+    pub fn at<'a>(\n         &'a self,\n         cause: &'a ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n@@ -66,7 +66,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             tcx: self.tcx,\n             defining_use_anchor: self.defining_use_anchor,\n             considering_regions: self.considering_regions,\n-            in_progress_typeck_results: self.in_progress_typeck_results,\n             inner: self.inner.clone(),\n             skip_leak_check: self.skip_leak_check.clone(),\n             lexical_region_resolutions: self.lexical_region_resolutions.clone(),"}, {"sha": "a3ff703634037b83ce8e254c30aeae5ca377665b", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -20,7 +20,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_index::vec::Idx;\n use smallvec::SmallVec;\n \n-impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n+impl<'tcx> InferCtxt<'tcx> {\n     /// Canonicalizes a query value `V`. When we canonicalize a query,\n     /// we not only canonicalize unbound inference variables, but we\n     /// *also* replace all free regions whatsoever. So for example a\n@@ -316,7 +316,7 @@ impl CanonicalizeMode for CanonicalizeFreeRegionsOtherThanStatic {\n }\n \n struct Canonicalizer<'cx, 'tcx> {\n-    infcx: &'cx InferCtxt<'cx, 'tcx>,\n+    infcx: &'cx InferCtxt<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     variables: SmallVec<[CanonicalVarInfo<'tcx>; 8]>,\n     query_state: &'cx mut OriginalQueryValues<'tcx>,\n@@ -521,7 +521,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n     /// `canonicalize_query` and `canonicalize_response`.\n     fn canonicalize<V>(\n         value: V,\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         tcx: TyCtxt<'tcx>,\n         canonicalize_region_mode: &dyn CanonicalizeMode,\n         query_state: &mut OriginalQueryValues<'tcx>,"}, {"sha": "06ca2534d5c3f0f610d3c43e27d156e1e80f1cd0", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -36,7 +36,7 @@ mod canonicalizer;\n pub mod query_response;\n mod substitute;\n \n-impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n+impl<'tcx> InferCtxt<'tcx> {\n     /// Creates a substitution S for the canonical value with fresh\n     /// inference variables and applies it to the canonical value.\n     /// Returns both the instantiated result *and* the substitution S."}, {"sha": "eb0135d76f1e406e6f56a4ccf6cbe4c232cf8787", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -32,7 +32,7 @@ use rustc_span::Span;\n use std::fmt::Debug;\n use std::iter;\n \n-impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n+impl<'tcx> InferCtxt<'tcx> {\n     /// This method is meant to be invoked as the final step of a canonical query\n     /// implementation. It is given:\n     ///\n@@ -677,7 +677,7 @@ pub fn make_query_region_constraints<'tcx>(\n }\n \n struct QueryTypeRelatingDelegate<'a, 'tcx> {\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n+    infcx: &'a InferCtxt<'tcx>,\n     obligations: &'a mut Vec<PredicateObligation<'tcx>>,\n     param_env: ty::ParamEnv<'tcx>,\n     cause: &'a ObligationCause<'tcx>,"}, {"sha": "b5427f639c13ca7cd9b5a4167ea28e5ab715f76c", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -43,7 +43,7 @@ use rustc_span::{Span, DUMMY_SP};\n \n #[derive(Clone)]\n pub struct CombineFields<'infcx, 'tcx> {\n-    pub infcx: &'infcx InferCtxt<'infcx, 'tcx>,\n+    pub infcx: &'infcx InferCtxt<'tcx>,\n     pub trace: TypeTrace<'tcx>,\n     pub cause: Option<ty::relate::Cause>,\n     pub param_env: ty::ParamEnv<'tcx>,\n@@ -63,7 +63,7 @@ pub enum RelationDir {\n     EqTo,\n }\n \n-impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n+impl<'tcx> InferCtxt<'tcx> {\n     pub fn super_combine_tys<R>(\n         &self,\n         relation: &mut R,\n@@ -452,7 +452,7 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n }\n \n struct Generalizer<'cx, 'tcx> {\n-    infcx: &'cx InferCtxt<'cx, 'tcx>,\n+    infcx: &'cx InferCtxt<'tcx>,\n \n     /// The span, used when creating new type variables and things.\n     cause: &'cx ObligationCause<'tcx>,\n@@ -775,7 +775,7 @@ fn float_unification_error<'tcx>(\n }\n \n struct ConstInferUnifier<'cx, 'tcx> {\n-    infcx: &'cx InferCtxt<'cx, 'tcx>,\n+    infcx: &'cx InferCtxt<'tcx>,\n \n     span: Span,\n "}, {"sha": "dd6b85c39509262e94160c523e86bd172b73b8dc", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -89,7 +89,7 @@ pub mod nice_region_error;\n /// field is only populated during an in-progress typeck.\n /// Get an instance by calling `InferCtxt::err` or `FnCtxt::infer_err`.\n pub struct TypeErrCtxt<'a, 'tcx> {\n-    pub infcx: &'a InferCtxt<'a, 'tcx>,\n+    pub infcx: &'a InferCtxt<'tcx>,\n     pub typeck_results: Option<std::cell::Ref<'a, ty::TypeckResults<'tcx>>>,\n }\n \n@@ -103,9 +103,9 @@ impl TypeErrCtxt<'_, '_> {\n     }\n }\n \n-impl<'a, 'tcx> Deref for TypeErrCtxt<'a, 'tcx> {\n-    type Target = InferCtxt<'a, 'tcx>;\n-    fn deref(&self) -> &InferCtxt<'a, 'tcx> {\n+impl<'tcx> Deref for TypeErrCtxt<'_, 'tcx> {\n+    type Target = InferCtxt<'tcx>;\n+    fn deref(&self) -> &InferCtxt<'tcx> {\n         &self.infcx\n     }\n }\n@@ -329,7 +329,7 @@ pub fn unexpected_hidden_region_diagnostic<'tcx>(\n     err\n }\n \n-impl<'tcx> InferCtxt<'_, 'tcx> {\n+impl<'tcx> InferCtxt<'tcx> {\n     pub fn get_impl_future_output_ty(&self, ty: Ty<'tcx>) -> Option<Binder<'tcx, Ty<'tcx>>> {\n         if let ty::Opaque(def_id, substs) = ty.kind() {\n             let future_trait = self.tcx.require_lang_item(LangItem::Future, None);\n@@ -2837,7 +2837,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n     }\n }\n \n-struct SameTypeModuloInfer<'a, 'tcx>(&'a InferCtxt<'a, 'tcx>);\n+struct SameTypeModuloInfer<'a, 'tcx>(&'a InferCtxt<'tcx>);\n \n impl<'tcx> TypeRelation<'tcx> for SameTypeModuloInfer<'_, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n@@ -2924,7 +2924,7 @@ impl<'tcx> TypeRelation<'tcx> for SameTypeModuloInfer<'_, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n+impl<'tcx> InferCtxt<'tcx> {\n     fn report_inference_failure(\n         &self,\n         var_origin: RegionVariableOrigin,\n@@ -3112,7 +3112,7 @@ impl TyCategory {\n     }\n }\n \n-impl<'tcx> InferCtxt<'_, 'tcx> {\n+impl<'tcx> InferCtxt<'tcx> {\n     /// Given a [`hir::Block`], get the span of its last expression or\n     /// statement, peeling off any inner blocks.\n     pub fn find_block_span(&self, block: &'tcx hir::Block<'tcx>) -> Span {"}, {"sha": "f4b3ded53b030ff2349e568f147c37de41f5ff18", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -152,7 +152,7 @@ impl UnderspecifiedArgKind {\n     }\n }\n \n-fn fmt_printer<'a, 'tcx>(infcx: &'a InferCtxt<'_, 'tcx>, ns: Namespace) -> FmtPrinter<'a, 'tcx> {\n+fn fmt_printer<'a, 'tcx>(infcx: &'a InferCtxt<'tcx>, ns: Namespace) -> FmtPrinter<'a, 'tcx> {\n     let mut printer = FmtPrinter::new(infcx.tcx, ns);\n     let ty_getter = move |ty_vid| {\n         if infcx.probe_ty_var(ty_vid).is_ok() {\n@@ -183,7 +183,7 @@ fn fmt_printer<'a, 'tcx>(infcx: &'a InferCtxt<'_, 'tcx>, ns: Namespace) -> FmtPr\n     printer\n }\n \n-fn ty_to_string<'tcx>(infcx: &InferCtxt<'_, 'tcx>, ty: Ty<'tcx>) -> String {\n+fn ty_to_string<'tcx>(infcx: &InferCtxt<'tcx>, ty: Ty<'tcx>) -> String {\n     let printer = fmt_printer(infcx, Namespace::TypeNS);\n     let ty = infcx.resolve_vars_if_possible(ty);\n     match ty.kind() {\n@@ -202,7 +202,7 @@ fn ty_to_string<'tcx>(infcx: &InferCtxt<'_, 'tcx>, ty: Ty<'tcx>) -> String {\n /// We don't want to directly use `ty_to_string` for closures as their type isn't really\n /// something users are familiar with. Directly printing the `fn_sig` of closures also\n /// doesn't work as they actually use the \"rust-call\" API.\n-fn closure_as_fn_str<'tcx>(infcx: &InferCtxt<'_, 'tcx>, ty: Ty<'tcx>) -> String {\n+fn closure_as_fn_str<'tcx>(infcx: &InferCtxt<'tcx>, ty: Ty<'tcx>) -> String {\n     let ty::Closure(_, substs) = ty.kind() else { unreachable!() };\n     let fn_sig = substs.as_closure().sig();\n     let args = fn_sig\n@@ -226,7 +226,7 @@ fn closure_as_fn_str<'tcx>(infcx: &InferCtxt<'_, 'tcx>, ty: Ty<'tcx>) -> String\n     format!(\"fn({}){}\", args, ret)\n }\n \n-impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n+impl<'tcx> InferCtxt<'tcx> {\n     /// Extracts data used by diagnostic for either types or constants\n     /// which were stuck during inference.\n     pub fn extract_inference_diagnostics_data(\n@@ -566,7 +566,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n     }\n }\n \n-impl<'tcx> InferCtxt<'_, 'tcx> {\n+impl<'tcx> InferCtxt<'tcx> {\n     pub fn need_type_info_err_in_generator(\n         &self,\n         kind: hir::GeneratorKind,\n@@ -657,7 +657,7 @@ impl<'tcx> InferSource<'tcx> {\n }\n \n impl<'tcx> InferSourceKind<'tcx> {\n-    fn ty_localized_msg(&self, infcx: &InferCtxt<'_, 'tcx>) -> (&'static str, String) {\n+    fn ty_localized_msg(&self, infcx: &InferCtxt<'tcx>) -> (&'static str, String) {\n         match *self {\n             InferSourceKind::LetBinding { ty, .. }\n             | InferSourceKind::ClosureArg { ty, .. }\n@@ -694,7 +694,7 @@ struct InsertableGenericArgs<'tcx> {\n /// While doing so, the currently best spot is stored in `infer_source`.\n /// For details on how we rank spots, see [Self::source_cost]\n struct FindInferSourceVisitor<'a, 'tcx> {\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n+    infcx: &'a InferCtxt<'tcx>,\n     typeck_results: &'a TypeckResults<'tcx>,\n \n     target: GenericArg<'tcx>,\n@@ -706,7 +706,7 @@ struct FindInferSourceVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n     fn new(\n-        infcx: &'a InferCtxt<'a, 'tcx>,\n+        infcx: &'a InferCtxt<'tcx>,\n         typeck_results: &'a TypeckResults<'tcx>,\n         target: GenericArg<'tcx>,\n     ) -> Self {"}, {"sha": "ff5d1a05a7062a4c7e6d8faa58e2e96a3c66d138", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -38,7 +38,7 @@ use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVi\n use std::collections::hash_map::Entry;\n \n pub struct TypeFreshener<'a, 'tcx> {\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n+    infcx: &'a InferCtxt<'tcx>,\n     ty_freshen_count: u32,\n     const_freshen_count: u32,\n     ty_freshen_map: FxHashMap<ty::InferTy, Ty<'tcx>>,\n@@ -47,7 +47,7 @@ pub struct TypeFreshener<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {\n-    pub fn new(infcx: &'a InferCtxt<'a, 'tcx>, keep_static: bool) -> TypeFreshener<'a, 'tcx> {\n+    pub fn new(infcx: &'a InferCtxt<'tcx>, keep_static: bool) -> TypeFreshener<'a, 'tcx> {\n         TypeFreshener {\n             infcx,\n             ty_freshen_count: 0,"}, {"sha": "6dd6c4e1f5ee846d54c4fb1ef79d986376266304", "filename": "compiler/rustc_infer/src/infer/fudge.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -43,7 +43,7 @@ struct VariableLengths {\n     region_constraints_len: usize,\n }\n \n-impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n+impl<'tcx> InferCtxt<'tcx> {\n     fn variable_lengths(&self) -> VariableLengths {\n         let mut inner = self.inner.borrow_mut();\n         VariableLengths {\n@@ -167,7 +167,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n }\n \n pub struct InferenceFudger<'a, 'tcx> {\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n+    infcx: &'a InferCtxt<'tcx>,\n     type_vars: (Range<TyVid>, Vec<TypeVariableOrigin>),\n     int_vars: Range<IntVid>,\n     float_vars: Range<FloatVid>,"}, {"sha": "6ffefcb7a286a5aac0eef3f4db47a26c328ff2ef", "filename": "compiler/rustc_infer/src/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -113,7 +113,7 @@ impl<'tcx> TypeRelation<'tcx> for Glb<'_, '_, 'tcx> {\n }\n \n impl<'combine, 'infcx, 'tcx> LatticeDir<'infcx, 'tcx> for Glb<'combine, 'infcx, 'tcx> {\n-    fn infcx(&self) -> &'infcx InferCtxt<'infcx, 'tcx> {\n+    fn infcx(&self) -> &'infcx InferCtxt<'tcx> {\n         self.fields.infcx\n     }\n "}, {"sha": "28c87a1159f344e9fda6a8f06c2deab873098a97", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -59,7 +59,7 @@ impl<'a, 'tcx> CombineFields<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n+impl<'tcx> InferCtxt<'tcx> {\n     /// Replaces all bound variables (lifetimes, types, and constants) bound by\n     /// `binder` with placeholder variables in a new universe. This means that the\n     /// new placeholders can only be named by inference variables created after\n@@ -114,7 +114,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn leak_check(\n         &self,\n         overly_polymorphic: bool,\n-        snapshot: &CombinedSnapshot<'_, 'tcx>,\n+        snapshot: &CombinedSnapshot<'tcx>,\n     ) -> RelateResult<'tcx, ()> {\n         // If the user gave `-Zno-leak-check`, or we have been\n         // configured to skip the leak check, then skip the leak check"}, {"sha": "eba65361ae6b2b923ec5e8f100b41e4dc904aea1", "filename": "compiler/rustc_infer/src/infer/lattice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -31,7 +31,7 @@ use rustc_middle::ty::{self, Ty};\n /// GLB moves \"down\" the lattice (to smaller values); LUB moves\n /// \"up\" the lattice (to bigger values).\n pub trait LatticeDir<'f, 'tcx>: TypeRelation<'tcx> {\n-    fn infcx(&self) -> &'f InferCtxt<'f, 'tcx>;\n+    fn infcx(&self) -> &'f InferCtxt<'tcx>;\n \n     fn cause(&self) -> &ObligationCause<'tcx>;\n "}, {"sha": "d6e56fcb7fd274d6805654aee0544470d64f92bf", "filename": "compiler/rustc_infer/src/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -119,7 +119,7 @@ impl<'tcx> ConstEquateRelation<'tcx> for Lub<'_, '_, 'tcx> {\n }\n \n impl<'combine, 'infcx, 'tcx> LatticeDir<'infcx, 'tcx> for Lub<'combine, 'infcx, 'tcx> {\n-    fn infcx(&self) -> &'infcx InferCtxt<'infcx, 'tcx> {\n+    fn infcx(&self) -> &'infcx InferCtxt<'tcx> {\n         self.fields.infcx\n     }\n "}, {"sha": "8e0c153b642a97e9dbfa8bc2ca7dacbbc922d537", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 25, "deletions": 55, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -16,7 +16,6 @@ use rustc_data_structures::undo_log::Rollback;\n use rustc_data_structures::unify as ut;\n use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_hir::hir_id::OwnerId;\n use rustc_middle::infer::canonical::{Canonical, CanonicalVarValues};\n use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind, ToType};\n@@ -36,7 +35,7 @@ use rustc_middle::ty::{ConstVid, FloatVid, IntVid, TyVid};\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n \n-use std::cell::{Cell, Ref, RefCell};\n+use std::cell::{Cell, RefCell};\n use std::fmt;\n \n use self::combine::CombineFields;\n@@ -254,7 +253,7 @@ pub enum DefiningAnchor {\n     Error,\n }\n \n-pub struct InferCtxt<'a, 'tcx> {\n+pub struct InferCtxt<'tcx> {\n     pub tcx: TyCtxt<'tcx>,\n \n     /// The `DefId` of the item in whose context we are performing inference or typeck.\n@@ -274,12 +273,6 @@ pub struct InferCtxt<'a, 'tcx> {\n     /// solving is left to borrowck instead.\n     pub considering_regions: bool,\n \n-    /// During type-checking/inference of a body, `in_progress_typeck_results`\n-    /// contains a reference to the typeck results being built up, which are\n-    /// used for reading closure kinds/signatures as they are inferred,\n-    /// and for error reporting logic to read arbitrary node types.\n-    pub in_progress_typeck_results: Option<&'a RefCell<ty::TypeckResults<'tcx>>>,\n-\n     pub inner: RefCell<InferCtxtInner<'tcx>>,\n \n     /// If set, this flag causes us to skip the 'leak check' during\n@@ -342,7 +335,7 @@ pub struct InferCtxt<'a, 'tcx> {\n     universe: Cell<ty::UniverseIndex>,\n \n     normalize_fn_sig_for_diagnostic:\n-        Option<Lrc<dyn Fn(&InferCtxt<'_, 'tcx>, ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx>>>,\n+        Option<Lrc<dyn Fn(&InferCtxt<'tcx>, ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx>>>,\n }\n \n /// See the `error_reporting` module for more details.\n@@ -553,16 +546,13 @@ impl<'tcx> fmt::Display for FixupError<'tcx> {\n     }\n }\n \n-/// A temporary returned by `tcx.infer_ctxt()`. This is necessary\n-/// for multiple `InferCtxt` to share the same `in_progress_typeck_results`\n-/// without using `Rc` or something similar.\n+/// Used to configure inference contexts before their creation\n pub struct InferCtxtBuilder<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     defining_use_anchor: DefiningAnchor,\n     considering_regions: bool,\n-    fresh_typeck_results: Option<RefCell<ty::TypeckResults<'tcx>>>,\n     normalize_fn_sig_for_diagnostic:\n-        Option<Lrc<dyn Fn(&InferCtxt<'_, 'tcx>, ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx>>>,\n+        Option<Lrc<dyn Fn(&InferCtxt<'tcx>, ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx>>>,\n }\n \n pub trait TyCtxtInferExt<'tcx> {\n@@ -575,26 +565,17 @@ impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {\n             tcx: self,\n             defining_use_anchor: DefiningAnchor::Error,\n             considering_regions: true,\n-            fresh_typeck_results: None,\n             normalize_fn_sig_for_diagnostic: None,\n         }\n     }\n }\n \n impl<'tcx> InferCtxtBuilder<'tcx> {\n-    /// Used only by `rustc_hir_analysis` during body type-checking/inference,\n-    /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.\n-    /// Will also change the scope for opaque type defining use checks to the given owner.\n-    pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: OwnerId) -> Self {\n-        self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));\n-        self.with_opaque_type_inference(DefiningAnchor::Bind(table_owner.def_id))\n-    }\n-\n     /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,\n     /// you need to call this function. Otherwise the opaque type will be treated opaquely.\n     ///\n     /// It is only meant to be called in two places, for typeck\n-    /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used\n+    /// (via `Inherited::build`) and for the inference context used\n     /// in mir borrowck.\n     pub fn with_opaque_type_inference(mut self, defining_use_anchor: DefiningAnchor) -> Self {\n         self.defining_use_anchor = defining_use_anchor;\n@@ -608,7 +589,7 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n \n     pub fn with_normalize_fn_sig_for_diagnostic(\n         mut self,\n-        fun: Lrc<dyn Fn(&InferCtxt<'_, 'tcx>, ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx>>,\n+        fun: Lrc<dyn Fn(&InferCtxt<'tcx>, ty::PolyFnSig<'tcx>) -> ty::PolyFnSig<'tcx>>,\n     ) -> Self {\n         self.normalize_fn_sig_for_diagnostic = Some(fun);\n         self\n@@ -625,7 +606,7 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n         &mut self,\n         span: Span,\n         canonical: &Canonical<'tcx, T>,\n-        f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,\n+        f: impl FnOnce(InferCtxt<'tcx>, T, CanonicalVarValues<'tcx>) -> R,\n     ) -> R\n     where\n         T: TypeFoldable<'tcx>,\n@@ -637,20 +618,17 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n         })\n     }\n \n-    pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {\n+    pub fn enter<R>(&mut self, f: impl FnOnce(InferCtxt<'tcx>) -> R) -> R {\n         let InferCtxtBuilder {\n             tcx,\n             defining_use_anchor,\n             considering_regions,\n-            ref fresh_typeck_results,\n             ref normalize_fn_sig_for_diagnostic,\n         } = *self;\n-        let in_progress_typeck_results = fresh_typeck_results.as_ref();\n         f(InferCtxt {\n             tcx,\n             defining_use_anchor,\n             considering_regions,\n-            in_progress_typeck_results,\n             inner: RefCell::new(InferCtxtInner::new()),\n             lexical_region_resolutions: RefCell::new(None),\n             selection_cache: Default::default(),\n@@ -677,7 +655,7 @@ impl<'tcx, T> InferOk<'tcx, T> {\n     /// Extracts `value`, registering any obligations into `fulfill_cx`.\n     pub fn into_value_registering_obligations(\n         self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         fulfill_cx: &mut dyn TraitEngine<'tcx>,\n     ) -> T {\n         let InferOk { value, obligations } = self;\n@@ -693,18 +671,17 @@ impl<'tcx> InferOk<'tcx, ()> {\n }\n \n #[must_use = \"once you start a snapshot, you should always consume it\"]\n-pub struct CombinedSnapshot<'a, 'tcx> {\n+pub struct CombinedSnapshot<'tcx> {\n     undo_snapshot: Snapshot<'tcx>,\n     region_constraints_snapshot: RegionSnapshot,\n     universe: ty::UniverseIndex,\n     was_in_snapshot: bool,\n-    _in_progress_typeck_results: Option<Ref<'a, ty::TypeckResults<'tcx>>>,\n }\n \n-impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n+impl<'tcx> InferCtxt<'tcx> {\n     /// Creates a `TypeErrCtxt` for emitting various inference errors.\n     /// During typeck, use `FnCtxt::infer_err` instead.\n-    pub fn err_ctxt(&'a self) -> TypeErrCtxt<'a, 'tcx> {\n+    pub fn err_ctxt(&self) -> TypeErrCtxt<'_, 'tcx> {\n         TypeErrCtxt { infcx: self, typeck_results: None }\n     }\n \n@@ -746,7 +723,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// if this is not a type variable.\n     ///\n     /// No attempt is made to resolve `ty`.\n-    pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {\n+    pub fn type_var_origin(&self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {\n         match *ty.kind() {\n             ty::Infer(ty::TyVar(vid)) => {\n                 Some(*self.inner.borrow_mut().type_variables().var_origin(vid))\n@@ -787,7 +764,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         vars\n     }\n \n-    fn combine_fields(\n+    fn combine_fields<'a>(\n         &'a self,\n         trace: TypeTrace<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n@@ -829,7 +806,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         result\n     }\n \n-    fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {\n+    fn start_snapshot(&self) -> CombinedSnapshot<'tcx> {\n         debug!(\"start_snapshot()\");\n \n         let in_snapshot = self.in_snapshot.replace(true);\n@@ -841,22 +818,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),\n             universe: self.universe(),\n             was_in_snapshot: in_snapshot,\n-            // Borrow typeck results \"in progress\" (i.e., during typeck)\n-            // to ban writes from within a snapshot to them.\n-            _in_progress_typeck_results: self\n-                .in_progress_typeck_results\n-                .map(|typeck_results| typeck_results.borrow()),\n         }\n     }\n \n     #[instrument(skip(self, snapshot), level = \"debug\")]\n-    fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {\n+    fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'tcx>) {\n         let CombinedSnapshot {\n             undo_snapshot,\n             region_constraints_snapshot,\n             universe,\n             was_in_snapshot,\n-            _in_progress_typeck_results,\n         } = snapshot;\n \n         self.in_snapshot.set(was_in_snapshot);\n@@ -868,13 +839,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n \n     #[instrument(skip(self, snapshot), level = \"debug\")]\n-    fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {\n+    fn commit_from(&self, snapshot: CombinedSnapshot<'tcx>) {\n         let CombinedSnapshot {\n             undo_snapshot,\n             region_constraints_snapshot: _,\n             universe: _,\n             was_in_snapshot,\n-            _in_progress_typeck_results,\n         } = snapshot;\n \n         self.in_snapshot.set(was_in_snapshot);\n@@ -886,7 +856,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     #[instrument(skip(self, f), level = \"debug\")]\n     pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>\n     where\n-        F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,\n+        F: FnOnce(&CombinedSnapshot<'tcx>) -> Result<T, E>,\n     {\n         let snapshot = self.start_snapshot();\n         let r = f(&snapshot);\n@@ -906,7 +876,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     #[instrument(skip(self, f), level = \"debug\")]\n     pub fn probe<R, F>(&self, f: F) -> R\n     where\n-        F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,\n+        F: FnOnce(&CombinedSnapshot<'tcx>) -> R,\n     {\n         let snapshot = self.start_snapshot();\n         let r = f(&snapshot);\n@@ -918,7 +888,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     #[instrument(skip(self, f), level = \"debug\")]\n     pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R\n     where\n-        F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,\n+        F: FnOnce(&CombinedSnapshot<'tcx>) -> R,\n     {\n         let snapshot = self.start_snapshot();\n         let was_skip_leak_check = self.skip_leak_check.get();\n@@ -938,15 +908,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders\n     pub fn region_constraints_added_in_snapshot(\n         &self,\n-        snapshot: &CombinedSnapshot<'a, 'tcx>,\n+        snapshot: &CombinedSnapshot<'tcx>,\n     ) -> Option<bool> {\n         self.inner\n             .borrow_mut()\n             .unwrap_region_constraints()\n             .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)\n     }\n \n-    pub fn opaque_types_added_in_snapshot(&self, snapshot: &CombinedSnapshot<'a, 'tcx>) -> bool {\n+    pub fn opaque_types_added_in_snapshot(&self, snapshot: &CombinedSnapshot<'tcx>) -> bool {\n         self.inner.borrow().undo_log.opaque_types_in_snapshot(&snapshot.undo_snapshot)\n     }\n \n@@ -1519,7 +1489,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n \n         struct ToFreshVars<'a, 'tcx> {\n-            infcx: &'a InferCtxt<'a, 'tcx>,\n+            infcx: &'a InferCtxt<'tcx>,\n             span: Span,\n             lbrct: LateBoundRegionConversionTime,\n             map: FxHashMap<ty::BoundVar, ty::GenericArg<'tcx>>,\n@@ -1893,7 +1863,7 @@ impl<'tcx> TypeFolder<'tcx> for InferenceLiteralEraser<'tcx> {\n }\n \n struct ShallowResolver<'a, 'tcx> {\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n+    infcx: &'a InferCtxt<'tcx>,\n }\n \n impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {"}, {"sha": "7c186ae947065f3e9a7e5db12566eab6b4946e36", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -44,7 +44,7 @@ pub struct TypeRelating<'me, 'tcx, D>\n where\n     D: TypeRelatingDelegate<'tcx>,\n {\n-    infcx: &'me InferCtxt<'me, 'tcx>,\n+    infcx: &'me InferCtxt<'tcx>,\n \n     /// Callback to use when we deduce an outlives relationship.\n     delegate: D,\n@@ -149,11 +149,7 @@ impl<'me, 'tcx, D> TypeRelating<'me, 'tcx, D>\n where\n     D: TypeRelatingDelegate<'tcx>,\n {\n-    pub fn new(\n-        infcx: &'me InferCtxt<'me, 'tcx>,\n-        delegate: D,\n-        ambient_variance: ty::Variance,\n-    ) -> Self {\n+    pub fn new(infcx: &'me InferCtxt<'tcx>, delegate: D, ambient_variance: ty::Variance) -> Self {\n         Self {\n             infcx,\n             delegate,\n@@ -867,7 +863,7 @@ struct TypeGeneralizer<'me, 'tcx, D>\n where\n     D: TypeRelatingDelegate<'tcx>,\n {\n-    infcx: &'me InferCtxt<'me, 'tcx>,\n+    infcx: &'me InferCtxt<'tcx>,\n \n     delegate: &'me mut D,\n "}, {"sha": "77e8f72aefac09a9e8f2b9f522d548c34b5689db", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -41,7 +41,7 @@ pub struct OpaqueTypeDecl<'tcx> {\n     pub origin: hir::OpaqueTyOrigin,\n }\n \n-impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n+impl<'tcx> InferCtxt<'tcx> {\n     /// This is a backwards compatibility hack to prevent breaking changes from\n     /// lazy TAIT around RPIT handling.\n     pub fn replace_opaque_types_with_inference_vars<T: TypeFoldable<'tcx>>(\n@@ -511,7 +511,7 @@ impl UseKind {\n     }\n }\n \n-impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n+impl<'tcx> InferCtxt<'tcx> {\n     #[instrument(skip(self), level = \"debug\")]\n     pub fn register_hidden_type(\n         &self,"}, {"sha": "33543135ddb0ef68a3f3a92369ca3b629a6d948c", "filename": "compiler/rustc_infer/src/infer/outlives/env.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -87,9 +87,9 @@ impl<'tcx> OutlivesEnvironment<'tcx> {\n     }\n \n     /// Create a new `OutlivesEnvironment` with extra outlives bounds.\n-    pub fn with_bounds<'a>(\n+    pub fn with_bounds(\n         param_env: ty::ParamEnv<'tcx>,\n-        infcx: Option<&InferCtxt<'a, 'tcx>>,\n+        infcx: Option<&InferCtxt<'tcx>>,\n         extra_bounds: impl IntoIterator<Item = OutlivesBound<'tcx>>,\n     ) -> Self {\n         let mut builder = Self::builder(param_env);\n@@ -108,7 +108,7 @@ impl<'tcx> OutlivesEnvironment<'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> OutlivesEnvironmentBuilder<'tcx> {\n+impl<'tcx> OutlivesEnvironmentBuilder<'tcx> {\n     #[inline]\n     #[instrument(level = \"debug\")]\n     fn build(self) -> OutlivesEnvironment<'tcx> {\n@@ -125,7 +125,7 @@ impl<'a, 'tcx> OutlivesEnvironmentBuilder<'tcx> {\n     /// contain inference variables, it must be supplied, in which\n     /// case we will register \"givens\" on the inference context. (See\n     /// `RegionConstraintData`.)\n-    fn add_outlives_bounds<I>(&mut self, infcx: Option<&InferCtxt<'a, 'tcx>>, outlives_bounds: I)\n+    fn add_outlives_bounds<I>(&mut self, infcx: Option<&InferCtxt<'tcx>>, outlives_bounds: I)\n     where\n         I: IntoIterator<Item = OutlivesBound<'tcx>>,\n     {"}, {"sha": "6ca884799aa6fb3b77b5891c6ff20175f9aab922", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -75,7 +75,7 @@ use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Region, SubstsRef, Ty, TyCtxt, TypeVisitable};\n use smallvec::smallvec;\n \n-impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n+impl<'tcx> InferCtxt<'tcx> {\n     /// Registers that the given region obligation must be resolved\n     /// from within the scope of `body_id`. These regions are enqueued\n     /// and later processed by regionck, when full type information is\n@@ -523,7 +523,7 @@ where\n     }\n }\n \n-impl<'cx, 'tcx> TypeOutlivesDelegate<'tcx> for &'cx InferCtxt<'cx, 'tcx> {\n+impl<'cx, 'tcx> TypeOutlivesDelegate<'tcx> for &'cx InferCtxt<'tcx> {\n     fn push_sub_region_constraint(\n         &mut self,\n         origin: SubregionOrigin<'tcx>,"}, {"sha": "9f12bc972a816d1e939405a66f9d1d4c200d13cd", "filename": "compiler/rustc_infer/src/infer/projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -6,7 +6,7 @@ use crate::traits::{Obligation, PredicateObligation};\n use super::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use super::InferCtxt;\n \n-impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n+impl<'tcx> InferCtxt<'tcx> {\n     /// Instead of normalizing an associated type projection,\n     /// this function generates an inference variable and registers\n     /// an obligation that this inference variable must be the result"}, {"sha": "90858e3072ac028db31427fd05cbf69889086570", "filename": "compiler/rustc_infer/src/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -66,7 +66,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         tcx: TyCtxt<'tcx>,\n         overly_polymorphic: bool,\n         max_universe: ty::UniverseIndex,\n-        snapshot: &CombinedSnapshot<'_, 'tcx>,\n+        snapshot: &CombinedSnapshot<'tcx>,\n     ) -> RelateResult<'tcx, ()> {\n         debug!(\n             \"leak_check(max_universe={:?}, snapshot.universe={:?}, overly_polymorphic={:?})\","}, {"sha": "069f96000918faf082b30f5d44be94e9f4a1c5ae", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -16,12 +16,12 @@ use std::ops::ControlFlow;\n /// useful for printing messages etc but also required at various\n /// points for correctness.\n pub struct OpportunisticVarResolver<'a, 'tcx> {\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n+    infcx: &'a InferCtxt<'tcx>,\n }\n \n impl<'a, 'tcx> OpportunisticVarResolver<'a, 'tcx> {\n     #[inline]\n-    pub fn new(infcx: &'a InferCtxt<'a, 'tcx>) -> Self {\n+    pub fn new(infcx: &'a InferCtxt<'tcx>) -> Self {\n         OpportunisticVarResolver { infcx }\n     }\n }\n@@ -62,11 +62,11 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {\n /// If you want to resolve type and const variables as well, call\n /// [InferCtxt::resolve_vars_if_possible] first.\n pub struct OpportunisticRegionResolver<'a, 'tcx> {\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n+    infcx: &'a InferCtxt<'tcx>,\n }\n \n impl<'a, 'tcx> OpportunisticRegionResolver<'a, 'tcx> {\n-    pub fn new(infcx: &'a InferCtxt<'a, 'tcx>) -> Self {\n+    pub fn new(infcx: &'a InferCtxt<'tcx>) -> Self {\n         OpportunisticRegionResolver { infcx }\n     }\n }\n@@ -116,11 +116,11 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticRegionResolver<'a, 'tcx> {\n /// It does not construct the fully resolved type (which might\n /// involve some hashing and so forth).\n pub struct UnresolvedTypeFinder<'a, 'tcx> {\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n+    infcx: &'a InferCtxt<'tcx>,\n }\n \n impl<'a, 'tcx> UnresolvedTypeFinder<'a, 'tcx> {\n-    pub fn new(infcx: &'a InferCtxt<'a, 'tcx>) -> Self {\n+    pub fn new(infcx: &'a InferCtxt<'tcx>) -> Self {\n         UnresolvedTypeFinder { infcx }\n     }\n }\n@@ -167,7 +167,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for UnresolvedTypeFinder<'a, 'tcx> {\n /// Full type resolution replaces all type and region variables with\n /// their concrete results. If any variable cannot be replaced (never unified, etc)\n /// then an `Err` result is returned.\n-pub fn fully_resolve<'a, 'tcx, T>(infcx: &InferCtxt<'a, 'tcx>, value: T) -> FixupResult<'tcx, T>\n+pub fn fully_resolve<'tcx, T>(infcx: &InferCtxt<'tcx>, value: T) -> FixupResult<'tcx, T>\n where\n     T: TypeFoldable<'tcx>,\n {\n@@ -177,7 +177,7 @@ where\n // N.B. This type is not public because the protocol around checking the\n // `err` field is not enforceable otherwise.\n struct FullTypeResolver<'a, 'tcx> {\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n+    infcx: &'a InferCtxt<'tcx>,\n }\n \n impl<'a, 'tcx> FallibleTypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {"}, {"sha": "b2b985a22ac0147f4fc6abd855142bd2fac93938", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -10,7 +10,7 @@ use super::{ObligationCause, PredicateObligation};\n pub trait TraitEngine<'tcx>: 'tcx {\n     fn normalize_projection_type(\n         &mut self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         projection_ty: ty::ProjectionTy<'tcx>,\n         cause: ObligationCause<'tcx>,\n@@ -21,7 +21,7 @@ pub trait TraitEngine<'tcx>: 'tcx {\n     /// parameters (except for `Self`).\n     fn register_bound(\n         &mut self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         ty: Ty<'tcx>,\n         def_id: DefId,\n@@ -41,14 +41,13 @@ pub trait TraitEngine<'tcx>: 'tcx {\n \n     fn register_predicate_obligation(\n         &mut self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         obligation: PredicateObligation<'tcx>,\n     );\n \n-    fn select_all_or_error(&mut self, infcx: &InferCtxt<'_, 'tcx>) -> Vec<FulfillmentError<'tcx>>;\n+    fn select_all_or_error(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>>;\n \n-    fn select_where_possible(&mut self, infcx: &InferCtxt<'_, 'tcx>)\n-    -> Vec<FulfillmentError<'tcx>>;\n+    fn select_where_possible(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>>;\n \n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>>;\n \n@@ -58,15 +57,15 @@ pub trait TraitEngine<'tcx>: 'tcx {\n pub trait TraitEngineExt<'tcx> {\n     fn register_predicate_obligations(\n         &mut self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         obligations: impl IntoIterator<Item = PredicateObligation<'tcx>>,\n     );\n }\n \n impl<'tcx, T: ?Sized + TraitEngine<'tcx>> TraitEngineExt<'tcx> for T {\n     fn register_predicate_obligations(\n         &mut self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         obligations: impl IntoIterator<Item = PredicateObligation<'tcx>>,\n     ) {\n         for obligation in obligations {"}, {"sha": "f8b5009a58d4bf9acf2506fab24b038a39fdce76", "filename": "compiler/rustc_infer/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -10,7 +10,7 @@ use rustc_span::Span;\n use std::fmt;\n use std::iter;\n \n-impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n+impl<'tcx> InferCtxt<'tcx> {\n     pub fn report_extra_impl_obligation(\n         &self,\n         error_span: Span,"}, {"sha": "ed7609d4c22f5517c2c1569fc3bc179a25b09144", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -157,7 +157,7 @@ struct BlockContext(Vec<BlockFrame>);\n \n struct Builder<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    infcx: InferCtxt<'a, 'tcx>,\n+    infcx: InferCtxt<'tcx>,\n     typeck_results: &'tcx TypeckResults<'tcx>,\n     region_scope_tree: &'tcx region::ScopeTree,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -683,7 +683,7 @@ fn construct_error<'tcx>(\n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     fn new(\n         thir: &'a Thir<'tcx>,\n-        infcx: InferCtxt<'a, 'tcx>,\n+        infcx: InferCtxt<'tcx>,\n         def: ty::WithOptConstParam<LocalDefId>,\n         hir_id: hir::HirId,\n         span: Span,"}, {"sha": "d477eb1ffebe5c3a02ad600804c879137e808c09", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -35,7 +35,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n     }\n }\n \n-struct ConstToPat<'a, 'tcx> {\n+struct ConstToPat<'tcx> {\n     id: hir::HirId,\n     span: Span,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -55,7 +55,7 @@ struct ConstToPat<'a, 'tcx> {\n     behind_reference: Cell<bool>,\n \n     // inference context used for checking `T: Structural` bounds.\n-    infcx: InferCtxt<'a, 'tcx>,\n+    infcx: InferCtxt<'tcx>,\n \n     include_lint_checks: bool,\n \n@@ -71,21 +71,19 @@ mod fallback_to_const_ref {\n     /// hoops to get a reference to the value.\n     pub(super) struct FallbackToConstRef(());\n \n-    pub(super) fn fallback_to_const_ref<'a, 'tcx>(\n-        c2p: &super::ConstToPat<'a, 'tcx>,\n-    ) -> FallbackToConstRef {\n+    pub(super) fn fallback_to_const_ref<'tcx>(c2p: &super::ConstToPat<'tcx>) -> FallbackToConstRef {\n         assert!(c2p.behind_reference.get());\n         FallbackToConstRef(())\n     }\n }\n use fallback_to_const_ref::{fallback_to_const_ref, FallbackToConstRef};\n \n-impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n+impl<'tcx> ConstToPat<'tcx> {\n     fn new(\n         pat_ctxt: &PatCtxt<'_, 'tcx>,\n         id: hir::HirId,\n         span: Span,\n-        infcx: InferCtxt<'a, 'tcx>,\n+        infcx: InferCtxt<'tcx>,\n     ) -> Self {\n         trace!(?pat_ctxt.typeck_results.hir_owner);\n         ConstToPat {"}, {"sha": "61cfeec4bbb6ef5301569304686a760010306df9", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -25,7 +25,7 @@ struct AutoderefSnapshot<'tcx> {\n \n pub struct Autoderef<'a, 'tcx> {\n     // Meta infos:\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n+    infcx: &'a InferCtxt<'tcx>,\n     span: Span,\n     overloaded_span: Span,\n     body_id: hir::HirId,\n@@ -94,7 +94,7 @@ impl<'a, 'tcx> Iterator for Autoderef<'a, 'tcx> {\n \n impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n     pub fn new(\n-        infcx: &'a InferCtxt<'a, 'tcx>,\n+        infcx: &'a InferCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         body_id: hir::HirId,\n         span: Span,"}, {"sha": "91c91d4e52f542b1df4b7ddb811519861e2bf1b2", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -59,7 +59,7 @@ pub trait InferCtxtExt<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> traits::EvaluationResult;\n }\n-impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n+impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n     fn type_is_copy_modulo_regions(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n@@ -142,7 +142,7 @@ pub trait InferCtxtBuilderExt<'tcx> {\n     fn enter_canonical_trait_query<K, R>(\n         &mut self,\n         canonical_key: &Canonical<'tcx, K>,\n-        operation: impl FnOnce(&InferCtxt<'_, 'tcx>, &mut dyn TraitEngine<'tcx>, K) -> Fallible<R>,\n+        operation: impl FnOnce(&InferCtxt<'tcx>, &mut dyn TraitEngine<'tcx>, K) -> Fallible<R>,\n     ) -> Fallible<CanonicalizedQueryResponse<'tcx, R>>\n     where\n         K: TypeFoldable<'tcx>,\n@@ -170,7 +170,7 @@ impl<'tcx> InferCtxtBuilderExt<'tcx> for InferCtxtBuilder<'tcx> {\n     fn enter_canonical_trait_query<K, R>(\n         &mut self,\n         canonical_key: &Canonical<'tcx, K>,\n-        operation: impl FnOnce(&InferCtxt<'_, 'tcx>, &mut dyn TraitEngine<'tcx>, K) -> Fallible<R>,\n+        operation: impl FnOnce(&InferCtxt<'tcx>, &mut dyn TraitEngine<'tcx>, K) -> Fallible<R>,\n     ) -> Fallible<CanonicalizedQueryResponse<'tcx, R>>\n     where\n         K: TypeFoldable<'tcx>,"}, {"sha": "c02265ffdd7c29cb6248881abcb8c5dbc2f9aea5", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -272,7 +272,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n     /// user.\n     fn evaluate_predicates(\n         &self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         trait_did: DefId,\n         ty: Ty<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n@@ -877,7 +877,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n \n     pub fn clean_pred(\n         &self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         p: ty::Predicate<'tcx>,\n     ) -> ty::Predicate<'tcx> {\n         infcx.freshen(p)"}, {"sha": "81e1d64493e14f3e84e497865ad19e9a27b2e725", "filename": "compiler/rustc_trait_selection/src/traits/chalk_fulfill.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -28,7 +28,7 @@ impl FulfillmentContext<'_> {\n impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n     fn normalize_projection_type(\n         &mut self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         _param_env: ty::ParamEnv<'tcx>,\n         projection_ty: ty::ProjectionTy<'tcx>,\n         _cause: ObligationCause<'tcx>,\n@@ -38,7 +38,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n \n     fn register_predicate_obligation(\n         &mut self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         obligation: PredicateObligation<'tcx>,\n     ) {\n         assert!(!infcx.is_in_snapshot());\n@@ -49,7 +49,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         self.obligations.insert(obligation);\n     }\n \n-    fn select_all_or_error(&mut self, infcx: &InferCtxt<'_, 'tcx>) -> Vec<FulfillmentError<'tcx>> {\n+    fn select_all_or_error(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>> {\n         {\n             let errors = self.select_where_possible(infcx);\n \n@@ -71,10 +71,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n             .collect()\n     }\n \n-    fn select_where_possible(\n-        &mut self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n-    ) -> Vec<FulfillmentError<'tcx>> {\n+    fn select_where_possible(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>> {\n         assert!(!infcx.is_in_snapshot());\n \n         let mut errors = Vec::new();"}, {"sha": "c3144ff6b07efa2caaa36d0cd0fd3eaf71bb0481", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -167,7 +167,7 @@ fn overlap_within_probe<'cx, 'tcx>(\n     impl1_def_id: DefId,\n     impl2_def_id: DefId,\n     overlap_mode: OverlapMode,\n-    snapshot: &CombinedSnapshot<'_, 'tcx>,\n+    snapshot: &CombinedSnapshot<'tcx>,\n ) -> Option<OverlapResult<'tcx>> {\n     let infcx = selcx.infcx();\n \n@@ -327,8 +327,8 @@ fn negative_impl<'cx, 'tcx>(\n     })\n }\n \n-fn equate<'cx, 'tcx>(\n-    infcx: &InferCtxt<'cx, 'tcx>,\n+fn equate<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n     impl_env: ty::ParamEnv<'tcx>,\n     subject1: ImplSubject<'tcx>,\n     subject2: ImplSubject<'tcx>,\n@@ -379,8 +379,8 @@ fn negative_impl_exists<'cx, 'tcx>(\n }\n \n #[instrument(level = \"debug\", skip(infcx))]\n-fn resolve_negative_obligation<'cx, 'tcx>(\n-    infcx: InferCtxt<'cx, 'tcx>,\n+fn resolve_negative_obligation<'tcx>(\n+    infcx: InferCtxt<'tcx>,\n     o: &PredicateObligation<'tcx>,\n     body_def_id: DefId,\n ) -> bool {"}, {"sha": "8ea3d0fc917c285cf336a433d6f557b5d7debb2c", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -159,8 +159,8 @@ pub fn try_unify_abstract_consts<'tcx>(\n \n /// Check if a given constant can be evaluated.\n #[instrument(skip(infcx), level = \"debug\")]\n-pub fn is_const_evaluatable<'cx, 'tcx>(\n-    infcx: &InferCtxt<'cx, 'tcx>,\n+pub fn is_const_evaluatable<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n     uv: ty::UnevaluatedConst<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     span: Span,"}, {"sha": "e0c8deec91aff6cf6e3b7b2546bda8dc9f9a7df4", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -41,16 +41,16 @@ impl<'tcx> TraitEngineExt<'tcx> for dyn TraitEngine<'tcx> {\n /// Used if you want to have pleasant experience when dealing\n /// with obligations outside of hir or mir typeck.\n pub struct ObligationCtxt<'a, 'tcx> {\n-    pub infcx: &'a InferCtxt<'a, 'tcx>,\n+    pub infcx: &'a InferCtxt<'tcx>,\n     engine: RefCell<Box<dyn TraitEngine<'tcx>>>,\n }\n \n impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n-    pub fn new(infcx: &'a InferCtxt<'a, 'tcx>) -> Self {\n+    pub fn new(infcx: &'a InferCtxt<'tcx>) -> Self {\n         Self { infcx, engine: RefCell::new(<dyn TraitEngine<'_>>::new(infcx.tcx)) }\n     }\n \n-    pub fn new_in_snapshot(infcx: &'a InferCtxt<'a, 'tcx>) -> Self {\n+    pub fn new_in_snapshot(infcx: &'a InferCtxt<'tcx>) -> Self {\n         Self { infcx, engine: RefCell::new(<dyn TraitEngine<'_>>::new_in_snapshot(infcx.tcx)) }\n     }\n "}, {"sha": "e7270bd7c2d80cce26472af439db09fa97084b08", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -128,7 +128,7 @@ pub trait TypeErrCtxtExt<'tcx> {\n     );\n }\n \n-impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'_, 'tcx> {\n+impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n     /// Given some node representing a fn-like thing in the HIR map,\n     /// returns a span and `ArgKind` information that describes the\n     /// arguments it expects. This can be supplied to\n@@ -2515,7 +2515,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         pred: ty::PolyTraitRef<'tcx>,\n     ) -> bool {\n         struct ParamToVarFolder<'a, 'tcx> {\n-            infcx: &'a InferCtxt<'a, 'tcx>,\n+            infcx: &'a InferCtxt<'tcx>,\n             var_map: FxHashMap<Ty<'tcx>, Ty<'tcx>>,\n         }\n "}, {"sha": "980e85b45262dc96bb8a99c4b47ec04e4e5ca8e0", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -61,7 +61,7 @@ impl<'tcx, 'a> GeneratorData<'tcx, 'a> {\n     // meet an obligation\n     fn try_get_upvar_span<F>(\n         &self,\n-        infer_context: &InferCtxt<'a, 'tcx>,\n+        infer_context: &InferCtxt<'tcx>,\n         generator_did: DefId,\n         ty_matches: F,\n     ) -> Option<GeneratorInteriorOrUpvar>\n@@ -1586,7 +1586,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         expected: ty::PolyTraitRef<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         pub(crate) fn build_fn_sig_ty<'tcx>(\n-            infcx: &InferCtxt<'_, 'tcx>,\n+            infcx: &InferCtxt<'tcx>,\n             trait_ref: ty::PolyTraitRef<'tcx>,\n         ) -> Ty<'tcx> {\n             let inputs = trait_ref.skip_binder().substs.type_at(1);"}, {"sha": "6eb023956855606289c94b3505b3175a8a6ae6db", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -137,7 +137,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n     #[instrument(level = \"debug\", skip(self, infcx, param_env, cause))]\n     fn normalize_projection_type(\n         &mut self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         projection_ty: ty::ProjectionTy<'tcx>,\n         cause: ObligationCause<'tcx>,\n@@ -165,7 +165,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n \n     fn register_predicate_obligation(\n         &mut self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         obligation: PredicateObligation<'tcx>,\n     ) {\n         // this helps to reduce duplicate errors, as well as making\n@@ -182,7 +182,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n             .register_obligation(PendingPredicateObligation { obligation, stalled_on: vec![] });\n     }\n \n-    fn select_all_or_error(&mut self, infcx: &InferCtxt<'_, 'tcx>) -> Vec<FulfillmentError<'tcx>> {\n+    fn select_all_or_error(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>> {\n         {\n             let errors = self.select_where_possible(infcx);\n             if !errors.is_empty() {\n@@ -193,10 +193,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         self.predicates.to_errors(CodeAmbiguity).into_iter().map(to_fulfillment_error).collect()\n     }\n \n-    fn select_where_possible(\n-        &mut self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n-    ) -> Vec<FulfillmentError<'tcx>> {\n+    fn select_where_possible(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>> {\n         let selcx = SelectionContext::new(infcx);\n         self.select(selcx)\n     }"}, {"sha": "5153ce11ca07b7b35b71cfd2a8eb479b594fc14b", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -140,8 +140,8 @@ pub fn predicates_for_generics<'tcx>(\n /// `bound` or is not known to meet bound (note that this is\n /// conservative towards *no impl*, which is the opposite of the\n /// `evaluate` methods).\n-pub fn type_known_to_meet_bound_modulo_regions<'a, 'tcx>(\n-    infcx: &InferCtxt<'a, 'tcx>,\n+pub fn type_known_to_meet_bound_modulo_regions<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     ty: Ty<'tcx>,\n     def_id: DefId,\n@@ -393,8 +393,8 @@ pub fn normalize_param_env_or_error<'tcx>(\n }\n \n /// Normalize a type and process all resulting obligations, returning any errors\n-pub fn fully_normalize<'a, 'tcx, T>(\n-    infcx: &InferCtxt<'a, 'tcx>,\n+pub fn fully_normalize<'tcx, T>(\n+    infcx: &InferCtxt<'tcx>,\n     cause: ObligationCause<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     value: T,\n@@ -429,8 +429,8 @@ where\n \n /// Process an obligation (and any nested obligations that come from it) to\n /// completion, returning any errors\n-pub fn fully_solve_obligation<'a, 'tcx>(\n-    infcx: &InferCtxt<'a, 'tcx>,\n+pub fn fully_solve_obligation<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n     obligation: PredicateObligation<'tcx>,\n ) -> Vec<FulfillmentError<'tcx>> {\n     let mut engine = <dyn TraitEngine<'tcx>>::new(infcx.tcx);\n@@ -440,8 +440,8 @@ pub fn fully_solve_obligation<'a, 'tcx>(\n \n /// Process a set of obligations (and any nested obligations that come from them)\n /// to completion\n-pub fn fully_solve_obligations<'a, 'tcx>(\n-    infcx: &InferCtxt<'a, 'tcx>,\n+pub fn fully_solve_obligations<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n     obligations: impl IntoIterator<Item = PredicateObligation<'tcx>>,\n ) -> Vec<FulfillmentError<'tcx>> {\n     let mut engine = <dyn TraitEngine<'tcx>>::new(infcx.tcx);\n@@ -452,8 +452,8 @@ pub fn fully_solve_obligations<'a, 'tcx>(\n /// Process a bound (and any nested obligations that come from it) to completion.\n /// This is a convenience function for traits that have no generic arguments, such\n /// as auto traits, and builtin traits like Copy or Sized.\n-pub fn fully_solve_bound<'a, 'tcx>(\n-    infcx: &InferCtxt<'a, 'tcx>,\n+pub fn fully_solve_bound<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n     cause: ObligationCause<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     ty: Ty<'tcx>,"}, {"sha": "108dae092cfe7f922fb1eeda952d5bded82d32f3", "filename": "compiler/rustc_trait_selection/src/traits/outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -26,7 +26,7 @@ pub trait InferCtxtExt<'a, 'tcx> {\n     ) -> Bounds<'a, 'tcx>;\n }\n \n-impl<'a, 'cx, 'tcx: 'a> InferCtxtExt<'a, 'tcx> for InferCtxt<'cx, 'tcx> {\n+impl<'a, 'tcx: 'a> InferCtxtExt<'a, 'tcx> for InferCtxt<'tcx> {\n     /// Implied bounds are region relationships that we deduce\n     /// automatically. The idea is that (e.g.) a caller must check that a\n     /// function's argument types are well-formed immediately before"}, {"sha": "4a2fde2cb4b06f3f9d269514d4c73e3e6ebb8f46", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -663,7 +663,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n }\n \n pub struct BoundVarReplacer<'me, 'tcx> {\n-    infcx: &'me InferCtxt<'me, 'tcx>,\n+    infcx: &'me InferCtxt<'tcx>,\n     // These three maps track the bound variable that were replaced by placeholders. It might be\n     // nice to remove these since we already have the `kind` in the placeholder; we really just need\n     // the `var` (but we *could* bring that into scope if we were to track them as we pass them).\n@@ -691,7 +691,7 @@ pub struct BoundVarReplacer<'me, 'tcx> {\n /// FIXME(@lcnr): We may even consider experimenting with eagerly replacing bound vars during\n /// normalization as well, at which point this function will be unnecessary and can be removed.\n pub fn with_replaced_escaping_bound_vars<'a, 'tcx, T: TypeFoldable<'tcx>, R: TypeFoldable<'tcx>>(\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n+    infcx: &'a InferCtxt<'tcx>,\n     universe_indices: &'a mut Vec<Option<ty::UniverseIndex>>,\n     value: T,\n     f: impl FnOnce(T) -> R,\n@@ -717,7 +717,7 @@ impl<'me, 'tcx> BoundVarReplacer<'me, 'tcx> {\n     /// Returns `Some` if we *were* able to replace bound vars. If there are any bound vars that\n     /// use a binding level above `universe_indices.len()`, we fail.\n     pub fn replace_bound_vars<T: TypeFoldable<'tcx>>(\n-        infcx: &'me InferCtxt<'me, 'tcx>,\n+        infcx: &'me InferCtxt<'tcx>,\n         universe_indices: &'me mut Vec<Option<ty::UniverseIndex>>,\n         value: T,\n     ) -> (\n@@ -837,7 +837,7 @@ impl<'tcx> TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n \n // The inverse of `BoundVarReplacer`: replaces placeholders with the bound vars from which they came.\n pub struct PlaceholderReplacer<'me, 'tcx> {\n-    infcx: &'me InferCtxt<'me, 'tcx>,\n+    infcx: &'me InferCtxt<'tcx>,\n     mapped_regions: BTreeMap<ty::PlaceholderRegion, ty::BoundRegion>,\n     mapped_types: BTreeMap<ty::PlaceholderType, ty::BoundTy>,\n     mapped_consts: BTreeMap<ty::PlaceholderConst<'tcx>, ty::BoundVar>,\n@@ -847,7 +847,7 @@ pub struct PlaceholderReplacer<'me, 'tcx> {\n \n impl<'me, 'tcx> PlaceholderReplacer<'me, 'tcx> {\n     pub fn replace_placeholders<T: TypeFoldable<'tcx>>(\n-        infcx: &'me InferCtxt<'me, 'tcx>,\n+        infcx: &'me InferCtxt<'tcx>,\n         mapped_regions: BTreeMap<ty::PlaceholderRegion, ty::BoundRegion>,\n         mapped_types: BTreeMap<ty::PlaceholderType, ty::BoundTy>,\n         mapped_consts: BTreeMap<ty::PlaceholderConst<'tcx>, ty::BoundVar>,"}, {"sha": "c84f128ddf78e09310705f0027ab0fb0f26e5d86", "filename": "compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -31,7 +31,7 @@ pub trait InferCtxtExt<'tcx> {\n     ) -> EvaluationResult;\n }\n \n-impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n+impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n     /// Evaluates whether the predicate can be satisfied (by any means)\n     /// in the given `ParamEnv`.\n     fn predicate_may_hold(&self, obligation: &PredicateObligation<'tcx>) -> bool {"}, {"sha": "af1029521726a41ccad1ff821ca19e00350c13bd", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -154,7 +154,7 @@ impl<'tcx> TypeVisitor<'tcx> for MaxEscapingBoundVarVisitor {\n }\n \n struct QueryNormalizer<'cx, 'tcx> {\n-    infcx: &'cx InferCtxt<'cx, 'tcx>,\n+    infcx: &'cx InferCtxt<'tcx>,\n     cause: &'cx ObligationCause<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     obligations: Vec<PredicateObligation<'tcx>>,"}, {"sha": "6bf3ed0d0e29a4305957bfcbea9cf913aa48d0f4", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/custom.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -16,7 +16,7 @@ pub struct CustomTypeOp<F, G> {\n impl<F, G> CustomTypeOp<F, G> {\n     pub fn new<'tcx, R>(closure: F, description: G) -> Self\n     where\n-        F: FnOnce(&InferCtxt<'_, 'tcx>) -> Fallible<InferOk<'tcx, R>>,\n+        F: FnOnce(&InferCtxt<'tcx>) -> Fallible<InferOk<'tcx, R>>,\n         G: Fn() -> String,\n     {\n         CustomTypeOp { closure, description }\n@@ -25,7 +25,7 @@ impl<F, G> CustomTypeOp<F, G> {\n \n impl<'tcx, F, R: fmt::Debug, G> super::TypeOp<'tcx> for CustomTypeOp<F, G>\n where\n-    F: for<'a, 'cx> FnOnce(&'a InferCtxt<'cx, 'tcx>) -> Fallible<InferOk<'tcx, R>>,\n+    F: for<'a, 'cx> FnOnce(&'a InferCtxt<'tcx>) -> Fallible<InferOk<'tcx, R>>,\n     G: Fn() -> String,\n {\n     type Output = R;\n@@ -36,7 +36,7 @@ where\n     /// Processes the operation and all resulting obligations,\n     /// returning the final result along with any region constraints\n     /// (they will be given over to the NLL region solver).\n-    fn fully_perform(self, infcx: &InferCtxt<'_, 'tcx>) -> Fallible<TypeOpOutput<'tcx, Self>> {\n+    fn fully_perform(self, infcx: &InferCtxt<'tcx>) -> Fallible<TypeOpOutput<'tcx, Self>> {\n         if cfg!(debug_assertions) {\n             info!(\"fully_perform({:?})\", self);\n         }\n@@ -57,7 +57,7 @@ where\n /// Executes `op` and then scrapes out all the \"old style\" region\n /// constraints that result, creating query-region-constraints.\n pub fn scrape_region_constraints<'tcx, Op: super::TypeOp<'tcx, Output = R>, R>(\n-    infcx: &InferCtxt<'_, 'tcx>,\n+    infcx: &InferCtxt<'tcx>,\n     op: impl FnOnce() -> Fallible<InferOk<'tcx, R>>,\n ) -> Fallible<(TypeOpOutput<'tcx, Op>, RegionConstraintData<'tcx>)> {\n     // During NLL, we expect that nobody will register region"}, {"sha": "29ae8ae6b6e555edee8244eb73091a0240c415d1", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -32,7 +32,7 @@ pub trait TypeOp<'tcx>: Sized + fmt::Debug {\n     /// Processes the operation and all resulting obligations,\n     /// returning the final result along with any region constraints\n     /// (they will be given over to the NLL region solver).\n-    fn fully_perform(self, infcx: &InferCtxt<'_, 'tcx>) -> Fallible<TypeOpOutput<'tcx, Self>>;\n+    fn fully_perform(self, infcx: &InferCtxt<'tcx>) -> Fallible<TypeOpOutput<'tcx, Self>>;\n }\n \n /// The output from performing a type op\n@@ -78,7 +78,7 @@ pub trait QueryTypeOp<'tcx>: fmt::Debug + Copy + TypeFoldable<'tcx> + 'tcx {\n \n     fn fully_perform_into(\n         query_key: ParamEnvAnd<'tcx, Self>,\n-        infcx: &InferCtxt<'_, 'tcx>,\n+        infcx: &InferCtxt<'tcx>,\n         output_query_region_constraints: &mut QueryRegionConstraints<'tcx>,\n     ) -> Fallible<(\n         Self::QueryResponse,\n@@ -120,7 +120,7 @@ where\n     type Output = Q::QueryResponse;\n     type ErrorInfo = Canonical<'tcx, ParamEnvAnd<'tcx, Q>>;\n \n-    fn fully_perform(self, infcx: &InferCtxt<'_, 'tcx>) -> Fallible<TypeOpOutput<'tcx, Self>> {\n+    fn fully_perform(self, infcx: &InferCtxt<'tcx>) -> Fallible<TypeOpOutput<'tcx, Self>> {\n         let mut region_constraints = QueryRegionConstraints::default();\n         let (output, error_info, mut obligations, _) =\n             Q::fully_perform_into(self, infcx, &mut region_constraints)?;"}, {"sha": "8cf500a466bf276f4739fd6accdbbed4a22a7f52", "filename": "compiler/rustc_trait_selection/src/traits/relationships.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::ty::{self, ToPredicate};\n \n pub(crate) fn update<'tcx, T>(\n     engine: &mut T,\n-    infcx: &InferCtxt<'_, 'tcx>,\n+    infcx: &InferCtxt<'tcx>,\n     obligation: &PredicateObligation<'tcx>,\n ) where\n     T: TraitEngine<'tcx>,"}, {"sha": "ae811fbac027b0c9103a809b087649e81107441b", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -93,7 +93,7 @@ impl IntercrateAmbiguityCause {\n }\n \n pub struct SelectionContext<'cx, 'tcx> {\n-    infcx: &'cx InferCtxt<'cx, 'tcx>,\n+    infcx: &'cx InferCtxt<'tcx>,\n \n     /// Freshener used specifically for entries on the obligation\n     /// stack. This ensures that all entries on the stack at one time\n@@ -214,7 +214,7 @@ enum BuiltinImplConditions<'tcx> {\n }\n \n impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n-    pub fn new(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {\n+    pub fn new(infcx: &'cx InferCtxt<'tcx>) -> SelectionContext<'cx, 'tcx> {\n         SelectionContext {\n             infcx,\n             freshener: infcx.freshener_keep_static(),\n@@ -224,12 +224,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n     }\n \n-    pub fn intercrate(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {\n+    pub fn intercrate(infcx: &'cx InferCtxt<'tcx>) -> SelectionContext<'cx, 'tcx> {\n         SelectionContext { intercrate: true, ..SelectionContext::new(infcx) }\n     }\n \n     pub fn with_query_mode(\n-        infcx: &'cx InferCtxt<'cx, 'tcx>,\n+        infcx: &'cx InferCtxt<'tcx>,\n         query_mode: TraitQueryMode,\n     ) -> SelectionContext<'cx, 'tcx> {\n         debug!(?query_mode, \"with_query_mode\");\n@@ -253,7 +253,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         self.intercrate_ambiguity_causes.take().unwrap_or_default()\n     }\n \n-    pub fn infcx(&self) -> &'cx InferCtxt<'cx, 'tcx> {\n+    pub fn infcx(&self) -> &'cx InferCtxt<'tcx> {\n         self.infcx\n     }\n "}, {"sha": "bfc3b760050fb66b00fdfc27a5468552597a474e", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -73,8 +73,8 @@ pub struct OverlapError {\n /// through associated type projection. We deal with such cases by using\n /// *fulfillment* to relate the two impls, requiring that all projections are\n /// resolved.\n-pub fn translate_substs<'a, 'tcx>(\n-    infcx: &InferCtxt<'a, 'tcx>,\n+pub fn translate_substs<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     source_impl: DefId,\n     source_substs: SubstsRef<'tcx>,\n@@ -176,8 +176,8 @@ pub(super) fn specializes(tcx: TyCtxt<'_>, (impl1_def_id, impl2_def_id): (DefId,\n /// generics of `target_impl`, including both those needed to unify with\n /// `source_trait_ref` and those whose identity is determined via a where\n /// clause in the impl.\n-fn fulfill_implication<'a, 'tcx>(\n-    infcx: &InferCtxt<'a, 'tcx>,\n+fn fulfill_implication<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     source_trait_ref: ty::TraitRef<'tcx>,\n     target_impl: DefId,"}, {"sha": "b6cfff9eb0a955619b82abe07458540fe4aa4334", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -68,7 +68,7 @@ pub fn search_for_adt_const_param_violation<'tcx>(\n /// Note that this does *not* recursively check if the substructure of `adt_ty`\n /// implements the traits.\n fn type_marked_structural<'tcx>(\n-    infcx: &InferCtxt<'_, 'tcx>,\n+    infcx: &InferCtxt<'tcx>,\n     adt_ty: Ty<'tcx>,\n     cause: ObligationCause<'tcx>,\n ) -> bool {"}, {"sha": "b1fae164d8521decf6649661ab5c2dc93ac49dac", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -14,8 +14,8 @@ use std::iter;\n /// inference variable, returns `None`, because we are not able to\n /// make any progress at all. This is to prevent \"livelock\" where we\n /// say \"$0 is WF if $0 is WF\".\n-pub fn obligations<'a, 'tcx>(\n-    infcx: &InferCtxt<'a, 'tcx>,\n+pub fn obligations<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body_id: hir::HirId,\n     recursion_depth: usize,\n@@ -79,8 +79,8 @@ pub fn obligations<'a, 'tcx>(\n /// well-formed.  For example, if there is a trait `Set` defined like\n /// `trait Set<K:Eq>`, then the trait reference `Foo: Set<Bar>` is WF\n /// if `Bar: Eq`.\n-pub fn trait_obligations<'a, 'tcx>(\n-    infcx: &InferCtxt<'a, 'tcx>,\n+pub fn trait_obligations<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body_id: hir::HirId,\n     trait_pred: &ty::TraitPredicate<'tcx>,\n@@ -102,8 +102,8 @@ pub fn trait_obligations<'a, 'tcx>(\n }\n \n #[instrument(skip(infcx), ret)]\n-pub fn predicate_obligations<'a, 'tcx>(\n-    infcx: &InferCtxt<'a, 'tcx>,\n+pub fn predicate_obligations<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body_id: hir::HirId,\n     predicate: ty::Predicate<'tcx>,\n@@ -275,7 +275,7 @@ impl<'tcx> WfPredicates<'tcx> {\n         traits::ObligationCause::new(self.span, self.body_id, code)\n     }\n \n-    fn normalize(self, infcx: &InferCtxt<'_, 'tcx>) -> Vec<traits::PredicateObligation<'tcx>> {\n+    fn normalize(self, infcx: &InferCtxt<'tcx>) -> Vec<traits::PredicateObligation<'tcx>> {\n         let cause = self.cause(traits::WellFormed(None));\n         let param_env = self.param_env;\n         let mut obligations = Vec::with_capacity(self.out.len());"}, {"sha": "7d36b9558d50b2a974b5432c4aa1f42e00c99d72", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -35,7 +35,7 @@ fn implied_outlives_bounds<'tcx>(\n }\n \n fn compute_implied_outlives_bounds<'tcx>(\n-    infcx: &InferCtxt<'_, 'tcx>,\n+    infcx: &InferCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     ty: Ty<'tcx>,\n ) -> Fallible<Vec<OutlivesBound<'tcx>>> {"}, {"sha": "bca7458ed332b2efef8a257108acfa6784bc0b78", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -51,7 +51,7 @@ fn type_op_ascribe_user_type<'tcx>(\n /// this query can be re-run to better track the span of the obligation cause, and improve the error\n /// message. Do not call directly unless you're in that very specific context.\n pub fn type_op_ascribe_user_type_with_span<'a, 'tcx: 'a>(\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n+    infcx: &'a InferCtxt<'tcx>,\n     fulfill_cx: &'a mut dyn TraitEngine<'tcx>,\n     key: ParamEnvAnd<'tcx, AscribeUserType<'tcx>>,\n     span: Option<Span>,\n@@ -68,7 +68,7 @@ pub fn type_op_ascribe_user_type_with_span<'a, 'tcx: 'a>(\n }\n \n struct AscribeUserTypeCx<'me, 'tcx> {\n-    infcx: &'me InferCtxt<'me, 'tcx>,\n+    infcx: &'me InferCtxt<'tcx>,\n     param_env: ParamEnv<'tcx>,\n     span: Span,\n     fulfill_cx: &'me mut dyn TraitEngine<'tcx>,\n@@ -210,7 +210,7 @@ fn type_op_eq<'tcx>(\n }\n \n fn type_op_normalize<'tcx, T>(\n-    infcx: &InferCtxt<'_, 'tcx>,\n+    infcx: &InferCtxt<'tcx>,\n     fulfill_cx: &mut dyn TraitEngine<'tcx>,\n     key: ParamEnvAnd<'tcx, Normalize<T>>,\n ) -> Fallible<T>\n@@ -285,7 +285,7 @@ fn type_op_prove_predicate<'tcx>(\n /// this query can be re-run to better track the span of the obligation cause, and improve the error\n /// message. Do not call directly unless you're in that very specific context.\n pub fn type_op_prove_predicate_with_cause<'a, 'tcx: 'a>(\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n+    infcx: &'a InferCtxt<'tcx>,\n     fulfill_cx: &'a mut dyn TraitEngine<'tcx>,\n     key: ParamEnvAnd<'tcx, ProvePredicate<'tcx>>,\n     cause: ObligationCause<'tcx>,"}, {"sha": "f7cc94e53146afaf35e3654b33ed5312f5bd4cf9", "filename": "compiler/rustc_transmute/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349415d1c67df81e18519a7d2c6375901ec31b3d/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flib.rs?ref=349415d1c67df81e18519a7d2c6375901ec31b3d", "patch": "@@ -80,11 +80,11 @@ mod rustc {\n     }\n \n     pub struct TransmuteTypeEnv<'cx, 'tcx> {\n-        infcx: &'cx InferCtxt<'cx, 'tcx>,\n+        infcx: &'cx InferCtxt<'tcx>,\n     }\n \n     impl<'cx, 'tcx> TransmuteTypeEnv<'cx, 'tcx> {\n-        pub fn new(infcx: &'cx InferCtxt<'cx, 'tcx>) -> Self {\n+        pub fn new(infcx: &'cx InferCtxt<'tcx>) -> Self {\n             Self { infcx }\n         }\n "}]}