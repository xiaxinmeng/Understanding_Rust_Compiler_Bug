{"sha": "9624d2b08e87995978899f236db1857e85097b37", "node_id": "C_kwDOAAsO6NoAKDk2MjRkMmIwOGU4Nzk5NTk3ODg5OWYyMzZkYjE4NTdlODUwOTdiMzc", "commit": {"author": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-04-19T07:29:28Z"}, "committer": {"name": "Ezra Shaw", "email": "ezrashawdev@gmail.com", "date": "2023-05-05T10:40:05Z"}, "message": "tweak \"make mut\" spans (No. 2)", "tree": {"sha": "ba96cf008147e356754d158fd99d10cf9712dcf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba96cf008147e356754d158fd99d10cf9712dcf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9624d2b08e87995978899f236db1857e85097b37", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE/c15HB+s7bjrqpLmUVbPWEUVCw0FAmRU3QUACgkQUVbPWEUV\nCw1Z2A/9GgVbgGj5qo6ovMiJNabjmoojZG3SnRbBk2qEqFPC8mzoU/7oBqkObmHs\nI6h9mxxOwOvnzMPDZxY4D1BveStXf4nHUdRnSlBV618gXUEclINIOpXUULmge4eH\nuCOekvx1mbGuIvj08QE5LVF2SBNcee+MrjVE+LwCvjyPSrZjM4rUvJXCwnW8mQhj\nCc8rZ4KbCLFawibYoK+h3XefIW5x+tXYN9S+eHaYX74lXK73oVEZQfgDG7kuI7V4\npCc+cSL5isFpOy4Mg0nxQAaK8UdXfp9MEDlqGwZWl5d0gLMU0q6ijwscLyR2l9P4\nhYgzn7G0SQQnbt/QV6b8Uh6d1BiLnFA5uWA5KROIsUOKMW6D8qTWFOxIQXqMoQDR\ncOGhB2Hn3iFjQcnymkgE+wuXv3llfKxJMlBAKECgL2+XGiLFsfExmGby6Nz0sQFQ\n28ZgaTNK52aD4dUs1/3bchCTB2VC8eJwpHFgahy4TUNlY+q//CJG68Iv9QgU6iyp\nB0LlmknREFAT3vMvb1fXnbXgc3tlowmvlsLivAoos2pTS5FHAwzYBDl8OcSwTt4T\ngfV2R1aDL+2K3Ag9rs5qF51qAWr8ld5YkEtBYW4LoynAw1pmL2cSmVifWs6ZwY6G\nHF2GLMK7/4ie+WChduLoZ/uBo4JNblpgxVJhW7hu78N/UkMwB/Q=\n=G5FC\n-----END PGP SIGNATURE-----", "payload": "tree ba96cf008147e356754d158fd99d10cf9712dcf1\nparent fd8aa5ec7d26c8e08d13b38213391c757045e51d\nauthor Ezra Shaw <ezrasure@outlook.com> 1681889368 +1200\ncommitter Ezra Shaw <ezrashawdev@gmail.com> 1683283205 +1200\n\ntweak \"make mut\" spans (No. 2)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9624d2b08e87995978899f236db1857e85097b37", "html_url": "https://github.com/rust-lang/rust/commit/9624d2b08e87995978899f236db1857e85097b37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9624d2b08e87995978899f236db1857e85097b37/comments", "author": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd8aa5ec7d26c8e08d13b38213391c757045e51d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd8aa5ec7d26c8e08d13b38213391c757045e51d", "html_url": "https://github.com/rust-lang/rust/commit/fd8aa5ec7d26c8e08d13b38213391c757045e51d"}], "stats": {"total": 66, "additions": 36, "deletions": 30}, "files": [{"sha": "27f700ebbdaf82eae46c4fe62ff9e33db62123db", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9624d2b08e87995978899f236db1857e85097b37/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9624d2b08e87995978899f236db1857e85097b37/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=9624d2b08e87995978899f236db1857e85097b37", "patch": "@@ -1241,35 +1241,41 @@ fn suggest_ampmut<'tcx>(\n         }\n     }\n \n-    let (suggestibility, highlight_span) = match opt_ty_info {\n+    let (binding_exists, span) = match opt_ty_info {\n         // if this is a variable binding with an explicit type,\n-        // try to highlight that for the suggestion.\n+        // then we will suggest changing it to be mutable.\n+        // this is `Applicability::MachineApplicable`.\n         Some(ty_span) => (true, ty_span),\n \n-        // otherwise, just highlight the span associated with\n-        // the (MIR) LocalDecl.\n+        // otherwise, we'll suggest *adding* an annotated type, we'll suggest\n+        // the RHS's type for that.\n+        // this is `Applicability::HasPlaceholders`.\n         None => (false, local_decl.source_info.span),\n     };\n \n-    if let Ok(src) = tcx.sess.source_map().span_to_snippet(highlight_span)\n-        && let (true, Some(ws_pos)) = (src.starts_with(\"&'\"), src.find(char::is_whitespace))\n+    // if the binding already exists and is a reference with a explicit\n+    // lifetime, then we can suggest adding ` mut`. this is special-cased from\n+    // the path without a explicit lifetime.\n+    if let Ok(src) = tcx.sess.source_map().span_to_snippet(span)\n+        && src.starts_with(\"&'\")\n+        // note that `&     'a T` is invalid so this is correct.\n+        && let Some(ws_pos) = src.find(char::is_whitespace)\n     {\n-        let lt_name = &src[1..ws_pos];\n-        let ty = &src[ws_pos..];\n-        return (true, highlight_span, format!(\"&{lt_name} mut{ty}\"));\n+        let span = span.with_lo(span.lo() + BytePos(ws_pos as u32)).shrink_to_lo();\n+        (true, span, \" mut\".to_owned())\n+    } else {\n+        let ty_mut = local_decl.ty.builtin_deref(true).unwrap();\n+        assert_eq!(ty_mut.mutbl, hir::Mutability::Not);\n+        (\n+            binding_exists,\n+            span,\n+            if local_decl.ty.is_ref() {\n+                format!(\"&mut {}\", ty_mut.ty)\n+            } else {\n+                format!(\"*mut {}\", ty_mut.ty)\n+            },\n+        )\n     }\n-\n-    let ty_mut = local_decl.ty.builtin_deref(true).unwrap();\n-    assert_eq!(ty_mut.mutbl, hir::Mutability::Not);\n-    (\n-        suggestibility,\n-        highlight_span,\n-        if local_decl.ty.is_ref() {\n-            format!(\"&mut {}\", ty_mut.ty)\n-        } else {\n-            format!(\"*mut {}\", ty_mut.ty)\n-        },\n-    )\n }\n \n fn is_closure_or_generator(ty: Ty<'_>) -> bool {"}, {"sha": "97f0ec60603c534b1cbdb99370410529f675293c", "filename": "tests/ui/did_you_mean/issue-39544.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9624d2b08e87995978899f236db1857e85097b37/tests%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9624d2b08e87995978899f236db1857e85097b37/tests%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdid_you_mean%2Fissue-39544.stderr?ref=9624d2b08e87995978899f236db1857e85097b37", "patch": "@@ -73,7 +73,7 @@ LL |         let _ = &mut self.x;\n help: consider changing this to be a mutable reference\n    |\n LL |     fn foo3<'a>(self: &'a mut Self, other: &Z) {\n-   |                       ~~~~~~~~~~~~\n+   |                           +++\n \n error[E0596]: cannot borrow `other.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:31:17"}, {"sha": "bedea3890a32e73b07843aae5964b4b5e3bbbfa0", "filename": "tests/ui/issues/issue-61623.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9624d2b08e87995978899f236db1857e85097b37/tests%2Fui%2Fissues%2Fissue-61623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9624d2b08e87995978899f236db1857e85097b37/tests%2Fui%2Fissues%2Fissue-61623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-61623.stderr?ref=9624d2b08e87995978899f236db1857e85097b37", "patch": "@@ -7,7 +7,7 @@ LL |     f2(|| x.0, f1(x.1))\n help: consider changing this to be a mutable reference\n    |\n LL | fn f3<'a>(x: &'a mut ((), &'a mut ())) {\n-   |              ~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                  +++\n \n error: aborting due to previous error\n "}, {"sha": "e640d40913e375d60d4519503b3836bd37158d8a", "filename": "tests/ui/span/borrowck-borrow-overloaded-auto-deref-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9624d2b08e87995978899f236db1857e85097b37/tests%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9624d2b08e87995978899f236db1857e85097b37/tests%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr?ref=9624d2b08e87995978899f236db1857e85097b37", "patch": "@@ -50,7 +50,7 @@ LL |     x.y = 3;\n help: consider changing this to be a mutable reference\n    |\n LL | fn assign_field2<'a>(x: &'a mut Own<Point>) {\n-   |                         ~~~~~~~~~~~~~~~~~~\n+   |                             +++\n \n error[E0499]: cannot borrow `*x` as mutable more than once at a time\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:101:5\n@@ -104,7 +104,7 @@ LL |     *x.y_mut() = 3;\n help: consider changing this to be a mutable reference\n    |\n LL | fn assign_method2<'a>(x: &'a mut Own<Point>) {\n-   |                          ~~~~~~~~~~~~~~~~~~\n+   |                              +++\n \n error: aborting due to 10 previous errors\n "}, {"sha": "dbd52dc2d38df44b1f26403e0b80798d204be3b7", "filename": "tests/ui/span/borrowck-borrow-overloaded-deref-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9624d2b08e87995978899f236db1857e85097b37/tests%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9624d2b08e87995978899f236db1857e85097b37/tests%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr?ref=9624d2b08e87995978899f236db1857e85097b37", "patch": "@@ -18,7 +18,7 @@ LL |     &mut **x\n help: consider changing this to be a mutable reference\n    |\n LL | fn deref_extend_mut1<'a>(x: &'a mut Own<isize>) -> &'a mut isize {\n-   |                             ~~~~~~~~~~~~~~~~~~\n+   |                                 +++\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:49:6\n@@ -40,7 +40,7 @@ LL |     **x = 3;\n help: consider changing this to be a mutable reference\n    |\n LL | fn assign2<'a>(x: &'a mut Own<isize>) {\n-   |                   ~~~~~~~~~~~~~~~~~~\n+   |                       +++\n \n error: aborting due to 4 previous errors\n "}, {"sha": "9b82012291cff6a218c0abdef676348a8e71a3cc", "filename": "tests/ui/span/mut-arg-hint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9624d2b08e87995978899f236db1857e85097b37/tests%2Fui%2Fspan%2Fmut-arg-hint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9624d2b08e87995978899f236db1857e85097b37/tests%2Fui%2Fspan%2Fmut-arg-hint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fmut-arg-hint.stderr?ref=9624d2b08e87995978899f236db1857e85097b37", "patch": "@@ -18,7 +18,7 @@ LL |     a.push_str(\"foo\");\n help: consider changing this to be a mutable reference\n    |\n LL | pub fn foo<'a>(mut a: &'a mut String) {\n-   |                       ~~~~~~~~~~~~~~\n+   |                           +++\n \n error[E0596]: cannot borrow `*a` as mutable, as it is behind a `&` reference\n   --> $DIR/mut-arg-hint.rs:15:9"}, {"sha": "c054ddb893d5c3e978d8361157e43c8f31df140e", "filename": "tests/ui/trivial-bounds/trivial-bounds-inconsistent-copy-reborrow.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9624d2b08e87995978899f236db1857e85097b37/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy-reborrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9624d2b08e87995978899f236db1857e85097b37/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy-reborrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy-reborrow.stderr?ref=9624d2b08e87995978899f236db1857e85097b37", "patch": "@@ -7,7 +7,7 @@ LL |     *t\n help: consider changing this to be a mutable reference\n    |\n LL | fn reborrow_mut<'a>(t: &'a mut &'a mut i32) -> &'a mut i32 where &'a mut i32: Copy {\n-   |                        ~~~~~~~~~~~~~~~~~~~\n+   |                            +++\n \n error[E0596]: cannot borrow `**t` as mutable, as it is behind a `&` reference\n   --> $DIR/trivial-bounds-inconsistent-copy-reborrow.rs:10:6\n@@ -18,7 +18,7 @@ LL |     {*t}\n help: consider changing this to be a mutable reference\n    |\n LL | fn copy_reborrow_mut<'a>(t: &'a mut &'a mut i32) -> &'a mut i32 where &'a mut i32: Copy {\n-   |                             ~~~~~~~~~~~~~~~~~~~\n+   |                                 +++\n \n error: aborting due to 2 previous errors\n "}]}