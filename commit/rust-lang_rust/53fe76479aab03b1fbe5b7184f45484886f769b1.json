{"sha": "53fe76479aab03b1fbe5b7184f45484886f769b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZmU3NjQ3OWFhYjAzYjFmYmU1YjcxODRmNDU0ODQ4ODZmNzY5YjE=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-09-04T23:02:31Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-09-04T23:02:31Z"}, "message": "Assume non-git LLVM is fresh if the stamp file exists\n\nRustbuild usually writes the LLVM submodule commit in a stamp file, so\nwe can avoid rebuilding it unnecessarily. However, for builds from a\nsource tarball (non-git), we were assuming a rebuild is always needed.\nThis can cause a lot of extra work if any environment like `CFLAGS`\nchanged between steps like build and install, which are often separate\nin distro builds.\n\nNow we also write an empty stamp file if the git commit is unknown, and\nits presence is trusted to indicate that no rebuild is needed. An info\nmessage reports that this is happening, along with the stamp file path\nthat can be deleted to force a rebuild anyway.", "tree": {"sha": "404e49596a04a5868253de602d4d70f0d0196fa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/404e49596a04a5868253de602d4d70f0d0196fa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53fe76479aab03b1fbe5b7184f45484886f769b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53fe76479aab03b1fbe5b7184f45484886f769b1", "html_url": "https://github.com/rust-lang/rust/commit/53fe76479aab03b1fbe5b7184f45484886f769b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53fe76479aab03b1fbe5b7184f45484886f769b1/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6e9c76c59e3c10acd63ca9ec157a8894ea1a068", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e9c76c59e3c10acd63ca9ec157a8894ea1a068", "html_url": "https://github.com/rust-lang/rust/commit/c6e9c76c59e3c10acd63ca9ec157a8894ea1a068"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "7bf9ea2688f4c5a872d3f6f0b3f1ac645a9a7811", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/53fe76479aab03b1fbe5b7184f45484886f769b1/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53fe76479aab03b1fbe5b7184f45484886f769b1/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=53fe76479aab03b1fbe5b7184f45484886f769b1", "patch": "@@ -81,26 +81,29 @@ impl Step for Llvm {\n             (info, \"src/llvm-project/llvm\", builder.llvm_out(target), dir.join(\"bin\"))\n         };\n \n-        if !llvm_info.is_git() {\n-            println!(\n-                \"git could not determine the LLVM submodule commit hash. \\\n-                Assuming that an LLVM build is necessary.\",\n-            );\n-        }\n-\n         let build_llvm_config = llvm_config_ret_dir\n             .join(exe(\"llvm-config\", &*builder.config.build));\n         let done_stamp = out_dir.join(\"llvm-finished-building\");\n \n-        if let Some(llvm_commit) = llvm_info.sha() {\n-            if done_stamp.exists() {\n+        if done_stamp.exists() {\n+            if let Some(llvm_commit) = llvm_info.sha() {\n                 let done_contents = t!(fs::read(&done_stamp));\n \n                 // If LLVM was already built previously and the submodule's commit didn't change\n                 // from the previous build, then no action is required.\n                 if done_contents == llvm_commit.as_bytes() {\n-                    return build_llvm_config\n+                    return build_llvm_config;\n                 }\n+            } else {\n+                builder.info(\n+                    \"Could not determine the LLVM submodule commit hash. \\\n+                     Assuming that an LLVM rebuild is not necessary.\",\n+                );\n+                builder.info(&format!(\n+                    \"To force LLVM to rebuild, remove the file `{}`\",\n+                    done_stamp.display()\n+                ));\n+                return build_llvm_config;\n             }\n         }\n \n@@ -303,9 +306,7 @@ impl Step for Llvm {\n \n         cfg.build();\n \n-        if let Some(llvm_commit) = llvm_info.sha() {\n-            t!(fs::write(&done_stamp, llvm_commit));\n-        }\n+        t!(fs::write(&done_stamp, llvm_info.sha().unwrap_or(\"\")));\n \n         build_llvm_config\n     }"}]}