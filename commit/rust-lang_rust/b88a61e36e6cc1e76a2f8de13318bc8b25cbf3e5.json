{"sha": "b88a61e36e6cc1e76a2f8de13318bc8b25cbf3e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4OGE2MWUzNmU2Y2MxZTc2YTJmOGRlMTMzMThiYzhiMjVjYmYzZTU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-07T00:14:25Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-09T01:10:05Z"}, "message": "Make it possible to ungate features by epoch", "tree": {"sha": "0e32ff16288fbe232e4b603c682277e7f55eeaa8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e32ff16288fbe232e4b603c682277e7f55eeaa8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b88a61e36e6cc1e76a2f8de13318bc8b25cbf3e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b88a61e36e6cc1e76a2f8de13318bc8b25cbf3e5", "html_url": "https://github.com/rust-lang/rust/commit/b88a61e36e6cc1e76a2f8de13318bc8b25cbf3e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b88a61e36e6cc1e76a2f8de13318bc8b25cbf3e5/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3fe3a56c25eec6923c47ac6c5434fcdaf27ad40", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3fe3a56c25eec6923c47ac6c5434fcdaf27ad40", "html_url": "https://github.com/rust-lang/rust/commit/c3fe3a56c25eec6923c47ac6c5434fcdaf27ad40"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "f020f86b6860bba07ec4740d80cf570e87fc6351", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b88a61e36e6cc1e76a2f8de13318bc8b25cbf3e5/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88a61e36e6cc1e76a2f8de13318bc8b25cbf3e5/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=b88a61e36e6cc1e76a2f8de13318bc8b25cbf3e5", "patch": "@@ -647,7 +647,9 @@ pub fn phase_2_configure_and_expand_inner<'a, F>(sess: &'a Session,\n {\n     let time_passes = sess.time_passes();\n \n-    let (mut krate, features) = syntax::config::features(krate, &sess.parse_sess, sess.opts.test);\n+    let (mut krate, features) = syntax::config::features(krate, &sess.parse_sess,\n+                                                         sess.opts.test,\n+                                                         sess.opts.debugging_opts.epoch);\n     // these need to be set \"early\" so that expansion sees `quote` if enabled.\n     sess.init_features(features);\n "}, {"sha": "6013c20daf23551c9492613f63320ad19d5baf97", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b88a61e36e6cc1e76a2f8de13318bc8b25cbf3e5/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88a61e36e6cc1e76a2f8de13318bc8b25cbf3e5/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=b88a61e36e6cc1e76a2f8de13318bc8b25cbf3e5", "patch": "@@ -13,6 +13,7 @@ use feature_gate::{feature_err, EXPLAIN_STMT_ATTR_SYNTAX, Features, get_features\n use {fold, attr};\n use ast;\n use codemap::Spanned;\n+use epoch::Epoch;\n use parse::{token, ParseSess};\n \n use ptr::P;\n@@ -26,7 +27,7 @@ pub struct StripUnconfigured<'a> {\n }\n \n // `cfg_attr`-process the crate's attributes and compute the crate's features.\n-pub fn features(mut krate: ast::Crate, sess: &ParseSess, should_test: bool)\n+pub fn features(mut krate: ast::Crate, sess: &ParseSess, should_test: bool, epoch: Epoch)\n                 -> (ast::Crate, Features) {\n     let features;\n     {\n@@ -46,7 +47,7 @@ pub fn features(mut krate: ast::Crate, sess: &ParseSess, should_test: bool)\n             return (krate, Features::new());\n         }\n \n-        features = get_features(&sess.span_diagnostic, &krate.attrs);\n+        features = get_features(&sess.span_diagnostic, &krate.attrs, epoch);\n \n         // Avoid reconfiguring malformed `cfg_attr`s\n         if err_count == sess.span_diagnostic.err_count() {"}, {"sha": "ec9a15d9f2b44814a6eaf9914e4318d57ba1ca07", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b88a61e36e6cc1e76a2f8de13318bc8b25cbf3e5/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88a61e36e6cc1e76a2f8de13318bc8b25cbf3e5/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b88a61e36e6cc1e76a2f8de13318bc8b25cbf3e5", "patch": "@@ -30,7 +30,7 @@ use ast::{self, NodeId, PatKind, RangeEnd, RangeSyntax};\n use attr;\n use epoch::Epoch;\n use codemap::Spanned;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, DUMMY_SP};\n use errors::{DiagnosticBuilder, Handler, FatalError};\n use visit::{self, FnKind, Visitor};\n use parse::ParseSess;\n@@ -59,7 +59,8 @@ macro_rules! declare_features {\n         /// Represents active features that are currently being implemented or\n         /// currently being considered for addition/removal.\n         const ACTIVE_FEATURES:\n-                &'static [(&'static str, &'static str, Option<u32>, Option<Epoch>, fn(&mut Features, Span))] =\n+                &'static [(&'static str, &'static str, Option<u32>,\n+                           Option<Epoch>, fn(&mut Features, Span))] =\n             &[$((stringify!($feature), $ver, $issue, $epoch, set!($feature))),+];\n \n         /// A set of features to be used by later passes.\n@@ -408,7 +409,7 @@ declare_features! (\n     (active, match_default_bindings, \"1.22.0\", Some(42640), None),\n \n     // Trait object syntax with `dyn` prefix\n-    (active, dyn_trait, \"1.22.0\", Some(44662), None),\n+    (active, dyn_trait, \"1.22.0\", Some(44662), Some(Epoch::Epoch2018)),\n \n     // `crate` as visibility modifier, synonymous to `pub(crate)`\n     (active, crate_visibility_modifier, \"1.23.0\", Some(45388), None),\n@@ -1794,11 +1795,22 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     }\n }\n \n-pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute]) -> Features {\n+pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n+                    epoch: Epoch) -> Features {\n     let mut features = Features::new();\n \n     let mut feature_checker = FeatureChecker::default();\n \n+    for &(.., f_epoch, set) in ACTIVE_FEATURES.iter() {\n+        if let Some(f_epoch) = f_epoch {\n+            if epoch >= f_epoch {\n+                // FIXME(Manishearth) there is currently no way to set\n+                // lang features by epoch\n+                set(&mut features, DUMMY_SP);\n+            }\n+        }\n+    }\n+\n     for attr in krate_attrs {\n         if !attr.check_name(\"feature\") {\n             continue"}]}