{"sha": "7ff5bbd494ad40f494bf375451c4be52aa7c9d56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZjViYmQ0OTRhZDQwZjQ5NGJmMzc1NDUxYzRiZTUyYWE3YzlkNTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-25T13:56:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-25T13:56:08Z"}, "message": "auto merge of #15971 : alexcrichton/rust/hurray-for-windows, r=pcwalton\n\nThe right hand side of the comparison in these checks are values of type\r\nOption<&Path> which are normalized versions of the left-hand side, so they're\r\nnot guaranteed to be byte-for-byte equivalent even though they're the same path.\r\n\r\nFor this reasons, the command line arguments are promoted to paths for\r\ncomparison of equality.\r\n\r\nThis fixes a bug on windows where if a library was specified with --extern it\r\nwould then be picked up twice because it was not considered to have been\r\npreviously registered.", "tree": {"sha": "8d861d2a9fb1164571a1ccd9f2db639edbf3d2c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d861d2a9fb1164571a1ccd9f2db639edbf3d2c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ff5bbd494ad40f494bf375451c4be52aa7c9d56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ff5bbd494ad40f494bf375451c4be52aa7c9d56", "html_url": "https://github.com/rust-lang/rust/commit/7ff5bbd494ad40f494bf375451c4be52aa7c9d56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ff5bbd494ad40f494bf375451c4be52aa7c9d56/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44019c79e0c7bd08d6136cd609eef619c97f45eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/44019c79e0c7bd08d6136cd609eef619c97f45eb", "html_url": "https://github.com/rust-lang/rust/commit/44019c79e0c7bd08d6136cd609eef619c97f45eb"}, {"sha": "bd838a3b7ea3f6b410058e9413f5745586d3a459", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd838a3b7ea3f6b410058e9413f5745586d3a459", "html_url": "https://github.com/rust-lang/rust/commit/bd838a3b7ea3f6b410058e9413f5745586d3a459"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "0445b4d4e9e1f2f239a56f21c425c169ddd80ef7", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7ff5bbd494ad40f494bf375451c4be52aa7c9d56/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff5bbd494ad40f494bf375451c4be52aa7c9d56/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=7ff5bbd494ad40f494bf375451c4be52aa7c9d56", "patch": "@@ -293,13 +293,16 @@ fn existing_match(e: &Env, name: &str,\n         // library. Even though an upstream library may have loaded something of\n         // the same name, we have to make sure it was loaded from the exact same\n         // location as well.\n+        //\n+        // We're also sure to compare *paths*, not actual byte slices. The\n+        // `source` stores paths which are normalized which may be different\n+        // from the strings on the command line.\n         let source = e.sess.cstore.get_used_crate_source(cnum).unwrap();\n-        let dylib = source.dylib.as_ref().map(|p| p.as_vec());\n-        let rlib = source.rlib.as_ref().map(|p| p.as_vec());\n         match e.sess.opts.externs.find_equiv(&name) {\n             Some(locs) => {\n                 let found = locs.iter().any(|l| {\n-                    Some(l.as_bytes()) == dylib || Some(l.as_bytes()) == rlib\n+                    let l = Some(Path::new(l.as_slice()));\n+                    l == source.dylib || l == source.rlib\n                 });\n                 if found {\n                     ret = Some(cnum);"}]}