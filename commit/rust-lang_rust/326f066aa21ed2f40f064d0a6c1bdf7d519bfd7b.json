{"sha": "326f066aa21ed2f40f064d0a6c1bdf7d519bfd7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNmYwNjZhYTIxZWQyZjQwZjA2NGQwYTZjMWJkZjdkNTE5YmZkN2I=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T13:47:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T14:36:06Z"}, "message": "Reduce visibility", "tree": {"sha": "219caf6600d84668be5686311d4b7c667c21411e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/219caf6600d84668be5686311d4b7c667c21411e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/326f066aa21ed2f40f064d0a6c1bdf7d519bfd7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/326f066aa21ed2f40f064d0a6c1bdf7d519bfd7b", "html_url": "https://github.com/rust-lang/rust/commit/326f066aa21ed2f40f064d0a6c1bdf7d519bfd7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/326f066aa21ed2f40f064d0a6c1bdf7d519bfd7b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cc634fa6018b60c7bac5ada2038ca341a91f410", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cc634fa6018b60c7bac5ada2038ca341a91f410", "html_url": "https://github.com/rust-lang/rust/commit/5cc634fa6018b60c7bac5ada2038ca341a91f410"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "94f6a27bc43fdf8afe94fccff3a80c25256935ba", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/326f066aa21ed2f40f064d0a6c1bdf7d519bfd7b/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326f066aa21ed2f40f064d0a6c1bdf7d519bfd7b/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=326f066aa21ed2f40f064d0a6c1bdf7d519bfd7b", "patch": "@@ -66,7 +66,7 @@ pub enum PathKind {\n \n impl Path {\n     /// Calls `cb` with all paths, represented by this use item.\n-    pub fn expand_use_item(\n+    pub(crate) fn expand_use_item(\n         item_src: Source<ast::UseItem>,\n         hygiene: &Hygiene,\n         mut cb: impl FnMut(Path, &ast::UseTree, bool, Option<Name>),\n@@ -76,7 +76,10 @@ impl Path {\n         }\n     }\n \n-    pub fn from_simple_segments(kind: PathKind, segments: impl IntoIterator<Item = Name>) -> Path {\n+    pub(crate) fn from_simple_segments(\n+        kind: PathKind,\n+        segments: impl IntoIterator<Item = Name>,\n+    ) -> Path {\n         Path {\n             kind,\n             segments: segments\n@@ -94,7 +97,7 @@ impl Path {\n \n     /// Converts an `ast::Path` to `Path`. Works with use trees.\n     /// It correctly handles `$crate` based path from macro call.\n-    pub fn from_src(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path> {\n+    pub(crate) fn from_src(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path> {\n         let mut kind = PathKind::Plain;\n         let mut segments = Vec::new();\n         loop {\n@@ -227,7 +230,7 @@ impl Path {\n }\n \n impl GenericArgs {\n-    pub fn from_ast(node: ast::TypeArgList) -> Option<GenericArgs> {\n+    pub(crate) fn from_ast(node: ast::TypeArgList) -> Option<GenericArgs> {\n         let mut args = Vec::new();\n         for type_arg in node.type_args() {\n             let type_ref = TypeRef::from_ast_opt(type_arg.type_ref());"}, {"sha": "5f10e9a88bae39316db1001a624c6971c9eb9844", "filename": "crates/ra_hir_def/src/type_ref.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/326f066aa21ed2f40f064d0a6c1bdf7d519bfd7b/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326f066aa21ed2f40f064d0a6c1bdf7d519bfd7b/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs?ref=326f066aa21ed2f40f064d0a6c1bdf7d519bfd7b", "patch": "@@ -64,7 +64,7 @@ pub enum TypeBound {\n \n impl TypeRef {\n     /// Converts an `ast::TypeRef` to a `hir::TypeRef`.\n-    pub fn from_ast(node: ast::TypeRef) -> Self {\n+    pub(crate) fn from_ast(node: ast::TypeRef) -> Self {\n         match node {\n             ast::TypeRef::ParenType(inner) => TypeRef::from_ast_opt(inner.type_ref()),\n             ast::TypeRef::TupleType(inner) => {\n@@ -113,15 +113,15 @@ impl TypeRef {\n         }\n     }\n \n-    pub fn from_ast_opt(node: Option<ast::TypeRef>) -> Self {\n+    pub(crate) fn from_ast_opt(node: Option<ast::TypeRef>) -> Self {\n         if let Some(node) = node {\n             TypeRef::from_ast(node)\n         } else {\n             TypeRef::Error\n         }\n     }\n \n-    pub fn unit() -> TypeRef {\n+    pub(crate) fn unit() -> TypeRef {\n         TypeRef::Tuple(Vec::new())\n     }\n }\n@@ -135,7 +135,7 @@ pub(crate) fn type_bounds_from_ast(type_bounds_opt: Option<ast::TypeBoundList>)\n }\n \n impl TypeBound {\n-    pub fn from_ast(node: ast::TypeBound) -> Self {\n+    pub(crate) fn from_ast(node: ast::TypeBound) -> Self {\n         match node.kind() {\n             ast::TypeBoundKind::PathType(path_type) => {\n                 let path = match path_type.path() {"}]}