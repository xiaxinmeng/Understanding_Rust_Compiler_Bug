{"sha": "566fa4d003dd27c63a708a9e5e4e5c673a276f8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NmZhNGQwMDNkZDI3YzYzYTcwOGE5ZTVlNGU1YzY3M2EyNzZmOGQ=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-09-28T10:18:03Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:38:19Z"}, "message": "Moved common.rs enums", "tree": {"sha": "9ab92193d202e1e9cd4517ed3d5f9c96e7dcec73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ab92193d202e1e9cd4517ed3d5f9c96e7dcec73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/566fa4d003dd27c63a708a9e5e4e5c673a276f8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/566fa4d003dd27c63a708a9e5e4e5c673a276f8d", "html_url": "https://github.com/rust-lang/rust/commit/566fa4d003dd27c63a708a9e5e4e5c673a276f8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/566fa4d003dd27c63a708a9e5e4e5c673a276f8d/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39fd4d92740ce4f838326fbaa101ba951b757e39", "url": "https://api.github.com/repos/rust-lang/rust/commits/39fd4d92740ce4f838326fbaa101ba951b757e39", "html_url": "https://github.com/rust-lang/rust/commit/39fd4d92740ce4f838326fbaa101ba951b757e39"}], "stats": {"total": 328, "additions": 173, "deletions": 155}, "files": [{"sha": "5a11bade27488d935c93effcfc1a934667c23b85", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/566fa4d003dd27c63a708a9e5e4e5c673a276f8d/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/566fa4d003dd27c63a708a9e5e4e5c673a276f8d/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=566fa4d003dd27c63a708a9e5e4e5c673a276f8d", "patch": "@@ -53,8 +53,8 @@ use mir::place::PlaceRef;\n use builder::{Builder, MemFlags};\n use callee;\n use rustc_mir::monomorphize::item::DefPathBasedNames;\n-use common::{self, RealPredicate, TypeKind};\n-use rustc_codegen_utils::common::IntPredicate;\n+use common;\n+use rustc_codegen_utils::common::{RealPredicate, TypeKind, IntPredicate};\n use meth;\n use mir;\n use context::CodegenCx;"}, {"sha": "8e6832361a636f9962092742bd03d27fc37f8793", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/566fa4d003dd27c63a708a9e5e4e5c673a276f8d/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/566fa4d003dd27c63a708a9e5e4e5c673a276f8d/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=566fa4d003dd27c63a708a9e5e4e5c673a276f8d", "patch": "@@ -10,8 +10,9 @@\n \n use llvm::{AtomicRmwBinOp, AtomicOrdering, SynchronizationScope, AsmDialect};\n use llvm::{self, False, OperandBundleDef, BasicBlock};\n-use common::{self, *};\n-use rustc_codegen_utils::common::IntPredicate;\n+use common;\n+use rustc_codegen_utils::common::{IntPredicate, TypeKind, RealPredicate};\n+use rustc_codegen_utils;\n use context::CodegenCx;\n use type_::Type;\n use type_of::LayoutLlvmExt;\n@@ -524,7 +525,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     fn atomic_load(\n         &self,\n         ptr: &'ll Value,\n-        order: common::AtomicOrdering,\n+        order: rustc_codegen_utils::common::AtomicOrdering,\n         size: Size,\n     ) -> &'ll Value {\n         self.count_insn(\"load.atomic\");\n@@ -678,7 +679,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n    fn atomic_store(&self, val: &'ll Value, ptr: &'ll Value,\n-                   order: common::AtomicOrdering, size: Size) {\n+                   order: rustc_codegen_utils::common::AtomicOrdering, size: Size) {\n         debug!(\"Store {:?} -> {:?}\", val, ptr);\n         self.count_insn(\"store.atomic\");\n         let ptr = self.check_store(val, ptr);\n@@ -1201,8 +1202,8 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         dst: &'ll Value,\n         cmp: &'ll Value,\n         src: &'ll Value,\n-        order: common::AtomicOrdering,\n-        failure_order: common::AtomicOrdering,\n+        order: rustc_codegen_utils::common::AtomicOrdering,\n+        failure_order: rustc_codegen_utils::common::AtomicOrdering,\n         weak: bool,\n     ) -> &'ll Value {\n         let weak = if weak { llvm::True } else { llvm::False };\n@@ -1220,10 +1221,10 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n     fn atomic_rmw(\n         &self,\n-        op: common::AtomicRmwBinOp,\n+        op: rustc_codegen_utils::common::AtomicRmwBinOp,\n         dst: &'ll Value,\n         src: &'ll Value,\n-        order: common::AtomicOrdering,\n+        order: rustc_codegen_utils::common::AtomicOrdering,\n     ) -> &'ll Value {\n         unsafe {\n             llvm::LLVMBuildAtomicRMW(\n@@ -1236,7 +1237,11 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn atomic_fence(&self, order: common::AtomicOrdering, scope: common::SynchronizationScope) {\n+    fn atomic_fence(\n+        &self,\n+        order: rustc_codegen_utils::common::AtomicOrdering,\n+        scope: rustc_codegen_utils::common::SynchronizationScope\n+    ) {\n         unsafe {\n             llvm::LLVMRustBuildAtomicFence(\n                 self.llbuilder,"}, {"sha": "8bc20ddd6b133d142771d5db4bce5707cb3dcc3d", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 1, "deletions": 75, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/566fa4d003dd27c63a708a9e5e4e5c673a276f8d/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/566fa4d003dd27c63a708a9e5e4e5c673a276f8d/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=566fa4d003dd27c63a708a9e5e4e5c673a276f8d", "patch": "@@ -29,6 +29,7 @@ use rustc::mir::interpret::{Scalar, AllocType, Allocation};\n use rustc::hir;\n use mir::constant::const_alloc_to_llvm;\n use mir::place::PlaceRef;\n+use rustc_codegen_utils::common::TypeKind;\n \n use libc::{c_uint, c_char};\n \n@@ -64,81 +65,6 @@ impl<'a, V> OperandBundleDef<'a, V> {\n     }\n }\n \n-#[allow(dead_code)]\n-pub enum RealPredicate {\n-    RealPredicateFalse,\n-    RealOEQ,\n-    RealOGT,\n-    RealOGE,\n-    RealOLT,\n-    RealOLE,\n-    RealONE,\n-    RealORD,\n-    RealUNO,\n-    RealUEQ,\n-    RealUGT,\n-    RealUGE,\n-    RealULT,\n-    RealULE,\n-    RealUNE,\n-    RealPredicateTrue\n-}\n-\n-pub enum AtomicRmwBinOp {\n-    AtomicXchg,\n-    AtomicAdd,\n-    AtomicSub,\n-    AtomicAnd,\n-    AtomicNand,\n-    AtomicOr,\n-    AtomicXor,\n-    AtomicMax,\n-    AtomicMin,\n-    AtomicUMax,\n-    AtomicUMin\n-}\n-\n-pub enum AtomicOrdering {\n-    #[allow(dead_code)]\n-    NotAtomic,\n-    Unordered,\n-    Monotonic,\n-    // Consume,  // Not specified yet.\n-    Acquire,\n-    Release,\n-    AcquireRelease,\n-    SequentiallyConsistent,\n-}\n-\n-pub enum SynchronizationScope {\n-    // FIXME: figure out if this variant is needed at all.\n-    #[allow(dead_code)]\n-    Other,\n-    SingleThread,\n-    CrossThread,\n-}\n-\n-#[derive(Copy, Clone, PartialEq, Debug)]\n-pub enum TypeKind {\n-    Void,\n-    Half,\n-    Float,\n-    Double,\n-    X86_FP80,\n-    FP128,\n-    PPc_FP128,\n-    Label,\n-    Integer,\n-    Function,\n-    Struct,\n-    Array,\n-    Pointer,\n-    Vector,\n-    Metadata,\n-    X86_MMX,\n-    Token,\n-}\n-\n /*\n * A note on nomenclature of linking: \"extern\", \"foreign\", and \"upcall\".\n *"}, {"sha": "54e0baff38180facd5598bda21c573c1a1f5a86b", "filename": "src/librustc_codegen_llvm/interfaces/builder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/566fa4d003dd27c63a708a9e5e4e5c673a276f8d/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/566fa4d003dd27c63a708a9e5e4e5c673a276f8d/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs?ref=566fa4d003dd27c63a708a9e5e4e5c673a276f8d", "patch": "@@ -20,7 +20,9 @@ use libc::c_char;\n use mir::operand::OperandRef;\n use mir::place::PlaceRef;\n use rustc::ty::layout::{Align, Size};\n-use rustc_codegen_utils::common::IntPredicate;\n+use rustc_codegen_utils::common::{\n+    AtomicOrdering, AtomicRmwBinOp, IntPredicate, RealPredicate, SynchronizationScope,\n+};\n \n use std::borrow::Cow;\n use std::ops::Range;"}, {"sha": "a03bcac5ecd8e59b73954de9d83ad24d7bef0e55", "filename": "src/librustc_codegen_llvm/interfaces/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/566fa4d003dd27c63a708a9e5e4e5c673a276f8d/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/566fa4d003dd27c63a708a9e5e4e5c673a276f8d/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs?ref=566fa4d003dd27c63a708a9e5e4e5c673a276f8d", "patch": "@@ -10,12 +10,12 @@\n \n use super::backend::Backend;\n use super::HasCodegen;\n-use common::TypeKind;\n use mir::place::PlaceRef;\n use rustc::ty::layout::TyLayout;\n use rustc::ty::layout::{self, Align, Size};\n use rustc::ty::Ty;\n use rustc::util::nodemap::FxHashMap;\n+use rustc_codegen_utils::common::TypeKind;\n use rustc_target::abi::call::{ArgType, CastTarget, FnType, Reg};\n use std::cell::RefCell;\n use syntax::ast;"}, {"sha": "708e43ef85d30f57204d927a35b75caa2f7c9e1c", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/566fa4d003dd27c63a708a9e5e4e5c673a276f8d/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/566fa4d003dd27c63a708a9e5e4e5c673a276f8d/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=566fa4d003dd27c63a708a9e5e4e5c673a276f8d", "patch": "@@ -18,13 +18,13 @@ use abi::{Abi, FnType, LlvmType, PassMode};\n use mir::place::PlaceRef;\n use mir::operand::{OperandRef, OperandValue};\n use base::*;\n-use common::*;\n use context::CodegenCx;\n use glue;\n use type_::Type;\n use type_of::LayoutLlvmExt;\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::{LayoutOf, HasTyCtxt};\n+use rustc_codegen_utils::common::TypeKind;\n use rustc::hir;\n use syntax::ast;\n use syntax::symbol::Symbol;\n@@ -463,7 +463,9 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             // This requires that atomic intrinsics follow a specific naming pattern:\n             // \"atomic_<operation>[_<ordering>]\", and no ordering means SeqCst\n             name if name.starts_with(\"atomic_\") => {\n-                use self::AtomicOrdering::*;\n+                use rustc_codegen_utils::common::AtomicOrdering::*;\n+                use rustc_codegen_utils::common::\n+                    {SynchronizationScope, AtomicRmwBinOp};\n \n                 let split: Vec<&str> = name.split('_').collect();\n "}, {"sha": "06c60dba2f52830ed2f9c8d19f9db8c52506793d", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 65, "deletions": 61, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/566fa4d003dd27c63a708a9e5e4e5c673a276f8d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/566fa4d003dd27c63a708a9e5e4e5c673a276f8d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=566fa4d003dd27c63a708a9e5e4e5c673a276f8d", "patch": "@@ -19,7 +19,6 @@ use libc::{c_uint, c_int, size_t, c_char};\n use libc::{c_ulonglong, c_void};\n \n use std::marker::PhantomData;\n-use common;\n use rustc_codegen_utils;\n use syntax;\n \n@@ -184,24 +183,26 @@ pub enum RealPredicate {\n }\n \n impl RealPredicate {\n-    pub fn from_generic(realpred: common::RealPredicate) -> Self {\n+    pub fn from_generic(realpred: rustc_codegen_utils::common::RealPredicate) -> Self {\n         match realpred {\n-            common::RealPredicate::RealPredicateFalse => RealPredicate::RealPredicateFalse,\n-            common::RealPredicate::RealOEQ => RealPredicate::RealOEQ,\n-            common::RealPredicate::RealOGT => RealPredicate::RealOGT,\n-            common::RealPredicate::RealOGE => RealPredicate::RealOGE,\n-            common::RealPredicate::RealOLT => RealPredicate::RealOLT,\n-            common::RealPredicate::RealOLE => RealPredicate::RealOLE,\n-            common::RealPredicate::RealONE => RealPredicate::RealONE,\n-            common::RealPredicate::RealORD => RealPredicate::RealORD,\n-            common::RealPredicate::RealUNO => RealPredicate::RealUNO,\n-            common::RealPredicate::RealUEQ => RealPredicate::RealUEQ,\n-            common::RealPredicate::RealUGT => RealPredicate::RealUGT,\n-            common::RealPredicate::RealUGE => RealPredicate::RealUGE,\n-            common::RealPredicate::RealULT => RealPredicate::RealULT,\n-            common::RealPredicate::RealULE => RealPredicate::RealULE,\n-            common::RealPredicate::RealUNE => RealPredicate::RealUNE,\n-            common::RealPredicate::RealPredicateTrue => RealPredicate::RealPredicateTrue\n+            rustc_codegen_utils::common::RealPredicate::RealPredicateFalse =>\n+                RealPredicate::RealPredicateFalse,\n+            rustc_codegen_utils::common::RealPredicate::RealOEQ => RealPredicate::RealOEQ,\n+            rustc_codegen_utils::common::RealPredicate::RealOGT => RealPredicate::RealOGT,\n+            rustc_codegen_utils::common::RealPredicate::RealOGE => RealPredicate::RealOGE,\n+            rustc_codegen_utils::common::RealPredicate::RealOLT => RealPredicate::RealOLT,\n+            rustc_codegen_utils::common::RealPredicate::RealOLE => RealPredicate::RealOLE,\n+            rustc_codegen_utils::common::RealPredicate::RealONE => RealPredicate::RealONE,\n+            rustc_codegen_utils::common::RealPredicate::RealORD => RealPredicate::RealORD,\n+            rustc_codegen_utils::common::RealPredicate::RealUNO => RealPredicate::RealUNO,\n+            rustc_codegen_utils::common::RealPredicate::RealUEQ => RealPredicate::RealUEQ,\n+            rustc_codegen_utils::common::RealPredicate::RealUGT => RealPredicate::RealUGT,\n+            rustc_codegen_utils::common::RealPredicate::RealUGE => RealPredicate::RealUGE,\n+            rustc_codegen_utils::common::RealPredicate::RealULT => RealPredicate::RealULT,\n+            rustc_codegen_utils::common::RealPredicate::RealULE => RealPredicate::RealULE,\n+            rustc_codegen_utils::common::RealPredicate::RealUNE => RealPredicate::RealUNE,\n+            rustc_codegen_utils::common::RealPredicate::RealPredicateTrue =>\n+                RealPredicate::RealPredicateTrue\n         }\n     }\n }\n@@ -216,7 +217,7 @@ pub enum TypeKind {\n     Double = 3,\n     X86_FP80 = 4,\n     FP128 = 5,\n-    PPc_FP128 = 6,\n+    PPC_FP128 = 6,\n     Label = 7,\n     Integer = 8,\n     Function = 9,\n@@ -230,25 +231,25 @@ pub enum TypeKind {\n }\n \n impl TypeKind {\n-    pub fn to_generic(self) -> common::TypeKind {\n+    pub fn to_generic(self) -> rustc_codegen_utils::common::TypeKind {\n         match self {\n-            TypeKind::Void => common::TypeKind::Void,\n-            TypeKind::Half => common::TypeKind::Half,\n-            TypeKind::Float => common::TypeKind::Float,\n-            TypeKind::Double => common::TypeKind::Double,\n-            TypeKind::X86_FP80 => common::TypeKind::X86_FP80,\n-            TypeKind::FP128 => common::TypeKind::FP128,\n-            TypeKind::PPc_FP128 => common::TypeKind::PPc_FP128,\n-            TypeKind::Label => common::TypeKind::Label,\n-            TypeKind::Integer => common::TypeKind::Integer,\n-            TypeKind::Function => common::TypeKind::Function,\n-            TypeKind::Struct => common::TypeKind::Struct,\n-            TypeKind::Array => common::TypeKind::Array,\n-            TypeKind::Pointer => common::TypeKind::Pointer,\n-            TypeKind::Vector => common::TypeKind::Vector,\n-            TypeKind::Metadata => common::TypeKind::Metadata,\n-            TypeKind::X86_MMX => common::TypeKind::X86_MMX,\n-            TypeKind::Token => common::TypeKind::Token,\n+            TypeKind::Void => rustc_codegen_utils::common::TypeKind::Void,\n+            TypeKind::Half => rustc_codegen_utils::common::TypeKind::Half,\n+            TypeKind::Float => rustc_codegen_utils::common::TypeKind::Float,\n+            TypeKind::Double => rustc_codegen_utils::common::TypeKind::Double,\n+            TypeKind::X86_FP80 => rustc_codegen_utils::common::TypeKind::X86_FP80,\n+            TypeKind::FP128 => rustc_codegen_utils::common::TypeKind::FP128,\n+            TypeKind::PPC_FP128 => rustc_codegen_utils::common::TypeKind::PPC_FP128,\n+            TypeKind::Label => rustc_codegen_utils::common::TypeKind::Label,\n+            TypeKind::Integer => rustc_codegen_utils::common::TypeKind::Integer,\n+            TypeKind::Function => rustc_codegen_utils::common::TypeKind::Function,\n+            TypeKind::Struct => rustc_codegen_utils::common::TypeKind::Struct,\n+            TypeKind::Array => rustc_codegen_utils::common::TypeKind::Array,\n+            TypeKind::Pointer => rustc_codegen_utils::common::TypeKind::Pointer,\n+            TypeKind::Vector => rustc_codegen_utils::common::TypeKind::Vector,\n+            TypeKind::Metadata => rustc_codegen_utils::common::TypeKind::Metadata,\n+            TypeKind::X86_MMX => rustc_codegen_utils::common::TypeKind::X86_MMX,\n+            TypeKind::Token => rustc_codegen_utils::common::TypeKind::Token,\n         }\n     }\n }\n@@ -271,19 +272,19 @@ pub enum AtomicRmwBinOp {\n }\n \n impl AtomicRmwBinOp {\n-    pub fn from_generic(op: common::AtomicRmwBinOp) -> Self {\n+    pub fn from_generic(op: rustc_codegen_utils::common::AtomicRmwBinOp) -> Self {\n         match op {\n-            common::AtomicRmwBinOp::AtomicXchg => AtomicRmwBinOp::AtomicXchg,\n-            common::AtomicRmwBinOp::AtomicAdd => AtomicRmwBinOp::AtomicAdd,\n-            common::AtomicRmwBinOp::AtomicSub => AtomicRmwBinOp::AtomicSub,\n-            common::AtomicRmwBinOp::AtomicAnd => AtomicRmwBinOp::AtomicAnd,\n-            common::AtomicRmwBinOp::AtomicNand => AtomicRmwBinOp::AtomicNand,\n-            common::AtomicRmwBinOp::AtomicOr => AtomicRmwBinOp::AtomicOr,\n-            common::AtomicRmwBinOp::AtomicXor => AtomicRmwBinOp::AtomicXor,\n-            common::AtomicRmwBinOp::AtomicMax => AtomicRmwBinOp::AtomicMax,\n-            common::AtomicRmwBinOp::AtomicMin => AtomicRmwBinOp::AtomicMin,\n-            common::AtomicRmwBinOp::AtomicUMax => AtomicRmwBinOp::AtomicUMax,\n-            common::AtomicRmwBinOp::AtomicUMin => AtomicRmwBinOp::AtomicUMin\n+            rustc_codegen_utils::common::AtomicRmwBinOp::AtomicXchg => AtomicRmwBinOp::AtomicXchg,\n+            rustc_codegen_utils::common::AtomicRmwBinOp::AtomicAdd => AtomicRmwBinOp::AtomicAdd,\n+            rustc_codegen_utils::common::AtomicRmwBinOp::AtomicSub => AtomicRmwBinOp::AtomicSub,\n+            rustc_codegen_utils::common::AtomicRmwBinOp::AtomicAnd => AtomicRmwBinOp::AtomicAnd,\n+            rustc_codegen_utils::common::AtomicRmwBinOp::AtomicNand => AtomicRmwBinOp::AtomicNand,\n+            rustc_codegen_utils::common::AtomicRmwBinOp::AtomicOr => AtomicRmwBinOp::AtomicOr,\n+            rustc_codegen_utils::common::AtomicRmwBinOp::AtomicXor => AtomicRmwBinOp::AtomicXor,\n+            rustc_codegen_utils::common::AtomicRmwBinOp::AtomicMax => AtomicRmwBinOp::AtomicMax,\n+            rustc_codegen_utils::common::AtomicRmwBinOp::AtomicMin => AtomicRmwBinOp::AtomicMin,\n+            rustc_codegen_utils::common::AtomicRmwBinOp::AtomicUMax => AtomicRmwBinOp::AtomicUMax,\n+            rustc_codegen_utils::common::AtomicRmwBinOp::AtomicUMin => AtomicRmwBinOp::AtomicUMin\n         }\n     }\n }\n@@ -304,15 +305,16 @@ pub enum AtomicOrdering {\n }\n \n impl AtomicOrdering {\n-    pub fn from_generic(ao: common::AtomicOrdering) -> Self {\n+    pub fn from_generic(ao: rustc_codegen_utils::common::AtomicOrdering) -> Self {\n         match ao {\n-            common::AtomicOrdering::NotAtomic => AtomicOrdering::NotAtomic,\n-            common::AtomicOrdering::Unordered => AtomicOrdering::Unordered,\n-            common::AtomicOrdering::Monotonic => AtomicOrdering::Monotonic,\n-            common::AtomicOrdering::Acquire => AtomicOrdering::Acquire,\n-            common::AtomicOrdering::Release => AtomicOrdering::Release,\n-            common::AtomicOrdering::AcquireRelease => AtomicOrdering::AcquireRelease,\n-            common::AtomicOrdering::SequentiallyConsistent =>\n+            rustc_codegen_utils::common::AtomicOrdering::NotAtomic => AtomicOrdering::NotAtomic,\n+            rustc_codegen_utils::common::AtomicOrdering::Unordered => AtomicOrdering::Unordered,\n+            rustc_codegen_utils::common::AtomicOrdering::Monotonic => AtomicOrdering::Monotonic,\n+            rustc_codegen_utils::common::AtomicOrdering::Acquire => AtomicOrdering::Acquire,\n+            rustc_codegen_utils::common::AtomicOrdering::Release => AtomicOrdering::Release,\n+            rustc_codegen_utils::common::AtomicOrdering::AcquireRelease =>\n+                AtomicOrdering::AcquireRelease,\n+            rustc_codegen_utils::common::AtomicOrdering::SequentiallyConsistent =>\n                 AtomicOrdering::SequentiallyConsistent\n         }\n     }\n@@ -331,11 +333,13 @@ pub enum SynchronizationScope {\n }\n \n impl SynchronizationScope {\n-    pub fn from_generic(sc: common::SynchronizationScope) -> Self {\n+    pub fn from_generic(sc: rustc_codegen_utils::common::SynchronizationScope) -> Self {\n         match sc {\n-            common::SynchronizationScope::Other => SynchronizationScope::Other,\n-            common::SynchronizationScope::SingleThread => SynchronizationScope::SingleThread,\n-            common::SynchronizationScope::CrossThread => SynchronizationScope::CrossThread,\n+            rustc_codegen_utils::common::SynchronizationScope::Other => SynchronizationScope::Other,\n+            rustc_codegen_utils::common::SynchronizationScope::SingleThread =>\n+                SynchronizationScope::SingleThread,\n+            rustc_codegen_utils::common::SynchronizationScope::CrossThread =>\n+                SynchronizationScope::CrossThread,\n         }\n     }\n }"}, {"sha": "f1b07c39178d2fc080c451710d455512852bc6a3", "filename": "src/librustc_codegen_llvm/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/566fa4d003dd27c63a708a9e5e4e5c673a276f8d/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/566fa4d003dd27c63a708a9e5e4e5c673a276f8d/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs?ref=566fa4d003dd27c63a708a9e5e4e5c673a276f8d", "patch": "@@ -19,8 +19,8 @@ use std::{u128, i128};\n use base;\n use builder::MemFlags;\n use callee;\n-use common::{self, RealPredicate};\n-use rustc_codegen_utils::common::IntPredicate;\n+use common;\n+use rustc_codegen_utils::common::{RealPredicate, IntPredicate};\n use monomorphize;\n use type_of::LayoutLlvmExt;\n "}, {"sha": "d63b19ae7ebd4e02099ce478aafb6a8ad3bf23db", "filename": "src/librustc_codegen_llvm/type_.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/566fa4d003dd27c63a708a9e5e4e5c673a276f8d/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/566fa4d003dd27c63a708a9e5e4e5c673a276f8d/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_.rs?ref=566fa4d003dd27c63a708a9e5e4e5c673a276f8d", "patch": "@@ -26,7 +26,8 @@ use rustc::ty::{self, Ty};\n use rustc::ty::layout::TyLayout;\n use rustc_target::abi::call::{CastTarget, FnType, Reg};\n use rustc_data_structures::small_c_str::SmallCStr;\n-use common::{self, TypeKind};\n+use common;\n+use rustc_codegen_utils::common::TypeKind;\n use type_of::LayoutLlvmExt;\n use abi::{LlvmType, FnTypeExt};\n \n@@ -224,7 +225,7 @@ impl BaseTypeMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             TypeKind::Float => 32,\n             TypeKind::Double => 64,\n             TypeKind::X86_FP80 => 80,\n-            TypeKind::FP128 | TypeKind::PPc_FP128 => 128,\n+            TypeKind::FP128 | TypeKind::PPC_FP128 => 128,\n             _ => bug!(\"llvm_float_width called on a non-float type\")\n         }\n     }"}, {"sha": "5dc138b31ff04b27d9e09f3c8a4d3532984f95a2", "filename": "src/librustc_codegen_utils/common.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/566fa4d003dd27c63a708a9e5e4e5c673a276f8d/src%2Flibrustc_codegen_utils%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/566fa4d003dd27c63a708a9e5e4e5c673a276f8d/src%2Flibrustc_codegen_utils%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcommon.rs?ref=566fa4d003dd27c63a708a9e5e4e5c673a276f8d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(non_camel_case_types, non_snake_case)]\n+\n pub enum IntPredicate {\n     IntEQ,\n     IntNE,\n@@ -20,3 +22,79 @@ pub enum IntPredicate {\n     IntSLT,\n     IntSLE\n }\n+\n+\n+#[allow(dead_code)]\n+pub enum RealPredicate {\n+    RealPredicateFalse,\n+    RealOEQ,\n+    RealOGT,\n+    RealOGE,\n+    RealOLT,\n+    RealOLE,\n+    RealONE,\n+    RealORD,\n+    RealUNO,\n+    RealUEQ,\n+    RealUGT,\n+    RealUGE,\n+    RealULT,\n+    RealULE,\n+    RealUNE,\n+    RealPredicateTrue\n+}\n+\n+pub enum AtomicRmwBinOp {\n+    AtomicXchg,\n+    AtomicAdd,\n+    AtomicSub,\n+    AtomicAnd,\n+    AtomicNand,\n+    AtomicOr,\n+    AtomicXor,\n+    AtomicMax,\n+    AtomicMin,\n+    AtomicUMax,\n+    AtomicUMin\n+}\n+\n+pub enum AtomicOrdering {\n+    #[allow(dead_code)]\n+    NotAtomic,\n+    Unordered,\n+    Monotonic,\n+    // Consume,  // Not specified yet.\n+    Acquire,\n+    Release,\n+    AcquireRelease,\n+    SequentiallyConsistent,\n+}\n+\n+pub enum SynchronizationScope {\n+    // FIXME: figure out if this variant is needed at all.\n+    #[allow(dead_code)]\n+    Other,\n+    SingleThread,\n+    CrossThread,\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+pub enum TypeKind {\n+    Void,\n+    Half,\n+    Float,\n+    Double,\n+    X86_FP80,\n+    FP128,\n+    PPC_FP128,\n+    Label,\n+    Integer,\n+    Function,\n+    Struct,\n+    Array,\n+    Pointer,\n+    Vector,\n+    Metadata,\n+    X86_MMX,\n+    Token,\n+}"}]}