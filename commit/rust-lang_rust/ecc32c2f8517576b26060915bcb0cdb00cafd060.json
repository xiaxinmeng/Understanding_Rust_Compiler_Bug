{"sha": "ecc32c2f8517576b26060915bcb0cdb00cafd060", "node_id": "C_kwDOAAsO6NoAKGVjYzMyYzJmODUxNzU3NmIyNjA2MDkxNWJjYjBjZGIwMGNhZmQwNjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-07T14:25:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-07T14:25:20Z"}, "message": "Auto merge of #14271 - Veykril:ty-diag-err, r=Veykril\n\nDon't trigger unresolved method/field diagnostics on types containing errors", "tree": {"sha": "5c6a8a5d788e827ccc77c215a8a1d3867f4db18a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c6a8a5d788e827ccc77c215a8a1d3867f4db18a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecc32c2f8517576b26060915bcb0cdb00cafd060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecc32c2f8517576b26060915bcb0cdb00cafd060", "html_url": "https://github.com/rust-lang/rust/commit/ecc32c2f8517576b26060915bcb0cdb00cafd060", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecc32c2f8517576b26060915bcb0cdb00cafd060/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44ff3c407a9db70f0c8f02b04d73ab1f883f37fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/44ff3c407a9db70f0c8f02b04d73ab1f883f37fe", "html_url": "https://github.com/rust-lang/rust/commit/44ff3c407a9db70f0c8f02b04d73ab1f883f37fe"}, {"sha": "d45708fabe1f43b0c229b6b5222b7a2d5420d07e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d45708fabe1f43b0c229b6b5222b7a2d5420d07e", "html_url": "https://github.com/rust-lang/rust/commit/d45708fabe1f43b0c229b6b5222b7a2d5420d07e"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "e6aefbf27167aa91084a37280ccb3f833d6b7871", "filename": "crates/hir-ty/src/chalk_ext.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ecc32c2f8517576b26060915bcb0cdb00cafd060/crates%2Fhir-ty%2Fsrc%2Fchalk_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecc32c2f8517576b26060915bcb0cdb00cafd060/crates%2Fhir-ty%2Fsrc%2Fchalk_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fchalk_ext.rs?ref=ecc32c2f8517576b26060915bcb0cdb00cafd060", "patch": "@@ -13,7 +13,7 @@ use crate::{\n     db::HirDatabase, from_assoc_type_id, from_chalk_trait_id, from_foreign_def_id,\n     from_placeholder_idx, to_chalk_trait_id, utils::generics, AdtId, AliasEq, AliasTy, Binders,\n     CallableDefId, CallableSig, FnPointer, ImplTraitId, Interner, Lifetime, ProjectionTy,\n-    QuantifiedWhereClause, Substitution, TraitRef, Ty, TyBuilder, TyKind, WhereClause,\n+    QuantifiedWhereClause, Substitution, TraitRef, Ty, TyBuilder, TyKind, TypeFlags, WhereClause,\n };\n \n pub trait TyExt {\n@@ -22,6 +22,7 @@ pub trait TyExt {\n     fn is_floating_point(&self) -> bool;\n     fn is_never(&self) -> bool;\n     fn is_unknown(&self) -> bool;\n+    fn contains_unknown(&self) -> bool;\n     fn is_ty_var(&self) -> bool;\n \n     fn as_adt(&self) -> Option<(hir_def::AdtId, &Substitution)>;\n@@ -76,6 +77,10 @@ impl TyExt for Ty {\n         matches!(self.kind(Interner), TyKind::Error)\n     }\n \n+    fn contains_unknown(&self) -> bool {\n+        self.data(Interner).flags.contains(TypeFlags::HAS_ERROR)\n+    }\n+\n     fn is_ty_var(&self) -> bool {\n         matches!(self.kind(Interner), TyKind::InferenceVar(_, _))\n     }"}, {"sha": "7de5b4295fcc408e5392ab50e64d785d515b84f9", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecc32c2f8517576b26060915bcb0cdb00cafd060/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecc32c2f8517576b26060915bcb0cdb00cafd060/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=ecc32c2f8517576b26060915bcb0cdb00cafd060", "patch": "@@ -567,7 +567,7 @@ impl<'a> InferenceContext<'a> {\n             {\n                 *ty = table.resolve_completely(ty.clone());\n                 // FIXME: Remove this when we are on par with rustc in terms of inference\n-                if ty.is_unknown() {\n+                if ty.contains_unknown() {\n                     return false;\n                 }\n \n@@ -576,7 +576,7 @@ impl<'a> InferenceContext<'a> {\n                 {\n                     let clear = if let Some(ty) = field_with_same_name {\n                         *ty = table.resolve_completely(ty.clone());\n-                        ty.is_unknown()\n+                        ty.contains_unknown()\n                     } else {\n                         false\n                     };"}, {"sha": "7de03416e5625ca198a9dde58b5ee96200749df3", "filename": "crates/ide-diagnostics/src/handlers/unresolved_field.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ecc32c2f8517576b26060915bcb0cdb00cafd060/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecc32c2f8517576b26060915bcb0cdb00cafd060/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_field.rs?ref=ecc32c2f8517576b26060915bcb0cdb00cafd060", "patch": "@@ -129,6 +129,19 @@ fn foo() {\n     Foo.bar;\n  // ^^^^^^^ \ud83d\udca1 error: no field `bar` on type `Foo`, but a method with a similar name exists\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn no_diagnostic_on_unknown() {\n+        check_diagnostics(\n+            r#\"\n+fn foo() {\n+    x.foo;\n+    (&x).foo;\n+    (&((x,),),).foo;\n+}\n \"#,\n         );\n     }"}]}