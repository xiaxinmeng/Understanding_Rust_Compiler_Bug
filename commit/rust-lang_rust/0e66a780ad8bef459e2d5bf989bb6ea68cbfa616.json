{"sha": "0e66a780ad8bef459e2d5bf989bb6ea68cbfa616", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNjZhNzgwYWQ4YmVmNDU5ZTJkNWJmOTg5YmI2ZWE2OGNiZmE2MTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-29T19:48:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-29T19:48:19Z"}, "message": "Auto merge of #4588 - phansch:add_custom_ice_hook, r=Manishearth\n\nAdd custom ICE message that points to Clippy repo\n\nchangelog: Link to Clippy issue tracker in ICE messages\n\nThis utilizes https://github.com/rust-lang/rust/pull/60584 by setting\nour own `panic_hook` and pointing to our own issue tracker instead of\nthe rustc issue tracker.\n\nThis also adds a new internal lint to test the ICE message.\n\n**Potential downsides**\n\n* This essentially copies rustc's `report_ice` function as\n  `report_clippy_ice`. I think that's how it's meant to be implemented, but\n  maybe @jonas-schievink could have a look as well =)\n\n  The downside of more-or-less copying this function is that we have to\n  maintain it as well now.\n  The original function can be found [here][original].\n* `driver` now depends directly on `rustc` and `rustc_errors`\n\nCloses #2734\n\n[original]: https://github.com/rust-lang/rust/blob/59367b074f1523353dddefa678ffe3cac9fd4e50/src/librustc_driver/lib.rs#L1185", "tree": {"sha": "a4d9ce6bcb5b7079f29fe81758da969802089500", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4d9ce6bcb5b7079f29fe81758da969802089500"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e66a780ad8bef459e2d5bf989bb6ea68cbfa616", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e66a780ad8bef459e2d5bf989bb6ea68cbfa616", "html_url": "https://github.com/rust-lang/rust/commit/0e66a780ad8bef459e2d5bf989bb6ea68cbfa616", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e66a780ad8bef459e2d5bf989bb6ea68cbfa616/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d4e8e150fd8d53668de016fecdd2e548a793107", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d4e8e150fd8d53668de016fecdd2e548a793107", "html_url": "https://github.com/rust-lang/rust/commit/7d4e8e150fd8d53668de016fecdd2e548a793107"}, {"sha": "c1ccba005ff89a1a3b7972adfde222c593d7851d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1ccba005ff89a1a3b7972adfde222c593d7851d", "html_url": "https://github.com/rust-lang/rust/commit/c1ccba005ff89a1a3b7972adfde222c593d7851d"}], "stats": {"total": 127, "additions": 126, "deletions": 1}, "files": [{"sha": "6b757ac0a2fc6efee8316ca6e02d51b0be3babd4", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e66a780ad8bef459e2d5bf989bb6ea68cbfa616/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0e66a780ad8bef459e2d5bf989bb6ea68cbfa616/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=0e66a780ad8bef459e2d5bf989bb6ea68cbfa616", "patch": "@@ -40,6 +40,7 @@ semver = \"0.9\"\n rustc_tools_util = { version = \"0.2.0\", path = \"rustc_tools_util\"}\n git2 = { version = \"0.10\", optional = true }\n tempfile = { version = \"3.1.0\", optional = true }\n+lazy_static = \"1.0\"\n \n [dev-dependencies]\n cargo_metadata = \"0.9.0\""}, {"sha": "c1113daadd81fcb7fb87bb2aeceb76c1a0a558e1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e66a780ad8bef459e2d5bf989bb6ea68cbfa616/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e66a780ad8bef459e2d5bf989bb6ea68cbfa616/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=0e66a780ad8bef459e2d5bf989bb6ea68cbfa616", "patch": "@@ -963,6 +963,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n     let array_size_threshold = conf.array_size_threshold;\n     store.register_late_pass(move || box large_stack_arrays::LargeStackArrays::new(array_size_threshold));\n     store.register_early_pass(|| box as_conversions::AsConversions);\n+    store.register_early_pass(|| box utils::internal_lints::ProduceIce);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1057,6 +1058,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&utils::internal_lints::COMPILER_LINT_FUNCTIONS),\n         LintId::of(&utils::internal_lints::LINT_WITHOUT_LINT_PASS),\n         LintId::of(&utils::internal_lints::OUTER_EXPN_EXPN_DATA),\n+        LintId::of(&utils::internal_lints::PRODUCE_ICE),\n     ]);\n \n     store.register_group(true, \"clippy::all\", Some(\"clippy\"), vec!["}, {"sha": "ea7ea5818cd3f17ceb64507af0b42eefa9cf16e8", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0e66a780ad8bef459e2d5bf989bb6ea68cbfa616/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e66a780ad8bef459e2d5bf989bb6ea68cbfa616/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=0e66a780ad8bef459e2d5bf989bb6ea68cbfa616", "patch": "@@ -11,8 +11,10 @@ use rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintAr\n use rustc::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n+use syntax::ast;\n use syntax::ast::{Crate as AstCrate, ItemKind, Name};\n use syntax::source_map::Span;\n+use syntax::visit::FnKind;\n use syntax_pos::symbol::SymbolStr;\n \n declare_clippy_lint! {\n@@ -99,6 +101,24 @@ declare_clippy_lint! {\n     \"using `cx.outer_expn().expn_data()` instead of `cx.outer_expn_data()`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Not an actual lint. This lint is only meant for testing our customized internal compiler\n+    /// error message by calling `panic`.\n+    ///\n+    /// **Why is this bad?** ICE in large quantities can damage your teeth\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// **Example:**\n+    /// Bad:\n+    /// ```rust,ignore\n+    /// \ud83c\udf66\ud83c\udf66\ud83c\udf66\ud83c\udf66\ud83c\udf66\n+    /// ```\n+    pub PRODUCE_ICE,\n+    internal,\n+    \"this message should not appear anywhere as we ICE before and don't emit the lint\"\n+}\n+\n declare_lint_pass!(ClippyLintsInternal => [CLIPPY_LINTS_INTERNAL]);\n \n impl EarlyLintPass for ClippyLintsInternal {\n@@ -302,3 +322,22 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OuterExpnDataPass {\n         }\n     }\n }\n+\n+declare_lint_pass!(ProduceIce => [PRODUCE_ICE]);\n+\n+impl EarlyLintPass for ProduceIce {\n+    fn check_fn(&mut self, _: &EarlyContext<'_>, fn_kind: FnKind<'_>, _: &ast::FnDecl, _: Span, _: ast::NodeId) {\n+        if is_trigger_fn(fn_kind) {\n+            panic!(\"Testing the ICE message\");\n+        }\n+    }\n+}\n+\n+fn is_trigger_fn(fn_kind: FnKind<'_>) -> bool {\n+    match fn_kind {\n+        FnKind::ItemFn(ident, ..) | FnKind::Method(ident, ..) => {\n+            ident.name.as_str() == \"it_looks_like_you_are_trying_to_kill_clippy\"\n+        },\n+        FnKind::Closure(..) => false,\n+    }\n+}"}, {"sha": "fda304afcbe184a3bc18d764e70f3ade2fc46df0", "filename": "src/driver.rs", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/0e66a780ad8bef459e2d5bf989bb6ea68cbfa616/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e66a780ad8bef459e2d5bf989bb6ea68cbfa616/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=0e66a780ad8bef459e2d5bf989bb6ea68cbfa616", "patch": "@@ -5,13 +5,21 @@\n // FIXME: switch to something more ergonomic here, once available.\n // (Currently there is no way to opt into sysroot crates without `extern crate`.)\n #[allow(unused_extern_crates)]\n+extern crate rustc;\n+#[allow(unused_extern_crates)]\n extern crate rustc_driver;\n #[allow(unused_extern_crates)]\n+extern crate rustc_errors;\n+#[allow(unused_extern_crates)]\n extern crate rustc_interface;\n \n+use rustc::ty::TyCtxt;\n use rustc_interface::interface;\n use rustc_tools_util::*;\n \n+use lazy_static::lazy_static;\n+use std::borrow::Cow;\n+use std::panic;\n use std::path::{Path, PathBuf};\n use std::process::{exit, Command};\n \n@@ -221,9 +229,64 @@ You can use tool lints to allow or deny lints from your code, eg.:\n     );\n }\n \n+const BUG_REPORT_URL: &str = \"https://github.com/rust-lang/rust-clippy/issues/new\";\n+\n+lazy_static! {\n+    static ref ICE_HOOK: Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static> = {\n+        let hook = panic::take_hook();\n+        panic::set_hook(Box::new(|info| report_clippy_ice(info, BUG_REPORT_URL)));\n+        hook\n+    };\n+}\n+\n+fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n+    // Invoke our ICE handler, which prints the actual panic message and optionally a backtrace\n+    (*ICE_HOOK)(info);\n+\n+    // Separate the output with an empty line\n+    eprintln!();\n+\n+    let emitter = Box::new(rustc_errors::emitter::EmitterWriter::stderr(\n+        rustc_errors::ColorConfig::Auto,\n+        None,\n+        false,\n+        false,\n+        None,\n+        false,\n+    ));\n+    let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n+\n+    // a .span_bug or .bug call has already printed what\n+    // it wants to print.\n+    if !info.payload().is::<rustc_errors::ExplicitBug>() {\n+        let d = rustc_errors::Diagnostic::new(rustc_errors::Level::Bug, \"unexpected panic\");\n+        handler.emit_diagnostic(&d);\n+        handler.abort_if_errors_and_should_abort();\n+    }\n+\n+    let version_info = rustc_tools_util::get_version_info!();\n+\n+    let xs: Vec<Cow<'static, str>> = vec![\n+        \"the compiler unexpectedly panicked. this is a bug.\".into(),\n+        format!(\"we would appreciate a bug report: {}\", bug_report_url).into(),\n+        format!(\"Clippy version: {}\", version_info).into(),\n+    ];\n+\n+    for note in &xs {\n+        handler.note_without_error(&note);\n+    }\n+\n+    // If backtraces are enabled, also print the query stack\n+    let backtrace = std::env::var_os(\"RUST_BACKTRACE\").map_or(false, |x| &x != \"0\");\n+\n+    if backtrace {\n+        TyCtxt::try_print_query_stack(&handler);\n+    }\n+}\n+\n pub fn main() {\n     rustc_driver::init_rustc_env_logger();\n-    rustc_driver::install_ice_hook();\n+    lazy_static::initialize(&ICE_HOOK);\n     exit(\n         rustc_driver::catch_fatal_errors(move || {\n             use std::env;"}, {"sha": "2f58fbce30bfd1cb1bfdfd1c4f25d6e9de906e17", "filename": "tests/ui/custom_ice_message.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0e66a780ad8bef459e2d5bf989bb6ea68cbfa616/tests%2Fui%2Fcustom_ice_message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e66a780ad8bef459e2d5bf989bb6ea68cbfa616/tests%2Fui%2Fcustom_ice_message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcustom_ice_message.rs?ref=0e66a780ad8bef459e2d5bf989bb6ea68cbfa616", "patch": "@@ -0,0 +1,9 @@\n+// rustc-env:RUST_BACKTRACE=0\n+// normalize-stderr-test: \"Clippy version: .*\" -> \"Clippy version: foo\"\n+// normalize-stderr-test: \"internal_lints.rs:\\d*:\\d*\" -> \"internal_lints.rs\"\n+\n+#![deny(clippy::internal)]\n+\n+fn it_looks_like_you_are_trying_to_kill_clippy() {}\n+\n+fn main() {}"}, {"sha": "817e48724337b053eda06f75e232470b6880f6a5", "filename": "tests/ui/custom_ice_message.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0e66a780ad8bef459e2d5bf989bb6ea68cbfa616/tests%2Fui%2Fcustom_ice_message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e66a780ad8bef459e2d5bf989bb6ea68cbfa616/tests%2Fui%2Fcustom_ice_message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcustom_ice_message.stderr?ref=0e66a780ad8bef459e2d5bf989bb6ea68cbfa616", "patch": "@@ -0,0 +1,11 @@\n+thread 'rustc' panicked at 'Testing the ICE message', clippy_lints/src/utils/internal_lints.rs\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n+\n+error: internal compiler error: unexpected panic\n+\n+note: the compiler unexpectedly panicked. this is a bug.\n+\n+note: we would appreciate a bug report: https://github.com/rust-lang/rust-clippy/issues/new\n+\n+note: Clippy version: foo\n+"}]}