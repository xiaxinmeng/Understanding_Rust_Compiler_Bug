{"sha": "f2ea7853ee9b2b44464b93a6008ce8e1e39e2127", "node_id": "C_kwDOAAsO6NoAKGYyZWE3ODUzZWU5YjJiNDQ0NjRiOTNhNjAwOGNlOGUxZTM5ZTIxMjc", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-01-02T12:15:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-01-02T12:15:04Z"}, "message": "start top-level entry point tests", "tree": {"sha": "4c94456d795d2b4f26084496f0aeba9c0d3c0c58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c94456d795d2b4f26084496f0aeba9c0d3c0c58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2ea7853ee9b2b44464b93a6008ce8e1e39e2127", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2ea7853ee9b2b44464b93a6008ce8e1e39e2127", "html_url": "https://github.com/rust-lang/rust/commit/f2ea7853ee9b2b44464b93a6008ce8e1e39e2127", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2ea7853ee9b2b44464b93a6008ce8e1e39e2127/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e366b3c730c343130f7935400e00bba96e77c9da", "url": "https://api.github.com/repos/rust-lang/rust/commits/e366b3c730c343130f7935400e00bba96e77c9da", "html_url": "https://github.com/rust-lang/rust/commit/e366b3c730c343130f7935400e00bba96e77c9da"}], "stats": {"total": 72, "additions": 70, "deletions": 2}, "files": [{"sha": "73bf472f386ade496f3e485dd87b707667f8e5c1", "filename": "crates/parser/src/tests.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea7853ee9b2b44464b93a6008ce8e1e39e2127/crates%2Fparser%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea7853ee9b2b44464b93a6008ce8e1e39e2127/crates%2Fparser%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests.rs?ref=f2ea7853ee9b2b44464b93a6008ce8e1e39e2127", "patch": "@@ -86,22 +86,34 @@ fn parse(entry: TopEntryPoint, text: &str) -> (String, bool) {\n     let mut buf = String::new();\n     let mut errors = Vec::new();\n     let mut indent = String::new();\n+    let mut depth = 0;\n+    let mut len = 0;\n     lexed.intersperse_trivia(&output, &mut |step| match step {\n         crate::StrStep::Token { kind, text } => {\n+            assert!(depth > 0);\n+            len += text.len();\n             write!(buf, \"{}\", indent).unwrap();\n             write!(buf, \"{:?} {:?}\\n\", kind, text).unwrap();\n         }\n         crate::StrStep::Enter { kind } => {\n+            assert!(depth > 0 || len == 0);\n+            depth += 1;\n             write!(buf, \"{}\", indent).unwrap();\n             write!(buf, \"{:?}\\n\", kind).unwrap();\n             indent.push_str(\"  \");\n         }\n         crate::StrStep::Exit => {\n+            assert!(depth > 0);\n+            depth -= 1;\n             indent.pop();\n             indent.pop();\n         }\n-        crate::StrStep::Error { msg, pos } => errors.push(format!(\"error {}: {}\\n\", pos, msg)),\n+        crate::StrStep::Error { msg, pos } => {\n+            assert!(depth > 0);\n+            errors.push(format!(\"error {}: {}\\n\", pos, msg))\n+        }\n     });\n+    assert_eq!(len, text.len());\n \n     for (token, msg) in lexed.errors() {\n         let pos = lexed.text_start(token);"}, {"sha": "ea8ff41502987d16549ee4487fdda9fc5091c98b", "filename": "crates/parser/src/tests/entries.rs", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea7853ee9b2b44464b93a6008ce8e1e39e2127/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea7853ee9b2b44464b93a6008ce8e1e39e2127/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs?ref=f2ea7853ee9b2b44464b93a6008ce8e1e39e2127", "patch": "@@ -1,4 +1,6 @@\n-use crate::{LexedStr, PrefixEntryPoint, Step};\n+use expect_test::expect;\n+\n+use crate::{LexedStr, PrefixEntryPoint, Step, TopEntryPoint};\n \n #[test]\n fn vis() {\n@@ -83,6 +85,7 @@ fn meta_item() {\n     check_prefix(PrefixEntryPoint::MetaItem, \"path::attr = 2 * 2!\", \"path::attr = 2 * 2\");\n }\n \n+#[track_caller]\n fn check_prefix(entry: PrefixEntryPoint, input: &str, prefix: &str) {\n     let lexed = LexedStr::new(input);\n     let input = lexed.to_input();\n@@ -108,3 +111,56 @@ fn check_prefix(entry: PrefixEntryPoint, input: &str, prefix: &str) {\n     let buf = &lexed.as_str()[..lexed.text_start(i)];\n     assert_eq!(buf, prefix);\n }\n+\n+#[test]\n+fn source_file() {\n+    check_top(\n+        TopEntryPoint::SourceFile,\n+        \"\",\n+        expect![[r#\"\n+        SOURCE_FILE\n+    \"#]],\n+    );\n+\n+    check_top(\n+        TopEntryPoint::SourceFile,\n+        \"struct S;\",\n+        expect![[r#\"\n+        SOURCE_FILE\n+          STRUCT\n+            STRUCT_KW \"struct\"\n+            WHITESPACE \" \"\n+            NAME\n+              IDENT \"S\"\n+            SEMICOLON \";\"\n+    \"#]],\n+    );\n+\n+    check_top(\n+        TopEntryPoint::SourceFile,\n+        \"@error@\",\n+        expect![[r#\"\n+        SOURCE_FILE\n+          ERROR\n+            AT \"@\"\n+          MACRO_CALL\n+            PATH\n+              PATH_SEGMENT\n+                NAME_REF\n+                  IDENT \"error\"\n+          ERROR\n+            AT \"@\"\n+        error 0: expected an item\n+        error 6: expected BANG\n+        error 6: expected `{`, `[`, `(`\n+        error 6: expected SEMICOLON\n+        error 6: expected an item\n+    \"#]],\n+    );\n+}\n+\n+#[track_caller]\n+fn check_top(entry: TopEntryPoint, input: &str, expect: expect_test::Expect) {\n+    let (parsed, _errors) = super::parse(entry, input);\n+    expect.assert_eq(&parsed)\n+}"}]}