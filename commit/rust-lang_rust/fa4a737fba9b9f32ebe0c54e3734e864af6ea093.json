{"sha": "fa4a737fba9b9f32ebe0c54e3734e864af6ea093", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNGE3MzdmYmE5YjlmMzJlYmUwYzU0ZTM3MzRlODY0YWY2ZWEwOTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-13T13:53:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-13T13:53:11Z"}, "message": "Auto merge of #5790 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? @ghost\n\nchangelog: none", "tree": {"sha": "f512cea03aebd69adaf7302407a608ff74eb80eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f512cea03aebd69adaf7302407a608ff74eb80eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa4a737fba9b9f32ebe0c54e3734e864af6ea093", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa4a737fba9b9f32ebe0c54e3734e864af6ea093", "html_url": "https://github.com/rust-lang/rust/commit/fa4a737fba9b9f32ebe0c54e3734e864af6ea093", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa4a737fba9b9f32ebe0c54e3734e864af6ea093/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d611d92240d43d9a04cf8db0cb4fb5690f8249c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d611d92240d43d9a04cf8db0cb4fb5690f8249c", "html_url": "https://github.com/rust-lang/rust/commit/7d611d92240d43d9a04cf8db0cb4fb5690f8249c"}, {"sha": "b57ceb45b0aa11945c2a7375b097e6389d33f042", "url": "https://api.github.com/repos/rust-lang/rust/commits/b57ceb45b0aa11945c2a7375b097e6389d33f042", "html_url": "https://github.com/rust-lang/rust/commit/b57ceb45b0aa11945c2a7375b097e6389d33f042"}], "stats": {"total": 50, "additions": 21, "deletions": 29}, "files": [{"sha": "ef01364b7d9655b97ee426fdcdd29ce7a6e4dcdf", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa4a737fba9b9f32ebe0c54e3734e864af6ea093/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4a737fba9b9f32ebe0c54e3734e864af6ea093/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=fa4a737fba9b9f32ebe0c54e3734e864af6ea093", "patch": "@@ -72,7 +72,7 @@ declare_clippy_lint! {\n     /// **What it does:** Checks for `extern crate` and `use` items annotated with\n     /// lint attributes.\n     ///\n-    /// This lint whitelists `#[allow(unused_imports)]`, `#[allow(deprecated)]` and\n+    /// This lint permits `#[allow(unused_imports)]`, `#[allow(deprecated)]` and\n     /// `#[allow(unreachable_pub)]` on `use` items and `#[allow(unused_imports)]` on\n     /// `extern crate` items with a `#[macro_use]` attribute.\n     ///\n@@ -319,7 +319,7 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n                         if let Some(ident) = attr.ident() {\n                             match &*ident.as_str() {\n                                 \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n-                                    // whitelist `unused_imports`, `deprecated` and `unreachable_pub` for `use` items\n+                                    // permit `unused_imports`, `deprecated` and `unreachable_pub` for `use` items\n                                     // and `unused_imports` for `extern crate` items with `macro_use`\n                                     for lint in lint_list {\n                                         match item.kind {"}, {"sha": "01eff28cb195a26b27589e6960871aff443d718d", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa4a737fba9b9f32ebe0c54e3734e864af6ea093/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4a737fba9b9f32ebe0c54e3734e864af6ea093/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=fa4a737fba9b9f32ebe0c54e3734e864af6ea093", "patch": "@@ -16,7 +16,7 @@ declare_clippy_lint! {\n     /// **Known problems:** False negatives: We had some false positives regarding\n     /// calls (notably [racer](https://github.com/phildawes/racer) had one instance\n     /// of `x.pop() && x.pop()`), so we removed matching any function or method\n-    /// calls. We may introduce a whitelist of known pure functions in the future.\n+    /// calls. We may introduce a list of known pure functions in the future.\n     ///\n     /// **Example:**\n     /// ```rust"}, {"sha": "1d756477be8cfb5bc8bad24e5bac1b1ac527f1dd", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa4a737fba9b9f32ebe0c54e3734e864af6ea093/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4a737fba9b9f32ebe0c54e3734e864af6ea093/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=fa4a737fba9b9f32ebe0c54e3734e864af6ea093", "patch": "@@ -99,7 +99,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n \n         // Allow `Borrow` or functions to be taken by value\n         let borrow_trait = need!(get_trait_def_id(cx, &paths::BORROW_TRAIT));\n-        let whitelisted_traits = [\n+        let allowed_traits = [\n             need!(cx.tcx.lang_items().fn_trait()),\n             need!(cx.tcx.lang_items().fn_once_trait()),\n             need!(cx.tcx.lang_items().fn_mut_trait()),\n@@ -183,7 +183,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                 if !is_self(arg);\n                 if !ty.is_mutable_ptr();\n                 if !is_copy(cx, ty);\n-                if !whitelisted_traits.iter().any(|&t| implements_trait(cx, ty, t, &[]));\n+                if !allowed_traits.iter().any(|&t| implements_trait(cx, ty, t, &[]));\n                 if !implements_borrow_trait;\n                 if !all_borrowable_trait;\n "}, {"sha": "7128fee9bcf5157c238e089486bdf75db299a080", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fa4a737fba9b9f32ebe0c54e3734e864af6ea093/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4a737fba9b9f32ebe0c54e3734e864af6ea093/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=fa4a737fba9b9f32ebe0c54e3734e864af6ea093", "patch": "@@ -78,7 +78,7 @@ struct ExistingName {\n     interned: SymbolStr,\n     span: Span,\n     len: usize,\n-    whitelist: &'static [&'static str],\n+    exemptions: &'static [&'static str],\n }\n \n struct SimilarNamesLocalVisitor<'a, 'tcx> {\n@@ -117,7 +117,7 @@ impl<'a, 'tcx> SimilarNamesLocalVisitor<'a, 'tcx> {\n // this list contains lists of names that are allowed to be similar\n // the assumption is that no name is ever contained in multiple lists.\n #[rustfmt::skip]\n-const WHITELIST: &[&[&str]] = &[\n+const ALLOWED_TO_BE_SIMILAR: &[&[&str]] = &[\n     &[\"parsed\", \"parser\"],\n     &[\"lhs\", \"rhs\"],\n     &[\"tx\", \"rx\"],\n@@ -156,17 +156,17 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n }\n \n #[must_use]\n-fn get_whitelist(interned_name: &str) -> Option<&'static [&'static str]> {\n-    for &allow in WHITELIST {\n-        if whitelisted(interned_name, allow) {\n-            return Some(allow);\n+fn get_exemptions(interned_name: &str) -> Option<&'static [&'static str]> {\n+    for &list in ALLOWED_TO_BE_SIMILAR {\n+        if allowed_to_be_similar(interned_name, list) {\n+            return Some(list);\n         }\n     }\n     None\n }\n \n #[must_use]\n-fn whitelisted(interned_name: &str, list: &[&str]) -> bool {\n+fn allowed_to_be_similar(interned_name: &str, list: &[&str]) -> bool {\n     list.iter()\n         .any(|&name| interned_name.starts_with(name) || interned_name.ends_with(name))\n }\n@@ -212,7 +212,7 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n             return;\n         }\n         for existing_name in &self.0.names {\n-            if whitelisted(&interned_name, existing_name.whitelist) {\n+            if allowed_to_be_similar(&interned_name, existing_name.exemptions) {\n                 continue;\n             }\n             let mut split_at = None;\n@@ -301,7 +301,7 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n             return;\n         }\n         self.0.names.push(ExistingName {\n-            whitelist: get_whitelist(&interned_name).unwrap_or(&[]),\n+            exemptions: get_exemptions(&interned_name).unwrap_or(&[]),\n             interned: interned_name,\n             span: ident.span,\n             len: count,"}, {"sha": "4797771e7bdbb4aa9e95dba4f3a00c9f587cda42", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa4a737fba9b9f32ebe0c54e3734e864af6ea093/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4a737fba9b9f32ebe0c54e3734e864af6ea093/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=fa4a737fba9b9f32ebe0c54e3734e864af6ea093", "patch": "@@ -5,7 +5,7 @@ use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n \n-const ODD_FUNCTIONS_WHITELIST: [&str; 14] = [\n+const ALLOWED_ODD_FUNCTIONS: [&str; 14] = [\n     \"asin\",\n     \"asinh\",\n     \"atan\",\n@@ -109,7 +109,7 @@ impl EarlyLintPass for Precedence {\n                     if let ExprKind::Lit(ref lit) = slf.kind {\n                         match lit.kind {\n                             LitKind::Int(..) | LitKind::Float(..) => {\n-                                if ODD_FUNCTIONS_WHITELIST\n+                                if ALLOWED_ODD_FUNCTIONS\n                                     .iter()\n                                     .any(|odd_function| **odd_function == *path_segment_str)\n                                 {"}, {"sha": "bca388ecdcc3846b4b317808547cbb054471ca42", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa4a737fba9b9f32ebe0c54e3734e864af6ea093/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4a737fba9b9f32ebe0c54e3734e864af6ea093/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=fa4a737fba9b9f32ebe0c54e3734e864af6ea093", "patch": "@@ -1246,7 +1246,7 @@ fn check_loss_of_sign(cx: &LateContext<'_>, expr: &Expr<'_>, op: &Expr<'_>, cast\n     // don't lint for the result of methods that always return non-negative values\n     if let ExprKind::MethodCall(ref path, _, _, _) = op.kind {\n         let mut method_name = path.ident.name.as_str();\n-        let whitelisted_methods = [\"abs\", \"checked_abs\", \"rem_euclid\", \"checked_rem_euclid\"];\n+        let allowed_methods = [\"abs\", \"checked_abs\", \"rem_euclid\", \"checked_rem_euclid\"];\n \n         if_chain! {\n             if method_name == \"unwrap\";\n@@ -1257,7 +1257,7 @@ fn check_loss_of_sign(cx: &LateContext<'_>, expr: &Expr<'_>, op: &Expr<'_>, cast\n             }\n         }\n \n-        if whitelisted_methods.iter().any(|&name| method_name == name) {\n+        if allowed_methods.iter().any(|&name| method_name == name) {\n             return;\n         }\n     }"}, {"sha": "9f87de20baff36866965bccd7c4ef87774789645", "filename": "tests/ui/crashes/third-party/clippy.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fa4a737fba9b9f32ebe0c54e3734e864af6ea093/tests%2Fui%2Fcrashes%2Fthird-party%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fa4a737fba9b9f32ebe0c54e3734e864af6ea093/tests%2Fui%2Fcrashes%2Fthird-party%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fthird-party%2Fclippy.toml?ref=fa4a737fba9b9f32ebe0c54e3734e864af6ea093", "previous_filename": "tests/ui/crashes/whitelist/clippy.toml"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "tests/ui/crashes/third-party/conf_allowlisted.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fa4a737fba9b9f32ebe0c54e3734e864af6ea093/tests%2Fui%2Fcrashes%2Fthird-party%2Fconf_allowlisted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4a737fba9b9f32ebe0c54e3734e864af6ea093/tests%2Fui%2Fcrashes%2Fthird-party%2Fconf_allowlisted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fthird-party%2Fconf_allowlisted.rs?ref=fa4a737fba9b9f32ebe0c54e3734e864af6ea093", "previous_filename": "tests/ui/crashes/whitelist/conf_whitelisted.rs"}, {"sha": "74d32b8a1aa933a0960b5751b503103b2735c384", "filename": "tests/ui/missing_const_for_fn/could_be_const.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa4a737fba9b9f32ebe0c54e3734e864af6ea093/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa4a737fba9b9f32ebe0c54e3734e864af6ea093/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr?ref=fa4a737fba9b9f32ebe0c54e3734e864af6ea093", "patch": "@@ -57,14 +57,6 @@ LL | |     t\n LL | | }\n    | |_^\n \n-error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:48:1\n-   |\n-LL | / fn sub(x: u32) -> usize {\n-LL | |     unsafe { transmute(&x) }\n-LL | | }\n-   | |_^\n-\n error: this could be a `const fn`\n   --> $DIR/could_be_const.rs:67:9\n    |\n@@ -73,5 +65,5 @@ LL | |             B\n LL | |         }\n    | |_________^\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "7a9ba55590dce0c0154ead2ef1c5506915fda7e6", "filename": "tests/ui/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa4a737fba9b9f32ebe0c54e3734e864af6ea093/tests%2Fui%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4a737fba9b9f32ebe0c54e3734e864af6ea093/tests%2Fui%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.rs?ref=fa4a737fba9b9f32ebe0c54e3734e864af6ea093", "patch": "@@ -116,7 +116,7 @@ extern \"C\" fn ext(x: MaybeUninit<usize>) -> usize {\n     unsafe { x.assume_init() }\n }\n \n-// whitelist RangeArgument\n+// exempt RangeArgument\n fn range<T: ::std::ops::RangeBounds<usize>>(range: T) {\n     let _ = range.start_bound();\n }"}, {"sha": "2d392c593b3e7e58cc2d160067f48eb43b1f7a1c", "filename": "tests/ui/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa4a737fba9b9f32ebe0c54e3734e864af6ea093/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4a737fba9b9f32ebe0c54e3734e864af6ea093/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs?ref=fa4a737fba9b9f32ebe0c54e3734e864af6ea093", "patch": "@@ -57,6 +57,6 @@ fn main() {\n     // The macro always negates the result of the given comparison in its\n     // internal check which automatically triggered the lint. As it's an\n     // external macro there was no chance to do anything about it which led\n-    // to a whitelisting of all external macros.\n+    // to an exempting of all external macros.\n     assert!(a_value < another_value);\n }"}]}