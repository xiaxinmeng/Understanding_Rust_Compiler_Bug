{"sha": "eb70a72459816dc0bd187c7e2961f790f928a2f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNzBhNzI0NTk4MTZkYzBiZDE4N2M3ZTI5NjFmNzkwZjkyOGEyZjg=", "commit": {"author": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-02-05T15:59:23Z"}, "committer": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-02-26T16:29:36Z"}, "message": "Fix false negative", "tree": {"sha": "96cbecac62e391e7981a4a2c39f23eaf7f8de7d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96cbecac62e391e7981a4a2c39f23eaf7f8de7d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb70a72459816dc0bd187c7e2961f790f928a2f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJcdWlxAAoJENWyu1zcMzS8Ze4H/RS/GsFXpHgX6z8LEnV5ur2h\n0DMuc2Sx7nzID7b2sOaH3ZtrU/lYfvXgcqLqFXuaoHY959NtC6AzutEPR1dNsNtg\nYBZ9cE9ta1ekPT9gvj/hvzSiVwBsE/8P+pBf0JCH9RAfuUDmXWm4F+kWFq7GEOJZ\nKHR3AehW8Q03iu3NuNitvMEtsFdxDx/5qwVpf+FrGeQtw4uJZpSdJAOz7oZUrysV\nGIZfV6vM6fht7SL5CQ1IOFHXJTu5pZ9e4PKzls4M1OEQ6AU1CP18tjx6xvLSKgha\nIxerUOLREbCh3K1skGPb1U8Qa7gXt3Nm5gsfrbznFYabSnw0JItsVuw2yPnfDR8=\n=H6Xr\n-----END PGP SIGNATURE-----", "payload": "tree 96cbecac62e391e7981a4a2c39f23eaf7f8de7d1\nparent fec6e55d1d61c5b0ceee5044bf92d462e56145c5\nauthor Wilco Kusee <wilcokusee@gmail.com> 1549382363 +0100\ncommitter Wilco Kusee <wilcokusee@gmail.com> 1551198576 +0100\n\nFix false negative\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb70a72459816dc0bd187c7e2961f790f928a2f8", "html_url": "https://github.com/rust-lang/rust/commit/eb70a72459816dc0bd187c7e2961f790f928a2f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb70a72459816dc0bd187c7e2961f790f928a2f8/comments", "author": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fec6e55d1d61c5b0ceee5044bf92d462e56145c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fec6e55d1d61c5b0ceee5044bf92d462e56145c5", "html_url": "https://github.com/rust-lang/rust/commit/fec6e55d1d61c5b0ceee5044bf92d462e56145c5"}], "stats": {"total": 103, "additions": 57, "deletions": 46}, "files": [{"sha": "9a8880a7960a7778a5a42a180bdc24630a04be99", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/eb70a72459816dc0bd187c7e2961f790f928a2f8/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb70a72459816dc0bd187c7e2961f790f928a2f8/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=eb70a72459816dc0bd187c7e2961f790f928a2f8", "patch": "@@ -2,9 +2,9 @@ use crate::utils::paths;\n use crate::utils::{is_copy, match_type, snippet, span_lint, span_note_and_lint};\n use rustc::hir::intravisit::{walk_path, NestedVisitorMap, Visitor};\n use rustc::hir::{self, *};\n-use rustc::hir::def_id::DefId;\n use rustc::lint::LateContext;\n use rustc_data_structures::fx::FxHashSet;\n+use syntax::symbol::Symbol;\n \n use super::OPTION_MAP_UNWRAP_OR;\n \n@@ -17,7 +17,6 @@ pub(super) fn lint<'a, 'tcx>(\n ) {\n     // lint if the caller of `map()` is an `Option`\n     if match_type(cx, cx.tables.expr_ty(&map_args[0]), &paths::OPTION) {\n-\n         if !is_copy(cx, cx.tables.expr_ty(&unwrap_args[1])) {\n             // Do not lint if the `map` argument uses identifiers in the `map`\n             // argument that are also used in the `unwrap_or` argument\n@@ -80,14 +79,12 @@ pub(super) fn lint<'a, 'tcx>(\n \n struct UnwrapVisitor<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,\n-    identifiers: FxHashSet<DefId>,\n+    identifiers: FxHashSet<Symbol>,\n }\n \n impl<'a, 'tcx: 'a> Visitor<'tcx> for UnwrapVisitor<'a, 'tcx> {\n     fn visit_path(&mut self, path: &'tcx Path, _id: HirId) {\n-        if let Some(def_id) = path.def.opt_def_id() {\n-            self.identifiers.insert(def_id);\n-        }\n+        self.identifiers.insert(ident(path));\n         walk_path(self, path);\n     }\n \n@@ -98,17 +95,15 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for UnwrapVisitor<'a, 'tcx> {\n \n struct MapExprVisitor<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,\n-    identifiers: FxHashSet<DefId>,\n+    identifiers: FxHashSet<Symbol>,\n     found_identifier: bool,\n }\n \n impl<'a, 'tcx: 'a> Visitor<'tcx> for MapExprVisitor<'a, 'tcx> {\n     fn visit_path(&mut self, path: &'tcx Path, _id: HirId) {\n-        if let Some(def_id) = path.def.opt_def_id() {\n-            if self.identifiers.contains(&def_id) {\n-                self.found_identifier = true;\n-                return;\n-            }\n+        if self.identifiers.contains(&ident(path)) {\n+            self.found_identifier = true;\n+            return;\n         }\n         walk_path(self, path);\n     }\n@@ -117,3 +112,11 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for MapExprVisitor<'a, 'tcx> {\n         NestedVisitorMap::All(&self.cx.tcx.hir())\n     }\n }\n+\n+fn ident(path: &Path) -> Symbol {\n+    path.segments\n+        .last()\n+        .expect(\"segments should be composed of at least 1 element\")\n+        .ident\n+        .name\n+}"}, {"sha": "fb617c0cb26518855eacc77f09e61a6caecc9242", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 42, "deletions": 34, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/eb70a72459816dc0bd187c7e2961f790f928a2f8/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb70a72459816dc0bd187c7e2961f790f928a2f8/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=eb70a72459816dc0bd187c7e2961f790f928a2f8", "patch": "@@ -89,9 +89,17 @@ LL | |         .unwrap_or(None);\n    |\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n-error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n+error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n   --> $DIR/methods.rs:187:13\n    |\n+LL |     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: replace `map(|p| format!(\"{}.\", p)).unwrap_or(id)` with `map_or(id, |p| format!(\"{}.\", p))`\n+\n+error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n+  --> $DIR/methods.rs:191:13\n+   |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n LL | |\n@@ -102,7 +110,7 @@ LL | |                .unwrap_or_else(|| 0); // should lint even though this cal\n    = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:191:13\n+  --> $DIR/methods.rs:195:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -112,7 +120,7 @@ LL | |               ).unwrap_or_else(|| 0);\n    | |____________________________________^\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:195:13\n+  --> $DIR/methods.rs:199:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -122,15 +130,15 @@ LL | |                 );\n    | |_________________^\n \n error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:204:13\n+  --> $DIR/methods.rs:208:13\n    |\n LL |     let _ = opt.map_or(None, |x| Some(x + 1));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using and_then instead: `opt.and_then(|x| Some(x + 1))`\n    |\n    = note: `-D clippy::option-map-or-none` implied by `-D warnings`\n \n error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:206:13\n+  --> $DIR/methods.rs:210:13\n    |\n LL |       let _ = opt.map_or(None, |x| {\n    |  _____________^\n@@ -146,7 +154,7 @@ LL |                        });\n    |\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:232:13\n+  --> $DIR/methods.rs:236:13\n    |\n LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -155,7 +163,7 @@ LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:235:13\n+  --> $DIR/methods.rs:239:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^\n@@ -165,7 +173,7 @@ LL | |                    ).next();\n    | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:251:13\n+  --> $DIR/methods.rs:255:13\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -174,7 +182,7 @@ LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:254:13\n+  --> $DIR/methods.rs:258:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -184,15 +192,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:260:13\n+  --> $DIR/methods.rs:264:13\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:263:13\n+  --> $DIR/methods.rs:267:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -202,15 +210,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:269:13\n+  --> $DIR/methods.rs:273:13\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:272:13\n+  --> $DIR/methods.rs:276:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^\n@@ -220,130 +228,130 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:309:22\n+  --> $DIR/methods.rs:313:22\n    |\n LL |     with_constructor.unwrap_or(make());\n    |                      ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(make)`\n    |\n    = note: `-D clippy::or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/methods.rs:312:5\n+  --> $DIR/methods.rs:316:5\n    |\n LL |     with_new.unwrap_or(Vec::new());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:315:21\n+  --> $DIR/methods.rs:319:21\n    |\n LL |     with_const_args.unwrap_or(Vec::with_capacity(12));\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:318:14\n+  --> $DIR/methods.rs:322:14\n    |\n LL |     with_err.unwrap_or(make());\n    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:321:19\n+  --> $DIR/methods.rs:325:19\n    |\n LL |     with_err_args.unwrap_or(Vec::with_capacity(12));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/methods.rs:324:5\n+  --> $DIR/methods.rs:328:5\n    |\n LL |     with_default_trait.unwrap_or(Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/methods.rs:327:5\n+  --> $DIR/methods.rs:331:5\n    |\n LL |     with_default_type.unwrap_or(u64::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:330:14\n+  --> $DIR/methods.rs:334:14\n    |\n LL |     with_vec.unwrap_or(vec![]);\n    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| vec![])`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:335:21\n+  --> $DIR/methods.rs:339:21\n    |\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/methods.rs:338:19\n+  --> $DIR/methods.rs:342:19\n    |\n LL |     map.entry(42).or_insert(String::new());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/methods.rs:341:21\n+  --> $DIR/methods.rs:345:21\n    |\n LL |     btree.entry(42).or_insert(String::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:344:21\n+  --> $DIR/methods.rs:348:21\n    |\n LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:355:23\n+  --> $DIR/methods.rs:359:23\n    |\n LL |         let bad_vec = some_vec.iter().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:356:26\n+  --> $DIR/methods.rs:360:26\n    |\n LL |         let bad_slice = &some_vec[..].iter().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:357:31\n+  --> $DIR/methods.rs:361:31\n    |\n LL |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:358:29\n+  --> $DIR/methods.rs:362:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:363:23\n+  --> $DIR/methods.rs:367:23\n    |\n LL |         let bad_vec = some_vec.iter_mut().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:366:26\n+  --> $DIR/methods.rs:370:26\n    |\n LL |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:369:29\n+  --> $DIR/methods.rs:373:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-  --> $DIR/methods.rs:381:13\n+  --> $DIR/methods.rs:385:13\n    |\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n \n-error: aborting due to 43 previous errors\n+error: aborting due to 44 previous errors\n "}]}