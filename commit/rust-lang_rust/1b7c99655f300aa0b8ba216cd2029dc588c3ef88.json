{"sha": "1b7c99655f300aa0b8ba216cd2029dc588c3ef88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiN2M5OTY1NWYzMDBhYTBiOGJhMjE2Y2QyMDI5ZGM1ODhjM2VmODg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-21T08:28:23Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-21T21:42:15Z"}, "message": "std::rt: Support os::args", "tree": {"sha": "429f83fc36d55be380d74903d409bf7f3ba4d419", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/429f83fc36d55be380d74903d409bf7f3ba4d419"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b7c99655f300aa0b8ba216cd2029dc588c3ef88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b7c99655f300aa0b8ba216cd2029dc588c3ef88", "html_url": "https://github.com/rust-lang/rust/commit/1b7c99655f300aa0b8ba216cd2029dc588c3ef88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b7c99655f300aa0b8ba216cd2029dc588c3ef88/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a9a6e45911636eae3ec4e1c111bc0e120601a5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a9a6e45911636eae3ec4e1c111bc0e120601a5a", "html_url": "https://github.com/rust-lang/rust/commit/7a9a6e45911636eae3ec4e1c111bc0e120601a5a"}], "stats": {"total": 187, "additions": 176, "deletions": 11}, "files": [{"sha": "765dd30febcfb75999064c8ffc1d19587c758209", "filename": "src/libstd/os.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1b7c99655f300aa0b8ba216cd2029dc588c3ef88/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7c99655f300aa0b8ba216cd2029dc588c3ef88/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=1b7c99655f300aa0b8ba216cd2029dc588c3ef88", "patch": "@@ -40,6 +40,8 @@ use option::{Some, None};\n use os;\n use prelude::*;\n use ptr;\n+use rt;\n+use rt::TaskContext;\n use str;\n use uint;\n use unstable::finally::Finally;\n@@ -1167,10 +1169,17 @@ pub fn real_args() -> ~[~str] {\n #[cfg(target_os = \"android\")]\n #[cfg(target_os = \"freebsd\")]\n pub fn real_args() -> ~[~str] {\n-    unsafe {\n-        let argc = rustrt::rust_get_argc();\n-        let argv = rustrt::rust_get_argv();\n-        load_argc_and_argv(argc, argv)\n+    if rt::context() == TaskContext {\n+        match rt::args::clone() {\n+            Some(args) => args,\n+            None => fail!(\"process arguments not initialized\")\n+        }\n+    } else {\n+        unsafe {\n+            let argc = rustrt::rust_get_argc();\n+            let argv = rustrt::rust_get_argv();\n+            load_argc_and_argv(argc, argv)\n+        }\n     }\n }\n "}, {"sha": "75ee4f381f6ef6c454f8f351cf670c6f16812570", "filename": "src/libstd/rt/args.rs", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/1b7c99655f300aa0b8ba216cd2029dc588c3ef88/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7c99655f300aa0b8ba216cd2029dc588c3ef88/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=1b7c99655f300aa0b8ba216cd2029dc588c3ef88", "patch": "@@ -0,0 +1,125 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Global storage for command line arguments\n+//!\n+//! The current incarnation of the Rust runtime expects for\n+//! the processes `argc` and `argv` arguments to be stored\n+//! in a globally-accessible location for use by the `os` module.\n+//!\n+//! XXX: Would be nice for this to not exist.\n+//! XXX: This has a lot of C glue for lack of globals.\n+\n+use libc;\n+use option::{Option, Some, None};\n+use str;\n+use uint;\n+use unstable::finally::Finally;\n+use util;\n+\n+/// One-time global initialization.\n+pub unsafe fn init(argc: int, argv: **u8) {\n+    let args = load_argc_and_argv(argc, argv);\n+    put(args);\n+}\n+\n+/// One-time global cleanup.\n+pub fn cleanup() {\n+    rtassert!(take().is_some());\n+}\n+\n+/// Take the global arguments from global storage.\n+pub fn take() -> Option<~[~str]> {\n+    with_lock(|| unsafe {\n+        let ptr = get_global_ptr();\n+        let val = util::replace(&mut *ptr, None);\n+        val.map(|s: &~~[~str]| (**s).clone())\n+    })\n+}\n+\n+/// Give the global arguments to global storage.\n+///\n+/// It is an error if the arguments already exist.\n+pub fn put(args: ~[~str]) {\n+    with_lock(|| unsafe {\n+        let ptr = get_global_ptr();\n+        rtassert!((*ptr).is_none());\n+        (*ptr) = Some(~args.clone());\n+    })\n+}\n+\n+/// Make a clone of the global arguments.\n+pub fn clone() -> Option<~[~str]> {\n+    with_lock(|| unsafe {\n+        let ptr = get_global_ptr();\n+        (*ptr).map(|s: &~~[~str]| (**s).clone())\n+    })\n+}\n+\n+fn with_lock<T>(f: &fn() -> T) -> T {\n+    do (|| {\n+        unsafe {\n+            rust_take_global_args_lock();\n+            f()\n+        }\n+    }).finally {\n+        unsafe {\n+            rust_drop_global_args_lock();\n+        }\n+    }\n+}\n+\n+fn get_global_ptr() -> *mut Option<~~[~str]> {\n+    unsafe { rust_get_global_args_ptr() }\n+}\n+\n+// Copied from `os`.\n+unsafe fn load_argc_and_argv(argc: int, argv: **u8) -> ~[~str] {\n+    let mut args = ~[];\n+    for uint::range(0, argc as uint) |i| {\n+        args.push(str::raw::from_c_str(*(argv as **libc::c_char).offset(i)));\n+    }\n+    return args;\n+}\n+\n+extern {\n+    fn rust_take_global_args_lock();\n+    fn rust_drop_global_args_lock();\n+    fn rust_get_global_args_ptr() -> *mut Option<~~[~str]>;\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use option::{Some, None};\n+    use super::*;\n+    use unstable::finally::Finally;\n+\n+    #[test]\n+    fn smoke_test() {\n+        // Preserve the actual global state.\n+        let saved_value = take();\n+\n+        let expected = ~[~\"happy\", ~\"today?\"];\n+\n+        put(expected.clone());\n+        assert!(clone() == Some(expected.clone()));\n+        assert!(take() == Some(expected.clone()));\n+        assert!(take() == None);\n+\n+        do (|| {\n+        }).finally {\n+            // Restore the actual global state.\n+            match saved_value {\n+                Some(ref args) => put(args.clone()),\n+                None => ()\n+            }\n+        }\n+    }\n+}"}, {"sha": "7e1d18f954860dd03b5ad8d00d66f655d2f07be7", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1b7c99655f300aa0b8ba216cd2029dc588c3ef88/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7c99655f300aa0b8ba216cd2029dc588c3ef88/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=1b7c99655f300aa0b8ba216cd2029dc588c3ef88", "patch": "@@ -159,6 +159,9 @@ pub mod metrics;\n /// Just stuff\n pub mod util;\n \n+// Global command line argument storage\n+pub mod args;\n+\n /// Set up a default runtime configuration, given compiler-supplied arguments.\n ///\n /// This is invoked by the `start` _language item_ (unstable::lang) to\n@@ -173,20 +176,28 @@ pub mod util;\n /// # Return value\n ///\n /// The return value is used as the process return code. 0 on success, 101 on error.\n-pub fn start(_argc: int, _argv: **u8, crate_map: *u8, main: ~fn()) -> int {\n+pub fn start(argc: int, argv: **u8, crate_map: *u8, main: ~fn()) -> int {\n \n-    init(crate_map);\n+    init(argc, argv, crate_map);\n     let exit_code = run(main);\n     cleanup();\n \n     return exit_code;\n }\n \n-/// One-time runtime initialization. Currently all this does is set up logging\n-/// based on the RUST_LOG environment variable.\n-pub fn init(crate_map: *u8) {\n-    logging::init(crate_map);\n-    unsafe { rust_update_gc_metadata(crate_map) }\n+/// One-time runtime initialization.\n+///\n+/// Initializes global state, including frobbing\n+/// the crate's logging flags, registering GC\n+/// metadata, and storing the process arguments.\n+pub fn init(argc: int, argv: **u8, crate_map: *u8) {\n+    // XXX: Derefing these pointers is not safe.\n+    // Need to propagate the unsafety to `start`.\n+    unsafe {\n+        args::init(argc, argv);\n+        logging::init(crate_map);\n+        rust_update_gc_metadata(crate_map);\n+    }\n \n     extern {\n         fn rust_update_gc_metadata(crate_map: *u8);\n@@ -195,6 +206,7 @@ pub fn init(crate_map: *u8) {\n \n /// One-time runtime cleanup.\n pub fn cleanup() {\n+    args::cleanup();\n     global_heap::cleanup();\n }\n "}, {"sha": "86b8881b9f2ed632e801de856c868f8efee5a2c4", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b7c99655f300aa0b8ba216cd2029dc588c3ef88/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1b7c99655f300aa0b8ba216cd2029dc588c3ef88/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=1b7c99655f300aa0b8ba216cd2029dc588c3ef88", "patch": "@@ -932,6 +932,24 @@ rust_get_num_cpus() {\n     return get_num_cpus();\n }\n \n+static lock_and_signal global_args_lock;\n+static uintptr_t global_args_ptr = 0;\n+\n+extern \"C\" CDECL void\n+rust_take_global_args_lock() {\n+    global_args_lock.lock();\n+}\n+\n+extern \"C\" CDECL void\n+rust_drop_global_args_lock() {\n+    global_args_lock.unlock();\n+}\n+\n+extern \"C\" CDECL uintptr_t*\n+rust_get_global_args_ptr() {\n+    return &global_args_ptr;\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "ca813c5d3ae5d70a1b77c19bd662c1074f3ae13c", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b7c99655f300aa0b8ba216cd2029dc588c3ef88/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/1b7c99655f300aa0b8ba216cd2029dc588c3ef88/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=1b7c99655f300aa0b8ba216cd2029dc588c3ef88", "patch": "@@ -242,3 +242,4 @@ rust_drop_env_lock\n rust_update_log_settings\n rust_running_on_valgrind\n rust_get_num_cpus\n+rust_get_global_args_ptr\n\\ No newline at end of file"}]}