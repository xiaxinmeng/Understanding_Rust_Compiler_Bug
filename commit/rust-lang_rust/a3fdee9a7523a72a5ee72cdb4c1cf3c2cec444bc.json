{"sha": "a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZmRlZTlhNzUyM2E3MmE1ZWU3MmNkYjRjMWNmM2MyY2VjNDQ0YmM=", "commit": {"author": {"name": "Wim Looman", "email": "wim@nemo157.com", "date": "2018-10-04T18:49:38Z"}, "committer": {"name": "Wim Looman", "email": "wim@nemo157.com", "date": "2019-01-27T21:58:53Z"}, "message": "Change generator trait to use pinning", "tree": {"sha": "127e574840d4994b33fcfc41a1b452bf5976829c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/127e574840d4994b33fcfc41a1b452bf5976829c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "html_url": "https://github.com/rust-lang/rust/commit/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/comments", "author": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8611577360e66f90470bd40c498cf8d194f67926", "url": "https://api.github.com/repos/rust-lang/rust/commits/8611577360e66f90470bd40c498cf8d194f67926", "html_url": "https://github.com/rust-lang/rust/commit/8611577360e66f90470bd40c498cf8d194f67926"}], "stats": {"total": 379, "additions": 209, "deletions": 170}, "files": [{"sha": "426fc01a6b051173f3a08a2d2469c09915ff85f9", "filename": "src/doc/unstable-book/src/language-features/generators.md", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -29,18 +29,19 @@ A syntactical example of a generator is:\n #![feature(generators, generator_trait)]\n \n use std::ops::{Generator, GeneratorState};\n+use std::pin::Pin;\n \n fn main() {\n     let mut generator = || {\n         yield 1;\n         return \"foo\"\n     };\n \n-    match unsafe { generator.resume() } {\n+    match Pin::new(&mut generator).resume() {\n         GeneratorState::Yielded(1) => {}\n         _ => panic!(\"unexpected value from resume\"),\n     }\n-    match unsafe { generator.resume() } {\n+    match Pin::new(&mut generator).resume() {\n         GeneratorState::Complete(\"foo\") => {}\n         _ => panic!(\"unexpected value from resume\"),\n     }\n@@ -60,6 +61,7 @@ prints all numbers in order:\n #![feature(generators, generator_trait)]\n \n use std::ops::Generator;\n+use std::pin::Pin;\n \n fn main() {\n     let mut generator = || {\n@@ -69,9 +71,9 @@ fn main() {\n     };\n \n     println!(\"1\");\n-    unsafe { generator.resume() };\n+    Pin::new(&mut generator).resume();\n     println!(\"3\");\n-    unsafe { generator.resume() };\n+    Pin::new(&mut generator).resume();\n     println!(\"5\");\n }\n ```\n@@ -86,13 +88,14 @@ Feedback on the design and usage is always appreciated!\n The `Generator` trait in `std::ops` currently looks like:\n \n ```\n-# #![feature(generator_trait)]\n+# #![feature(arbitrary_self_types, generator_trait)]\n # use std::ops::GeneratorState;\n+# use std::pin::Pin;\n \n pub trait Generator {\n     type Yield;\n     type Return;\n-    unsafe fn resume(&mut self) -> GeneratorState<Self::Yield, Self::Return>;\n+    fn resume(self: Pin<&mut Self>) -> GeneratorState<Self::Yield, Self::Return>;\n }\n ```\n \n@@ -167,6 +170,7 @@ Let's take a look at an example to see what's going on here:\n #![feature(generators, generator_trait)]\n \n use std::ops::Generator;\n+use std::pin::Pin;\n \n fn main() {\n     let ret = \"foo\";\n@@ -175,17 +179,18 @@ fn main() {\n         return ret\n     };\n \n-    unsafe { generator.resume() };\n-    unsafe { generator.resume() };\n+    Pin::new(&mut generator).resume();\n+    Pin::new(&mut generator).resume();\n }\n ```\n \n This generator literal will compile down to something similar to:\n \n ```rust\n-#![feature(generators, generator_trait)]\n+#![feature(arbitrary_self_types, generators, generator_trait)]\n \n use std::ops::{Generator, GeneratorState};\n+use std::pin::Pin;\n \n fn main() {\n     let ret = \"foo\";\n@@ -200,9 +205,9 @@ fn main() {\n             type Yield = i32;\n             type Return = &'static str;\n \n-            unsafe fn resume(&mut self) -> GeneratorState<i32, &'static str> {\n+            fn resume(mut self: Pin<&mut Self>) -> GeneratorState<i32, &'static str> {\n                 use std::mem;\n-                match mem::replace(self, __Generator::Done) {\n+                match mem::replace(&mut *self, __Generator::Done) {\n                     __Generator::Start(s) => {\n                         *self = __Generator::Yield1(s);\n                         GeneratorState::Yielded(1)\n@@ -223,8 +228,8 @@ fn main() {\n         __Generator::Start(ret)\n     };\n \n-    unsafe { generator.resume() };\n-    unsafe { generator.resume() };\n+    Pin::new(&mut generator).resume();\n+    Pin::new(&mut generator).resume();\n }\n ```\n "}, {"sha": "1fd8aa98cc35511d412b2c7c85707fd2e1983b4f", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -873,13 +873,12 @@ impl<T: ?Sized> AsMut<T> for Box<T> {\n impl<T: ?Sized> Unpin for Box<T> { }\n \n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n-impl<T> Generator for Box<T>\n-    where T: Generator + ?Sized\n-{\n-    type Yield = T::Yield;\n-    type Return = T::Return;\n-    unsafe fn resume(&mut self) -> GeneratorState<Self::Yield, Self::Return> {\n-        (**self).resume()\n+impl<G: ?Sized + Generator + Unpin> Generator for Box<G> {\n+    type Yield = G::Yield;\n+    type Return = G::Return;\n+\n+    fn resume(mut self: Pin<&mut Self>) -> GeneratorState<Self::Yield, Self::Return> {\n+        G::resume(Pin::new(&mut *self))\n     }\n }\n "}, {"sha": "5401fff860e9b206280b287e83d727ccbd88026a", "filename": "src/libcore/ops/generator.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Flibcore%2Fops%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Flibcore%2Fops%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fgenerator.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -1,3 +1,6 @@\n+use crate::marker::Unpin;\n+use crate::pin::Pin;\n+\n /// The result of a generator resumption.\n ///\n /// This enum is returned from the `Generator::resume` method and indicates the\n@@ -39,18 +42,19 @@ pub enum GeneratorState<Y, R> {\n /// #![feature(generators, generator_trait)]\n ///\n /// use std::ops::{Generator, GeneratorState};\n+/// use std::pin::Pin;\n ///\n /// fn main() {\n ///     let mut generator = || {\n ///         yield 1;\n ///         return \"foo\"\n ///     };\n ///\n-///     match unsafe { generator.resume() } {\n+///     match Pin::new(&mut generator).resume() {\n ///         GeneratorState::Yielded(1) => {}\n ///         _ => panic!(\"unexpected return from resume\"),\n ///     }\n-///     match unsafe { generator.resume() } {\n+///     match Pin::new(&mut generator).resume() {\n ///         GeneratorState::Complete(\"foo\") => {}\n ///         _ => panic!(\"unexpected return from resume\"),\n ///     }\n@@ -88,10 +92,6 @@ pub trait Generator {\n     /// generator will continue executing until it either yields or returns, at\n     /// which point this function will return.\n     ///\n-    /// The function is unsafe because it can be used on an immovable generator.\n-    /// After such a call, the immovable generator must not move again, but\n-    /// this is not enforced by the compiler.\n-    ///\n     /// # Return value\n     ///\n     /// The `GeneratorState` enum returned from this function indicates what\n@@ -110,16 +110,25 @@ pub trait Generator {\n     /// been returned previously. While generator literals in the language are\n     /// guaranteed to panic on resuming after `Complete`, this is not guaranteed\n     /// for all implementations of the `Generator` trait.\n-    unsafe fn resume(&mut self) -> GeneratorState<Self::Yield, Self::Return>;\n+    fn resume(self: Pin<&mut Self>) -> GeneratorState<Self::Yield, Self::Return>;\n+}\n+\n+#[unstable(feature = \"generator_trait\", issue = \"43122\")]\n+impl<G: ?Sized + Generator> Generator for Pin<&mut G> {\n+    type Yield = G::Yield;\n+    type Return = G::Return;\n+\n+    fn resume(mut self: Pin<&mut Self>) -> GeneratorState<Self::Yield, Self::Return> {\n+        G::resume((*self).as_mut())\n+    }\n }\n \n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n-impl<T> Generator for &mut T\n-    where T: Generator + ?Sized\n-{\n-    type Yield = T::Yield;\n-    type Return = T::Return;\n-    unsafe fn resume(&mut self) -> GeneratorState<Self::Yield, Self::Return> {\n-        (**self).resume()\n+impl<G: ?Sized + Generator + Unpin> Generator for &mut G {\n+    type Yield = G::Yield;\n+    type Return = G::Return;\n+\n+    fn resume(mut self: Pin<&mut Self>) -> GeneratorState<Self::Yield, Self::Return> {\n+        G::resume(Pin::new(&mut *self))\n     }\n }"}, {"sha": "eb721754216382f97165079ec868127b714a66bd", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -2119,14 +2119,15 @@ This error occurs because a borrow in a generator persists across a\n yield point.\n \n ```compile_fail,E0626\n-# #![feature(generators, generator_trait)]\n+# #![feature(generators, generator_trait, pin)]\n # use std::ops::Generator;\n+# use std::pin::Pin;\n let mut b = || {\n     let a = &String::new(); // <-- This borrow...\n     yield (); // ...is still in scope here, when the yield occurs.\n     println!(\"{}\", a);\n };\n-unsafe { b.resume() };\n+Pin::new(&mut b).resume();\n ```\n \n At present, it is not permitted to have a yield that occurs while a\n@@ -2137,14 +2138,15 @@ resolve the previous example by removing the borrow and just storing\n the integer by value:\n \n ```\n-# #![feature(generators, generator_trait)]\n+# #![feature(generators, generator_trait, pin)]\n # use std::ops::Generator;\n+# use std::pin::Pin;\n let mut b = || {\n     let a = 3;\n     yield ();\n     println!(\"{}\", a);\n };\n-unsafe { b.resume() };\n+Pin::new(&mut b).resume();\n ```\n \n This is a very simple case, of course. In more complex cases, we may\n@@ -2154,37 +2156,40 @@ in those cases, something like the `Rc` or `Arc` types may be useful.\n This error also frequently arises with iteration:\n \n ```compile_fail,E0626\n-# #![feature(generators, generator_trait)]\n+# #![feature(generators, generator_trait, pin)]\n # use std::ops::Generator;\n+# use std::pin::Pin;\n let mut b = || {\n   let v = vec![1,2,3];\n   for &x in &v { // <-- borrow of `v` is still in scope...\n     yield x; // ...when this yield occurs.\n   }\n };\n-unsafe { b.resume() };\n+Pin::new(&mut b).resume();\n ```\n \n Such cases can sometimes be resolved by iterating \"by value\" (or using\n `into_iter()`) to avoid borrowing:\n \n ```\n-# #![feature(generators, generator_trait)]\n+# #![feature(generators, generator_trait, pin)]\n # use std::ops::Generator;\n+# use std::pin::Pin;\n let mut b = || {\n   let v = vec![1,2,3];\n   for x in v { // <-- Take ownership of the values instead!\n     yield x; // <-- Now yield is OK.\n   }\n };\n-unsafe { b.resume() };\n+Pin::new(&mut b).resume();\n ```\n \n If taking ownership is not an option, using indices can work too:\n \n ```\n-# #![feature(generators, generator_trait)]\n+# #![feature(generators, generator_trait, pin)]\n # use std::ops::Generator;\n+# use std::pin::Pin;\n let mut b = || {\n   let v = vec![1,2,3];\n   let len = v.len(); // (*)\n@@ -2193,7 +2198,7 @@ let mut b = || {\n     yield x; // <-- Now yield is OK.\n   }\n };\n-unsafe { b.resume() };\n+Pin::new(&mut b).resume();\n \n // (*) -- Unfortunately, these temporaries are currently required.\n // See <https://github.com/rust-lang/rust/issues/43122>."}, {"sha": "d1203be3cf011b10d486eac66ea850565a9bcf81", "filename": "src/libstd/future.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -33,7 +33,9 @@ impl<T: Generator<Yield = ()>> !Unpin for GenFuture<T> {}\n impl<T: Generator<Yield = ()>> Future for GenFuture<T> {\n     type Output = T::Return;\n     fn poll(self: Pin<&mut Self>, lw: &LocalWaker) -> Poll<Self::Output> {\n-        set_task_waker(lw, || match unsafe { Pin::get_unchecked_mut(self).0.resume() } {\n+        // Safe because we're !Unpin + !Drop mapping to a ?Unpin value\n+        let gen = unsafe { Pin::map_unchecked_mut(self, |s| &mut s.0) };\n+        set_task_waker(lw, || match gen.resume() {\n             GeneratorState::Yielded(()) => Poll::Pending,\n             GeneratorState::Complete(x) => Poll::Ready(x),\n         })"}, {"sha": "97e4cded80b9a80455dfb442e54cd3d82113e445", "filename": "src/test/run-pass/drop/dynamic-drop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop%2Fdynamic-drop.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -12,6 +12,7 @@\n use std::cell::{Cell, RefCell};\n use std::ops::Generator;\n use std::panic;\n+use std::pin::Pin;\n use std::usize;\n \n struct InjectedFailure;\n@@ -172,7 +173,7 @@ fn generator(a: &Allocator, run_count: usize) {\n          );\n     };\n     for _ in 0..run_count {\n-        unsafe { gen.resume(); }\n+        Pin::new(&mut gen).resume();\n     }\n }\n "}, {"sha": "831c248bf909c47b012b03e68daf10ca12ba8637", "filename": "src/test/run-pass/generator/auxiliary/xcrate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fauxiliary%2Fxcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fauxiliary%2Fxcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fauxiliary%2Fxcrate.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -1,5 +1,6 @@\n #![feature(generators, generator_trait)]\n \n+use std::marker::Unpin;\n use std::ops::Generator;\n \n pub fn foo() -> impl Generator<Yield = (), Return = ()> {\n@@ -10,7 +11,7 @@ pub fn foo() -> impl Generator<Yield = (), Return = ()> {\n     }\n }\n \n-pub fn bar<T: 'static>(t: T) -> Box<Generator<Yield = T, Return = ()>> {\n+pub fn bar<T: Unpin + 'static>(t: T) -> Box<Generator<Yield = T, Return = ()> + Unpin> {\n     Box::new(|| {\n         yield t;\n     })"}, {"sha": "907f7a3c06de7df7810e24062e71ce61be1cc8a8", "filename": "src/test/run-pass/generator/conditional-drop.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fconditional-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fconditional-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fconditional-drop.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -3,6 +3,7 @@\n #![feature(generators, generator_trait)]\n \n use std::ops::Generator;\n+use std::pin::Pin;\n use std::sync::atomic::{AtomicUsize, Ordering};\n \n static A: AtomicUsize = AtomicUsize::new(0);\n@@ -34,9 +35,9 @@ fn t1() {\n     };\n \n     let n = A.load(Ordering::SeqCst);\n-    unsafe { a.resume() };\n+    Pin::new(&mut a).resume();\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n-    unsafe { a.resume() };\n+    Pin::new(&mut a).resume();\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n }\n \n@@ -50,8 +51,8 @@ fn t2() {\n     };\n \n     let n = A.load(Ordering::SeqCst);\n-    unsafe { a.resume() };\n+    Pin::new(&mut a).resume();\n     assert_eq!(A.load(Ordering::SeqCst), n);\n-    unsafe { a.resume() };\n+    Pin::new(&mut a).resume();\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n }"}, {"sha": "df70e013bd330f124cbbce5b1060a9ecedf5a715", "filename": "src/test/run-pass/generator/control-flow.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fcontrol-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fcontrol-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fcontrol-flow.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -2,13 +2,15 @@\n \n #![feature(generators, generator_trait)]\n \n+use std::marker::Unpin;\n use std::ops::{GeneratorState, Generator};\n+use std::pin::Pin;\n \n fn finish<T>(mut amt: usize, mut t: T) -> T::Return\n-    where T: Generator<Yield = ()>\n+    where T: Generator<Yield = ()> + Unpin,\n {\n     loop {\n-        match unsafe { t.resume() } {\n+        match Pin::new(&mut t).resume() {\n             GeneratorState::Yielded(()) => amt = amt.checked_sub(1).unwrap(),\n             GeneratorState::Complete(ret) => {\n                 assert_eq!(amt, 0);"}, {"sha": "ac4e06656285ea90d80782b6955263145feac23b", "filename": "src/test/run-pass/generator/drop-env.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fdrop-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fdrop-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fdrop-env.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -3,6 +3,7 @@\n #![feature(generators, generator_trait)]\n \n use std::ops::Generator;\n+use std::pin::Pin;\n use std::sync::atomic::{AtomicUsize, Ordering};\n \n static A: AtomicUsize = AtomicUsize::new(0);\n@@ -29,7 +30,7 @@ fn t1() {\n     };\n \n     let n = A.load(Ordering::SeqCst);\n-    drop(unsafe { foo.resume() });\n+    drop(Pin::new(&mut foo).resume());\n     assert_eq!(A.load(Ordering::SeqCst), n);\n     drop(foo);\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n@@ -42,7 +43,7 @@ fn t2() {\n     };\n \n     let n = A.load(Ordering::SeqCst);\n-    drop(unsafe { foo.resume() });\n+    drop(Pin::new(&mut foo).resume());\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n     drop(foo);\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);"}, {"sha": "6efaff50c1e62bc70166669f8719335d052ac21a", "filename": "src/test/run-pass/generator/issue-44197.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fissue-44197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fissue-44197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fissue-44197.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -3,6 +3,7 @@\n #![feature(generators, generator_trait)]\n \n use std::ops::{ Generator, GeneratorState };\n+use std::pin::Pin;\n \n fn foo(_: &str) -> String {\n     String::new()\n@@ -27,8 +28,6 @@ fn bar2(baz: String) -> impl Generator<Yield = String, Return = ()> {\n }\n \n fn main() {\n-    unsafe {\n-        assert_eq!(bar(String::new()).resume(), GeneratorState::Yielded(String::new()));\n-        assert_eq!(bar2(String::new()).resume(), GeneratorState::Complete(()));\n-    }\n+    assert_eq!(Pin::new(&mut bar(String::new())).resume(), GeneratorState::Yielded(String::new()));\n+    assert_eq!(Pin::new(&mut bar2(String::new())).resume(), GeneratorState::Complete(()));\n }"}, {"sha": "ac7e122dd5802aac751b9aa7e49fcfcfabe70f90", "filename": "src/test/run-pass/generator/iterator-count.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fiterator-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fiterator-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fiterator-count.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -2,24 +2,26 @@\n \n #![feature(generators, generator_trait)]\n \n+use std::marker::Unpin;\n use std::ops::{GeneratorState, Generator};\n+use std::pin::Pin;\n \n struct W<T>(T);\n \n // This impl isn't safe in general, but the generator used in this test is movable\n // so it won't cause problems.\n-impl<T: Generator<Return = ()>> Iterator for W<T> {\n+impl<T: Generator<Return = ()> + Unpin> Iterator for W<T> {\n     type Item = T::Yield;\n \n     fn next(&mut self) -> Option<Self::Item> {\n-        match unsafe { self.0.resume() } {\n+        match Pin::new(&mut self.0).resume() {\n             GeneratorState::Complete(..) => None,\n             GeneratorState::Yielded(v) => Some(v),\n         }\n     }\n }\n \n-fn test() -> impl Generator<Return=(), Yield=u8> {\n+fn test() -> impl Generator<Return=(), Yield=u8> + Unpin {\n     || {\n         for i in 1..6 {\n             yield i"}, {"sha": "a1064165b2f7ac535156218d78126128304ccb43", "filename": "src/test/run-pass/generator/live-upvar-across-yield.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Flive-upvar-across-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Flive-upvar-across-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Flive-upvar-across-yield.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -3,11 +3,12 @@\n #![feature(generators, generator_trait)]\n \n use std::ops::Generator;\n+use std::pin::Pin;\n \n fn main() {\n     let b = |_| 3;\n     let mut a = || {\n         b(yield);\n     };\n-    unsafe { a.resume() };\n+    Pin::new(&mut a).resume();\n }"}, {"sha": "b56cce1dc44f1ec0be2aed22f181454f1459042e", "filename": "src/test/run-pass/generator/nested_generators.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fnested_generators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fnested_generators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fnested_generators.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -1,18 +1,17 @@\n // run-pass\n \n-#![feature(generators)]\n-#![feature(generator_trait)]\n+#![feature(generators, generator_trait)]\n \n-use std::ops::Generator;\n-use std::ops::GeneratorState;\n+use std::ops::{Generator, GeneratorState};\n+use std::pin::Pin;\n \n fn main() {\n     let _generator = || {\n         let mut sub_generator = || {\n             yield 2;\n         };\n \n-        match unsafe { sub_generator.resume() } {\n+        match Pin::new(&mut sub_generator).resume() {\n             GeneratorState::Yielded(x) => {\n                 yield x;\n             }"}, {"sha": "5ac97585f4b575339f8f06cdeb6eb2d06cd391b6", "filename": "src/test/run-pass/generator/panic-drops.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-drops.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -6,6 +6,7 @@\n \n use std::ops::Generator;\n use std::panic;\n+use std::pin::Pin;\n use std::sync::atomic::{AtomicUsize, Ordering};\n \n static A: AtomicUsize = AtomicUsize::new(0);\n@@ -34,7 +35,7 @@ fn main() {\n \n     assert_eq!(A.load(Ordering::SeqCst), 0);\n     let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-        unsafe { foo.resume() }\n+        Pin::new(&mut foo).resume()\n     }));\n     assert!(res.is_err());\n     assert_eq!(A.load(Ordering::SeqCst), 1);\n@@ -49,7 +50,7 @@ fn main() {\n \n     assert_eq!(A.load(Ordering::SeqCst), 1);\n     let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-        unsafe { foo.resume() }\n+        Pin::new(&mut foo).resume()\n     }));\n     assert!(res.is_err());\n     assert_eq!(A.load(Ordering::SeqCst), 1);"}, {"sha": "5f6778674dce13a5e9fd32e8ff61ff3c2bbef2bb", "filename": "src/test/run-pass/generator/panic-safe.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-safe.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -5,6 +5,7 @@\n #![feature(generators, generator_trait)]\n \n use std::ops::Generator;\n+use std::pin::Pin;\n use std::panic;\n \n fn main() {\n@@ -16,13 +17,13 @@ fn main() {\n     };\n \n     let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-        unsafe { foo.resume() }\n+        Pin::new(&mut foo).resume()\n     }));\n     assert!(res.is_err());\n \n     for _ in 0..10 {\n         let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-            unsafe { foo.resume() }\n+            Pin::new(&mut foo).resume()\n         }));\n         assert!(res.is_err());\n     }"}, {"sha": "71a68ff684af31c6656fb61cc9bd20ecafa0e7fa", "filename": "src/test/run-pass/generator/resume-after-return.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fresume-after-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fresume-after-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fresume-after-return.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -5,6 +5,7 @@\n #![feature(generators, generator_trait)]\n \n use std::ops::{GeneratorState, Generator};\n+use std::pin::Pin;\n use std::panic;\n \n fn main() {\n@@ -15,12 +16,12 @@ fn main() {\n         yield;\n     };\n \n-    match unsafe { foo.resume() } {\n+    match Pin::new(&mut foo).resume() {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n \n-    match panic::catch_unwind(move || unsafe { foo.resume() }) {\n+    match panic::catch_unwind(move || Pin::new(&mut foo).resume()) {\n         Ok(_) => panic!(\"generator successfully resumed\"),\n         Err(_) => {}\n     }"}, {"sha": "533f2399084fa282d8664c4ebe873752e470f67a", "filename": "src/test/run-pass/generator/smoke.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fsmoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fsmoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fsmoke.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -6,6 +6,7 @@\n #![feature(generators, generator_trait)]\n \n use std::ops::{GeneratorState, Generator};\n+use std::pin::Pin;\n use std::thread;\n \n #[test]\n@@ -16,7 +17,7 @@ fn simple() {\n         }\n     };\n \n-    match unsafe { foo.resume() } {\n+    match Pin::new(&mut foo).resume() {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -32,7 +33,7 @@ fn return_capture() {\n         a\n     };\n \n-    match unsafe { foo.resume() } {\n+    match Pin::new(&mut foo).resume() {\n         GeneratorState::Complete(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -44,11 +45,11 @@ fn simple_yield() {\n         yield;\n     };\n \n-    match unsafe { foo.resume() } {\n+    match Pin::new(&mut foo).resume() {\n         GeneratorState::Yielded(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match unsafe { foo.resume() } {\n+    match Pin::new(&mut foo).resume() {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -61,11 +62,11 @@ fn yield_capture() {\n         yield b;\n     };\n \n-    match unsafe { foo.resume() } {\n+    match Pin::new(&mut foo).resume() {\n         GeneratorState::Yielded(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match unsafe { foo.resume() } {\n+    match Pin::new(&mut foo).resume() {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -78,11 +79,11 @@ fn simple_yield_value() {\n         return String::from(\"foo\")\n     };\n \n-    match unsafe { foo.resume() } {\n+    match Pin::new(&mut foo).resume() {\n         GeneratorState::Yielded(ref s) if *s == \"bar\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match unsafe { foo.resume() } {\n+    match Pin::new(&mut foo).resume() {\n         GeneratorState::Complete(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -96,11 +97,11 @@ fn return_after_yield() {\n         return a\n     };\n \n-    match unsafe { foo.resume() } {\n+    match Pin::new(&mut foo).resume() {\n         GeneratorState::Yielded(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match unsafe { foo.resume() } {\n+    match Pin::new(&mut foo).resume() {\n         GeneratorState::Complete(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -148,11 +149,11 @@ fn send_and_sync() {\n fn send_over_threads() {\n     let mut foo = || { yield };\n     thread::spawn(move || {\n-        match unsafe { foo.resume() } {\n+        match Pin::new(&mut foo).resume() {\n             GeneratorState::Yielded(()) => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }\n-        match unsafe { foo.resume() } {\n+        match Pin::new(&mut foo).resume() {\n             GeneratorState::Complete(()) => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }\n@@ -161,11 +162,11 @@ fn send_over_threads() {\n     let a = String::from(\"a\");\n     let mut foo = || { yield a };\n     thread::spawn(move || {\n-        match unsafe { foo.resume() } {\n+        match Pin::new(&mut foo).resume() {\n             GeneratorState::Yielded(ref s) if *s == \"a\" => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }\n-        match unsafe { foo.resume() } {\n+        match Pin::new(&mut foo).resume() {\n             GeneratorState::Complete(()) => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }"}, {"sha": "965d3c61c22d5aa22f7ae27b02b9a2ea4051a041", "filename": "src/test/run-pass/generator/static-generators.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fstatic-generators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fstatic-generators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fstatic-generators.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(generators, generator_trait)]\n \n+use std::pin::Pin;\n use std::ops::{Generator, GeneratorState};\n \n fn main() {\n@@ -11,8 +12,9 @@ fn main() {\n         yield;\n         assert_eq!(b as *const _, &a as *const _);\n     };\n-    unsafe {\n-        assert_eq!(generator.resume(), GeneratorState::Yielded(()));\n-        assert_eq!(generator.resume(), GeneratorState::Complete(()));\n-    }\n+    // Safety: We shadow the original generator variable so have no safe API to\n+    // move it after this point.\n+    let mut generator = unsafe { Pin::new_unchecked(&mut generator) };\n+    assert_eq!(generator.as_mut().resume(), GeneratorState::Yielded(()));\n+    assert_eq!(generator.as_mut().resume(), GeneratorState::Complete(()));\n }"}, {"sha": "9483ad7395ea14f554f6dfab7eb45ffbfcb7e01d", "filename": "src/test/run-pass/generator/xcrate-reachable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fxcrate-reachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fxcrate-reachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fxcrate-reachable.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -7,7 +7,8 @@\n extern crate xcrate_reachable as foo;\n \n use std::ops::Generator;\n+use std::pin::Pin;\n \n fn main() {\n-    unsafe { foo::foo().resume(); }\n+    Pin::new(&mut foo::foo()).resume();\n }"}, {"sha": "febf5c3583f30e5e00ec1c00b9bffdf206057b67", "filename": "src/test/run-pass/generator/xcrate.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fxcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Frun-pass%2Fgenerator%2Fxcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fxcrate.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -7,22 +7,23 @@\n extern crate xcrate;\n \n use std::ops::{GeneratorState, Generator};\n+use std::pin::Pin;\n \n fn main() {\n     let mut foo = xcrate::foo();\n \n-    match unsafe { foo.resume() } {\n+    match Pin::new(&mut foo).resume() {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n \n     let mut foo = xcrate::bar(3);\n \n-    match unsafe { foo.resume() } {\n+    match Pin::new(&mut foo).resume() {\n         GeneratorState::Yielded(3) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match unsafe { foo.resume() } {\n+    match Pin::new(&mut foo).resume() {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }"}, {"sha": "3c9221d28e74d921aa426064325f4b126ba31dd6", "filename": "src/test/ui/generator/borrowing.nll.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.nll.stderr?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -1,12 +1,12 @@\n error[E0597]: `a` does not live long enough\n-  --> $DIR/borrowing.rs:8:29\n+  --> $DIR/borrowing.rs:9:33\n    |\n-LL |         unsafe { (|| yield &a).resume() }\n-   |                  -----------^-\n-   |                  ||         |\n-   |                  ||         borrowed value does not live long enough\n-   |                  |value captured here by generator\n-   |                  a temporary with access to the borrow is created here ...\n+LL |         Pin::new(&mut || yield &a).resume()\n+   |                       ----------^\n+   |                       |         |\n+   |                       |         borrowed value does not live long enough\n+   |                       value captured here by generator\n+   |                       a temporary with access to the borrow is created here ...\n LL |         //~^ ERROR: `a` does not live long enough\n LL |     };\n    |     -- ... and the borrow might be used here, when that temporary is dropped and runs the destructor for generator\n@@ -16,7 +16,7 @@ LL |     };\n    = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n \n error[E0597]: `a` does not live long enough\n-  --> $DIR/borrowing.rs:15:20\n+  --> $DIR/borrowing.rs:16:20\n    |\n LL |     let _b = {\n    |         -- borrow later stored here"}, {"sha": "9f8fc7483f64d72dcdd95253cba2b9c8bf70138d", "filename": "src/test/ui/generator/borrowing.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -1,11 +1,12 @@\n #![feature(generators, generator_trait)]\n \n use std::ops::Generator;\n+use std::pin::Pin;\n \n fn main() {\n     let _b = {\n         let a = 3;\n-        unsafe { (|| yield &a).resume() }\n+        Pin::new(&mut || yield &a).resume()\n         //~^ ERROR: `a` does not live long enough\n     };\n "}, {"sha": "169e4a8561c1d38ae20e4e3cabf536f77e3dcc1f", "filename": "src/test/ui/generator/borrowing.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -1,10 +1,10 @@\n error[E0597]: `a` does not live long enough\n-  --> $DIR/borrowing.rs:8:29\n+  --> $DIR/borrowing.rs:9:33\n    |\n-LL |         unsafe { (|| yield &a).resume() }\n-   |                   --        ^ borrowed value does not live long enough\n-   |                   |\n-   |                   capture occurs here\n+LL |         Pin::new(&mut || yield &a).resume()\n+   |                       --        ^ borrowed value does not live long enough\n+   |                       |\n+   |                       capture occurs here\n LL |         //~^ ERROR: `a` does not live long enough\n LL |     };\n    |     - borrowed value only lives until here\n@@ -13,7 +13,7 @@ LL | }\n    | - borrowed value needs to live until here\n \n error[E0597]: `a` does not live long enough\n-  --> $DIR/borrowing.rs:15:20\n+  --> $DIR/borrowing.rs:16:20\n    |\n LL |         || {\n    |         -- capture occurs here"}, {"sha": "a90a47fe9aa0116f9accb4176bfa95532393cbb5", "filename": "src/test/ui/generator/dropck.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck.nll.stderr?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `*cell` does not live long enough\n-  --> $DIR/dropck.rs:9:40\n+  --> $DIR/dropck.rs:10:40\n    |\n LL |     let ref_ = Box::leak(Box::new(Some(cell.borrow_mut())));\n    |                                        ^^^^ borrowed value does not live long enough\n@@ -13,7 +13,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are defined\n \n error[E0597]: `ref_` does not live long enough\n-  --> $DIR/dropck.rs:14:18\n+  --> $DIR/dropck.rs:15:18\n    |\n LL |     gen = || {\n    |           -- value captured here by generator"}, {"sha": "65c61fbaac4e2b871b484a2fd3080f1a549813c6", "filename": "src/test/ui/generator/dropck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -2,6 +2,7 @@\n \n use std::cell::RefCell;\n use std::ops::Generator;\n+use std::pin::Pin;\n \n fn main() {\n     let (mut gen, cell);\n@@ -14,6 +15,6 @@ fn main() {\n         let _d = ref_.take(); //~ ERROR `ref_` does not live long enough\n         yield;\n     };\n-    unsafe { gen.resume(); }\n+    Pin::new(&mut gen).resume();\n     // drops the RefCell and then the Ref, leading to use-after-free\n }"}, {"sha": "fdaa5cfbae3e6125a4e7c35913785582f0f79c88", "filename": "src/test/ui/generator/dropck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fdropck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fdropck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck.stderr?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `*cell` does not live long enough\n-  --> $DIR/dropck.rs:9:40\n+  --> $DIR/dropck.rs:10:40\n    |\n LL |     let ref_ = Box::leak(Box::new(Some(cell.borrow_mut())));\n    |                                        ^^^^ borrowed value does not live long enough\n@@ -10,7 +10,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `ref_` does not live long enough\n-  --> $DIR/dropck.rs:14:18\n+  --> $DIR/dropck.rs:15:18\n    |\n LL |     gen = || {\n    |           -- capture occurs here"}, {"sha": "8a96d187f6b1cbad97cc7958165d74a6782116b3", "filename": "src/test/ui/generator/generator-region-requirements.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.ast.stderr?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/generator-region-requirements.rs:15:51\n+  --> $DIR/generator-region-requirements.rs:16:51\n    |\n LL | fn dangle(x: &mut i32) -> &'static mut i32 {\n    |              -------- help: add explicit lifetime `'static` to the type of `x`: `&'static mut i32`"}, {"sha": "8a96d187f6b1cbad97cc7958165d74a6782116b3", "filename": "src/test/ui/generator/generator-region-requirements.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.nll.stderr?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/generator-region-requirements.rs:15:51\n+  --> $DIR/generator-region-requirements.rs:16:51\n    |\n LL | fn dangle(x: &mut i32) -> &'static mut i32 {\n    |              -------- help: add explicit lifetime `'static` to the type of `x`: `&'static mut i32`"}, {"sha": "9738f6c3932edba2d6aef4e916add2c87580e7c7", "filename": "src/test/ui/generator/generator-region-requirements.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -4,14 +4,15 @@\n #![feature(generators, generator_trait)]\n #![cfg_attr(nll, feature(nll))]\n use std::ops::{Generator, GeneratorState};\n+use std::pin::Pin;\n \n fn dangle(x: &mut i32) -> &'static mut i32 {\n     let mut g = || {\n         yield;\n         x\n     };\n     loop {\n-        match unsafe { g.resume() } {\n+        match Pin::new(&mut g).resume() {\n             GeneratorState::Complete(c) => return c,\n //[nll]~^ ERROR explicit lifetime required\n //[ast]~^^ ERROR explicit lifetime required"}, {"sha": "01eea627351fb92da9352642f0e765d064e1919b", "filename": "src/test/ui/generator/ref-escapes-but-not-over-yield.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.nll.stderr?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -1,5 +1,5 @@\n error[E0521]: borrowed data escapes outside of generator\n-  --> $DIR/ref-escapes-but-not-over-yield.rs:14:9\n+  --> $DIR/ref-escapes-but-not-over-yield.rs:11:9\n    |\n LL |     let mut a = &3;\n    |         ----- `a` is declared here, outside of the generator body"}, {"sha": "8c576581ad8ddee69057ac328a1459021a59ea2d", "filename": "src/test/ui/generator/ref-escapes-but-not-over-yield.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -1,7 +1,4 @@\n-#![feature(generators, generator_trait)]\n-\n-use std::ops::{GeneratorState, Generator};\n-use std::cell::Cell;\n+#![feature(generators)]\n \n fn foo(x: &i32) {\n     // In this case, a reference to `b` escapes the generator, but not"}, {"sha": "29299b2405a00138392a160245720c8672f12ddf", "filename": "src/test/ui/generator/ref-escapes-but-not-over-yield.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.stderr?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `b` does not live long enough\n-  --> $DIR/ref-escapes-but-not-over-yield.rs:14:14\n+  --> $DIR/ref-escapes-but-not-over-yield.rs:11:14\n    |\n LL |         a = &b;\n    |              ^ borrowed value does not live long enough"}, {"sha": "f64849b3149b807b4f5af3e81da15bb6b7241a0e", "filename": "src/test/ui/generator/sized-yield.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -1,13 +1,14 @@\n #![feature(generators, generator_trait)]\n \n use std::ops::Generator;\n+use std::pin::Pin;\n \n fn main() {\n    let s = String::from(\"foo\");\n    let mut gen = move || {\n    //~^ ERROR the size for values of type\n        yield s[..];\n    };\n-   unsafe { gen.resume(); }\n+   Pin::new(&mut gen).resume();\n    //~^ ERROR the size for values of type\n }"}, {"sha": "c98f42e62168e86577c97f18d3f6d2969964bace", "filename": "src/test/ui/generator/sized-yield.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/sized-yield.rs:7:26\n+  --> $DIR/sized-yield.rs:8:26\n    |\n LL |      let mut gen = move || {\n    |  __________________________^\n@@ -13,10 +13,10 @@ LL | |    };\n    = note: the yield type of a generator must have a statically known size\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/sized-yield.rs:11:17\n+  --> $DIR/sized-yield.rs:12:23\n    |\n-LL |    unsafe { gen.resume(); }\n-   |                 ^^^^^^ doesn't have a size known at compile-time\n+LL |    Pin::new(&mut gen).resume();\n+   |                       ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "2dc12f843b2200f48aa3ecabbf43973f67ac62dd", "filename": "src/test/ui/generator/yield-while-iterating.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.nll.stderr?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -1,13 +1,13 @@\n error[E0626]: borrow may still be in use when generator yields\n-  --> $DIR/yield-while-iterating.rs:12:18\n+  --> $DIR/yield-while-iterating.rs:13:18\n    |\n LL |         for p in &x { //~ ERROR\n    |                  ^^\n LL |             yield();\n    |             ------- possible yield occurs here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/yield-while-iterating.rs:57:20\n+  --> $DIR/yield-while-iterating.rs:58:20\n    |\n LL |     let mut b = || {\n    |                 -- mutable borrow occurs here\n@@ -16,8 +16,8 @@ LL |         for p in &mut x {\n ...\n LL |     println!(\"{}\", x[0]); //~ ERROR\n    |                    ^ immutable borrow occurs here\n-LL |     b.resume();\n-   |     - mutable borrow later used here\n+LL |     Pin::new(&mut b).resume();\n+   |              ------ mutable borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e42781d1279e76f322951a4390d921aa74d32a1e", "filename": "src/test/ui/generator/yield-while-iterating.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -2,6 +2,7 @@\n \n use std::ops::{GeneratorState, Generator};\n use std::cell::Cell;\n+use std::pin::Pin;\n \n fn yield_during_iter_owned_data(x: Vec<i32>) {\n     // The generator owns `x`, so we error out when yielding with a\n@@ -33,7 +34,7 @@ fn yield_during_iter_borrowed_slice_2() {\n     println!(\"{:?}\", x);\n }\n \n-unsafe fn yield_during_iter_borrowed_slice_3() {\n+fn yield_during_iter_borrowed_slice_3() {\n     // OK to take a mutable ref to `x` and yield\n     // up pointers from it:\n     let mut x = vec![22_i32];\n@@ -42,10 +43,10 @@ unsafe fn yield_during_iter_borrowed_slice_3() {\n             yield p;\n         }\n     };\n-    b.resume();\n+    Pin::new(&mut b).resume();\n }\n \n-unsafe fn yield_during_iter_borrowed_slice_4() {\n+fn yield_during_iter_borrowed_slice_4() {\n     // ...but not OK to do that while reading\n     // from `x` too\n     let mut x = vec![22_i32];\n@@ -55,10 +56,10 @@ unsafe fn yield_during_iter_borrowed_slice_4() {\n         }\n     };\n     println!(\"{}\", x[0]); //~ ERROR\n-    b.resume();\n+    Pin::new(&mut b).resume();\n }\n \n-unsafe fn yield_during_range_iter() {\n+fn yield_during_range_iter() {\n     // Should be OK.\n     let mut b = || {\n         let v = vec![1,2,3];\n@@ -68,7 +69,7 @@ unsafe fn yield_during_range_iter() {\n             yield x;\n         }\n     };\n-    b.resume();\n+    Pin::new(&mut b).resume();\n }\n \n fn main() { }"}, {"sha": "1e3e31470e9d675b2a0611db203d116ba64c23f0", "filename": "src/test/ui/generator/yield-while-iterating.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.stderr?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -1,13 +1,13 @@\n error[E0626]: borrow may still be in use when generator yields\n-  --> $DIR/yield-while-iterating.rs:12:19\n+  --> $DIR/yield-while-iterating.rs:13:19\n    |\n LL |         for p in &x { //~ ERROR\n    |                   ^\n LL |             yield();\n    |             ------- possible yield occurs here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/yield-while-iterating.rs:57:20\n+  --> $DIR/yield-while-iterating.rs:58:20\n    |\n LL |     let mut b = || {\n    |                 -- mutable borrow occurs here\n@@ -16,7 +16,7 @@ LL |         for p in &mut x {\n ...\n LL |     println!(\"{}\", x[0]); //~ ERROR\n    |                    ^ immutable borrow occurs here\n-LL |     b.resume();\n+LL |     Pin::new(&mut b).resume();\n LL | }\n    | - mutable borrow ends here\n "}, {"sha": "38061e71358c4b7474c861fc78a7efd6fce7db34", "filename": "src/test/ui/generator/yield-while-local-borrowed.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -4,8 +4,9 @@\n \n use std::ops::{GeneratorState, Generator};\n use std::cell::Cell;\n+use std::pin::Pin;\n \n-unsafe fn borrow_local_inline() {\n+fn borrow_local_inline() {\n     // Not OK to yield with a borrow of a temporary.\n     //\n     // (This error occurs because the region shows up in the type of\n@@ -17,21 +18,21 @@ unsafe fn borrow_local_inline() {\n         yield();\n         println!(\"{}\", a);\n     };\n-    b.resume();\n+    Pin::new(&mut b).resume();\n }\n \n-unsafe fn borrow_local_inline_done() {\n+fn borrow_local_inline_done() {\n     // No error here -- `a` is not in scope at the point of `yield`.\n     let mut b = move || {\n         {\n             let a = &mut 3;\n         }\n         yield();\n     };\n-    b.resume();\n+    Pin::new(&mut b).resume();\n }\n \n-unsafe fn borrow_local() {\n+fn borrow_local() {\n     // Not OK to yield with a borrow of a temporary.\n     //\n     // (This error occurs because the region shows up in the type of\n@@ -46,7 +47,7 @@ unsafe fn borrow_local() {\n             println!(\"{}\", b);\n         }\n     };\n-    b.resume();\n+    Pin::new(&mut b).resume();\n }\n \n fn main() { }"}, {"sha": "56f425b7e70a0439d35756d8b0f05275329c8f1d", "filename": "src/test/ui/generator/yield-while-local-borrowed.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.stderr?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -1,5 +1,5 @@\n error[E0626]: borrow may still be in use when generator yields (Ast)\n-  --> $DIR/yield-while-local-borrowed.rs:14:22\n+  --> $DIR/yield-while-local-borrowed.rs:15:22\n    |\n LL |         let a = &mut 3;\n    |                      ^\n@@ -8,7 +8,7 @@ LL |         yield();\n    |         ------- possible yield occurs here\n \n error[E0626]: borrow may still be in use when generator yields (Ast)\n-  --> $DIR/yield-while-local-borrowed.rs:42:22\n+  --> $DIR/yield-while-local-borrowed.rs:43:22\n    |\n LL |             let b = &a;\n    |                      ^\n@@ -17,7 +17,7 @@ LL |             yield();\n    |             ------- possible yield occurs here\n \n error[E0626]: borrow may still be in use when generator yields (Mir)\n-  --> $DIR/yield-while-local-borrowed.rs:14:17\n+  --> $DIR/yield-while-local-borrowed.rs:15:17\n    |\n LL |         let a = &mut 3;\n    |                 ^^^^^^\n@@ -26,7 +26,7 @@ LL |         yield();\n    |         ------- possible yield occurs here\n \n error[E0626]: borrow may still be in use when generator yields (Mir)\n-  --> $DIR/yield-while-local-borrowed.rs:42:21\n+  --> $DIR/yield-while-local-borrowed.rs:43:21\n    |\n LL |             let b = &a;\n    |                     ^^"}, {"sha": "d0d6a98301e5953952937d7db0357177b836ca62", "filename": "src/test/ui/generator/yield-while-ref-reborrowed.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.nll.stderr?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -1,5 +1,5 @@\n error[E0501]: cannot borrow `x` as immutable because previous closure requires unique access\n-  --> $DIR/yield-while-ref-reborrowed.rs:35:20\n+  --> $DIR/yield-while-ref-reborrowed.rs:36:20\n    |\n LL |     let mut b = || {\n    |                 -- generator construction occurs here\n@@ -8,8 +8,8 @@ LL |         let a = &mut *x;\n ...\n LL |     println!(\"{}\", x); //~ ERROR\n    |                    ^ second borrow occurs here\n-LL |     b.resume();\n-   |     - first borrow later used here\n+LL |     Pin::new(&mut b).resume();\n+   |              ------ first borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "f54a4f468f6a0f0d6e22e2f778ebf3e6012eccc5", "filename": "src/test/ui/generator/yield-while-ref-reborrowed.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -2,38 +2,39 @@\n \n use std::ops::{GeneratorState, Generator};\n use std::cell::Cell;\n+use std::pin::Pin;\n \n-unsafe fn reborrow_shared_ref(x: &i32) {\n+fn reborrow_shared_ref(x: &i32) {\n     // This is OK -- we have a borrow live over the yield, but it's of\n     // data that outlives the generator.\n     let mut b = move || {\n         let a = &*x;\n         yield();\n         println!(\"{}\", a);\n     };\n-    b.resume();\n+    Pin::new(&mut b).resume();\n }\n \n-unsafe fn reborrow_mutable_ref(x: &mut i32) {\n+fn reborrow_mutable_ref(x: &mut i32) {\n     // This is OK -- we have a borrow live over the yield, but it's of\n     // data that outlives the generator.\n     let mut b = move || {\n         let a = &mut *x;\n         yield();\n         println!(\"{}\", a);\n     };\n-    b.resume();\n+    Pin::new(&mut b).resume();\n }\n \n-unsafe fn reborrow_mutable_ref_2(x: &mut i32) {\n+fn reborrow_mutable_ref_2(x: &mut i32) {\n     // ...but not OK to go on using `x`.\n     let mut b = || {\n         let a = &mut *x;\n         yield();\n         println!(\"{}\", a);\n     };\n     println!(\"{}\", x); //~ ERROR\n-    b.resume();\n+    Pin::new(&mut b).resume();\n }\n \n fn main() { }"}, {"sha": "5c9de279c02d891a3d9ca828e09fdc4b21cf507f", "filename": "src/test/ui/generator/yield-while-ref-reborrowed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -1,5 +1,5 @@\n error[E0501]: cannot borrow `x` as immutable because previous closure requires unique access\n-  --> $DIR/yield-while-ref-reborrowed.rs:35:20\n+  --> $DIR/yield-while-ref-reborrowed.rs:36:20\n    |\n LL |     let mut b = || {\n    |                 -- closure construction occurs here\n@@ -8,7 +8,7 @@ LL |         let a = &mut *x;\n ...\n LL |     println!(\"{}\", x); //~ ERROR\n    |                    ^ borrow occurs here\n-LL |     b.resume();\n+LL |     Pin::new(&mut b).resume();\n LL | }\n    | - borrow from closure ends here\n "}, {"sha": "8b5887224d19ae862c831b1f9afe45e80c6701df", "filename": "src/test/ui/nll/issue-55850.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fnll%2Fissue-55850.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc/src%2Ftest%2Fui%2Fnll%2Fissue-55850.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55850.rs?ref=a3fdee9a7523a72a5ee72cdb4c1cf3c2cec444bc", "patch": "@@ -1,23 +1,23 @@\n #![allow(unused_mut)]\n #![feature(generators, generator_trait)]\n \n+use std::marker::Unpin;\n use std::ops::Generator;\n use std::ops::GeneratorState::Yielded;\n+use std::pin::Pin;\n \n pub struct GenIter<G>(G);\n \n impl <G> Iterator for GenIter<G>\n where\n-    G: Generator,\n+    G: Generator + Unpin,\n {\n     type Item = G::Yield;\n \n     fn next(&mut self) -> Option<Self::Item> {\n-        unsafe {\n-            match self.0.resume() {\n-                Yielded(y) => Some(y),\n-                _ => None\n-            }\n+        match Pin::new(&mut self.0).resume() {\n+            Yielded(y) => Some(y),\n+            _ => None\n         }\n     }\n }"}]}