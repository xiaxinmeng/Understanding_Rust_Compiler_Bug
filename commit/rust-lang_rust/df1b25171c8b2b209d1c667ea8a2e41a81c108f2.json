{"sha": "df1b25171c8b2b209d1c667ea8a2e41a81c108f2", "node_id": "C_kwDOAAsO6NoAKGRmMWIyNTE3MWM4YjJiMjA5ZDFjNjY3ZWE4YTJlNDFhODFjMTA4ZjI", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-17T13:47:52Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-17T13:47:52Z"}, "message": "Remove TyCtxt parameter from compile_fn", "tree": {"sha": "0dd2e08bacf40bb3901525348e80094e4ed866c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dd2e08bacf40bb3901525348e80094e4ed866c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df1b25171c8b2b209d1c667ea8a2e41a81c108f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df1b25171c8b2b209d1c667ea8a2e41a81c108f2", "html_url": "https://github.com/rust-lang/rust/commit/df1b25171c8b2b209d1c667ea8a2e41a81c108f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df1b25171c8b2b209d1c667ea8a2e41a81c108f2/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c820b7cd607cd2fa7eec88785d92d10461b39053", "url": "https://api.github.com/repos/rust-lang/rust/commits/c820b7cd607cd2fa7eec88785d92d10461b39053", "html_url": "https://github.com/rust-lang/rust/commit/c820b7cd607cd2fa7eec88785d92d10461b39053"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "a7c7f66e166bfd2c1468012730cabe5cb36412c8", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df1b25171c8b2b209d1c667ea8a2e41a81c108f2/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df1b25171c8b2b209d1c667ea8a2e41a81c108f2/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=df1b25171c8b2b209d1c667ea8a2e41a81c108f2", "patch": "@@ -36,7 +36,7 @@ pub(crate) fn codegen_and_compile_fn<'tcx>(\n     let cached_func = std::mem::replace(&mut cached_context.func, Function::new());\n     let codegened_func = codegen_fn(tcx, cx, cached_func, module, instance);\n \n-    compile_fn(tcx, cx, cached_context, module, codegened_func);\n+    compile_fn(cx, cached_context, module, codegened_func);\n }\n \n fn codegen_fn<'tcx>(\n@@ -142,7 +142,6 @@ fn codegen_fn<'tcx>(\n }\n \n fn compile_fn<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n     cx: &mut crate::CodegenCx<'tcx>,\n     cached_context: &mut Context,\n     module: &mut dyn Module,\n@@ -193,7 +192,7 @@ fn compile_fn<'tcx>(\n     };\n \n     // Define function\n-    tcx.sess.time(\"define function\", || {\n+    cx.profiler.verbose_generic_activity(\"define function\").run(|| {\n         context.want_disasm = cx.should_write_ir;\n         module.define_function(codegened_func.func_id, context).unwrap();\n     });\n@@ -222,7 +221,7 @@ fn compile_fn<'tcx>(\n     let isa = module.isa();\n     let debug_context = &mut cx.debug_context;\n     let unwind_context = &mut cx.unwind_context;\n-    tcx.sess.time(\"generate debug info\", || {\n+    cx.profiler.verbose_generic_activity(\"generate debug info\").run(|| {\n         if let Some(debug_context) = debug_context {\n             debug_context.define_function(\n                 codegened_func.instance,"}, {"sha": "f4ffbbcf86ecea2fbc223caeae1a9172cac7de0d", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df1b25171c8b2b209d1c667ea8a2e41a81c108f2/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df1b25171c8b2b209d1c667ea8a2e41a81c108f2/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=df1b25171c8b2b209d1c667ea8a2e41a81c108f2", "patch": "@@ -30,6 +30,7 @@ use std::sync::Arc;\n \n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_codegen_ssa::CodegenResults;\n+use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_errors::ErrorGuaranteed;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n@@ -122,6 +123,7 @@ impl<F: Fn() -> String> Drop for PrintOnPanic<F> {\n /// The codegen context holds any information shared between the codegen of individual functions\n /// inside a single codegen unit with the exception of the Cranelift [`Module`](cranelift_module::Module).\n struct CodegenCx<'tcx> {\n+    profiler: SelfProfilerRef,\n     output_filenames: Arc<OutputFilenames>,\n     should_write_ir: bool,\n     global_asm: String,\n@@ -149,6 +151,7 @@ impl<'tcx> CodegenCx<'tcx> {\n             None\n         };\n         CodegenCx {\n+            profiler: tcx.prof.clone(),\n             output_filenames: tcx.output_filenames(()).clone(),\n             should_write_ir: crate::pretty_clif::should_write_ir(tcx),\n             global_asm: String::new(),"}]}