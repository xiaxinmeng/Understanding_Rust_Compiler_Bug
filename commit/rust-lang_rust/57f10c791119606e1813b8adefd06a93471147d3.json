{"sha": "57f10c791119606e1813b8adefd06a93471147d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZjEwYzc5MTExOTYwNmUxODEzYjhhZGVmZDA2YTkzNDcxMTQ3ZDM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-10-09T22:53:37Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-10-09T22:53:37Z"}, "message": "Point to variable in `asm!` macro when failing borrowck", "tree": {"sha": "ef6c8c8d324dc7dac4551cef10e8b097c443a278", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef6c8c8d324dc7dac4551cef10e8b097c443a278"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57f10c791119606e1813b8adefd06a93471147d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57f10c791119606e1813b8adefd06a93471147d3", "html_url": "https://github.com/rust-lang/rust/commit/57f10c791119606e1813b8adefd06a93471147d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57f10c791119606e1813b8adefd06a93471147d3/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e07c4281c343e9e15a0a8fca79538ad1a8eb513", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e07c4281c343e9e15a0a8fca79538ad1a8eb513", "html_url": "https://github.com/rust-lang/rust/commit/0e07c4281c343e9e15a0a8fca79538ad1a8eb513"}], "stats": {"total": 90, "additions": 49, "deletions": 41}, "files": [{"sha": "4d51126621d7dcaf66d10f50170d892d17fdd54a", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57f10c791119606e1813b8adefd06a93471147d3/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57f10c791119606e1813b8adefd06a93471147d3/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=57f10c791119606e1813b8adefd06a93471147d3", "patch": "@@ -3953,6 +3953,7 @@ impl<'a> LoweringContext<'a> {\n                             constraint: out.constraint.clone(),\n                             is_rw: out.is_rw,\n                             is_indirect: out.is_indirect,\n+                            span: out.expr.span,\n                         })\n                         .collect(),\n                     asm: asm.asm.clone(),"}, {"sha": "1a97c678ef1c0a4cb2893a61e5cc10c4bd1d205b", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57f10c791119606e1813b8adefd06a93471147d3/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57f10c791119606e1813b8adefd06a93471147d3/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=57f10c791119606e1813b8adefd06a93471147d3", "patch": "@@ -1812,6 +1812,7 @@ pub struct InlineAsmOutput {\n     pub constraint: Symbol,\n     pub is_rw: bool,\n     pub is_indirect: bool,\n+    pub span: Span,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]"}, {"sha": "9f4ac77fa1fe1483d4f832e491b4720e6f3ac02c", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57f10c791119606e1813b8adefd06a93471147d3/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57f10c791119606e1813b8adefd06a93471147d3/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=57f10c791119606e1813b8adefd06a93471147d3", "patch": "@@ -983,7 +983,8 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::BodyId {\n impl_stable_hash_for!(struct hir::InlineAsmOutput {\n     constraint,\n     is_rw,\n-    is_indirect\n+    is_indirect,\n+    span\n });\n \n impl_stable_hash_for!(struct hir::GlobalAsm {"}, {"sha": "7e9b26bbf729c357a70ac32a9e0c3ed2426738d1", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/57f10c791119606e1813b8adefd06a93471147d3/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57f10c791119606e1813b8adefd06a93471147d3/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=57f10c791119606e1813b8adefd06a93471147d3", "patch": "@@ -364,11 +364,12 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n     }\n \n     fn mutate_expr(&mut self,\n+                   span: Span,\n                    assignment_expr: &hir::Expr,\n                    expr: &hir::Expr,\n                    mode: MutateMode) {\n         let cmt = return_if_err!(self.mc.cat_expr(expr));\n-        self.delegate.mutate(assignment_expr.id, assignment_expr.span, &cmt, mode);\n+        self.delegate.mutate(assignment_expr.id, span, &cmt, mode);\n         self.walk_expr(expr);\n     }\n \n@@ -472,12 +473,16 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                     if o.is_indirect {\n                         self.consume_expr(output);\n                     } else {\n-                        self.mutate_expr(expr, output,\n-                                         if o.is_rw {\n-                                             MutateMode::WriteAndRead\n-                                         } else {\n-                                             MutateMode::JustWrite\n-                                         });\n+                        self.mutate_expr(\n+                            output.span,\n+                            expr,\n+                            output,\n+                            if o.is_rw {\n+                                MutateMode::WriteAndRead\n+                            } else {\n+                                MutateMode::JustWrite\n+                            },\n+                        );\n                     }\n                 }\n                 self.consume_exprs(inputs);\n@@ -515,7 +520,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n             }\n \n             hir::ExprKind::Assign(ref lhs, ref rhs) => {\n-                self.mutate_expr(expr, &lhs, MutateMode::JustWrite);\n+                self.mutate_expr(expr.span, expr, &lhs, MutateMode::JustWrite);\n                 self.consume_expr(&rhs);\n             }\n \n@@ -527,7 +532,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 if self.mc.tables.is_method_call(expr) {\n                     self.consume_expr(lhs);\n                 } else {\n-                    self.mutate_expr(expr, &lhs, MutateMode::WriteAndRead);\n+                    self.mutate_expr(expr.span, expr, &lhs, MutateMode::WriteAndRead);\n                 }\n                 self.consume_expr(&rhs);\n             }"}, {"sha": "9cbaf35acd33fe978ae9fa0e73496a941352c249", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57f10c791119606e1813b8adefd06a93471147d3/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57f10c791119606e1813b8adefd06a93471147d3/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=57f10c791119606e1813b8adefd06a93471147d3", "patch": "@@ -544,21 +544,21 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                         // be encoeded through MIR place derefs instead.\n                         self.access_place(\n                             context,\n-                            (output, span),\n+                            (output, o.span),\n                             (Deep, Read(ReadKind::Copy)),\n                             LocalMutationIsAllowed::No,\n                             flow_state,\n                         );\n                         self.check_if_path_or_subpath_is_moved(\n                             context,\n                             InitializationRequiringAction::Use,\n-                            (output, span),\n+                            (output, o.span),\n                             flow_state,\n                         );\n                     } else {\n                         self.mutate_place(\n                             context,\n-                            (output, span),\n+                            (output, o.span),\n                             if o.is_rw { Deep } else { Shallow(None) },\n                             if o.is_rw { WriteAndRead } else { JustWrite },\n                             flow_state,"}, {"sha": "40a36dd895f772b9b82b217f2004418f1029188b", "filename": "src/test/ui/asm/asm-out-assign-imm.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57f10c791119606e1813b8adefd06a93471147d3/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57f10c791119606e1813b8adefd06a93471147d3/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.nll.stderr?ref=57f10c791119606e1813b8adefd06a93471147d3", "patch": "@@ -1,13 +1,13 @@\n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/asm-out-assign-imm.rs:34:9\n+  --> $DIR/asm-out-assign-imm.rs:34:34\n    |\n LL |     let x: isize;\n    |         - help: make this binding mutable: `mut x`\n LL |     x = 1;\n    |     ----- first assignment to `x`\n ...\n LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n+   |                                  ^ cannot assign twice to immutable variable\n \n error: aborting due to previous error\n "}, {"sha": "51933cac39692003261bc72e51121fe5c3b78648", "filename": "src/test/ui/asm/asm-out-assign-imm.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57f10c791119606e1813b8adefd06a93471147d3/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57f10c791119606e1813b8adefd06a93471147d3/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.stderr?ref=57f10c791119606e1813b8adefd06a93471147d3", "patch": "@@ -1,11 +1,11 @@\n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/asm-out-assign-imm.rs:34:9\n+  --> $DIR/asm-out-assign-imm.rs:34:34\n    |\n LL |     x = 1;\n    |     ----- first assignment to `x`\n ...\n LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n+   |                                  ^ cannot assign twice to immutable variable\n \n error: aborting due to previous error\n "}, {"sha": "0cec1975db8805e7b1d6bfbdfc034452914fdf14", "filename": "src/test/ui/borrowck/borrowck-asm.ast.nll.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/57f10c791119606e1813b8adefd06a93471147d3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57f10c791119606e1813b8adefd06a93471147d3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.ast.nll.stderr?ref=57f10c791119606e1813b8adefd06a93471147d3", "patch": "@@ -22,7 +22,7 @@ LL |         let z = y;\n    |                 - borrow later used here\n \n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:54:13\n+  --> $DIR/borrowck-asm.rs:54:31\n    |\n LL |         let x = 3;\n    |             -\n@@ -31,10 +31,10 @@ LL |         let x = 3;\n    |             help: make this binding mutable: `mut x`\n LL |         unsafe {\n LL |             asm!(\"nop\" : \"=r\"(x));  //[ast]~ ERROR cannot assign twice\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n+   |                               ^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:70:13\n+  --> $DIR/borrowck-asm.rs:70:31\n    |\n LL |         let x = 3;\n    |             -\n@@ -43,22 +43,22 @@ LL |         let x = 3;\n    |             help: make this binding mutable: `mut x`\n LL |         unsafe {\n LL |             asm!(\"nop\" : \"+r\"(x));  //[ast]~ ERROR cannot assign twice\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n+   |                               ^ cannot assign twice to immutable variable\n \n error[E0381]: use of possibly uninitialized variable: `x`\n-  --> $DIR/borrowck-asm.rs:78:13\n+  --> $DIR/borrowck-asm.rs:78:32\n    |\n LL |             asm!(\"nop\" : \"=*r\"(x)); //[ast]~ ERROR use of possibly uninitialized variable\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^ use of possibly uninitialized `x`\n+   |                                ^ use of possibly uninitialized `x`\n \n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/borrowck-asm.rs:87:13\n+  --> $DIR/borrowck-asm.rs:87:31\n    |\n LL |         let y = &*x;\n    |                 --- borrow of `x` occurs here\n LL |         unsafe {\n LL |             asm!(\"nop\" : \"+r\"(x));  //[ast]~ ERROR cannot assign to `x` because it is borrowed\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `x` occurs here\n+   |                               ^ assignment to borrowed `x` occurs here\n ...\n LL |         let z = y;\n    |                 - borrow later used here"}, {"sha": "5856a1b0790b217c50a044685e3d2915b2ab4b62", "filename": "src/test/ui/borrowck/borrowck-asm.ast.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/57f10c791119606e1813b8adefd06a93471147d3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57f10c791119606e1813b8adefd06a93471147d3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.ast.stderr?ref=57f10c791119606e1813b8adefd06a93471147d3", "patch": "@@ -19,31 +19,31 @@ LL |             asm!(\"nop\" : : \"r\"(x)); //[ast]~ ERROR cannot use\n    |                                ^ use of borrowed `x`\n \n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:54:13\n+  --> $DIR/borrowck-asm.rs:54:31\n    |\n LL |         let x = 3;\n    |             - first assignment to `x`\n LL |         unsafe {\n LL |             asm!(\"nop\" : \"=r\"(x));  //[ast]~ ERROR cannot assign twice\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n+   |                               ^ cannot assign twice to immutable variable\n \n error[E0506]: cannot assign to `a` because it is borrowed\n-  --> $DIR/borrowck-asm.rs:60:13\n+  --> $DIR/borrowck-asm.rs:60:31\n    |\n LL |         let b = &*a;\n    |                  -- borrow of `a` occurs here\n LL |         unsafe {\n LL |             asm!(\"nop\" : \"=r\"(a));  //[ast]~ ERROR cannot assign to `a` because it is borrowed\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `a` occurs here\n+   |                               ^ assignment to borrowed `a` occurs here\n \n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:70:13\n+  --> $DIR/borrowck-asm.rs:70:31\n    |\n LL |         let x = 3;\n    |             - first assignment to `x`\n LL |         unsafe {\n LL |             asm!(\"nop\" : \"+r\"(x));  //[ast]~ ERROR cannot assign twice\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n+   |                               ^ cannot assign twice to immutable variable\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-asm.rs:78:32\n@@ -52,13 +52,13 @@ LL |             asm!(\"nop\" : \"=*r\"(x)); //[ast]~ ERROR use of possibly uninitia\n    |                                ^ use of possibly uninitialized `x`\n \n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/borrowck-asm.rs:87:13\n+  --> $DIR/borrowck-asm.rs:87:31\n    |\n LL |         let y = &*x;\n    |                  -- borrow of `x` occurs here\n LL |         unsafe {\n LL |             asm!(\"nop\" : \"+r\"(x));  //[ast]~ ERROR cannot assign to `x` because it is borrowed\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `x` occurs here\n+   |                               ^ assignment to borrowed `x` occurs here\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-asm.rs:96:40"}, {"sha": "0cec1975db8805e7b1d6bfbdfc034452914fdf14", "filename": "src/test/ui/borrowck/borrowck-asm.mir.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/57f10c791119606e1813b8adefd06a93471147d3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57f10c791119606e1813b8adefd06a93471147d3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.mir.stderr?ref=57f10c791119606e1813b8adefd06a93471147d3", "patch": "@@ -22,7 +22,7 @@ LL |         let z = y;\n    |                 - borrow later used here\n \n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:54:13\n+  --> $DIR/borrowck-asm.rs:54:31\n    |\n LL |         let x = 3;\n    |             -\n@@ -31,10 +31,10 @@ LL |         let x = 3;\n    |             help: make this binding mutable: `mut x`\n LL |         unsafe {\n LL |             asm!(\"nop\" : \"=r\"(x));  //[ast]~ ERROR cannot assign twice\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n+   |                               ^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:70:13\n+  --> $DIR/borrowck-asm.rs:70:31\n    |\n LL |         let x = 3;\n    |             -\n@@ -43,22 +43,22 @@ LL |         let x = 3;\n    |             help: make this binding mutable: `mut x`\n LL |         unsafe {\n LL |             asm!(\"nop\" : \"+r\"(x));  //[ast]~ ERROR cannot assign twice\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n+   |                               ^ cannot assign twice to immutable variable\n \n error[E0381]: use of possibly uninitialized variable: `x`\n-  --> $DIR/borrowck-asm.rs:78:13\n+  --> $DIR/borrowck-asm.rs:78:32\n    |\n LL |             asm!(\"nop\" : \"=*r\"(x)); //[ast]~ ERROR use of possibly uninitialized variable\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^ use of possibly uninitialized `x`\n+   |                                ^ use of possibly uninitialized `x`\n \n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/borrowck-asm.rs:87:13\n+  --> $DIR/borrowck-asm.rs:87:31\n    |\n LL |         let y = &*x;\n    |                 --- borrow of `x` occurs here\n LL |         unsafe {\n LL |             asm!(\"nop\" : \"+r\"(x));  //[ast]~ ERROR cannot assign to `x` because it is borrowed\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `x` occurs here\n+   |                               ^ assignment to borrowed `x` occurs here\n ...\n LL |         let z = y;\n    |                 - borrow later used here"}]}