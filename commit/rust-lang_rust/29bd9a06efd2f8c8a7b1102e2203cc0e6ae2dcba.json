{"sha": "29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YmQ5YTA2ZWZkMmY4YzhhN2IxMTAyZTIyMDNjYzBlNmFlMmRjYmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-20T23:03:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-20T23:03:09Z"}, "message": "Auto merge of #21439 - alexcrichton:rollup, r=alexcrichton\n\nContinuation of https://github.com/rust-lang/rust/pull/21428", "tree": {"sha": "98824cc18b1c65ff09f383438d79ad2d0a0e2ea8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98824cc18b1c65ff09f383438d79ad2d0a0e2ea8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "html_url": "https://github.com/rust-lang/rust/commit/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "583c5c589ed02e5b6b14a576e35e0ce68988d949", "url": "https://api.github.com/repos/rust-lang/rust/commits/583c5c589ed02e5b6b14a576e35e0ce68988d949", "html_url": "https://github.com/rust-lang/rust/commit/583c5c589ed02e5b6b14a576e35e0ce68988d949"}, {"sha": "631896dc1996d239a532b0ce02d5fe886660149e", "url": "https://api.github.com/repos/rust-lang/rust/commits/631896dc1996d239a532b0ce02d5fe886660149e", "html_url": "https://github.com/rust-lang/rust/commit/631896dc1996d239a532b0ce02d5fe886660149e"}], "stats": {"total": 799, "additions": 499, "deletions": 300}, "files": [{"sha": "830884b19bde204400dc43c82c372a34932305cb", "filename": "man/rustdoc.1", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/man%2Frustdoc.1", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/man%2Frustdoc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustdoc.1?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -35,9 +35,27 @@ space-separated list of plugins to run (default: '')\n --plugin-path <val>\n directory to load plugins from (default: /tmp/rustdoc_ng/plugins)\n .TP\n+--target <val>\n+target triple to document\n+.TP\n+--crate-name <val>\n+specify the name of this crate\n+.TP\n -L --library-path <val>\n directory to add to crate search path\n .TP\n+--cfg <val>\n+pass a --cfg to rustc\n+.TP\n+--extern <val>\n+pass an --extern to rustc\n+.TP\n+--test\n+run code examples as tests\n+.TP\n+--test-args <val>\n+pass arguments to the test runner\n+.TP\n --html-in-header <val>\n file to add to <head>\n .TP\n@@ -47,8 +65,20 @@ file to add in <body>, before content\n --html-after-content <val>\n file to add in <body>, after content\n .TP\n+--markdown-css <val>\n+CSS files to include via <link> in a rendered Markdown file\n+.TP\n+--markdown-playground-url <val>\n+URL to send code snippets to\n+.TP\n+--markdown-no-toc\n+don't include table of contents\n+.TP\n -h, --help\n Print help\n+.TP\n+-V, --version\n+Print rustdoc's version\n \n .SH \"OUTPUT FORMATS\"\n "}, {"sha": "02cc745803fea23cb6aeeea5cb7034763d4112d6", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -38,16 +38,14 @@ ifdef CHECK_IGNORED\n   TESTARGS += --ignored\n endif\n \n-TEST_BENCH =\n \n # Arguments to the cfail/rfail/rpass/bench tests\n ifdef CFG_VALGRIND\n   CTEST_RUNTOOL = --runtool \"$(CFG_VALGRIND)\"\n-  TEST_BENCH =\n endif\n \n ifdef PLEASE_BENCH\n-  TEST_BENCH = --bench\n+  TESTARGS += --bench\n endif\n \n # Arguments to the perf tests"}, {"sha": "85badc11d64f03de8b2fd9262b1fb2cf0470cbcb", "filename": "src/doc/guide-crates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide-crates.md", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide-crates.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-crates.md?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -1,4 +1,4 @@\n % The (old) Rust Crates and Modules Guide\n \n-This content has moved into the\n+This content has moved into\n [the Rust Programming Language book](book/crates-and-modules.html)."}, {"sha": "54fa529f3aa8eed2561cbfbdadfbd41b56c2cf27", "filename": "src/doc/guide-error-handling.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide-error-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide-error-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-error-handling.md?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -1,4 +1,4 @@\n % Error Handling in Rust\n \n-This content has moved into the\n+This content has moved into\n [the Rust Programming Language book](book/error-handling.html)."}, {"sha": "1130a10bd1c5540c1f3f5be2a0da56fda1acb444", "filename": "src/doc/guide-ffi.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-ffi.md?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -1,4 +1,4 @@\n % The (old) Rust Foreign Function Interface Guide\n \n-This content has moved into the\n+This content has moved into\n [the Rust Programming Language book](book/ffi.html)."}, {"sha": "228cb3c624f8958abc5526886745f03dbf912fac", "filename": "src/doc/guide-macros.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-macros.md?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -1,4 +1,4 @@\n % The (old) Rust Macros Guide\n \n-This content has moved into the\n+This content has moved into\n [the Rust Programming Language book](book/macros.html)."}, {"sha": "884f14726ca87e7b7c75137cbfa942acc6873b43", "filename": "src/doc/guide-ownership.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide-ownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide-ownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-ownership.md?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -1,4 +1,4 @@\n % The (old) Rust Ownership Guide\n \n-This content has moved into the\n+This content has moved into\n [the Rust Programming Language book](book/ownership.html)."}, {"sha": "d6495d02e1189fd1de39f68c3b5929b068b47338", "filename": "src/doc/guide-plugins.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide-plugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide-plugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-plugins.md?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -1,4 +1,4 @@\n % The (old) Rust Compiler Plugins Guide\n \n-This content has moved into the\n+This content has moved into\n [the Rust Programming Language book](book/plugins.html)."}, {"sha": "0374166405c62a28feb2cca3f7d181df17b75b6c", "filename": "src/doc/guide-pointers.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide-pointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide-pointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-pointers.md?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -1,4 +1,4 @@\n % The (old) Rust Pointer Guide\n \n-This content has moved into the\n+This content has moved into\n [the Rust Programming Language book](book/pointers.html)."}, {"sha": "d030614489bccfd3ad87f3619003fe43ed65a7f6", "filename": "src/doc/guide-strings.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide-strings.md", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide-strings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-strings.md?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -1,4 +1,4 @@\n % The (old) Guide to Rust Strings\n \n-This content has moved into the\n+This content has moved into\n [the Rust Programming Language book](book/strings.html)."}, {"sha": "197559bef0408564d13f90ee1e6cc008d09d5b24", "filename": "src/doc/guide-tasks.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-tasks.md?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -1,4 +1,4 @@\n % The (old) Rust Threads and Communication Guide\n \n-This content has moved into the\n+This content has moved into\n [the Rust Programming Language book](book/tasks.html)."}, {"sha": "67bcb0a5e546a950016498783845eb4372f4644d", "filename": "src/doc/guide-testing.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide-testing.md", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide-testing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-testing.md?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -1,4 +1,4 @@\n % The (old) Rust Testing Guide\n \n-This content has moved into the\n+This content has moved into\n [the Rust Programming Language book](book/testing.html)."}, {"sha": "3c1a82d0174494f9c276eca6c20801fc2fdb1a6b", "filename": "src/doc/guide-unsafe.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-unsafe.md?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -1,4 +1,4 @@\n % Writing Safe Low-level and Unsafe Code in Rust\n \n-This content has moved into the\n+This content has moved into\n [the Rust Programming Language book](book/unsafe.html)."}, {"sha": "b9e70e7cfd7e06f27160657e9bb509011b5bf89a", "filename": "src/doc/guide.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -1,4 +1,4 @@\n % The (old) Rust Guide\n \n-This content has moved into the\n+This content has moved into\n [the Rust Programming Language book](book/README.html)."}, {"sha": "d3af4ab1c7467574d076cd6c654c6c1a08181127", "filename": "src/doc/reference.md", "status": "modified", "additions": 111, "deletions": 111, "changes": 222, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -257,18 +257,18 @@ cases mentioned in [Number literals](#number-literals) below.\n \n | [Number literals](#number-literals)`*` | Example | Exponentiation | Suffixes |\n |----------------------------------------|---------|----------------|----------|\n-| Decimal integer | `98_222i` | `N/A` | Integer suffixes |\n-| Hex integer | `0xffi` | `N/A` | Integer suffixes |\n-| Octal integer | `0o77i` | `N/A` | Integer suffixes |\n-| Binary integer | `0b1111_0000i` | `N/A` | Integer suffixes |\n+| Decimal integer | `98_222is` | `N/A` | Integer suffixes |\n+| Hex integer | `0xffis` | `N/A` | Integer suffixes |\n+| Octal integer | `0o77is` | `N/A` | Integer suffixes |\n+| Binary integer | `0b1111_0000is` | `N/A` | Integer suffixes |\n | Floating-point | `123.0E+77f64` | `Optional` | Floating-point suffixes |\n \n `*` All number literals allow `_` as a visual separator: `1_234.0E+18f64`\n \n ##### Suffixes\n | Integer | Floating-point |\n |---------|----------------|\n-| `i` (`int`), `u` (`uint`), `u8`, `i8`, `u16`, `i16`, `u32`, `i32`, `u64`, `i64` | `f32`, `f64` |\n+| `is` (`isize`), `us` (`usize`), `u8`, `i8`, `u16`, `i16`, `u32`, `i32`, `u64`, `i64` | `f32`, `f64` |\n \n #### Character and string literals\n \n@@ -468,7 +468,7 @@ Like any literal, an integer literal may be followed (immediately,\n without any spaces) by an _integer suffix_, which forcibly sets the\n type of the literal. There are 10 valid values for an integer suffix:\n \n-* The `i` and `u` suffixes give the literal type `int` or `uint`,\n+* The `is` and `us` suffixes give the literal type `isize` or `usize`,\n   respectively.\n * Each of the signed and unsigned machine types `u8`, `i8`,\n   `u16`, `i16`, `u32`, `i32`, `u64` and `i64`\n@@ -483,9 +483,9 @@ context overconstrains the type, it is also considered a static type error.\n Examples of integer literals of various forms:\n \n ```\n-123i;                              // type int\n-123u;                              // type uint\n-123_u;                             // type uint\n+123is;                             // type isize\n+123us;                             // type usize\n+123_us;                            // type usize\n 0xff_u8;                           // type u8\n 0o70_i16;                          // type i16\n 0b1111_1111_1001_0000_i32;         // type i32\n@@ -578,8 +578,8 @@ Two examples of paths with type arguments:\n # struct HashMap<K, V>;\n # fn f() {\n # fn id<T>(t: T) -> T { t }\n-type T = HashMap<int,String>;  // Type arguments used in a type expression\n-let x = id::<int>(10);       // Type arguments used in a call expression\n+type T = HashMap<i32,String>; // Type arguments used in a type expression\n+let x  = id::<i32>(10);       // Type arguments used in a call expression\n # }\n ```\n \n@@ -971,7 +971,7 @@ path_glob : ident [ \"::\" [ path_glob\n                           | '*' ] ] ?\n           | '{' path_item [ ',' path_item ] * '}' ;\n \n-path_item : ident | \"mod\" ;\n+path_item : ident | \"self\" ;\n ```\n \n A _use declaration_ creates one or more local name bindings synonymous with\n@@ -991,22 +991,22 @@ Use declarations support a number of convenient shortcuts:\n * Binding all paths matching a given prefix, using the asterisk wildcard syntax\n   `use a::b::*;`\n * Simultaneously binding a list of paths differing only in their final element\n-  and their immediate parent module, using the `mod` keyword, such as\n-  `use a::b::{mod, c, d};`\n+  and their immediate parent module, using the `self` keyword, such as\n+  `use a::b::{self, c, d};`\n \n An example of `use` declarations:\n \n ```\n use std::iter::range_step;\n use std::option::Option::{Some, None};\n-use std::collections::hash_map::{mod, HashMap};\n+use std::collections::hash_map::{self, HashMap};\n \n fn foo<T>(_: T){}\n-fn bar(map1: HashMap<String, uint>, map2: hash_map::HashMap<String, uint>){}\n+fn bar(map1: HashMap<String, usize>, map2: hash_map::HashMap<String, usize>){}\n \n fn main() {\n-    // Equivalent to 'std::iter::range_step(0u, 10u, 2u);'\n-    range_step(0u, 10u, 2u);\n+    // Equivalent to 'std::iter::range_step(0us, 10, 2);'\n+    range_step(0us, 10, 2);\n \n     // Equivalent to 'foo(vec![std::option::Option::Some(1.0f64),\n     // std::option::Option::None]);'\n@@ -1104,7 +1104,7 @@ interpreted as an implicit `return` expression applied to the final-expression.\n An example of a function:\n \n ```\n-fn add(x: int, y: int) -> int {\n+fn add(x: i32, y: i32) -> i32 {\n     return x + y;\n }\n ```\n@@ -1113,7 +1113,7 @@ As with `let` bindings, function arguments are irrefutable patterns, so any\n pattern that is valid in a let binding is also valid as an argument.\n \n ```\n-fn first((value, _): (int, int)) -> int { value }\n+fn first((value, _): (i32, i32)) -> i32 { value }\n ```\n \n \n@@ -1139,8 +1139,8 @@ used as a type name.\n \n When a generic function is referenced, its type is instantiated based on the\n context of the reference. For example, calling the `iter` function defined\n-above on `[1, 2]` will instantiate type parameter `T` with `int`, and require\n-the closure parameter to have type `fn(int)`.\n+above on `[1, 2]` will instantiate type parameter `T` with `isize`, and require\n+the closure parameter to have type `fn(isize)`.\n \n The type parameters can also be explicitly supplied in a trailing\n [path](#paths) component after the function name. This might be necessary if\n@@ -1272,7 +1272,7 @@ typecheck:\n ```\n # fn my_err(s: &str) -> ! { panic!() }\n \n-fn f(i: int) -> int {\n+fn f(i: i32) -> i32 {\n    if i == 42 {\n      return 42;\n    }\n@@ -1283,7 +1283,7 @@ fn f(i: int) -> int {\n ```\n \n This will not compile without the `!` annotation on `my_err`, since the `else`\n-branch of the conditional in `f` does not return an `int`, as required by the\n+branch of the conditional in `f` does not return an `i32`, as required by the\n signature of `f`. Adding the `!` annotation to `my_err` informs the\n typechecker that, should control ever enter `my_err`, no further type judgments\n about `f` need to hold, since control will never resume in any context that\n@@ -1301,18 +1301,18 @@ modifier.\n \n ```\n // Declares an extern fn, the ABI defaults to \"C\"\n-extern fn new_int() -> int { 0 }\n+extern fn new_i32() -> i32 { 0 }\n \n // Declares an extern fn with \"stdcall\" ABI\n-extern \"stdcall\" fn new_int_stdcall() -> int { 0 }\n+extern \"stdcall\" fn new_i32_stdcall() -> i32 { 0 }\n ```\n \n Unlike normal functions, extern fns have an `extern \"ABI\" fn()`. This is the\n same type as the functions declared in an extern block.\n \n ```\n-# extern fn new_int() -> int { 0 }\n-let fptr: extern \"C\" fn() -> int = new_int;\n+# extern fn new_i32() -> i32 { 0 }\n+let fptr: extern \"C\" fn() -> i32 = new_i32;\n ```\n \n Extern functions may be called directly from Rust code as Rust uses large,\n@@ -1348,18 +1348,18 @@ keyword `struct`.\n An example of a `struct` item and its use:\n \n ```\n-struct Point {x: int, y: int}\n+struct Point {x: i32, y: i32}\n let p = Point {x: 10, y: 11};\n-let px: int = p.x;\n+let px: i32 = p.x;\n ```\n \n A _tuple structure_ is a nominal [tuple type](#tuple-types), also defined with\n the keyword `struct`. For example:\n \n ```\n-struct Point(int, int);\n+struct Point(i32, i32);\n let p = Point(10, 11);\n-let px: int = match p { Point(x, _) => x };\n+let px: i32 = match p { Point(x, _) => x };\n ```\n \n A _unit-like struct_ is a structure without any fields, defined by leaving off\n@@ -1457,14 +1457,14 @@ a type derived from those primitive types. The derived types are references with\n the `static` lifetime, fixed-size arrays, tuples, enum variants, and structs.\n \n ```\n-const BIT1: uint = 1 << 0;\n-const BIT2: uint = 1 << 1;\n+const BIT1: u32 = 1 << 0;\n+const BIT2: u32 = 1 << 1;\n \n-const BITS: [uint; 2] = [BIT1, BIT2];\n+const BITS: [u32; 2] = [BIT1, BIT2];\n const STRING: &'static str = \"bitstring\";\n \n struct BitsNStrings<'a> {\n-    mybits: [uint; 2],\n+    mybits: [u32; 2],\n     mystring: &'a str\n }\n \n@@ -1500,14 +1500,14 @@ Constants should in general be preferred over statics, unless large amounts of\n data are being stored, or single-address and mutability properties are required.\n \n ```\n-use std::sync::atomic::{AtomicUint, Ordering, ATOMIC_UINT_INIT};;\n+use std::sync::atomic::{AtomicUsize, Ordering, ATOMIC_USIZE_INIT};\n \n-// Note that ATOMIC_UINT_INIT is a *const*, but it may be used to initialize a\n+// Note that ATOMIC_USIZE_INIT is a *const*, but it may be used to initialize a\n // static. This static can be modified, so it is not placed in read-only memory.\n-static COUNTER: AtomicUint = ATOMIC_UINT_INIT;\n+static COUNTER: AtomicUsize = ATOMIC_USIZE_INIT;\n \n // This table is a candidate to be placed in read-only memory.\n-static TABLE: &'static [uint] = &[1, 2, 3, /* ... */];\n+static TABLE: &'static [usize] = &[1, 2, 3, /* ... */];\n \n for slot in TABLE.iter() {\n     println!(\"{}\", slot);\n@@ -1529,13 +1529,13 @@ Mutable statics are still very useful, however. They can be used with C\n libraries and can also be bound from C libraries (in an `extern` block).\n \n ```\n-# fn atomic_add(_: &mut uint, _: uint) -> uint { 2 }\n+# fn atomic_add(_: &mut u32, _: u32) -> u32 { 2 }\n \n-static mut LEVELS: uint = 0;\n+static mut LEVELS: u32 = 0;\n \n // This violates the idea of no shared state, and this doesn't internally\n // protect against races, so this function is `unsafe`\n-unsafe fn bump_levels_unsafe1() -> uint {\n+unsafe fn bump_levels_unsafe1() -> u32 {\n     let ret = LEVELS;\n     LEVELS += 1;\n     return ret;\n@@ -1544,7 +1544,7 @@ unsafe fn bump_levels_unsafe1() -> uint {\n // Assuming that we have an atomic_add function which returns the old value,\n // this function is \"safe\" but the meaning of the return value may not be what\n // callers expect, so it's still marked as `unsafe`\n-unsafe fn bump_levels_unsafe2() -> uint {\n+unsafe fn bump_levels_unsafe2() -> u32 {\n     return atomic_add(&mut LEVELS, 1);\n }\n ```\n@@ -1564,8 +1564,8 @@ Traits are implemented for specific types through separate\n [implementations](#implementations).\n \n ```\n-# type Surface = int;\n-# type BoundingBox = int;\n+# type Surface = i32;\n+# type BoundingBox = i32;\n trait Shape {\n     fn draw(&self, Surface);\n     fn bounding_box(&self) -> BoundingBox;\n@@ -1583,8 +1583,8 @@ functions](#generic-functions).\n \n ```\n trait Seq<T> {\n-   fn len(&self) -> uint;\n-   fn elt_at(&self, n: uint) -> T;\n+   fn len(&self) -> u32;\n+   fn elt_at(&self, n: u32) -> T;\n    fn iter<F>(&self, F) where F: Fn(T);\n }\n ```\n@@ -1595,7 +1595,7 @@ parameter, and within the generic function, the methods of the trait can be\n called on values that have the parameter's type. For example:\n \n ```\n-# type Surface = int;\n+# type Surface = i32;\n # trait Shape { fn draw(&self, Surface); }\n fn draw_twice<T: Shape>(surface: Surface, sh: T) {\n     sh.draw(surface);\n@@ -1610,8 +1610,8 @@ trait is in scope) to pointers to the trait name, used as a type.\n \n ```\n # trait Shape { }\n-# impl Shape for int { }\n-# let mycircle = 0i;\n+# impl Shape for i32 { }\n+# let mycircle = 0i32;\n let myshape: Box<Shape> = Box::new(mycircle) as Box<Shape>;\n ```\n \n@@ -1629,12 +1629,12 @@ module. For example:\n \n ```\n trait Num {\n-    fn from_int(n: int) -> Self;\n+    fn from_i32(n: i32) -> Self;\n }\n impl Num for f64 {\n-    fn from_int(n: int) -> f64 { n as f64 }\n+    fn from_i32(n: i32) -> f64 { n as f64 }\n }\n-let x: f64 = Num::from_int(42);\n+let x: f64 = Num::from_i32(42);\n ```\n \n Traits may inherit from other traits. For example, in\n@@ -1669,9 +1669,9 @@ Likewise, supertrait methods may also be called on trait objects.\n ```{.ignore}\n # trait Shape { fn area(&self) -> f64; }\n # trait Circle : Shape { fn radius(&self) -> f64; }\n-# impl Shape for int { fn area(&self) -> f64 { 0.0 } }\n-# impl Circle for int { fn radius(&self) -> f64 { 0.0 } }\n-# let mycircle = 0;\n+# impl Shape for i32 { fn area(&self) -> f64 { 0.0 } }\n+# impl Circle for i32 { fn radius(&self) -> f64 { 0.0 } }\n+# let mycircle = 0i32;\n let mycircle = Box::new(mycircle) as Box<Circle>;\n let nonsense = mycircle.radius() * mycircle.area();\n ```\n@@ -1686,7 +1686,7 @@ Implementations are defined with the keyword `impl`.\n ```\n # struct Point {x: f64, y: f64};\n # impl Copy for Point {}\n-# type Surface = int;\n+# type Surface = i32;\n # struct BoundingBox {x: f64, y: f64, width: f64, height: f64};\n # trait Shape { fn draw(&self, Surface); fn bounding_box(&self) -> BoundingBox; }\n # fn do_draw_circle(s: Surface, c: Circle) { }\n@@ -1715,7 +1715,7 @@ limited to nominal types (enums, structs), and the implementation must appear\n in the same module or a sub-module as the `self` type:\n \n ```\n-struct Point {x: int, y: int}\n+struct Point {x: i32, y: i32}\n \n impl Point {\n     fn log(&self) {\n@@ -1826,7 +1826,7 @@ struct Foo;\n \n // Declare a public struct with a private field\n pub struct Bar {\n-    field: int\n+    field: i32\n }\n \n // Declare a public enum with two public variants\n@@ -2226,15 +2226,15 @@ plugins](book/plugin.html#lint-plugins) can provide additional lint checks.\n mod m1 {\n     // Missing documentation is ignored here\n     #[allow(missing_docs)]\n-    pub fn undocumented_one() -> int { 1 }\n+    pub fn undocumented_one() -> i32 { 1 }\n \n     // Missing documentation signals a warning here\n     #[warn(missing_docs)]\n-    pub fn undocumented_too() -> int { 2 }\n+    pub fn undocumented_too() -> i32 { 2 }\n \n     // Missing documentation signals an error here\n     #[deny(missing_docs)]\n-    pub fn undocumented_end() -> int { 3 }\n+    pub fn undocumented_end() -> i32 { 3 }\n }\n ```\n \n@@ -2247,16 +2247,16 @@ mod m2{\n     #[allow(missing_docs)]\n     mod nested {\n         // Missing documentation is ignored here\n-        pub fn undocumented_one() -> int { 1 }\n+        pub fn undocumented_one() -> i32 { 1 }\n \n         // Missing documentation signals a warning here,\n         // despite the allow above.\n         #[warn(missing_docs)]\n-        pub fn undocumented_two() -> int { 2 }\n+        pub fn undocumented_two() -> i32 { 2 }\n     }\n \n     // Missing documentation signals a warning here\n-    pub fn undocumented_too() -> int { 3 }\n+    pub fn undocumented_too() -> i32 { 3 }\n }\n ```\n \n@@ -2269,7 +2269,7 @@ mod m3 {\n     // Attempting to toggle warning signals an error here\n     #[allow(missing_docs)]\n     /// Returns 2.\n-    pub fn undocumented_too() -> int { 2 }\n+    pub fn undocumented_too() -> i32 { 2 }\n }\n ```\n \n@@ -2451,7 +2451,7 @@ There are three different types of inline attributes:\n * `#[inline(always)]` asks the compiler to always perform an inline expansion.\n * `#[inline(never)]` asks the compiler to never perform an inline expansion.\n \n-### Derive\n+### `derive`\n \n The `derive` attribute allows certain traits to be automatically implemented\n for data structures. For example, the following will create an `impl` for the\n@@ -2461,15 +2461,15 @@ the `PartialEq` or `Clone` constraints for the appropriate `impl`:\n ```\n #[derive(PartialEq, Clone)]\n struct Foo<T> {\n-    a: int,\n+    a: i32,\n     b: T\n }\n ```\n \n The generated `impl` for `PartialEq` is equivalent to\n \n ```\n-# struct Foo<T> { a: int, b: T }\n+# struct Foo<T> { a: i32, b: T }\n impl<T: PartialEq> PartialEq for Foo<T> {\n     fn eq(&self, other: &Foo<T>) -> bool {\n         self.a == other.a && self.b == other.b\n@@ -2821,7 +2821,7 @@ parentheses. They are used to create [tuple-typed](#tuple-types) values.\n ```{.tuple}\n (0,);\n (0.0, 4.5);\n-(\"a\", 4u, true);\n+(\"a\", 4us, true);\n ```\n \n ### Unit expressions\n@@ -2862,7 +2862,7 @@ The following are examples of structure expressions:\n ```\n # struct Point { x: f64, y: f64 }\n # struct TuplePoint(f64, f64);\n-# mod game { pub struct User<'a> { pub name: &'a str, pub age: uint, pub score: uint } }\n+# mod game { pub struct User<'a> { pub name: &'a str, pub age: u32, pub score: uint } }\n # struct Cookie; fn some_fn<T>(t: T) {}\n Point {x: 10.0, y: 20.0};\n TuplePoint(10.0, 20.0);\n@@ -2883,7 +2883,7 @@ were explicitly specified and the values in the base expression for all other\n fields.\n \n ```\n-# struct Point3d { x: int, y: int, z: int }\n+# struct Point3d { x: i32, y: i32, z: i32 }\n let base = Point3d {x: 1, y: 2, z: 3};\n Point3d {y: 0, z: 10, .. base};\n ```\n@@ -2958,9 +2958,9 @@ constant expression that can be evaluated at compile time, such as a\n [literal](#literals) or a [static item](#static-items).\n \n ```\n-[1i, 2, 3, 4];\n+[1is, 2, 3, 4];\n [\"a\", \"b\", \"c\", \"d\"];\n-[0i; 128];             // array with 128 zeros\n+[0is; 128];            // array with 128 zeros\n [0u8, 0u8, 0u8, 0u8];\n ```\n \n@@ -3113,7 +3113,7 @@ An example of an `as` expression:\n \n ```\n # fn sum(v: &[f64]) -> f64 { 0.0 }\n-# fn len(v: &[f64]) -> int { 0 }\n+# fn len(v: &[f64]) -> i32 { 0 }\n \n fn avg(v: &[f64]) -> f64 {\n   let sum: f64 = sum(v);\n@@ -3133,7 +3133,7 @@ moves](#moved-and-copied-types) its right-hand operand to its left-hand\n operand.\n \n ```\n-# let mut x = 0i;\n+# let mut x = 0is;\n # let y = 0;\n \n x = y;\n@@ -3184,7 +3184,7 @@ paren_expr : '(' expr ')' ;\n An example of a parenthesized expression:\n \n ```\n-let x: int = (2 + 3) * 4;\n+let x: i32 = (2 + 3) * 4;\n ```\n \n \n@@ -3204,9 +3204,9 @@ then the expression completes.\n Some examples of call expressions:\n \n ```\n-# fn add(x: int, y: int) -> int { 0 }\n+# fn add(x: i32, y: i32) -> i32 { 0 }\n \n-let x: int = add(1, 2);\n+let x: i32 = add(1i32, 2i32);\n let pi: Option<f32> = \"3.14\".parse();\n ```\n \n@@ -3245,8 +3245,8 @@ In this example, we define a function `ten_times` that takes a higher-order\n function argument, and call it with a lambda expression as an argument:\n \n ```\n-fn ten_times<F>(f: F) where F: Fn(int) {\n-    let mut i = 0;\n+fn ten_times<F>(f: F) where F: Fn(i32) {\n+    let mut i = 0i32;\n     while i < 10 {\n         f(i);\n         i += 1;\n@@ -3270,7 +3270,7 @@ conditional expression evaluates to `false`, the `while` expression completes.\n An example:\n \n ```\n-let mut i = 0u;\n+let mut i = 0us;\n \n while i < 10 {\n     println!(\"hello\");\n@@ -3333,7 +3333,7 @@ by an implementation of `std::iter::Iterator`.\n An example of a for loop over the contents of an array:\n \n ```\n-# type Foo = int;\n+# type Foo = i32;\n # fn bar(f: Foo) { }\n # let a = 0;\n # let b = 0;\n@@ -3349,8 +3349,8 @@ for e in v.iter() {\n An example of a for loop over a series of integers:\n \n ```\n-# fn bar(b:uint) { }\n-for i in range(0u, 256) {\n+# fn bar(b:usize) { }\n+for i in range(0us, 256) {\n     bar(i);\n }\n ```\n@@ -3402,7 +3402,7 @@ fields of a particular variant. For example:\n enum List<X> { Nil, Cons(X, Box<List<X>>) }\n \n fn main() {\n-    let x: List<int> = List::Cons(10, box List::Cons(11, box List::Nil));\n+    let x: List<i32> = List::Cons(10, box List::Cons(11, box List::Nil));\n \n     match x {\n         List::Cons(_, box List::Nil) => panic!(\"singleton list\"),\n@@ -3423,12 +3423,12 @@ Used inside an array pattern, `..` stands for any number of elements, when the\n `advanced_slice_patterns` feature gate is turned on. This wildcard can be used\n at most once for a given array, which implies that it cannot be used to\n specifically match elements that are at an unknown distance from both ends of a\n-array, like `[.., 42, ..]`. If followed by a variable name, it will bind the\n+array, like `[.., 42, ..]`. If preceded by a variable name, it will bind the\n corresponding slice to the variable. Example:\n \n ```\n # #![feature(advanced_slice_patterns)]\n-fn is_symmetric(list: &[uint]) -> bool {\n+fn is_symmetric(list: &[u32]) -> bool {\n     match list {\n         [] | [_]                   => true,\n         [x, inside.., y] if x == y => is_symmetric(inside),\n@@ -3462,13 +3462,13 @@ An example of a `match` expression:\n \n ```\n #![feature(box_syntax)]\n-# fn process_pair(a: int, b: int) { }\n+# fn process_pair(a: i32, b: i32) { }\n # fn process_ten() { }\n \n enum List<X> { Nil, Cons(X, Box<List<X>>) }\n \n fn main() {\n-    let x: List<int> = List::Cons(10, box List::Cons(11, box List::Nil));\n+    let x: List<i32> = List::Cons(10, box List::Cons(11, box List::Nil));\n \n     match x {\n         List::Cons(a, box List::Cons(b, _)) => {\n@@ -3520,11 +3520,11 @@ fn main() {\n ```\n \n Patterns can also dereference pointers by using the `&`, `&mut` and `box`\n-symbols, as appropriate. For example, these two matches on `x: &int` are\n+symbols, as appropriate. For example, these two matches on `x: &isize` are\n equivalent:\n \n ```\n-# let x = &3i;\n+# let x = &3is;\n let y = match *x { 0 => \"zero\", _ => \"some\" };\n let z = match x { &0 => \"zero\", _ => \"some\" };\n \n@@ -3545,7 +3545,7 @@ Multiple match patterns may be joined with the `|` operator. A range of values\n may be specified with `...`. For example:\n \n ```\n-# let x = 2i;\n+# let x = 2is;\n \n let message = match x {\n   0 | 1  => \"not many\",\n@@ -3565,8 +3565,8 @@ may refer to the variables bound within the pattern they follow.\n \n ```\n # let maybe_digit = Some(0);\n-# fn process_digit(i: int) { }\n-# fn process_other(i: int) { }\n+# fn process_digit(i: i32) { }\n+# fn process_other(i: i32) { }\n \n let message = match maybe_digit {\n   Some(x) if x < 10 => process_digit(x),\n@@ -3614,7 +3614,7 @@ caller frame.\n An example of a `return` expression:\n \n ```\n-fn max(a: int, b: int) -> int {\n+fn max(a: i32, b: i32) -> i32 {\n    if a > b {\n       return a;\n    }\n@@ -3666,12 +3666,12 @@ The machine types are the following:\n \n #### Machine-dependent integer types\n \n-The `uint` type is an unsigned integer type with the same number of bits as the\n+The `usize` type is an unsigned integer type with the same number of bits as the\n platform's pointer type. It can represent every memory address in the process.\n \n-The `int` type is a signed integer type with the same number of bits as the\n+The `isize` type is a signed integer type with the same number of bits as the\n platform's pointer type. The theoretical upper bound on object and array size\n-is the maximum `int` value. This ensures that `int` can be used to calculate\n+is the maximum `isize` value. This ensures that `isize` can be used to calculate\n differences between pointers into an object or array and can address every byte\n within an object along with one byte past the end.\n \n@@ -3707,7 +3707,7 @@ by the tuple type.\n An example of a tuple type and its use:\n \n ```\n-type Pair<'a> = (int, &'a str);\n+type Pair<'a> = (i32, &'a str);\n let p: Pair<'static> = (10, \"hello\");\n let (a, b) = p;\n assert!(b != \"world\");\n@@ -3858,13 +3858,13 @@ or `extern`), a sequence of input types and an output type.\n An example of a `fn` type:\n \n ```\n-fn add(x: int, y: int) -> int {\n+fn add(x: i32, y: i32) -> i32 {\n   return x + y;\n }\n \n let mut x = add(5,7);\n \n-type Binop = fn(int, int) -> int;\n+type Binop = fn(i32, i32) -> i32;\n let bo: Binop = add;\n x = bo(5,7);\n ```\n@@ -3886,16 +3886,16 @@ The type of a closure mapping an input of type `A` to an output of type `B` is\n An example of creating and calling a closure:\n \n ```rust\n-let captured_var = 10i;\n+let captured_var = 10is;\n \n let closure_no_args = |&:| println!(\"captured_var={}\", captured_var);\n \n-let closure_args = |&: arg: int| -> int {\n+let closure_args = |&: arg: isize| -> isize {\n   println!(\"captured_var={}, arg={}\", captured_var, arg);\n   arg // Note lack of semicolon after 'arg'\n };\n \n-fn call_closure<F: Fn(), G: Fn(int) -> int>(c1: F, c2: G) {\n+fn call_closure<F: Fn(), G: Fn(isize) -> isize>(c1: F, c2: G) {\n   c1();\n   c2(2);\n }\n@@ -3927,7 +3927,7 @@ trait Printable {\n   fn stringify(&self) -> String;\n }\n \n-impl Printable for int {\n+impl Printable for isize {\n   fn stringify(&self) -> String { self.to_string() }\n }\n \n@@ -3936,7 +3936,7 @@ fn print(a: Box<Printable>) {\n }\n \n fn main() {\n-   print(Box::new(10i) as Box<Printable>);\n+   print(Box::new(10is) as Box<Printable>);\n }\n ```\n \n@@ -4102,7 +4102,7 @@ Local variables are immutable unless declared otherwise like: `let mut x = ...`.\n \n Function parameters are immutable unless declared with `mut`. The `mut` keyword\n applies only to the following parameter (so `|mut x, y|` and `fn f(mut x:\n-Box<int>, y: Box<int>)` declare one mutable variable `x` and one immutable\n+Box<i32>, y: Box<i32>)` declare one mutable variable `x` and one immutable\n variable `y`).\n \n Methods that take either `self` or `Box<Self>` can optionally place them in a\n@@ -4130,7 +4130,7 @@ the type of a box is `std::owned::Box<T>`.\n An example of a box type and value:\n \n ```\n-let x: Box<int> = Box::new(10);\n+let x: Box<i32> = Box::new(10);\n ```\n \n Box values exist in 1:1 correspondence with their heap allocation, copying a\n@@ -4139,7 +4139,7 @@ copy of a box to move ownership of the value. After a value has been moved,\n the source location cannot be used unless it is reinitialized.\n \n ```\n-let x: Box<int> = Box::new(10);\n+let x: Box<i32> = Box::new(10);\n let y = x;\n // attempting to use `x` will result in an error here\n ```"}, {"sha": "901b44661b04c743771893cd77aac09d7e1d3ee9", "filename": "src/doc/trpl/compound-data-types.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Ftrpl%2Fcompound-data-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Ftrpl%2Fcompound-data-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fcompound-data-types.md?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -254,7 +254,7 @@ things from the standard library if you need them.\n Okay, let's talk about the actual code in the example. `cmp` is a function that\n compares two things, and returns an `Ordering`. We return either\n `Ordering::Less`, `Ordering::Greater`, or `Ordering::Equal`, depending on if\n-the two values are greater, less, or equal. Note that each variant of the\n+the two values are less, greater, or equal. Note that each variant of the\n `enum` is namespaced under the `enum` itself: it's `Ordering::Greater` not\n `Greater`.\n "}, {"sha": "25870d84a754f151050eca6ea93dffac858c4cbe", "filename": "src/doc/trpl/crates-and-modules.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Ftrpl%2Fcrates-and-modules.md", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Ftrpl%2Fcrates-and-modules.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fcrates-and-modules.md?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -208,9 +208,8 @@ Again, these declarations tell Rust to look for either\n these sub-modules don't have their own sub-modules, we've chosen to make them\n `src/english/greetings.rs` and `src/japanese/farewells.rs`. Whew!\n \n-Right now, the contents of `src/english/greetings.rs` and\n-`src/japanese/farewells.rs` are both empty at the moment. Let's add some\n-functions.\n+The contents of `src/english/greetings.rs` and `src/japanese/farewells.rs` are\n+both empty at the moment. Let's add some functions.\n \n Put this in `src/english/greetings.rs`:\n "}, {"sha": "3e4e0a66eae050a5ca25d169b394752d6fa92899", "filename": "src/doc/trpl/generics.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Ftrpl%2Fgenerics.md", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Ftrpl%2Fgenerics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fgenerics.md?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -79,9 +79,9 @@ This type is generic over _two_ types: `T` and `E`. By the way, the capital lett\n can be any letter you'd like. We could define `Result<T, E>` as:\n \n ```{rust}\n-enum Result<H, N> {\n-    Ok(H),\n-    Err(N),\n+enum Result<A, Z> {\n+    Ok(A),\n+    Err(Z),\n }\n ```\n "}, {"sha": "f429e9df1965718aa2ec36d706c590f48dfbba70", "filename": "src/doc/trpl/macros.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Ftrpl%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Ftrpl%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmacros.md?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -101,6 +101,7 @@ So `($x:ident -> (($e:expr)))`, though excessively fancy, would designate a macr\n that could be invoked like: `my_macro!(i->(( 2+2 )))`.\n \n To avoid ambiguity, macro invocation syntax must conform to the following rules:\n+\n * `expr` must be followed by `=>`, `,` or `;`.\n * `ty` and `path` must be followed by `=>`, `,`, `:`, `=`, `>` or `as`.\n * `pat` must be followed by `=>`, `,` or `=`."}, {"sha": "8b7e37dd4c2fdbbd33b3289b89b96fbe87a9d64c", "filename": "src/doc/trpl/ownership.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Ftrpl%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Ftrpl%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fownership.md?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -395,7 +395,7 @@ static FOO: i32 = 5;\n let x: &'static i32 = &FOO;\n ```\n \n-This adds an `i32` to the data segment of the binary, and `FOO` is a reference\n+This adds an `i32` to the data segment of the binary, and `x` is a reference\n to it.\n \n # Shared Ownership"}, {"sha": "2a66b4a01f7a9a80eeac456c6f3816b2eabcb6da", "filename": "src/doc/trpl/unsafe.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Ftrpl%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fdoc%2Ftrpl%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Funsafe.md?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -254,7 +254,7 @@ impl<T: Send> Drop for Unique<T> {\n             // Copy the object out from the pointer onto the stack,\n             // where it is covered by normal Rust destructor semantics\n             // and cleans itself up, if necessary\n-            ptr::read(self.ptr as *const T);\n+            ptr::read(self.ptr);\n \n             // clean-up our allocation\n             free(self.ptr as *mut c_void)\n@@ -703,10 +703,10 @@ Other features provided by lang items include:\n   `deref`, and `add` respectively.\n - stack unwinding and general failure; the `eh_personality`, `fail`\n   and `fail_bounds_checks` lang items.\n-- the traits in `std::markers` used to indicate types of\n+- the traits in `std::marker` used to indicate types of\n   various kinds; lang items `send`, `sync` and `copy`.\n - the marker types and variance indicators found in\n-  `std::markers`; lang items `covariant_type`,\n+  `std::marker`; lang items `covariant_type`,\n   `contravariant_lifetime`, `no_sync_bound`, etc.\n \n Lang items are loaded lazily by the compiler; e.g. if one never uses"}, {"sha": "eeb1b89472b3d36c82c14413fc2aa7d3804d1c04", "filename": "src/etc/generate-deriving-span-tests.py", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fetc%2Fgenerate-deriving-span-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fetc%2Fgenerate-deriving-span-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgenerate-deriving-span-tests.py?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -12,8 +12,8 @@\n \n \"\"\"\n This script creates a pile of compile-fail tests check that all the\n-derivings have spans that point to the fields, rather than the\n-#[deriving(...)] line.\n+derives have spans that point to the fields, rather than the\n+#[derive(...)] line.\n \n sample usage: src/etc/generate-deriving-span-tests.py\n \"\"\"\n@@ -46,29 +46,29 @@\n \"\"\"\n \n ENUM_STRING = \"\"\"\n-#[deriving({traits})]\n+#[derive({traits})]\n enum Enum {{\n    A(\n      Error {errors}\n      )\n }}\n \"\"\"\n ENUM_STRUCT_VARIANT_STRING = \"\"\"\n-#[deriving({traits})]\n+#[derive({traits})]\n enum Enum {{\n    A {{\n      x: Error {errors}\n    }}\n }}\n \"\"\"\n STRUCT_STRING = \"\"\"\n-#[deriving({traits})]\n+#[derive({traits})]\n struct Struct {{\n     x: Error {errors}\n }}\n \"\"\"\n STRUCT_TUPLE_STRING = \"\"\"\n-#[deriving({traits})]\n+#[derive({traits})]\n struct Struct(\n     Error {errors}\n );\n@@ -80,14 +80,14 @@ def create_test_case(type, trait, super_traits, number_of_errors):\n     string = [ENUM_STRING, ENUM_STRUCT_VARIANT_STRING, STRUCT_STRING, STRUCT_TUPLE_STRING][type]\n     all_traits = ','.join([trait] + super_traits)\n     super_traits = ','.join(super_traits)\n-    error_deriving = '#[deriving(%s)]' % super_traits if super_traits else ''\n+    error_deriving = '#[derive(%s)]' % super_traits if super_traits else ''\n \n     errors = '\\n'.join('//~%s ERROR' % ('^' * n) for n in range(error_count))\n     code = string.format(traits = all_traits, errors = errors)\n     return TEMPLATE.format(year = YEAR, error_deriving=error_deriving, code = code)\n \n def write_file(name, string):\n-    test_file = os.path.join(TEST_DIR, 'deriving-span-%s.rs' % name)\n+    test_file = os.path.join(TEST_DIR, 'derives-span-%s.rs' % name)\n \n     # set write permission if file exists, so it can be changed\n     if os.path.exists(test_file):"}, {"sha": "3ceec0f250a33a3d06b9573baba2fa73aa76c706", "filename": "src/etc/kate/rust.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fetc%2Fkate%2Frust.xml", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fetc%2Fkate%2Frust.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fkate%2Frust.xml?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -249,7 +249,7 @@\n \t\t\t<DetectChar char=\"=\" attribute=\"Normal Text\" context=\"#pop\"/>\n \t\t\t<DetectChar char=\"&lt;\" attribute=\"Normal Text\" context=\"#pop\"/>\n \t\t</context>\n-\t\t<context attribute=\"String\" lineEndContext=\"#stay\" name=\"String\">\n+\t\t<context attribute=\"String\" lineEndContext=\"#pop\" name=\"String\">\n \t\t\t<LineContinue attribute=\"String\" context=\"#stay\"/>\n \t\t\t<DetectChar char=\"\\\" attribute=\"CharEscape\" context=\"CharEscape\"/>\n \t\t\t<DetectChar attribute=\"String\" context=\"#pop\" char=\"&quot;\"/>"}, {"sha": "1217769096df0be2e12aca1937f8a899501c687e", "filename": "src/etc/nano/rust.nanorc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fetc%2Fnano%2Frust.nanorc", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fetc%2Fnano%2Frust.nanorc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnano%2Frust.nanorc?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -0,0 +1,35 @@\n+# Nano configuration for Rust\n+# Copyright 2015 The Rust Project Developers.\n+#\n+# NOTE: Rules are applied in order: later rules re-colorize matching text.\n+syntax \"rust\" \"\\.rs\"\n+\n+# function definition\n+color magenta \"fn [a-z0-9_]+\"\n+\n+# Reserved words\n+color yellow \"\\<(abstract|alignof|as|be|box|break|const|continue|crate|do|else|enum|extern|false|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|offsetof|override|priv|pub|pure|ref|return|sizeof|static|self|struct|super|true|trait|type|typeof|unsafe|unsized|use|virtual|where|while|yield)\\>\"\n+\n+# macros\n+color red \"[a-z_]+!\"\n+\n+# Constants\n+color magenta \"[A-Z][A-Z_]+\"\n+\n+# Traits/Enums/Structs/Types/etc.\n+color magenta \"[A-Z][a-z]+\"\n+\n+# Strings\n+color green \"\\\".*\\\"\"\n+color green start=\"\\\".*\\\\$\" end=\".*\\\"\"\n+# NOTE: This isn't accurate but matching \"#{0,} for the end of the string is too liberal\n+color green start=\"r#+\\\"\" end=\"\\\"#+\"\n+\n+# Comments\n+color blue \"//.*\"\n+\n+# Attributes\n+color magenta start=\"#!\\[\" end=\"\\]\"\n+\n+# Some common markers\n+color brightcyan \"(XXX|TODO|FIXME|\\?\\?\\?)\""}, {"sha": "536ab7f30b9fa0604a420980633af1aa2dabcc92", "filename": "src/etc/tidy.py", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fetc%2Ftidy.py", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fetc%2Ftidy.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftidy.py?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -8,7 +8,7 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n-import sys, fileinput, subprocess, re\n+import sys, fileinput, subprocess, re, os\n from licenseck import *\n import snapshot\n \n@@ -58,20 +58,20 @@ def do_license_check(name, contents):\n     for line in fileinput.input(file_names,\n                                 openhook=fileinput.hook_encoded(\"utf-8\")):\n \n-        if fileinput.filename().find(\"tidy.py\") == -1:\n-            if line.find(cr_flag) != -1:\n+        if \"tidy.py\" not in fileinput.filename():\n+            if cr_flag in line:\n                 check_cr = False\n-            if line.find(tab_flag) != -1:\n+            if tab_flag in line:\n                 check_tab = False\n-            if line.find(linelength_flag) != -1:\n+            if linelength_flag in line:\n                 check_linelength = False\n-            if line.find(\"TODO\") != -1:\n+            if \"TODO\" in line:\n                 report_err(\"TODO is deprecated; use FIXME\")\n             match = re.match(r'^.*/(\\*|/!?)\\s*XXX', line)\n             if match:\n                 report_err(\"XXX is no longer necessary, use FIXME\")\n             match = re.match(r'^.*//\\s*(NOTE.*)$', line)\n-            if match:\n+            if match and \"TRAVIS\" not in os.environ:\n                 m = match.group(1)\n                 if \"snap\" in m.lower():\n                     report_warn(match.group(1))\n@@ -86,10 +86,10 @@ def do_license_check(name, contents):\n                 if \"SNAP\" in line:\n                     report_warn(\"unmatched SNAP line: \" + line)\n \n-        if check_tab and (line.find('\\t') != -1 and\n-            fileinput.filename().find(\"Makefile\") == -1):\n+        if check_tab and ('\\t' in line and\n+            \"Makefile\" not in fileinput.filename()):\n             report_err(\"tab character\")\n-        if check_cr and not autocrlf and line.find('\\r') != -1:\n+        if check_cr and not autocrlf and '\\r' in line:\n             report_err(\"CR character\")\n         if line.endswith(\" \\n\") or line.endswith(\"\\t\\n\"):\n             report_err(\"trailing whitespace\")"}, {"sha": "4a0bb992fd9897c6d6b9c148e794f6e4c7510fb6", "filename": "src/etc/unicode.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -392,7 +392,7 @@ def emit_grapheme_module(f, grapheme_table, grapheme_cats):\n     use core::slice;\n \n     #[allow(non_camel_case_types)]\n-    #[deriving(Clone)]\n+    #[derive(Clone)]\n     pub enum GraphemeCat {\n \"\"\")\n     for cat in grapheme_cats + [\"Any\"]:"}, {"sha": "bd5b43b782e8d67ecddc7fde67efd874c95e57a3", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -298,7 +298,7 @@ mod imp {\n             libc::realloc(ptr as *mut libc::c_void, size as libc::size_t) as *mut u8\n         } else {\n             let new_ptr = allocate(size, align);\n-            ptr::copy_memory(new_ptr, ptr as *const u8, cmp::min(size, old_size));\n+            ptr::copy_memory(new_ptr, ptr, cmp::min(size, old_size));\n             deallocate(ptr, old_size, align);\n             new_ptr\n         }"}, {"sha": "fa8906430894fbd87846b6b06f99f8260a66519a", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -344,11 +344,11 @@ impl<K, V> Node<K, V> {\n     pub fn as_slices<'a>(&'a self) -> (&'a [K], &'a [V]) {\n         unsafe {(\n             mem::transmute(raw::Slice {\n-                data: self.keys.0 as *const K,\n+                data: self.keys.0,\n                 len: self.len()\n             }),\n             mem::transmute(raw::Slice {\n-                data: self.vals.0 as *const V,\n+                data: self.vals.0,\n                 len: self.len()\n             })\n         )}\n@@ -368,7 +368,7 @@ impl<K, V> Node<K, V> {\n         } else {\n             unsafe {\n                 mem::transmute(raw::Slice {\n-                    data: self.edges.0 as *const Node<K, V>,\n+                    data: self.edges.0,\n                     len: self.len() + 1\n                 })\n             }"}, {"sha": "6a182add000644a6f4e47e2472b8bcc1a49bec96", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -102,10 +102,10 @@ pub fn fixme_14344_be_sure_to_link_to_collections() {}\n mod std {\n     pub use core::fmt;      // necessary for panic!()\n     pub use core::option;   // necessary for panic!()\n-    pub use core::clone;    // deriving(Clone)\n-    pub use core::cmp;      // deriving(Eq, Ord, etc.)\n-    pub use core::marker;  // deriving(Copy)\n-    pub use core::hash;     // deriving(Hash)\n+    pub use core::clone;    // derive(Clone)\n+    pub use core::cmp;      // derive(Eq, Ord, etc.)\n+    pub use core::marker;  // derive(Copy)\n+    pub use core::hash;     // derive(Hash)\n }\n \n #[cfg(test)]"}, {"sha": "b9cb4be7c1891caf463650eeabb524c32952f98b", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -88,19 +88,19 @@ impl<T> RingBuf<T> {\n     /// Turn ptr into a slice\n     #[inline]\n     unsafe fn buffer_as_slice(&self) -> &[T] {\n-        mem::transmute(RawSlice { data: self.ptr as *const T, len: self.cap })\n+        mem::transmute(RawSlice { data: self.ptr, len: self.cap })\n     }\n \n     /// Turn ptr into a mut slice\n     #[inline]\n     unsafe fn buffer_as_mut_slice(&mut self) -> &mut [T] {\n-        mem::transmute(RawSlice { data: self.ptr as *const T, len: self.cap })\n+        mem::transmute(RawSlice { data: self.ptr, len: self.cap })\n     }\n \n     /// Moves an element out of the buffer\n     #[inline]\n     unsafe fn buffer_read(&mut self, off: uint) -> T {\n-        ptr::read(self.ptr.offset(off as int) as *const T)\n+        ptr::read(self.ptr.offset(off as int))\n     }\n \n     /// Writes an element into the buffer, moving it."}, {"sha": "988ec4c661faae229e2951dea5effe788c05d686", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -1222,7 +1222,7 @@ fn insertion_sort<T, F>(v: &mut [T], mut compare: F) where F: FnMut(&T, &T) -> O\n                                  &*buf_v.offset(j),\n                                  (i - j) as uint);\n                 ptr::copy_nonoverlapping_memory(buf_v.offset(j),\n-                                                &tmp as *const T,\n+                                                &tmp,\n                                                 1);\n                 mem::forget(tmp);\n             }"}, {"sha": "4ddab8c533aabad27e4265fe55d2c680b1472d8a", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -426,7 +426,7 @@ impl<T> Vec<T> {\n     pub fn as_mut_slice<'a>(&'a mut self) -> &'a mut [T] {\n         unsafe {\n             mem::transmute(RawSlice {\n-                data: *self.ptr as *const T,\n+                data: *self.ptr,\n                 len: self.len,\n             })\n         }\n@@ -574,7 +574,7 @@ impl<T> Vec<T> {\n                 let ptr = self.as_mut_ptr().offset(index as int);\n                 // copy it out, unsafely having a copy of the value on\n                 // the stack and in the vector at the same time.\n-                ret = ptr::read(ptr as *const T);\n+                ret = ptr::read(ptr);\n \n                 // Shift everything down to fill in that spot.\n                 ptr::copy_memory(ptr, &*ptr.offset(1), len - index - 1);\n@@ -879,7 +879,7 @@ impl<T> Vec<T> {\n                     //          |         |\n                     //          end_u     end_t\n \n-                    let t = ptr::read(pv.start_t as *const T);\n+                    let t = ptr::read(pv.start_t);\n                     //  start_u start_t\n                     //  |       |\n                     // +-+-+-+-+-+-+-+-+-+\n@@ -1443,7 +1443,7 @@ impl<T> AsSlice<T> for Vec<T> {\n     fn as_slice<'a>(&'a self) -> &'a [T] {\n         unsafe {\n             mem::transmute(RawSlice {\n-                data: *self.ptr as *const T,\n+                data: *self.ptr,\n                 len: self.len\n             })\n         }\n@@ -1806,11 +1806,11 @@ impl<T,U> Drop for PartialVecNonZeroSized<T,U> {\n \n             // We have instances of `U`s and `T`s in `vec`. Destruct them.\n             while self.start_u != self.end_u {\n-                let _ = ptr::read(self.start_u as *const U); // Run a `U` destructor.\n+                let _ = ptr::read(self.start_u); // Run a `U` destructor.\n                 self.start_u = self.start_u.offset(1);\n             }\n             while self.start_t != self.end_t {\n-                let _ = ptr::read(self.start_t as *const T); // Run a `T` destructor.\n+                let _ = ptr::read(self.start_t); // Run a `T` destructor.\n                 self.start_t = self.start_t.offset(1);\n             }\n             // After this destructor ran, the destructor of `vec` will run,"}, {"sha": "7ff2e9535886c67e43cdc10405503923a905a58a", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 71, "deletions": 11, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -186,7 +186,7 @@ impl<V> VecMap<V> {\n         }\n     }\n \n-    /// Returns an iterator visiting all keys in ascending order by the keys.\n+    /// Returns an iterator visiting all keys in ascending order of the keys.\n     /// The iterator's element type is `uint`.\n     #[stable]\n     pub fn keys<'r>(&'r self) -> Keys<'r, V> {\n@@ -196,7 +196,7 @@ impl<V> VecMap<V> {\n         Keys { iter: self.iter().map(first) }\n     }\n \n-    /// Returns an iterator visiting all values in ascending order by the keys.\n+    /// Returns an iterator visiting all values in ascending order of the keys.\n     /// The iterator's element type is `&'r V`.\n     #[stable]\n     pub fn values<'r>(&'r self) -> Values<'r, V> {\n@@ -206,7 +206,7 @@ impl<V> VecMap<V> {\n         Values { iter: self.iter().map(second) }\n     }\n \n-    /// Returns an iterator visiting all key-value pairs in ascending order by the keys.\n+    /// Returns an iterator visiting all key-value pairs in ascending order of the keys.\n     /// The iterator's element type is `(uint, &'r V)`.\n     ///\n     /// # Examples\n@@ -233,7 +233,7 @@ impl<V> VecMap<V> {\n         }\n     }\n \n-    /// Returns an iterator visiting all key-value pairs in ascending order by the keys,\n+    /// Returns an iterator visiting all key-value pairs in ascending order of the keys,\n     /// with mutable references to the values.\n     /// The iterator's element type is `(uint, &'r mut V)`.\n     ///\n@@ -264,8 +264,8 @@ impl<V> VecMap<V> {\n         }\n     }\n \n-    /// Returns an iterator visiting all key-value pairs in ascending order by\n-    /// the keys, emptying (but not consuming) the original `VecMap`.\n+    /// Returns an iterator visiting all key-value pairs in ascending order of\n+    /// the keys, consuming the original `VecMap`.\n     /// The iterator's element type is `(uint, &'r V)`.\n     ///\n     /// # Examples\n@@ -278,20 +278,46 @@ impl<V> VecMap<V> {\n     /// map.insert(3, \"c\");\n     /// map.insert(2, \"b\");\n     ///\n-    /// // Not possible with .iter()\n     /// let vec: Vec<(uint, &str)> = map.into_iter().collect();\n     ///\n     /// assert_eq!(vec, vec![(1, \"a\"), (2, \"b\"), (3, \"c\")]);\n     /// ```\n     #[stable]\n-    pub fn into_iter(&mut self) -> IntoIter<V> {\n+    pub fn into_iter(self) -> IntoIter<V> {\n+        fn filter<A>((i, v): (uint, Option<A>)) -> Option<(uint, A)> {\n+            v.map(|v| (i, v))\n+        }\n+        let filter: fn((uint, Option<V>)) -> Option<(uint, V)> = filter; // coerce to fn ptr\n+\n+        IntoIter { iter: self.v.into_iter().enumerate().filter_map(filter) }\n+    }\n+\n+    /// Returns an iterator visiting all key-value pairs in ascending order of\n+    /// the keys, emptying (but not consuming) the original `VecMap`.\n+    /// The iterator's element type is `(uint, &'r V)`. Keeps the allocated memory for reuse.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::VecMap;\n+    ///\n+    /// let mut map = VecMap::new();\n+    /// map.insert(1, \"a\");\n+    /// map.insert(3, \"c\");\n+    /// map.insert(2, \"b\");\n+    ///\n+    /// let vec: Vec<(uint, &str)> = map.drain().collect();\n+    ///\n+    /// assert_eq!(vec, vec![(1, \"a\"), (2, \"b\"), (3, \"c\")]);\n+    /// ```\n+    #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+    pub fn drain<'a>(&'a mut self) -> Drain<'a, V> {\n         fn filter<A>((i, v): (uint, Option<A>)) -> Option<(uint, A)> {\n             v.map(|v| (i, v))\n         }\n         let filter: fn((uint, Option<V>)) -> Option<(uint, V)> = filter; // coerce to fn ptr\n \n-        let values = replace(&mut self.v, vec!());\n-        IntoIter { iter: values.into_iter().enumerate().filter_map(filter) }\n+        Drain { iter: self.v.drain().enumerate().filter_map(filter) }\n     }\n \n     /// Return the number of elements in the map.\n@@ -673,6 +699,28 @@ pub struct IntoIter<V> {\n     fn((uint, Option<V>)) -> Option<(uint, V)>>\n }\n \n+#[unstable]\n+pub struct Drain<'a, V> {\n+    iter: FilterMap<\n+    (uint, Option<V>),\n+    (uint, V),\n+    Enumerate<vec::Drain<'a, Option<V>>>,\n+    fn((uint, Option<V>)) -> Option<(uint, V)>>\n+}\n+\n+#[unstable]\n+impl<'a, V> Iterator for Drain<'a, V> {\n+    type Item = (uint, V);\n+\n+    fn next(&mut self) -> Option<(uint, V)> { self.iter.next() }\n+    fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n+}\n+\n+#[unstable]\n+impl<'a, V> DoubleEndedIterator for Drain<'a, V> {\n+    fn next_back(&mut self) -> Option<(uint, V)> { self.iter.next_back() }\n+}\n+\n #[stable]\n impl<'a, V> Iterator for Keys<'a, V> {\n     type Item = uint;\n@@ -918,7 +966,19 @@ mod test_map {\n             assert_eq!(v, box 2i);\n         }\n         assert!(called);\n-        m.insert(2, box 1i);\n+    }\n+\n+    #[test]\n+    fn test_drain_iterator() {\n+        let mut map = VecMap::new();\n+        map.insert(1, \"a\");\n+        map.insert(3, \"c\");\n+        map.insert(2, \"b\");\n+\n+        let vec: Vec<(usize, &str)> = map.drain().collect();\n+\n+        assert_eq!(vec, vec![(1, \"a\"), (2, \"b\"), (3, \"c\")]);\n+        assert_eq!(map.len(), 0);\n     }\n \n     #[test]"}, {"sha": "0cc31bf70dee6f68b5896f6ba4323de9f89d96f3", "filename": "src/libcore/array.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -17,6 +17,7 @@\n use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use fmt;\n+use hash::{Hash, Hasher, self};\n use marker::Copy;\n use ops::{Deref, FullRange};\n use option::Option;\n@@ -32,6 +33,12 @@ macro_rules! array_impls {\n                 }\n             }\n \n+            impl<S: hash::Writer + Hasher, T: Hash<S>> Hash<S> for [T; $N] {\n+                fn hash(&self, state: &mut S) {\n+                    Hash::hash(&self[], state)\n+                }\n+            }\n+\n             #[unstable = \"waiting for Show to stabilize\"]\n             impl<T:fmt::Show> fmt::Show for [T; $N] {\n                 fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "18f7fff9053ceb00a398ec0727a77eabcf7f7658", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -199,7 +199,7 @@ impl AtomicBool {\n     #[inline]\n     #[stable]\n     pub fn load(&self, order: Ordering) -> bool {\n-        unsafe { atomic_load(self.v.get() as *const usize, order) > 0 }\n+        unsafe { atomic_load(self.v.get(), order) > 0 }\n     }\n \n     /// Stores a value into the bool.\n@@ -438,7 +438,7 @@ impl AtomicIsize {\n     /// ```\n     #[inline]\n     pub fn load(&self, order: Ordering) -> isize {\n-        unsafe { atomic_load(self.v.get() as *const isize, order) }\n+        unsafe { atomic_load(self.v.get(), order) }\n     }\n \n     /// Stores a value into the isize.\n@@ -615,7 +615,7 @@ impl AtomicUsize {\n     /// ```\n     #[inline]\n     pub fn load(&self, order: Ordering) -> usize {\n-        unsafe { atomic_load(self.v.get() as *const usize, order) }\n+        unsafe { atomic_load(self.v.get(), order) }\n     }\n \n     /// Stores a value into the usize.\n@@ -796,7 +796,7 @@ impl<T> AtomicPtr<T> {\n     #[stable]\n     pub fn load(&self, order: Ordering) -> *mut T {\n         unsafe {\n-            atomic_load(self.p.get() as *const *mut T, order) as *mut T\n+            atomic_load(self.p.get(), order) as *mut T\n         }\n     }\n \n@@ -1070,7 +1070,7 @@ impl AtomicInt {\n \n     #[inline]\n     pub fn load(&self, order: Ordering) -> int {\n-        unsafe { atomic_load(self.v.get() as *const int, order) }\n+        unsafe { atomic_load(self.v.get(), order) }\n     }\n \n     #[inline]\n@@ -1123,7 +1123,7 @@ impl AtomicUint {\n \n     #[inline]\n     pub fn load(&self, order: Ordering) -> uint {\n-        unsafe { atomic_load(self.v.get() as *const uint, order) }\n+        unsafe { atomic_load(self.v.get(), order) }\n     }\n \n     #[inline]"}, {"sha": "7131253d5c40cf04671d14ba7cce1380ce1a7568", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -880,7 +880,7 @@ pub trait IndexMut<Index: ?Sized> {\n }\n \n /// An unbounded range.\n-#[derive(Copy, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq)]\n #[lang=\"full_range\"]\n #[unstable = \"API still in development\"]\n pub struct FullRange;\n@@ -893,7 +893,7 @@ impl fmt::Show for FullRange {\n }\n \n /// A (half-open) range which is bounded at both ends.\n-#[derive(Copy, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq)]\n #[lang=\"range\"]\n #[unstable = \"API still in development\"]\n pub struct Range<Idx> {\n@@ -952,7 +952,7 @@ impl<Idx: fmt::Show> fmt::Show for Range<Idx> {\n }\n \n /// A range which is only bounded below.\n-#[derive(Copy, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq)]\n #[lang=\"range_from\"]\n #[unstable = \"API still in development\"]\n pub struct RangeFrom<Idx> {\n@@ -981,7 +981,7 @@ impl<Idx: fmt::Show> fmt::Show for RangeFrom<Idx> {\n }\n \n /// A range which is only bounded above.\n-#[derive(Copy, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq)]\n #[lang=\"range_to\"]\n #[unstable = \"API still in development\"]\n pub struct RangeTo<Idx> {"}, {"sha": "0b89467d63b83f2800ff34948a29a0574c801aa2", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -329,7 +329,7 @@ impl<T> PtrExt for *mut T {\n     #[inline]\n     #[stable]\n     unsafe fn offset(self, count: int) -> *mut T {\n-        intrinsics::offset(self as *const T, count) as *mut T\n+        intrinsics::offset(self, count) as *mut T\n     }\n \n     #[inline]"}, {"sha": "50cbb7a61dce305ce393e1965be56f7436056ccb", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -741,7 +741,7 @@ macro_rules! make_slice {\n             diff / mem::size_of::<$t>()\n         };\n         unsafe {\n-            transmute::<_, $result>(RawSlice { data: $start as *const T, len: len })\n+            transmute::<_, $result>(RawSlice { data: $start, len: len })\n         }\n     }}\n }\n@@ -1409,7 +1409,7 @@ pub unsafe fn from_raw_buf<'a, T>(p: &'a *const T, len: uint) -> &'a [T] {\n #[inline]\n #[unstable = \"should be renamed to from_raw_parts_mut\"]\n pub unsafe fn from_raw_mut_buf<'a, T>(p: &'a *mut T, len: uint) -> &'a mut [T] {\n-    transmute(RawSlice { data: *p as *const T, len: len })\n+    transmute(RawSlice { data: *p, len: len })\n }\n \n //"}, {"sha": "6a542b2c4588259a37c8c0e12addaad4b8344790", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -678,18 +678,15 @@ struct TwoWaySearcher {\n */\n impl TwoWaySearcher {\n     fn new(needle: &[u8]) -> TwoWaySearcher {\n-        let (crit_pos1, period1) = TwoWaySearcher::maximal_suffix(needle, false);\n-        let (crit_pos2, period2) = TwoWaySearcher::maximal_suffix(needle, true);\n-\n-        let crit_pos;\n-        let period;\n-        if crit_pos1 > crit_pos2 {\n-            crit_pos = crit_pos1;\n-            period = period1;\n-        } else {\n-            crit_pos = crit_pos2;\n-            period = period2;\n-        }\n+        let (crit_pos_false, period_false) = TwoWaySearcher::maximal_suffix(needle, false);\n+        let (crit_pos_true, period_true) = TwoWaySearcher::maximal_suffix(needle, true);\n+\n+        let (crit_pos, period) =\n+            if crit_pos_false > crit_pos_true {\n+                (crit_pos_false, period_false)\n+            } else {\n+                (crit_pos_true, period_true)\n+            };\n \n         // This isn't in the original algorithm, as far as I'm aware.\n         let byteset = needle.iter()"}, {"sha": "fa6468517e699f965a0610eb9a5e3c743e04b032", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -1541,7 +1541,8 @@ pub mod types {\n                 pub type DWORDLONG = c_ulonglong;\n \n                 pub type HANDLE = LPVOID;\n-                pub type HMODULE = c_uint;\n+                pub type HINSTANCE = HANDLE;\n+                pub type HMODULE = HINSTANCE;\n \n                 pub type LONG = c_long;\n                 pub type PLONG = *mut c_long;"}, {"sha": "e8b8ecc701f913c77dd291c303e5195a272234a3", "filename": "src/librustc/middle/infer/coercion.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -213,7 +213,12 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n         let inner_ty = match a.sty {\n             ty::ty_uniq(_) => return Err(ty::terr_mismatch),\n-            ty::ty_rptr(_, mt_a) => mt_a.ty,\n+            ty::ty_rptr(_, mt_a) => {\n+                if !can_coerce_mutbls(mt_a.mutbl, mutbl_b) {\n+                    return Err(ty::terr_mutability);\n+                }\n+                mt_a.ty\n+            }\n             _ => {\n                 return self.subtype(a, b);\n             }"}, {"sha": "b71e465b938f5c457cce45db63062f336109959e", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -156,7 +156,7 @@ mod svh_visitor {\n         StrictVersionHashVisitor { st: st }\n     }\n \n-    // To off-load the bulk of the hash-computation on deriving(Hash),\n+    // To off-load the bulk of the hash-computation on #[derive(Hash)],\n     // we define a set of enums corresponding to the content that our\n     // crate visitor will encounter as it traverses the ast.\n     //"}, {"sha": "b307f4e5a9bddaf9c3c97c35734ffcadfe10794e", "filename": "src/librustc_trans/trans/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -33,7 +33,7 @@ pub struct Builder<'a, 'tcx: 'a> {\n // lot more efficient) than doing str::as_c_str(\"\", ...) every time.\n pub fn noname() -> *const c_char {\n     static CNULL: c_char = 0;\n-    &CNULL as *const c_char\n+    &CNULL\n }\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {"}, {"sha": "ede71d1935453dbec277b5cfdaf671d667cba2f8", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -128,7 +128,7 @@ mod imp {\n                 l_sysid: 0,\n             };\n             let ret = unsafe {\n-                libc::fcntl(fd, os::F_SETLKW, &flock as *const os::flock)\n+                libc::fcntl(fd, os::F_SETLKW, &flock)\n             };\n             if ret == -1 {\n                 let errno = stdos::errno();\n@@ -151,7 +151,7 @@ mod imp {\n                 l_sysid: 0,\n             };\n             unsafe {\n-                libc::fcntl(self.fd, os::F_SETLK, &flock as *const os::flock);\n+                libc::fcntl(self.fd, os::F_SETLK, &flock);\n                 libc::close(self.fd);\n             }\n         }"}, {"sha": "f27f0cd70f4ef01879a5abe1ea869bccff5b0500", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -635,7 +635,7 @@\n             $('.do-search').on('click', search);\n             $('.search-input').on('keyup', function() {\n                 clearTimeout(keyUpTimeout);\n-                keyUpTimeout = setTimeout(search, 100);\n+                keyUpTimeout = setTimeout(search, 500);\n             });\n \n             // Push and pop states are used to add search results to the browser"}, {"sha": "a876ca3cb1195fb4f199d39dd07910c484d3e0e9", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -34,7 +34,7 @@\n //!\n //! An object is a series of string keys mapping to values, in `\"key\": value` format.\n //! Arrays are enclosed in square brackets ([ ... ]) and objects in curly brackets ({ ... }).\n-//! A simple JSON document encoding a person, his/her age, address and phone numbers could look like\n+//! A simple JSON document encoding a person, their age, address and phone numbers could look like\n //!\n //! ```ignore\n //! {"}, {"sha": "d3ac632617dc741efa6cd3320fa8067c7c7ff91c", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -2112,23 +2112,6 @@ mod test_map {\n         assert_eq!(m.remove(&0), Some(0));\n     }\n \n-    #[test]\n-    fn test_find_equiv() {\n-        let mut m = HashMap::new();\n-\n-        let (foo, bar, baz) = (1i,2i,3i);\n-        m.insert(\"foo\".to_string(), foo);\n-        m.insert(\"bar\".to_string(), bar);\n-        m.insert(\"baz\".to_string(), baz);\n-\n-\n-        assert_eq!(m.get(\"foo\"), Some(&foo));\n-        assert_eq!(m.get(\"bar\"), Some(&bar));\n-        assert_eq!(m.get(\"baz\"), Some(&baz));\n-\n-        assert_eq!(m.get(\"qux\"), None);\n-    }\n-\n     #[test]\n     fn test_from_iter() {\n         let xs = [(1i, 1i), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];"}, {"sha": "d810460a7d497886ca628bbe074d26e654cc68d8", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -395,9 +395,6 @@ impl<K, V, M: Deref<Target=RawTable<K, V>> + DerefMut> FullBucket<K, V, M> {\n     /// This works similarly to `put`, building an `EmptyBucket` out of the\n     /// taken bucket.\n     pub fn take(mut self) -> (EmptyBucket<K, V, M>, K, V) {\n-        let key = self.raw.key as *const K;\n-        let val = self.raw.val as *const V;\n-\n         self.table.size -= 1;\n \n         unsafe {\n@@ -408,8 +405,8 @@ impl<K, V, M: Deref<Target=RawTable<K, V>> + DerefMut> FullBucket<K, V, M> {\n                     idx: self.idx,\n                     table: self.table\n                 },\n-                ptr::read(key),\n-                ptr::read(val)\n+                ptr::read(self.raw.key),\n+                ptr::read(self.raw.val)\n             )\n         }\n     }\n@@ -477,8 +474,8 @@ impl<K, V, M: Deref<Target=RawTable<K, V>>> GapThenFull<K, V, M> {\n     pub fn shift(mut self) -> Option<GapThenFull<K, V, M>> {\n         unsafe {\n             *self.gap.raw.hash = mem::replace(&mut *self.full.raw.hash, EMPTY_BUCKET);\n-            copy_nonoverlapping_memory(self.gap.raw.key, self.full.raw.key as *const K, 1);\n-            copy_nonoverlapping_memory(self.gap.raw.val, self.full.raw.val as *const V, 1);\n+            copy_nonoverlapping_memory(self.gap.raw.key, self.full.raw.key, 1);\n+            copy_nonoverlapping_memory(self.gap.raw.val, self.full.raw.val, 1);\n         }\n \n         let FullBucket { raw: prev_raw, idx: prev_idx, .. } = self.full;\n@@ -781,8 +778,8 @@ impl<'a, K, V> Iterator for RevMoveBuckets<'a, K, V> {\n                 if *self.raw.hash != EMPTY_BUCKET {\n                     self.elems_left -= 1;\n                     return Some((\n-                        ptr::read(self.raw.key as *const K),\n-                        ptr::read(self.raw.val as *const V)\n+                        ptr::read(self.raw.key),\n+                        ptr::read(self.raw.val)\n                     ));\n                 }\n             }\n@@ -878,8 +875,8 @@ impl<K, V> Iterator for IntoIter<K, V> {\n                     SafeHash {\n                         hash: *bucket.hash,\n                     },\n-                    ptr::read(bucket.key as *const K),\n-                    ptr::read(bucket.val as *const V)\n+                    ptr::read(bucket.key),\n+                    ptr::read(bucket.val)\n                 )\n             }\n         })\n@@ -906,8 +903,8 @@ impl<'a, K, V> Iterator for Drain<'a, K, V> {\n                     SafeHash {\n                         hash: ptr::replace(bucket.hash, EMPTY_BUCKET),\n                     },\n-                    ptr::read(bucket.key as *const K),\n-                    ptr::read(bucket.val as *const V)\n+                    ptr::read(bucket.key),\n+                    ptr::read(bucket.val)\n                 )\n             }\n         })"}, {"sha": "ff12846197806f6bf16ab2980b0eb72c36ba8378", "filename": "src/libstd/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -18,7 +18,7 @@\n //! chain information:\n //!\n //! ```\n-//! trait Error: Send {\n+//! trait Error {\n //!     fn description(&self) -> &str;\n //!\n //!     fn detail(&self) -> Option<String> { None }\n@@ -87,7 +87,7 @@ use string::{FromUtf8Error, FromUtf16Error};\n \n /// Base functionality for all errors in Rust.\n #[unstable = \"the exact API of this trait may change\"]\n-pub trait Error: Send {\n+pub trait Error {\n     /// A short description of the error; usually a static string.\n     fn description(&self) -> &str;\n "}, {"sha": "88fb983361a9100feeed7a1ed3d433749e609436", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -221,7 +221,7 @@\n //! - `fmt::Show` implementations should be implemented for **all** public types.\n //!   Output will typically represent the internal state as faithfully as possible.\n //!   The purpose of the `Show` trait is to facilitate debugging Rust code. In\n-//!   most cases, using `#[deriving(Show)]` is sufficient and recommended.\n+//!   most cases, using `#[derive(Show)]` is sufficient and recommended.\n //!\n //! Some examples of the output from both traits:\n //!"}, {"sha": "dc21416df7b43b1b3603b21673dce15e29a0d5e6", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -234,7 +234,7 @@ use error::{FromError, Error};\n use fmt;\n use int;\n use iter::{Iterator, IteratorExt};\n-use marker::Sized;\n+use marker::{Sized, Send};\n use mem::transmute;\n use ops::FnOnce;\n use option::Option;\n@@ -363,8 +363,8 @@ impl Error for IoError {\n     }\n }\n \n-impl FromError<IoError> for Box<Error> {\n-    fn from_error(err: IoError) -> Box<Error> {\n+impl FromError<IoError> for Box<Error + Send> {\n+    fn from_error(err: IoError) -> Box<Error + Send> {\n         box err\n     }\n }"}, {"sha": "648326eee99463aee4d3a2401f8e9b60ef7a1fea", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -18,7 +18,7 @@\n //!\n //! The [`ptr`](ptr/index.html) and [`mem`](mem/index.html)\n //! modules deal with unsafe pointers and memory manipulation.\n-//! [`markers`](markers/index.html) defines the special built-in traits,\n+//! [`marker`](marker/index.html) defines the special built-in traits,\n //! and [`raw`](raw/index.html) the runtime representation of Rust types.\n //! These are some of the lowest-level building blocks in Rust.\n //!"}, {"sha": "78db6c158a89d07fa7220632229f83736d45ed61", "filename": "src/libstd/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -37,7 +37,7 @@ use error::{FromError, Error};\n use fmt;\n use io::{IoResult, IoError};\n use iter::{Iterator, IteratorExt};\n-use marker::Copy;\n+use marker::{Copy, Send};\n use libc::{c_void, c_int, c_char};\n use libc;\n use boxed::Box;\n@@ -937,8 +937,8 @@ impl Error for MapError {\n     fn detail(&self) -> Option<String> { Some(format!(\"{:?}\", self)) }\n }\n \n-impl FromError<MapError> for Box<Error> {\n-    fn from_error(err: MapError) -> Box<Error> {\n+impl FromError<MapError> for Box<Error + Send> {\n+    fn from_error(err: MapError) -> Box<Error + Send> {\n         box err\n     }\n }"}, {"sha": "e28c3c37b6f765ee7df620998bd0359b5c04f4fe", "filename": "src/libstd/sync/poison.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibstd%2Fsync%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibstd%2Fsync%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fpoison.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -11,7 +11,7 @@\n use prelude::v1::*;\n \n use cell::UnsafeCell;\n-use error::FromError;\n+use error::{Error, FromError};\n use fmt;\n use thread::Thread;\n \n@@ -92,7 +92,13 @@ pub type TryLockResult<Guard> = Result<Guard, TryLockError<Guard>>;\n \n impl<T> fmt::Show for PoisonError<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        \"poisoned lock: another task failed inside\".fmt(f)\n+        self.description().fmt(f)\n+    }\n+}\n+\n+impl<T> Error for PoisonError<T> {\n+    fn description(&self) -> &str {\n+        \"poisoned lock: another task failed inside\"\n     }\n }\n \n@@ -126,11 +132,22 @@ impl<T> FromError<PoisonError<T>> for TryLockError<T> {\n \n impl<T> fmt::Show for TryLockError<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.description().fmt(f)\n+    }\n+}\n+\n+impl<T> Error for TryLockError<T> {\n+    fn description(&self) -> &str {\n+        match *self {\n+            TryLockError::Poisoned(ref p) => p.description(),\n+            TryLockError::WouldBlock => \"try_lock failed because the operation would block\"\n+        }\n+    }\n+\n+    fn cause(&self) -> Option<&Error> {\n         match *self {\n-            TryLockError::Poisoned(ref p) => p.fmt(f),\n-            TryLockError::WouldBlock => {\n-                \"try_lock failed because the operation would block\".fmt(f)\n-            }\n+            TryLockError::Poisoned(ref p) => Some(p),\n+            _ => None\n         }\n     }\n }"}, {"sha": "70b9c012b008a38905149265255e63840455eaa5", "filename": "src/libstd/sys/unix/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -229,7 +229,7 @@ fn print(w: &mut Writer, idx: int, addr: *mut libc::c_void) -> IoResult<()> {\n     }\n \n     let mut info: Dl_info = unsafe { intrinsics::init() };\n-    if unsafe { dladdr(addr as *const libc::c_void, &mut info) == 0 } {\n+    if unsafe { dladdr(addr, &mut info) == 0 } {\n         output(w, idx,addr, None)\n     } else {\n         output(w, idx, addr, Some(unsafe {"}, {"sha": "e9490dc95c940822bfc0fa163a7e40d4ab3c067b", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -281,7 +281,7 @@ pub fn join_paths<T: BytesContainer>(paths: &[T]) -> Result<Vec<u8>, &'static st\n pub fn load_self() -> Option<Vec<u8>> {\n     unsafe {\n         fill_utf16_buf_and_decode(|buf, sz| {\n-            libc::GetModuleFileNameW(0u as libc::DWORD, buf, sz)\n+            libc::GetModuleFileNameW(ptr::null_mut(), buf, sz)\n         }).map(|s| s.to_string().into_bytes())\n     }\n }"}, {"sha": "4c99cff34da65cba8ace81c1f800c29ff9f732da", "filename": "src/libstd/thread_local/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibstd%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibstd%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fmod.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -449,7 +449,7 @@ mod imp {\n         // destructor as running for this thread so calls to `get` will return\n         // `None`.\n         *(*ptr).dtor_running.get() = true;\n-        ptr::read((*ptr).inner.get() as *const T);\n+        ptr::read((*ptr).inner.get());\n     }\n }\n "}, {"sha": "6498e8d2d587a611c987f54aaaad89df214bfd35", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -80,11 +80,11 @@ fn cs_clone(\n         EnumNonMatchingCollapsed (..) => {\n             cx.span_bug(trait_span,\n                         &format!(\"non-matching enum variants in \\\n-                                 `deriving({})`\", name)[])\n+                                 `derive({})`\", name)[])\n         }\n         StaticEnum(..) | StaticStruct(..) => {\n             cx.span_bug(trait_span,\n-                        &format!(\"static method in `deriving({})`\", name)[])\n+                        &format!(\"static method in `derive({})`\", name)[])\n         }\n     }\n \n@@ -101,7 +101,7 @@ fn cs_clone(\n                 None => {\n                     cx.span_bug(trait_span,\n                                 &format!(\"unnamed field in normal struct in \\\n-                                         `deriving({})`\", name)[])\n+                                         `derive({})`\", name)[])\n                 }\n             };\n             cx.field_imm(field.span, ident, subcall(field))"}, {"sha": "c550c26c745727ddb166b3704d68220070551219", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -32,7 +32,7 @@ pub fn expand_deriving_eq<F>(cx: &mut ExtCtxt,\n             |cx, span, subexpr, self_f, other_fs| {\n                 let other_f = match other_fs {\n                     [ref o_f] => o_f,\n-                    _ => cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialEq)`\")\n+                    _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialEq)`\")\n                 };\n \n                 let eq = cx.expr_binary(span, ast::BiEq, self_f, other_f.clone());\n@@ -49,7 +49,7 @@ pub fn expand_deriving_eq<F>(cx: &mut ExtCtxt,\n             |cx, span, subexpr, self_f, other_fs| {\n                 let other_f = match other_fs {\n                     [ref o_f] => o_f,\n-                    _ => cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialEq)`\")\n+                    _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialEq)`\")\n                 };\n \n                 let eq = cx.expr_binary(span, ast::BiNe, self_f, other_f.clone());"}, {"sha": "9f1850145b6c592526e8c76e0cee5dfb1e2b9a71", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -152,7 +152,7 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span,\n             let new = {\n                 let other_f = match other_fs {\n                     [ref o_f] => o_f,\n-                    _ => cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialOrd)`\"),\n+                    _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\"),\n                 };\n \n                 let args = vec![\n@@ -176,7 +176,7 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span,\n         equals_expr.clone(),\n         box |cx, span, (self_args, tag_tuple), _non_self_args| {\n             if self_args.len() != 2 {\n-                cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialOrd)`\")\n+                cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\")\n             } else {\n                 some_ordering_collapsed(cx, span, PartialCmpOp, tag_tuple)\n             }\n@@ -210,7 +210,7 @@ fn cs_op(less: bool, equal: bool, cx: &mut ExtCtxt,\n             */\n             let other_f = match other_fs {\n                 [ref o_f] => o_f,\n-                _ => cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialOrd)`\")\n+                _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\")\n             };\n \n             let cmp = cx.expr_binary(span, op, self_f.clone(), other_f.clone());\n@@ -224,7 +224,7 @@ fn cs_op(less: bool, equal: bool, cx: &mut ExtCtxt,\n         cx.expr_bool(span, equal),\n         box |cx, span, (self_args, tag_tuple), _non_self_args| {\n             if self_args.len() != 2 {\n-                cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialOrd)`\")\n+                cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\")\n             } else {\n                 let op = match (less, equal) {\n                     (true,  true) => LeOp, (true,  false) => LtOp,"}, {"sha": "9a2af6a3e0bee29bd939f45b90ef795f14d3ad81", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -32,7 +32,7 @@ pub fn expand_deriving_totaleq<F>(cx: &mut ExtCtxt,\n             let block = cx.block(span, stmts, None);\n             cx.expr_block(block)\n         },\n-                       box |cx, sp, _, _| cx.span_bug(sp, \"non matching enums in deriving(Eq)?\"),\n+                       box |cx, sp, _, _| cx.span_bug(sp, \"non matching enums in derive(Eq)?\"),\n                        cx,\n                        span,\n                        substr)"}, {"sha": "29d327142a6cf4785949574fa233abc175b2700d", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -108,7 +108,7 @@ pub fn cs_cmp(cx: &mut ExtCtxt, span: Span,\n             let new = {\n                 let other_f = match other_fs {\n                     [ref o_f] => o_f,\n-                    _ => cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialOrd)`\"),\n+                    _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\"),\n                 };\n \n                 let args = vec![\n@@ -132,7 +132,7 @@ pub fn cs_cmp(cx: &mut ExtCtxt, span: Span,\n         cx.expr_path(equals_path.clone()),\n         box |cx, span, (self_args, tag_tuple), _non_self_args| {\n             if self_args.len() != 2 {\n-                cx.span_bug(span, \"not exactly 2 arguments in `deriving(Ord)`\")\n+                cx.span_bug(span, \"not exactly 2 arguments in `derives(Ord)`\")\n             } else {\n                 ordering_collapsed(cx, span, tag_tuple)\n             }"}, {"sha": "8edbf018f22e32f568a05cdad84143148dc3a11c", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -173,7 +173,7 @@ fn decodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n                 cx.lambda_expr_1(trait_span, result, blkarg)\n             ))\n         }\n-        _ => cx.bug(\"expected StaticEnum or StaticStruct in deriving(Decodable)\")\n+        _ => cx.bug(\"expected StaticEnum or StaticStruct in derive(Decodable)\")\n     };\n }\n "}, {"sha": "36c3f2c0ccb34a7621eb40990f8291e35b17d67f", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -81,6 +81,6 @@ fn default_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructur\n             // let compilation continue\n             cx.expr_uint(trait_span, 0)\n         }\n-        _ => cx.span_bug(trait_span, \"Non-static method in `deriving(Default)`\")\n+        _ => cx.span_bug(trait_span, \"Non-static method in `derive(Default)`\")\n     };\n }"}, {"sha": "801ae213a7bcfd373d9684f67edc235c4757be5f", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -276,6 +276,6 @@ fn encodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n             cx.expr_block(cx.block(trait_span, vec!(me), Some(ret)))\n         }\n \n-        _ => cx.bug(\"expected Struct or EnumMatching in deriving(Encodable)\")\n+        _ => cx.bug(\"expected Struct or EnumMatching in derive(Encodable)\")\n     };\n }"}, {"sha": "293e4befd3bb1f6a6925196b04e334761d9d74c6", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -1191,7 +1191,7 @@ impl<'a> TraitDef<'a> {\n         to_set.expn_id = cx.codemap().record_expansion(codemap::ExpnInfo {\n             call_site: to_set,\n             callee: codemap::NameAndSpan {\n-                name: format!(\"deriving({})\", trait_name),\n+                name: format!(\"derive({})\", trait_name),\n                 format: codemap::MacroAttribute,\n                 span: Some(self.span)\n             }"}, {"sha": "5e6a9c91ce032599fd8141f099c3dd57a114b4c4", "filename": "src/libsyntax/ext/deriving/generic/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -182,8 +182,8 @@ impl<'a> Ty<'a> {\n             Literal(ref p) => {\n                 p.to_path(cx, span, self_ty, self_generics)\n             }\n-            Ptr(..) => { cx.span_bug(span, \"pointer in a path in generic `deriving`\") }\n-            Tuple(..) => { cx.span_bug(span, \"tuple in a path in generic `deriving`\") }\n+            Ptr(..) => { cx.span_bug(span, \"pointer in a path in generic `derive`\") }\n+            Tuple(..) => { cx.span_bug(span, \"tuple in a path in generic `derive`\") }\n         }\n     }\n }"}, {"sha": "c45fe1ceb2049bf0525cb2ccbde0aabbcb254b34", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -74,7 +74,7 @@ pub fn expand_deriving_from_primitive<F>(cx: &mut ExtCtxt,\n fn cs_from(name: &str, cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> P<Expr> {\n     let n = match substr.nonself_args {\n         [ref n] => n,\n-        _ => cx.span_bug(trait_span, \"incorrect number of arguments in `deriving(FromPrimitive)`\")\n+        _ => cx.span_bug(trait_span, \"incorrect number of arguments in `derive(FromPrimitive)`\")\n     };\n \n     match *substr.fields {\n@@ -144,6 +144,6 @@ fn cs_from(name: &str, cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure\n \n             cx.expr_match(trait_span, n.clone(), arms)\n         }\n-        _ => cx.span_bug(trait_span, \"expected StaticEnum in deriving(FromPrimitive)\")\n+        _ => cx.span_bug(trait_span, \"expected StaticEnum in derive(FromPrimitive)\")\n     }\n }"}, {"sha": "b5435896791cd6e92ab8d804695bffa3448af02c", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -57,7 +57,7 @@ pub fn expand_deriving_rand<F>(cx: &mut ExtCtxt,\n fn rand_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> P<Expr> {\n     let rng = match substr.nonself_args {\n         [ref rng] => rng,\n-        _ => cx.bug(\"Incorrect number of arguments to `rand` in `deriving(Rand)`\")\n+        _ => cx.bug(\"Incorrect number of arguments to `rand` in `derive(Rand)`\")\n     };\n     let rand_ident = vec!(\n         cx.ident_of(\"std\"),\n@@ -131,7 +131,7 @@ fn rand_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n             let block = cx.block(trait_span, vec!( let_statement ), Some(match_expr));\n             cx.expr_block(block)\n         }\n-        _ => cx.bug(\"Non-static method in `deriving(Rand)`\")\n+        _ => cx.bug(\"Non-static method in `derive(Rand)`\")\n     };\n \n     fn rand_thing<F>(cx: &mut ExtCtxt,"}, {"sha": "dd376fe9e10e8db308bbf19ae056b8f956f5b15b", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -253,9 +253,8 @@ pub fn file_to_filemap(sess: &ParseSess, path: &Path, spanopt: Option<Span>)\n     let bytes = match File::open(path).read_to_end() {\n         Ok(bytes) => bytes,\n         Err(e) => {\n-            err(&format!(\"couldn't read {:?}: {:?}\",\n-                        path.display(),\n-                        e)[]);\n+            err(&format!(\"couldn't read {:?}: {}\",\n+                        path.display(), e)[]);\n             unreachable!()\n         }\n     };"}, {"sha": "f9fb767f77ed98bbb437e528c4d4180769aeb916", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -187,7 +187,7 @@ impl fmt::Show for TestFn {\n \n /// Manager of the benchmarking runs.\n ///\n-/// This is feed into functions marked with `#[bench]` to allow for\n+/// This is fed into functions marked with `#[bench]` to allow for\n /// set-up & tear-down before running a piece of code repeatedly via a\n /// call to `iter`.\n #[derive(Copy)]"}, {"sha": "b820135911e17c7a46b901db56baa48e5155bf46", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -1 +1 @@\n-Subproject commit ec1fdb3b9d3b1fb9e1dae97a65dd3a13db9bfb23\n+Subproject commit b820135911e17c7a46b901db56baa48e5155bf46"}, {"sha": "9dd66ac0a3059633872871b0ea5809b9ba4630bd", "filename": "src/rustllvm/llvm-auto-clean-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Frustllvm%2Fllvm-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Frustllvm%2Fllvm-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-auto-clean-trigger?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be forcibly cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2015-01-13\n+2015-01-18"}, {"sha": "30c1b66a7b81fdc102f078dde566d1d7d9c59563", "filename": "src/test/compile-fail/coerce-mut.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Ftest%2Fcompile-fail%2Fcoerce-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Ftest%2Fcompile-fail%2Fcoerce-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-mut.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn f(x: &mut i32) {}\n+\n+fn main() {\n+    let x = 0;\n+    f(&x);\n+    //~^ ERROR mismatched types\n+    //~| expected `&mut i32`\n+    //~| found `&_`\n+    //~| values differ in mutability\n+}"}, {"sha": "980385ce4cc6b360a65b7cd9876a356f385e0616", "filename": "src/test/compile-fail/issue-12028.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Ftest%2Fcompile-fail%2Fissue-12028.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Ftest%2Fcompile-fail%2Fissue-12028.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12028.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -43,7 +43,7 @@ impl<H: StreamHasher> Hash<H> for u8 {\n \n impl<H: StreamHasher> StreamHash<H> for u8 {\n     fn input_stream(&self, stream: &mut H::S) {\n-        Stream::input(&*stream, &[*self]);\n+        Stream::input(stream, &[*self]);\n     }\n }\n "}, {"sha": "dd5b2004145c2862ed65666bc1020bfce4103d85", "filename": "src/test/compile-fail/method-self-arg-2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-2.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -22,6 +22,7 @@ fn main() {\n     let y = &mut x;\n     Foo::bar(&x); //~ERROR cannot borrow `x`\n \n-    let x = Foo;\n-    Foo::baz(&x); //~ERROR cannot borrow immutable borrowed content as mutable\n+    let mut x = Foo;\n+    let y = &mut x;\n+    Foo::baz(&mut x); //~ERROR cannot borrow `x`\n }"}, {"sha": "a1747f3b6bdc7f7aede450483a7fc61010e9fcfa", "filename": "src/test/compile-fail/slice-mut.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Ftest%2Fcompile-fail%2Fslice-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Ftest%2Fcompile-fail%2Fslice-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslice-mut.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -13,5 +13,9 @@\n fn main() {\n     let x: &[isize] = &[1, 2, 3, 4, 5];\n     // Immutable slices are not mutable.\n-    let y: &mut[_] = &x[2..4]; //~ ERROR cannot borrow immutable borrowed content as mutable\n+    let y: &mut[_] = &x[2..4];\n+    //~^ ERROR mismatched types\n+    //~| expected `&mut [_]`\n+    //~| found `&_`\n+    //~| values differ in mutability\n }"}, {"sha": "0ec33d218f9a9117e40c523d51cb5401a7f8627c", "filename": "src/test/run-pass/issue-21384.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Ftest%2Frun-pass%2Fissue-21384.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Ftest%2Frun-pass%2Fissue-21384.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21384.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn test<T : Clone>(arg: T) -> T {\n+    arg.clone()\n+}\n+\n+#[derive(PartialEq)]\n+struct Test(int);\n+\n+fn main() {\n+    // Check that ranges implement clone\n+    assert!(test(1..5) == (1..5));\n+    assert!(test(..5) == (..5));\n+    assert!(test(1..) == (1..));\n+    assert!(test(FullRange) == (FullRange));\n+\n+    // Check that ranges can still be used with non-clone limits\n+    assert!((Test(1)..Test(5)) == (Test(1)..Test(5)));\n+}"}, {"sha": "6be7cea29280d5ef2b9b426f03b08d96f188e725", "filename": "src/test/run-pass/issue-21402.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Ftest%2Frun-pass%2Fissue-21402.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba/src%2Ftest%2Frun-pass%2Fissue-21402.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21402.rs?ref=29bd9a06efd2f8c8a7b1102e2203cc0e6ae2dcba", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[derive(Hash)]\n+struct Foo {\n+    a: Vec<bool>,\n+    b: (bool, bool),\n+    c: [bool; 2],\n+}\n+\n+fn main() {}"}]}