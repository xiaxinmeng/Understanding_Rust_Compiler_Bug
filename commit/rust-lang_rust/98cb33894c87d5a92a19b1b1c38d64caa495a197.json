{"sha": "98cb33894c87d5a92a19b1b1c38d64caa495a197", "node_id": "C_kwDOAAsO6NoAKDk4Y2IzMzg5NGM4N2Q1YTkyYTE5YjFiMWMzOGQ2NGNhYTQ5NWExOTc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-20T16:10:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-20T16:10:30Z"}, "message": "Rollup merge of #89747 - Amanieu:maybeuninit_bytes, r=m-ou-se\n\nAdd MaybeUninit::(slice_)as_bytes(_mut)\n\nThis adds methods to convert between `MaybeUninit<T>` and a slice of `MaybeUninit<u8>`. This is safe since `MaybeUninit<u8>` can correctly handle padding bytes in any `T`.\n\nThese methods are added:\n```rust\nimpl<T> MaybeUninit<T> {\n\tpub fn as_bytes(&self) -> &[MaybeUninit<u8>];\n\tpub fn as_bytes_mut(&mut self) -> &mut [MaybeUninit<u8>];\n\tpub fn slice_as_bytes(this: &[MaybeUninit<T>]) -> &[MaybeUninit<u8>];\n\tpub fn slice_as_bytes_mut(this: &mut [MaybeUninit<T>]) -> &mut [MaybeUninit<u8>];\n}\n```", "tree": {"sha": "1e94d091ef43b579b95c23ef5068fa46fcb5d5ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e94d091ef43b579b95c23ef5068fa46fcb5d5ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98cb33894c87d5a92a19b1b1c38d64caa495a197", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh6Yl3CRBK7hj4Ov3rIwAAgRwIAHux/e98+Ef0XasBIrC9k/cy\n4UvP3ErzlBvP5VkeBiUHyi57UVvthgFmgvvjXesdm/39h/bBVchrAiM/NloeK+bO\nQxeuZfH0P46Ko3rpTupHH00wFS59Sfs4Zrwb9K4zHxgeudEXtC6PUfeCbYjs3iSr\nRXDFu/Q1wU6iiO0dqo1fQ0ucv9Ej5iwopBRfzBG4Y3QmeBXdEsSe/jOo5Y0qrpYY\nyJGi2TC21xhXz4iQ0CtLlFdfwfzxdt5DAuLxe+R4gUo+WzlytoyVBPelQoMGzLEb\n2RqMCnlgN732MsDnvNjDo0chcgwqE0za2zD/l+Rrqktp4MBZAsZ+v4ZXjftqhQA=\n=eW0T\n-----END PGP SIGNATURE-----\n", "payload": "tree 1e94d091ef43b579b95c23ef5068fa46fcb5d5ed\nparent 74fbbefea8d13683cca5eee62e4740706cb3144a\nparent 5c96dcf96100d67370e794d3ffd59762dbc102ed\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642695030 +0100\ncommitter GitHub <noreply@github.com> 1642695030 +0100\n\nRollup merge of #89747 - Amanieu:maybeuninit_bytes, r=m-ou-se\n\nAdd MaybeUninit::(slice_)as_bytes(_mut)\n\nThis adds methods to convert between `MaybeUninit<T>` and a slice of `MaybeUninit<u8>`. This is safe since `MaybeUninit<u8>` can correctly handle padding bytes in any `T`.\n\nThese methods are added:\n```rust\nimpl<T> MaybeUninit<T> {\n\tpub fn as_bytes(&self) -> &[MaybeUninit<u8>];\n\tpub fn as_bytes_mut(&mut self) -> &mut [MaybeUninit<u8>];\n\tpub fn slice_as_bytes(this: &[MaybeUninit<T>]) -> &[MaybeUninit<u8>];\n\tpub fn slice_as_bytes_mut(this: &mut [MaybeUninit<T>]) -> &mut [MaybeUninit<u8>];\n}\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98cb33894c87d5a92a19b1b1c38d64caa495a197", "html_url": "https://github.com/rust-lang/rust/commit/98cb33894c87d5a92a19b1b1c38d64caa495a197", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98cb33894c87d5a92a19b1b1c38d64caa495a197/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74fbbefea8d13683cca5eee62e4740706cb3144a", "url": "https://api.github.com/repos/rust-lang/rust/commits/74fbbefea8d13683cca5eee62e4740706cb3144a", "html_url": "https://github.com/rust-lang/rust/commit/74fbbefea8d13683cca5eee62e4740706cb3144a"}, {"sha": "5c96dcf96100d67370e794d3ffd59762dbc102ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c96dcf96100d67370e794d3ffd59762dbc102ed", "html_url": "https://github.com/rust-lang/rust/commit/5c96dcf96100d67370e794d3ffd59762dbc102ed"}], "stats": {"total": 125, "additions": 124, "deletions": 1}, "files": [{"sha": "e38c0412a0afe444d14eb4826c1a8582998083f0", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 124, "deletions": 1, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/98cb33894c87d5a92a19b1b1c38d64caa495a197/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cb33894c87d5a92a19b1b1c38d64caa495a197/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=98cb33894c87d5a92a19b1b1c38d64caa495a197", "patch": "@@ -1,8 +1,9 @@\n use crate::any::type_name;\n use crate::fmt;\n use crate::intrinsics;\n-use crate::mem::ManuallyDrop;\n+use crate::mem::{self, ManuallyDrop};\n use crate::ptr;\n+use crate::slice;\n \n /// A wrapper type to construct uninitialized instances of `T`.\n ///\n@@ -1160,4 +1161,126 @@ impl<T> MaybeUninit<T> {\n         // SAFETY: Valid elements have just been written into `this` so it is initialized\n         unsafe { MaybeUninit::slice_assume_init_mut(this) }\n     }\n+\n+    /// Returns the contents of this `MaybeUninit` as a slice of potentially uninitialized bytes.\n+    ///\n+    /// Note that even if the contents of a `MaybeUninit` have been initialized, the value may still\n+    /// contain padding bytes which are left uninitialized.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(maybe_uninit_as_bytes, maybe_uninit_slice)]\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let val = 0x12345678i32;\n+    /// let uninit = MaybeUninit::new(val);\n+    /// let uninit_bytes = uninit.as_bytes();\n+    /// let bytes = unsafe { MaybeUninit::slice_assume_init_ref(uninit_bytes) };\n+    /// assert_eq!(bytes, val.to_ne_bytes());\n+    /// ```\n+    #[unstable(feature = \"maybe_uninit_as_bytes\", issue = \"93092\")]\n+    pub fn as_bytes(&self) -> &[MaybeUninit<u8>] {\n+        // SAFETY: MaybeUninit<u8> is always valid, even for padding bytes\n+        unsafe {\n+            slice::from_raw_parts(self.as_ptr() as *const MaybeUninit<u8>, mem::size_of::<T>())\n+        }\n+    }\n+\n+    /// Returns the contents of this `MaybeUninit` as a mutable slice of potentially uninitialized\n+    /// bytes.\n+    ///\n+    /// Note that even if the contents of a `MaybeUninit` have been initialized, the value may still\n+    /// contain padding bytes which are left uninitialized.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(maybe_uninit_as_bytes)]\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let val = 0x12345678i32;\n+    /// let mut uninit = MaybeUninit::new(val);\n+    /// let uninit_bytes = uninit.as_bytes_mut();\n+    /// if cfg!(target_endian = \"little\") {\n+    ///     uninit_bytes[0].write(0xcd);\n+    /// } else {\n+    ///     uninit_bytes[3].write(0xcd);\n+    /// }\n+    /// let val2 = unsafe { uninit.assume_init() };\n+    /// assert_eq!(val2, 0x123456cd);\n+    /// ```\n+    #[unstable(feature = \"maybe_uninit_as_bytes\", issue = \"93092\")]\n+    pub fn as_bytes_mut(&mut self) -> &mut [MaybeUninit<u8>] {\n+        // SAFETY: MaybeUninit<u8> is always valid, even for padding bytes\n+        unsafe {\n+            slice::from_raw_parts_mut(\n+                self.as_mut_ptr() as *mut MaybeUninit<u8>,\n+                mem::size_of::<T>(),\n+            )\n+        }\n+    }\n+\n+    /// Returns the contents of this slice of `MaybeUninit` as a slice of potentially uninitialized\n+    /// bytes.\n+    ///\n+    /// Note that even if the contents of a `MaybeUninit` have been initialized, the value may still\n+    /// contain padding bytes which are left uninitialized.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(maybe_uninit_as_bytes, maybe_uninit_write_slice, maybe_uninit_slice)]\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let uninit = [MaybeUninit::new(0x1234u16), MaybeUninit::new(0x5678u16)];\n+    /// let uninit_bytes = MaybeUninit::slice_as_bytes(&uninit);\n+    /// let bytes = unsafe { MaybeUninit::slice_assume_init_ref(&uninit_bytes) };\n+    /// let val1 = u16::from_ne_bytes(bytes[0..2].try_into().unwrap());\n+    /// let val2 = u16::from_ne_bytes(bytes[2..4].try_into().unwrap());\n+    /// assert_eq!(&[val1, val2], &[0x1234u16, 0x5678u16]);\n+    /// ```\n+    #[unstable(feature = \"maybe_uninit_as_bytes\", issue = \"93092\")]\n+    pub fn slice_as_bytes(this: &[MaybeUninit<T>]) -> &[MaybeUninit<u8>] {\n+        // SAFETY: MaybeUninit<u8> is always valid, even for padding bytes\n+        unsafe {\n+            slice::from_raw_parts(\n+                this.as_ptr() as *const MaybeUninit<u8>,\n+                this.len() * mem::size_of::<T>(),\n+            )\n+        }\n+    }\n+\n+    /// Returns the contents of this mutable slice of `MaybeUninit` as a mutable slice of\n+    /// potentially uninitialized bytes.\n+    ///\n+    /// Note that even if the contents of a `MaybeUninit` have been initialized, the value may still\n+    /// contain padding bytes which are left uninitialized.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(maybe_uninit_as_bytes, maybe_uninit_write_slice, maybe_uninit_slice)]\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let mut uninit = [MaybeUninit::<u16>::uninit(), MaybeUninit::<u16>::uninit()];\n+    /// let uninit_bytes = MaybeUninit::slice_as_bytes_mut(&mut uninit);\n+    /// MaybeUninit::write_slice(uninit_bytes, &[0x12, 0x34, 0x56, 0x78]);\n+    /// let vals = unsafe { MaybeUninit::slice_assume_init_ref(&uninit) };\n+    /// if cfg!(target_endian = \"little\") {\n+    ///     assert_eq!(vals, &[0x3412u16, 0x7856u16]);\n+    /// } else {\n+    ///     assert_eq!(vals, &[0x1234u16, 0x5678u16]);\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"maybe_uninit_as_bytes\", issue = \"93092\")]\n+    pub fn slice_as_bytes_mut(this: &mut [MaybeUninit<T>]) -> &mut [MaybeUninit<u8>] {\n+        // SAFETY: MaybeUninit<u8> is always valid, even for padding bytes\n+        unsafe {\n+            slice::from_raw_parts_mut(\n+                this.as_mut_ptr() as *mut MaybeUninit<u8>,\n+                this.len() * mem::size_of::<T>(),\n+            )\n+        }\n+    }\n }"}]}