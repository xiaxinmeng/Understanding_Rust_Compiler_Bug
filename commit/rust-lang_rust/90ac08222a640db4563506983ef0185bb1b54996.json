{"sha": "90ac08222a640db4563506983ef0185bb1b54996", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwYWMwODIyMmE2NDBkYjQ1NjM1MDY5ODNlZjAxODViYjFiNTQ5OTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-02T03:09:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-02T03:09:03Z"}, "message": "Rollup merge of #66905 - petrochenkov:rmplugin2, r=Centril\n\nrustc_plugin: Remove some remaining plugin features\n\n- Plugin arguments (`#![plugin(my_plugin(args))]`) are no longer supported.\n- Registering additional plugins from command line (`-Z extra-plugins=my_plugin`) is no longer supported, `-Z crate-attr=plugin(my_plugin)` can be used instead.\n- Lint `plugin_as_library` is removed as mostly useless now, when plugins exist as a compatibility feature with greatly reduced functionality.\n- Plugins registering additional LLVM passes (`Registry::register_llvm_pass`) are no longer supported, `-C                   passes=my_passes` can be used instead.\n\nr? @Centril", "tree": {"sha": "389fd61bab39526a746c0f0c4dd0c5fe9dedd195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/389fd61bab39526a746c0f0c4dd0c5fe9dedd195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90ac08222a640db4563506983ef0185bb1b54996", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd5IBPCRBK7hj4Ov3rIwAAdHIIAEost3uRz6ilecGyVKAO7asM\nJSQOoal15LUiu1UiKXtRS4mMXulI0a1sJ12XvXHawBbwGZckDoG+PAZPrWPkFdA6\n0oxxdb3LFOqwcB6Wu+UvQZPbehGMF4ovWZiEdiX9ztd8GbHWyEbCa5iCLpWkGxrP\niXpJPKVSrnE7GU/yZgtlHv3JbS+SfFGC1mSvN8w5x3Z009ka3/w4bBVteTWG7XZv\nHa56pOugGbfR4Pd9j9Rh5g7+6+fznfJNEB8LPGANdJzJNf8K1MmA0tRiLFtGSpv8\ntl7FrVh3NBpkhteocre22irRGhPEQKQ9w/luMotwrWS/SFRi5P9o0RkYn0ujDis=\n=oEHb\n-----END PGP SIGNATURE-----\n", "payload": "tree 389fd61bab39526a746c0f0c4dd0c5fe9dedd195\nparent dbe880e8ecd088ded3ac63fac1d60f813f11ad4e\nparent e5944a5a698a0a9dd3acbb14d8309a2b72cd9160\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1575256143 +0100\ncommitter GitHub <noreply@github.com> 1575256143 +0100\n\nRollup merge of #66905 - petrochenkov:rmplugin2, r=Centril\n\nrustc_plugin: Remove some remaining plugin features\n\n- Plugin arguments (`#![plugin(my_plugin(args))]`) are no longer supported.\n- Registering additional plugins from command line (`-Z extra-plugins=my_plugin`) is no longer supported, `-Z crate-attr=plugin(my_plugin)` can be used instead.\n- Lint `plugin_as_library` is removed as mostly useless now, when plugins exist as a compatibility feature with greatly reduced functionality.\n- Plugins registering additional LLVM passes (`Registry::register_llvm_pass`) are no longer supported, `-C                   passes=my_passes` can be used instead.\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90ac08222a640db4563506983ef0185bb1b54996", "html_url": "https://github.com/rust-lang/rust/commit/90ac08222a640db4563506983ef0185bb1b54996", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90ac08222a640db4563506983ef0185bb1b54996/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbe880e8ecd088ded3ac63fac1d60f813f11ad4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e", "html_url": "https://github.com/rust-lang/rust/commit/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e"}, {"sha": "e5944a5a698a0a9dd3acbb14d8309a2b72cd9160", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5944a5a698a0a9dd3acbb14d8309a2b72cd9160", "html_url": "https://github.com/rust-lang/rust/commit/e5944a5a698a0a9dd3acbb14d8309a2b72cd9160"}], "stats": {"total": 546, "additions": 141, "deletions": 405}, "files": [{"sha": "386f6008d06aad0b1b15741662ec43fad2529cf4", "filename": "src/doc/rustc/src/lints/listing/warn-by-default.md", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -307,18 +307,6 @@ warning: path statement with no effect\n   |\n ```\n \n-## plugin-as-library\n-\n-This lint detects when compiler plugins are used as ordinary library in\n-non-plugin crate. Some example code that triggers this lint:\n-\n-```rust,ignore\n-#![feature(plugin)]\n-#![plugin(macro_crate_test)]\n-\n-extern crate macro_crate_test;\n-```\n-\n ## private-in-public\n \n This lint detects private items in public interfaces not caught by the old implementation. Some"}, {"sha": "495cdee62c87dc798f6049ba5a21278d79409012", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -21,15 +21,10 @@ the crate attribute `#![plugin(...)]`.  See the\n `rustc_driver::plugin` documentation for more about the\n mechanics of defining and loading a plugin.\n \n-If present, arguments passed as `#![plugin(foo(... args ...))]` are not\n-interpreted by rustc itself.  They are provided to the plugin through the\n-`Registry`'s `args` method.\n-\n In the vast majority of cases, a plugin should *only* be used through\n `#![plugin]` and not through an `extern crate` item.  Linking a plugin would\n pull in all of libsyntax and librustc as dependencies of your crate.  This is\n-generally unwanted unless you are building another plugin.  The\n-`plugin_as_library` lint checks these guidelines.\n+generally unwanted unless you are building another plugin.\n \n The usual practice is to put compiler plugins in their own crate, separate from\n any `macro_rules!` macros or ordinary Rust code meant to be used by consumers"}, {"sha": "7f72154e42c61eb0f7fcb447d12e04a295a4c33a", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -47,8 +47,7 @@ use rustc_error_codes::*;\n /// This is basically the subset of `Context` that we can\n /// build early in the compile pipeline.\n pub struct LintStore {\n-    /// Registered lints. The bool is true if the lint was\n-    /// added by a plugin.\n+    /// Registered lints.\n     lints: Vec<&'static Lint>,\n \n     /// Constructor functions for each variety of lint pass."}, {"sha": "d2ac5436cc8025e3e889462f593151fe1a1b620f", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -1364,8 +1364,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"enable queries of the dependency graph for regression testing\"),\n     no_analysis: bool = (false, parse_bool, [UNTRACKED],\n         \"parse and expand the source, but run no analysis\"),\n-    extra_plugins: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n-        \"load extra plugins\"),\n     unstable_options: bool = (false, parse_bool, [UNTRACKED],\n         \"adds unstable command line options to rustc interface\"),\n     force_overflow_checks: Option<bool> = (None, parse_opt_bool, [TRACKED],"}, {"sha": "f673ea3e771c544566b77c0b51d6dd7168cad9f0", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -76,7 +76,6 @@ pub struct Session {\n     /// (sub)diagnostics that have been set once, but should not be set again,\n     /// in order to avoid redundantly verbose output (Issue #24690, #44953).\n     pub one_time_diagnostics: Lock<FxHashSet<(DiagnosticMessageId, Option<Span>, String)>>,\n-    pub plugin_llvm_passes: OneThread<RefCell<Vec<String>>>,\n     pub crate_types: Once<Vec<config::CrateType>>,\n     /// The `crate_disambiguator` is constructed out of all the `-C metadata`\n     /// arguments passed to the compiler. Its value together with the crate-name\n@@ -1149,7 +1148,6 @@ fn build_session_(\n         local_crate_source_file,\n         working_dir,\n         one_time_diagnostics: Default::default(),\n-        plugin_llvm_passes: OneThread::new(RefCell::new(Vec::new())),\n         crate_types: Once::new(),\n         crate_disambiguator: Once::new(),\n         features: Once::new(),"}, {"sha": "07ac76cec990b85a2e5908f6e219aab910aaba5e", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -365,20 +365,6 @@ pub(crate) unsafe fn optimize(cgcx: &CodegenContext<LlvmCodegenBackend>,\n \n             add_sanitizer_passes(config, &mut extra_passes);\n \n-            for pass_name in &cgcx.plugin_passes {\n-                if let Some(pass) = find_pass(pass_name) {\n-                    extra_passes.push(pass);\n-                } else {\n-                    diag_handler.err(&format!(\"a plugin asked for LLVM pass \\\n-                                               `{}` but LLVM does not \\\n-                                               recognize it\", pass_name));\n-                }\n-\n-                if pass_name == \"name-anon-globals\" {\n-                    have_name_anon_globals_pass = true;\n-                }\n-            }\n-\n             // Some options cause LLVM bitcode to be emitted, which uses ThinLTOBuffers, so we need\n             // to make sure we run LLVM's NameAnonGlobals pass when emitting bitcode; otherwise\n             // we'll get errors in LLVM."}, {"sha": "863b41ec15ec07cfaa1613e577620c5589374329", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -231,8 +231,6 @@ pub struct CodegenContext<B: WriteBackendMethods> {\n     pub total_cgus: usize,\n     // Handler to use for diagnostics produced during codegen.\n     pub diag_emitter: SharedEmitter,\n-    // LLVM passes added by plugins.\n-    pub plugin_passes: Vec<String>,\n     // LLVM optimizations for which we want to print remarks.\n     pub remark: Passes,\n     // Worker thread number\n@@ -1028,7 +1026,6 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         time_passes: sess.time_extended(),\n         prof: sess.prof.clone(),\n         exported_symbols,\n-        plugin_passes: sess.plugin_llvm_passes.borrow().clone(),\n         remark: sess.opts.cg.remark.clone(),\n         worker: 0,\n         incr_comp_session_dir: sess.incr_comp_session_dir_opt().map(|r| r.clone()),"}, {"sha": "9c936492cbded40e3810566fdcd3a77be7bc1cde", "filename": "src/librustc_feature/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fbuiltin_attrs.rs?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -283,7 +283,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         )\n     ),\n     (\n-        sym::plugin, CrateLevel, template!(List: \"name|name(args)\"),\n+        sym::plugin, CrateLevel, template!(List: \"name\"),\n         Gated(\n             Stability::Deprecated(\n                 \"https://github.com/rust-lang/rust/pull/64675\","}, {"sha": "f985a5b37558c91e035bac344e92c9c96ab81586", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -30,7 +30,6 @@ use rustc_mir as mir;\n use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str};\n use rustc_passes::{self, ast_validation, hir_stats, layout_test};\n use rustc_plugin_impl as plugin;\n-use rustc_plugin_impl::registry::Registry;\n use rustc_privacy;\n use rustc_resolve::{Resolver, ResolverArenas};\n use rustc_traits;\n@@ -106,8 +105,7 @@ declare_box_region_type!(\n     (&mut Resolver<'_>) -> (Result<ast::Crate>, ResolverOutputs)\n );\n \n-/// Runs the \"early phases\" of the compiler: initial `cfg` processing,\n-/// loading compiler plugins (including those from `addl_plugins`),\n+/// Runs the \"early phases\" of the compiler: initial `cfg` processing, loading compiler plugins,\n /// syntax expansion, secondary `cfg` expansion, synthesis of a test\n /// harness if one is to be provided, injection of a dependency on the\n /// standard library and prelude, and name resolution.\n@@ -209,33 +207,22 @@ pub fn register_plugins<'a>(\n         middle::recursion_limit::update_limits(sess, &krate);\n     });\n \n-    let registrars = time(sess, \"plugin loading\", || {\n-        plugin::load::load_plugins(\n-            sess,\n-            metadata_loader,\n-            &krate,\n-            Some(sess.opts.debugging_opts.extra_plugins.clone()),\n-        )\n-    });\n-\n     let mut lint_store = rustc_lint::new_lint_store(\n         sess.opts.debugging_opts.no_interleave_lints,\n         sess.unstable_options(),\n     );\n+    register_lints(&sess, &mut lint_store);\n \n-    (register_lints)(&sess, &mut lint_store);\n-\n-    let mut registry = Registry::new(sess, &mut lint_store, krate.span);\n-\n+    let registrars = time(sess, \"plugin loading\", || {\n+        plugin::load::load_plugins(sess, metadata_loader, &krate)\n+    });\n     time(sess, \"plugin registration\", || {\n+        let mut registry = plugin::Registry { lint_store: &mut lint_store };\n         for registrar in registrars {\n-            registry.args_hidden = Some(registrar.args);\n-            (registrar.fun)(&mut registry);\n+            registrar(&mut registry);\n         }\n     });\n \n-    *sess.plugin_llvm_passes.borrow_mut() = registry.llvm_passes;\n-\n     Ok((krate, Lrc::new(lint_store)))\n }\n "}, {"sha": "4c630b56cb4ce36a1b02bac73b31b57b673b1a4f", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -650,10 +650,6 @@ fn test_debugging_options_tracking_hash() {\n     opts.debugging_opts.continue_parse_after_error = true;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n-    opts = reference.clone();\n-    opts.debugging_opts.extra_plugins = vec![String::from(\"plugin1\"), String::from(\"plugin2\")];\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n     opts = reference.clone();\n     opts.debugging_opts.force_overflow_checks = Some(true);\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());"}, {"sha": "b08a095beac4ecbf06216087f7361fa00e8ef82d", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -24,7 +24,7 @@\n use std::fmt::Write;\n \n use rustc::hir::def::{Res, DefKind};\n-use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::hir::def_id::DefId;\n use rustc::ty::{self, Ty, TyCtxt, layout::VariantIdx};\n use rustc::{lint, util};\n use rustc::lint::FutureIncompatibleInfo;\n@@ -800,45 +800,6 @@ impl EarlyLintPass for UnusedDocComment {\n     }\n }\n \n-declare_lint! {\n-    PLUGIN_AS_LIBRARY,\n-    Warn,\n-    \"compiler plugin used as ordinary library in non-plugin crate\"\n-}\n-\n-declare_lint_pass!(PluginAsLibrary => [PLUGIN_AS_LIBRARY]);\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PluginAsLibrary {\n-    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n-        if cx.tcx.plugin_registrar_fn(LOCAL_CRATE).is_some() {\n-            // We're compiling a plugin; it's fine to link other plugins.\n-            return;\n-        }\n-\n-        match it.kind {\n-            hir::ItemKind::ExternCrate(..) => (),\n-            _ => return,\n-        };\n-\n-        let def_id = cx.tcx.hir().local_def_id(it.hir_id);\n-        let prfn = match cx.tcx.extern_mod_stmt_cnum(def_id) {\n-            Some(cnum) => cx.tcx.plugin_registrar_fn(cnum),\n-            None => {\n-                // Probably means we aren't linking the crate for some reason.\n-                //\n-                // Not sure if / when this could happen.\n-                return;\n-            }\n-        };\n-\n-        if prfn.is_some() {\n-            cx.span_lint(PLUGIN_AS_LIBRARY,\n-                         it.span,\n-                         \"compiler plugin used as an ordinary library\");\n-        }\n-    }\n-}\n-\n declare_lint! {\n     NO_MANGLE_CONST_ITEMS,\n     Deny,\n@@ -1268,7 +1229,6 @@ declare_lint_pass!(\n         MISSING_DEBUG_IMPLEMENTATIONS,\n         ANONYMOUS_PARAMETERS,\n         UNUSED_DOC_COMMENTS,\n-        PLUGIN_AS_LIBRARY,\n         NO_MANGLE_CONST_ITEMS,\n         NO_MANGLE_GENERIC_ITEMS,\n         MUTABLE_TRANSMUTES,"}, {"sha": "ab4063c421cd24f6933c16aeb98a7121c5452e81", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -157,8 +157,6 @@ macro_rules! late_lint_mod_passes {\n             // Depends on types used in type definitions\n             MissingCopyImplementations: MissingCopyImplementations,\n \n-            PluginAsLibrary: PluginAsLibrary,\n-\n             // Depends on referenced function signatures in expressions\n             MutableTransmutes: MutableTransmutes,\n \n@@ -350,6 +348,7 @@ fn register_builtins(store: &mut lint::LintStore, no_interleave_lints: bool) {\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/35896\");\n     store.register_removed(\"nested_impl_trait\",\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/59014\");\n+    store.register_removed(\"plugin_as_library\", \"plugins have been deprecated and retired\");\n }\n \n fn register_internals(store: &mut lint::LintStore) {"}, {"sha": "5c4ea39aecc927c345c970dd63c1442ef8383717", "filename": "src/librustc_plugin_impl/lib.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc_plugin_impl%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc_plugin_impl%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Flib.rs?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -10,10 +10,16 @@\n \n #![feature(nll)]\n \n-#![recursion_limit=\"256\"]\n+use rustc::lint::LintStore;\n \n-pub use registry::Registry;\n-\n-pub mod registry;\n-pub mod load;\n pub mod build;\n+pub mod load;\n+\n+/// Structure used to register plugins.\n+///\n+/// A plugin registrar function takes an `&mut Registry` and should call\n+/// methods to register its plugins.\n+pub struct Registry<'a> {\n+    /// The `LintStore` allows plugins to register new lints.\n+    pub lint_store: &'a mut LintStore,\n+}"}, {"sha": "0bd91076592bfe1b59fffbf219f8f48a624ebaa7", "filename": "src/librustc_plugin_impl/load.rs", "status": "modified", "additions": 65, "deletions": 99, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc_plugin_impl%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Flibrustc_plugin_impl%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Fload.rs?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -3,33 +3,21 @@\n use rustc::middle::cstore::MetadataLoader;\n use rustc::session::Session;\n use rustc_metadata::locator;\n-use crate::registry::Registry;\n+use crate::Registry;\n \n use std::borrow::ToOwned;\n use std::env;\n use std::mem;\n use std::path::PathBuf;\n-use syntax::ast;\n+use syntax::ast::{Crate, Ident};\n use syntax::struct_span_err;\n-use syntax::symbol::{Symbol, kw, sym};\n-use syntax_pos::{Span, DUMMY_SP};\n+use syntax::symbol::sym;\n+use syntax_pos::Span;\n \n use rustc_error_codes::*;\n \n /// Pointer to a registrar function.\n-pub type PluginRegistrarFun =\n-    fn(&mut Registry<'_>);\n-\n-pub struct PluginRegistrar {\n-    pub fun: PluginRegistrarFun,\n-    pub args: Vec<ast::NestedMetaItem>,\n-}\n-\n-struct PluginLoader<'a> {\n-    sess: &'a Session,\n-    metadata_loader: &'a dyn MetadataLoader,\n-    plugins: Vec<PluginRegistrar>,\n-}\n+type PluginRegistrarFn = fn(&mut Registry<'_>);\n \n fn call_malformed_plugin_attribute(sess: &Session, span: Span) {\n     struct_span_err!(sess, span, E0498, \"malformed `plugin` attribute\")\n@@ -40,98 +28,76 @@ fn call_malformed_plugin_attribute(sess: &Session, span: Span) {\n /// Read plugin metadata and dynamically load registrar functions.\n pub fn load_plugins(sess: &Session,\n                     metadata_loader: &dyn MetadataLoader,\n-                    krate: &ast::Crate,\n-                    addl_plugins: Option<Vec<String>>) -> Vec<PluginRegistrar> {\n-    let mut loader = PluginLoader { sess, metadata_loader, plugins: Vec::new() };\n-\n-    // do not report any error now. since crate attributes are\n-    // not touched by expansion, every use of plugin without\n-    // the feature enabled will result in an error later...\n-    if sess.features_untracked().plugin {\n-        for attr in &krate.attrs {\n-            if !attr.check_name(sym::plugin) {\n-                continue;\n-            }\n+                    krate: &Crate) -> Vec<PluginRegistrarFn> {\n+    let mut plugins = Vec::new();\n \n-            let plugins = match attr.meta_item_list() {\n-                Some(xs) => xs,\n-                None => continue,\n-            };\n-\n-            for plugin in plugins {\n-                // plugins must have a name and can't be key = value\n-                let name = plugin.name_or_empty();\n-                if name != kw::Invalid && !plugin.is_value_str() {\n-                    let args = plugin.meta_item_list().map(ToOwned::to_owned);\n-                    loader.load_plugin(plugin.span(), name, args.unwrap_or_default());\n-                } else {\n-                    call_malformed_plugin_attribute(sess, attr.span);\n-                }\n-            }\n+    for attr in &krate.attrs {\n+        if !attr.check_name(sym::plugin) {\n+            continue;\n         }\n-    }\n \n-    if let Some(plugins) = addl_plugins {\n-        for plugin in plugins {\n-            loader.load_plugin(DUMMY_SP, Symbol::intern(&plugin), vec![]);\n+        for plugin in attr.meta_item_list().unwrap_or_default() {\n+            match plugin.ident() {\n+                Some(ident) if plugin.is_word() =>\n+                    load_plugin(&mut plugins, sess, metadata_loader, ident),\n+                _ => call_malformed_plugin_attribute(sess, plugin.span()),\n+            }\n         }\n     }\n \n-    loader.plugins\n+    plugins\n }\n \n-impl<'a> PluginLoader<'a> {\n-    fn load_plugin(&mut self, span: Span, name: Symbol, args: Vec<ast::NestedMetaItem>) {\n-        let registrar = locator::find_plugin_registrar(self.sess, self.metadata_loader, span, name);\n-\n-        if let Some((lib, disambiguator)) = registrar {\n-            let symbol = self.sess.generate_plugin_registrar_symbol(disambiguator);\n-            let fun = self.dylink_registrar(span, lib, symbol);\n-            self.plugins.push(PluginRegistrar {\n-                fun,\n-                args,\n-            });\n-        }\n+fn load_plugin(plugins: &mut Vec<PluginRegistrarFn>,\n+               sess: &Session,\n+               metadata_loader: &dyn MetadataLoader,\n+               ident: Ident) {\n+    let registrar = locator::find_plugin_registrar(sess, metadata_loader, ident.span, ident.name);\n+\n+    if let Some((lib, disambiguator)) = registrar {\n+        let symbol = sess.generate_plugin_registrar_symbol(disambiguator);\n+        let fun = dylink_registrar(sess, ident.span, lib, symbol);\n+        plugins.push(fun);\n     }\n+}\n \n-    // Dynamically link a registrar function into the compiler process.\n-    fn dylink_registrar(&mut self,\n-                        span: Span,\n-                        path: PathBuf,\n-                        symbol: String) -> PluginRegistrarFun {\n-        use rustc_metadata::dynamic_lib::DynamicLibrary;\n-\n-        // Make sure the path contains a / or the linker will search for it.\n-        let path = env::current_dir().unwrap().join(&path);\n-\n-        let lib = match DynamicLibrary::open(Some(&path)) {\n-            Ok(lib) => lib,\n-            // this is fatal: there are almost certainly macros we need\n-            // inside this crate, so continue would spew \"macro undefined\"\n-            // errors\n-            Err(err) => {\n-                self.sess.span_fatal(span, &err)\n-            }\n-        };\n-\n-        unsafe {\n-            let registrar =\n-                match lib.symbol(&symbol) {\n-                    Ok(registrar) => {\n-                        mem::transmute::<*mut u8,PluginRegistrarFun>(registrar)\n-                    }\n-                    // again fatal if we can't register macros\n-                    Err(err) => {\n-                        self.sess.span_fatal(span, &err)\n-                    }\n-                };\n-\n-            // Intentionally leak the dynamic library. We can't ever unload it\n-            // since the library can make things that will live arbitrarily long\n-            // (e.g., an @-box cycle or a thread).\n-            mem::forget(lib);\n-\n-            registrar\n+// Dynamically link a registrar function into the compiler process.\n+fn dylink_registrar(sess: &Session,\n+                    span: Span,\n+                    path: PathBuf,\n+                    symbol: String) -> PluginRegistrarFn {\n+    use rustc_metadata::dynamic_lib::DynamicLibrary;\n+\n+    // Make sure the path contains a / or the linker will search for it.\n+    let path = env::current_dir().unwrap().join(&path);\n+\n+    let lib = match DynamicLibrary::open(Some(&path)) {\n+        Ok(lib) => lib,\n+        // this is fatal: there are almost certainly macros we need\n+        // inside this crate, so continue would spew \"macro undefined\"\n+        // errors\n+        Err(err) => {\n+            sess.span_fatal(span, &err)\n         }\n+    };\n+\n+    unsafe {\n+        let registrar =\n+            match lib.symbol(&symbol) {\n+                Ok(registrar) => {\n+                    mem::transmute::<*mut u8, PluginRegistrarFn>(registrar)\n+                }\n+                // again fatal if we can't register macros\n+                Err(err) => {\n+                    sess.span_fatal(span, &err)\n+                }\n+            };\n+\n+        // Intentionally leak the dynamic library. We can't ever unload it\n+        // since the library can make things that will live arbitrarily long\n+        // (e.g., an @-box cycle or a thread).\n+        mem::forget(lib);\n+\n+        registrar\n     }\n }"}, {"sha": "bc684d59e5a99d375c844c5e401847f1b4065cea", "filename": "src/librustc_plugin_impl/registry.rs", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e/src%2Flibrustc_plugin_impl%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e/src%2Flibrustc_plugin_impl%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Fregistry.rs?ref=dbe880e8ecd088ded3ac63fac1d60f813f11ad4e", "patch": "@@ -1,70 +0,0 @@\n-//! Used by plugin crates to tell `rustc` about the plugins they provide.\n-\n-use rustc::lint::LintStore;\n-use rustc::session::Session;\n-use syntax::ast;\n-use syntax_pos::Span;\n-\n-use std::borrow::ToOwned;\n-\n-/// Structure used to register plugins.\n-///\n-/// A plugin registrar function takes an `&mut Registry` and should call\n-/// methods to register its plugins.\n-///\n-/// This struct has public fields and other methods for use by `rustc`\n-/// itself. They are not documented here, and plugin authors should\n-/// not use them.\n-pub struct Registry<'a> {\n-    /// Compiler session. Useful if you want to emit diagnostic messages\n-    /// from the plugin registrar.\n-    pub sess: &'a Session,\n-\n-    /// The `LintStore` allows plugins to register new lints.\n-    pub lint_store: &'a mut LintStore,\n-\n-    #[doc(hidden)]\n-    pub args_hidden: Option<Vec<ast::NestedMetaItem>>,\n-\n-    #[doc(hidden)]\n-    pub krate_span: Span,\n-\n-    #[doc(hidden)]\n-    pub llvm_passes: Vec<String>,\n-}\n-\n-impl<'a> Registry<'a> {\n-    #[doc(hidden)]\n-    pub fn new(sess: &'a Session, lint_store: &'a mut LintStore, krate_span: Span) -> Registry<'a> {\n-        Registry {\n-            sess,\n-            lint_store,\n-            args_hidden: None,\n-            krate_span,\n-            llvm_passes: vec![],\n-        }\n-    }\n-\n-    /// Gets the plugin's arguments, if any.\n-    ///\n-    /// These are specified inside the `plugin` crate attribute as\n-    ///\n-    /// ```no_run\n-    /// #![plugin(my_plugin_name(... args ...))]\n-    /// ```\n-    ///\n-    /// Returns empty slice in case the plugin was loaded\n-    /// with `--extra-plugins`\n-    pub fn args(&self) -> &[ast::NestedMetaItem] {\n-        self.args_hidden.as_ref().map(|v| &v[..]).unwrap_or(&[])\n-    }\n-\n-    /// Register an LLVM pass.\n-    ///\n-    /// Registration with LLVM itself is handled through static C++ objects with\n-    /// constructors. This method simply adds a name to the list of passes to\n-    /// execute.\n-    pub fn register_llvm_pass(&mut self, name: &str) {\n-        self.llvm_passes.push(name.to_owned());\n-    }\n-}"}, {"sha": "2ff1c2e363d50c86ddeb3c3cdf4f529dea716c82", "filename": "src/test/ui-fulldeps/auxiliary/llvm-pass-plugin.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fllvm-pass-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fllvm-pass-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fllvm-pass-plugin.rs?ref=dbe880e8ecd088ded3ac63fac1d60f813f11ad4e", "patch": "@@ -1,19 +0,0 @@\n-// force-host\n-\n-#![feature(plugin_registrar)]\n-#![feature(rustc_private)]\n-\n-extern crate rustc;\n-extern crate rustc_driver;\n-\n-use rustc_driver::plugin::Registry;\n-\n-#[plugin_registrar]\n-pub fn plugin_registrar(reg: &mut Registry) {\n-    // This pass is built in to LLVM.\n-    //\n-    // Normally, we would name a pass that was registered through\n-    // C++ static object constructors in the same .so file as the\n-    // plugin registrar.\n-    reg.register_llvm_pass(\"gvn\");\n-}"}, {"sha": "85eaf53364315580d6005d214943b254435c0947", "filename": "src/test/ui-fulldeps/feature-gate-plugin.rs", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Ftest%2Fui-fulldeps%2Ffeature-gate-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Ftest%2Fui-fulldeps%2Ffeature-gate-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Ffeature-gate-plugin.rs?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -1,6 +1,7 @@\n-// Test that `#![plugin(...)]` attribute is gated by `plugin` feature gate\n+// aux-build:empty-plugin.rs\n+// ignore-stage1\n \n-#![plugin(foo)]\n+#![plugin(empty_plugin)]\n //~^ ERROR compiler plugins are deprecated\n //~| WARN use of deprecated attribute `plugin`: compiler plugins are deprecated\n ", "previous_filename": "src/test/ui/feature-gates/feature-gate-plugin.rs"}, {"sha": "c922325c341ea674905db7758cf03c573fba48ab", "filename": "src/test/ui-fulldeps/feature-gate-plugin.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Ftest%2Fui-fulldeps%2Ffeature-gate-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Ftest%2Fui-fulldeps%2Ffeature-gate-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Ffeature-gate-plugin.stderr?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -1,17 +1,17 @@\n error[E0658]: compiler plugins are deprecated\n-  --> $DIR/feature-gate-plugin.rs:3:1\n+  --> $DIR/feature-gate-plugin.rs:4:1\n    |\n-LL | #![plugin(foo)]\n-   | ^^^^^^^^^^^^^^^\n+LL | #![plugin(empty_plugin)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29597\n    = help: add `#![feature(plugin)]` to the crate attributes to enable\n \n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/feature-gate-plugin.rs:3:1\n+  --> $DIR/feature-gate-plugin.rs:4:1\n    |\n-LL | #![plugin(foo)]\n-   | ^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n+LL | #![plugin(empty_plugin)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n ", "previous_filename": "src/test/ui/feature-gates/feature-gate-plugin.stderr"}, {"sha": "0bd95dfbd14a97420b0a78f9c50f7c7775b4a14c", "filename": "src/test/ui-fulldeps/lint-plugin-cmdline-load.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.rs?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -1,9 +1,9 @@\n-// run-pass\n+// check-pass\n // aux-build:lint-plugin-test.rs\n // ignore-stage1\n-// compile-flags: -Z extra-plugins=lint_plugin_test\n+// compile-flags: -Z crate-attr=plugin(lint_plugin_test)\n \n-#![allow(dead_code)]\n+#![feature(plugin)]\n \n fn lintme() { } //~ WARNING item is named 'lintme'\n "}, {"sha": "1263a0efe624fe646846a79e1b7734f449331d1e", "filename": "src/test/ui-fulldeps/lint-plugin-cmdline-load.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -1,3 +1,11 @@\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n+  --> <crate attribute>:1:1\n+   |\n+LL | plugin(lint_plugin_test)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n warning: item is named 'lintme'\n   --> $DIR/lint-plugin-cmdline-load.rs:8:1\n    |"}, {"sha": "fa5cbc1e808300b929c3f1ef90a3016be93ad839", "filename": "src/test/ui-fulldeps/llvm-pass-plugin.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.rs?ref=dbe880e8ecd088ded3ac63fac1d60f813f11ad4e", "patch": "@@ -1,8 +0,0 @@\n-// run-pass\n-// aux-build:llvm-pass-plugin.rs\n-// ignore-stage1\n-\n-#![feature(plugin)]\n-#![plugin(llvm_pass_plugin)] //~ WARNING compiler plugins are deprecated\n-\n-pub fn main() { }"}, {"sha": "61b53bb2b7cdfc0645349f17b1094510a4c6db2d", "filename": "src/test/ui-fulldeps/llvm-pass-plugin.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.stderr?ref=dbe880e8ecd088ded3ac63fac1d60f813f11ad4e", "patch": "@@ -1,8 +0,0 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/llvm-pass-plugin.rs:6:1\n-   |\n-LL | #![plugin(llvm_pass_plugin)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-"}, {"sha": "f21617be5d26f81a11834b78f7071cb533a93fc4", "filename": "src/test/ui-fulldeps/macro-crate-multi-decorator.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Ftest%2Fui-fulldeps%2Fmacro-crate-multi-decorator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Ftest%2Fui-fulldeps%2Fmacro-crate-multi-decorator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fmacro-crate-multi-decorator.rs?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -1,9 +1,4 @@\n-// run-pass\n-\n-#![allow(plugin_as_library)]\n-#![allow(dead_code)]\n-#![allow(unused_variables)]\n-#![allow(unused_imports)]\n+// check-pass\n // aux-build:macro-crate-test.rs\n // ignore-stage1\n "}, {"sha": "1865819053ef624a1b97fdec9102d48c8d7bbfde", "filename": "src/test/ui-fulldeps/plugin-args-1.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.rs?ref=dbe880e8ecd088ded3ac63fac1d60f813f11ad4e", "patch": "@@ -1,8 +0,0 @@\n-// check-pass\n-// aux-build:empty-plugin.rs\n-// ignore-stage1\n-\n-#![feature(plugin)]\n-#![plugin(empty_plugin)] //~ WARNING compiler plugins are deprecated\n-\n-fn main() {}"}, {"sha": "4e82961acc218c3551d474c5e0c2bd7a5d68accc", "filename": "src/test/ui-fulldeps/plugin-args-1.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.stderr?ref=dbe880e8ecd088ded3ac63fac1d60f813f11ad4e", "patch": "@@ -1,8 +0,0 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/plugin-args-1.rs:6:1\n-   |\n-LL | #![plugin(empty_plugin)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-"}, {"sha": "c4bd1916b854255aa55dd6318a50eeb57b017325", "filename": "src/test/ui-fulldeps/plugin-args-2.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.rs?ref=dbe880e8ecd088ded3ac63fac1d60f813f11ad4e", "patch": "@@ -1,8 +0,0 @@\n-// check-pass\n-// aux-build:empty-plugin.rs\n-// ignore-stage1\n-\n-#![feature(plugin)]\n-#![plugin(empty_plugin())] //~ WARNING compiler plugins are deprecated\n-\n-fn main() {}"}, {"sha": "92bd69b0e4b3267519ce696612a14c53ffc862b8", "filename": "src/test/ui-fulldeps/plugin-args-2.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.stderr?ref=dbe880e8ecd088ded3ac63fac1d60f813f11ad4e", "patch": "@@ -1,8 +0,0 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/plugin-args-2.rs:6:1\n-   |\n-LL | #![plugin(empty_plugin())]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-"}, {"sha": "c8818cc6c3178b33d02811586140ffe96c4e03ff", "filename": "src/test/ui-fulldeps/plugin-args-3.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.rs?ref=dbe880e8ecd088ded3ac63fac1d60f813f11ad4e", "patch": "@@ -1,8 +0,0 @@\n-// check-pass\n-// aux-build:empty-plugin.rs\n-// ignore-stage1\n-\n-#![feature(plugin)]\n-#![plugin(empty_plugin(hello(there), how(are=\"you\")))] //~ WARNING compiler plugins are deprecated\n-\n-fn main() {}"}, {"sha": "278853e0881ba7dac601fceceee7a1f9253897e1", "filename": "src/test/ui-fulldeps/plugin-args-3.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.stderr?ref=dbe880e8ecd088ded3ac63fac1d60f813f11ad4e", "patch": "@@ -1,8 +0,0 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/plugin-args-3.rs:6:1\n-   |\n-LL | #![plugin(empty_plugin(hello(there), how(are=\"you\")))]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-"}, {"sha": "488f2b775bf0b48d5aec7e1d228d29fcae48bc24", "filename": "src/test/ui-fulldeps/plugin-args.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Ftest%2Fui-fulldeps%2Fplugin-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Ftest%2Fui-fulldeps%2Fplugin-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args.rs?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -0,0 +1,9 @@\n+// aux-build:empty-plugin.rs\n+// ignore-stage1\n+\n+#![feature(plugin)]\n+#![plugin(empty_plugin(args))]\n+//~^ ERROR malformed `plugin` attribute\n+//~| WARNING compiler plugins are deprecated\n+\n+fn main() {}"}, {"sha": "2b9094c4c44b3b37521eef0d6aa92ceefbb49883", "filename": "src/test/ui-fulldeps/plugin-args.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Ftest%2Fui-fulldeps%2Fplugin-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Ftest%2Fui-fulldeps%2Fplugin-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args.stderr?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -0,0 +1,16 @@\n+error[E0498]: malformed `plugin` attribute\n+  --> $DIR/plugin-args.rs:5:11\n+   |\n+LL | #![plugin(empty_plugin(args))]\n+   |           ^^^^^^^^^^^^^^^^^^ malformed attribute\n+\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n+  --> $DIR/plugin-args.rs:5:1\n+   |\n+LL | #![plugin(empty_plugin(args))]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n+error: aborting due to previous error\n+"}, {"sha": "f231efc0a9a16f19a7afb9362524ce968369461a", "filename": "src/test/ui-fulldeps/plugin-as-extern-crate.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.rs?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -1,11 +1,10 @@\n+// check-pass\n // aux-build:empty-plugin.rs\n // ignore-cross-compile\n //\n // empty_plugin will not compile on a cross-compiled target because\n // libsyntax is not compiled for it.\n \n-#![deny(plugin_as_library)]\n+extern crate empty_plugin; // OK, plugin crates are still crates\n \n-extern crate empty_plugin; //~ ERROR compiler plugin used as an ordinary library\n-\n-fn main() { }\n+fn main() {}"}, {"sha": "d2fbb5d35172c5dfaa8f7f04c9ef319161be242e", "filename": "src/test/ui-fulldeps/plugin-as-extern-crate.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbe880e8ecd088ded3ac63fac1d60f813f11ad4e/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.stderr?ref=dbe880e8ecd088ded3ac63fac1d60f813f11ad4e", "patch": "@@ -1,14 +0,0 @@\n-error: compiler plugin used as an ordinary library\n-  --> $DIR/plugin-as-extern-crate.rs:9:1\n-   |\n-LL | extern crate empty_plugin;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/plugin-as-extern-crate.rs:7:9\n-   |\n-LL | #![deny(plugin_as_library)]\n-   |         ^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "2a4f772850e92b69851a6c4e53adba4abde57418", "filename": "src/test/ui/malformed/malformed-plugin-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -2,7 +2,7 @@ error: malformed `plugin` attribute input\n   --> $DIR/malformed-plugin-1.rs:2:1\n    |\n LL | #![plugin]\n-   | ^^^^^^^^^^ help: must be of the form: `#[plugin(name|name(args))]`\n+   | ^^^^^^^^^^ help: must be of the form: `#[plugin(name)]`\n \n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/malformed-plugin-1.rs:2:1"}, {"sha": "fe116a4061025ff7ee1812e014a0503619a4308b", "filename": "src/test/ui/malformed/malformed-plugin-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -2,7 +2,7 @@ error: malformed `plugin` attribute input\n   --> $DIR/malformed-plugin-2.rs:2:1\n    |\n LL | #![plugin=\"bleh\"]\n-   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#[plugin(name|name(args))]`\n+   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#[plugin(name)]`\n \n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/malformed-plugin-2.rs:2:1"}, {"sha": "4af933c15f61ed7ca174f3ffdcd3165ac513649a", "filename": "src/test/ui/malformed/malformed-plugin-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90ac08222a640db4563506983ef0185bb1b54996/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90ac08222a640db4563506983ef0185bb1b54996/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.stderr?ref=90ac08222a640db4563506983ef0185bb1b54996", "patch": "@@ -1,8 +1,8 @@\n error[E0498]: malformed `plugin` attribute\n-  --> $DIR/malformed-plugin-3.rs:2:1\n+  --> $DIR/malformed-plugin-3.rs:2:11\n    |\n LL | #![plugin(foo=\"bleh\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^ malformed attribute\n+   |           ^^^^^^^^^^ malformed attribute\n \n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/malformed-plugin-3.rs:2:1"}]}