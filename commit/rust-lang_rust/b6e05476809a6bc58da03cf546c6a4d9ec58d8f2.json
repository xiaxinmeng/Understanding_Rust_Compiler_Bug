{"sha": "b6e05476809a6bc58da03cf546c6a4d9ec58d8f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZTA1NDc2ODA5YTZiYzU4ZGEwM2NmNTQ2YzZhNGQ5ZWM1OGQ4ZjI=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-20T20:45:52Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-20T20:45:52Z"}, "message": "Allow individual lints to opt into being reported in external macros", "tree": {"sha": "76f7cbdda4ad1e73ba67b3c67ac03afa528ee03c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76f7cbdda4ad1e73ba67b3c67ac03afa528ee03c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6e05476809a6bc58da03cf546c6a4d9ec58d8f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6e05476809a6bc58da03cf546c6a4d9ec58d8f2", "html_url": "https://github.com/rust-lang/rust/commit/b6e05476809a6bc58da03cf546c6a4d9ec58d8f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6e05476809a6bc58da03cf546c6a4d9ec58d8f2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d63e9257b9ff43506a4f697f552beb76963408a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d63e9257b9ff43506a4f697f552beb76963408a1", "html_url": "https://github.com/rust-lang/rust/commit/d63e9257b9ff43506a4f697f552beb76963408a1"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "430e06ecbdfbc634f411adc5745878444d9a3c06", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6e05476809a6bc58da03cf546c6a4d9ec58d8f2/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e05476809a6bc58da03cf546c6a4d9ec58d8f2/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=b6e05476809a6bc58da03cf546c6a4d9ec58d8f2", "patch": "@@ -77,7 +77,8 @@ declare_lint! {\n declare_lint! {\n     pub UNREACHABLE_CODE,\n     Warn,\n-    \"detects unreachable code paths\"\n+    \"detects unreachable code paths\",\n+    report_in_external_macro\n }\n \n declare_lint! {\n@@ -216,7 +217,8 @@ declare_lint! {\n declare_lint! {\n     pub DEPRECATED,\n     Warn,\n-    \"detects use of deprecated items\"\n+    \"detects use of deprecated items\",\n+    report_in_external_macro\n }\n \n declare_lint! {"}, {"sha": "6fa6c31c7421d19a7bc6dabda04a38bd13ff8a6c", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b6e05476809a6bc58da03cf546c6a4d9ec58d8f2/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e05476809a6bc58da03cf546c6a4d9ec58d8f2/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=b6e05476809a6bc58da03cf546c6a4d9ec58d8f2", "patch": "@@ -80,6 +80,9 @@ pub struct Lint {\n     /// Starting at the given edition, default to the given lint level. If this is `None`, then use\n     /// `default_level`.\n     pub edition_lint_opts: Option<(Edition, Level)>,\n+\n+    /// Whether this lint is reported even inside expansions of external macros\n+    pub report_in_external_macro: bool,\n }\n \n impl Lint {\n@@ -100,11 +103,18 @@ impl Lint {\n #[macro_export]\n macro_rules! declare_lint {\n     ($vis: vis $NAME: ident, $Level: ident, $desc: expr) => (\n+        declare_lint!{$vis $NAME, $Level, $desc, false}\n+    );\n+    ($vis: vis $NAME: ident, $Level: ident, $desc: expr, report_in_external_macro) => (\n+        declare_lint!{$vis $NAME, $Level, $desc, true}\n+    );\n+    ($vis: vis $NAME: ident, $Level: ident, $desc: expr, $external: expr) => (\n         $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n             name: stringify!($NAME),\n             default_level: $crate::lint::$Level,\n             desc: $desc,\n             edition_lint_opts: None,\n+            report_in_external_macro: $external,\n         };\n     );\n     ($vis: vis $NAME: ident, $Level: ident, $desc: expr,\n@@ -115,6 +125,7 @@ macro_rules! declare_lint {\n             default_level: $crate::lint::$Level,\n             desc: $desc,\n             edition_lint_opts: Some(($lint_edition, $crate::lint::Level::$edition_level)),\n+            report_in_external_macro: false,\n         };\n     );\n }\n@@ -583,8 +594,7 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n     // items to take care of (delete the macro invocation). As a result we have\n     // a few lints we whitelist here for allowing a lint even though it's in a\n     // foreign macro invocation.\n-    } else if lint_id != LintId::of(builtin::UNREACHABLE_CODE) &&\n-        lint_id != LintId::of(builtin::DEPRECATED) {\n+    } else if !lint.report_in_external_macro {\n         if err.span.primary_spans().iter().any(|s| in_external_macro(sess, *s)) {\n             err.cancel();\n         }"}]}