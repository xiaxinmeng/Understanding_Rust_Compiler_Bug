{"sha": "c44534ef5a6b95cb032c6ce28c8893cf530903b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NDUzNGVmNWE2Yjk1Y2IwMzJjNmNlMjhjODg5M2NmNTMwOTAzYjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-22T05:30:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-22T05:30:46Z"}, "message": "Auto merge of #35821 - nbaksalyar:solaris-trans-fix, r=alexcrichton\n\nFix linker on Solaris/Illumos\n\nThis patch provides a fix for the `GnuLinker::export_symbols` function that currently relies on a `--retain-symbols-file` option which is not supported by the Solaris & Illumos linker.\n\nInstead, a [version script](https://www.gnu.org/software/gnulib/manual/html_node/LD-Version-Scripts.html) is used on this platform to achieve the same goal. Here's an example of a similar approach in LLVM's CMake script: https://github.com/llvm-mirror/llvm/blob/master/cmake/modules/AddLLVM.cmake#L88-L94.\n\nPerhaps other platforms like OpenBSD could benefit from this as well. /cc @semarie", "tree": {"sha": "64defd927884f2ffdd0319e3e7ca41ff49dff311", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64defd927884f2ffdd0319e3e7ca41ff49dff311"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c44534ef5a6b95cb032c6ce28c8893cf530903b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c44534ef5a6b95cb032c6ce28c8893cf530903b9", "html_url": "https://github.com/rust-lang/rust/commit/c44534ef5a6b95cb032c6ce28c8893cf530903b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c44534ef5a6b95cb032c6ce28c8893cf530903b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42584d36f6a2d8021c0b642ec0cbf1afed750f32", "url": "https://api.github.com/repos/rust-lang/rust/commits/42584d36f6a2d8021c0b642ec0cbf1afed750f32", "html_url": "https://github.com/rust-lang/rust/commit/42584d36f6a2d8021c0b642ec0cbf1afed750f32"}, {"sha": "c08b7b9f754c6969e3cc630cfea76a8b8ce8876b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c08b7b9f754c6969e3cc630cfea76a8b8ce8876b", "html_url": "https://github.com/rust-lang/rust/commit/c08b7b9f754c6969e3cc630cfea76a8b8ce8876b"}], "stats": {"total": 58, "additions": 39, "deletions": 19}, "files": [{"sha": "f2d5b128d270533ed9ebea7ccf17788d29e367a0", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 39, "deletions": 19, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c44534ef5a6b95cb032c6ce28c8893cf530903b9/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44534ef5a6b95cb032c6ce28c8893cf530903b9/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=c44534ef5a6b95cb032c6ce28c8893cf530903b9", "patch": "@@ -247,29 +247,49 @@ impl<'a> Linker for GnuLinker<'a> {\n             return\n         }\n \n+        let mut arg = OsString::new();\n         let path = tmpdir.join(\"list\");\n-        let prefix = if self.sess.target.target.options.is_like_osx {\n-            \"_\"\n-        } else {\n-            \"\"\n-        };\n-        let res = (|| -> io::Result<()> {\n-            let mut f = BufWriter::new(File::create(&path)?);\n-            for sym in &self.info.cdylib_exports {\n-                writeln!(f, \"{}{}\", prefix, sym)?;\n+\n+        if self.sess.target.target.options.is_like_solaris {\n+            let res = (|| -> io::Result<()> {\n+                let mut f = BufWriter::new(File::create(&path)?);\n+                writeln!(f, \"{{\\n  global:\")?;\n+                for sym in &self.info.cdylib_exports {\n+                    writeln!(f, \"    {};\", sym)?;\n+                }\n+                writeln!(f, \"\\n  local:\\n    *;\\n}};\")?;\n+                Ok(())\n+            })();\n+            if let Err(e) = res {\n+                self.sess.fatal(&format!(\"failed to write version script: {}\", e));\n             }\n-            Ok(())\n-        })();\n-        if let Err(e) = res {\n-            self.sess.fatal(&format!(\"failed to write lib.def file: {}\", e));\n-        }\n-        let mut arg = OsString::new();\n-        if self.sess.target.target.options.is_like_osx {\n-            arg.push(\"-Wl,-exported_symbols_list,\");\n+\n+            arg.push(\"-Wl,-M,\");\n+            arg.push(&path);\n         } else {\n-            arg.push(\"-Wl,--retain-symbols-file=\");\n+            let prefix = if self.sess.target.target.options.is_like_osx {\n+                \"_\"\n+            } else {\n+                \"\"\n+            };\n+            let res = (|| -> io::Result<()> {\n+                let mut f = BufWriter::new(File::create(&path)?);\n+                for sym in &self.info.cdylib_exports {\n+                    writeln!(f, \"{}{}\", prefix, sym)?;\n+                }\n+                Ok(())\n+            })();\n+            if let Err(e) = res {\n+                self.sess.fatal(&format!(\"failed to write lib.def file: {}\", e));\n+            }\n+            if self.sess.target.target.options.is_like_osx {\n+                arg.push(\"-Wl,-exported_symbols_list,\");\n+            } else {\n+                arg.push(\"-Wl,--retain-symbols-file=\");\n+            }\n+            arg.push(&path);\n         }\n-        arg.push(&path);\n+\n         self.cmd.arg(arg);\n     }\n }"}]}