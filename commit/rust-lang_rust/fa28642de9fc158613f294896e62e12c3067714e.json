{"sha": "fa28642de9fc158613f294896e62e12c3067714e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMjg2NDJkZTlmYzE1ODYxM2YyOTQ4OTZlNjJlMTJjMzA2NzcxNGU=", "commit": {"author": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2015-05-15T22:29:35Z"}, "committer": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2015-05-15T23:01:52Z"}, "message": "Allow `?Sized` types in `Rc`\u2019s impls of {Partial,}{Ord,Eq} and Borrow", "tree": {"sha": "c2a56ac6f2bb16d01de2a3a1a1fd40b5fe5af7ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2a56ac6f2bb16d01de2a3a1a1fd40b5fe5af7ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa28642de9fc158613f294896e62e12c3067714e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa28642de9fc158613f294896e62e12c3067714e", "html_url": "https://github.com/rust-lang/rust/commit/fa28642de9fc158613f294896e62e12c3067714e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa28642de9fc158613f294896e62e12c3067714e/comments", "author": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "716f920b7e234b450f272346fea961832505c06e", "url": "https://api.github.com/repos/rust-lang/rust/commits/716f920b7e234b450f272346fea961832505c06e", "html_url": "https://github.com/rust-lang/rust/commit/716f920b7e234b450f272346fea961832505c06e"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "88c5c38172acad831be9c5c289bc124811def361", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/fa28642de9fc158613f294896e62e12c3067714e/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa28642de9fc158613f294896e62e12c3067714e/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=fa28642de9fc158613f294896e62e12c3067714e", "patch": "@@ -634,7 +634,18 @@ impl<T: Default> Default for Rc<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(stage0)]\n impl<T: PartialEq> PartialEq for Rc<T> {\n+    #[inline(always)]\n+    fn eq(&self, other: &Rc<T>) -> bool { **self == **other }\n+\n+    #[inline(always)]\n+    fn ne(&self, other: &Rc<T>) -> bool { **self != **other }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(not(stage0))]\n+impl<T: ?Sized + PartialEq> PartialEq for Rc<T> {\n     /// Equality for two `Rc<T>`s.\n     ///\n     /// Two `Rc<T>`s are equal if their inner value are equal.\n@@ -669,10 +680,35 @@ impl<T: PartialEq> PartialEq for Rc<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(stage0)]\n impl<T: Eq> Eq for Rc<T> {}\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(not(stage0))]\n+impl<T: ?Sized + Eq> Eq for Rc<T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(stage0)]\n impl<T: PartialOrd> PartialOrd for Rc<T> {\n+    #[inline(always)]\n+    fn partial_cmp(&self, other: &Rc<T>) -> Option<Ordering> {\n+        (**self).partial_cmp(&**other)\n+    }\n+\n+    #[inline(always)]\n+    fn lt(&self, other: &Rc<T>) -> bool { **self < **other }\n+\n+    #[inline(always)]\n+    fn le(&self, other: &Rc<T>) -> bool { **self <= **other }\n+\n+    #[inline(always)]\n+    fn gt(&self, other: &Rc<T>) -> bool { **self > **other }\n+\n+    #[inline(always)]\n+    fn ge(&self, other: &Rc<T>) -> bool { **self >= **other }\n+}\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(not(stage0))]\n+impl<T: ?Sized + PartialOrd> PartialOrd for Rc<T> {\n     /// Partial comparison for two `Rc<T>`s.\n     ///\n     /// The two are compared by calling `partial_cmp()` on their inner values.\n@@ -757,7 +793,14 @@ impl<T: PartialOrd> PartialOrd for Rc<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(stage0)]\n impl<T: Ord> Ord for Rc<T> {\n+    #[inline]\n+    fn cmp(&self, other: &Rc<T>) -> Ordering { (**self).cmp(&**other) }\n+}\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(not(stage0))]\n+impl<T: ?Sized + Ord> Ord for Rc<T> {\n     /// Comparison for two `Rc<T>`s.\n     ///\n     /// The two are compared by calling `cmp()` on their inner values.\n@@ -1399,4 +1442,9 @@ mod tests {\n         assert_eq!(format!(\"{:?}\", foo), \"75\");\n     }\n \n+    #[test]\n+    fn test_unsized() {\n+        let foo: Rc<[i32]> = Rc::new([1, 2, 3]);\n+        assert_eq!(foo, foo.clone());\n+    }\n }"}, {"sha": "08bd88cd861b1d3854a7257fa5eba80e7e405314", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa28642de9fc158613f294896e62e12c3067714e/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa28642de9fc158613f294896e62e12c3067714e/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=fa28642de9fc158613f294896e62e12c3067714e", "patch": "@@ -116,10 +116,16 @@ impl<'a, T: ?Sized> BorrowMut<T> for &'a mut T {\n     fn borrow_mut(&mut self) -> &mut T { &mut **self }\n }\n \n+#[cfg(stage0)]\n impl<T> Borrow<T> for rc::Rc<T> {\n     fn borrow(&self) -> &T { &**self }\n }\n \n+#[cfg(not(stage0))]\n+impl<T: ?Sized> Borrow<T> for rc::Rc<T> {\n+    fn borrow(&self) -> &T { &**self }\n+}\n+\n impl<T> Borrow<T> for arc::Arc<T> {\n     fn borrow(&self) -> &T { &**self }\n }"}]}