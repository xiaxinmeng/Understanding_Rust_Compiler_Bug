{"sha": "da13935ecc5b07e3e6deebc68bde049440430461", "node_id": "C_kwDOAAsO6NoAKGRhMTM5MzVlY2M1YjA3ZTNlNmRlZWJjNjhiZGUwNDk0NDA0MzA0NjE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-27T01:45:47Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-26T17:20:56Z"}, "message": "remove enforce_number_init machine hook that Miri no longer needs", "tree": {"sha": "9d5eac95338a33dc17aaca14a811034061cc6549", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d5eac95338a33dc17aaca14a811034061cc6549"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da13935ecc5b07e3e6deebc68bde049440430461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da13935ecc5b07e3e6deebc68bde049440430461", "html_url": "https://github.com/rust-lang/rust/commit/da13935ecc5b07e3e6deebc68bde049440430461", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da13935ecc5b07e3e6deebc68bde049440430461/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d604f301b57f8ce33b0c0fe10818be937848a57", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d604f301b57f8ce33b0c0fe10818be937848a57", "html_url": "https://github.com/rust-lang/rust/commit/9d604f301b57f8ce33b0c0fe10818be937848a57"}], "stats": {"total": 32, "additions": 8, "deletions": 24}, "files": [{"sha": "6bed8a7a00773a2e35f2b6d2fef28c2834785f2b", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da13935ecc5b07e3e6deebc68bde049440430461/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da13935ecc5b07e3e6deebc68bde049440430461/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=da13935ecc5b07e3e6deebc68bde049440430461", "patch": "@@ -132,9 +132,6 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Whether to enforce the validity invariant\n     fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n \n-    /// Whether to enforce integers and floats being initialized.\n-    fn enforce_number_init(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n-\n     /// Whether function calls should be [ABI](CallAbi)-checked.\n     fn enforce_abi(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n         true\n@@ -442,11 +439,6 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n         false\n     }\n \n-    #[inline(always)]\n-    fn enforce_number_init(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n-        true\n-    }\n-\n     #[inline(always)]\n     fn checked_binop_checks_overflow(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n         true"}, {"sha": "f04a82a8a4cffc90d3a601e91b92e13fe4923458", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/da13935ecc5b07e3e6deebc68bde049440430461/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da13935ecc5b07e3e6deebc68bde049440430461/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=da13935ecc5b07e3e6deebc68bde049440430461", "patch": "@@ -509,14 +509,12 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 let value = self.read_scalar(value)?;\n                 // NOTE: Keep this in sync with the array optimization for int/float\n                 // types below!\n-                if M::enforce_number_init(self.ecx) {\n-                    try_validation!(\n-                        value.check_init(),\n-                        self.path,\n-                        err_ub!(InvalidUninitBytes(..)) =>\n-                            { \"{:x}\", value } expected { \"initialized bytes\" }\n-                    );\n-                }\n+                try_validation!(\n+                    value.check_init(),\n+                    self.path,\n+                    err_ub!(InvalidUninitBytes(..)) =>\n+                        { \"{:x}\", value } expected { \"initialized bytes\" }\n+                );\n                 // As a special exception we *do* match on a `Scalar` here, since we truly want\n                 // to know its underlying representation (and *not* cast it to an integer).\n                 let is_ptr = value.check_init().map_or(false, |v| matches!(v, Scalar::Ptr(..)));\n@@ -621,13 +619,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         // i.e. that we go over the `check_init` below.\n         let size = scalar_layout.size(self.ecx);\n         let is_full_range = match scalar_layout {\n-            ScalarAbi::Initialized { .. } => {\n-                if M::enforce_number_init(self.ecx) {\n-                    false // not \"full\" since uninit is not accepted\n-                } else {\n-                    scalar_layout.is_always_valid(self.ecx)\n-                }\n-            }\n+            ScalarAbi::Initialized { .. } => false, // not \"full\" since uninit is not valid\n             ScalarAbi::Union { .. } => true,\n         };\n         if is_full_range {\n@@ -903,7 +895,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n \n                 match alloc.check_bytes(\n                     alloc_range(Size::ZERO, size),\n-                    /*allow_uninit*/ !M::enforce_number_init(self.ecx),\n+                    /*allow_uninit*/ false,\n                     /*allow_ptr*/ false,\n                 ) {\n                     // In the happy case, we needn't check anything else."}]}