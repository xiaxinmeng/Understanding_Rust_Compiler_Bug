{"sha": "4725af38bc51760ad36180ebd7d128481b3d8ccc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MjVhZjM4YmM1MTc2MGFkMzYxODBlYmQ3ZDEyODQ4MWIzZDhjY2M=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-02T07:31:10Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-02T07:48:35Z"}, "message": "remove assert", "tree": {"sha": "580ae7e9a487e32b86ca94295ec76113359a685e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/580ae7e9a487e32b86ca94295ec76113359a685e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4725af38bc51760ad36180ebd7d128481b3d8ccc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4725af38bc51760ad36180ebd7d128481b3d8ccc", "html_url": "https://github.com/rust-lang/rust/commit/4725af38bc51760ad36180ebd7d128481b3d8ccc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4725af38bc51760ad36180ebd7d128481b3d8ccc/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29508ce3ad7cf5c886f475d00148b076857bf93c", "url": "https://api.github.com/repos/rust-lang/rust/commits/29508ce3ad7cf5c886f475d00148b076857bf93c", "html_url": "https://github.com/rust-lang/rust/commit/29508ce3ad7cf5c886f475d00148b076857bf93c"}], "stats": {"total": 3, "additions": 1, "deletions": 2}, "files": [{"sha": "87ff667b6a09a735e4cc7d3f10ed3f81660e2012", "filename": "src/librustc_trait_selection/traits/structural_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4725af38bc51760ad36180ebd7d128481b3d8ccc/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4725af38bc51760ad36180ebd7d128481b3d8ccc/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs?ref=4725af38bc51760ad36180ebd7d128481b3d8ccc", "patch": "@@ -251,8 +251,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n         // fields of ADT.\n         let tcx = self.tcx();\n         for field_ty in adt_def.all_fields().map(|field| field.ty(tcx, substs)) {\n-            assert!(!field_ty.needs_subst());\n-            let ty = self.tcx().normalize_erasing_regions(ty::ParamEnv::reveal_all(), field_ty);\n+            let ty = self.tcx().normalize_erasing_regions(ty::ParamEnv::empty(), field_ty);\n             debug!(\"structural-match ADT: field_ty={:?}, ty={:?}\", field_ty, ty);\n \n             if ty.visit_with(self) {"}]}