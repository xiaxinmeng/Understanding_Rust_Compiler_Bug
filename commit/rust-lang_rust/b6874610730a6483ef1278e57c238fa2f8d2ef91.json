{"sha": "b6874610730a6483ef1278e57c238fa2f8d2ef91", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ODc0NjEwNzMwYTY0ODNlZjEyNzhlNTdjMjM4ZmEyZjhkMmVmOTE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-08T15:29:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-08T15:29:18Z"}, "message": "Rollup merge of #67977 - Wind-River:master_2020, r=alexcrichton\n\nUpdates for VxWorks\n\nr? @alexcrichton", "tree": {"sha": "362914362cf84db96d2f23b49494bb19cb376438", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/362914362cf84db96d2f23b49494bb19cb376438"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6874610730a6483ef1278e57c238fa2f8d2ef91", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeFfVOCRBK7hj4Ov3rIwAAdHIIAJqHE5TPOrHVWRzVtni54GjS\naaX62Q7lTylLZT6kYVnfR/HHdf2+drnasyHSl4DOtDfu6TdpEa72Wo/YvpWtDYBZ\njRLzFx5oht2n33sCoQQCY4Bu/oj1jEeZo9oHY8J7PQjNmXFCHUTJ65LaqnEKI8Ei\n4MRI8CyBnd1jdlaJLnQ/bXpfKr9GyOj4eh/dQVT2t+PZvDRONolJL/sFuZOfGqEt\nRzz23/jFeDeH81YAHtSoBo0YVWK4YiAD8f4ty9hvOYYqU6J/fxXB99hp26s4QAdU\ngVH8cT7XCb0kyXEx+FfbIY/HeV3FxrhzmKiTSsClwjRV1GaL0L/hQ3rGgQ/IWqo=\n=Pxs0\n-----END PGP SIGNATURE-----\n", "payload": "tree 362914362cf84db96d2f23b49494bb19cb376438\nparent 1f94425864731772d131f102a9e97c7ffb1c5241\nparent cec957e1542c062e97f664aab5b23ebd532f5c85\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1578497358 +0900\ncommitter GitHub <noreply@github.com> 1578497358 +0900\n\nRollup merge of #67977 - Wind-River:master_2020, r=alexcrichton\n\nUpdates for VxWorks\n\nr? @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6874610730a6483ef1278e57c238fa2f8d2ef91", "html_url": "https://github.com/rust-lang/rust/commit/b6874610730a6483ef1278e57c238fa2f8d2ef91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6874610730a6483ef1278e57c238fa2f8d2ef91/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f94425864731772d131f102a9e97c7ffb1c5241", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f94425864731772d131f102a9e97c7ffb1c5241", "html_url": "https://github.com/rust-lang/rust/commit/1f94425864731772d131f102a9e97c7ffb1c5241"}, {"sha": "cec957e1542c062e97f664aab5b23ebd532f5c85", "url": "https://api.github.com/repos/rust-lang/rust/commits/cec957e1542c062e97f664aab5b23ebd532f5c85", "html_url": "https://github.com/rust-lang/rust/commit/cec957e1542c062e97f664aab5b23ebd532f5c85"}], "stats": {"total": 68, "additions": 2, "deletions": 66}, "files": [{"sha": "12bbfa1d4e1a6e8151f71dd4fe57e0cbe119a0bf", "filename": "src/libstd/sys/vxworks/mod.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b6874610730a6483ef1278e57c238fa2f8d2ef91/src%2Flibstd%2Fsys%2Fvxworks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6874610730a6483ef1278e57c238fa2f8d2ef91/src%2Flibstd%2Fsys%2Fvxworks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fmod.rs?ref=b6874610730a6483ef1278e57c238fa2f8d2ef91", "patch": "@@ -36,18 +36,10 @@ pub use crate::sys_common::os_str_bytes as os_str;\n \n #[cfg(not(test))]\n pub fn init() {\n-    // By default, some platforms will send a *signal* when an EPIPE error\n-    // would otherwise be delivered. This runtime doesn't install a SIGPIPE\n-    // handler, causing it to kill the program, which isn't exactly what we\n-    // want!\n-    //\n-    // Hence, we set SIGPIPE to ignore when the program starts up in order\n-    // to prevent this problem.\n+    // ignore SIGPIPE\n     unsafe {\n-        reset_sigpipe();\n+        assert!(signal(libc::SIGPIPE, libc::SIG_IGN) != libc::SIG_ERR);\n     }\n-\n-    unsafe fn reset_sigpipe() {}\n }\n \n pub use libc::signal;"}, {"sha": "4c6fddefd3f84c938e2a1ff2a6ffad202022e421", "filename": "src/libstd/sys/vxworks/weak.rs", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1f94425864731772d131f102a9e97c7ffb1c5241/src%2Flibstd%2Fsys%2Fvxworks%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f94425864731772d131f102a9e97c7ffb1c5241/src%2Flibstd%2Fsys%2Fvxworks%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fweak.rs?ref=1f94425864731772d131f102a9e97c7ffb1c5241", "patch": "@@ -1,56 +0,0 @@\n-//! Support for \"weak linkage\" to symbols on Unix\n-//!\n-//! Some I/O operations we do in libstd require newer versions of OSes but we\n-//! need to maintain binary compatibility with older releases for now. In order\n-//! to use the new functionality when available we use this module for\n-//! detection.\n-//!\n-//! One option to use here is weak linkage, but that is unfortunately only\n-//! really workable on Linux. Hence, use dlsym to get the symbol value at\n-//! runtime. This is also done for compatibility with older versions of glibc,\n-//! and to avoid creating dependencies on GLIBC_PRIVATE symbols. It assumes that\n-//! we've been dynamically linked to the library the symbol comes from, but that\n-//! is currently always the case for things like libpthread/libc.\n-//!\n-//! A long time ago this used weak linkage for the __pthread_get_minstack\n-//! symbol, but that caused Debian to detect an unnecessarily strict versioned\n-//! dependency on libc6 (#23628).\n-\n-use crate::ffi::CStr;\n-use crate::marker;\n-use crate::mem;\n-use crate::sync::atomic::{AtomicUsize, Ordering};\n-\n-pub struct Weak<F> {\n-    name: &'static str,\n-    addr: AtomicUsize,\n-    _marker: marker::PhantomData<F>,\n-}\n-\n-impl<F> Weak<F> {\n-    pub const fn new(name: &'static str) -> Weak<F> {\n-        Weak { name, addr: AtomicUsize::new(1), _marker: marker::PhantomData }\n-    }\n-\n-    pub fn get(&self) -> Option<F> {\n-        assert_eq!(mem::size_of::<F>(), mem::size_of::<usize>());\n-        unsafe {\n-            if self.addr.load(Ordering::SeqCst) == 1 {\n-                self.addr.store(fetch(self.name), Ordering::SeqCst);\n-            }\n-            match self.addr.load(Ordering::SeqCst) {\n-                0 => None,\n-                addr => Some(mem::transmute_copy::<usize, F>(&addr)),\n-            }\n-        }\n-    }\n-}\n-\n-unsafe fn fetch(name: &str) -> usize {\n-    let name = match CStr::from_bytes_with_nul(name.as_bytes()) {\n-        Ok(cstr) => cstr,\n-        Err(..) => return 0,\n-    };\n-    assert!(false, \"FIXME: fetch\");\n-    libc::dlsym(libc::RTLD_DEFAULT, name.as_ptr()) as usize\n-}"}]}