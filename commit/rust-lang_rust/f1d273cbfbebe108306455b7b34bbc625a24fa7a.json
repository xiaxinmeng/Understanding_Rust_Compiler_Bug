{"sha": "f1d273cbfbebe108306455b7b34bbc625a24fa7a", "node_id": "C_kwDOAAsO6NoAKGYxZDI3M2NiZmJlYmUxMDgzMDY0NTViN2IzNGJiYzYyNWEyNGZhN2E", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-30T12:01:09Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-30T12:26:26Z"}, "message": "Replace some `_ == _ || _ == _`s with `matches!(_, _ | _)`s", "tree": {"sha": "532b2f1e1b5c3a2a77432c2c7953ced13581ab37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/532b2f1e1b5c3a2a77432c2c7953ced13581ab37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1d273cbfbebe108306455b7b34bbc625a24fa7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1d273cbfbebe108306455b7b34bbc625a24fa7a", "html_url": "https://github.com/rust-lang/rust/commit/f1d273cbfbebe108306455b7b34bbc625a24fa7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1d273cbfbebe108306455b7b34bbc625a24fa7a/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d75f618323cb26a31396f20fe91c35efba9b823", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d75f618323cb26a31396f20fe91c35efba9b823", "html_url": "https://github.com/rust-lang/rust/commit/4d75f618323cb26a31396f20fe91c35efba9b823"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "72f456138ef56c63e38652be3bf18a4d105b53f5", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1d273cbfbebe108306455b7b34bbc625a24fa7a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d273cbfbebe108306455b7b34bbc625a24fa7a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=f1d273cbfbebe108306455b7b34bbc625a24fa7a", "patch": "@@ -754,7 +754,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                 // FIXME(JakobDegen) The validator should check that `self.mir_phase <\n                 // DropsLowered`. However, this causes ICEs with generation of drop shims, which\n                 // seem to fail to set their `MirPhase` correctly.\n-                if *kind == RetagKind::Raw || *kind == RetagKind::TwoPhase {\n+                if matches!(kind, RetagKind::Raw | RetagKind::TwoPhase) {\n                     self.fail(location, format!(\"explicit `{:?}` is forbidden\", kind));\n                 }\n             }"}, {"sha": "9aa14e1f214851668893591b480f058ec987153f", "filename": "compiler/rustc_errors/src/styled_buffer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1d273cbfbebe108306455b7b34bbc625a24fa7a/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d273cbfbebe108306455b7b34bbc625a24fa7a/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs?ref=f1d273cbfbebe108306455b7b34bbc625a24fa7a", "patch": "@@ -142,7 +142,7 @@ impl StyledBuffer {\n     pub fn set_style(&mut self, line: usize, col: usize, style: Style, overwrite: bool) {\n         if let Some(ref mut line) = self.lines.get_mut(line) {\n             if let Some(StyledChar { style: s, .. }) = line.get_mut(col) {\n-                if overwrite || *s == Style::NoStyle || *s == Style::Quotation {\n+                if overwrite || matches!(s, Style::NoStyle | Style::Quotation) {\n                     *s = style;\n                 }\n             }"}, {"sha": "283e68a68b5df5b135e303639cd598672dc29fe8", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1d273cbfbebe108306455b7b34bbc625a24fa7a/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d273cbfbebe108306455b7b34bbc625a24fa7a/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=f1d273cbfbebe108306455b7b34bbc625a24fa7a", "patch": "@@ -503,7 +503,7 @@ impl TtParser {\n                         mp.push_match(metavar_idx, seq_depth, MatchedSeq(vec![]));\n                     }\n \n-                    if op == KleeneOp::ZeroOrMore || op == KleeneOp::ZeroOrOne {\n+                    if matches!(op, KleeneOp::ZeroOrMore | KleeneOp::ZeroOrOne) {\n                         // Try zero matches of this sequence, by skipping over it.\n                         self.cur_mps.push(MatcherPos {\n                             idx: idx_first_after,"}, {"sha": "a5910100786ec71904c01b8348e026f7f556b8e9", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1d273cbfbebe108306455b7b34bbc625a24fa7a/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d273cbfbebe108306455b7b34bbc625a24fa7a/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=f1d273cbfbebe108306455b7b34bbc625a24fa7a", "patch": "@@ -107,7 +107,7 @@ impl<'tcx> Collector<'tcx> {\n             return;\n         };\n \n-        if abi == Abi::Rust || abi == Abi::RustIntrinsic || abi == Abi::PlatformIntrinsic {\n+        if matches!(abi, Abi::Rust | Abi::RustIntrinsic | Abi::PlatformIntrinsic) {\n             return;\n         }\n "}, {"sha": "feb054392bc2d4e8e044961ca30c0e7ea78b2657", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1d273cbfbebe108306455b7b34bbc625a24fa7a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d273cbfbebe108306455b7b34bbc625a24fa7a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=f1d273cbfbebe108306455b7b34bbc625a24fa7a", "patch": "@@ -527,7 +527,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         let r = self.use_ecx(|this| this.ecx.read_immediate(&this.ecx.eval_operand(right, None)?));\n         let l = self.use_ecx(|this| this.ecx.read_immediate(&this.ecx.eval_operand(left, None)?));\n         // Check for exceeding shifts *even if* we cannot evaluate the LHS.\n-        if op == BinOp::Shr || op == BinOp::Shl {\n+        if matches!(op, BinOp::Shr | BinOp::Shl) {\n             let r = r.clone()?;\n             // We need the type of the LHS. We cannot use `place_layout` as that is the type\n             // of the result, which for checked binops is not the same!"}, {"sha": "c4b10218c237b2fa0cd19df96a75b3bbbb8f4b50", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1d273cbfbebe108306455b7b34bbc625a24fa7a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d273cbfbebe108306455b7b34bbc625a24fa7a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=f1d273cbfbebe108306455b7b34bbc625a24fa7a", "patch": "@@ -368,7 +368,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             this.ecx.read_immediate(&this.ecx.eval_operand(left, None)?)\n         });\n         // Check for exceeding shifts *even if* we cannot evaluate the LHS.\n-        if op == BinOp::Shr || op == BinOp::Shl {\n+        if matches!(op, BinOp::Shr | BinOp::Shl) {\n             let r = r.clone()?;\n             // We need the type of the LHS. We cannot use `place_layout` as that is the type\n             // of the result, which for checked binops is not the same!"}, {"sha": "47911aef25d4fe1f240e1dc432d688e96338490e", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1d273cbfbebe108306455b7b34bbc625a24fa7a/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d273cbfbebe108306455b7b34bbc625a24fa7a/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=f1d273cbfbebe108306455b7b34bbc625a24fa7a", "patch": "@@ -125,7 +125,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         if let Some((depr, span)) = &depr {\n             is_deprecated = true;\n \n-            if kind == AnnotationKind::Prohibited || kind == AnnotationKind::DeprecationProhibited {\n+            if matches!(kind, AnnotationKind::Prohibited | AnnotationKind::DeprecationProhibited) {\n                 let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n                 self.tcx.emit_spanned_lint(\n                     USELESS_DEPRECATED,"}]}