{"sha": "3d6f5100aff24aa97275dc92ade728caac605560", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNmY1MTAwYWZmMjRhYTk3Mjc1ZGM5MmFkZTcyOGNhYWM2MDU1NjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-29T11:28:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-29T11:28:30Z"}, "message": "Auto merge of #21730 - Manishearth:rollup, r=alexcrichton\n\nShould clear our backlog of rollups from the queue", "tree": {"sha": "46d24003505b7ac308de9b4d4130b73825379b64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46d24003505b7ac308de9b4d4130b73825379b64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d6f5100aff24aa97275dc92ade728caac605560", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d6f5100aff24aa97275dc92ade728caac605560", "html_url": "https://github.com/rust-lang/rust/commit/3d6f5100aff24aa97275dc92ade728caac605560", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d6f5100aff24aa97275dc92ade728caac605560/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bedd8108dc9b79402d1ea5349d766275f73398ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/bedd8108dc9b79402d1ea5349d766275f73398ff", "html_url": "https://github.com/rust-lang/rust/commit/bedd8108dc9b79402d1ea5349d766275f73398ff"}, {"sha": "092330c6405c275f89fbbbb412e932dd7ed8513d", "url": "https://api.github.com/repos/rust-lang/rust/commits/092330c6405c275f89fbbbb412e932dd7ed8513d", "html_url": "https://github.com/rust-lang/rust/commit/092330c6405c275f89fbbbb412e932dd7ed8513d"}], "stats": {"total": 211, "additions": 93, "deletions": 118}, "files": [{"sha": "0eafe9eac32370cd1f845bc226507eee2ebf4701", "filename": "AUTHORS.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/AUTHORS.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/AUTHORS.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/AUTHORS.txt?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -516,7 +516,7 @@ Olivier Saut <osaut@airpost.net>\n Olle Jonsson <olle.jonsson@gmail.com>\n Or Brostovski <tohava@gmail.com>\n Oren Hazi <oren.hazi@gmail.com>\n-Orph\u00e9e Lafond-Lummis <o@orftz.com>\n+Orpheus Lummis <o@orpheuslummis.com>\n P1start <rewi-github@whanau.org>\n Pablo Brasero <pablo@pablobm.com>\n Palmer Cox <p@lmercox.com>"}, {"sha": "2724e479384394d6c35c02e7c197134ffc778064", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -50,11 +50,11 @@ example, if it's 2014, and you change a Rust file that was created in\n # Coordination and communication\n \n Get feedback from other developers on\n-[discuss.rust-lang.org][discuss], and\n+[internals.rust-lang.org][internals], and\n [#rust-internals][pound-rust-internals].\n \n [pound-rust-internals]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust-internals\n-[discuss]: http://discuss.rust-lang.org\n+[internals]: http://internals.rust-lang.org\n \n For more details, please refer to\n [Note-development-policy](https://github.com/rust-lang/rust/wiki/Note-development-policy)."}, {"sha": "6ffffd523c91641f2ed80aa5694de7aed51adecf", "filename": "README.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -30,9 +30,9 @@ documentation.\n \n     To build from the [tarball] do:\n \n-        $ curl -O https://static.rust-lang.org/dist/rust-nightly.tar.gz\n-        $ tar -xzf rust-nightly.tar.gz\n-        $ cd rust-nightly\n+        $ curl -O https://static.rust-lang.org/dist/rustc-nightly-src.tar.gz\n+        $ tar -xzf rustc-nightly-src.tar.gz\n+        $ cd rustc-nightly\n \n     Or to build from the [repo] do:\n \n@@ -80,7 +80,7 @@ $ pacman -S base-devel\n         $ make && make install\n \n [repo]: https://github.com/rust-lang/rust\n-[tarball]: https://static.rust-lang.org/dist/rust-nightly.tar.gz\n+[tarball]: https://static.rust-lang.org/dist/rustc-nightly-src.tar.gz\n [trpl]: http://doc.rust-lang.org/book/index.html\n \n ## Notes\n@@ -112,11 +112,11 @@ The Rust community congregates in a few places:\n \n * [StackOverflow] - Get help here.\n * [/r/rust] - General discussion.\n-* [discuss.rust-lang.org] - For development of the Rust language itself.\n+* [internals.rust-lang.org] - For development of the Rust language itself.\n \n [StackOverflow]: http://stackoverflow.com/questions/tagged/rust\n [/r/rust]: http://reddit.com/r/rust\n-[discuss.rust-lang.org]: http://discuss.rust-lang.org/\n+[internals.rust-lang.org]: http://internals.rust-lang.org/\n \n ## License\n "}, {"sha": "f385a9798ea3c181d9866adf585abbacfd380234", "filename": "src/doc/index.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -41,7 +41,7 @@ problem might reveal someone who has asked it before!\n There is an active [subreddit](http://reddit.com/r/rust) with lots of\n discussion about Rust.\n \n-There is also a [developer forum](http://discuss.rust-lang.org/), where the\n+There is also a [developer forum](http://internals.rust-lang.org/), where the\n development of Rust itself is discussed.\n \n # Specification"}, {"sha": "41dea2eeff4a1f4f0150f1d75b3a4628d4bebb4c", "filename": "src/etc/local_stage0.sh", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Fetc%2Flocal_stage0.sh", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Fetc%2Flocal_stage0.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flocal_stage0.sh?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -21,19 +21,16 @@ case $OS in\n     (\"Linux\"|\"FreeBSD\"|\"DragonFly\")\n     BIN_SUF=\n     LIB_SUF=.so\n-    break\n     ;;\n     (\"Darwin\")\n     BIN_SUF=\n     LIB_SUF=.dylib\n-    break\n     ;;\n     (*)\n     BIN_SUF=.exe\n     LIB_SUF=.dll\n     LIB_DIR=bin\n     LIB_PREFIX=\n-    break\n     ;;\n esac\n "}, {"sha": "1fb6290c7a3dfca9ca714e71eb2212ae0614e401", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[cfg(not(test))]\n use core::ptr::PtrExt;\n \n // FIXME: #13996: mark the `allocate` and `reallocate` return value as `noalias`"}, {"sha": "65dccc8c2444c5144d5ab3175a5cb12c240eb90d", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -594,12 +594,6 @@ impl<'b, T> DerefMut for RefMut<'b, T> {\n /// The `UnsafeCell<T>` type is the only legal way to obtain aliasable data that is considered\n /// mutable. In general, transmuting an `&T` type into an `&mut T` is considered undefined behavior.\n ///\n-/// Although it is possible to put an `UnsafeCell<T>` into static item, it is not permitted to take\n-/// the address of the static item if the item is not declared as mutable. This rule exists because\n-/// immutable static items are stored in read-only memory, and thus any attempt to mutate their\n-/// interior can cause segfaults. Immutable static items containing `UnsafeCell<T>` instances are\n-/// still useful as read-only initializers, however, so we do not forbid them altogether.\n-///\n /// Types like `Cell<T>` and `RefCell<T>` use this type to wrap their internal data.\n ///\n /// `UnsafeCell<T>` doesn't opt-out from any marker traits, instead, types with an `UnsafeCell<T>`"}, {"sha": "9bc7acb67ad45497d79e6df0930cc35baf1a0881", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -447,7 +447,7 @@ mod tests {\n     use super::*;\n \n     fn same(fmt: &'static str, p: &[Piece<'static>]) {\n-        let mut parser = Parser::new(fmt);\n+        let parser = Parser::new(fmt);\n         assert!(p == parser.collect::<Vec<Piece<'static>>>());\n     }\n "}, {"sha": "96717a38cba93d93058c98ba3c9be4ae5f4b9d7e", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -273,6 +273,7 @@ pub use funcs::bsd43::{shutdown};\n #[cfg(windows)] pub use funcs::extra::kernel32::{GetOverlappedResult, ConnectNamedPipe};\n #[cfg(windows)] pub use funcs::extra::kernel32::{DisconnectNamedPipe, OpenProcess};\n #[cfg(windows)] pub use funcs::extra::kernel32::{MoveFileExW, VirtualProtect};\n+#[cfg(windows)] pub use funcs::extra::kernel32::{RemoveDirectoryW};\n #[cfg(windows)] pub use funcs::extra::msvcrt::{get_osfhandle, open_osfhandle};\n #[cfg(windows)] pub use funcs::extra::winsock::{ioctlsocket};\n "}, {"sha": "1295970d667b06b57f8e503e2b6c0b3b467da5b5", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -10,10 +10,6 @@\n \n // Searching for information from the cstore\n \n-#![allow(non_camel_case_types)]\n-\n-pub use self::found_ast::*;\n-\n use metadata::common::*;\n use metadata::cstore;\n use metadata::decoder;\n@@ -101,18 +97,18 @@ pub fn get_item_path(tcx: &ty::ctxt, def: ast::DefId) -> Vec<ast_map::PathElem>\n     r\n }\n \n-pub enum found_ast<'ast> {\n-    found(&'ast ast::InlinedItem),\n-    found_parent(ast::DefId, &'ast ast::InlinedItem),\n-    not_found,\n+pub enum FoundAst<'ast> {\n+    Found(&'ast ast::InlinedItem),\n+    FoundParent(ast::DefId, &'ast ast::InlinedItem),\n+    NotFound,\n }\n \n // Finds the AST for this item in the crate metadata, if any.  If the item was\n // not marked for inlining, then the AST will not be present and hence none\n // will be returned.\n pub fn maybe_get_item_ast<'tcx>(tcx: &ty::ctxt<'tcx>, def: ast::DefId,\n                                 decode_inlined_item: decoder::DecodeInlinedItem)\n-                                -> found_ast<'tcx> {\n+                                -> FoundAst<'tcx> {\n     let cstore = &tcx.sess.cstore;\n     let cdata = cstore.get_crate_data(def.krate);\n     decoder::maybe_get_item_ast(&*cdata, tcx, def.node, decode_inlined_item)"}, {"sha": "b573c54ef855bcb363fa79798a4aee7eb7264571", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -693,23 +693,23 @@ pub type DecodeInlinedItem<'a> =\n \n pub fn maybe_get_item_ast<'tcx>(cdata: Cmd, tcx: &ty::ctxt<'tcx>, id: ast::NodeId,\n                                 mut decode_inlined_item: DecodeInlinedItem)\n-                                -> csearch::found_ast<'tcx> {\n+                                -> csearch::FoundAst<'tcx> {\n     debug!(\"Looking up item: {}\", id);\n     let item_doc = lookup_item(id, cdata.data());\n     let path = item_path(item_doc).init().to_vec();\n     match decode_inlined_item(cdata, tcx, path, item_doc) {\n-        Ok(ii) => csearch::found(ii),\n+        Ok(ii) => csearch::FoundAst::Found(ii),\n         Err(path) => {\n             match item_parent_item(item_doc) {\n                 Some(did) => {\n                     let did = translate_def_id(cdata, did);\n                     let parent_item = lookup_item(did.node, cdata.data());\n                     match decode_inlined_item(cdata, tcx, path, parent_item) {\n-                        Ok(ii) => csearch::found_parent(did, ii),\n-                        Err(_) => csearch::not_found\n+                        Ok(ii) => csearch::FoundAst::FoundParent(did, ii),\n+                        Err(_) => csearch::FoundAst::NotFound\n                     }\n                 }\n-                None => csearch::not_found\n+                None => csearch::FoundAst::NotFound\n             }\n         }\n     }"}, {"sha": "783bc8810572f3492b710e9d0bd7a9b93048aaee", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -1577,7 +1577,7 @@ fn encode_info_for_items(ecx: &EncodeContext,\n                         &krate.module,\n                         &[],\n                         ast::CRATE_NODE_ID,\n-                        ast_map::Values([].iter()).chain(None),\n+                        [].iter().cloned().chain(None),\n                         syntax::parse::token::special_idents::invalid,\n                         ast::Public);\n \n@@ -1949,7 +1949,7 @@ fn encode_misc_info(ecx: &EncodeContext,\n     }\n \n     // Encode reexports for the root module.\n-    encode_reexports(ecx, rbml_w, 0, ast_map::Values([].iter()).chain(None));\n+    encode_reexports(ecx, rbml_w, 0, [].iter().cloned().chain(None));\n \n     rbml_w.end_tag();\n     rbml_w.end_tag();"}, {"sha": "66f8331dd6cb3127d9a38882cfbfdfd2a6126d0f", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -130,7 +130,7 @@ pub fn decode_inlined_item<'tcx>(cdata: &cstore::crate_metadata,\n         debug!(\"> Decoding inlined fn: {:?}::?\",\n         {\n             // Do an Option dance to use the path after it is moved below.\n-            let s = ast_map::path_to_string(ast_map::Values(path.iter()));\n+            let s = ast_map::path_to_string(path.iter().cloned());\n             path_as_str = Some(s);\n             path_as_str.as_ref().map(|x| &x[])\n         });"}, {"sha": "00141903c7c3be894b337740e6c6a5a6dcdbfa71", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -133,7 +133,7 @@ fn lookup_variant_by_id<'a>(tcx: &'a ty::ctxt,\n         }\n         let expr_id = match csearch::maybe_get_item_ast(tcx, enum_def,\n             box |a, b, c, d| astencode::decode_inlined_item(a, b, c, d)) {\n-            csearch::found(&ast::IIItem(ref item)) => match item.node {\n+            csearch::FoundAst::Found(&ast::IIItem(ref item)) => match item.node {\n                 ast::ItemEnum(ast::EnumDef { ref variants }, _) => {\n                     // NOTE this doesn't do the right thing, it compares inlined\n                     // NodeId's to the original variant_def's NodeId, but they\n@@ -173,7 +173,7 @@ pub fn lookup_const_by_id<'a>(tcx: &'a ty::ctxt, def_id: ast::DefId)\n         }\n         let expr_id = match csearch::maybe_get_item_ast(tcx, def_id,\n             box |a, b, c, d| astencode::decode_inlined_item(a, b, c, d)) {\n-            csearch::found(&ast::IIItem(ref item)) => match item.node {\n+            csearch::FoundAst::Found(&ast::IIItem(ref item)) => match item.node {\n                 ast::ItemConst(_, ref const_expr) => Some(const_expr.id),\n                 _ => None\n             },"}, {"sha": "88e2f8965c0ad8755493ce438a2fe75d0e7edffe", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -5264,7 +5264,7 @@ pub fn with_path<T, F>(cx: &ctxt, id: ast::DefId, f: F) -> T where\n     if id.krate == ast::LOCAL_CRATE {\n         cx.map.with_path(id.node, f)\n     } else {\n-        f(ast_map::Values(csearch::get_item_path(cx, id).iter()).chain(None))\n+        f(csearch::get_item_path(cx, id).iter().cloned().chain(None))\n     }\n }\n "}, {"sha": "47b909df5e8da77a402c765d288ac83deb15992b", "filename": "src/librustc_back/rpath.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibrustc_back%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibrustc_back%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Frpath.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -151,7 +151,6 @@ fn minimize_rpaths(rpaths: &[String]) -> Vec<String> {\n mod test {\n     use super::{RPathConfig};\n     use super::{minimize_rpaths, rpaths_to_flags, get_rpath_relative_to_output};\n-    use syntax::abi;\n \n     #[test]\n     fn test_rpaths_to_flags() {"}, {"sha": "f6d061ea722add971cb1cec902bca611b77372c9", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -37,7 +37,6 @@ use flate;\n use serialize::hex::ToHex;\n use syntax::ast;\n use syntax::ast_map::{PathElem, PathElems, PathName};\n-use syntax::ast_map;\n use syntax::attr::AttrMetaMethods;\n use syntax::codemap::Span;\n use syntax::parse::token;\n@@ -339,7 +338,7 @@ pub fn mangle_internal_name_by_type_and_seq<'a, 'tcx>(ccx: &CrateContext<'a, 'tc\n     let path = [PathName(token::intern(&s[])),\n                 gensym_name(name)];\n     let hash = get_symbol_hash(ccx, t);\n-    mangle(ast_map::Values(path.iter()), Some(&hash[]))\n+    mangle(path.iter().cloned(), Some(&hash[]))\n }\n \n pub fn mangle_internal_name_by_path_and_seq(path: PathElems, flav: &str) -> String {"}, {"sha": "97ac8f3ca61952aad0ccad374a4a1cd2b80ed1a4", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -1012,6 +1012,9 @@ unsafe fn configure_llvm(sess: &Session) {\n         if sess.time_llvm_passes() { add(\"-time-passes\"); }\n         if sess.print_llvm_passes() { add(\"-debug-pass=Structure\"); }\n \n+        // FIXME #21627 disable faulty FastISel on AArch64 (even for -O0)\n+        if sess.target.target.arch.as_slice() == \"aarch64\" { add(\"-fast-isel=0\"); }\n+\n         for arg in sess.opts.cg.llvm_args.iter() {\n             add(&(*arg)[]);\n         }"}, {"sha": "ea6d9b88e117e2981db9c5d5a08d3f0e6dab8a57", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -43,11 +43,11 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n             box |a,b,c,d| astencode::decode_inlined_item(a, b, c, d));\n \n     let inline_def = match csearch_result {\n-        csearch::not_found => {\n+        csearch::FoundAst::NotFound => {\n             ccx.external().borrow_mut().insert(fn_id, None);\n             return None;\n         }\n-        csearch::found(&ast::IIItem(ref item)) => {\n+        csearch::FoundAst::Found(&ast::IIItem(ref item)) => {\n             ccx.external().borrow_mut().insert(fn_id, Some(item.id));\n             ccx.external_srcs().borrow_mut().insert(item.id, fn_id);\n \n@@ -90,12 +90,12 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n \n             local_def(item.id)\n         }\n-        csearch::found(&ast::IIForeign(ref item)) => {\n+        csearch::FoundAst::Found(&ast::IIForeign(ref item)) => {\n             ccx.external().borrow_mut().insert(fn_id, Some(item.id));\n             ccx.external_srcs().borrow_mut().insert(item.id, fn_id);\n             local_def(item.id)\n         }\n-        csearch::found_parent(parent_id, &ast::IIItem(ref item)) => {\n+        csearch::FoundAst::FoundParent(parent_id, &ast::IIItem(ref item)) => {\n             ccx.external().borrow_mut().insert(parent_id, Some(item.id));\n             ccx.external_srcs().borrow_mut().insert(item.id, parent_id);\n \n@@ -124,11 +124,11 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n           trans_item(ccx, &**item);\n           local_def(my_id)\n         }\n-        csearch::found_parent(_, _) => {\n-            ccx.sess().bug(\"maybe_get_item_ast returned a found_parent \\\n+        csearch::FoundAst::FoundParent(_, _) => {\n+            ccx.sess().bug(\"maybe_get_item_ast returned a FoundParent \\\n              with a non-item parent\");\n         }\n-        csearch::found(&ast::IITraitItem(_, ref trait_item)) => {\n+        csearch::FoundAst::Found(&ast::IITraitItem(_, ref trait_item)) => {\n             match *trait_item {\n                 ast::RequiredMethod(_) => ccx.sess().bug(\"found RequiredMethod IITraitItem\"),\n                 ast::ProvidedMethod(ref mth) => {\n@@ -147,7 +147,7 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n                 }\n             }\n         }\n-        csearch::found(&ast::IIImplItem(impl_did, ref impl_item)) => {\n+        csearch::FoundAst::Found(&ast::IIImplItem(impl_did, ref impl_item)) => {\n             match *impl_item {\n                 ast::MethodImplItem(ref mth) => {\n                     ccx.external().borrow_mut().insert(fn_id, Some(mth.id));"}, {"sha": "9a14e738801b5a2fa1c571447868b40ead861a08", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -97,7 +97,7 @@\n //!     };\n //!\n //!     // Serialize using `json::encode`\n-//!     let encoded = json::encode(&object);\n+//!     let encoded = json::encode(&object).unwrap();\n //!\n //!     // Deserialize using `json::decode`\n //!     let decoded: TestStruct = json::decode(encoded.as_slice()).unwrap();\n@@ -143,7 +143,7 @@\n //!         uid: 1,\n //!         dsc: \"test\".to_string(),\n //!         val: num.to_json(),\n-//!     });\n+//!     }).unwrap();\n //!     println!(\"data: {}\", data);\n //!     // data: {\"uid\":1,\"dsc\":\"test\",\"val\":\"0.0001+12.539j\"};\n //! }\n@@ -316,13 +316,13 @@ pub fn decode<T: ::Decodable>(s: &str) -> DecodeResult<T> {\n }\n \n /// Shortcut function to encode a `T` into a JSON `String`\n-pub fn encode<T: ::Encodable>(object: &T) -> string::String {\n+pub fn encode<T: ::Encodable>(object: &T) -> Result<string::String, EncoderError> {\n     let mut s = String::new();\n     {\n         let mut encoder = Encoder::new(&mut s);\n-        let _ = object.encode(&mut encoder);\n+        try!(object.encode(&mut encoder));\n     }\n-    s\n+    Ok(s)\n }\n \n impl fmt::Display for ErrorCode {\n@@ -536,7 +536,6 @@ impl<'a> ::Encoder for Encoder<'a> {\n     fn emit_enum<F>(&mut self, _name: &str, f: F) -> EncodeResult where\n         F: FnOnce(&mut Encoder<'a>) -> EncodeResult,\n     {\n-        if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }\n         f(self)\n     }\n \n@@ -550,10 +549,10 @@ impl<'a> ::Encoder for Encoder<'a> {\n         // enums are encoded as strings or objects\n         // Bunny => \"Bunny\"\n         // Kangaroo(34,\"William\") => {\"variant\": \"Kangaroo\", \"fields\": [34,\"William\"]}\n-        if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }\n         if cnt == 0 {\n             escape_str(self.writer, name)\n         } else {\n+            if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }\n             try!(write!(self.writer, \"{{\\\"variant\\\":\"));\n             try!(escape_str(self.writer, name));\n             try!(write!(self.writer, \",\\\"fields\\\":[\"));\n@@ -785,7 +784,6 @@ impl<'a> ::Encoder for PrettyEncoder<'a> {\n     fn emit_enum<F>(&mut self, _name: &str, f: F) -> EncodeResult where\n         F: FnOnce(&mut PrettyEncoder<'a>) -> EncodeResult,\n     {\n-        if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }\n         f(self)\n     }\n \n@@ -797,10 +795,10 @@ impl<'a> ::Encoder for PrettyEncoder<'a> {\n                             -> EncodeResult where\n         F: FnOnce(&mut PrettyEncoder<'a>) -> EncodeResult,\n     {\n-        if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }\n         if cnt == 0 {\n             escape_str(self.writer, name)\n         } else {\n+            if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }\n             try!(write!(self.writer, \"{{\\n\"));\n             self.curr_indent += self.indent;\n             try!(spaces(self.writer, self.curr_indent));\n@@ -2618,7 +2616,7 @@ mod tests {\n     use super::JsonEvent::*;\n     use super::{Json, from_str, DecodeResult, DecoderError, JsonEvent, Parser,\n                 StackElement, Stack, Decoder, Encoder, EncoderError};\n-    use std::{i64, u64, f32, f64, old_io};\n+    use std::{i64, u64, f32, f64};\n     use std::collections::BTreeMap;\n     use std::num::Float;\n     use std::string;\n@@ -3537,6 +3535,24 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn test_hashmap_with_enum_key() {\n+        use std::collections::HashMap;\n+        use json;\n+        #[derive(RustcEncodable, Eq, Hash, PartialEq, RustcDecodable, Show)]\n+        enum Enum {\n+            Foo,\n+            #[allow(dead_code)]\n+            Bar,\n+        }\n+        let mut map = HashMap::new();\n+        map.insert(Enum::Foo, 0);\n+        let result = json::encode(&map).unwrap();\n+        assert_eq!(&result[], r#\"{\"Foo\":0}\"#);\n+        let decoded: HashMap<Enum, _> = json::decode(result.as_slice()).unwrap();\n+        assert_eq!(map, decoded);\n+    }\n+\n     #[test]\n     fn test_hashmap_with_numeric_key_can_handle_double_quote_delimited_key() {\n         use std::collections::HashMap;\n@@ -3928,7 +3944,6 @@ mod tests {\n \n     #[test]\n     fn test_encode_hashmap_with_arbitrary_key() {\n-        use std::str::from_utf8;\n         use std::old_io::Writer;\n         use std::collections::HashMap;\n         use std::fmt;"}, {"sha": "80cdf9782f20f7c0d2c2a5b9c5a0dd0c7dfcaff8", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -342,7 +342,7 @@ pub fn chmod(p: &Path, mode: uint) -> IoResult<()> {\n \n pub fn rmdir(p: &Path) -> IoResult<()> {\n     let p = try!(to_utf16(p));\n-    mkerr_libc(unsafe { libc::wrmdir(p.as_ptr()) })\n+    super::mkerr_winbool(unsafe { libc::RemoveDirectoryW(p.as_ptr()) })\n }\n \n pub fn chown(_p: &Path, _uid: int, _gid: int) -> IoResult<()> {"}, {"sha": "0bc2a827272e607dede9d063ed9389a13698f316", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -129,6 +129,9 @@ impl Drop for Event {\n     }\n }\n \n+unsafe impl Send for Event {}\n+unsafe impl Sync for Event {}\n+\n struct Inner {\n     handle: libc::HANDLE,\n     lock: Mutex<()>,\n@@ -156,6 +159,9 @@ impl Drop for Inner {\n     }\n }\n \n+unsafe impl Send for Inner {}\n+unsafe impl Sync for Inner {}\n+\n unsafe fn pipe(name: *const u16, init: bool) -> libc::HANDLE {\n     libc::CreateNamedPipeW(\n         name,\n@@ -220,9 +226,6 @@ pub struct UnixStream {\n     write_deadline: u64,\n }\n \n-unsafe impl Send for UnixStream {}\n-unsafe impl Sync for UnixStream {}\n-\n impl UnixStream {\n     fn try_connect(p: *const u16) -> Option<libc::HANDLE> {\n         // Note that most of this is lifted from the libuv implementation.\n@@ -615,17 +618,11 @@ pub struct UnixAcceptor {\n     deadline: u64,\n }\n \n-unsafe impl Send for UnixAcceptor {}\n-unsafe impl Sync for UnixAcceptor {}\n-\n struct AcceptorState {\n     abort: Event,\n     closed: AtomicBool,\n }\n \n-unsafe impl Send for AcceptorState {}\n-unsafe impl Sync for AcceptorState {}\n-\n impl UnixAcceptor {\n     pub fn accept(&mut self) -> IoResult<UnixStream> {\n         // This function has some funky implementation details when working with"}, {"sha": "64e440331c127e72c4b078ec098a33bbf794cba7", "filename": "src/libstd/sys/windows/tcp.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -116,17 +116,13 @@ pub struct TcpAcceptor {\n     deadline: u64,\n }\n \n-unsafe impl Send for TcpAcceptor {}\n-unsafe impl Sync for TcpAcceptor {}\n-\n struct AcceptorInner {\n     listener: TcpListener,\n     abort: Event,\n     accept: Event,\n     closed: AtomicBool,\n }\n \n-unsafe impl Send for AcceptorInner {}\n unsafe impl Sync for AcceptorInner {}\n \n impl TcpAcceptor {"}, {"sha": "002e003afcb88cf8051464ff454be9a34deec768", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -75,21 +75,8 @@ impl<'a> Iterator for LinkedPath<'a> {\n     }\n }\n \n-// HACK(eddyb) move this into libstd (value wrapper for slice::Iter).\n-#[derive(Clone)]\n-pub struct Values<'a, T:'a>(pub slice::Iter<'a, T>);\n-\n-impl<'a, T: Copy> Iterator for Values<'a, T> {\n-    type Item = T;\n-\n-    fn next(&mut self) -> Option<T> {\n-        let &mut Values(ref mut items) = self;\n-        items.next().map(|&x| x)\n-    }\n-}\n-\n /// The type of the iterator used by with_path.\n-pub type PathElems<'a, 'b> = iter::Chain<Values<'a, PathElem>, LinkedPath<'b>>;\n+pub type PathElems<'a, 'b> = iter::Chain<iter::Cloned<slice::Iter<'a, PathElem>>, LinkedPath<'b>>;\n \n pub fn path_to_string<PI: Iterator<Item=PathElem>>(path: PI) -> String {\n     let itr = token::get_ident_interner();\n@@ -101,7 +88,7 @@ pub fn path_to_string<PI: Iterator<Item=PathElem>>(path: PI) -> String {\n         }\n         s.push_str(&e[]);\n         s\n-    }).to_string()\n+    })\n }\n \n #[derive(Copy, Show)]\n@@ -458,9 +445,9 @@ impl<'ast> Map<'ast> {\n         if parent == id {\n             match self.find_entry(id) {\n                 Some(RootInlinedParent(data)) => {\n-                    f(Values(data.path.iter()).chain(next))\n+                    f(data.path.iter().cloned().chain(next))\n                 }\n-                _ => f(Values([].iter()).chain(next))\n+                _ => f([].iter().cloned().chain(next))\n             }\n         } else {\n             self.with_path_next(parent, Some(&LinkedPathNode {"}, {"sha": "07d3290d410f707451ed98ad7d4ab56cf2fdaa3c", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -670,20 +670,13 @@ pub fn path_name_eq(a : &ast::Path, b : &ast::Path) -> bool {\n \n // are two arrays of segments equal when compared unhygienically?\n pub fn segments_name_eq(a : &[ast::PathSegment], b : &[ast::PathSegment]) -> bool {\n-    if a.len() != b.len() {\n-        false\n-    } else {\n-        for (idx,seg) in a.iter().enumerate() {\n-            if seg.identifier.name != b[idx].identifier.name\n-                // FIXME #7743: ident -> name problems in lifetime comparison?\n-                // can types contain idents?\n-                || seg.parameters != b[idx].parameters\n-            {\n-                return false;\n-            }\n-        }\n-        true\n-    }\n+    a.len() == b.len() &&\n+    a.iter().zip(b.iter()).all(|(s, t)| {\n+        s.identifier.name == t.identifier.name &&\n+        // FIXME #7743: ident -> name problems in lifetime comparison?\n+        // can types contain idents?\n+        s.parameters == t.parameters\n+    })\n }\n \n /// Returns true if this literal is a string and false otherwise."}, {"sha": "acf0fe7f6cde36a470e7131ad20d6a35df8f7084", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -1433,15 +1433,12 @@ mod test {\n     use super::{pattern_bindings, expand_crate};\n     use super::{PatIdentFinder, IdentRenamer, PatIdentRenamer, ExpansionConfig};\n     use ast;\n-    use ast::{Attribute_, AttrOuter, MetaWord, Name};\n-    use attr;\n+    use ast::Name;\n     use codemap;\n-    use codemap::Spanned;\n     use ext::mtwt;\n     use fold::Folder;\n     use parse;\n     use parse::token;\n-    use ptr::P;\n     use util::parser_testing::{string_to_parser};\n     use util::parser_testing::{string_to_pat, string_to_crate, strs_to_idents};\n     use visit;"}, {"sha": "0be7b605e5769cf758d87b14eebf6816a8841739", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -854,7 +854,7 @@ mod test {\n     #[test]\n     fn string_to_tts_1 () {\n         let tts = string_to_tts(\"fn a (b : i32) { b; }\".to_string());\n-        assert_eq!(json::encode(&tts),\n+        assert_eq!(json::encode(&tts).unwrap(),\n         \"[\\\n     {\\\n         \\\"variant\\\":\\\"TtToken\\\",\\"}, {"sha": "f9a202523b56222e1b7c38bb602b6aecc2e4542d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -2975,7 +2975,6 @@ mod test {\n     use ast_util;\n     use codemap;\n     use parse::token;\n-    use ptr::P;\n \n     #[test]\n     fn test_fun_to_string() {"}, {"sha": "6a773125763a48f09b54a076d10e665cfa4ded0f", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -1126,9 +1126,8 @@ pub mod bench {\n mod tests {\n     use test::{TrFailed, TrIgnored, TrOk, filter_tests, parse_opts,\n                TestDesc, TestDescAndFn, TestOpts, run_test,\n-               Metric, MetricMap,\n+               MetricMap,\n                StaticTestName, DynTestName, DynTestFn, ShouldFail};\n-    use std::old_io::TempDir;\n     use std::thunk::Thunk;\n     use std::sync::mpsc::channel;\n "}, {"sha": "7af95350c95e422039c7a58b53a2fa925b8499a4", "filename": "src/rustbook/css.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Frustbook%2Fcss.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Frustbook%2Fcss.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fcss.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -29,6 +29,7 @@ body {\n     font-size: 16px;\n     background: none repeat scroll 0% 0% #FFF;\n     box-sizing: border-box;\n+    -webkit-overflow-scrolling: touch;\n }\n \n #page-wrapper {\n@@ -40,6 +41,7 @@ body {\n     bottom: 0px;\n     box-sizing: border-box;\n     background: none repeat scroll 0% 0% #FFF;\n+    -webkit-overflow-scrolling: touch;\n }\n \n #page {"}, {"sha": "a0888850aaf1408104bd6442fb2dc362300b5011", "filename": "src/test/run-pass/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -24,7 +24,7 @@ struct A {\n \n fn main() {\n     let obj = A { foo: box [true, false] };\n-    let s = json::encode(&obj);\n+    let s = json::encode(&obj).unwrap();\n     let obj2: A = json::decode(s.as_slice()).unwrap();\n     assert!(obj.foo == obj2.foo);\n }"}, {"sha": "a5453d26170ad62833dfa45d88d3d6583bc3ea78", "filename": "src/test/run-pass/deriving-encodable-decodable-cell-refcell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -35,7 +35,7 @@ fn main() {\n         foo: Cell::new(true),\n         bar: RefCell::new( A { baz: 2 } )\n     };\n-    let s = json::encode(&obj);\n+    let s = json::encode(&obj).unwrap();\n     let obj2: B = json::decode(s.as_slice()).unwrap();\n     assert!(obj.foo.get() == obj2.foo.get());\n     assert!(obj.bar.borrow().baz == obj2.bar.borrow().baz);"}, {"sha": "8c4dd7ddc9a3144bc13e5df294248651ec1a8ba1", "filename": "src/test/run-pass/issue-14021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d6f5100aff24aa97275dc92ade728caac605560/src%2Ftest%2Frun-pass%2Fissue-14021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d6f5100aff24aa97275dc92ade728caac605560/src%2Ftest%2Frun-pass%2Fissue-14021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14021.rs?ref=3d6f5100aff24aa97275dc92ade728caac605560", "patch": "@@ -20,7 +20,7 @@ struct UnitLikeStruct;\n \n pub fn main() {\n     let obj = UnitLikeStruct;\n-    let json_str: String = json::encode(&obj);\n+    let json_str: String = json::encode(&obj).unwrap();\n \n     let json_object = json::from_str(json_str.as_slice());\n     let mut decoder = json::Decoder::new(json_object.unwrap());"}]}