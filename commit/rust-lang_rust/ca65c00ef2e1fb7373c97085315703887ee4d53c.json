{"sha": "ca65c00ef2e1fb7373c97085315703887ee4d53c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNjVjMDBlZjJlMWZiNzM3M2M5NzA4NTMxNTcwMzg4N2VlNGQ1M2M=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-02-07T19:45:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-02-11T21:55:23Z"}, "message": "syntax/ext/format -- rewrite conflicting closures into methods", "tree": {"sha": "41d860ac965ee934c5c4d888ffc8cba5cc345325", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41d860ac965ee934c5c4d888ffc8cba5cc345325"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca65c00ef2e1fb7373c97085315703887ee4d53c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca65c00ef2e1fb7373c97085315703887ee4d53c", "html_url": "https://github.com/rust-lang/rust/commit/ca65c00ef2e1fb7373c97085315703887ee4d53c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca65c00ef2e1fb7373c97085315703887ee4d53c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2b4c79b179413d4a5e1d706844b11dfca8226c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b4c79b179413d4a5e1d706844b11dfca8226c8", "html_url": "https://github.com/rust-lang/rust/commit/b2b4c79b179413d4a5e1d706844b11dfca8226c8"}], "stats": {"total": 243, "additions": 127, "deletions": 116}, "files": [{"sha": "35d2adbead5f5a82550075fb1a10b21bc3c487b1", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 127, "deletions": 116, "changes": 243, "blob_url": "https://github.com/rust-lang/rust/blob/ca65c00ef2e1fb7373c97085315703887ee4d53c/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca65c00ef2e1fb7373c97085315703887ee4d53c/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=ca65c00ef2e1fb7373c97085315703887ee4d53c", "patch": "@@ -21,6 +21,7 @@ use rsparse = parse;\n use std::fmt::parse;\n use std::hashmap::{HashMap, HashSet};\n use std::vec;\n+use std::cell::RefCell;\n \n #[deriving(Eq)]\n enum ArgumentType {\n@@ -367,169 +368,179 @@ impl<'a> Context<'a> {\n         return ~[unnamed, allow_dead_code];\n     }\n \n-    /// Translate a `parse::Piece` to a static `rt::Piece`\n-    fn trans_piece(&mut self, piece: &parse::Piece) -> @ast::Expr {\n-        let sp = self.fmtsp;\n-        let parsepath = |s: &str| {\n-            ~[self.ecx.ident_of(\"std\"), self.ecx.ident_of(\"fmt\"),\n-              self.ecx.ident_of(\"parse\"), self.ecx.ident_of(s)]\n-        };\n-        let rtpath = |s: &str| {\n-            ~[self.ecx.ident_of(\"std\"), self.ecx.ident_of(\"fmt\"),\n-              self.ecx.ident_of(\"rt\"), self.ecx.ident_of(s)]\n-        };\n-        let ctpath = |s: &str| {\n-            ~[self.ecx.ident_of(\"std\"), self.ecx.ident_of(\"fmt\"),\n-              self.ecx.ident_of(\"parse\"), self.ecx.ident_of(s)]\n-        };\n-        let none = self.ecx.path_global(sp, ~[\n+    fn parsepath(&self, s: &str) -> ~[ast::Ident] {\n+        ~[self.ecx.ident_of(\"std\"), self.ecx.ident_of(\"fmt\"),\n+          self.ecx.ident_of(\"parse\"), self.ecx.ident_of(s)]\n+    }\n+\n+    fn rtpath(&self, s: &str) -> ~[ast::Ident] {\n+        ~[self.ecx.ident_of(\"std\"), self.ecx.ident_of(\"fmt\"),\n+          self.ecx.ident_of(\"rt\"), self.ecx.ident_of(s)]\n+    }\n+\n+    fn ctpath(&self, s: &str) -> ~[ast::Ident] {\n+        ~[self.ecx.ident_of(\"std\"), self.ecx.ident_of(\"fmt\"),\n+          self.ecx.ident_of(\"parse\"), self.ecx.ident_of(s)]\n+    }\n+\n+    fn none(&self) -> @ast::Expr {\n+        let none = self.ecx.path_global(self.fmtsp, ~[\n                 self.ecx.ident_of(\"std\"),\n                 self.ecx.ident_of(\"option\"),\n                 self.ecx.ident_of(\"None\")]);\n-        let none = self.ecx.expr_path(none);\n-        let some = |e: @ast::Expr| {\n-            let p = self.ecx.path_global(sp, ~[\n+        self.ecx.expr_path(none)\n+    }\n+\n+    fn some(&self, e: @ast::Expr) -> @ast::Expr {\n+        let p = self.ecx.path_global(self.fmtsp, ~[\n                 self.ecx.ident_of(\"std\"),\n                 self.ecx.ident_of(\"option\"),\n                 self.ecx.ident_of(\"Some\")]);\n-            let p = self.ecx.expr_path(p);\n-            self.ecx.expr_call(sp, p, ~[e])\n-        };\n-        let trans_count = |c: parse::Count| {\n-            match c {\n-                parse::CountIs(i) => {\n-                    self.ecx.expr_call_global(sp, rtpath(\"CountIs\"),\n-                                              ~[self.ecx.expr_uint(sp, i)])\n-                }\n-                parse::CountIsParam(i) => {\n-                    self.ecx.expr_call_global(sp, rtpath(\"CountIsParam\"),\n-                                              ~[self.ecx.expr_uint(sp, i)])\n-                }\n-                parse::CountImplied => {\n-                    let path = self.ecx.path_global(sp, rtpath(\"CountImplied\"));\n-                    self.ecx.expr_path(path)\n-                }\n-                parse::CountIsNextParam => {\n-                    let path = self.ecx.path_global(sp, rtpath(\"CountIsNextParam\"));\n-                    self.ecx.expr_path(path)\n-                }\n-                parse::CountIsName(n) => {\n-                    let i = match self.name_positions.find_equiv(&n) {\n-                        Some(&i) => i,\n-                        None => 0, // error already emitted elsewhere\n-                    };\n-                    let i = i + self.args.len();\n-                    self.ecx.expr_call_global(sp, rtpath(\"CountIsParam\"),\n-                                              ~[self.ecx.expr_uint(sp, i)])\n-                }\n+        let p = self.ecx.expr_path(p);\n+        self.ecx.expr_call(self.fmtsp, p, ~[e])\n+    }\n+\n+    fn trans_count(&self, c: parse::Count) -> @ast::Expr {\n+        let sp = self.fmtsp;\n+        match c {\n+            parse::CountIs(i) => {\n+                self.ecx.expr_call_global(sp, self.rtpath(\"CountIs\"),\n+                                          ~[self.ecx.expr_uint(sp, i)])\n             }\n-        };\n-        let trans_method = |method: &parse::Method| {\n-            let method = match *method {\n-                parse::Select(ref arms, ref default) => {\n-                    let arms = arms.iter().map(|arm| {\n-                        let p = self.ecx.path_global(sp, rtpath(\"SelectArm\"));\n+            parse::CountIsParam(i) => {\n+                self.ecx.expr_call_global(sp, self.rtpath(\"CountIsParam\"),\n+                                          ~[self.ecx.expr_uint(sp, i)])\n+            }\n+            parse::CountImplied => {\n+                let path = self.ecx.path_global(sp, self.rtpath(\"CountImplied\"));\n+                self.ecx.expr_path(path)\n+            }\n+            parse::CountIsNextParam => {\n+                let path = self.ecx.path_global(sp, self.rtpath(\"CountIsNextParam\"));\n+                self.ecx.expr_path(path)\n+            }\n+            parse::CountIsName(n) => {\n+                let i = match self.name_positions.find_equiv(&n) {\n+                    Some(&i) => i,\n+                    None => 0, // error already emitted elsewhere\n+                };\n+                let i = i + self.args.len();\n+                self.ecx.expr_call_global(sp, self.rtpath(\"CountIsParam\"),\n+                                          ~[self.ecx.expr_uint(sp, i)])\n+            }\n+        }\n+    }\n+\n+    fn trans_method(&mut self, method: &parse::Method) -> @ast::Expr {\n+        let sp = self.fmtsp;\n+        let method = match *method {\n+            parse::Select(ref arms, ref default) => {\n+                let arms = arms.iter().map(|arm| {\n+                        let p = self.ecx.path_global(sp, self.rtpath(\"SelectArm\"));\n                         let result = arm.result.iter().map(|p| {\n                             self.trans_piece(p)\n                         }).collect();\n                         let s = token::intern_and_get_ident(arm.selector);\n                         let selector = self.ecx.expr_str(sp, s);\n                         self.ecx.expr_struct(sp, p, ~[\n-                            self.ecx.field_imm(sp,\n-                                               self.ecx.ident_of(\"selector\"),\n-                                               selector),\n-                            self.ecx.field_imm(sp, self.ecx.ident_of(\"result\"),\n-                                               self.ecx.expr_vec_slice(sp, result)),\n-                        ])\n+                                self.ecx.field_imm(sp,\n+                                                   self.ecx.ident_of(\"selector\"),\n+                                                   selector),\n+                                self.ecx.field_imm(sp, self.ecx.ident_of(\"result\"),\n+                                                   self.ecx.expr_vec_slice(sp, result)),\n+                                ])\n                     }).collect();\n-                    let default = default.iter().map(|p| {\n+                let default = default.iter().map(|p| {\n                         self.trans_piece(p)\n                     }).collect();\n-                    self.ecx.expr_call_global(sp, rtpath(\"Select\"), ~[\n+                self.ecx.expr_call_global(sp, self.rtpath(\"Select\"), ~[\n                         self.ecx.expr_vec_slice(sp, arms),\n                         self.ecx.expr_vec_slice(sp, default),\n-                    ])\n-                }\n-                parse::Plural(offset, ref arms, ref default) => {\n-                    let offset = match offset {\n-                        Some(i) => { some(self.ecx.expr_uint(sp, i)) }\n-                        None => { none.clone() }\n-                    };\n-                    let arms = arms.iter().map(|arm| {\n-                        let p = self.ecx.path_global(sp, rtpath(\"PluralArm\"));\n+                        ])\n+            }\n+            parse::Plural(offset, ref arms, ref default) => {\n+                let offset = match offset {\n+                    Some(i) => { self.some(self.ecx.expr_uint(sp, i)) }\n+                    None => { self.none() }\n+                };\n+                let arms = arms.iter().map(|arm| {\n+                        let p = self.ecx.path_global(sp, self.rtpath(\"PluralArm\"));\n                         let result = arm.result.iter().map(|p| {\n-                            self.trans_piece(p)\n-                        }).collect();\n+                                self.trans_piece(p)\n+                            }).collect();\n                         let (lr, selarg) = match arm.selector {\n                             parse::Keyword(t) => {\n-                                let p = ctpath(format!(\"{:?}\", t));\n+                                let p = self.ctpath(format!(\"{:?}\", t));\n                                 let p = self.ecx.path_global(sp, p);\n-                                (rtpath(\"Keyword\"), self.ecx.expr_path(p))\n+                                (self.rtpath(\"Keyword\"), self.ecx.expr_path(p))\n                             }\n                             parse::Literal(i) => {\n-                                (rtpath(\"Literal\"), self.ecx.expr_uint(sp, i))\n+                                (self.rtpath(\"Literal\"), self.ecx.expr_uint(sp, i))\n                             }\n                         };\n                         let selector = self.ecx.expr_call_global(sp,\n-                                lr, ~[selarg]);\n+                                                                 lr, ~[selarg]);\n                         self.ecx.expr_struct(sp, p, ~[\n-                            self.ecx.field_imm(sp,\n-                                               self.ecx.ident_of(\"selector\"),\n-                                               selector),\n-                            self.ecx.field_imm(sp, self.ecx.ident_of(\"result\"),\n-                                               self.ecx.expr_vec_slice(sp, result)),\n-                        ])\n+                                self.ecx.field_imm(sp,\n+                                                   self.ecx.ident_of(\"selector\"),\n+                                                   selector),\n+                                self.ecx.field_imm(sp, self.ecx.ident_of(\"result\"),\n+                                                   self.ecx.expr_vec_slice(sp, result)),\n+                                ])\n                     }).collect();\n-                    let default = default.iter().map(|p| {\n+                let default = default.iter().map(|p| {\n                         self.trans_piece(p)\n                     }).collect();\n-                    self.ecx.expr_call_global(sp, rtpath(\"Plural\"), ~[\n+                self.ecx.expr_call_global(sp, self.rtpath(\"Plural\"), ~[\n                         offset,\n                         self.ecx.expr_vec_slice(sp, arms),\n                         self.ecx.expr_vec_slice(sp, default),\n-                    ])\n-                }\n-            };\n-            let life = self.ecx.lifetime(sp, self.ecx.ident_of(\"static\"));\n-            let ty = self.ecx.ty_path(self.ecx.path_all(\n+                        ])\n+            }\n+        };\n+        let life = self.ecx.lifetime(sp, self.ecx.ident_of(\"static\"));\n+        let ty = self.ecx.ty_path(self.ecx.path_all(\n                 sp,\n                 true,\n-                rtpath(\"Method\"),\n+                self.rtpath(\"Method\"),\n                 opt_vec::with(life),\n                 ~[]\n-            ), None);\n-            let st = ast::ItemStatic(ty, ast::MutImmutable, method);\n-            let static_name = self.ecx.ident_of(format!(\"__STATIC_METHOD_{}\",\n-                                                     self.method_statics.len()));\n-            let item = self.ecx.item(sp, static_name, self.static_attrs(), st);\n-            self.method_statics.push(item);\n-            self.ecx.expr_ident(sp, static_name)\n-        };\n+                    ), None);\n+        let st = ast::ItemStatic(ty, ast::MutImmutable, method);\n+        let static_name = self.ecx.ident_of(format!(\"__STATIC_METHOD_{}\",\n+                                                    self.method_statics.len()));\n+        let item = self.ecx.item(sp, static_name, self.static_attrs(), st);\n+        self.method_statics.push(item);\n+        self.ecx.expr_ident(sp, static_name)\n+    }\n \n+    /// Translate a `parse::Piece` to a static `rt::Piece`\n+    fn trans_piece(&mut self, piece: &parse::Piece) -> @ast::Expr {\n+        let sp = self.fmtsp;\n         match *piece {\n             parse::String(s) => {\n                 let s = token::intern_and_get_ident(s);\n                 self.ecx.expr_call_global(sp,\n-                                          rtpath(\"String\"),\n+                                          self.rtpath(\"String\"),\n                                           ~[\n                     self.ecx.expr_str(sp, s)\n                 ])\n             }\n             parse::CurrentArgument => {\n                 let nil = self.ecx.expr_lit(sp, ast::LitNil);\n-                self.ecx.expr_call_global(sp, rtpath(\"CurrentArgument\"), ~[nil])\n+                self.ecx.expr_call_global(sp, self.rtpath(\"CurrentArgument\"), ~[nil])\n             }\n             parse::Argument(ref arg) => {\n                 // Translate the position\n                 let pos = match arg.position {\n                     // These two have a direct mapping\n                     parse::ArgumentNext => {\n                         let path = self.ecx.path_global(sp,\n-                                                        rtpath(\"ArgumentNext\"));\n+                                                        self.rtpath(\"ArgumentNext\"));\n                         self.ecx.expr_path(path)\n                     }\n                     parse::ArgumentIs(i) => {\n-                        self.ecx.expr_call_global(sp, rtpath(\"ArgumentIs\"),\n+                        self.ecx.expr_call_global(sp, self.rtpath(\"ArgumentIs\"),\n                                                   ~[self.ecx.expr_uint(sp, i)])\n                     }\n                     // Named arguments are converted to positional arguments at\n@@ -540,7 +551,7 @@ impl<'a> Context<'a> {\n                             None => 0, // error already emitted elsewhere\n                         };\n                         let i = i + self.args.len();\n-                        self.ecx.expr_call_global(sp, rtpath(\"ArgumentIs\"),\n+                        self.ecx.expr_call_global(sp, self.rtpath(\"ArgumentIs\"),\n                                                   ~[self.ecx.expr_uint(sp, i)])\n                     }\n                 };\n@@ -550,20 +561,20 @@ impl<'a> Context<'a> {\n                 let fill = self.ecx.expr_lit(sp, ast::LitChar(fill as u32));\n                 let align = match arg.format.align {\n                     parse::AlignLeft => {\n-                        self.ecx.path_global(sp, parsepath(\"AlignLeft\"))\n+                        self.ecx.path_global(sp, self.parsepath(\"AlignLeft\"))\n                     }\n                     parse::AlignRight => {\n-                        self.ecx.path_global(sp, parsepath(\"AlignRight\"))\n+                        self.ecx.path_global(sp, self.parsepath(\"AlignRight\"))\n                     }\n                     parse::AlignUnknown => {\n-                        self.ecx.path_global(sp, parsepath(\"AlignUnknown\"))\n+                        self.ecx.path_global(sp, self.parsepath(\"AlignUnknown\"))\n                     }\n                 };\n                 let align = self.ecx.expr_path(align);\n                 let flags = self.ecx.expr_uint(sp, arg.format.flags);\n-                let prec = trans_count(arg.format.precision);\n-                let width = trans_count(arg.format.width);\n-                let path = self.ecx.path_global(sp, rtpath(\"FormatSpec\"));\n+                let prec = self.trans_count(arg.format.precision);\n+                let width = self.trans_count(arg.format.width);\n+                let path = self.ecx.path_global(sp, self.rtpath(\"FormatSpec\"));\n                 let fmt = self.ecx.expr_struct(sp, path, ~[\n                     self.ecx.field_imm(sp, self.ecx.ident_of(\"fill\"), fill),\n                     self.ecx.field_imm(sp, self.ecx.ident_of(\"align\"), align),\n@@ -574,19 +585,19 @@ impl<'a> Context<'a> {\n \n                 // Translate the method (if any)\n                 let method = match arg.method {\n-                    None => { none.clone() }\n+                    None => { self.none() }\n                     Some(ref m) => {\n-                        let m = trans_method(*m);\n-                        some(self.ecx.expr_addr_of(sp, m))\n+                        let m = self.trans_method(*m);\n+                        self.some(self.ecx.expr_addr_of(sp, m))\n                     }\n                 };\n-                let path = self.ecx.path_global(sp, rtpath(\"Argument\"));\n+                let path = self.ecx.path_global(sp, self.rtpath(\"Argument\"));\n                 let s = self.ecx.expr_struct(sp, path, ~[\n                     self.ecx.field_imm(sp, self.ecx.ident_of(\"position\"), pos),\n                     self.ecx.field_imm(sp, self.ecx.ident_of(\"format\"), fmt),\n                     self.ecx.field_imm(sp, self.ecx.ident_of(\"method\"), method),\n                 ]);\n-                self.ecx.expr_call_global(sp, rtpath(\"Argument\"), ~[s])\n+                self.ecx.expr_call_global(sp, self.rtpath(\"Argument\"), ~[s])\n             }\n         }\n     }"}]}