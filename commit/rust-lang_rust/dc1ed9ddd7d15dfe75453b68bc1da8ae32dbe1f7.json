{"sha": "dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7", "node_id": "C_kwDOAAsO6NoAKGRjMWVkOWRkZDdkMTVkZmU3NTQ1M2I2OGJjMWRhOGFlMzJkYmUxZjc", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-05-23T13:26:31Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-05-23T14:54:33Z"}, "message": "codegen: allow the dso_local attribute\n\nThe attribute is injected into most items when static relocation is\nenabled in a target.", "tree": {"sha": "b0b4f0b57828d3c715d47d28b3529788fa1efb2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0b4f0b57828d3c715d47d28b3529788fa1efb2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmRs06kACgkQzXazX3c0\ndp7HrA/+Id+UaQ/buxO5TIYtxxoUBWfWZEOJMD9Gsak7yq2OdYwdxdai67zm4CF0\nS7zLXiCl99jZBwIvYlZbDJqOgRMTxtVTsoNLHyAuZrk9jeFZqcNt/sTZuBzSd2Mv\nbVxYdGuEfDIyolXZLhjMTvKabs3ZRFV5t9L73RnHGJTHTEecILEC3Ju2dbnZ0fwA\nDKCXjSlHJ/72BMBx6vmpy8Ug0dEeFydAzCcnDMsZb57gUY2bnpbbaCmaMGlQPjnW\nZhy/L1wMAssvPaSaGCYtl+Tmko70sSvGrpcrUZkTVlVocX2+mfi6GMZMZQS/VN/s\nN1wZt59JMGLqiOq7WRY1mLPlHJHK/xP/+/lXge/Vdxc06G9aUnoTuzZkTdwqmo0a\nPlPkuWd+InBMKLJZQDc5YYZBBiVS/OrlAOPhrlLzlhhDCkH3ceEv8sRpP2mR6nQN\nnFn3OYjZNTN3m2jtzj4ayQRGtPInDETZ5dQ9w04P88s6a65wh42hiK1yZj3Sx/KN\nQRoODfeXXk/QJQ43ZU9+Ytm3jAxmdpsNoHl8O39CqyTkYbZ4n92kh12YrE8LAdQK\nplOYnPK2BmN964h0TdPUfZtfpF2nNm0QdmBDTtsZOhBsdjAIOP++JcEdQqlUiXK5\nQg3s8l5pZF5nQ2dZrqj/b0SSwl4f1znLXvizjTgi5xgi3qKUu/8=\n=1Z1O\n-----END PGP SIGNATURE-----", "payload": "tree b0b4f0b57828d3c715d47d28b3529788fa1efb2e\nparent 5fdeae610db96d048090b1efaf6b7a2f54aeda12\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1684848391 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1684853673 +0200\n\ncodegen: allow the dso_local attribute\n\nThe attribute is injected into most items when static relocation is\nenabled in a target.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7", "html_url": "https://github.com/rust-lang/rust/commit/dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fdeae610db96d048090b1efaf6b7a2f54aeda12", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fdeae610db96d048090b1efaf6b7a2f54aeda12", "html_url": "https://github.com/rust-lang/rust/commit/5fdeae610db96d048090b1efaf6b7a2f54aeda12"}], "stats": {"total": 100, "additions": 50, "deletions": 50}, "files": [{"sha": "c9f88fb3fe4525067740cec5ad29014a8ff6f5fd", "filename": "tests/codegen/box-maybe-uninit-llvm14.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7/tests%2Fcodegen%2Fbox-maybe-uninit-llvm14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7/tests%2Fcodegen%2Fbox-maybe-uninit-llvm14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fbox-maybe-uninit-llvm14.rs?ref=dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7", "patch": "@@ -31,4 +31,4 @@ pub fn box_uninitialized2() -> Box<MaybeUninit<[usize; 1024 * 1024]>> {\n // Hide the LLVM 15+ `allocalign` attribute in the declaration of __rust_alloc\n // from the CHECK-NOT above. We don't check the attributes here because we can't rely\n // on all of them being set until LLVM 15.\n-// CHECK: declare noalias{{.*}} @__rust_alloc(i{{[0-9]+}} noundef, i{{[0-9]+.*}} noundef)\n+// CHECK: declare {{(dso_local )?}}noalias{{.*}} @__rust_alloc(i{{[0-9]+}} noundef, i{{[0-9]+.*}} noundef)"}, {"sha": "9f079e99b9c7617c040ad9597076ce22d5eb3776", "filename": "tests/codegen/box-maybe-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7/tests%2Fcodegen%2Fbox-maybe-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7/tests%2Fcodegen%2Fbox-maybe-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fbox-maybe-uninit.rs?ref=dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7", "patch": "@@ -28,6 +28,6 @@ pub fn box_uninitialized2() -> Box<MaybeUninit<[usize; 1024 * 1024]>> {\n \n // Hide the `allocalign` attribute in the declaration of __rust_alloc\n // from the CHECK-NOT above, and also verify the attributes got set reasonably.\n-// CHECK: declare noalias noundef ptr @__rust_alloc(i{{[0-9]+}} noundef, i{{[0-9]+}} allocalign noundef) unnamed_addr [[RUST_ALLOC_ATTRS:#[0-9]+]]\n+// CHECK: declare {{(dso_local )?}}noalias noundef ptr @__rust_alloc(i{{[0-9]+}} noundef, i{{[0-9]+}} allocalign noundef) unnamed_addr [[RUST_ALLOC_ATTRS:#[0-9]+]]\n \n // CHECK-DAG: attributes [[RUST_ALLOC_ATTRS]] = { {{.*}} allockind(\"alloc,uninitialized,aligned\") allocsize(0) uwtable \"alloc-family\"=\"__rust_alloc\" {{.*}} }"}, {"sha": "48023a2a901cd3b13dfe16dee2713dd171475beb", "filename": "tests/codegen/external-no-mangle-statics.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7/tests%2Fcodegen%2Fexternal-no-mangle-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7/tests%2Fcodegen%2Fexternal-no-mangle-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fexternal-no-mangle-statics.rs?ref=dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7", "patch": "@@ -6,72 +6,72 @@\n // `#[no_mangle]`d static variables always have external linkage, i.e., no `internal` in their\n // definitions\n \n-// CHECK: @A = local_unnamed_addr constant\n+// CHECK: @A = {{(dso_local )?}}local_unnamed_addr constant\n #[no_mangle]\n static A: u8 = 0;\n \n-// CHECK: @B = local_unnamed_addr global\n+// CHECK: @B = {{(dso_local )?}}local_unnamed_addr global\n #[no_mangle]\n static mut B: u8 = 0;\n \n-// CHECK: @C = local_unnamed_addr constant\n+// CHECK: @C = {{(dso_local )?}}local_unnamed_addr constant\n #[no_mangle]\n pub static C: u8 = 0;\n \n-// CHECK: @D = local_unnamed_addr global\n+// CHECK: @D = {{(dso_local )?}}local_unnamed_addr global\n #[no_mangle]\n pub static mut D: u8 = 0;\n \n mod private {\n-    // CHECK: @E = local_unnamed_addr constant\n+    // CHECK: @E = {{(dso_local )?}}local_unnamed_addr constant\n     #[no_mangle]\n     static E: u8 = 0;\n \n-    // CHECK: @F = local_unnamed_addr global\n+    // CHECK: @F = {{(dso_local )?}}local_unnamed_addr global\n     #[no_mangle]\n     static mut F: u8 = 0;\n \n-    // CHECK: @G = local_unnamed_addr constant\n+    // CHECK: @G = {{(dso_local )?}}local_unnamed_addr constant\n     #[no_mangle]\n     pub static G: u8 = 0;\n \n-    // CHECK: @H = local_unnamed_addr global\n+    // CHECK: @H = {{(dso_local )?}}local_unnamed_addr global\n     #[no_mangle]\n     pub static mut H: u8 = 0;\n }\n \n const HIDDEN: () = {\n-    // CHECK: @I = local_unnamed_addr constant\n+    // CHECK: @I = {{(dso_local )?}}local_unnamed_addr constant\n     #[no_mangle]\n     static I: u8 = 0;\n \n-    // CHECK: @J = local_unnamed_addr global\n+    // CHECK: @J = {{(dso_local )?}}local_unnamed_addr global\n     #[no_mangle]\n     static mut J: u8 = 0;\n \n-    // CHECK: @K = local_unnamed_addr constant\n+    // CHECK: @K = {{(dso_local )?}}local_unnamed_addr constant\n     #[no_mangle]\n     pub static K: u8 = 0;\n \n-    // CHECK: @L = local_unnamed_addr global\n+    // CHECK: @L = {{(dso_local )?}}local_unnamed_addr global\n     #[no_mangle]\n     pub static mut L: u8 = 0;\n };\n \n fn x() {\n-    // CHECK: @M = local_unnamed_addr constant\n+    // CHECK: @M = {{(dso_local )?}}local_unnamed_addr constant\n     #[no_mangle]\n     static M: fn() = x;\n \n-    // CHECK: @N = local_unnamed_addr global\n+    // CHECK: @N = {{(dso_local )?}}local_unnamed_addr global\n     #[no_mangle]\n     static mut N: u8 = 0;\n \n-    // CHECK: @O = local_unnamed_addr constant\n+    // CHECK: @O = {{(dso_local )?}}local_unnamed_addr constant\n     #[no_mangle]\n     pub static O: u8 = 0;\n \n-    // CHECK: @P = local_unnamed_addr global\n+    // CHECK: @P = {{(dso_local )?}}local_unnamed_addr global\n     #[no_mangle]\n     pub static mut P: u8 = 0;\n }"}, {"sha": "be5034dcfbd7ed7073a97aab1c43cf959a708726", "filename": "tests/codegen/issues/issue-86106.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7/tests%2Fcodegen%2Fissues%2Fissue-86106.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7/tests%2Fcodegen%2Fissues%2Fissue-86106.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fissues%2Fissue-86106.rs?ref=dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7", "patch": "@@ -7,7 +7,7 @@\n \n #![crate_type = \"lib\"]\n \n-// CHECK-LABEL: define void @string_new\n+// CHECK-LABEL: define {{(dso_local )?}}void @string_new\n #[no_mangle]\n pub fn string_new() -> String {\n     // CHECK: store ptr inttoptr\n@@ -17,7 +17,7 @@ pub fn string_new() -> String {\n     String::new()\n }\n \n-// CHECK-LABEL: define void @empty_to_string\n+// CHECK-LABEL: define {{(dso_local )?}}void @empty_to_string\n #[no_mangle]\n pub fn empty_to_string() -> String {\n     // CHECK: store ptr inttoptr"}, {"sha": "2b26b604ad323308e6913029f3d584feac234708", "filename": "tests/codegen/link_section.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7/tests%2Fcodegen%2Flink_section.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7/tests%2Fcodegen%2Flink_section.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Flink_section.rs?ref=dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7", "patch": "@@ -3,7 +3,7 @@\n \n #![crate_type = \"lib\"]\n \n-// CHECK: @VAR1 = constant <{ [4 x i8] }> <{ [4 x i8] c\"\\01\\00\\00\\00\" }>, section \".test_one\"\n+// CHECK: @VAR1 = {{(dso_local )?}}constant <{ [4 x i8] }> <{ [4 x i8] c\"\\01\\00\\00\\00\" }>, section \".test_one\"\n #[no_mangle]\n #[link_section = \".test_one\"]\n #[cfg(target_endian = \"little\")]\n@@ -19,17 +19,17 @@ pub enum E {\n     B(f32)\n }\n \n-// CHECK: @VAR2 = constant {{.*}}, section \".test_two\"\n+// CHECK: @VAR2 = {{(dso_local )?}}constant {{.*}}, section \".test_two\"\n #[no_mangle]\n #[link_section = \".test_two\"]\n pub static VAR2: E = E::A(666);\n \n-// CHECK: @VAR3 = constant {{.*}}, section \".test_three\"\n+// CHECK: @VAR3 = {{(dso_local )?}}constant {{.*}}, section \".test_three\"\n #[no_mangle]\n #[link_section = \".test_three\"]\n pub static VAR3: E = E::B(1.);\n \n-// CHECK: define void @fn1() {{.*}} section \".test_four\" {\n+// CHECK: define {{(dso_local )?}}void @fn1() {{.*}} section \".test_four\" {\n #[no_mangle]\n #[link_section = \".test_four\"]\n pub fn fn1() {}"}, {"sha": "5cfb500c0ef883972edee7c0f1b93b9dd60ca41b", "filename": "tests/codegen/naked-noinline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7/tests%2Fcodegen%2Fnaked-noinline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7/tests%2Fcodegen%2Fnaked-noinline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fnaked-noinline.rs?ref=dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7", "patch": "@@ -12,7 +12,7 @@ use std::arch::asm;\n pub unsafe extern \"C\" fn f() {\n     // Check that f has naked and noinline attributes.\n     //\n-    // CHECK:       define void @f() unnamed_addr [[ATTR:#[0-9]+]]\n+    // CHECK:       define {{(dso_local )?}}void @f() unnamed_addr [[ATTR:#[0-9]+]]\n     // CHECK-NEXT:  start:\n     // CHECK-NEXT:    call void asm\n     asm!(\"\", options(noreturn));\n@@ -22,7 +22,7 @@ pub unsafe extern \"C\" fn f() {\n pub unsafe fn g() {\n     // Check that call to f is not inlined.\n     //\n-    // CHECK-LABEL: define void @g()\n+    // CHECK-LABEL: define {{(dso_local )?}}void @g()\n     // CHECK-NEXT:  start:\n     // CHECK-NEXT:    call void @f()\n     f();"}, {"sha": "73d1db6df277b5ae803a46b8c3c898d609020e0c", "filename": "tests/codegen/ptr-read-metadata.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7/tests%2Fcodegen%2Fptr-read-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7/tests%2Fcodegen%2Fptr-read-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fptr-read-metadata.rs?ref=dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7", "patch": "@@ -9,7 +9,7 @@\n \n use std::mem::MaybeUninit;\n \n-// CHECK-LABEL: define noundef i8 @copy_byte(\n+// CHECK-LABEL: define {{(dso_local )?}}noundef i8 @copy_byte(\n #[no_mangle]\n pub unsafe fn copy_byte(p: *const u8) -> u8 {\n     // CHECK-NOT: load\n@@ -19,7 +19,7 @@ pub unsafe fn copy_byte(p: *const u8) -> u8 {\n     *p\n }\n \n-// CHECK-LABEL: define noundef i8 @read_byte(\n+// CHECK-LABEL: define {{(dso_local )?}}noundef i8 @read_byte(\n #[no_mangle]\n pub unsafe fn read_byte(p: *const u8) -> u8 {\n     // CHECK-NOT: load\n@@ -29,7 +29,7 @@ pub unsafe fn read_byte(p: *const u8) -> u8 {\n     p.read()\n }\n \n-// CHECK-LABEL: define i8 @read_byte_maybe_uninit(\n+// CHECK-LABEL: define {{(dso_local )?}}i8 @read_byte_maybe_uninit(\n #[no_mangle]\n pub unsafe fn read_byte_maybe_uninit(p: *const MaybeUninit<u8>) -> MaybeUninit<u8> {\n     // CHECK-NOT: load\n@@ -39,7 +39,7 @@ pub unsafe fn read_byte_maybe_uninit(p: *const MaybeUninit<u8>) -> MaybeUninit<u\n     p.read()\n }\n \n-// CHECK-LABEL: define noundef i8 @read_byte_assume_init(\n+// CHECK-LABEL: define {{(dso_local )?}}noundef i8 @read_byte_assume_init(\n #[no_mangle]\n pub unsafe fn read_byte_assume_init(p: &MaybeUninit<u8>) -> u8 {\n     // CHECK-NOT: load\n@@ -49,7 +49,7 @@ pub unsafe fn read_byte_assume_init(p: &MaybeUninit<u8>) -> u8 {\n     p.assume_init_read()\n }\n \n-// CHECK-LABEL: define noundef i32 @copy_char(\n+// CHECK-LABEL: define {{(dso_local )?}}noundef i32 @copy_char(\n #[no_mangle]\n pub unsafe fn copy_char(p: *const char) -> char {\n     // CHECK-NOT: load\n@@ -60,7 +60,7 @@ pub unsafe fn copy_char(p: *const char) -> char {\n     *p\n }\n \n-// CHECK-LABEL: define noundef i32 @read_char(\n+// CHECK-LABEL: define {{(dso_local )?}}noundef i32 @read_char(\n #[no_mangle]\n pub unsafe fn read_char(p: *const char) -> char {\n     // CHECK-NOT: load\n@@ -71,7 +71,7 @@ pub unsafe fn read_char(p: *const char) -> char {\n     p.read()\n }\n \n-// CHECK-LABEL: define i32 @read_char_maybe_uninit(\n+// CHECK-LABEL: define {{(dso_local )?}}i32 @read_char_maybe_uninit(\n #[no_mangle]\n pub unsafe fn read_char_maybe_uninit(p: *const MaybeUninit<char>) -> MaybeUninit<char> {\n     // CHECK-NOT: load\n@@ -82,7 +82,7 @@ pub unsafe fn read_char_maybe_uninit(p: *const MaybeUninit<char>) -> MaybeUninit\n     p.read()\n }\n \n-// CHECK-LABEL: define noundef i32 @read_char_assume_init(\n+// CHECK-LABEL: define {{(dso_local )?}}noundef i32 @read_char_assume_init(\n #[no_mangle]\n pub unsafe fn read_char_assume_init(p: &MaybeUninit<char>) -> char {\n     // CHECK-NOT: load"}, {"sha": "309fe1d5ec90250a181825323a2ed56b89e61476", "filename": "tests/codegen/tuple-layout-opt.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7/tests%2Fcodegen%2Ftuple-layout-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7/tests%2Fcodegen%2Ftuple-layout-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Ftuple-layout-opt.rs?ref=dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7", "patch": "@@ -6,31 +6,31 @@\n #![crate_type=\"lib\"]\n \n type ScalarZstLast = (u128, ());\n-// CHECK: define i128 @test_ScalarZstLast(i128 %_1)\n+// CHECK: define {{(dso_local )?}}i128 @test_ScalarZstLast(i128 %_1)\n #[no_mangle]\n pub fn test_ScalarZstLast(_: ScalarZstLast) -> ScalarZstLast { loop {} }\n \n type ScalarZstFirst = ((), u128);\n-// CHECK: define i128 @test_ScalarZstFirst(i128 %_1)\n+// CHECK: define {{(dso_local )?}}i128 @test_ScalarZstFirst(i128 %_1)\n #[no_mangle]\n pub fn test_ScalarZstFirst(_: ScalarZstFirst) -> ScalarZstFirst { loop {} }\n \n type ScalarPairZstLast = (u8, u128, ());\n-// CHECK: define { i128, i8 } @test_ScalarPairZstLast(i128 %_1.0, i8 %_1.1)\n+// CHECK: define {{(dso_local )?}}{ i128, i8 } @test_ScalarPairZstLast(i128 %_1.0, i8 %_1.1)\n #[no_mangle]\n pub fn test_ScalarPairZstLast(_: ScalarPairZstLast) -> ScalarPairZstLast { loop {} }\n \n type ScalarPairZstFirst = ((), u8, u128);\n-// CHECK: define { i8, i128 } @test_ScalarPairZstFirst(i8 %_1.0, i128 %_1.1)\n+// CHECK: define {{(dso_local )?}}{ i8, i128 } @test_ScalarPairZstFirst(i8 %_1.0, i128 %_1.1)\n #[no_mangle]\n pub fn test_ScalarPairZstFirst(_: ScalarPairZstFirst) -> ScalarPairZstFirst { loop {} }\n \n type ScalarPairLotsOfZsts = ((), u8, (), u128, ());\n-// CHECK: define { i128, i8 } @test_ScalarPairLotsOfZsts(i128 %_1.0, i8 %_1.1)\n+// CHECK: define {{(dso_local )?}}{ i128, i8 } @test_ScalarPairLotsOfZsts(i128 %_1.0, i8 %_1.1)\n #[no_mangle]\n pub fn test_ScalarPairLotsOfZsts(_: ScalarPairLotsOfZsts) -> ScalarPairLotsOfZsts { loop {} }\n \n type ScalarPairLottaNesting = (((), ((), u8, (), u128, ())), ());\n-// CHECK: define { i128, i8 } @test_ScalarPairLottaNesting(i128 %_1.0, i8 %_1.1)\n+// CHECK: define {{(dso_local )?}}{ i128, i8 } @test_ScalarPairLottaNesting(i128 %_1.0, i8 %_1.1)\n #[no_mangle]\n pub fn test_ScalarPairLottaNesting(_: ScalarPairLottaNesting) -> ScalarPairLottaNesting { loop {} }"}, {"sha": "8481ca8ccfa197ed2d72a37449c2c6481f20e131", "filename": "tests/codegen/union-abi.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7/tests%2Fcodegen%2Funion-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7/tests%2Fcodegen%2Funion-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Funion-abi.rs?ref=dc1ed9ddd7d15dfe75453b68bc1da8ae32dbe1f7", "patch": "@@ -17,60 +17,60 @@ pub struct i64x4(i64, i64, i64, i64);\n #[derive(Copy, Clone)]\n pub union UnionI64x4{ a:(), b: i64x4 }\n \n-// CHECK: define void @test_UnionI64x4({{<4 x i64>\\*|ptr}} {{.*}} %_1)\n+// CHECK: define {{(dso_local )?}}void @test_UnionI64x4({{<4 x i64>\\*|ptr}} {{.*}} %_1)\n #[no_mangle]\n pub fn test_UnionI64x4(_: UnionI64x4) { loop {} }\n \n pub union UnionI64x4_{ a: i64x4, b: (), c:i64x4, d: Unhab, e: ((),()), f: UnionI64x4 }\n \n-// CHECK: define void @test_UnionI64x4_({{<4 x i64>\\*|ptr}} {{.*}} %_1)\n+// CHECK: define {{(dso_local )?}}void @test_UnionI64x4_({{<4 x i64>\\*|ptr}} {{.*}} %_1)\n #[no_mangle]\n pub fn test_UnionI64x4_(_: UnionI64x4_) { loop {} }\n \n pub union UnionI64x4I64{ a: i64x4, b: i64 }\n \n-// CHECK: define void @test_UnionI64x4I64({{%UnionI64x4I64\\*|ptr}} {{.*}} %_1)\n+// CHECK: define {{(dso_local )?}}void @test_UnionI64x4I64({{%UnionI64x4I64\\*|ptr}} {{.*}} %_1)\n #[no_mangle]\n pub fn test_UnionI64x4I64(_: UnionI64x4I64) { loop {} }\n \n pub union UnionI64x4Tuple{ a: i64x4, b: (i64, i64, i64, i64) }\n \n-// CHECK: define void @test_UnionI64x4Tuple({{%UnionI64x4Tuple\\*|ptr}} {{.*}} %_1)\n+// CHECK: define {{(dso_local )?}}void @test_UnionI64x4Tuple({{%UnionI64x4Tuple\\*|ptr}} {{.*}} %_1)\n #[no_mangle]\n pub fn test_UnionI64x4Tuple(_: UnionI64x4Tuple) { loop {} }\n \n \n pub union UnionF32{a:f32}\n \n-// CHECK: define float @test_UnionF32(float %_1)\n+// CHECK: define {{(dso_local )?}}float @test_UnionF32(float %_1)\n #[no_mangle]\n pub fn test_UnionF32(_: UnionF32) -> UnionF32 { loop {} }\n \n pub union UnionF32F32{a:f32, b:f32}\n \n-// CHECK: define float @test_UnionF32F32(float %_1)\n+// CHECK: define {{(dso_local )?}}float @test_UnionF32F32(float %_1)\n #[no_mangle]\n pub fn test_UnionF32F32(_: UnionF32F32) -> UnionF32F32 { loop {} }\n \n pub union UnionF32U32{a:f32, b:u32}\n \n-// CHECK: define i32 @test_UnionF32U32(i32{{( %0)?}})\n+// CHECK: define {{(dso_local )?}}i32 @test_UnionF32U32(i32{{( %0)?}})\n #[no_mangle]\n pub fn test_UnionF32U32(_: UnionF32U32) -> UnionF32U32 { loop {} }\n \n pub union UnionU128{a:u128}\n-// CHECK: define i128 @test_UnionU128(i128 %_1)\n+// CHECK: define {{(dso_local )?}}i128 @test_UnionU128(i128 %_1)\n #[no_mangle]\n pub fn test_UnionU128(_: UnionU128) -> UnionU128 { loop {} }\n \n #[repr(C)]\n pub union CUnionU128{a:u128}\n-// CHECK: define void @test_CUnionU128({{%CUnionU128\\*|ptr}} {{.*}} %_1)\n+// CHECK: define {{(dso_local )?}}void @test_CUnionU128({{%CUnionU128\\*|ptr}} {{.*}} %_1)\n #[no_mangle]\n pub fn test_CUnionU128(_: CUnionU128) { loop {} }\n \n pub union UnionBool { b:bool }\n-// CHECK: define noundef zeroext i1 @test_UnionBool(i8 %b)\n+// CHECK: define {{(dso_local )?}}noundef zeroext i1 @test_UnionBool(i8 %b)\n #[no_mangle]\n pub fn test_UnionBool(b: UnionBool) -> bool { unsafe { b.b }  }\n // CHECK: %0 = trunc i8 %b to i1"}]}