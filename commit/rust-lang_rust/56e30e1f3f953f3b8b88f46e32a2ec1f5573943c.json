{"sha": "56e30e1f3f953f3b8b88f46e32a2ec1f5573943c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZTMwZTFmM2Y5NTNmM2I4Yjg4ZjQ2ZTMyYTJlYzFmNTU3Mzk0M2M=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-06-11T20:28:22Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-06-14T20:39:13Z"}, "message": "Tweak transparent enums and unions diagnostic spans", "tree": {"sha": "e993ce0a55a1bbcdd1a4c6c74cc77395ddcd1cfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e993ce0a55a1bbcdd1a4c6c74cc77395ddcd1cfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56e30e1f3f953f3b8b88f46e32a2ec1f5573943c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56e30e1f3f953f3b8b88f46e32a2ec1f5573943c", "html_url": "https://github.com/rust-lang/rust/commit/56e30e1f3f953f3b8b88f46e32a2ec1f5573943c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56e30e1f3f953f3b8b88f46e32a2ec1f5573943c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9606f6fa64926a84d82e3c62dbdc57f5c10f756d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9606f6fa64926a84d82e3c62dbdc57f5c10f756d", "html_url": "https://github.com/rust-lang/rust/commit/9606f6fa64926a84d82e3c62dbdc57f5c10f756d"}], "stats": {"total": 175, "additions": 83, "deletions": 92}, "files": [{"sha": "5b51c02b812e06995302e6c7ce4b9b312d257a0c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 45, "deletions": 23, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/56e30e1f3f953f3b8b88f46e32a2ec1f5573943c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e30e1f3f953f3b8b88f46e32a2ec1f5573943c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=56e30e1f3f953f3b8b88f46e32a2ec1f5573943c", "patch": "@@ -1794,25 +1794,39 @@ fn check_transparent<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, def_id: DefId) {\n     if !adt.repr.transparent() {\n         return;\n     }\n+    let sp = tcx.sess.source_map().def_span(sp);\n \n     if adt.is_enum() {\n         if !tcx.features().transparent_enums {\n-            emit_feature_err(&tcx.sess.parse_sess,\n-                             sym::transparent_enums,\n-                             sp,\n-                             GateIssue::Language,\n-                             \"transparent enums are unstable\");\n+            emit_feature_err(\n+                &tcx.sess.parse_sess,\n+                sym::transparent_enums,\n+                sp,\n+                GateIssue::Language,\n+                \"transparent enums are unstable\",\n+            );\n         }\n         if adt.variants.len() != 1 {\n             let variant_spans: Vec<_> = adt.variants.iter().map(|variant| {\n                 tcx.hir().span_if_local(variant.def_id).unwrap()\n             }).collect();\n-            let mut err = struct_span_err!(tcx.sess, sp, E0731,\n-                            \"transparent enum needs exactly one variant, but has {}\",\n-                            adt.variants.len());\n-            if !variant_spans.is_empty() {\n-                err.span_note(variant_spans, &format!(\"the following variants exist on `{}`\",\n-                                                      tcx.def_path_str(def_id)));\n+            let msg = format!(\n+                \"needs exactly one variant, but has {}\",\n+                adt.variants.len(),\n+            );\n+            let mut err = struct_span_err!(tcx.sess, sp, E0731, \"transparent enum {}\", msg);\n+            err.span_label(sp, &msg);\n+            match &variant_spans[..] {\n+                &[] => {},\n+                &[ref start.., ref end] => {\n+                    for variant_span in start {\n+                        err.span_label(*variant_span, \"\");\n+                    }\n+                    err.span_label(*end, &format!(\n+                        \"too many variants in `{}`\",\n+                        tcx.def_path_str(def_id),\n+                    ));\n+                },\n             }\n             err.emit();\n             if adt.variants.is_empty() {\n@@ -1847,23 +1861,31 @@ fn check_transparent<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, def_id: DefId) {\n     if non_zst_count != 1 {\n         let field_spans: Vec<_> = non_zst_fields.map(|(span, _zst, _align1)| span).collect();\n \n-        let mut err = struct_span_err!(tcx.sess, sp, E0690,\n-                         \"{}transparent {} needs exactly one non-zero-sized field, but has {}\",\n-                         if adt.is_enum() { \"the variant of a \" } else { \"\" },\n-                         adt.descr(),\n-                         non_zst_count);\n-        if !field_spans.is_empty() {\n-            err.span_note(field_spans,\n-                          &format!(\"the following non-zero-sized fields exist on `{}`:\",\n-                                   tcx.def_path_str(def_id)));\n+        let msg = format!(\"needs exactly one non-zero-sized field, but has {}\", non_zst_count);\n+        let mut err = struct_span_err!(\n+            tcx.sess,\n+            sp,\n+            E0690,\n+            \"{}transparent {} {}\",\n+            if adt.is_enum() { \"the variant of a \" } else { \"\" },\n+            adt.descr(),\n+            msg,\n+        );\n+        err.span_label(sp, &msg);\n+        for sp in &field_spans {\n+            err.span_label(*sp, \"this field is non-zero-sized\");\n         }\n         err.emit();\n     }\n     for (span, zst, align1) in field_infos {\n         if zst && !align1 {\n-            span_err!(tcx.sess, span, E0691,\n-                      \"zero-sized field in transparent {} has alignment larger than 1\",\n-                      adt.descr());\n+            struct_span_err!(\n+                tcx.sess,\n+                span,\n+                E0691,\n+                \"zero-sized field in transparent {} has alignment larger than 1\",\n+                adt.descr(),\n+            ).span_label(span, \"has alignment larger than 1\").emit();\n         }\n     }\n }"}, {"sha": "8ba079b89f50952841fc9f304fe4895c23d6c914", "filename": "src/test/ui/feature-gates/feature-gate-transparent_enums.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56e30e1f3f953f3b8b88f46e32a2ec1f5573943c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56e30e1f3f953f3b8b88f46e32a2ec1f5573943c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_enums.stderr?ref=56e30e1f3f953f3b8b88f46e32a2ec1f5573943c", "patch": "@@ -1,10 +1,8 @@\n error[E0658]: transparent enums are unstable\n   --> $DIR/feature-gate-transparent_enums.rs:2:1\n    |\n-LL | / enum OkButUnstableEnum {\n-LL | |     Foo((), String, ()),\n-LL | | }\n-   | |_^\n+LL | enum OkButUnstableEnum {\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/60405\n    = help: add #![feature(transparent_enums)] to the crate attributes to enable"}, {"sha": "341324c3d6764f87b38c02bba96add7fcede6594", "filename": "src/test/ui/feature-gates/feature-gate-transparent_unions.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/56e30e1f3f953f3b8b88f46e32a2ec1f5573943c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_unions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56e30e1f3f953f3b8b88f46e32a2ec1f5573943c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_unions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_unions.stderr?ref=56e30e1f3f953f3b8b88f46e32a2ec1f5573943c", "patch": "@@ -1,11 +1,8 @@\n error[E0658]: transparent unions are unstable\n   --> $DIR/feature-gate-transparent_unions.rs:2:1\n    |\n-LL | / union OkButUnstableUnion {\n-LL | |     field: u8,\n-LL | |     zst: (),\n-LL | | }\n-   | |_^\n+LL | union OkButUnstableUnion {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/60405\n    = help: add #![feature(transparent_unions)] to the crate attributes to enable"}, {"sha": "f0c1fbe8ac9e1ba1df67730e303384df3c6eb45c", "filename": "src/test/ui/repr/repr-transparent.stderr", "status": "modified", "additions": 34, "deletions": 60, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/56e30e1f3f953f3b8b88f46e32a2ec1f5573943c/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56e30e1f3f953f3b8b88f46e32a2ec1f5573943c/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr?ref=56e30e1f3f953f3b8b88f46e32a2ec1f5573943c", "patch": "@@ -2,61 +2,57 @@ error[E0690]: transparent struct needs exactly one non-zero-sized field, but has\n   --> $DIR/repr-transparent.rs:11:1\n    |\n LL | struct NoFields;\n-   | ^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 0\n \n error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 0\n   --> $DIR/repr-transparent.rs:14:1\n    |\n LL | struct ContainsOnlyZst(());\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 0\n \n error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 0\n   --> $DIR/repr-transparent.rs:17:1\n    |\n LL | struct ContainsOnlyZstArray([bool; 0]);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 0\n \n error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 0\n   --> $DIR/repr-transparent.rs:20:1\n    |\n LL | struct ContainsMultipleZst(PhantomData<*const i32>, NoFields);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 0\n \n error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 2\n   --> $DIR/repr-transparent.rs:24:1\n    |\n LL | struct MultipleNonZst(u8, u8);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: the following non-zero-sized fields exist on `MultipleNonZst`:\n-  --> $DIR/repr-transparent.rs:24:23\n-   |\n-LL | struct MultipleNonZst(u8, u8);\n-   |                       ^^  ^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^--^^--^^\n+   | |                     |   |\n+   | |                     |   this field is non-zero-sized\n+   | |                     this field is non-zero-sized\n+   | needs exactly one non-zero-sized field, but has 2\n \n error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 2\n   --> $DIR/repr-transparent.rs:30:1\n    |\n LL | pub struct StructWithProjection(f32, <f32 as Mirror>::It);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: the following non-zero-sized fields exist on `StructWithProjection`:\n-  --> $DIR/repr-transparent.rs:30:33\n-   |\n-LL | pub struct StructWithProjection(f32, <f32 as Mirror>::It);\n-   |                                 ^^^  ^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---^^-------------------^^\n+   | |                               |    |\n+   | |                               |    this field is non-zero-sized\n+   | |                               this field is non-zero-sized\n+   | needs exactly one non-zero-sized field, but has 2\n \n error[E0691]: zero-sized field in transparent struct has alignment larger than 1\n   --> $DIR/repr-transparent.rs:34:32\n    |\n LL | struct NontrivialAlignZst(u32, [u16; 0]);\n-   |                                ^^^^^^^^\n+   |                                ^^^^^^^^ has alignment larger than 1\n \n error[E0691]: zero-sized field in transparent struct has alignment larger than 1\n   --> $DIR/repr-transparent.rs:40:24\n    |\n LL | struct GenericAlign<T>(ZstAlign32<T>, u32);\n-   |                        ^^^^^^^^^^^^^\n+   |                        ^^^^^^^^^^^^^ has alignment larger than 1\n \n error[E0084]: unsupported representation for zero-variant enum\n   --> $DIR/repr-transparent.rs:42:1\n@@ -70,71 +66,49 @@ error[E0731]: transparent enum needs exactly one variant, but has 0\n   --> $DIR/repr-transparent.rs:43:1\n    |\n LL | enum Void {}\n-   | ^^^^^^^^^^^^\n+   | ^^^^^^^^^ needs exactly one variant, but has 0\n \n error[E0690]: the variant of a transparent enum needs exactly one non-zero-sized field, but has 0\n   --> $DIR/repr-transparent.rs:47:1\n    |\n-LL | / enum FieldlessEnum {\n-LL | |     Foo,\n-LL | | }\n-   | |_^\n+LL | enum FieldlessEnum {\n+   | ^^^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 0\n \n error[E0690]: the variant of a transparent enum needs exactly one non-zero-sized field, but has 2\n   --> $DIR/repr-transparent.rs:52:1\n    |\n-LL | / enum TooManyFieldsEnum {\n-LL | |     Foo(u32, String),\n-LL | | }\n-   | |_^\n-   |\n-note: the following non-zero-sized fields exist on `TooManyFieldsEnum`:\n-  --> $DIR/repr-transparent.rs:53:9\n-   |\n+LL | enum TooManyFieldsEnum {\n+   | ^^^^^^^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 2\n LL |     Foo(u32, String),\n-   |         ^^^  ^^^^^^\n+   |         ---  ------ this field is non-zero-sized\n+   |         |\n+   |         this field is non-zero-sized\n \n error[E0731]: transparent enum needs exactly one variant, but has 2\n   --> $DIR/repr-transparent.rs:58:1\n    |\n-LL | / enum TooManyVariants {\n-LL | |     Foo(String),\n-LL | |     Bar,\n-LL | | }\n-   | |_^\n-   |\n-note: the following variants exist on `TooManyVariants`\n-  --> $DIR/repr-transparent.rs:59:5\n-   |\n+LL | enum TooManyVariants {\n+   | ^^^^^^^^^^^^^^^^^^^^ needs exactly one variant, but has 2\n LL |     Foo(String),\n-   |     ^^^^^^^^^^^\n+   |     -----------\n LL |     Bar,\n-   |     ^^^\n+   |     --- too many variants in `TooManyVariants`\n \n error[E0690]: transparent union needs exactly one non-zero-sized field, but has 0\n   --> $DIR/repr-transparent.rs:64:1\n    |\n-LL | / union UnitUnion {\n-LL | |     u: (),\n-LL | | }\n-   | |_^\n+LL | union UnitUnion {\n+   | ^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 0\n \n error[E0690]: transparent union needs exactly one non-zero-sized field, but has 2\n   --> $DIR/repr-transparent.rs:69:1\n    |\n-LL | / union TooManyFields {\n-LL | |     u: u32,\n-LL | |     s: i32\n-LL | | }\n-   | |_^\n-   |\n-note: the following non-zero-sized fields exist on `TooManyFields`:\n-  --> $DIR/repr-transparent.rs:70:5\n-   |\n+LL | union TooManyFields {\n+   | ^^^^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 2\n LL |     u: u32,\n-   |     ^^^^^^\n+   |     ------ this field is non-zero-sized\n LL |     s: i32\n-   |     ^^^^^^\n+   |     ------ this field is non-zero-sized\n \n error: aborting due to 15 previous errors\n "}]}