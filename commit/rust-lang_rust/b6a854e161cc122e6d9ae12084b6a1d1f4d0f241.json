{"sha": "b6a854e161cc122e6d9ae12084b6a1d1f4d0f241", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2YTg1NGUxNjFjYzEyMmU2ZDlhZTEyMDg0YjZhMWQxZjRkMGYyNDE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-30T13:10:07Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-30T13:10:07Z"}, "message": "update ra_ide_api to use builtins", "tree": {"sha": "f01cf9c3589ae920c50696ce244c98b2454834b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f01cf9c3589ae920c50696ce244c98b2454834b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6a854e161cc122e6d9ae12084b6a1d1f4d0f241", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6a854e161cc122e6d9ae12084b6a1d1f4d0f241", "html_url": "https://github.com/rust-lang/rust/commit/b6a854e161cc122e6d9ae12084b6a1d1f4d0f241", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6a854e161cc122e6d9ae12084b6a1d1f4d0f241/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6ee9d681c7c745e95f19badef271fec34ec2e36", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ee9d681c7c745e95f19badef271fec34ec2e36", "html_url": "https://github.com/rust-lang/rust/commit/c6ee9d681c7c745e95f19badef271fec34ec2e36"}], "stats": {"total": 137, "additions": 82, "deletions": 55}, "files": [{"sha": "99da241422912887d09d94a29c729e4e795863dc", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b6a854e161cc122e6d9ae12084b6a1d1f4d0f241/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6a854e161cc122e6d9ae12084b6a1d1f4d0f241/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=b6a854e161cc122e6d9ae12084b6a1d1f4d0f241", "patch": "@@ -17,6 +17,12 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n         hir::ModuleDef::Module(module) => {\n             let module_scope = module.scope(ctx.db);\n             for (name, res) in module_scope.entries() {\n+                if let Some(hir::ModuleDef::BuiltinType(..)) = res.def.as_ref().take_types() {\n+                    if ctx.use_item_syntax.is_some() {\n+                        tested_by!(dont_complete_primitive_in_use);\n+                        continue;\n+                    }\n+                }\n                 if Some(module) == ctx.module {\n                     if let Some(import) = res.import {\n                         if let Either::A(use_tree) = module.import_source(ctx.db, import) {\n@@ -88,6 +94,20 @@ mod tests {\n         assert_eq!(completions.len(), 2);\n     }\n \n+    #[test]\n+    fn dont_complete_primitive_in_use() {\n+        covers!(dont_complete_primitive_in_use);\n+        let completions = do_completion(r\"use self::<|>;\", CompletionKind::BuiltinType);\n+        assert!(completions.is_empty());\n+    }\n+\n+    #[test]\n+    fn completes_primitives() {\n+        let completions =\n+            do_completion(r\"fn main() { let _: <|> = 92; }\", CompletionKind::BuiltinType);\n+        assert_eq!(completions.len(), 17);\n+    }\n+\n     #[test]\n     fn completes_mod_with_docs() {\n         check_reference_completion("}, {"sha": "6f2a60640eb2e32c3f16b68b77c19d6a6c67be03", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6a854e161cc122e6d9ae12084b6a1d1f4d0f241/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6a854e161cc122e6d9ae12084b6a1d1f4d0f241/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=b6a854e161cc122e6d9ae12084b6a1d1f4d0f241", "patch": "@@ -78,6 +78,7 @@ pub enum CompletionItemKind {\n     Keyword,\n     Module,\n     Function,\n+    BuiltinType,\n     Struct,\n     Enum,\n     EnumVariant,\n@@ -102,6 +103,7 @@ pub(crate) enum CompletionKind {\n     Magic,\n     Snippet,\n     Postfix,\n+    BuiltinType,\n }\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone)]"}, {"sha": "d405161d63a3226f710dea140ed2b8678bb3d8b7", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b6a854e161cc122e6d9ae12084b6a1d1f4d0f241/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6a854e161cc122e6d9ae12084b6a1d1f4d0f241/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=b6a854e161cc122e6d9ae12084b6a1d1f4d0f241", "patch": "@@ -57,6 +57,7 @@ impl Completions {\n             }\n             Some(it) => it,\n         };\n+        let mut completion_kind = CompletionKind::Reference;\n         let (kind, docs) = match def {\n             Resolution::Def(Module(it)) => (CompletionItemKind::Module, it.docs(ctx.db)),\n             Resolution::Def(Function(func)) => {\n@@ -70,14 +71,18 @@ impl Completions {\n             Resolution::Def(Static(it)) => (CompletionItemKind::Static, it.docs(ctx.db)),\n             Resolution::Def(Trait(it)) => (CompletionItemKind::Trait, it.docs(ctx.db)),\n             Resolution::Def(TypeAlias(it)) => (CompletionItemKind::TypeAlias, it.docs(ctx.db)),\n+            Resolution::Def(BuiltinType(..)) => {\n+                completion_kind = CompletionKind::BuiltinType;\n+                (CompletionItemKind::BuiltinType, None)\n+            }\n             Resolution::GenericParam(..) => (CompletionItemKind::TypeParam, None),\n             Resolution::LocalBinding(..) => (CompletionItemKind::Binding, None),\n             Resolution::SelfType(..) => (\n                 CompletionItemKind::TypeParam, // (does this need its own kind?)\n                 None,\n             ),\n         };\n-        CompletionItem::new(CompletionKind::Reference, ctx.source_range(), local_name)\n+        CompletionItem::new(completion_kind, ctx.source_range(), local_name)\n             .kind(kind)\n             .set_documentation(docs)\n             .add_to(self)"}, {"sha": "e19c071b08a7fdee36b4b10fb1241d45d2980ac9", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b6a854e161cc122e6d9ae12084b6a1d1f4d0f241/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6a854e161cc122e6d9ae12084b6a1d1f4d0f241/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=b6a854e161cc122e6d9ae12084b6a1d1f4d0f241", "patch": "@@ -165,8 +165,11 @@ impl NavigationTarget {\n         }\n     }\n \n-    pub(crate) fn from_def(db: &RootDatabase, module_def: hir::ModuleDef) -> NavigationTarget {\n-        match module_def {\n+    pub(crate) fn from_def(\n+        db: &RootDatabase,\n+        module_def: hir::ModuleDef,\n+    ) -> Option<NavigationTarget> {\n+        let nav = match module_def {\n             hir::ModuleDef::Module(module) => NavigationTarget::from_module(db, module),\n             hir::ModuleDef::Function(func) => NavigationTarget::from_function(db, func),\n             hir::ModuleDef::Struct(s) => {\n@@ -201,7 +204,11 @@ impl NavigationTarget {\n                 let (file_id, node) = e.source(db);\n                 NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n-        }\n+            hir::ModuleDef::BuiltinType(..) => {\n+                return None;\n+            }\n+        };\n+        Some(nav)\n     }\n \n     pub(crate) fn from_impl_block("}, {"sha": "97b367115ca90a98e1b9f9241a3db31cdb427c41", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b6a854e161cc122e6d9ae12084b6a1d1f4d0f241/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6a854e161cc122e6d9ae12084b6a1d1f4d0f241/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=b6a854e161cc122e6d9ae12084b6a1d1f4d0f241", "patch": "@@ -62,7 +62,10 @@ pub(crate) fn reference_definition(\n         Some(Macro(mac)) => return Exact(NavigationTarget::from_macro_def(db, mac)),\n         Some(FieldAccess(field)) => return Exact(NavigationTarget::from_field(db, field)),\n         Some(AssocItem(assoc)) => return Exact(NavigationTarget::from_impl_item(db, assoc)),\n-        Some(Def(def)) => return Exact(NavigationTarget::from_def(db, def)),\n+        Some(Def(def)) => match NavigationTarget::from_def(db, def) {\n+            Some(nav) => return Exact(nav),\n+            None => return Approximate(vec![]),\n+        },\n         Some(SelfType(ty)) => {\n             if let Some((def_id, _)) = ty.as_adt() {\n                 return Exact(NavigationTarget::from_adt_def(db, def_id));"}, {"sha": "9cb991de5ef54e8569b38cbb94f43730b9f715f5", "filename": "crates/ra_ide_api/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6a854e161cc122e6d9ae12084b6a1d1f4d0f241/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6a854e161cc122e6d9ae12084b6a1d1f4d0f241/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs?ref=b6a854e161cc122e6d9ae12084b6a1d1f4d0f241", "patch": "@@ -6,4 +6,5 @@ test_utils::marks!(\n     goto_definition_works_for_named_fields\n     call_info_bad_offset\n     dont_complete_current_use\n+    dont_complete_primitive_in_use\n );"}, {"sha": "3a04a51cd82ec4f206e9da971ffe37ef1cf0576d", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 38, "deletions": 50, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/b6a854e161cc122e6d9ae12084b6a1d1f4d0f241/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6a854e161cc122e6d9ae12084b6a1d1f4d0f241/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=b6a854e161cc122e6d9ae12084b6a1d1f4d0f241", "patch": "@@ -30,14 +30,6 @@ fn is_control_keyword(kind: SyntaxKind) -> bool {\n     }\n }\n \n-fn is_prim_type(node: &ast::NameRef) -> bool {\n-    match node.text().as_str() {\n-        \"u8\" | \"i8\" | \"u16\" | \"i16\" | \"u32\" | \"i32\" | \"u64\" | \"i64\" | \"u128\" | \"i128\" | \"usize\"\n-        | \"isize\" | \"f32\" | \"f64\" | \"bool\" | \"char\" | \"str\" => true,\n-        _ => false,\n-    }\n-}\n-\n pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRange> {\n     let _p = profile(\"highlight\");\n     let source_file = db.parse(file_id).tree;\n@@ -71,51 +63,47 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n             NAME_REF => {\n                 if let Some(name_ref) = node.as_node().and_then(ast::NameRef::cast) {\n                     // FIXME: revisit this after #1340\n-                    if is_prim_type(name_ref) {\n-                        \"type\"\n-                    } else {\n-                        use crate::name_ref_kind::{classify_name_ref, NameRefKind::*};\n-                        use hir::{ModuleDef, ImplItem};\n+                    use crate::name_ref_kind::{classify_name_ref, NameRefKind::*};\n+                    use hir::{ModuleDef, ImplItem};\n \n-                        // FIXME: try to reuse the SourceAnalyzers\n-                        let analyzer =\n-                            hir::SourceAnalyzer::new(db, file_id, name_ref.syntax(), None);\n-                        match classify_name_ref(db, &analyzer, name_ref) {\n-                            Some(Method(_)) => \"function\",\n-                            Some(Macro(_)) => \"macro\",\n-                            Some(FieldAccess(_)) => \"field\",\n-                            Some(AssocItem(ImplItem::Method(_))) => \"function\",\n-                            Some(AssocItem(ImplItem::Const(_))) => \"constant\",\n-                            Some(AssocItem(ImplItem::TypeAlias(_))) => \"type\",\n-                            Some(Def(ModuleDef::Module(_))) => \"module\",\n-                            Some(Def(ModuleDef::Function(_))) => \"function\",\n-                            Some(Def(ModuleDef::Struct(_))) => \"type\",\n-                            Some(Def(ModuleDef::Union(_))) => \"type\",\n-                            Some(Def(ModuleDef::Enum(_))) => \"type\",\n-                            Some(Def(ModuleDef::EnumVariant(_))) => \"constant\",\n-                            Some(Def(ModuleDef::Const(_))) => \"constant\",\n-                            Some(Def(ModuleDef::Static(_))) => \"constant\",\n-                            Some(Def(ModuleDef::Trait(_))) => \"type\",\n-                            Some(Def(ModuleDef::TypeAlias(_))) => \"type\",\n-                            Some(SelfType(_)) => \"type\",\n-                            Some(Pat(ptr)) => {\n-                                binding_hash = Some({\n-                                    let text = ptr\n-                                        .syntax_node_ptr()\n-                                        .to_node(&source_file.syntax())\n-                                        .text()\n-                                        .to_smol_string();\n-                                    let shadow_count =\n-                                        bindings_shadow_count.entry(text.clone()).or_default();\n-                                    calc_binding_hash(file_id, &text, *shadow_count)\n-                                });\n+                    // FIXME: try to reuse the SourceAnalyzers\n+                    let analyzer = hir::SourceAnalyzer::new(db, file_id, name_ref.syntax(), None);\n+                    match classify_name_ref(db, &analyzer, name_ref) {\n+                        Some(Method(_)) => \"function\",\n+                        Some(Macro(_)) => \"macro\",\n+                        Some(FieldAccess(_)) => \"field\",\n+                        Some(AssocItem(ImplItem::Method(_))) => \"function\",\n+                        Some(AssocItem(ImplItem::Const(_))) => \"constant\",\n+                        Some(AssocItem(ImplItem::TypeAlias(_))) => \"type\",\n+                        Some(Def(ModuleDef::Module(_))) => \"module\",\n+                        Some(Def(ModuleDef::Function(_))) => \"function\",\n+                        Some(Def(ModuleDef::Struct(_))) => \"type\",\n+                        Some(Def(ModuleDef::Union(_))) => \"type\",\n+                        Some(Def(ModuleDef::Enum(_))) => \"type\",\n+                        Some(Def(ModuleDef::EnumVariant(_))) => \"constant\",\n+                        Some(Def(ModuleDef::Const(_))) => \"constant\",\n+                        Some(Def(ModuleDef::Static(_))) => \"constant\",\n+                        Some(Def(ModuleDef::Trait(_))) => \"type\",\n+                        Some(Def(ModuleDef::TypeAlias(_))) => \"type\",\n+                        Some(Def(ModuleDef::BuiltinType(_))) => \"type\",\n+                        Some(SelfType(_)) => \"type\",\n+                        Some(Pat(ptr)) => {\n+                            binding_hash = Some({\n+                                let text = ptr\n+                                    .syntax_node_ptr()\n+                                    .to_node(&source_file.syntax())\n+                                    .text()\n+                                    .to_smol_string();\n+                                let shadow_count =\n+                                    bindings_shadow_count.entry(text.clone()).or_default();\n+                                calc_binding_hash(file_id, &text, *shadow_count)\n+                            });\n \n-                                \"variable\"\n-                            }\n-                            Some(SelfParam(_)) => \"type\",\n-                            Some(GenericParam(_)) => \"type\",\n-                            None => \"text\",\n+                            \"variable\"\n                         }\n+                        Some(SelfParam(_)) => \"type\",\n+                        Some(GenericParam(_)) => \"type\",\n+                        None => \"text\",\n                     }\n                 } else {\n                     \"text\""}, {"sha": "1b349d02a42148b2c1b33c48547c037047da7259", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6a854e161cc122e6d9ae12084b6a1d1f4d0f241/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6a854e161cc122e6d9ae12084b6a1d1f4d0f241/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=b6a854e161cc122e6d9ae12084b6a1d1f4d0f241", "patch": "@@ -65,6 +65,7 @@ impl Conv for CompletionItemKind {\n             CompletionItemKind::Struct => Struct,\n             CompletionItemKind::Enum => Enum,\n             CompletionItemKind::EnumVariant => EnumMember,\n+            CompletionItemKind::BuiltinType => Struct,\n             CompletionItemKind::Binding => Variable,\n             CompletionItemKind::Field => Field,\n             CompletionItemKind::Trait => Interface,"}]}