{"sha": "84c23565901c0d9b7af41d372b9f2d1e2d6c6394", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0YzIzNTY1OTAxYzBkOWI3YWY0MWQzNzJiOWYyZDFlMmQ2YzYzOTQ=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2019-06-16T23:53:17Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-06-16T23:53:17Z"}, "message": "handle unicode chars in closures (#3632)\n\nThe `NotUnicode` branch was unecessarily put on a new line, although it\r\nwas within max width:\r\n\r\n```diff\r\n fn baz() {\r\n     let our_error_b = result_b_from_func.or_else(|e| match e {\r\n         NotPresent => Err(e).chain_err(|| \"env var wasn't provided\"),\r\n-        NotUnicode(_) => Err(e).chain_err(|| \"env var was very very very bork\u00e6\u2013\u2021\u00e5\u00ad\u2014\u00e5\u0152\u2013\u00e3\"),\r\n+        NotUnicode(_) => {\r\n+            Err(e).chain_err(|| \"env var was very very very bork\u00e6\u2013\u2021\u00e5\u00ad\u2014\u00e5\u0152\u2013\u00e3\")\r\n+        }\r\n     });\r\n }\r\n```", "tree": {"sha": "905e8b2a5aa0a3c0bdd48b424ace4c03b0d172a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/905e8b2a5aa0a3c0bdd48b424ace4c03b0d172a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84c23565901c0d9b7af41d372b9f2d1e2d6c6394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84c23565901c0d9b7af41d372b9f2d1e2d6c6394", "html_url": "https://github.com/rust-lang/rust/commit/84c23565901c0d9b7af41d372b9f2d1e2d6c6394", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84c23565901c0d9b7af41d372b9f2d1e2d6c6394/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "944fc57e10222e5b0b57772c6a18b21392671c2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/944fc57e10222e5b0b57772c6a18b21392671c2a", "html_url": "https://github.com/rust-lang/rust/commit/944fc57e10222e5b0b57772c6a18b21392671c2a"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "e87327fb3e769ff51d86015f3e734d12ba95f077", "filename": "src/expr.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/84c23565901c0d9b7af41d372b9f2d1e2d6c6394/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84c23565901c0d9b7af41d372b9f2d1e2d6c6394/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=84c23565901c0d9b7af41d372b9f2d1e2d6c6394", "patch": "@@ -2028,6 +2028,15 @@ fn shape_from_rhs_tactic(\n     }\n }\n \n+/// Returns true if formatting next_line_rhs is better on a new line when compared to the\n+/// original's line formatting.\n+///\n+/// It is considered better if:\n+/// 1. the tactic is ForceNextLineWithoutIndent\n+/// 2. next_line_rhs doesn't have newlines\n+/// 3. the original line has more newlines than next_line_rhs\n+/// 4. the original formatting of the first line ends with `(`, `{`, or `[` and next_line_rhs\n+///    doesn't\n pub(crate) fn prefer_next_line(\n     orig_rhs: &str,\n     next_line_rhs: &str,"}, {"sha": "4c31f670d4d471ec74620806827483173c070c55", "filename": "src/lists.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/84c23565901c0d9b7af41d372b9f2d1e2d6c6394/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84c23565901c0d9b7af41d372b9f2d1e2d6c6394/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=84c23565901c0d9b7af41d372b9f2d1e2d6c6394", "patch": "@@ -10,7 +10,10 @@ use crate::config::lists::*;\n use crate::config::{Config, IndentStyle};\n use crate::rewrite::RewriteContext;\n use crate::shape::{Indent, Shape};\n-use crate::utils::{count_newlines, first_line_width, last_line_width, mk_sp, starts_with_newline};\n+use crate::utils::{\n+    count_newlines, first_line_width, last_line_width, mk_sp, starts_with_newline,\n+    unicode_str_width,\n+};\n use crate::visitor::SnippetProvider;\n \n pub(crate) struct ListFormatting<'a> {\n@@ -386,7 +389,7 @@ where\n                         result.push('\\n');\n                         result.push_str(indent_str);\n                         // This is the width of the item (without comments).\n-                        line_len = item.item.as_ref().map_or(0, String::len);\n+                        line_len = item.item.as_ref().map_or(0, |s| unicode_str_width(&s));\n                     }\n                 } else {\n                     result.push(' ');\n@@ -808,7 +811,7 @@ where\n pub(crate) fn total_item_width(item: &ListItem) -> usize {\n     comment_len(item.pre_comment.as_ref().map(|x| &(*x)[..]))\n         + comment_len(item.post_comment.as_ref().map(|x| &(*x)[..]))\n-        + item.item.as_ref().map_or(0, String::len)\n+        + &item.item.as_ref().map_or(0, |s| unicode_str_width(&s))\n }\n \n fn comment_len(comment: Option<&str>) -> usize {"}, {"sha": "2f542c3e1aa6569ff793a2fa7be9f28edb92b2c6", "filename": "src/matches.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84c23565901c0d9b7af41d372b9f2d1e2d6c6394/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84c23565901c0d9b7af41d372b9f2d1e2d6c6394/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=84c23565901c0d9b7af41d372b9f2d1e2d6c6394", "patch": "@@ -468,6 +468,9 @@ fn rewrite_match_body(\n         next_line_body_shape.width,\n     );\n     match (orig_body, next_line_body) {\n+        (Some(ref orig_str), Some(ref next_line_str)) if orig_str == next_line_str => {\n+            combine_orig_body(orig_str)\n+        }\n         (Some(ref orig_str), Some(ref next_line_str))\n             if prefer_next_line(orig_str, next_line_str, RhsTactics::Default) =>\n         {"}, {"sha": "4c2119af5754b50be2c8826e97de73043f6ab435", "filename": "tests/source/unicode.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84c23565901c0d9b7af41d372b9f2d1e2d6c6394/tests%2Fsource%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84c23565901c0d9b7af41d372b9f2d1e2d6c6394/tests%2Fsource%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Funicode.rs?ref=84c23565901c0d9b7af41d372b9f2d1e2d6c6394", "patch": "@@ -23,3 +23,11 @@ pub fn bar(config: &Config) {\n         csv.write_record(None::<&[u8]>).unwrap();\n     }\n }\n+\n+// The NotUnicode line is below 100 wrt chars but over it wrt String::len\n+fn baz() {\n+    let our_error_b = result_b_from_func.or_else(|e| match e {\n+        NotPresent => Err(e).chain_err(|| \"env var wasn't provided\"),\n+        NotUnicode(_) => Err(e).chain_err(|| \"env var was very very very bork\u00e6\u2013\u2021\u00e5\u00ad\u2014\u00e5\u0152\u2013\u00e3\"),\n+    });\n+}"}, {"sha": "34a4f46347969c6ccd991dc703fba85d227855a5", "filename": "tests/target/unicode.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84c23565901c0d9b7af41d372b9f2d1e2d6c6394/tests%2Ftarget%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84c23565901c0d9b7af41d372b9f2d1e2d6c6394/tests%2Ftarget%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Funicode.rs?ref=84c23565901c0d9b7af41d372b9f2d1e2d6c6394", "patch": "@@ -20,3 +20,11 @@ pub fn bar(config: &Config) {\n         csv.write_record(None::<&[u8]>).unwrap();\n     }\n }\n+\n+// The NotUnicode line is below 100 wrt chars but over it wrt String::len\n+fn baz() {\n+    let our_error_b = result_b_from_func.or_else(|e| match e {\n+        NotPresent => Err(e).chain_err(|| \"env var wasn't provided\"),\n+        NotUnicode(_) => Err(e).chain_err(|| \"env var was very very very bork\u00e6\u2013\u2021\u00e5\u00ad\u2014\u00e5\u0152\u2013\u00e3\"),\n+    });\n+}"}]}