{"sha": "d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwOGJkNzJlOTc3ZDA1ZjdmZTZkMTE0MGUxMGQ3MzExZjY0ZjBmMjE=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-24T07:46:38Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-24T07:46:38Z"}, "message": "HIR: rename get_parent_node_by_hir_id to get_parent_node", "tree": {"sha": "238502cf65476b27514d4ba9b8d0f016c198d572", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/238502cf65476b27514d4ba9b8d0f016c198d572"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "html_url": "https://github.com/rust-lang/rust/commit/d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7e1f4dcb78739fae7127c9d1ede182420f08a70", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7e1f4dcb78739fae7127c9d1ede182420f08a70", "html_url": "https://github.com/rust-lang/rust/commit/c7e1f4dcb78739fae7127c9d1ede182420f08a70"}], "stats": {"total": 94, "additions": 47, "deletions": 47}, "files": [{"sha": "351f5818f7e67d6397648b008c9b33ca3109b53a", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "patch": "@@ -87,7 +87,7 @@ impl<'a> Code<'a> {\n         match map.get(id) {\n             map::Node::Block(_) => {\n                 //  Use the parent, hopefully an expression node.\n-                Code::from_node(map, map.get_parent_node_by_hir_id(id))\n+                Code::from_node(map, map.get_parent_node(id))\n             }\n             map::Node::Expr(expr) => Some(Code::Expr(expr)),\n             node => FnLikeNode::from_node(node).map(Code::FnLike)"}, {"sha": "bb39f85e1c3bd21d51a3d4b82c04704f5fd0cd20", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "patch": "@@ -347,7 +347,7 @@ impl<'hir> Map<'hir> {\n                 if variant_data.ctor_hir_id().is_none() {\n                     return None;\n                 }\n-                let ctor_of = match self.find_by_hir_id(self.get_parent_node_by_hir_id(hir_id)) {\n+                let ctor_of = match self.find_by_hir_id(self.get_parent_node(hir_id)) {\n                     Some(Node::Item(..)) => def::CtorOf::Struct,\n                     Some(Node::Variant(..)) => def::CtorOf::Variant,\n                     _ => unreachable!(),\n@@ -424,7 +424,7 @@ impl<'hir> Map<'hir> {\n     /// which this is the body of, i.e., a `fn`, `const` or `static`\n     /// item (possibly associated), a closure, or a `hir::AnonConst`.\n     pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {\n-        let parent = self.get_parent_node_by_hir_id(hir_id);\n+        let parent = self.get_parent_node(hir_id);\n         assert!(self.lookup(parent).map_or(false, |e| e.is_body_owner(hir_id)));\n         parent\n     }\n@@ -485,7 +485,7 @@ impl<'hir> Map<'hir> {\n         match self.get(id) {\n             Node::Item(&Item { node: ItemKind::Trait(..), .. }) |\n             Node::Item(&Item { node: ItemKind::TraitAlias(..), .. }) => id,\n-            Node::GenericParam(_) => self.get_parent_node_by_hir_id(id),\n+            Node::GenericParam(_) => self.get_parent_node(id),\n             _ => bug!(\"ty_param_owner: {} not a type parameter\", self.node_to_string(id))\n         }\n     }\n@@ -625,7 +625,7 @@ impl<'hir> Map<'hir> {\n     /// never appear as the parent node. Thus, you can always walk the parent nodes\n     /// from a node to the root of the HIR (unless you get back the same ID here,\n     /// which can happen if the ID is not in the map itself or is just weird).\n-    pub fn get_parent_node_by_hir_id(&self, hir_id: HirId) -> HirId {\n+    pub fn get_parent_node(&self, hir_id: HirId) -> HirId {\n         if self.dep_graph.is_fully_enabled() {\n             let hir_id_owner = hir_id.owner;\n             let def_path_hash = self.definitions.def_path_hash(hir_id_owner);\n@@ -644,7 +644,7 @@ impl<'hir> Map<'hir> {\n             Some(Node::Binding(_)) => (),\n             _ => return false,\n         }\n-        match self.find_by_hir_id(self.get_parent_node_by_hir_id(id)) {\n+        match self.find_by_hir_id(self.get_parent_node(id)) {\n             Some(Node::Item(_)) |\n             Some(Node::TraitItem(_)) |\n             Some(Node::ImplItem(_)) => true,\n@@ -680,7 +680,7 @@ impl<'hir> Map<'hir> {\n     {\n         let mut id = start_id;\n         loop {\n-            let parent_id = self.get_parent_node_by_hir_id(id);\n+            let parent_id = self.get_parent_node(id);\n             if parent_id == CRATE_HIR_ID {\n                 return Ok(CRATE_HIR_ID);\n             }\n@@ -1022,7 +1022,7 @@ impl<'hir> Map<'hir> {\n             Some(Node::Arm(arm)) => arm.span,\n             Some(Node::Block(block)) => block.span,\n             Some(Node::Ctor(..)) => match self.find_by_hir_id(\n-                self.get_parent_node_by_hir_id(hir_id))\n+                self.get_parent_node(hir_id))\n             {\n                 Some(Node::Item(item)) => item.span,\n                 Some(Node::Variant(variant)) => variant.span,"}, {"sha": "ac2124f4a161f895b63b9d80fa1851a1e2b5ae42", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "patch": "@@ -662,7 +662,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         if let Some(Region::LateBound(_, def_id, _)) = def {\n                             if let Some(hir_id) = self.tcx.hir().as_local_hir_id(def_id) {\n                                 // Ensure that the parent of the def is an item, not HRTB\n-                                let parent_id = self.tcx.hir().get_parent_node_by_hir_id(hir_id);\n+                                let parent_id = self.tcx.hir().get_parent_node(hir_id);\n                                 let parent_impl_id = hir::ImplItemId { hir_id: parent_id };\n                                 let parent_trait_id = hir::TraitItemId { hir_id: parent_id };\n                                 let krate = self.tcx.hir().forest.krate();\n@@ -2051,7 +2051,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         // and whether there's a `self` argument (treated specially).\n         let mut assoc_item_kind = None;\n         let mut impl_self = None;\n-        let parent = self.tcx.hir().get_parent_node_by_hir_id(output.hir_id);\n+        let parent = self.tcx.hir().get_parent_node(output.hir_id);\n         let body = match self.tcx.hir().get(parent) {\n             // `fn` definitions and methods.\n             Node::Item(&hir::Item {"}, {"sha": "f99d68469765a6991cdce92d08327f5f1fce1857", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "patch": "@@ -938,7 +938,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'tcx>,\n     ) {\n         if let &ObligationCauseCode::VariableType(hir_id) = code {\n-            let parent_node = self.tcx.hir().get_parent_node_by_hir_id(hir_id);\n+            let parent_node = self.tcx.hir().get_parent_node(hir_id);\n             if let Some(Node::Local(ref local)) = self.tcx.hir().find_by_hir_id(parent_node) {\n                 if let Some(ref expr) = local.init {\n                     if let hir::ExprKind::Index(_, _) = expr.node {\n@@ -1013,7 +1013,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n     ) {\n         let hir = self.tcx.hir();\n-        let parent_node = hir.get_parent_node_by_hir_id(obligation.cause.body_id);\n+        let parent_node = hir.get_parent_node(obligation.cause.body_id);\n         let node = hir.find_by_hir_id(parent_node);\n         if let Some(hir::Node::Item(hir::Item {\n             node: hir::ItemKind::Fn(decl, _, _, body_id),"}, {"sha": "45822fcba7ba4595087f8962932a239f01548fe5", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "patch": "@@ -2880,7 +2880,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             if lint::maybe_lint_level_root(self, id) {\n                 return id;\n             }\n-            let next = self.hir().get_parent_node_by_hir_id(id);\n+            let next = self.hir().get_parent_node(id);\n             if next == id {\n                 bug!(\"lint traversal reached the root of the crate\");\n             }\n@@ -2898,7 +2898,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             if let Some(pair) = sets.level_and_source(lint, id, self.sess) {\n                 return pair\n             }\n-            let next = self.hir().get_parent_node_by_hir_id(id);\n+            let next = self.hir().get_parent_node(id);\n             if next == id {\n                 bug!(\"lint traversal reached the root of the crate\");\n             }"}, {"sha": "658e4307348db02fd4530156c6ae2530aed3127f", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "patch": "@@ -47,7 +47,7 @@ pub enum PatternSource<'tcx> {\n /// with a reference to the let\n fn get_pattern_source<'tcx>(tcx: TyCtxt<'tcx>, pat: &Pat) -> PatternSource<'tcx> {\n \n-    let parent = tcx.hir().get_parent_node_by_hir_id(pat.hir_id);\n+    let parent = tcx.hir().get_parent_node(pat.hir_id);\n \n     match tcx.hir().get(parent) {\n         Node::Expr(ref e) => {"}, {"sha": "4ff669ddad9ca2427264d03bc24e026f8639697b", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "patch": "@@ -1189,7 +1189,7 @@ impl BorrowckCtxt<'_, 'tcx> {\n     }\n \n     fn local_ty(&self, hir_id: hir::HirId) -> (Option<&hir::Ty>, bool) {\n-        let parent = self.tcx.hir().get_parent_node_by_hir_id(hir_id);\n+        let parent = self.tcx.hir().get_parent_node(hir_id);\n         let parent_node = self.tcx.hir().get(parent);\n \n         // The parent node is like a fn\n@@ -1287,7 +1287,7 @@ impl BorrowckCtxt<'_, 'tcx> {\n                     },\n                 )) = ty.map(|t| &t.node)\n                 {\n-                    let borrow_expr_id = self.tcx.hir().get_parent_node_by_hir_id(borrowed_hir_id);\n+                    let borrow_expr_id = self.tcx.hir().get_parent_node(borrowed_hir_id);\n                     db.span_suggestion(\n                         self.tcx.hir().span(borrow_expr_id),\n                         \"consider removing the `&mut`, as it is an \\"}, {"sha": "1b78f77e4f915d09bfbb150b2c19d0e45f5cb5ec", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "patch": "@@ -631,7 +631,7 @@ fn print_flowgraph<'tcx, W: Write>(\n                 if let Some(n) = hir::map::blocks::FnLikeNode::from_node(node) {\n                     break n.body();\n                 }\n-                let parent = tcx.hir().get_parent_node_by_hir_id(hir_id);\n+                let parent = tcx.hir().get_parent_node(hir_id);\n                 assert_ne!(hir_id, parent);\n                 hir_id = parent;\n             }"}, {"sha": "d0258ca30c507d8b589b59b2e82d1ae346f2248a", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "patch": "@@ -275,7 +275,7 @@ fn lint_int_literal<'a, 'tcx>(\n             return;\n         }\n \n-        let par_id = cx.tcx.hir().get_parent_node_by_hir_id(e.hir_id);\n+        let par_id = cx.tcx.hir().get_parent_node(e.hir_id);\n         if let Node::Expr(par_e) = cx.tcx.hir().get(par_id) {\n             if let hir::ExprKind::Struct(..) = par_e.node {\n                 if is_range_literal(cx.sess(), par_e)\n@@ -314,7 +314,7 @@ fn lint_uint_literal<'a, 'tcx>(\n         _ => bug!(),\n     };\n     if lit_val < min || lit_val > max {\n-        let parent_id = cx.tcx.hir().get_parent_node_by_hir_id(e.hir_id);\n+        let parent_id = cx.tcx.hir().get_parent_node(e.hir_id);\n         if let Node::Expr(par_e) = cx.tcx.hir().get(parent_id) {\n             match par_e.node {\n                 hir::ExprKind::Cast(..) => {"}, {"sha": "94b4f6e8dd1c5cf26fcb2b8fe2542dd657336aa9", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "patch": "@@ -909,7 +909,7 @@ fn convert_path_expr<'a, 'tcx>(\n \n         Res::Def(DefKind::ConstParam, def_id) => {\n             let hir_id = cx.tcx.hir().as_local_hir_id(def_id).unwrap();\n-            let item_id = cx.tcx.hir().get_parent_node_by_hir_id(hir_id);\n+            let item_id = cx.tcx.hir().get_parent_node(hir_id);\n             let item_def_id = cx.tcx.hir().local_def_id_from_hir_id(item_id);\n             let generics = cx.tcx.generics_of(item_def_id);\n             let local_def_id = cx.tcx.hir().local_def_id_from_hir_id(hir_id);"}, {"sha": "545336a5906bb5918bd93d125ef8c179e67b6372", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "patch": "@@ -570,7 +570,7 @@ fn is_enclosed(\n     used_unsafe: &FxHashSet<hir::HirId>,\n     id: hir::HirId,\n ) -> Option<(String, hir::HirId)> {\n-    let parent_id = tcx.hir().get_parent_node_by_hir_id(id);\n+    let parent_id = tcx.hir().get_parent_node(id);\n     if parent_id != id {\n         if used_unsafe.contains(&parent_id) {\n             Some((\"block\".to_string(), parent_id))"}, {"sha": "e95911bbec29a719d732536c261e473648e30f56", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "patch": "@@ -247,7 +247,7 @@ fn def_id_visibility<'tcx>(\n                     }\n                 }\n                 Node::Ctor(vdata) => {\n-                    let parent_hir_id = tcx.hir().get_parent_node_by_hir_id(hir_id);\n+                    let parent_hir_id = tcx.hir().get_parent_node(hir_id);\n                     match tcx.hir().get(parent_hir_id) {\n                         Node::Variant(..) => {\n                             let parent_did = tcx.hir().local_def_id_from_hir_id(parent_hir_id);\n@@ -784,7 +784,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             if module_id == hir::CRATE_HIR_ID {\n                 break\n             }\n-            module_id = self.tcx.hir().get_parent_node_by_hir_id(module_id);\n+            module_id = self.tcx.hir().get_parent_node(module_id);\n         }\n     }\n }\n@@ -1674,7 +1674,7 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n                     has_old_errors = true;\n                     break;\n                 }\n-                let parent = self.tcx.hir().get_parent_node_by_hir_id(id);\n+                let parent = self.tcx.hir().get_parent_node(id);\n                 if parent == id {\n                     break;\n                 }"}, {"sha": "750222451db6f5637e35c3d55aac5ff249aaab8e", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "patch": "@@ -622,7 +622,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                 match seg.res {\n                     Some(res) if res != Res::Err => res,\n                     _ => {\n-                        let parent_node = self.tcx.hir().get_parent_node_by_hir_id(hir_id);\n+                        let parent_node = self.tcx.hir().get_parent_node(hir_id);\n                         self.get_path_res(self.tcx.hir().hir_to_node_id(parent_node))\n                     },\n                 }"}, {"sha": "0375ad4a08f26c8e95eba2fbca11a55323d62380", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "patch": "@@ -2000,7 +2000,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 self.prohibit_generics(&path.segments);\n \n                 let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-                let item_id = tcx.hir().get_parent_node_by_hir_id(hir_id);\n+                let item_id = tcx.hir().get_parent_node(hir_id);\n                 let item_def_id = tcx.hir().local_def_id_from_hir_id(item_id);\n                 let generics = tcx.generics_of(item_def_id);\n                 let index = generics.param_def_id_to_index[&def_id];\n@@ -2190,7 +2190,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             // Find the name and index of the const parameter by indexing the generics of the\n             // parent item and construct a `ParamConst`.\n             let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-            let item_id = tcx.hir().get_parent_node_by_hir_id(hir_id);\n+            let item_id = tcx.hir().get_parent_node(hir_id);\n             let item_def_id = tcx.hir().local_def_id_from_hir_id(item_id);\n             let generics = tcx.generics_of(item_def_id);\n             let index = generics.param_def_id_to_index[&tcx.hir().local_def_id_from_hir_id(hir_id)];"}, {"sha": "b435c99ad01f5f3e097484bb0647c2994cf3deb7", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "patch": "@@ -546,7 +546,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) {\n         let tcx = self.tcx;\n         if let PatKind::Binding(..) = inner.node {\n-            let parent_id = tcx.hir().get_parent_node_by_hir_id(pat.hir_id);\n+            let parent_id = tcx.hir().get_parent_node(pat.hir_id);\n             let parent = tcx.hir().get(parent_id);\n             debug!(\"inner {:?} pat {:?} parent {:?}\", inner, pat, parent);\n             match parent {\n@@ -808,16 +808,16 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n         use hir::Node::{Block, Item, Local};\n \n         let hir = self.tcx.hir();\n-        let arm_id = hir.get_parent_node_by_hir_id(hir_id);\n-        let match_id = hir.get_parent_node_by_hir_id(arm_id);\n-        let containing_id = hir.get_parent_node_by_hir_id(match_id);\n+        let arm_id = hir.get_parent_node(hir_id);\n+        let match_id = hir.get_parent_node(arm_id);\n+        let containing_id = hir.get_parent_node(match_id);\n \n         let node = hir.get(containing_id);\n         if let Block(block) = node {\n             // check that the body's parent is an fn\n             let parent = hir.get(\n-                hir.get_parent_node_by_hir_id(\n-                    hir.get_parent_node_by_hir_id(block.hir_id),\n+                hir.get_parent_node(\n+                    hir.get_parent_node(block.hir_id),\n                 ),\n             );\n             if let (Some(expr), Item(hir::Item {"}, {"sha": "e6999f9e3ac8a0aa963e615ac4517c1b3d3e4bdf", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "patch": "@@ -244,7 +244,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         callee_node: &hir::ExprKind,\n         callee_span: Span,\n     ) {\n-        let hir_id = self.tcx.hir().get_parent_node_by_hir_id(hir_id);\n+        let hir_id = self.tcx.hir().get_parent_node(hir_id);\n         let parent_node = self.tcx.hir().get(hir_id);\n         if let (\n             hir::Node::Expr(hir::Expr { node: hir::ExprKind::Closure(_, _, _, sp, ..), .. }),"}, {"sha": "4bd2f216224a5f62fb41472974a9c8e01b336fee", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "patch": "@@ -1231,7 +1231,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                         db.span_label(cause.span, \"return type is not `()`\");\n                     }\n                     ObligationCauseCode::BlockTailExpression(blk_id) => {\n-                        let parent_id = fcx.tcx.hir().get_parent_node_by_hir_id(blk_id);\n+                        let parent_id = fcx.tcx.hir().get_parent_node(blk_id);\n                         db = self.report_return_mismatched_types(\n                             cause,\n                             expected,\n@@ -1281,7 +1281,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         // Verify that this is a tail expression of a function, otherwise the\n         // label pointing out the cause for the type coercion will be wrong\n         // as prior return coercions would not be relevant (#57664).\n-        let parent_id = fcx.tcx.hir().get_parent_node_by_hir_id(id);\n+        let parent_id = fcx.tcx.hir().get_parent_node(id);\n         let fn_decl = if let Some((expr, blk_id)) = expression {\n             pointing_at_return_type = fcx.suggest_mismatched_types_on_tail(\n                 &mut db,"}, {"sha": "180b1eadd68186e432be4717cd77723979d48302", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "patch": "@@ -236,13 +236,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Option<(Span, &'static str, String)> {\n         if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = expr.node {\n             if let hir::def::Res::Local(id) = path.res {\n-                let parent = self.tcx.hir().get_parent_node_by_hir_id(id);\n+                let parent = self.tcx.hir().get_parent_node(id);\n                 if let Some(Node::Expr(hir::Expr {\n                     hir_id,\n                     node: hir::ExprKind::Closure(_, decl, ..),\n                     ..\n                 })) = self.tcx.hir().find_by_hir_id(parent) {\n-                    let parent = self.tcx.hir().get_parent_node_by_hir_id(*hir_id);\n+                    let parent = self.tcx.hir().get_parent_node(*hir_id);\n                     if let (Some(Node::Expr(hir::Expr {\n                         node: hir::ExprKind::MethodCall(path, span, expr),\n                         ..\n@@ -276,7 +276,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         sp: Span,\n     ) -> bool {\n         let cm = self.sess().source_map();\n-        let parent_id = self.tcx.hir().get_parent_node_by_hir_id(hir_id);\n+        let parent_id = self.tcx.hir().get_parent_node(hir_id);\n         if let Some(parent) = self.tcx.hir().find_by_hir_id(parent_id) {\n             // Account for fields\n             if let Node::Expr(hir::Expr {\n@@ -422,7 +422,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             node: hir::ExprKind::Assign(left_expr, _),\n                             ..\n                         })) = self.tcx.hir().find_by_hir_id(\n-                            self.tcx.hir().get_parent_node_by_hir_id(expr.hir_id),\n+                            self.tcx.hir().get_parent_node(expr.hir_id),\n                         ) {\n                             if mutability == hir::Mutability::MutMutable {\n                                 // Found the following case:\n@@ -551,7 +551,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if let Some(hir::Node::Expr(hir::Expr {\n             node: hir::ExprKind::Struct(_, fields, _),\n             ..\n-        })) = self.tcx.hir().find_by_hir_id(self.tcx.hir().get_parent_node_by_hir_id(expr.hir_id)) {\n+        })) = self.tcx.hir().find_by_hir_id(self.tcx.hir().get_parent_node(expr.hir_id)) {\n             // `expr` is a literal field for a struct, only suggest if appropriate\n             for field in fields {\n                 if field.expr.hir_id == expr.hir_id && field.is_shorthand {"}, {"sha": "fa1b07d2dcfcdfdfe4189d1013d44ccc15c2c807", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "patch": "@@ -269,7 +269,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                         let filename = tcx.sess.source_map().span_to_filename(span);\n \n                                         let parent_node = self.tcx.hir().get(\n-                                            self.tcx.hir().get_parent_node_by_hir_id(hir_id),\n+                                            self.tcx.hir().get_parent_node(hir_id),\n                                         );\n                                         let msg = format!(\n                                             \"you must specify a type for this binding, like `{}`\",\n@@ -390,7 +390,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 );\n                             } else {\n                                 let call_expr = self.tcx.hir().expect_expr(\n-                                    self.tcx.hir().get_parent_node_by_hir_id(expr.hir_id),\n+                                    self.tcx.hir().get_parent_node(expr.hir_id),\n                                 );\n \n                                 if let Some(span) = call_expr.span.trim_start(item_name.span) {"}, {"sha": "2da761f6d37dfe49dbc2749b0f9477c42e2f6dab", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "patch": "@@ -4259,7 +4259,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // If our calling expression is indeed the function itself, we're good!\n         // If not, generate an error that this can only be called directly.\n         if let Node::Expr(expr) = self.tcx.hir().get(\n-            self.tcx.hir().get_parent_node_by_hir_id(hir_id))\n+            self.tcx.hir().get_parent_node(hir_id))\n         {\n             if let ExprKind::Call(ref callee, ..) = expr.node {\n                 if callee.hir_id == hir_id {\n@@ -4334,7 +4334,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut contained_in_place = false;\n \n         while let hir::Node::Expr(parent_expr) =\n-            self.tcx.hir().get(self.tcx.hir().get_parent_node_by_hir_id(expr_id))\n+            self.tcx.hir().get(self.tcx.hir().get_parent_node(expr_id))\n         {\n             match &parent_expr.node {\n                 hir::ExprKind::Assign(lhs, ..) | hir::ExprKind::AssignOp(_, lhs, ..) => {"}, {"sha": "87e1166b7c041101ae8419b43d475251c8510ec9", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08bd72e977d05f7fe6d1140e10d7311f64f0f21/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=d08bd72e977d05f7fe6d1140e10d7311f64f0f21", "patch": "@@ -1298,7 +1298,7 @@ pub fn checked_type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, fail: bool) -> Op\n         }\n \n         Node::AnonConst(_) => {\n-            let parent_node = tcx.hir().get(tcx.hir().get_parent_node_by_hir_id(hir_id));\n+            let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));\n             match parent_node {\n                 Node::Ty(&hir::Ty {\n                     node: hir::TyKind::Array(_, ref constant),"}]}