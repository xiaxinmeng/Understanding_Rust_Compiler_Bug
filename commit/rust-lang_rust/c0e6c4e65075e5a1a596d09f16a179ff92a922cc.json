{"sha": "c0e6c4e65075e5a1a596d09f16a179ff92a922cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZTZjNGU2NTA3NWU1YTFhNTk2ZDA5ZjE2YTE3OWZmOTJhOTIyY2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-17T13:56:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-17T13:56:19Z"}, "message": "auto merge of #15675 : errordeveloper/rust/json_docs, r=steveklabnik\n\n- add one simple example of using `ToJson` trait\r\n- make example code more readable", "tree": {"sha": "bd2250bdd1058c5e9accb935abd2aa3bdb3d2646", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd2250bdd1058c5e9accb935abd2aa3bdb3d2646"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0e6c4e65075e5a1a596d09f16a179ff92a922cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e6c4e65075e5a1a596d09f16a179ff92a922cc", "html_url": "https://github.com/rust-lang/rust/commit/c0e6c4e65075e5a1a596d09f16a179ff92a922cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0e6c4e65075e5a1a596d09f16a179ff92a922cc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd348b3ab0147fda3dedbdc6947c14354971e14a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd348b3ab0147fda3dedbdc6947c14354971e14a", "html_url": "https://github.com/rust-lang/rust/commit/dd348b3ab0147fda3dedbdc6947c14354971e14a"}, {"sha": "7beb5507ff70d20b5ccb1f80ebeaef7a3dc84cfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7beb5507ff70d20b5ccb1f80ebeaef7a3dc84cfc", "html_url": "https://github.com/rust-lang/rust/commit/7beb5507ff70d20b5ccb1f80ebeaef7a3dc84cfc"}], "stats": {"total": 87, "additions": 71, "deletions": 16}, "files": [{"sha": "e28c51d517ea3488775f09ca7dac7f98de5931f1", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 71, "deletions": 16, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/c0e6c4e65075e5a1a596d09f16a179ff92a922cc/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e6c4e65075e5a1a596d09f16a179ff92a922cc/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=c0e6c4e65075e5a1a596d09f16a179ff92a922cc", "patch": "@@ -74,51 +74,102 @@ When using `ToJson` the `Encodable` trait implementation is not mandatory.\n \n ## Using Autoserialization\n \n-Create a struct called TestStruct1 and serialize and deserialize it to and from JSON\n-using the serialization API, using the derived serialization code.\n+Create a struct called `TestStruct` and serialize and deserialize it to and from JSON using the\n+serialization API, using the derived serialization code.\n \n ```rust\n extern crate serialize;\n use serialize::json;\n \n-#[deriving(Decodable, Encodable)] //generate Decodable, Encodable impl.\n-pub struct TestStruct1  {\n+// Automatically generate `Decodable` and `Encodable` trait implementations\n+#[deriving(Decodable, Encodable)]\n+pub struct TestStruct  {\n     data_int: u8,\n     data_str: String,\n     data_vector: Vec<u8>,\n }\n \n fn main() {\n-    let object = TestStruct1\n-         {data_int: 1, data_str:\"toto\".to_string(), data_vector:vec![2,3,4,5]};\n+    let object = TestStruct {\n+        data_int: 1,\n+        data_str: \"toto\".to_string(),\n+        data_vector: vec![2,3,4,5],\n+    };\n \n     // Serialize using `json::encode`\n     let encoded = json::encode(&object);\n \n     // Deserialize using `json::decode`\n-    let decoded: TestStruct1 = json::decode(encoded.as_slice()).unwrap();\n+    let decoded: TestStruct = json::decode(encoded.as_slice()).unwrap();\n }\n ```\n \n-## Using `ToJson`\n+## Using the `ToJson` trait\n+\n+The examples above use the `ToJson` trait to generate the JSON string, which required\n+for custom mappings.\n+\n+### Simple example of `ToJson` usage\n+\n+```rust\n+extern crate serialize;\n+use serialize::json::ToJson;\n+use serialize::json;\n+\n+// A custom data structure\n+struct ComplexNum {\n+    a: f64,\n+    b: f64,\n+}\n+\n+// JSON value representation\n+impl ToJson for ComplexNum {\n+    fn to_json(&self) -> json::Json {\n+        json::String(format!(\"{}+{}i\", self.a, self.b))\n+    }\n+}\n \n-This example uses the `ToJson` trait to generate the JSON string.\n+// Only generate `Encodable` trait implementation\n+#[deriving(Encodable)]\n+pub struct ComplexNumRecord {\n+    uid: u8,\n+    dsc: String,\n+    val: json::Json,\n+}\n+\n+fn main() {\n+    let num = ComplexNum { a: 0.0001, b: 12.539 };\n+    let data: String = json::encode(&ComplexNumRecord{\n+        uid: 1,\n+        dsc: \"test\".to_string(),\n+        val: num.to_json(),\n+    });\n+    println!(\"data: {}\", data);\n+    // data: {\"uid\":1,\"dsc\":\"test\",\"val\":\"0.0001+12.539j\"};\n+}\n+```\n+\n+### Verbose example of `ToJson` usage\n \n ```rust\n+extern crate serialize;\n use std::collections::TreeMap;\n use serialize::json::ToJson;\n use serialize::json;\n \n+// Only generate `Decodable` trait implementation\n #[deriving(Decodable)]\n-pub struct TestStruct1  {\n+pub struct TestStruct {\n     data_int: u8,\n     data_str: String,\n     data_vector: Vec<u8>,\n }\n \n-impl ToJson for TestStruct1 {\n-    fn to_json( &self ) -> json::Json {\n+// Specify encoding method manually\n+impl ToJson for TestStruct {\n+    fn to_json(&self) -> json::Json {\n         let mut d = TreeMap::new();\n+        // All standard types implement `to_json()`, so use it\n         d.insert(\"data_int\".to_string(), self.data_int.to_json());\n         d.insert(\"data_str\".to_string(), self.data_str.to_json());\n         d.insert(\"data_vector\".to_string(), self.data_vector.to_json());\n@@ -128,12 +179,16 @@ impl ToJson for TestStruct1 {\n \n fn main() {\n     // Serialize using `ToJson`\n-    let test2 = TestStruct1 {data_int: 1, data_str:\"toto\".to_string(), data_vector:vec![2,3,4,5]};\n-    let tjson: json::Json = test2.to_json();\n-    let json_str: String = tjson.to_string();\n+    let input_data = TestStruct {\n+        data_int: 1,\n+        data_str: \"toto\".to_string(),\n+        data_vector: vec![2,3,4,5],\n+    };\n+    let json_obj: json::Json = input_data.to_json();\n+    let json_str: String = json_obj.to_string();\n \n     // Deserialize like before\n-    let decoded: TestStruct1 = json::decode(json_str.as_slice()).unwrap();\n+    let decoded: TestStruct = json::decode(json_str.as_slice()).unwrap();\n }\n ```\n "}]}