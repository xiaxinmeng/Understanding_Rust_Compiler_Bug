{"sha": "8fa3011908e3b6cc74cfa4d7e896f5d329e4228c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmYTMwMTE5MDhlM2I2Y2M3NGNmYTRkN2U4OTZmNWQzMjllNDIyOGM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-08T12:22:54Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-08T13:21:27Z"}, "message": "Use CompletionTextEdit::InsertAndReplace if supported by the client", "tree": {"sha": "9c6f1e2a87d045a2cd65c9f9597f0b7285d0303b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c6f1e2a87d045a2cd65c9f9597f0b7285d0303b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fa3011908e3b6cc74cfa4d7e896f5d329e4228c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fa3011908e3b6cc74cfa4d7e896f5d329e4228c", "html_url": "https://github.com/rust-lang/rust/commit/8fa3011908e3b6cc74cfa4d7e896f5d329e4228c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fa3011908e3b6cc74cfa4d7e896f5d329e4228c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3191a93185b34c6deebca2aad0584d2840ad6d43", "url": "https://api.github.com/repos/rust-lang/rust/commits/3191a93185b34c6deebca2aad0584d2840ad6d43", "html_url": "https://github.com/rust-lang/rust/commit/3191a93185b34c6deebca2aad0584d2840ad6d43"}], "stats": {"total": 70, "additions": 50, "deletions": 20}, "files": [{"sha": "16991b6880da1a11de12d2b2982cc521f2edd8e6", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fa3011908e3b6cc74cfa4d7e896f5d329e4228c/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa3011908e3b6cc74cfa4d7e896f5d329e4228c/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=8fa3011908e3b6cc74cfa4d7e896f5d329e4228c", "patch": "@@ -29,7 +29,7 @@ pub struct CompletionItem {\n     /// Range of identifier that is being completed.\n     ///\n     /// It should be used primarily for UI, but we also use this to convert\n-    /// genetic TextEdit into LSP's completion edit (see conv.rs).\n+    /// generic TextEdit into LSP's completion edit (see conv.rs).\n     ///\n     /// `source_range` must contain the completion offset. `insert_text` should\n     /// start with what `source_range` points to, or VSCode will filter out the"}, {"sha": "f809667e92ad12036d82fbe94ae61b518dca58c1", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8fa3011908e3b6cc74cfa4d7e896f5d329e4228c/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa3011908e3b6cc74cfa4d7e896f5d329e4228c/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=8fa3011908e3b6cc74cfa4d7e896f5d329e4228c", "patch": "@@ -656,6 +656,19 @@ impl Config {\n     pub fn code_lens_refresh(&self) -> bool {\n         try_or!(self.caps.workspace.as_ref()?.code_lens.as_ref()?.refresh_support?, false)\n     }\n+    pub fn insert_replace_support(&self) -> bool {\n+        try_or!(\n+            self.caps\n+                .text_document\n+                .as_ref()?\n+                .completion\n+                .as_ref()?\n+                .completion_item\n+                .as_ref()?\n+                .insert_replace_support?,\n+            false\n+        )\n+    }\n }\n \n #[derive(Deserialize, Debug, Clone)]"}, {"sha": "edfa42eb590bb0d53fe5d511290f54dbf1095fbc", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8fa3011908e3b6cc74cfa4d7e896f5d329e4228c/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa3011908e3b6cc74cfa4d7e896f5d329e4228c/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=8fa3011908e3b6cc74cfa4d7e896f5d329e4228c", "patch": "@@ -664,10 +664,13 @@ pub(crate) fn handle_completion(\n     };\n     let line_index = snap.file_line_index(position.file_id)?;\n \n+    let insert_replace_support =\n+        snap.config.insert_replace_support().then(|| text_document_position.position);\n     let items: Vec<CompletionItem> = items\n         .into_iter()\n         .flat_map(|item| {\n-            let mut new_completion_items = to_proto::completion_item(&line_index, item.clone());\n+            let mut new_completion_items =\n+                to_proto::completion_item(insert_replace_support, &line_index, item.clone());\n \n             if completion_config.enable_imports_on_the_fly {\n                 for new_item in &mut new_completion_items {"}, {"sha": "73c4193e88d9bf7e342776a4d5d388482d63d187", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8fa3011908e3b6cc74cfa4d7e896f5d329e4228c/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa3011908e3b6cc74cfa4d7e896f5d329e4228c/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=8fa3011908e3b6cc74cfa4d7e896f5d329e4228c", "patch": "@@ -150,8 +150,16 @@ pub(crate) fn all_edits_are_disjoint(\n             edit_ranges.push(edit.range);\n         }\n         Some(lsp_types::CompletionTextEdit::InsertAndReplace(edit)) => {\n-            edit_ranges.push(edit.insert);\n-            edit_ranges.push(edit.replace);\n+            let replace = edit.replace;\n+            let insert = edit.insert;\n+            if replace.start != insert.start\n+                || insert.start > insert.end\n+                || insert.end > replace.end\n+            {\n+                // insert has to be a prefix of replace but it is not\n+                return false;\n+            }\n+            edit_ranges.push(replace);\n         }\n         None => {}\n     }\n@@ -310,18 +318,6 @@ mod tests {\n             \"Completion with disjoint edits fails the validation even with empty extra edits\"\n         );\n \n-        completion_with_joint_edits.text_edit =\n-            Some(CompletionTextEdit::InsertAndReplace(InsertReplaceEdit {\n-                new_text: \"new_text\".to_string(),\n-                insert: disjoint_edit.range,\n-                replace: joint_edit.range,\n-            }));\n-        completion_with_joint_edits.additional_text_edits = None;\n-        assert!(\n-            !all_edits_are_disjoint(&completion_with_joint_edits, &[]),\n-            \"Completion with disjoint edits fails the validation even with empty extra edits\"\n-        );\n-\n         completion_with_joint_edits.text_edit =\n             Some(CompletionTextEdit::InsertAndReplace(InsertReplaceEdit {\n                 new_text: \"new_text\".to_string(),"}, {"sha": "d5c0d22b865fb2bd73cef1e0ef01448fe373c6ec", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8fa3011908e3b6cc74cfa4d7e896f5d329e4228c/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa3011908e3b6cc74cfa4d7e896f5d329e4228c/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=8fa3011908e3b6cc74cfa4d7e896f5d329e4228c", "patch": "@@ -145,6 +145,23 @@ pub(crate) fn text_edit(line_index: &LineIndex, indel: Indel) -> lsp_types::Text\n     lsp_types::TextEdit { range, new_text }\n }\n \n+pub(crate) fn completion_text_edit(\n+    line_index: &LineIndex,\n+    insert_replace_support: Option<lsp_types::Position>,\n+    indel: Indel,\n+) -> lsp_types::CompletionTextEdit {\n+    let text_edit = text_edit(line_index, indel);\n+    match insert_replace_support {\n+        Some(cursor_pos) => lsp_types::InsertReplaceEdit {\n+            new_text: text_edit.new_text,\n+            insert: lsp_types::Range { start: text_edit.range.start, end: cursor_pos },\n+            replace: text_edit.range,\n+        }\n+        .into(),\n+        None => text_edit.into(),\n+    }\n+}\n+\n pub(crate) fn snippet_text_edit(\n     line_index: &LineIndex,\n     is_snippet: bool,\n@@ -179,6 +196,7 @@ pub(crate) fn snippet_text_edit_vec(\n }\n \n pub(crate) fn completion_item(\n+    insert_replace_support: Option<lsp_types::Position>,\n     line_index: &LineIndex,\n     item: CompletionItem,\n ) -> Vec<lsp_types::CompletionItem> {\n@@ -190,15 +208,15 @@ pub(crate) fn completion_item(\n     for indel in item.text_edit().iter() {\n         if indel.delete.contains_range(source_range) {\n             text_edit = Some(if indel.delete == source_range {\n-                self::text_edit(line_index, indel.clone())\n+                self::completion_text_edit(line_index, insert_replace_support, indel.clone())\n             } else {\n                 assert!(source_range.end() == indel.delete.end());\n                 let range1 = TextRange::new(indel.delete.start(), source_range.start());\n                 let range2 = source_range;\n                 let indel1 = Indel::replace(range1, String::new());\n                 let indel2 = Indel::replace(range2, indel.insert.clone());\n                 additional_text_edits.push(self::text_edit(line_index, indel1));\n-                self::text_edit(line_index, indel2)\n+                self::completion_text_edit(line_index, insert_replace_support, indel2)\n             })\n         } else {\n             assert!(source_range.intersect(indel.delete).is_none());\n@@ -213,7 +231,7 @@ pub(crate) fn completion_item(\n         detail: item.detail().map(|it| it.to_string()),\n         filter_text: Some(item.lookup().to_string()),\n         kind: item.kind().map(completion_item_kind),\n-        text_edit: Some(text_edit.into()),\n+        text_edit: Some(text_edit),\n         additional_text_edits: Some(additional_text_edits),\n         documentation: item.documentation().map(documentation),\n         deprecated: Some(item.deprecated()),\n@@ -1135,7 +1153,7 @@ mod tests {\n             .unwrap()\n             .into_iter()\n             .filter(|c| c.label().ends_with(\"arg\"))\n-            .map(|c| completion_item(&line_index, c))\n+            .map(|c| completion_item(None, &line_index, c))\n             .flat_map(|comps| comps.into_iter().map(|c| (c.label, c.sort_text)))\n             .collect();\n         expect_test::expect![[r#\""}]}