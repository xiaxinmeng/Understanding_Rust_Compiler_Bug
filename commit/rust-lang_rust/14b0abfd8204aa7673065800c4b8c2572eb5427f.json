{"sha": "14b0abfd8204aa7673065800c4b8c2572eb5427f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YjBhYmZkODIwNGFhNzY3MzA2NTgwMGM0YjhjMjU3MmViNTQyN2Y=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-01-16T20:11:22Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-01-16T20:11:22Z"}, "message": "Consider all zero-sized data structures to be voidish, bypassing some \"quirky\" parts of LLVM (see e.g. LLVM bug 9900) but also generating better code", "tree": {"sha": "f9b6ade348e4c0dcaf71bf8620ac92cbbb774534", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9b6ade348e4c0dcaf71bf8620ac92cbbb774534"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14b0abfd8204aa7673065800c4b8c2572eb5427f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14b0abfd8204aa7673065800c4b8c2572eb5427f", "html_url": "https://github.com/rust-lang/rust/commit/14b0abfd8204aa7673065800c4b8c2572eb5427f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14b0abfd8204aa7673065800c4b8c2572eb5427f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ff6b094fb5c0c7f58e08a9a7c25ff9ec5bbd643", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ff6b094fb5c0c7f58e08a9a7c25ff9ec5bbd643", "html_url": "https://github.com/rust-lang/rust/commit/7ff6b094fb5c0c7f58e08a9a7c25ff9ec5bbd643"}], "stats": {"total": 69, "additions": 37, "deletions": 32}, "files": [{"sha": "f908732ea0ad6d7b6eaf3adc23628f666d3ef335", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/14b0abfd8204aa7673065800c4b8c2572eb5427f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b0abfd8204aa7673065800c4b8c2572eb5427f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=14b0abfd8204aa7673065800c4b8c2572eb5427f", "patch": "@@ -1320,7 +1320,7 @@ pub fn init_function<'a>(\n         }\n     };\n \n-    if !ty::type_is_voidish(fcx.ccx.tcx, substd_output_type) {\n+    if !type_is_voidish(fcx.ccx, substd_output_type) {\n         // If the function returns nil/bot, there is no real return\n         // value, so do not set `llretptr`.\n         if !skip_retptr || fcx.caller_expects_out_pointer {\n@@ -1539,7 +1539,7 @@ pub fn trans_closure(ccx: @CrateContext,\n     // translation calls that don't have a return value (trans_crate,\n     // trans_mod, trans_item, et cetera) and those that do\n     // (trans_block, trans_expr, et cetera).\n-    if body.expr.is_none() || ty::type_is_voidish(bcx.tcx(), block_ty) {\n+    if body.expr.is_none() || type_is_voidish(bcx.ccx(), block_ty) {\n         bcx = controlflow::trans_block(bcx, body, expr::Ignore);\n     } else {\n         let dest = expr::SaveIn(fcx.llretptr.get().unwrap());\n@@ -1679,15 +1679,17 @@ fn trans_enum_variant_or_tuple_like_struct(ccx: @CrateContext,\n \n     let bcx = fcx.entry_bcx.get().unwrap();\n \n-    let repr = adt::represent_type(ccx, result_ty);\n-    adt::trans_start_init(bcx, repr, fcx.llretptr.get().unwrap(), disr);\n-    for (i, arg_datum) in arg_datums.move_iter().enumerate() {\n-        let lldestptr = adt::trans_field_ptr(bcx,\n-                                             repr,\n-                                             fcx.llretptr.get().unwrap(),\n-                                             disr,\n-                                             i);\n-        arg_datum.store_to(bcx, lldestptr);\n+    if !type_is_voidish(fcx.ccx, result_ty) {\n+        let repr = adt::represent_type(ccx, result_ty);\n+        adt::trans_start_init(bcx, repr, fcx.llretptr.get().unwrap(), disr);\n+        for (i, arg_datum) in arg_datums.move_iter().enumerate() {\n+            let lldestptr = adt::trans_field_ptr(bcx,\n+                                                 repr,\n+                                                 fcx.llretptr.get().unwrap(),\n+                                                 disr,\n+                                                 i);\n+            arg_datum.store_to(bcx, lldestptr);\n+        }\n     }\n \n     finish_fn(&fcx, bcx);"}, {"sha": "7cc80318f872f60aeb74f508293a2d304d0096ad", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14b0abfd8204aa7673065800c4b8c2572eb5427f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b0abfd8204aa7673065800c4b8c2572eb5427f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=14b0abfd8204aa7673065800c4b8c2572eb5427f", "patch": "@@ -623,7 +623,6 @@ pub fn trans_call_inner<'a>(\n     // scope will ever execute.\n     let fcx = bcx.fcx;\n     let ccx = fcx.ccx;\n-    let tcx = ccx.tcx;\n     let arg_cleanup_scope = fcx.push_custom_cleanup_scope();\n \n     let callee = get_callee(bcx, cleanup::CustomScope(arg_cleanup_scope));\n@@ -668,12 +667,11 @@ pub fn trans_call_inner<'a>(\n         }\n         Some(expr::SaveIn(dst)) => Some(dst),\n         Some(expr::Ignore) => {\n-            if !ty::type_is_voidish(tcx, ret_ty) {\n+            if !type_is_voidish(ccx, ret_ty) {\n                 Some(alloc_ty(bcx, ret_ty, \"__llret\"))\n             } else {\n-                unsafe {\n-                    Some(llvm::LLVMGetUndef(Type::nil().ptr_to().to_ref()))\n-                }\n+                let llty = type_of::type_of(ccx, ret_ty);\n+                Some(C_undef(llty.ptr_to()))\n             }\n         }\n     };\n@@ -738,7 +736,7 @@ pub fn trans_call_inner<'a>(\n         match opt_llretslot {\n             Some(llretslot) => {\n                 if !type_of::return_uses_outptr(bcx.ccx(), ret_ty) &&\n-                    !ty::type_is_voidish(bcx.tcx(), ret_ty)\n+                    !type_is_voidish(bcx.ccx(), ret_ty)\n                 {\n                     Store(bcx, llret, llretslot);\n                 }"}, {"sha": "e1e026c3171cc0c2f008addffadd463cb66d7dcb", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/14b0abfd8204aa7673065800c4b8c2572eb5427f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b0abfd8204aa7673065800c4b8c2572eb5427f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=14b0abfd8204aa7673065800c4b8c2572eb5427f", "patch": "@@ -79,6 +79,15 @@ pub fn type_is_immediate(ccx: &CrateContext, ty: ty::t) -> bool {\n     }\n }\n \n+pub fn type_is_voidish(ccx: &CrateContext, ty: ty::t) -> bool {\n+    //! Identify types like `()`, bottom, or empty structs, which\n+    //! contain no information at all.\n+    use middle::trans::machine::llsize_of_alloc;\n+    use middle::trans::type_of::sizing_type_of;\n+    let llty = sizing_type_of(ccx, ty);\n+    llsize_of_alloc(ccx, llty) == 0\n+}\n+\n pub fn gensym_name(name: &str) -> (Ident, PathElem) {\n     let name = token::gensym(name);\n     let ident = Ident::new(name);"}, {"sha": "624ff5f6ba18f470a6d776cf999bc6741a7e393c", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b0abfd8204aa7673065800c4b8c2572eb5427f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b0abfd8204aa7673065800c4b8c2572eb5427f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=14b0abfd8204aa7673065800c4b8c2572eb5427f", "patch": "@@ -171,7 +171,7 @@ pub fn appropriate_rvalue_mode(ccx: &CrateContext, ty: ty::t) -> RvalueMode {\n      * on whether type is immediate or not.\n      */\n \n-    if ty::type_is_voidish(ccx.tcx, ty) {\n+    if type_is_voidish(ccx, ty) {\n         ByValue\n     } else if type_is_immediate(ccx, ty) {\n         ByValue\n@@ -583,8 +583,8 @@ fn load<'a>(bcx: &'a Block<'a>, llptr: ValueRef, ty: ty::t) -> ValueRef {\n      * what we are loading.\n      */\n \n-    if ty::type_is_voidish(bcx.tcx(), ty) {\n-        C_nil()\n+    if type_is_voidish(bcx.ccx(), ty) {\n+        C_undef(type_of::type_of(bcx.ccx(), ty))\n     } else if ty::type_is_bool(ty) {\n         LoadRangeAssert(bcx, llptr, 0, 2, lib::llvm::True)\n     } else {\n@@ -638,7 +638,7 @@ impl<K:KindOps> Datum<K> {\n \n         let _icx = push_ctxt(\"copy_to_no_check\");\n \n-        if ty::type_is_voidish(bcx.tcx(), self.ty) {\n+        if type_is_voidish(bcx.ccx(), self.ty) {\n             return bcx;\n         }\n "}, {"sha": "9ae8280428d63d94d59e9714fafb22515740a3ba", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14b0abfd8204aa7673065800c4b8c2572eb5427f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b0abfd8204aa7673065800c4b8c2572eb5427f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=14b0abfd8204aa7673065800c4b8c2572eb5427f", "patch": "@@ -474,7 +474,7 @@ fn trans_unadjusted<'a>(bcx: &'a Block<'a>,\n \n         ty::RvalueDpsExpr => {\n             let ty = expr_ty(bcx, expr);\n-            if ty::type_is_voidish(bcx.tcx(), ty) {\n+            if type_is_voidish(bcx.ccx(), ty) {\n                 bcx = trans_rvalue_dps_unadjusted(bcx, expr, Ignore);\n                 nil(bcx, ty)\n             } else {\n@@ -500,7 +500,8 @@ fn trans_unadjusted<'a>(bcx: &'a Block<'a>,\n     };\n \n     fn nil<'a>(bcx: &'a Block<'a>, ty: ty::t) -> DatumBlock<'a, Expr> {\n-        let datum = immediate_rvalue(C_nil(), ty);\n+        let llval = C_undef(type_of::type_of(bcx.ccx(), ty));\n+        let datum = immediate_rvalue(llval, ty);\n         DatumBlock(bcx, datum.to_expr_datum())\n     }\n }"}, {"sha": "9ba05352b3416e0bb59ee624fe551d443cd3a1db", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b0abfd8204aa7673065800c4b8c2572eb5427f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b0abfd8204aa7673065800c4b8c2572eb5427f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=14b0abfd8204aa7673065800c4b8c2572eb5427f", "patch": "@@ -198,7 +198,7 @@ pub fn trans_native_call<'a>(\n         _ => ccx.sess.bug(\"trans_native_call called on non-function type\")\n     };\n     let llsig = foreign_signature(ccx, &fn_sig, passed_arg_tys);\n-    let ret_def = !ty::type_is_voidish(bcx.tcx(), fn_sig.output);\n+    let ret_def = !type_is_voidish(bcx.ccx(), fn_sig.output);\n     let fn_type = cabi::compute_abi_info(ccx,\n                                          llsig.llarg_tys,\n                                          llsig.llret_ty,\n@@ -778,7 +778,7 @@ fn foreign_types_for_fn_ty(ccx: &CrateContext,\n         _ => ccx.sess.bug(\"foreign_types_for_fn_ty called on non-function type\")\n     };\n     let llsig = foreign_signature(ccx, &fn_sig, fn_sig.inputs);\n-    let ret_def = !ty::type_is_voidish(ccx.tcx, fn_sig.output);\n+    let ret_def = !type_is_voidish(ccx, fn_sig.output);\n     let fn_ty = cabi::compute_abi_info(ccx,\n                                        llsig.llarg_tys,\n                                        llsig.llret_ty,"}, {"sha": "c59b2f6eb64f2e4bf9c0006fe3b6badd157734c6", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b0abfd8204aa7673065800c4b8c2572eb5427f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b0abfd8204aa7673065800c4b8c2572eb5427f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=14b0abfd8204aa7673065800c4b8c2572eb5427f", "patch": "@@ -356,7 +356,7 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n                                          pluralize(out_type_size)));\n             }\n \n-            if !ty::type_is_voidish(ccx.tcx, out_type) {\n+            if !type_is_voidish(ccx, out_type) {\n                 let llsrcval = get_param(decl, first_real_arg);\n                 if type_is_immediate(ccx, in_type) {\n                     match fcx.llretptr.get() {"}, {"sha": "3aab6d5161911942640c015b4e0fefe5980d9625", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b0abfd8204aa7673065800c4b8c2572eb5427f/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b0abfd8204aa7673065800c4b8c2572eb5427f/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=14b0abfd8204aa7673065800c4b8c2572eb5427f", "patch": "@@ -68,7 +68,7 @@ pub fn type_of_rust_fn(cx: &CrateContext,\n     atys.push_all(type_of_explicit_args(cx, inputs));\n \n     // Use the output as the actual return value if it's immediate.\n-    if !use_out_pointer && !ty::type_is_voidish(cx.tcx, output) {\n+    if !use_out_pointer && !type_is_voidish(cx, output) {\n         Type::func(atys, &lloutputtype)\n     } else {\n         Type::func(atys, &Type::void())"}, {"sha": "538a3c89bef72362e42bcc33dc49e98f27c277e0", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14b0abfd8204aa7673065800c4b8c2572eb5427f/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b0abfd8204aa7673065800c4b8c2572eb5427f/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=14b0abfd8204aa7673065800c4b8c2572eb5427f", "patch": "@@ -1455,11 +1455,6 @@ pub fn subst(cx: ctxt,\n \n // Type utilities\n \n-pub fn type_is_voidish(tcx: ctxt, ty: t) -> bool {\n-    //! \"nil\" and \"bot\" are void types in that they represent 0 bits of information\n-    type_is_nil(ty) || type_is_bot(ty) || type_is_empty(tcx, ty)\n-}\n-\n pub fn type_is_nil(ty: t) -> bool { get(ty).sty == ty_nil }\n \n pub fn type_is_bot(ty: t) -> bool {"}]}