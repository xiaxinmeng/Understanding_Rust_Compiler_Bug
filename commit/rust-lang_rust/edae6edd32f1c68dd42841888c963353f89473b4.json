{"sha": "edae6edd32f1c68dd42841888c963353f89473b4", "node_id": "C_kwDOAAsO6NoAKGVkYWU2ZWRkMzJmMWM2OGRkNDI4NDE4ODhjOTYzMzUzZjg5NDczYjQ", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-05-17T05:50:16Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-05-17T06:40:15Z"}, "message": "Add tests for lint on type dependent on consts", "tree": {"sha": "231404a872462132b59b58f47df726d49b9354c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/231404a872462132b59b58f47df726d49b9354c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edae6edd32f1c68dd42841888c963353f89473b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edae6edd32f1c68dd42841888c963353f89473b4", "html_url": "https://github.com/rust-lang/rust/commit/edae6edd32f1c68dd42841888c963353f89473b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edae6edd32f1c68dd42841888c963353f89473b4/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1d65eaa456d3986e38868e68e6ce25d802f06b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d65eaa456d3986e38868e68e6ce25d802f06b4", "html_url": "https://github.com/rust-lang/rust/commit/c1d65eaa456d3986e38868e68e6ce25d802f06b4"}], "stats": {"total": 114, "additions": 114, "deletions": 0}, "files": [{"sha": "c1b77c67c1fe2d96109c04aca47e040dccac29ec", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edae6edd32f1c68dd42841888c963353f89473b4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edae6edd32f1c68dd42841888c963353f89473b4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=edae6edd32f1c68dd42841888c963353f89473b4", "patch": "@@ -108,6 +108,9 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     }\n \n     let future_compat_lint = || {\n+        if tcx.features().generic_const_exprs {\n+            return;\n+        }\n         if let Some(local_def_id) = uv.def.did.as_local() {\n             infcx.tcx.struct_span_lint_hir(\n                 lint::builtin::CONST_EVALUATABLE_UNCHECKED,"}, {"sha": "4cd86fecd7e9b763de28ce0dd2670ab14a88538e", "filename": "src/test/ui/const-generics/generic_const_exprs/dependence_lint.full.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/edae6edd32f1c68dd42841888c963353f89473b4/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/edae6edd32f1c68dd42841888c963353f89473b4/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.full.stderr?ref=edae6edd32f1c68dd42841888c963353f89473b4", "patch": "@@ -0,0 +1,39 @@\n+error: generic parameters may not be used in const operations\n+  --> $DIR/dependence_lint.rs:13:32\n+   |\n+LL |     let _: [u8; size_of::<*mut T>()]; // error on stable, error with gce\n+   |                                ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/dependence_lint.rs:20:37\n+   |\n+LL |     let _: [u8; if true { size_of::<T>() } else { 3 }]; // error on stable, error with gce\n+   |                                     ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+\n+warning: cannot use constants which depend on generic parameters in types\n+  --> $DIR/dependence_lint.rs:9:9\n+   |\n+LL |     [0; size_of::<*mut T>()]; // lint on stable, error with `generic_const_exprs`\n+   |         ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n+\n+warning: cannot use constants which depend on generic parameters in types\n+  --> $DIR/dependence_lint.rs:16:9\n+   |\n+LL |     [0; if false { size_of::<T>() } else { 3 }]; // lint on stable, error with gce\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n+\n+error: aborting due to 2 previous errors; 2 warnings emitted\n+"}, {"sha": "b13bcdb2c4786f392f2bc6004561ef02b2a5df0d", "filename": "src/test/ui/const-generics/generic_const_exprs/dependence_lint.gce.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/edae6edd32f1c68dd42841888c963353f89473b4/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.gce.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/edae6edd32f1c68dd42841888c963353f89473b4/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.gce.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.gce.stderr?ref=edae6edd32f1c68dd42841888c963353f89473b4", "patch": "@@ -0,0 +1,34 @@\n+error: overly complex generic constant\n+  --> $DIR/dependence_lint.rs:16:9\n+   |\n+LL |     [0; if false { size_of::<T>() } else { 3 }]; // lint on stable, error with gce\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ control flow is not supported in generic constants\n+   |\n+   = help: consider moving this anonymous constant into a `const` function\n+\n+error: overly complex generic constant\n+  --> $DIR/dependence_lint.rs:20:17\n+   |\n+LL |     let _: [u8; if true { size_of::<T>() } else { 3 }]; // error on stable, error with gce\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ control flow is not supported in generic constants\n+   |\n+   = help: consider moving this anonymous constant into a `const` function\n+\n+error: unconstrained generic constant\n+  --> $DIR/dependence_lint.rs:13:12\n+   |\n+LL |     let _: [u8; size_of::<*mut T>()]; // error on stable, error with gce\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); size_of::<*mut T>()]:`\n+\n+error: unconstrained generic constant\n+  --> $DIR/dependence_lint.rs:9:9\n+   |\n+LL |     [0; size_of::<*mut T>()]; // lint on stable, error with `generic_const_exprs`\n+   |         ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); size_of::<*mut T>()]:`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "dcdfd75def9063c2b635867e9db06526e3331ea0", "filename": "src/test/ui/const-generics/generic_const_exprs/dependence_lint.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/edae6edd32f1c68dd42841888c963353f89473b4/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edae6edd32f1c68dd42841888c963353f89473b4/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.rs?ref=edae6edd32f1c68dd42841888c963353f89473b4", "patch": "@@ -0,0 +1,25 @@\n+// revisions: full gce\n+\n+#![cfg_attr(gce, feature(generic_const_exprs))]\n+#![allow(incomplete_features)]\n+\n+use std::mem::size_of;\n+\n+fn foo<T>() {\n+    [0; size_of::<*mut T>()]; // lint on stable, error with `generic_const_exprs`\n+    //[gce]~^ ERROR unconstrained\n+    //[full]~^^ WARNING cannot use constants\n+    //[full]~| WARNING this was previously accepted\n+    let _: [u8; size_of::<*mut T>()]; // error on stable, error with gce\n+    //[full]~^ ERROR generic parameters may not be used\n+    //[gce]~^^ ERROR unconstrained generic\n+    [0; if false { size_of::<T>() } else { 3 }]; // lint on stable, error with gce\n+    //[gce]~^ ERROR overly complex\n+    //[full]~^^ WARNING cannot use constants\n+    //[full]~| WARNING this was previously accepted\n+    let _: [u8; if true { size_of::<T>() } else { 3 }]; // error on stable, error with gce\n+    //[full]~^ ERROR generic parameters may not be used\n+    //[gce]~^^ ERROR overly complex\n+}\n+\n+fn main() {}"}, {"sha": "db8dc6ed4434e589bfe4e3fea7653ebbdea3cb4b", "filename": "src/test/ui/const-generics/generic_const_exprs/no_dependence.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/edae6edd32f1c68dd42841888c963353f89473b4/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fno_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edae6edd32f1c68dd42841888c963353f89473b4/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fno_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fno_dependence.rs?ref=edae6edd32f1c68dd42841888c963353f89473b4", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+fn two_args<const N: usize, const M: usize>() -> [u8; M + 2] {\n+    [0; M + 2]\n+}\n+\n+fn yay<const N: usize>() -> [u8; 4] {\n+     two_args::<N, 2>() // no lint\n+}\n+\n+fn main() {}"}]}