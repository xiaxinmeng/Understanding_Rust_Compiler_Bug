{"sha": "993b775849bdc75eac5cd3b7d459bcbaa9514ed8", "node_id": "C_kwDOAAsO6NoAKDk5M2I3NzU4NDliZGM3NWVhYzVjZDNiN2Q0NTliY2JhYTk1MTRlZDg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-03-19T10:03:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-19T10:03:55Z"}, "message": "Rollup merge of #104100 - ink-feather-org:const_iter_range, r=the8472,fee1-dead\n\nAllow using `Range` as an `Iterator` in const contexts.\n\n~~based on #102225 by `@fee1-dead~~`", "tree": {"sha": "1f2536da254a7d3db6eec916d80193e8a0d595d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f2536da254a7d3db6eec916d80193e8a0d595d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/993b775849bdc75eac5cd3b7d459bcbaa9514ed8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkFt4LCRBK7hj4Ov3rIwAA13YIAAau5gRPDPa8qts796QgEXpD\nWcqFec3c4B6rtEU+SLY3w8tnH4Xo9wYKA/TckusSrhk35g2b7D6+/8KXlcXG8Dz7\np8AJhO/NKivWi0DlouCuflDup+MD8K3s32HwnaPNWqwGq2yrTyHRALMKhweyVEu2\nWhpJEzOPCo5OUp82Y77dh2CAkhJlLJeWqAQbzxVTg1ieag04taermN1XyxshmVD6\nTUeTILYgpludmEgMMM/EBii/DbRXkUJ3t5rjV9zbKmvopy5JS0XFv+FbBID17EYd\nSy90SFhDavnIyz/IEO33SoOLJFS7Pz3LHKgsNi9yz/l1CtdC9pL7noqNX0GE3FM=\n=YX3l\n-----END PGP SIGNATURE-----\n", "payload": "tree 1f2536da254a7d3db6eec916d80193e8a0d595d8\nparent ab9bb3ea368b2412531a3e8c07ba73d1dd690134\nparent 8a9d6bf4fd540b2a2882193cbd6232b86e5dcd7e\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1679220235 +0530\ncommitter GitHub <noreply@github.com> 1679220235 +0530\n\nRollup merge of #104100 - ink-feather-org:const_iter_range, r=the8472,fee1-dead\n\nAllow using `Range` as an `Iterator` in const contexts.\n\n~~based on #102225 by `@fee1-dead~~`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/993b775849bdc75eac5cd3b7d459bcbaa9514ed8", "html_url": "https://github.com/rust-lang/rust/commit/993b775849bdc75eac5cd3b7d459bcbaa9514ed8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/993b775849bdc75eac5cd3b7d459bcbaa9514ed8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab9bb3ea368b2412531a3e8c07ba73d1dd690134", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab9bb3ea368b2412531a3e8c07ba73d1dd690134", "html_url": "https://github.com/rust-lang/rust/commit/ab9bb3ea368b2412531a3e8c07ba73d1dd690134"}, {"sha": "8a9d6bf4fd540b2a2882193cbd6232b86e5dcd7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a9d6bf4fd540b2a2882193cbd6232b86e5dcd7e", "html_url": "https://github.com/rust-lang/rust/commit/8a9d6bf4fd540b2a2882193cbd6232b86e5dcd7e"}], "stats": {"total": 118, "additions": 87, "deletions": 31}, "files": [{"sha": "f19636fba5d95fdde9209b61da38ca554b347a78", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/993b775849bdc75eac5cd3b7d459bcbaa9514ed8/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/993b775849bdc75eac5cd3b7d459bcbaa9514ed8/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=993b775849bdc75eac5cd3b7d459bcbaa9514ed8", "patch": "@@ -1,4 +1,5 @@\n use crate::convert::TryFrom;\n+use crate::marker::Destruct;\n use crate::mem;\n use crate::ops::{self, Try};\n \n@@ -20,7 +21,8 @@ unsafe_impl_trusted_step![char i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usi\n /// The *successor* operation moves towards values that compare greater.\n /// The *predecessor* operation moves towards values that compare lesser.\n #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-pub trait Step: Clone + PartialOrd + Sized {\n+#[const_trait]\n+pub trait Step: ~const Clone + ~const PartialOrd + Sized {\n     /// Returns the number of *successor* steps required to get from `start` to `end`.\n     ///\n     /// Returns `None` if the number of steps would overflow `usize`\n@@ -234,7 +236,8 @@ macro_rules! step_integer_impls {\n         $(\n             #[allow(unreachable_patterns)]\n             #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-            impl Step for $u_narrower {\n+            #[rustc_const_unstable(feature = \"const_iter\", issue = \"92476\")]\n+            impl const Step for $u_narrower {\n                 step_identical_methods!();\n \n                 #[inline]\n@@ -266,7 +269,8 @@ macro_rules! step_integer_impls {\n \n             #[allow(unreachable_patterns)]\n             #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-            impl Step for $i_narrower {\n+            #[rustc_const_unstable(feature = \"const_iter\", issue = \"92476\")]\n+            impl const Step for $i_narrower {\n                 step_identical_methods!();\n \n                 #[inline]\n@@ -330,7 +334,8 @@ macro_rules! step_integer_impls {\n         $(\n             #[allow(unreachable_patterns)]\n             #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-            impl Step for $u_wider {\n+            #[rustc_const_unstable(feature = \"const_iter\", issue = \"92476\")]\n+            impl const Step for $u_wider {\n                 step_identical_methods!();\n \n                 #[inline]\n@@ -355,7 +360,8 @@ macro_rules! step_integer_impls {\n \n             #[allow(unreachable_patterns)]\n             #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-            impl Step for $i_wider {\n+            #[rustc_const_unstable(feature = \"const_iter\", issue = \"92476\")]\n+            impl const Step for $i_wider {\n                 step_identical_methods!();\n \n                 #[inline]\n@@ -405,7 +411,8 @@ step_integer_impls! {\n }\n \n #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-impl Step for char {\n+#[rustc_const_unstable(feature = \"const_iter\", issue = \"92476\")]\n+impl const Step for char {\n     #[inline]\n     fn steps_between(&start: &char, &end: &char) -> Option<usize> {\n         let start = start as u32;\n@@ -423,6 +430,7 @@ impl Step for char {\n     }\n \n     #[inline]\n+    #[rustc_allow_const_fn_unstable(const_try)]\n     fn forward_checked(start: char, count: usize) -> Option<char> {\n         let start = start as u32;\n         let mut res = Step::forward_checked(start, count)?;\n@@ -439,6 +447,7 @@ impl Step for char {\n     }\n \n     #[inline]\n+    #[rustc_allow_const_fn_unstable(const_try)]\n     fn backward_checked(start: char, count: usize) -> Option<char> {\n         let start = start as u32;\n         let mut res = Step::backward_checked(start, count)?;\n@@ -514,6 +523,7 @@ macro_rules! range_incl_exact_iter_impl {\n }\n \n /// Specialization implementations for `Range`.\n+#[const_trait]\n trait RangeIteratorImpl {\n     type Item;\n \n@@ -528,7 +538,7 @@ trait RangeIteratorImpl {\n     fn spec_advance_back_by(&mut self, n: usize) -> Result<(), usize>;\n }\n \n-impl<A: Step> RangeIteratorImpl for ops::Range<A> {\n+impl<A: ~const Step + ~const Destruct> const RangeIteratorImpl for ops::Range<A> {\n     type Item = A;\n \n     #[inline]\n@@ -614,7 +624,7 @@ impl<A: Step> RangeIteratorImpl for ops::Range<A> {\n     }\n }\n \n-impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {\n+impl<T: ~const TrustedStep + ~const Destruct> const RangeIteratorImpl for ops::Range<T> {\n     #[inline]\n     fn spec_next(&mut self) -> Option<T> {\n         if self.start < self.end {\n@@ -702,7 +712,8 @@ impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<A: Step> Iterator for ops::Range<A> {\n+#[rustc_const_unstable(feature = \"const_iter\", issue = \"92476\")]\n+impl<A: ~const Step + ~const Destruct> const Iterator for ops::Range<A> {\n     type Item = A;\n \n     #[inline]\n@@ -812,7 +823,8 @@ range_incl_exact_iter_impl! {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<A: Step> DoubleEndedIterator for ops::Range<A> {\n+#[rustc_const_unstable(feature = \"const_iter\", issue = \"92476\")]\n+impl<A: ~const Step + ~const Destruct> const DoubleEndedIterator for ops::Range<A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n         self.spec_next_back()"}, {"sha": "7a10dea500a969a7e344d79b97cf3f6c590535b0", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/993b775849bdc75eac5cd3b7d459bcbaa9514ed8/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/993b775849bdc75eac5cd3b7d459bcbaa9514ed8/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=993b775849bdc75eac5cd3b7d459bcbaa9514ed8", "patch": "@@ -1,3 +1,4 @@\n+use crate::marker::Destruct;\n use crate::ops::{ControlFlow, Try};\n \n /// An iterator able to yield elements from both ends.\n@@ -37,6 +38,7 @@ use crate::ops::{ControlFlow, Try};\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"DoubleEndedIterator\")]\n+#[const_trait]\n pub trait DoubleEndedIterator: Iterator {\n     /// Removes and returns an element from the end of the iterator.\n     ///\n@@ -131,7 +133,10 @@ pub trait DoubleEndedIterator: Iterator {\n     /// [`Err(k)`]: Err\n     #[inline]\n     #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"77404\")]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), usize>\n+    where\n+        Self::Item: ~const Destruct,\n+    {\n         for i in 0..n {\n             self.next_back().ok_or(i)?;\n         }\n@@ -181,6 +186,7 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iter_nth_back\", since = \"1.37.0\")]\n+    #[rustc_do_not_const_check]\n     fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n         self.advance_back_by(n).ok()?;\n         self.next_back()\n@@ -218,6 +224,7 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]\n+    #[rustc_do_not_const_check]\n     fn try_rfold<B, F, R>(&mut self, init: B, mut f: F) -> R\n     where\n         Self: Sized,\n@@ -289,6 +296,7 @@ pub trait DoubleEndedIterator: Iterator {\n     #[doc(alias = \"foldr\")]\n     #[inline]\n     #[stable(feature = \"iter_rfold\", since = \"1.27.0\")]\n+    #[rustc_do_not_const_check]\n     fn rfold<B, F>(mut self, init: B, mut f: F) -> B\n     where\n         Self: Sized,\n@@ -344,6 +352,7 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iter_rfind\", since = \"1.27.0\")]\n+    #[rustc_do_not_const_check]\n     fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>\n     where\n         Self: Sized,"}, {"sha": "6fc86550b63e75bd081303a20e46be2db8159ff8", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/993b775849bdc75eac5cd3b7d459bcbaa9514ed8/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/993b775849bdc75eac5cd3b7d459bcbaa9514ed8/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=993b775849bdc75eac5cd3b7d459bcbaa9514ed8", "patch": "@@ -1,5 +1,6 @@\n use crate::array;\n use crate::cmp::{self, Ordering};\n+use crate::marker::Destruct;\n use crate::ops::{ChangeOutputType, ControlFlow, FromResidual, Residual, Try};\n \n use super::super::try_process;\n@@ -336,8 +337,10 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"77404\")]\n-    #[rustc_do_not_const_check]\n-    fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n+    fn advance_by(&mut self, n: usize) -> Result<(), usize>\n+    where\n+        Self::Item: ~const Destruct,\n+    {\n         for i in 0..n {\n             self.next().ok_or(i)?;\n         }\n@@ -385,8 +388,10 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_do_not_const_check]\n-    fn nth(&mut self, n: usize) -> Option<Self::Item> {\n+    fn nth(&mut self, n: usize) -> Option<Self::Item>\n+    where\n+        Self::Item: ~const Destruct,\n+    {\n         self.advance_by(n).ok()?;\n         self.next()\n     }"}, {"sha": "c8f60defff771f7ca4a2064bd18e19e133f163f5", "filename": "library/core/src/iter/traits/marker.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/993b775849bdc75eac5cd3b7d459bcbaa9514ed8/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/993b775849bdc75eac5cd3b7d459bcbaa9514ed8/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs?ref=993b775849bdc75eac5cd3b7d459bcbaa9514ed8", "patch": "@@ -86,4 +86,5 @@ pub unsafe trait InPlaceIterable: Iterator {}\n /// for details. Consumers are free to rely on the invariants in unsafe code.\n #[unstable(feature = \"trusted_step\", issue = \"85731\")]\n #[rustc_specialization_trait]\n-pub unsafe trait TrustedStep: Step {}\n+#[const_trait]\n+pub unsafe trait TrustedStep: ~const Step {}"}, {"sha": "1076d357070ef5ee265cc807b75de0698f80021d", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/993b775849bdc75eac5cd3b7d459bcbaa9514ed8/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/993b775849bdc75eac5cd3b7d459bcbaa9514ed8/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=993b775849bdc75eac5cd3b7d459bcbaa9514ed8", "patch": "@@ -123,9 +123,11 @@\n #![feature(const_index_range_slice_index)]\n #![feature(const_inherent_unchecked_arith)]\n #![feature(const_int_unchecked_arith)]\n+#![feature(const_intoiterator_identity)]\n #![feature(const_intrinsic_forget)]\n #![feature(const_ipv4)]\n #![feature(const_ipv6)]\n+#![feature(const_iter)]\n #![feature(const_likely)]\n #![feature(const_maybe_uninit_uninit_array)]\n #![feature(const_maybe_uninit_as_mut_ptr)]"}, {"sha": "d56687e48c96a0d15a3e56477c52219fedda8253", "filename": "library/core/tests/iter/consts.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/993b775849bdc75eac5cd3b7d459bcbaa9514ed8/library%2Fcore%2Ftests%2Fiter%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/993b775849bdc75eac5cd3b7d459bcbaa9514ed8/library%2Fcore%2Ftests%2Fiter%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fconsts.rs?ref=993b775849bdc75eac5cd3b7d459bcbaa9514ed8", "patch": "@@ -0,0 +1,36 @@\n+#[test]\n+fn const_manual_iter() {\n+    struct S(bool);\n+\n+    impl const Iterator for S {\n+        type Item = ();\n+\n+        fn next(&mut self) -> Option<Self::Item> {\n+            if self.0 == false {\n+                self.0 = true;\n+                Some(())\n+            } else {\n+                None\n+            }\n+        }\n+    }\n+    const {\n+        let mut val = S(false);\n+        assert!(val.next().is_some());\n+        assert!(val.next().is_none());\n+        assert!(val.next().is_none());\n+    }\n+}\n+\n+#[test]\n+fn const_range() {\n+    const {\n+        let mut arr = [0; 3];\n+        for i in 0..arr.len() {\n+            arr[i] = i;\n+        }\n+        assert!(arr[0] == 0);\n+        assert!(arr[1] == 1);\n+        assert!(arr[2] == 2);\n+    }\n+}"}, {"sha": "cbb18e79e2d430de00d042d5759e565f4415a249", "filename": "library/core/tests/iter/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/993b775849bdc75eac5cd3b7d459bcbaa9514ed8/library%2Fcore%2Ftests%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/993b775849bdc75eac5cd3b7d459bcbaa9514ed8/library%2Fcore%2Ftests%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fmod.rs?ref=993b775849bdc75eac5cd3b7d459bcbaa9514ed8", "patch": "@@ -20,6 +20,8 @@ mod range;\n mod sources;\n mod traits;\n \n+mod consts;\n+\n use core::cell::Cell;\n use core::convert::TryFrom;\n use core::iter::*;"}, {"sha": "637cc6e9f629bfffc8625047e58bc1bea247d399", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/993b775849bdc75eac5cd3b7d459bcbaa9514ed8/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/993b775849bdc75eac5cd3b7d459bcbaa9514ed8/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=993b775849bdc75eac5cd3b7d459bcbaa9514ed8", "patch": "@@ -12,8 +12,11 @@\n #![feature(const_caller_location)]\n #![feature(const_cell_into_inner)]\n #![feature(const_convert)]\n+#![feature(const_for)]\n #![feature(const_hash)]\n #![feature(const_heap)]\n+#![feature(const_intoiterator_identity)]\n+#![feature(const_iter)]\n #![feature(const_maybe_uninit_as_mut_ptr)]\n #![feature(const_maybe_uninit_assume_init_read)]\n #![feature(const_nonnull_new)]"}, {"sha": "e6f7dc410b6147512fcbd31fd377202cff4bf9ce", "filename": "tests/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/993b775849bdc75eac5cd3b7d459bcbaa9514ed8/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/993b775849bdc75eac5cd3b7d459bcbaa9514ed8/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=993b775849bdc75eac5cd3b7d459bcbaa9514ed8", "patch": "@@ -228,5 +228,4 @@ fn evens_squared(n: usize) -> _ {\n \n const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n //~^ ERROR the trait bound\n-//~| ERROR the trait bound\n //~| ERROR the placeholder"}, {"sha": "9144ab9e3a6bd39daea117d723c949abeaa5b094", "filename": "tests/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/993b775849bdc75eac5cd3b7d459bcbaa9514ed8/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/993b775849bdc75eac5cd3b7d459bcbaa9514ed8/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=993b775849bdc75eac5cd3b7d459bcbaa9514ed8", "patch": "@@ -437,19 +437,6 @@ LL | fn evens_squared(n: usize) -> _ {\n    |                               not allowed in type signatures\n    |                               help: replace with an appropriate return type: `impl Iterator<Item = usize>`\n \n-error[E0277]: the trait bound `std::ops::Range<{integer}>: Iterator` is not satisfied\n-  --> $DIR/typeck_type_placeholder_item.rs:229:22\n-   |\n-LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n-   |                      ^^^^^^ `std::ops::Range<{integer}>` is not an iterator\n-   |\n-   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<{integer}>`\n-note: the trait `Iterator` is implemented for `std::ops::Range<{integer}>`, but that implementation is not `const`\n-  --> $DIR/typeck_type_placeholder_item.rs:229:14\n-   |\n-LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n-   |              ^^^^^^^\n-\n error[E0277]: the trait bound `Filter<std::ops::Range<{integer}>, [closure@$DIR/typeck_type_placeholder_item.rs:229:29: 229:32]>: Iterator` is not satisfied\n   --> $DIR/typeck_type_placeholder_item.rs:229:45\n    |\n@@ -677,7 +664,7 @@ LL |     const D: _ = 42;\n    |              not allowed in type signatures\n    |              help: replace with the correct type: `i32`\n \n-error: aborting due to 73 previous errors\n+error: aborting due to 72 previous errors\n \n Some errors have detailed explanations: E0121, E0277, E0282, E0403.\n For more information about an error, try `rustc --explain E0121`."}]}