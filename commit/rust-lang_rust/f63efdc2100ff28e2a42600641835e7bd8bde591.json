{"sha": "f63efdc2100ff28e2a42600641835e7bd8bde591", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2M2VmZGMyMTAwZmYyOGUyYTQyNjAwNjQxODM1ZTdiZDhiZGU1OTE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-25T22:04:32Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-25T23:15:42Z"}, "message": "test: De-~mut the test suite. rs=demuting", "tree": {"sha": "6778c6e2d96aae292679b6eee58df79ac154a46a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6778c6e2d96aae292679b6eee58df79ac154a46a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f63efdc2100ff28e2a42600641835e7bd8bde591", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f63efdc2100ff28e2a42600641835e7bd8bde591", "html_url": "https://github.com/rust-lang/rust/commit/f63efdc2100ff28e2a42600641835e7bd8bde591", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f63efdc2100ff28e2a42600641835e7bd8bde591/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a08eda4b6318af0df153322d10d9b907b13d0cdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a08eda4b6318af0df153322d10d9b907b13d0cdc", "html_url": "https://github.com/rust-lang/rust/commit/a08eda4b6318af0df153322d10d9b907b13d0cdc"}], "stats": {"total": 188, "additions": 67, "deletions": 121}, "files": [{"sha": "22045007134a074f152cfba7e452e3d52667100f", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=f63efdc2100ff28e2a42600641835e7bd8bde591", "patch": "@@ -87,17 +87,12 @@ fn main() {\n     for uint::range(1u, num_tasks) |i| {\n         //error!(\"spawning %?\", i);\n         let (new_chan, num_port) = init();\n-        let num_chan2 = ~mut None;\n-        *num_chan2 <-> num_chan;\n-        let num_port = ~mut Some(num_port);\n-        let new_future = do future::spawn() || {\n-            let mut num_chan = None;\n-            num_chan <-> *num_chan2;\n-            let mut num_port1 = None;\n-            num_port1 <-> *num_port;\n-            thread_ring(i, msg_per_task,\n-                        option::unwrap(num_chan),\n-                        option::unwrap(num_port1))\n+        let num_chan2 = Cell(num_chan);\n+        let num_port = Cell(num_port);\n+        let new_future = do future::spawn() {\n+            let num_chan = num_chan2.take();\n+            let num_port1 = num_port.take();\n+            thread_ring(i, msg_per_task, num_chan, num_port1)\n         };\n         futures.push(new_future);\n         num_chan = Some(new_chan);"}, {"sha": "dfe5c6de832c1837454b3abb12bfcbec833b1f50", "filename": "src/test/bench/msgsend-ring-pipes.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs?ref=f63efdc2100ff28e2a42600641835e7bd8bde591", "patch": "@@ -17,10 +17,11 @@\n // This version uses automatically compiled channel contracts.\n \n extern mod std;\n-use std::time;\n-use std::future;\n \n+use core::cell::Cell;\n use core::pipes::recv;\n+use std::time;\n+use std::future;\n \n proto! ring (\n     num:send {\n@@ -80,17 +81,12 @@ fn main() {\n     for uint::range(1u, num_tasks) |i| {\n         //error!(\"spawning %?\", i);\n         let (new_chan, num_port) = ring::init();\n-        let num_chan2 = ~mut None;\n-        *num_chan2 <-> num_chan;\n-        let num_port = ~mut Some(num_port);\n+        let num_chan2 = Cell(num_chan);\n+        let num_port = Cell(num_port);\n         let new_future = do future::spawn || {\n-            let mut num_chan = None;\n-            num_chan <-> *num_chan2;\n-            let mut num_port1 = None;\n-            num_port1 <-> *num_port;\n-            thread_ring(i, msg_per_task,\n-                        option::unwrap(num_chan),\n-                        option::unwrap(num_port1))\n+            let num_chan = num_chan2.take();\n+            let num_port1 = num_port.take();\n+            thread_ring(i, msg_per_task, num_chan, num_port1)\n         };\n         futures.push(new_future);\n         num_chan = Some(new_chan);"}, {"sha": "98c0129918a471423a4e5afdeb944ed94743e14d", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=f63efdc2100ff28e2a42600641835e7bd8bde591", "patch": "@@ -87,17 +87,12 @@ fn main() {\n     for uint::range(1u, num_tasks) |i| {\n         //error!(\"spawning %?\", i);\n         let (new_chan, num_port) = init();\n-        let num_chan2 = ~mut None;\n-        *num_chan2 <-> num_chan;\n-        let num_port = ~mut Some(num_port);\n-        let new_future = do future::spawn || {\n-            let mut num_chan = None;\n-            num_chan <-> *num_chan2;\n-            let mut num_port1 = None;\n-            num_port1 <-> *num_port;\n-            thread_ring(i, msg_per_task,\n-                        option::unwrap(num_chan),\n-                        option::unwrap(num_port1))\n+        let num_chan2 = Cell(num_chan);\n+        let num_port = Cell(num_port);\n+        let new_future = do future::spawn {\n+            let num_chan = num_chan2.take();\n+            let num_port1 = num_port.take();\n+            thread_ring(i, msg_per_task, num_chan, num_port1)\n         };\n         futures.push(new_future);\n         num_chan = Some(new_chan);"}, {"sha": "9bdc5aae3f2835fba69a917f01795e0ed54f95e6", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=f63efdc2100ff28e2a42600641835e7bd8bde591", "patch": "@@ -17,13 +17,15 @@\n //\n // The filename is a song reference; google it in quotes.\n \n+use core::cell::Cell;\n+\n fn child_generation(gens_left: uint, -c: comm::Chan<()>) {\n     // This used to be O(n^2) in the number of generations that ever existed.\n     // With this code, only as many generations are alive at a time as tasks\n     // alive at a time,\n-    let c = ~mut Some(c);\n-    do task::spawn_supervised || {\n-        let c = option::swap_unwrap(c);\n+    let c = Cell(c);\n+    do task::spawn_supervised {\n+        let c = c.take();\n         if gens_left & 1 == 1 {\n             task::yield(); // shake things up a bit\n         }"}, {"sha": "51d5a6177f6aa5aa70cb70ab22beab512a4fafda", "filename": "src/test/compile-fail/mutable-huh-variance-deep.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs?ref=f63efdc2100ff28e2a42600641835e7bd8bde591", "patch": "@@ -11,9 +11,9 @@\n // error-pattern: mismatched types\n \n fn main() {\n-    let v = ~[mut @mut ~mut ~[0]];\n+    let v = @[mut @mut @mut @[0]];\n \n-    fn f(&&v: ~[mut @mut ~mut ~[const int]]) {\n+    fn f(&&v: @[mut @mut @mut @[const int]]) {\n     }\n \n     f(v);"}, {"sha": "f2188911346e99fb825884cb4bf2e5bd394d87e8", "filename": "src/test/compile-fail/mutable-huh-variance-unique.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-unique.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern: mismatched types\n-\n-fn main() {\n-    let v = ~mut ~[0];\n-\n-    fn f(&&v: ~mut ~[const int]) {\n-        *v = ~[mut 3]\n-    }\n-\n-    f(v);\n-}"}, {"sha": "0d7e2d2377c2057d01c5cd3888623f52ea2bcddd", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=f63efdc2100ff28e2a42600641835e7bd8bde591", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use core::cell::Cell;\n+\n struct Port<T>(@T);\n \n fn main() {\n@@ -25,11 +27,10 @@ fn main() {\n         }\n     }\n \n-    let x = ~mut Some(foo(Port(@())));\n+    let x = Cell(foo(Port(@())));\n \n     do task::spawn {\n-        let mut y = None;\n-        *x <-> y; //~ ERROR value has non-owned type\n+        let y = x.take();   //~ ERROR value has non-owned type\n         log(error, y);\n     }\n }"}, {"sha": "a3a197505a34022957fab8ae0a74859dbafecacc", "filename": "src/test/compile-fail/unique-mut.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Fcompile-fail%2Funique-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Fcompile-fail%2Funique-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-mut.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//error-pattern:mismatched types\n-fn main() {\n-    let i: ~int = ~mut 0;\n-}"}, {"sha": "b11a5356f698cc7fef143bec8fd1f38502b12b04", "filename": "src/test/run-pass/borrowck-preserve-box-in-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs?ref=f63efdc2100ff28e2a42600641835e7bd8bde591", "patch": "@@ -20,7 +20,7 @@ fn borrow(x: &int, f: fn(x: &int)) {\n struct F { f: ~int }\n \n pub fn main() {\n-    let mut x = ~mut @F{f: ~3};\n+    let mut x = ~@F{f: ~3};\n     do borrow(x.f) |b_x| {\n         assert *b_x == 3;\n         assert ptr::addr_of(&(*x.f)) == ptr::addr_of(&(*b_x));"}, {"sha": "d40b2f72ae8bac67b76e4772bd6eccff70086369", "filename": "src/test/run-pass/explicit-self-closures.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Fexplicit-self-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Fexplicit-self-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-closures.rs?ref=f63efdc2100ff28e2a42600641835e7bd8bde591", "patch": "@@ -21,9 +21,6 @@ impl Box {\n     fn set_many2(@mut self, xs: &[uint]) {\n         for xs.each |x| { self.x = *x; }\n     }\n-    fn set_many3(~mut self, xs: &[uint]) {\n-        for xs.each |x| { self.x = *x; }\n-    }\n }\n \n pub fn main() {}"}, {"sha": "7d5bf65dad7c168dc1e2db0dcc39b3f8521fb2c7", "filename": "src/test/run-pass/intrinsic-atomics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs?ref=f63efdc2100ff28e2a42600641835e7bd8bde591", "patch": "@@ -29,7 +29,7 @@ extern mod rusti {\n \n pub fn main() {\n     unsafe {\n-        let x = ~mut 1;\n+        let mut x = ~1;\n \n         assert rusti::atomic_cxchg(x, 1, 2) == 1;\n         assert *x == 2;"}, {"sha": "b97ebb04f716d87d05f39a4712bbdc36817fcd4e", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=f63efdc2100ff28e2a42600641835e7bd8bde591", "patch": "@@ -318,18 +318,16 @@ pub fn main() {\n //    Commented out because of option::get error\n \n     let (client_, server_) = pingpong::init();\n-    let client_ = ~mut Some(client_);\n-    let server_ = ~mut Some(server_);\n+    let client_ = Cell(client_);\n+    let server_ = Cell(server_);\n \n     task::spawn {|client_|\n-        let mut client__ = none;\n-        *client_ <-> client__;\n-        client(option::unwrap(client__));\n+        let client__ = client_.take();\n+        client(client__);\n     };\n     task::spawn {|server_|\n-        let mut server_\u02ca = none;\n-        *server_ <-> server_\u02ca;\n-        server(option::unwrap(server_\u02ca));\n+        let server__ = server_.take();\n+        server(server_\u02ca);\n     };\n   */\n }"}, {"sha": "23f2bc10046b2dc58919df9df79ca2dbea424256", "filename": "src/test/run-pass/pipe-pingpong-bounded.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs?ref=f63efdc2100ff28e2a42600641835e7bd8bde591", "patch": "@@ -14,6 +14,7 @@\n // experiment with what code the compiler should generate for bounded\n // protocols.\n \n+use core::cell::Cell;\n \n // This was generated initially by the pipe compiler, but it's been\n // modified in hopefully straightforward ways.\n@@ -111,16 +112,14 @@ mod test {\n \n pub fn main() {\n     let (client_, server_) = ::pingpong::init();\n-    let client_ = ~mut Some(client_);\n-    let server_ = ~mut Some(server_);\n-    do task::spawn || {\n-        let mut client__ = None;\n-        *client_ <-> client__;\n-        test::client(option::unwrap(client__));\n+    let client_ = Cell(client_);\n+    let server_ = Cell(server_);\n+    do task::spawn {\n+        let client__ = client_.take();\n+        test::client(client__);\n     };\n-    do task::spawn || {\n-        let mut server_\u02ca = None;\n-        *server_ <-> server_\u02ca;\n-        test::server(option::unwrap(server_\u02ca));\n+    do task::spawn {\n+        let server__ = server_.take();\n+        test::server(server_\u02ca);\n     };\n }"}, {"sha": "a4a1c562bcaff418496ddb9ee2545d02a805a0ed", "filename": "src/test/run-pass/pipe-pingpong-proto.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs?ref=f63efdc2100ff28e2a42600641835e7bd8bde591", "patch": "@@ -12,6 +12,7 @@\n \n // An example to make sure the protocol parsing syntax extension works.\n \n+use core::cell::Cell;\n use core::option;\n \n proto! pingpong (\n@@ -49,17 +50,15 @@ mod test {\n \n pub fn main() {\n     let (client_, server_) = pingpong::init();\n-    let client_ = ~mut Some(client_);\n-    let server_ = ~mut Some(server_);\n+    let client_ = Cell(client_);\n+    let server_ = Cell(server_);\n \n-    do task::spawn || {\n-        let mut client__ = None;\n-        *client_ <-> client__;\n-        test::client(option::unwrap(client__));\n+    do task::spawn {\n+        let client__ = client_.take();\n+        test::client(client__);\n     };\n-    do task::spawn || {\n-        let mut server_\u02ca = None;\n-        *server_ <-> server_\u02ca;\n-        test::server(option::unwrap(server_\u02ca));\n+    do task::spawn {\n+        let server__ = server_.take();\n+        test::server(server_\u02ca);\n     };\n }"}, {"sha": "cac6b4ef349329941af62738891cb20242107adf", "filename": "src/test/run-pass/pure-sum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpure-sum.rs?ref=f63efdc2100ff28e2a42600641835e7bd8bde591", "patch": "@@ -20,7 +20,7 @@ pure fn sums_to(v: ~[int], sum: int) -> bool {\n }\n \n pure fn sums_to_using_uniq(v: ~[int], sum: int) -> bool {\n-    let mut i = 0u, sum0 = ~mut 0;\n+    let mut i = 0u, sum0 = ~0;\n     while i < v.len() {\n         *sum0 += v[i];\n         i += 1u;\n@@ -40,7 +40,7 @@ pure fn sums_to_using_rec(v: ~[int], sum: int) -> bool {\n struct F<T> { f: T }\n \n pure fn sums_to_using_uniq_rec(v: ~[int], sum: int) -> bool {\n-    let mut i = 0u, sum0 = F {f: ~mut 0};\n+    let mut i = 0u, sum0 = F {f: ~0};\n     while i < v.len() {\n         *sum0.f += v[i];\n         i += 1u;"}, {"sha": "7011f5ba1add0a44ebfa64b9f444fc3207c38f7a", "filename": "src/test/run-pass/rcvr-borrowed-to-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs?ref=f63efdc2100ff28e2a42600641835e7bd8bde591", "patch": "@@ -31,7 +31,7 @@ pub fn main() {\n     debug!(\"y=%d\", y);\n     assert y == 6;\n \n-    let x = ~mut 6;\n+    let mut x = ~6;\n     let y = x.get();\n     debug!(\"y=%d\", y);\n     assert y == 6;"}, {"sha": "991025a1ad282cc4c396d6fc0853c9429a6b1ed4", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=f63efdc2100ff28e2a42600641835e7bd8bde591", "patch": "@@ -13,6 +13,7 @@\n // A port of task-killjoin to use a class with a dtor to manage\n // the join.\n \n+use core::cell::Cell;\n use core::comm::*;\n \n struct notify {\n@@ -49,11 +50,9 @@ fn joinable(f: fn~()) -> Port<bool> {\n         *b = true;\n     }\n     let (p, c) = stream();\n-    let c = ~mut Some(c);\n+    let c = Cell(c);\n     do task::spawn_unlinked {\n-        let mut cc = None;\n-        *c <-> cc;\n-        let ccc = option::unwrap(cc);\n+        let ccc = c.take();\n         wrapper(ccc, f)\n     }\n     p"}, {"sha": "1bb04aef28687f4d5849decda0f39d8271b7ce88", "filename": "src/test/run-pass/unique-assign-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs?ref=f63efdc2100ff28e2a42600641835e7bd8bde591", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let i = ~mut 1;\n+    let mut i = ~1;\n     // Should be a copy\n     let mut j;\n     j = copy i;"}, {"sha": "a0b7fc336e25959ed747e9069742c398b46ec7df", "filename": "src/test/run-pass/unique-decl-init-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs?ref=f63efdc2100ff28e2a42600641835e7bd8bde591", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let i = ~mut 1;\n+    let mut i = ~1;\n     // Should be a copy\n     let j = copy i;\n     *i = 2;"}, {"sha": "ac8796674abb8213678407062b8da61f50a8d2ed", "filename": "src/test/run-pass/unique-in-vec-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs?ref=f63efdc2100ff28e2a42600641835e7bd8bde591", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let a = ~[~mut 10];\n+    let mut a = ~[~10];\n     let b = copy a;\n \n     assert *a[0] == 10;"}, {"sha": "8784dbeb0af404e85b238f801a046287bf98cb03", "filename": "src/test/run-pass/unique-mutable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Funique-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63efdc2100ff28e2a42600641835e7bd8bde591/src%2Ftest%2Frun-pass%2Funique-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-mutable.rs?ref=f63efdc2100ff28e2a42600641835e7bd8bde591", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let i = ~mut 0;\n+    let mut i = ~0;\n     *i = 1;\n     assert *i == 1;\n }"}]}