{"sha": "4babfae9cba0409d2eed2c5caa623fae0445a50e", "node_id": "C_kwDOAAsO6NoAKDRiYWJmYWU5Y2JhMDQwOWQyZWVkMmM1Y2FhNjIzZmFlMDQ0NWE1MGU", "commit": {"author": {"name": "surechen", "email": "chenshuo17@huawei.com", "date": "2021-09-30T11:06:42Z"}, "committer": {"name": "surechen", "email": "chenshuo17@huawei.com", "date": "2021-09-30T11:06:42Z"}, "message": "fix issue #7731\n\nMake if_then_else handle situation of cond.kind = ExprKind::DropTemps(ExprKind::Binary(BinOpKind::And || BinOpKind::Or, left, right), ..) =", "tree": {"sha": "43f1f78a197f619a51438c1e0a22b3a55bfd1c6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43f1f78a197f619a51438c1e0a22b3a55bfd1c6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4babfae9cba0409d2eed2c5caa623fae0445a50e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4babfae9cba0409d2eed2c5caa623fae0445a50e", "html_url": "https://github.com/rust-lang/rust/commit/4babfae9cba0409d2eed2c5caa623fae0445a50e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4babfae9cba0409d2eed2c5caa623fae0445a50e/comments", "author": {"login": "surechen", "id": 7249331, "node_id": "MDQ6VXNlcjcyNDkzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/7249331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/surechen", "html_url": "https://github.com/surechen", "followers_url": "https://api.github.com/users/surechen/followers", "following_url": "https://api.github.com/users/surechen/following{/other_user}", "gists_url": "https://api.github.com/users/surechen/gists{/gist_id}", "starred_url": "https://api.github.com/users/surechen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/surechen/subscriptions", "organizations_url": "https://api.github.com/users/surechen/orgs", "repos_url": "https://api.github.com/users/surechen/repos", "events_url": "https://api.github.com/users/surechen/events{/privacy}", "received_events_url": "https://api.github.com/users/surechen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "surechen", "id": 7249331, "node_id": "MDQ6VXNlcjcyNDkzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/7249331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/surechen", "html_url": "https://github.com/surechen", "followers_url": "https://api.github.com/users/surechen/followers", "following_url": "https://api.github.com/users/surechen/following{/other_user}", "gists_url": "https://api.github.com/users/surechen/gists{/gist_id}", "starred_url": "https://api.github.com/users/surechen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/surechen/subscriptions", "organizations_url": "https://api.github.com/users/surechen/orgs", "repos_url": "https://api.github.com/users/surechen/repos", "events_url": "https://api.github.com/users/surechen/events{/privacy}", "received_events_url": "https://api.github.com/users/surechen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "685b77316f3fbc35bfe1982803df7133cd2cb36d", "url": "https://api.github.com/repos/rust-lang/rust/commits/685b77316f3fbc35bfe1982803df7133cd2cb36d", "html_url": "https://github.com/rust-lang/rust/commit/685b77316f3fbc35bfe1982803df7133cd2cb36d"}], "stats": {"total": 102, "additions": 96, "deletions": 6}, "files": [{"sha": "31e416bd4d663ae5f0fc0bf708aeec102d66d511", "filename": "clippy_lints/src/if_then_panic.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4babfae9cba0409d2eed2c5caa623fae0445a50e/clippy_lints%2Fsrc%2Fif_then_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4babfae9cba0409d2eed2c5caa623fae0445a50e/clippy_lints%2Fsrc%2Fif_then_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_then_panic.rs?ref=4babfae9cba0409d2eed2c5caa623fae0445a50e", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::higher::PanicExpn;\n use clippy_utils::is_expn_of;\n use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n-use rustc_hir::{Block, Expr, ExprKind, StmtKind, UnOp};\n+use rustc_hir::{BinOpKind, Block, Expr, ExprKind, StmtKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -74,10 +74,38 @@ impl LateLintPass<'_> for IfThenPanic {\n                 };\n                 let mut applicability = Applicability::MachineApplicable;\n                 let sugg = snippet_with_applicability(cx, span, \"..\", &mut applicability);\n-\n-                let cond_sugg =\n-                if let ExprKind::DropTemps(Expr{kind: ExprKind::Unary(UnOp::Not, not_expr), ..}) = cond.kind {\n-                    snippet_with_applicability(cx, not_expr.span, \"..\", &mut applicability).to_string()\n+                //let mut cond_sugg = format!(\"!{}\", snippet_with_applicability(cx, cond.span, \"..\", &mut applicability));\n+                let cond_sugg = if let ExprKind::DropTemps(e, ..) = cond.kind {\n+                    if let Expr{kind: ExprKind::Unary(UnOp::Not, not_expr), ..} = e {\n+                        snippet_with_applicability(cx, not_expr.span, \"..\", &mut applicability).to_string()\n+                    } else if let Expr{kind: ExprKind::Binary(op, left, right), ..} = e {//BinOp{BinOpKind::And, ..}\n+                        match op.node {\n+                            BinOpKind::And | BinOpKind::Or => {\n+                                let left_span =  {\n+                                    if let Expr{kind: ExprKind::Unary(UnOp::Not, not_expr), ..} = left {\n+                                        snippet_with_applicability(cx, not_expr.span, \"..\", &mut applicability).to_string()\n+                                    } else {\n+                                        format!(\"!{}\", snippet_with_applicability(cx, left.span, \"..\", &mut applicability))\n+                                    }\n+                                };\n+                                let right_span = {\n+                                    if let Expr{kind: ExprKind::Unary(UnOp::Not, not_expr), ..} = right {\n+                                        snippet_with_applicability(cx, not_expr.span, \"..\", &mut applicability).to_string()\n+                                    } else {\n+                                        format!(\"!{}\", snippet_with_applicability(cx, right.span, \"..\", &mut applicability))\n+                                    }\n+                                };\n+                                if op.node == BinOpKind::And {\n+                                  format!(\"{} || {}\", left_span, right_span)\n+                                } else  {\n+                                  format!(\"{} && {}\", left_span, right_span)\n+                                }\n+                            }\n+                            _ => format!(\"!({})\", snippet_with_applicability(cx, cond.span, \"..\", &mut applicability))\n+                        }\n+                    } else {\n+                        format!(\"!{}\", snippet_with_applicability(cx, cond.span, \"..\", &mut applicability))\n+                    }\n                 } else {\n                     format!(\"!{}\", snippet_with_applicability(cx, cond.span, \"..\", &mut applicability))\n                 };"}, {"sha": "f72bc6f5979d3b5f458f7f9b1461caa4b8127805", "filename": "tests/ui/if_then_panic.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4babfae9cba0409d2eed2c5caa623fae0445a50e/tests%2Fui%2Fif_then_panic.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4babfae9cba0409d2eed2c5caa623fae0445a50e/tests%2Fui%2Fif_then_panic.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_then_panic.fixed?ref=4babfae9cba0409d2eed2c5caa623fae0445a50e", "patch": "@@ -31,4 +31,10 @@ fn main() {\n     } else {\n         println!(\"qwq\");\n     }\n+    let b = vec![1, 2, 3];\n+    assert!(!b.is_empty(), \"panic1\");\n+    assert!(!b.is_empty() || !a.is_empty(), \"panic2\");\n+    assert!(!a.is_empty() || b.is_empty(), \"panic3\");\n+    assert!(!b.is_empty() && !a.is_empty(), \"panic4\");\n+    assert!(!a.is_empty() && b.is_empty(), \"panic5\");\n }"}, {"sha": "10433c8d54f2dd1a4fe3211f8e7a60c7c5d33625", "filename": "tests/ui/if_then_panic.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4babfae9cba0409d2eed2c5caa623fae0445a50e/tests%2Fui%2Fif_then_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4babfae9cba0409d2eed2c5caa623fae0445a50e/tests%2Fui%2Fif_then_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_then_panic.rs?ref=4babfae9cba0409d2eed2c5caa623fae0445a50e", "patch": "@@ -35,4 +35,20 @@ fn main() {\n     } else {\n         println!(\"qwq\");\n     }\n+    let b = vec![1, 2, 3];\n+    if b.is_empty() {\n+        panic!(\"panic1\");\n+    }\n+    if b.is_empty() && a.is_empty() {\n+        panic!(\"panic2\");\n+    }\n+    if a.is_empty() && !b.is_empty() {\n+        panic!(\"panic3\");\n+    }\n+    if b.is_empty() || a.is_empty() {\n+        panic!(\"panic4\");\n+    }\n+    if a.is_empty() || !b.is_empty() {\n+        panic!(\"panic5\");\n+    }\n }"}, {"sha": "502ba10b8f498133a3a52bfc1c3fd9288b172e58", "filename": "tests/ui/if_then_panic.stderr", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4babfae9cba0409d2eed2c5caa623fae0445a50e/tests%2Fui%2Fif_then_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4babfae9cba0409d2eed2c5caa623fae0445a50e/tests%2Fui%2Fif_then_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_then_panic.stderr?ref=4babfae9cba0409d2eed2c5caa623fae0445a50e", "patch": "@@ -16,5 +16,45 @@ LL | |         panic!(\"qwqwq\");\n LL | |     }\n    | |_____^ help: try: `assert!(a.is_empty(), \"qwqwq\");`\n \n-error: aborting due to 2 previous errors\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/if_then_panic.rs:39:5\n+   |\n+LL | /     if b.is_empty() {\n+LL | |         panic!(\"panic1\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!b.is_empty(), \"panic1\");`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/if_then_panic.rs:42:5\n+   |\n+LL | /     if b.is_empty() && a.is_empty() {\n+LL | |         panic!(\"panic2\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!b.is_empty() || !a.is_empty(), \"panic2\");`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/if_then_panic.rs:45:5\n+   |\n+LL | /     if a.is_empty() && !b.is_empty() {\n+LL | |         panic!(\"panic3\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!a.is_empty() || b.is_empty(), \"panic3\");`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/if_then_panic.rs:48:5\n+   |\n+LL | /     if b.is_empty() || a.is_empty() {\n+LL | |         panic!(\"panic4\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!b.is_empty() && !a.is_empty(), \"panic4\");`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/if_then_panic.rs:51:5\n+   |\n+LL | /     if a.is_empty() || !b.is_empty() {\n+LL | |         panic!(\"panic5\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(!a.is_empty() && b.is_empty(), \"panic5\");`\n+\n+error: aborting due to 7 previous errors\n "}]}