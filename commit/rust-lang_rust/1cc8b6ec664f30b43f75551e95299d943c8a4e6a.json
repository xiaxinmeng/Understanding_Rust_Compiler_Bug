{"sha": "1cc8b6ec664f30b43f75551e95299d943c8a4e6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjYzhiNmVjNjY0ZjMwYjQzZjc1NTUxZTk1Mjk5ZDk0M2M4YTRlNmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-02T11:21:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-02T11:21:26Z"}, "message": "Auto merge of #22510 - GuillaumeGomez:audit-integer-libstd-thread, r=alexcrichton\n\nPart of #22240.", "tree": {"sha": "3da09d3afaf48ac4d0ee4e7119793e3e38ac09c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3da09d3afaf48ac4d0ee4e7119793e3e38ac09c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cc8b6ec664f30b43f75551e95299d943c8a4e6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cc8b6ec664f30b43f75551e95299d943c8a4e6a", "html_url": "https://github.com/rust-lang/rust/commit/1cc8b6ec664f30b43f75551e95299d943c8a4e6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cc8b6ec664f30b43f75551e95299d943c8a4e6a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5142056f7f57387dc37361889d13409667b920d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5142056f7f57387dc37361889d13409667b920d", "html_url": "https://github.com/rust-lang/rust/commit/c5142056f7f57387dc37361889d13409667b920d"}, {"sha": "6d7427923441363c870c5976246006dd3edc41ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d7427923441363c870c5976246006dd3edc41ae", "html_url": "https://github.com/rust-lang/rust/commit/6d7427923441363c870c5976246006dd3edc41ae"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "5dd4be336ec25b382f3729c73ddc5be12811a0b0", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1cc8b6ec664f30b43f75551e95299d943c8a4e6a/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc8b6ec664f30b43f75551e95299d943c8a4e6a/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=1cc8b6ec664f30b43f75551e95299d943c8a4e6a", "patch": "@@ -170,7 +170,7 @@ pub struct Builder {\n     // A name for the thread-to-be, for identification in panic messages\n     name: Option<String>,\n     // The size of the stack for the spawned thread\n-    stack_size: Option<uint>,\n+    stack_size: Option<usize>,\n     // Thread-local stdout\n     stdout: Option<Box<Writer + Send + 'static>>,\n     // Thread-local stderr\n@@ -200,7 +200,7 @@ impl Builder {\n \n     /// Set the size of the stack for the new thread.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn stack_size(mut self, size: uint) -> Builder {\n+    pub fn stack_size(mut self, size: usize) -> Builder {\n         self.stack_size = Some(size);\n         self\n     }\n@@ -283,8 +283,8 @@ impl Builder {\n         // address at which our stack started).\n         let main = move || {\n             let something_around_the_top_of_the_stack = 1;\n-            let addr = &something_around_the_top_of_the_stack as *const int;\n-            let my_stack_top = addr as uint;\n+            let addr = &something_around_the_top_of_the_stack as *const isize;\n+            let my_stack_top = addr as usize;\n             let my_stack_bottom = my_stack_top - stack_size + 1024;\n             unsafe {\n                 stack::record_os_managed_stack_bounds(my_stack_bottom, my_stack_top);\n@@ -779,7 +779,7 @@ mod test {\n \n         let (tx, rx) = channel();\n \n-        fn f(i: int, tx: Sender<()>) {\n+        fn f(i: i32, tx: Sender<()>) {\n             let tx = tx.clone();\n             thread::spawn(move|| {\n                 if i == 0 {\n@@ -808,13 +808,13 @@ mod test {\n     }\n \n     fn avoid_copying_the_body<F>(spawnfn: F) where F: FnOnce(Thunk<'static>) {\n-        let (tx, rx) = channel::<uint>();\n+        let (tx, rx) = channel::<u32>();\n \n         let x = box 1;\n-        let x_in_parent = (&*x) as *const int as uint;\n+        let x_in_parent = (&*x) as *const isize as u32;\n \n         spawnfn(Thunk::new(move|| {\n-            let x_in_child = (&*x) as *const int as uint;\n+            let x_in_child = (&*x) as *const isize as u32;\n             tx.send(x_in_child).unwrap();\n         }));\n \n@@ -853,8 +853,8 @@ mod test {\n         // climbing the task tree to dereference each ancestor. (See #1789)\n         // (well, it would if the constant were 8000+ - I lowered it to be more\n         // valgrind-friendly. try this at home, instead..!)\n-        static GENERATIONS: uint = 16;\n-        fn child_no(x: uint) -> Thunk<'static> {\n+        static GENERATIONS: usize = 16;\n+        fn child_no(x: usize) -> Thunk<'static> {\n             return Thunk::new(move|| {\n                 if x < GENERATIONS {\n                     thread::spawn(move|| child_no(x+1).invoke(()));"}]}