{"sha": "47327145e3babaeef39e8bf41ebaeaf1ccab0d63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MzI3MTQ1ZTNiYWJhZWVmMzllOGJmNDFlYmFlYWYxY2NhYjBkNjM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2021-06-16T14:48:06Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2021-06-21T11:38:46Z"}, "message": "Disambiguate between SourceFiles from different crates even if they have the same path.", "tree": {"sha": "5302fd3abb12b543e69fd0edf8df072b3d67c181", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5302fd3abb12b543e69fd0edf8df072b3d67c181"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47327145e3babaeef39e8bf41ebaeaf1ccab0d63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47327145e3babaeef39e8bf41ebaeaf1ccab0d63", "html_url": "https://github.com/rust-lang/rust/commit/47327145e3babaeef39e8bf41ebaeaf1ccab0d63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47327145e3babaeef39e8bf41ebaeaf1ccab0d63/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da5c911b5f9c0def28662e52e47773d0438f4641", "url": "https://api.github.com/repos/rust-lang/rust/commits/da5c911b5f9c0def28662e52e47773d0438f4641", "html_url": "https://github.com/rust-lang/rust/commit/da5c911b5f9c0def28662e52e47773d0438f4641"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "4465634397953d8485a4e6d493ef7e74b51adb0b", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/47327145e3babaeef39e8bf41ebaeaf1ccab0d63/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47327145e3babaeef39e8bf41ebaeaf1ccab0d63/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=47327145e3babaeef39e8bf41ebaeaf1ccab0d63", "patch": "@@ -117,25 +117,42 @@ impl FileLoader for RealFileLoader {\n     }\n }\n \n-// This is a `SourceFile` identifier that is used to correlate `SourceFile`s between\n-// subsequent compilation sessions (which is something we need to do during\n-// incremental compilation).\n+/// This is a [SourceFile] identifier that is used to correlate source files between\n+/// subsequent compilation sessions (which is something we need to do during\n+/// incremental compilation).\n+///\n+/// The [StableSourceFileId] also contains the CrateNum of the crate the source\n+/// file was originally parsed for. This way we get two separate entries in\n+/// the [SourceMap] if the same file is part of both the local and an upstream\n+/// crate. Trying to only have one entry for both cases is problematic because\n+/// at the point where we discover that there's a local use of the file in\n+/// addition to the upstream one, we might already have made decisions based on\n+/// the assumption that it's an upstream file. Treating the two files as\n+/// different has no real downsides.\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable, Debug)]\n-pub struct StableSourceFileId(u128);\n+pub struct StableSourceFileId {\n+    // A hash of the source file's FileName. This is hash so that it's size\n+    // is more predictable than if we included the actual FileName value.\n+    file_name_hash: u64,\n+\n+    // The CrateNum of the crate this source file was originally parsed for.\n+    // We cannot include this information in the hash because at the time\n+    // of hashing we don't have the context to map from the CrateNum's numeric\n+    // value to a StableCrateId.\n+    cnum: CrateNum,\n+}\n \n // FIXME: we need a more globally consistent approach to the problem solved by\n // StableSourceFileId, perhaps built atop source_file.name_hash.\n impl StableSourceFileId {\n     pub fn new(source_file: &SourceFile) -> StableSourceFileId {\n-        StableSourceFileId::new_from_name(&source_file.name)\n+        StableSourceFileId::new_from_name(&source_file.name, source_file.cnum)\n     }\n \n-    fn new_from_name(name: &FileName) -> StableSourceFileId {\n+    fn new_from_name(name: &FileName, cnum: CrateNum) -> StableSourceFileId {\n         let mut hasher = StableHasher::new();\n-\n         name.hash(&mut hasher);\n-\n-        StableSourceFileId(hasher.finish())\n+        StableSourceFileId { file_name_hash: hasher.finish(), cnum }\n     }\n }\n \n@@ -274,7 +291,7 @@ impl SourceMap {\n         // be empty, so the working directory will be used.\n         let (filename, _) = self.path_mapping.map_filename_prefix(&filename);\n \n-        let file_id = StableSourceFileId::new_from_name(&filename);\n+        let file_id = StableSourceFileId::new_from_name(&filename, LOCAL_CRATE);\n \n         let lrc_sf = match self.source_file_by_stable_id(file_id) {\n             Some(lrc_sf) => lrc_sf,\n@@ -288,6 +305,10 @@ impl SourceMap {\n                     self.hash_kind,\n                 ));\n \n+                // Let's make sure the file_id we generated above actually matches\n+                // the ID we generate for the SourceFile we just created.\n+                debug_assert_eq!(StableSourceFileId::new(&source_file), file_id);\n+\n                 let mut files = self.files.borrow_mut();\n \n                 files.source_files.push(source_file.clone());"}]}