{"sha": "140e79385494da83f5a36f8fefa001b2180fa541", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MGU3OTM4NTQ5NGRhODNmNWEzNmY4ZmVmYTAwMWIyMTgwZmE1NDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-18T12:59:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-18T12:59:29Z"}, "message": "Auto merge of #29131 - apasel422:transmute, r=bluss", "tree": {"sha": "3eac02a92d5b0dd13a91f2aa36693ceaa990df2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3eac02a92d5b0dd13a91f2aa36693ceaa990df2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/140e79385494da83f5a36f8fefa001b2180fa541", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/140e79385494da83f5a36f8fefa001b2180fa541", "html_url": "https://github.com/rust-lang/rust/commit/140e79385494da83f5a36f8fefa001b2180fa541", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/140e79385494da83f5a36f8fefa001b2180fa541/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f2ad610a8e33a1525897afb04774e53aaad3fc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f2ad610a8e33a1525897afb04774e53aaad3fc2", "html_url": "https://github.com/rust-lang/rust/commit/3f2ad610a8e33a1525897afb04774e53aaad3fc2"}, {"sha": "6031a58a208d9b1912095ff05846d4119a023c95", "url": "https://api.github.com/repos/rust-lang/rust/commits/6031a58a208d9b1912095ff05846d4119a023c95", "html_url": "https://github.com/rust-lang/rust/commit/6031a58a208d9b1912095ff05846d4119a023c95"}], "stats": {"total": 25, "additions": 5, "deletions": 20}, "files": [{"sha": "4783b4339dac3af888633b490e6c2cea36b88e2c", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/140e79385494da83f5a36f8fefa001b2180fa541/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/140e79385494da83f5a36f8fefa001b2180fa541/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=140e79385494da83f5a36f8fefa001b2180fa541", "patch": "@@ -137,7 +137,7 @@ pub struct IntermediateBox<T: ?Sized> {\n \n impl<T> Place<T> for IntermediateBox<T> {\n     fn pointer(&mut self) -> *mut T {\n-        unsafe { ::core::mem::transmute(self.ptr) }\n+        self.ptr as *mut T\n     }\n }\n "}, {"sha": "1c6cb06d54ae4218530c3b3e22df155c442c83a6", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/140e79385494da83f5a36f8fefa001b2180fa541/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/140e79385494da83f5a36f8fefa001b2180fa541/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=140e79385494da83f5a36f8fefa001b2180fa541", "patch": "@@ -932,15 +932,6 @@ pub mod writer {\n             }\n         }\n \n-        /// FIXME(pcwalton): Workaround for badness in trans. DO NOT USE ME.\n-        pub unsafe fn unsafe_clone(&self) -> Encoder<'a> {\n-            Encoder {\n-                writer: mem::transmute_copy(&self.writer),\n-                size_positions: self.size_positions.clone(),\n-                relax_limit: self.relax_limit,\n-            }\n-        }\n-\n         pub fn start_tag(&mut self, tag_id: usize) -> EncodeResult {\n             debug!(\"Start tag {:?}\", tag_id);\n             assert!(tag_id >= NUM_IMPLICIT_TAGS);"}, {"sha": "fe84cffa8c660cecf0540bd0f9c53892b67b4769", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/140e79385494da83f5a36f8fefa001b2180fa541/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/140e79385494da83f5a36f8fefa001b2180fa541/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=140e79385494da83f5a36f8fefa001b2180fa541", "patch": "@@ -60,7 +60,7 @@ pub use self::DLLStorageClassTypes::*;\n \n use std::ffi::CString;\n use std::cell::RefCell;\n-use std::{slice, mem};\n+use std::slice;\n use libc::{c_uint, c_ushort, uint64_t, c_int, size_t, c_char};\n use libc::{c_longlong, c_ulonglong, c_void};\n use debuginfo::{DIBuilderRef, DIDescriptor,\n@@ -2307,7 +2307,7 @@ pub unsafe extern \"C\" fn rust_llvm_string_write_impl(sr: RustStringRef,\n                                                      size: size_t) {\n     let slice = slice::from_raw_parts(ptr as *const u8, size as usize);\n \n-    let sr: RustStringRepr = mem::transmute(sr);\n+    let sr = sr as RustStringRepr;\n     (*sr).borrow_mut().push_all(slice);\n }\n "}, {"sha": "fa562dadde3c20957772255a5cb3b0727719217e", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/140e79385494da83f5a36f8fefa001b2180fa541/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/140e79385494da83f5a36f8fefa001b2180fa541/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=140e79385494da83f5a36f8fefa001b2180fa541", "patch": "@@ -89,7 +89,6 @@ use libc::c_uint;\n use std::ffi::{CStr, CString};\n use std::cell::{Cell, RefCell};\n use std::collections::{HashMap, HashSet};\n-use std::mem;\n use std::str;\n use std::{i8, i16, i32, i64};\n use syntax::abi::{Rust, RustCall, RustIntrinsic, PlatformIntrinsic, Abi};\n@@ -2664,11 +2663,7 @@ impl Iterator for ValueIter {\n     fn next(&mut self) -> Option<ValueRef> {\n         let old = self.cur;\n         if !old.is_null() {\n-            self.cur = unsafe {\n-                let step: unsafe extern \"C\" fn(ValueRef) -> ValueRef =\n-                    mem::transmute_copy(&self.step);\n-                step(old)\n-            };\n+            self.cur = unsafe { (self.step)(old) };\n             Some(old)\n         } else {\n             None"}, {"sha": "5629cba1e0b3c4675c1da38816e00e81a746414c", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/140e79385494da83f5a36f8fefa001b2180fa541/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/140e79385494da83f5a36f8fefa001b2180fa541/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=140e79385494da83f5a36f8fefa001b2180fa541", "patch": "@@ -22,7 +22,6 @@ use prelude::v1::*;\n \n use env;\n use ffi::{CString, OsString};\n-use mem;\n use path::{Path, PathBuf};\n \n pub struct DynamicLibrary {\n@@ -114,7 +113,7 @@ impl DynamicLibrary {\n         // the destructor does not run.\n         match maybe_symbol_value {\n             Err(err) => Err(err),\n-            Ok(symbol_value) => Ok(mem::transmute(symbol_value))\n+            Ok(symbol_value) => Ok(symbol_value as *mut T)\n         }\n     }\n }"}]}