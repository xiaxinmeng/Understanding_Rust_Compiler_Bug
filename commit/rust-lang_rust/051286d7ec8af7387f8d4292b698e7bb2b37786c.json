{"sha": "051286d7ec8af7387f8d4292b698e7bb2b37786c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MTI4NmQ3ZWM4YWY3Mzg3ZjhkNDI5MmI2OThlN2JiMmIzNzc4NmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-05T17:01:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-05T17:01:50Z"}, "message": "Auto merge of #7638 - xFrednet:7569-avoid-indexing-in-clippy, r=Manishearth\n\nAvoid slice indexing in Clippy (down with the ICEs)\n\nWhile working on #7569 I got about 23 lint reports where we can avoid slice indexing by destructing the slice early. This is a preparation PR to avoid fixing them in the lint PR. (The implementation already takes about 300 lines without tests :sweat_smile:). Either way, this should hopefully be easy to review :upside_down_face:\n\n---\n\nchangelog: none", "tree": {"sha": "c3d674d69a511c5c7be4ca03e2bd85960f27899d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3d674d69a511c5c7be4ca03e2bd85960f27899d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/051286d7ec8af7387f8d4292b698e7bb2b37786c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/051286d7ec8af7387f8d4292b698e7bb2b37786c", "html_url": "https://github.com/rust-lang/rust/commit/051286d7ec8af7387f8d4292b698e7bb2b37786c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/051286d7ec8af7387f8d4292b698e7bb2b37786c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df7e63b381ef57585d2a449130d42af38918cb3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/df7e63b381ef57585d2a449130d42af38918cb3a", "html_url": "https://github.com/rust-lang/rust/commit/df7e63b381ef57585d2a449130d42af38918cb3a"}, {"sha": "62b46125cb66d1f9050711d012cd16c49c99217c", "url": "https://api.github.com/repos/rust-lang/rust/commits/62b46125cb66d1f9050711d012cd16c49c99217c", "html_url": "https://github.com/rust-lang/rust/commit/62b46125cb66d1f9050711d012cd16c49c99217c"}], "stats": {"total": 116, "additions": 58, "deletions": 58}, "files": [{"sha": "47e5b0d583dabcee654d1613e6057a06459f5112", "filename": "clippy_lints/src/blocks_in_if_conditions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=051286d7ec8af7387f8d4292b698e7bb2b37786c", "patch": "@@ -61,8 +61,8 @@ impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n             // do not lint if the closure is called using an iterator (see #1141)\n             if_chain! {\n                 if let Some(parent) = get_parent_expr(self.cx, expr);\n-                if let ExprKind::MethodCall(_, _, args, _) = parent.kind;\n-                let caller = self.cx.typeck_results().expr_ty(&args[0]);\n+                if let ExprKind::MethodCall(_, _, [self_arg, ..], _) = &parent.kind;\n+                let caller = self.cx.typeck_results().expr_ty(self_arg);\n                 if let Some(iter_id) = self.cx.tcx.get_diagnostic_item(sym::Iterator);\n                 if implements_trait(self.cx, caller, iter_id, &[]);\n                 then {"}, {"sha": "5880859e719f649c5ccf8d25a20daa81c79da0e5", "filename": "clippy_lints/src/casts/cast_ptr_alignment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs?ref=051286d7ec8af7387f8d4292b698e7bb2b37786c", "patch": "@@ -19,7 +19,7 @@ pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n             cx.typeck_results().expr_ty(expr),\n         );\n         lint_cast_ptr_alignment(cx, expr, cast_from, cast_to);\n-    } else if let ExprKind::MethodCall(method_path, _, args, _) = expr.kind {\n+    } else if let ExprKind::MethodCall(method_path, _, [self_arg, ..], _) = &expr.kind {\n         if_chain! {\n             if method_path.ident.name == sym!(cast);\n             if let Some(generic_args) = method_path.args;\n@@ -28,7 +28,7 @@ pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n             if !is_hir_ty_cfg_dependant(cx, cast_to);\n             then {\n                 let (cast_from, cast_to) =\n-                    (cx.typeck_results().expr_ty(&args[0]), cx.typeck_results().expr_ty(expr));\n+                    (cx.typeck_results().expr_ty(self_arg), cx.typeck_results().expr_ty(expr));\n                 lint_cast_ptr_alignment(cx, expr, cast_from, cast_to);\n             }\n         }"}, {"sha": "eda611117babf9c5561b09dd4b6bea8d94164b10", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=051286d7ec8af7387f8d4292b698e7bb2b37786c", "patch": "@@ -362,22 +362,22 @@ fn detect_hypot(cx: &LateContext<'_>, args: &[Expr<'_>]) -> Option<String> {\n         if_chain! {\n             if let ExprKind::MethodCall(\n                 PathSegment { ident: lmethod_name, .. },\n-                ref _lspan,\n-                largs,\n+                _lspan,\n+                [largs_0, largs_1, ..],\n                 _\n-            ) = add_lhs.kind;\n+            ) = &add_lhs.kind;\n             if let ExprKind::MethodCall(\n                 PathSegment { ident: rmethod_name, .. },\n-                ref _rspan,\n-                rargs,\n+                _rspan,\n+                [rargs_0, rargs_1, ..],\n                 _\n-            ) = add_rhs.kind;\n+            ) = &add_rhs.kind;\n             if lmethod_name.as_str() == \"powi\" && rmethod_name.as_str() == \"powi\";\n-            if let Some((lvalue, _)) = constant(cx, cx.typeck_results(), &largs[1]);\n-            if let Some((rvalue, _)) = constant(cx, cx.typeck_results(), &rargs[1]);\n+            if let Some((lvalue, _)) = constant(cx, cx.typeck_results(), largs_1);\n+            if let Some((rvalue, _)) = constant(cx, cx.typeck_results(), rargs_1);\n             if Int(2) == lvalue && Int(2) == rvalue;\n             then {\n-                return Some(format!(\"{}.hypot({})\", Sugg::hir(cx, &largs[0], \"..\"), Sugg::hir(cx, &rargs[0], \"..\")));\n+                return Some(format!(\"{}.hypot({})\", Sugg::hir(cx, largs_0, \"..\"), Sugg::hir(cx, rargs_0, \"..\")));\n             }\n         }\n     }\n@@ -407,8 +407,8 @@ fn check_expm1(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if cx.typeck_results().expr_ty(lhs).is_floating_point();\n         if let Some((value, _)) = constant(cx, cx.typeck_results(), rhs);\n         if F32(1.0) == value || F64(1.0) == value;\n-        if let ExprKind::MethodCall(path, _, method_args, _) = lhs.kind;\n-        if cx.typeck_results().expr_ty(&method_args[0]).is_floating_point();\n+        if let ExprKind::MethodCall(path, _, [self_arg, ..], _) = &lhs.kind;\n+        if cx.typeck_results().expr_ty(self_arg).is_floating_point();\n         if path.ident.name.as_str() == \"exp\";\n         then {\n             span_lint_and_sugg(\n@@ -419,7 +419,7 @@ fn check_expm1(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                 \"consider using\",\n                 format!(\n                     \"{}.exp_m1()\",\n-                    Sugg::hir(cx, &method_args[0], \"..\")\n+                    Sugg::hir(cx, self_arg, \"..\")\n                 ),\n                 Applicability::MachineApplicable,\n             );\n@@ -617,16 +617,16 @@ fn check_log_division(cx: &LateContext<'_>, expr: &Expr<'_>) {\n             rhs,\n         ) = &expr.kind;\n         if are_same_base_logs(cx, lhs, rhs);\n-        if let ExprKind::MethodCall(_, _, largs, _) = lhs.kind;\n-        if let ExprKind::MethodCall(_, _, rargs, _) = rhs.kind;\n+        if let ExprKind::MethodCall(_, _, [largs_self, ..], _) = &lhs.kind;\n+        if let ExprKind::MethodCall(_, _, [rargs_self, ..], _) = &rhs.kind;\n         then {\n             span_lint_and_sugg(\n                 cx,\n                 SUBOPTIMAL_FLOPS,\n                 expr.span,\n                 \"log base can be expressed more clearly\",\n                 \"consider using\",\n-                format!(\"{}.log({})\", Sugg::hir(cx, &largs[0], \"..\"), Sugg::hir(cx, &rargs[0], \"..\"),),\n+                format!(\"{}.log({})\", Sugg::hir(cx, largs_self, \"..\"), Sugg::hir(cx, rargs_self, \"..\"),),\n                 Applicability::MachineApplicable,\n             );\n         }"}, {"sha": "ef72b88b3c7735fed581648e8df34c8ad250f253", "filename": "clippy_lints/src/if_let_mutex.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_mutex.rs?ref=051286d7ec8af7387f8d4292b698e7bb2b37786c", "patch": "@@ -138,12 +138,12 @@ impl<'tcx, 'l> ArmVisitor<'tcx, 'l> {\n \n fn is_mutex_lock_call<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n     if_chain! {\n-        if let ExprKind::MethodCall(path, _span, args, _) = &expr.kind;\n+        if let ExprKind::MethodCall(path, _span, [self_arg, ..], _) = &expr.kind;\n         if path.ident.as_str() == \"lock\";\n-        let ty = cx.typeck_results().expr_ty(&args[0]);\n+        let ty = cx.typeck_results().expr_ty(self_arg);\n         if is_type_diagnostic_item(cx, ty, sym!(mutex_type));\n         then {\n-            Some(&args[0])\n+            Some(self_arg)\n         } else {\n             None\n         }"}, {"sha": "adcd78ed0d42745adc2e0cb2d6518a3f98c5243e", "filename": "clippy_lints/src/if_let_some_result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_some_result.rs?ref=051286d7ec8af7387f8d4292b698e7bb2b37786c", "patch": "@@ -46,10 +46,10 @@ impl<'tcx> LateLintPass<'tcx> for OkIfLet {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! { //begin checking variables\n             if let Some(higher::IfLet { let_pat, let_expr, .. }) = higher::IfLet::hir(cx, expr);\n-            if let ExprKind::MethodCall(_, ok_span, result_types, _) = let_expr.kind; //check is expr.ok() has type Result<T,E>.ok(, _)\n+            if let ExprKind::MethodCall(_, ok_span, [ref result_types_0, ..], _) = let_expr.kind; //check is expr.ok() has type Result<T,E>.ok(, _)\n             if let PatKind::TupleStruct(QPath::Resolved(_, x), y, _)  = let_pat.kind; //get operation\n             if method_chain_args(let_expr, &[\"ok\"]).is_some(); //test to see if using ok() methoduse std::marker::Sized;\n-            if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&result_types[0]), sym::result_type);\n+            if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(result_types_0), sym::result_type);\n             if rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_path(x, false)) == \"Some\";\n \n             then {"}, {"sha": "e8f3550283a49c85e1411ed9106619dda5e1d8d8", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=051286d7ec8af7387f8d4292b698e7bb2b37786c", "patch": "@@ -301,10 +301,10 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             // a range index op\n-            if let ExprKind::MethodCall(meth, _, args, _) = expr.kind;\n+            if let ExprKind::MethodCall(meth, _, [args_0, args_1, ..], _) = &expr.kind;\n             if (meth.ident.name == sym::index && match_trait_method(self.cx, expr, &paths::INDEX))\n                 || (meth.ident.name == sym::index_mut && match_trait_method(self.cx, expr, &paths::INDEX_MUT));\n-            if !self.check(&args[1], &args[0], expr);\n+            if !self.check(args_1, args_0, expr);\n             then { return }\n         }\n "}, {"sha": "eb437dc47afb496e63b0bfc37e28a3d209a29f7d", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=051286d7ec8af7387f8d4292b698e7bb2b37786c", "patch": "@@ -28,11 +28,11 @@ declare_lint_pass!(MemForget => [MEM_FORGET]);\n \n impl<'tcx> LateLintPass<'tcx> for MemForget {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n-        if let ExprKind::Call(path_expr, args) = e.kind {\n+        if let ExprKind::Call(path_expr, [ref first_arg, ..]) = e.kind {\n             if let ExprKind::Path(ref qpath) = path_expr.kind {\n                 if let Some(def_id) = cx.qpath_res(qpath, path_expr.hir_id).opt_def_id() {\n                     if match_def_path(cx, def_id, &paths::MEM_FORGET) {\n-                        let forgot_ty = cx.typeck_results().expr_ty(&args[0]);\n+                        let forgot_ty = cx.typeck_results().expr_ty(first_arg);\n \n                         if forgot_ty.ty_adt_def().map_or(false, |def| def.has_dtor(cx.tcx)) {\n                             span_lint(cx, MEM_FORGET, e.span, \"usage of `mem::forget` on `Drop` type\");"}, {"sha": "30ed1d665a907d1cf1bb8d4ea3208a0a48023e5b", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=051286d7ec8af7387f8d4292b698e7bb2b37786c", "patch": "@@ -96,9 +96,9 @@ pub(super) fn check<'tcx>(\n             (&paths::RESULT, true, &[\"or\", \"unwrap_or\"], \"else\"),\n         ];\n \n-        if let hir::ExprKind::MethodCall(path, _, args, _) = &arg.kind {\n+        if let hir::ExprKind::MethodCall(path, _, [self_arg, ..], _) = &arg.kind {\n             if path.ident.name == sym::len {\n-                let ty = cx.typeck_results().expr_ty(&args[0]).peel_refs();\n+                let ty = cx.typeck_results().expr_ty(self_arg).peel_refs();\n \n                 match ty.kind() {\n                     ty::Slice(_) | ty::Array(_, _) | ty::Str => return,"}, {"sha": "30d6665a920ba3e7d18adc58f98583af8f57e87f", "filename": "clippy_lints/src/methods/utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fmethods%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fmethods%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Futils.rs?ref=051286d7ec8af7387f8d4292b698e7bb2b37786c", "patch": "@@ -24,9 +24,9 @@ pub(super) fn derefs_to_slice<'tcx>(\n         }\n     }\n \n-    if let hir::ExprKind::MethodCall(path, _, args, _) = expr.kind {\n-        if path.ident.name == sym::iter && may_slice(cx, cx.typeck_results().expr_ty(&args[0])) {\n-            Some(&args[0])\n+    if let hir::ExprKind::MethodCall(path, _, [self_arg, ..], _) = &expr.kind {\n+        if path.ident.name == sym::iter && may_slice(cx, cx.typeck_results().expr_ty(self_arg)) {\n+            Some(self_arg)\n         } else {\n             None\n         }"}, {"sha": "538fa4e1678fc348b90da7ca3aaf22fb6ca5fc5a", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=051286d7ec8af7387f8d4292b698e7bb2b37786c", "patch": "@@ -513,12 +513,12 @@ fn is_signum(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     }\n \n     if_chain! {\n-        if let ExprKind::MethodCall(method_name, _, expressions, _) = expr.kind;\n+        if let ExprKind::MethodCall(method_name, _, [ref self_arg, ..], _) = expr.kind;\n         if sym!(signum) == method_name.ident.name;\n         // Check that the receiver of the signum() is a float (expressions[0] is the receiver of\n         // the method call)\n         then {\n-            return is_float(cx, &expressions[0]);\n+            return is_float(cx, self_arg);\n         }\n     }\n     false"}, {"sha": "e9dcc7b227d7601a51cac5fd6869e5d5e9b9d3c1", "filename": "clippy_lints/src/mut_mutex_lock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs?ref=051286d7ec8af7387f8d4292b698e7bb2b37786c", "patch": "@@ -47,9 +47,9 @@ declare_lint_pass!(MutMutexLock => [MUT_MUTEX_LOCK]);\n impl<'tcx> LateLintPass<'tcx> for MutMutexLock {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, ex: &'tcx Expr<'tcx>) {\n         if_chain! {\n-            if let ExprKind::MethodCall(path, method_span, args, _) = &ex.kind;\n+            if let ExprKind::MethodCall(path, method_span, [self_arg, ..], _) = &ex.kind;\n             if path.ident.name == sym!(lock);\n-            let ty = cx.typeck_results().expr_ty(&args[0]);\n+            let ty = cx.typeck_results().expr_ty(self_arg);\n             if let ty::Ref(_, inner_ty, Mutability::Mut) = ty.kind();\n             if is_type_diagnostic_item(cx, inner_ty, sym!(mutex_type));\n             then {"}, {"sha": "5752342cf623b67e55292b5079b2c89ab43fa8cb", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=051286d7ec8af7387f8d4292b698e7bb2b37786c", "patch": "@@ -31,11 +31,11 @@ declare_lint_pass!(OpenOptions => [NONSENSICAL_OPEN_OPTIONS]);\n \n impl<'tcx> LateLintPass<'tcx> for OpenOptions {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n-        if let ExprKind::MethodCall(path, _, arguments, _) = e.kind {\n-            let obj_ty = cx.typeck_results().expr_ty(&arguments[0]).peel_refs();\n+        if let ExprKind::MethodCall(path, _, [self_arg, ..], _) = &e.kind {\n+            let obj_ty = cx.typeck_results().expr_ty(self_arg).peel_refs();\n             if path.ident.name == sym!(open) && match_type(cx, obj_ty, &paths::OPEN_OPTIONS) {\n                 let mut options = Vec::new();\n-                get_open_options(cx, &arguments[0], &mut options);\n+                get_open_options(cx, self_arg, &mut options);\n                 check_open_options(cx, &options, e.span);\n             }\n         }"}, {"sha": "cfb5287c6673fabe6a5a0642472916f768f9fe39", "filename": "clippy_lints/src/ptr_offset_with_cast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs?ref=051286d7ec8af7387f8d4292b698e7bb2b37786c", "patch": "@@ -92,13 +92,13 @@ fn expr_as_ptr_offset_call<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &'tcx Expr<'_>,\n ) -> Option<(&'tcx Expr<'tcx>, &'tcx Expr<'tcx>, Method)> {\n-    if let ExprKind::MethodCall(path_segment, _, args, _) = expr.kind {\n-        if is_expr_ty_raw_ptr(cx, &args[0]) {\n+    if let ExprKind::MethodCall(path_segment, _, [arg_0, arg_1, ..], _) = &expr.kind {\n+        if is_expr_ty_raw_ptr(cx, arg_0) {\n             if path_segment.ident.name == sym::offset {\n-                return Some((&args[0], &args[1], Method::Offset));\n+                return Some((arg_0, arg_1, Method::Offset));\n             }\n             if path_segment.ident.name == sym!(wrapping_offset) {\n-                return Some((&args[0], &args[1], Method::WrappingOffset));\n+                return Some((arg_0, arg_1, Method::WrappingOffset));\n             }\n         }\n     }"}, {"sha": "13d8f954c44138cd1bad5835adac4d8f7251d496", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=051286d7ec8af7387f8d4292b698e7bb2b37786c", "patch": "@@ -345,9 +345,9 @@ declare_lint_pass!(StrToString => [STR_TO_STRING]);\n impl LateLintPass<'_> for StrToString {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &Expr<'_>) {\n         if_chain! {\n-            if let ExprKind::MethodCall(path, _, args, _) = &expr.kind;\n+            if let ExprKind::MethodCall(path, _, [self_arg, ..], _) = &expr.kind;\n             if path.ident.name == sym!(to_string);\n-            let ty = cx.typeck_results().expr_ty(&args[0]);\n+            let ty = cx.typeck_results().expr_ty(self_arg);\n             if let ty::Ref(_, ty, ..) = ty.kind();\n             if *ty.kind() == ty::Str;\n             then {\n@@ -394,9 +394,9 @@ declare_lint_pass!(StringToString => [STRING_TO_STRING]);\n impl LateLintPass<'_> for StringToString {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &Expr<'_>) {\n         if_chain! {\n-            if let ExprKind::MethodCall(path, _, args, _) = &expr.kind;\n+            if let ExprKind::MethodCall(path, _, [self_arg, ..], _) = &expr.kind;\n             if path.ident.name == sym!(to_string);\n-            let ty = cx.typeck_results().expr_ty(&args[0]);\n+            let ty = cx.typeck_results().expr_ty(self_arg);\n             if is_type_diagnostic_item(cx, ty, sym::string_type);\n             then {\n                 span_lint_and_help("}, {"sha": "b7414cec87cd2f3a6600d2525d61a3bea3625e88", "filename": "clippy_lints/src/to_string_in_display.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fto_string_in_display.rs?ref=051286d7ec8af7387f8d4292b698e7bb2b37786c", "patch": "@@ -92,11 +92,11 @@ impl LateLintPass<'_> for ToStringInDisplay {\n         if_chain! {\n             if self.in_display_impl;\n             if let Some(self_hir_id) = self.self_hir_id;\n-            if let ExprKind::MethodCall(path, _, args, _) = expr.kind;\n+            if let ExprKind::MethodCall(path, _, [ref self_arg, ..], _) = expr.kind;\n             if path.ident.name == sym!(to_string);\n             if let Some(expr_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n             if is_diag_trait_item(cx, expr_def_id, sym::ToString);\n-            if path_to_local_id(&args[0], self_hir_id);\n+            if path_to_local_id(self_arg, self_hir_id);\n             then {\n                 span_lint(\n                     cx,"}, {"sha": "095706165936237e7921422b29c23daa080bd84d", "filename": "clippy_lints/src/undropped_manually_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs?ref=051286d7ec8af7387f8d4292b698e7bb2b37786c", "patch": "@@ -37,8 +37,8 @@ declare_lint_pass!(UndroppedManuallyDrops => [UNDROPPED_MANUALLY_DROPS]);\n \n impl LateLintPass<'tcx> for UndroppedManuallyDrops {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if let Some(args) = match_function_call(cx, expr, &paths::DROP) {\n-            let ty = cx.typeck_results().expr_ty(&args[0]);\n+        if let Some([arg_0, ..]) = match_function_call(cx, expr, &paths::DROP) {\n+            let ty = cx.typeck_results().expr_ty(arg_0);\n             if is_type_lang_item(cx, ty, lang_items::LangItem::ManuallyDrop) {\n                 span_lint_and_help(\n                     cx,"}, {"sha": "031b182bd2fa0cdb68cad28c905db1ae5376dc6e", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=051286d7ec8af7387f8d4292b698e7bb2b37786c", "patch": "@@ -45,20 +45,20 @@ impl<'tcx> LateLintPass<'tcx> for UnusedIoAmount {\n \n         match expr.kind {\n             hir::ExprKind::Match(res, _, _) if is_try(cx, expr).is_some() => {\n-                if let hir::ExprKind::Call(func, args) = res.kind {\n+                if let hir::ExprKind::Call(func, [ref arg_0, ..]) = res.kind {\n                     if matches!(\n                         func.kind,\n                         hir::ExprKind::Path(hir::QPath::LangItem(hir::LangItem::TryTraitBranch, _))\n                     ) {\n-                        check_map_error(cx, &args[0], expr);\n+                        check_map_error(cx, arg_0, expr);\n                     }\n                 } else {\n                     check_map_error(cx, res, expr);\n                 }\n             },\n-            hir::ExprKind::MethodCall(path, _, args, _) => match &*path.ident.as_str() {\n+            hir::ExprKind::MethodCall(path, _, [ref arg_0, ..], _) => match &*path.ident.as_str() {\n                 \"expect\" | \"unwrap\" | \"unwrap_or\" | \"unwrap_or_else\" => {\n-                    check_map_error(cx, &args[0], expr);\n+                    check_map_error(cx, arg_0, expr);\n                 },\n                 _ => (),\n             },"}, {"sha": "756c33d70c26d319769a023da4125fadd10c4a59", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051286d7ec8af7387f8d4292b698e7bb2b37786c/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=051286d7ec8af7387f8d4292b698e7bb2b37786c", "patch": "@@ -504,10 +504,10 @@ impl<'tcx> LateLintPass<'tcx> for CompilerLintFunctions {\n         }\n \n         if_chain! {\n-            if let ExprKind::MethodCall(path, _, args, _) = expr.kind;\n+            if let ExprKind::MethodCall(path, _, [self_arg, ..], _) = &expr.kind;\n             let fn_name = path.ident;\n             if let Some(sugg) = self.map.get(&*fn_name.as_str());\n-            let ty = cx.typeck_results().expr_ty(&args[0]).peel_refs();\n+            let ty = cx.typeck_results().expr_ty(self_arg).peel_refs();\n             if match_type(cx, ty, &paths::EARLY_CONTEXT)\n                 || match_type(cx, ty, &paths::LATE_CONTEXT);\n             then {"}]}