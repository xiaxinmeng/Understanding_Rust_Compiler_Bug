{"sha": "1ee64e44a9ecf2968b214cd9b90e1c96f40dcee8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZTY0ZTQ0YTllY2YyOTY4YjIxNGNkOWI5MGUxYzk2ZjQwZGNlZTg=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-19T07:27:20Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-22T21:14:03Z"}, "message": "Use `Resolver::visit_expansion` only with monotonic expansions.", "tree": {"sha": "a5e560250e06f9273aa89175d95ba10bd406fea0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5e560250e06f9273aa89175d95ba10bd406fea0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ee64e44a9ecf2968b214cd9b90e1c96f40dcee8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee64e44a9ecf2968b214cd9b90e1c96f40dcee8", "html_url": "https://github.com/rust-lang/rust/commit/1ee64e44a9ecf2968b214cd9b90e1c96f40dcee8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ee64e44a9ecf2968b214cd9b90e1c96f40dcee8/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "272cf4e61d0148952ecbac4dcaa0416baa7638c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/272cf4e61d0148952ecbac4dcaa0416baa7638c6", "html_url": "https://github.com/rust-lang/rust/commit/272cf4e61d0148952ecbac4dcaa0416baa7638c6"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "0d75685df55d09e456cf7fc0d97b88d01f69aa35", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1ee64e44a9ecf2968b214cd9b90e1c96f40dcee8/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee64e44a9ecf2968b214cd9b90e1c96f40dcee8/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1ee64e44a9ecf2968b214cd9b90e1c96f40dcee8", "patch": "@@ -1070,7 +1070,7 @@ pub struct Resolver<'a> {\n     macro_names: FnvHashSet<Name>,\n \n     // Maps the `Mark` of an expansion to its containing module or block.\n-    expansion_data: Vec<macros::ExpansionData>,\n+    expansion_data: FnvHashMap<u32, macros::ExpansionData>,\n }\n \n pub struct ResolverArenas<'a> {\n@@ -1184,6 +1184,9 @@ impl<'a> Resolver<'a> {\n         let mut module_map = NodeMap();\n         module_map.insert(CRATE_NODE_ID, graph_root);\n \n+        let mut expansion_data = FnvHashMap();\n+        expansion_data.insert(0, macros::ExpansionData::default()); // Crate root expansion\n+\n         Resolver {\n             session: session,\n \n@@ -1239,7 +1242,7 @@ impl<'a> Resolver<'a> {\n \n             macro_loader: macro_loader,\n             macro_names: FnvHashSet(),\n-            expansion_data: vec![macros::ExpansionData::default()],\n+            expansion_data: expansion_data,\n         }\n     }\n "}, {"sha": "67b7dc1a69fb0e77df6e6bf0799fbbfa2f912cf2", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1ee64e44a9ecf2968b214cd9b90e1c96f40dcee8/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee64e44a9ecf2968b214cd9b90e1c96f40dcee8/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=1ee64e44a9ecf2968b214cd9b90e1c96f40dcee8", "patch": "@@ -47,7 +47,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n \n     fn visit_expansion(&mut self, mark: Mark, expansion: &Expansion) {\n         expansion.visit_with(&mut ExpansionVisitor {\n-            current_module: self.expansion_data[mark.as_u32() as usize].module.clone(),\n+            current_module: self.expansion_data[&mark.as_u32()].module.clone(),\n             resolver: self,\n         });\n     }\n@@ -57,7 +57,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n             self.macro_names.insert(ident.name);\n         }\n \n-        let mut module = self.expansion_data[scope.as_u32() as usize].module.clone();\n+        let mut module = self.expansion_data[&scope.as_u32()].module.clone();\n         while module.macros_escape {\n             module = module.parent.clone().unwrap();\n         }\n@@ -71,7 +71,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n     fn find_attr_invoc(&mut self, attrs: &mut Vec<ast::Attribute>) -> Option<ast::Attribute> {\n         for i in 0..attrs.len() {\n             let name = intern(&attrs[i].name());\n-            match self.expansion_data[0].module.macros.borrow().get(&name) {\n+            match self.expansion_data[&0].module.macros.borrow().get(&name) {\n                 Some(ext) => match **ext {\n                     MultiModifier(..) | MultiDecorator(..) => return Some(attrs.remove(i)),\n                     _ => {}\n@@ -82,7 +82,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n         None\n     }\n \n-    fn resolve_invoc(&mut self, invoc: &Invocation) -> Option<Rc<SyntaxExtension>> {\n+    fn resolve_invoc(&mut self, scope: Mark, invoc: &Invocation) -> Option<Rc<SyntaxExtension>> {\n         let (name, span) = match invoc.kind {\n             InvocationKind::Bang { ref mac, .. } => {\n                 let path = &mac.node.path;\n@@ -97,7 +97,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n             InvocationKind::Attr { ref attr, .. } => (intern(&*attr.name()), attr.span),\n         };\n \n-        let mut module = self.expansion_data[invoc.mark().as_u32() as usize].module.clone();\n+        let mut module = self.expansion_data[&scope.as_u32()].module.clone();\n         loop {\n             if let Some(ext) = module.macros.borrow().get(&name) {\n                 return Some(ext.clone());\n@@ -135,8 +135,7 @@ struct ExpansionVisitor<'b, 'a: 'b> {\n \n impl<'a, 'b> ExpansionVisitor<'a, 'b> {\n     fn visit_invoc(&mut self, id: ast::NodeId) {\n-        assert_eq!(id.as_u32(), self.resolver.expansion_data.len() as u32);\n-        self.resolver.expansion_data.push(ExpansionData {\n+        self.resolver.expansion_data.insert(id.as_u32(), ExpansionData {\n             module: self.current_module.clone(),\n         });\n     }"}, {"sha": "87337c6a26950cddb9327ee1e0b2fa444395faca", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ee64e44a9ecf2968b214cd9b90e1c96f40dcee8/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee64e44a9ecf2968b214cd9b90e1c96f40dcee8/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=1ee64e44a9ecf2968b214cd9b90e1c96f40dcee8", "patch": "@@ -470,7 +470,7 @@ pub trait Resolver {\n     fn add_expansions_at_stmt(&mut self, id: ast::NodeId, macros: Vec<Mark>);\n \n     fn find_attr_invoc(&mut self, attrs: &mut Vec<Attribute>) -> Option<Attribute>;\n-    fn resolve_invoc(&mut self, invoc: &Invocation) -> Option<Rc<SyntaxExtension>>;\n+    fn resolve_invoc(&mut self, scope: Mark, invoc: &Invocation) -> Option<Rc<SyntaxExtension>>;\n }\n \n pub enum LoadedMacro {\n@@ -491,7 +491,9 @@ impl Resolver for DummyResolver {\n     fn add_expansions_at_stmt(&mut self, _id: ast::NodeId, _macros: Vec<Mark>) {}\n \n     fn find_attr_invoc(&mut self, _attrs: &mut Vec<Attribute>) -> Option<Attribute> { None }\n-    fn resolve_invoc(&mut self, _invoc: &Invocation) -> Option<Rc<SyntaxExtension>> { None }\n+    fn resolve_invoc(&mut self, _scope: Mark, _invoc: &Invocation) -> Option<Rc<SyntaxExtension>> {\n+        None\n+    }\n }\n \n #[derive(Clone)]"}, {"sha": "92c8292ae90be2caa5f306684b474e4eed3bd808", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1ee64e44a9ecf2968b214cd9b90e1c96f40dcee8/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee64e44a9ecf2968b214cd9b90e1c96f40dcee8/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=1ee64e44a9ecf2968b214cd9b90e1c96f40dcee8", "patch": "@@ -165,10 +165,6 @@ impl Invocation {\n             InvocationKind::Attr { ref attr, .. } => attr.span,\n         }\n     }\n-\n-    pub fn mark(&self) -> Mark {\n-        self.expansion_data.mark\n-    }\n }\n \n pub struct MacroExpander<'a, 'b:'a> {\n@@ -219,7 +215,9 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             let ExpansionData { depth, mark, .. } = invoc.expansion_data;\n             self.cx.current_expansion = invoc.expansion_data.clone();\n \n-            let expansion = match self.cx.resolver.resolve_invoc(&invoc) {\n+            let scope = if self.monotonic { mark } else { orig_expansion_data.mark };\n+            self.cx.current_expansion.mark = scope;\n+            let expansion = match self.cx.resolver.resolve_invoc(scope, &invoc) {\n                 Some(ext) => self.expand_invoc(invoc, ext),\n                 None => invoc.expansion_kind.dummy(invoc.span()),\n             };\n@@ -267,8 +265,11 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         };\n         self.cx.cfg = crate_config;\n \n-        let mark = self.cx.current_expansion.mark;\n-        self.cx.resolver.visit_expansion(mark, &result.0);\n+        if self.monotonic {\n+            let mark = self.cx.current_expansion.mark;\n+            self.cx.resolver.visit_expansion(mark, &result.0);\n+        }\n+\n         result\n     }\n \n@@ -314,7 +315,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n     /// Expand a macro invocation. Returns the result of expansion.\n     fn expand_bang_invoc(&mut self, invoc: Invocation, ext: Rc<SyntaxExtension>) -> Expansion {\n-        let (mark, kind) = (invoc.mark(), invoc.expansion_kind);\n+        let (mark, kind) = (invoc.expansion_data.mark, invoc.expansion_kind);\n         let (attrs, mac, ident, span) = match invoc.kind {\n             InvocationKind::Bang { attrs, mac, ident, span } => (attrs, mac, ident, span),\n             _ => unreachable!(),"}]}