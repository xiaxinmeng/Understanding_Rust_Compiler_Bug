{"sha": "0e7117be31992c16b900c77ba0b8d86fcf7d641c", "node_id": "C_kwDOAAsO6NoAKDBlNzExN2JlMzE5OTJjMTZiOTAwYzc3YmEwYjhkODZmY2Y3ZDY0MWM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-17T07:42:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-17T07:42:38Z"}, "message": "Rollup merge of #109044 - thomcc:disallow-unstable-libtest, r=jyn514\n\nPrevent stable `libtest` from supporting `-Zunstable-options`\n\nTook a while for me to get around to this but seems trivial (unless I'm missing some reason this will break all our tests). Fixes #75526\n\nBasically `libtest` already tries to handle this in https://github.com/rust-lang/rust/blob/501ad021b9a4fb2cd6a39e0302d22f169f6166b0/library/test/src/cli.rs#L310-L318\n\nBut that env var was not passed. I'm guessing at one point [this code](https://github.com/rust-lang/rust/blob/501ad021b9a4fb2cd6a39e0302d22f169f6166b0/src/bootstrap/compile.rs#L842-L844) (or a common ancestor) was used to compile the standard library/libtest, but that is no longer the case (or perhaps it never worked, I don't have time to go digging).\n\nI don't love that this is a \"allow unstable by default\" situation, as it means things like [`rustc-build-sysroot`](https://github.com/RalfJung/rustc-build-sysroot) could accidentally get unstable (CC ````@RalfJung)```` even if this is fixed here, but it's consistent with what happens in `rustc_feature`, so... yeah.\n\nThis is user-facing after all, even if it's hard to imagine the outcome of that conversation being \"lets continue allowing use of `-Zunstable-features` from stable rust\" (especially since a `RUSTC_BOOTSTRAP=1`-shaped loophole remains)... I think it probably should get a vibe check in the t-libs meeting\u00a0(and plausibly a relnote along the lines of \"hey `cargo test -- -Zunstable-options --some --unstable --stuff=here` used to work on stable, that's been fixed, sorry\").\n\nI'll nominate it for that after CI comes up green (I've done a smoke check but don't know what (if anything) will need `bootstrap` to enable `RUSTC_BOOTSTRAP=1` when running tests)\n\nr? ````@jyn514````", "tree": {"sha": "d95e280f8814c17f5f881e79bc8799d1f71b5804", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d95e280f8814c17f5f881e79bc8799d1f71b5804"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e7117be31992c16b900c77ba0b8d86fcf7d641c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkFBnuCRBK7hj4Ov3rIwAAfSgIAD7BIh8+K+Jn7kJBW2BOT4Qn\neAEmMGS52a8n95MtyhVQKy47Z62HR5HxY+Er9enpl2k+5qLO1jj0RFFUFXBo7F4n\ntZiMfKwK7TuKpCxuEQbaVH4oJ0o8desfP2FxYW/2FDd/fXWZh+Aq3kO2lITrhc8G\nALlYOuceT/FuXlyMKCle190fPb2+Deadveh90AmF+qUJTuYvkHB9JN5rMW6vED1y\nAY/RWhxYoCGoAfet/clYrUgps1icoz5arB3pQzZIdGvNAlsnPyrshYxlz+GQFY11\nIfHiuUu5NnhTp4pap8od0vdqW9oV5/LOnFgsUFuOivt2uTVvOxDmNa/EnXjmiAw=\n=c06s\n-----END PGP SIGNATURE-----\n", "payload": "tree d95e280f8814c17f5f881e79bc8799d1f71b5804\nparent 13ff2d42cdf3acd430e36cc6f5df1efb7df29c26\nparent ce6adccdade1ec29bff031c296c5ae0d80ab0446\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679038958 +0100\ncommitter GitHub <noreply@github.com> 1679038958 +0100\n\nRollup merge of #109044 - thomcc:disallow-unstable-libtest, r=jyn514\n\nPrevent stable `libtest` from supporting `-Zunstable-options`\n\nTook a while for me to get around to this but seems trivial (unless I'm missing some reason this will break all our tests). Fixes #75526\n\nBasically `libtest` already tries to handle this in https://github.com/rust-lang/rust/blob/501ad021b9a4fb2cd6a39e0302d22f169f6166b0/library/test/src/cli.rs#L310-L318\n\nBut that env var was not passed. I'm guessing at one point [this code](https://github.com/rust-lang/rust/blob/501ad021b9a4fb2cd6a39e0302d22f169f6166b0/src/bootstrap/compile.rs#L842-L844) (or a common ancestor) was used to compile the standard library/libtest, but that is no longer the case (or perhaps it never worked, I don't have time to go digging).\n\nI don't love that this is a \"allow unstable by default\" situation, as it means things like [`rustc-build-sysroot`](https://github.com/RalfJung/rustc-build-sysroot) could accidentally get unstable (CC ````@RalfJung)```` even if this is fixed here, but it's consistent with what happens in `rustc_feature`, so... yeah.\n\nThis is user-facing after all, even if it's hard to imagine the outcome of that conversation being \"lets continue allowing use of `-Zunstable-features` from stable rust\" (especially since a `RUSTC_BOOTSTRAP=1`-shaped loophole remains)... I think it probably should get a vibe check in the t-libs meeting\u00a0(and plausibly a relnote along the lines of \"hey `cargo test -- -Zunstable-options --some --unstable --stuff=here` used to work on stable, that's been fixed, sorry\").\n\nI'll nominate it for that after CI comes up green (I've done a smoke check but don't know what (if anything) will need `bootstrap` to enable `RUSTC_BOOTSTRAP=1` when running tests)\n\nr? ````@jyn514````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e7117be31992c16b900c77ba0b8d86fcf7d641c", "html_url": "https://github.com/rust-lang/rust/commit/0e7117be31992c16b900c77ba0b8d86fcf7d641c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e7117be31992c16b900c77ba0b8d86fcf7d641c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13ff2d42cdf3acd430e36cc6f5df1efb7df29c26", "url": "https://api.github.com/repos/rust-lang/rust/commits/13ff2d42cdf3acd430e36cc6f5df1efb7df29c26", "html_url": "https://github.com/rust-lang/rust/commit/13ff2d42cdf3acd430e36cc6f5df1efb7df29c26"}, {"sha": "ce6adccdade1ec29bff031c296c5ae0d80ab0446", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce6adccdade1ec29bff031c296c5ae0d80ab0446", "html_url": "https://github.com/rust-lang/rust/commit/ce6adccdade1ec29bff031c296c5ae0d80ab0446"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "54971af644c2887235933c1734540e3de1e36952", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e7117be31992c16b900c77ba0b8d86fcf7d641c/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e7117be31992c16b900c77ba0b8d86fcf7d641c/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=0e7117be31992c16b900c77ba0b8d86fcf7d641c", "patch": "@@ -339,6 +339,12 @@ pub fn std_cargo(builder: &Builder<'_>, target: TargetSelection, stage: u32, car\n         \"\"\n     };\n \n+    // `libtest` uses this to know whether or not to support\n+    // `-Zunstable-options`.\n+    if !builder.unstable_features() {\n+        cargo.env(\"CFG_DISABLE_UNSTABLE_FEATURES\", \"1\");\n+    }\n+\n     let mut features = String::new();\n \n     // Cranelift doesn't support `asm`."}]}