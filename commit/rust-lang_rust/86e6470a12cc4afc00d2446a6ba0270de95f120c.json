{"sha": "86e6470a12cc4afc00d2446a6ba0270de95f120c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZTY0NzBhMTJjYzRhZmMwMGQyNDQ2YTZiYTAyNzBkZTk1ZjEyMGM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-30T08:23:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-30T08:23:44Z"}, "message": "update README to first describe the usual user setup, and to always set up a proper libstd", "tree": {"sha": "fa7b807bfba46b83c1bb3bfe5a0df18dbf959c2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa7b807bfba46b83c1bb3bfe5a0df18dbf959c2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86e6470a12cc4afc00d2446a6ba0270de95f120c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86e6470a12cc4afc00d2446a6ba0270de95f120c", "html_url": "https://github.com/rust-lang/rust/commit/86e6470a12cc4afc00d2446a6ba0270de95f120c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86e6470a12cc4afc00d2446a6ba0270de95f120c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d2bc97d7c3927cc8cb53afeaf97bd832be2b7c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d2bc97d7c3927cc8cb53afeaf97bd832be2b7c2", "html_url": "https://github.com/rust-lang/rust/commit/8d2bc97d7c3927cc8cb53afeaf97bd832be2b7c2"}], "stats": {"total": 157, "additions": 84, "deletions": 73}, "files": [{"sha": "f232cf25f9fe289a53a7d7dac0a352d44cdd91f3", "filename": "README.md", "status": "modified", "additions": 79, "deletions": 71, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/86e6470a12cc4afc00d2446a6ba0270de95f120c/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/86e6470a12cc4afc00d2446a6ba0270de95f120c/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=86e6470a12cc4afc00d2446a6ba0270de95f120c", "patch": "@@ -20,36 +20,6 @@ for example:\n [`unreachable_unchecked`]: https://doc.rust-lang.org/stable/std/hint/fn.unreachable_unchecked.html\n [`copy_nonoverlapping`]: https://doc.rust-lang.org/stable/std/ptr/fn.copy_nonoverlapping.html\n \n-## Building Miri\n-\n-We recommend that you install [rustup] to obtain Rust. Then all you have\n-to do is:\n-\n-```sh\n-cargo +nightly build\n-```\n-\n-This uses the very latest Rust version.  If you experience any problem, refer to\n-the `rust-version` file which contains a particular Rust nightly version that\n-has been tested against the version of miri you are using.  Make sure to use\n-that particular `nightly-YYYY-MM-DD` whenever the instructions just say\n-`nightly`.\n-\n-To avoid repeating the nightly version all the time, you can use\n-`rustup override set nightly` (or `rustup override set nightly-YYYY-MM-DD`),\n-which means `nightly` Rust will automatically be used whenever you are working\n-in this directory.\n-\n-[rustup]: https://www.rustup.rs\n-\n-## Running Miri on tiny examples\n-\n-```sh\n-cargo +nightly run -- -Zmiri-disable-validation tests/run-pass/vecs.rs # Or whatever test you like.\n-```\n-\n-We have to disable validation because that can lead to errors when libstd is not\n-compiled the right way.\n \n ## Running Miri on your own project('s test suite)\n \n@@ -59,13 +29,17 @@ Install Miri as a cargo subcommand:\n cargo +nightly install --git https://github.com/solson/miri/ miri\n ```\n \n-Be aware that if you used `rustup override set` to fix a particular Rust version\n-for the miri directory, that will *not* apply to your own project directory!\n-You have to use a consistent Rust version for building miri and your project for\n-this to work, so remember to either always specify the nightly version manually,\n-overriding it in your project directory as well, or use `rustup default nightly`\n-(or `rustup default nightly-YYYY-MM-DD`) to globally make `nightly` the default\n-toolchain.\n+If this does not work, try using the nightly version given in\n+[this file](https://raw.githubusercontent.com/solson/miri/master/rust-version). CI\n+should ensure that this nightly always works.\n+\n+You have to use a consistent Rust version for building miri and your project, so\n+remember to either always specify the nightly version manually (like in the\n+example above), overriding it in your project directory as well, or use `rustup\n+default nightly` (or `rustup default nightly-YYYY-MM-DD`) to globally make\n+`nightly` the default toolchain.\n+\n+Now you can run your project in miri:\n \n 1. Run `cargo clean` to eliminate any cached dependencies.  Miri needs your\n    dependencies to be compiled the right way, that would not happen if they have\n@@ -93,53 +67,79 @@ You may be running `cargo miri` with a different compiler version than the one\n used to build the custom libstd that Miri uses, and Miri failed to detect that.\n Try deleting `~/.cache/miri`.\n \n-## Miri `-Z` flags\n+## Development and Debugging\n \n-Several `-Z` flags are relevant for miri:\n+If you want to hack on miri yourself, great!  Here are some resources you might\n+find useful.\n \n-* `-Zmir-opt-level` controls how many MIR optimizations are performed.  miri\n-  overrides the default to be `0`; be advised that using any higher level can\n-  make miri miss bugs in your program because they got optimized away.\n-* `-Zalways-encode-mir` makes rustc dump MIR even for completely monomorphic\n-  functions.  This is needed so that miri can execute such functions, so miri\n-  sets this flag per default.\n-* `-Zmiri-disable-validation` is a custom `-Z` flag added by miri.  It disables\n-  enforcing the validity invariant, which is enforced by default.  This is\n-  mostly useful for debugging; it means miri will miss bugs in your program.\n+### Using a nightly rustc\n \n-## Development and Debugging\n+miri heavily relies on internal rustc interfaces to execute MIR.  Still, some\n+things (like adding support for a new intrinsic) can be done by working just on\n+the miri side.\n+\n+To prepare, make sure you are using a nightly Rust compiler.  You also need to\n+set up a libstd that enables execution with miri:\n+\n+```sh\n+rustup override set nightly # or the nightly in `rust-version`\n+cargo run --bin cargo-miri -- miri setup\n+```\n+\n+The last command should end in printing the directory where the libstd was\n+built.  Set that as your MIRI_SYSROOT environment variable:\n+\n+```sh\n+export MIRI_SYSROOT=~/.cache/miri/HOST # or whatever the previous command said\n+```\n+\n+### Testing Miri\n+\n+Now you can run Miri directly, without going through `cargo miri`:\n+\n+```sh\n+cargo run tests/run-pass-fullmir/format.rs # or whatever test you like\n+```\n+\n+You can also run the test suite with `cargo test --release`.  `cargo test\n+--release FILTER` only runs those tests that contain `FILTER` in their filename\n+(including the base directory, e.g. `cargo test --release fail` will run all\n+compile-fail tests).  We recommend using `--release` to make test running take\n+less time.\n+\n+Now you are set up!  You can write a failing test case, and tweak miri until it\n+fails no more.\n+\n+### Using a locally built rustc\n \n Since the heart of Miri (the main interpreter engine) lives in rustc, working on\n-Miri will often require using a locally built rustc. This includes getting a\n-trace of the execution, as distributed rustc has `debug!` and `trace!` disabled.\n+Miri will often require using a locally built rustc.  The bug you want to fix\n+may actually be on the rustc side, or you just need to get more detailed trace\n+of the execution -- in both cases, you should develop miri against a rustc you\n+compiled yourself, with debug assertions (and hence tracing) enabled.\n \n-The first-time setup for a local rustc looks as follows:\n+The setup for a local rustc works as follows:\n ```sh\n git clone https://github.com/rust-lang/rust/ rustc\n cd rustc\n cp config.toml.example config.toml\n # Now edit `config.toml` and set `debug-assertions = true` and `test-miri = true`.\n # The latter is important to build libstd with the right flags for miri.\n+# This step can take 30 minutes and more.\n ./x.py build src/rustc\n+# If you change something, you can get a faster rebuild by doing\n+./x.py --keep-stage 0 build src/rustc\n # You may have to change the architecture in the next command\n rustup toolchain link custom build/x86_64-unknown-linux-gnu/stage2\n-# Now cd to your Miri directory\n+# Now cd to your Miri directory, then configure rustup\n rustup override set custom\n+# We also need to tell Miri where to find its sysroot. Since we set\n+# `test-miri` above, we can just use rustc' sysroot.\n+export MIRI_SYSROOT=$(rustc --print sysroot)\n ```\n-The `build` step can take 30 minutes and more.\n \n-Now you can `cargo build` Miri, and you can `cargo test --release` it.  `cargo\n-test --release FILTER` only runs those tests that contain `FILTER` in their\n-filename (including the base directory, e.g. `cargo test --release fail` will\n-run all compile-fail tests).  We recommend using `--release` to make test\n-running take less time.\n-\n-Notice that the \"fullmir\" tests only run if you have `MIRI_SYSROOT` set, the\n-test runner does not realized that your libstd comes with full MIR.  The\n-following will set it correctly:\n-```sh\n-MIRI_SYSROOT=$(rustc --print sysroot) cargo test --release\n-```\n+With this, you should now have a working development setup!  See \"Testing Miri\"\n+above for how to proceed.\n \n Moreover, you can now run Miri with a trace of all execution steps:\n ```sh\n@@ -157,11 +157,19 @@ MIRI_LOG=rustc_mir::interpret=debug,miri::stacked_borrows cargo run tests/run-pa\n In addition, you can set `MIRI_BACKTRACE=1` to get a backtrace of where an\n evaluation error was originally created.\n \n-If you changed something in rustc and want to re-build, run\n-```\n-./x.py --keep-stage 0 build src/rustc\n-```\n-This avoids rebuilding the entire stage 0, which can save a lot of time.\n+### Miri `-Z` flags\n+\n+Several `-Z` flags are relevant for miri:\n+\n+* `-Zmir-opt-level` controls how many MIR optimizations are performed.  miri\n+  overrides the default to be `0`; be advised that using any higher level can\n+  make miri miss bugs in your program because they got optimized away.\n+* `-Zalways-encode-mir` makes rustc dump MIR even for completely monomorphic\n+  functions.  This is needed so that miri can execute such functions, so miri\n+  sets this flag per default.\n+* `-Zmiri-disable-validation` is a custom `-Z` flag added by miri.  It disables\n+  enforcing the validity invariant, which is enforced by default.  This is\n+  mostly useful for debugging; it means miri will miss bugs in your program.\n \n ## Contributing and getting help\n "}, {"sha": "70e75eec649ce3db9710c7f6f677e619ae30e20a", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86e6470a12cc4afc00d2446a6ba0270de95f120c/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e6470a12cc4afc00d2446a6ba0270de95f120c/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=86e6470a12cc4afc00d2446a6ba0270de95f120c", "patch": "@@ -149,7 +149,6 @@ fn setup(ask_user: bool) {\n     let dirs = directories::ProjectDirs::from(\"miri\", \"miri\", \"miri\").unwrap();\n     let dir = dirs.cache_dir();\n     if !dir.exists() {\n-        println!(\"Creating `{}` and using it for miri's build of libstd\", dir.display());\n         fs::create_dir_all(&dir).unwrap();\n     }\n     // The interesting bit: Xargo.toml\n@@ -184,7 +183,11 @@ path = \"lib.rs\"\n     }\n \n     // That should be it!\n-    std::env::set_var(\"MIRI_SYSROOT\", dir.join(\"HOST\"));\n+    let sysroot = dir.join(\"HOST\");\n+    std::env::set_var(\"MIRI_SYSROOT\", &sysroot);\n+    if !ask_user {\n+        println!(\"A libstd for miri is now available in `{}`\", sysroot.display());\n+    }\n }\n \n fn main() {"}]}