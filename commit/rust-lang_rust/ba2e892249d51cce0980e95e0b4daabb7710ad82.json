{"sha": "ba2e892249d51cce0980e95e0b4daabb7710ad82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMmU4OTIyNDlkNTFjY2UwOTgwZTk1ZTBiNGRhYWJiNzcxMGFkODI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-11T13:55:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-11T13:55:04Z"}, "message": "Auto merge of #37447 - estebank:non-duplicate-definition-error, r=nrc\n\nShow one error for duplicated type definitions\n\nFor the following code:\n\n``` rustc\nstruct Bar;\nstruct Bar;\n\nfn main () {\n}\n```\n\nshow\n\n``` nocode\nerror[E0428]: a type named `Bar` has already been defined in this module\n  --> src/test/compile-fail/E0428.rs:12:1\n   |\n11 | struct Bar;\n   | ----------- previous definition of `Bar` here\n12 | struct Bar;\n   | ^^^^^^^^^^^\n\nerror: aborting due to previous error\n```\n\ninstead of\n\n``` nocode\nerror[E0428]: a type named `Bar` has already been defined in this module\n  --> src/test/compile-fail/E0428.rs:12:1\n   |\n11 | struct Bar;\n   | ----------- previous definition of `Bar` here\n12 | struct Bar;\n   | ^^^^^^^^^^^\n\nerror[E0428]: a value named `Bar` has already been defined in this module\n  --> src/test/compile-fail/E0428.rs:12:1\n   |\n11 | struct Bar;\n   | ----------- previous definition of `Bar` here\n12 | struct Bar;\n   | ^^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n```\n\nFixes #35767.", "tree": {"sha": "cccda5050f72382601cc98c141ab6e2b260dd813", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cccda5050f72382601cc98c141ab6e2b260dd813"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba2e892249d51cce0980e95e0b4daabb7710ad82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2e892249d51cce0980e95e0b4daabb7710ad82", "html_url": "https://github.com/rust-lang/rust/commit/ba2e892249d51cce0980e95e0b4daabb7710ad82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba2e892249d51cce0980e95e0b4daabb7710ad82/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4da129d98419733bb408141ca53610bb77368cf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4da129d98419733bb408141ca53610bb77368cf0", "html_url": "https://github.com/rust-lang/rust/commit/4da129d98419733bb408141ca53610bb77368cf0"}, {"sha": "43aed325aacfbe592fef2acffcf4f888155fb9bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/43aed325aacfbe592fef2acffcf4f888155fb9bf", "html_url": "https://github.com/rust-lang/rust/commit/43aed325aacfbe592fef2acffcf4f888155fb9bf"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "73b7b185b24098fc57db55e5bef8a0791e8762f6", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba2e892249d51cce0980e95e0b4daabb7710ad82/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2e892249d51cce0980e95e0b4daabb7710ad82/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ba2e892249d51cce0980e95e0b4daabb7710ad82", "patch": "@@ -1118,6 +1118,9 @@ pub struct Resolver<'a> {\n \n     // Maps the `Mark` of an expansion to its containing module or block.\n     invocations: FxHashMap<Mark, &'a InvocationData<'a>>,\n+\n+    // Avoid duplicated errors for \"name already defined\".\n+    name_already_seen: FxHashMap<Name, Span>,\n }\n \n pub struct ResolverArenas<'a> {\n@@ -1310,6 +1313,7 @@ impl<'a> Resolver<'a> {\n             macro_map: FxHashMap(),\n             macro_exports: Vec::new(),\n             invocations: invocations,\n+            name_already_seen: FxHashMap(),\n         }\n     }\n \n@@ -3396,7 +3400,7 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    fn report_conflict(&self,\n+    fn report_conflict(&mut self,\n                        parent: Module,\n                        name: Name,\n                        ns: Namespace,\n@@ -3420,6 +3424,13 @@ impl<'a> Resolver<'a> {\n         };\n \n         let span = binding.span;\n+\n+        if let Some(s) = self.name_already_seen.get(&name) {\n+            if s == &span {\n+                return;\n+            }\n+        }\n+\n         let msg = {\n             let kind = match (ns, old_binding.module()) {\n                 (ValueNS, _) => \"a value\",\n@@ -3472,6 +3483,7 @@ impl<'a> Resolver<'a> {\n             err.span_label(old_binding.span, &format!(\"previous {} of `{}` here\", noun, name));\n         }\n         err.emit();\n+        self.name_already_seen.insert(name, span);\n     }\n }\n "}, {"sha": "f8502140c44033d3f15432808ca82b9e5c49be7b", "filename": "src/test/compile-fail/E0428.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba2e892249d51cce0980e95e0b4daabb7710ad82/src%2Ftest%2Fcompile-fail%2FE0428.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2e892249d51cce0980e95e0b4daabb7710ad82/src%2Ftest%2Fcompile-fail%2FE0428.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0428.rs?ref=ba2e892249d51cce0980e95e0b4daabb7710ad82", "patch": "@@ -9,11 +9,8 @@\n // except according to those terms.\n \n struct Bar; //~ previous definition of `Bar` here\n-            //~| previous definition of `Bar` here\n struct Bar; //~ ERROR E0428\n             //~| NOTE already defined\n-            //~| ERROR E0428\n-            //~| NOTE already defined\n \n fn main () {\n }"}, {"sha": "a26b9e3c7aa2a9adc1b8a8afbdb3f41d1c0e7dd6", "filename": "src/test/compile-fail/blind-item-block-item-shadow.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba2e892249d51cce0980e95e0b4daabb7710ad82/src%2Ftest%2Fcompile-fail%2Fblind-item-block-item-shadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2e892249d51cce0980e95e0b4daabb7710ad82/src%2Ftest%2Fcompile-fail%2Fblind-item-block-item-shadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblind-item-block-item-shadow.rs?ref=ba2e892249d51cce0980e95e0b4daabb7710ad82", "patch": "@@ -14,7 +14,6 @@ fn main() {\n     {\n         struct Bar;\n         use foo::Bar;\n-        //~^ ERROR a type named `Bar` has already been defined in this block\n-        //~^^ ERROR a value named `Bar` has already been defined in this block\n+        //~^ ERROR a value named `Bar` has already been defined in this block\n     }\n }"}, {"sha": "e51ef5e32e81cd969b6b487945ec2c080dc3dbbf", "filename": "src/test/compile-fail/double-type-import.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba2e892249d51cce0980e95e0b4daabb7710ad82/src%2Ftest%2Fcompile-fail%2Fdouble-type-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2e892249d51cce0980e95e0b4daabb7710ad82/src%2Ftest%2Fcompile-fail%2Fdouble-type-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdouble-type-import.rs?ref=ba2e892249d51cce0980e95e0b4daabb7710ad82", "patch": "@@ -12,7 +12,6 @@ mod foo {\n     pub use self::bar::X;\n     use self::bar::X;\n     //~^ ERROR a value named `X` has already been imported in this module\n-    //~| ERROR a type named `X` has already been imported in this module\n \n     mod bar {\n         pub struct X;"}, {"sha": "3d8e2daaa15b15616cb3d3e08bb7c460e0bce728", "filename": "src/test/compile-fail/variant-namespacing.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba2e892249d51cce0980e95e0b4daabb7710ad82/src%2Ftest%2Fcompile-fail%2Fvariant-namespacing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2e892249d51cce0980e95e0b4daabb7710ad82/src%2Ftest%2Fcompile-fail%2Fvariant-namespacing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariant-namespacing.rs?ref=ba2e892249d51cce0980e95e0b4daabb7710ad82", "patch": "@@ -33,17 +33,11 @@ const XUnit: u8 = 0;\n extern crate variant_namespacing;\n pub use variant_namespacing::XE::*;\n //~^ ERROR `XStruct` has already been defined\n-//~| ERROR `XStruct` has already been defined\n //~| ERROR `XTuple` has already been defined\n-//~| ERROR `XTuple` has already been defined\n-//~| ERROR `XUnit` has already been defined\n //~| ERROR `XUnit` has already been defined\n pub use E::*;\n //~^ ERROR `Struct` has already been defined\n-//~| ERROR `Struct` has already been defined\n //~| ERROR `Tuple` has already been defined\n-//~| ERROR `Tuple` has already been defined\n-//~| ERROR `Unit` has already been defined\n //~| ERROR `Unit` has already been defined\n \n fn main() {}"}]}