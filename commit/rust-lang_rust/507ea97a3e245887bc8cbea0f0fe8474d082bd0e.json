{"sha": "507ea97a3e245887bc8cbea0f0fe8474d082bd0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwN2VhOTdhM2UyNDU4ODdiYzhjYmVhMGYwZmU4NDc0ZDA4MmJkMGU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-26T08:35:23Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-30T08:44:06Z"}, "message": "Properly name the flag for `&&` -> `&` conversion", "tree": {"sha": "8fb422826a94fcc30b50235044b1c5c5326590c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fb422826a94fcc30b50235044b1c5c5326590c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/507ea97a3e245887bc8cbea0f0fe8474d082bd0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/507ea97a3e245887bc8cbea0f0fe8474d082bd0e", "html_url": "https://github.com/rust-lang/rust/commit/507ea97a3e245887bc8cbea0f0fe8474d082bd0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/507ea97a3e245887bc8cbea0f0fe8474d082bd0e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d62bcad38da1b65ecd8a3544c3ff94855b88366a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d62bcad38da1b65ecd8a3544c3ff94855b88366a", "html_url": "https://github.com/rust-lang/rust/commit/d62bcad38da1b65ecd8a3544c3ff94855b88366a"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "3968d9aece210ec390bbe1d5431de6adcd5edb40", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/507ea97a3e245887bc8cbea0f0fe8474d082bd0e/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507ea97a3e245887bc8cbea0f0fe8474d082bd0e/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=507ea97a3e245887bc8cbea0f0fe8474d082bd0e", "patch": "@@ -153,7 +153,7 @@ pub struct Mir<'tcx> {\n     /// `||` expression into `&` or `|` respectively. This is problematic because if we ever stop\n     /// this conversion from happening and use short circuiting, we will cause the following code\n     /// to change the value of `x`: `let mut x = 42; false && { x = 55; true };`\n-    pub const_can_have_let_mut_bindings: bool,\n+    pub control_flow_destroyed: bool,\n \n     /// A span representing this MIR, for error reporting\n     pub span: Span,\n@@ -173,7 +173,7 @@ impl<'tcx> Mir<'tcx> {\n         arg_count: usize,\n         upvar_decls: Vec<UpvarDecl>,\n         span: Span,\n-        const_can_have_let_mut_bindings: bool,\n+        control_flow_destroyed: bool,\n     ) -> Self {\n         // We need `arg_count` locals, and one for the return place\n         assert!(\n@@ -198,7 +198,7 @@ impl<'tcx> Mir<'tcx> {\n             spread_arg: None,\n             span,\n             cache: cache::Cache::new(),\n-            const_can_have_let_mut_bindings,\n+            control_flow_destroyed,\n         }\n     }\n \n@@ -429,7 +429,7 @@ impl_stable_hash_for!(struct Mir<'tcx> {\n     arg_count,\n     upvar_decls,\n     spread_arg,\n-    const_can_have_let_mut_bindings,\n+    control_flow_destroyed,\n     span,\n     cache\n });\n@@ -2983,7 +2983,7 @@ BraceStructTypeFoldableImpl! {\n         arg_count,\n         upvar_decls,\n         spread_arg,\n-        const_can_have_let_mut_bindings,\n+        control_flow_destroyed,\n         span,\n         cache,\n     }"}, {"sha": "80cab0cf68687ad26160823fb1f427a7ee87e274", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/507ea97a3e245887bc8cbea0f0fe8474d082bd0e/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507ea97a3e245887bc8cbea0f0fe8474d082bd0e/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=507ea97a3e245887bc8cbea0f0fe8474d082bd0e", "patch": "@@ -864,7 +864,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             self.arg_count,\n             self.upvar_decls,\n             self.fn_span,\n-            self.hir.const_can_have_let_mut_bindings(),\n+            self.hir.control_flow_destroyed(),\n         )\n     }\n "}, {"sha": "5acff380f2847002117c8348cd4fd7173636a8c5", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/507ea97a3e245887bc8cbea0f0fe8474d082bd0e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507ea97a3e245887bc8cbea0f0fe8474d082bd0e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=507ea97a3e245887bc8cbea0f0fe8474d082bd0e", "patch": "@@ -372,15 +372,15 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     // FIXME(eddyb) use logical ops in constants when\n                     // they can handle that kind of control-flow.\n                     (hir::BinOpKind::And, hir::Constness::Const) => {\n-                        cx.const_can_have_let_mut_bindings = false;\n+                        cx.control_flow_destroyed = true;\n                         ExprKind::Binary {\n                             op: BinOp::BitAnd,\n                             lhs: lhs.to_ref(),\n                             rhs: rhs.to_ref(),\n                         }\n                     }\n                     (hir::BinOpKind::Or, hir::Constness::Const) => {\n-                        cx.const_can_have_let_mut_bindings = false;\n+                        cx.control_flow_destroyed = true;\n                         ExprKind::Binary {\n                             op: BinOp::BitOr,\n                             lhs: lhs.to_ref(),"}, {"sha": "76dde4ed02bc3fb12f7ae2edb26136809785b61c", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/507ea97a3e245887bc8cbea0f0fe8474d082bd0e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507ea97a3e245887bc8cbea0f0fe8474d082bd0e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=507ea97a3e245887bc8cbea0f0fe8474d082bd0e", "patch": "@@ -58,7 +58,7 @@ pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     check_overflow: bool,\n \n     /// See field with the same name on `Mir`\n-    const_can_have_let_mut_bindings: bool,\n+    control_flow_destroyed: bool,\n }\n \n impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n@@ -99,12 +99,12 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n             constness,\n             body_owner_kind,\n             check_overflow,\n-            const_can_have_let_mut_bindings: true,\n+            control_flow_destroyed: false,\n         }\n     }\n \n-    pub fn const_can_have_let_mut_bindings(&self) -> bool {\n-        self.const_can_have_let_mut_bindings\n+    pub fn control_flow_destroyed(&self) -> bool {\n+        self.control_flow_destroyed\n     }\n }\n "}, {"sha": "b9c33ae8c1afa678445d46f987beeaf3cea15efe", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/507ea97a3e245887bc8cbea0f0fe8474d082bd0e/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507ea97a3e245887bc8cbea0f0fe8474d082bd0e/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=507ea97a3e245887bc8cbea0f0fe8474d082bd0e", "patch": "@@ -1183,7 +1183,7 @@ impl MirPass for QualifyAndPromoteConstants {\n             // Do the actual promotion, now that we know what's viable.\n             promote_consts::promote_candidates(mir, tcx, temps, candidates);\n         } else {\n-            if !mir.const_can_have_let_mut_bindings {\n+            if mir.control_flow_destroyed {\n                 for local in mir.mut_vars_iter() {\n                     let span = mir.local_decls[local].source_info.span;\n                     tcx.sess.span_err("}]}