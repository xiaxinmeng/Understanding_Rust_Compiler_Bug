{"sha": "ac3e680193a3e11e60b07840ffb1db12793de110", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjM2U2ODAxOTNhM2UxMWU2MGIwNzg0MGZmYjFkYjEyNzkzZGUxMTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-05T18:41:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-05T18:41:36Z"}, "message": "Auto merge of #86032 - GuillaumeGomez:rollup-y3ij27b, r=GuillaumeGomez\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #83646 (Add a map method to Bound)\n - #85501 (Fix `deny(invalid_doc_attributes)`)\n - #85503 (rustdoc: add tooltips to some buttons)\n - #85710 (Document `From` impls in path.rs)\n - #85760 (Possible errors when accessing file metadata are platform specific)\n - #85974 (td align attribute)\n - #86014 (msp430 linker does not accept -znoexecstack. Set linker_is_gnu to fal\u2026)\n\nFailed merges:\n\n - #85972 (Rustdoc html fixes)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d50ebabb06116361fe20d5ba83ce5cf4a135559f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d50ebabb06116361fe20d5ba83ce5cf4a135559f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac3e680193a3e11e60b07840ffb1db12793de110", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac3e680193a3e11e60b07840ffb1db12793de110", "html_url": "https://github.com/rust-lang/rust/commit/ac3e680193a3e11e60b07840ffb1db12793de110", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac3e680193a3e11e60b07840ffb1db12793de110/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9104c898eb323f9edd205acf87c2b2d6badeddd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9104c898eb323f9edd205acf87c2b2d6badeddd7", "html_url": "https://github.com/rust-lang/rust/commit/9104c898eb323f9edd205acf87c2b2d6badeddd7"}, {"sha": "16504f6253e6a49b3896449a5e2e0f48cb1ab3a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/16504f6253e6a49b3896449a5e2e0f48cb1ab3a2", "html_url": "https://github.com/rust-lang/rust/commit/16504f6253e6a49b3896449a5e2e0f48cb1ab3a2"}], "stats": {"total": 141, "additions": 114, "deletions": 27}, "files": [{"sha": "352146d64635ad69f72e56cac4c6ac926174426a", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac3e680193a3e11e60b07840ffb1db12793de110/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3e680193a3e11e60b07840ffb1db12793de110/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=ac3e680193a3e11e60b07840ffb1db12793de110", "patch": "@@ -2994,6 +2994,7 @@ declare_lint_pass! {\n         USELESS_DEPRECATED,\n         UNSUPPORTED_NAKED_FUNCTIONS,\n         MISSING_ABI,\n+        INVALID_DOC_ATTRIBUTES,\n         SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,\n         DISJOINT_CAPTURE_MIGRATION,\n         LEGACY_DERIVE_HELPERS,"}, {"sha": "6e3a241a86e042bd3c1e0b32db903fd2fcd26e82", "filename": "compiler/rustc_target/src/spec/msp430_none_elf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac3e680193a3e11e60b07840ffb1db12793de110/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3e680193a3e11e60b07840ffb1db12793de110/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs?ref=ac3e680193a3e11e60b07840ffb1db12793de110", "patch": "@@ -17,6 +17,7 @@ pub fn target() -> Target {\n             // dependency on this specific gcc.\n             asm_args: vec![\"-mcpu=msp430\".to_string()],\n             linker: Some(\"msp430-elf-gcc\".to_string()),\n+            linker_is_gnu: false,\n \n             // There are no atomic CAS instructions available in the MSP430\n             // instruction set, and the LLVM backend doesn't currently support"}, {"sha": "684e6bb4a0fba0b34e149fdebf34c9ea19b30f44", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ac3e680193a3e11e60b07840ffb1db12793de110/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3e680193a3e11e60b07840ffb1db12793de110/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=ac3e680193a3e11e60b07840ffb1db12793de110", "patch": "@@ -674,10 +674,10 @@ pub enum Bound<T> {\n     Unbounded,\n }\n \n-#[unstable(feature = \"bound_as_ref\", issue = \"80996\")]\n impl<T> Bound<T> {\n     /// Converts from `&Bound<T>` to `Bound<&T>`.\n     #[inline]\n+    #[unstable(feature = \"bound_as_ref\", issue = \"80996\")]\n     pub fn as_ref(&self) -> Bound<&T> {\n         match *self {\n             Included(ref x) => Included(x),\n@@ -688,13 +688,47 @@ impl<T> Bound<T> {\n \n     /// Converts from `&mut Bound<T>` to `Bound<&T>`.\n     #[inline]\n+    #[unstable(feature = \"bound_as_ref\", issue = \"80996\")]\n     pub fn as_mut(&mut self) -> Bound<&mut T> {\n         match *self {\n             Included(ref mut x) => Included(x),\n             Excluded(ref mut x) => Excluded(x),\n             Unbounded => Unbounded,\n         }\n     }\n+\n+    /// Maps a `Bound<T>` to a `Bound<U>` by applying a function to the contained value (including\n+    /// both `Included` and `Excluded`), returning a `Bound` of the same kind.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(bound_map)]\n+    /// use std::ops::Bound::*;\n+    ///\n+    /// let bound_string = Included(\"Hello, World!\");\n+    ///\n+    /// assert_eq!(bound_string.map(|s| s.len()), Included(13));\n+    /// ```\n+    ///\n+    /// ```\n+    /// #![feature(bound_map)]\n+    /// use std::ops::Bound;\n+    /// use Bound::*;\n+    ///\n+    /// let unbounded_string: Bound<String> = Unbounded;\n+    ///\n+    /// assert_eq!(unbounded_string.map(|s| s.len()), Unbounded);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"bound_map\", issue = \"86026\")]\n+    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Bound<U> {\n+        match self {\n+            Unbounded => Unbounded,\n+            Included(x) => Included(f(x)),\n+            Excluded(x) => Excluded(f(x)),\n+        }\n+    }\n }\n \n impl<T: Clone> Bound<&T> {"}, {"sha": "ede147aca12e006769c35469b2c1b25690217de9", "filename": "library/std/src/path.rs", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ac3e680193a3e11e60b07840ffb1db12793de110/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3e680193a3e11e60b07840ffb1db12793de110/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=ac3e680193a3e11e60b07840ffb1db12793de110", "patch": "@@ -1420,6 +1420,9 @@ impl Clone for PathBuf {\n \n #[stable(feature = \"box_from_path\", since = \"1.17.0\")]\n impl From<&Path> for Box<Path> {\n+    /// Creates a boxed [`Path`] from a reference.\n+    ///\n+    /// This will allocate and clone `path` to it.\n     fn from(path: &Path) -> Box<Path> {\n         let boxed: Box<OsStr> = path.inner.into();\n         let rw = Box::into_raw(boxed) as *mut Path;\n@@ -1429,6 +1432,9 @@ impl From<&Path> for Box<Path> {\n \n #[stable(feature = \"box_from_cow\", since = \"1.45.0\")]\n impl From<Cow<'_, Path>> for Box<Path> {\n+    /// Creates a boxed [`Path`] from a clone-on-write pointer.\n+    ///\n+    /// Converting from a `Cow::Owned` does not clone or allocate.\n     #[inline]\n     fn from(cow: Cow<'_, Path>) -> Box<Path> {\n         match cow {\n@@ -1471,6 +1477,9 @@ impl Clone for Box<Path> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + AsRef<OsStr>> From<&T> for PathBuf {\n+    /// Converts a borrowed `OsStr` to a `PathBuf`.\n+    ///\n+    /// Allocates a [`PathBuf`] and copies the data into it.\n     #[inline]\n     fn from(s: &T) -> PathBuf {\n         PathBuf::from(s.as_ref().to_os_string())\n@@ -1575,6 +1584,10 @@ impl Default for PathBuf {\n \n #[stable(feature = \"cow_from_path\", since = \"1.6.0\")]\n impl<'a> From<&'a Path> for Cow<'a, Path> {\n+    /// Creates a clone-on-write pointer from a reference to\n+    /// [`Path`].\n+    ///\n+    /// This conversion does not clone or allocate.\n     #[inline]\n     fn from(s: &'a Path) -> Cow<'a, Path> {\n         Cow::Borrowed(s)\n@@ -1583,6 +1596,10 @@ impl<'a> From<&'a Path> for Cow<'a, Path> {\n \n #[stable(feature = \"cow_from_path\", since = \"1.6.0\")]\n impl<'a> From<PathBuf> for Cow<'a, Path> {\n+    /// Creates a clone-on-write pointer from an owned\n+    /// instance of [`PathBuf`].\n+    ///\n+    /// This conversion does not clone or allocate.\n     #[inline]\n     fn from(s: PathBuf) -> Cow<'a, Path> {\n         Cow::Owned(s)\n@@ -1591,6 +1608,10 @@ impl<'a> From<PathBuf> for Cow<'a, Path> {\n \n #[stable(feature = \"cow_from_pathbuf_ref\", since = \"1.28.0\")]\n impl<'a> From<&'a PathBuf> for Cow<'a, Path> {\n+    /// Creates a clone-on-write pointer from a reference to\n+    /// [`PathBuf`].\n+    ///\n+    /// This conversion does not clone or allocate.\n     #[inline]\n     fn from(p: &'a PathBuf) -> Cow<'a, Path> {\n         Cow::Borrowed(p.as_path())\n@@ -1599,6 +1620,9 @@ impl<'a> From<&'a PathBuf> for Cow<'a, Path> {\n \n #[stable(feature = \"pathbuf_from_cow_path\", since = \"1.28.0\")]\n impl<'a> From<Cow<'a, Path>> for PathBuf {\n+    /// Converts a clone-on-write pointer to an owned path.\n+    ///\n+    /// Converting from a `Cow::Owned` does not clone or allocate.\n     #[inline]\n     fn from(p: Cow<'a, Path>) -> Self {\n         p.into_owned()\n@@ -2462,10 +2486,10 @@ impl Path {\n     /// Returns `true` if the path points at an existing entity.\n     ///\n     /// This function will traverse symbolic links to query information about the\n-    /// destination file. In case of broken symbolic links this will return `false`.\n+    /// destination file.\n     ///\n-    /// If you cannot access the directory containing the file, e.g., because of a\n-    /// permission error, this will return `false`.\n+    /// If you cannot access the metadata of the file, e.g. because of a\n+    /// permission error or broken symbolic links, this will return `false`.\n     ///\n     /// # Examples\n     ///\n@@ -2513,10 +2537,10 @@ impl Path {\n     /// Returns `true` if the path exists on disk and is pointing at a regular file.\n     ///\n     /// This function will traverse symbolic links to query information about the\n-    /// destination file. In case of broken symbolic links this will return `false`.\n+    /// destination file.\n     ///\n-    /// If you cannot access the directory containing the file, e.g., because of a\n-    /// permission error, this will return `false`.\n+    /// If you cannot access the metadata of the file, e.g. because of a\n+    /// permission error or broken symbolic links, this will return `false`.\n     ///\n     /// # Examples\n     ///\n@@ -2545,10 +2569,10 @@ impl Path {\n     /// Returns `true` if the path exists on disk and is pointing at a directory.\n     ///\n     /// This function will traverse symbolic links to query information about the\n-    /// destination file. In case of broken symbolic links this will return `false`.\n+    /// destination file.\n     ///\n-    /// If you cannot access the directory containing the file, e.g., because of a\n-    /// permission error, this will return `false`.\n+    /// If you cannot access the metadata of the file, e.g. because of a\n+    /// permission error or broken symbolic links, this will return `false`.\n     ///\n     /// # Examples\n     ///"}, {"sha": "899cf6841ee1f4300da07f31f40023b123ada175", "filename": "library/std/src/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac3e680193a3e11e60b07840ffb1db12793de110/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3e680193a3e11e60b07840ffb1db12793de110/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=ac3e680193a3e11e60b07840ffb1db12793de110", "patch": "@@ -82,7 +82,7 @@ pub use core::time::Duration;\n /// Currently, the following system calls are being used to get the current time using `now()`:\n ///\n /// |  Platform |               System call                                            |\n-/// |:---------:|:--------------------------------------------------------------------:|\n+/// |-----------|----------------------------------------------------------------------|\n /// | SGX       | [`insecure_time` usercall]. More information on [timekeeping in SGX] |\n /// | UNIX      | [clock_gettime (Monotonic Clock)]                                    |\n /// | Darwin    | [mach_absolute_time]                                                 |\n@@ -158,7 +158,7 @@ pub struct Instant(time::Instant);\n /// Currently, the following system calls are being used to get the current time using `now()`:\n ///\n /// |  Platform |               System call                                            |\n-/// |:---------:|:--------------------------------------------------------------------:|\n+/// |-----------|----------------------------------------------------------------------|\n /// | SGX       | [`insecure_time` usercall]. More information on [timekeeping in SGX] |\n /// | UNIX      | [clock_gettime (Realtime Clock)]                                     |\n /// | Darwin    | [gettimeofday]                                                       |"}, {"sha": "c3d9c4ea7f25ae6a84d20fe1695033830311c79d", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac3e680193a3e11e60b07840ffb1db12793de110/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3e680193a3e11e60b07840ffb1db12793de110/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=ac3e680193a3e11e60b07840ffb1db12793de110", "patch": "@@ -217,8 +217,9 @@ crate fn create_config(\n     // By default, rustdoc ignores all lints.\n     // Specifically unblock lints relevant to documentation or the lint machinery itself.\n     let mut lints_to_show = vec![\n-        // it's unclear whether this should be part of rustdoc directly (#77364)\n+        // it's unclear whether these should be part of rustdoc directly (#77364)\n         rustc_lint::builtin::MISSING_DOCS.name.to_string(),\n+        rustc_lint::builtin::INVALID_DOC_ATTRIBUTES.name.to_string(),\n         // these are definitely not part of rustdoc, but we want to warn on them anyway.\n         rustc_lint::builtin::RENAMED_AND_REMOVED_LINTS.name.to_string(),\n         rustc_lint::builtin::UNKNOWN_LINTS.name.to_string(),"}, {"sha": "7309a1da230382dc8a8471857135bdd7df927fd8", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac3e680193a3e11e60b07840ffb1db12793de110/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3e680193a3e11e60b07840ffb1db12793de110/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=ac3e680193a3e11e60b07840ffb1db12793de110", "patch": "@@ -87,7 +87,7 @@ crate fn render<T: Print, S: Print>(\n         {sidebar}\\\n     </nav>\\\n     <div class=\\\"theme-picker\\\">\\\n-        <button id=\\\"theme-picker\\\" aria-label=\\\"Pick another theme!\\\" aria-haspopup=\\\"menu\\\">\\\n+        <button id=\\\"theme-picker\\\" aria-label=\\\"Pick another theme!\\\" aria-haspopup=\\\"menu\\\" title=\\\"themes\\\">\\\n             <img src=\\\"{static_root_path}brush{suffix}.svg\\\" \\\n                  width=\\\"18\\\" height=\\\"18\\\" \\\n                  alt=\\\"Pick another theme!\\\">\\\n@@ -105,8 +105,8 @@ crate fn render<T: Print, S: Print>(\n                            placeholder=\\\"Click or press \u2018S\u2019 to search, \u2018?\u2019 for more options\u2026\\\" \\\n                            type=\\\"search\\\">\\\n                 </div>\\\n-                <button type=\\\"button\\\" id=\\\"help-button\\\">?</button>\n-                <a id=\\\"settings-menu\\\" href=\\\"{root_path}settings.html\\\">\\\n+                <button type=\\\"button\\\" id=\\\"help-button\\\" title=\\\"help\\\">?</button>\n+                <a id=\\\"settings-menu\\\" href=\\\"{root_path}settings.html\\\" title=\\\"settings\\\">\\\n                     <img src=\\\"{static_root_path}wheel{suffix}.svg\\\" \\\n                          width=\\\"18\\\" height=\\\"18\\\" \\\n                          alt=\\\"Change settings\\\">\\"}, {"sha": "04464b622d7a39d6273e8800ac2e116fa0a148a7", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac3e680193a3e11e60b07840ffb1db12793de110/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3e680193a3e11e60b07840ffb1db12793de110/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=ac3e680193a3e11e60b07840ffb1db12793de110", "patch": "@@ -78,7 +78,7 @@ pub(super) fn print_item(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer,\n     write!(buf, \"<a class=\\\"{}\\\" href=\\\"#\\\">{}</a>\", item.type_(), item.name.as_ref().unwrap());\n     write!(\n         buf,\n-        \"<button id=\\\"copy-path\\\" onclick=\\\"copy_path(this)\\\">\\\n+        \"<button id=\\\"copy-path\\\" onclick=\\\"copy_path(this)\\\" title=\\\"copy path\\\">\\\n             <img src=\\\"{static_root_path}clipboard{suffix}.svg\\\" \\\n                 width=\\\"19\\\" height=\\\"18\\\" \\\n                 alt=\\\"Copy item import\\\" \\"}, {"sha": "4b58778eacd17605e54d0ce7f062c620556f3f9a", "filename": "src/test/rustdoc-ui/doc-spotlight.fixed", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac3e680193a3e11e60b07840ffb1db12793de110/src%2Ftest%2Frustdoc-ui%2Fdoc-spotlight.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ac3e680193a3e11e60b07840ffb1db12793de110/src%2Ftest%2Frustdoc-ui%2Fdoc-spotlight.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-spotlight.fixed?ref=ac3e680193a3e11e60b07840ffb1db12793de110", "patch": "@@ -1,9 +1,8 @@\n-// check-pass\n // run-rustfix\n-\n+#![deny(warnings)]\n #![feature(doc_notable_trait)]\n \n #[doc(notable_trait)]\n-//~^ WARN unknown `doc` attribute `spotlight`\n+//~^ ERROR unknown `doc` attribute `spotlight`\n //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n trait MyTrait {}"}, {"sha": "16e387245802b128364f52c61b7091844c823e30", "filename": "src/test/rustdoc-ui/doc-spotlight.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac3e680193a3e11e60b07840ffb1db12793de110/src%2Ftest%2Frustdoc-ui%2Fdoc-spotlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3e680193a3e11e60b07840ffb1db12793de110/src%2Ftest%2Frustdoc-ui%2Fdoc-spotlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-spotlight.rs?ref=ac3e680193a3e11e60b07840ffb1db12793de110", "patch": "@@ -1,9 +1,8 @@\n-// check-pass\n // run-rustfix\n-\n+#![deny(warnings)]\n #![feature(doc_notable_trait)]\n \n #[doc(spotlight)]\n-//~^ WARN unknown `doc` attribute `spotlight`\n+//~^ ERROR unknown `doc` attribute `spotlight`\n //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n trait MyTrait {}"}, {"sha": "8e7831139a86058f75e249c1215c3968ac5515b8", "filename": "src/test/rustdoc-ui/doc-spotlight.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ac3e680193a3e11e60b07840ffb1db12793de110/src%2Ftest%2Frustdoc-ui%2Fdoc-spotlight.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac3e680193a3e11e60b07840ffb1db12793de110/src%2Ftest%2Frustdoc-ui%2Fdoc-spotlight.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-spotlight.stderr?ref=ac3e680193a3e11e60b07840ffb1db12793de110", "patch": "@@ -1,14 +1,19 @@\n-warning: unknown `doc` attribute `spotlight`\n-  --> $DIR/doc-spotlight.rs:6:7\n+error: unknown `doc` attribute `spotlight`\n+  --> $DIR/doc-spotlight.rs:5:7\n    |\n LL | #[doc(spotlight)]\n    |       ^^^^^^^^^ help: use `notable_trait` instead\n    |\n-   = note: `#[warn(invalid_doc_attributes)]` on by default\n+note: the lint level is defined here\n+  --> $DIR/doc-spotlight.rs:2:9\n+   |\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n+   = note: `#[deny(invalid_doc_attributes)]` implied by `#[deny(warnings)]`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n    = note: `doc(spotlight)` was renamed to `doc(notable_trait)`\n    = note: `doc(spotlight)` is now a no-op\n \n-warning: 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "02e9c67915f154e799e477dcff90389c4638f9b8", "filename": "src/test/ui/rustdoc/deny-invalid-doc-attrs.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac3e680193a3e11e60b07840ffb1db12793de110/src%2Ftest%2Fui%2Frustdoc%2Fdeny-invalid-doc-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3e680193a3e11e60b07840ffb1db12793de110/src%2Ftest%2Fui%2Frustdoc%2Fdeny-invalid-doc-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fdeny-invalid-doc-attrs.rs?ref=ac3e680193a3e11e60b07840ffb1db12793de110", "patch": "@@ -0,0 +1,7 @@\n+#![deny(invalid_doc_attributes)]\n+//~^ NOTE defined here\n+#![doc(x)]\n+//~^ ERROR unknown `doc` attribute `x`\n+//~| WARNING will become a hard error\n+//~| NOTE see issue #82730\n+fn main() {}"}, {"sha": "a14ab8fe4bc045b791e19d819b77c7f9b3554c96", "filename": "src/test/ui/rustdoc/deny-invalid-doc-attrs.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ac3e680193a3e11e60b07840ffb1db12793de110/src%2Ftest%2Fui%2Frustdoc%2Fdeny-invalid-doc-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac3e680193a3e11e60b07840ffb1db12793de110/src%2Ftest%2Fui%2Frustdoc%2Fdeny-invalid-doc-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fdeny-invalid-doc-attrs.stderr?ref=ac3e680193a3e11e60b07840ffb1db12793de110", "patch": "@@ -0,0 +1,16 @@\n+error: unknown `doc` attribute `x`\n+  --> $DIR/deny-invalid-doc-attrs.rs:3:8\n+   |\n+LL | #![doc(x)]\n+   |        ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/deny-invalid-doc-attrs.rs:1:9\n+   |\n+LL | #![deny(invalid_doc_attributes)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+\n+error: aborting due to previous error\n+"}]}