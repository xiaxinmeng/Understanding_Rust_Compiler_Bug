{"sha": "8e0ecb4d1a3106dff57b9d949768df41d570ae67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMGVjYjRkMWEzMTA2ZGZmNTdiOWQ5NDk3NjhkZjQxZDU3MGFlNjc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-13T18:25:01Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-13T18:25:11Z"}, "message": "Lex numeric escapes, needed for lib-str.rs (which now passes).", "tree": {"sha": "b28aa6274fabb8609ccac5e82d49a960ed3ebd35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b28aa6274fabb8609ccac5e82d49a960ed3ebd35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e0ecb4d1a3106dff57b9d949768df41d570ae67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e0ecb4d1a3106dff57b9d949768df41d570ae67", "html_url": "https://github.com/rust-lang/rust/commit/8e0ecb4d1a3106dff57b9d949768df41d570ae67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e0ecb4d1a3106dff57b9d949768df41d570ae67/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e081d20e53d58b457ddb3ef62ac2ce2b69abda0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e081d20e53d58b457ddb3ef62ac2ce2b69abda0", "html_url": "https://github.com/rust-lang/rust/commit/3e081d20e53d58b457ddb3ef62ac2ce2b69abda0"}], "stats": {"total": 90, "additions": 77, "deletions": 13}, "files": [{"sha": "36269515f6265395815fc211438f780ef097725e", "filename": "src/comp/front/lexer.rs", "status": "modified", "additions": 77, "deletions": 13, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/8e0ecb4d1a3106dff57b9d949768df41d570ae67/src%2Fcomp%2Ffront%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0ecb4d1a3106dff57b9d949768df41d570ae67/src%2Fcomp%2Ffront%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Flexer.rs?ref=8e0ecb4d1a3106dff57b9d949768df41d570ae67", "patch": "@@ -52,7 +52,7 @@ impure fn new_reader(io.reader rdr, str filename, codemap.filemap filemap)\n             if (pos < len) {ret _str.char_at(file, pos);}\n             else {ret -1 as char;}\n         }\n-            \n+\n         impure fn init() {\n             if (pos < len) {\n                 auto next = _str.char_range_at(file, pos);\n@@ -368,7 +368,7 @@ impure fn scan_exponent(reader rdr) -> option.t[str] {\n }\n \n impure fn scan_dec_digits(reader rdr) -> str {\n-    \n+\n     auto c = rdr.curr();\n     let str res = \"\";\n \n@@ -417,11 +417,11 @@ impure fn scan_number(mutable char c, reader rdr) -> token.token {\n         dec_str = scan_dec_digits(rdr);\n         is_dec_integer = true;\n     }\n-        \n+\n     if (is_dec_integer) {\n         accum_int = digits_to_string(dec_str);\n     }\n-        \n+\n     c = rdr.curr();\n     n = rdr.next();\n \n@@ -526,6 +526,44 @@ impure fn scan_number(mutable char c, reader rdr) -> token.token {\n     }\n }\n \n+impure fn scan_numeric_escape(reader rdr) -> char {\n+\n+    auto n_hex_digits = 0;\n+\n+    check (rdr.curr() == '\\\\');\n+\n+    alt (rdr.next()) {\n+        case ('x') { n_hex_digits = 2; }\n+        case ('u') { n_hex_digits = 4; }\n+        case ('U') { n_hex_digits = 8; }\n+        case (?c) {\n+            log \"unknown numeric character escape\";\n+            log c;\n+            fail;\n+        }\n+    }\n+\n+    rdr.bump(); // advance curr past \\\n+\n+    auto n = rdr.next();\n+    auto accum_int = 0;\n+\n+    while (n_hex_digits != 0) {\n+        if (!is_hex_digit(n)) {\n+            log \"illegal numeric character escape\";\n+            log n;\n+            fail;\n+        }\n+        accum_int *= 16;\n+        accum_int += hex_digit_val(n);\n+        rdr.bump();\n+        n = rdr.next();\n+        n_hex_digits -= 1;\n+    }\n+    ret accum_int as char;\n+}\n+\n+\n impure fn next_token(reader rdr) -> token.token {\n     auto accum_str = \"\";\n \n@@ -666,26 +704,31 @@ impure fn next_token(reader rdr) -> token.token {\n             auto c2 = rdr.curr();\n             if (c2 == '\\\\') {\n                 alt (rdr.next()) {\n-                    case ('n') { rdr.bump(); c2 = '\\n'; }\n-                    case ('r') { rdr.bump(); c2 = '\\r'; }\n-                    case ('t') { rdr.bump(); c2 = '\\t'; }\n-                    case ('\\\\') { rdr.bump(); c2 = '\\\\'; }\n-                    case ('\\'') { rdr.bump(); c2 = '\\''; }\n-                    // FIXME: unicode numeric escapes.\n+                    case ('n') { c2 = '\\n'; }\n+                    case ('r') { c2 = '\\r'; }\n+                    case ('t') { c2 = '\\t'; }\n+                    case ('\\\\') { c2 = '\\\\'; }\n+                    case ('\\'') { c2 = '\\''; }\n+\n+                    case ('x') { c2 = scan_numeric_escape(rdr); }\n+                    case ('u') { c2 = scan_numeric_escape(rdr); }\n+                    case ('U') { c2 = scan_numeric_escape(rdr); }\n+\n                     case (?c2) {\n                         log \"unknown character escape\";\n                         log c2;\n                         fail;\n                     }\n                 }\n+                rdr.bump();\n             }\n \n             if (rdr.next() != '\\'') {\n                 log \"unterminated character constant\";\n                 fail;\n             }\n-            rdr.bump();\n-            rdr.bump();\n+            rdr.bump(); // advance curr to closing '\n+            rdr.bump(); // advance curr past token\n             ret token.LIT_CHAR(c2);\n         }\n \n@@ -715,7 +758,22 @@ impure fn next_token(reader rdr) -> token.token {\n                                 rdr.bump();\n                                 _str.push_byte(accum_str, '\"' as u8);\n                             }\n-                            // FIXME: unicode numeric escapes.\n+\n+                            case ('x') {\n+                                _str.push_char(accum_str,\n+                                               scan_numeric_escape(rdr));\n+                            }\n+\n+                            case ('u') {\n+                                _str.push_char(accum_str,\n+                                               scan_numeric_escape(rdr));\n+                            }\n+\n+                            case ('U') {\n+                                _str.push_char(accum_str,\n+                                               scan_numeric_escape(rdr));\n+                            }\n+\n                             case (?c2) {\n                                 log \"unknown string escape\";\n                                 log c2;\n@@ -782,6 +840,12 @@ impure fn next_token(reader rdr) -> token.token {\n         case ('%') {\n             ret binop(rdr, token.PERCENT);\n         }\n+\n+        case (?c) {\n+            log \"unkown start of token\";\n+            log c;\n+            fail;\n+        }\n     }\n \n     fail;"}]}