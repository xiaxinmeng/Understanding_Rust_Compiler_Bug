{"sha": "4da48e06c7b721075d46b51f686e7e326393ab52", "node_id": "C_kwDOAAsO6NoAKDRkYTQ4ZTA2YzdiNzIxMDc1ZDQ2YjUxZjY4NmU3ZTMyNjM5M2FiNTI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-11T03:23:30Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-11T03:25:58Z"}, "message": "make frame_in_std check work with inlining", "tree": {"sha": "b5f1b0ce0e931ba7b68e4b4b0baba7eb2ca62476", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5f1b0ce0e931ba7b68e4b4b0baba7eb2ca62476"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4da48e06c7b721075d46b51f686e7e326393ab52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4da48e06c7b721075d46b51f686e7e326393ab52", "html_url": "https://github.com/rust-lang/rust/commit/4da48e06c7b721075d46b51f686e7e326393ab52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4da48e06c7b721075d46b51f686e7e326393ab52/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d6eca1c081dac022a887a134691cc7718cad94a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d6eca1c081dac022a887a134691cc7718cad94a", "html_url": "https://github.com/rust-lang/rust/commit/4d6eca1c081dac022a887a134691cc7718cad94a"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "e353e17c6805739e88b99057e5fc071c9027afff", "filename": "src/helpers.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4da48e06c7b721075d46b51f686e7e326393ab52/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da48e06c7b721075d46b51f686e7e326393ab52/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=4da48e06c7b721075d46b51f686e7e326393ab52", "patch": "@@ -729,10 +729,22 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     fn frame_in_std(&self) -> bool {\n         let this = self.eval_context_ref();\n-        this.tcx.lang_items().start_fn().map_or(false, |start_fn| {\n-            this.tcx.def_path(this.frame().instance.def_id()).krate\n-                == this.tcx.def_path(start_fn).krate\n-        })\n+        let Some(start_fn) = this.tcx.lang_items().start_fn() else {\n+            // no_std situations\n+            return false;\n+        };\n+        let frame = this.frame();\n+        // Make an attempt to get at the instance of the function this is inlined from.\n+        let instance: Option<_> = try {\n+            let scope = frame.current_source_info()?.scope;\n+            let inlined_parent = frame.body.source_scopes[scope].inlined_parent_scope?;\n+            let source = &frame.body.source_scopes[inlined_parent];\n+            source.inlined.expect(\"inlined_parent_scope points to scope without inline info\").0\n+        };\n+        // Fall back to the instance of the function itself.\n+        let instance = instance.unwrap_or(frame.instance);\n+        // Now check if this is in the same crate as start_fn.\n+        this.tcx.def_path(instance.def_id()).krate == this.tcx.def_path(start_fn).krate\n     }\n \n     /// Handler that should be called when unsupported functionality is encountered."}]}