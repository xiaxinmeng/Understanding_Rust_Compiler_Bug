{"sha": "44334f6f56bd99635f650796af0db8047e4c21c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MzM0ZjZmNTZiZDk5NjM1ZjY1MDc5NmFmMGRiODA0N2U0YzIxYzQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-08T06:18:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-08T06:18:42Z"}, "message": "fix labled expressions", "tree": {"sha": "2cee555747588449ba3cc1279b254e9b2140b83e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cee555747588449ba3cc1279b254e9b2140b83e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44334f6f56bd99635f650796af0db8047e4c21c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44334f6f56bd99635f650796af0db8047e4c21c4", "html_url": "https://github.com/rust-lang/rust/commit/44334f6f56bd99635f650796af0db8047e4c21c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44334f6f56bd99635f650796af0db8047e4c21c4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "127814d9a7f62c834c0893ff05e933aac4be89e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/127814d9a7f62c834c0893ff05e933aac4be89e9", "html_url": "https://github.com/rust-lang/rust/commit/127814d9a7f62c834c0893ff05e933aac4be89e9"}], "stats": {"total": 327, "additions": 313, "deletions": 14}, "files": [{"sha": "f8b50b35587b921e5c84a2896c6745083dc9641a", "filename": "crates/libsyntax2/src/grammar/expressions/atom.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/44334f6f56bd99635f650796af0db8047e4c21c4/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44334f6f56bd99635f650796af0db8047e4c21c4/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=44334f6f56bd99635f650796af0db8047e4c21c4", "patch": "@@ -62,16 +62,26 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<CompletedMark\n                 LOOP_KW => loop_expr(p, Some(m)),\n                 FOR_KW => for_expr(p, Some(m)),\n                 WHILE_KW => while_expr(p, Some(m)),\n+                L_CURLY => block_expr(p, Some(m)),\n                 _ => {\n+                    // test misplaced_label_err\n+                    // fn main() {\n+                    //     'loop: impl\n+                    // }\n                     p.error(\"expected a loop\");\n+                    m.complete(p, ERROR);\n                     return None;\n                 }\n             }\n         }\n \n         MATCH_KW => match_expr(p),\n-        UNSAFE_KW if la == L_CURLY => block_expr(p),\n-        L_CURLY => block_expr(p),\n+        UNSAFE_KW if la == L_CURLY => {\n+            let m = p.start();\n+            p.bump();\n+            block_expr(p, Some(m))\n+        },\n+        L_CURLY => block_expr(p, None),\n         RETURN_KW => return_expr(p),\n         CONTINUE_KW => continue_expr(p),\n         BREAK_KW => break_expr(p),\n@@ -323,11 +333,11 @@ fn match_arm(p: &mut Parser) -> BlockLike {\n // fn foo() {\n //     {};\n //     unsafe {};\n+//     'label: {};\n // }\n-pub(super) fn block_expr(p: &mut Parser) -> CompletedMarker {\n-    assert!(p.at(L_CURLY) || p.at(UNSAFE_KW) && p.nth(1) == L_CURLY);\n-    let m = p.start();\n-    p.eat(UNSAFE_KW);\n+fn block_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n+    assert!(p.at(L_CURLY));\n+    let m = m.unwrap_or_else(|| p.start());\n     block(p);\n     m.complete(p, BLOCK_EXPR)\n }"}, {"sha": "2fed74c5e05f49678aca03152ee5488f5a153cc6", "filename": "crates/libsyntax2/tests/data/parser/inline/0067_block_expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44334f6f56bd99635f650796af0db8047e4c21c4/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0067_block_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44334f6f56bd99635f650796af0db8047e4c21c4/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0067_block_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0067_block_expr.rs?ref=44334f6f56bd99635f650796af0db8047e4c21c4", "patch": "@@ -1,4 +1,5 @@\n fn foo() {\n     {};\n     unsafe {};\n+    'label: {};\n }"}, {"sha": "12a1ff49aa2d9c10bf2f9f6f7f58a3814b6f5eee", "filename": "crates/libsyntax2/tests/data/parser/inline/0067_block_expr.txt", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/44334f6f56bd99635f650796af0db8047e4c21c4/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0067_block_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/44334f6f56bd99635f650796af0db8047e4c21c4/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0067_block_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0067_block_expr.txt?ref=44334f6f56bd99635f650796af0db8047e4c21c4", "patch": "@@ -1,5 +1,5 @@\n-ROOT@[0; 36)\n-  FN_DEF@[0; 35)\n+ROOT@[0; 52)\n+  FN_DEF@[0; 51)\n     FN_KW@[0; 2)\n     WHITESPACE@[2; 3)\n     NAME@[3; 6)\n@@ -8,7 +8,7 @@ ROOT@[0; 36)\n       L_PAREN@[6; 7)\n       R_PAREN@[7; 8)\n     WHITESPACE@[8; 9)\n-    BLOCK@[9; 35)\n+    BLOCK@[9; 51)\n       L_CURLY@[9; 10)\n       WHITESPACE@[10; 15)\n       EXPR_STMT@[15; 18)\n@@ -26,6 +26,17 @@ ROOT@[0; 36)\n             L_CURLY@[30; 31)\n             R_CURLY@[31; 32)\n         SEMI@[32; 33)\n-      WHITESPACE@[33; 34)\n-      R_CURLY@[34; 35)\n-  WHITESPACE@[35; 36)\n+      WHITESPACE@[33; 38)\n+      EXPR_STMT@[38; 49)\n+        BLOCK_EXPR@[38; 48)\n+          LABEL@[38; 45)\n+            LIFETIME@[38; 44) \"'label\"\n+            COLON@[44; 45)\n+          WHITESPACE@[45; 46)\n+          BLOCK@[46; 48)\n+            L_CURLY@[46; 47)\n+            R_CURLY@[47; 48)\n+        SEMI@[48; 49)\n+      WHITESPACE@[49; 50)\n+      R_CURLY@[50; 51)\n+  WHITESPACE@[51; 52)"}, {"sha": "a2164c5105c1a8533c10e77f5601d5a33bf51f9a", "filename": "crates/libsyntax2/tests/data/parser/inline/0108_misplaced_label_err.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44334f6f56bd99635f650796af0db8047e4c21c4/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0108_misplaced_label_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44334f6f56bd99635f650796af0db8047e4c21c4/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0108_misplaced_label_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0108_misplaced_label_err.rs?ref=44334f6f56bd99635f650796af0db8047e4c21c4", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    'loop: impl\n+}"}, {"sha": "d00305b9732b50c1df8b3f3c9ae4a67c63f1c002", "filename": "crates/libsyntax2/tests/data/parser/inline/0108_misplaced_label_err.txt", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/44334f6f56bd99635f650796af0db8047e4c21c4/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0108_misplaced_label_err.txt", "raw_url": "https://github.com/rust-lang/rust/raw/44334f6f56bd99635f650796af0db8047e4c21c4/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0108_misplaced_label_err.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0108_misplaced_label_err.txt?ref=44334f6f56bd99635f650796af0db8047e4c21c4", "patch": "@@ -0,0 +1,28 @@\n+ROOT@[0; 30)\n+  FN_DEF@[0; 29)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 7)\n+      IDENT@[3; 7) \"main\"\n+    PARAM_LIST@[7; 9)\n+      L_PAREN@[7; 8)\n+      R_PAREN@[8; 9)\n+    WHITESPACE@[9; 10)\n+    BLOCK@[10; 29)\n+      L_CURLY@[10; 11)\n+      WHITESPACE@[11; 16)\n+      EXPR_STMT@[16; 22)\n+        ERROR@[16; 22)\n+          LABEL@[16; 22)\n+            LIFETIME@[16; 21) \"'loop\"\n+            COLON@[21; 22)\n+            err: `expected a loop`\n+            err: `expected SEMI`\n+      WHITESPACE@[22; 23)\n+      IMPL_ITEM@[23; 27)\n+        IMPL_KW@[23; 27)\n+        err: `expected type`\n+        err: `expected `{``\n+      WHITESPACE@[27; 28)\n+      R_CURLY@[28; 29)\n+  WHITESPACE@[29; 30)"}, {"sha": "728d78137c99ecba6cd3773883d717879dc8e848", "filename": "crates/libsyntax2/tests/data/parser/ok/0033_label_break.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/44334f6f56bd99635f650796af0db8047e4c21c4/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0033_label_break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44334f6f56bd99635f650796af0db8047e4c21c4/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0033_label_break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0033_label_break.rs?ref=44334f6f56bd99635f650796af0db8047e4c21c4", "patch": "@@ -0,0 +1,28 @@\n+// format with label break value.\n+fn main() {\n+    'empty_block: {}\n+\n+    'block: {\n+        do_thing();\n+        if condition_not_met() {\n+            break 'block;\n+        }\n+        do_next_thing();\n+        if condition_not_met() {\n+            break 'block;\n+        }\n+        do_last_thing();\n+    }\n+\n+    let result = 'block: {\n+        if foo() {\n+            // comment\n+            break 'block 1;\n+        }\n+        if bar() {\n+            /* comment */\n+            break 'block 2;\n+        }\n+        3\n+    };\n+}"}, {"sha": "6abb9234c9fb67b7d61cae64e72e302cf86a9d7a", "filename": "crates/libsyntax2/tests/data/parser/ok/0033_label_break.txt", "status": "added", "additions": 215, "deletions": 0, "changes": 215, "blob_url": "https://github.com/rust-lang/rust/blob/44334f6f56bd99635f650796af0db8047e4c21c4/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0033_label_break.txt", "raw_url": "https://github.com/rust-lang/rust/raw/44334f6f56bd99635f650796af0db8047e4c21c4/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0033_label_break.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0033_label_break.txt?ref=44334f6f56bd99635f650796af0db8047e4c21c4", "patch": "@@ -0,0 +1,215 @@\n+ROOT@[0; 506)\n+  COMMENT@[0; 33)\n+  WHITESPACE@[33; 34)\n+  FN_DEF@[34; 505)\n+    FN_KW@[34; 36)\n+    WHITESPACE@[36; 37)\n+    NAME@[37; 41)\n+      IDENT@[37; 41) \"main\"\n+    PARAM_LIST@[41; 43)\n+      L_PAREN@[41; 42)\n+      R_PAREN@[42; 43)\n+    WHITESPACE@[43; 44)\n+    BLOCK@[44; 505)\n+      L_CURLY@[44; 45)\n+      WHITESPACE@[45; 50)\n+      EXPR_STMT@[50; 66)\n+        BLOCK_EXPR@[50; 66)\n+          LABEL@[50; 63)\n+            LIFETIME@[50; 62) \"'empty_block\"\n+            COLON@[62; 63)\n+          WHITESPACE@[63; 64)\n+          BLOCK@[64; 66)\n+            L_CURLY@[64; 65)\n+            R_CURLY@[65; 66)\n+      WHITESPACE@[66; 72)\n+      EXPR_STMT@[72; 295)\n+        BLOCK_EXPR@[72; 295)\n+          LABEL@[72; 79)\n+            LIFETIME@[72; 78) \"'block\"\n+            COLON@[78; 79)\n+          WHITESPACE@[79; 80)\n+          BLOCK@[80; 295)\n+            L_CURLY@[80; 81)\n+            WHITESPACE@[81; 90)\n+            EXPR_STMT@[90; 101)\n+              CALL_EXPR@[90; 100)\n+                PATH_EXPR@[90; 98)\n+                  PATH@[90; 98)\n+                    PATH_SEGMENT@[90; 98)\n+                      NAME_REF@[90; 98)\n+                        IDENT@[90; 98) \"do_thing\"\n+                ARG_LIST@[98; 100)\n+                  L_PAREN@[98; 99)\n+                  R_PAREN@[99; 100)\n+              SEMI@[100; 101)\n+            WHITESPACE@[101; 110)\n+            EXPR_STMT@[110; 170)\n+              IF_EXPR@[110; 170)\n+                IF_KW@[110; 112)\n+                WHITESPACE@[112; 113)\n+                CONDITION@[113; 132)\n+                  CALL_EXPR@[113; 132)\n+                    PATH_EXPR@[113; 130)\n+                      PATH@[113; 130)\n+                        PATH_SEGMENT@[113; 130)\n+                          NAME_REF@[113; 130)\n+                            IDENT@[113; 130) \"condition_not_met\"\n+                    ARG_LIST@[130; 132)\n+                      L_PAREN@[130; 131)\n+                      R_PAREN@[131; 132)\n+                WHITESPACE@[132; 133)\n+                BLOCK@[133; 170)\n+                  L_CURLY@[133; 134)\n+                  WHITESPACE@[134; 147)\n+                  EXPR_STMT@[147; 160)\n+                    BREAK_EXPR@[147; 159)\n+                      BREAK_KW@[147; 152)\n+                      WHITESPACE@[152; 153)\n+                      LIFETIME@[153; 159) \"'block\"\n+                    SEMI@[159; 160)\n+                  WHITESPACE@[160; 169)\n+                  R_CURLY@[169; 170)\n+            WHITESPACE@[170; 179)\n+            EXPR_STMT@[179; 195)\n+              CALL_EXPR@[179; 194)\n+                PATH_EXPR@[179; 192)\n+                  PATH@[179; 192)\n+                    PATH_SEGMENT@[179; 192)\n+                      NAME_REF@[179; 192)\n+                        IDENT@[179; 192) \"do_next_thing\"\n+                ARG_LIST@[192; 194)\n+                  L_PAREN@[192; 193)\n+                  R_PAREN@[193; 194)\n+              SEMI@[194; 195)\n+            WHITESPACE@[195; 204)\n+            EXPR_STMT@[204; 264)\n+              IF_EXPR@[204; 264)\n+                IF_KW@[204; 206)\n+                WHITESPACE@[206; 207)\n+                CONDITION@[207; 226)\n+                  CALL_EXPR@[207; 226)\n+                    PATH_EXPR@[207; 224)\n+                      PATH@[207; 224)\n+                        PATH_SEGMENT@[207; 224)\n+                          NAME_REF@[207; 224)\n+                            IDENT@[207; 224) \"condition_not_met\"\n+                    ARG_LIST@[224; 226)\n+                      L_PAREN@[224; 225)\n+                      R_PAREN@[225; 226)\n+                WHITESPACE@[226; 227)\n+                BLOCK@[227; 264)\n+                  L_CURLY@[227; 228)\n+                  WHITESPACE@[228; 241)\n+                  EXPR_STMT@[241; 254)\n+                    BREAK_EXPR@[241; 253)\n+                      BREAK_KW@[241; 246)\n+                      WHITESPACE@[246; 247)\n+                      LIFETIME@[247; 253) \"'block\"\n+                    SEMI@[253; 254)\n+                  WHITESPACE@[254; 263)\n+                  R_CURLY@[263; 264)\n+            WHITESPACE@[264; 273)\n+            EXPR_STMT@[273; 289)\n+              CALL_EXPR@[273; 288)\n+                PATH_EXPR@[273; 286)\n+                  PATH@[273; 286)\n+                    PATH_SEGMENT@[273; 286)\n+                      NAME_REF@[273; 286)\n+                        IDENT@[273; 286) \"do_last_thing\"\n+                ARG_LIST@[286; 288)\n+                  L_PAREN@[286; 287)\n+                  R_PAREN@[287; 288)\n+              SEMI@[288; 289)\n+            WHITESPACE@[289; 294)\n+            R_CURLY@[294; 295)\n+      WHITESPACE@[295; 301)\n+      LET_STMT@[301; 503)\n+        LET_KW@[301; 304)\n+        WHITESPACE@[304; 305)\n+        BIND_PAT@[305; 311)\n+          NAME@[305; 311)\n+            IDENT@[305; 311) \"result\"\n+        WHITESPACE@[311; 312)\n+        EQ@[312; 313)\n+        WHITESPACE@[313; 314)\n+        BLOCK_EXPR@[314; 502)\n+          LABEL@[314; 321)\n+            LIFETIME@[314; 320) \"'block\"\n+            COLON@[320; 321)\n+          WHITESPACE@[321; 322)\n+          BLOCK@[322; 502)\n+            L_CURLY@[322; 323)\n+            WHITESPACE@[323; 332)\n+            EXPR_STMT@[332; 403)\n+              IF_EXPR@[332; 403)\n+                IF_KW@[332; 334)\n+                WHITESPACE@[334; 335)\n+                CONDITION@[335; 340)\n+                  CALL_EXPR@[335; 340)\n+                    PATH_EXPR@[335; 338)\n+                      PATH@[335; 338)\n+                        PATH_SEGMENT@[335; 338)\n+                          NAME_REF@[335; 338)\n+                            IDENT@[335; 338) \"foo\"\n+                    ARG_LIST@[338; 340)\n+                      L_PAREN@[338; 339)\n+                      R_PAREN@[339; 340)\n+                WHITESPACE@[340; 341)\n+                BLOCK@[341; 403)\n+                  L_CURLY@[341; 342)\n+                  WHITESPACE@[342; 355)\n+                  COMMENT@[355; 365)\n+                  WHITESPACE@[365; 378)\n+                  EXPR_STMT@[378; 393)\n+                    BREAK_EXPR@[378; 392)\n+                      BREAK_KW@[378; 383)\n+                      WHITESPACE@[383; 384)\n+                      LIFETIME@[384; 390) \"'block\"\n+                      WHITESPACE@[390; 391)\n+                      LITERAL@[391; 392)\n+                        INT_NUMBER@[391; 392) \"1\"\n+                    SEMI@[392; 393)\n+                  WHITESPACE@[393; 402)\n+                  R_CURLY@[402; 403)\n+            WHITESPACE@[403; 412)\n+            EXPR_STMT@[412; 486)\n+              IF_EXPR@[412; 486)\n+                IF_KW@[412; 414)\n+                WHITESPACE@[414; 415)\n+                CONDITION@[415; 420)\n+                  CALL_EXPR@[415; 420)\n+                    PATH_EXPR@[415; 418)\n+                      PATH@[415; 418)\n+                        PATH_SEGMENT@[415; 418)\n+                          NAME_REF@[415; 418)\n+                            IDENT@[415; 418) \"bar\"\n+                    ARG_LIST@[418; 420)\n+                      L_PAREN@[418; 419)\n+                      R_PAREN@[419; 420)\n+                WHITESPACE@[420; 421)\n+                BLOCK@[421; 486)\n+                  L_CURLY@[421; 422)\n+                  WHITESPACE@[422; 435)\n+                  COMMENT@[435; 448)\n+                  WHITESPACE@[448; 461)\n+                  EXPR_STMT@[461; 476)\n+                    BREAK_EXPR@[461; 475)\n+                      BREAK_KW@[461; 466)\n+                      WHITESPACE@[466; 467)\n+                      LIFETIME@[467; 473) \"'block\"\n+                      WHITESPACE@[473; 474)\n+                      LITERAL@[474; 475)\n+                        INT_NUMBER@[474; 475) \"2\"\n+                    SEMI@[475; 476)\n+                  WHITESPACE@[476; 485)\n+                  R_CURLY@[485; 486)\n+            WHITESPACE@[486; 495)\n+            LITERAL@[495; 496)\n+              INT_NUMBER@[495; 496) \"3\"\n+            WHITESPACE@[496; 501)\n+            R_CURLY@[501; 502)\n+        SEMI@[502; 503)\n+      WHITESPACE@[503; 504)\n+      R_CURLY@[504; 505)\n+  WHITESPACE@[505; 506)"}, {"sha": "968b3b87ace522acadb65b9cd86c435e4a476beb", "filename": "crates/server/src/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44334f6f56bd99635f650796af0db8047e4c21c4/crates%2Fserver%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44334f6f56bd99635f650796af0db8047e4c21c4/crates%2Fserver%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain.rs?ref=44334f6f56bd99635f650796af0db8047e4c21c4", "patch": "@@ -11,7 +11,8 @@ use gen_lsp_server::{run_server, stdio_transport};\n use m::Result;\n \n fn main() -> Result<()> {\n-    Logger::with_env_or_str(\"m=error\")\n+    ::std::env::set_var(\"RUST_BACKTRACE\", \"short\");\n+    Logger::with_env_or_str(\"error\")\n         .duplicate_to_stderr(Duplicate::All)\n         .log_to_file()\n         .directory(\"log\")"}, {"sha": "2ef1e2d17bc4680852203d51502c4239670f7551", "filename": "crates/server/src/main_loop/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44334f6f56bd99635f650796af0db8047e4c21c4/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44334f6f56bd99635f650796af0db8047e4c21c4/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs?ref=44334f6f56bd99635f650796af0db8047e4c21c4", "patch": "@@ -38,7 +38,9 @@ pub fn main_loop(\n     msg_sender: &mut Sender<RawMessage>,\n ) -> Result<()> {\n     let pool = rayon::ThreadPoolBuilder::new()\n-        .num_threads(4).build()\n+        .num_threads(4)\n+        .panic_handler(|_| error!(\"thread panicked :(\"))\n+        .build()\n         .unwrap();\n     let (task_sender, task_receiver) = unbounded::<Task>();\n     let (fs_sender, fs_receiver, fs_watcher) = vfs::roots_loader();"}]}