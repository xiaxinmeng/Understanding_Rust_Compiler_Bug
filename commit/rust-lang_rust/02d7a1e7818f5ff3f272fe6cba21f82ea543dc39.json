{"sha": "02d7a1e7818f5ff3f272fe6cba21f82ea543dc39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZDdhMWU3ODE4ZjVmZjNmMjcyZmU2Y2JhMjFmODJlYTU0M2RjMzk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-10-21T18:06:33Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-24T23:06:17Z"}, "message": "move sys fns into c-stack-cdecl and get_type_desc() into rusti\n\nthere is one test failure, stdtest/sys.rs, which inexplicably\n(thus far) fails to compile because it invokes\nsys::rustrt::last_os_error() instead of invoking\nsys::last_os_error().  If stdtest/sys.rs is updated to invoke\nthe wrapper, it passes.  Still tracing the source of this error.", "tree": {"sha": "166c60025bbb45170704e6d6730231aaf50a8650", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/166c60025bbb45170704e6d6730231aaf50a8650"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02d7a1e7818f5ff3f272fe6cba21f82ea543dc39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02d7a1e7818f5ff3f272fe6cba21f82ea543dc39", "html_url": "https://github.com/rust-lang/rust/commit/02d7a1e7818f5ff3f272fe6cba21f82ea543dc39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02d7a1e7818f5ff3f272fe6cba21f82ea543dc39/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0598635bdcb8316d072351d49d9c8ac04aa82992", "url": "https://api.github.com/repos/rust-lang/rust/commits/0598635bdcb8316d072351d49d9c8ac04aa82992", "html_url": "https://github.com/rust-lang/rust/commit/0598635bdcb8316d072351d49d9c8ac04aa82992"}], "stats": {"total": 187, "additions": 96, "deletions": 91}, "files": [{"sha": "5c1a60440823f96d42e073b0f9f7e40fca6f8d90", "filename": "src/lib/sys.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/02d7a1e7818f5ff3f272fe6cba21f82ea543dc39/src%2Flib%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02d7a1e7818f5ff3f272fe6cba21f82ea543dc39/src%2Flib%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fsys.rs?ref=02d7a1e7818f5ff3f272fe6cba21f82ea543dc39", "patch": "@@ -6,33 +6,36 @@ tag type_desc {\n     type_desc(@type_desc);\n }\n \n-native \"rust\" mod rustrt {\n+native \"c-stack-cdecl\" mod rustrt {\n     // Explicitly re-export native stuff we want to be made\n     // available outside this crate. Otherwise it's\n     // visible-in-crate, but not re-exported.\n     fn last_os_error() -> str;\n-    fn size_of<T>() -> uint;\n-    fn align_of<T>() -> uint;\n+    fn size_of(td: *type_desc) -> uint;\n+    fn align_of(td: *type_desc) -> uint;\n     fn refcount<T>(t: @T) -> uint;\n     fn do_gc();\n     fn unsupervise();\n+}\n+\n+native \"rust-intrinsic\" mod rusti {\n     fn get_type_desc<T>() -> *type_desc;\n }\n \n fn get_type_desc<T>() -> *type_desc {\n-    ret rustrt::get_type_desc::<T>();\n+    ret rusti::get_type_desc::<T>();\n }\n \n fn last_os_error() -> str {\n     ret rustrt::last_os_error();\n }\n \n fn size_of<T>() -> uint {\n-    ret rustrt::size_of::<T>();\n+    ret rustrt::size_of(get_type_desc::<T>());\n }\n \n fn align_of<T>() -> uint {\n-    ret rustrt::align_of::<T>();\n+    ret rustrt::align_of(get_type_desc::<T>());\n }\n \n fn refcount<T>(t: @T) -> uint {"}, {"sha": "3bafb5de76bd517e763618d4bc3f79769ecb83e9", "filename": "src/lib/task.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02d7a1e7818f5ff3f272fe6cba21f82ea543dc39/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02d7a1e7818f5ff3f272fe6cba21f82ea543dc39/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=02d7a1e7818f5ff3f272fe6cba21f82ea543dc39", "patch": "@@ -26,7 +26,6 @@ native \"rust\" mod rustrt {\n     fn task_sleep(time_in_us: uint);\n     fn task_yield();\n     fn task_join(t: task_id) -> int;\n-    fn unsupervise();\n     fn pin_task();\n     fn unpin_task();\n     fn get_task_id() -> task_id;\n@@ -85,7 +84,7 @@ fn join_id(t: task_id) -> task_result {\n     alt rustrt::task_join(t) { 0 { tr_success } _ { tr_failure } }\n }\n \n-fn unsupervise() { ret rustrt::unsupervise(); }\n+fn unsupervise() { ret sys::unsupervise(); }\n \n fn pin() { rustrt::pin_task(); }\n "}, {"sha": "c2567db720f387c1e3a66ca35dfbafbcd04df485", "filename": "src/rt/intrinsics/intrinsics.cpp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02d7a1e7818f5ff3f272fe6cba21f82ea543dc39/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/02d7a1e7818f5ff3f272fe6cba21f82ea543dc39/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.cpp?ref=02d7a1e7818f5ff3f272fe6cba21f82ea543dc39", "patch": "@@ -48,3 +48,9 @@ rust_intrinsic_recv(rust_task *task, void **retptr, type_desc *ty,\n     port_recv((uintptr_t*)retptr, port);\n }\n \n+extern \"C\" void\n+rust_intrinsic_get_type_desc(rust_task *task, void **retptr,\n+                             type_desc* ty) {\n+    *(type_desc**)retptr = ty;\n+}\n+"}, {"sha": "7406d9962005202c453057007edae127042de146", "filename": "src/rt/intrinsics/intrinsics.ll.in", "status": "modified", "additions": 78, "deletions": 75, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/02d7a1e7818f5ff3f272fe6cba21f82ea543dc39/src%2Frt%2Fintrinsics%2Fintrinsics.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/02d7a1e7818f5ff3f272fe6cba21f82ea543dc39/src%2Frt%2Fintrinsics%2Fintrinsics.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.ll.in?ref=02d7a1e7818f5ff3f272fe6cba21f82ea543dc39", "patch": "@@ -1,106 +1,108 @@\n ; ModuleID = 'intrinsics.cpp'\n target triple = \"@CFG_LLVM_TRIPLE@\"\n \n-%struct.rust_task = type { i32, %struct.stk_seg*, i32, i32, %struct.gc_alloc*, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i32, i32, %class.timer, i32*, %class.array_list, %class.context, i32, i32, %class.memory_region, %\"class.rust_task::wakeup_callback\"*, i8, i8, %class.lock_and_signal }\n-%struct.stk_seg = type { i32, i32, [0 x i8] }\n-%struct.gc_alloc = type { %struct.gc_alloc*, %struct.gc_alloc*, i32, [0 x i8] }\n-%struct.rust_scheduler = type { %class.rust_thread, %struct.rc_base, i32, %class.rust_log, i32, %class.rust_srv*, i8*, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_crate_cache, %struct.randctx, %class.rust_kernel*, i32, %class.hash_map, %class.hash_map.3, i32, %class.lock_and_signal, i32, %struct._opaque_pthread_attr_t, %struct.rust_env* }\n-%class.rust_thread = type { i32 (...)**, i8, %struct._opaque_pthread_t* }\n-%struct._opaque_pthread_t = type { i32, %struct.__darwin_pthread_handler_rec*, [596 x i8] }\n-%struct.__darwin_pthread_handler_rec = type { {}*, i8*, %struct.__darwin_pthread_handler_rec* }\n-%struct.rc_base = type { i32 }\n+%0 = type { i32, %\"struct.memory_region::alloc_header\"**, i32 }\n+%1 = type { i32, %struct.rust_scheduler**, i32 }\n+%2 = type { %\"struct.hash_map<long, rust_task *>::map_entry\"* }\n+%3 = type { %struct.rust_task*, i32, i32, %class.rust_chan** }\n+%class.array_list = type { i32, %struct.rust_task**, i32 }\n+%class.circular_buffer = type { %class.rust_kernel*, i32, i32, i32, i32, i8* }\n+%class.context = type { %struct.registers_t, %class.context* }\n+%\"class.debug::task_debug_info\" = type { %\"class.std::map\" }\n+%class.hash_map = type { %\"struct.hash_map<long, rust_port *>::map_entry\"* }\n+%class.indexed_list = type { i32 (...)**, %class.array_list }\n+%class.lock_and_signal = type { i32 (...)**, %struct._opaque_pthread_cond_t, %struct._opaque_pthread_mutex_t, %struct._opaque_pthread_t*, i8, i8 }\n+%class.memory_region = type { i32 (...)**, %class.rust_srv*, %class.memory_region*, i32, %0, i8, i8, %class.lock_and_signal }\n+%class.ptr_vec = type { %struct.rust_task*, i32, i32, %struct.rust_token** }\n+%class.rust_chan = type { i32, %class.rust_kernel*, %struct.rust_task*, %class.rust_port*, i32, %class.circular_buffer }\n+%class.rust_crate_cache = type { %struct.type_desc*, %struct.rust_scheduler*, i32 }\n+%class.rust_kernel = type { i32 (...)**, %class.memory_region, %class.rust_log, %class.rust_srv*, %class.lock_and_signal, %1, %struct.randctx, i32, %2, i32, i32, i32, %struct.rust_env* }\n %class.rust_log = type { i32 (...)**, %class.rust_srv*, %struct.rust_scheduler*, i8 }\n+%class.rust_obstack = type { %struct.rust_obstack_chunk*, %struct.rust_task* }\n+%class.rust_port = type { i32, i32, %class.rust_kernel*, %struct.rust_task*, %class.rust_chan*, i32, %class.ptr_vec, %3, %class.lock_and_signal }\n %class.rust_srv = type { i32 (...)**, %struct.rust_env*, %class.memory_region }\n-%struct.rust_env = type { i32, i32, i8*, i8, i8, i8* }\n-%class.memory_region = type { i32 (...)**, %class.rust_srv*, %class.memory_region*, i32, %class.array_list.0, i8, i8, %class.lock_and_signal, i8 }\n-%class.array_list.0 = type { i32, %\"struct.memory_region::alloc_header\"**, i32 }\n-%\"struct.memory_region::alloc_header\" = type { i32, i32, i8*, [0 x i8] }\n-%class.lock_and_signal = type { i32 (...)**, %struct._opaque_pthread_cond_t, %struct._opaque_pthread_mutex_t, %struct._opaque_pthread_t*, i8, i8 }\n-%struct._opaque_pthread_cond_t = type { i32, [24 x i8] }\n-%struct._opaque_pthread_mutex_t = type { i32, [40 x i8] }\n+%\"class.rust_task::wakeup_callback\" = type { i32 (...)** }\n %class.rust_task_list = type { %class.indexed_list, %struct.rust_scheduler*, i8* }\n-%class.indexed_list = type { i32 (...)**, %class.array_list }\n-%class.array_list = type { i32, %struct.rust_task**, i32 }\n-%class.rust_crate_cache = type { %struct.type_desc*, %struct.rust_scheduler*, i32 }\n-%struct.type_desc = type { %struct.type_desc**, i32, i32, {}*, {}*, {}*, {}*, {}*, {}*, i32, {}*, %struct.UT_hash_handle, i32, [0 x %struct.type_desc*] }\n+%class.rust_thread = type { i32 (...)**, i8, %struct._opaque_pthread_t* }\n+%\"class.std::_Rb_tree\" = type { %\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" }\n+%\"class.std::map\" = type { %\"class.std::_Rb_tree\" }\n+%class.timer = type { i32 (...)**, i64, i64 }\n+%struct.UT_hash_bucket = type { %struct.UT_hash_handle*, i32, i32 }\n %struct.UT_hash_handle = type { %struct.UT_hash_table*, i8*, i8*, %struct.UT_hash_handle*, %struct.UT_hash_handle*, i8*, i32, i32 }\n %struct.UT_hash_table = type { %struct.UT_hash_bucket*, i32, i32, i32, %struct.UT_hash_handle*, i32, i32, i32, i32, i32 }\n-%struct.UT_hash_bucket = type { %struct.UT_hash_handle*, i32, i32 }\n-%struct.randctx = type { i32, [256 x i32], [256 x i32], i32, i32, i32 }\n-%class.rust_kernel = type { i32 (...)**, %class.memory_region, %class.rust_log, %class.rust_srv*, %class.lock_and_signal, %class.array_list.4, %struct.randctx, i32, i32, i32, %struct.rust_env* }\n-%class.array_list.4 = type { i32, %struct.rust_scheduler**, i32 }\n-%class.hash_map = type { %\"struct.hash_map<rust_task *, rust_task *>::map_entry\"* }\n-%\"struct.hash_map<rust_task *, rust_task *>::map_entry\" = type opaque\n-%class.hash_map.3 = type { %\"struct.hash_map<rust_port *, rust_port *>::map_entry\"* }\n-%\"struct.hash_map<rust_port *, rust_port *>::map_entry\" = type opaque\n+%struct.__darwin_pthread_handler_rec = type { void (i8*)*, i8*, %struct.__darwin_pthread_handler_rec* }\n %struct._opaque_pthread_attr_t = type { i32, [36 x i8] }\n-%struct.rust_cond = type { i8 }\n-%class.timer = type { i32 (...)**, i64, i64 }\n-%class.context = type { %struct.registers_t, %class.context* }\n+%struct._opaque_pthread_cond_t = type { i32, [24 x i8] }\n+%struct._opaque_pthread_mutex_t = type { i32, [40 x i8] }\n+%struct._opaque_pthread_t = type { i32, %struct.__darwin_pthread_handler_rec*, [596 x i8] }\n+%struct.chan_handle = type { i32, i32 }\n+%\"struct.hash_map<long, rust_port *>::map_entry\" = type opaque\n+%\"struct.hash_map<long, rust_task *>::map_entry\" = type opaque\n+%\"struct.memory_region::alloc_header\" = type { i32, i32, i8*, i32, [0 x i8] }\n+%struct.randctx = type { i32, [256 x i32], [256 x i32], i32, i32, i32 }\n %struct.registers_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i32, i32 }\n-%\"class.rust_task::wakeup_callback\" = type { i32 (...)** }\n-%struct.rc_base.5 = type { i32 }\n-%struct.rust_vec = type { i32, i32, [ 0 x i8 ] }\n-%class.rust_port = type { i32, %class.rust_kernel*, %struct.rust_task*, i32, %class.ptr_vec, %class.ptr_vec.7, %class.rust_chan*, %class.lock_and_signal }\n-%class.ptr_vec = type { %struct.rust_task*, i32, i32, %struct.rust_token** }\n+%struct.rust_cond = type { i8 }\n+%struct.rust_env = type { i32, i32, i8*, i8, i8, i8* }\n+%struct.rust_obstack_chunk = type { %struct.rust_obstack_chunk*, i32, i32, i32, [0 x i8] }\n+%struct.rust_scheduler = type { %class.rust_thread, i32, i32, %class.rust_log, i32, %class.rust_srv*, i8*, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_crate_cache, %struct.randctx, %class.rust_kernel*, i32, i32, %class.lock_and_signal, i32, %struct._opaque_pthread_attr_t, %struct.rust_env*, %class.context }\n+%struct.rust_shape_tables = type { i8*, i8* }\n+%struct.rust_task = type { %struct.rust_task_user, i32, %class.context, %struct.rust_vec*, i32, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i32, %class.timer, i32*, %class.array_list, i32, i32, %class.memory_region, %\"class.rust_task::wakeup_callback\"*, i8, i8, i8, %class.lock_and_signal, %class.hash_map, %class.rust_obstack, %\"class.std::map\", i32, %\"class.debug::task_debug_info\" }\n+%struct.rust_task_user = type { i32, i32, %struct.chan_handle, i32 }\n %struct.rust_token = type opaque\n-%class.ptr_vec.7 = type { %struct.rust_task*, i32, i32, %class.rust_chan** }\n-%class.rust_chan = type { i32, %class.rust_kernel*, %struct.rust_task*, %class.rust_port*, i32, %class.circular_buffer }\n-%class.circular_buffer = type { %class.rust_kernel*, i32, i32, i32, i32, i8* }\n+%struct.rust_vec = type { i32, i32, [0 x i8] }\n+%\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" = type { %struct.rust_cond, %\"struct.std::_Rb_tree_node_base\", i32 }\n+%\"struct.std::_Rb_tree_node_base\" = type { i32, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* }\n+%struct.type_desc = type { %struct.type_desc**, i32, i32, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, i8*, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, i32, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*, i8*, i8)*, i8*, %struct.rust_shape_tables*, i32, i32, %struct.UT_hash_handle, i32, [0 x %struct.type_desc*] }\n \n-@.str = private unnamed_addr constant [42 x i8] c\"attempt to cast values of differing sizes\\00\", align 1\n-@.str1 = private unnamed_addr constant [15 x i8] c\"intrinsics.cpp\\00\", align 1\n+@.str = private unnamed_addr constant [42 x i8] c\"attempt to cast values of differing sizes\\00\"\n+@.str1 = private unnamed_addr constant [15 x i8] c\"intrinsics.cpp\\00\"\n \n-define linkonce_odr void @rust_intrinsic_vec_len(%struct.rust_task* nocapture %task, i32* nocapture %retptr, %struct.type_desc* nocapture %ty, %struct.rust_vec** nocapture %v) nounwind {\n-entry:\n-  %ptr1 = load %struct.rust_vec** %v, align 4, !tbaa !0\n-  %fill1 = getelementptr inbounds %struct.rust_vec* %ptr1, i32 0, i32 0\n-  %tmp2 = load i32* %fill1, align 4, !tbaa !0\n-  %size = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1\n-  %tmp20 = load i32* %size, align 4, !tbaa !0\n-  %div = udiv i32 %tmp2, %tmp20\n-  store i32 %div, i32* %retptr, align 4, !tbaa !0\n+define void @rust_intrinsic_vec_len(%struct.rust_task* nocapture %task, i32* nocapture %retptr, %struct.type_desc* nocapture %ty, %struct.rust_vec** nocapture %vp) nounwind {\n+  %1 = load %struct.rust_vec** %vp, align 4\n+  %2 = getelementptr inbounds %struct.rust_vec* %1, i32 0, i32 0\n+  %3 = load i32* %2, align 4\n+  %4 = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1\n+  %5 = load i32* %4, align 4\n+  %6 = udiv i32 %3, %5\n+  store i32 %6, i32* %retptr, align 4\n   ret void\n }\n \n-define linkonce_odr void @rust_intrinsic_ptr_offset(%struct.rust_task* nocapture %task, i8** nocapture %retptr, %struct.type_desc* nocapture %ty, i8* %ptr, i32 %count) nounwind {\n-entry:\n-  %size = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1\n-  %tmp1 = load i32* %size, align 4, !tbaa !0\n-  %mul = mul i32 %tmp1, %count\n-  %arrayidx = getelementptr inbounds i8* %ptr, i32 %mul\n-  store i8* %arrayidx, i8** %retptr, align 4, !tbaa !3\n+define void @rust_intrinsic_ptr_offset(%struct.rust_task* nocapture %task, i8** nocapture %retptr, %struct.type_desc* nocapture %ty, i8* %ptr, i32 %count) nounwind {\n+  %1 = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1\n+  %2 = load i32* %1, align 4\n+  %3 = mul i32 %2, %count\n+  %4 = getelementptr inbounds i8* %ptr, i32 %3\n+  store i8* %4, i8** %retptr, align 4\n   ret void\n }\n \n-define linkonce_odr void @rust_intrinsic_cast(%struct.rust_task* %task, i8* nocapture %retptr, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %src) {\n-entry:\n-  %size = getelementptr inbounds %struct.type_desc* %t1, i32 0, i32 1\n-  %tmp1 = load i32* %size, align 4, !tbaa !0\n-  %size3 = getelementptr inbounds %struct.type_desc* %t2, i32 0, i32 1\n-  %tmp4 = load i32* %size3, align 4, !tbaa !0\n-  %cmp = icmp eq i32 %tmp1, %tmp4\n-  br i1 %cmp, label %if.end, label %if.then\n+define void @rust_intrinsic_cast(%struct.rust_task* %task, i8* nocapture %retptr, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %src) {\n+  %1 = getelementptr inbounds %struct.type_desc* %t1, i32 0, i32 1\n+  %2 = load i32* %1, align 4\n+  %3 = getelementptr inbounds %struct.type_desc* %t2, i32 0, i32 1\n+  %4 = load i32* %3, align 4\n+  %5 = icmp eq i32 %2, %4\n+  br i1 %5, label %7, label %6\n \n if.then:                                          ; preds = %entry\n   tail call void @upcall_fail(i8* getelementptr inbounds ([42 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str1, i32 0, i32 0), i32 45)\n   br label %return\n \n-if.end:                                           ; preds = %entry\n-  tail call void @llvm.memmove.p0i8.p0i8.i32(i8* %retptr, i8* %src, i32 %tmp1, i32 1, i1 false)\n-  br label %return\n+; <label>:7                                       ; preds = %0\n+  tail call void @llvm.memmove.p0i8.p0i8.i32(i8* %retptr, i8* %src, i32 %2, i32 1, i1 false)\n+  br label %8\n \n-return:                                           ; preds = %if.end, %if.then\n+; <label>:8                                       ; preds = %7, %6\n   ret void\n }\n \n declare void @upcall_fail(i8*, i8*, i32)\n \n declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture, i8* nocapture, i32, i32, i1) nounwind\n \n-define linkonce_odr void @rust_intrinsic_addr_of(%struct.rust_task* nocapture %task, i8** nocapture %retptr, %struct.type_desc* nocapture %ty, i8* %valptr) nounwind {\n-entry:\n-  store i8* %valptr, i8** %retptr, align 4, !tbaa !3\n+define void @rust_intrinsic_addr_of(%struct.rust_task* nocapture %task, i8** nocapture %retptr, %struct.type_desc* nocapture %ty, i8* %valptr) nounwind {\n+  store i8* %valptr, i8** %retptr, align 4\n   ret void\n }\n \n@@ -113,7 +115,8 @@ entry:\n \n declare void @port_recv(i32*, %class.rust_port*)\n \n-!0 = metadata !{metadata !\"long\", metadata !1}\n-!1 = metadata !{metadata !\"omnipotent char\", metadata !2}\n-!2 = metadata !{metadata !\"Simple C/C++ TBAA\", null}\n-!3 = metadata !{metadata !\"any pointer\", metadata !1}\n+define void @rust_intrinsic_get_type_desc(%struct.rust_task* nocapture %task, i8** nocapture %retptr, %struct.type_desc* %ty) nounwind {\n+  %ty.c = bitcast %struct.type_desc* %ty to i8*\n+  store i8* %ty.c, i8** %retptr, align 4\n+  ret void\n+}"}, {"sha": "7deeb31cca14e85c7ffcbd0da3880dafc1af0fb9", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02d7a1e7818f5ff3f272fe6cba21f82ea543dc39/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/02d7a1e7818f5ff3f272fe6cba21f82ea543dc39/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=02d7a1e7818f5ff3f272fe6cba21f82ea543dc39", "patch": "@@ -92,7 +92,7 @@ leak(void *thing) {\n }\n \n extern \"C\" CDECL intptr_t\n-refcount(type_desc *t, intptr_t *v) {\n+refcount(intptr_t *v) {\n     // Passed-in value has refcount 1 too high\n     // because it was ref'ed while making the call.\n     return (*v) - 1;\n@@ -109,11 +109,6 @@ unsupervise() {\n     task->unsupervise();\n }\n \n-extern \"C\" CDECL type_desc*\n-get_type_desc(void *unused_task, type_desc* t) {\n-    return t;\n-}\n-\n extern \"C\" CDECL void\n vec_reserve_shared(type_desc* ty, rust_vec** vp,\n                    size_t n_elts) {"}, {"sha": "3430f77c8927d5cc756294312f6d6e9ab162023c", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02d7a1e7818f5ff3f272fe6cba21f82ea543dc39/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/02d7a1e7818f5ff3f272fe6cba21f82ea543dc39/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=02d7a1e7818f5ff3f272fe6cba21f82ea543dc39", "patch": "@@ -62,7 +62,6 @@ vec_from_buf_shared\n task_sleep\n task_yield\n task_join\n-get_type_desc\n unsupervise\n upcall_alloc_c_stack\n upcall_call_c_stack"}, {"sha": "b988e842f93095d4029ce0e6f5cee86040fa495c", "filename": "src/test/run-pass/unique-copy-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02d7a1e7818f5ff3f272fe6cba21f82ea543dc39/src%2Ftest%2Frun-pass%2Funique-copy-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02d7a1e7818f5ff3f272fe6cba21f82ea543dc39/src%2Ftest%2Frun-pass%2Funique-copy-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-copy-box.rs?ref=02d7a1e7818f5ff3f272fe6cba21f82ea543dc39", "patch": "@@ -1,5 +1,5 @@\n use std;\n-import std::sys::rustrt::refcount;\n+import std::sys::refcount;\n \n fn main() unsafe {\n     let i = ~@1;"}]}