{"sha": "1a87926a312fca90033c03c2ece5257e960dd242", "node_id": "C_kwDOAAsO6NoAKDFhODc5MjZhMzEyZmNhOTAwMzNjMDNjMmVjZTUyNTdlOTYwZGQyNDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-03T15:56:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-03T15:56:13Z"}, "message": "Auto merge of #2460 - LegNeato:sysconf, r=RalfJung\n\nAdd additional raw error mappings for the nightly `io_error_more` feature\n\nSome crates are using nightly and failing when mapping these errors,\nfor example <https://miri.saethlin.dev/?crate=remove_dir_all&version=0.7.0>:\n\n```\nerror: unsupported operation: io error NotADirectory cannot be translated into a raw os error\n    --> /root/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/sys/unix/fs.rs:1203:19\n```", "tree": {"sha": "5b92888dbf115cc0d29d9ba9bfd645d8ca5568ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b92888dbf115cc0d29d9ba9bfd645d8ca5568ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a87926a312fca90033c03c2ece5257e960dd242", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a87926a312fca90033c03c2ece5257e960dd242", "html_url": "https://github.com/rust-lang/rust/commit/1a87926a312fca90033c03c2ece5257e960dd242", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a87926a312fca90033c03c2ece5257e960dd242/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "730a799bf4830ce0dea063c59255bf4a03264771", "url": "https://api.github.com/repos/rust-lang/rust/commits/730a799bf4830ce0dea063c59255bf4a03264771", "html_url": "https://github.com/rust-lang/rust/commit/730a799bf4830ce0dea063c59255bf4a03264771"}, {"sha": "e1e1f42f39801c4f9195443fc5f1ac6e8505310e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1e1f42f39801c4f9195443fc5f1ac6e8505310e", "html_url": "https://github.com/rust-lang/rust/commit/e1e1f42f39801c4f9195443fc5f1ac6e8505310e"}], "stats": {"total": 65, "additions": 45, "deletions": 20}, "files": [{"sha": "8523af84d0660bbe83cff10daab4b0317dea994e", "filename": "src/helpers.rs", "status": "modified", "additions": 45, "deletions": 20, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/1a87926a312fca90033c03c2ece5257e960dd242/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a87926a312fca90033c03c2ece5257e960dd242/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=1a87926a312fca90033c03c2ece5257e960dd242", "patch": "@@ -23,26 +23,51 @@ use crate::*;\n \n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n \n-const UNIX_IO_ERROR_TABLE: &[(std::io::ErrorKind, &str)] = {\n+// This mapping should match `decode_error_kind` in\n+// <https://github.com/rust-lang/rust/blob/master/library/std/src/sys/unix/mod.rs>.\n+const UNIX_IO_ERROR_TABLE: &[(&str, std::io::ErrorKind)] = {\n     use std::io::ErrorKind::*;\n     &[\n-        (ConnectionRefused, \"ECONNREFUSED\"),\n-        (ConnectionReset, \"ECONNRESET\"),\n-        (PermissionDenied, \"EPERM\"),\n-        (BrokenPipe, \"EPIPE\"),\n-        (NotConnected, \"ENOTCONN\"),\n-        (ConnectionAborted, \"ECONNABORTED\"),\n-        (AddrNotAvailable, \"EADDRNOTAVAIL\"),\n-        (AddrInUse, \"EADDRINUSE\"),\n-        (NotFound, \"ENOENT\"),\n-        (Interrupted, \"EINTR\"),\n-        (InvalidInput, \"EINVAL\"),\n-        (InvalidFilename, \"ENAMETOOLONG\"),\n-        (TimedOut, \"ETIMEDOUT\"),\n-        (AlreadyExists, \"EEXIST\"),\n-        (WouldBlock, \"EWOULDBLOCK\"),\n-        (DirectoryNotEmpty, \"ENOTEMPTY\"),\n-        (FilesystemLoop, \"ELOOP\"),\n+        (\"E2BIG\", ArgumentListTooLong),\n+        (\"EADDRINUSE\", AddrInUse),\n+        (\"EADDRNOTAVAIL\", AddrNotAvailable),\n+        (\"EBUSY\", ResourceBusy),\n+        (\"ECONNABORTED\", ConnectionAborted),\n+        (\"ECONNREFUSED\", ConnectionRefused),\n+        (\"ECONNRESET\", ConnectionReset),\n+        (\"EDEADLK\", Deadlock),\n+        (\"EDQUOT\", FilesystemQuotaExceeded),\n+        (\"EEXIST\", AlreadyExists),\n+        (\"EFBIG\", FileTooLarge),\n+        (\"EHOSTUNREACH\", HostUnreachable),\n+        (\"EINTR\", Interrupted),\n+        (\"EINVAL\", InvalidInput),\n+        (\"EISDIR\", IsADirectory),\n+        (\"ELOOP\", FilesystemLoop),\n+        (\"ENOENT\", NotFound),\n+        (\"ENOMEM\", OutOfMemory),\n+        (\"ENOSPC\", StorageFull),\n+        (\"ENOSYS\", Unsupported),\n+        (\"EMLINK\", TooManyLinks),\n+        (\"ENAMETOOLONG\", InvalidFilename),\n+        (\"ENETDOWN\", NetworkDown),\n+        (\"ENETUNREACH\", NetworkUnreachable),\n+        (\"ENOTCONN\", NotConnected),\n+        (\"ENOTDIR\", NotADirectory),\n+        (\"ENOTEMPTY\", DirectoryNotEmpty),\n+        (\"EPIPE\", BrokenPipe),\n+        (\"EROFS\", ReadOnlyFilesystem),\n+        (\"ESPIPE\", NotSeekable),\n+        (\"ESTALE\", StaleNetworkFileHandle),\n+        (\"ETIMEDOUT\", TimedOut),\n+        (\"ETXTBSY\", ExecutableFileBusy),\n+        (\"EXDEV\", CrossesDevices),\n+        // The following have two valid options. We have both for the forwards mapping; only the\n+        // first one will be used for the backwards mapping.\n+        (\"EPERM\", PermissionDenied),\n+        (\"EACCES\", PermissionDenied),\n+        (\"EWOULDBLOCK\", WouldBlock),\n+        (\"EAGAIN\", WouldBlock),\n     ]\n };\n \n@@ -554,7 +579,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_ref();\n         let target = &this.tcx.sess.target;\n         if target.families.iter().any(|f| f == \"unix\") {\n-            for &(kind, name) in UNIX_IO_ERROR_TABLE {\n+            for &(name, kind) in UNIX_IO_ERROR_TABLE {\n                 if err_kind == kind {\n                     return this.eval_libc(name);\n                 }\n@@ -592,7 +617,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let target = &this.tcx.sess.target;\n         if target.families.iter().any(|f| f == \"unix\") {\n             let errnum = errnum.to_i32()?;\n-            for &(kind, name) in UNIX_IO_ERROR_TABLE {\n+            for &(name, kind) in UNIX_IO_ERROR_TABLE {\n                 if errnum == this.eval_libc_i32(name)? {\n                     return Ok(kind);\n                 }"}]}