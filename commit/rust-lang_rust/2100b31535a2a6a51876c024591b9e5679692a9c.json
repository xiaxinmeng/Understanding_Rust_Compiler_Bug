{"sha": "2100b31535a2a6a51876c024591b9e5679692a9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMDBiMzE1MzVhMmE2YTUxODc2YzAyNDU5MWI5ZTU2Nzk2OTJhOWM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-27T22:08:59Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-05T18:32:01Z"}, "message": "review comments", "tree": {"sha": "6d125442951d49778e1006192a8342d169bc8f8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d125442951d49778e1006192a8342d169bc8f8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2100b31535a2a6a51876c024591b9e5679692a9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2100b31535a2a6a51876c024591b9e5679692a9c", "html_url": "https://github.com/rust-lang/rust/commit/2100b31535a2a6a51876c024591b9e5679692a9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2100b31535a2a6a51876c024591b9e5679692a9c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa4594196d2bcc265c4cdc1382d33366b3008341", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa4594196d2bcc265c4cdc1382d33366b3008341", "html_url": "https://github.com/rust-lang/rust/commit/fa4594196d2bcc265c4cdc1382d33366b3008341"}], "stats": {"total": 120, "additions": 60, "deletions": 60}, "files": [{"sha": "0c93a192667e52ac1898ab4ad2467973a3d921f5", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=2100b31535a2a6a51876c024591b9e5679692a9c", "patch": "@@ -2263,7 +2263,7 @@ pub struct PolyTraitRef<'hir> {\n     /// The `'a` in `for<'a> Foo<&'a T>`.\n     pub bound_generic_params: &'hir [GenericParam<'hir>],\n \n-    /// The `Foo<&'a T>` in `for <'a> Foo<&'a T>`.\n+    /// The `Foo<&'a T>` in `for<'a> Foo<&'a T>`.\n     pub trait_ref: TraitRef<'hir>,\n \n     pub span: Span,"}, {"sha": "b62c9f4747c0bd332ead9fd0ee649751dd31f64d", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=2100b31535a2a6a51876c024591b9e5679692a9c", "patch": "@@ -1498,20 +1498,20 @@ crate fn add_missing_lifetime_specifiers_label(\n                         msg = \"consider introducing a named lifetime parameter\";\n                         should_break = true;\n                         match &generics.params {\n-                            [] => (generics.span, \"<'r>\".to_string()),\n-                            [param, ..] => (param.span.shrink_to_lo(), \"'r, \".to_string()),\n+                            [] => (generics.span, \"<'a>\".to_string()),\n+                            [param, ..] => (param.span.shrink_to_lo(), \"'a, \".to_string()),\n                         }\n                     }\n                     MissingLifetimeSpot::HRLT { span, span_type } => {\n-                        msg = \"consider introducing a Higher-Ranked lifetime\";\n+                        msg = \"consider introducing a higher-ranked lifetime\";\n                         should_break = false;\n                         err.note(\n-                            \"for more information on Higher-Ranked lifetimes, visit \\\n+                            \"for more information on higher-ranked lifetimes, visit \\\n                              https://doc.rust-lang.org/nomicon/hrtb.html\",\n                         );\n                         let suggestion = match span_type {\n-                            HRLTSpanType::Empty => \"for<'r> \",\n-                            HRLTSpanType::Tail => \", 'r\",\n+                            HRLTSpanType::Empty => \"for<'a> \",\n+                            HRLTSpanType::Tail => \", 'a\",\n                         };\n                         (*span, suggestion.to_string())\n                     }\n@@ -1520,7 +1520,7 @@ crate fn add_missing_lifetime_specifiers_label(\n                     if let Ok(snippet) = source_map.span_to_snippet(param.span) {\n                         if snippet.starts_with(\"&\") && !snippet.starts_with(\"&'\") {\n                             introduce_suggestion\n-                                .push((param.span, format!(\"&'r {}\", &snippet[1..])));\n+                                .push((param.span, format!(\"&'a {}\", &snippet[1..])));\n                         }\n                     }\n                 }\n@@ -1543,13 +1543,13 @@ crate fn add_missing_lifetime_specifiers_label(\n                 suggest_existing(err, format!(\"{}<{}>\", snippet, name));\n             }\n             (0, _, Some(\"&\")) => {\n-                suggest_new(err, \"&'r \");\n+                suggest_new(err, \"&'a \");\n             }\n             (0, _, Some(\"'_\")) => {\n-                suggest_new(err, \"'r\");\n+                suggest_new(err, \"'a\");\n             }\n             (0, _, Some(snippet)) if !snippet.ends_with(\">\") => {\n-                suggest_new(err, &format!(\"{}<'r>\", snippet));\n+                suggest_new(err, &format!(\"{}<'a>\", snippet));\n             }\n             _ => {\n                 err.span_label(span, \"expected lifetime parameter\");"}, {"sha": "69deffe4a4c9a6c9483b5a69e58cdb68a3ff0a33", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=2100b31535a2a6a51876c024591b9e5679692a9c", "patch": "@@ -1873,7 +1873,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         err.span_suggestion(\n                             *span,\n                             &format!(\n-                                \"consider introducing a Higher-Ranked lifetime `{}` here\",\n+                                \"consider introducing a higher-ranked lifetime `{}` here\",\n                                 lifetime_ref\n                             ),\n                             match span_type {\n@@ -1884,7 +1884,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                             Applicability::MaybeIncorrect,\n                         );\n                         err.note(\n-                            \"for more information on Higher-Ranked lifetimes, visit \\\n+                            \"for more information on higher-ranked lifetimes, visit \\\n                              https://doc.rust-lang.org/nomicon/hrtb.html\",\n                         );\n                     }"}, {"sha": "a23bcbfd71a562607a02d021c864718c357f4cca", "filename": "src/test/ui/error-codes/E0106.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr?ref=2100b31535a2a6a51876c024591b9e5679692a9c", "patch": "@@ -6,8 +6,8 @@ LL |     x: &bool,\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct Foo<'r> {\n-LL |     x: &'r bool,\n+LL | struct Foo<'a> {\n+LL |     x: &'a bool,\n    |\n \n error[E0106]: missing lifetime specifier\n@@ -18,9 +18,9 @@ LL |     B(&bool),\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | enum Bar<'r> {\n+LL | enum Bar<'a> {\n LL |     A(u8),\n-LL |     B(&'r bool),\n+LL |     B(&'a bool),\n    |\n \n error[E0106]: missing lifetime specifier\n@@ -31,7 +31,7 @@ LL | type MyStr = &str;\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | type MyStr<'r> = &'r str;\n+LL | type MyStr<'a> = &'a str;\n    |           ^^^^   ^^^\n \n error[E0106]: missing lifetime specifier\n@@ -42,8 +42,8 @@ LL |     baz: Baz,\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct Quux<'r> {\n-LL |     baz: Baz<'r>,\n+LL | struct Quux<'a> {\n+LL |     baz: Baz<'a>,\n    |\n \n error[E0106]: missing lifetime specifiers"}, {"sha": "211a3286cc355324441446a3179542f32f6f17fd", "filename": "src/test/ui/impl-header-lifetime-elision/assoc-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr?ref=2100b31535a2a6a51876c024591b9e5679692a9c", "patch": "@@ -6,7 +6,7 @@ LL |     type Output = &i32;\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL |     type Output<'r> = &'r i32;\n+LL |     type Output<'a> = &'a i32;\n    |                ^^^^   ^^^\n \n error[E0106]: missing lifetime specifier\n@@ -17,7 +17,7 @@ LL |     type Output = &'_ i32;\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL |     type Output<'r> = &'r i32;\n+LL |     type Output<'a> = &'a i32;\n    |                ^^^^    ^^\n \n error: aborting due to 2 previous errors"}, {"sha": "f2a4150632d2f8ad477e3501c940bd17fda67ce8", "filename": "src/test/ui/in-band-lifetimes/issue-61124-anon-lifetime-in-struct-declaration.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr?ref=2100b31535a2a6a51876c024591b9e5679692a9c", "patch": "@@ -6,7 +6,7 @@ LL | struct Heartbreak(Betrayal);\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct Heartbreak<'r>(Betrayal<'r>);\n+LL | struct Heartbreak<'a>(Betrayal<'a>);\n    |                  ^^^^ ^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "e84bfb969d4f9bca7bf7e559ef4638535f26e755", "filename": "src/test/ui/issues/issue-19707.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr?ref=2100b31535a2a6a51876c024591b9e5679692a9c", "patch": "@@ -11,7 +11,7 @@ LL | type Foo = fn(&u8, &u8) -> &u8;\n    |               ^^^  ^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | type Foo<'r> = fn(&'r u8, &'r u8) -> &'r u8;\n+LL | type Foo<'a> = fn(&'a u8, &'a u8) -> &'a u8;\n    |         ^^^^      ^^^^^^  ^^^^^^     ^^^\n \n error[E0106]: missing lifetime specifier\n@@ -25,14 +25,14 @@ help: this function's return type contains a borrowed value, but the signature d\n    |\n LL | fn bar<F: Fn(&u8, &u8) -> &u8>(f: &F) {}\n    |              ^^^  ^^^\n-   = note: for more information on Higher-Ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n-help: consider introducing a Higher-Ranked lifetime\n+   = note: for more information on higher-ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider introducing a higher-ranked lifetime\n    |\n-LL | fn bar<F: for<'r> Fn(&'r u8, &'r u8) -> &'r u8>(f: &F) {}\n+LL | fn bar<F: for<'a> Fn(&'a u8, &'a u8) -> &'a u8>(f: &F) {}\n    |           ^^^^^^^    ^^^^^^  ^^^^^^     ^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn bar<'r, F: Fn(&'r u8, &'r u8) -> &'r u8>(f: &F) {}\n+LL | fn bar<'a, F: Fn(&'a u8, &'a u8) -> &'a u8>(f: &F) {}\n    |        ^^^       ^^^^^^  ^^^^^^     ^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "75cd5332fd9a4171f1e7a8f6a179342b47872638", "filename": "src/test/ui/issues/issue-26638.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr?ref=2100b31535a2a6a51876c024591b9e5679692a9c", "patch": "@@ -11,7 +11,7 @@ LL | fn parse_type(iter: Box<dyn Iterator<Item=&str>+'static>) -> &str { iter.ne\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn parse_type<'r>(iter: Box<dyn Iterator<Item=&str>+'static>) -> &'r str { iter.next() }\n+LL | fn parse_type<'a>(iter: Box<dyn Iterator<Item=&str>+'static>) -> &'a str { iter.next() }\n    |              ^^^^                                                ^^^\n \n error[E0106]: missing lifetime specifier"}, {"sha": "3c26365d5d1687462d10543e17b5dc9c43628dbd", "filename": "src/test/ui/issues/issue-30255.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr?ref=2100b31535a2a6a51876c024591b9e5679692a9c", "patch": "@@ -11,7 +11,7 @@ LL | fn f(a: &S, b: i32) -> &i32 {\n    |         ^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn f<'r>(a: &'r S, b: i32) -> &'r i32 {\n+LL | fn f<'a>(a: &'a S, b: i32) -> &'a i32 {\n    |     ^^^^    ^^^^^             ^^^\n \n error[E0106]: missing lifetime specifier\n@@ -27,7 +27,7 @@ LL | fn g(a: &S, b: bool, c: &i32) -> &i32 {\n    |         ^^              ^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn g<'r>(a: &'r S, b: bool, c: &'r i32) -> &'r i32 {\n+LL | fn g<'a>(a: &'a S, b: bool, c: &'a i32) -> &'a i32 {\n    |     ^^^^    ^^^^^              ^^^^^^^     ^^^\n \n error[E0106]: missing lifetime specifier\n@@ -43,7 +43,7 @@ LL | fn h(a: &bool, b: bool, c: &S, d: &i32) -> &i32 {\n    |         ^^^^^              ^^     ^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn h<'r>(a: &'r bool, b: bool, c: &'r S, d: &'r i32) -> &'r i32 {\n+LL | fn h<'a>(a: &'a bool, b: bool, c: &'a S, d: &'a i32) -> &'a i32 {\n    |     ^^^^    ^^^^^^^^              ^^^^^     ^^^^^^^     ^^^\n \n error: aborting due to 3 previous errors"}, {"sha": "b81ce552b39089f806fd1cd40baa7c906e5d1ad7", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-requires-explicit-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr?ref=2100b31535a2a6a51876c024591b9e5679692a9c", "patch": "@@ -19,7 +19,7 @@ LL | fn g(_x: &isize, _y: &isize) -> &isize {\n    |          ^^^^^^      ^^^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn g<'r>(_x: &'r isize, _y: &'r isize) -> &'r isize {\n+LL | fn g<'a>(_x: &'a isize, _y: &'a isize) -> &'a isize {\n    |     ^^^^     ^^^^^^^^^      ^^^^^^^^^     ^^^\n \n error[E0106]: missing lifetime specifier\n@@ -35,7 +35,7 @@ LL | fn h(_x: &Foo) -> &isize {\n    |          ^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn h<'r>(_x: &'r Foo) -> &'r isize {\n+LL | fn h<'a>(_x: &'a Foo) -> &'a isize {\n    |     ^^^^     ^^^^^^^     ^^^\n \n error[E0106]: missing lifetime specifier"}, {"sha": "47b048a7a97793395ee82ed0793d3661f8d1ae89", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1b-return-no-names-if-else.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr?ref=2100b31535a2a6a51876c024591b9e5679692a9c", "patch": "@@ -11,7 +11,7 @@ LL | fn foo(x: &i32, y: &i32) -> &i32 {\n    |           ^^^^     ^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn foo<'r>(x: &'r i32, y: &'r i32) -> &'r i32 {\n+LL | fn foo<'a>(x: &'a i32, y: &'a i32) -> &'a i32 {\n    |       ^^^^    ^^^^^^^     ^^^^^^^     ^^^\n \n error: aborting due to previous error"}, {"sha": "27f7639d213d24b0138d4790e47bec962aea71e0", "filename": "src/test/ui/proc-macro/item-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Fproc-macro%2Fitem-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Fproc-macro%2Fitem-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fitem-error.stderr?ref=2100b31535a2a6a51876c024591b9e5679692a9c", "patch": "@@ -6,8 +6,8 @@ LL |     a: &u64\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct A<'r> {\n-LL |     a: &'r u64\n+LL | struct A<'a> {\n+LL |     a: &'a u64\n    |\n \n error: aborting due to previous error"}, {"sha": "b3649c5b48530dc486be9e658169a93c5b2315c6", "filename": "src/test/ui/regions/regions-in-enums-anon.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums-anon.stderr?ref=2100b31535a2a6a51876c024591b9e5679692a9c", "patch": "@@ -6,8 +6,8 @@ LL |     Bar(&isize)\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | enum Foo<'r> {\n-LL |     Bar(&'r isize)\n+LL | enum Foo<'a> {\n+LL |     Bar(&'a isize)\n    |\n \n error: aborting due to previous error"}, {"sha": "60a6fb9a0fad9aa79cc9edaafd871413205c6c9c", "filename": "src/test/ui/regions/regions-in-structs-anon.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs-anon.stderr?ref=2100b31535a2a6a51876c024591b9e5679692a9c", "patch": "@@ -6,8 +6,8 @@ LL |     x: &isize\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct Foo<'r> {\n-LL |     x: &'r isize\n+LL | struct Foo<'a> {\n+LL |     x: &'a isize\n    |\n \n error: aborting due to previous error"}, {"sha": "498667abe36d95c7ddd785ce0f5c0979c6d294d1", "filename": "src/test/ui/regions/regions-name-undeclared.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr?ref=2100b31535a2a6a51876c024591b9e5679692a9c", "patch": "@@ -89,12 +89,12 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL | ...                   &'b isize,\n    |                        ^^ undeclared lifetime\n    |\n-   = note: for more information on Higher-Ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+   = note: for more information on higher-ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n help: consider introducing lifetime `'b` here\n    |\n LL | fn fn_types<'b>(a: &'a isize,\n    |            ^^^^\n-help: consider introducing a Higher-Ranked lifetime `'b` here\n+help: consider introducing a higher-ranked lifetime `'b` here\n    |\n LL |             b: Box<dyn for<'a, 'b> FnOnce(&'a isize,\n    |                              ^^^^\n@@ -105,12 +105,12 @@ error[E0261]: use of undeclared lifetime name `'b`\n LL | ...                   &'b isize)>,\n    |                        ^^ undeclared lifetime\n    |\n-   = note: for more information on Higher-Ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+   = note: for more information on higher-ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n help: consider introducing lifetime `'b` here\n    |\n LL | fn fn_types<'b>(a: &'a isize,\n    |            ^^^^\n-help: consider introducing a Higher-Ranked lifetime `'b` here\n+help: consider introducing a higher-ranked lifetime `'b` here\n    |\n LL |             b: Box<dyn for<'a, 'b> FnOnce(&'a isize,\n    |                              ^^^^"}, {"sha": "858f23f1362ccabf70c302ad8f4039e8bd72b149", "filename": "src/test/ui/suggestions/fn-missing-lifetime-in-item.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.stderr?ref=2100b31535a2a6a51876c024591b9e5679692a9c", "patch": "@@ -4,12 +4,12 @@ error[E0261]: use of undeclared lifetime name `'a`\n LL | struct S1<F: Fn(&i32, &i32) -> &'a i32>(F);\n    |                                 ^^ undeclared lifetime\n    |\n-   = note: for more information on Higher-Ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+   = note: for more information on higher-ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n help: consider introducing lifetime `'a` here\n    |\n LL | struct S1<'a, F: Fn(&i32, &i32) -> &'a i32>(F);\n    |           ^^^\n-help: consider introducing a Higher-Ranked lifetime `'a` here\n+help: consider introducing a higher-ranked lifetime `'a` here\n    |\n LL | struct S1<F: for<'a> Fn(&i32, &i32) -> &'a i32>(F);\n    |              ^^^^^^^\n@@ -25,14 +25,14 @@ help: this function's return type contains a borrowed value, but the signature d\n    |\n LL | struct S2<F: Fn(&i32, &i32) -> &i32>(F);\n    |                 ^^^^  ^^^^\n-   = note: for more information on Higher-Ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n-help: consider introducing a Higher-Ranked lifetime\n+   = note: for more information on higher-ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider introducing a higher-ranked lifetime\n    |\n-LL | struct S2<F: for<'r> Fn(&'r i32, &'r i32) -> &'r i32>(F);\n+LL | struct S2<F: for<'a> Fn(&'a i32, &'a i32) -> &'a i32>(F);\n    |              ^^^^^^^    ^^^^^^^  ^^^^^^^     ^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct S2<'r, F: Fn(&'r i32, &'r i32) -> &'r i32>(F);\n+LL | struct S2<'a, F: Fn(&'a i32, &'a i32) -> &'a i32>(F);\n    |           ^^^       ^^^^^^^  ^^^^^^^     ^^^\n \n error[E0582]: binding for associated type `Output` references lifetime `'a`, which does not appear in the trait input types"}, {"sha": "2431e8ece3807471a199f4f61b51d86cf40ad2bc", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-lifetime-elision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr?ref=2100b31535a2a6a51876c024591b9e5679692a9c", "patch": "@@ -11,7 +11,7 @@ LL |     let _: dyn Foo(&isize, &usize) -> &usize;\n    |                    ^^^^^^  ^^^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn main<'r>() {\n+LL | fn main<'a>() {\n LL |     eq::< dyn for<'a> Foo<(&'a isize,), Output=&'a isize>,\n LL |           dyn Foo(&isize) -> &isize                                   >();\n LL |     eq::< dyn for<'a> Foo<(&'a isize,), Output=(&'a isize, &'a isize)>,"}, {"sha": "fe242e6a909e376c77f3fb3f99b922a60da90d95", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore-in-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr?ref=2100b31535a2a6a51876c024591b9e5679692a9c", "patch": "@@ -6,8 +6,8 @@ LL |     x: Box<dyn Debug + '_>,\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct Foo<'r> {\n-LL |     x: Box<dyn Debug + 'r>,\n+LL | struct Foo<'a> {\n+LL |     x: Box<dyn Debug + 'a>,\n    |\n \n error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound"}, {"sha": "0e410e25ecf2538499e44ea8c14874d1d5a46ae6", "filename": "src/test/ui/underscore-lifetime/in-fn-return-illegal.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr?ref=2100b31535a2a6a51876c024591b9e5679692a9c", "patch": "@@ -11,7 +11,7 @@ LL | fn foo(x: &u32, y: &u32) -> &'_ u32 { loop { } }\n    |           ^^^^     ^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn foo<'r>(x: &'r u32, y: &'r u32) -> &'r u32 { loop { } }\n+LL | fn foo<'a>(x: &'a u32, y: &'a u32) -> &'a u32 { loop { } }\n    |       ^^^^    ^^^^^^^     ^^^^^^^      ^^\n \n error: aborting due to previous error"}, {"sha": "4275cc26f735fb526946eaa8514b1166cc055763", "filename": "src/test/ui/underscore-lifetime/in-struct.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-struct.stderr?ref=2100b31535a2a6a51876c024591b9e5679692a9c", "patch": "@@ -6,8 +6,8 @@ LL |     x: &'_ u32,\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct Foo<'r> {\n-LL |     x: &'r u32,\n+LL | struct Foo<'a> {\n+LL |     x: &'a u32,\n    |\n \n error[E0106]: missing lifetime specifier\n@@ -18,8 +18,8 @@ LL |     Variant(&'_ u32),\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | enum Bar<'r> {\n-LL |     Variant(&'r u32),\n+LL | enum Bar<'a> {\n+LL |     Variant(&'a u32),\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "f2eab86ae57ad88ebb38852dfafd43d4f7395ec1", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-binders.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2100b31535a2a6a51876c024591b9e5679692a9c/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr?ref=2100b31535a2a6a51876c024591b9e5679692a9c", "patch": "@@ -37,7 +37,7 @@ LL | fn foo2(_: &'_ u8, y: &'_ u8) -> &'_ u8 { y }\n    |            ^^^^^^     ^^^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn foo2<'r>(_: &'_ u8, y: &'_ u8) -> &'r u8 { y }\n+LL | fn foo2<'a>(_: &'_ u8, y: &'_ u8) -> &'a u8 { y }\n    |        ^^^^                           ^^\n \n error: aborting due to 5 previous errors"}]}