{"sha": "61c5a6d644e9e5c1995c33a2b07ab251702848ac", "node_id": "C_kwDOAAsO6NoAKDYxYzVhNmQ2NDRlOWU1YzE5OTVjMzNhMmIwN2FiMjUxNzAyODQ4YWM", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2021-10-06T12:26:50Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2021-10-08T08:33:47Z"}, "message": "Create more accurate debuginfo for vtables.\n\nBefore this commit all vtables would have the same name \"vtable\" in\ndebuginfo. Now they get a name that identifies the implementing type\nand the trait that is being implemented.", "tree": {"sha": "93c2b39cbee9f402ed601add17bd61b4e3c82e2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93c2b39cbee9f402ed601add17bd61b4e3c82e2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61c5a6d644e9e5c1995c33a2b07ab251702848ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61c5a6d644e9e5c1995c33a2b07ab251702848ac", "html_url": "https://github.com/rust-lang/rust/commit/61c5a6d644e9e5c1995c33a2b07ab251702848ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61c5a6d644e9e5c1995c33a2b07ab251702848ac/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4797664ba9c7d71e586122853858eeb6c153bb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4797664ba9c7d71e586122853858eeb6c153bb9", "html_url": "https://github.com/rust-lang/rust/commit/a4797664ba9c7d71e586122853858eeb6c153bb9"}], "stats": {"total": 225, "additions": 163, "deletions": 62}, "files": [{"sha": "31959fa19c588b9265143b9e73b3a168fae07ad4", "filename": "compiler/rustc_codegen_gcc/src/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61c5a6d644e9e5c1995c33a2b07ab251702848ac/compiler%2Frustc_codegen_gcc%2Fsrc%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c5a6d644e9e5c1995c33a2b07ab251702848ac/compiler%2Frustc_codegen_gcc%2Fsrc%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fdebuginfo.rs?ref=61c5a6d644e9e5c1995c33a2b07ab251702848ac", "patch": "@@ -2,7 +2,7 @@ use gccjit::RValue;\n use rustc_codegen_ssa::mir::debuginfo::{FunctionDebugContext, VariableKind};\n use rustc_codegen_ssa::traits::{DebugInfoBuilderMethods, DebugInfoMethods};\n use rustc_middle::mir;\n-use rustc_middle::ty::{Instance, Ty};\n+use rustc_middle::ty::{Instance, PolyExistentialTraitRef, Ty};\n use rustc_span::{SourceFile, Span, Symbol};\n use rustc_target::abi::Size;\n use rustc_target::abi::call::FnAbi;\n@@ -31,7 +31,7 @@ impl<'a, 'gcc, 'tcx> DebugInfoBuilderMethods for Builder<'a, 'gcc, 'tcx> {\n }\n \n impl<'gcc, 'tcx> DebugInfoMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n-    fn create_vtable_metadata(&self, _ty: Ty<'tcx>, _vtable: Self::Value) {\n+    fn create_vtable_metadata(&self, _ty: Ty<'tcx>, _trait_ref: Option<PolyExistentialTraitRef<'tcx>>, _vtable: Self::Value) {\n         // TODO(antoyo)\n     }\n "}, {"sha": "51c2a926a9cf0f28060356cf6d47913d164f8fe8", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 43, "deletions": 34, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/61c5a6d644e9e5c1995c33a2b07ab251702848ac/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c5a6d644e9e5c1995c33a2b07ab251702848ac/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=61c5a6d644e9e5c1995c33a2b07ab251702848ac", "patch": "@@ -2,7 +2,7 @@ use self::MemberDescriptionFactory::*;\n use self::RecursiveTypeDescription::*;\n \n use super::namespace::mangled_name_of_instance;\n-use super::type_names::compute_debuginfo_type_name;\n+use super::type_names::{compute_debuginfo_type_name, compute_debuginfo_vtable_name};\n use super::utils::{\n     create_DIArray, debug_context, get_namespace_for_item, is_node_local_to_unit, DIB,\n };\n@@ -30,8 +30,9 @@ use rustc_middle::ich::NodeIdHashingMode;\n use rustc_middle::mir::{self, GeneratorLayout};\n use rustc_middle::ty::layout::{self, IntegerExt, LayoutOf, PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::subst::GenericArgKind;\n-use rustc_middle::ty::Instance;\n-use rustc_middle::ty::{self, AdtKind, GeneratorSubsts, ParamEnv, Ty, TyCtxt};\n+use rustc_middle::ty::{\n+    self, AdtKind, GeneratorSubsts, Instance, ParamEnv, Ty, TyCtxt, COMMON_VTABLE_ENTRIES,\n+};\n use rustc_middle::{bug, span_bug};\n use rustc_session::config::{self, DebugInfo};\n use rustc_span::symbol::Symbol;\n@@ -2591,11 +2592,45 @@ pub fn create_global_var_metadata(cx: &CodegenCx<'ll, '_>, def_id: DefId, global\n     }\n }\n \n+/// Generates LLVM debuginfo for a vtable.\n+fn vtable_type_metadata(\n+    cx: &CodegenCx<'ll, 'tcx>,\n+    ty: Ty<'tcx>,\n+    poly_trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n+) -> &'ll DIType {\n+    let tcx = cx.tcx;\n+\n+    let vtable_entries = if let Some(poly_trait_ref) = poly_trait_ref {\n+        let trait_ref = poly_trait_ref.with_self_ty(tcx, ty);\n+        let trait_ref = tcx.erase_regions(trait_ref);\n+\n+        tcx.vtable_entries(trait_ref)\n+    } else {\n+        COMMON_VTABLE_ENTRIES\n+    };\n+\n+    // FIXME: We describe the vtable as an array of *const () pointers. The length of the array is\n+    //        correct - but we could create a more accurate description, e.g. by describing it\n+    //        as a struct where each field has a name that corresponds to the name of the method\n+    //        it points to.\n+    //        However, this is not entirely straightforward because there might be multiple\n+    //        methods with the same name if the vtable is for multiple traits. So for now we keep\n+    //        things simple instead of adding some ad-hoc disambiguation scheme.\n+    let vtable_type = tcx.mk_array(tcx.mk_imm_ptr(tcx.types.unit), vtable_entries.len() as u64);\n+\n+    type_metadata(cx, vtable_type, rustc_span::DUMMY_SP)\n+}\n+\n /// Creates debug information for the given vtable, which is for the\n /// given type.\n ///\n /// Adds the created metadata nodes directly to the crate's IR.\n-pub fn create_vtable_metadata(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>, vtable: &'ll Value) {\n+pub fn create_vtable_metadata(\n+    cx: &CodegenCx<'ll, 'tcx>,\n+    ty: Ty<'tcx>,\n+    poly_trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n+    vtable: &'ll Value,\n+) {\n     if cx.dbg_cx.is_none() {\n         return;\n     }\n@@ -2605,42 +2640,16 @@ pub fn create_vtable_metadata(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>, vtable: &\n         return;\n     }\n \n-    let type_metadata = type_metadata(cx, ty, rustc_span::DUMMY_SP);\n+    let vtable_name = compute_debuginfo_vtable_name(cx.tcx, ty, poly_trait_ref);\n+    let vtable_type = vtable_type_metadata(cx, ty, poly_trait_ref);\n \n     unsafe {\n-        // `LLVMRustDIBuilderCreateStructType()` wants an empty array. A null\n-        // pointer will lead to hard to trace and debug LLVM assertions\n-        // later on in `llvm/lib/IR/Value.cpp`.\n-        let empty_array = create_DIArray(DIB(cx), &[]);\n-        let name = \"vtable\";\n-\n-        // Create a new one each time. We don't want metadata caching\n-        // here, because each vtable will refer to a unique containing\n-        // type.\n-        let vtable_type = llvm::LLVMRustDIBuilderCreateStructType(\n-            DIB(cx),\n-            NO_SCOPE_METADATA,\n-            name.as_ptr().cast(),\n-            name.len(),\n-            unknown_file_metadata(cx),\n-            UNKNOWN_LINE_NUMBER,\n-            Size::ZERO.bits(),\n-            cx.tcx.data_layout.pointer_align.abi.bits() as u32,\n-            DIFlags::FlagArtificial,\n-            None,\n-            empty_array,\n-            0,\n-            Some(type_metadata),\n-            name.as_ptr().cast(),\n-            name.len(),\n-        );\n-\n         let linkage_name = \"\";\n         llvm::LLVMRustDIBuilderCreateStaticVariable(\n             DIB(cx),\n             NO_SCOPE_METADATA,\n-            name.as_ptr().cast(),\n-            name.len(),\n+            vtable_name.as_ptr().cast(),\n+            vtable_name.len(),\n             linkage_name.as_ptr().cast(),\n             linkage_name.len(),\n             unknown_file_metadata(cx),"}, {"sha": "1f1bd73c7d035d51ae736dae5bfde264980b1d0a", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/61c5a6d644e9e5c1995c33a2b07ab251702848ac/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c5a6d644e9e5c1995c33a2b07ab251702848ac/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=61c5a6d644e9e5c1995c33a2b07ab251702848ac", "patch": "@@ -550,8 +550,13 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         unsafe { llvm::LLVMRustDIBuilderCreateDebugLocation(line, col, scope, inlined_at) }\n     }\n \n-    fn create_vtable_metadata(&self, ty: Ty<'tcx>, vtable: Self::Value) {\n-        metadata::create_vtable_metadata(self, ty, vtable)\n+    fn create_vtable_metadata(\n+        &self,\n+        ty: Ty<'tcx>,\n+        trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n+        vtable: Self::Value,\n+    ) {\n+        metadata::create_vtable_metadata(self, ty, trait_ref, vtable)\n     }\n \n     fn extend_scope_to_file("}, {"sha": "6fe346064fc4e08fe1c4ea69513bee265bc05163", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/61c5a6d644e9e5c1995c33a2b07ab251702848ac/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c5a6d644e9e5c1995c33a2b07ab251702848ac/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=61c5a6d644e9e5c1995c33a2b07ab251702848ac", "patch": "@@ -446,6 +446,62 @@ fn push_debuginfo_type_name<'tcx>(\n     }\n }\n \n+/// Computes a name for the global variable storing a vtable.\n+///\n+/// The name is of the form:\n+///\n+/// `<path::to::SomeType as path::to::SomeTrait>::{vtable}`\n+///\n+/// or, when generating C++-like names:\n+///\n+/// `impl$<path::to::SomeType, path::to::SomeTrait>::vtable$`\n+pub fn compute_debuginfo_vtable_name<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    t: Ty<'tcx>,\n+    trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n+) -> String {\n+    let cpp_like_names = cpp_like_names(tcx);\n+\n+    let mut vtable_name = String::with_capacity(64);\n+\n+    if cpp_like_names {\n+        vtable_name.push_str(\"impl$<\");\n+    } else {\n+        vtable_name.push('<');\n+    }\n+\n+    let mut visited = FxHashSet::default();\n+    push_debuginfo_type_name(tcx, t, true, &mut vtable_name, &mut visited);\n+\n+    if cpp_like_names {\n+        vtable_name.push_str(\", \");\n+    } else {\n+        vtable_name.push_str(\" as \");\n+    }\n+\n+    if let Some(trait_ref) = trait_ref {\n+        push_item_name(tcx, trait_ref.skip_binder().def_id, true, &mut vtable_name);\n+        visited.clear();\n+        push_generic_params_internal(\n+            tcx,\n+            trait_ref.skip_binder().substs,\n+            &mut vtable_name,\n+            &mut visited,\n+        );\n+    } else {\n+        vtable_name.push_str(\"_\");\n+    }\n+\n+    push_close_angle_bracket(cpp_like_names, &mut vtable_name);\n+\n+    let suffix = if cpp_like_names { \"::vtable$\" } else { \"::{vtable}\" };\n+\n+    vtable_name.reserve_exact(suffix.len());\n+    vtable_name.push_str(suffix);\n+\n+    vtable_name\n+}\n+\n pub fn push_item_name(tcx: TyCtxt<'tcx>, def_id: DefId, qualified: bool, output: &mut String) {\n     let def_key = tcx.def_key(def_id);\n     if qualified {"}, {"sha": "2b3c1af445acef551534309a0539c5474e401e32", "filename": "compiler/rustc_codegen_ssa/src/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61c5a6d644e9e5c1995c33a2b07ab251702848ac/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c5a6d644e9e5c1995c33a2b07ab251702848ac/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs?ref=61c5a6d644e9e5c1995c33a2b07ab251702848ac", "patch": "@@ -78,7 +78,7 @@ pub fn get_vtable<'tcx, Cx: CodegenMethods<'tcx>>(\n     let align = cx.data_layout().pointer_align.abi;\n     let vtable = cx.static_addr_of(vtable_const, align, Some(\"vtable\"));\n \n-    cx.create_vtable_metadata(ty, vtable);\n+    cx.create_vtable_metadata(ty, trait_ref, vtable);\n     cx.vtables().borrow_mut().insert((ty, trait_ref), vtable);\n     vtable\n }"}, {"sha": "e700afc448f28633716b42c3891906afe61a6898", "filename": "compiler/rustc_codegen_ssa/src/traits/debuginfo.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/61c5a6d644e9e5c1995c33a2b07ab251702848ac/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c5a6d644e9e5c1995c33a2b07ab251702848ac/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fdebuginfo.rs?ref=61c5a6d644e9e5c1995c33a2b07ab251702848ac", "patch": "@@ -1,13 +1,18 @@\n use super::BackendTypes;\n use crate::mir::debuginfo::{FunctionDebugContext, VariableKind};\n use rustc_middle::mir;\n-use rustc_middle::ty::{Instance, Ty};\n+use rustc_middle::ty::{Instance, PolyExistentialTraitRef, Ty};\n use rustc_span::{SourceFile, Span, Symbol};\n use rustc_target::abi::call::FnAbi;\n use rustc_target::abi::Size;\n \n pub trait DebugInfoMethods<'tcx>: BackendTypes {\n-    fn create_vtable_metadata(&self, ty: Ty<'tcx>, vtable: Self::Value);\n+    fn create_vtable_metadata(\n+        &self,\n+        ty: Ty<'tcx>,\n+        trait_ref: Option<PolyExistentialTraitRef<'tcx>>,\n+        vtable: Self::Value,\n+    );\n \n     /// Creates the function-specific debug context.\n     ///"}, {"sha": "851d68da5ee62b1575823c0e3e7d9637f0fbffaf", "filename": "src/test/codegen/debug-vtable.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/61c5a6d644e9e5c1995c33a2b07ab251702848ac/src%2Ftest%2Fcodegen%2Fdebug-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c5a6d644e9e5c1995c33a2b07ab251702848ac/src%2Ftest%2Fcodegen%2Fdebug-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdebug-vtable.rs?ref=61c5a6d644e9e5c1995c33a2b07ab251702848ac", "patch": "@@ -0,0 +1,47 @@\n+// compile-flags: -Cdebuginfo=2 -Copt-level=0 -Ccodegen-units=1\n+// ignore-tidy-linelength\n+\n+// This test checks the debuginfo for the expected 3 vtables is generated for correct names and number\n+// of entries.\n+\n+// NONMSVC-LABEL: !DIGlobalVariable(name: \"<debug_vtable::Foo as debug_vtable::SomeTrait>::{vtable}\"\n+// MSVC-LABEL: !DIGlobalVariable(name: \"impl$<debug_vtable::Foo, debug_vtable::SomeTrait>::vtable$\"\n+// NONMSVC: !DIDerivedType(tag: DW_TAG_pointer_type, name: \"*const ()\",\n+// MSVC: !DIDerivedType(tag: DW_TAG_pointer_type, name: \"ptr_const$<tuple$<> >\",\n+// CHECK: !DISubrange(count: 5\n+\n+// NONMSVC-LABEL: !DIGlobalVariable(name: \"<debug_vtable::Foo as debug_vtable::SomeTraitWithGenerics<u64, i8>>::{vtable}\"\n+// MSVC-LABEL: !DIGlobalVariable(name: \"impl$<debug_vtable::Foo, debug_vtable::SomeTraitWithGenerics<u64,i8> >::vtable$\"\n+// CHECK: !DISubrange(count: 4\n+\n+// NONMSVC-LABEL: !DIGlobalVariable(name: \"<debug_vtable::Foo as _>::{vtable}\"\n+// MSVC-LABEL: !DIGlobalVariable(name: \"impl$<debug_vtable::Foo, _>::vtable$\"\n+// CHECK: !DISubrange(count: 3\n+\n+#![crate_type = \"lib\"]\n+\n+pub struct Foo;\n+\n+pub trait SomeTrait {\n+    fn method1(&self) -> u32;\n+    fn method2(&self) -> u32;\n+}\n+\n+impl SomeTrait for Foo {\n+    fn method1(&self) -> u32 { 1 }\n+    fn method2(&self) -> u32 { 2 }\n+}\n+\n+pub trait SomeTraitWithGenerics<T, U> {\n+    fn method1(&self) -> (T, U);\n+}\n+\n+impl SomeTraitWithGenerics<u64, i8> for Foo {\n+    fn method1(&self) -> (u64, i8) { (1, 2) }\n+}\n+\n+pub fn foo(x: &Foo) -> (u32, (u64, i8), &dyn Send) {\n+    let y: &dyn SomeTrait = x;\n+    let z: &dyn SomeTraitWithGenerics<u64, i8> = x;\n+    (y.method1(), z.method1(), x as &dyn Send)\n+}"}, {"sha": "82d65b101b06d38732220dfaa4c6ecd500a9ac06", "filename": "src/test/codegen/vtabletype.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a4797664ba9c7d71e586122853858eeb6c153bb9/src%2Ftest%2Fcodegen%2Fvtabletype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4797664ba9c7d71e586122853858eeb6c153bb9/src%2Ftest%2Fcodegen%2Fvtabletype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvtabletype.rs?ref=a4797664ba9c7d71e586122853858eeb6c153bb9", "patch": "@@ -1,21 +0,0 @@\n-// This test depends on a patch that was committed to upstream LLVM\n-// after 5.0, then backported to the Rust LLVM fork.\n-\n-// ignore-windows\n-// ignore-macos\n-\n-// compile-flags: -g -C no-prepopulate-passes\n-\n-// CHECK-LABEL: @main\n-// CHECK: {{.*}}DICompositeType{{.*}}name: \"vtable\",{{.*}}vtableHolder:{{.*}}\n-\n-pub trait T {\n-}\n-\n-impl T for f64 {\n-}\n-\n-pub fn main() {\n-    let d = 23.0f64;\n-    let td = &d as &T;\n-}"}]}