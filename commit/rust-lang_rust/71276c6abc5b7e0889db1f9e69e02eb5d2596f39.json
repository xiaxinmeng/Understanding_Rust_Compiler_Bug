{"sha": "71276c6abc5b7e0889db1f9e69e02eb5d2596f39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMjc2YzZhYmM1YjdlMDg4OWRiMWY5ZTY5ZTAyZWI1ZDI1OTZmMzk=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-07-18T18:34:08Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-07-27T17:51:21Z"}, "message": "Add the -Zcrate-attr=foo nightly rustc flag to inject crate attributes", "tree": {"sha": "190d317f72be167b50eae66cc4563f50695a1628", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/190d317f72be167b50eae66cc4563f50695a1628"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71276c6abc5b7e0889db1f9e69e02eb5d2596f39", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCAAGBQJbW1uaAAoJEOjBBC3RYkUZwGQH/2qRuJ13OCj4jLZIoRbmcyG1\nISSOAC2JlEG9oCu4rU18bBwNpg+VTEFwhELkZdjKgZ8RzkL5DO/TJwS0ajDVhl1v\nkS4zG0AoD6vqLiW+/3ULJu/KIceyJBDzWYUC7X4UPqa/9w/AxQzPhpvuIMTM5IzB\nrQLrIkUixQIOay7toZJPKXlDIFRaq5jjGuW8JpzrdU5VEIRTG5RHgEBI/ZqhZeSj\nhubasSJEvSFRC19clRVUN/6Qkfpuw2bvumVXQUHuSlRjRUeMi143c175S90TYqcr\nc1dCmmKVZweO0I8VBdRihc9YPnYlpNZO4jpruBTNbDn+T9CpFm4NTPRwqYDnPlo=\n=H/VS\n-----END PGP SIGNATURE-----", "payload": "tree 190d317f72be167b50eae66cc4563f50695a1628\nparent b18b9edf006c10f4e08794d31425001401e27a09\nauthor Pietro Albini <pietro@pietroalbini.org> 1531938848 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1532713881 +0200\n\nAdd the -Zcrate-attr=foo nightly rustc flag to inject crate attributes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71276c6abc5b7e0889db1f9e69e02eb5d2596f39", "html_url": "https://github.com/rust-lang/rust/commit/71276c6abc5b7e0889db1f9e69e02eb5d2596f39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71276c6abc5b7e0889db1f9e69e02eb5d2596f39/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b18b9edf006c10f4e08794d31425001401e27a09", "url": "https://api.github.com/repos/rust-lang/rust/commits/b18b9edf006c10f4e08794d31425001401e27a09", "html_url": "https://github.com/rust-lang/rust/commit/b18b9edf006c10f4e08794d31425001401e27a09"}], "stats": {"total": 69, "additions": 66, "deletions": 3}, "files": [{"sha": "c106966fb70be0041ef576f32d1ff6d220d39a11", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71276c6abc5b7e0889db1f9e69e02eb5d2596f39/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71276c6abc5b7e0889db1f9e69e02eb5d2596f39/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=71276c6abc5b7e0889db1f9e69e02eb5d2596f39", "patch": "@@ -423,6 +423,7 @@ impl_stable_hash_for!(enum ::syntax_pos::FileName {\n     Anon,\n     MacroExpansion,\n     ProcMacroSourceCode,\n+    CliCrateAttr,\n     CfgSpec,\n     Custom(s)\n });"}, {"sha": "6ba2a1bac1157341c236db307120ad6e6202e294", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71276c6abc5b7e0889db1f9e69e02eb5d2596f39/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71276c6abc5b7e0889db1f9e69e02eb5d2596f39/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=71276c6abc5b7e0889db1f9e69e02eb5d2596f39", "patch": "@@ -1369,6 +1369,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"don't run LLVM in parallel (while keeping codegen-units and ThinLTO)\"),\n     no_leak_check: bool = (false, parse_bool, [UNTRACKED],\n         \"disables the 'leak check' for subtyping; unsound, but useful for tests\"),\n+    crate_attr: Vec<String> = (Vec::new(), parse_string_push, [TRACKED],\n+        \"inject the given attribute in the crate\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "b04cffe8da5010b61d92b7fe065bec9fa35b1846", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71276c6abc5b7e0889db1f9e69e02eb5d2596f39/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71276c6abc5b7e0889db1f9e69e02eb5d2596f39/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=71276c6abc5b7e0889db1f9e69e02eb5d2596f39", "patch": "@@ -798,7 +798,7 @@ where\n pub fn phase_2_configure_and_expand_inner<'a, F>(\n     sess: &'a Session,\n     cstore: &'a CStore,\n-    krate: ast::Crate,\n+    mut krate: ast::Crate,\n     registry: Option<Registry>,\n     crate_name: &str,\n     addl_plugins: Option<Vec<String>>,\n@@ -810,6 +810,10 @@ pub fn phase_2_configure_and_expand_inner<'a, F>(\n where\n     F: FnOnce(&ast::Crate) -> CompileResult,\n {\n+    krate = time(sess, \"attributes injection\", || {\n+        syntax::attr::inject(krate, &sess.parse_sess, &sess.opts.debugging_opts.crate_attr)\n+    });\n+\n     let (mut krate, features) = syntax::config::features(\n         krate,\n         &sess.parse_sess,"}, {"sha": "137b94230a3cd251ccdb9864499de835daaa15c7", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/71276c6abc5b7e0889db1f9e69e02eb5d2596f39/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71276c6abc5b7e0889db1f9e69e02eb5d2596f39/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=71276c6abc5b7e0889db1f9e69e02eb5d2596f39", "patch": "@@ -22,11 +22,11 @@ pub use self::ReprAttr::*;\n pub use self::StabilityLevel::*;\n \n use ast;\n-use ast::{AttrId, Attribute, Name, Ident, Path, PathSegment};\n+use ast::{AttrId, Attribute, AttrStyle, Name, Ident, Path, PathSegment};\n use ast::{MetaItem, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n use ast::{Lit, LitKind, Expr, ExprKind, Item, Local, Stmt, StmtKind, GenericParam};\n use codemap::{BytePos, Spanned, respan, dummy_spanned};\n-use syntax_pos::Span;\n+use syntax_pos::{FileName, Span};\n use parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};\n use parse::parser::Parser;\n use parse::{self, ParseSess, PResult};\n@@ -821,3 +821,33 @@ derive_has_attrs! {\n     Item, Expr, Local, ast::ForeignItem, ast::StructField, ast::ImplItem, ast::TraitItem, ast::Arm,\n     ast::Field, ast::FieldPat, ast::Variant_\n }\n+\n+pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -> ast::Crate {\n+    for raw_attr in attrs {\n+        let mut parser = parse::new_parser_from_source_str(\n+            parse_sess,\n+            FileName::CliCrateAttr,\n+            raw_attr.clone(),\n+        );\n+\n+        let start_span = parser.span;\n+        let (path, tokens) = panictry!(parser.parse_path_and_tokens());\n+        let end_span = parser.span;\n+        if parser.token != token::Eof {\n+            parse_sess.span_diagnostic\n+                .span_err(start_span.to(end_span), \"invalid crate attribute\");\n+            continue;\n+        }\n+\n+        krate.attrs.push(Attribute {\n+            id: mk_attr_id(),\n+            style: AttrStyle::Inner,\n+            path,\n+            tokens,\n+            is_sugared_doc: false,\n+            span: start_span.to(end_span),\n+        });\n+    }\n+\n+    krate\n+}"}, {"sha": "a4d0bcd5c7662cf9cea7e0b87a090a1fc79669cf", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71276c6abc5b7e0889db1f9e69e02eb5d2596f39/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71276c6abc5b7e0889db1f9e69e02eb5d2596f39/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=71276c6abc5b7e0889db1f9e69e02eb5d2596f39", "patch": "@@ -100,6 +100,8 @@ pub enum FileName {\n     ProcMacroSourceCode,\n     /// Strings provided as --cfg [cfgspec] stored in a crate_cfg\n     CfgSpec,\n+    /// Strings provided as crate attributes in the CLI\n+    CliCrateAttr,\n     /// Custom sources for explicit parser calls from plugins and drivers\n     Custom(String),\n }\n@@ -115,6 +117,7 @@ impl std::fmt::Display for FileName {\n             Anon => write!(fmt, \"<anon>\"),\n             ProcMacroSourceCode => write!(fmt, \"<proc-macro source code>\"),\n             CfgSpec => write!(fmt, \"cfgspec\"),\n+            CliCrateAttr => write!(fmt, \"<crate attribute>\"),\n             Custom(ref s) => write!(fmt, \"<{}>\", s),\n         }\n     }\n@@ -137,6 +140,7 @@ impl FileName {\n             MacroExpansion |\n             ProcMacroSourceCode |\n             CfgSpec |\n+            CliCrateAttr |\n             Custom(_) |\n             QuoteExpansion => false,\n         }\n@@ -150,6 +154,7 @@ impl FileName {\n             MacroExpansion |\n             ProcMacroSourceCode |\n             CfgSpec |\n+            CliCrateAttr |\n             Custom(_) |\n             QuoteExpansion => false,\n             Macros(_) => true,"}, {"sha": "3df0985a2a38bdd3200e1fc68c0f5fb2d7240ca3", "filename": "src/test/run-pass/z-crate-attr.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/71276c6abc5b7e0889db1f9e69e02eb5d2596f39/src%2Ftest%2Frun-pass%2Fz-crate-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71276c6abc5b7e0889db1f9e69e02eb5d2596f39/src%2Ftest%2Frun-pass%2Fz-crate-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fz-crate-attr.rs?ref=71276c6abc5b7e0889db1f9e69e02eb5d2596f39", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test checks if an unstable feature is enabled with the -Zcrate-attr=feature(foo) flag. If\n+// the exact feature used here is causing problems feel free to replace it with another\n+// perma-unstable feature.\n+\n+// compile-flags: -Zcrate-attr=feature(abi_unadjusted)\n+\n+#![allow(dead_code)]\n+\n+extern \"unadjusted\" fn foo() {}\n+\n+fn main() {}"}]}