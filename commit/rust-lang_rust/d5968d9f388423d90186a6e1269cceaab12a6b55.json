{"sha": "d5968d9f388423d90186a6e1269cceaab12a6b55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1OTY4ZDlmMzg4NDIzZDkwMTg2YTZlMTI2OWNjZWFhYjEyYTZiNTU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-21T20:50:11Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-22T02:10:31Z"}, "message": "rt: Swap the definition of stk_seg::next and prev", "tree": {"sha": "8bd4b08143f710de800ef0b2ed2600cc9de922a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bd4b08143f710de800ef0b2ed2600cc9de922a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5968d9f388423d90186a6e1269cceaab12a6b55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5968d9f388423d90186a6e1269cceaab12a6b55", "html_url": "https://github.com/rust-lang/rust/commit/d5968d9f388423d90186a6e1269cceaab12a6b55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5968d9f388423d90186a6e1269cceaab12a6b55/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6115b13dfc4b863149d55b903fd3a86f9a8d6a37", "url": "https://api.github.com/repos/rust-lang/rust/commits/6115b13dfc4b863149d55b903fd3a86f9a8d6a37", "html_url": "https://github.com/rust-lang/rust/commit/6115b13dfc4b863149d55b903fd3a86f9a8d6a37"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "9175accfdb4d506388fdc6b791765a85c30772d1", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d5968d9f388423d90186a6e1269cceaab12a6b55/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d5968d9f388423d90186a6e1269cceaab12a6b55/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=d5968d9f388423d90186a6e1269cceaab12a6b55", "patch": "@@ -528,10 +528,10 @@ rust_task::new_stack_fast(size_t requested_sz) {\n     size_t min_sz = thread->min_stack_size;\n \n     // Try to reuse an existing stack segment\n-    if (stk != NULL && stk->prev != NULL) {\n-        size_t prev_sz = user_stack_size(stk->prev);\n-        if (min_sz <= prev_sz && requested_sz <= prev_sz) {\n-            stk = stk->prev;\n+    if (stk != NULL && stk->next != NULL) {\n+        size_t next_sz = user_stack_size(stk->next);\n+        if (min_sz <= next_sz && requested_sz <= next_sz) {\n+            stk = stk->next;\n             return;\n         }\n     }\n@@ -551,19 +551,19 @@ rust_task::new_stack(size_t requested_sz) {\n     size_t min_sz = thread->min_stack_size;\n \n     // Try to reuse an existing stack segment\n-    while (stk != NULL && stk->prev != NULL) {\n-        size_t prev_sz = user_stack_size(stk->prev);\n-        if (min_sz <= prev_sz && requested_sz <= prev_sz) {\n+    while (stk != NULL && stk->next != NULL) {\n+        size_t next_sz = user_stack_size(stk->next);\n+        if (min_sz <= next_sz && requested_sz <= next_sz) {\n             LOG(this, mem, \"reusing existing stack\");\n-            stk = stk->prev;\n+            stk = stk->next;\n             return;\n         } else {\n             LOG(this, mem, \"existing stack is not big enough\");\n-            stk_seg *new_prev = stk->prev->prev;\n-            free_stack(stk->prev);\n-            stk->prev = new_prev;\n-            if (new_prev) {\n-                new_prev->next = stk;\n+            stk_seg *new_next = stk->next->next;\n+            free_stack(stk->next);\n+            stk->next = new_next;\n+            if (new_next) {\n+                new_next->prev = stk;\n             }\n         }\n     }\n@@ -585,10 +585,10 @@ rust_task::new_stack(size_t requested_sz) {\n     size_t sz = rust_stk_sz + RED_ZONE_SIZE;\n     stk_seg *new_stk = create_stack(&local_region, sz);\n     LOGPTR(thread, \"new stk\", (uintptr_t)new_stk);\n-    new_stk->prev = NULL;\n-    new_stk->next = stk;\n+    new_stk->next = NULL;\n+    new_stk->prev = stk;\n     if (stk) {\n-        stk->prev = new_stk;\n+        stk->next = new_stk;\n     }\n     LOGPTR(thread, \"stk end\", new_stk->end);\n \n@@ -633,7 +633,7 @@ rust_task::prev_stack() {\n     // require switching to the C stack and be costly. Instead we'll just move\n     // up the link list and clean up later, either in new_stack or after our\n     // turn ends on the scheduler.\n-    stk = stk->next;\n+    stk = stk->prev;\n     record_stack_limit();\n }\n \n@@ -658,10 +658,10 @@ rust_task::cleanup_after_turn() {\n     // Delete any spare stack segments that were left\n     // behind by calls to prev_stack\n     I(thread, stk);\n-    while (stk->prev) {\n-        stk_seg *new_prev = stk->prev->prev;\n-        free_stack(stk->prev);\n-        stk->prev = new_prev;\n+    while (stk->next) {\n+        stk_seg *new_next = stk->next->next;\n+        free_stack(stk->next);\n+        stk->next = new_next;\n     }\n }\n \n@@ -686,7 +686,7 @@ reset_stack_limit_on_c_stack(reset_args *args) {\n     rust_task *task = args->task;\n     uintptr_t sp = args->sp;\n     while (!sp_in_stk_seg(sp, task->stk)) {\n-        task->stk = task->stk->next;\n+        task->stk = task->stk->prev;\n         A(task->thread, task->stk != NULL,\n           \"Failed to find the current stack\");\n     }\n@@ -720,11 +720,11 @@ rust_task::delete_all_stacks() {\n     I(thread, !on_rust_stack());\n     // Delete all the stacks. There may be more than one if the task failed\n     // and no landing pads stopped to clean up.\n-    I(thread, stk->prev == NULL);\n+    I(thread, stk->next == NULL);\n     while (stk != NULL) {\n-        stk_seg *next = stk->next;\n+        stk_seg *prev = stk->prev;\n         free_stack(stk);\n-        stk = next;\n+        stk = prev;\n     }\n }\n \n@@ -748,10 +748,10 @@ rust_task::on_rust_stack() {\n     bool in_first_segment = sp_in_stk_seg(sp, stk);\n     if (in_first_segment) {\n         return true;\n-    } else if (stk->next != NULL) {\n+    } else if (stk->prev != NULL) {\n         // This happens only when calling the upcall to delete\n         // a stack segment\n-        bool in_second_segment = sp_in_stk_seg(sp, stk->next);\n+        bool in_second_segment = sp_in_stk_seg(sp, stk->prev);\n         return in_second_segment;\n     } else {\n         return false;"}]}