{"sha": "10ed08f5b644e1bd521eaf7d64474a837b17a7ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZWQwOGY1YjY0NGUxYmQ1MjFlYWY3ZDY0NDc0YTgzN2IxN2E3YWU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-06T21:18:51Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-06T21:23:02Z"}, "message": "cfg_eval: Configure everything through mutable visitor methods\n\nThis is simpler and mirrors what invocation collector does", "tree": {"sha": "27acfa84177222bba8acacb14ea00bf0a2e97e63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27acfa84177222bba8acacb14ea00bf0a2e97e63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10ed08f5b644e1bd521eaf7d64474a837b17a7ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10ed08f5b644e1bd521eaf7d64474a837b17a7ae", "html_url": "https://github.com/rust-lang/rust/commit/10ed08f5b644e1bd521eaf7d64474a837b17a7ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10ed08f5b644e1bd521eaf7d64474a837b17a7ae/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9019b70865089e09507274075188f50b189a79d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9019b70865089e09507274075188f50b189a79d", "html_url": "https://github.com/rust-lang/rust/commit/f9019b70865089e09507274075188f50b189a79d"}], "stats": {"total": 97, "additions": 27, "deletions": 70}, "files": [{"sha": "efc5f5af877082f7f8b20ba7ece8de3eca4d33b8", "filename": "compiler/rustc_builtin_macros/src/cfg_eval.rs", "status": "modified", "additions": 27, "deletions": 70, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/10ed08f5b644e1bd521eaf7d64474a837b17a7ae/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ed08f5b644e1bd521eaf7d64474a837b17a7ae/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs?ref=10ed08f5b644e1bd521eaf7d64474a837b17a7ae", "patch": "@@ -3,7 +3,6 @@ use crate::util::check_builtin_macro_attribute;\n use rustc_ast::mut_visit::{self, MutVisitor};\n use rustc_ast::ptr::P;\n use rustc_ast::{self as ast, AstLike};\n-use rustc_data_structures::map_in_place::MapInPlace;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_expand::config::StripUnconfigured;\n use rustc_expand::configure;\n@@ -43,57 +42,6 @@ impl CfgEval<'_> {\n         self.cfg.configure(node)\n     }\n \n-    fn configure_foreign_mod(&mut self, foreign_mod: &mut ast::ForeignMod) {\n-        let ast::ForeignMod { unsafety: _, abi: _, items } = foreign_mod;\n-        items.flat_map_in_place(|item| self.configure(item));\n-    }\n-\n-    fn configure_variant_data(&mut self, vdata: &mut ast::VariantData) {\n-        match vdata {\n-            ast::VariantData::Struct(fields, ..) | ast::VariantData::Tuple(fields, _) => {\n-                fields.flat_map_in_place(|field| self.configure(field))\n-            }\n-            ast::VariantData::Unit(_) => {}\n-        }\n-    }\n-\n-    fn configure_item_kind(&mut self, item: &mut ast::ItemKind) {\n-        match item {\n-            ast::ItemKind::Struct(def, _generics) | ast::ItemKind::Union(def, _generics) => {\n-                self.configure_variant_data(def)\n-            }\n-            ast::ItemKind::Enum(ast::EnumDef { variants }, _generics) => {\n-                variants.flat_map_in_place(|variant| self.configure(variant));\n-                for variant in variants {\n-                    self.configure_variant_data(&mut variant.data);\n-                }\n-            }\n-            _ => {}\n-        }\n-    }\n-\n-    fn configure_expr_kind(&mut self, expr_kind: &mut ast::ExprKind) {\n-        match expr_kind {\n-            ast::ExprKind::Match(_m, arms) => {\n-                arms.flat_map_in_place(|arm| self.configure(arm));\n-            }\n-            ast::ExprKind::Struct(_path, fields, _base) => {\n-                fields.flat_map_in_place(|field| self.configure(field));\n-            }\n-            _ => {}\n-        }\n-    }\n-\n-    fn configure_pat(&mut self, pat: &mut P<ast::Pat>) {\n-        if let ast::PatKind::Struct(_path, fields, _etc) = &mut pat.kind {\n-            fields.flat_map_in_place(|field| self.configure(field));\n-        }\n-    }\n-\n-    fn configure_fn_decl(&mut self, fn_decl: &mut ast::FnDecl) {\n-        fn_decl.inputs.flat_map_in_place(|arg| self.configure(arg));\n-    }\n-\n     crate fn fully_configure(&mut self, item: Annotatable) -> Annotatable {\n         // Since the item itself has already been configured by the InvocationCollector,\n         // we know that fold result vector will contain exactly one element\n@@ -139,25 +87,13 @@ impl CfgEval<'_> {\n }\n \n impl MutVisitor for CfgEval<'_> {\n-    fn visit_foreign_mod(&mut self, foreign_mod: &mut ast::ForeignMod) {\n-        self.configure_foreign_mod(foreign_mod);\n-        mut_visit::noop_visit_foreign_mod(foreign_mod, self);\n-    }\n-\n-    fn visit_item_kind(&mut self, item: &mut ast::ItemKind) {\n-        self.configure_item_kind(item);\n-        mut_visit::noop_visit_item_kind(item, self);\n-    }\n-\n     fn visit_expr(&mut self, expr: &mut P<ast::Expr>) {\n         self.cfg.configure_expr(expr);\n-        self.configure_expr_kind(&mut expr.kind);\n         mut_visit::noop_visit_expr(expr, self);\n     }\n \n     fn filter_map_expr(&mut self, expr: P<ast::Expr>) -> Option<P<ast::Expr>> {\n         let mut expr = configure!(self, expr);\n-        self.configure_expr_kind(&mut expr.kind);\n         mut_visit::noop_visit_expr(&mut expr, self);\n         Some(expr)\n     }\n@@ -185,13 +121,34 @@ impl MutVisitor for CfgEval<'_> {\n         mut_visit::noop_flat_map_assoc_item(configure!(self, item), self)\n     }\n \n-    fn visit_pat(&mut self, pat: &mut P<ast::Pat>) {\n-        self.configure_pat(pat);\n-        mut_visit::noop_visit_pat(pat, self)\n+    fn flat_map_foreign_item(\n+        &mut self,\n+        foreign_item: P<ast::ForeignItem>,\n+    ) -> SmallVec<[P<ast::ForeignItem>; 1]> {\n+        mut_visit::noop_flat_map_foreign_item(configure!(self, foreign_item), self)\n+    }\n+\n+    fn flat_map_arm(&mut self, arm: ast::Arm) -> SmallVec<[ast::Arm; 1]> {\n+        mut_visit::noop_flat_map_arm(configure!(self, arm), self)\n+    }\n+\n+    fn flat_map_field(&mut self, field: ast::Field) -> SmallVec<[ast::Field; 1]> {\n+        mut_visit::noop_flat_map_field(configure!(self, field), self)\n+    }\n+\n+    fn flat_map_field_pattern(&mut self, fp: ast::FieldPat) -> SmallVec<[ast::FieldPat; 1]> {\n+        mut_visit::noop_flat_map_field_pattern(configure!(self, fp), self)\n+    }\n+\n+    fn flat_map_param(&mut self, p: ast::Param) -> SmallVec<[ast::Param; 1]> {\n+        mut_visit::noop_flat_map_param(configure!(self, p), self)\n+    }\n+\n+    fn flat_map_struct_field(&mut self, sf: ast::StructField) -> SmallVec<[ast::StructField; 1]> {\n+        mut_visit::noop_flat_map_struct_field(configure!(self, sf), self)\n     }\n \n-    fn visit_fn_decl(&mut self, mut fn_decl: &mut P<ast::FnDecl>) {\n-        self.configure_fn_decl(&mut fn_decl);\n-        mut_visit::noop_visit_fn_decl(fn_decl, self);\n+    fn flat_map_variant(&mut self, variant: ast::Variant) -> SmallVec<[ast::Variant; 1]> {\n+        mut_visit::noop_flat_map_variant(configure!(self, variant), self)\n     }\n }"}]}