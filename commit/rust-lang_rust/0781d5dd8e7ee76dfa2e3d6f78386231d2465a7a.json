{"sha": "0781d5dd8e7ee76dfa2e3d6f78386231d2465a7a", "node_id": "C_kwDOAAsO6NoAKDA3ODFkNWRkOGU3ZWU3NmRmYTJlM2Q2Zjc4Mzg2MjMxZDI0NjVhN2E", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-02-11T05:45:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-11T05:45:54Z"}, "message": "Rollup merge of #105019 - chenyukang:yukang/fix-104961-borrow, r=cjgillot\n\nAdd parentheses properly for borrowing suggestion\n\nFixes #104961", "tree": {"sha": "27d35aee3b02a81b00259789fdfa4062c1e3bb80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27d35aee3b02a81b00259789fdfa4062c1e3bb80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0781d5dd8e7ee76dfa2e3d6f78386231d2465a7a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj5yuSCRBK7hj4Ov3rIwAATj0IAEKLPOf4juY6SuxfGoQS9vA8\nCv50cW4j1fPoesInoB/8vzlIb/eibiR568s3sX3CL9mV+5xatoeD+7CN4hH1bmLn\nmxSBYlK1zIml1u9ZSaB/dHiMI9SvmioFvNcsPwsbNT3WAsImIyO2e/UUGdxKtC9d\n0Lkk93NgpWD8mqSQ4F9iFbrnSUGWD4AdRrNd+4ApcgPg+XwaJWzWuN+U5fOYIreR\nCXfhIP0PSn+n78eZp329gaE4qKj2LQ3kjrzTHjKPxvXMQAhekiIWrbw0LfLYlbRL\naAQlN1rcOoK9lCO3BJFLwa5ggY1Smr91VrfHAgmjkPhwosBCArXVtns7ZcKJOeQ=\n=AloC\n-----END PGP SIGNATURE-----\n", "payload": "tree 27d35aee3b02a81b00259789fdfa4062c1e3bb80\nparent 5a8dfd933a70cc47e44502a20fd67dfaec6555d5\nparent 8f736a40426bf0182b92637e9c221da12745a180\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1676094354 +0530\ncommitter GitHub <noreply@github.com> 1676094354 +0530\n\nRollup merge of #105019 - chenyukang:yukang/fix-104961-borrow, r=cjgillot\n\nAdd parentheses properly for borrowing suggestion\n\nFixes #104961\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0781d5dd8e7ee76dfa2e3d6f78386231d2465a7a", "html_url": "https://github.com/rust-lang/rust/commit/0781d5dd8e7ee76dfa2e3d6f78386231d2465a7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0781d5dd8e7ee76dfa2e3d6f78386231d2465a7a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a8dfd933a70cc47e44502a20fd67dfaec6555d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a8dfd933a70cc47e44502a20fd67dfaec6555d5", "html_url": "https://github.com/rust-lang/rust/commit/5a8dfd933a70cc47e44502a20fd67dfaec6555d5"}, {"sha": "8f736a40426bf0182b92637e9c221da12745a180", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f736a40426bf0182b92637e9c221da12745a180", "html_url": "https://github.com/rust-lang/rust/commit/8f736a40426bf0182b92637e9c221da12745a180"}], "stats": {"total": 111, "additions": 104, "deletions": 7}, "files": [{"sha": "048a5471994195d6ccde8f7ed08b2932b75a30c5", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0781d5dd8e7ee76dfa2e3d6f78386231d2465a7a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0781d5dd8e7ee76dfa2e3d6f78386231d2465a7a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=0781d5dd8e7ee76dfa2e3d6f78386231d2465a7a", "patch": "@@ -19,6 +19,7 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n+use rustc_hir::is_range_literal;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Node};\n use rustc_hir::{Expr, HirId};\n@@ -1349,14 +1350,41 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             Applicability::MaybeIncorrect,\n                         );\n                     } else {\n+                        // Issue #104961, we need to add parentheses properly for compond expressions\n+                        // for example, `x.starts_with(\"hi\".to_string() + \"you\")`\n+                        // should be `x.starts_with(&(\"hi\".to_string() + \"you\"))`\n+                        let Some(body_id) = self.tcx.hir().maybe_body_owned_by(obligation.cause.body_id) else { return false; };\n+                        let body = self.tcx.hir().body(body_id);\n+                        let mut expr_finder = FindExprBySpan::new(span);\n+                        expr_finder.visit_expr(body.value);\n+                        let Some(expr) = expr_finder.result else { return false; };\n+                        let needs_parens = match expr.kind {\n+                            // parenthesize if needed (Issue #46756)\n+                            hir::ExprKind::Cast(_, _) | hir::ExprKind::Binary(_, _, _) => true,\n+                            // parenthesize borrows of range literals (Issue #54505)\n+                            _ if is_range_literal(expr) => true,\n+                            _ => false,\n+                        };\n+\n                         let is_mut = mut_ref_self_ty_satisfies_pred || ref_inner_ty_mut;\n-                        err.span_suggestion_verbose(\n-                            span.shrink_to_lo(),\n-                            &format!(\n-                                \"consider{} borrowing here\",\n-                                if is_mut { \" mutably\" } else { \"\" }\n-                            ),\n-                            format!(\"&{}\", if is_mut { \"mut \" } else { \"\" }),\n+                        let span = if needs_parens { span } else { span.shrink_to_lo() };\n+                        let sugg_prefix = format!(\"&{}\", if is_mut { \"mut \" } else { \"\" });\n+                        let sugg_msg = &format!(\n+                            \"consider{} borrowing here\",\n+                            if is_mut { \" mutably\" } else { \"\" }\n+                        );\n+\n+                        let suggestions = if !needs_parens {\n+                            vec![(span.shrink_to_lo(), format!(\"{}\", sugg_prefix))]\n+                        } else {\n+                            vec![\n+                                (span.shrink_to_lo(), format!(\"{}(\", sugg_prefix)),\n+                                (span.shrink_to_hi(), \")\".to_string()),\n+                            ]\n+                        };\n+                        err.multipart_suggestion_verbose(\n+                            sugg_msg,\n+                            suggestions,\n                             Applicability::MaybeIncorrect,\n                         );\n                     }"}, {"sha": "520d638b1748f1c4b51fb0a0e998e8c31ae9f672", "filename": "tests/ui/suggestions/issue-104961.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0781d5dd8e7ee76dfa2e3d6f78386231d2465a7a/tests%2Fui%2Fsuggestions%2Fissue-104961.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0781d5dd8e7ee76dfa2e3d6f78386231d2465a7a/tests%2Fui%2Fsuggestions%2Fissue-104961.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-104961.fixed?ref=0781d5dd8e7ee76dfa2e3d6f78386231d2465a7a", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+fn foo(x: &str) -> bool {\n+    x.starts_with(&(\"hi\".to_string() + \" you\"))\n+    //~^ ERROR expected a `FnMut<(char,)>` closure, found `String`\n+}\n+\n+fn foo2(x: &str) -> bool {\n+    x.starts_with(&\"hi\".to_string())\n+    //~^ ERROR expected a `FnMut<(char,)>` closure, found `String`\n+}\n+\n+fn main() {\n+    foo(\"hi you\");\n+    foo2(\"hi\");\n+}"}, {"sha": "aeb787abb6fc8779515121fd297f747198869cc4", "filename": "tests/ui/suggestions/issue-104961.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0781d5dd8e7ee76dfa2e3d6f78386231d2465a7a/tests%2Fui%2Fsuggestions%2Fissue-104961.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0781d5dd8e7ee76dfa2e3d6f78386231d2465a7a/tests%2Fui%2Fsuggestions%2Fissue-104961.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-104961.rs?ref=0781d5dd8e7ee76dfa2e3d6f78386231d2465a7a", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+fn foo(x: &str) -> bool {\n+    x.starts_with(\"hi\".to_string() + \" you\")\n+    //~^ ERROR expected a `FnMut<(char,)>` closure, found `String`\n+}\n+\n+fn foo2(x: &str) -> bool {\n+    x.starts_with(\"hi\".to_string())\n+    //~^ ERROR expected a `FnMut<(char,)>` closure, found `String`\n+}\n+\n+fn main() {\n+    foo(\"hi you\");\n+    foo2(\"hi\");\n+}"}, {"sha": "8cec6a3f8270a6f1bd16da3b3c999e2ddf9123bd", "filename": "tests/ui/suggestions/issue-104961.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0781d5dd8e7ee76dfa2e3d6f78386231d2465a7a/tests%2Fui%2Fsuggestions%2Fissue-104961.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0781d5dd8e7ee76dfa2e3d6f78386231d2465a7a/tests%2Fui%2Fsuggestions%2Fissue-104961.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-104961.stderr?ref=0781d5dd8e7ee76dfa2e3d6f78386231d2465a7a", "patch": "@@ -0,0 +1,37 @@\n+error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n+  --> $DIR/issue-104961.rs:4:19\n+   |\n+LL |     x.starts_with(\"hi\".to_string() + \" you\")\n+   |       ----------- ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Pattern<'_>` is not implemented for `String`\n+   |       |\n+   |       required by a bound introduced by this call\n+   |\n+   = note: the trait bound `String: Pattern<'_>` is not satisfied\n+   = note: required for `String` to implement `Pattern<'_>`\n+note: required by a bound in `core::str::<impl str>::starts_with`\n+  --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n+help: consider borrowing here\n+   |\n+LL |     x.starts_with(&(\"hi\".to_string() + \" you\"))\n+   |                   ++                         +\n+\n+error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n+  --> $DIR/issue-104961.rs:9:19\n+   |\n+LL |     x.starts_with(\"hi\".to_string())\n+   |       ----------- ^^^^^^^^^^^^^^^^ the trait `Pattern<'_>` is not implemented for `String`\n+   |       |\n+   |       required by a bound introduced by this call\n+   |\n+   = note: the trait bound `String: Pattern<'_>` is not satisfied\n+   = note: required for `String` to implement `Pattern<'_>`\n+note: required by a bound in `core::str::<impl str>::starts_with`\n+  --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n+help: consider borrowing here\n+   |\n+LL |     x.starts_with(&\"hi\".to_string())\n+   |                   +\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}