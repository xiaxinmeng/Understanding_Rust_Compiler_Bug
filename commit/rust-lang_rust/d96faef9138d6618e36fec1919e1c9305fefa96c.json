{"sha": "d96faef9138d6618e36fec1919e1c9305fefa96c", "node_id": "C_kwDOAAsO6NoAKGQ5NmZhZWY5MTM4ZDY2MThlMzZmZWMxOTE5ZTFjOTMwNWZlZmE5NmM", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-03-24T20:47:10Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-03-24T20:47:10Z"}, "message": "Where bounds are checked on inherent impls", "tree": {"sha": "d8147601a20728faa03c8858aa0fe2ecd56669d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8147601a20728faa03c8858aa0fe2ecd56669d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d96faef9138d6618e36fec1919e1c9305fefa96c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmI82M4ACgkQgTGiTgx5\n76+f1Q//ZnMQ7Ld8XRo+0dhesGTPZT4wr5GcUKrAXfxMrSnIVs6WS6D1UNKUjqjV\n0E4NRNtUh3JwMIq+r/EXo5WQXMz4IiKUuaUSyGuchEOSQBNqPoP8iJ2vKYcJuMwL\nG5vw6KrQ67fr4EDrpCAQNSwL6Ej5dvZ+17MsiJ/3MbdAng6po7beTmHDKH4BtRpL\n15Ip0PBxiZ3CFFcZTCj9XC5AWI/xMHWmREOQSmADwlmRu9S6DHIIWD5sioXsNySs\nBIfDergVrAbO9KJ7agHWwqT1TrCgc+4JpB33AIJmF7lXilw8LSvLPKlpZ78euphq\nMdvTVilameHoCNXAyJVUyMI4VkKSruz3R7CkevgrdMXYk2ljXWBtNzEOhBv/XQkK\nVU63EWCLXapev5wZbKJsTA7K19WilhkcPuU/l3/4kitm/qfuenqYZ1c/WIBimObV\n+gGsddNm+H8BpES0NEhYwyA7HUYz0FfexiOJoJnPJY2Fl97Qul1IO/WyupEcRKio\nYps8oiGJC1fZVubuqemLvqSEYKx/C4kJQx4dq6azPMC6c5TjasMTTJa/xAiCoiPa\nImGWxMXIwFPZbZUYG2uycs5wQaFYN4ahECY+KbAbebv5w6E/FhPqyrCLE303F7gr\nY/7J0G+fPc/GpNxBcbmPMxuo5mPeb7V84Yh6x2GeUGkP3V9uiLQ=\n=sixs\n-----END PGP SIGNATURE-----", "payload": "tree d8147601a20728faa03c8858aa0fe2ecd56669d6\nparent f4bd1e14bd40833576e770317912e1a67fc962f4\nauthor Santiago Pastorino <spastorino@gmail.com> 1648154830 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1648154830 -0300\n\nWhere bounds are checked on inherent impls\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d96faef9138d6618e36fec1919e1c9305fefa96c", "html_url": "https://github.com/rust-lang/rust/commit/d96faef9138d6618e36fec1919e1c9305fefa96c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d96faef9138d6618e36fec1919e1c9305fefa96c/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4bd1e14bd40833576e770317912e1a67fc962f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4bd1e14bd40833576e770317912e1a67fc962f4", "html_url": "https://github.com/rust-lang/rust/commit/f4bd1e14bd40833576e770317912e1a67fc962f4"}], "stats": {"total": 63, "additions": 61, "deletions": 2}, "files": [{"sha": "ed9ddb51834bab433ffabc102eaa026ff1f3f10d", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d96faef9138d6618e36fec1919e1c9305fefa96c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96faef9138d6618e36fec1919e1c9305fefa96c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=d96faef9138d6618e36fec1919e1c9305fefa96c", "patch": "@@ -7,7 +7,7 @@\n use crate::infer::outlives::env::OutlivesEnvironment;\n use crate::infer::{CombinedSnapshot, InferOk, RegionckMode};\n use crate::traits::select::IntercrateAmbiguityCause;\n-use crate::traits::util::impl_trait_ref_and_oblig;\n+use crate::traits::util::{impl_trait_ref_and_oblig, inherent_impl_and_oblig};\n use crate::traits::SkipLeakCheck;\n use crate::traits::{\n     self, FulfillmentContext, Normalized, Obligation, ObligationCause, PredicateObligation,\n@@ -338,7 +338,13 @@ fn impl_subject_and_obligations<'cx, 'tcx>(\n \n         (ImplSubject::Trait(impl2_trait_ref), Box::new(obligations))\n     } else {\n-        (infcx.tcx.impl_subject(impl2_def_id), Box::new(iter::empty()))\n+        // Attempt to prove that impl2 applies, given all of the above.\n+        let selcx = &mut SelectionContext::new(&infcx);\n+        let impl2_substs = infcx.fresh_substs_for_item(DUMMY_SP, impl2_def_id);\n+        let (impl2_ty, obligations) =\n+            inherent_impl_and_oblig(selcx, impl_env, impl2_def_id, impl2_substs);\n+\n+        (ImplSubject::Inherent(impl2_ty), Box::new(obligations))\n     }\n }\n "}, {"sha": "7b64deac99db169324741f95ebe14d2f9e1af00d", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d96faef9138d6618e36fec1919e1c9305fefa96c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96faef9138d6618e36fec1919e1c9305fefa96c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=d96faef9138d6618e36fec1919e1c9305fefa96c", "patch": "@@ -218,6 +218,34 @@ pub fn impl_trait_ref_and_oblig<'a, 'tcx>(\n     (impl_trait_ref, impl_obligations)\n }\n \n+/// Instantiate all bound parameters of the impl with the given substs,\n+/// returning the resulting trait ref and all obligations that arise.\n+/// The obligations are closed under normalization.\n+pub fn inherent_impl_and_oblig<'a, 'tcx>(\n+    selcx: &mut SelectionContext<'a, 'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    impl_def_id: DefId,\n+    impl_substs: SubstsRef<'tcx>,\n+) -> (Ty<'tcx>, impl Iterator<Item = PredicateObligation<'tcx>>) {\n+    let ty = selcx.tcx().type_of(impl_def_id);\n+    let ty = ty.subst(selcx.tcx(), impl_substs);\n+    let Normalized { value: ty, obligations: normalization_obligations1 } =\n+        super::normalize(selcx, param_env, ObligationCause::dummy(), ty);\n+\n+    let predicates = selcx.tcx().predicates_of(impl_def_id);\n+    let predicates = predicates.instantiate(selcx.tcx(), impl_substs);\n+    let Normalized { value: predicates, obligations: normalization_obligations2 } =\n+        super::normalize(selcx, param_env, ObligationCause::dummy(), predicates);\n+    let impl_obligations =\n+        predicates_for_generics(ObligationCause::dummy(), 0, param_env, predicates);\n+\n+    let impl_obligations = impl_obligations\n+        .chain(normalization_obligations1.into_iter())\n+        .chain(normalization_obligations2.into_iter());\n+\n+    (ty, impl_obligations)\n+}\n+\n pub fn predicates_for_generics<'tcx>(\n     cause: ObligationCause<'tcx>,\n     recursion_depth: usize,"}, {"sha": "39ccaa6ac3542a1e914bfc242360c21c97b034f6", "filename": "src/test/ui/coherence/coherence-negative-inherent-where-bounds.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d96faef9138d6618e36fec1919e1c9305fefa96c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-inherent-where-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96faef9138d6618e36fec1919e1c9305fefa96c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-inherent-where-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-inherent-where-bounds.rs?ref=d96faef9138d6618e36fec1919e1c9305fefa96c", "patch": "@@ -0,0 +1,25 @@\n+// check-pass\n+\n+#![feature(negative_impls)]\n+#![feature(rustc_attrs)]\n+#![feature(with_negative_coherence)]\n+\n+trait Foo {}\n+\n+impl !Foo for u32 {}\n+\n+#[rustc_strict_coherence]\n+struct MyStruct<T>(T);\n+\n+impl MyStruct<u32> {\n+    fn method(&self) {}\n+}\n+\n+impl<T> MyStruct<T>\n+where\n+    T: Foo,\n+{\n+    fn method(&self) {}\n+}\n+\n+fn main() {}"}]}