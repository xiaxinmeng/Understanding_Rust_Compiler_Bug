{"sha": "9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmODBlYTMyODExZGIwYmRiZDA1YjFiZWY1OWY1ZGIyNmIzZTI0YTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-22T12:57:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-22T12:57:06Z"}, "message": "Auto merge of #49172 - oli-obk:const_let, r=eddyb\n\nAllow let bindings and destructuring in constants and const fn\n\nr? @eddyb\n\ncc https://github.com/rust-lang/rust/issues/48821", "tree": {"sha": "6a347360749ddc9462a714f5cc00ffdd0efd0cdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a347360749ddc9462a714f5cc00ffdd0efd0cdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "html_url": "https://github.com/rust-lang/rust/commit/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff8fa5cc69db5567b32ceca1ee4ac0dcfa3a81bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff8fa5cc69db5567b32ceca1ee4ac0dcfa3a81bc", "html_url": "https://github.com/rust-lang/rust/commit/ff8fa5cc69db5567b32ceca1ee4ac0dcfa3a81bc"}, {"sha": "2483c812176c8ecca54207517a2ba5500805b205", "url": "https://api.github.com/repos/rust-lang/rust/commits/2483c812176c8ecca54207517a2ba5500805b205", "html_url": "https://github.com/rust-lang/rust/commit/2483c812176c8ecca54207517a2ba5500805b205"}], "stats": {"total": 467, "additions": 354, "deletions": 113}, "files": [{"sha": "f195775bf86e97419942fe974b7c5865dcc96342", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "patch": "@@ -597,21 +597,6 @@ See [RFC 911] for more details on the design of `const fn`s.\n [RFC 911]: https://github.com/rust-lang/rfcs/blob/master/text/0911-const-fn.md\n \"##,\n \n-E0016: r##\"\n-Blocks in constants may only contain items (such as constant, function\n-definition, etc...) and a tail expression. Erroneous code example:\n-\n-```compile_fail,E0016\n-const FOO: i32 = { let x = 0; x }; // 'x' isn't an item!\n-```\n-\n-To avoid it, you have to replace the non-item object:\n-\n-```\n-const FOO: i32 = { const X : i32 = 0; X };\n-```\n-\"##,\n-\n E0017: r##\"\n References in statics and constants may only refer to immutable values.\n Erroneous code example:"}, {"sha": "999e3d89fc7e4f3a666fba6f4362c50e9bd6c7eb", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 73, "deletions": 61, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "patch": "@@ -32,7 +32,7 @@ use rustc::middle::lang_items;\n use rustc_target::spec::abi::Abi;\n use syntax::attr;\n use syntax::ast::LitKind;\n-use syntax::feature_gate::UnstableFeatures;\n+use syntax::feature_gate::{UnstableFeatures, feature_err, emit_feature_err, GateIssue};\n use syntax_pos::{Span, DUMMY_SP};\n \n use std::fmt;\n@@ -120,8 +120,7 @@ struct Qualifier<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     rpo: ReversePostorder<'a, 'tcx>,\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    temp_qualif: IndexVec<Local, Option<Qualif>>,\n-    return_qualif: Option<Qualif>,\n+    local_qualif: IndexVec<Local, Option<Qualif>>,\n     qualif: Qualif,\n     const_fn_arg_vars: BitVector,\n     temp_promotion_state: IndexVec<Local, TempState>,\n@@ -140,11 +139,11 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n \n         let param_env = tcx.param_env(def_id);\n \n-        let mut temp_qualif = IndexVec::from_elem(None, &mir.local_decls);\n+        let mut local_qualif = IndexVec::from_elem(None, &mir.local_decls);\n         for arg in mir.args_iter() {\n             let mut qualif = Qualif::NEEDS_DROP;\n             qualif.restrict(mir.local_decls[arg].ty, tcx, param_env);\n-            temp_qualif[arg] = Some(qualif);\n+            local_qualif[arg] = Some(qualif);\n         }\n \n         Qualifier {\n@@ -155,8 +154,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             rpo,\n             tcx,\n             param_env,\n-            temp_qualif,\n-            return_qualif: None,\n+            local_qualif,\n             qualif: Qualif::empty(),\n             const_fn_arg_vars: BitVector::new(mir.local_decls.len()),\n             temp_promotion_state: temps,\n@@ -191,12 +189,12 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n     fn statement_like(&mut self) {\n         self.add(Qualif::NOT_CONST);\n         if self.mode != Mode::Fn {\n-            let mut err = struct_span_err!(\n-                self.tcx.sess,\n+            let mut err = feature_err(\n+                &self.tcx.sess.parse_sess,\n+                \"const_let\",\n                 self.span,\n-                E0016,\n-                \"blocks in {}s are limited to items and tail expressions\",\n-                self.mode\n+                GateIssue::Language,\n+                &format!(\"statements in {}s are unstable\", self.mode),\n             );\n             if self.tcx.sess.teach(&err.get_code().unwrap()) {\n                 err.note(\"Blocks in constants may only contain items (such as constant, function \\\n@@ -266,6 +264,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n \n     /// Assign the current qualification to the given destination.\n     fn assign(&mut self, dest: &Place<'tcx>, location: Location) {\n+        trace!(\"assign: {:?}\", dest);\n         let qualif = self.qualif;\n         let span = self.span;\n         let store = |slot: &mut Option<Qualif>| {\n@@ -281,28 +280,31 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                 if self.mir.local_kind(index) == LocalKind::Temp\n                 && self.temp_promotion_state[index].is_promotable() {\n                     debug!(\"store to promotable temp {:?}\", index);\n-                    store(&mut self.temp_qualif[index]);\n+                    store(&mut self.local_qualif[index]);\n                 }\n             }\n             return;\n         }\n \n         match *dest {\n-            Place::Local(index) if self.mir.local_kind(index) == LocalKind::Temp => {\n-                debug!(\"store to temp {:?}\", index);\n-                store(&mut self.temp_qualif[index])\n+            Place::Local(index) if (self.mir.local_kind(index) == LocalKind::Var ||\n+                                   self.mir.local_kind(index) == LocalKind::Arg) &&\n+                                   self.tcx.sess.features_untracked().const_let => {\n+                debug!(\"store to var {:?}\", index);\n+                self.local_qualif[index] = Some(self.qualif);\n             }\n-            Place::Local(index) if self.mir.local_kind(index) == LocalKind::ReturnPointer => {\n-                debug!(\"store to return place {:?}\", index);\n-                store(&mut self.return_qualif)\n+            Place::Local(index) if self.mir.local_kind(index) == LocalKind::Temp ||\n+                                   self.mir.local_kind(index) == LocalKind::ReturnPointer => {\n+                debug!(\"store to {:?} (temp or return pointer)\", index);\n+                store(&mut self.local_qualif[index])\n             }\n \n             Place::Projection(box Projection {\n                 base: Place::Local(index),\n                 elem: ProjectionElem::Deref\n             }) if self.mir.local_kind(index) == LocalKind::Temp\n                && self.mir.local_decls[index].ty.is_box()\n-               && self.temp_qualif[index].map_or(false, |qualif| {\n+               && self.local_qualif[index].map_or(false, |qualif| {\n                     qualif.intersects(Qualif::NOT_CONST)\n                }) => {\n                 // Part of `box expr`, we should've errored\n@@ -355,40 +357,42 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                 TerminatorKind::FalseUnwind { .. } => None,\n \n                 TerminatorKind::Return => {\n-                    // Check for unused values. This usually means\n-                    // there are extra statements in the AST.\n-                    for temp in mir.temps_iter() {\n-                        if self.temp_qualif[temp].is_none() {\n-                            continue;\n-                        }\n-\n-                        let state = self.temp_promotion_state[temp];\n-                        if let TempState::Defined { location, uses: 0 } = state {\n-                            let data = &mir[location.block];\n-                            let stmt_idx = location.statement_index;\n-\n-                            // Get the span for the initialization.\n-                            let source_info = if stmt_idx < data.statements.len() {\n-                                data.statements[stmt_idx].source_info\n-                            } else {\n-                                data.terminator().source_info\n-                            };\n-                            self.span = source_info.span;\n+                    if !self.tcx.sess.features_untracked().const_let {\n+                        // Check for unused values. This usually means\n+                        // there are extra statements in the AST.\n+                        for temp in mir.temps_iter() {\n+                            if self.local_qualif[temp].is_none() {\n+                                continue;\n+                            }\n \n-                            // Treat this as a statement in the AST.\n-                            self.statement_like();\n+                            let state = self.temp_promotion_state[temp];\n+                            if let TempState::Defined { location, uses: 0 } = state {\n+                                let data = &mir[location.block];\n+                                let stmt_idx = location.statement_index;\n+\n+                                // Get the span for the initialization.\n+                                let source_info = if stmt_idx < data.statements.len() {\n+                                    data.statements[stmt_idx].source_info\n+                                } else {\n+                                    data.terminator().source_info\n+                                };\n+                                self.span = source_info.span;\n+\n+                                // Treat this as a statement in the AST.\n+                                self.statement_like();\n+                            }\n                         }\n-                    }\n \n-                    // Make sure there are no extra unassigned variables.\n-                    self.qualif = Qualif::NOT_CONST;\n-                    for index in mir.vars_iter() {\n-                        if !self.const_fn_arg_vars.contains(index.index()) {\n-                            debug!(\"unassigned variable {:?}\", index);\n-                            self.assign(&Place::Local(index), Location {\n-                                block: bb,\n-                                statement_index: usize::MAX,\n-                            });\n+                        // Make sure there are no extra unassigned variables.\n+                        self.qualif = Qualif::NOT_CONST;\n+                        for index in mir.vars_iter() {\n+                            if !self.const_fn_arg_vars.contains(index.index()) {\n+                                debug!(\"unassigned variable {:?}\", index);\n+                                self.assign(&Place::Local(index), Location {\n+                                    block: bb,\n+                                    statement_index: usize::MAX,\n+                                });\n+                            }\n                         }\n                     }\n \n@@ -408,7 +412,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             }\n         }\n \n-        self.qualif = self.return_qualif.unwrap_or(Qualif::NOT_CONST);\n+        self.qualif = self.local_qualif[RETURN_PLACE].unwrap_or(Qualif::NOT_CONST);\n \n         // Account for errors in consts by using the\n         // conservative type qualification instead.\n@@ -453,9 +457,15 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             LocalKind::ReturnPointer => {\n                 self.not_const();\n             }\n-            LocalKind::Var => {\n+            LocalKind::Var if !self.tcx.sess.features_untracked().const_let => {\n+                if self.mode != Mode::Fn {\n+                    emit_feature_err(&self.tcx.sess.parse_sess, \"const_let\",\n+                                    self.span, GateIssue::Language,\n+                                    &format!(\"let bindings in {}s are unstable\",self.mode));\n+                }\n                 self.add(Qualif::NOT_CONST);\n             }\n+            LocalKind::Var |\n             LocalKind::Arg |\n             LocalKind::Temp => {\n                 if let LocalKind::Arg = kind {\n@@ -466,7 +476,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     self.add(Qualif::NOT_PROMOTABLE);\n                 }\n \n-                if let Some(qualif) = self.temp_qualif[local] {\n+                if let Some(qualif) = self.local_qualif[local] {\n                     self.add(qualif);\n                 } else {\n                     self.not_const();\n@@ -588,7 +598,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n \n                 // Mark the consumed locals to indicate later drops are noops.\n                 if let Operand::Move(Place::Local(local)) = *operand {\n-                    self.temp_qualif[local] = self.temp_qualif[local].map(|q|\n+                    self.local_qualif[local] = self.local_qualif[local].map(|q|\n                         q - Qualif::NEEDS_DROP\n                     );\n                 }\n@@ -759,7 +769,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     }\n                     if let Place::Local(local) = *place {\n                         if self.mir.local_kind(local) == LocalKind::Temp {\n-                            if let Some(qualif) = self.temp_qualif[local] {\n+                            if let Some(qualif) = self.local_qualif[local] {\n                                 // `forbidden_mut` is false, so we can safely ignore\n                                 // `MUTABLE_INTERIOR` from the local's qualifications.\n                                 // This allows borrowing fields which don't have\n@@ -1033,7 +1043,7 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                 // HACK(eddyb) Emulate a bit of dataflow analysis,\n                 // conservatively, that drop elaboration will do.\n                 let needs_drop = if let Place::Local(local) = *place {\n-                    if self.temp_qualif[local].map_or(true, |q| q.intersects(Qualif::NEEDS_DROP)) {\n+                    if self.local_qualif[local].map_or(true, |q| q.intersects(Qualif::NEEDS_DROP)) {\n                         Some(self.mir.local_decls[local].source_info.span)\n                     } else {\n                         None\n@@ -1070,7 +1080,8 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n         // Check the allowed const fn argument forms.\n         if let (Mode::ConstFn, &Place::Local(index)) = (self.mode, dest) {\n             if self.mir.local_kind(index) == LocalKind::Var &&\n-               self.const_fn_arg_vars.insert(index.index()) {\n+               self.const_fn_arg_vars.insert(index.index()) &&\n+               !self.tcx.sess.features_untracked().const_let {\n \n                 // Direct use of an argument is permitted.\n                 match *rvalue {\n@@ -1086,10 +1097,11 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                 // Avoid a generic error for other uses of arguments.\n                 if self.qualif.intersects(Qualif::FN_ARGUMENT) {\n                     let decl = &self.mir.local_decls[index];\n-                    let mut err = struct_span_err!(\n-                        self.tcx.sess,\n+                    let mut err = feature_err(\n+                        &self.tcx.sess.parse_sess,\n+                        \"const_let\",\n                         decl.source_info.span,\n-                        E0022,\n+                        GateIssue::Language,\n                         \"arguments of constant functions can only be immutable by-value bindings\"\n                     );\n                     if self.tcx.sess.teach(&err.get_code().unwrap()) {"}, {"sha": "3a02646d0af5f133e005761ca1f821739d3d559e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "patch": "@@ -214,6 +214,9 @@ declare_features! (\n     // Allows the definition of `const fn` functions.\n     (active, const_fn, \"1.2.0\", Some(24111), None),\n \n+    // Allows let bindings and destructuring in `const fn` functions and constants.\n+    (active, const_let, \"1.22.1\", Some(48821), None),\n+\n     // Allows using #[prelude_import] on glob `use` items.\n     //\n     // rustc internal"}, {"sha": "f80d55cb342676dd96ec04aef47d924f65a0300f", "filename": "src/test/compile-fail/const-block-non-item-statement-2.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement-2.rs?ref=9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "patch": "@@ -9,18 +9,20 @@\n // except according to those terms.\n \n const A: usize = { 1; 2 };\n-//~^ ERROR: blocks in constants are limited to items and tail expressions\n+//~^ ERROR statements in constants are unstable\n \n const B: usize = { { } 2 };\n-//~^ ERROR: blocks in constants are limited to items and tail expressions\n+//~^ ERROR statements in constants are unstable\n \n macro_rules! foo {\n-    () => (()) //~ ERROR: blocks in constants are limited to items and tail expressions\n+    () => (()) //~ ERROR statements in constants are unstable\n }\n const C: usize = { foo!(); 2 };\n \n const D: usize = { let x = 4; 2 };\n-//~^ ERROR: blocks in constants are limited to items and tail expressions\n-//~^^ ERROR: blocks in constants are limited to items and tail expressions\n+//~^ ERROR let bindings in constants are unstable\n+//~| ERROR statements in constants are unstable\n+//~| ERROR let bindings in constants are unstable\n+//~| ERROR statements in constants are unstable\n \n pub fn main() {}"}, {"sha": "cfa4b778dde80b48324cb17de35c5eebdaa18610", "filename": "src/test/compile-fail/const-block-non-item-statement-3.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement-3.rs?ref=9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "patch": "@@ -9,7 +9,9 @@\n // except according to those terms.\n \n type Array = [u32; {  let x = 2; 5 }];\n-//~^ ERROR: blocks in constants are limited to items and tail expressions\n-//~^^ ERROR: blocks in constants are limited to items and tail expressions\n+//~^ ERROR let bindings in constants are unstable\n+//~| ERROR statements in constants are unstable\n+//~| ERROR let bindings in constants are unstable\n+//~| ERROR statements in constants are unstable\n \n pub fn main() {}"}, {"sha": "f974a24c26f72f40511317056bc0c089e6a5c8f3", "filename": "src/test/compile-fail/const-block-non-item-statement.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs?ref=9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "patch": "@@ -10,8 +10,10 @@\n \n enum Foo {\n     Bar = { let x = 1; 3 }\n-    //~^ ERROR: blocks in constants are limited to items and tail expressions\n-    //~^^ ERROR: blocks in constants are limited to items and tail expressions\n+    //~^ ERROR let bindings in constants are unstable\n+    //~| ERROR statements in constants are unstable\n+    //~| ERROR let bindings in constants are unstable\n+    //~| ERROR statements in constants are unstable\n }\n \n pub fn main() {}"}, {"sha": "fce1688716d30bde6833f9eb01ea0f2a1a326459", "filename": "src/test/compile-fail/const-fn-destructuring-arg.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fcompile-fail%2Fconst-fn-destructuring-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fcompile-fail%2Fconst-fn-destructuring-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-destructuring-arg.rs?ref=9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "patch": "@@ -8,16 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// test that certain things are disallowed in const fn signatures\n+// test that certain things are disallowed in constant functions\n \n #![feature(const_fn)]\n \n // no destructuring\n const fn i((\n-            a, //~ ERROR: E0022\n-            b  //~ ERROR: E0022\n+            a,\n+            //~^ ERROR arguments of constant functions can only be immutable by-value bindings\n+            b\n+            //~^ ERROR arguments of constant functions can only be immutable by-value bindings\n            ): (u32, u32)) -> u32 {\n     a + b\n+    //~^ ERROR let bindings in constant functions are unstable\n+    //~| ERROR let bindings in constant functions are unstable\n }\n \n fn main() {}"}, {"sha": "d985bae1f247706d99279ddcd4877741863435dc", "filename": "src/test/compile-fail/const-fn-not-safe-for-const.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-safe-for-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-safe-for-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-safe-for-const.rs?ref=9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "patch": "@@ -38,9 +38,15 @@ const fn get_Y_addr() -> &'static u32 {\n }\n \n const fn get() -> u32 {\n-    let x = 22; //~ ERROR E0016\n-    let y = 44; //~ ERROR E0016\n+    let x = 22;\n+    //~^ ERROR let bindings in constant functions are unstable\n+    //~| ERROR statements in constant functions are unstable\n+    let y = 44;\n+    //~^ ERROR let bindings in constant functions are unstable\n+    //~| ERROR statements in constant functions are unstable\n     x + y\n+    //~^ ERROR let bindings in constant functions are unstable\n+    //~| ERROR let bindings in constant functions are unstable\n }\n \n fn main() {"}, {"sha": "7194c159c1e98a79409b7c11ff291cc36f66c68d", "filename": "src/test/compile-fail/issue-18118.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fcompile-fail%2Fissue-18118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fcompile-fail%2Fissue-18118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18118.rs?ref=9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "patch": "@@ -10,9 +10,12 @@\n \n pub fn main() {\n     const z: &'static isize = {\n-        //~^ ERROR blocks in constants are limited to items and tail expressions\n+        //~^ ERROR let bindings in constants are unstable\n+        //~| ERROR statements in constants are unstable\n         let p = 3;\n-        //~^ ERROR blocks in constants are limited to items and tail expressions\n+        //~^ ERROR let bindings in constants are unstable\n+        //~| ERROR statements in constants are unstable\n         &p //~ ERROR `p` does not live long enough\n+        //~^ ERROR let bindings in constants are unstable\n     };\n }"}, {"sha": "af1f6ef5ed4ac041b9390958671d159c4593f269", "filename": "src/test/compile-fail/issue-37550.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fcompile-fail%2Fissue-37550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fcompile-fail%2Fissue-37550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-37550.rs?ref=9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "patch": "@@ -11,8 +11,12 @@\n #![feature(const_fn)]\n \n const fn x() {\n-    let t = true; //~ ERROR blocks in constant functions are limited to items and tail expressions\n-    let x = || t; //~ ERROR blocks in constant functions are limited to items and tail expressions\n+    let t = true;\n+    //~^ ERROR let bindings in constant functions are unstable\n+    //~| ERROR statements in constant functions are unstable\n+    let x = || t;\n+    //~^ ERROR let bindings in constant functions are unstable\n+    //~| ERROR statements in constant functions are unstable\n }\n \n fn main() {}"}, {"sha": "2b223bac8e67b7d849f19e6387a916c404878107", "filename": "src/test/compile-fail/issue32829.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fcompile-fail%2Fissue32829.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fcompile-fail%2Fissue32829.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue32829.rs?ref=9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "patch": "@@ -14,15 +14,16 @@\n \n const bad : u32 = {\n     {\n-        5; //~ ERROR: blocks in constants are limited to items and tail expressions\n+        5;\n+        //~^ ERROR statements in constants are unstable\n         0\n     }\n };\n \n const bad_two : u32 = {\n     {\n         invalid();\n-        //~^ ERROR: blocks in constants are limited to items and tail expressions\n+        //~^ ERROR statements in constants are unstable\n         //~^^ ERROR: calls in constants are limited to constant functions, tuple structs and tuple variants\n         0\n     }\n@@ -31,55 +32,57 @@ const bad_two : u32 = {\n const bad_three : u32 = {\n     {\n         valid();\n-        //~^ ERROR: blocks in constants are limited to items and tail expressions\n+        //~^ ERROR statements in constants are unstable\n         0\n     }\n };\n \n static bad_four : u32 = {\n     {\n-        5; //~ ERROR: blocks in statics are limited to items and tail expressions\n+        5;\n+        //~^ ERROR statements in statics are unstable\n         0\n     }\n };\n \n static bad_five : u32 = {\n     {\n         invalid();\n-        //~^ ERROR: blocks in statics are limited to items and tail expressions\n-        //~^^ ERROR: calls in statics are limited to constant functions, tuple structs and tuple variants\n+        //~^ ERROR: calls in statics are limited to constant functions, tuple structs and tuple variants\n+        //~| ERROR statements in statics are unstable\n         0\n     }\n };\n \n static bad_six : u32 = {\n     {\n         valid();\n-        //~^ ERROR: blocks in statics are limited to items and tail expressions\n+        //~^ ERROR statements in statics are unstable\n         0\n     }\n };\n \n static mut bad_seven : u32 = {\n     {\n-        5; //~ ERROR: blocks in statics are limited to items and tail expressions\n+        5;\n+        //~^ ERROR statements in statics are unstable\n         0\n     }\n };\n \n static mut bad_eight : u32 = {\n     {\n         invalid();\n-        //~^ ERROR: blocks in statics are limited to items and tail expressions\n-        //~^^ ERROR: calls in statics are limited to constant functions, tuple structs and tuple variants\n+        //~^ ERROR statements in statics are unstable\n+        //~| ERROR: calls in statics are limited to constant functions, tuple structs and tuple variants\n         0\n     }\n };\n \n static mut bad_nine : u32 = {\n     {\n         valid();\n-        //~^ ERROR: blocks in statics are limited to items and tail expressions\n+        //~^ ERROR statements in statics are unstable\n         0\n     }\n };"}, {"sha": "e233107169c75828609e147536766195843c158b", "filename": "src/test/run-pass/ctfe/const-block-non-item-statement-3.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement-3.rs?ref=9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_let)]\n+\n+type Array = [u32; {  let x = 2; 5 }];\n+\n+pub fn main() {}"}, {"sha": "b5a9bfb45a1b41f72edcef3d2369f858c0c16062", "filename": "src/test/run-pass/ctfe/const-block-non-item-statement.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement.rs?ref=9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_let)]\n+\n+enum Foo {\n+    Bar = { let x = 1; 3 }\n+}\n+\n+pub fn main() {}"}, {"sha": "8b832976aab0e1128e105a89d36a455f0d40d1c0", "filename": "src/test/run-pass/ctfe/const-fn-destructuring-arg.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-fn-destructuring-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-fn-destructuring-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-fn-destructuring-arg.rs?ref=9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// test that certain things are disallowed in constant functions\n+\n+#![feature(const_fn, const_let)]\n+\n+// no destructuring\n+const fn i((\n+            a,\n+            b\n+           ): (u32, u32)) -> u32 {\n+    a + b\n+}\n+\n+fn main() {}"}, {"sha": "27796a5feea289d40317667b1d8481fc16d401db", "filename": "src/test/run-pass/ctfe/issue-37550.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Frun-pass%2Fctfe%2Fissue-37550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Frun-pass%2Fctfe%2Fissue-37550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fissue-37550.rs?ref=9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_fn, const_let)]\n+\n+const fn x() {\n+    let t = true;\n+    let x = || t;\n+}\n+\n+fn main() {}"}, {"sha": "8c153315c25aab50cc537621985d62db87ea66d7", "filename": "src/test/run-pass/ctfe/locals-in-const-fn.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Frun-pass%2Fctfe%2Flocals-in-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Frun-pass%2Fctfe%2Flocals-in-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Flocals-in-const-fn.rs?ref=9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// https://github.com/rust-lang/rust/issues/48821\n+\n+#![feature(const_fn, const_let)]\n+\n+const fn foo(i: usize) -> usize {\n+    let x = i;\n+    x\n+}\n+\n+static FOO: usize = foo(42);\n+\n+const fn bar(mut i: usize) -> usize {\n+    i += 8;\n+    let x = &i;\n+    *x\n+}\n+\n+static BAR: usize = bar(42);\n+\n+const fn boo(mut i: usize) -> usize {\n+    {\n+        let mut x = i;\n+        x += 10;\n+        i = x;\n+    }\n+    i\n+}\n+\n+static BOO: usize = boo(42);\n+\n+fn main() {\n+    assert!(FOO == 42);\n+    assert!(BAR == 50);\n+    assert!(BOO == 52);\n+}"}, {"sha": "602d4da24f3836c6760463224762b24e0ccaa6b8", "filename": "src/test/ui/const-eval/const_let.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fui%2Fconst-eval%2Fconst_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fui%2Fconst-eval%2Fconst_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconst_let.rs?ref=9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_let)]\n+\n+fn main() {}\n+\n+struct FakeNeedsDrop;\n+\n+impl Drop for FakeNeedsDrop {\n+    fn drop(&mut self) {}\n+}\n+\n+// ok\n+const X: FakeNeedsDrop = { let x = FakeNeedsDrop; x };\n+\n+// error\n+const Y: FakeNeedsDrop = { let mut x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n+//~^ ERROR constant contains unimplemented expression type\n+\n+// error\n+const Z: () = { let mut x = None; x = Some(FakeNeedsDrop); };\n+//~^ ERROR constant contains unimplemented expression type"}, {"sha": "86e3482fda6b949b6c270ad4f48c4c005851e581", "filename": "src/test/ui/const-eval/const_let.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fui%2Fconst-eval%2Fconst_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fui%2Fconst-eval%2Fconst_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconst_let.stderr?ref=9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "patch": "@@ -0,0 +1,15 @@\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/const_let.rs:25:55\n+   |\n+LL | const Y: FakeNeedsDrop = { let mut x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n+   |                                                       ^\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/const_let.rs:29:35\n+   |\n+LL | const Z: () = { let mut x = None; x = Some(FakeNeedsDrop); };\n+   |                                   ^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0019`."}, {"sha": "17dc9f94fe19c80c4ed26e877e121b5b34e43c3e", "filename": "src/test/ui/const-fn-error.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fui%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fui%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-error.rs?ref=9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "patch": "@@ -14,7 +14,8 @@ const X : usize = 2;\n \n const fn f(x: usize) -> usize {\n     let mut sum = 0;\n-    //~^ ERROR E0016\n+    //~^ let bindings in constant functions are unstable\n+    //~| statements in constant functions are unstable\n     for i in 0..x {\n         //~^ ERROR E0015\n         //~| ERROR E0019"}, {"sha": "29edc2756afff2fa1978f8bd26c7f154111abef6", "filename": "src/test/ui/const-fn-error.stderr", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-error.stderr?ref=9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "patch": "@@ -1,23 +1,33 @@\n-error[E0016]: blocks in constant functions are limited to items and tail expressions\n+error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n   --> $DIR/const-fn-error.rs:16:19\n    |\n LL |     let mut sum = 0;\n    |                   ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in constant functions are unstable (see issue #48821)\n+  --> $DIR/const-fn-error.rs:16:19\n+   |\n+LL |     let mut sum = 0;\n+   |                   ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n \n error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/const-fn-error.rs:18:14\n+  --> $DIR/const-fn-error.rs:19:14\n    |\n LL |     for i in 0..x {\n    |              ^^^^\n \n error[E0019]: constant function contains unimplemented expression type\n-  --> $DIR/const-fn-error.rs:18:14\n+  --> $DIR/const-fn-error.rs:19:14\n    |\n LL |     for i in 0..x {\n    |              ^^^^\n \n error[E0080]: constant evaluation error\n-  --> $DIR/const-fn-error.rs:18:14\n+  --> $DIR/const-fn-error.rs:19:14\n    |\n LL |     for i in 0..x {\n    |              ^^^^ calling non-const fn `<I as std::iter::IntoIterator><std::ops::Range<usize>>::into_iter`\n@@ -26,12 +36,12 @@ LL |     let a : [i32; f(X)];\n    |                   ---- inside call to `f`\n    |\n note: for constant expression here\n-  --> $DIR/const-fn-error.rs:29:13\n+  --> $DIR/const-fn-error.rs:30:13\n    |\n LL |     let a : [i32; f(X)];\n    |             ^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors occurred: E0015, E0016, E0019, E0080.\n+Some errors occurred: E0015, E0019, E0080, E0658.\n For more information about an error, try `rustc --explain E0015`."}, {"sha": "05d02e62bc8710d44876e3286780808c2eb68538", "filename": "src/test/ui/feature-gate-const_let.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fui%2Ffeature-gate-const_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fui%2Ffeature-gate-const_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-const_let.rs?ref=9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test use of const let without feature gate.\n+\n+#![feature(const_fn)]\n+\n+const fn foo() -> usize {\n+    let x = 42;\n+    //~^ ERROR statements in constant functions are unstable\n+    //~| ERROR: let bindings in constant functions are unstable\n+    42\n+}\n+\n+fn main() {}"}, {"sha": "6a7f6255678ff2ac117e1ec1481a7107accfe926", "filename": "src/test/ui/feature-gate-const_let.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fui%2Ffeature-gate-const_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9/src%2Ftest%2Fui%2Ffeature-gate-const_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-const_let.stderr?ref=9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "patch": "@@ -0,0 +1,19 @@\n+error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n+  --> $DIR/feature-gate-const_let.rs:16:13\n+   |\n+LL |     let x = 42;\n+   |             ^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in constant functions are unstable (see issue #48821)\n+  --> $DIR/feature-gate-const_let.rs:16:13\n+   |\n+LL |     let x = 42;\n+   |             ^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}]}