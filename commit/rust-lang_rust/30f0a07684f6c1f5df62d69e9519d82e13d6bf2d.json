{"sha": "30f0a07684f6c1f5df62d69e9519d82e13d6bf2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZjBhMDc2ODRmNmMxZjVkZjYyZDY5ZTk1MTlkODJlMTNkNmJmMmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-18T20:51:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-18T20:51:22Z"}, "message": "Auto merge of #75516 - matklad:remove-deprecation, r=petrochenkov\n\nPromote missing_fragment_specifier to hard error\n\nIt has been deny_by_default since 2017 (and warned for some time\nbefore that), so it seems reasonable to promote it.\n\nThe specific technical motivation to do this now is to remove a field\nfrom `ParseSess` -- it is a global state, and global state makes\nextracting libraries annoying.\n\nCloses #40107", "tree": {"sha": "5e79e29bbd20870170f2f5e2c7d10829497feaf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e79e29bbd20870170f2f5e2c7d10829497feaf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d", "html_url": "https://github.com/rust-lang/rust/commit/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be97d13ffc41961c018c313e909f76ba3bbdc958", "url": "https://api.github.com/repos/rust-lang/rust/commits/be97d13ffc41961c018c313e909f76ba3bbdc958", "html_url": "https://github.com/rust-lang/rust/commit/be97d13ffc41961c018c313e909f76ba3bbdc958"}, {"sha": "eb4d6b520b3e75c7e93f1ea13f1a45eda0687b4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb4d6b520b3e75c7e93f1ea13f1a45eda0687b4e", "html_url": "https://github.com/rust-lang/rust/commit/eb4d6b520b3e75c7e93f1ea13f1a45eda0687b4e"}], "stats": {"total": 167, "additions": 41, "deletions": 126}, "files": [{"sha": "55714f8f4548b8b221bcf951012685a6c562cc76", "filename": "src/doc/rustc/src/lints/listing/deny-by-default.md", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md?ref=30f0a07684f6c1f5df62d69e9519d82e13d6bf2d", "patch": "@@ -45,15 +45,6 @@ error: defaults for type parameters are only allowed in `struct`, `enum`, `type`\n   = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n ```\n \n-## missing-fragment-specifier\n-\n-The missing_fragment_specifier warning is issued when an unused pattern in a\n-`macro_rules!` macro definition has a meta-variable (e.g. `$e`) that is not\n-followed by a fragment specifier (e.g. `:expr`).\n-\n-This warning can always be fixed by removing the unused pattern in the\n-`macro_rules!` macro definition.\n-\n ## mutable-transmutes\n \n This lint catches transmuting from `&T` to `&mut T` because it is undefined"}, {"sha": "e9e6fc5af223089b9c08d6830d4dea348073e2d4", "filename": "src/librustc_expand/mbe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Flibrustc_expand%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Flibrustc_expand%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe.rs?ref=30f0a07684f6c1f5df62d69e9519d82e13d6bf2d", "patch": "@@ -84,7 +84,7 @@ enum TokenTree {\n     /// e.g., `$var`\n     MetaVar(Span, Ident),\n     /// e.g., `$var:expr`. This is only used in the left hand side of MBE macros.\n-    MetaVarDecl(Span, Ident /* name to bind */, Option<NonterminalKind>),\n+    MetaVarDecl(Span, Ident /* name to bind */, NonterminalKind),\n }\n \n impl TokenTree {"}, {"sha": "92a8f231126797c77d1a2471dbfbdaf9c5aa3880", "filename": "src/librustc_expand/mbe/macro_parser.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs?ref=30f0a07684f6c1f5df62d69e9519d82e13d6bf2d", "patch": "@@ -378,11 +378,6 @@ fn nameize<I: Iterator<Item = NamedMatch>>(\n                     n_rec(sess, next_m, res.by_ref(), ret_val)?;\n                 }\n             }\n-            TokenTree::MetaVarDecl(span, _, None) => {\n-                if sess.missing_fragment_specifiers.borrow_mut().remove(&span).is_some() {\n-                    return Err((span, \"missing fragment specifier\".to_string()));\n-                }\n-            }\n             TokenTree::MetaVarDecl(sp, bind_name, _) => match ret_val\n                 .entry(MacroRulesNormalizedIdent::new(bind_name))\n             {\n@@ -442,7 +437,6 @@ fn token_name_eq(t1: &Token, t2: &Token) -> bool {\n ///\n /// A `ParseResult`. Note that matches are kept track of through the items generated.\n fn inner_parse_loop<'root, 'tt>(\n-    sess: &ParseSess,\n     cur_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,\n     next_items: &mut Vec<MatcherPosHandle<'root, 'tt>>,\n     eof_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,\n@@ -560,16 +554,9 @@ fn inner_parse_loop<'root, 'tt>(\n                     })));\n                 }\n \n-                // We need to match a metavar (but the identifier is invalid)... this is an error\n-                TokenTree::MetaVarDecl(span, _, None) => {\n-                    if sess.missing_fragment_specifiers.borrow_mut().remove(&span).is_some() {\n-                        return Error(span, \"missing fragment specifier\".to_string());\n-                    }\n-                }\n-\n                 // We need to match a metavar with a valid ident... call out to the black-box\n                 // parser by adding an item to `bb_items`.\n-                TokenTree::MetaVarDecl(_, _, Some(kind)) => {\n+                TokenTree::MetaVarDecl(_, _, kind) => {\n                     // Built-in nonterminals never start with these tokens,\n                     // so we can eliminate them from consideration.\n                     if Parser::nonterminal_may_begin_with(kind, token) {\n@@ -640,7 +627,6 @@ pub(super) fn parse_tt(parser: &mut Cow<'_, Parser<'_>>, ms: &[TokenTree]) -> Na\n         // parsing from the black-box parser done. The result is that `next_items` will contain a\n         // bunch of possible next matcher positions in `next_items`.\n         match inner_parse_loop(\n-            parser.sess,\n             &mut cur_items,\n             &mut next_items,\n             &mut eof_items,\n@@ -702,7 +688,7 @@ pub(super) fn parse_tt(parser: &mut Cow<'_, Parser<'_>>, ms: &[TokenTree]) -> Na\n             let nts = bb_items\n                 .iter()\n                 .map(|item| match item.top_elts.get_tt(item.idx) {\n-                    TokenTree::MetaVarDecl(_, bind, Some(kind)) => format!(\"{} ('{}')\", kind, bind),\n+                    TokenTree::MetaVarDecl(_, bind, kind) => format!(\"{} ('{}')\", kind, bind),\n                     _ => panic!(),\n                 })\n                 .collect::<Vec<String>>()\n@@ -732,7 +718,7 @@ pub(super) fn parse_tt(parser: &mut Cow<'_, Parser<'_>>, ms: &[TokenTree]) -> Na\n             assert_eq!(bb_items.len(), 1);\n \n             let mut item = bb_items.pop().unwrap();\n-            if let TokenTree::MetaVarDecl(span, _, Some(kind)) = item.top_elts.get_tt(item.idx) {\n+            if let TokenTree::MetaVarDecl(span, _, kind) = item.top_elts.get_tt(item.idx) {\n                 let match_cur = item.match_cur;\n                 let nt = match parser.to_mut().parse_nonterminal(kind) {\n                     Err(mut err) => {"}, {"sha": "f0e6fe39a3c7fdc28e70c46f407cca2d941e693f", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=30f0a07684f6c1f5df62d69e9519d82e13d6bf2d", "patch": "@@ -400,7 +400,7 @@ pub fn compile_declarative_macro(\n     let diag = &sess.parse_sess.span_diagnostic;\n     let lhs_nm = Ident::new(sym::lhs, def.span);\n     let rhs_nm = Ident::new(sym::rhs, def.span);\n-    let tt_spec = Some(NonterminalKind::TT);\n+    let tt_spec = NonterminalKind::TT;\n \n     // Parse the macro_rules! invocation\n     let (macro_rules, body) = match &def.kind {\n@@ -577,7 +577,7 @@ fn check_lhs_no_empty_seq(sess: &ParseSess, tts: &[mbe::TokenTree]) -> bool {\n             TokenTree::Sequence(span, ref seq) => {\n                 if seq.separator.is_none()\n                     && seq.tts.iter().all(|seq_tt| match *seq_tt {\n-                        TokenTree::MetaVarDecl(_, _, Some(NonterminalKind::Vis)) => true,\n+                        TokenTree::MetaVarDecl(_, _, NonterminalKind::Vis) => true,\n                         TokenTree::Sequence(_, ref sub_seq) => {\n                             sub_seq.kleene.op == mbe::KleeneOp::ZeroOrMore\n                                 || sub_seq.kleene.op == mbe::KleeneOp::ZeroOrOne\n@@ -960,7 +960,7 @@ fn check_matcher_core(\n         // Now `last` holds the complete set of NT tokens that could\n         // end the sequence before SUFFIX. Check that every one works with `suffix`.\n         for token in &last.tokens {\n-            if let TokenTree::MetaVarDecl(_, name, Some(kind)) = *token {\n+            if let TokenTree::MetaVarDecl(_, name, kind) = *token {\n                 for next_token in &suffix_first.tokens {\n                     match is_in_follow(next_token, kind) {\n                         IsInFollow::Yes => {}\n@@ -1018,7 +1018,7 @@ fn check_matcher_core(\n }\n \n fn token_can_be_followed_by_any(tok: &mbe::TokenTree) -> bool {\n-    if let mbe::TokenTree::MetaVarDecl(_, _, Some(kind)) = *tok {\n+    if let mbe::TokenTree::MetaVarDecl(_, _, kind) = *tok {\n         frag_can_be_followed_by_any(kind)\n     } else {\n         // (Non NT's can always be followed by anything in matchers.)\n@@ -1123,7 +1123,7 @@ fn is_in_follow(tok: &mbe::TokenTree, kind: NonterminalKind) -> IsInFollow {\n                         }\n                         _ => IsInFollow::No(TOKENS),\n                     },\n-                    TokenTree::MetaVarDecl(_, _, Some(NonterminalKind::Block)) => IsInFollow::Yes,\n+                    TokenTree::MetaVarDecl(_, _, NonterminalKind::Block) => IsInFollow::Yes,\n                     _ => IsInFollow::No(TOKENS),\n                 }\n             }\n@@ -1158,7 +1158,7 @@ fn is_in_follow(tok: &mbe::TokenTree, kind: NonterminalKind) -> IsInFollow {\n                     TokenTree::MetaVarDecl(\n                         _,\n                         _,\n-                        Some(NonterminalKind::Ident | NonterminalKind::Ty | NonterminalKind::Path),\n+                        NonterminalKind::Ident | NonterminalKind::Ty | NonterminalKind::Path,\n                     ) => IsInFollow::Yes,\n                     _ => IsInFollow::No(TOKENS),\n                 }\n@@ -1171,8 +1171,7 @@ fn quoted_tt_to_string(tt: &mbe::TokenTree) -> String {\n     match *tt {\n         mbe::TokenTree::Token(ref token) => pprust::token_to_string(&token),\n         mbe::TokenTree::MetaVar(_, name) => format!(\"${}\", name),\n-        mbe::TokenTree::MetaVarDecl(_, name, Some(kind)) => format!(\"${}:{}\", name, kind),\n-        mbe::TokenTree::MetaVarDecl(_, name, None) => format!(\"${}:\", name),\n+        mbe::TokenTree::MetaVarDecl(_, name, kind) => format!(\"${}:{}\", name, kind),\n         _ => panic!(\n             \"unexpected mbe::TokenTree::{{Sequence or Delimited}} \\\n              in follow set checker\""}, {"sha": "48db532c78f3061fd52bb4a36be01df7d42164e0", "filename": "src/librustc_expand/mbe/quoted.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs?ref=30f0a07684f6c1f5df62d69e9519d82e13d6bf2d", "patch": "@@ -3,7 +3,7 @@ use crate::mbe::{Delimited, KleeneOp, KleeneToken, SequenceRepetition, TokenTree\n \n use rustc_ast::token::{self, Token};\n use rustc_ast::tokenstream;\n-use rustc_ast::{NodeId, DUMMY_NODE_ID};\n+use rustc_ast::NodeId;\n use rustc_ast_pretty::pprust;\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{kw, Ident};\n@@ -73,7 +73,7 @@ pub(super) fn parse(\n                                                 .emit();\n                                             token::NonterminalKind::Ident\n                                         });\n-                                    result.push(TokenTree::MetaVarDecl(span, ident, Some(kind)));\n+                                    result.push(TokenTree::MetaVarDecl(span, ident, kind));\n                                     continue;\n                                 }\n                                 _ => token.span,\n@@ -83,11 +83,8 @@ pub(super) fn parse(\n                     }\n                     tree => tree.as_ref().map(tokenstream::TokenTree::span).unwrap_or(start_sp),\n                 };\n-                if node_id != DUMMY_NODE_ID {\n-                    // Macros loaded from other crates have dummy node ids.\n-                    sess.missing_fragment_specifiers.borrow_mut().insert(span, node_id);\n-                }\n-                result.push(TokenTree::MetaVarDecl(span, ident, None));\n+                sess.span_diagnostic.struct_span_err(span, \"missing fragment specifier\").emit();\n+                continue;\n             }\n \n             // Not a metavar or no matchers allowed, so just return the tree"}, {"sha": "403aea8b304eb9252f74e6447dbcd3dd81842080", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=30f0a07684f6c1f5df62d69e9519d82e13d6bf2d", "patch": "@@ -30,7 +30,6 @@ use rustc_passes::{self, hir_stats, layout_test};\n use rustc_plugin_impl as plugin;\n use rustc_resolve::{Resolver, ResolverArenas};\n use rustc_session::config::{CrateType, Input, OutputFilenames, OutputType, PpMode, PpSourceMode};\n-use rustc_session::lint;\n use rustc_session::output::{filename_for_input, filename_for_metadata};\n use rustc_session::search_paths::PathKind;\n use rustc_session::Session;\n@@ -307,27 +306,11 @@ fn configure_and_expand_inner<'a>(\n             ecx.check_unused_macros();\n         });\n \n-        let mut missing_fragment_specifiers: Vec<_> = ecx\n-            .sess\n-            .parse_sess\n-            .missing_fragment_specifiers\n-            .borrow()\n-            .iter()\n-            .map(|(span, node_id)| (*span, *node_id))\n-            .collect();\n-        missing_fragment_specifiers.sort_unstable_by_key(|(span, _)| *span);\n-\n-        let recursion_limit_hit = ecx.reduced_recursion_limit.is_some();\n-\n-        for (span, node_id) in missing_fragment_specifiers {\n-            let lint = lint::builtin::MISSING_FRAGMENT_SPECIFIER;\n-            let msg = \"missing fragment specifier\";\n-            resolver.lint_buffer().buffer_lint(lint, node_id, span, msg);\n-        }\n         if cfg!(windows) {\n             env::set_var(\"PATH\", &old_path);\n         }\n \n+        let recursion_limit_hit = ecx.reduced_recursion_limit.is_some();\n         if recursion_limit_hit {\n             // If we hit a recursion limit, exit early to avoid later passes getting overwhelmed\n             // with a large AST"}, {"sha": "2db4d2a7f51d999268035ababcd3adee2161a9ee", "filename": "src/librustc_session/lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint%2Fbuiltin.rs?ref=30f0a07684f6c1f5df62d69e9519d82e13d6bf2d", "patch": "@@ -252,16 +252,6 @@ declare_lint! {\n     };\n }\n \n-declare_lint! {\n-    pub MISSING_FRAGMENT_SPECIFIER,\n-    Deny,\n-    \"detects missing fragment specifiers in unused `macro_rules!` patterns\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #40107 <https://github.com/rust-lang/rust/issues/40107>\",\n-        edition: None,\n-    };\n-}\n-\n declare_lint! {\n     pub LATE_BOUND_LIFETIME_ARGUMENTS,\n     Warn,\n@@ -584,7 +574,6 @@ declare_lint_pass! {\n         UNALIGNED_REFERENCES,\n         SAFE_PACKED_BORROWS,\n         PATTERNS_IN_FNS_WITHOUT_BODY,\n-        MISSING_FRAGMENT_SPECIFIER,\n         LATE_BOUND_LIFETIME_ARGUMENTS,\n         ORDER_DEPENDENT_TRAIT_OBJECTS,\n         COHERENCE_LEAK_CHECK,"}, {"sha": "6f10d0c4b89ea6ecd5346438fa641713e3f7b6f9", "filename": "src/librustc_session/parse.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=30f0a07684f6c1f5df62d69e9519d82e13d6bf2d", "patch": "@@ -119,7 +119,6 @@ pub struct ParseSess {\n     pub unstable_features: UnstableFeatures,\n     pub config: CrateConfig,\n     pub edition: Edition,\n-    pub missing_fragment_specifiers: Lock<FxHashMap<Span, NodeId>>,\n     /// Places where raw identifiers were used. This is used for feature-gating raw identifiers.\n     pub raw_identifier_spans: Lock<Vec<Span>>,\n     /// Used to determine and report recursive module inclusions.\n@@ -154,7 +153,6 @@ impl ParseSess {\n             unstable_features: UnstableFeatures::from_environment(),\n             config: FxHashSet::default(),\n             edition: ExpnId::root().expn_data().edition,\n-            missing_fragment_specifiers: Default::default(),\n             raw_identifier_spans: Lock::new(Vec::new()),\n             included_mod_stack: Lock::new(vec![]),\n             source_map,"}, {"sha": "d2f2a823c2a6b47af00eb8b0d3aed999abb2831a", "filename": "src/test/ui/issues/issue-39404.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be97d13ffc41961c018c313e909f76ba3bbdc958/src%2Ftest%2Fui%2Fissues%2Fissue-39404.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be97d13ffc41961c018c313e909f76ba3bbdc958/src%2Ftest%2Fui%2Fissues%2Fissue-39404.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39404.stderr?ref=be97d13ffc41961c018c313e909f76ba3bbdc958", "patch": "@@ -1,12 +0,0 @@\n-error: missing fragment specifier\n-  --> $DIR/issue-39404.rs:3:19\n-   |\n-LL | macro_rules! m { ($i) => {} }\n-   |                   ^^\n-   |\n-   = note: `#[deny(missing_fragment_specifier)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #40107 <https://github.com/rust-lang/rust/issues/40107>\n-\n-error: aborting due to previous error\n-"}, {"sha": "c98ecc980dd3d6a17268c72dc32dbb1ebe2d76e6", "filename": "src/test/ui/lint/expansion-time.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Ftest%2Fui%2Flint%2Fexpansion-time.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Ftest%2Fui%2Flint%2Fexpansion-time.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fexpansion-time.rs?ref=30f0a07684f6c1f5df62d69e9519d82e13d6bf2d", "patch": "@@ -5,10 +5,6 @@ macro_rules! foo {\n     ( $($i:ident)* ) => { $($i)+ }; //~ WARN meta-variable repeats with different Kleene operator\n }\n \n-#[warn(missing_fragment_specifier)]\n-macro_rules! m { ($i) => {} } //~ WARN missing fragment specifier\n-                              //~| WARN this was previously accepted\n-\n #[warn(soft_unstable)]\n mod benches {\n     #[bench] //~ WARN use of unstable library feature 'test'"}, {"sha": "bc48d64e7e6b7b47150f1f6019dcbbc0a1a51f06", "filename": "src/test/ui/lint/expansion-time.stderr", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Ftest%2Fui%2Flint%2Fexpansion-time.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Ftest%2Fui%2Flint%2Fexpansion-time.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fexpansion-time.stderr?ref=30f0a07684f6c1f5df62d69e9519d82e13d6bf2d", "patch": "@@ -12,28 +12,14 @@ note: the lint level is defined here\n LL | #[warn(meta_variable_misuse)]\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n-warning: missing fragment specifier\n-  --> $DIR/expansion-time.rs:9:19\n-   |\n-LL | macro_rules! m { ($i) => {} }\n-   |                   ^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/expansion-time.rs:8:8\n-   |\n-LL | #[warn(missing_fragment_specifier)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #40107 <https://github.com/rust-lang/rust/issues/40107>\n-\n warning: use of unstable library feature 'test': `bench` is a part of custom test frameworks which are unstable\n-  --> $DIR/expansion-time.rs:14:7\n+  --> $DIR/expansion-time.rs:10:7\n    |\n LL |     #[bench]\n    |       ^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/expansion-time.rs:12:8\n+  --> $DIR/expansion-time.rs:8:8\n    |\n LL | #[warn(soft_unstable)]\n    |        ^^^^^^^^^^^^^\n@@ -47,10 +33,10 @@ LL | 2\n    | ^\n    |\n note: the lint level is defined here\n-  --> $DIR/expansion-time.rs:19:8\n+  --> $DIR/expansion-time.rs:15:8\n    |\n LL | #[warn(incomplete_include)]\n    |        ^^^^^^^^^^^^^^^^^^\n \n-warning: 4 warnings emitted\n+warning: 3 warnings emitted\n "}, {"sha": "054958ba00b8db227dca1df607abf3022eac54bc", "filename": "src/test/ui/macros/issue-39404.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Ftest%2Fui%2Fmacros%2Fissue-39404.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Ftest%2Fui%2Fmacros%2Fissue-39404.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-39404.rs?ref=30f0a07684f6c1f5df62d69e9519d82e13d6bf2d", "patch": "@@ -2,6 +2,5 @@\n \n macro_rules! m { ($i) => {} }\n //~^ ERROR missing fragment specifier\n-//~| WARN previously accepted\n \n fn main() {}", "previous_filename": "src/test/ui/issues/issue-39404.rs"}, {"sha": "645f06e59d8176be382d166d2f20d4ac9fab478d", "filename": "src/test/ui/macros/issue-39404.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Ftest%2Fui%2Fmacros%2Fissue-39404.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Ftest%2Fui%2Fmacros%2Fissue-39404.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-39404.stderr?ref=30f0a07684f6c1f5df62d69e9519d82e13d6bf2d", "patch": "@@ -0,0 +1,8 @@\n+error: missing fragment specifier\n+  --> $DIR/issue-39404.rs:3:19\n+   |\n+LL | macro_rules! m { ($i) => {} }\n+   |                   ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "6b023e41372745de4ed0e3f1b76ee92a3d574464", "filename": "src/test/ui/macros/macro-match-nonterminal.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Ftest%2Fui%2Fmacros%2Fmacro-match-nonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Ftest%2Fui%2Fmacros%2Fmacro-match-nonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-match-nonterminal.rs?ref=30f0a07684f6c1f5df62d69e9519d82e13d6bf2d", "patch": "@@ -2,7 +2,6 @@ macro_rules! test {\n     ($a, $b) => {\n         //~^ ERROR missing fragment\n         //~| ERROR missing fragment\n-        //~| WARN this was previously accepted\n         ()\n     };\n }"}, {"sha": "334d62812cdab9c4d2a1206143498cfa86709527", "filename": "src/test/ui/macros/macro-match-nonterminal.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Ftest%2Fui%2Fmacros%2Fmacro-match-nonterminal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Ftest%2Fui%2Fmacros%2Fmacro-match-nonterminal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-match-nonterminal.stderr?ref=30f0a07684f6c1f5df62d69e9519d82e13d6bf2d", "patch": "@@ -9,10 +9,6 @@ error: missing fragment specifier\n    |\n LL |     ($a, $b) => {\n    |          ^^\n-   |\n-   = note: `#[deny(missing_fragment_specifier)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #40107 <https://github.com/rust-lang/rust/issues/40107>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cf81f0480a2a7e1a0d880c1c676548781185fea6", "filename": "src/test/ui/parser/macro/issue-33569.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.rs?ref=30f0a07684f6c1f5df62d69e9519d82e13d6bf2d", "patch": "@@ -2,6 +2,7 @@ macro_rules! foo {\n     { $+ } => { //~ ERROR expected identifier, found `+`\n                 //~^ ERROR missing fragment specifier\n         $(x)(y) //~ ERROR expected one of: `*`, `+`, or `?`\n+       //~^ ERROR attempted to repeat an expression containing no syntax variables\n     }\n }\n "}, {"sha": "f54efaa6996f283caef7fa32daebe1fcb8258f40", "filename": "src/test/ui/parser/macro/issue-33569.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.stderr?ref=30f0a07684f6c1f5df62d69e9519d82e13d6bf2d", "patch": "@@ -4,17 +4,23 @@ error: expected identifier, found `+`\n LL |     { $+ } => {\n    |        ^\n \n+error: missing fragment specifier\n+  --> $DIR/issue-33569.rs:2:8\n+   |\n+LL |     { $+ } => {\n+   |        ^\n+\n error: expected one of: `*`, `+`, or `?`\n   --> $DIR/issue-33569.rs:4:13\n    |\n LL |         $(x)(y)\n    |             ^^^\n \n-error: missing fragment specifier\n-  --> $DIR/issue-33569.rs:2:8\n+error: attempted to repeat an expression containing no syntax variables matched as repeating at this depth\n+  --> $DIR/issue-33569.rs:4:10\n    |\n-LL |     { $+ } => {\n-   |        ^\n+LL |         $(x)(y)\n+   |          ^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "269ab8042c070e0ac0393a050127eee586d94a5c", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f0a07684f6c1f5df62d69e9519d82e13d6bf2d/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=30f0a07684f6c1f5df62d69e9519d82e13d6bf2d", "patch": "@@ -29,14 +29,7 @@ const TEST_REPOS: &'static [Test] = &[\n     Test {\n         name: \"tokei\",\n         repo: \"https://github.com/XAMPPRocky/tokei\",\n-        sha: \"5e11c4852fe4aa086b0e4fe5885822fbe57ba928\",\n-        lock: None,\n-        packages: &[],\n-    },\n-    Test {\n-        name: \"treeify\",\n-        repo: \"https://github.com/dzamlo/treeify\",\n-        sha: \"999001b223152441198f117a68fb81f57bc086dd\",\n+        sha: \"a950ff128d5a435a8083b1c7577c0431f98360ca\",\n         lock: None,\n         packages: &[],\n     },"}]}