{"sha": "bbdef0ce59a74aa585186b4987e6f7751e49aea7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZGVmMGNlNTlhNzRhYTU4NTE4NmI0OTg3ZTZmNzc1MWU0OWFlYTc=", "commit": {"author": {"name": "Tshepang Lekhonkhobe", "email": "tshepang@gmail.com", "date": "2016-01-27T19:42:26Z"}, "committer": {"name": "Tshepang Lekhonkhobe", "email": "tshepang@gmail.com", "date": "2016-01-27T19:45:14Z"}, "message": "rustfmt syntax::parse", "tree": {"sha": "83096362580b53c5f29f056ca93e549e5578c18c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83096362580b53c5f29f056ca93e549e5578c18c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbdef0ce59a74aa585186b4987e6f7751e49aea7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbdef0ce59a74aa585186b4987e6f7751e49aea7", "html_url": "https://github.com/rust-lang/rust/commit/bbdef0ce59a74aa585186b4987e6f7751e49aea7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbdef0ce59a74aa585186b4987e6f7751e49aea7/comments", "author": {"login": "tshepang", "id": 588486, "node_id": "MDQ6VXNlcjU4ODQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/588486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshepang", "html_url": "https://github.com/tshepang", "followers_url": "https://api.github.com/users/tshepang/followers", "following_url": "https://api.github.com/users/tshepang/following{/other_user}", "gists_url": "https://api.github.com/users/tshepang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshepang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshepang/subscriptions", "organizations_url": "https://api.github.com/users/tshepang/orgs", "repos_url": "https://api.github.com/users/tshepang/repos", "events_url": "https://api.github.com/users/tshepang/events{/privacy}", "received_events_url": "https://api.github.com/users/tshepang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tshepang", "id": 588486, "node_id": "MDQ6VXNlcjU4ODQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/588486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshepang", "html_url": "https://github.com/tshepang", "followers_url": "https://api.github.com/users/tshepang/followers", "following_url": "https://api.github.com/users/tshepang/following{/other_user}", "gists_url": "https://api.github.com/users/tshepang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshepang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshepang/subscriptions", "organizations_url": "https://api.github.com/users/tshepang/orgs", "repos_url": "https://api.github.com/users/tshepang/repos", "events_url": "https://api.github.com/users/tshepang/events{/privacy}", "received_events_url": "https://api.github.com/users/tshepang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8b18aac12214d7135a083e2e6946aa197185d49", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8b18aac12214d7135a083e2e6946aa197185d49", "html_url": "https://github.com/rust-lang/rust/commit/b8b18aac12214d7135a083e2e6946aa197185d49"}], "stats": {"total": 98, "additions": 49, "deletions": 49}, "files": [{"sha": "96ac9b83d2f2400ceab12f5680a88de399333eb4", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/bbdef0ce59a74aa585186b4987e6f7751e49aea7/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdef0ce59a74aa585186b4987e6f7751e49aea7/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=bbdef0ce59a74aa585186b4987e6f7751e49aea7", "patch": "@@ -22,26 +22,25 @@ impl<'a> Parser<'a> {\n     pub fn parse_outer_attributes(&mut self) -> PResult<'a, Vec<ast::Attribute>> {\n         let mut attrs: Vec<ast::Attribute> = Vec::new();\n         loop {\n-            debug!(\"parse_outer_attributes: self.token={:?}\",\n-                   self.token);\n+            debug!(\"parse_outer_attributes: self.token={:?}\", self.token);\n             match self.token {\n-              token::Pound => {\n-                attrs.push(try!(self.parse_attribute(false)));\n-              }\n-              token::DocComment(s) => {\n-                let attr = ::attr::mk_sugared_doc_attr(\n+                token::Pound => {\n+                    attrs.push(try!(self.parse_attribute(false)));\n+                }\n+                token::DocComment(s) => {\n+                    let attr = ::attr::mk_sugared_doc_attr(\n                     attr::mk_attr_id(),\n                     self.id_to_interned_str(ast::Ident::with_empty_ctxt(s)),\n                     self.span.lo,\n                     self.span.hi\n                 );\n-                if attr.node.style != ast::AttrStyle::Outer {\n-                  return Err(self.fatal(\"expected outer comment\"));\n+                    if attr.node.style != ast::AttrStyle::Outer {\n+                        return Err(self.fatal(\"expected outer comment\"));\n+                    }\n+                    attrs.push(attr);\n+                    self.bump();\n                 }\n-                attrs.push(attr);\n-                self.bump();\n-              }\n-              _ => break\n+                _ => break,\n             }\n         }\n         return Ok(attrs);\n@@ -53,24 +52,27 @@ impl<'a> Parser<'a> {\n     /// attribute\n     pub fn parse_attribute(&mut self, permit_inner: bool) -> PResult<'a, ast::Attribute> {\n         debug!(\"parse_attributes: permit_inner={:?} self.token={:?}\",\n-               permit_inner, self.token);\n+               permit_inner,\n+               self.token);\n         let (span, value, mut style) = match self.token {\n             token::Pound => {\n                 let lo = self.span.lo;\n                 self.bump();\n \n-                if permit_inner { self.expected_tokens.push(TokenType::Token(token::Not)); }\n+                if permit_inner {\n+                    self.expected_tokens.push(TokenType::Token(token::Not));\n+                }\n                 let style = if self.token == token::Not {\n                     self.bump();\n                     if !permit_inner {\n                         let span = self.span;\n-                        self.diagnostic().struct_span_err(span,\n-                                                          \"an inner attribute is not permitted in \\\n-                                                           this context\")\n-                                         .fileline_help(span,\n-                                                        \"place inner attribute at the top of \\\n-                                                         the module or block\")\n-                                         .emit()\n+                        self.diagnostic()\n+                            .struct_span_err(span,\n+                                             \"an inner attribute is not permitted in this context\")\n+                            .fileline_help(span,\n+                                           \"place inner attribute at the top of the module or \\\n+                                            block\")\n+                            .emit()\n                     }\n                     ast::AttrStyle::Inner\n                 } else {\n@@ -92,8 +94,9 @@ impl<'a> Parser<'a> {\n \n         if permit_inner && self.token == token::Semi {\n             self.bump();\n-            self.span_warn(span, \"this inner attribute syntax is deprecated. \\\n-                           The new syntax is `#![foo]`, with a bang and no semicolon\");\n+            self.span_warn(span,\n+                           \"this inner attribute syntax is deprecated. The new syntax is \\\n+                            `#![foo]`, with a bang and no semicolon\");\n             style = ast::AttrStyle::Inner;\n         }\n \n@@ -103,8 +106,8 @@ impl<'a> Parser<'a> {\n                 id: attr::mk_attr_id(),\n                 style: style,\n                 value: value,\n-                is_sugared_doc: false\n-            }\n+                is_sugared_doc: false,\n+            },\n         })\n     }\n \n@@ -139,7 +142,7 @@ impl<'a> Parser<'a> {\n                         break;\n                     }\n                 }\n-                _ => break\n+                _ => break,\n             }\n         }\n         Ok(attrs)\n@@ -150,10 +153,8 @@ impl<'a> Parser<'a> {\n     /// | IDENT meta_seq\n     pub fn parse_meta_item(&mut self) -> PResult<'a, P<ast::MetaItem>> {\n         let nt_meta = match self.token {\n-            token::Interpolated(token::NtMeta(ref e)) => {\n-                Some(e.clone())\n-            }\n-            _ => None\n+            token::Interpolated(token::NtMeta(ref e)) => Some(e.clone()),\n+            _ => None,\n         };\n \n         match nt_meta {\n@@ -176,9 +177,8 @@ impl<'a> Parser<'a> {\n                 match lit.node {\n                     ast::LitStr(..) => {}\n                     _ => {\n-                        self.span_err(\n-                            lit.span,\n-                            \"non-string literals are not allowed in meta-items\");\n+                        self.span_err(lit.span,\n+                                      \"non-string literals are not allowed in meta-items\");\n                     }\n                 }\n                 let hi = self.span.hi;"}, {"sha": "1193224bdb62559e895f8c4e5d4a45dcd7bfc645", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bbdef0ce59a74aa585186b4987e6f7751e49aea7/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdef0ce59a74aa585186b4987e6f7751e49aea7/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=bbdef0ce59a74aa585186b4987e6f7751e49aea7", "patch": "@@ -23,22 +23,22 @@ use ast;\n /// isn't parsed as (if true {...} else {...} | x) | 5\n pub fn expr_requires_semi_to_be_stmt(e: &ast::Expr) -> bool {\n     match e.node {\n-        ast::ExprIf(..)\n-        | ast::ExprIfLet(..)\n-        | ast::ExprMatch(..)\n-        | ast::ExprBlock(_)\n-        | ast::ExprWhile(..)\n-        | ast::ExprWhileLet(..)\n-        | ast::ExprLoop(..)\n-        | ast::ExprForLoop(..) => false,\n-        _ => true\n+        ast::ExprIf(..) |\n+        ast::ExprIfLet(..) |\n+        ast::ExprMatch(..) |\n+        ast::ExprBlock(_) |\n+        ast::ExprWhile(..) |\n+        ast::ExprWhileLet(..) |\n+        ast::ExprLoop(..) |\n+        ast::ExprForLoop(..) => false,\n+        _ => true,\n     }\n }\n \n pub fn expr_is_simple_block(e: &ast::Expr) -> bool {\n     match e.node {\n         ast::ExprBlock(ref block) => block.rules == ast::DefaultBlock,\n-        _ => false\n+        _ => false,\n     }\n }\n \n@@ -50,11 +50,11 @@ pub fn stmt_ends_with_semi(stmt: &ast::Stmt_) -> bool {\n         ast::StmtDecl(ref d, _) => {\n             match d.node {\n                 ast::DeclLocal(_) => true,\n-                ast::DeclItem(_) => false\n+                ast::DeclItem(_) => false,\n             }\n         }\n-        ast::StmtExpr(ref e, _) => { expr_requires_semi_to_be_stmt(e) }\n-        ast::StmtSemi(..) => { false }\n-        ast::StmtMac(..) => { false }\n+        ast::StmtExpr(ref e, _) => expr_requires_semi_to_be_stmt(e),\n+        ast::StmtSemi(..) => false,\n+        ast::StmtMac(..) => false,\n     }\n }"}, {"sha": "060b0b5263765f8e7839edbc31c36dca09ab4365", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbdef0ce59a74aa585186b4987e6f7751e49aea7/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdef0ce59a74aa585186b4987e6f7751e49aea7/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=bbdef0ce59a74aa585186b4987e6f7751e49aea7", "patch": "@@ -16,7 +16,7 @@ use parse::token;\n /// and whether a trailing separator is allowed.\n pub struct SeqSep {\n     pub sep: Option<token::Token>,\n-    pub trailing_sep_allowed: bool\n+    pub trailing_sep_allowed: bool,\n }\n \n pub fn seq_sep_trailing_allowed(t: token::Token) -> SeqSep {"}]}