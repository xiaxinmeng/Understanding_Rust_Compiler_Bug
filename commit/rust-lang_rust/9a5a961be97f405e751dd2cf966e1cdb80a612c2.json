{"sha": "9a5a961be97f405e751dd2cf966e1cdb80a612c2", "node_id": "C_kwDOAAsO6NoAKDlhNWE5NjFiZTk3ZjQwNWU3NTFkZDJjZjk2NmUxY2RiODBhNjEyYzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-09T01:18:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-09T01:18:06Z"}, "message": "Auto merge of #93778 - matthiaskrgr:rollup-yfngdao, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #91950 (Point at type when a `static` `#[global_allocator]` doesn't `impl` `GlobalAlloc`)\n - #92715 (Do not suggest char literal for zero-length strings)\n - #92917 (Don't constrain projection predicates with inference vars in GAT substs)\n - #93206 (Use `NtCreateFile` instead of `NtOpenFile` to open a file)\n - #93732 (add fut/back compat tests for implied trait bounds)\n - #93764 (:arrow_up: rust-analyzer)\n - #93767 (deduplicate `lcnr` in mailmap)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "bbecfb9fa61a950ea9bf47d0d7519591a6456985", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbecfb9fa61a950ea9bf47d0d7519591a6456985"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a5a961be97f405e751dd2cf966e1cdb80a612c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a5a961be97f405e751dd2cf966e1cdb80a612c2", "html_url": "https://github.com/rust-lang/rust/commit/9a5a961be97f405e751dd2cf966e1cdb80a612c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a5a961be97f405e751dd2cf966e1cdb80a612c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc38176793e9e13bb7b70dde4b951d9371017662", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc38176793e9e13bb7b70dde4b951d9371017662", "html_url": "https://github.com/rust-lang/rust/commit/cc38176793e9e13bb7b70dde4b951d9371017662"}, {"sha": "ff3324c1878c293b59b8e4711997e3422402726f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff3324c1878c293b59b8e4711997e3422402726f", "html_url": "https://github.com/rust-lang/rust/commit/ff3324c1878c293b59b8e4711997e3422402726f"}], "stats": {"total": 243, "additions": 210, "deletions": 33}, "files": [{"sha": "d72e6ebcb65fa237194cd68c8ccb2721a4392abe", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a5a961be97f405e751dd2cf966e1cdb80a612c2/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/9a5a961be97f405e751dd2cf966e1cdb80a612c2/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=9a5a961be97f405e751dd2cf966e1cdb80a612c2", "patch": "@@ -173,7 +173,7 @@ Kyle J Strand <batmanaod@gmail.com> <kyle.j.strand@gmail.com>\n Kyle J Strand <batmanaod@gmail.com> <kyle.strand@pieinsurance.com>\n Kyle J Strand <batmanaod@gmail.com> <kyle.strand@rms.com>\n Lauren\u021biu Nicola <lnicola@dend.ro>\n-lcnr <bastian_kauschke@hotmail.de>\n+lcnr <rust@lcnr.de> <bastian_kauschke@hotmail.de>\n Lee Jeffery <leejeffery@gmail.com> Lee Jeffery <lee@leejeffery.co.uk>\n Lee Wondong <wdlee91@gmail.com>\n Lennart Kudling <github@kudling.de>"}, {"sha": "36cfbba45daccb2d521a5419b5c370e6e97293aa", "filename": "compiler/rustc_builtin_macros/src/global_allocator.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9a5a961be97f405e751dd2cf966e1cdb80a612c2/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5a961be97f405e751dd2cf966e1cdb80a612c2/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs?ref=9a5a961be97f405e751dd2cf966e1cdb80a612c2", "patch": "@@ -26,14 +26,14 @@ pub fn expand(\n \n     // Allow using `#[global_allocator]` on an item statement\n     // FIXME - if we get deref patterns, use them to reduce duplication here\n-    let (item, is_stmt) = match &item {\n+    let (item, is_stmt, ty_span) = match &item {\n         Annotatable::Item(item) => match item.kind {\n-            ItemKind::Static(..) => (item, false),\n+            ItemKind::Static(ref ty, ..) => (item, false, ecx.with_def_site_ctxt(ty.span)),\n             _ => return not_static(),\n         },\n         Annotatable::Stmt(stmt) => match &stmt.kind {\n             StmtKind::Item(item_) => match item_.kind {\n-                ItemKind::Static(..) => (item_, true),\n+                ItemKind::Static(ref ty, ..) => (item_, true, ecx.with_def_site_ctxt(ty.span)),\n                 _ => return not_static(),\n             },\n             _ => return not_static(),\n@@ -43,13 +43,14 @@ pub fn expand(\n \n     // Generate a bunch of new items using the AllocFnFactory\n     let span = ecx.with_def_site_ctxt(item.span);\n-    let f = AllocFnFactory { span, kind: AllocatorKind::Global, global: item.ident, cx: ecx };\n+    let f =\n+        AllocFnFactory { span, ty_span, kind: AllocatorKind::Global, global: item.ident, cx: ecx };\n \n     // Generate item statements for the allocator methods.\n     let stmts = ALLOCATOR_METHODS.iter().map(|method| f.allocator_fn(method)).collect();\n \n     // Generate anonymous constant serving as container for the allocator methods.\n-    let const_ty = ecx.ty(span, TyKind::Tup(Vec::new()));\n+    let const_ty = ecx.ty(ty_span, TyKind::Tup(Vec::new()));\n     let const_body = ecx.expr_block(ecx.block(span, stmts));\n     let const_item = ecx.item_const(span, Ident::new(kw::Underscore, span), const_ty, const_body);\n     let const_item = if is_stmt {\n@@ -64,6 +65,7 @@ pub fn expand(\n \n struct AllocFnFactory<'a, 'b> {\n     span: Span,\n+    ty_span: Span,\n     kind: AllocatorKind,\n     global: Ident,\n     cx: &'b ExtCtxt<'a>,\n@@ -97,18 +99,18 @@ impl AllocFnFactory<'_, '_> {\n             self.attrs(),\n             kind,\n         );\n-        self.cx.stmt_item(self.span, item)\n+        self.cx.stmt_item(self.ty_span, item)\n     }\n \n     fn call_allocator(&self, method: Symbol, mut args: Vec<P<Expr>>) -> P<Expr> {\n         let method = self.cx.std_path(&[sym::alloc, sym::GlobalAlloc, method]);\n-        let method = self.cx.expr_path(self.cx.path(self.span, method));\n-        let allocator = self.cx.path_ident(self.span, self.global);\n+        let method = self.cx.expr_path(self.cx.path(self.ty_span, method));\n+        let allocator = self.cx.path_ident(self.ty_span, self.global);\n         let allocator = self.cx.expr_path(allocator);\n-        let allocator = self.cx.expr_addr_of(self.span, allocator);\n+        let allocator = self.cx.expr_addr_of(self.ty_span, allocator);\n         args.insert(0, allocator);\n \n-        self.cx.expr_call(self.span, method, args)\n+        self.cx.expr_call(self.ty_span, method, args)\n     }\n \n     fn attrs(&self) -> Vec<Attribute> {"}, {"sha": "8d41497541a192d5e78ce58621cd9ddd0e33445c", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a5a961be97f405e751dd2cf966e1cdb80a612c2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5a961be97f405e751dd2cf966e1cdb80a612c2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=9a5a961be97f405e751dd2cf966e1cdb80a612c2", "patch": "@@ -2053,7 +2053,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                 if let Some(code) =\n                                     code.strip_prefix('\"').and_then(|s| s.strip_suffix('\"'))\n                                 {\n-                                    if code.chars().nth(1).is_none() {\n+                                    if code.chars().count() == 1 {\n                                         err.span_suggestion(\n                                             span,\n                                             \"if you meant to write a `char` literal, use single quotes\","}, {"sha": "65a18897b39157f5150ddfcf286424219b144422", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a5a961be97f405e751dd2cf966e1cdb80a612c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5a961be97f405e751dd2cf966e1cdb80a612c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=9a5a961be97f405e751dd2cf966e1cdb80a612c2", "patch": "@@ -2473,7 +2473,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     // `T`\n                     substs: self.tcx.mk_substs_trait(\n                         trait_pred.self_ty().skip_binder(),\n-                        self.fresh_substs_for_item(span, item_def_id),\n+                        &self.fresh_substs_for_item(span, item_def_id)[1..],\n                     ),\n                     // `Future::Output`\n                     item_def_id,"}, {"sha": "36cc14610cb4b8d5d7c3a4651f4a619fe9dfeb7b", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a5a961be97f405e751dd2cf966e1cdb80a612c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5a961be97f405e751dd2cf966e1cdb80a612c2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=9a5a961be97f405e751dd2cf966e1cdb80a612c2", "patch": "@@ -1073,6 +1073,16 @@ fn project<'cx, 'tcx>(\n         return Ok(Projected::Progress(Progress::error(selcx.tcx())));\n     }\n \n+    // If the obligation contains any inference types or consts in associated\n+    // type substs, then we don't assemble any candidates.\n+    // This isn't really correct, but otherwise we can end up in a case where\n+    // we constrain inference variables by selecting a single predicate, when\n+    // we need to stay general. See issue #91762.\n+    let (_, predicate_own_substs) = obligation.predicate.trait_ref_and_own_substs(selcx.tcx());\n+    if predicate_own_substs.iter().any(|g| g.has_infer_types_or_consts()) {\n+        return Err(ProjectionError::TooManyCandidates);\n+    }\n+\n     let mut candidates = ProjectionCandidateSet::None;\n \n     // Make sure that the following procedures are kept in order. ParamEnv"}, {"sha": "0b65336a5a7dac2b6d499026dec5ebd7f334a04e", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a5a961be97f405e751dd2cf966e1cdb80a612c2/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5a961be97f405e751dd2cf966e1cdb80a612c2/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=9a5a961be97f405e751dd2cf966e1cdb80a612c2", "patch": "@@ -2044,7 +2044,7 @@ pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n ///\n /// This function currently corresponds to `openat`, `fdopendir`, `unlinkat` and `lstat` functions\n /// on Unix (except for macOS before version 10.10 and REDOX) and the `CreateFileW`,\n-/// `GetFileInformationByHandleEx`, `SetFileInformationByHandle`, and `NtOpenFile` functions on\n+/// `GetFileInformationByHandleEx`, `SetFileInformationByHandle`, and `NtCreateFile` functions on\n /// Windows. Note that, this [may change in the future][changes].\n ///\n /// [changes]: io#platform-specific-behavior"}, {"sha": "dfcd6124454a4f3dc83e9358a0590a26c7a88787", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a5a961be97f405e751dd2cf966e1cdb80a612c2/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5a961be97f405e751dd2cf966e1cdb80a612c2/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=9a5a961be97f405e751dd2cf966e1cdb80a612c2", "patch": "@@ -88,6 +88,7 @@ pub const FILE_SHARE_DELETE: DWORD = 0x4;\n pub const FILE_SHARE_READ: DWORD = 0x1;\n pub const FILE_SHARE_WRITE: DWORD = 0x2;\n \n+pub const FILE_OPEN: ULONG = 0x00000001;\n pub const FILE_OPEN_REPARSE_POINT: ULONG = 0x200000;\n pub const OBJ_DONT_REPARSE: ULONG = 0x1000;\n \n@@ -1228,15 +1229,20 @@ compat_fn! {\n \n compat_fn! {\n     \"ntdll\":\n-    pub fn NtOpenFile(\n+    pub fn NtCreateFile(\n         FileHandle: *mut HANDLE,\n         DesiredAccess: ACCESS_MASK,\n         ObjectAttributes: *const OBJECT_ATTRIBUTES,\n         IoStatusBlock: *mut IO_STATUS_BLOCK,\n+        AllocationSize: *mut i64,\n+        FileAttributes: ULONG,\n         ShareAccess: ULONG,\n-        OpenOptions: ULONG\n+        CreateDisposition: ULONG,\n+        CreateOptions: ULONG,\n+        EaBuffer: *mut c_void,\n+        EaLength: ULONG\n     ) -> NTSTATUS {\n-        panic!(\"`NtOpenFile` not available\");\n+        panic!(\"`NtCreateFile` not available\");\n     }\n     pub fn RtlNtStatusToDosError(\n         Status: NTSTATUS"}, {"sha": "cb83ee2469a1c685f204f704550ca8be42d398de", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9a5a961be97f405e751dd2cf966e1cdb80a612c2/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5a961be97f405e751dd2cf966e1cdb80a612c2/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=9a5a961be97f405e751dd2cf966e1cdb80a612c2", "patch": "@@ -712,11 +712,11 @@ impl<'a> Iterator for DirBuffIter<'a> {\n \n /// Open a link relative to the parent directory, ensure no symlinks are followed.\n fn open_link_no_reparse(parent: &File, name: &[u16], access: u32) -> io::Result<File> {\n-    // This is implemented using the lower level `NtOpenFile` function as\n+    // This is implemented using the lower level `NtCreateFile` function as\n     // unfortunately opening a file relative to a parent is not supported by\n     // win32 functions. It is however a fundamental feature of the NT kernel.\n     //\n-    // See https://docs.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-ntopenfile\n+    // See https://docs.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-ntcreatefile\n     unsafe {\n         let mut handle = ptr::null_mut();\n         let mut io_status = c::IO_STATUS_BLOCK::default();\n@@ -732,14 +732,19 @@ fn open_link_no_reparse(parent: &File, name: &[u16], access: u32) -> io::Result<\n             Attributes: ATTRIBUTES.load(Ordering::Relaxed),\n             ..c::OBJECT_ATTRIBUTES::default()\n         };\n-        let status = c::NtOpenFile(\n+        let status = c::NtCreateFile(\n             &mut handle,\n             access,\n             &object,\n             &mut io_status,\n+            crate::ptr::null_mut(),\n+            0,\n             c::FILE_SHARE_DELETE | c::FILE_SHARE_READ | c::FILE_SHARE_WRITE,\n+            c::FILE_OPEN,\n             // If `name` is a symlink then open the link rather than the target.\n             c::FILE_OPEN_REPARSE_POINT,\n+            crate::ptr::null_mut(),\n+            0,\n         );\n         // Convert an NTSTATUS to the more familiar Win32 error codes (aka \"DosError\")\n         if c::nt_success(status) {"}, {"sha": "c0f6118a9f1639354c2cd6e70bf951821b0ae8cd", "filename": "src/test/ui/allocator/not-an-allocator.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9a5a961be97f405e751dd2cf966e1cdb80a612c2/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a5a961be97f405e751dd2cf966e1cdb80a612c2/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr?ref=9a5a961be97f405e751dd2cf966e1cdb80a612c2", "patch": "@@ -1,40 +1,40 @@\n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n-  --> $DIR/not-an-allocator.rs:2:1\n+  --> $DIR/not-an-allocator.rs:2:11\n    |\n LL | #[global_allocator]\n    | ------------------- in this procedural macro expansion\n LL | static A: usize = 0;\n-   | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n+   |           ^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n-  --> $DIR/not-an-allocator.rs:2:1\n+  --> $DIR/not-an-allocator.rs:2:11\n    |\n LL | #[global_allocator]\n    | ------------------- in this procedural macro expansion\n LL | static A: usize = 0;\n-   | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n+   |           ^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n-  --> $DIR/not-an-allocator.rs:2:1\n+  --> $DIR/not-an-allocator.rs:2:11\n    |\n LL | #[global_allocator]\n    | ------------------- in this procedural macro expansion\n LL | static A: usize = 0;\n-   | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n+   |           ^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n-  --> $DIR/not-an-allocator.rs:2:1\n+  --> $DIR/not-an-allocator.rs:2:11\n    |\n LL | #[global_allocator]\n    | ------------------- in this procedural macro expansion\n LL | static A: usize = 0;\n-   | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n+   |           ^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n    = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "01f99fa448749fdd3a346d844e678c290dec8e73", "filename": "src/test/ui/generic-associated-types/issue-74824.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a5a961be97f405e751dd2cf966e1cdb80a612c2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5a961be97f405e751dd2cf966e1cdb80a612c2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.rs?ref=9a5a961be97f405e751dd2cf966e1cdb80a612c2", "patch": "@@ -17,6 +17,7 @@ impl<T> UnsafeCopy for T {}\n fn main() {\n     let b = Box::new(42usize);\n     let copy = <()>::copy(&b);\n+    //~^ type annotations needed\n \n     let raw_b = Box::deref(&b) as *const _;\n     let raw_copy = Box::deref(&copy) as *const _;"}, {"sha": "e7ebf5964ba4125d0e05d8d54a65d90de213b621", "filename": "src/test/ui/generic-associated-types/issue-74824.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9a5a961be97f405e751dd2cf966e1cdb80a612c2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a5a961be97f405e751dd2cf966e1cdb80a612c2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr?ref=9a5a961be97f405e751dd2cf966e1cdb80a612c2", "patch": "@@ -27,6 +27,13 @@ help: consider restricting type parameter `T`\n LL |     type Copy<T: std::clone::Clone>: Copy = Box<T>;\n    |                +++++++++++++++++++\n \n-error: aborting due to 2 previous errors\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-74824.rs:19:16\n+   |\n+LL |     let copy = <()>::copy(&b);\n+   |                ^^^^^^^^^^ cannot infer type for type parameter `T` declared on the associated function `copy`\n+\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0277, E0282.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "b259a3c6e06bc7248985b19f64f8c4d953cf7ca3", "filename": "src/test/ui/generic-associated-types/issue-91762.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9a5a961be97f405e751dd2cf966e1cdb80a612c2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5a961be97f405e751dd2cf966e1cdb80a612c2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.rs?ref=9a5a961be97f405e751dd2cf966e1cdb80a612c2", "patch": "@@ -0,0 +1,30 @@\n+// check-fail\n+\n+// FIXME(generic_associated_types): We almost certaintly want this to pass, but\n+// it's particularly difficult currently, because we need a way of specifying\n+// that `<Self::Base as Functor>::With<T> = Self` without using that when we have\n+// a `U`. See `https://github.com/rust-lang/rust/pull/92728` for a (hacky)\n+// solution. This might be better to just wait for Chalk.\n+\n+#![feature(generic_associated_types)]\n+\n+pub trait Functor {\n+    type With<T>;\n+\n+    fn fmap<T, U>(this: Self::With<T>) -> Self::With<U>;\n+}\n+\n+pub trait FunctorExt<T>: Sized {\n+    type Base: Functor<With<T> = Self>;\n+\n+    fn fmap<U>(self) {\n+        let arg: <Self::Base as Functor>::With<T>;\n+        let ret: <Self::Base as Functor>::With<U>;\n+\n+        arg = self;\n+        ret = <Self::Base as Functor>::fmap(arg);\n+        //~^ type annotations needed\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a9c465cdd7ea2eb999926995e6d1d43ccd7f8701", "filename": "src/test/ui/generic-associated-types/issue-91762.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a5a961be97f405e751dd2cf966e1cdb80a612c2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a5a961be97f405e751dd2cf966e1cdb80a612c2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.stderr?ref=9a5a961be97f405e751dd2cf966e1cdb80a612c2", "patch": "@@ -0,0 +1,9 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-91762.rs:25:15\n+   |\n+LL |         ret = <Self::Base as Functor>::fmap(arg);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `T` declared on the associated function `fmap`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "d9de73a38efff0bca0b7d3cd867d464d04462d90", "filename": "src/test/ui/implied-bounds/hrlt-implied-trait-bounds-guard.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9a5a961be97f405e751dd2cf966e1cdb80a612c2/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5a961be97f405e751dd2cf966e1cdb80a612c2/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-guard.rs?ref=9a5a961be97f405e751dd2cf966e1cdb80a612c2", "patch": "@@ -0,0 +1,51 @@\n+// A test exploiting the bug behind #25860 except with\n+// implied trait bounds which currently don't exist without `-Zchalk`.\n+use std::marker::PhantomData;\n+struct Foo<'a, 'b, T>(PhantomData<(&'a (), &'b (), T)>)\n+where\n+    T: Convert<'a, 'b>;\n+\n+trait Convert<'a, 'b>: Sized {\n+    fn cast(&'a self) -> &'b Self;\n+}\n+impl<'long: 'short, 'short, T> Convert<'long, 'short> for T {\n+    fn cast(&'long self) -> &'short T {\n+        self\n+    }\n+}\n+\n+// This function will compile once we add implied trait bounds.\n+//\n+// If we're not careful with our impl, the transformations\n+// in `bad` would succeed, which is unsound \u2728\n+//\n+// FIXME: the error is pretty bad, this should say\n+//\n+//     `T: Convert<'in_, 'out>` is not implemented\n+//\n+// help: needed by `Foo<'in_, 'out, T>`\n+//\n+// Please ping @lcnr if your changes end up causing `badboi` to compile.\n+fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ T) -> &'out T {\n+    //~^ ERROR lifetime mismatch\n+    sadness.cast()\n+}\n+\n+fn bad<'short, T>(value: &'short T) -> &'static T {\n+    let x: for<'in_, 'out> fn(Foo<'in_, 'out, T>, &'in_ T) -> &'out T = badboi;\n+    let x: for<'out> fn(Foo<'short, 'out, T>, &'short T) -> &'out T = x;\n+    let x: for<'out> fn(Foo<'static, 'out, T>, &'short T) -> &'out T = x;\n+    let x: fn(Foo<'static, 'static, T>, &'short T) -> &'static T = x;\n+    x(Foo(PhantomData), value)\n+}\n+\n+// Use `bad` to cause a segfault.\n+fn main() {\n+    let mut outer: Option<&'static u32> = Some(&3);\n+    let static_ref: &'static &'static u32 = match outer {\n+        Some(ref reference) => bad(reference),\n+        None => unreachable!(),\n+    };\n+    outer = None;\n+    println!(\"{}\", static_ref);\n+}"}, {"sha": "b020ea64bf46ef6cdacd8eb82ea045de1fec4312", "filename": "src/test/ui/implied-bounds/hrlt-implied-trait-bounds-guard.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a5a961be97f405e751dd2cf966e1cdb80a612c2/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a5a961be97f405e751dd2cf966e1cdb80a612c2/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-guard.stderr?ref=9a5a961be97f405e751dd2cf966e1cdb80a612c2", "patch": "@@ -0,0 +1,12 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/hrlt-implied-trait-bounds-guard.rs:29:29\n+   |\n+LL | fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ T) -> &'out T {\n+   |                             ^^^^^^^^^^^^^^^^^^                       -------\n+   |                             |\n+   |                             this parameter and the return type are declared with different lifetimes...\n+   |                             ...but data from `x` is returned here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "69847d6a8bb53be9140f060fda6950608e42fe70", "filename": "src/test/ui/implied-bounds/hrlt-implied-trait-bounds-roundtrip.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9a5a961be97f405e751dd2cf966e1cdb80a612c2/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5a961be97f405e751dd2cf966e1cdb80a612c2/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-roundtrip.rs?ref=9a5a961be97f405e751dd2cf966e1cdb80a612c2", "patch": "@@ -0,0 +1,35 @@\n+// check-pass\n+struct Foo<'a>(&'a ())\n+where\n+    (): Trait<'a>;\n+\n+trait Trait<'a> {\n+    fn id<T>(value: &'a T) -> &'static T;\n+}\n+\n+impl Trait<'static> for () {\n+    fn id<T>(value: &'static T) -> &'static T {\n+        value\n+    }\n+}\n+\n+fn could_use_implied_bounds<'a, T>(_: Foo<'a>, x: &'a T) -> &'static T\n+where\n+    (): Trait<'a>, // This could be an implied bound\n+{\n+    <()>::id(x)\n+}\n+\n+fn main() {\n+    let bar: for<'a, 'b> fn(Foo<'a>, &'b ()) = |_, _| {};\n+\n+    // If `could_use_implied_bounds` were to use implied bounds,\n+    // keeping 'a late-bound, then we could assign that function\n+    // to this variable.\n+    let bar: for<'a> fn(Foo<'a>, &'a ()) = bar;\n+\n+    // In this case, the subtyping relation here would be unsound,\n+    // allowing us to transmute lifetimes. This currently compiles\n+    // because we incorrectly deal with implied bounds inside of binders.\n+    let _bar: for<'a, 'b> fn(Foo<'a>, &'b ()) = bar;\n+}"}, {"sha": "c29a15025a9c29d27c802af015d131b03c2187c7", "filename": "src/test/ui/inference/char-as-str-multi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a5a961be97f405e751dd2cf966e1cdb80a612c2/src%2Ftest%2Fui%2Finference%2Fchar-as-str-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5a961be97f405e751dd2cf966e1cdb80a612c2/src%2Ftest%2Fui%2Finference%2Fchar-as-str-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fchar-as-str-multi.rs?ref=9a5a961be97f405e751dd2cf966e1cdb80a612c2", "patch": "@@ -1,6 +1,7 @@\n-// When a MULTI-character string literal is used where a char should be,\n+// When a MULTI/NO-character string literal is used where a char should be,\n // DO NOT suggest changing to single quotes.\n \n fn main() {\n     let _: char = \"foo\"; //~ ERROR mismatched types\n+    let _: char = \"\"; //~ ERROR mismatched types\n }"}, {"sha": "297ca2b548f7141d2b90868739dd7f67a06f2c55", "filename": "src/test/ui/inference/char-as-str-multi.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a5a961be97f405e751dd2cf966e1cdb80a612c2/src%2Ftest%2Fui%2Finference%2Fchar-as-str-multi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a5a961be97f405e751dd2cf966e1cdb80a612c2/src%2Ftest%2Fui%2Finference%2Fchar-as-str-multi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fchar-as-str-multi.stderr?ref=9a5a961be97f405e751dd2cf966e1cdb80a612c2", "patch": "@@ -6,6 +6,14 @@ LL |     let _: char = \"foo\";\n    |            |\n    |            expected due to this\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/char-as-str-multi.rs:6:19\n+   |\n+LL |     let _: char = \"\";\n+   |            ----   ^^ expected `char`, found `&str`\n+   |            |\n+   |            expected due to this\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "ba330548023607717295f0dfd61b72eda41aa9dd", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=9a5a961be97f405e751dd2cf966e1cdb80a612c2", "patch": "@@ -1 +1 @@\n-Subproject commit 9700addc82111200a2150b9a796f62dd8e600ddf\n+Subproject commit ba330548023607717295f0dfd61b72eda41aa9dd"}]}