{"sha": "e1b380a675d5ab00ad7230a3823b73abe44cea56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYjM4MGE2NzVkNWFiMDBhZDcyMzBhMzgyM2I3M2FiZTQ0Y2VhNTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-05T22:53:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-05T22:53:48Z"}, "message": "Rollup merge of #70798 - estebank:satisfy, r=Centril\n\n\"cannot resolve\" \u2192 \"cannot satisfy\"\n\nCC #66523\n\nr? @Centril", "tree": {"sha": "581b0cb0cf032c8a47a8c44df1ddf474aaa9f1e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/581b0cb0cf032c8a47a8c44df1ddf474aaa9f1e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1b380a675d5ab00ad7230a3823b73abe44cea56", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeimF8CRBK7hj4Ov3rIwAAdHIIAHMD8h5lqIBCXi76iJX9qmM8\nVTDpO/Q0+8gIp+ieJS6Unn4bSqWo5IKMRPAoKpgky5ekSUf9ho6bQMu0KfgCifoN\nmvwQjUBsno+A1eHy74b498G2ce6t+fk6NGrjqS7fI3gtN6Hxj1j69+P6UUQOpUYd\nC3YtIsbnZBP9BcuwZQtz2mABBmEfr4KvrWZL0a1+wUlBRByq1TV9x1QpWU8u4k+c\ngSdfE+6+r1aAZL41FyrZNFfdNMxZt0FDIa93WYkCu3Ws2XZ3E5WD7s6E2L9/BzXD\nlbTxhFMUHAT0KKoCW5P5Pr+ZjnCy9KtbjRkccsy58LK1oEHsyOWDkZBWSZP3Lak=\n=kIZu\n-----END PGP SIGNATURE-----\n", "payload": "tree 581b0cb0cf032c8a47a8c44df1ddf474aaa9f1e1\nparent 269eeea15d1a754bd26051618dab8e787ab11aa3\nparent 0cd4c8936682896fa321746f7d1993cc4120a264\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1586127228 +0200\ncommitter GitHub <noreply@github.com> 1586127228 +0200\n\nRollup merge of #70798 - estebank:satisfy, r=Centril\n\n\"cannot resolve\" \u2192 \"cannot satisfy\"\n\nCC #66523\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1b380a675d5ab00ad7230a3823b73abe44cea56", "html_url": "https://github.com/rust-lang/rust/commit/e1b380a675d5ab00ad7230a3823b73abe44cea56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1b380a675d5ab00ad7230a3823b73abe44cea56/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "269eeea15d1a754bd26051618dab8e787ab11aa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/269eeea15d1a754bd26051618dab8e787ab11aa3", "html_url": "https://github.com/rust-lang/rust/commit/269eeea15d1a754bd26051618dab8e787ab11aa3"}, {"sha": "0cd4c8936682896fa321746f7d1993cc4120a264", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd4c8936682896fa321746f7d1993cc4120a264", "html_url": "https://github.com/rust-lang/rust/commit/0cd4c8936682896fa321746f7d1993cc4120a264"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "f0a157b377076e82ea1bbad22a3b3524f8e86f22", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e1b380a675d5ab00ad7230a3823b73abe44cea56", "patch": "@@ -1377,7 +1377,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     return;\n                 }\n                 let mut err = self.need_type_info_err(body_id, span, self_ty, ErrorCode::E0283);\n-                err.note(&format!(\"cannot resolve `{}`\", predicate));\n+                err.note(&format!(\"cannot satisfy `{}`\", predicate));\n                 if let ObligationCauseCode::ItemObligation(def_id) = obligation.cause.code {\n                     self.suggest_fully_qualified_path(&mut err, def_id, span, trait_ref.def_id());\n                 } else if let (\n@@ -1407,7 +1407,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         // LL |     const fn const_val<T: Sized>() -> usize {\n                         //    |              --------- - required by this bound in `Tt::const_val`\n                         //    |\n-                        //    = note: cannot resolve `_: Tt`\n+                        //    = note: cannot satisfy `_: Tt`\n \n                         err.span_suggestion_verbose(\n                             span.shrink_to_hi(),\n@@ -1457,7 +1457,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     return;\n                 }\n                 let mut err = self.need_type_info_err(body_id, span, self_ty, ErrorCode::E0284);\n-                err.note(&format!(\"cannot resolve `{}`\", predicate));\n+                err.note(&format!(\"cannot satisfy `{}`\", predicate));\n                 err\n             }\n \n@@ -1469,10 +1469,10 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     self.tcx.sess,\n                     span,\n                     E0284,\n-                    \"type annotations needed: cannot resolve `{}`\",\n+                    \"type annotations needed: cannot satisfy `{}`\",\n                     predicate,\n                 );\n-                err.span_label(span, &format!(\"cannot resolve `{}`\", predicate));\n+                err.span_label(span, &format!(\"cannot satisfy `{}`\", predicate));\n                 err\n             }\n         };"}, {"sha": "34e947030a072ff8b693e7bdc83492721c489c10", "filename": "src/test/ui/associated-const/issue-63496.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.stderr?ref=e1b380a675d5ab00ad7230a3823b73abe44cea56", "patch": "@@ -10,7 +10,7 @@ LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n    |                     cannot infer type\n    |                     help: use the fully qualified path to an implementation: `<Type as A>::C`\n    |\n-   = note: cannot resolve `_: A`\n+   = note: cannot satisfy `_: A`\n    = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n \n error[E0283]: type annotations needed\n@@ -25,7 +25,7 @@ LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n    |                                 cannot infer type\n    |                                 help: use the fully qualified path to an implementation: `<Type as A>::C`\n    |\n-   = note: cannot resolve `_: A`\n+   = note: cannot satisfy `_: A`\n    = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n \n error: aborting due to 2 previous errors"}, {"sha": "98b545c6e0e78de9106c794338dcdc997faabade", "filename": "src/test/ui/associated-item/issue-48027.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr?ref=e1b380a675d5ab00ad7230a3823b73abe44cea56", "patch": "@@ -22,7 +22,7 @@ LL |     fn return_n(&self) -> [u8; Bar::X];\n    |                                cannot infer type\n    |                                help: use the fully qualified path to an implementation: `<Type as Bar>::X`\n    |\n-   = note: cannot resolve `_: Bar`\n+   = note: cannot satisfy `_: Bar`\n    = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n \n error: aborting due to 2 previous errors"}, {"sha": "683a2ab21d9c8e3cf258b61ae11c2c4f922adeba", "filename": "src/test/ui/associated-types/associated-types-overridden-binding.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr?ref=e1b380a675d5ab00ad7230a3823b73abe44cea56", "patch": "@@ -6,7 +6,7 @@ LL | trait Foo: Iterator<Item = i32> {}\n LL | trait Bar: Foo<Item = u32> {}\n    |            ^^^^^^^^^^^^^^^ cannot infer type for type parameter `Self`\n    |\n-   = note: cannot resolve `<Self as std::iter::Iterator>::Item == i32`\n+   = note: cannot satisfy `<Self as std::iter::Iterator>::Item == i32`\n \n error[E0284]: type annotations needed\n   --> $DIR/associated-types-overridden-binding.rs:7:21\n@@ -16,7 +16,7 @@ LL | trait I32Iterator = Iterator<Item = i32>;\n LL | trait U32Iterator = I32Iterator<Item = u32>;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `Self`\n    |\n-   = note: cannot resolve `<Self as std::iter::Iterator>::Item == i32`\n+   = note: cannot satisfy `<Self as std::iter::Iterator>::Item == i32`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2914a7f868b2b2891fab601449013c178952007d", "filename": "src/test/ui/associated-types/associated-types-unconstrained.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr?ref=e1b380a675d5ab00ad7230a3823b73abe44cea56", "patch": "@@ -4,7 +4,7 @@ error[E0284]: type annotations needed\n LL |     let x: isize = Foo::bar();\n    |                    ^^^^^^^^ cannot infer type\n    |\n-   = note: cannot resolve `<_ as Foo>::A == _`\n+   = note: cannot satisfy `<_ as Foo>::A == _`\n \n error: aborting due to previous error\n "}, {"sha": "e95583c91a72f79cf2fb262360cd3557588ce408", "filename": "src/test/ui/error-codes/E0283.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr?ref=e1b380a675d5ab00ad7230a3823b73abe44cea56", "patch": "@@ -7,7 +7,7 @@ LL |     fn create() -> u32;\n LL |     let cont: u32 = Generator::create();\n    |                     ^^^^^^^^^^^^^^^^^ cannot infer type\n    |\n-   = note: cannot resolve `_: Generator`\n+   = note: cannot satisfy `_: Generator`\n \n error: aborting due to previous error\n "}, {"sha": "434c5de2874e00b85d987e25c8ba2580992fe856", "filename": "src/test/ui/issues/issue-12028.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr?ref=e1b380a675d5ab00ad7230a3823b73abe44cea56", "patch": "@@ -4,7 +4,7 @@ error[E0284]: type annotations needed\n LL |         self.input_stream(&mut stream);\n    |              ^^^^^^^^^^^^ cannot infer type for type parameter `H` declared on the trait `StreamHash`\n    |\n-   = note: cannot resolve `<_ as StreamHasher>::S == <H as StreamHasher>::S`\n+   = note: cannot satisfy `<_ as StreamHasher>::S == <H as StreamHasher>::S`\n \n error: aborting due to previous error\n "}, {"sha": "d36d0dad4a196c7fc03bd2692e4932305ddeeec1", "filename": "src/test/ui/issues/issue-21974.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr?ref=e1b380a675d5ab00ad7230a3823b73abe44cea56", "patch": "@@ -7,7 +7,7 @@ LL | trait Foo {\n LL |     where &'a T : Foo,\n    |                   ^^^ cannot infer type for reference `&'a T`\n    |\n-   = note: cannot resolve `&'a T: Foo`\n+   = note: cannot satisfy `&'a T: Foo`\n \n error: aborting due to previous error\n "}, {"sha": "f9338981408b743bb7f291cdd2c1880d6c67f58f", "filename": "src/test/ui/issues/issue-24424.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr?ref=e1b380a675d5ab00ad7230a3823b73abe44cea56", "patch": "@@ -7,7 +7,7 @@ LL |\n LL | impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : Trait0<'l1> {}\n    |                                                         ^^^^^^^^^^^ cannot infer type for type parameter `T0`\n    |\n-   = note: cannot resolve `T0: Trait0<'l0>`\n+   = note: cannot satisfy `T0: Trait0<'l0>`\n \n error: aborting due to previous error\n "}, {"sha": "94aff5963544c59dd8d1cf566976ba31cebe8866", "filename": "src/test/ui/issues/issue-29147.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr?ref=e1b380a675d5ab00ad7230a3823b73abe44cea56", "patch": "@@ -7,7 +7,7 @@ LL | trait Foo { fn xxx(&self); }\n LL |     let _ = <S5<_>>::xxx;\n    |             ^^^^^^^^^^^^ cannot infer type for struct `S5<_>`\n    |\n-   = note: cannot resolve `S5<_>: Foo`\n+   = note: cannot satisfy `S5<_>: Foo`\n \n error: aborting due to previous error\n "}, {"sha": "ca5439e290b75242d1c5e188a2250e622b792a18", "filename": "src/test/ui/issues/issue-54954.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr?ref=e1b380a675d5ab00ad7230a3823b73abe44cea56", "patch": "@@ -13,7 +13,7 @@ LL | const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n LL |     const fn const_val<T: Sized>() -> usize {\n    |              --------- - required by this bound in `Tt::const_val`\n    |\n-   = note: cannot resolve `_: Tt`\n+   = note: cannot satisfy `_: Tt`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-54954.rs:13:15"}, {"sha": "fb31467ec47fa356adc951b8c6ece17c7d8bc380", "filename": "src/test/ui/issues/issue-58022.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr?ref=e1b380a675d5ab00ad7230a3823b73abe44cea56", "patch": "@@ -16,7 +16,7 @@ LL |     fn new(slice: &[u8; Foo::SIZE]) -> Self;\n    |                         cannot infer type\n    |                         help: use the fully qualified path to an implementation: `<Type as Foo>::SIZE`\n    |\n-   = note: cannot resolve `_: Foo`\n+   = note: cannot satisfy `_: Foo`\n    = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n \n error: aborting due to 2 previous errors"}, {"sha": "64d8f685637fb140f6e26fdc3181db028ba74be6", "filename": "src/test/ui/question-mark-type-infer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr?ref=e1b380a675d5ab00ad7230a3823b73abe44cea56", "patch": "@@ -4,7 +4,7 @@ error[E0284]: type annotations needed\n LL |     l.iter().map(f).collect()?\n    |                     ^^^^^^^ cannot infer type\n    |\n-   = note: cannot resolve `<_ as std::ops::Try>::Ok == _`\n+   = note: cannot satisfy `<_ as std::ops::Try>::Ok == _`\n help: consider specifying the type argument in the method call\n    |\n LL |     l.iter().map(f).collect::<B>()?"}, {"sha": "8f20cc5093e114228497435531bced100a68fc16", "filename": "src/test/ui/traits/trait-static-method-generic-inference.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Ftraits%2Ftrait-static-method-generic-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Ftraits%2Ftrait-static-method-generic-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-static-method-generic-inference.stderr?ref=e1b380a675d5ab00ad7230a3823b73abe44cea56", "patch": "@@ -7,7 +7,7 @@ LL |         fn new() -> T;\n LL |     let _f: base::Foo = base::HasNew::new();\n    |                         ^^^^^^^^^^^^^^^^^ cannot infer type\n    |\n-   = note: cannot resolve `_: base::HasNew<base::Foo>`\n+   = note: cannot satisfy `_: base::HasNew<base::Foo>`\n \n error: aborting due to previous error\n "}, {"sha": "b9bf6d79b1c8922b04e873725a043e4fdee2accb", "filename": "src/test/ui/type/type-annotation-needed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs?ref=e1b380a675d5ab00ad7230a3823b73abe44cea56", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     foo(42);\n     //~^ ERROR type annotations needed\n     //~| NOTE cannot infer type\n-    //~| NOTE cannot resolve\n+    //~| NOTE cannot satisfy\n }"}, {"sha": "e6cd7ac3880916b263d5a0d5a4053eb9623faaa9", "filename": "src/test/ui/type/type-annotation-needed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr?ref=e1b380a675d5ab00ad7230a3823b73abe44cea56", "patch": "@@ -7,7 +7,7 @@ LL | fn foo<T: Into<String>>(x: i32) {}\n LL |     foo(42);\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n    |\n-   = note: cannot resolve `_: std::convert::Into<std::string::String>`\n+   = note: cannot satisfy `_: std::convert::Into<std::string::String>`\n help: consider specifying the type argument in the function call\n    |\n LL |     foo::<T>(42);"}, {"sha": "7d81e0ce10c709f7f1d5a9747ab725fa7c252081", "filename": "src/test/ui/type/type-check/issue-40294.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b380a675d5ab00ad7230a3823b73abe44cea56/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr?ref=e1b380a675d5ab00ad7230a3823b73abe44cea56", "patch": "@@ -7,7 +7,7 @@ LL | trait Foo: Sized {\n LL |     where &'a T : Foo,\n    |                   ^^^ cannot infer type for reference `&'a T`\n    |\n-   = note: cannot resolve `&'a T: Foo`\n+   = note: cannot satisfy `&'a T: Foo`\n \n error: aborting due to previous error\n "}]}