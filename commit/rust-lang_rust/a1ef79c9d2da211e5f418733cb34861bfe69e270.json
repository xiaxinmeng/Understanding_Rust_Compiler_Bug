{"sha": "a1ef79c9d2da211e5f418733cb34861bfe69e270", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZWY3OWM5ZDJkYTIxMWU1ZjQxODczM2NiMzQ4NjFiZmU2OWUyNzA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-07T04:55:56Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-07T06:40:32Z"}, "message": "update to use new spawn syntax", "tree": {"sha": "bf203ce1b91d2e512f9055e6fdf70c23a758f3ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf203ce1b91d2e512f9055e6fdf70c23a758f3ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1ef79c9d2da211e5f418733cb34861bfe69e270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1ef79c9d2da211e5f418733cb34861bfe69e270", "html_url": "https://github.com/rust-lang/rust/commit/a1ef79c9d2da211e5f418733cb34861bfe69e270", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1ef79c9d2da211e5f418733cb34861bfe69e270/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a366a9eece3a03712c5cbe98e4e0dba588b99fd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a366a9eece3a03712c5cbe98e4e0dba588b99fd3", "html_url": "https://github.com/rust-lang/rust/commit/a366a9eece3a03712c5cbe98e4e0dba588b99fd3"}], "stats": {"total": 82, "additions": 42, "deletions": 40}, "files": [{"sha": "0ade9b736364ebdbb3bc6603a4838c7902186b4e", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=a1ef79c9d2da211e5f418733cb34861bfe69e270", "patch": "@@ -31,24 +31,23 @@ import core::result;\n import result::{ok, err};\n \n fn fib(n: int) -> int {\n-    fn pfib(args: (chan<int>, int)) {\n-        let (c, n) = args;\n+    fn pfib(c: chan<int>, n: int) {\n         if n == 0 {\n             send(c, 0);\n         } else if n <= 2 {\n             send(c, 1);\n         } else {\n             let p = port();\n-\n-            let t1 = task::spawn((chan(p), n - 1), pfib);\n-            let t2 = task::spawn((chan(p), n - 2), pfib);\n-\n+            let ch = chan(p);\n+            task::spawn {|| pfib(ch, n - 1); };\n+            task::spawn {|| pfib(ch, n - 2); };\n             send(c, recv(p) + recv(p));\n         }\n     }\n \n     let p = port();\n-    let t = task::spawn((chan(p), n), pfib);\n+    let ch = chan(p);\n+    let t = task::spawn {|| pfib(ch, n); };\n     ret recv(p);\n }\n \n@@ -79,7 +78,7 @@ fn stress_task(&&id: int) {\n fn stress(num_tasks: int) {\n     let tasks = [];\n     range(0, num_tasks) {|i|\n-        tasks += [task::spawn_joinable(copy i, stress_task)];\n+        tasks += [task::spawn_joinable {|| stress_task(i); }];\n     }\n     for t in tasks { task::join(t); }\n }"}, {"sha": "d20c4d72cd0234862a2dda9d042c7855a55bae51", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=a1ef79c9d2da211e5f418733cb34861bfe69e270", "patch": "@@ -7,7 +7,7 @@ import str;\n fn f(&&n: uint) {\n     let i = 0u;\n     while i < n {\n-        task::join(task::spawn_joinable((), g));\n+        task::join(task::spawn_joinable {|| g(); });\n         i += 1u;\n     }\n }\n@@ -20,5 +20,5 @@ fn main(args: [str]) {\n             10u\n         } else { uint::parse_buf(str::bytes(args[1]), 10u) };\n     let i = 0u;\n-    while i < n { task::spawn(copy n, f); i += 1u; }\n+    while i < n { task::spawn {|| f(n); }; i += 1u; }\n }"}, {"sha": "000e3670500a44c120032ffd0105866b20dbef0d", "filename": "src/test/bench/task-perf-vector-party.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs?ref=a1ef79c9d2da211e5f418733cb34861bfe69e270", "patch": "@@ -21,5 +21,5 @@ fn main(args: [str]) {\n         if vec::len(args) < 2u {\n             100u\n         } else { uint::parse_buf(str::bytes(args[1]), 10u) };\n-    uint::range(0u, 100u) {|i| task::spawn(copy n, f); }\n+    uint::range(0u, 100u) {|i| task::spawn {|| f(n); };}\n }"}, {"sha": "1c5b7dc25160f589597b0839ec3f18a5b3ac2f64", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=a1ef79c9d2da211e5f418733cb34861bfe69e270", "patch": "@@ -79,7 +79,7 @@ mod map_reduce {\n         let tasks = [];\n         for i in inputs {\n             let m = map, c = ctrl, ii = i;\n-            tasks += [task::spawn_joinable(bind map_task(m, c, ii))];\n+            tasks += [task::spawn_joinable {|| map_task(m, c, ii)}];\n         }\n         ret tasks;\n     }\n@@ -182,10 +182,11 @@ mod map_reduce {\n                   none. {\n                     // log(error, \"creating new reducer for \" + k);\n                     let p = port();\n+                    let ch = chan(p);\n                     let r = reduce, kk = k;\n-                    tasks +=\n-                        [task::spawn_joinable(bind reduce_task(r, kk,\n-                                                               chan(p)))];\n+                    tasks += [\n+                        task::spawn_joinable {|| reduce_task(r, kk, ch) }\n+                    ];\n                     c = recv(p);\n                     treemap::insert(reducers, k, c);\n                   }"}, {"sha": "42e5145c86223dcd6c0fab4c46c72b22e15f8df9", "filename": "src/test/compile-fail/spawn-non-nil-fn.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs?ref=a1ef79c9d2da211e5f418733cb34861bfe69e270", "patch": "@@ -3,6 +3,4 @@\n use std;\n import task;\n \n-fn f(&&x: int) -> int { ret x; }\n-\n-fn main() { task::spawn(10, f); }\n+fn main() { task::spawn(sendfn() -> int { 10 }); }"}, {"sha": "62ecac925bb0cfa2189812607afd0979b69c9a73", "filename": "src/test/run-fail/linked-failure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure.rs?ref=a1ef79c9d2da211e5f418733cb34861bfe69e270", "patch": "@@ -6,10 +6,10 @@ import task;\n import comm::port;\n import comm::recv;\n \n-fn child(&&_i: ()) { assert (1 == 2); }\n+fn child() { assert (1 == 2); }\n \n fn main() {\n     let p = port::<int>();\n-    task::spawn((), child);\n+    task::spawn {|| child(); };\n     let x = recv(p);\n }"}, {"sha": "5350159475c532b9d9e1213b8b79c853668fe615", "filename": "src/test/run-fail/linked-failure2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Frun-fail%2Flinked-failure2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Frun-fail%2Flinked-failure2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure2.rs?ref=a1ef79c9d2da211e5f418733cb34861bfe69e270", "patch": "@@ -7,10 +7,10 @@ import comm::chan;\n import comm::port;\n import comm::recv;\n \n-fn child(&&_i: ()) { fail; }\n+fn child() { fail; }\n \n fn main() {\n     let p = port::<int>();\n-    task::spawn((), child);\n+    task::spawn {|| child(); };\n     task::yield();\n }"}, {"sha": "4c807712c65c615f88d8d9caf1be199a133aef6e", "filename": "src/test/run-fail/linked-failure3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Frun-fail%2Flinked-failure3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Frun-fail%2Flinked-failure3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure3.rs?ref=a1ef79c9d2da211e5f418733cb34861bfe69e270", "patch": "@@ -6,16 +6,16 @@ import task;\n import comm::port;\n import comm::recv;\n \n-fn grandchild(&&_i: ()) { fail; }\n+fn grandchild() { fail \"grandchild dies\"; }\n \n-fn child(&&_i: ()) {\n+fn child() {\n     let p = port::<int>();\n-    task::spawn((), grandchild);\n+    task::spawn {|| grandchild(); };\n     let x = recv(p);\n }\n \n fn main() {\n     let p = port::<int>();\n-    task::spawn((), child);\n+    task::spawn {|| child(); };\n     let x = recv(p);\n }"}, {"sha": "629cc925749a89498e3cd04e565ceb2b5b3b37fb", "filename": "src/test/run-fail/linked-failure4.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Frun-fail%2Flinked-failure4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Frun-fail%2Flinked-failure4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure4.rs?ref=a1ef79c9d2da211e5f418733cb34861bfe69e270", "patch": "@@ -6,22 +6,22 @@ import comm::chan;\n import comm::port;\n import comm::recv;\n \n-fn child(&&_args: ()) { assert (1 == 2); }\n+fn child() { assert (1 == 2); }\n \n-fn parent(&&_args: ()) {\n+fn parent() {\n     let p = port::<int>();\n-    task::spawn((), child);\n+    task::spawn {|| child(); };\n     let x = recv(p);\n }\n \n // This task is not linked to the failure chain, but since the other\n // tasks are going to fail the kernel, this one will fail too\n-fn sleeper(&&_args: ()) {\n+fn sleeper() {\n     let p = port::<int>();\n     let x = recv(p);\n }\n \n fn main() {\n-    task::spawn((), sleeper);\n-    task::spawn((), parent);\n+    task::spawn {|| sleeper(); };\n+    task::spawn {|| parent(); };\n }\n\\ No newline at end of file"}, {"sha": "60b79ee153706281201351c0a700f1b22c2cd4f4", "filename": "src/test/run-fail/morestack2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=a1ef79c9d2da211e5f418733cb34861bfe69e270", "patch": "@@ -30,8 +30,8 @@ resource and_then_get_big_again(_i: ()) {\n }\n \n fn main() {\n-    task::spawn((), fn (&&_i: ()) {\n+    task::spawn {||\n         let r = and_then_get_big_again(());\n         getbig_call_c_and_fail(10000);\n-    });\n+    };\n }\n\\ No newline at end of file"}, {"sha": "223f9211307c94739da68f0affd04fb0b6956bee", "filename": "src/test/run-fail/morestack3.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack3.rs?ref=a1ef79c9d2da211e5f418733cb34861bfe69e270", "patch": "@@ -23,5 +23,7 @@ resource and_then_get_big_again(_i: @int) {\n }\n \n fn main() {\n-    task::spawn(400, getbig_and_fail);\n+    task::spawn {||\n+        getbig_and_fail(400);\n+    };\n }\n\\ No newline at end of file"}, {"sha": "b36372d74e1ced0a278367394c627d69ba8685ea", "filename": "src/test/run-fail/morestack4.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack4.rs?ref=a1ef79c9d2da211e5f418733cb34861bfe69e270", "patch": "@@ -22,5 +22,7 @@ resource and_then_get_big_again(_i: @int) {\n \n fn main() {\n     rustrt::set_min_stack(256u);\n-    task::spawn(1, getbig_and_fail);\n+    task::spawn {||\n+        getbig_and_fail(1);\n+    };\n }\n\\ No newline at end of file"}, {"sha": "8d342d7fe74d9425c2c05c303ead0493d122611a", "filename": "src/test/run-fail/spawnfail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Frun-fail%2Fspawnfail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Frun-fail%2Fspawnfail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fspawnfail.rs?ref=a1ef79c9d2da211e5f418733cb34861bfe69e270", "patch": "@@ -5,8 +5,8 @@ import task;\n \n // We don't want to see any invalid reads\n fn main() {\n-    fn f(&&_i: ()) {\n+    fn f() {\n         fail;\n     }\n-    task::spawn((), f);\n+    task::spawn {|| f(); };\n }\n\\ No newline at end of file"}, {"sha": "50a32ed296ced1b9bdd637ecc94df31eb2b2de8d", "filename": "src/test/run-fail/task-comm-recv-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ef79c9d2da211e5f418733cb34861bfe69e270/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs?ref=a1ef79c9d2da211e5f418733cb34861bfe69e270", "patch": "@@ -4,13 +4,13 @@ use std;\n import task;\n import comm;\n \n-fn goodfail(&&_i: ()) {\n+fn goodfail() {\n     task::yield();\n     fail \"goodfail\";\n }\n \n fn main() {\n-    task::spawn((), goodfail);\n+    task::spawn {|| goodfail(); };\n     let po = comm::port();\n     // We shouldn't be able to get past this recv since there's no\n     // message available"}]}