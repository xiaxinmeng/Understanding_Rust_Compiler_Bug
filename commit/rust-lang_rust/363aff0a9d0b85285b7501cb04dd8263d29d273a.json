{"sha": "363aff0a9d0b85285b7501cb04dd8263d29d273a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2M2FmZjBhOWQwYjg1Mjg1Yjc1MDFjYjA0ZGQ4MjYzZDI5ZDI3M2E=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-09-17T20:03:42Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-09-17T20:03:42Z"}, "message": "Add test for x.py build cross-compilation", "tree": {"sha": "30fdb89f5f4875f1d93499147d08e21623a19dcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30fdb89f5f4875f1d93499147d08e21623a19dcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/363aff0a9d0b85285b7501cb04dd8263d29d273a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/363aff0a9d0b85285b7501cb04dd8263d29d273a", "html_url": "https://github.com/rust-lang/rust/commit/363aff0a9d0b85285b7501cb04dd8263d29d273a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/363aff0a9d0b85285b7501cb04dd8263d29d273a/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd4e0af0b54afc91903c282740e25ee6135224c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd4e0af0b54afc91903c282740e25ee6135224c8", "html_url": "https://github.com/rust-lang/rust/commit/bd4e0af0b54afc91903c282740e25ee6135224c8"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "77b39cbb87ed96cbba8693b1a96f6ccbbb391a39", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/363aff0a9d0b85285b7501cb04dd8263d29d273a/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363aff0a9d0b85285b7501cb04dd8263d29d273a/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=363aff0a9d0b85285b7501cb04dd8263d29d273a", "patch": "@@ -90,6 +90,54 @@ mod defaults {\n         assert!(builder.cache.all::<compile::Rustc>().is_empty());\n     }\n \n+    #[test]\n+    fn build_cross_compile() {\n+        let config = Config { stage: 1, ..configure(\"build\", &[\"B\"], &[\"B\"]) };\n+        let build = Build::new(config);\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n+\n+        let a = TargetSelection::from_user(\"A\");\n+        let b = TargetSelection::from_user(\"B\");\n+\n+        // Ideally, this build wouldn't actually have `target: a`\n+        // rustdoc/rustcc/std here (the user only requested a host=B build, so\n+        // there's not really a need for us to build for target A in this case\n+        // (since we're producing stage 1 libraries/binaries).  But currently\n+        // rustbuild is just a bit buggy here; this should be fixed though.\n+        assert_eq!(\n+            first(builder.cache.all::<compile::Std>()),\n+            &[\n+                compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },\n+                compile::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n+                compile::Std { compiler: Compiler { host: a, stage: 0 }, target: b },\n+                compile::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n+            ]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<compile::Assemble>()),\n+            &[\n+                compile::Assemble { target_compiler: Compiler { host: a, stage: 0 } },\n+                compile::Assemble { target_compiler: Compiler { host: a, stage: 1 } },\n+                compile::Assemble { target_compiler: Compiler { host: b, stage: 1 } },\n+            ]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<tool::Rustdoc>()),\n+            &[\n+                tool::Rustdoc { compiler: Compiler { host: a, stage: 1 } },\n+                tool::Rustdoc { compiler: Compiler { host: b, stage: 1 } },\n+            ],\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<compile::Rustc>()),\n+            &[\n+                compile::Rustc { compiler: Compiler { host: a, stage: 0 }, target: a },\n+                compile::Rustc { compiler: Compiler { host: a, stage: 0 }, target: b },\n+            ]\n+        );\n+    }\n+\n     #[test]\n     fn doc_default() {\n         let mut config = configure(\"doc\", &[], &[]);"}]}