{"sha": "22cc878d897d467a76bc8e301a8f1e669cb1e4d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyY2M4NzhkODk3ZDQ2N2E3NmJjOGUzMDFhOGYxZTY2OWNiMWU0ZDU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-11-13T14:26:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-13T14:26:18Z"}, "message": "Rollup merge of #78985 - lcnr:cg-drop-test, r=nikomatsakis\n\nadd dropck test for const params\n\nr? `@nikomatsakis` or `@varkor`", "tree": {"sha": "ef909785b0cafcdcbe1232dfdcc18fa0dfb22af5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef909785b0cafcdcbe1232dfdcc18fa0dfb22af5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22cc878d897d467a76bc8e301a8f1e669cb1e4d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfrpeKCRBK7hj4Ov3rIwAAdHIIAGcta6lVB+zSdW5RvQFZBOHO\nb8AbcmlUho7R1E4yrX/SRUibSEV+dbfgyj1UIZaG8DVlP7nnniz1oqnIdP5SYT7I\nF2FniNCVC1E7LxB8h1QNa3DxefCuC5FKLD1VwppIJSRGcN89Npn0QCTVGVxdtGGw\nESmZeUljd2ChskPKoInDmiRqDnpRrwslWZBSYOgwl389qWVCohYwBMs+leNfXanF\n1geWCeUoPMtkO44RZD9oAaO9HG5WlhZL6tDFKU6Inwe/WVWtrot324uLUqWnCZjf\nH4nLQal06m+binetnJTnPC6FHYcWr9f4BO1kqY3yQWnwLoVcCRdPjl3U7ykRgIs=\n=pTjF\n-----END PGP SIGNATURE-----\n", "payload": "tree ef909785b0cafcdcbe1232dfdcc18fa0dfb22af5\nparent 804ca1d5b7223a8796df1df2cbe0c2947ef0f0f3\nparent 21f754de2ac507c8ebc50d857264c224c1c76120\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1605277578 +0100\ncommitter GitHub <noreply@github.com> 1605277578 +0100\n\nRollup merge of #78985 - lcnr:cg-drop-test, r=nikomatsakis\n\nadd dropck test for const params\n\nr? `@nikomatsakis` or `@varkor`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22cc878d897d467a76bc8e301a8f1e669cb1e4d5", "html_url": "https://github.com/rust-lang/rust/commit/22cc878d897d467a76bc8e301a8f1e669cb1e4d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22cc878d897d467a76bc8e301a8f1e669cb1e4d5/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "804ca1d5b7223a8796df1df2cbe0c2947ef0f0f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/804ca1d5b7223a8796df1df2cbe0c2947ef0f0f3", "html_url": "https://github.com/rust-lang/rust/commit/804ca1d5b7223a8796df1df2cbe0c2947ef0f0f3"}, {"sha": "21f754de2ac507c8ebc50d857264c224c1c76120", "url": "https://api.github.com/repos/rust-lang/rust/commits/21f754de2ac507c8ebc50d857264c224c1c76120", "html_url": "https://github.com/rust-lang/rust/commit/21f754de2ac507c8ebc50d857264c224c1c76120"}], "stats": {"total": 89, "additions": 61, "deletions": 28}, "files": [{"sha": "b0e5c371345dfe43f9b69a9ef8b4743b7cb9c9bf", "filename": "src/test/ui/dropck/issue-38868.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/22cc878d897d467a76bc8e301a8f1e669cb1e4d5/src%2Ftest%2Fui%2Fdropck%2Fissue-38868.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22cc878d897d467a76bc8e301a8f1e669cb1e4d5/src%2Ftest%2Fui%2Fdropck%2Fissue-38868.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fissue-38868.rs?ref=22cc878d897d467a76bc8e301a8f1e669cb1e4d5", "previous_filename": "src/test/ui/issues/issue-38868.rs"}, {"sha": "10d1e7c4e66dc20aa908f49e9e195030a3266ebe", "filename": "src/test/ui/dropck/issue-38868.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/22cc878d897d467a76bc8e301a8f1e669cb1e4d5/src%2Ftest%2Fui%2Fdropck%2Fissue-38868.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22cc878d897d467a76bc8e301a8f1e669cb1e4d5/src%2Ftest%2Fui%2Fdropck%2Fissue-38868.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fissue-38868.stderr?ref=22cc878d897d467a76bc8e301a8f1e669cb1e4d5", "previous_filename": "src/test/ui/issues/issue-38868.stderr"}, {"sha": "02e8665cd2e3be1a67aa06a3b880cc4a87a6be42", "filename": "src/test/ui/dropck/reject-specialized-drops-8142.rs", "status": "renamed", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/22cc878d897d467a76bc8e301a8f1e669cb1e4d5/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22cc878d897d467a76bc8e301a8f1e669cb1e4d5/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.rs?ref=22cc878d897d467a76bc8e301a8f1e669cb1e4d5", "patch": "@@ -1,5 +1,6 @@\n // Issue 8142: Test that Drop impls cannot be specialized beyond the\n // predicates attached to the type definition itself.\n+#![feature(min_const_generics)]\n \n trait Bound { fn foo(&self) { } }\n struct K<'l1,'l2> { x: &'l1 i8, y: &'l2 u8 }\n@@ -15,6 +16,8 @@ struct T<'t,Ts:'t> { x: &'t Ts }\n struct U;\n struct V<Tva, Tvb> { x: *const Tva, y: *const Tvb }\n struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }\n+struct X<const Ca: usize>;\n+struct Y<const Ca: usize, const Cb: usize>;\n \n enum Enum<T> { Variant(T) }\n struct TupleStruct<T>(T);\n@@ -58,6 +61,12 @@ impl<One>         Drop for V<One,One>     { fn drop(&mut self) { } } // REJECT\n impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n //~^ ERROR cannot infer an appropriate lifetime for lifetime parameter `'lw`\n \n+impl              Drop for X<3>           { fn drop(&mut self) { } } // REJECT\n+//~^ ERROR `Drop` impls cannot be specialized\n+\n+impl<const Ca: usize> Drop for Y<Ca, Ca>     { fn drop(&mut self) { } } // REJECT\n+//~^ ERROR `Drop` impls cannot be specialized\n+\n impl<AddsBnd:Bound> Drop for Enum<AddsBnd> { fn drop(&mut self) { } } // REJECT\n //~^ ERROR `Drop` impl requires `AddsBnd: Bound`\n ", "previous_filename": "src/test/ui/reject-specialized-drops-8142.rs"}, {"sha": "284cf59c822bd2b34a88eb25542ee899c98f9f63", "filename": "src/test/ui/dropck/reject-specialized-drops-8142.stderr", "status": "renamed", "additions": 52, "deletions": 28, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/22cc878d897d467a76bc8e301a8f1e669cb1e4d5/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22cc878d897d467a76bc8e301a8f1e669cb1e4d5/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.stderr?ref=22cc878d897d467a76bc8e301a8f1e669cb1e4d5", "patch": "@@ -1,151 +1,175 @@\n error[E0367]: `Drop` impl requires `'adds_bnd: 'al` but the struct it is implemented for does not\n-  --> $DIR/reject-specialized-drops-8142.rs:23:20\n+  --> $DIR/reject-specialized-drops-8142.rs:26:20\n    |\n LL | impl<'al,'adds_bnd:'al> Drop for K<'al,'adds_bnd> {                        // REJECT\n    |                    ^^^\n    |\n note: the implementor must specify the same requirement\n-  --> $DIR/reject-specialized-drops-8142.rs:5:1\n+  --> $DIR/reject-specialized-drops-8142.rs:6:1\n    |\n LL | struct K<'l1,'l2> { x: &'l1 i8, y: &'l2 u8 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0367]: `Drop` impl requires `'adds_bnd: 'al` but the struct it is implemented for does not\n-  --> $DIR/reject-specialized-drops-8142.rs:27:67\n+  --> $DIR/reject-specialized-drops-8142.rs:30:67\n    |\n LL | impl<'al,'adds_bnd>     Drop for L<'al,'adds_bnd> where 'adds_bnd:'al {    // REJECT\n    |                                                                   ^^^\n    |\n note: the implementor must specify the same requirement\n-  --> $DIR/reject-specialized-drops-8142.rs:6:1\n+  --> $DIR/reject-specialized-drops-8142.rs:7:1\n    |\n LL | struct L<'l1,'l2> { x: &'l1 i8, y: &'l2 u8 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/reject-specialized-drops-8142.rs:33:1\n+  --> $DIR/reject-specialized-drops-8142.rs:36:1\n    |\n LL | impl                    Drop for N<'static>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected struct `N<'n>`\n               found struct `N<'static>`\n-note: the lifetime `'n` as defined on the struct at 8:10...\n-  --> $DIR/reject-specialized-drops-8142.rs:8:10\n+note: the lifetime `'n` as defined on the struct at 9:10...\n+  --> $DIR/reject-specialized-drops-8142.rs:9:10\n    |\n LL | struct N<'n> { x: &'n i8 }\n    |          ^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0366]: `Drop` impls cannot be specialized\n-  --> $DIR/reject-specialized-drops-8142.rs:40:1\n+  --> $DIR/reject-specialized-drops-8142.rs:43:1\n    |\n LL | impl              Drop for P<i8>          { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: use the same sequence of generic type, lifetime and const parameters as the struct definition\n-  --> $DIR/reject-specialized-drops-8142.rs:10:1\n+  --> $DIR/reject-specialized-drops-8142.rs:11:1\n    |\n LL | struct P<Tp> { x: *const Tp }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the struct it is implemented for does not\n-  --> $DIR/reject-specialized-drops-8142.rs:43:14\n+  --> $DIR/reject-specialized-drops-8142.rs:46:14\n    |\n LL | impl<AddsBnd:Bound> Drop for Q<AddsBnd> { fn drop(&mut self) { } } // REJECT\n    |              ^^^^^\n    |\n note: the implementor must specify the same requirement\n-  --> $DIR/reject-specialized-drops-8142.rs:11:1\n+  --> $DIR/reject-specialized-drops-8142.rs:12:1\n    |\n LL | struct Q<Tq> { x: *const Tq }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0367]: `Drop` impl requires `AddsRBnd: 'rbnd` but the struct it is implemented for does not\n-  --> $DIR/reject-specialized-drops-8142.rs:46:21\n+  --> $DIR/reject-specialized-drops-8142.rs:49:21\n    |\n LL | impl<'rbnd,AddsRBnd:'rbnd> Drop for R<AddsRBnd> { fn drop(&mut self) { } } // REJECT\n    |                     ^^^^^\n    |\n note: the implementor must specify the same requirement\n-  --> $DIR/reject-specialized-drops-8142.rs:12:1\n+  --> $DIR/reject-specialized-drops-8142.rs:13:1\n    |\n LL | struct R<Tr> { x: *const Tr }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0366]: `Drop` impls cannot be specialized\n-  --> $DIR/reject-specialized-drops-8142.rs:55:1\n+  --> $DIR/reject-specialized-drops-8142.rs:58:1\n    |\n LL | impl<One>         Drop for V<One,One>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: use the same sequence of generic type, lifetime and const parameters as the struct definition\n-  --> $DIR/reject-specialized-drops-8142.rs:16:1\n+  --> $DIR/reject-specialized-drops-8142.rs:17:1\n    |\n LL | struct V<Tva, Tvb> { x: *const Tva, y: *const Tvb }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'lw` due to conflicting requirements\n-  --> $DIR/reject-specialized-drops-8142.rs:58:1\n+  --> $DIR/reject-specialized-drops-8142.rs:61:1\n    |\n LL | impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'l1` as defined on the struct at 17:10...\n-  --> $DIR/reject-specialized-drops-8142.rs:17:10\n+note: first, the lifetime cannot outlive the lifetime `'l1` as defined on the struct at 18:10...\n+  --> $DIR/reject-specialized-drops-8142.rs:18:10\n    |\n LL | struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }\n    |          ^^^\n-note: ...but the lifetime must also be valid for the lifetime `'l2` as defined on the struct at 17:15...\n-  --> $DIR/reject-specialized-drops-8142.rs:17:15\n+note: ...but the lifetime must also be valid for the lifetime `'l2` as defined on the struct at 18:15...\n+  --> $DIR/reject-specialized-drops-8142.rs:18:15\n    |\n LL | struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }\n    |               ^^^\n note: ...so that the types are compatible\n-  --> $DIR/reject-specialized-drops-8142.rs:58:1\n+  --> $DIR/reject-specialized-drops-8142.rs:61:1\n    |\n LL | impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected `W<'l1, 'l2>`\n               found `W<'_, '_>`\n \n+error[E0366]: `Drop` impls cannot be specialized\n+  --> $DIR/reject-specialized-drops-8142.rs:64:1\n+   |\n+LL | impl              Drop for X<3>           { fn drop(&mut self) { } } // REJECT\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: use the same sequence of generic type, lifetime and const parameters as the struct definition\n+  --> $DIR/reject-specialized-drops-8142.rs:19:1\n+   |\n+LL | struct X<const Ca: usize>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0366]: `Drop` impls cannot be specialized\n+  --> $DIR/reject-specialized-drops-8142.rs:67:1\n+   |\n+LL | impl<const Ca: usize> Drop for Y<Ca, Ca>     { fn drop(&mut self) { } } // REJECT\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: use the same sequence of generic type, lifetime and const parameters as the struct definition\n+  --> $DIR/reject-specialized-drops-8142.rs:20:1\n+   |\n+LL | struct Y<const Ca: usize, const Cb: usize>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the enum it is implemented for does not\n-  --> $DIR/reject-specialized-drops-8142.rs:61:14\n+  --> $DIR/reject-specialized-drops-8142.rs:70:14\n    |\n LL | impl<AddsBnd:Bound> Drop for Enum<AddsBnd> { fn drop(&mut self) { } } // REJECT\n    |              ^^^^^\n    |\n note: the implementor must specify the same requirement\n-  --> $DIR/reject-specialized-drops-8142.rs:19:1\n+  --> $DIR/reject-specialized-drops-8142.rs:22:1\n    |\n LL | enum Enum<T> { Variant(T) }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the struct it is implemented for does not\n-  --> $DIR/reject-specialized-drops-8142.rs:64:14\n+  --> $DIR/reject-specialized-drops-8142.rs:73:14\n    |\n LL | impl<AddsBnd:Bound> Drop for TupleStruct<AddsBnd> { fn drop(&mut self) { } } // REJECT\n    |              ^^^^^\n    |\n note: the implementor must specify the same requirement\n-  --> $DIR/reject-specialized-drops-8142.rs:20:1\n+  --> $DIR/reject-specialized-drops-8142.rs:23:1\n    |\n LL | struct TupleStruct<T>(T);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the union it is implemented for does not\n-  --> $DIR/reject-specialized-drops-8142.rs:67:21\n+  --> $DIR/reject-specialized-drops-8142.rs:76:21\n    |\n LL | impl<AddsBnd:Copy + Bound> Drop for Union<AddsBnd> { fn drop(&mut self) { } } // REJECT\n    |                     ^^^^^\n    |\n note: the implementor must specify the same requirement\n-  --> $DIR/reject-specialized-drops-8142.rs:21:1\n+  --> $DIR/reject-specialized-drops-8142.rs:24:1\n    |\n LL | union Union<T: Copy> { f: T }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 13 previous errors\n \n Some errors have detailed explanations: E0308, E0366, E0367, E0495.\n For more information about an error, try `rustc --explain E0308`.", "previous_filename": "src/test/ui/reject-specialized-drops-8142.stderr"}]}