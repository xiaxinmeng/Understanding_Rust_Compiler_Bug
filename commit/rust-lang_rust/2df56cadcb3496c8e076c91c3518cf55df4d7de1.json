{"sha": "2df56cadcb3496c8e076c91c3518cf55df4d7de1", "node_id": "C_kwDOAAsO6NoAKDJkZjU2Y2FkY2IzNDk2YzhlMDc2YzkxYzM1MThjZjU1ZGY0ZDdkZTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-24T11:13:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-24T11:13:52Z"}, "message": "Auto merge of #14755 - poliorcetics:clippy-fixes, r=Veykril\n\nFix: a TODO and some clippy fixes\n\n- fix(todo): implement IntoIterator for ArenaMap<IDX, V>\n- chore: remove unused method\n- fix: remove useless `return`s\n- fix: various clippy lints\n- fix: simplify boolean test to a single negation", "tree": {"sha": "e580bef5a621ff3236b6926aa919cab28b6a7821", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e580bef5a621ff3236b6926aa919cab28b6a7821"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2df56cadcb3496c8e076c91c3518cf55df4d7de1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2df56cadcb3496c8e076c91c3518cf55df4d7de1", "html_url": "https://github.com/rust-lang/rust/commit/2df56cadcb3496c8e076c91c3518cf55df4d7de1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2df56cadcb3496c8e076c91c3518cf55df4d7de1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d1a1195f39b973e7bf64fff853826c28838917f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d1a1195f39b973e7bf64fff853826c28838917f", "html_url": "https://github.com/rust-lang/rust/commit/1d1a1195f39b973e7bf64fff853826c28838917f"}, {"sha": "541183676781c8633ef6a2ed3d2847367acf6c5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/541183676781c8633ef6a2ed3d2847367acf6c5b", "html_url": "https://github.com/rust-lang/rust/commit/541183676781c8633ef6a2ed3d2847367acf6c5b"}], "stats": {"total": 101, "additions": 71, "deletions": 30}, "files": [{"sha": "7e78178dde23d6d7a9f8b903cf4471bb018fd54b", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2df56cadcb3496c8e076c91c3518cf55df4d7de1/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df56cadcb3496c8e076c91c3518cf55df4d7de1/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=2df56cadcb3496c8e076c91c3518cf55df4d7de1", "patch": "@@ -485,7 +485,7 @@ impl CargoActor {\n \n             error.push_str(line);\n             error.push('\\n');\n-            return false;\n+            false\n         };\n         let output = streaming_output(\n             self.stdout,"}, {"sha": "bdc84fefe666633ca1185c4b9d0d7ae682e32bb4", "filename": "crates/hir-def/src/body/pretty.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2df56cadcb3496c8e076c91c3518cf55df4d7de1/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df56cadcb3496c8e076c91c3518cf55df4d7de1/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs?ref=2df56cadcb3496c8e076c91c3518cf55df4d7de1", "patch": "@@ -35,11 +35,10 @@ pub(super) fn print_body_hir(db: &dyn DefDatabase, body: &Body, owner: DefWithBo\n         DefWithBodyId::VariantId(it) => {\n             let src = it.parent.child_source(db);\n             let variant = &src.value[it.local_id];\n-            let name = match &variant.name() {\n+            match &variant.name() {\n                 Some(name) => name.to_string(),\n                 None => \"_\".to_string(),\n-            };\n-            format!(\"{name}\")\n+            }\n         }\n     };\n \n@@ -456,7 +455,7 @@ impl<'a> Printer<'a> {\n     fn print_block(\n         &mut self,\n         label: Option<&str>,\n-        statements: &Box<[Statement]>,\n+        statements: &[Statement],\n         tail: &Option<la_arena::Idx<Expr>>,\n     ) {\n         self.whitespace();\n@@ -466,7 +465,7 @@ impl<'a> Printer<'a> {\n         w!(self, \"{{\");\n         if !statements.is_empty() || tail.is_some() {\n             self.indented(|p| {\n-                for stmt in &**statements {\n+                for stmt in statements {\n                     p.print_stmt(stmt);\n                 }\n                 if let Some(tail) = tail {"}, {"sha": "e6fb9e9d335e8d4043748117810c8fbe4250fb03", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2df56cadcb3496c8e076c91c3518cf55df4d7de1/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df56cadcb3496c8e076c91c3518cf55df4d7de1/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=2df56cadcb3496c8e076c91c3518cf55df4d7de1", "patch": "@@ -417,7 +417,7 @@ fn postfix_expr(\n         allow_calls = true;\n         block_like = BlockLike::NotBlock;\n     }\n-    return (lhs, block_like);\n+    (lhs, block_like)\n }\n \n fn postfix_dot_expr<const FLOAT_RECOVERY: bool>("}, {"sha": "1c056819f4b7fa5fd076cbfb11bf971bfadf9d68", "filename": "crates/parser/src/grammar/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2df56cadcb3496c8e076c91c3518cf55df4d7de1/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df56cadcb3496c8e076c91c3518cf55df4d7de1/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs?ref=2df56cadcb3496c8e076c91c3518cf55df4d7de1", "patch": "@@ -19,7 +19,7 @@ use super::*;\n // struct S;\n pub(super) fn mod_contents(p: &mut Parser<'_>, stop_on_r_curly: bool) {\n     attributes::inner_attrs(p);\n-    while !p.at(EOF) && !(p.at(T!['}']) && stop_on_r_curly) {\n+    while !(p.at(EOF) || (p.at(T!['}']) && stop_on_r_curly)) {\n         item_or_macro(p, stop_on_r_curly);\n     }\n }"}, {"sha": "ef413c63754f6695a089ee3e24ea0f1edad744aa", "filename": "crates/parser/src/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2df56cadcb3496c8e076c91c3518cf55df4d7de1/crates%2Fparser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df56cadcb3496c8e076c91c3518cf55df4d7de1/crates%2Fparser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fparser.rs?ref=2df56cadcb3496c8e076c91c3518cf55df4d7de1", "patch": "@@ -205,7 +205,7 @@ impl<'t> Parser<'t> {\n             marker.bomb.defuse();\n             marker = new_marker;\n         };\n-        self.pos += 1 as usize;\n+        self.pos += 1;\n         self.push_event(Event::FloatSplitHack { ends_in_dot });\n         (ends_in_dot, marker)\n     }"}, {"sha": "5cdb39700dda3cf08bd7b0aa20b801ddfd69a5db", "filename": "crates/parser/src/shortcuts.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2df56cadcb3496c8e076c91c3518cf55df4d7de1/crates%2Fparser%2Fsrc%2Fshortcuts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df56cadcb3496c8e076c91c3518cf55df4d7de1/crates%2Fparser%2Fsrc%2Fshortcuts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fshortcuts.rs?ref=2df56cadcb3496c8e076c91c3518cf55df4d7de1", "patch": "@@ -46,10 +46,8 @@ impl<'a> LexedStr<'a> {\n                     // Tag the token as joint if it is float with a fractional part\n                     // we use this jointness to inform the parser about what token split\n                     // event to emit when we encounter a float literal in a field access\n-                    if kind == SyntaxKind::FLOAT_NUMBER {\n-                        if !self.text(i).ends_with('.') {\n-                            res.was_joint();\n-                        }\n+                    if kind == SyntaxKind::FLOAT_NUMBER && !self.text(i).ends_with('.') {\n+                        res.was_joint();\n                     }\n                 }\n "}, {"sha": "36980b146ef5698cadbd513a7afd6a9d52906f4a", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2df56cadcb3496c8e076c91c3518cf55df4d7de1/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df56cadcb3496c8e076c91c3518cf55df4d7de1/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=2df56cadcb3496c8e076c91c3518cf55df4d7de1", "patch": "@@ -370,8 +370,7 @@ impl ast::BlockExpr {\n         match parent.kind() {\n             FOR_EXPR | IF_EXPR => parent\n                 .children()\n-                .filter(|it| ast::Expr::can_cast(it.kind()))\n-                .next()\n+                .find(|it| ast::Expr::can_cast(it.kind()))\n                 .map_or(true, |it| it == *self.syntax()),\n             LET_ELSE | FN | WHILE_EXPR | LOOP_EXPR | CONST_BLOCK_PAT => false,\n             _ => true,"}, {"sha": "8d2dc8709bafd5f49b564dd08c898225f8e49469", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2df56cadcb3496c8e076c91c3518cf55df4d7de1/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df56cadcb3496c8e076c91c3518cf55df4d7de1/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=2df56cadcb3496c8e076c91c3518cf55df4d7de1", "patch": "@@ -195,7 +195,7 @@ pub fn ty_alias(\n         }\n     }\n \n-    s.push_str(\";\");\n+    s.push(';');\n     ast_from_text(&s)\n }\n \n@@ -399,7 +399,7 @@ pub fn hacky_block_expr(\n                     format_to!(buf, \"    {t}\\n\")\n                 } else if kind == SyntaxKind::WHITESPACE {\n                     let content = t.text().trim_matches(|c| c != '\\n');\n-                    if content.len() >= 1 {\n+                    if !content.is_empty() {\n                         format_to!(buf, \"{}\", &content[1..])\n                     }\n                 }"}, {"sha": "fe3dfe6196864f9354bb67b05782451b7791c33d", "filename": "crates/vfs/src/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2df56cadcb3496c8e076c91c3518cf55df4d7de1/crates%2Fvfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df56cadcb3496c8e076c91c3518cf55df4d7de1/crates%2Fvfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Flib.rs?ref=2df56cadcb3496c8e076c91c3518cf55df4d7de1", "patch": "@@ -109,13 +109,6 @@ pub enum ChangeKind {\n }\n \n impl Vfs {\n-    /// Amount of files currently stored.\n-    ///\n-    /// Note that this includes deleted files.\n-    pub fn len(&self) -> usize {\n-        self.data.len()\n-    }\n-\n     /// Id of the given path if it exists in the `Vfs` and is not deleted.\n     pub fn file_id(&self, path: &VfsPath) -> Option<FileId> {\n         self.interner.get(path).filter(|&it| self.get(it).is_some())"}, {"sha": "750f345b5398d9e9025e1d2f06e591c360a70172", "filename": "lib/la-arena/src/map.rs", "status": "modified", "additions": 58, "deletions": 6, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/2df56cadcb3496c8e076c91c3518cf55df4d7de1/lib%2Fla-arena%2Fsrc%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2df56cadcb3496c8e076c91c3518cf55df4d7de1/lib%2Fla-arena%2Fsrc%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fla-arena%2Fsrc%2Fmap.rs?ref=2df56cadcb3496c8e076c91c3518cf55df4d7de1", "patch": "@@ -1,3 +1,4 @@\n+use std::iter::Enumerate;\n use std::marker::PhantomData;\n \n use crate::Idx;\n@@ -94,12 +95,6 @@ impl<T, V> ArenaMap<Idx<T>, V> {\n             .filter_map(|(idx, o)| Some((Self::from_idx(idx), o.as_mut()?)))\n     }\n \n-    /// Returns an iterator over the arena indexes and values in the map.\n-    // FIXME: Implement `IntoIterator` trait.\n-    pub fn into_iter(self) -> impl Iterator<Item = (Idx<T>, V)> + DoubleEndedIterator {\n-        self.v.into_iter().enumerate().filter_map(|(idx, o)| Some((Self::from_idx(idx), o?)))\n-    }\n-\n     /// Gets the given key's corresponding entry in the map for in-place manipulation.\n     pub fn entry(&mut self, idx: Idx<T>) -> Entry<'_, Idx<T>, V> {\n         let idx = Self::to_idx(idx);\n@@ -154,6 +149,63 @@ impl<T, V> FromIterator<(Idx<V>, T)> for ArenaMap<Idx<V>, T> {\n     }\n }\n \n+pub struct ArenaMapIter<IDX, V> {\n+    iter: Enumerate<std::vec::IntoIter<Option<V>>>,\n+    _ty: PhantomData<IDX>,\n+}\n+\n+impl<T, V> IntoIterator for ArenaMap<Idx<T>, V> {\n+    type Item = (Idx<T>, V);\n+\n+    type IntoIter = ArenaMapIter<Idx<T>, V>;\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        let iter = self.v.into_iter().enumerate();\n+        Self::IntoIter { iter, _ty: PhantomData }\n+    }\n+}\n+\n+impl<T, V> ArenaMapIter<Idx<T>, V> {\n+    fn mapper((idx, o): (usize, Option<V>)) -> Option<(Idx<T>, V)> {\n+        Some((ArenaMap::<Idx<T>, V>::from_idx(idx), o?))\n+    }\n+}\n+\n+impl<T, V> Iterator for ArenaMapIter<Idx<T>, V> {\n+    type Item = (Idx<T>, V);\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<Self::Item> {\n+        for next in self.iter.by_ref() {\n+            match Self::mapper(next) {\n+                Some(r) => return Some(r),\n+                None => continue,\n+            }\n+        }\n+\n+        None\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.iter.size_hint()\n+    }\n+}\n+\n+impl<T, V> DoubleEndedIterator for ArenaMapIter<Idx<T>, V> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<Self::Item> {\n+        while let Some(next_back) = self.iter.next_back() {\n+            match Self::mapper(next_back) {\n+                Some(r) => return Some(r),\n+                None => continue,\n+            }\n+        }\n+\n+        None\n+    }\n+}\n+\n /// A view into a single entry in a map, which may either be vacant or occupied.\n ///\n /// This `enum` is constructed from the [`entry`] method on [`ArenaMap`]."}]}