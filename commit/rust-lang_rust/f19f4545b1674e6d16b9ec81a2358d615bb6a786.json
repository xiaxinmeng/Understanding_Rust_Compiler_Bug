{"sha": "f19f4545b1674e6d16b9ec81a2358d615bb6a786", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxOWY0NTQ1YjE2NzRlNmQxNmI5ZWM4MWEyMzU4ZDYxNWJiNmE3ODY=", "commit": {"author": {"name": "memoryruins", "email": "memoryruinsmusic@gmail.com", "date": "2019-05-28T18:47:21Z"}, "committer": {"name": "memoryruins", "email": "memoryruinsmusic@gmail.com", "date": "2019-05-29T04:57:42Z"}, "message": "Update run-pass test suite to use dyn", "tree": {"sha": "8f679f2bb281ddd6d89fc614dc466f865b502ccd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f679f2bb281ddd6d89fc614dc466f865b502ccd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f19f4545b1674e6d16b9ec81a2358d615bb6a786", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f19f4545b1674e6d16b9ec81a2358d615bb6a786", "html_url": "https://github.com/rust-lang/rust/commit/f19f4545b1674e6d16b9ec81a2358d615bb6a786", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f19f4545b1674e6d16b9ec81a2358d615bb6a786/comments", "author": {"login": "memoryruins", "id": 6868531, "node_id": "MDQ6VXNlcjY4Njg1MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/6868531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/memoryruins", "html_url": "https://github.com/memoryruins", "followers_url": "https://api.github.com/users/memoryruins/followers", "following_url": "https://api.github.com/users/memoryruins/following{/other_user}", "gists_url": "https://api.github.com/users/memoryruins/gists{/gist_id}", "starred_url": "https://api.github.com/users/memoryruins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/memoryruins/subscriptions", "organizations_url": "https://api.github.com/users/memoryruins/orgs", "repos_url": "https://api.github.com/users/memoryruins/repos", "events_url": "https://api.github.com/users/memoryruins/events{/privacy}", "received_events_url": "https://api.github.com/users/memoryruins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "memoryruins", "id": 6868531, "node_id": "MDQ6VXNlcjY4Njg1MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/6868531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/memoryruins", "html_url": "https://github.com/memoryruins", "followers_url": "https://api.github.com/users/memoryruins/followers", "following_url": "https://api.github.com/users/memoryruins/following{/other_user}", "gists_url": "https://api.github.com/users/memoryruins/gists{/gist_id}", "starred_url": "https://api.github.com/users/memoryruins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/memoryruins/subscriptions", "organizations_url": "https://api.github.com/users/memoryruins/orgs", "repos_url": "https://api.github.com/users/memoryruins/repos", "events_url": "https://api.github.com/users/memoryruins/events{/privacy}", "received_events_url": "https://api.github.com/users/memoryruins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb4580a570069175e1290b294d91042a09f9fde3", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb4580a570069175e1290b294d91042a09f9fde3", "html_url": "https://github.com/rust-lang/rust/commit/eb4580a570069175e1290b294d91042a09f9fde3"}], "stats": {"total": 1004, "additions": 502, "deletions": 502}, "files": [{"sha": "7e6ee60e5194cb93ee7450e9d5547ab0785fbf5f", "filename": "src/test/run-pass/alignment-gep-tup-like-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -22,11 +22,11 @@ impl<A:Clone> Invokable<A> for Invoker<A> {\n     }\n }\n \n-fn f<A:Clone + 'static>(a: A, b: u16) -> Box<Invokable<A>+'static> {\n+fn f<A:Clone + 'static>(a: A, b: u16) -> Box<dyn Invokable<A>+'static> {\n     box Invoker {\n         a: a,\n         b: b,\n-    } as (Box<Invokable<A>+'static>)\n+    } as (Box<dyn Invokable<A>+'static>)\n }\n \n pub fn main() {"}, {"sha": "96ba2ee3b62b8c12ffd2875d792a988e67cfd271", "filename": "src/test/run-pass/associated-types/associated-types-doubleendediterator-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-doubleendediterator-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-doubleendediterator-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-doubleendediterator-object.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n #![feature(box_syntax)]\n \n-fn pairwise_sub(mut t: Box<DoubleEndedIterator<Item=isize>>) -> isize {\n+fn pairwise_sub(mut t: Box<dyn DoubleEndedIterator<Item=isize>>) -> isize {\n     let mut result = 0;\n     loop {\n         let front = t.next();"}, {"sha": "c202c376c5fe600e751a3ece74b110ea78b58517", "filename": "src/test/run-pass/associated-types/associated-types-eq-obj.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-eq-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-eq-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-eq-obj.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -15,7 +15,7 @@ impl Foo for char {\n     fn boo(&self) -> Bar { Bar }\n }\n \n-fn baz(x: &Foo<A=Bar>) -> Bar {\n+fn baz(x: &dyn Foo<A=Bar>) -> Bar {\n     x.boo()\n }\n "}, {"sha": "eec95a141f5cf2e59a09712e582f2a2b1b4a7955", "filename": "src/test/run-pass/associated-types/associated-types-projection-in-object-type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-object-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-object-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-object-type.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -19,20 +19,20 @@ pub trait Subscriber {\n \n pub trait Publisher<'a> {\n     type Output;\n-    fn subscribe(&mut self, _: Box<Subscriber<Input=Self::Output> + 'a>);\n+    fn subscribe(&mut self, _: Box<dyn Subscriber<Input=Self::Output> + 'a>);\n }\n \n pub trait Processor<'a> : Subscriber + Publisher<'a> { }\n \n impl<'a, P> Processor<'a> for P where P : Subscriber + Publisher<'a> { }\n \n struct MyStruct<'a> {\n-    sub: Box<Subscriber<Input=u64> + 'a>\n+    sub: Box<dyn Subscriber<Input=u64> + 'a>\n }\n \n impl<'a> Publisher<'a> for MyStruct<'a> {\n     type Output = u64;\n-    fn subscribe(&mut self, t : Box<Subscriber<Input=u64> + 'a>) {\n+    fn subscribe(&mut self, t : Box<dyn Subscriber<Input=u64> + 'a>) {\n         self.sub = t;\n     }\n }"}, {"sha": "fadb0784e75257eb35354fe9b7c7885ed67b710b", "filename": "src/test/run-pass/autoref-autoderef/autoderef-method-on-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-on-trait.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -11,6 +11,6 @@ impl double for usize {\n }\n \n pub fn main() {\n-    let x: Box<_> = box (box 3usize as Box<double>);\n+    let x: Box<_> = box (box 3usize as Box<dyn double>);\n     assert_eq!(x.double(), 6);\n }"}, {"sha": "8a6dfe76d6065c9c204c1dc3bfb18522a02d6b16", "filename": "src/test/run-pass/borrowck/borrowck-trait-lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-trait-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-trait-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-trait-lifetime.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -12,7 +12,7 @@ use std::marker;\n fn main() {\n     trait T { fn foo(&self) {} }\n \n-    fn f<'a, V: T>(v: &'a V) -> &'a T {\n-        v as &'a T\n+    fn f<'a, V: T>(v: &'a V) -> &'a dyn T {\n+        v as &'a dyn T\n     }\n }"}, {"sha": "a27dd9eef52ec31f351258d92418625ea7150fe5", "filename": "src/test/run-pass/cast-rfc0401-vtable-kinds.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -15,9 +15,9 @@ impl<T> Foo<T> for () {}\n impl Foo<u32> for u32 { fn foo(&self, _: u32) -> u32 { self+43 } }\n impl Bar for () {}\n \n-unsafe fn round_trip_and_call<'a>(t: *const (Foo<u32>+'a)) -> u32 {\n-    let foo_e : *const Foo<u16> = t as *const _;\n-    let r_1 = foo_e as *mut Foo<u32>;\n+unsafe fn round_trip_and_call<'a>(t: *const (dyn Foo<u32>+'a)) -> u32 {\n+    let foo_e : *const dyn Foo<u16> = t as *const _;\n+    let r_1 = foo_e as *mut dyn Foo<u32>;\n \n     (&*r_1).foo(0)\n }\n@@ -38,8 +38,8 @@ fn tuple_i32_to_u32<T:?Sized>(u: *const (i32, T)) -> *const (u32, T) {\n \n fn main() {\n     let x = 4u32;\n-    let y : &Foo<u32> = &x;\n-    let fl = unsafe { round_trip_and_call(y as *const Foo<u32>) };\n+    let y : &dyn Foo<u32> = &x;\n+    let fl = unsafe { round_trip_and_call(y as *const dyn Foo<u32>) };\n     assert_eq!(fl, (43+4));\n \n     let s = FooS([0,1,2]);"}, {"sha": "017b63c737493d5990e2756be7badd651346a3e3", "filename": "src/test/run-pass/cast-rfc0401.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-rfc0401.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -25,8 +25,8 @@ fn main()\n     // coercion-cast\n     let mut it = vec![137].into_iter();\n     let itr: &mut vec::IntoIter<u32> = &mut it;\n-    assert_eq!((itr as &mut Iterator<Item=u32>).next(), Some(137));\n-    assert_eq!((itr as &mut Iterator<Item=u32>).next(), None);\n+    assert_eq!((itr as &mut dyn Iterator<Item=u32>).next(), Some(137));\n+    assert_eq!((itr as &mut dyn Iterator<Item=u32>).next(), None);\n \n     assert_eq!(Some(4u32) as Option<u32>, Some(4u32));\n     assert_eq!((1u32,2u32) as (u32,u32), (1,2));"}, {"sha": "0eead0194efa2999a4d5068844b1020dc52fd7f7", "filename": "src/test/run-pass/close-over-big-then-small-data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -24,11 +24,11 @@ impl<A:Clone> Invokable<A> for Invoker<A> {\n     }\n }\n \n-fn f<A:Clone + 'static>(a: A, b: u16) -> Box<Invokable<A>+'static> {\n+fn f<A:Clone + 'static>(a: A, b: u16) -> Box<dyn Invokable<A>+'static> {\n     box Invoker {\n         a: a,\n         b: b,\n-    } as (Box<Invokable<A>+'static>)\n+    } as (Box<dyn Invokable<A>+'static>)\n }\n \n pub fn main() {"}, {"sha": "26f53a9c18213b2f47894fc579632742d0fe956c", "filename": "src/test/run-pass/codegen-object-shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fcodegen-object-shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fcodegen-object-shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcodegen-object-shim.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    assert_eq!((ToString::to_string as fn(&(ToString+'static)) -> String)(&\"foo\"),\n+    assert_eq!((ToString::to_string as fn(&(dyn ToString+'static)) -> String)(&\"foo\"),\n         String::from(\"foo\"));\n }"}, {"sha": "b44aa6ab37760dfbd2c6ad529910624325b0c438", "filename": "src/test/run-pass/coerce/coerce-expect-unsized.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fcoerce%2Fcoerce-expect-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fcoerce%2Fcoerce-expect-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce%2Fcoerce-expect-unsized.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -12,16 +12,16 @@ pub fn main() {\n     let _: Box<[isize]> = Box::new({ [1, 2, 3] });\n     let _: Box<[isize]> = Box::new(if true { [1, 2, 3] } else { [1, 3, 4] });\n     let _: Box<[isize]> = Box::new(match true { true => [1, 2, 3], false => [1, 3, 4] });\n-    let _: Box<Fn(isize) -> _> = Box::new({ |x| (x as u8) });\n-    let _: Box<Debug> = Box::new(if true { false } else { true });\n-    let _: Box<Debug> = Box::new(match true { true => 'a', false => 'b' });\n+    let _: Box<dyn Fn(isize) -> _> = Box::new({ |x| (x as u8) });\n+    let _: Box<dyn Debug> = Box::new(if true { false } else { true });\n+    let _: Box<dyn Debug> = Box::new(match true { true => 'a', false => 'b' });\n \n     let _: &[isize] = &{ [1, 2, 3] };\n     let _: &[isize] = &if true { [1, 2, 3] } else { [1, 3, 4] };\n     let _: &[isize] = &match true { true => [1, 2, 3], false => [1, 3, 4] };\n-    let _: &Fn(isize) -> _ = &{ |x| (x as u8) };\n-    let _: &Debug = &if true { false } else { true };\n-    let _: &Debug = &match true { true => 'a', false => 'b' };\n+    let _: &dyn Fn(isize) -> _ = &{ |x| (x as u8) };\n+    let _: &dyn Debug = &if true { false } else { true };\n+    let _: &dyn Debug = &match true { true => 'a', false => 'b' };\n \n     let _: &str = &{ String::new() };\n     let _: &str = &if true { String::from(\"...\") } else { 5.to_string() };\n@@ -31,12 +31,12 @@ pub fn main() {\n     };\n \n     let _: Box<[isize]> = Box::new([1, 2, 3]);\n-    let _: Box<Fn(isize) -> _> = Box::new(|x| (x as u8));\n+    let _: Box<dyn Fn(isize) -> _> = Box::new(|x| (x as u8));\n \n     let _: Rc<RefCell<[isize]>> = Rc::new(RefCell::new([1, 2, 3]));\n-    let _: Rc<RefCell<FnMut(isize) -> _>> = Rc::new(RefCell::new(|x| (x as u8)));\n+    let _: Rc<RefCell<dyn FnMut(isize) -> _>> = Rc::new(RefCell::new(|x| (x as u8)));\n \n-    let _: Vec<Box<Fn(isize) -> _>> = vec![\n+    let _: Vec<Box<dyn Fn(isize) -> _>> = vec![\n         Box::new(|x| (x as u8)),\n         Box::new(|x| (x as i16 as u8)),\n     ];"}, {"sha": "12a2999d79d479ca00f93e9bcdcc3c0f1e93d8e3", "filename": "src/test/run-pass/consts/const-trait-to-trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-trait-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-trait-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-trait-to-trait.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -8,17 +8,17 @@ struct Bar;\n impl Trait for Bar {}\n \n fn main() {\n-    let x: &[&Trait] = &[{ &Bar }];\n+    let x: &[&dyn Trait] = &[{ &Bar }];\n }\n \n // Issue #25748 - the cast causes an &Encoding -> &Encoding coercion:\n pub struct UTF8Encoding;\n pub const UTF_8: &'static UTF8Encoding = &UTF8Encoding;\n pub trait Encoding {}\n impl Encoding for UTF8Encoding {}\n-pub fn f() -> &'static Encoding { UTF_8 as &'static Encoding }\n+pub fn f() -> &'static dyn Encoding { UTF_8 as &'static dyn Encoding }\n \n // Root of the problem: &Trait -> &Trait coercions:\n-const FOO: &'static Trait = &Bar;\n-const BAR: &'static Trait = FOO;\n+const FOO: &'static dyn Trait = &Bar;\n+const BAR: &'static dyn Trait = FOO;\n fn foo() { let _x = BAR; }"}, {"sha": "eb3a8948fc80d7acc70ebe72ce755c223a9dee04", "filename": "src/test/run-pass/deriving/deriving-show.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-show.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-show.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-show.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -17,7 +17,7 @@ enum Enum {\n }\n \n #[derive(Debug)]\n-struct Pointers(*const Send, *mut Sync);\n+struct Pointers(*const dyn Send, *mut dyn Sync);\n \n macro_rules! t {\n     ($x:expr, $expected:expr) => {"}, {"sha": "1bc3b4c157ca8d596e9353cb905d427a5f165756", "filename": "src/test/run-pass/drop/drop-struct-as-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fdrop%2Fdrop-struct-as-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fdrop%2Fdrop-struct-as-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop%2Fdrop-struct-as-object.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -30,7 +30,7 @@ impl Drop for Cat {\n pub fn main() {\n     {\n         let x = box Cat {name: 22};\n-        let nyan: Box<Dummy> = x as Box<Dummy>;\n+        let nyan: Box<dyn Dummy> = x as Box<dyn Dummy>;\n     }\n     unsafe {\n         assert_eq!(value, 22);"}, {"sha": "24d83eb5343eccced01c8fafe13b8771b0030f2f", "filename": "src/test/run-pass/dynamically-sized-types/dst-coerce-custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coerce-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coerce-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coerce-custom.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -36,7 +36,7 @@ fn main() {\n \n     // Trait objects.\n     let a: Bar<i32> = Bar { x: &42 };\n-    let b: Bar<Baz> = a;\n+    let b: Bar<dyn Baz> = a;\n     unsafe {\n         assert_eq!((*b.x).get(), 42);\n     }"}, {"sha": "683fa6850fd81075ab2ade11d200d1c18ddce41b", "filename": "src/test/run-pass/dynamically-sized-types/dst-coerce-rc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coerce-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coerce-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coerce-rc.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -26,17 +26,17 @@ fn main() {\n     assert_eq!(b[2], 3);\n \n     let a: Rc<i32> = Rc::new(42);\n-    let b: Rc<Baz> = a.clone();\n+    let b: Rc<dyn Baz> = a.clone();\n     assert_eq!(b.get(), 42);\n \n     let c: Weak<i32> = Rc::downgrade(&a);\n-    let d: Weak<Baz> = c.clone();\n+    let d: Weak<dyn Baz> = c.clone();\n \n     let _c = b.clone();\n \n     let a: Rc<RefCell<i32>> = Rc::new(RefCell::new(42));\n-    let b: Rc<RefCell<Baz>> = a.clone();\n+    let b: Rc<RefCell<dyn Baz>> = a.clone();\n     assert_eq!(b.borrow().get(), 42);\n     // FIXME\n-    let c: Weak<RefCell<Baz>> = Rc::downgrade(&a) as Weak<_>;\n+    let c: Weak<RefCell<dyn Baz>> = Rc::downgrade(&a) as Weak<_>;\n }"}, {"sha": "66688e93fb80d8d00eaa1cf716f159168e65563d", "filename": "src/test/run-pass/dynamically-sized-types/dst-coercions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coercions.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -9,20 +9,20 @@ trait T { fn dummy(&self) { } }\n impl T for S {}\n \n pub fn main() {\n-    let x: &T = &S;\n+    let x: &dyn T = &S;\n     // Test we can convert from &-ptr to *-ptr of trait objects\n-    let x: *const T = &S;\n+    let x: *const dyn T = &S;\n \n     // Test we can convert from &-ptr to *-ptr of struct pointer (not DST)\n     let x: *const S = &S;\n \n     // As above, but mut\n-    let x: &mut T = &mut S;\n-    let x: *mut T = &mut S;\n+    let x: &mut dyn T = &mut S;\n+    let x: *mut dyn T = &mut S;\n \n     let x: *mut S = &mut S;\n \n     // Test we can change the mutability from mut to const.\n-    let x: &T = &mut S;\n-    let x: *const T = &mut S;\n+    let x: &dyn T = &mut S;\n+    let x: *const dyn T = &mut S;\n }"}, {"sha": "6c338e99912ec2eec32edaa156f6d9fc7b9d8523", "filename": "src/test/run-pass/dynamically-sized-types/dst-field-align.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-field-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-field-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-field-align.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -26,15 +26,15 @@ fn main() {\n     // Test that zero-offset works properly\n     let b : Baz<usize> = Baz { a: 7 };\n     assert_eq!(b.a.get(), 7);\n-    let b : &Baz<Bar> = &b;\n+    let b : &Baz<dyn Bar> = &b;\n     assert_eq!(b.a.get(), 7);\n \n     // Test that the field is aligned properly\n     let f : Foo<usize> = Foo { a: 0, b: 11 };\n     assert_eq!(f.b.get(), 11);\n     let ptr1 : *const u8 = &f.b as *const _ as *const u8;\n \n-    let f : &Foo<Bar> = &f;\n+    let f : &Foo<dyn Bar> = &f;\n     let ptr2 : *const u8 = &f.b as *const _ as *const u8;\n     assert_eq!(f.b.get(), 11);\n \n@@ -44,13 +44,13 @@ fn main() {\n     // Test that nested DSTs work properly\n     let f : Foo<Foo<usize>> = Foo { a: 0, b: Foo { a: 1, b: 17 }};\n     assert_eq!(f.b.b.get(), 17);\n-    let f : &Foo<Foo<Bar>> = &f;\n+    let f : &Foo<Foo<dyn Bar>> = &f;\n     assert_eq!(f.b.b.get(), 17);\n \n     // Test that get the pointer via destructuring works\n \n     let f : Foo<usize> = Foo { a: 0, b: 11 };\n-    let f : &Foo<Bar> = &f;\n+    let f : &Foo<dyn Bar> = &f;\n     let &Foo { a: _, b: ref bar } = f;\n     assert_eq!(bar.get(), 11);\n "}, {"sha": "980d99a6d6c11170b52e96ebe93845fc6a7bb17c", "filename": "src/test/run-pass/dynamically-sized-types/dst-index.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-index.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -19,11 +19,11 @@ impl Index<usize> for S {\n struct T;\n \n impl Index<usize> for T {\n-    type Output = Debug + 'static;\n+    type Output = dyn Debug + 'static;\n \n-    fn index<'a>(&'a self, idx: usize) -> &'a (Debug + 'static) {\n+    fn index<'a>(&'a self, idx: usize) -> &'a (dyn Debug + 'static) {\n         static X: usize = 42;\n-        &X as &(Debug + 'static)\n+        &X as &(dyn Debug + 'static)\n     }\n }\n "}, {"sha": "0893b02e74e82e97c84710fe7aad6af23879ccf4", "filename": "src/test/run-pass/dynamically-sized-types/dst-raw.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-raw.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -24,23 +24,23 @@ struct Foo<T: ?Sized> {\n pub fn main() {\n     // raw trait object\n     let x = A { f: 42 };\n-    let z: *const Trait = &x;\n+    let z: *const dyn Trait = &x;\n     let r = unsafe {\n         (&*z).foo()\n     };\n     assert_eq!(r, 42);\n \n     // raw DST struct\n     let p = Foo {f: A { f: 42 }};\n-    let o: *const Foo<Trait> = &p;\n+    let o: *const Foo<dyn Trait> = &p;\n     let r = unsafe {\n         (&*o).f.foo()\n     };\n     assert_eq!(r, 42);\n \n     // raw DST tuple\n     let p = (A { f: 42 },);\n-    let o: *const (Trait,) = &p;\n+    let o: *const (dyn Trait,) = &p;\n     let r = unsafe {\n         (&*o).0.foo()\n     };\n@@ -84,21 +84,21 @@ pub fn main() {\n \n     // all of the above with *mut\n     let mut x = A { f: 42 };\n-    let z: *mut Trait = &mut x;\n+    let z: *mut dyn Trait = &mut x;\n     let r = unsafe {\n         (&*z).foo()\n     };\n     assert_eq!(r, 42);\n \n     let mut p = Foo {f: A { f: 42 }};\n-    let o: *mut Foo<Trait> = &mut p;\n+    let o: *mut Foo<dyn Trait> = &mut p;\n     let r = unsafe {\n         (&*o).f.foo()\n     };\n     assert_eq!(r, 42);\n \n     let mut p = (A { f: 42 },);\n-    let o: *mut (Trait,) = &mut p;\n+    let o: *mut (dyn Trait,) = &mut p;\n     let r = unsafe {\n         (&*o).0.foo()\n     };"}, {"sha": "70bcc3de07d29b279962e8d60e3f32d8b2c3288e", "filename": "src/test/run-pass/dynamically-sized-types/dst-trait-tuple.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-trait-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-trait-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-trait-tuple.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -38,7 +38,7 @@ impl ToBar for Bar1 {\n }\n \n // x is a fat pointer\n-fn foo(x: &Fat<ToBar>) {\n+fn foo(x: &Fat<dyn ToBar>) {\n     assert_eq!(x.0, 5);\n     assert_eq!(x.1, \"some str\");\n     assert_eq!(x.2.to_bar(), Bar);\n@@ -49,12 +49,12 @@ fn foo(x: &Fat<ToBar>) {\n     assert_eq!(y.to_val(), 42);\n }\n \n-fn bar(x: &ToBar) {\n+fn bar(x: &dyn ToBar) {\n     assert_eq!(x.to_bar(), Bar);\n     assert_eq!(x.to_val(), 42);\n }\n \n-fn baz(x: &Fat<Fat<ToBar>>) {\n+fn baz(x: &Fat<Fat<dyn ToBar>>) {\n     assert_eq!(x.0, 5);\n     assert_eq!(x.1, \"some str\");\n     assert_eq!((x.2).0, 8);\n@@ -73,31 +73,31 @@ pub fn main() {\n     foo(&f1);\n     let f2 = &f1;\n     foo(f2);\n-    let f3: &Fat<ToBar> = f2;\n+    let f3: &Fat<dyn ToBar> = f2;\n     foo(f3);\n-    let f4: &Fat<ToBar> = &f1;\n+    let f4: &Fat<dyn ToBar> = &f1;\n     foo(f4);\n-    let f5: &Fat<ToBar> = &(5, \"some str\", Bar1 {f :42});\n+    let f5: &Fat<dyn ToBar> = &(5, \"some str\", Bar1 {f :42});\n     foo(f5);\n \n     // Zero size object.\n-    let f6: &Fat<ToBar> = &(5, \"some str\", Bar);\n+    let f6: &Fat<dyn ToBar> = &(5, \"some str\", Bar);\n     assert_eq!(f6.2.to_bar(), Bar);\n \n     // &*\n     //\n-    let f7: Box<ToBar> = Box::new(Bar1 {f :42});\n+    let f7: Box<dyn ToBar> = Box::new(Bar1 {f :42});\n     bar(&*f7);\n \n     // Deep nesting\n     let f1 = (5, \"some str\", (8, \"deep str\", Bar1 {f :42}));\n     baz(&f1);\n     let f2 = &f1;\n     baz(f2);\n-    let f3: &Fat<Fat<ToBar>> = f2;\n+    let f3: &Fat<Fat<dyn ToBar>> = f2;\n     baz(f3);\n-    let f4: &Fat<Fat<ToBar>> = &f1;\n+    let f4: &Fat<Fat<dyn ToBar>> = &f1;\n     baz(f4);\n-    let f5: &Fat<Fat<ToBar>> = &(5, \"some str\", (8, \"deep str\", Bar1 {f :42}));\n+    let f5: &Fat<Fat<dyn ToBar>> = &(5, \"some str\", (8, \"deep str\", Bar1 {f :42}));\n     baz(f5);\n }"}, {"sha": "ec6bc72192d4ffc0e1bb53fcdeba275da23ed433", "filename": "src/test/run-pass/dynamically-sized-types/dst-trait.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-trait.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -38,7 +38,7 @@ impl ToBar for Bar1 {\n }\n \n // x is a fat pointer\n-fn foo(x: &Fat<ToBar>) {\n+fn foo(x: &Fat<dyn ToBar>) {\n     assert_eq!(x.f1, 5);\n     assert_eq!(x.f2, \"some str\");\n     assert_eq!(x.ptr.to_bar(), Bar);\n@@ -49,12 +49,12 @@ fn foo(x: &Fat<ToBar>) {\n     assert_eq!(y.to_val(), 42);\n }\n \n-fn bar(x: &ToBar) {\n+fn bar(x: &dyn ToBar) {\n     assert_eq!(x.to_bar(), Bar);\n     assert_eq!(x.to_val(), 42);\n }\n \n-fn baz(x: &Fat<Fat<ToBar>>) {\n+fn baz(x: &Fat<Fat<dyn ToBar>>) {\n     assert_eq!(x.f1, 5);\n     assert_eq!(x.f2, \"some str\");\n     assert_eq!(x.ptr.f1, 8);\n@@ -73,20 +73,20 @@ pub fn main() {\n     foo(&f1);\n     let f2 = &f1;\n     foo(f2);\n-    let f3: &Fat<ToBar> = f2;\n+    let f3: &Fat<dyn ToBar> = f2;\n     foo(f3);\n-    let f4: &Fat<ToBar> = &f1;\n+    let f4: &Fat<dyn ToBar> = &f1;\n     foo(f4);\n-    let f5: &Fat<ToBar> = &Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n+    let f5: &Fat<dyn ToBar> = &Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n     foo(f5);\n \n     // Zero size object.\n-    let f6: &Fat<ToBar> = &Fat { f1: 5, f2: \"some str\", ptr: Bar };\n+    let f6: &Fat<dyn ToBar> = &Fat { f1: 5, f2: \"some str\", ptr: Bar };\n     assert_eq!(f6.ptr.to_bar(), Bar);\n \n     // &*\n     //\n-    let f7: Box<ToBar> = Box::new(Bar1 {f :42});\n+    let f7: Box<dyn ToBar> = Box::new(Bar1 {f :42});\n     bar(&*f7);\n \n     // Deep nesting\n@@ -95,11 +95,11 @@ pub fn main() {\n     baz(&f1);\n     let f2 = &f1;\n     baz(f2);\n-    let f3: &Fat<Fat<ToBar>> = f2;\n+    let f3: &Fat<Fat<dyn ToBar>> = f2;\n     baz(f3);\n-    let f4: &Fat<Fat<ToBar>> = &f1;\n+    let f4: &Fat<Fat<dyn ToBar>> = &f1;\n     baz(f4);\n-    let f5: &Fat<Fat<ToBar>> =\n+    let f5: &Fat<Fat<dyn ToBar>> =\n         &Fat { f1: 5, f2: \"some str\", ptr: Fat { f1: 8, f2: \"deep str\", ptr: Bar1 {f :42}} };\n     baz(f5);\n }"}, {"sha": "6cce6c723c5a2a4056b6912a8e1d33bca1890efc", "filename": "src/test/run-pass/extern/extern-types-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fextern%2Fextern-types-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fextern%2Fextern-types-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern%2Fextern-types-trait-impl.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -18,7 +18,7 @@ impl Foo for A {\n \n fn assert_foo<T: ?Sized + Foo>() { }\n \n-fn use_foo<T: ?Sized + Foo>(x: &Foo) {\n+fn use_foo<T: ?Sized + Foo>(x: &dyn Foo) {\n     x.foo();\n }\n "}, {"sha": "1943abe9e14da596fc4a015bf327dcfdef7fd9e3", "filename": "src/test/run-pass/fat-ptr-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ffat-ptr-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ffat-ptr-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffat-ptr-cast.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -25,7 +25,7 @@ fn main() {\n     assert_eq!(a as usize, b as *const () as usize);\n \n     // And conversion to a void pointer/address for trait objects too.\n-    let a: *mut Foo = &mut Bar;\n+    let a: *mut dyn Foo = &mut Bar;\n     let b = a as *mut ();\n     let c = a as *const () as usize;\n     let d = unsafe {"}, {"sha": "e97785b5cacdfbc7ef8ee25378f47a7fc345828f", "filename": "src/test/run-pass/functions-closures/closure-expected-type/issue-38714.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fclosure-expected-type%2Fissue-38714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fclosure-expected-type%2Fissue-38714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fclosure-expected-type%2Fissue-38714.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -5,7 +5,7 @@ struct UsizeRef<'a> {\n     a: &'a usize\n }\n \n-type RefTo = Box<for<'r> Fn(&'r Vec<usize>) -> UsizeRef<'r>>;\n+type RefTo = Box<dyn for<'r> Fn(&'r Vec<usize>) -> UsizeRef<'r>>;\n \n fn ref_to<'a>(vec: &'a Vec<usize>) -> UsizeRef<'a> {\n     UsizeRef{ a: &vec[0]}"}, {"sha": "870ff980ec64d0ac897d9b475c6896a3816e6881", "filename": "src/test/run-pass/generics/generic-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fgenerics%2Fgeneric-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fgenerics%2Fgeneric-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerics%2Fgeneric-object.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -17,6 +17,6 @@ impl Foo<isize> for S {\n \n pub fn main() {\n     let x = box S { x: 1 };\n-    let y = x as Box<Foo<isize>>;\n+    let y = x as Box<dyn Foo<isize>>;\n     assert_eq!(y.get(), 1);\n }"}, {"sha": "987a3e414f5c0dfc2529aff1be1df6586157a204", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -19,7 +19,7 @@ mod map_reduce {\n     use std::str;\n     use std::thread;\n \n-    pub type putter<'a> = Box<FnMut(String, String) + 'a>;\n+    pub type putter<'a> = Box<dyn FnMut(String, String) + 'a>;\n \n     pub type mapper = extern fn(String, putter);\n "}, {"sha": "cc766c0605c9f03e648a2299bba744b01bb6fb2b", "filename": "src/test/run-pass/higher-rank-trait-bounds/hrtb-binder-levels-in-object-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-binder-levels-in-object-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-binder-levels-in-object-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-binder-levels-in-object-types.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -19,7 +19,7 @@ struct Tcx<'tcx> {\n impl<'tcx> Typer<'tcx> for Tcx<'tcx> {\n }\n \n-fn g<'tcx>(typer: &Typer<'tcx>) {\n+fn g<'tcx>(typer: &dyn Typer<'tcx>) {\n }\n \n fn check_static_type<'x>(tcx: &Tcx<'x>) {"}, {"sha": "8431226a3ece1205a9dad2c9c292db413bad4751", "filename": "src/test/run-pass/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-debruijn-object-types-in-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-debruijn-object-types-in-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-debruijn-object-types-in-closures.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -7,7 +7,7 @@ trait Typer<'tcx> {\n     fn dummy(&self) { }\n }\n \n-fn g<F>(_: F) where F: FnOnce(&Typer) {}\n+fn g<F>(_: F) where F: FnOnce(&dyn Typer) {}\n \n fn h() {\n     g(|typer| typer.dummy())"}, {"sha": "ff84ad9d2988e4bb2c5507659b5e4c902469d939", "filename": "src/test/run-pass/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-fn-like-trait-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-fn-like-trait-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-fn-like-trait-object.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -6,7 +6,7 @@ trait FnLike<A,R> {\n     fn call(&self, arg: A) -> R;\n }\n \n-type FnObject<'b> = for<'a> FnLike<&'a isize, &'a isize> + 'b;\n+type FnObject<'b> = dyn for<'a> FnLike<&'a isize, &'a isize> + 'b;\n \n struct Identity;\n "}, {"sha": "1fab9758c5c83bd28adde3df8dee45f3d8a57d11", "filename": "src/test/run-pass/higher-rank-trait-bounds/hrtb-parse.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-parse.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -24,8 +24,8 @@ fn foo01<T: for<'a> Get<&'a i32, &'a i32>>(t: T)\n \n // Parse HRTB with explicit `for` in various sorts of types:\n \n-fn foo10(t: Box<for<'a> Get<i32, i32>>) { }\n-fn foo11(t: Box<for<'a> Fn(i32) -> i32>) { }\n+fn foo10(t: Box<dyn for<'a> Get<i32, i32>>) { }\n+fn foo11(t: Box<dyn for<'a> Fn(i32) -> i32>) { }\n \n fn foo20(t: for<'a> fn(i32) -> i32) { }\n fn foo21(t: for<'a> unsafe fn(i32) -> i32) { }"}, {"sha": "6834c392d4e96634a8791cf071857fec2e9a3925", "filename": "src/test/run-pass/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-precedence-of-plus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-precedence-of-plus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-precedence-of-plus.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -6,7 +6,7 @@\n // 'static` and not `Fn(isize) -> (isize + 'static)`. The latter would\n // cause a compilation error. Issue #18772.\n \n-fn adder(y: isize) -> Box<Fn(isize) -> isize + 'static> {\n+fn adder(y: isize) -> Box<dyn Fn(isize) -> isize + 'static> {\n     Box::new(move |x| y + x)\n }\n "}, {"sha": "b97fdf4df508f2160a5e722d97741824190d9e24", "filename": "src/test/run-pass/higher-rank-trait-bounds/hrtb-resolve-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-resolve-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-resolve-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-resolve-lifetime.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -8,7 +8,7 @@ trait FnLike<A,R> {\n     fn call(&self, arg: A) -> R;\n }\n \n-type FnObject<'b> = for<'a> FnLike<&'a isize, &'a isize> + 'b;\n+type FnObject<'b> = dyn for<'a> FnLike<&'a isize, &'a isize> + 'b;\n \n fn main() {\n }"}, {"sha": "d8c726cdd71e50b0bb94b6991fe72f11754194bc", "filename": "src/test/run-pass/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-trait-object-paren-notation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-trait-object-paren-notation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-trait-object-paren-notation.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -5,7 +5,7 @@ trait FnLike<A,R> {\n     fn call(&self, arg: A) -> R;\n }\n \n-type FnObject<'b> = for<'a> FnLike<(&'a i32,), &'a i32> + 'b;\n+type FnObject<'b> = dyn for<'a> FnLike<(&'a i32,), &'a i32> + 'b;\n \n struct Identity;\n "}, {"sha": "41ebb3f5a14ab1ee07b4cf085edf9cf6457198d5", "filename": "src/test/run-pass/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-trait-object-passed-to-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-trait-object-passed-to-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-trait-object-passed-to-closure.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -17,7 +17,7 @@ struct NoAnn<'ast> {\n impl<'ast> PrinterSupport<'ast> for NoAnn<'ast> {\n }\n \n-fn foo<'ast, G>(f: Option<&'ast usize>, g: G) where G: FnOnce(&PrinterSupport) {\n+fn foo<'ast, G>(f: Option<&'ast usize>, g: G) where G: FnOnce(&dyn PrinterSupport) {\n     let annotation = NoAnn { f: f };\n     g(&annotation)\n }"}, {"sha": "6660f393f7dac5f5b1990a43cd4203ace8aab1ec", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -93,7 +93,7 @@ pub fn main() {\n     t!(format!(\"{:#4}\", C), \"\u2603123\");\n     t!(format!(\"{:b}\", D), \"aa\u2603bb\");\n \n-    let a: &fmt::Debug = &1;\n+    let a: &dyn fmt::Debug = &1;\n     t!(format!(\"{:?}\", a), \"1\");\n \n "}, {"sha": "f1d6b37a6843f3fff6f98efdb8628b82aaba9f82", "filename": "src/test/run-pass/issues/issue-10802.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10802.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10802.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10802.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -24,23 +24,23 @@ trait MyTrait { fn dummy(&self) { } }\n impl MyTrait for Box<DroppableStruct> {}\n impl MyTrait for Box<DroppableEnum> {}\n \n-struct Whatever { w: Box<MyTrait+'static> }\n+struct Whatever { w: Box<dyn MyTrait+'static> }\n impl  Whatever {\n-    fn new(w: Box<MyTrait+'static>) -> Whatever {\n+    fn new(w: Box<dyn MyTrait+'static>) -> Whatever {\n         Whatever { w: w }\n     }\n }\n \n fn main() {\n     {\n         let f: Box<_> = box DroppableStruct;\n-        let _a = Whatever::new(box f as Box<MyTrait>);\n+        let _a = Whatever::new(box f as Box<dyn MyTrait>);\n     }\n     assert!(unsafe { DROPPED });\n     unsafe { DROPPED = false; }\n     {\n         let f: Box<_> = box DroppableEnum::DroppableVariant1;\n-        let _a = Whatever::new(box f as Box<MyTrait>);\n+        let _a = Whatever::new(box f as Box<dyn MyTrait>);\n     }\n     assert!(unsafe { DROPPED });\n }"}, {"sha": "ce0951eafdd346d46d92c29b1cfb0c9f021821a8", "filename": "src/test/run-pass/issues/issue-11205.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11205.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -5,44 +5,44 @@\n \n trait Foo { fn dummy(&self) { } }\n impl Foo for isize {}\n-fn foo(_: [&Foo; 2]) {}\n-fn foos(_: &[&Foo]) {}\n+fn foo(_: [&dyn Foo; 2]) {}\n+fn foos(_: &[&dyn Foo]) {}\n fn foog<T>(_: &[T], _: &[T]) {}\n \n-fn bar(_: [Box<Foo>; 2]) {}\n-fn bars(_: &[Box<Foo+'static>]) {}\n+fn bar(_: [Box<dyn Foo>; 2]) {}\n+fn bars(_: &[Box<dyn Foo+'static>]) {}\n \n fn main() {\n-    let x: [&Foo; 2] = [&1, &2];\n+    let x: [&dyn Foo; 2] = [&1, &2];\n     foo(x);\n     foo([&1, &2]);\n \n     let r = &1;\n-    let x: [&Foo; 2] = [r; 2];\n+    let x: [&dyn Foo; 2] = [r; 2];\n     foo(x);\n     foo([&1; 2]);\n \n-    let x: &[&Foo] = &[&1, &2];\n+    let x: &[&dyn Foo] = &[&1, &2];\n     foos(x);\n     foos(&[&1, &2]);\n \n-    let x: &[&Foo] = &[&1, &2];\n+    let x: &[&dyn Foo] = &[&1, &2];\n     let r = &1;\n     foog(x, &[r]);\n \n-    let x: [Box<Foo>; 2] = [Box::new(1), Box::new(2)];\n+    let x: [Box<dyn Foo>; 2] = [Box::new(1), Box::new(2)];\n     bar(x);\n     bar([Box::new(1), Box::new(2)]);\n \n-    let x: &[Box<Foo+'static>] = &[Box::new(1), Box::new(2)];\n+    let x: &[Box<dyn Foo+'static>] = &[Box::new(1), Box::new(2)];\n     bars(x);\n     bars(&[Box::new(1), Box::new(2)]);\n \n-    let x: &[Box<Foo+'static>] = &[Box::new(1), Box::new(2)];\n+    let x: &[Box<dyn Foo+'static>] = &[Box::new(1), Box::new(2)];\n     foog(x, &[Box::new(1)]);\n \n     struct T<'a> {\n-        t: [&'a (Foo+'a); 2]\n+        t: [&'a (dyn Foo+'a); 2]\n     }\n     let _n = T {\n         t: [&1, &2]\n@@ -51,34 +51,34 @@ fn main() {\n     let _n = T {\n         t: [r; 2]\n     };\n-    let x: [&Foo; 2] = [&1, &2];\n+    let x: [&dyn Foo; 2] = [&1, &2];\n     let _n = T {\n         t: x\n     };\n \n     struct F<'b> {\n-        t: &'b [&'b (Foo+'b)]\n+        t: &'b [&'b (dyn Foo+'b)]\n     }\n     let _n = F {\n         t: &[&1, &2]\n     };\n     let r = &1;\n-    let r: [&Foo; 2] = [r; 2];\n+    let r: [&dyn Foo; 2] = [r; 2];\n     let _n = F {\n         t: &r\n     };\n-    let x: [&Foo; 2] = [&1, &2];\n+    let x: [&dyn Foo; 2] = [&1, &2];\n     let _n = F {\n         t: &x\n     };\n \n     struct M<'a> {\n-        t: &'a [Box<Foo+'static>]\n+        t: &'a [Box<dyn Foo+'static>]\n     }\n     let _n = M {\n         t: &[Box::new(1), Box::new(2)]\n     };\n-    let x: [Box<Foo>; 2] = [Box::new(1), Box::new(2)];\n+    let x: [Box<dyn Foo>; 2] = [Box::new(1), Box::new(2)];\n     let _n = M {\n         t: &x\n     };"}, {"sha": "848ed6ac7a8ff12eb6d6ab113796f5f601dacc0c", "filename": "src/test/run-pass/issues/issue-11267.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11267.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11267.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11267.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -10,7 +10,7 @@ impl T<isize> for Empty {\n     fn next(&mut self) -> Option<isize> { None }\n }\n \n-fn do_something_with(a : &mut T<isize>) {\n+fn do_something_with(a : &mut dyn T<isize>) {\n     println!(\"{:?}\", a.next())\n }\n "}, {"sha": "be18c736f1483fe8ab141709523f2a8f41379ad8", "filename": "src/test/run-pass/issues/issue-11677.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11677.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11677.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11677.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -11,8 +11,8 @@ trait X<T> {\n     fn dummy(&self) -> T { panic!() }\n }\n \n-struct S<T> {f: Box<X<T>+'static>,\n-             g: Box<X<T>+'static>}\n+struct S<T> {f: Box<dyn X<T>+'static>,\n+             g: Box<dyn X<T>+'static>}\n \n struct F;\n impl X<isize> for F {"}, {"sha": "cb5e3dff3b31b395b5c36efeaffc26e9f5cb6aed", "filename": "src/test/run-pass/issues/issue-11709.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11709.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -9,7 +9,7 @@\n \n struct S {x:()}\n \n-fn test(slot: &mut Option<Box<FnMut() -> Box<FnMut()>>>) -> () {\n+fn test(slot: &mut Option<Box<dyn FnMut() -> Box<dyn FnMut()>>>) -> () {\n   let a = slot.take();\n   let _a = match a {\n     // `{let .. a(); }` would break"}, {"sha": "e2756ec970c39d7713956ef1b9971f94b83dc4ab", "filename": "src/test/run-pass/issues/issue-12744.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-12744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-12744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-12744.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n fn main() {\n-    fn test() -> Box<std::any::Any + 'static> { Box::new(1) }\n+    fn test() -> Box<dyn std::any::Any + 'static> { Box::new(1) }\n     println!(\"{:?}\", test())\n }"}, {"sha": "63f3589c6cc635c8a7563c58d97fc445065988f9", "filename": "src/test/run-pass/issues/issue-13507-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13507-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13507-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13507-2.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -23,7 +23,7 @@ pub fn type_ids() -> Vec<TypeId> {\n         TypeId::of::<FooFnPtr>(),\n         TypeId::of::<FooNil>(),\n         TypeId::of::<FooTuple>(),\n-        TypeId::of::<FooTrait>(),\n+        TypeId::of::<dyn FooTrait>(),\n         TypeId::of::<FooStruct>(),\n         TypeId::of::<FooEnum>()\n     ]"}, {"sha": "9f9db067bf4b5ea8924637d59e785094da61e554", "filename": "src/test/run-pass/issues/issue-13808.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13808.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13808.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13808.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -4,7 +4,7 @@\n // pretty-expanded FIXME #23616\n \n struct Foo<'a> {\n-    listener: Box<FnMut() + 'a>,\n+    listener: Box<dyn FnMut() + 'a>,\n }\n \n impl<'a> Foo<'a> {"}, {"sha": "6bf8a589959c57afa908a31f6f8f686e94880cc1", "filename": "src/test/run-pass/issues/issue-14399.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14399.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14399.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14399.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -16,5 +16,5 @@ impl A for B1 {}\n \n fn main() {\n     let v: Box<_> = box B1;\n-    let _c: Box<A> = v.clone();\n+    let _c: Box<dyn A> = v.clone();\n }"}, {"sha": "5d8aab2ce74ce532fde522ebda3a3989ff44c6cd", "filename": "src/test/run-pass/issues/issue-14589.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14589.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -5,9 +5,9 @@\n // pretty-expanded FIXME #23616\n \n fn main() {\n-    send::<Box<Foo>>(Box::new(Output(0)));\n-    Test::<Box<Foo>>::foo(Box::new(Output(0)));\n-    Test::<Box<Foo>>::new().send(Box::new(Output(0)));\n+    send::<Box<dyn Foo>>(Box::new(Output(0)));\n+    Test::<Box<dyn Foo>>::foo(Box::new(Output(0)));\n+    Test::<Box<dyn Foo>>::new().send(Box::new(Output(0)));\n }\n \n fn send<T>(_: T) {}"}, {"sha": "00b2e3607fcba4f872eb9f01f5c18d553a57f17b", "filename": "src/test/run-pass/issues/issue-14821.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14821.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14821.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14821.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -6,16 +6,16 @@ struct Meow;\n impl SomeTrait for Meow {}\n \n struct Foo<'a> {\n-    x: &'a SomeTrait,\n-    y: &'a SomeTrait,\n+    x: &'a dyn SomeTrait,\n+    y: &'a dyn SomeTrait,\n }\n \n impl<'a> Foo<'a> {\n-    pub fn new<'b>(x: &'b SomeTrait, y: &'b SomeTrait) -> Foo<'b> { Foo { x: x, y: y } }\n+    pub fn new<'b>(x: &'b dyn SomeTrait, y: &'b dyn SomeTrait) -> Foo<'b> { Foo { x: x, y: y } }\n }\n \n fn main() {\n     let r = Meow;\n     let s = Meow;\n-    let q = Foo::new(&r as &SomeTrait, &s as &SomeTrait);\n+    let q = Foo::new(&r as &dyn SomeTrait, &s as &dyn SomeTrait);\n }"}, {"sha": "943615433549e2e84e518e4ca494fc192f860536", "filename": "src/test/run-pass/issues/issue-14919.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14919.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -9,7 +9,7 @@ trait Matcher {\n \n struct CharPredMatcher<'a, 'b> {\n     str: &'a str,\n-    pred: Box<FnMut(char) -> bool + 'b>,\n+    pred: Box<dyn FnMut(char) -> bool + 'b>,\n }\n \n impl<'a, 'b> Matcher for CharPredMatcher<'a, 'b> {"}, {"sha": "a12564ca9c0ee40a301c2bf91856a0ade73a5040", "filename": "src/test/run-pass/issues/issue-14958.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14958.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14958.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14958.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -7,17 +7,17 @@ trait Foo { fn dummy(&self) { }}\n \n struct Bar;\n \n-impl<'a> std::ops::Fn<(&'a (Foo+'a),)> for Bar {\n-    extern \"rust-call\" fn call(&self, _: (&'a Foo,)) {}\n+impl<'a> std::ops::Fn<(&'a (dyn Foo+'a),)> for Bar {\n+    extern \"rust-call\" fn call(&self, _: (&'a dyn Foo,)) {}\n }\n \n-impl<'a> std::ops::FnMut<(&'a (Foo+'a),)> for Bar {\n-    extern \"rust-call\" fn call_mut(&mut self, a: (&'a Foo,)) { self.call(a) }\n+impl<'a> std::ops::FnMut<(&'a (dyn Foo+'a),)> for Bar {\n+    extern \"rust-call\" fn call_mut(&mut self, a: (&'a dyn Foo,)) { self.call(a) }\n }\n \n-impl<'a> std::ops::FnOnce<(&'a (Foo+'a),)> for Bar {\n+impl<'a> std::ops::FnOnce<(&'a (dyn Foo+'a),)> for Bar {\n     type Output = ();\n-    extern \"rust-call\" fn call_once(self, a: (&'a Foo,)) { self.call(a) }\n+    extern \"rust-call\" fn call_once(self, a: (&'a dyn Foo,)) { self.call(a) }\n }\n \n struct Baz;"}, {"sha": "7b137b4af56a7d9745f7a9cd91aac7771d91b3db", "filename": "src/test/run-pass/issues/issue-15155.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15155.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15155.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15155.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -4,18 +4,18 @@ trait IndirectTraitWithSend: TraitWithSend {}\n \n // Check struct instantiation (Box<TraitWithSend> will only have Send if TraitWithSend has Send)\n #[allow(dead_code)]\n-struct Blah { x: Box<TraitWithSend> }\n+struct Blah { x: Box<dyn TraitWithSend> }\n impl TraitWithSend for Blah {}\n \n // Struct instantiation 2-levels deep\n #[allow(dead_code)]\n-struct IndirectBlah { x: Box<IndirectTraitWithSend> }\n+struct IndirectBlah { x: Box<dyn IndirectTraitWithSend> }\n impl TraitWithSend for IndirectBlah {}\n impl IndirectTraitWithSend for IndirectBlah {}\n \n fn test_trait<T: Send + ?Sized>() { println!(\"got here!\") }\n \n fn main() {\n-    test_trait::<TraitWithSend>();\n-    test_trait::<IndirectTraitWithSend>();\n+    test_trait::<dyn TraitWithSend>();\n+    test_trait::<dyn IndirectTraitWithSend>();\n }"}, {"sha": "9ceffff2e38066ac903cfe1b37ccdd83025fcb3a", "filename": "src/test/run-pass/issues/issue-15763.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15763.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -78,12 +78,12 @@ fn main() {\n     assert_eq!(cc().unwrap(), 3);\n     assert_eq!(dd().unwrap(), 3);\n \n-    let i = box 32isize as Box<A>;\n+    let i = box 32isize as Box<dyn A>;\n     assert_eq!(i.aaa(), 3);\n-    let i = box 32isize as Box<A>;\n+    let i = box 32isize as Box<dyn A>;\n     assert_eq!(i.bbb(), 3);\n-    let i = box 32isize as Box<A>;\n+    let i = box 32isize as Box<dyn A>;\n     assert_eq!(i.ccc().unwrap(), 3);\n-    let i = box 32isize as Box<A>;\n+    let i = box 32isize as Box<dyn A>;\n     assert_eq!(i.ddd().unwrap(), 3);\n }"}, {"sha": "54ad8fd076e4e871ccf601daa2671551b7018764", "filename": "src/test/run-pass/issues/issue-16739.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16739.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -39,12 +39,12 @@ impl FnOnce<(u32,u32)> for Foo {\n }\n \n fn main() {\n-    let mut f = box Foo { foo: 42 } as Box<FnMut() -> u32>;\n+    let mut f = box Foo { foo: 42 } as Box<dyn FnMut() -> u32>;\n     assert_eq!(f.call_mut(()), 42);\n \n-    let mut f = box Foo { foo: 40 } as Box<FnMut(u32) -> u32>;\n+    let mut f = box Foo { foo: 40 } as Box<dyn FnMut(u32) -> u32>;\n     assert_eq!(f.call_mut((2,)), 42);\n \n-    let mut f = box Foo { foo: 40 } as Box<FnMut(u32, u32) -> u32>;\n+    let mut f = box Foo { foo: 40 } as Box<dyn FnMut(u32, u32) -> u32>;\n     assert_eq!(f.call_mut((1, 1)), 42);\n }"}, {"sha": "c3c6ff304888db8c6627a0608e9bb0ba0ad3b8c8", "filename": "src/test/run-pass/issues/issue-16922.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16922.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16922.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16922.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -7,5 +7,5 @@ fn foo(_: &u8) {\n }\n \n fn main() {\n-    let _ = &foo as &Any;\n+    let _ = &foo as &dyn Any;\n }"}, {"sha": "20a8d136124695495b4dbe7e6e798497ffa4e4ff", "filename": "src/test/run-pass/issues/issue-17322.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17322.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17322.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17322.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -5,11 +5,11 @@\n \n use std::io::{self, Write};\n \n-fn f(wr: &mut Write) {\n+fn f(wr: &mut dyn Write) {\n     wr.write_all(b\"hello\").ok().expect(\"failed\");\n }\n \n fn main() {\n-    let mut wr = box io::stdout() as Box<Write>;\n+    let mut wr = box io::stdout() as Box<dyn Write>;\n     f(&mut wr);\n }"}, {"sha": "62f6bcf15e3e74edd6b674d05a8af0a2ce416944", "filename": "src/test/run-pass/issues/issue-17351.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17351.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17351.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17351.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -6,5 +6,5 @@ impl Str for str {}\n impl<'a, S: ?Sized> Str for &'a S where S: Str {}\n \n fn main() {\n-    let _: &Str = &\"x\";\n+    let _: &dyn Str = &\"x\";\n }"}, {"sha": "2f6464668c2ceafd2dde15cccf7dc2318db278e6", "filename": "src/test/run-pass/issues/issue-17771.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17771.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17771.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17771.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -4,13 +4,13 @@\n \n trait Aaa { fn dummy(&self) { } }\n \n-impl<'a> Aaa for &'a mut (Aaa + 'a) {}\n+impl<'a> Aaa for &'a mut (dyn Aaa + 'a) {}\n \n struct Bar<'a> {\n-    writer: &'a mut (Aaa + 'a),\n+    writer: &'a mut (dyn Aaa + 'a),\n }\n \n-fn baz(_: &mut Aaa) {\n+fn baz(_: &mut dyn Aaa) {\n }\n \n fn foo<'a>(mut bar: Bar<'a>) {"}, {"sha": "6873c7ccb7f1c4a06857924633b41354c8db74e3", "filename": "src/test/run-pass/issues/issue-17897.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17897.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17897.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17897.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-fn action(mut cb: Box<FnMut(usize) -> usize>) -> usize {\n+fn action(mut cb: Box<dyn FnMut(usize) -> usize>) -> usize {\n     cb(1)\n }\n "}, {"sha": "772cd9d7eda822acd082934770668c63b7f37baf", "filename": "src/test/run-pass/issues/issue-20055-box-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20055-box-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20055-box-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20055-box-trait.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -22,7 +22,7 @@ pub fn foo(box_1: fn () -> Box<[i8; 1]>,\n            box_4: fn () -> Box<[i8; 4]>,\n             ) {\n     println!(\"Hello World 1\");\n-    let _: Box<Boo> = match 3 {\n+    let _: Box<dyn Boo> = match 3 {\n         1 => box_1(),\n         2 => box_2(),\n         3 => box_3(),"}, {"sha": "0ca67d9dc710e6c421ad4428f762c2b9341ad537", "filename": "src/test/run-pass/issues/issue-20575.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20575.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -4,7 +4,7 @@\n // pretty-expanded FIXME #23616\n \n fn main() {\n-    let functions: [Box<Fn() -> Option<()>>; 1] = [Box::new(|| None)];\n+    let functions: [Box<dyn Fn() -> Option<()>>; 1] = [Box::new(|| None)];\n \n     let _: Option<Vec<()>> = functions.iter().map(|f| (*f)()).collect();\n }"}, {"sha": "2bc5034960a1bfdaf9d862ec13878e96577043fd", "filename": "src/test/run-pass/issues/issue-20676.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20676.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20676.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20676.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -7,6 +7,6 @@\n use std::fmt;\n \n fn main() {\n-    let a: &fmt::Debug = &1;\n+    let a: &dyn fmt::Debug = &1;\n     format!(\"{:?}\", a);\n }"}, {"sha": "4ec7e3195ebe05fb1ba39c98fcdbcdb1d8ecf616", "filename": "src/test/run-pass/issues/issue-20953.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20953.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20953.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20953.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -2,11 +2,11 @@\n #![allow(unused_mut)]\n #![allow(unused_variables)]\n fn main() {\n-    let mut shrinker: Box<Iterator<Item=i32>> = Box::new(vec![1].into_iter());\n+    let mut shrinker: Box<dyn Iterator<Item=i32>> = Box::new(vec![1].into_iter());\n     println!(\"{:?}\", shrinker.next());\n     for v in shrinker { assert!(false); }\n \n-    let mut shrinker: &mut Iterator<Item=i32> = &mut vec![1].into_iter();\n+    let mut shrinker: &mut dyn Iterator<Item=i32> = &mut vec![1].into_iter();\n     println!(\"{:?}\", shrinker.next());\n     for v in shrinker { assert!(false); }\n }"}, {"sha": "0483e62fd21213d300c92ce64930bab8c1b77c82", "filename": "src/test/run-pass/issues/issue-21058.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21058.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -13,7 +13,7 @@ fn main() {\n         // str\n         std::intrinsics::type_name::<str>(),\n         // Trait\n-        std::intrinsics::type_name::<Send>(),\n+        std::intrinsics::type_name::<dyn Send>(),\n         // Newtype\n         std::intrinsics::type_name::<NT>(),\n         // DST"}, {"sha": "c970e77abb72b5b50fe7eb333a10d82b489e332a", "filename": "src/test/run-pass/issues/issue-21361.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21361.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21361.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21361.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -2,10 +2,10 @@\n \n fn main() {\n     let v = vec![1, 2, 3];\n-    let boxed: Box<Iterator<Item=i32>> = Box::new(v.into_iter());\n+    let boxed: Box<dyn Iterator<Item=i32>> = Box::new(v.into_iter());\n     assert_eq!(boxed.max(), Some(3));\n \n     let v = vec![1, 2, 3];\n-    let boxed: &mut Iterator<Item=i32> = &mut v.into_iter();\n+    let boxed: &mut dyn Iterator<Item=i32> = &mut v.into_iter();\n     assert_eq!(boxed.max(), Some(3));\n }"}, {"sha": "d1cd4ec7b8a01995d1e76c34820e18c2abce14da", "filename": "src/test/run-pass/issues/issue-21655.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21655.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-fn test(it: &mut Iterator<Item=i32>) {\n+fn test(it: &mut dyn Iterator<Item=i32>) {\n     for x in it {\n         assert_eq!(x, 1)\n     }"}, {"sha": "e67a924b9eedc0ac0363ce725b8b2b891fe4755e", "filename": "src/test/run-pass/issues/issue-2190-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2190-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2190-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2190-1.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -9,11 +9,11 @@ use std::thread::Builder;\n \n static generations: usize = 1024+256+128+49;\n \n-fn spawn(mut f: Box<FnMut() + 'static + Send>) {\n+fn spawn(mut f: Box<dyn FnMut() + 'static + Send>) {\n     Builder::new().stack_size(32 * 1024).spawn(move|| f());\n }\n \n-fn child_no(x: usize) -> Box<FnMut() + 'static + Send> {\n+fn child_no(x: usize) -> Box<dyn FnMut() + 'static + Send> {\n     Box::new(move|| {\n         if x < generations {\n             spawn(child_no(x+1));"}, {"sha": "5f6d9dcc9ae43d90ef0c770d721ce67f3d7b0066", "filename": "src/test/run-pass/issues/issue-22346.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-22346.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-22346.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-22346.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -3,7 +3,7 @@\n // pretty-expanded FIXME #23616\n \n // This used to cause an ICE because the retslot for the \"return\" had the wrong type\n-fn testcase<'a>() -> Box<Iterator<Item=usize> + 'a> {\n+fn testcase<'a>() -> Box<dyn Iterator<Item=usize> + 'a> {\n     return Box::new((0..3).map(|i| { return i; }));\n }\n "}, {"sha": "c74e53fca60fdfac8b07edf7c483277f39c491ff", "filename": "src/test/run-pass/issues/issue-2288.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2288.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -23,13 +23,13 @@ fn foo<A>(b: A) -> foo<A> {\n     }\n }\n \n-fn f<A>(x: Box<clam<A>>, a: A) {\n+fn f<A>(x: Box<dyn clam<A>>, a: A) {\n   x.chowder(a);\n }\n \n pub fn main() {\n \n   let c = foo(42);\n-  let d: Box<clam<isize>> = box c as Box<clam<isize>>;\n+  let d: Box<dyn clam<isize>> = box c as Box<dyn clam<isize>>;\n   f(d, c.x);\n }"}, {"sha": "e21f86351eeee130592500b7593953b33331c0e6", "filename": "src/test/run-pass/issues/issue-23261.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-23261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-23261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-23261.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -41,7 +41,7 @@ fn check_both(val: &Foo<[u8]>) {\n     }\n }\n \n-fn check_trait_obj(val: &Foo<Get>) {\n+fn check_trait_obj(val: &Foo<dyn Get>) {\n     match *val {\n         Foo { a, ref inner } => {\n             assert_eq!(a, 32);\n@@ -56,6 +56,6 @@ fn main() {\n     check_dst_val(foo);\n     check_both(foo);\n \n-    let foo: &Foo<Get> = &Foo { a: 32, inner: 32 };\n+    let foo: &Foo<dyn Get> = &Foo { a: 32, inner: 32 };\n     check_trait_obj(foo);\n }"}, {"sha": "1dd3d9293bcc6112b04cded5179522135edba6c5", "filename": "src/test/run-pass/issues/issue-23485.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-23485.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-23485.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-23485.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -45,6 +45,6 @@ impl Iterator for Counter {\n }\n \n fn main() {\n-    let mut x: Box<Iterator<Item=Token>> = Box::new(Counter { value: 22 });\n+    let mut x: Box<dyn Iterator<Item=Token>> = Box::new(Counter { value: 22 });\n     assert_eq!(x.next().unwrap().value, 22);\n }"}, {"sha": "264e1ee22cdda8c70eddee0af9c0650e844a5672", "filename": "src/test/run-pass/issues/issue-24010.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24010.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24010.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24010.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -2,7 +2,7 @@ trait Foo: Fn(i32) -> i32 + Send {}\n \n impl<T: ?Sized + Fn(i32) -> i32 + Send> Foo for T {}\n \n-fn wants_foo(f: Box<Foo>) -> i32 {\n+fn wants_foo(f: Box<dyn Foo>) -> i32 {\n     f(42)\n }\n "}, {"sha": "54622afbcfc1323daabb8d9e56c98ce1f5cb0ea9", "filename": "src/test/run-pass/issues/issue-24086.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24086.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24086.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24086.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -7,8 +7,8 @@ pub struct Registry<'a> {\n }\n \n pub struct Listener<'a> {\n-    pub announce: Option<Box<FnMut(&mut Registry) + 'a>>,\n-    pub remove: Option<Box<FnMut(&mut Registry) + 'a>>,\n+    pub announce: Option<Box<dyn FnMut(&mut Registry) + 'a>>,\n+    pub remove: Option<Box<dyn FnMut(&mut Registry) + 'a>>,\n }\n \n impl<'a> Drop for Registry<'a> {"}, {"sha": "6f8ec700951e25a4cec8c1584e29fea67aed6328", "filename": "src/test/run-pass/issues/issue-25339.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25339.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25339.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25339.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -12,7 +12,7 @@ pub trait Routing<I> {\n \n pub trait ToRouting {\n     type Input;\n-    type Routing : ?Sized = Routing<Self::Input, Output=()>;\n+    type Routing : ?Sized = dyn Routing<Self::Input, Output=()>;\n     fn to_routing(self) -> Self::Routing;\n }\n "}, {"sha": "e7b9ea3acfc01e225263bdeffa68cc7f8de480d4", "filename": "src/test/run-pass/issues/issue-25515.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25515.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25515.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25515.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -13,7 +13,7 @@ fn main() {\n     let mut drops = 0;\n \n     {\n-        let _: Rc<Send> = Rc::new(Foo(&mut drops));\n+        let _: Rc<dyn Send> = Rc::new(Foo(&mut drops));\n     }\n \n     assert_eq!(1, drops);"}, {"sha": "25a2da707dc0f469d422d00e9a4edb725d192e65", "filename": "src/test/run-pass/issues/issue-25549-multiple-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25549-multiple-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25549-multiple-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25549-multiple-drop.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -25,7 +25,7 @@ fn main() {\n \n     drops = 0;\n     {\n-        let y = &Holder(Foo(&mut drops)) as &Holder<Trait>;\n+        let y = &Holder(Foo(&mut drops)) as &Holder<dyn Trait>;\n         // this used to cause an extra drop of the Foo instance\n         let x = &y.0;\n     }"}, {"sha": "ec1864d7deb589b883aab2fce42d19ed0f9b74fa", "filename": "src/test/run-pass/issues/issue-25757.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25757.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25757.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-25757.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -9,7 +9,7 @@ impl Foo {\n     }\n }\n \n-const FUNC: &'static Fn(&mut Foo) -> () = &Foo::x;\n+const FUNC: &'static dyn Fn(&mut Foo) -> () = &Foo::x;\n \n fn main() {\n     let mut foo = Foo { a: 137 };"}, {"sha": "4b6f2c2b3bc7d7d70dbcbef21a934368b6992ee1", "filename": "src/test/run-pass/issues/issue-26641.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26641.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26641.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26641.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-struct Parser<'a>(Box<FnMut(Parser) + 'a>);\n+struct Parser<'a>(Box<dyn FnMut(Parser) + 'a>);\n \n fn main() {\n     let _x = Parser(Box::new(|_|{}));"}, {"sha": "281ae13399dd2590dfc88d358c07f90ece659a41", "filename": "src/test/run-pass/issues/issue-26709.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26709.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -11,7 +11,7 @@ fn main() {\n     let mut x = 0;\n     {\n         let wrapper = Box::new(Wrapper(&mut x, 123));\n-        let _: Box<Wrapper<Send>> = wrapper;\n+        let _: Box<Wrapper<dyn Send>> = wrapper;\n     }\n     assert_eq!(432, x)\n }"}, {"sha": "307a67160980db8da67d82f2daa8d9cd6b6ffc6f", "filename": "src/test/run-pass/issues/issue-26802.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26802.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26802.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26802.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -5,7 +5,7 @@ trait Foo<'a> {\n \n pub struct FooBar;\n impl Foo<'static> for FooBar {}\n-fn test(foobar: FooBar) -> Box<Foo<'static>> {\n+fn test(foobar: FooBar) -> Box<dyn Foo<'static>> {\n     Box::new(foobar)\n }\n "}, {"sha": "bcf8a6731910fb006838b666be9b0846ce4a7d3a", "filename": "src/test/run-pass/issues/issue-26805.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26805.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26805.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26805.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -2,5 +2,5 @@\n struct NonOrd;\n \n fn main() {\n-    let _: Box<Iterator<Item = _>> = Box::new(vec![NonOrd].into_iter());\n+    let _: Box<dyn Iterator<Item = _>> = Box::new(vec![NonOrd].into_iter());\n }"}, {"sha": "2d5827f476b9e3c090ef95cd39758b2bf403cb27", "filename": "src/test/run-pass/issues/issue-26905.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26905.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26905.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26905.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -17,5 +17,5 @@ fn main() {\n     let data = [1, 2, 3];\n     let iter = data.iter();\n     let x = MyRc { _ptr: &iter, _boo: PhantomData };\n-    let _y: MyRc<Iterator<Item=&u32>> = x;\n+    let _y: MyRc<dyn Iterator<Item=&u32>> = x;\n }"}, {"sha": "161e2d4d204eb22eaa893cc21c2aea4d3454659a", "filename": "src/test/run-pass/issues/issue-27268.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-27268.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-27268.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-27268.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -1,4 +1,4 @@\n // run-pass\n fn main() {\n-    const _C: &'static Fn() = &||{};\n+    const _C: &'static dyn Fn() = &||{};\n }"}, {"sha": "d449f6449aa091e3a0d42de258bbe4961fd34397", "filename": "src/test/run-pass/issues/issue-2734.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2734.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -11,8 +11,8 @@ trait hax {\n }\n impl<A> hax for A { }\n \n-fn perform_hax<T: 'static>(x: Box<T>) -> Box<hax+'static> {\n-    box x as Box<hax+'static>\n+fn perform_hax<T: 'static>(x: Box<T>) -> Box<dyn hax+'static> {\n+    box x as Box<dyn hax+'static>\n }\n \n fn deadcode() {"}, {"sha": "794c7d4edaa113f6e9d9089f7d820b0c988c48a5", "filename": "src/test/run-pass/issues/issue-2735.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2735.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -11,8 +11,8 @@ trait hax {\n }\n impl<A> hax for A { }\n \n-fn perform_hax<T: 'static>(x: Box<T>) -> Box<hax+'static> {\n-    box x as Box<hax+'static>\n+fn perform_hax<T: 'static>(x: Box<T>) -> Box<dyn hax+'static> {\n+    box x as Box<dyn hax+'static>\n }\n \n fn deadcode() {"}, {"sha": "9f85473380f828d0a6b400f9539ce4c673c75db8", "filename": "src/test/run-pass/issues/issue-27890.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-27890.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-27890.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-27890.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n-static PLUS_ONE: &'static (Fn(i32) -> i32 + Sync) = (&|x: i32| { x + 1 })\n-    as &'static (Fn(i32) -> i32 + Sync);\n+static PLUS_ONE: &'static (dyn Fn(i32) -> i32 + Sync) = (&|x: i32| { x + 1 })\n+    as &'static (dyn Fn(i32) -> i32 + Sync);\n \n fn main() {\n     assert_eq!(PLUS_ONE(2), 3);"}, {"sha": "11641ca738018396765f77182fa3e1d0d70492be", "filename": "src/test/run-pass/issues/issue-2935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2935.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -20,7 +20,7 @@ pub fn main() {\n   //   let y = box ({a: 4});\n   //    let z = box ({a: 4} as it);\n   //    let z = box ({a: true} as it);\n-    let z: Box<_> = box (box true as Box<it>);\n+    let z: Box<_> = box (box true as Box<dyn it>);\n     //  x.f();\n     // y.f();\n     // (*z).f();"}, {"sha": "ee2456da3e2153f035b5df970177b8cf315f7a53", "filename": "src/test/run-pass/issues/issue-3052.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-3052.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-3052.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-3052.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -2,7 +2,7 @@\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n-type Connection = Box<FnMut(Vec<u8>) + 'static>;\n+type Connection = Box<dyn FnMut(Vec<u8>) + 'static>;\n \n fn f() -> Option<Connection> {\n     let mock_connection: Connection = Box::new(|_| {});"}, {"sha": "e837fc81721a807c7a5166632d0a9263c9243988", "filename": "src/test/run-pass/issues/issue-30530.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-30530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-30530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-30530.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -8,15 +8,15 @@\n pub enum Handler {\n     Default,\n     #[allow(dead_code)]\n-    Custom(*mut Box<Fn()>),\n+    Custom(*mut Box<dyn Fn()>),\n }\n \n fn main() {\n     take(Handler::Default, Box::new(main));\n }\n \n #[inline(never)]\n-pub fn take(h: Handler, f: Box<Fn()>) -> Box<Fn()> {\n+pub fn take(h: Handler, f: Box<dyn Fn()>) -> Box<dyn Fn()> {\n     unsafe {\n         match h {\n             Handler::Custom(ptr) => *Box::from_raw(ptr),"}, {"sha": "c718449d84eed48676e61c6eee6cc1963b073a0d", "filename": "src/test/run-pass/issues/issue-30615.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-30615.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-30615.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-30615.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n fn main() {\n-    &0u8 as *const u8 as *const PartialEq<u8>;\n+    &0u8 as *const u8 as *const dyn PartialEq<u8>;\n     &[0u8] as *const [u8; 1] as *const [u8];\n }"}, {"sha": "cc94cc819d6655d047576adf205fc812746e1284", "filename": "src/test/run-pass/issues/issue-32389.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-32389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-32389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-32389.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -2,7 +2,7 @@\n fn foo<T>() -> T { loop {} }\n \n fn test() {\n-    let ref mut a: &mut FnMut((i8,), i16) = foo();\n+    let ref mut a: &mut dyn FnMut((i8,), i16) = foo();\n     a((0,), 0);\n }\n "}, {"sha": "499fa7c1f27ac7837432b4bdf3e8b8466dc932d8", "filename": "src/test/run-pass/issues/issue-33387.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-33387.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-33387.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-33387.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -15,18 +15,18 @@ impl Foo for [u8; 2] {\n \n struct Bar<T: ?Sized>(T);\n \n-fn unsize_fat_ptr<'a>(x: &'a Bar<Foo + Send + 'a>) -> &'a Bar<Foo + 'a> {\n+fn unsize_fat_ptr<'a>(x: &'a Bar<dyn Foo + Send + 'a>) -> &'a Bar<dyn Foo + 'a> {\n     x\n }\n \n-fn unsize_nested_fat_ptr(x: Arc<Foo + Send>) -> Arc<Foo> {\n+fn unsize_nested_fat_ptr(x: Arc<dyn Foo + Send>) -> Arc<dyn Foo> {\n     x\n }\n \n fn main() {\n-    let x: Box<Bar<Foo + Send>> = Box::new(Bar([1,2]));\n+    let x: Box<Bar<dyn Foo + Send>> = Box::new(Bar([1,2]));\n     assert_eq!(unsize_fat_ptr(&*x).0.get(), [1, 2]);\n \n-    let x: Arc<Foo + Send> = Arc::new([3, 4]);\n+    let x: Arc<dyn Foo + Send> = Arc::new([3, 4]);\n     assert_eq!(unsize_nested_fat_ptr(x).get(), [3, 4]);\n }"}, {"sha": "4e01d4d3061f93409c5d0df304965424120cd703", "filename": "src/test/run-pass/issues/issue-33461.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-33461.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-33461.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-33461.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -24,5 +24,5 @@ impl<P: TheTrait> Shape<P> for TheType<P::TheAssociatedType> {\n \n fn main() {\n     let ball = TheType { t: PhantomData };\n-    let handle: &Shape<()> = &ball;\n+    let handle: &dyn Shape<()> = &ball;\n }"}, {"sha": "26e7358408f484c10ed78651361b17d10f381b55", "filename": "src/test/run-pass/issues/issue-34503.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-34503.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-34503.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-34503.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -7,5 +7,5 @@ fn main() {\n         where Option<T>: Ord { *x < *x }\n     }\n     impl Foo<X> for () {}\n-    let _ = &() as &Foo<X>;\n+    let _ = &() as &dyn Foo<X>;\n }"}, {"sha": "05fd1b15d43d08179fa395a38ac27a97b72dbc08", "filename": "src/test/run-pass/issues/issue-35815.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-35815.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-35815.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-35815.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -10,6 +10,6 @@ struct Foo<T: ?Sized> {\n \n fn main() {\n     let foo: &Foo<i32> = &Foo { a: 1, b: false, c: 2i32 };\n-    let foo_unsized: &Foo<Send> = foo;\n+    let foo_unsized: &Foo<dyn Send> = foo;\n     assert_eq!(mem::size_of_val(foo), mem::size_of_val(foo_unsized));\n }"}, {"sha": "d96dc80ea719ceec61eda10b76e34164ac7afcc1", "filename": "src/test/run-pass/issues/issue-36260.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-36260.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-36260.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-36260.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -2,7 +2,7 @@\n // Make sure this compiles without getting a linker error because of missing\n // drop-glue because the collector missed adding drop-glue for the closure:\n \n-fn create_fn() -> Box<Fn()> {\n+fn create_fn() -> Box<dyn Fn()> {\n     let text = String::new();\n \n     Box::new(move || { let _ = &text; })"}, {"sha": "e5341ba7dbedde67dc232e703f869b51fe744511", "filename": "src/test/run-pass/issues/issue-36786-resolve-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-36786-resolve-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-36786-resolve-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-36786-resolve-call.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -3,6 +3,6 @@\n // correctly\n \n fn main() {\n-    let x : Vec<Box<Fn()>> = vec![Box::new(|| ())];\n+    let x : Vec<Box<dyn Fn()>> = vec![Box::new(|| ())];\n     x[0]()\n }"}, {"sha": "f48d549b3eb2cc2a386da36c71a7be430d93a7ce", "filename": "src/test/run-pass/issues/issue-3702.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-3702.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-3702.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-3702.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -6,7 +6,7 @@ pub fn main() {\n     fn to_string(&self) -> String;\n   }\n \n-  fn to_string(t: Box<Text>) {\n+  fn to_string(t: Box<dyn Text>) {\n     println!(\"{}\", (*t).to_string());\n   }\n "}, {"sha": "408d8d866d862efdfb7989f471d0be0e00aa6dfb", "filename": "src/test/run-pass/issues/issue-3794.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-3794.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-3794.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-3794.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -16,7 +16,7 @@ impl T for S {\n     }\n }\n \n-fn print_t(t: &T) {\n+fn print_t(t: &dyn T) {\n     t.print();\n }\n \n@@ -27,6 +27,6 @@ fn print_s(s: &S) {\n pub fn main() {\n     let s: Box<S> = box S { s: 5 };\n     print_s(&*s);\n-    let t: Box<T> = s as Box<T>;\n+    let t: Box<dyn T> = s as Box<dyn T>;\n     print_t(&*t);\n }"}, {"sha": "968cf08916fd6dd2bfd840e605fb7c0c715d4df7", "filename": "src/test/run-pass/issues/issue-39292.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-39292.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-39292.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-39292.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -13,5 +13,5 @@ trait Bar: for<'a> Foo<&'a ()> { }\n impl Bar for () {}\n \n fn main() {\n-    (&() as &Bar).print(); // Segfault\n+    (&() as &dyn Bar).print(); // Segfault\n }"}, {"sha": "148cf527e7cb7799dd2b5de6b6827bb113048130", "filename": "src/test/run-pass/issues/issue-39823.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-39823.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-39823.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-39823.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -11,15 +11,15 @@ struct LocalC(u32);\n struct LocalG<T>(T);\n \n fn main() {\n-    let virtual_localc : &Fn(_) -> LocalC = &LocalC;\n+    let virtual_localc : &dyn Fn(_) -> LocalC = &LocalC;\n     assert_eq!(virtual_localc(1), LocalC(1));\n \n-    let virtual_localg : &Fn(_) -> LocalG<u32> = &LocalG;\n+    let virtual_localg : &dyn Fn(_) -> LocalG<u32> = &LocalG;\n     assert_eq!(virtual_localg(1), LocalG(1));\n \n-    let virtual_remotec : &Fn(_) -> RemoteC = &RemoteC;\n+    let virtual_remotec : &dyn Fn(_) -> RemoteC = &RemoteC;\n     assert_eq!(virtual_remotec(1), RemoteC(1));\n \n-    let virtual_remoteg : &Fn(_) -> RemoteG<u32> = &RemoteG;\n+    let virtual_remoteg : &dyn Fn(_) -> RemoteG<u32> = &RemoteG;\n     assert_eq!(virtual_remoteg(1), RemoteG(1));\n }"}, {"sha": "967edfd44157688aa25659d824525b626b019fc5", "filename": "src/test/run-pass/issues/issue-41053.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-41053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-41053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-41053.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -6,8 +6,8 @@ pub trait Trait { fn foo(&self) {} }\n pub struct Foo;\n \n impl Iterator for Foo {\n-    type Item = Box<Trait>;\n-    fn next(&mut self) -> Option<Box<Trait>> {\n+    type Item = Box<dyn Trait>;\n+    fn next(&mut self) -> Option<Box<dyn Trait>> {\n         extern crate issue_41053;\n         impl ::Trait for issue_41053::Test {\n             fn foo(&self) {}"}, {"sha": "dcdd1c21ee527b664f591de9564f7bb63473c741", "filename": "src/test/run-pass/issues/issue-41744.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-41744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-41744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-41744.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -3,5 +3,5 @@ trait Tc {}\n impl Tc for bool {}\n \n fn main() {\n-    let _: &[&Tc] = &[&true];\n+    let _: &[&dyn Tc] = &[&true];\n }"}, {"sha": "318e3099f98ba4139df86f2dbaf881881d5ed754", "filename": "src/test/run-pass/issues/issue-42210.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-42210.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-42210.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-42210.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -12,9 +12,9 @@ struct Bar;\n trait Baz {\n }\n \n-impl Foo for (Bar, Baz) { }\n+impl Foo for (Bar, dyn Baz) { }\n \n \n fn main() {\n-    <(Bar, Baz) as Foo>::foo()\n+    <(Bar, dyn Baz) as Foo>::foo()\n }"}, {"sha": "c886f4b0a2d6bdadd801bc16f3396a4a8717422b", "filename": "src/test/run-pass/issues/issue-43132.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-43132.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-43132.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-43132.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -6,7 +6,7 @@ fn main() {\n \n fn foo() {\n     let b = mk::<\n-        Forward<(Box<Future<Error = u32>>,)>,\n+        Forward<(Box<dyn Future<Error = u32>>,)>,\n     >();\n     b.map_err(|_| ()).join();\n }"}, {"sha": "3df319b683f47d03ebbc104087c474cecaedad44", "filename": "src/test/run-pass/issues/issue-4333.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-4333.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-4333.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-4333.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -5,6 +5,6 @@\n use std::io;\n \n pub fn main() {\n-    let stdout = &mut io::stdout() as &mut io::Write;\n+    let stdout = &mut io::stdout() as &mut dyn io::Write;\n     stdout.write(b\"Hello!\");\n }"}, {"sha": "a1ed3c36544010f9a176bfe8ba95a888da3c8d53", "filename": "src/test/run-pass/issues/issue-47638.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-47638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-47638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-47638.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -1,10 +1,10 @@\n // run-pass\n #![allow(unused_variables)]\n-fn id<'c, 'b>(f: &'c &'b Fn(&i32)) -> &'c &'b Fn(&'static i32) {\n+fn id<'c, 'b>(f: &'c &'b dyn Fn(&i32)) -> &'c &'b dyn Fn(&'static i32) {\n     f\n }\n \n fn main() {\n-    let f: &Fn(&i32) = &|x| {};\n+    let f: &dyn Fn(&i32) = &|x| {};\n     id(&f);\n }"}, {"sha": "fc869ae4fec261fd93cd721a40f456ca12f35f2e", "filename": "src/test/run-pass/issues/issue-5008-borrowed-traitobject-method-call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5008-borrowed-traitobject-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5008-borrowed-traitobject-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5008-borrowed-traitobject-method-call.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -23,12 +23,12 @@ impl Debuggable for Thing {\n     fn debug_name(&self) -> String { self.name.clone() }\n }\n \n-fn print_name(x: &Debuggable)\n+fn print_name(x: &dyn Debuggable)\n {\n     println!(\"debug_name = {}\", x.debug_name());\n }\n \n pub fn main() {\n     let thing = Thing::new();\n-    print_name(&thing as &Debuggable);\n+    print_name(&thing as &dyn Debuggable);\n }"}, {"sha": "5a83d1c2ff9fd1b10fb3b989849611e0906374be", "filename": "src/test/run-pass/issues/issue-5192.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5192.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -24,18 +24,18 @@ impl EventLoop for UvEventLoop {\n }\n \n pub struct Scheduler {\n-    event_loop: Box<EventLoop+'static>,\n+    event_loop: Box<dyn EventLoop+'static>,\n }\n \n impl Scheduler {\n \n-    pub fn new(event_loop: Box<EventLoop+'static>) -> Scheduler {\n+    pub fn new(event_loop: Box<dyn EventLoop+'static>) -> Scheduler {\n         Scheduler {\n             event_loop: event_loop,\n         }\n     }\n }\n \n pub fn main() {\n-    let _sched = Scheduler::new(box UvEventLoop::new() as Box<EventLoop>);\n+    let _sched = Scheduler::new(box UvEventLoop::new() as Box<dyn EventLoop>);\n }"}, {"sha": "aa513277830128d70f11828117d92aa69fba4ea3", "filename": "src/test/run-pass/issues/issue-5666.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5666.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5666.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5666.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -19,7 +19,7 @@ impl Barks for Dog {\n pub fn main() {\n     let snoopy = box Dog{name: \"snoopy\".to_string()};\n     let bubbles = box Dog{name: \"bubbles\".to_string()};\n-    let barker = [snoopy as Box<Barks>, bubbles as Box<Barks>];\n+    let barker = [snoopy as Box<dyn Barks>, bubbles as Box<dyn Barks>];\n \n     for pup in &barker {\n         println!(\"{}\", pup.bark());"}, {"sha": "6fe9943d3689f7eee49cc37446eb3ef80b61bbd2", "filename": "src/test/run-pass/issues/issue-5708.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5708.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -21,11 +21,11 @@ impl Inner for isize {\n }\n \n struct Outer<'a> {\n-    inner: &'a (Inner+'a)\n+    inner: &'a (dyn Inner+'a)\n }\n \n impl<'a> Outer<'a> {\n-    fn new(inner: &Inner) -> Outer {\n+    fn new(inner: &dyn Inner) -> Outer {\n         Outer {\n             inner: inner\n         }\n@@ -34,7 +34,7 @@ impl<'a> Outer<'a> {\n \n pub fn main() {\n     let inner: isize = 5;\n-    let outer = Outer::new(&inner as &Inner);\n+    let outer = Outer::new(&inner as &dyn Inner);\n     outer.inner.print();\n }\n \n@@ -45,11 +45,11 @@ pub trait MyTrait<T> {\n }\n \n pub struct MyContainer<'a, T:'a> {\n-    foos: Vec<&'a (MyTrait<T>+'a)> ,\n+    foos: Vec<&'a (dyn MyTrait<T>+'a)> ,\n }\n \n impl<'a, T> MyContainer<'a, T> {\n-    pub fn add (&mut self, foo: &'a MyTrait<T>) {\n+    pub fn add (&mut self, foo: &'a dyn MyTrait<T>) {\n         self.foos.push(foo);\n     }\n }"}, {"sha": "303fb4fbc94165f64d2d33f60d0b4986fb820435", "filename": "src/test/run-pass/issues/issue-5988.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-5988.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -19,6 +19,6 @@ impl T for A {\n \n fn main() {\n     let a = A;\n-    let br = &a as &B;\n+    let br = &a as &dyn B;\n     br.f();\n }"}, {"sha": "8859fbe6afb7b4ef01c5a3595d30828d8fe61866", "filename": "src/test/run-pass/issues/issue-6128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-6128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-6128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-6128.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -20,5 +20,5 @@ impl<E> Graph<isize, E> for HashMap<isize, isize> {\n \n pub fn main() {\n     let g : Box<HashMap<isize,isize>> = box HashMap::new();\n-    let _g2 : Box<Graph<isize,isize>> = g as Box<Graph<isize,isize>>;\n+    let _g2 : Box<dyn Graph<isize,isize>> = g as Box<dyn Graph<isize,isize>>;\n }"}, {"sha": "b7a44ed86239584cca3d8013e72b8024c67a07c3", "filename": "src/test/run-pass/issues/issue-6157.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-6157.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-6157.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-6157.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -9,15 +9,15 @@ impl<F> OpInt for F where F: FnMut(isize, isize) -> isize {\n     }\n }\n \n-fn squarei<'a>(x: isize, op: &'a mut OpInt) -> isize { op.call(x, x) }\n+fn squarei<'a>(x: isize, op: &'a mut dyn OpInt) -> isize { op.call(x, x) }\n \n fn muli(x:isize, y:isize) -> isize { x * y }\n \n pub fn main() {\n     let mut f = |x, y| muli(x, y);\n     {\n         let g = &mut f;\n-        let h = g as &mut OpInt;\n+        let h = g as &mut dyn OpInt;\n         squarei(3, h);\n     }\n }"}, {"sha": "d8bd83f0dc6adfba71918c8eec3f61cf60db59dd", "filename": "src/test/run-pass/issues/issue-6318.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-6318.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-6318.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-6318.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -4,7 +4,7 @@\n #![feature(box_syntax)]\n \n pub enum Thing {\n-    A(Box<Foo+'static>)\n+    A(Box<dyn Foo+'static>)\n }\n \n pub trait Foo {\n@@ -16,7 +16,7 @@ pub struct Struct;\n impl Foo for Struct {}\n \n pub fn main() {\n-    match Thing::A(box Struct as Box<Foo+'static>) {\n+    match Thing::A(box Struct as Box<dyn Foo + 'static>) {\n         Thing::A(_a) => 0,\n     };\n }"}, {"sha": "c62405554b4d1d390b7b385f49a698e3edc0325b", "filename": "src/test/run-pass/issues/issue-7563.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-7563.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-7563.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-7563.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -16,7 +16,7 @@ struct B<'a> { b: isize, pa: &'a A }\n     }\n \n impl<'a> B<'a> {\n-    fn get_pa(&self) -> &'a IDummy { self.pa as &'a IDummy }\n+    fn get_pa(&self) -> &'a dyn IDummy { self.pa as &'a dyn IDummy }\n }\n \n pub fn main() {"}, {"sha": "de833324bd20f4be22b8356ff04c47ca45fc3d71", "filename": "src/test/run-pass/issues/issue-7911.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-7911.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-7911.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-7911.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -12,18 +12,18 @@ struct Foo { bar: Bar }\n impl FooBar for Bar {}\n \n trait Test {\n-    fn get_immut(&self) -> &FooBar;\n-    fn get_mut(&mut self) -> &mut FooBar;\n+    fn get_immut(&self) -> &dyn FooBar;\n+    fn get_mut(&mut self) -> &mut dyn FooBar;\n }\n \n macro_rules! generate_test { ($type_:path, $slf:ident, $field:expr) => (\n     impl Test for $type_ {\n-        fn get_immut(&$slf) -> &FooBar {\n-            &$field as &FooBar\n+        fn get_immut(&$slf) -> &dyn FooBar {\n+            &$field as &dyn FooBar\n         }\n \n-        fn get_mut(&mut $slf) -> &mut FooBar {\n-            &mut $field as &mut FooBar\n+        fn get_mut(&mut $slf) -> &mut dyn FooBar {\n+            &mut $field as &mut dyn FooBar\n         }\n     }\n )}"}, {"sha": "31a305c31bee241058c1a4be6a88f759e858b29a", "filename": "src/test/run-pass/issues/issue-8248.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-8248.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-8248.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-8248.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -7,9 +7,9 @@ trait A {\n struct B;\n impl A for B {}\n \n-fn foo(_: &mut A) {}\n+fn foo(_: &mut dyn A) {}\n \n pub fn main() {\n     let mut b = B;\n-    foo(&mut b as &mut A);\n+    foo(&mut b as &mut dyn A);\n }"}, {"sha": "d09dff3a6970905b972a571a3f53fc809627493c", "filename": "src/test/run-pass/issues/issue-8249.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-8249.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-8249.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-8249.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -9,10 +9,10 @@ struct B;\n impl A for B {}\n \n struct C<'a> {\n-    foo: &'a mut (A+'a),\n+    foo: &'a mut (dyn A+'a),\n }\n \n-fn foo(a: &mut A) {\n+fn foo(a: &mut dyn A) {\n     C{ foo: a };\n }\n "}, {"sha": "3d87e1c203783b1b65787f9526da7900fc6416b5", "filename": "src/test/run-pass/issues/issue-9129.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-9129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-9129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-9129.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -20,7 +20,7 @@ fn Ident_new() -> Ident {\n     Ident {name: 0x6789ABCD }\n }\n \n-pub fn light_fuse(fld: Box<bomb>) {\n+pub fn light_fuse(fld: Box<dyn bomb>) {\n     int3!();\n     let f = || {\n         int3!();\n@@ -30,6 +30,6 @@ pub fn light_fuse(fld: Box<bomb>) {\n }\n \n pub fn main() {\n-    let b = box S as Box<bomb>;\n+    let b = box S as Box<dyn bomb>;\n     light_fuse(b);\n }"}, {"sha": "cc0dd4fc14a0dc73ca7ff2425e8d250cc3f309ac", "filename": "src/test/run-pass/issues/issue-9394-inherited-trait-calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-9394-inherited-trait-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-9394-inherited-trait-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-9394-inherited-trait-calls.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -52,7 +52,7 @@ impl Super for X {\n \n pub fn main() {\n     let n = X;\n-    let s = &n as &Super;\n+    let s = &n as &dyn Super;\n     assert_eq!(s.bar(),\"super bar\".to_string());\n     assert_eq!(s.foo(),\"base foo\".to_string());\n     assert_eq!(s.foo1(),\"base foo1\".to_string());"}, {"sha": "2698a3b17c6c25d4d444f26dc8005c0770a64380", "filename": "src/test/run-pass/issues/issue-9951.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-9951.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fissues%2Fissue-9951.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-9951.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -11,11 +11,11 @@ impl Bar for u8 {\n }\n \n fn main() {\n-    let (a, b) = (&5u8 as &Bar, &9u8 as &Bar);\n-    let (c, d): (&Bar, &Bar) = (a, b);\n+    let (a, b) = (&5u8 as &dyn Bar, &9u8 as &dyn Bar);\n+    let (c, d): (&dyn Bar, &dyn Bar) = (a, b);\n \n-    let (a, b) = (Box::new(5u8) as Box<Bar>, Box::new(9u8) as Box<Bar>);\n-    let (c, d): (&Bar, &Bar) = (&*a, &*b);\n+    let (a, b) = (Box::new(5u8) as Box<dyn Bar>, Box::new(9u8) as Box<dyn Bar>);\n+    let (c, d): (&dyn Bar, &dyn Bar) = (&*a, &*b);\n \n-    let (c, d): (&Bar, &Bar) = (&5, &9);\n+    let (c, d): (&dyn Bar, &dyn Bar) = (&5, &9);\n }"}, {"sha": "42dc6a4b06e1dc30dee6534894fd3e4a7ca45def", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -3,7 +3,7 @@\n \n struct A { a: Box<isize> }\n \n-fn foo() -> Box<FnMut() -> isize + 'static> {\n+fn foo() -> Box<dyn FnMut() -> isize + 'static> {\n     let k: Box<_> = Box::new(22);\n     let _u = A {a: k.clone()};\n     let result  = || 22;"}, {"sha": "eb1872cc7f094f72705ee0bbf4442fc906accdb9", "filename": "src/test/run-pass/macros/colorful-write-macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fmacros%2Fcolorful-write-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fmacros%2Fcolorful-write-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacros%2Fcolorful-write-macros.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -4,7 +4,7 @@ use std::io::Write;\n use std::fmt;\n \n struct Foo<'a> {\n-    writer: &'a mut (Write+'a),\n+    writer: &'a mut (dyn Write+'a),\n     other: &'a str,\n }\n \n@@ -22,7 +22,7 @@ fn borrowing_writer_from_struct_and_formatting_struct_field(foo: Foo) {\n \n fn main() {\n     let mut w = Vec::new();\n-    write!(&mut w as &mut Write, \"\").unwrap();\n+    write!(&mut w as &mut dyn Write, \"\").unwrap();\n     write!(&mut w, \"\").unwrap(); // should coerce\n     println!(\"ok\");\n "}, {"sha": "dd3ad2ef0ac0fd90655e7af2228748c0220aa556", "filename": "src/test/run-pass/macros/type-macros-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fmacros%2Ftype-macros-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fmacros%2Ftype-macros-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacros%2Ftype-macros-simple.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -16,7 +16,7 @@ fn issue_36540() {\n \n     let x: m!() = m!();\n     std::cell::Cell::<m!()>::new(m!());\n-    impl<T> std::ops::Index<m!()> for Trait<(m!(), T)>\n+    impl<T> std::ops::Index<m!()> for dyn Trait<(m!(), T)>\n         where T: Trait<m!()>\n     {\n         type Output = m!();"}, {"sha": "acd4a8465b0757dcec4aa982b4b90d93fb11f6ed", "filename": "src/test/run-pass/methods/method-argument-inference-associated-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fmethods%2Fmethod-argument-inference-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fmethods%2Fmethod-argument-inference-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethods%2Fmethod-argument-inference-associated-type.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -10,13 +10,13 @@ pub trait Service {\n pub struct S<T>(T);\n \n impl Service for ClientMap {\n-    type Request = S<Box<Fn(i32)>>;\n+    type Request = S<Box<dyn Fn(i32)>>;\n     fn call(&self, _req: Self::Request) {}\n }\n \n \n impl Service for ClientMap2 {\n-    type Request = (Box<Fn(i32)>,);\n+    type Request = (Box<dyn Fn(i32)>,);\n     fn call(&self, _req: Self::Request) {}\n }\n "}, {"sha": "fc0db03e3a96894350a9611f398c150de1afebe3", "filename": "src/test/run-pass/mir/mir_codegen_calls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fmir%2Fmir_codegen_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fmir%2Fmir_codegen_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir%2Fmir_codegen_calls.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -42,7 +42,7 @@ fn test4(x: &Foo, a: isize) -> isize {\n     x.extension_method(a)\n }\n \n-fn test5(x: &Bar, a: isize) -> isize {\n+fn test5(x: &dyn Bar, a: isize) -> isize {\n     // Test calling method on trait object\n     x.extension_method(a)\n }\n@@ -88,11 +88,11 @@ fn test_closure<F>(f: &F, x: i32, y: i32) -> i32\n     f(x, y)\n }\n \n-fn test_fn_object(f: &Fn(i32, i32) -> i32, x: i32, y: i32) -> i32 {\n+fn test_fn_object(f: &dyn Fn(i32, i32) -> i32, x: i32, y: i32) -> i32 {\n     f(x, y)\n }\n \n-fn test_fn_impl(f: &&Fn(i32, i32) -> i32, x: i32, y: i32) -> i32 {\n+fn test_fn_impl(f: &&dyn Fn(i32, i32) -> i32, x: i32, y: i32) -> i32 {\n     // This call goes through the Fn implementation for &Fn provided in\n     // core::ops::impls. It expands to a static Fn::call() that calls the\n     // Fn::call() implementation of the object shim underneath.\n@@ -174,7 +174,7 @@ fn main() {\n     let closure = |x: i32, y: i32| { r*(x + (y*2)) };\n     assert_eq!(test_fn_const_call(&closure), 294);\n     assert_eq!(test_closure(&closure, 100, 1), 306);\n-    let function_object = &closure as &Fn(i32, i32) -> i32;\n+    let function_object = &closure as &dyn Fn(i32, i32) -> i32;\n     assert_eq!(test_fn_object(function_object, 100, 2), 312);\n     assert_eq!(test_fn_impl(&function_object, 100, 3), 318);\n     assert_eq!(test_fn_direct_call(&closure, 100, 4), 324);"}, {"sha": "5c1f1c3b70135ce17f461780fb7ba32ea74ad958", "filename": "src/test/run-pass/mir/mir_codegen_critical_edge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fmir%2Fmir_codegen_critical_edge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fmir%2Fmir_codegen_critical_edge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir%2Fmir_codegen_critical_edge.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -37,7 +37,7 @@ where A: Iterator, B: Iterator<Item=A::Item>\n }\n \n // Make sure we actually codegen a version of the function\n-pub fn do_stuff(mut f: Foo<Box<Iterator<Item=u32>>, Box<Iterator<Item=u32>>>) {\n+pub fn do_stuff(mut f: Foo<Box<dyn Iterator<Item=u32>>, Box<dyn Iterator<Item=u32>>>) {\n     let _x = f.next();\n }\n "}, {"sha": "f3dcc6b85fd98a537443a103812d17392b83e7c4", "filename": "src/test/run-pass/mir/mir_coercions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fmir%2Fmir_coercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fmir%2Fmir_coercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir%2Fmir_coercions.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -4,12 +4,12 @@\n use std::ops::CoerceUnsized;\n use std::marker::Unsize;\n \n-fn identity_coercion(x: &(Fn(u32)->u32 + Send)) -> &Fn(u32)->u32 {\n+fn identity_coercion(x: &(dyn Fn(u32)->u32 + Send)) -> &dyn Fn(u32)->u32 {\n     x\n }\n fn fn_coercions(f: &fn(u32) -> u32) ->\n     (unsafe fn(u32) -> u32,\n-     &(Fn(u32) -> u32+Send))\n+     &(dyn Fn(u32) -> u32+Send))\n {\n     (*f, f)\n }\n@@ -35,8 +35,8 @@ fn coerce_triv_ptr_wrapper(p: TrivPtrWrapper<[u8; 3]>) -> TrivPtrWrapper<[u8]> {\n     p\n }\n \n-fn coerce_fat_ptr_wrapper(p: PtrWrapper<Fn(u32) -> u32+Send>)\n-                          -> PtrWrapper<Fn(u32) -> u32> {\n+fn coerce_fat_ptr_wrapper(p: PtrWrapper<dyn Fn(u32) -> u32+Send>)\n+                          -> PtrWrapper<dyn Fn(u32) -> u32> {\n     p\n }\n \n@@ -65,7 +65,7 @@ fn main() {\n     let z = coerce_fat_ptr_wrapper(PtrWrapper(2,3,(),&square_local));\n     assert_eq!((z.3)(6), 36);\n \n-    let z: PtrWrapper<Fn(u32) -> u32> =\n+    let z: PtrWrapper<dyn Fn(u32) -> u32> =\n         coerce_ptr_wrapper_poly(PtrWrapper(2,3,(),&square_local));\n     assert_eq!((z.3)(6), 36);\n }"}, {"sha": "6583852aa9bb64b1c475e7b1df5c4c182d1246f1", "filename": "src/test/run-pass/mir/mir_raw_fat_ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fmir%2Fmir_raw_fat_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fmir%2Fmir_raw_fat_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir%2Fmir_raw_fat_ptr.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -63,7 +63,7 @@ fn compare_au8(a: *const [u8], b: *const [u8]) -> ComparisonResults {\n     }\n }\n \n-fn compare_foo<'a>(a: *const (Foo+'a), b: *const (Foo+'a)) -> ComparisonResults {\n+fn compare_foo<'a>(a: *const (dyn Foo+'a), b: *const (dyn Foo+'a)) -> ComparisonResults {\n     ComparisonResults {\n         lt: a < b,\n         le: a <= b,\n@@ -74,7 +74,7 @@ fn compare_foo<'a>(a: *const (Foo+'a), b: *const (Foo+'a)) -> ComparisonResults\n     }\n }\n \n-fn simple_eq<'a>(a: *const (Foo+'a), b: *const (Foo+'a)) -> bool {\n+fn simple_eq<'a>(a: *const (dyn Foo+'a), b: *const (dyn Foo+'a)) -> bool {\n     let result = a == b;\n     result\n }\n@@ -128,7 +128,7 @@ fn main() {\n     let u32_ = (4u32, 5u32);\n \n     // check ordering for ptrs\n-    let buf: &mut [*const Foo] = &mut [\n+    let buf: &mut [*const dyn Foo] = &mut [\n         &u8_, &u8_.0,\n         &u32_, &u32_.0,\n     ];"}, {"sha": "5539518c37072d26bd8c1c5cb021d887598ff3eb", "filename": "src/test/run-pass/new-box.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fnew-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fnew-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-box.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -18,13 +18,13 @@ impl Trait for Struct {\n     }\n }\n \n-fn g(x: Box<Trait>) {\n+fn g(x: Box<dyn Trait>) {\n     x.printme();\n-    let y: &Trait = &*x;\n+    let y: &dyn Trait = &*x;\n     y.printme();\n }\n \n fn main() {\n     f(box 1234);\n-    g(box Struct as Box<Trait>);\n+    g(box Struct as Box<dyn Trait>);\n }"}, {"sha": "79c9f7dc01103cc38f2560622cfbdf15cfbfd256", "filename": "src/test/run-pass/newlambdas-ret-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -4,7 +4,7 @@\n \n // pretty-expanded FIXME #23616\n \n-fn unique() -> Box<FnMut()+'static> { return Box::new(|| ()); }\n+fn unique() -> Box<dyn FnMut()+'static> { return Box::new(|| ()); }\n \n pub fn main() {\n }"}, {"sha": "104f5be7767d35fc9febece36c1e7770bfc35799", "filename": "src/test/run-pass/newlambdas-ret-infer2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -4,7 +4,7 @@\n \n // pretty-expanded FIXME #23616\n \n-fn unique() -> Box<FnMut()+'static> { Box::new(|| ()) }\n+fn unique() -> Box<dyn FnMut()+'static> { Box::new(|| ()) }\n \n pub fn main() {\n }"}, {"sha": "cd61dea03788fa9ab3ae6c2c5db18bf0b7f6ebb1", "filename": "src/test/run-pass/object-lifetime-default-default-to-static.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-default-to-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-default-to-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-default-to-static.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -10,23 +10,23 @@ trait Test {\n }\n \n struct SomeStruct {\n-    t: Box<Test>,\n-    u: Box<Test+'static>,\n+    t: Box<dyn Test>,\n+    u: Box<dyn Test+'static>,\n }\n \n-fn a(t: Box<Test>, mut ss: SomeStruct) {\n+fn a(t: Box<dyn Test>, mut ss: SomeStruct) {\n     ss.t = t;\n }\n \n-fn b(t: Box<Test+'static>, mut ss: SomeStruct) {\n+fn b(t: Box<dyn Test+'static>, mut ss: SomeStruct) {\n     ss.t = t;\n }\n \n-fn c(t: Box<Test>, mut ss: SomeStruct) {\n+fn c(t: Box<dyn Test>, mut ss: SomeStruct) {\n     ss.u = t;\n }\n \n-fn d(t: Box<Test+'static>, mut ss: SomeStruct) {\n+fn d(t: Box<dyn Test+'static>, mut ss: SomeStruct) {\n     ss.u = t;\n }\n "}, {"sha": "9212f2802c0180572f34ae6d25bacfe1b54c93c4", "filename": "src/test/run-pass/object-lifetime-default-from-rptr-box.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-box.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -10,21 +10,21 @@ trait Test {\n }\n \n struct SomeStruct<'a> {\n-    t: &'a Box<Test>,\n-    u: &'a Box<Test+'a>,\n+    t: &'a Box<dyn Test>,\n+    u: &'a Box<dyn Test+'a>,\n }\n \n-fn a<'a>(t: &'a Box<Test>, mut ss: SomeStruct<'a>) {\n+fn a<'a>(t: &'a Box<dyn Test>, mut ss: SomeStruct<'a>) {\n     ss.t = t;\n }\n \n-fn b<'a>(t: &'a Box<Test>, mut ss: SomeStruct<'a>) {\n+fn b<'a>(t: &'a Box<dyn Test>, mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n \n // see also compile-fail/object-lifetime-default-from-rptr-box-error.rs\n \n-fn d<'a>(t: &'a Box<Test+'a>, mut ss: SomeStruct<'a>) {\n+fn d<'a>(t: &'a Box<dyn Test+'a>, mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n "}, {"sha": "061f3a116fcbb9dee6c993488cfdec6569a81fa9", "filename": "src/test/run-pass/object-lifetime-default-from-rptr-mut.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-mut.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -10,23 +10,23 @@ trait Test {\n }\n \n struct SomeStruct<'a> {\n-    t: &'a mut Test,\n-    u: &'a mut (Test+'a),\n+    t: &'a mut dyn Test,\n+    u: &'a mut (dyn Test+'a),\n }\n \n-fn a<'a>(t: &'a mut Test, mut ss: SomeStruct<'a>) {\n+fn a<'a>(t: &'a mut dyn Test, mut ss: SomeStruct<'a>) {\n     ss.t = t;\n }\n \n-fn b<'a>(t: &'a mut Test, mut ss: SomeStruct<'a>) {\n+fn b<'a>(t: &'a mut dyn Test, mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n \n-fn c<'a>(t: &'a mut (Test+'a), mut ss: SomeStruct<'a>) {\n+fn c<'a>(t: &'a mut (dyn Test+'a), mut ss: SomeStruct<'a>) {\n     ss.t = t;\n }\n \n-fn d<'a>(t: &'a mut (Test+'a), mut ss: SomeStruct<'a>) {\n+fn d<'a>(t: &'a mut (dyn Test+'a), mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n "}, {"sha": "cfa4af0d7a53fb5b0102783e7f34a04e94e4cfb4", "filename": "src/test/run-pass/object-lifetime-default-from-rptr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -12,30 +12,30 @@ trait Test {\n }\n \n struct SomeStruct<'a> {\n-    t: &'a Test,\n-    u: &'a (Test+'a),\n+    t: &'a dyn Test,\n+    u: &'a (dyn Test+'a),\n }\n \n-fn a<'a>(t: &'a Test, mut ss: SomeStruct<'a>) {\n+fn a<'a>(t: &'a dyn Test, mut ss: SomeStruct<'a>) {\n     ss.t = t;\n }\n \n-fn b<'a>(t: &'a Test, mut ss: SomeStruct<'a>) {\n+fn b<'a>(t: &'a dyn Test, mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n \n-fn c<'a>(t: &'a (Test+'a), mut ss: SomeStruct<'a>) {\n+fn c<'a>(t: &'a (dyn Test+'a), mut ss: SomeStruct<'a>) {\n     ss.t = t;\n }\n \n-fn d<'a>(t: &'a (Test+'a), mut ss: SomeStruct<'a>) {\n+fn d<'a>(t: &'a (dyn Test+'a), mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n \n-fn e<'a>(_: &'a (Display+'static)) {}\n+fn e<'a>(_: &'a (dyn Display+'static)) {}\n \n fn main() {\n     // Inside a function body, we can just infer both\n     // lifetimes, to allow &'tmp (Display+'static).\n-    e(&0 as &Display);\n+    e(&0 as &dyn Display);\n }"}, {"sha": "7f24ab2cbb5ff7559129449b25d70aef142584de", "filename": "src/test/run-pass/object-method-numbering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fobject-method-numbering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fobject-method-numbering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-method-numbering.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -21,7 +21,7 @@ impl SomeTrait for i32 {\n \n fn main() {\n     let x = 22;\n-    let x1: &SomeTrait<SomeType=i32> = &x;\n+    let x1: &dyn SomeTrait<SomeType=i32> = &x;\n     let y = get_int(x1);\n     assert_eq!(x, y);\n }"}, {"sha": "47196f108c02c6831f10205fa64593770aea5ff2", "filename": "src/test/run-pass/objects-coerce-freeze-borrored.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -17,22 +17,22 @@ impl Foo for usize {\n     }\n }\n \n-fn do_it_mut(obj: &mut Foo) {\n+fn do_it_mut(obj: &mut dyn Foo) {\n     let x = obj.bar();\n     let y = obj.foo();\n     assert_eq!(x, y);\n \n     do_it_imm(obj, y);\n }\n \n-fn do_it_imm(obj: &Foo, v: usize) {\n+fn do_it_imm(obj: &dyn Foo, v: usize) {\n     let y = obj.foo();\n     assert_eq!(v, y);\n }\n \n pub fn main() {\n     let mut x: usize = 22;\n-    let obj = &mut x as &mut Foo;\n+    let obj = &mut x as &mut dyn Foo;\n     do_it_mut(obj);\n     do_it_imm(obj, 23);\n     do_it_mut(obj);"}, {"sha": "58327237494edba475e68bc9a1d2a728c03e5324", "filename": "src/test/run-pass/objects-owned-object-borrowed-method-headerless.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -20,10 +20,10 @@ impl FooTrait for BarStruct {\n }\n \n pub fn main() {\n-    let foos: Vec<Box<FooTrait>> = vec![\n-        box BarStruct{ x: 0 } as Box<FooTrait>,\n-        box BarStruct{ x: 1 } as Box<FooTrait>,\n-        box BarStruct{ x: 2 } as Box<FooTrait>\n+    let foos: Vec<Box<dyn FooTrait>> = vec![\n+        box BarStruct{ x: 0 } as Box<dyn FooTrait>,\n+        box BarStruct{ x: 1 } as Box<dyn FooTrait>,\n+        box BarStruct{ x: 2 } as Box<dyn FooTrait>\n     ];\n \n     for i in 0..foos.len() {"}, {"sha": "69984fbb62f1467bbcc8309bcbb34890db1e3995", "filename": "src/test/run-pass/objects-owned-object-owned-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -19,6 +19,6 @@ impl FooTrait for BarStruct {\n }\n \n pub fn main() {\n-    let foo = box BarStruct{ x: 22 } as Box<FooTrait>;\n+    let foo = box BarStruct{ x: 22 } as Box<dyn FooTrait>;\n     assert_eq!(22, foo.foo());\n }"}, {"sha": "1afab9a1ffbe7890625230c7ecc32397bbbae58d", "filename": "src/test/run-pass/overloaded/overloaded-calls-object-one-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Foverloaded%2Foverloaded-calls-object-one-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Foverloaded%2Foverloaded-calls-object-one-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded%2Foverloaded-calls-object-one-arg.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -3,7 +3,7 @@\n // This is a bit tricky due to rust-call ABI.\n \n \n-fn foo(f: &mut FnMut(isize) -> isize) -> isize {\n+fn foo(f: &mut dyn FnMut(isize) -> isize) -> isize {\n     f(22)\n }\n "}, {"sha": "38087bc8710fcf4cc63316cdeaac583894ce1734", "filename": "src/test/run-pass/overloaded/overloaded-calls-object-two-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Foverloaded%2Foverloaded-calls-object-two-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Foverloaded%2Foverloaded-calls-object-two-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded%2Foverloaded-calls-object-two-args.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -3,7 +3,7 @@\n // This is a bit tricky due to rust-call ABI.\n \n \n-fn foo(f: &mut FnMut(isize, isize) -> isize) -> isize {\n+fn foo(f: &mut dyn FnMut(isize, isize) -> isize) -> isize {\n     f(1, 2)\n }\n "}, {"sha": "9a7bfaa9bf4f019ea8fa7c920ec3af8e64d2745a", "filename": "src/test/run-pass/overloaded/overloaded-calls-object-zero-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Foverloaded%2Foverloaded-calls-object-zero-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Foverloaded%2Foverloaded-calls-object-zero-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded%2Foverloaded-calls-object-zero-args.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -3,7 +3,7 @@\n // This is a bit tricky due to rust-call ABI.\n \n \n-fn foo(f: &mut FnMut() -> isize) -> isize {\n+fn foo(f: &mut dyn FnMut() -> isize) -> isize {\n     f()\n }\n "}, {"sha": "9867cc56406ef109dd2c4a2fed8c7c9b1c831783", "filename": "src/test/run-pass/panics/panic-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fpanics%2Fpanic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fpanics%2Fpanic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanics%2Fpanic-safe.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -33,7 +33,7 @@ fn main() {\n     assert::<Box<[u8]>>();\n \n     trait Trait: UnwindSafe {}\n-    assert::<Box<Trait>>();\n+    assert::<Box<dyn Trait>>();\n \n     fn bar<T>() {\n         assert::<Mutex<T>>();"}, {"sha": "c32e3f17880db13d02562e2fdff72150d0d096de", "filename": "src/test/run-pass/privacy/privacy-ns.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fprivacy%2Fprivacy-ns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fprivacy%2Fprivacy-ns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivacy%2Fprivacy-ns.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -28,19 +28,19 @@ fn test_unused1() {\n fn test_single1() {\n     use foo1::Bar;\n \n-    let _x: Box<Bar>;\n+    let _x: Box<dyn Bar>;\n }\n \n fn test_list1() {\n     use foo1::{Bar,Baz};\n \n-    let _x: Box<Bar>;\n+    let _x: Box<dyn Bar>;\n }\n \n fn test_glob1() {\n     use foo1::*;\n \n-    let _x: Box<Bar>;\n+    let _x: Box<dyn Bar>;\n }\n \n // private type, public value\n@@ -93,21 +93,21 @@ fn test_single3() {\n     use foo3::Bar;\n \n     Bar();\n-    let _x: Box<Bar>;\n+    let _x: Box<dyn Bar>;\n }\n \n fn test_list3() {\n     use foo3::{Bar,Baz};\n \n     Bar();\n-    let _x: Box<Bar>;\n+    let _x: Box<dyn Bar>;\n }\n \n fn test_glob3() {\n     use foo3::*;\n \n     Bar();\n-    let _x: Box<Bar>;\n+    let _x: Box<dyn Bar>;\n }\n \n fn main() {"}, {"sha": "511a35b25a3e8fc766ad2e3e8ec362ef788f6ec5", "filename": "src/test/run-pass/raw-fat-ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fraw-fat-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fraw-fat-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fraw-fat-ptr.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -78,7 +78,7 @@ fn main() {\n     let mut u32_ = (4u32, 5u32);\n \n     // check ordering for ptrs\n-    let buf: &mut [*const Foo] = &mut [\n+    let buf: &mut [*const dyn Foo] = &mut [\n         &u8_, &u8_.0,\n         &u32_, &u32_.0,\n     ];\n@@ -90,7 +90,7 @@ fn main() {\n     assert_inorder(buf);\n \n     // check ordering for mut ptrs\n-    let buf: &mut [*mut Foo] = &mut [\n+    let buf: &mut [*mut dyn Foo] = &mut [\n         &mut u8_, &mut u8_.0,\n         &mut u32_, &mut u32_.0,\n     ];"}, {"sha": "3815498f86fbb8ee8f227f3cf513f51cefaf3dad", "filename": "src/test/run-pass/regions/regions-bound-lists-feature-gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-bound-lists-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-bound-lists-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-bound-lists-feature-gate.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -9,7 +9,7 @@ trait Foo {\n     fn dummy(&self) { }\n }\n \n-fn foo<'a>(x: Box<Foo + 'a>) {\n+fn foo<'a>(x: Box<dyn Foo + 'a>) {\n }\n \n fn bar<'a, T: 'a>() {"}, {"sha": "4b47ed8c6aeb7120ed4c56888112208bafa0d365", "filename": "src/test/run-pass/regions/regions-close-over-type-parameter-successfully.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-close-over-type-parameter-successfully.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-close-over-type-parameter-successfully.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-close-over-type-parameter-successfully.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -12,8 +12,8 @@ impl<'a> SomeTrait for &'a isize {\n     }\n }\n \n-fn make_object<'a,A:SomeTrait+'a>(v: A) -> Box<SomeTrait+'a> {\n-    box v as Box<SomeTrait+'a>\n+fn make_object<'a,A:SomeTrait+'a>(v: A) -> Box<dyn SomeTrait+'a> {\n+    box v as Box<dyn SomeTrait+'a>\n }\n \n fn main() {"}, {"sha": "43640079777a343cf5b81f86b64d3e0c96e6cec1", "filename": "src/test/run-pass/regions/regions-copy-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-copy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-copy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-copy-closure.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -2,10 +2,10 @@\n #![allow(non_camel_case_types)]\n \n struct closure_box<'a> {\n-    cl: Box<FnMut() + 'a>,\n+    cl: Box<dyn FnMut() + 'a>,\n }\n \n-fn box_it<'a>(x: Box<FnMut() + 'a>) -> closure_box<'a> {\n+fn box_it<'a>(x: Box<dyn FnMut() + 'a>) -> closure_box<'a> {\n     closure_box {cl: x}\n }\n "}, {"sha": "0b5510489fb45a9b4b7beedab337e80cc4abc170", "filename": "src/test/run-pass/regions/regions-debruijn-of-object.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-debruijn-of-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-debruijn-of-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-debruijn-of-object.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -13,9 +13,9 @@ trait AstConv<'tcx> {\n     fn tcx<'a>(&'a self) -> &'a ctxt<'tcx>;\n }\n \n-fn foo(conv: &AstConv) { }\n+fn foo(conv: &dyn AstConv) { }\n \n-fn bar<'tcx>(conv: &AstConv<'tcx>) {\n+fn bar<'tcx>(conv: &dyn AstConv<'tcx>) {\n     foo(conv)\n }\n "}, {"sha": "cc2bde78d8594b3a6d488a9b75acd9d603455398", "filename": "src/test/run-pass/regions/regions-early-bound-trait-param.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-early-bound-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-early-bound-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-early-bound-trait-param.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -15,14 +15,14 @@ fn poly_invoke<'c, T: Trait<'c>>(x: &'c T) -> (isize, isize) {\n     (l,s)\n }\n \n-fn object_invoke1<'d>(x: &'d Trait<'d>) -> (isize, isize) {\n+fn object_invoke1<'d>(x: &'d dyn Trait<'d>) -> (isize, isize) {\n     let l = x.long();\n     let s = x.short();\n     (l,s)\n }\n \n struct Struct1<'e> {\n-    f: &'e (Trait<'e>+'e)\n+    f: &'e (dyn Trait<'e>+'e)\n }\n \n fn field_invoke1<'f, 'g>(x: &'g Struct1<'f>) -> (isize,isize) {\n@@ -32,10 +32,10 @@ fn field_invoke1<'f, 'g>(x: &'g Struct1<'f>) -> (isize,isize) {\n }\n \n struct Struct2<'h, 'i:'h> {\n-    f: &'h (Trait<'i>+'h)\n+    f: &'h (dyn Trait<'i>+'h)\n }\n \n-fn object_invoke2<'j, 'k>(x: &'k Trait<'j>) -> isize {\n+fn object_invoke2<'j, 'k>(x: &'k dyn Trait<'j>) -> isize {\n     x.short()\n }\n \n@@ -70,10 +70,10 @@ impl<'s> Trait<'s> for (isize,isize) {\n     }\n }\n \n-impl<'t> MakerTrait for Box<Trait<'t>+'static> {\n-    fn mk() -> Box<Trait<'t>+'static> {\n+impl<'t> MakerTrait for Box<dyn Trait<'t>+'static> {\n+    fn mk() -> Box<dyn Trait<'t>+'static> {\n         let tup: Box<(isize, isize)> = box (4,5);\n-        tup as Box<Trait>\n+        tup as Box<dyn Trait>\n     }\n }\n \n@@ -105,7 +105,7 @@ impl<'t> RefMakerTrait<'t> for List<'t> {\n \n pub fn main() {\n     let t = (2,3);\n-    let o = &t as &Trait;\n+    let o = &t as &dyn Trait;\n     let s1 = Struct1 { f: o };\n     let s2 = Struct2 { f: o };\n     assert_eq!(poly_invoke(&t), (2,3));\n@@ -114,7 +114,7 @@ pub fn main() {\n     assert_eq!(object_invoke2(&t), 3);\n     assert_eq!(field_invoke2(&s2), 3);\n \n-    let m : Box<Trait> = make_val();\n+    let m : Box<dyn Trait> = make_val();\n     // assert_eq!(object_invoke1(&*m), (4,5));\n     //            ~~~~~~~~~~~~~~~~~~~\n     // this call yields a compilation error; see compile-fail/dropck-object-cycle.rs"}, {"sha": "83949ddba3d1ee96126c4a983ba1eeb4d216ca8e", "filename": "src/test/run-pass/regions/regions-fn-subtyping-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-fn-subtyping-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-fn-subtyping-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-fn-subtyping-2.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -7,13 +7,13 @@\n // that `x` is in.\n // pretty-expanded FIXME #23616\n \n-fn has_same_region(f: Box<for<'a> FnMut(&'a isize, Box<FnMut(&'a isize)>)>) {\n+fn has_same_region(f: Box<dyn for<'a> FnMut(&'a isize, Box<dyn FnMut(&'a isize)>)>) {\n     // `f` should be the type that `wants_same_region` wants, but\n     // right now the compiler complains that it isn't.\n     wants_same_region(f);\n }\n \n-fn wants_same_region(_f: Box<for<'b> FnMut(&'b isize, Box<FnMut(&'b isize)>)>) {\n+fn wants_same_region(_f: Box<dyn for<'b> FnMut(&'b isize, Box<dyn FnMut(&'b isize)>)>) {\n }\n \n pub fn main() {"}, {"sha": "9570359c69e315a89a230da74692588e044f4d18", "filename": "src/test/run-pass/regions/regions-fn-subtyping.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-fn-subtyping.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -8,21 +8,21 @@\n #![allow(unused_variables)]\n \n // Should pass region checking.\n-fn ok(f: Box<FnMut(&usize)>) {\n+fn ok(f: Box<dyn FnMut(&usize)>) {\n     // Here, g is a function that can accept a usize pointer with\n     // lifetime r, and f is a function that can accept a usize pointer\n     // with any lifetime.  The assignment g = f should be OK (i.e.,\n     // f's type should be a subtype of g's type), because f can be\n     // used in any context that expects g's type.  But this currently\n     // fails.\n-    let mut g: Box<for<'r> FnMut(&'r usize)> = Box::new(|x| { });\n+    let mut g: Box<dyn for<'r> FnMut(&'r usize)> = Box::new(|x| { });\n     g = f;\n }\n \n // This version is the same as above, except that here, g's type is\n // inferred.\n-fn ok_inferred(f: Box<FnMut(&usize)>) {\n-    let mut g: Box<for<'r> FnMut(&'r usize)> = Box::new(|_| {});\n+fn ok_inferred(f: Box<dyn FnMut(&usize)>) {\n+    let mut g: Box<dyn for<'r> FnMut(&'r usize)> = Box::new(|_| {});\n     g = f;\n }\n "}, {"sha": "6aa5d8217a466b496fc82f813e1751f558b9005d", "filename": "src/test/run-pass/regions/regions-infer-region-in-fn-but-not-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-infer-region-in-fn-but-not-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-infer-region-in-fn-but-not-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-infer-region-in-fn-but-not-type.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -8,7 +8,7 @@\n // contains region pointers\n // pretty-expanded FIXME #23616\n \n-struct foo(Box<FnMut(&isize)+'static>);\n+struct foo(Box<dyn FnMut(&isize)+'static>);\n \n fn take_foo<T:'static>(x: T) {}\n "}, {"sha": "c8106f32c65c257f68071d359c1484d6276d83b4", "filename": "src/test/run-pass/regions/regions-lifetime-nonfree-late-bound.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-lifetime-nonfree-late-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-lifetime-nonfree-late-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-lifetime-nonfree-late-bound.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -19,15 +19,15 @@\n \n pub fn main() {\n     fn explicit() {\n-        fn test<F>(_x: Option<Box<F>>) where F: FnMut(Box<for<'a> FnMut(&'a isize)>) {}\n-        test(Some(box |_f: Box<for<'a> FnMut(&'a isize)>| {}));\n+        fn test<F>(_x: Option<Box<F>>) where F: FnMut(Box<dyn for<'a> FnMut(&'a isize)>) {}\n+        test(Some(box |_f: Box<dyn for<'a> FnMut(&'a isize)>| {}));\n     }\n \n     // The code below is shorthand for the code above (and more likely\n     // to represent what one encounters in practice).\n     fn implicit() {\n-        fn test<F>(_x: Option<Box<F>>) where F: FnMut(Box<        FnMut(&   isize)>) {}\n-        test(Some(box |_f: Box<        FnMut(&   isize)>| {}));\n+        fn test<F>(_x: Option<Box<F>>) where F: FnMut(Box<dyn        FnMut(&   isize)>) {}\n+        test(Some(box |_f: Box<dyn        FnMut(&   isize)>| {}));\n     }\n \n     explicit();"}, {"sha": "aec05161c1afbca2d57e7fdf7c7836db6136b889", "filename": "src/test/run-pass/regions/regions-relate-bound-regions-on-closures-to-inference-variables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -44,7 +44,7 @@ impl<'a,'tcx> Foo<'a,'tcx> {\n \n     fn elaborate_bounds(\n         &mut self,\n-        mut mk_cand: Box<for<'b> FnMut(&mut Foo<'b, 'tcx>) -> isize>)\n+        mut mk_cand: Box<dyn for<'b> FnMut(&mut Foo<'b, 'tcx>) -> isize>)\n         -> isize\n     {\n         mk_cand(self)"}, {"sha": "09cd56220323d84a00756534297b9ff1a7d51c78", "filename": "src/test/run-pass/regions/regions-static-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-static-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-static-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-static-closure.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -2,10 +2,10 @@\n #![allow(non_camel_case_types)]\n \n struct closure_box<'a> {\n-    cl: Box<FnMut() + 'a>,\n+    cl: Box<dyn FnMut() + 'a>,\n }\n \n-fn box_it<'a>(x: Box<FnMut() + 'a>) -> closure_box<'a> {\n+fn box_it<'a>(x: Box<dyn FnMut() + 'a>) -> closure_box<'a> {\n     closure_box {cl: x}\n }\n "}, {"sha": "679bf4dd8117c5506b01d43e9873e1e80c0f09b2", "filename": "src/test/run-pass/regions/regions-trait-object-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-trait-object-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fregions%2Fregions-trait-object-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions%2Fregions-trait-object-1.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -21,10 +21,10 @@ impl<'d> M for P<'d> {\n     fn n(&self) -> u8 { *self.g }\n }\n \n-fn extension<'e>(x: &'e E<'e>) -> Box<M+'e> {\n+fn extension<'e>(x: &'e E<'e>) -> Box<dyn M+'e> {\n     loop {\n         let p = P { g: x.m() };\n-        return Box::new(p) as Box<M+'e>;\n+        return Box::new(p) as Box<dyn M+'e>;\n     }\n }\n "}, {"sha": "944157d0b20094cda0d4a2379a465ef3708822a3", "filename": "src/test/run-pass/string-box-error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fstring-box-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fstring-box-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstring-box-error.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -4,8 +4,8 @@\n use std::error::Error;\n \n fn main() {\n-    let _err1: Box<Error + Send + Sync> = From::from(\"test\".to_string());\n-    let _err2: Box<Error> = From::from(\"test\".to_string());\n-    let _err3: Box<Error + Send + Sync + 'static> = From::from(\"test\");\n-    let _err4: Box<Error> = From::from(\"test\");\n+    let _err1: Box<dyn Error + Send + Sync> = From::from(\"test\".to_string());\n+    let _err2: Box<dyn Error> = From::from(\"test\".to_string());\n+    let _err3: Box<dyn Error + Send + Sync + 'static> = From::from(\"test\");\n+    let _err4: Box<dyn Error> = From::from(\"test\");\n }"}, {"sha": "bf1ba8a643fea8f89950724a933b5d34598552da", "filename": "src/test/run-pass/structs-enums/class-cast-to-trait-cross-crate-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-cast-to-trait-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-cast-to-trait-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-cast-to-trait-cross-crate-2.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -8,13 +8,13 @@ extern crate cci_class_cast;\n use std::string::ToString;\n use cci_class_cast::kitty::cat;\n \n-fn print_out(thing: Box<ToString>, expected: String) {\n+fn print_out(thing: Box<dyn ToString>, expected: String) {\n   let actual = (*thing).to_string();\n   println!(\"{}\", actual);\n   assert_eq!(actual.to_string(), expected);\n }\n \n pub fn main() {\n-  let nyan: Box<ToString> = box cat(0, 2, \"nyan\".to_string()) as Box<ToString>;\n+  let nyan: Box<dyn ToString> = box cat(0, 2, \"nyan\".to_string()) as Box<dyn ToString>;\n   print_out(nyan, \"nyan\".to_string());\n }"}, {"sha": "55975cbdb5342ee491a78f37fe9d95017b9985f7", "filename": "src/test/run-pass/structs-enums/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-cast-to-trait-multiple-types.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -79,7 +79,7 @@ fn cat(in_x: usize, in_y: isize, in_name: String) -> cat {\n }\n \n \n-fn annoy_neighbors(critter: &mut noisy) {\n+fn annoy_neighbors(critter: &mut dyn noisy) {\n     for _i in 0_usize..10 { critter.speak(); }\n }\n "}, {"sha": "1019bb30015a94302ee12798a005296d1748b1e1", "filename": "src/test/run-pass/structs-enums/class-cast-to-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-cast-to-trait.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -55,6 +55,6 @@ fn cat(in_x : usize, in_y : isize, in_name: String) -> cat {\n \n pub fn main() {\n     let mut nyan = cat(0, 2, \"nyan\".to_string());\n-    let mut nyan: &mut noisy = &mut nyan;\n+    let mut nyan: &mut dyn noisy = &mut nyan;\n     nyan.speak();\n }"}, {"sha": "947690b51f422ab70ec1bfb46dd4eb83adbb1321", "filename": "src/test/run-pass/structs-enums/class-separate-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-separate-impl.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -53,13 +53,13 @@ impl fmt::Display for cat {\n     }\n }\n \n-fn print_out(thing: Box<ToString>, expected: String) {\n+fn print_out(thing: Box<dyn ToString>, expected: String) {\n   let actual = (*thing).to_string();\n   println!(\"{}\", actual);\n   assert_eq!(actual.to_string(), expected);\n }\n \n pub fn main() {\n-  let nyan: Box<ToString> = box cat(0, 2, \"nyan\".to_string()) as Box<ToString>;\n+  let nyan: Box<dyn ToString> = box cat(0, 2, \"nyan\".to_string()) as Box<dyn ToString>;\n   print_out(nyan, \"nyan\".to_string());\n }"}, {"sha": "87629665bc2bd6dc015fb558f3b0eb8599c9dd31", "filename": "src/test/run-pass/structs-enums/enum-null-pointer-opt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fenum-null-pointer-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fenum-null-pointer-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fenum-null-pointer-opt.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -22,9 +22,9 @@ fn main() {\n     assert_eq!(size_of::<&mut [isize]>(), size_of::<Option<&mut [isize]>>());\n \n     // Traits - Box<Trait> / &Trait / &mut Trait\n-    assert_eq!(size_of::<Box<Trait>>(), size_of::<Option<Box<Trait>>>());\n-    assert_eq!(size_of::<&Trait>(), size_of::<Option<&Trait>>());\n-    assert_eq!(size_of::<&mut Trait>(), size_of::<Option<&mut Trait>>());\n+    assert_eq!(size_of::<Box<dyn Trait>>(), size_of::<Option<Box<dyn Trait>>>());\n+    assert_eq!(size_of::<&dyn Trait>(), size_of::<Option<&dyn Trait>>());\n+    assert_eq!(size_of::<&mut dyn Trait>(), size_of::<Option<&mut dyn Trait>>());\n \n     // Pointers - Box<T>\n     assert_eq!(size_of::<Box<isize>>(), size_of::<Option<Box<isize>>>());"}, {"sha": "e1a865fa5039967666dbd3ccd7f08429dbbf2776", "filename": "src/test/run-pass/structs-enums/object-lifetime-default-from-ref-struct.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fobject-lifetime-default-from-ref-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fobject-lifetime-default-from-ref-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fobject-lifetime-default-from-ref-struct.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -22,37 +22,37 @@ struct Ref2<'a,'b,T:'a+'b+?Sized> {\n }\n \n struct SomeStruct<'a> {\n-    t: Ref<'a,Test>,\n-    u: Ref<'a,Test+'a>,\n+    t: Ref<'a, dyn Test>,\n+    u: Ref<'a, dyn Test+'a>,\n }\n \n-fn a<'a>(t: Ref<'a,Test>, mut ss: SomeStruct<'a>) {\n+fn a<'a>(t: Ref<'a, dyn Test>, mut ss: SomeStruct<'a>) {\n     ss.t = t;\n }\n \n-fn b<'a>(t: Ref<'a,Test>, mut ss: SomeStruct<'a>) {\n+fn b<'a>(t: Ref<'a, dyn Test>, mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n \n-fn c<'a>(t: Ref<'a,Test+'a>, mut ss: SomeStruct<'a>) {\n+fn c<'a>(t: Ref<'a, dyn Test+'a>, mut ss: SomeStruct<'a>) {\n     ss.t = t;\n }\n \n-fn d<'a>(t: Ref<'a,Test+'a>, mut ss: SomeStruct<'a>) {\n+fn d<'a>(t: Ref<'a, dyn Test+'a>, mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n \n-fn e<'a>(_: Ref<'a, Display+'static>) {}\n-fn g<'a, 'b>(_: Ref2<'a, 'b, Display+'static>) {}\n+fn e<'a>(_: Ref<'a, dyn Display+'static>) {}\n+fn g<'a, 'b>(_: Ref2<'a, 'b, dyn Display+'static>) {}\n \n \n fn main() {\n     // Inside a function body, we can just infer all\n     // lifetimes, to allow Ref<'tmp, Display+'static>\n     // and Ref2<'tmp, 'tmp, Display+'static>.\n-    let x = &0 as &(Display+'static);\n-    let r: Ref<Display> = Ref { r: x };\n-    let r2: Ref2<Display> = Ref2 { a: x, b: x };\n+    let x = &0 as &(dyn Display+'static);\n+    let r: Ref<dyn Display> = Ref { r: x };\n+    let r2: Ref2<dyn Display> = Ref2 { a: x, b: x };\n     e(r);\n     g(r2);\n }"}, {"sha": "1fc52ead48e0e54d421210e9283e444d859c3a37", "filename": "src/test/run-pass/structs-enums/object-lifetime-default-from-rptr-struct.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fobject-lifetime-default-from-rptr-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fobject-lifetime-default-from-rptr-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fobject-lifetime-default-from-rptr-struct.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -11,25 +11,25 @@ trait Test {\n }\n \n struct SomeStruct<'a> {\n-    t: &'a MyBox<Test>,\n-    u: &'a MyBox<Test+'a>,\n+    t: &'a MyBox<dyn Test>,\n+    u: &'a MyBox<dyn Test+'a>,\n }\n \n struct MyBox<T:?Sized> {\n     b: Box<T>\n }\n \n-fn a<'a>(t: &'a MyBox<Test>, mut ss: SomeStruct<'a>) {\n+fn a<'a>(t: &'a MyBox<dyn Test>, mut ss: SomeStruct<'a>) {\n     ss.t = t;\n }\n \n-fn b<'a>(t: &'a MyBox<Test>, mut ss: SomeStruct<'a>) {\n+fn b<'a>(t: &'a MyBox<dyn Test>, mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n \n // see also compile-fail/object-lifetime-default-from-rptr-box-error.rs\n \n-fn d<'a>(t: &'a MyBox<Test+'a>, mut ss: SomeStruct<'a>) {\n+fn d<'a>(t: &'a MyBox<dyn Test+'a>, mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n "}, {"sha": "c495b97b25bfee31a4b659434aea376d1c0f61c5", "filename": "src/test/run-pass/traits/auto-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Fauto-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Fauto-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Fauto-traits.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -27,5 +27,5 @@ fn main() {\n     take_auto_unsafe(AutoBool(true));\n \n     /// Auto traits are allowed in trait object bounds.\n-    let _: &(Send + Auto) = &0;\n+    let _: &(dyn Send + Auto) = &0;\n }"}, {"sha": "82760788897a5878a322eeb555c7c2b316f166ad", "filename": "src/test/run-pass/traits/impl-inherent-prefer-over-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Fimpl-inherent-prefer-over-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Fimpl-inherent-prefer-over-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Fimpl-inherent-prefer-over-trait.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -11,7 +11,7 @@ impl Foo {\n     fn bar(&self) {}\n }\n \n-impl Trait {\n+impl dyn Trait {\n     fn baz(_: &Foo) {}\n }\n \n@@ -26,5 +26,5 @@ fn main() {\n \n     // Should work even if Trait::baz doesn't exist.\n     // N.B: `<Trait>::bar` would be ambiguous.\n-    <Trait>::baz(&Foo);\n+    <dyn Trait>::baz(&Foo);\n }"}, {"sha": "ed258dbb24c3f7fcdeb798069ee0e6c9f3475eac", "filename": "src/test/run-pass/traits/infer-from-object-trait-issue-26952.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Finfer-from-object-trait-issue-26952.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Finfer-from-object-trait-issue-26952.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Finfer-from-object-trait-issue-26952.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -14,7 +14,7 @@ trait Trait<A> { fn foo(&self); }\n \n struct Type<A> { a: PhantomData<A> }\n \n-fn as_trait<A>(t: &Type<A>) -> &Trait<A> { loop {  } }\n+fn as_trait<A>(t: &Type<A>) -> &dyn Trait<A> { loop {  } }\n \n fn want<A,T:Trait<A>+?Sized>(t: &T) { }\n "}, {"sha": "23b91f924b553055f6562153a2904bdd66224b63", "filename": "src/test/run-pass/traits/kindck-owned-trait-contains-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Fkindck-owned-trait-contains-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Fkindck-owned-trait-contains-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Fkindck-owned-trait-contains-1.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -12,8 +12,8 @@ impl<A:Clone + 'static> repeat<A> for Box<A> {\n     }\n }\n \n-fn repeater<A:Clone + 'static>(v: Box<A>) -> Box<repeat<A>+'static> {\n-    box v as Box<repeat<A>+'static> // No\n+fn repeater<A:Clone + 'static>(v: Box<A>) -> Box<dyn repeat<A>+'static> {\n+    box v as Box<dyn repeat<A>+'static> // No\n }\n \n pub fn main() {"}, {"sha": "b92a2ab7b4bc2414ab9aaab2517088df6652b372", "filename": "src/test/run-pass/traits/object-one-type-two-traits.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Fobject-one-type-two-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Fobject-one-type-two-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Fobject-one-type-two-traits.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -10,24 +10,24 @@ use std::any::Any;\n \n trait Wrap {\n     fn get(&self) -> isize;\n-    fn wrap(self: Box<Self>) -> Box<Any+'static>;\n+    fn wrap(self: Box<Self>) -> Box<dyn Any+'static>;\n }\n \n impl Wrap for isize {\n     fn get(&self) -> isize {\n         *self\n     }\n-    fn wrap(self: Box<isize>) -> Box<Any+'static> {\n-        self as Box<Any+'static>\n+    fn wrap(self: Box<isize>) -> Box<dyn Any+'static> {\n+        self as Box<dyn Any+'static>\n     }\n }\n \n-fn is<T:Any>(x: &Any) -> bool {\n+fn is<T:Any>(x: &dyn Any) -> bool {\n     x.is::<T>()\n }\n \n fn main() {\n-    let x = box 22isize as Box<Wrap>;\n+    let x = box 22isize as Box<dyn Wrap>;\n     println!(\"x={}\", x.get());\n     let y = x.wrap();\n }"}, {"sha": "832d4f6c89f09c321199554abbef7c5ceb3a738c", "filename": "src/test/run-pass/traits/parameterized-trait-with-bounds.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Fparameterized-trait-with-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Fparameterized-trait-with-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Fparameterized-trait-with-bounds.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -12,10 +12,10 @@ mod foo {\n     pub trait D<'a, T> { fn get(self) -> &'a T; }\n }\n \n-fn foo1<T>(_: &(A<T> + Send)) {}\n-fn foo2<T>(_: Box<A<T> + Send + Sync>) {}\n-fn foo3<T>(_: Box<B<isize, usize> + 'static>) {}\n-fn foo4<'a, T>(_: Box<C<'a, T> + 'static + Send>) {}\n-fn foo5<'a, T>(_: Box<foo::D<'a, T> + 'static + Send>) {}\n+fn foo1<T>(_: &(dyn A<T> + Send)) {}\n+fn foo2<T>(_: Box<dyn A<T> + Send + Sync>) {}\n+fn foo3<T>(_: Box<dyn B<isize, usize> + 'static>) {}\n+fn foo4<'a, T>(_: Box<dyn C<'a, T> + 'static + Send>) {}\n+fn foo5<'a, T>(_: Box<dyn foo::D<'a, T> + 'static + Send>) {}\n \n pub fn main() {}"}, {"sha": "8c8a7eb7d9da1c679ccd107b9e3f27f739896592", "filename": "src/test/run-pass/traits/trait-bounds-basic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-bounds-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-bounds-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-bounds-basic.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -7,18 +7,18 @@\n trait Foo {\n }\n \n-fn b(_x: Box<Foo+Send>) {\n+fn b(_x: Box<dyn Foo+Send>) {\n }\n \n-fn c(x: Box<Foo+Sync+Send>) {\n+fn c(x: Box<dyn Foo+Sync+Send>) {\n     e(x);\n }\n \n-fn d(x: Box<Foo+Send>) {\n+fn d(x: Box<dyn Foo+Send>) {\n     e(x);\n }\n \n-fn e(x: Box<Foo>) {\n+fn e(x: Box<dyn Foo>) {\n     e(x);\n }\n "}, {"sha": "a45d834297eedc0e9325af7611f48b1eacff01ca", "filename": "src/test/run-pass/traits/trait-bounds-in-arc.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-bounds-in-arc.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -12,7 +12,7 @@ use std::sync::mpsc::channel;\n use std::thread;\n \n trait Pet {\n-    fn name(&self, blk: Box<FnMut(&str)>);\n+    fn name(&self, blk: Box<dyn FnMut(&str)>);\n     fn num_legs(&self) -> usize;\n     fn of_good_pedigree(&self) -> bool;\n }\n@@ -34,19 +34,19 @@ struct Goldfyshe {\n }\n \n impl Pet for Catte {\n-    fn name(&self, mut blk: Box<FnMut(&str)>) { blk(&self.name) }\n+    fn name(&self, mut blk: Box<dyn FnMut(&str)>) { blk(&self.name) }\n     fn num_legs(&self) -> usize { 4 }\n     fn of_good_pedigree(&self) -> bool { self.num_whiskers >= 4 }\n }\n impl Pet for Dogge {\n-    fn name(&self, mut blk: Box<FnMut(&str)>) { blk(&self.name) }\n+    fn name(&self, mut blk: Box<dyn FnMut(&str)>) { blk(&self.name) }\n     fn num_legs(&self) -> usize { 4 }\n     fn of_good_pedigree(&self) -> bool {\n         self.bark_decibels < 70 || self.tricks_known > 20\n     }\n }\n impl Pet for Goldfyshe {\n-    fn name(&self, mut blk: Box<FnMut(&str)>) { blk(&self.name) }\n+    fn name(&self, mut blk: Box<dyn FnMut(&str)>) { blk(&self.name) }\n     fn num_legs(&self) -> usize { 0 }\n     fn of_good_pedigree(&self) -> bool { self.swim_speed >= 500 }\n }\n@@ -67,10 +67,10 @@ pub fn main() {\n         swim_speed: 998,\n         name: \"alec_guinness\".to_string(),\n     };\n-    let arc = Arc::new(vec![box catte  as Box<Pet+Sync+Send>,\n-                            box dogge1 as Box<Pet+Sync+Send>,\n-                            box fishe  as Box<Pet+Sync+Send>,\n-                            box dogge2 as Box<Pet+Sync+Send>]);\n+    let arc = Arc::new(vec![box catte  as Box<dyn Pet+Sync+Send>,\n+                            box dogge1 as Box<dyn Pet+Sync+Send>,\n+                            box fishe  as Box<dyn Pet+Sync+Send>,\n+                            box dogge2 as Box<dyn Pet+Sync+Send>]);\n     let (tx1, rx1) = channel();\n     let arc1 = arc.clone();\n     let t1 = thread::spawn(move|| { check_legs(arc1); tx1.send(()); });\n@@ -88,21 +88,21 @@ pub fn main() {\n     t3.join();\n }\n \n-fn check_legs(arc: Arc<Vec<Box<Pet+Sync+Send>>>) {\n+fn check_legs(arc: Arc<Vec<Box<dyn Pet+Sync+Send>>>) {\n     let mut legs = 0;\n     for pet in arc.iter() {\n         legs += pet.num_legs();\n     }\n     assert!(legs == 12);\n }\n-fn check_names(arc: Arc<Vec<Box<Pet+Sync+Send>>>) {\n+fn check_names(arc: Arc<Vec<Box<dyn Pet+Sync+Send>>>) {\n     for pet in arc.iter() {\n         pet.name(Box::new(|name| {\n             assert!(name.as_bytes()[0] == 'a' as u8 && name.as_bytes()[1] == 'l' as u8);\n         }))\n     }\n }\n-fn check_pedigree(arc: Arc<Vec<Box<Pet+Sync+Send>>>) {\n+fn check_pedigree(arc: Arc<Vec<Box<dyn Pet+Sync+Send>>>) {\n     for pet in arc.iter() {\n         assert!(pet.of_good_pedigree());\n     }"}, {"sha": "4dc4fecc91fcfc36da7c098a8e737296bfc54959", "filename": "src/test/run-pass/traits/trait-bounds-on-structs-and-enums.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-bounds-on-structs-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-bounds-on-structs-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-bounds-on-structs-and-enums.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -7,11 +7,11 @@ trait U {}\n trait T<X: U> { fn get(self) -> X; }\n \n trait S2<Y: U> {\n-    fn m(x: Box<T<Y>+'static>) {}\n+    fn m(x: Box<dyn T<Y>+'static>) {}\n }\n \n struct St<X: U> {\n-    f: Box<T<X>+'static>,\n+    f: Box<dyn T<X>+'static>,\n }\n \n impl<X: U> St<X> {"}, {"sha": "bf4dda49519107cef0b14585479d001d6b9d3f64", "filename": "src/test/run-pass/traits/trait-coercion-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-coercion-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-coercion-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-coercion-generic.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -18,8 +18,8 @@ impl Trait<&'static str> for Struct {\n \n pub fn main() {\n     let a = Struct { x: 1, y: 2 };\n-    let b: Box<Trait<&'static str>> = Box::new(a);\n+    let b: Box<dyn Trait<&'static str>> = Box::new(a);\n     b.f(\"Mary\");\n-    let c: &Trait<&'static str> = &a;\n+    let c: &dyn Trait<&'static str> = &a;\n     c.f(\"Joe\");\n }"}, {"sha": "cba33af1f1aca1f9b8221b5bdd8c912c630c8ce6", "filename": "src/test/run-pass/traits/trait-coercion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-coercion.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -22,13 +22,13 @@ impl Trait for Struct {\n     }\n }\n \n-fn foo(mut a: Box<Write>) {}\n+fn foo(mut a: Box<dyn Write>) {}\n \n pub fn main() {\n     let a = Struct { x: 1, y: 2 };\n-    let b: Box<Trait> = Box::new(a);\n+    let b: Box<dyn Trait> = Box::new(a);\n     b.f();\n-    let c: &Trait = &a;\n+    let c: &dyn Trait = &a;\n     c.f();\n \n     let out = io::stdout();"}, {"sha": "804ffec12c2bfd61d909f9ca4968abf83f518620", "filename": "src/test/run-pass/traits/trait-impl-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-impl-2.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -11,7 +11,7 @@ pub mod Foo {\n }\n \n mod Bar {\n-    impl<'a> ::Foo::Trait+'a {\n+    impl<'a> dyn (::Foo::Trait) + 'a {\n         fn bar(&self) { self.foo() }\n     }\n }"}, {"sha": "14796ce19c88ed08b62d726b53e1f674e13405d3", "filename": "src/test/run-pass/traits/trait-impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-impl.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -12,7 +12,7 @@ trait T {\n     fn t(&self) {}\n }\n \n-impl<'a> T+'a {\n+impl<'a> dyn T+'a {\n     fn foo(&self) {\n         unsafe { COUNT *= 2; }\n     }\n@@ -27,7 +27,7 @@ struct Foo;\n impl<'a> Bar<'a> for Foo {}\n \n fn main() {\n-    let x: &T = &42;\n+    let x: &dyn T = &42;\n \n     x.foo();\n     T::foo(x);\n@@ -36,6 +36,6 @@ fn main() {\n     unsafe { assert_eq!(COUNT, 12); }\n \n     // Cross-crait case\n-    let x: &Bar = &Foo;\n+    let x: &dyn Bar = &Foo;\n     x.bar();\n }"}, {"sha": "25159c1adb6f6febdb0316660140be18e04e9e8a", "filename": "src/test/run-pass/traits/trait-inheritance-cast-without-call-to-supertrait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-inheritance-cast-without-call-to-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-inheritance-cast-without-call-to-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-inheritance-cast-without-call-to-supertrait.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -26,8 +26,8 @@ impl Bar for A {\n \n pub fn main() {\n     let a = &A { x: 3 };\n-    let afoo = a as &Foo;\n-    let abar = a as &Bar;\n+    let afoo = a as &dyn Foo;\n+    let abar = a as &dyn Bar;\n     assert_eq!(afoo.f(), 10);\n     assert_eq!(abar.g(), 20);\n }"}, {"sha": "9070b9d1f5606991efceaece5ef1d96ea9870aee", "filename": "src/test/run-pass/traits/trait-inheritance-cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-inheritance-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-inheritance-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-inheritance-cast.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -25,8 +25,8 @@ impl Bar for A {\n \n pub fn main() {\n     let a = &A { x: 3 };\n-    let afoo = a as &Foo;\n-    let abar = a as &Bar;\n+    let afoo = a as &dyn Foo;\n+    let abar = a as &dyn Bar;\n     assert_eq!(afoo.f(), 10);\n     assert_eq!(abar.g(), 20);\n     assert_eq!(abar.f(), 10);"}, {"sha": "0b8b0e2f5ef4d48e24c52495b6269f629f62b908", "filename": "src/test/run-pass/traits/trait-object-exclusion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-exclusion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-exclusion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-exclusion.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -4,7 +4,7 @@ trait Future: 'static {\n     // Future::forget in vtables, otherwise there's an infinite type\n     // recursion through <Map<...> as Future>::forget.\n     fn forget(self) where Self: Sized {\n-        Box::new(Map(self)) as Box<Future>;\n+        Box::new(Map(self)) as Box<dyn Future>;\n     }\n }\n "}, {"sha": "c18754302b75b279af7165e3398a87cfdb5ac3ea", "filename": "src/test/run-pass/traits/trait-object-generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-generics.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -16,7 +16,7 @@ pub struct Impl<A1, A2, A3> {\n      * task <unnamed> failed at 'index out of bounds: the len is 1 but the index is 1',\n      * src/librustc/middle/subst.rs:58\n      */\n-    t: Box<Trait2<A2>+'static>\n+    t: Box<dyn Trait2<A2>+'static>\n }\n \n impl<A1, A2, A3> Impl<A1, A2, A3> {\n@@ -38,6 +38,6 @@ impl<V> Trait<u8,V> for () {\n }\n \n pub fn main() {\n-    let a = box () as Box<Trait<u8, u8>>;\n+    let a = box () as Box<dyn Trait<u8, u8>>;\n     assert_eq!(a.method(Type::Constant((1, 2))), 0);\n }"}, {"sha": "33757cb7c0ab1da7efa9d1e5458efb1ce606a8c9", "filename": "src/test/run-pass/traits/trait-object-lifetime-first.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-lifetime-first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-lifetime-first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-lifetime-first.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -4,8 +4,8 @@ use std::fmt::Display;\n static BYTE: u8 = 33;\n \n fn main() {\n-    let x: &('static + Display) = &BYTE;\n-    let y: Box<'static + Display> = Box::new(BYTE);\n+    let x: &(dyn 'static + Display) = &BYTE;\n+    let y: Box<dyn 'static + Display> = Box::new(BYTE);\n     let xstr = format!(\"{}\", x);\n     let ystr = format!(\"{}\", y);\n     assert_eq!(xstr, \"33\");"}, {"sha": "05aab5e3b085c0965907a9791d38557056c9c09f", "filename": "src/test/run-pass/traits/trait-object-with-lifetime-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-with-lifetime-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-with-lifetime-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-object-with-lifetime-bound.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -20,10 +20,10 @@ impl<'d> M for P<'d> {\n     fn n(&self) -> u8 { *self.g }\n }\n \n-fn extension<'e>(x: &'e E<'e>) -> Box<M+'e> {\n+fn extension<'e>(x: &'e E<'e>) -> Box<dyn M+'e> {\n     loop {\n         let p = P { g: x.m() };\n-        return Box::new(p) as Box<M+'e>;\n+        return Box::new(p) as Box<dyn M+'e>;\n     }\n }\n "}, {"sha": "0456ca931156ec5b833c02a69a06c0d63c92504f", "filename": "src/test/run-pass/traits/trait-region-pointer-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-region-pointer-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-region-pointer-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-region-pointer-simple.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -16,6 +16,6 @@ impl Foo for A {\n \n pub fn main() {\n     let a = A { x: 3 };\n-    let b = (&a) as &Foo;\n+    let b = (&a) as &dyn Foo;\n     assert_eq!(b.f(), 3);\n }"}, {"sha": "e490967b690475107a6fed637edd0e574061eab2", "filename": "src/test/run-pass/traits/traits-impl-object-overlap-issue-23853.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-impl-object-overlap-issue-23853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-impl-object-overlap-issue-23853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-impl-object-overlap-issue-23853.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -14,5 +14,5 @@ impl<T:?Sized> Foo for T { }\n fn want_foo<B:?Sized+Foo>() { }\n \n fn main() {\n-    want_foo::<Bar>();\n+    want_foo::<dyn Bar>();\n }"}, {"sha": "bedd87cc4cc7977eb031e75d75dff1d806c2ee35", "filename": "src/test/run-pass/traits/traits-issue-26339.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-issue-26339.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-issue-26339.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-issue-26339.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -25,7 +25,7 @@ impl PartialEq<Bar> for Aimpl {\n impl A for Aimpl { }\n \n fn main() {\n-    let a = &Aimpl as &A;\n+    let a = &Aimpl as &dyn A;\n \n     assert!(*a == Foo);\n }"}, {"sha": "391d19c4385586c7277447c8d32eea66e6cfd036", "filename": "src/test/run-pass/traits/traits-repeated-supertrait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-repeated-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-repeated-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-repeated-supertrait.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -22,7 +22,7 @@ impl CompareTo<u64> for i64 {\n \n impl CompareToInts for i64 { }\n \n-fn with_obj(c: &CompareToInts) -> bool {\n+fn with_obj(c: &dyn CompareToInts) -> bool {\n     c.same_as(22_i64) && c.same_as(22_u64)\n }\n "}, {"sha": "700488c22d6780606207df0103fcb415ce676d30", "filename": "src/test/run-pass/traits/ufcs-trait-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Fufcs-trait-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftraits%2Fufcs-trait-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Fufcs-trait-object.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -12,6 +12,6 @@ impl Foo for i32 {\n }\n \n fn main() {\n-    let a: &Foo = &22;\n+    let a: &dyn Foo = &22;\n     assert_eq!(Foo::test(a), 22);\n }"}, {"sha": "f06b0708290bc909063e751e10985a3c35ce10e1", "filename": "src/test/run-pass/trivial_casts.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftrivial_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftrivial_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrivial_casts.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -36,21 +36,21 @@ pub fn main() {\n \n     // unsize trait\n     let x: &Bar = &Bar;\n-    let _ = x as &Foo;\n-    let _ = x as *const Foo;\n+    let _ = x as &dyn Foo;\n+    let _ = x as *const dyn Foo;\n \n     let x: &mut Bar = &mut Bar;\n-    let _ = x as &mut Foo;\n-    let _ = x as *mut Foo;\n+    let _ = x as &mut dyn Foo;\n+    let _ = x as *mut dyn Foo;\n \n     let x: Box<Bar> = Box::new(Bar);\n-    let _ = x as Box<Foo>;\n+    let _ = x as Box<dyn Foo>;\n \n     // functions\n     fn baz(_x: i32) {}\n-    let _ = &baz as &Fn(i32);\n+    let _ = &baz as &dyn Fn(i32);\n     let x = |_x: i32| {};\n-    let _ = &x as &Fn(i32);\n+    let _ = &x as &dyn Fn(i32);\n }\n \n // subtyping"}, {"sha": "469bc8ed7e15309d551ce058f53665337a2ad819", "filename": "src/test/run-pass/type-id-higher-rank-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank-2.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -7,7 +7,7 @@ struct Foo<'a>(&'a str);\n fn good(s: &String) -> Foo { Foo(s) }\n \n fn bad1(s: String) -> Option<&'static str> {\n-    let a: Box<Any> = Box::new(good as fn(&String) -> Foo);\n+    let a: Box<dyn Any> = Box::new(good as fn(&String) -> Foo);\n     a.downcast_ref::<fn(&String) -> Foo<'static>>().map(|f| f(&s).0)\n }\n \n@@ -20,8 +20,8 @@ impl<'a> AsStr<'a, 'a> for String {\n }\n \n fn bad2(s: String) -> Option<&'static str> {\n-    let a: Box<Any> = Box::new(Box::new(s) as Box<for<'a> AsStr<'a, 'a>>);\n-    a.downcast_ref::<Box<for<'a> AsStr<'a, 'static>>>().map(|x| x.get())\n+    let a: Box<dyn Any> = Box::new(Box::new(s) as Box<dyn for<'a> AsStr<'a, 'a>>);\n+    a.downcast_ref::<Box<dyn for<'a> AsStr<'a, 'static>>>().map(|x| x.get())\n }\n \n fn main() {"}, {"sha": "b98dff0d72b8d5752de9ee1f7722148dfd85affc", "filename": "src/test/run-pass/type-id-higher-rank.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -26,9 +26,9 @@ fn main() {\n         assert!(e != f);\n \n         // Make sure lifetime parameters of items are not ignored.\n-        let g = TypeId::of::<for<'a> fn(&'a Trait<'a>) -> Struct<'a>>();\n-        let h = TypeId::of::<for<'a> fn(&'a Trait<'a>) -> Struct<'static>>();\n-        let i = TypeId::of::<for<'a, 'b> fn(&'a Trait<'b>) -> Struct<'b>>();\n+        let g = TypeId::of::<for<'a> fn(&'a dyn Trait<'a>) -> Struct<'a>>();\n+        let h = TypeId::of::<for<'a> fn(&'a dyn Trait<'a>) -> Struct<'static>>();\n+        let i = TypeId::of::<for<'a, 'b> fn(&'a dyn Trait<'b>) -> Struct<'b>>();\n         assert!(g != h);\n         assert!(g != i);\n         assert!(h != i);\n@@ -40,10 +40,10 @@ fn main() {\n     }\n     // Boxed unboxed closures\n     {\n-        let a = TypeId::of::<Box<Fn(&'static isize, &'static isize)>>();\n-        let b = TypeId::of::<Box<for<'a> Fn(&'static isize, &'a isize)>>();\n-        let c = TypeId::of::<Box<for<'a, 'b> Fn(&'a isize, &'b isize)>>();\n-        let d = TypeId::of::<Box<for<'a, 'b> Fn(&'b isize, &'a isize)>>();\n+        let a = TypeId::of::<Box<dyn Fn(&'static isize, &'static isize)>>();\n+        let b = TypeId::of::<Box<dyn for<'a> Fn(&'static isize, &'a isize)>>();\n+        let c = TypeId::of::<Box<dyn for<'a, 'b> Fn(&'a isize, &'b isize)>>();\n+        let d = TypeId::of::<Box<dyn for<'a, 'b> Fn(&'b isize, &'a isize)>>();\n         assert!(a != b);\n         assert!(a != c);\n         assert!(a != d);\n@@ -52,8 +52,8 @@ fn main() {\n         assert_eq!(c, d);\n \n         // Make sure De Bruijn indices are handled correctly\n-        let e = TypeId::of::<Box<for<'a> Fn(Box<Fn(&'a isize) -> &'a isize>)>>();\n-        let f = TypeId::of::<Box<Fn(Box<for<'a> Fn(&'a isize) -> &'a isize>)>>();\n+        let e = TypeId::of::<Box<dyn for<'a> Fn(Box<dyn Fn(&'a isize) -> &'a isize>)>>();\n+        let f = TypeId::of::<Box<dyn Fn(Box<dyn for<'a> Fn(&'a isize) -> &'a isize>)>>();\n         assert!(e != f);\n     }\n     // Raw unboxed closures"}, {"sha": "6298156452e49b080054bddc8c458d6bd96c1605", "filename": "src/test/run-pass/type-infer-generalize-ty-var.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftype-infer-generalize-ty-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Ftype-infer-generalize-ty-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-infer-generalize-ty-var.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -23,8 +23,8 @@ trait Get<T: ?Sized> {\n     fn get(&self) -> &T;\n }\n \n-impl Get<MyShow + 'static> for Wrap<T> {\n-    fn get(&self) -> &(MyShow + 'static) {\n+impl Get<dyn MyShow + 'static> for Wrap<T> {\n+    fn get(&self) -> &(dyn MyShow + 'static) {\n         static x: usize = 42;\n         &x\n     }\n@@ -38,9 +38,9 @@ impl Get<usize> for Wrap<U> {\n }\n \n trait MyShow { fn dummy(&self) { } }\n-impl<'a> MyShow for &'a (MyShow + 'a) { }\n+impl<'a> MyShow for &'a (dyn MyShow + 'a) { }\n impl MyShow for usize { }\n-fn constrain<'a>(rc: RefCell<&'a (MyShow + 'a)>) { }\n+fn constrain<'a>(rc: RefCell<&'a (dyn MyShow + 'a)>) { }\n \n fn main() {\n     let mut collection: Wrap<_> = WrapNone;"}, {"sha": "a1001673506f0660c7991ce3b3f6ab4dc32c22f5", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-blanket-fn-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-blanket-fn-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-blanket-fn-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-blanket-fn-mut.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -8,7 +8,7 @@ fn a<F:FnMut() -> i32>(mut f: F) -> i32 {\n     f()\n }\n \n-fn b(f: &mut FnMut() -> i32) -> i32 {\n+fn b(f: &mut dyn FnMut() -> i32) -> i32 {\n     a(f)\n }\n "}, {"sha": "ca1d31ca54470a0193667e12451c24f92237d677", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-blanket-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-blanket-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-blanket-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-blanket-fn.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -8,7 +8,7 @@ fn a<F:Fn() -> i32>(f: F) -> i32 {\n     f()\n }\n \n-fn b(f: &Fn() -> i32) -> i32 {\n+fn b(f: &dyn Fn() -> i32) -> i32 {\n     a(f)\n }\n "}, {"sha": "b2596e49aa78eecc8ea2e91f8a93e3e6d8a12aab", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-boxed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-boxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-boxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-boxed.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -3,9 +3,9 @@\n \n use std::ops::FnMut;\n \n- fn make_adder(x: i32) -> Box<FnMut(i32)->i32+'static> {\n+ fn make_adder(x: i32) -> Box<dyn FnMut(i32)->i32+'static> {\n     (box move |y: i32| -> i32 { x + y }) as\n-        Box<FnMut(i32)->i32+'static>\n+        Box<dyn FnMut(i32)->i32+'static>\n }\n \n pub fn main() {"}, {"sha": "d47ceea0f4f4d9ca2122d17baa7aee32e75c8a42", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-call-sugar-object-autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-call-sugar-object-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-call-sugar-object-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-call-sugar-object-autoderef.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -3,7 +3,7 @@\n \n use std::ops::FnMut;\n \n-fn make_adder(x: isize) -> Box<FnMut(isize)->isize + 'static> {\n+fn make_adder(x: isize) -> Box<dyn FnMut(isize)->isize + 'static> {\n     Box::new(move |y| { x + y })\n }\n "}, {"sha": "f77733d106d4f4d6f0e1603140dcb45659f75431", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-call-sugar-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-call-sugar-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-call-sugar-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-call-sugar-object.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n use std::ops::FnMut;\n \n-fn make_adder(x: isize) -> Box<FnMut(isize)->isize + 'static> {\n+fn make_adder(x: isize) -> Box<dyn FnMut(isize)->isize + 'static> {\n     Box::new(move |y| { x + y })\n }\n "}, {"sha": "3ee1aeb109b18b5ebd953a91a7e51c1e4b684d08", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-extern-fn-hr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-extern-fn-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-extern-fn-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-extern-fn-hr.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -7,7 +7,7 @@ fn call_it<F:Fn(&isize)->isize>(f: &F, x: isize) -> isize {\n     (*f)(&x)\n }\n \n-fn call_it_boxed(f: &Fn(&isize) -> isize, x: isize) -> isize {\n+fn call_it_boxed(f: &dyn Fn(&isize) -> isize, x: isize) -> isize {\n     f(&x)\n }\n "}, {"sha": "d2eaee304104ae7d230f131e918c709062f722aa", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-infer-arg-types-from-expected-object-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-infer-arg-types-from-expected-object-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-infer-arg-types-from-expected-object-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-infer-arg-types-from-expected-object-type.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -12,7 +12,7 @@ impl ToPrimitive for isize {}\n impl ToPrimitive for i32 {}\n impl ToPrimitive for usize {}\n \n-fn doit<T>(val: T, f: &Fn(T)) { f(val) }\n+fn doit<T>(val: T, f: &dyn Fn(T)) { f(val) }\n \n pub fn main() {\n     doit(0, &|x /*: isize*/ | { x.to_int(); });"}, {"sha": "86834f49407fc74ad8f1d5ce1b76a8ee5a485a22", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-infer-recursive-fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-infer-recursive-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-infer-recursive-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-infer-recursive-fn.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -20,23 +20,23 @@ impl<F,A,R> YCombinator<F,A,R> {\n     }\n }\n \n-impl<A,R,F : Fn(&Fn(A) -> R, A) -> R> Fn<(A,)> for YCombinator<F,A,R> {\n+impl<A,R,F : Fn(&dyn Fn(A) -> R, A) -> R> Fn<(A,)> for YCombinator<F,A,R> {\n     extern \"rust-call\" fn call(&self, (arg,): (A,)) -> R {\n         (self.func)(self, arg)\n     }\n }\n \n-impl<A,R,F : Fn(&Fn(A) -> R, A) -> R> FnMut<(A,)> for YCombinator<F,A,R> {\n+impl<A,R,F : Fn(&dyn Fn(A) -> R, A) -> R> FnMut<(A,)> for YCombinator<F,A,R> {\n     extern \"rust-call\" fn call_mut(&mut self, args: (A,)) -> R { self.call(args) }\n }\n \n-impl<A,R,F : Fn(&Fn(A) -> R, A) -> R> FnOnce<(A,)> for YCombinator<F,A,R> {\n+impl<A,R,F : Fn(&dyn Fn(A) -> R, A) -> R> FnOnce<(A,)> for YCombinator<F,A,R> {\n     type Output = R;\n     extern \"rust-call\" fn call_once(self, args: (A,)) -> R { self.call(args) }\n }\n \n fn main() {\n-    let factorial = |recur: &Fn(u32) -> u32, arg: u32| -> u32 {\n+    let factorial = |recur: &dyn Fn(u32) -> u32, arg: u32| -> u32 {\n         if arg == 0 {1} else {arg * recur(arg-1)}\n     };\n     let factorial: YCombinator<_,u32,u32> = YCombinator::new(factorial);"}, {"sha": "df60b42ab126a550d9215df3b27ef924f62e605b", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-manual-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-manual-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-manual-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-manual-impl.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -19,7 +19,7 @@ fn call_it<F:FnMut(i32)->i32>(mut f: F, x: i32) -> i32 {\n     f(x) + 3\n }\n \n-fn call_box(f: &mut FnMut(i32) -> i32, x: i32) -> i32 {\n+fn call_box(f: &mut dyn FnMut(i32) -> i32, x: i32) -> i32 {\n     f(x) + 3\n }\n "}, {"sha": "2df360d4a30a4bcbcad40609e9cd4f161e81dd6f", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-monomorphization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-monomorphization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-monomorphization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-monomorphization.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -3,7 +3,7 @@\n // monomorphize correctly (issue #16791)\n \n fn main(){\n-    fn bar<'a, T:Clone+'a> (t: T) -> Box<FnMut()->T + 'a> {\n+    fn bar<'a, T:Clone+'a> (t: T) -> Box<dyn FnMut()->T + 'a> {\n         Box::new(move || t.clone())\n     }\n "}, {"sha": "89a273b7a43ff26e57c09af4559a1320081b13cf", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-prelude.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-prelude.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -4,10 +4,10 @@\n // pretty-expanded FIXME #23616\n \n fn main() {\n-    let task: Box<Fn(isize) -> isize> = Box::new(|x| x);\n+    let task: Box<dyn Fn(isize) -> isize> = Box::new(|x| x);\n     task(0);\n \n-    let mut task: Box<FnMut(isize) -> isize> = Box::new(|x| x);\n+    let mut task: Box<dyn FnMut(isize) -> isize> = Box::new(|x| x);\n     task(0);\n \n     call(|x| x, 22);"}, {"sha": "1ca25517c3c5fc9e2fff8b8a5a6d4008e8ad646d", "filename": "src/test/run-pass/unboxed-closures/unboxed-closures-sugar-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-sugar-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-sugar-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures%2Funboxed-closures-sugar-object.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -19,7 +19,7 @@ impl<X> Getter<X,X> for Identity {\n }\n \n fn main() {\n-    let x: &Getter<(i32,), (i32,)> = &Identity;\n+    let x: &dyn Getter<(i32,), (i32,)> = &Identity;\n     let (y,) = x.get((22,));\n     assert_eq!(y, 22);\n }"}, {"sha": "84e8cdb32b84e588a03ed474451900fa53f1acb3", "filename": "src/test/run-pass/unique/unique-object-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funique%2Funique-object-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funique%2Funique-object-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique%2Funique-object-move.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -15,6 +15,6 @@ pub struct UvEventLoop {\n impl EventLoop for UvEventLoop { }\n \n pub fn main() {\n-    let loop_: Box<EventLoop> = box UvEventLoop { uvio: 0 } as Box<EventLoop>;\n+    let loop_: Box<dyn EventLoop> = box UvEventLoop { uvio: 0 } as Box<dyn EventLoop>;\n     let _loop2_ = loop_;\n }"}, {"sha": "c9a8b2e7c664b6e80784f4a753d731beb6010cbe", "filename": "src/test/run-pass/unsized2.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funsized2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Funsized2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized2.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -60,26 +60,26 @@ fn f7<X: ?Sized+T3>(x: &X) {\n \n trait T4<X> {\n     fn dummy(&self) { }\n-    fn m1(&self, x: &T4<X>, y: X);\n-    fn m2(&self, x: &T5<X>, y: X);\n+    fn m1(&self, x: &dyn T4<X>, y: X);\n+    fn m2(&self, x: &dyn T5<X>, y: X);\n }\n trait T5<X: ?Sized> {\n     fn dummy(&self) { }\n     // not an error (for now)\n-    fn m1(&self, x: &T4<X>);\n-    fn m2(&self, x: &T5<X>);\n+    fn m1(&self, x: &dyn T4<X>);\n+    fn m2(&self, x: &dyn T5<X>);\n }\n \n trait T6<X: T> {\n     fn dummy(&self) { }\n-    fn m1(&self, x: &T4<X>);\n-    fn m2(&self, x: &T5<X>);\n+    fn m1(&self, x: &dyn T4<X>);\n+    fn m2(&self, x: &dyn T5<X>);\n }\n trait T7<X: ?Sized+T> {\n     fn dummy(&self) { }\n     // not an error (for now)\n-    fn m1(&self, x: &T4<X>);\n-    fn m2(&self, x: &T5<X>);\n+    fn m1(&self, x: &dyn T4<X>);\n+    fn m2(&self, x: &dyn T5<X>);\n }\n \n // The last field in a struct may be unsized"}, {"sha": "6814e2baab59730eb6f79ec65c4fdb9be363af1d", "filename": "src/test/run-pass/wf-bound-region-in-object-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fwf-bound-region-in-object-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19f4545b1674e6d16b9ec81a2358d615bb6a786/src%2Ftest%2Frun-pass%2Fwf-bound-region-in-object-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwf-bound-region-in-object-type.rs?ref=f19f4545b1674e6d16b9ec81a2358d615bb6a786", "patch": "@@ -12,7 +12,7 @@ pub struct Context<'tcx> {\n pub type Cmd<'a> = &'a isize;\n \n pub type DecodeInlinedItem<'a> =\n-    Box<for<'tcx> FnMut(Cmd, &Context<'tcx>) -> Result<&'tcx isize, ()> + 'a>;\n+    Box<dyn for<'tcx> FnMut(Cmd, &Context<'tcx>) -> Result<&'tcx isize, ()> + 'a>;\n \n fn foo(d: DecodeInlinedItem) {\n }"}]}