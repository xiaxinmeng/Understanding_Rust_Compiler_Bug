{"sha": "2120c913c28896ed8e6247906f8884939c268683", "node_id": "C_kwDOAAsO6NoAKDIxMjBjOTEzYzI4ODk2ZWQ4ZTYyNDc5MDZmODg4NDkzOWMyNjg2ODM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-22T19:53:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-22T19:53:39Z"}, "message": "Auto merge of #14872 - lowr:fix/ref-pat-with-type-var, r=HKalbasi\n\nfix: introduce new type var when expectation for ref pat is not ref\n\nFixes #14840\n\nWhen we infer the type of ref patterns, its expected type may not be reference type: 1) expected type is an unresolved inference variable, or 2) expected type is erroneously other kind of type. In either case, we should produce a reference type with a new type variable rather than an error type so that we can continue inferring the inner patterns without further errors because of the (possible) type mismatch of this pattern.", "tree": {"sha": "79bfe1b0813ba0c40ed60d51efbf36f3b1667a5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79bfe1b0813ba0c40ed60d51efbf36f3b1667a5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2120c913c28896ed8e6247906f8884939c268683", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2120c913c28896ed8e6247906f8884939c268683", "html_url": "https://github.com/rust-lang/rust/commit/2120c913c28896ed8e6247906f8884939c268683", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2120c913c28896ed8e6247906f8884939c268683/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ac161ce77dfa31dc39337c2543a1d777e70c16e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac161ce77dfa31dc39337c2543a1d777e70c16e", "html_url": "https://github.com/rust-lang/rust/commit/7ac161ce77dfa31dc39337c2543a1d777e70c16e"}, {"sha": "01f42d240570fd933fb6407a7b010dbab53563ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/01f42d240570fd933fb6407a7b010dbab53563ff", "html_url": "https://github.com/rust-lang/rust/commit/01f42d240570fd933fb6407a7b010dbab53563ff"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "0c2b179a10d6993a17b87a54f68902c8a55cfbb0", "filename": "crates/hir-ty/src/infer/pat.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2120c913c28896ed8e6247906f8884939c268683/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2120c913c28896ed8e6247906f8884939c268683/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs?ref=2120c913c28896ed8e6247906f8884939c268683", "patch": "@@ -313,16 +313,23 @@ impl<'a> InferenceContext<'a> {\n \n     fn infer_ref_pat(\n         &mut self,\n-        pat: PatId,\n+        inner_pat: PatId,\n         mutability: Mutability,\n         expected: &Ty,\n         default_bm: BindingMode,\n     ) -> Ty {\n         let expectation = match expected.as_reference() {\n             Some((inner_ty, _lifetime, _exp_mut)) => inner_ty.clone(),\n-            _ => self.result.standard_types.unknown.clone(),\n+            None => {\n+                let inner_ty = self.table.new_type_var();\n+                let ref_ty =\n+                    TyKind::Ref(mutability, static_lifetime(), inner_ty.clone()).intern(Interner);\n+                // Unification failure will be reported by the caller.\n+                self.unify(&ref_ty, expected);\n+                inner_ty\n+            }\n         };\n-        let subty = self.infer_pat(pat, &expectation, default_bm);\n+        let subty = self.infer_pat(inner_pat, &expectation, default_bm);\n         TyKind::Ref(mutability, static_lifetime(), subty).intern(Interner)\n     }\n "}, {"sha": "b73f0d72a3f911d5630f7951f17b81392b6dfdcd", "filename": "crates/hir-ty/src/tests/patterns.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2120c913c28896ed8e6247906f8884939c268683/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2120c913c28896ed8e6247906f8884939c268683/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=2120c913c28896ed8e6247906f8884939c268683", "patch": "@@ -1,6 +1,6 @@\n use expect_test::expect;\n \n-use super::{check, check_infer, check_infer_with_mismatches, check_types};\n+use super::{check, check_infer, check_infer_with_mismatches, check_no_mismatches, check_types};\n \n #[test]\n fn infer_pattern() {\n@@ -240,6 +240,21 @@ fn infer_pattern_match_ergonomics_ref() {\n     );\n }\n \n+#[test]\n+fn ref_pat_with_inference_variable() {\n+    check_no_mismatches(\n+        r#\"\n+enum E { A }\n+fn test() {\n+    let f = |e| match e {\n+        &E::A => {}\n+    };\n+    f(&E::A);\n+}\n+\"#,\n+    );\n+}\n+\n #[test]\n fn infer_pattern_match_slice() {\n     check_infer("}]}