{"sha": "dfd79907b80e1a93b93e99aaf4d7af2a84c1c59f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZDc5OTA3YjgwZTFhOTNiOTNlOTlhYWY0ZDdhZjJhODRjMWM1OWY=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-24T12:20:41Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-24T12:20:41Z"}, "message": "Use a macro in push_res to simplify code, simplify glob_shadowed_def assertion", "tree": {"sha": "9c5689af22a63c318033d7e6c7dee75fe200d851", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c5689af22a63c318033d7e6c7dee75fe200d851"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfd79907b80e1a93b93e99aaf4d7af2a84c1c59f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd79907b80e1a93b93e99aaf4d7af2a84c1c59f", "html_url": "https://github.com/rust-lang/rust/commit/dfd79907b80e1a93b93e99aaf4d7af2a84c1c59f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfd79907b80e1a93b93e99aaf4d7af2a84c1c59f/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38af81f183504145bd3bf6ba5bc40b3e41e04593", "url": "https://api.github.com/repos/rust-lang/rust/commits/38af81f183504145bd3bf6ba5bc40b3e41e04593", "html_url": "https://github.com/rust-lang/rust/commit/38af81f183504145bd3bf6ba5bc40b3e41e04593"}], "stats": {"total": 207, "additions": 47, "deletions": 160}, "files": [{"sha": "c81b966c398dd94c78b3e549d3dbd60d95defce6", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 19, "deletions": 33, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/dfd79907b80e1a93b93e99aaf4d7af2a84c1c59f/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd79907b80e1a93b93e99aaf4d7af2a84c1c59f/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=dfd79907b80e1a93b93e99aaf4d7af2a84c1c59f", "patch": "@@ -5,6 +5,7 @@ use hir_expand::name::Name;\n use once_cell::sync::Lazy;\n use ra_db::CrateId;\n use rustc_hash::FxHashMap;\n+use test_utils::mark;\n \n use crate::{\n     db::DefDatabase, per_ns::PerNs, visibility::Visibility, AdtId, BuiltinType, HasModule, ImplId,\n@@ -126,41 +127,26 @@ impl ItemScope {\n         let mut changed = false;\n         let existing = self.visible.entry(name).or_default();\n \n-        match (existing.types, def.types) {\n-            (None, Some(_)) => {\n-                existing.types = def.types;\n-                changed = true;\n-            }\n-            (Some(e), Some(d)) if e.0 != d.0 => {\n-                existing.types = def.types;\n-                changed = true;\n-            }\n-            _ => {}\n-        }\n-\n-        match (existing.values, def.values) {\n-            (None, Some(_)) => {\n-                existing.values = def.values;\n-                changed = true;\n-            }\n-            (Some(e), Some(d)) if e.0 != d.0 => {\n-                existing.values = def.values;\n-                changed = true;\n-            }\n-            _ => {}\n+        macro_rules! check_changed {\n+            ($changed:ident, $existing:expr, $def:expr) => {\n+                match ($existing, $def) {\n+                    (None, Some(_)) => {\n+                        $existing = $def;\n+                        $changed = true;\n+                    }\n+                    (Some(e), Some(d)) if e.0 != d.0 => {\n+                        mark::hit!(import_shadowed);\n+                        $existing = $def;\n+                        $changed = true;\n+                    }\n+                    _ => {}\n+                }\n+            };\n         }\n \n-        match (existing.macros, def.macros) {\n-            (None, Some(_)) => {\n-                existing.macros = def.macros;\n-                changed = true;\n-            }\n-            (Some(e), Some(d)) if e.0 != d.0 => {\n-                existing.macros = def.macros;\n-                changed = true;\n-            }\n-            _ => {}\n-        }\n+        check_changed!(changed, existing.types, def.types);\n+        check_changed!(changed, existing.values, def.values);\n+        check_changed!(changed, existing.macros, def.macros);\n \n         changed\n     }"}, {"sha": "f117b03620ad2d0f2f84a162f05a612ab4a9ad26", "filename": "crates/ra_hir_def/src/nameres/tests/globs.rs", "status": "modified", "additions": 28, "deletions": 127, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/dfd79907b80e1a93b93e99aaf4d7af2a84c1c59f/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd79907b80e1a93b93e99aaf4d7af2a84c1c59f/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs?ref=dfd79907b80e1a93b93e99aaf4d7af2a84c1c59f", "patch": "@@ -232,146 +232,47 @@ fn glob_enum_group() {\n \n #[test]\n fn glob_shadowed_def() {\n-    let db = TestDB::with_files(\n+    mark::check!(import_shadowed);\n+    let map = def_map(\n         r###\"\n         //- /lib.rs\n         mod foo;\n         mod bar;\n \n         use foo::*;\n-        use bar::Baz;\n+        use bar::baz;\n+\n+        use baz::Bar;\n \n         //- /foo.rs\n-        pub struct Baz;\n+        pub mod baz {\n+            pub struct Foo;\n+        }\n \n         //- /bar.rs\n-        pub struct Baz;\n+        pub mod baz {\n+            pub struct Bar;\n+        }\n         \"###,\n     );\n-    let krate = db.test_crate();\n+    assert_snapshot!(map, @r###\"\n+    crate\n+    Bar: t v\n+    bar: t\n+    baz: t\n+    foo: t\n+\n+    crate::bar\n+    baz: t\n+\n+    crate::bar::baz\n+    Bar: t v\n+\n+    crate::foo\n+    baz: t\n \n-    let crate_def_map = db.crate_def_map(krate);\n-    let (_, root_module) = crate_def_map\n-        .modules\n-        .iter()\n-        .find(|(_, module_data)| module_data.parent.is_none())\n-        .expect(\"Root module not found\");\n-    let visible_entries = root_module.scope.entries().collect::<Vec<_>>();\n-    insta::assert_debug_snapshot!(\n-        visible_entries,\n-        @r###\"\n-    [\n-        (\n-            Name(\n-                Text(\n-                    \"Baz\",\n-                ),\n-            ),\n-            PerNs {\n-                types: Some(\n-                    (\n-                        AdtId(\n-                            StructId(\n-                                StructId(\n-                                    1,\n-                                ),\n-                            ),\n-                        ),\n-                        Module(\n-                            ModuleId {\n-                                krate: CrateId(\n-                                    0,\n-                                ),\n-                                local_id: Idx::<ModuleData>(0),\n-                            },\n-                        ),\n-                    ),\n-                ),\n-                values: Some(\n-                    (\n-                        AdtId(\n-                            StructId(\n-                                StructId(\n-                                    1,\n-                                ),\n-                            ),\n-                        ),\n-                        Module(\n-                            ModuleId {\n-                                krate: CrateId(\n-                                    0,\n-                                ),\n-                                local_id: Idx::<ModuleData>(0),\n-                            },\n-                        ),\n-                    ),\n-                ),\n-                macros: None,\n-            },\n-        ),\n-        (\n-            Name(\n-                Text(\n-                    \"bar\",\n-                ),\n-            ),\n-            PerNs {\n-                types: Some(\n-                    (\n-                        ModuleId(\n-                            ModuleId {\n-                                krate: CrateId(\n-                                    0,\n-                                ),\n-                                local_id: Idx::<ModuleData>(2),\n-                            },\n-                        ),\n-                        Module(\n-                            ModuleId {\n-                                krate: CrateId(\n-                                    0,\n-                                ),\n-                                local_id: Idx::<ModuleData>(0),\n-                            },\n-                        ),\n-                    ),\n-                ),\n-                values: None,\n-                macros: None,\n-            },\n-        ),\n-        (\n-            Name(\n-                Text(\n-                    \"foo\",\n-                ),\n-            ),\n-            PerNs {\n-                types: Some(\n-                    (\n-                        ModuleId(\n-                            ModuleId {\n-                                krate: CrateId(\n-                                    0,\n-                                ),\n-                                local_id: Idx::<ModuleData>(1),\n-                            },\n-                        ),\n-                        Module(\n-                            ModuleId {\n-                                krate: CrateId(\n-                                    0,\n-                                ),\n-                                local_id: Idx::<ModuleData>(0),\n-                            },\n-                        ),\n-                    ),\n-                ),\n-                values: None,\n-                macros: None,\n-            },\n-        ),\n-    ]\n+    crate::foo::baz\n+    Foo: t v\n     \"###\n     );\n }"}]}