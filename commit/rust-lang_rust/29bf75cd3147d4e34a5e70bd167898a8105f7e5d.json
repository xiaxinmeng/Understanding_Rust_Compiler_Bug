{"sha": "29bf75cd3147d4e34a5e70bd167898a8105f7e5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YmY3NWNkMzE0N2Q0ZTM0YTVlNzBiZDE2Nzg5OGE4MTA1ZjdlNWQ=", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2018-12-05T12:34:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-05T12:34:20Z"}, "message": "Merge pull request #3495 from flip1995/tykind_fix\n\nFix usage of ty::TyKind", "tree": {"sha": "1b022e1ee9b13617d3b0bd87f1be2c998ab87aa5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b022e1ee9b13617d3b0bd87f1be2c998ab87aa5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29bf75cd3147d4e34a5e70bd167898a8105f7e5d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcB8XMCRBK7hj4Ov3rIwAAdHIIAARjGM0YEb6Jsqpf/gaiR4/1\nc92ijnoJg7YlnNQSdhWQXlXrDcqBEGmHbyXRGxyR3M7T3N7gXBgwxp8mjI/G03xw\nCipQiXn4yVXLw3aVkBvcwFg7J+GRe3ndBtJx+mQQBj8T/pEpihtYWm8v4UGsbj7R\nnVNoXl30I/jH1tUcnjkUTYVrgev3uvvdKpmLbF/OFklw/3Ua9ZTyd+RsYe5Uuu+A\nT0dvziRJXTExPj5iqeQolv9QBDu8DLEAns7EP6onHGx39UVuBX6AS6LbfrdFRgxa\niqL+RzAgs1NUznxXgYTcZkBELReeBATCOGRwtxdl1YN/0XUtZputNWtlID7awWU=\n=hRKF\n-----END PGP SIGNATURE-----\n", "payload": "tree 1b022e1ee9b13617d3b0bd87f1be2c998ab87aa5\nparent 3f24cdf10f4b0f7a20c28873afcbe9544caede6f\nparent 36ee92780df09e77aaf4db5899c1af94bd49d3c3\nauthor Philipp Krones <hello@philkrones.com> 1544013260 +0100\ncommitter GitHub <noreply@github.com> 1544013260 +0100\n\nMerge pull request #3495 from flip1995/tykind_fix\n\nFix usage of ty::TyKind"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29bf75cd3147d4e34a5e70bd167898a8105f7e5d", "html_url": "https://github.com/rust-lang/rust/commit/29bf75cd3147d4e34a5e70bd167898a8105f7e5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29bf75cd3147d4e34a5e70bd167898a8105f7e5d/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f24cdf10f4b0f7a20c28873afcbe9544caede6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f24cdf10f4b0f7a20c28873afcbe9544caede6f", "html_url": "https://github.com/rust-lang/rust/commit/3f24cdf10f4b0f7a20c28873afcbe9544caede6f"}, {"sha": "36ee92780df09e77aaf4db5899c1af94bd49d3c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/36ee92780df09e77aaf4db5899c1af94bd49d3c3", "html_url": "https://github.com/rust-lang/rust/commit/36ee92780df09e77aaf4db5899c1af94bd49d3c3"}], "stats": {"total": 43, "additions": 19, "deletions": 24}, "files": [{"sha": "761630da376d92783b5dac33fe947d3d002a8027", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/29bf75cd3147d4e34a5e70bd167898a8105f7e5d/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bf75cd3147d4e34a5e70bd167898a8105f7e5d/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=29bf75cd3147d4e34a5e70bd167898a8105f7e5d", "patch": "@@ -119,17 +119,12 @@ impl Hash for Constant {\n }\n \n impl Constant {\n-    pub fn partial_cmp(\n-        tcx: TyCtxt<'_, '_, '_>,\n-        cmp_type: &ty::TyKind<'_>,\n-        left: &Self,\n-        right: &Self,\n-    ) -> Option<Ordering> {\n+    pub fn partial_cmp(tcx: TyCtxt<'_, '_, '_>, cmp_type: ty::Ty<'_>, left: &Self, right: &Self) -> Option<Ordering> {\n         match (left, right) {\n             (&Constant::Str(ref ls), &Constant::Str(ref rs)) => Some(ls.cmp(rs)),\n             (&Constant::Char(ref l), &Constant::Char(ref r)) => Some(l.cmp(r)),\n             (&Constant::Int(l), &Constant::Int(r)) => {\n-                if let ty::Int(int_ty) = *cmp_type {\n+                if let ty::Int(int_ty) = cmp_type.sty {\n                     Some(sext(tcx, l, int_ty).cmp(&sext(tcx, r, int_ty)))\n                 } else {\n                     Some(l.cmp(&r))"}, {"sha": "134950b267f6065786a2a76ee6f1f24ec66d3a11", "filename": "clippy_lints/src/default_trait_access.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29bf75cd3147d4e34a5e70bd167898a8105f7e5d/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bf75cd3147d4e34a5e70bd167898a8105f7e5d/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=29bf75cd3147d4e34a5e70bd167898a8105f7e5d", "patch": "@@ -9,7 +9,7 @@\n \n use crate::rustc::hir::*;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty::TyKind;\n+use crate::rustc::ty;\n use crate::rustc::{declare_tool_lint, lint_array};\n use crate::rustc_errors::Applicability;\n use if_chain::if_chain;\n@@ -71,7 +71,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DefaultTraitAccess {\n                         // TODO: Work out a way to put \"whatever the imported way of referencing\n                         // this type in this file\" rather than a fully-qualified type.\n                         let expr_ty = cx.tables.expr_ty(expr);\n-                        if let TyKind::Adt(..) = expr_ty.sty {\n+                        if let ty::Adt(..) = expr_ty.sty {\n                             let replacement = format!(\"{}::default()\", expr_ty);\n                             span_lint_and_sugg(\n                                 cx,"}, {"sha": "ff678925d8f3a7ec08887bfdde296c3c429a3409", "filename": "clippy_lints/src/excessive_precision.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29bf75cd3147d4e34a5e70bd167898a8105f7e5d/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bf75cd3147d4e34a5e70bd167898a8105f7e5d/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_precision.rs?ref=29bf75cd3147d4e34a5e70bd167898a8105f7e5d", "patch": "@@ -9,7 +9,7 @@\n \n use crate::rustc::hir;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty::TyKind;\n+use crate::rustc::ty;\n use crate::rustc::{declare_tool_lint, lint_array};\n use crate::rustc_errors::Applicability;\n use crate::syntax::ast::*;\n@@ -56,7 +56,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExcessivePrecision {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n         if_chain! {\n             let ty = cx.tables.expr_ty(expr);\n-            if let TyKind::Float(fty) = ty.sty;\n+            if let ty::Float(fty) = ty.sty;\n             if let hir::ExprKind::Lit(ref lit) = expr.node;\n             if let LitKind::Float(sym, _) | LitKind::FloatUnsuffixed(sym) = lit.node;\n             if let Some(sugg) = self.check(sym, fty);"}, {"sha": "67c3fee464aeaaf470f2553d50115d7e8692ca34", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29bf75cd3147d4e34a5e70bd167898a8105f7e5d/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bf75cd3147d4e34a5e70bd167898a8105f7e5d/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=29bf75cd3147d4e34a5e70bd167898a8105f7e5d", "patch": "@@ -1252,7 +1252,7 @@ fn is_end_eq_array_len(cx: &LateContext<'_, '_>, end: &Expr, limits: ast::RangeL\n     if_chain! {\n         if let ExprKind::Lit(ref lit) = end.node;\n         if let ast::LitKind::Int(end_int, _) = lit.node;\n-        if let ty::TyKind::Array(_, arr_len_const) = indexed_ty.sty;\n+        if let ty::Array(_, arr_len_const) = indexed_ty.sty;\n         if let Some(arr_len) = arr_len_const.assert_usize(cx.tcx);\n         then {\n             return match limits {\n@@ -1375,7 +1375,7 @@ fn check_for_loop_arg(cx: &LateContext<'_, '_>, pat: &Pat, arg: &Expr, expr: &Ex\n                     match cx.tables.expr_ty(&args[0]).sty {\n                         // If the length is greater than 32 no traits are implemented for array and\n                         // therefore we cannot use `&`.\n-                        ty::TyKind::Array(_, size) if size.assert_usize(cx.tcx).expect(\"array size\") > 32 => (),\n+                        ty::Array(_, size) if size.assert_usize(cx.tcx).expect(\"array size\") > 32 => (),\n                         _ => lint_iter_method(cx, args, arg, method_name),\n                     };\n                 } else {"}, {"sha": "648f1ec501e435c3d5c086f7a0bb49499fcc737f", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29bf75cd3147d4e34a5e70bd167898a8105f7e5d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bf75cd3147d4e34a5e70bd167898a8105f7e5d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=29bf75cd3147d4e34a5e70bd167898a8105f7e5d", "patch": "@@ -10,7 +10,7 @@\n use crate::rustc::hir;\n use crate::rustc::hir::def::Def;\n use crate::rustc::lint::{in_external_macro, LateContext, LateLintPass, Lint, LintArray, LintContext, LintPass};\n-use crate::rustc::ty::{self, Predicate, Ty, TyKind};\n+use crate::rustc::ty::{self, Predicate, Ty};\n use crate::rustc::{declare_tool_lint, lint_array};\n use crate::rustc_errors::Applicability;\n use crate::syntax::ast;\n@@ -978,7 +978,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             }\n \n             // if return type is impl trait, check the associated types\n-            if let TyKind::Opaque(def_id, _) = ret_ty.sty {\n+            if let ty::Opaque(def_id, _) = ret_ty.sty {\n                 // one of the associated types must be Self\n                 for predicate in &cx.tcx.predicates_of(def_id).predicates {\n                     match predicate {\n@@ -2204,7 +2204,7 @@ fn ty_has_iter_method(\n     ];\n \n     let (self_ty, mutbl) = match self_ref_ty.sty {\n-        ty::TyKind::Ref(_, self_ty, mutbl) => (self_ty, mutbl),\n+        ty::Ref(_, self_ty, mutbl) => (self_ty, mutbl),\n         _ => unreachable!(),\n     };\n     let method_name = match mutbl {\n@@ -2213,8 +2213,8 @@ fn ty_has_iter_method(\n     };\n \n     let def_id = match self_ty.sty {\n-        ty::TyKind::Array(..) => return Some((INTO_ITER_ON_ARRAY, \"array\", method_name)),\n-        ty::TyKind::Slice(..) => return Some((INTO_ITER_ON_REF, \"slice\", method_name)),\n+        ty::Array(..) => return Some((INTO_ITER_ON_ARRAY, \"array\", method_name)),\n+        ty::Slice(..) => return Some((INTO_ITER_ON_REF, \"slice\", method_name)),\n         ty::Adt(adt, _) => adt.did,\n         _ => return None,\n     };"}, {"sha": "dd3aa85e60080d60f6fdaf07c34df3753a6e8710", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bf75cd3147d4e34a5e70bd167898a8105f7e5d/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bf75cd3147d4e34a5e70bd167898a8105f7e5d/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=29bf75cd3147d4e34a5e70bd167898a8105f7e5d", "patch": "@@ -51,7 +51,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MinMaxPass {\n                 }\n                 match (\n                     outer_max,\n-                    Constant::partial_cmp(cx.tcx, &cx.tables.expr_ty(ie).sty, &outer_c, &inner_c),\n+                    Constant::partial_cmp(cx.tcx, cx.tables.expr_ty(ie), &outer_c, &inner_c),\n                 ) {\n                     (_, None) | (MinMax::Max, Some(Ordering::Less)) | (MinMax::Min, Some(Ordering::Greater)) => (),\n                     _ => {"}, {"sha": "f1b31a3e0a778c70dff6701052917d587990a9bf", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29bf75cd3147d4e34a5e70bd167898a8105f7e5d/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bf75cd3147d4e34a5e70bd167898a8105f7e5d/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=29bf75cd3147d4e34a5e70bd167898a8105f7e5d", "patch": "@@ -219,7 +219,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n                     // Dereference suggestion\n                     let sugg = |db: &mut DiagnosticBuilder<'_>| {\n-                        if let ty::TyKind::Adt(def, ..) = ty.sty {\n+                        if let ty::Adt(def, ..) = ty.sty {\n                             if let Some(span) = cx.tcx.hir.span_if_local(def.did) {\n                                 if cx.param_env.can_type_implement_copy(cx.tcx, ty).is_ok() {\n                                     db.span_help(span, \"consider marking this type as Copy\");"}, {"sha": "070d591fcf0c180cd4cd49d436c152bf4e81d4c2", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29bf75cd3147d4e34a5e70bd167898a8105f7e5d/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bf75cd3147d4e34a5e70bd167898a8105f7e5d/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=29bf75cd3147d4e34a5e70bd167898a8105f7e5d", "patch": "@@ -14,7 +14,7 @@ use crate::rustc::hir::intravisit::FnKind;\n use crate::rustc::hir::*;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::session::config::Config as SessionConfig;\n-use crate::rustc::ty::{FnSig, TyKind};\n+use crate::rustc::ty::{self, FnSig};\n use crate::rustc::{declare_tool_lint, lint_array};\n use crate::rustc_errors::Applicability;\n use crate::rustc_target::abi::LayoutOf;\n@@ -99,8 +99,8 @@ impl<'a, 'tcx> TriviallyCopyPassByRef {\n         // argument. In that case we can't switch to pass-by-value as the\n         // argument will not live long enough.\n         let output_lts = match sig.output().sty {\n-            TyKind::Ref(output_lt, _, _) => vec![output_lt],\n-            TyKind::Adt(_, substs) => substs.regions().collect(),\n+            ty::Ref(output_lt, _, _) => vec![output_lt],\n+            ty::Adt(_, substs) => substs.regions().collect(),\n             _ => vec![],\n         };\n \n@@ -112,7 +112,7 @@ impl<'a, 'tcx> TriviallyCopyPassByRef {\n             }\n \n             if_chain! {\n-                if let TyKind::Ref(input_lt, ty, Mutability::MutImmutable) = ty.sty;\n+                if let ty::Ref(input_lt, ty, Mutability::MutImmutable) = ty.sty;\n                 if !output_lts.contains(&input_lt);\n                 if is_copy(cx, ty);\n                 if let Some(size) = cx.layout_of(ty).ok().map(|l| l.size.bytes());"}]}