{"sha": "0e9f6ecd0e38b22373e4ba1095a571cd635822bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlOWY2ZWNkMGUzOGIyMjM3M2U0YmExMDk1YTU3MWNkNjM1ODIyYmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-28T02:29:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-28T02:29:14Z"}, "message": "Auto merge of #30579 - dotdash:30478, r=arielb1\n\n`auto_ref()` currently returns an Rvalue datum for the ref'd value,\nwhich is fine for thin pointers, but for fat pointers this means that\nonce the pointer is moved out of that datum, its memory will be marked\nas dead. And because there is not necessarily an intermediate temporary\ninvolved we can end up marking memory as dead that is actually still\nused.\n\nAs I don't want to break the micro-optimization for thin pointers by\nalways returning an Lvalue datum, I decided to only do so for fat\npointers.\n\nFix #30478", "tree": {"sha": "2b0af6f8224bd18535e4937b8d35c1dbbcbc9cef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b0af6f8224bd18535e4937b8d35c1dbbcbc9cef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e9f6ecd0e38b22373e4ba1095a571cd635822bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e9f6ecd0e38b22373e4ba1095a571cd635822bc", "html_url": "https://github.com/rust-lang/rust/commit/0e9f6ecd0e38b22373e4ba1095a571cd635822bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e9f6ecd0e38b22373e4ba1095a571cd635822bc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4707ebca321e9ea9e73a3b061b2213c2a9bdf14", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4707ebca321e9ea9e73a3b061b2213c2a9bdf14", "html_url": "https://github.com/rust-lang/rust/commit/b4707ebca321e9ea9e73a3b061b2213c2a9bdf14"}, {"sha": "575f690b39559160e31930726b5629dfbd3526fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/575f690b39559160e31930726b5629dfbd3526fa", "html_url": "https://github.com/rust-lang/rust/commit/575f690b39559160e31930726b5629dfbd3526fa"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "85d4876d160be491fbe79552d86bad56645a7a3b", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0e9f6ecd0e38b22373e4ba1095a571cd635822bc/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e9f6ecd0e38b22373e4ba1095a571cd635822bc/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=0e9f6ecd0e38b22373e4ba1095a571cd635822bc", "patch": "@@ -2187,15 +2187,19 @@ fn auto_ref<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let referent_ty = lv_datum.ty;\n     let ptr_ty = bcx.tcx().mk_imm_ref(bcx.tcx().mk_region(ty::ReStatic), referent_ty);\n \n+    // Construct the resulting datum. The right datum to return here would be an Lvalue datum,\n+    // because there is cleanup scheduled and the datum doesn't own the data, but for thin pointers\n+    // we microoptimize it to be an Rvalue datum to avoid the extra alloca and level of\n+    // indirection and for thin pointers, this has no ill effects.\n+    let kind  = if type_is_sized(bcx.tcx(), referent_ty) {\n+        RvalueExpr(Rvalue::new(ByValue))\n+    } else {\n+        LvalueExpr(lv_datum.kind)\n+    };\n+\n     // Get the pointer.\n     let llref = lv_datum.to_llref();\n-\n-    // Construct the resulting datum, using what was the \"by ref\"\n-    // ValueRef of type `referent_ty` to be the \"by value\" ValueRef\n-    // of type `&referent_ty`.\n-    // Pointers to DST types are non-immediate, and therefore still use ByRef.\n-    let kind  = if type_is_sized(bcx.tcx(), referent_ty) { ByValue } else { ByRef };\n-    DatumBlock::new(bcx, Datum::new(llref, ptr_ty, RvalueExpr(Rvalue::new(kind))))\n+    DatumBlock::new(bcx, Datum::new(llref, ptr_ty, kind))\n }\n \n fn deref_multiple<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,"}]}