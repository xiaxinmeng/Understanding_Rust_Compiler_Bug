{"sha": "89271352741e54c08c89fe19b6832666a29a932d", "node_id": "C_kwDOAAsO6NoAKDg5MjcxMzUyNzQxZTU0YzA4Yzg5ZmUxOWI2ODMyNjY2YTI5YTkzMmQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-24T18:45:02Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-24T21:50:04Z"}, "message": "Assert that we don't capture escaping bound vars in Fn trait selection", "tree": {"sha": "7043cdf00d52ac7004f2880092672612e919d8e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7043cdf00d52ac7004f2880092672612e919d8e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89271352741e54c08c89fe19b6832666a29a932d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89271352741e54c08c89fe19b6832666a29a932d", "html_url": "https://github.com/rust-lang/rust/commit/89271352741e54c08c89fe19b6832666a29a932d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89271352741e54c08c89fe19b6832666a29a932d/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dfb4b0afaf6acace0845d00e85a934fb4289d83", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dfb4b0afaf6acace0845d00e85a934fb4289d83", "html_url": "https://github.com/rust-lang/rust/commit/5dfb4b0afaf6acace0845d00e85a934fb4289d83"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "8f473ebb452cefafd794b2cc87f6e5379eac708c", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/89271352741e54c08c89fe19b6832666a29a932d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89271352741e54c08c89fe19b6832666a29a932d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=89271352741e54c08c89fe19b6832666a29a932d", "patch": "@@ -693,16 +693,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let gen_sig = substs.as_generator().poly_sig();\n \n-        // (1) Feels icky to skip the binder here, but OTOH we know\n-        // that the self-type is an generator type and hence is\n+        // NOTE: The self-type is a generator type and hence is\n         // in fact unparameterized (or at least does not reference any\n-        // regions bound in the obligation). Still probably some\n-        // refactoring could make this nicer.\n+        // regions bound in the obligation).\n+        let self_ty = obligation\n+            .predicate\n+            .self_ty()\n+            .no_bound_vars()\n+            .expect(\"unboxed closure type should not capture bound vars from the predicate\");\n \n         let trait_ref = super::util::generator_trait_ref_and_outputs(\n             self.tcx(),\n             obligation.predicate.def_id(),\n-            obligation.predicate.skip_binder().self_ty(), // (1)\n+            self_ty,\n             gen_sig,\n         )\n         .map_bound(|(trait_ref, ..)| trait_ref);"}, {"sha": "2a1494e8952a1c1a2c8080da83ff4e34d1960d49", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/89271352741e54c08c89fe19b6832666a29a932d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89271352741e54c08c89fe19b6832666a29a932d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=89271352741e54c08c89fe19b6832666a29a932d", "patch": "@@ -2271,15 +2271,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         debug!(?closure_sig);\n \n-        // (1) Feels icky to skip the binder here, but OTOH we know\n-        // that the self-type is an unboxed closure type and hence is\n+        // NOTE: The self-type is an unboxed closure type and hence is\n         // in fact unparameterized (or at least does not reference any\n-        // regions bound in the obligation). Still probably some\n-        // refactoring could make this nicer.\n+        // regions bound in the obligation).\n+        let self_ty = obligation\n+            .predicate\n+            .self_ty()\n+            .no_bound_vars()\n+            .expect(\"unboxed closure type should not capture bound vars from the predicate\");\n+\n         closure_trait_ref_and_return_type(\n             self.tcx(),\n             obligation.predicate.def_id(),\n-            obligation.predicate.skip_binder().self_ty(), // (1)\n+            self_ty,\n             closure_sig,\n             util::TupleArgumentsFlag::No,\n         )"}, {"sha": "a496cea0b005bfafbbb6b901f466fa6dcb22fd2e", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89271352741e54c08c89fe19b6832666a29a932d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89271352741e54c08c89fe19b6832666a29a932d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=89271352741e54c08c89fe19b6832666a29a932d", "patch": "@@ -298,11 +298,11 @@ pub fn closure_trait_ref_and_return_type<'tcx>(\n     sig: ty::PolyFnSig<'tcx>,\n     tuple_arguments: TupleArgumentsFlag,\n ) -> ty::Binder<'tcx, (ty::TraitRef<'tcx>, Ty<'tcx>)> {\n+    assert!(!self_ty.has_escaping_bound_vars());\n     let arguments_tuple = match tuple_arguments {\n         TupleArgumentsFlag::No => sig.skip_binder().inputs()[0],\n         TupleArgumentsFlag::Yes => tcx.intern_tup(sig.skip_binder().inputs()),\n     };\n-    debug_assert!(!self_ty.has_escaping_bound_vars());\n     let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, [self_ty, arguments_tuple]);\n     sig.map_bound(|sig| (trait_ref, sig.output()))\n }\n@@ -313,7 +313,7 @@ pub fn generator_trait_ref_and_outputs<'tcx>(\n     self_ty: Ty<'tcx>,\n     sig: ty::PolyGenSig<'tcx>,\n ) -> ty::Binder<'tcx, (ty::TraitRef<'tcx>, Ty<'tcx>, Ty<'tcx>)> {\n-    debug_assert!(!self_ty.has_escaping_bound_vars());\n+    assert!(!self_ty.has_escaping_bound_vars());\n     let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, [self_ty, sig.skip_binder().resume_ty]);\n     sig.map_bound(|sig| (trait_ref, sig.yield_ty, sig.return_ty))\n }\n@@ -324,7 +324,7 @@ pub fn future_trait_ref_and_outputs<'tcx>(\n     self_ty: Ty<'tcx>,\n     sig: ty::PolyGenSig<'tcx>,\n ) -> ty::Binder<'tcx, (ty::TraitRef<'tcx>, Ty<'tcx>)> {\n-    debug_assert!(!self_ty.has_escaping_bound_vars());\n+    assert!(!self_ty.has_escaping_bound_vars());\n     let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, [self_ty]);\n     sig.map_bound(|sig| (trait_ref, sig.return_ty))\n }"}]}