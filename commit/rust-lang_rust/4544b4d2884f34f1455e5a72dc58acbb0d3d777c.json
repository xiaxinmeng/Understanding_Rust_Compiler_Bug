{"sha": "4544b4d2884f34f1455e5a72dc58acbb0d3d777c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NDRiNGQyODg0ZjM0ZjE0NTVlNWE3MmRjNThhY2JiMGQzZDc3N2M=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-18T15:29:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-18T15:29:57Z"}, "message": "Rollup merge of #62777 - gilescope:self-referencial-to-recursion, r=eddyb\n\nSelf-referencial type now called a recursive type\n\nAs per Boat's suggestion - #62539, this makes the error message clearer.", "tree": {"sha": "9705c1bd80cb8f39a414f0bb19957d53e4f07b38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9705c1bd80cb8f39a414f0bb19957d53e4f07b38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4544b4d2884f34f1455e5a72dc58acbb0d3d777c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdMJB1CRBK7hj4Ov3rIwAAdHIIADvK8rKfrjsskefgS0cPSrKg\nbNZ5nsyqCBTiTd57CL28Zx0OLplx6z8A528c07+RBKSgKIY9XrhI/mST+2plVkOR\n/I/Yae1ZElAyrB1OMsB+TgO8SiCofXCfYoimVMf0IagCXMBYgl9K1Jk55944kyWw\nsef953PpdEwTiPa+8N/usiMZPeL7ReSQraDhj2Er2405mKCmGmdXU0KI0xDn2JXL\nvsyhzcuW3ys/HZwlEaSgLEafv4+rELC9nVY6MBnsrKRcrhiAeFnV4GKbrAQp6CEa\nzYXLQK/gBiTFeEL5Su2QLrNckrP8BiH3MVoRm+dj5SncWlBMATbDmQcrPJLGO2U=\n=Gnj0\n-----END PGP SIGNATURE-----\n", "payload": "tree 9705c1bd80cb8f39a414f0bb19957d53e4f07b38\nparent ed83734a3bba59993352e90ee8ece2d3edef95dd\nparent c56c5a861a83cd72ceda6590194506daa91fad33\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1563463797 -0400\ncommitter GitHub <noreply@github.com> 1563463797 -0400\n\nRollup merge of #62777 - gilescope:self-referencial-to-recursion, r=eddyb\n\nSelf-referencial type now called a recursive type\n\nAs per Boat's suggestion - #62539, this makes the error message clearer.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4544b4d2884f34f1455e5a72dc58acbb0d3d777c", "html_url": "https://github.com/rust-lang/rust/commit/4544b4d2884f34f1455e5a72dc58acbb0d3d777c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4544b4d2884f34f1455e5a72dc58acbb0d3d777c/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed83734a3bba59993352e90ee8ece2d3edef95dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed83734a3bba59993352e90ee8ece2d3edef95dd", "html_url": "https://github.com/rust-lang/rust/commit/ed83734a3bba59993352e90ee8ece2d3edef95dd"}, {"sha": "c56c5a861a83cd72ceda6590194506daa91fad33", "url": "https://api.github.com/repos/rust-lang/rust/commits/c56c5a861a83cd72ceda6590194506daa91fad33", "html_url": "https://github.com/rust-lang/rust/commit/c56c5a861a83cd72ceda6590194506daa91fad33"}], "stats": {"total": 54, "additions": 36, "deletions": 18}, "files": [{"sha": "41b57decc10c7da2b69d223fba421e711a78ab1e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4544b4d2884f34f1455e5a72dc58acbb0d3d777c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4544b4d2884f34f1455e5a72dc58acbb0d3d777c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4544b4d2884f34f1455e5a72dc58acbb0d3d777c", "patch": "@@ -1321,7 +1321,7 @@ fn check_opaque<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, substs: SubstsRef<'tcx>,\n             tcx.sess, span, E0720,\n             \"opaque type expands to a recursive type\",\n         );\n-        err.span_label(span, \"expands to self-referential type\");\n+        err.span_label(span, \"expands to a recursive type\");\n         if let ty::Opaque(..) = partially_expanded_type.sty {\n             err.note(\"type resolves to itself\");\n         } else {"}, {"sha": "69914b6a7910fc42ee9468fc3eee0b9c7cf72c9a", "filename": "src/test/ui/async-await/recursive-async-impl-trait-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4544b4d2884f34f1455e5a72dc58acbb0d3d777c/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4544b4d2884f34f1455e5a72dc58acbb0d3d777c/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr?ref=4544b4d2884f34f1455e5a72dc58acbb0d3d777c", "patch": "@@ -2,7 +2,7 @@ error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-async-impl-trait-type.rs:7:40\n    |\n LL | async fn recursive_async_function() -> () {\n-   |                                        ^^ expands to self-referential type\n+   |                                        ^^ expands to a recursive type\n    |\n    = note: expanded type is `std::future::GenFuture<[static generator@$DIR/recursive-async-impl-trait-type.rs:7:43: 9:2 {impl std::future::Future, ()}]>`\n "}, {"sha": "774019b6a5bdaa791cdb684eb9f77312a5878df9", "filename": "src/test/ui/generator/issue-62506-two_awaits.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4544b4d2884f34f1455e5a72dc58acbb0d3d777c/src%2Ftest%2Fui%2Fgenerator%2Fissue-62506-two_awaits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4544b4d2884f34f1455e5a72dc58acbb0d3d777c/src%2Ftest%2Fui%2Fgenerator%2Fissue-62506-two_awaits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-62506-two_awaits.rs?ref=4544b4d2884f34f1455e5a72dc58acbb0d3d777c", "patch": "@@ -0,0 +1,18 @@\n+// Output = String caused an ICE whereas Output = &'static str compiled successfully.\n+// Broken MIR: generator contains type std::string::String in MIR,\n+// but typeck only knows about {<S as T>::Future, ()}\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+use std::future::Future;\n+\n+pub trait T {\n+    type Future: Future<Output = String>;\n+    fn bar() -> Self::Future;\n+}\n+pub async fn foo<S>() where S: T {\n+    S::bar().await;\n+    S::bar().await;\n+}\n+pub fn main() {}"}, {"sha": "d10001e8a8e53429225f2d0e7ae64a69cc0ca0cd", "filename": "src/test/ui/impl-trait/issues/infinite-impl-trait-issue-38064.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4544b4d2884f34f1455e5a72dc58acbb0d3d777c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Finfinite-impl-trait-issue-38064.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4544b4d2884f34f1455e5a72dc58acbb0d3d777c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Finfinite-impl-trait-issue-38064.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Finfinite-impl-trait-issue-38064.stderr?ref=4544b4d2884f34f1455e5a72dc58acbb0d3d777c", "patch": "@@ -2,15 +2,15 @@ error[E0720]: opaque type expands to a recursive type\n   --> $DIR/infinite-impl-trait-issue-38064.rs:8:13\n    |\n LL | fn foo() -> impl Quux {\n-   |             ^^^^^^^^^ expands to self-referential type\n+   |             ^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `foo::Foo<bar::Bar<impl Quux>>`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/infinite-impl-trait-issue-38064.rs:14:13\n    |\n LL | fn bar() -> impl Quux {\n-   |             ^^^^^^^^^ expands to self-referential type\n+   |             ^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `bar::Bar<foo::Foo<impl Quux>>`\n "}, {"sha": "324607117dc50046f8d46ac54e825c0d4275777b", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4544b4d2884f34f1455e5a72dc58acbb0d3d777c/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4544b4d2884f34f1455e5a72dc58acbb0d3d777c/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type.stderr?ref=4544b4d2884f34f1455e5a72dc58acbb0d3d777c", "patch": "@@ -2,111 +2,111 @@ error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:6:22\n    |\n LL | fn option(i: i32) -> impl Sized {\n-   |                      ^^^^^^^^^^ expands to self-referential type\n+   |                      ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `std::option::Option<(impl Sized, i32)>`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:14:15\n    |\n LL | fn tuple() -> impl Sized {\n-   |               ^^^^^^^^^^ expands to self-referential type\n+   |               ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `(impl Sized,)`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:18:15\n    |\n LL | fn array() -> impl Sized {\n-   |               ^^^^^^^^^^ expands to self-referential type\n+   |               ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `[impl Sized; 1]`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:22:13\n    |\n LL | fn ptr() -> impl Sized {\n-   |             ^^^^^^^^^^ expands to self-referential type\n+   |             ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `*const impl Sized`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:26:16\n    |\n LL | fn fn_ptr() -> impl Sized {\n-   |                ^^^^^^^^^^ expands to self-referential type\n+   |                ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `fn() -> impl Sized`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:30:25\n    |\n LL | fn closure_capture() -> impl Sized {\n-   |                         ^^^^^^^^^^ expands to self-referential type\n+   |                         ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `[closure@$DIR/recursive-impl-trait-type.rs:32:5: 32:19 x:impl Sized]`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:35:29\n    |\n LL | fn closure_ref_capture() -> impl Sized {\n-   |                             ^^^^^^^^^^ expands to self-referential type\n+   |                             ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `[closure@$DIR/recursive-impl-trait-type.rs:37:5: 37:20 x:impl Sized]`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:40:21\n    |\n LL | fn closure_sig() -> impl Sized {\n-   |                     ^^^^^^^^^^ expands to self-referential type\n+   |                     ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `[closure@$DIR/recursive-impl-trait-type.rs:41:5: 41:21]`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:44:23\n    |\n LL | fn generator_sig() -> impl Sized {\n-   |                       ^^^^^^^^^^ expands to self-referential type\n+   |                       ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `[closure@$DIR/recursive-impl-trait-type.rs:45:5: 45:23]`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:48:27\n    |\n LL | fn generator_capture() -> impl Sized {\n-   |                           ^^^^^^^^^^ expands to self-referential type\n+   |                           ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `[generator@$DIR/recursive-impl-trait-type.rs:50:5: 50:26 x:impl Sized {()}]`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:53:26\n    |\n LL | fn substs_change<T>() -> impl Sized {\n-   |                          ^^^^^^^^^^ expands to self-referential type\n+   |                          ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `(impl Sized,)`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:57:24\n    |\n LL | fn generator_hold() -> impl Sized {\n-   |                        ^^^^^^^^^^ expands to self-referential type\n+   |                        ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `[generator@$DIR/recursive-impl-trait-type.rs:58:5: 62:6 {impl Sized, ()}]`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:69:26\n    |\n LL | fn mutual_recursion() -> impl Sync {\n-   |                          ^^^^^^^^^ expands to self-referential type\n+   |                          ^^^^^^^^^ expands to a recursive type\n    |\n    = note: type resolves to itself\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type.rs:73:28\n    |\n LL | fn mutual_recursion_b() -> impl Sized {\n-   |                            ^^^^^^^^^^ expands to self-referential type\n+   |                            ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: type resolves to itself\n "}]}