{"sha": "700b64e100b79fc2d7c1fdf9b2c97b3fcbdab092", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMGI2NGUxMDBiNzlmYzJkN2MxZmRmOWIyYzk3YjNmY2JkYWIwOTI=", "commit": {"author": {"name": "Mukund Lakshman", "email": "yaymukund@gmail.com", "date": "2021-07-29T17:00:13Z"}, "committer": {"name": "Mukund Lakshman", "email": "yaymukund@gmail.com", "date": "2021-08-19T21:49:52Z"}, "message": "CI: Verify commits in beta & stable are in upstream branches.\n\nCloses #74721", "tree": {"sha": "49c1be5619577eb79725e6ae4f70561a61511dad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49c1be5619577eb79725e6ae4f70561a61511dad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/700b64e100b79fc2d7c1fdf9b2c97b3fcbdab092", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/700b64e100b79fc2d7c1fdf9b2c97b3fcbdab092", "html_url": "https://github.com/rust-lang/rust/commit/700b64e100b79fc2d7c1fdf9b2c97b3fcbdab092", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/700b64e100b79fc2d7c1fdf9b2c97b3fcbdab092/comments", "author": null, "committer": null, "parents": [{"sha": "2451f42c1deb9379d5e8e5fa86b0bf857ae048ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/2451f42c1deb9379d5e8e5fa86b0bf857ae048ec", "html_url": "https://github.com/rust-lang/rust/commit/2451f42c1deb9379d5e8e5fa86b0bf857ae048ec"}], "stats": {"total": 143, "additions": 143, "deletions": 0}, "files": [{"sha": "ff4fa1527e93ad09beb3f137c458c5c79bc18600", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/700b64e100b79fc2d7c1fdf9b2c97b3fcbdab092/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/700b64e100b79fc2d7c1fdf9b2c97b3fcbdab092/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=700b64e100b79fc2d7c1fdf9b2c97b3fcbdab092", "patch": "@@ -128,6 +128,9 @@ jobs:\n       - name: ensure line endings are correct\n         run: src/ci/scripts/verify-line-endings.sh\n         if: success() && !env.SKIP_JOB\n+      - name: ensure backported commits are in upstream branches\n+        run: src/ci/scripts/verify-backported-commits.sh\n+        if: success() && !env.SKIP_JOB\n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n         env:\n@@ -499,6 +502,9 @@ jobs:\n       - name: ensure line endings are correct\n         run: src/ci/scripts/verify-line-endings.sh\n         if: success() && !env.SKIP_JOB\n+      - name: ensure backported commits are in upstream branches\n+        run: src/ci/scripts/verify-backported-commits.sh\n+        if: success() && !env.SKIP_JOB\n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n         env:\n@@ -609,6 +615,9 @@ jobs:\n       - name: ensure line endings are correct\n         run: src/ci/scripts/verify-line-endings.sh\n         if: success() && !env.SKIP_JOB\n+      - name: ensure backported commits are in upstream branches\n+        run: src/ci/scripts/verify-backported-commits.sh\n+        if: success() && !env.SKIP_JOB\n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n         env:"}, {"sha": "6417f5a984ad55070e00731831ef815bd472998c", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/700b64e100b79fc2d7c1fdf9b2c97b3fcbdab092/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/700b64e100b79fc2d7c1fdf9b2c97b3fcbdab092/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=700b64e100b79fc2d7c1fdf9b2c97b3fcbdab092", "patch": "@@ -206,6 +206,10 @@ x--expand-yaml-anchors--remove:\n         run: src/ci/scripts/verify-line-endings.sh\n         <<: *step\n \n+      - name: ensure backported commits are in upstream branches\n+        run: src/ci/scripts/verify-backported-commits.sh\n+        <<: *step\n+\n       - name: run the build\n         run: src/ci/scripts/run-build-from-ci.sh\n         env:"}, {"sha": "75efabe8bfc5ee05b764c0dcf5dade1ef511f1d6", "filename": "src/ci/scripts/verify-backported-commits.sh", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/700b64e100b79fc2d7c1fdf9b2c97b3fcbdab092/src%2Fci%2Fscripts%2Fverify-backported-commits.sh", "raw_url": "https://github.com/rust-lang/rust/raw/700b64e100b79fc2d7c1fdf9b2c97b3fcbdab092/src%2Fci%2Fscripts%2Fverify-backported-commits.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fverify-backported-commits.sh?ref=700b64e100b79fc2d7c1fdf9b2c97b3fcbdab092", "patch": "@@ -0,0 +1,130 @@\n+#!/bin/bash\n+# Ensure commits in beta are in master & commits in stable are in beta + master.\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+# We don't care about commits that predate this automation check, so we pass a\n+# `<limit>` argument to `git cherry`.\n+BETA_LIMIT=\"53fd98ca776cb875bc9e5514f56b52eb74f9e7a9\"\n+STABLE_LIMIT=\"a178d0322ce20e33eac124758e837cbd80a6f633\"\n+\n+verify_backported_commits_main() {\n+  ci_base_branch=$(ciBaseBranch)\n+\n+  if [[ \"$ci_base_branch\" != \"beta\" && \"$ci_base_branch\" != \"stable\" ]]; then\n+    echo 'Skipping. This is only run when merging to the beta or stable branches.'\n+    exit 0\n+  fi\n+\n+  echo 'git: unshallowing the repository so we can check commits'\n+  git fetch \\\n+    --no-tags \\\n+    --no-recurse-submodules \\\n+    --progress \\\n+    --prune \\\n+    --unshallow\n+\n+  if [[ $ci_base_branch == \"beta\" ]]; then\n+    verify_cherries master \"$BETA_LIMIT\" \\\n+      || exit 1\n+\n+  elif [[ $ci_base_branch == \"stable\" ]]; then\n+    (verify_cherries master \"$STABLE_LIMIT\" \\\n+      & verify_cherries beta \"$STABLE_LIMIT\") \\\n+      || exit 1\n+\n+  fi\n+}\n+\n+# Verify all commits in `HEAD` are backports of a commit in <upstream>. See\n+# https://git-scm.com/docs/git-cherry for an explanation of the arguments.\n+#\n+# $1 = <upstream>\n+# $2 = <limit>\n+verify_cherries() {\n+  # commits that lack a `backport-of` comment.\n+  local no_backports=()\n+  # commits with an incorrect `backport-of` comment.\n+  local bad_backports=()\n+\n+  commits=$(git cherry \"origin/$1\" HEAD \"$2\")\n+\n+  if [[ -z \"$commits\" ]]; then\n+    echo \"All commits in \\`HEAD\\` are present in \\`$1\\`\"\n+    return 0\n+  fi\n+\n+  commits=$(echo \"$commits\" | grep '^\\+' | cut -c 3-)\n+\n+  while read sha; do\n+    # Check each commit in <current>..<upstream>\n+    backport_sha=$(get_backport \"$sha\")\n+\n+    if [[ -z \"$backport_sha\" ]]; then\n+      no_backports+=(\"$sha\")\n+      continue\n+    fi\n+\n+    if ! is_in_master \"$backport_sha\"; then\n+      bad_backports+=(\"$sha\")\n+      continue\n+    fi\n+\n+    echo \"\u2713 \\`$sha\\` backports \\`$backport_sha\\`\"\n+  done <<< \"$commits\"\n+\n+  failure=0\n+\n+  if [ ${#no_backports[@]} -ne 0 ]; then\n+        echo 'Error: Could not find backports for all commits.'\n+        echo\n+        echo 'All commits in \\`HEAD\\` are required to have a corresponding upstream commit.'\n+        echo 'It looks like the following commits:'\n+        echo\n+        for commit in \"${no_backports[@]}\"; do\n+          echo \"    $commit\"\n+        done\n+        echo\n+        echo \"do not match any commits in \\`$1\\`. If this was intended, add the text\"\n+        echo '\\`backport-of: <SHA of a commit already in master>\\` somewhere in the'\n+        echo 'message of each of these commits.'\n+        echo\n+        failure=1\n+  fi\n+\n+  if [ ${#bad_backports[@]} -ne 0 ]; then\n+        echo 'Error: Found incorrectly marked commits.'\n+        echo\n+        echo 'The following commits:'\n+        echo\n+        for commit in \"${bad_backports[@]}\"; do\n+          echo \"    $commit\"\n+        done\n+        echo\n+        echo 'have commit messages marked \\`backport-of: <SHA>\\`, but the SHA is not in'\n+        echo '\\`master\\`.'\n+        echo\n+        failure=1\n+  fi\n+\n+  return $failure\n+}\n+\n+# Get the backport of a commit, or empty string if it does not exist.\n+#\n+# $1 = <sha>\n+get_backport() {\n+  git show -s --format=%B \"$1\" \\\n+    | sed -n 's/^.*backport-of:\\s\\?\\([a-f0-9]\\+\\).*/\\1/p'\n+}\n+\n+# Check if a commit is in master.\n+#\n+# $1 = <sha>\n+is_in_master() {\n+  git merge-base --is-ancestor \"$1\" origin/master 2> /dev/null\n+}\n+\n+verify_backported_commits_main"}]}