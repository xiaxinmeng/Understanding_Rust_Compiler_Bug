{"sha": "94b2330f55af69d3cada685a9beff0236c9d92ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YjIzMzBmNTVhZjY5ZDNjYWRhNjg1YTliZWZmMDIzNmM5ZDkyZWU=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-10-27T09:07:33Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-10-27T09:07:33Z"}, "message": "add doctest runnables on struct #6356\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "0f879eb041a787995e689277026f328bc5414c6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f879eb041a787995e689277026f328bc5414c6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94b2330f55af69d3cada685a9beff0236c9d92ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94b2330f55af69d3cada685a9beff0236c9d92ee", "html_url": "https://github.com/rust-lang/rust/commit/94b2330f55af69d3cada685a9beff0236c9d92ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94b2330f55af69d3cada685a9beff0236c9d92ee/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d01e412eb1572676a33ad145f3370a7157dbc9df", "url": "https://api.github.com/repos/rust-lang/rust/commits/d01e412eb1572676a33ad145f3370a7157dbc9df", "html_url": "https://github.com/rust-lang/rust/commit/d01e412eb1572676a33ad145f3370a7157dbc9df"}], "stats": {"total": 70, "additions": 67, "deletions": 3}, "files": [{"sha": "876ee4c5e6b450ee810dc6c644bc6cae7b5244f9", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 67, "deletions": 3, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/94b2330f55af69d3cada685a9beff0236c9d92ee/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b2330f55af69d3cada685a9beff0236c9d92ee/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=94b2330f55af69d3cada685a9beff0236c9d92ee", "patch": "@@ -102,6 +102,7 @@ pub(crate) fn runnable(\n ) -> Option<Runnable> {\n     match_ast! {\n         match item {\n+            ast::Struct(it) => runnable_struct(sema, it, file_id),\n             ast::Fn(it) => runnable_fn(sema, it, file_id),\n             ast::Module(it) => runnable_mod(sema, it, file_id),\n             _ => None,\n@@ -182,6 +183,43 @@ fn runnable_fn(\n     Some(Runnable { nav, kind, cfg })\n }\n \n+fn runnable_struct(\n+    sema: &Semantics<RootDatabase>,\n+    struct_def: ast::Struct,\n+    file_id: FileId,\n+) -> Option<Runnable> {\n+    if !has_runnable_doc_test(&struct_def) {\n+        return None;\n+    }\n+    let name_string = struct_def.name()?.text().to_string();\n+\n+    let attrs =\n+        Attrs::from_attrs_owner(sema.db, InFile::new(HirFileId::from(file_id), &struct_def));\n+    let cfg = attrs.cfg();\n+\n+    let test_id = match sema.to_def(&struct_def).map(|def| def.module(sema.db)) {\n+        Some(module) => {\n+            let path_iter = module\n+                .path_to_root(sema.db)\n+                .into_iter()\n+                .rev()\n+                .filter_map(|it| it.name(sema.db))\n+                .map(|name| name.to_string());\n+            let path = path_iter.chain(std::iter::once(name_string)).join(\"::\");\n+\n+            TestId::Path(path)\n+        }\n+        None => TestId::Name(name_string),\n+    };\n+\n+    let nav = NavigationTarget::from_doc_commented(\n+        sema.db,\n+        InFile::new(file_id.into(), &struct_def),\n+        InFile::new(file_id.into(), &struct_def),\n+    );\n+    Some(Runnable { nav, kind: RunnableKind::DocTest { test_id }, cfg })\n+}\n+\n #[derive(Debug, Copy, Clone)]\n pub struct TestAttr {\n     pub ignore: bool,\n@@ -215,8 +253,8 @@ const RUSTDOC_FENCE: &str = \"```\";\n const RUSTDOC_CODE_BLOCK_ATTRIBUTES_RUNNABLE: &[&str] =\n     &[\"\", \"rust\", \"should_panic\", \"edition2015\", \"edition2018\"];\n \n-fn has_runnable_doc_test(fn_def: &ast::Fn) -> bool {\n-    fn_def.doc_comment_text().map_or(false, |comments_text| {\n+fn has_runnable_doc_test<T: DocCommentsOwner>(def: &T) -> bool {\n+    def.doc_comment_text().map_or(false, |comments_text| {\n         let mut in_code_block = false;\n \n         for line in comments_text.lines() {\n@@ -487,8 +525,14 @@ fn should_have_no_runnable_5() {}\n /// let z = 55;\n /// ```\n fn should_have_no_runnable_6() {}\n+\n+/// ```\n+/// let x = 5;\n+/// ```\n+struct StructWithRunnable(String);\n+\n \"#,\n-            &[&BIN, &DOCTEST, &DOCTEST, &DOCTEST],\n+            &[&BIN, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST],\n             expect![[r#\"\n                 [\n                     Runnable {\n@@ -569,6 +613,26 @@ fn should_have_no_runnable_6() {}\n                         },\n                         cfg: None,\n                     },\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 756..821,\n+                            focus_range: None,\n+                            name: \"StructWithRunnable\",\n+                            kind: STRUCT,\n+                            container_name: None,\n+                            description: None,\n+                            docs: None,\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"StructWithRunnable\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n                 ]\n             \"#]],\n         );"}]}