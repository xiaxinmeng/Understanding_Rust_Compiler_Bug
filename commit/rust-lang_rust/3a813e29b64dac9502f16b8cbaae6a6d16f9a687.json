{"sha": "3a813e29b64dac9502f16b8cbaae6a6d16f9a687", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhODEzZTI5YjY0ZGFjOTUwMmYxNmI4Y2JhYWU2YTZkMTZmOWE2ODc=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-01-30T17:56:54Z"}, "committer": {"name": "Kerra Olson", "email": "kerra@mbp.local", "date": "2013-02-10T19:51:05Z"}, "message": "etc: rework of how libuv is integrated into the build\n\n- thanks to work in libuv's upstream, we can call libuv's Makefile directly\nwith parameters, instead of descending in gyp-uv madness and generating\nour own.", "tree": {"sha": "d4360b6f6a2598b2356308c572a8e46537df2079", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4360b6f6a2598b2356308c572a8e46537df2079"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a813e29b64dac9502f16b8cbaae6a6d16f9a687", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a813e29b64dac9502f16b8cbaae6a6d16f9a687", "html_url": "https://github.com/rust-lang/rust/commit/3a813e29b64dac9502f16b8cbaae6a6d16f9a687", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a813e29b64dac9502f16b8cbaae6a6d16f9a687/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f04df8522cc93dfcdc0eb49f8403d305a508e58", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f04df8522cc93dfcdc0eb49f8403d305a508e58", "html_url": "https://github.com/rust-lang/rust/commit/0f04df8522cc93dfcdc0eb49f8403d305a508e58"}], "stats": {"total": 7226, "additions": 7, "deletions": 7219}, "files": [{"sha": "15f005e0da6e66d6afa81d5e535463752a0abd19", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a813e29b64dac9502f16b8cbaae6a6d16f9a687/configure", "raw_url": "https://github.com/rust-lang/rust/raw/3a813e29b64dac9502f16b8cbaae6a6d16f9a687/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=3a813e29b64dac9502f16b8cbaae6a6d16f9a687", "patch": "@@ -578,7 +578,7 @@ do\n   make_dir rt/$t\n   for i in                                          \\\n     isaac linenoise sync test arch/i386 arch/x86_64    \\\n-    libuv libuv/src/ares libuv/src/eio libuv/src/ev\n+    libuv\n   do\n     make_dir rt/$t/$i\n   done"}, {"sha": "16323af2cd75cf379b59c7bc69e308cb20e5f0b2", "filename": "mk/libuv/arm/unix/android/Makefile", "status": "removed", "additions": 0, "deletions": 354, "changes": 354, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Farm%2Funix%2Fandroid%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Farm%2Funix%2Fandroid%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Farm%2Funix%2Fandroid%2FMakefile?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,354 +0,0 @@\n-# We borrow heavily from the kernel build setup, though we are simpler since\n-# we don't have Kconfig tweaking settings on us.\n-\n-# The implicit make rules have it looking for RCS files, among other things.\n-# We instead explicitly write all the rules we care about.\n-# It's even quicker (saves ~200ms) to pass -r on the command line.\n-MAKEFLAGS=-r\n-\n-# The source directory tree.\n-srcdir := ../../../../..\n-abs_srcdir := $(abspath $(srcdir))\n-\n-# The name of the builddir.\n-builddir_name ?= out\n-\n-# The V=1 flag on command line makes us verbosely print command lines.\n-ifdef V\n-  quiet=\n-else\n-  quiet=quiet_\n-endif\n-\n-# Specify BUILDTYPE=Release on the command line for a release build.\n-BUILDTYPE ?= Debug\n-\n-# Directory all our build output goes into.\n-# Note that this must be two directories beneath src/ for unit tests to pass,\n-# as they reach into the src/ directory for data with relative paths.\n-builddir ?= $(builddir_name)/$(BUILDTYPE)\n-abs_builddir := $(abspath $(builddir))\n-depsdir := $(builddir)/.deps\n-\n-# Object output directory.\n-obj := $(builddir)/obj\n-abs_obj := $(abspath $(obj))\n-\n-# We build up a list of every single one of the targets so we can slurp in the\n-# generated dependency rule Makefiles in one pass.\n-all_deps :=\n-\n-\n-\n-# C++ apps need to be linked with g++.\n-#\n-# Note: flock is used to seralize linking. Linking is a memory-intensive\n-# process so running parallel links can often lead to thrashing.  To disable\n-# the serialization, override LINK via an envrionment variable as follows:\n-#\n-#   export LINK=g++\n-#\n-# This will allow make to invoke N linker processes as specified in -jN.\n-LINK ?= flock $(builddir)/linker.lock $(CXX)\n-\n-CC.target ?= $(CC)\n-CFLAGS.target ?= $(CFLAGS)\n-CXX.target ?= $(CXX)\n-CXXFLAGS.target ?= $(CXXFLAGS)\n-LINK.target ?= $(LINK)\n-LDFLAGS.target ?= $(LDFLAGS)\n-AR.target ?= $(AR)\n-ARFLAGS.target ?= crsT\n-\n-# N.B.: the logic of which commands to run should match the computation done\n-# in gyp's make.py where ARFLAGS.host etc. is computed.\n-# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n-# to replicate this environment fallback in make as well.\n-CC.host ?= gcc\n-CFLAGS.host ?=\n-CXX.host ?= g++\n-CXXFLAGS.host ?=\n-LINK.host ?= g++\n-LDFLAGS.host ?=\n-AR.host ?= ar\n-ARFLAGS.host := crs\n-\n-# Define a dir function that can handle spaces.\n-# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n-# \"leading spaces cannot appear in the text of the first argument as written.\n-# These characters can be put into the argument value by variable substitution.\"\n-empty :=\n-space := $(empty) $(empty)\n-\n-# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n-replace_spaces = $(subst $(space),?,$1)\n-unreplace_spaces = $(subst ?,$(space),$1)\n-dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n-\n-# Flags to make gcc output dependency info.  Note that you need to be\n-# careful here to use the flags that ccache and distcc can understand.\n-# We write to a dep file on the side first and then rename at the end\n-# so we can't end up with a broken dep file.\n-depfile = $(depsdir)/$(call replace_spaces,$@).d\n-DEPFLAGS = -MMD -MF $(depfile).raw\n-\n-# We have to fixup the deps output in a few ways.\n-# (1) the file output should mention the proper .o file.\n-# ccache or distcc lose the path to the target, so we convert a rule of\n-# the form:\n-#   foobar.o: DEP1 DEP2\n-# into\n-#   path/to/foobar.o: DEP1 DEP2\n-# (2) we want missing files not to cause us to fail to build.\n-# We want to rewrite\n-#   foobar.o: DEP1 DEP2 \\\n-#               DEP3\n-# to\n-#   DEP1:\n-#   DEP2:\n-#   DEP3:\n-# so if the files are missing, they're just considered phony rules.\n-# We have to do some pretty insane escaping to get those backslashes\n-# and dollar signs past make, the shell, and sed at the same time.\n-# Doesn't work with spaces, but that's fine: .d files have spaces in\n-# their names replaced with other characters.\n-define fixup_dep\n-# The depfile may not exist if the input file didn't have any #includes.\n-touch $(depfile).raw\n-# Fixup path as in (1).\n-sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n-# Add extra rules as in (2).\n-# We remove slashes and replace spaces with new lines;\n-# remove blank lines;\n-# delete the first line and append a colon to the remaining lines.\n-sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n-  grep -v '^$$'                             |\\\n-  sed -e 1d -e 's|$$|:|'                     \\\n-    >> $(depfile)\n-rm $(depfile).raw\n-endef\n-\n-# Command definitions:\n-# - cmd_foo is the actual command to run;\n-# - quiet_cmd_foo is the brief-output summary of the command.\n-\n-quiet_cmd_cc = CC($(TOOLSET)) $@\n-cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_cxx = CXX($(TOOLSET)) $@\n-cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_touch = TOUCH $@\n-cmd_touch = touch $@\n-\n-quiet_cmd_copy = COPY $@\n-# send stderr to /dev/null to ignore messages when linking directories.\n-cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n-\n-quiet_cmd_alink = AR($(TOOLSET)) $@\n-cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) $(ARFLAGS.$(TOOLSET)) $@ $(filter %.o,$^)\n-\n-# Due to circular dependencies between libraries :(, we wrap the\n-# special \"figure out circular dependencies\" flags around the entire\n-# input list during linking.\n-quiet_cmd_link = LINK($(TOOLSET)) $@\n-cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n-\n-# We support two kinds of shared objects (.so):\n-# 1) shared_library, which is just bundling together many dependent libraries\n-# into a link line.\n-# 2) loadable_module, which is generating a module intended for dlopen().\n-#\n-# They differ only slightly:\n-# In the former case, we want to package all dependent code into the .so.\n-# In the latter case, we want to package just the API exposed by the\n-# outermost module.\n-# This means shared_library uses --whole-archive, while loadable_module doesn't.\n-# (Note that --whole-archive is incompatible with the --start-group used in\n-# normal linking.)\n-\n-# Other shared-object link notes:\n-# - Set SONAME to the library filename so our binaries don't reference\n-# the local, absolute paths used on the link command-line.\n-quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n-cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n-\n-quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n-cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n-\n-\n-# Define an escape_quotes function to escape single quotes.\n-# This allows us to handle quotes properly as long as we always use\n-# use single quotes and escape_quotes.\n-escape_quotes = $(subst ','\\'',$(1))\n-# This comment is here just to include a ' to unconfuse syntax highlighting.\n-# Define an escape_vars function to escape '$' variable syntax.\n-# This allows us to read/write command lines with shell variables (e.g.\n-# $LD_LIBRARY_PATH), without triggering make substitution.\n-escape_vars = $(subst $$,$$$$,$(1))\n-# Helper that expands to a shell command to echo a string exactly as it is in\n-# make. This uses printf instead of echo because printf's behaviour with respect\n-# to escape sequences is more portable than echo's across different shells\n-# (e.g., dash, bash).\n-exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n-\n-# Helper to compare the command we're about to run against the command\n-# we logged the last time we ran the command.  Produces an empty\n-# string (false) when the commands match.\n-# Tricky point: Make has no string-equality test function.\n-# The kernel uses the following, but it seems like it would have false\n-# positives, where one string reordered its arguments.\n-#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n-#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n-# We instead substitute each for the empty string into the other, and\n-# say they're equal if both substitutions produce the empty string.\n-# .d files contain ? instead of spaces, take that into account.\n-command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n-                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n-\n-# Helper that is non-empty when a prerequisite changes.\n-# Normally make does this implicitly, but we force rules to always run\n-# so we can check their command lines.\n-#   $? -- new prerequisites\n-#   $| -- order-only dependencies\n-prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n-\n-# Helper that executes all postbuilds, and deletes the output file when done\n-# if any of the postbuilds failed.\n-define do_postbuilds\n-  @E=0;\\\n-  for p in $(POSTBUILDS); do\\\n-    eval $$p;\\\n-    F=$$?;\\\n-    if [ $$F -ne 0 ]; then\\\n-      E=$$F;\\\n-    fi;\\\n-  done;\\\n-  if [ $$E -ne 0 ]; then\\\n-    rm -rf \"$@\";\\\n-    exit $$E;\\\n-  fi\n-endef\n-\n-# do_cmd: run a command via the above cmd_foo names, if necessary.\n-# Should always run for a given target to handle command-line changes.\n-# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n-# Third argument, if non-zero, makes it do POSTBUILDS processing.\n-# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n-# spaces already and dirx strips the ? characters.\n-define do_cmd\n-$(if $(or $(command_changed),$(prereq_changed)),\n-  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n-  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n-  $(if $(findstring flock,$(word 1,$(cmd_$1))),\n-    @$(cmd_$(1))\n-    @echo \"  $(quiet_cmd_$(1)): Finished\",\n-    @$(cmd_$(1))\n-  )\n-  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n-  @$(if $(2),$(fixup_dep))\n-  $(if $(and $(3), $(POSTBUILDS)),\n-    $(call do_postbuilds)\n-  )\n-)\n-endef\n-\n-# Declare the \"all\" target first so it is the default,\n-# even though we don't have the deps yet.\n-.PHONY: all\n-all:\n-\n-# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n-# do_cmd.\n-.PHONY: FORCE_DO_CMD\n-FORCE_DO_CMD:\n-\n-TOOLSET := target\n-# Suffix rules, putting all outputs into $(obj).\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n-  include src/libuv/run-benchmarks.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-tests.target.mk)))),)\n-  include src/libuv/run-tests.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/uv.target.mk)))),)\n-  include src/libuv/uv.target.mk\n-endif\n-\n-#quiet_cmd_regen_makefile = ACTION Regenerating $@\n-#cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" -Isrc/libuv/common.gypi \"--depth=.\" \"--generator-output=mk/libuv/arm/unix/android\" \"-Ddefault_configuration=Default\" \"-Dcomponent=static_library\" \"-Dlibrary=static_library\" \"-Dtarget_arch=arm\" \"-DOS=linux\" src/libuv/uv.gyp\n-#Makefile: $(srcdir)/src/libuv/uv.gyp $(srcdir)/src/libuv/common.gypi\n-#\t$(call do_cmd,regen_makefile)\n-\n-# \"all\" is a concatenation of the \"all\" targets from all the included\n-# sub-makefiles. This is just here to clarify.\n-all:\n-\n-# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n-# target in our tree. Only consider the ones with .d (dependency) info:\n-d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n-ifneq ($(d_files),)\n-  # Rather than include each individual .d file, concatenate them into a\n-  # single file which make is able to load faster.  We split this into\n-  # commands that take 1000 files at a time to avoid overflowing the\n-  # command line.\n-  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n-\n-  ifneq ($(word 1001,$(d_files)),)\n-    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n-  endif\n-\n-  # make looks for ways to re-generate included makefiles, but in our case, we\n-  # don't have a direct way. Explicitly telling make that it has nothing to do\n-  # for them makes it go faster.\n-  $(depsdir)/all.deps: ;\n-\n-  include $(depsdir)/all.deps\n-endif"}, {"sha": "20ff9609d8fd7cf78e041efddfba201ea2415f66", "filename": "mk/libuv/arm/unix/android/src/libuv/run-benchmarks.target.mk", "status": "removed", "additions": 0, "deletions": 115, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,115 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-benchmarks\n-DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG' \\\n-\t'-DEV_VERIFY=2'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug := \\\n-\t-Wall \\\n-\t-ansi \\\n-\t-fvisibility=hidden \\\n-\t-g \\\n-\t-O0\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include\n-\n-DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release :=  \\\n-\t-Wall \\\n-\t-ansi \\\n-\t-fvisibility=hidden \\\n-\t-O3 \\\n-\t-fomit-frame-pointer \\\n-\t-fdata-sections \\\n-\t-ffunction-sections\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Release := -I$(srcdir)/src/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-ping-pongs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pound.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/run-benchmarks.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(obj).target/src/libuv/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-\n-$(builddir)/run-benchmarks: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-benchmarks: LIBS := $(LIBS)\n-$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n-$(builddir)/run-benchmarks: TOOLSET := $(TOOLSET)\n-$(builddir)/run-benchmarks: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-benchmarks\n-# Add target alias\n-.PHONY: run-benchmarks\n-run-benchmarks: $(builddir)/run-benchmarks\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-benchmarks\n-"}, {"sha": "c4d8c207c0884eebd4f5d651ff6f84139a1716e1", "filename": "mk/libuv/arm/unix/android/src/libuv/run-tests.target.mk", "status": "removed", "additions": 0, "deletions": 158, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Frun-tests.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,158 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-tests\n-DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG' \\\n-\t'-DEV_VERIFY=2'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug := \\\n-\t-Wall \\\n-\t-ansi \\\n-\t-fvisibility=hidden \\\n-\t-g \\\n-\t-O0\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include\n-\n-DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release :=  \\\n-\t-Wall \\\n-\t-ansi \\\n-\t-fvisibility=hidden \\\n-\t-O3 \\\n-\t-fomit-frame-pointer \\\n-\t-fdata-sections \\\n-\t-ffunction-sections\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Release := -I$(srcdir)/src/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-util.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-cwd-and-chdir.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-eio-overflow.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-currentexe.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-memory.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-getsockname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc-threads.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-platform-output.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-process-title.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-stdio-over-pipes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind6-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-close.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-flags.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect6-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-mutexes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-options.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-counters-init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(obj).target/src/libuv/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-\n-$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-tests: LIBS := $(LIBS)\n-$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n-$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n-$(builddir)/run-tests: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-tests\n-# Add target alias\n-.PHONY: run-tests\n-run-tests: $(builddir)/run-tests\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-tests\n-"}, {"sha": "ba3abfe493648efce540f00c13044f51fab4a003", "filename": "mk/libuv/arm/unix/android/src/libuv/uv.Makefile", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Fuv.Makefile?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,6 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-export builddir_name ?= mk/libuv/arm/unix/android/./src/libuv/out\n-.PHONY: all\n-all:\n-\t$(MAKE) -C ../.. uv run-benchmarks run-tests"}, {"sha": "2c23caef29ccb8ac7bef6821b88570a5e69f9015", "filename": "mk/libuv/arm/unix/android/src/libuv/uv.target.mk", "status": "removed", "additions": 0, "deletions": 184, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Fuv.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,184 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := uv\n-DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DHAVE_CONFIG_H' \\\n-\t'-DEV_CONFIG_H=\"config_android.h\"' \\\n-\t'-DEIO_CONFIG_H=\"config_android.h\"' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG' \\\n-\t'-DEV_VERIFY=2'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug :=  \\\n-\t-Wall \\\n-\t-ansi \\\n-\t-fvisibility=hidden \\\n-\t-g \\\n-\t--std=gnu89 \\\n-\t-pedantic \\\n-\t-Wall \\\n-\t-Wextra \\\n-\t-Wno-unused-parameter \\\n-\t-g \\\n-\t-O0\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include \\\n-\t-I$(srcdir)/src/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/libuv/src \\\n-\t-I$(srcdir)/src/libuv/src/unix/ev \\\n-\t-I$(srcdir)/src/libuv/src/ares/config_android\n-\n-DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DHAVE_CONFIG_H' \\\n-\t'-DEV_CONFIG_H=\"config_android.h\"' \\\n-\t'-DEIO_CONFIG_H=\"config_android.h\"' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release :=  \\\n-\t-Wall \\\n-\t-ansi \\\n-\t-fvisibility=hidden \\\n-\t-g \\\n-\t--std=gnu89 \\\n-\t-pedantic \\\n-\t-Wall \\\n-\t-Wextra \\\n-\t-Wno-unused-parameter \\\n-\t-O3 \\\n-\t-fomit-frame-pointer \\\n-\t-fdata-sections \\\n-\t-ffunction-sections\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Release := -I$(srcdir)/src/libuv/include \\\n-\t-I$(srcdir)/src/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/libuv/src \\\n-\t-I$(srcdir)/src/libuv/src/unix/ev \\\n-\t-I$(srcdir)/src/libuv/src/ares/config_android\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_cancel.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__close_sockets.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_data.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_destroy.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_name.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_string.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_fds.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_string.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyaddr.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__get_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getnameinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getopt.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getsock.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_library_init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_llist.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_mkquery.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_nowarn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_options.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_aaaa_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_a_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_mx_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ns_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ptr_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_srv_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_txt_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_process.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_query.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__read_line.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_search.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_send.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strcasecmp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strdup.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strerror.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_timeout.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__timeval.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_version.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_writev.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/bitncmp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_net_pton.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_ntop.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/windows_port.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/core.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/uv-eio.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/fs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/udp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/tcp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/pipe.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/tty.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/stream.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/cares.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/dl.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/process.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/eio/eio.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/ev/ev.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/linux.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-\n-LIBS := -lm\n-\n-$(obj).target/src/libuv/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(obj).target/src/libuv/libuv.a: LIBS := $(LIBS)\n-$(obj).target/src/libuv/libuv.a: TOOLSET := $(TOOLSET)\n-$(obj).target/src/libuv/libuv.a: $(OBJS) FORCE_DO_CMD\n-\t$(call do_cmd,alink)\n-\n-all_deps += $(obj).target/src/libuv/libuv.a\n-# Add target alias\n-.PHONY: uv\n-uv: $(obj).target/src/libuv/libuv.a\n-\n-# Add target alias to \"all\" target.\n-.PHONY: all\n-all: uv\n-"}, {"sha": "002fef0390ab81294d53eff840ed64835a1036b2", "filename": "mk/libuv/ia32/mac/Makefile", "status": "removed", "additions": 0, "deletions": 379, "changes": 379, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Fmac%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Fmac%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2FMakefile?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,379 +0,0 @@\n-# We borrow heavily from the kernel build setup, though we are simpler since\n-# we don't have Kconfig tweaking settings on us.\n-\n-# The implicit make rules have it looking for RCS files, among other things.\n-# We instead explicitly write all the rules we care about.\n-# It's even quicker (saves ~200ms) to pass -r on the command line.\n-MAKEFLAGS=-r\n-\n-# The source directory tree.\n-srcdir := ../../../..\n-abs_srcdir := $(abspath $(srcdir))\n-\n-# The name of the builddir.\n-builddir_name ?= out\n-\n-# The V=1 flag on command line makes us verbosely print command lines.\n-ifdef V\n-  quiet=\n-else\n-  quiet=quiet_\n-endif\n-\n-# Specify BUILDTYPE=Release on the command line for a release build.\n-BUILDTYPE ?= Debug\n-\n-# Directory all our build output goes into.\n-# Note that this must be two directories beneath src/ for unit tests to pass,\n-# as they reach into the src/ directory for data with relative paths.\n-builddir ?= $(builddir_name)/$(BUILDTYPE)\n-abs_builddir := $(abspath $(builddir))\n-depsdir := $(builddir)/.deps\n-\n-# Object output directory.\n-obj := $(builddir)/obj\n-abs_obj := $(abspath $(obj))\n-\n-# We build up a list of every single one of the targets so we can slurp in the\n-# generated dependency rule Makefiles in one pass.\n-all_deps :=\n-\n-\n-\n-# C++ apps need to be linked with g++.\n-#\n-# Note: flock is used to seralize linking. Linking is a memory-intensive\n-# process so running parallel links can often lead to thrashing.  To disable\n-# the serialization, override LINK via an envrionment variable as follows:\n-#\n-#   export LINK=g++\n-#\n-# This will allow make to invoke N linker processes as specified in -jN.\n-LINK ?= ./gyp-mac-tool flock $(builddir)/linker.lock $(CXX)\n-\n-CC.target ?= $(CC)\n-CFLAGS.target ?= $(CFLAGS)\n-CXX.target ?= $(CXX)\n-CXXFLAGS.target ?= $(CXXFLAGS)\n-LINK.target ?= $(LINK)\n-LDFLAGS.target ?= $(LDFLAGS) \n-AR.target ?= $(AR)\n-ARFLAGS.target ?= crs\n-\n-# N.B.: the logic of which commands to run should match the computation done\n-# in gyp's make.py where ARFLAGS.host etc. is computed.\n-# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n-# to replicate this environment fallback in make as well.\n-CC.host ?= gcc\n-CFLAGS.host ?=\n-CXX.host ?= g++\n-CXXFLAGS.host ?=\n-LINK.host ?= g++\n-LDFLAGS.host ?=\n-AR.host ?= ar\n-ARFLAGS.host := crs\n-\n-# Define a dir function that can handle spaces.\n-# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n-# \"leading spaces cannot appear in the text of the first argument as written.\n-# These characters can be put into the argument value by variable substitution.\"\n-empty :=\n-space := $(empty) $(empty)\n-\n-# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n-replace_spaces = $(subst $(space),?,$1)\n-unreplace_spaces = $(subst ?,$(space),$1)\n-dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n-\n-# Flags to make gcc output dependency info.  Note that you need to be\n-# careful here to use the flags that ccache and distcc can understand.\n-# We write to a dep file on the side first and then rename at the end\n-# so we can't end up with a broken dep file.\n-depfile = $(depsdir)/$(call replace_spaces,$@).d\n-DEPFLAGS = -MMD -MF $(depfile).raw\n-\n-# We have to fixup the deps output in a few ways.\n-# (1) the file output should mention the proper .o file.\n-# ccache or distcc lose the path to the target, so we convert a rule of\n-# the form:\n-#   foobar.o: DEP1 DEP2\n-# into\n-#   path/to/foobar.o: DEP1 DEP2\n-# (2) we want missing files not to cause us to fail to build.\n-# We want to rewrite\n-#   foobar.o: DEP1 DEP2 \\\n-#               DEP3\n-# to\n-#   DEP1:\n-#   DEP2:\n-#   DEP3:\n-# so if the files are missing, they're just considered phony rules.\n-# We have to do some pretty insane escaping to get those backslashes\n-# and dollar signs past make, the shell, and sed at the same time.\n-# Doesn't work with spaces, but that's fine: .d files have spaces in\n-# their names replaced with other characters.\n-define fixup_dep\n-# The depfile may not exist if the input file didn't have any #includes.\n-touch $(depfile).raw\n-# Fixup path as in (1).\n-sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n-# Add extra rules as in (2).\n-# We remove slashes and replace spaces with new lines;\n-# remove blank lines;\n-# delete the first line and append a colon to the remaining lines.\n-sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n-  grep -v '^$$'                             |\\\n-  sed -e 1d -e 's|$$|:|'                     \\\n-    >> $(depfile)\n-rm $(depfile).raw\n-endef\n-\n-# Command definitions:\n-# - cmd_foo is the actual command to run;\n-# - quiet_cmd_foo is the brief-output summary of the command.\n-\n-quiet_cmd_cc = CC($(TOOLSET)) $@\n-cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_cxx = CXX($(TOOLSET)) $@\n-cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_objc = CXX($(TOOLSET)) $@\n-cmd_objc = $(CC.$(TOOLSET)) $(GYP_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\n-\n-quiet_cmd_objcxx = CXX($(TOOLSET)) $@\n-cmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n-\n-# Commands for precompiled header files.\n-quiet_cmd_pch_c = CXX($(TOOLSET)) $@\n-cmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n-quiet_cmd_pch_cc = CXX($(TOOLSET)) $@\n-cmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n-quiet_cmd_pch_m = CXX($(TOOLSET)) $@\n-cmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\n-quiet_cmd_pch_mm = CXX($(TOOLSET)) $@\n-cmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n-\n-# gyp-mac-tool is written next to the root Makefile by gyp.\n-# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n-# already.\n-quiet_cmd_mac_tool = MACTOOL $(4) $<\n-cmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\n-\n-quiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\n-cmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\n-\n-quiet_cmd_infoplist = INFOPLIST $@\n-cmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n-\n-quiet_cmd_touch = TOUCH $@\n-cmd_touch = touch $@\n-\n-quiet_cmd_copy = COPY $@\n-# send stderr to /dev/null to ignore messages when linking directories.\n-cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n-\n-quiet_cmd_alink = LIBTOOL-STATIC $@\n-cmd_alink = rm -f $@ && libtool -static -o $@ $(filter %.o,$^)\n-\n-quiet_cmd_link = LINK($(TOOLSET)) $@\n-cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\n-\n-# TODO(thakis): Find out and document the difference between shared_library and\n-# loadable_module on mac.\n-quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n-cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\n-\n-# TODO(thakis): The solink_module rule is likely wrong. Xcode seems to pass\n-# -bundle -single_module here (for osmesa.so).\n-quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n-cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n-\n-\n-# Define an escape_quotes function to escape single quotes.\n-# This allows us to handle quotes properly as long as we always use\n-# use single quotes and escape_quotes.\n-escape_quotes = $(subst ','\\'',$(1))\n-# This comment is here just to include a ' to unconfuse syntax highlighting.\n-# Define an escape_vars function to escape '$' variable syntax.\n-# This allows us to read/write command lines with shell variables (e.g.\n-# $LD_LIBRARY_PATH), without triggering make substitution.\n-escape_vars = $(subst $$,$$$$,$(1))\n-# Helper that expands to a shell command to echo a string exactly as it is in\n-# make. This uses printf instead of echo because printf's behaviour with respect\n-# to escape sequences is more portable than echo's across different shells\n-# (e.g., dash, bash).\n-exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n-\n-# Helper to compare the command we're about to run against the command\n-# we logged the last time we ran the command.  Produces an empty\n-# string (false) when the commands match.\n-# Tricky point: Make has no string-equality test function.\n-# The kernel uses the following, but it seems like it would have false\n-# positives, where one string reordered its arguments.\n-#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n-#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n-# We instead substitute each for the empty string into the other, and\n-# say they're equal if both substitutions produce the empty string.\n-# .d files contain ? instead of spaces, take that into account.\n-command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n-                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n-\n-# Helper that is non-empty when a prerequisite changes.\n-# Normally make does this implicitly, but we force rules to always run\n-# so we can check their command lines.\n-#   $? -- new prerequisites\n-#   $| -- order-only dependencies\n-prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n-\n-# Helper that executes all postbuilds, and deletes the output file when done\n-# if any of the postbuilds failed.\n-define do_postbuilds\n-  @E=0;\\\n-  for p in $(POSTBUILDS); do\\\n-    eval $$p;\\\n-    F=$$?;\\\n-    if [ $$F -ne 0 ]; then\\\n-      E=$$F;\\\n-    fi;\\\n-  done;\\\n-  if [ $$E -ne 0 ]; then\\\n-    rm -rf \"$@\";\\\n-    exit $$E;\\\n-  fi\n-endef\n-\n-# do_cmd: run a command via the above cmd_foo names, if necessary.\n-# Should always run for a given target to handle command-line changes.\n-# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n-# Third argument, if non-zero, makes it do POSTBUILDS processing.\n-# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n-# spaces already and dirx strips the ? characters.\n-define do_cmd\n-$(if $(or $(command_changed),$(prereq_changed)),\n-  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n-  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n-  $(if $(findstring flock,$(word 2,$(cmd_$1))),\n-    @$(cmd_$(1))\n-    @echo \"  $(quiet_cmd_$(1)): Finished\",\n-    @$(cmd_$(1))\n-  )\n-  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n-  @$(if $(2),$(fixup_dep))\n-  $(if $(and $(3), $(POSTBUILDS)),\n-    $(call do_postbuilds)\n-  )\n-)\n-endef\n-\n-# Declare the \"all\" target first so it is the default,\n-# even though we don't have the deps yet.\n-.PHONY: all\n-all:\n-\n-# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n-# do_cmd.\n-.PHONY: FORCE_DO_CMD\n-FORCE_DO_CMD:\n-\n-TOOLSET := target\n-# Suffix rules, putting all outputs into $(obj).\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.m FORCE_DO_CMD\n-\t@$(call do_cmd,objc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.mm FORCE_DO_CMD\n-\t@$(call do_cmd,objcxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.m FORCE_DO_CMD\n-\t@$(call do_cmd,objc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.mm FORCE_DO_CMD\n-\t@$(call do_cmd,objcxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.m FORCE_DO_CMD\n-\t@$(call do_cmd,objc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.mm FORCE_DO_CMD\n-\t@$(call do_cmd,objcxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n-  include src/libuv/run-benchmarks.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-tests.target.mk)))),)\n-  include src/libuv/run-tests.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/uv.target.mk)))),)\n-  include src/libuv/uv.target.mk\n-endif\n-\n-#quiet_cmd_regen_makefile = ACTION Regenerating $@\n-#cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" -Isrc/libuv/common.gypi \"--depth=.\" \"--generator-output=mk/libuv/ia32/mac\" \"-Ddefault_configuration=Default\" \"-Dcomponent=static_library\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=mac\" src/libuv/uv.gyp\n-#Makefile: $(srcdir)/src/libuv/uv.gyp $(srcdir)/src/libuv/common.gypi\n-#\t$(call do_cmd,regen_makefile)\n-\n-# \"all\" is a concatenation of the \"all\" targets from all the included\n-# sub-makefiles. This is just here to clarify.\n-all:\n-\n-# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n-# target in our tree. Only consider the ones with .d (dependency) info:\n-d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n-ifneq ($(d_files),)\n-  # Rather than include each individual .d file, concatenate them into a\n-  # single file which make is able to load faster.  We split this into\n-  # commands that take 1000 files at a time to avoid overflowing the\n-  # command line.\n-  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n-\n-  ifneq ($(word 1001,$(d_files)),)\n-    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n-  endif\n-\n-  # make looks for ways to re-generate included makefiles, but in our case, we\n-  # don't have a direct way. Explicitly telling make that it has nothing to do\n-  # for them makes it go faster.\n-  $(depsdir)/all.deps: ;\n-\n-  include $(depsdir)/all.deps\n-endif"}, {"sha": "bd4059840ea8a6efa2825d0f5ea849e60f15b16b", "filename": "mk/libuv/ia32/mac/gyp-mac-tool", "status": "removed", "additions": 0, "deletions": 193, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Fmac%2Fgyp-mac-tool", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Fmac%2Fgyp-mac-tool", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2Fgyp-mac-tool?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,193 +0,0 @@\n-#!/usr/bin/env python\n-# Generated by gyp. Do not edit.\n-# Copyright (c) 2011 Google Inc. All rights reserved.\n-# Use of this source code is governed by a BSD-style license that can be\n-# found in the LICENSE file.\n-\n-\"\"\"Utility functions to perform Xcode-style build steps.\n-\n-These functions are executed via gyp-mac-tool when using the Makefile generator.\n-\"\"\"\n-\n-import os\n-import fcntl\n-import plistlib\n-import shutil\n-import string\n-import subprocess\n-import sys\n-\n-\n-def main(args):\n-  executor = MacTool()\n-  executor.Dispatch(args)\n-\n-\n-class MacTool(object):\n-  \"\"\"This class performs all the Mac tooling steps. The methods can either be\n-  executed directly, or dispatched from an argument list.\"\"\"\n-\n-  def Dispatch(self, args):\n-    \"\"\"Dispatches a string command to a method.\"\"\"\n-    if len(args) < 1:\n-      raise Exception(\"Not enough arguments\")\n-\n-    method = \"Exec%s\" % self._CommandifyName(args[0])\n-    getattr(self, method)(*args[1:])\n-\n-  def _CommandifyName(self, name_string):\n-    \"\"\"Transforms a tool name like copy-info-plist to CopyInfoPlist\"\"\"\n-    return name_string.title().replace('-', '')\n-\n-  def ExecFlock(self, lockfile, *cmd_list):\n-    \"\"\"Emulates the most basic behavior of Linux's flock(1).\"\"\"\n-    # Rely on exception handling to report errors.\n-    fd = os.open(lockfile, os.O_RDONLY|os.O_NOCTTY|os.O_CREAT, 0o666)\n-    fcntl.flock(fd, fcntl.LOCK_EX)\n-    return subprocess.call(cmd_list)\n-\n-  def ExecCopyInfoPlist(self, source, dest):\n-    \"\"\"Copies the |source| Info.plist to the destination directory |dest|.\"\"\"\n-    # Read the source Info.plist into memory.\n-    fd = open(source, 'r')\n-    lines = fd.read()\n-    fd.close()\n-\n-    # Go through all the environment variables and replace them as variables in\n-    # the file.\n-    for key in os.environ:\n-      if key.startswith('_'):\n-        continue\n-      evar = '${%s}' % key\n-      lines = string.replace(lines, evar, os.environ[key])\n-\n-    # Write out the file with variables replaced.\n-    fd = open(dest, 'w')\n-    fd.write(lines)\n-    fd.close()\n-\n-    # Now write out PkgInfo file now that the Info.plist file has been\n-    # \"compiled\".\n-    self._WritePkgInfo(dest)\n-\n-  def _WritePkgInfo(self, info_plist):\n-    \"\"\"This writes the PkgInfo file from the data stored in Info.plist.\"\"\"\n-    plist = plistlib.readPlist(info_plist)\n-    if not plist:\n-      return\n-\n-    # Only create PkgInfo for executable types.\n-    package_type = plist['CFBundlePackageType']\n-    if package_type != 'APPL':\n-      return\n-\n-    # The format of PkgInfo is eight characters, representing the bundle type\n-    # and bundle signature, each four characters. If that is missing, four\n-    # '?' characters are used instead.\n-    signature_code = plist['CFBundleSignature']\n-    if len(signature_code) != 4:\n-      signature_code = '?' * 4\n-\n-    dest = os.path.join(os.path.dirname(info_plist), 'PkgInfo')\n-    fp = open(dest, 'w')\n-    fp.write('%s%s' % (package_type, signature_code))\n-    fp.close()\n-\n-  def ExecPackageFramework(self, framework, version):\n-    \"\"\"Takes a path to Something.framework and the Current version of that and\n-    sets up all the symlinks.\"\"\"\n-    # Find the name of the binary based on the part before the \".framework\".\n-    binary = os.path.basename(framework).split('.')[0]\n-\n-    CURRENT = 'Current'\n-    RESOURCES = 'Resources'\n-    VERSIONS = 'Versions'\n-\n-    if not os.path.exists(os.path.join(framework, VERSIONS, version, binary)):\n-      # Binary-less frameworks don't seem to contain symlinks (see e.g.\n-      # chromium's out/Debug/org.chromium.Chromium.manifest/ bundle).\n-      return\n-\n-    # Move into the framework directory to set the symlinks correctly.\n-    pwd = os.getcwd()\n-    os.chdir(framework)\n-\n-    # Set up the Current version.\n-    self._Relink(version, os.path.join(VERSIONS, CURRENT))\n-\n-    # Set up the root symlinks.\n-    self._Relink(os.path.join(VERSIONS, CURRENT, binary), binary)\n-    self._Relink(os.path.join(VERSIONS, CURRENT, RESOURCES), RESOURCES)\n-\n-    # Back to where we were before!\n-    os.chdir(pwd)\n-\n-  def _Relink(self, dest, link):\n-    \"\"\"Creates a symlink to |dest| named |link|. If |link| already exists,\n-    it is overwritten.\"\"\"\n-    if os.path.lexists(link):\n-      os.remove(link)\n-    os.symlink(dest, link)\n-\n-  def ExecCopyBundleResource(self, source, dest):\n-    \"\"\"Copies a resource file to the bundle/Resources directory, performing any\n-    necessary compilation on each resource.\"\"\"\n-    extension = os.path.splitext(source)[1].lower()\n-    if os.path.isdir(source):\n-      # Copy tree.\n-      if os.path.exists(dest):\n-        shutil.rmtree(dest)\n-      shutil.copytree(source, dest)\n-    elif extension == '.xib':\n-      self._CopyXIBFile(source, dest)\n-    elif extension == '.strings':\n-      self._CopyStringsFile(source, dest)\n-    # TODO: Given that files with arbitrary extensions can be copied to the\n-    # bundle, we will want to get rid of this whitelist eventually.\n-    elif extension in [\n-        '.icns', '.manifest', '.pak', '.pdf', '.png', '.sb', '.sh',\n-        '.ttf', '.sdef']:\n-      shutil.copyfile(source, dest)\n-    else:\n-      raise NotImplementedError(\n-          \"Don't know how to copy bundle resources of type %s while copying \"\n-          \"%s to %s)\" % (extension, source, dest))\n-\n-  def _CopyXIBFile(self, source, dest):\n-    \"\"\"Compiles a XIB file with ibtool into a binary plist in the bundle.\"\"\"\n-    args = ['/Developer/usr/bin/ibtool', '--errors', '--warnings',\n-        '--notices', '--output-format', 'human-readable-text', '--compile',\n-        dest, source]\n-    subprocess.call(args)\n-\n-  def _CopyStringsFile(self, source, dest):\n-    \"\"\"Copies a .strings file using iconv to reconvert the input into UTF-16.\"\"\"\n-    input_code = self._DetectInputEncoding(source) or \"UTF-8\"\n-    fp = open(dest, 'w')\n-    args = ['/usr/bin/iconv', '--from-code', input_code, '--to-code',\n-        'UTF-16', source]\n-    subprocess.call(args, stdout=fp)\n-    fp.close()\n-\n-  def _DetectInputEncoding(self, file_name):\n-    \"\"\"Reads the first few bytes from file_name and tries to guess the text\n-    encoding. Returns None as a guess if it can't detect it.\"\"\"\n-    fp = open(file_name, 'rb')\n-    try:\n-      header = fp.read(3)\n-    except e:\n-      fp.close()\n-      return None\n-    fp.close()\n-    if header.startswith(\"\\xFE\\xFF\"):\n-      return \"UTF-16BE\"\n-    elif header.startswith(\"\\xFF\\xFE\"):\n-      return \"UTF-16LE\"\n-    elif header.startswith(\"\\xEF\\xBB\\xBF\"):\n-      return \"UTF-8\"\n-    else:\n-      return None\n-\n-\n-if __name__ == '__main__':\n-  sys.exit(main(sys.argv[1:]))"}, {"sha": "b8cc0a1c483ec1c92b32eced1e061ec00b73d65d", "filename": "mk/libuv/ia32/mac/src/libuv/run-benchmarks.target.mk", "status": "removed", "additions": 0, "deletions": 149, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,149 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-benchmarks\n-DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG' \\\n-\t'-DEV_VERIFY=2'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug := -Os \\\n-\t-gdwarf-2 \\\n-\t-fvisibility=hidden \\\n-\t-Wnewline-eof \\\n-\t-arch i386 \\\n-\t-fno-strict-aliasing \\\n-\t-Wall \\\n-\t-Wendif-labels \\\n-\t-W \\\n-\t-Wno-unused-parameter\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := -fno-rtti \\\n-\t-fno-exceptions \\\n-\t-fvisibility-inlines-hidden \\\n-\t-fno-threadsafe-statics\n-\n-# Flags passed to only ObjC files.\n-CFLAGS_OBJC_Debug := \n-\n-# Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Debug := \n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include\n-\n-DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release := -Os \\\n-\t-gdwarf-2 \\\n-\t-fvisibility=hidden \\\n-\t-Wnewline-eof \\\n-\t-arch i386 \\\n-\t-fno-strict-aliasing \\\n-\t-Wall \\\n-\t-Wendif-labels \\\n-\t-W \\\n-\t-Wno-unused-parameter\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := -fno-rtti \\\n-\t-fno-exceptions \\\n-\t-fvisibility-inlines-hidden \\\n-\t-fno-threadsafe-statics\n-\n-# Flags passed to only ObjC files.\n-CFLAGS_OBJC_Release := \n-\n-# Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Release := \n-\n-INCS_Release := -I$(srcdir)/src/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-ping-pongs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pound.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/run-benchmarks.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(builddir)/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Debug := -Wl,-search_paths_first \\\n-\t-arch i386 \\\n-\t-L$(builddir)\n-\n-LDFLAGS_Release := -Wl,-search_paths_first \\\n-\t-arch i386 \\\n-\t-L$(builddir)\n-\n-LIBS := -framework Carbon \\\n-\t-framework CoreServices\n-\n-$(builddir)/run-benchmarks: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-benchmarks: LIBS := $(LIBS)\n-$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(builddir)/libuv.a\n-$(builddir)/run-benchmarks: TOOLSET := $(TOOLSET)\n-$(builddir)/run-benchmarks: $(OBJS) $(builddir)/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-benchmarks\n-# Add target alias\n-.PHONY: run-benchmarks\n-run-benchmarks: $(builddir)/run-benchmarks\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-benchmarks\n-"}, {"sha": "be0c2c60856339d4ebd5ffe72969bab27fb998b2", "filename": "mk/libuv/ia32/mac/src/libuv/run-tests.target.mk", "status": "removed", "additions": 0, "deletions": 192, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,192 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-tests\n-DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG' \\\n-\t'-DEV_VERIFY=2'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug := -Os \\\n-\t-gdwarf-2 \\\n-\t-fvisibility=hidden \\\n-\t-Wnewline-eof \\\n-\t-arch i386 \\\n-\t-fno-strict-aliasing \\\n-\t-Wall \\\n-\t-Wendif-labels \\\n-\t-W \\\n-\t-Wno-unused-parameter\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := -fno-rtti \\\n-\t-fno-exceptions \\\n-\t-fvisibility-inlines-hidden \\\n-\t-fno-threadsafe-statics\n-\n-# Flags passed to only ObjC files.\n-CFLAGS_OBJC_Debug := \n-\n-# Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Debug := \n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include\n-\n-DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release := -Os \\\n-\t-gdwarf-2 \\\n-\t-fvisibility=hidden \\\n-\t-Wnewline-eof \\\n-\t-arch i386 \\\n-\t-fno-strict-aliasing \\\n-\t-Wall \\\n-\t-Wendif-labels \\\n-\t-W \\\n-\t-Wno-unused-parameter\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := -fno-rtti \\\n-\t-fno-exceptions \\\n-\t-fvisibility-inlines-hidden \\\n-\t-fno-threadsafe-statics\n-\n-# Flags passed to only ObjC files.\n-CFLAGS_OBJC_Release := \n-\n-# Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Release := \n-\n-INCS_Release := -I$(srcdir)/src/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-util.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-cwd-and-chdir.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-eio-overflow.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-currentexe.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-memory.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-getsockname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc-threads.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-platform-output.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-process-title.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-stdio-over-pipes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind6-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-close.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-flags.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect6-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-mutexes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-options.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-counters-init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(builddir)/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Debug := -Wl,-search_paths_first \\\n-\t-arch i386 \\\n-\t-L$(builddir)\n-\n-LDFLAGS_Release := -Wl,-search_paths_first \\\n-\t-arch i386 \\\n-\t-L$(builddir)\n-\n-LIBS := -framework Carbon \\\n-\t-framework CoreServices\n-\n-$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-tests: LIBS := $(LIBS)\n-$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(builddir)/libuv.a\n-$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n-$(builddir)/run-tests: $(OBJS) $(builddir)/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-tests\n-# Add target alias\n-.PHONY: run-tests\n-run-tests: $(builddir)/run-tests\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-tests\n-"}, {"sha": "cef4568a6d0ba07e113ffc4bf6c6c81055759da9", "filename": "mk/libuv/ia32/mac/src/libuv/uv.Makefile", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Fuv.Makefile?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,6 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-export builddir_name ?= mk/libuv/ia32/mac/./src/libuv/out\n-.PHONY: all\n-all:\n-\t$(MAKE) -C ../.. uv run-benchmarks run-tests"}, {"sha": "98386060982485385f87aab97f6a571ef67e2bc5", "filename": "mk/libuv/ia32/mac/src/libuv/uv.target.mk", "status": "removed", "additions": 0, "deletions": 202, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,202 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := uv\n-DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DHAVE_CONFIG_H' \\\n-\t'-DEV_CONFIG_H=\"config_darwin.h\"' \\\n-\t'-DEIO_CONFIG_H=\"config_darwin.h\"' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG' \\\n-\t'-DEV_VERIFY=2'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug := -Os \\\n-\t-gdwarf-2 \\\n-\t-fvisibility=hidden \\\n-\t-Wnewline-eof \\\n-\t-arch i386 \\\n-\t-fno-strict-aliasing \\\n-\t-Wall \\\n-\t-Wendif-labels \\\n-\t-W \\\n-\t-Wno-unused-parameter\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := -fno-rtti \\\n-\t-fno-exceptions \\\n-\t-fvisibility-inlines-hidden \\\n-\t-fno-threadsafe-statics\n-\n-# Flags passed to only ObjC files.\n-CFLAGS_OBJC_Debug := \n-\n-# Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Debug := \n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include \\\n-\t-I$(srcdir)/src/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/libuv/src \\\n-\t-I$(srcdir)/src/libuv/src/unix/ev \\\n-\t-I$(srcdir)/src/libuv/src/ares/config_darwin\n-\n-DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DHAVE_CONFIG_H' \\\n-\t'-DEV_CONFIG_H=\"config_darwin.h\"' \\\n-\t'-DEIO_CONFIG_H=\"config_darwin.h\"' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release := -Os \\\n-\t-gdwarf-2 \\\n-\t-fvisibility=hidden \\\n-\t-Wnewline-eof \\\n-\t-arch i386 \\\n-\t-fno-strict-aliasing \\\n-\t-Wall \\\n-\t-Wendif-labels \\\n-\t-W \\\n-\t-Wno-unused-parameter\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := -fno-rtti \\\n-\t-fno-exceptions \\\n-\t-fvisibility-inlines-hidden \\\n-\t-fno-threadsafe-statics\n-\n-# Flags passed to only ObjC files.\n-CFLAGS_OBJC_Release := \n-\n-# Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Release := \n-\n-INCS_Release := -I$(srcdir)/src/libuv/include \\\n-\t-I$(srcdir)/src/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/libuv/src \\\n-\t-I$(srcdir)/src/libuv/src/unix/ev \\\n-\t-I$(srcdir)/src/libuv/src/ares/config_darwin\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_cancel.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__close_sockets.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_data.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_destroy.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_name.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_string.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_fds.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_string.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyaddr.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__get_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getnameinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getopt.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getsock.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_library_init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_llist.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_mkquery.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_nowarn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_options.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_aaaa_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_a_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_mx_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ns_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ptr_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_srv_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_txt_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_process.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_query.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__read_line.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_search.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_send.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strcasecmp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strdup.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strerror.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_timeout.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__timeval.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_version.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_writev.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/bitncmp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_net_pton.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_ntop.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/windows_port.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/core.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/uv-eio.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/fs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/udp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/tcp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/pipe.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/tty.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/stream.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/cares.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/dl.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/process.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/eio/eio.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/ev/ev.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/darwin.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/kqueue.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Debug := -arch i386 \\\n-\t-L$(builddir)\n-\n-LDFLAGS_Release := -arch i386 \\\n-\t-L$(builddir)\n-\n-LIBS := -lm\n-\n-$(builddir)/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/libuv.a: LIBS := $(LIBS)\n-$(builddir)/libuv.a: TOOLSET := $(TOOLSET)\n-$(builddir)/libuv.a: $(OBJS) FORCE_DO_CMD\n-\t$(call do_cmd,alink)\n-\n-all_deps += $(builddir)/libuv.a\n-# Add target alias\n-.PHONY: uv\n-uv: $(builddir)/libuv.a\n-\n-# Add target alias to \"all\" target.\n-.PHONY: all\n-all: uv\n-"}, {"sha": "1afa619357014f738e89c86c7c8d4121dcfc31ac", "filename": "mk/libuv/ia32/unix/linux/Makefile", "status": "removed", "additions": 0, "deletions": 354, "changes": 354, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Funix%2Flinux%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Funix%2Flinux%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2Flinux%2FMakefile?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,354 +0,0 @@\n-# We borrow heavily from the kernel build setup, though we are simpler since\n-# we don't have Kconfig tweaking settings on us.\n-\n-# The implicit make rules have it looking for RCS files, among other things.\n-# We instead explicitly write all the rules we care about.\n-# It's even quicker (saves ~200ms) to pass -r on the command line.\n-MAKEFLAGS=-r\n-\n-# The source directory tree.\n-srcdir := ../../../../..\n-abs_srcdir := $(abspath $(srcdir))\n-\n-# The name of the builddir.\n-builddir_name ?= out\n-\n-# The V=1 flag on command line makes us verbosely print command lines.\n-ifdef V\n-  quiet=\n-else\n-  quiet=quiet_\n-endif\n-\n-# Specify BUILDTYPE=Release on the command line for a release build.\n-BUILDTYPE ?= Debug\n-\n-# Directory all our build output goes into.\n-# Note that this must be two directories beneath src/ for unit tests to pass,\n-# as they reach into the src/ directory for data with relative paths.\n-builddir ?= $(builddir_name)/$(BUILDTYPE)\n-abs_builddir := $(abspath $(builddir))\n-depsdir := $(builddir)/.deps\n-\n-# Object output directory.\n-obj := $(builddir)/obj\n-abs_obj := $(abspath $(obj))\n-\n-# We build up a list of every single one of the targets so we can slurp in the\n-# generated dependency rule Makefiles in one pass.\n-all_deps :=\n-\n-\n-\n-# C++ apps need to be linked with g++.\n-#\n-# Note: flock is used to seralize linking. Linking is a memory-intensive\n-# process so running parallel links can often lead to thrashing.  To disable\n-# the serialization, override LINK via an envrionment variable as follows:\n-#\n-#   export LINK=g++\n-#\n-# This will allow make to invoke N linker processes as specified in -jN.\n-LINK ?= flock $(builddir)/linker.lock $(CXX)\n-\n-CC.target ?= $(CC)\n-CFLAGS.target ?= $(CFLAGS)\n-CXX.target ?= $(CXX)\n-CXXFLAGS.target ?= $(CXXFLAGS)\n-LINK.target ?= $(LINK)\n-LDFLAGS.target ?= $(LDFLAGS)\n-AR.target ?= $(AR)\n-ARFLAGS.target ?= crsT\n-\n-# N.B.: the logic of which commands to run should match the computation done\n-# in gyp's make.py where ARFLAGS.host etc. is computed.\n-# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n-# to replicate this environment fallback in make as well.\n-CC.host ?= gcc\n-CFLAGS.host ?=\n-CXX.host ?= g++\n-CXXFLAGS.host ?=\n-LINK.host ?= g++\n-LDFLAGS.host ?=\n-AR.host ?= ar\n-ARFLAGS.host := crsT\n-\n-# Define a dir function that can handle spaces.\n-# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n-# \"leading spaces cannot appear in the text of the first argument as written.\n-# These characters can be put into the argument value by variable substitution.\"\n-empty :=\n-space := $(empty) $(empty)\n-\n-# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n-replace_spaces = $(subst $(space),?,$1)\n-unreplace_spaces = $(subst ?,$(space),$1)\n-dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n-\n-# Flags to make gcc output dependency info.  Note that you need to be\n-# careful here to use the flags that ccache and distcc can understand.\n-# We write to a dep file on the side first and then rename at the end\n-# so we can't end up with a broken dep file.\n-depfile = $(depsdir)/$(call replace_spaces,$@).d\n-DEPFLAGS = -MMD -MF $(depfile).raw\n-\n-# We have to fixup the deps output in a few ways.\n-# (1) the file output should mention the proper .o file.\n-# ccache or distcc lose the path to the target, so we convert a rule of\n-# the form:\n-#   foobar.o: DEP1 DEP2\n-# into\n-#   path/to/foobar.o: DEP1 DEP2\n-# (2) we want missing files not to cause us to fail to build.\n-# We want to rewrite\n-#   foobar.o: DEP1 DEP2 \\\n-#               DEP3\n-# to\n-#   DEP1:\n-#   DEP2:\n-#   DEP3:\n-# so if the files are missing, they're just considered phony rules.\n-# We have to do some pretty insane escaping to get those backslashes\n-# and dollar signs past make, the shell, and sed at the same time.\n-# Doesn't work with spaces, but that's fine: .d files have spaces in\n-# their names replaced with other characters.\n-define fixup_dep\n-# The depfile may not exist if the input file didn't have any #includes.\n-touch $(depfile).raw\n-# Fixup path as in (1).\n-sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n-# Add extra rules as in (2).\n-# We remove slashes and replace spaces with new lines;\n-# remove blank lines;\n-# delete the first line and append a colon to the remaining lines.\n-sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n-  grep -v '^$$'                             |\\\n-  sed -e 1d -e 's|$$|:|'                     \\\n-    >> $(depfile)\n-rm $(depfile).raw\n-endef\n-\n-# Command definitions:\n-# - cmd_foo is the actual command to run;\n-# - quiet_cmd_foo is the brief-output summary of the command.\n-\n-quiet_cmd_cc = CC($(TOOLSET)) $@\n-cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_cxx = CXX($(TOOLSET)) $@\n-cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_touch = TOUCH $@\n-cmd_touch = touch $@\n-\n-quiet_cmd_copy = COPY $@\n-# send stderr to /dev/null to ignore messages when linking directories.\n-cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n-\n-quiet_cmd_alink = AR($(TOOLSET)) $@\n-cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) $(ARFLAGS.$(TOOLSET)) $@ $(filter %.o,$^)\n-\n-# Due to circular dependencies between libraries :(, we wrap the\n-# special \"figure out circular dependencies\" flags around the entire\n-# input list during linking.\n-quiet_cmd_link = LINK($(TOOLSET)) $@\n-cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n-\n-# We support two kinds of shared objects (.so):\n-# 1) shared_library, which is just bundling together many dependent libraries\n-# into a link line.\n-# 2) loadable_module, which is generating a module intended for dlopen().\n-#\n-# They differ only slightly:\n-# In the former case, we want to package all dependent code into the .so.\n-# In the latter case, we want to package just the API exposed by the\n-# outermost module.\n-# This means shared_library uses --whole-archive, while loadable_module doesn't.\n-# (Note that --whole-archive is incompatible with the --start-group used in\n-# normal linking.)\n-\n-# Other shared-object link notes:\n-# - Set SONAME to the library filename so our binaries don't reference\n-# the local, absolute paths used on the link command-line.\n-quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n-cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n-\n-quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n-cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n-\n-\n-# Define an escape_quotes function to escape single quotes.\n-# This allows us to handle quotes properly as long as we always use\n-# use single quotes and escape_quotes.\n-escape_quotes = $(subst ','\\'',$(1))\n-# This comment is here just to include a ' to unconfuse syntax highlighting.\n-# Define an escape_vars function to escape '$' variable syntax.\n-# This allows us to read/write command lines with shell variables (e.g.\n-# $LD_LIBRARY_PATH), without triggering make substitution.\n-escape_vars = $(subst $$,$$$$,$(1))\n-# Helper that expands to a shell command to echo a string exactly as it is in\n-# make. This uses printf instead of echo because printf's behaviour with respect\n-# to escape sequences is more portable than echo's across different shells\n-# (e.g., dash, bash).\n-exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n-\n-# Helper to compare the command we're about to run against the command\n-# we logged the last time we ran the command.  Produces an empty\n-# string (false) when the commands match.\n-# Tricky point: Make has no string-equality test function.\n-# The kernel uses the following, but it seems like it would have false\n-# positives, where one string reordered its arguments.\n-#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n-#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n-# We instead substitute each for the empty string into the other, and\n-# say they're equal if both substitutions produce the empty string.\n-# .d files contain ? instead of spaces, take that into account.\n-command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n-                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n-\n-# Helper that is non-empty when a prerequisite changes.\n-# Normally make does this implicitly, but we force rules to always run\n-# so we can check their command lines.\n-#   $? -- new prerequisites\n-#   $| -- order-only dependencies\n-prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n-\n-# Helper that executes all postbuilds, and deletes the output file when done\n-# if any of the postbuilds failed.\n-define do_postbuilds\n-  @E=0;\\\n-  for p in $(POSTBUILDS); do\\\n-    eval $$p;\\\n-    F=$$?;\\\n-    if [ $$F -ne 0 ]; then\\\n-      E=$$F;\\\n-    fi;\\\n-  done;\\\n-  if [ $$E -ne 0 ]; then\\\n-    rm -rf \"$@\";\\\n-    exit $$E;\\\n-  fi\n-endef\n-\n-# do_cmd: run a command via the above cmd_foo names, if necessary.\n-# Should always run for a given target to handle command-line changes.\n-# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n-# Third argument, if non-zero, makes it do POSTBUILDS processing.\n-# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n-# spaces already and dirx strips the ? characters.\n-define do_cmd\n-$(if $(or $(command_changed),$(prereq_changed)),\n-  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n-  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n-  $(if $(findstring flock,$(word 1,$(cmd_$1))),\n-    @$(cmd_$(1))\n-    @echo \"  $(quiet_cmd_$(1)): Finished\",\n-    @$(cmd_$(1))\n-  )\n-  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n-  @$(if $(2),$(fixup_dep))\n-  $(if $(and $(3), $(POSTBUILDS)),\n-    $(call do_postbuilds)\n-  )\n-)\n-endef\n-\n-# Declare the \"all\" target first so it is the default,\n-# even though we don't have the deps yet.\n-.PHONY: all\n-all:\n-\n-# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n-# do_cmd.\n-.PHONY: FORCE_DO_CMD\n-FORCE_DO_CMD:\n-\n-TOOLSET := target\n-# Suffix rules, putting all outputs into $(obj).\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n-  include src/libuv/run-benchmarks.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-tests.target.mk)))),)\n-  include src/libuv/run-tests.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/uv.target.mk)))),)\n-  include src/libuv/uv.target.mk\n-endif\n-\n-#quiet_cmd_regen_makefile = ACTION Regenerating $@\n-#cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" -Isrc/libuv/common.gypi \"--depth=.\" \"--generator-output=mk/libuv/ia32/unix/linux\" \"-Ddefault_configuration=Default\" \"-Dcomponent=static_library\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=linux\" src/libuv/uv.gyp\n-#Makefile: $(srcdir)/src/libuv/uv.gyp $(srcdir)/src/libuv/common.gypi\n-#\t$(call do_cmd,regen_makefile)\n-\n-# \"all\" is a concatenation of the \"all\" targets from all the included\n-# sub-makefiles. This is just here to clarify.\n-all:\n-\n-# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n-# target in our tree. Only consider the ones with .d (dependency) info:\n-d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n-ifneq ($(d_files),)\n-  # Rather than include each individual .d file, concatenate them into a\n-  # single file which make is able to load faster.  We split this into\n-  # commands that take 1000 files at a time to avoid overflowing the\n-  # command line.\n-  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n-\n-  ifneq ($(word 1001,$(d_files)),)\n-    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n-  endif\n-\n-  # make looks for ways to re-generate included makefiles, but in our case, we\n-  # don't have a direct way. Explicitly telling make that it has nothing to do\n-  # for them makes it go faster.\n-  $(depsdir)/all.deps: ;\n-\n-  include $(depsdir)/all.deps\n-endif"}, {"sha": "25b01014e79d4d77388813a41830e8d1ad32d84a", "filename": "mk/libuv/ia32/unix/linux/src/libuv/run-benchmarks.target.mk", "status": "removed", "additions": 0, "deletions": 122, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Funix%2Flinux%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Funix%2Flinux%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2Flinux%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,122 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-benchmarks\n-DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG' \\\n-\t'-DEV_VERIFY=2'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug := -pthread \\\n-\t-Wall \\\n-\t-ansi \\\n-\t-pthread \\\n-\t-fvisibility=hidden \\\n-\t-g \\\n-\t-O0\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include\n-\n-DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release := -pthread \\\n-\t-Wall \\\n-\t-ansi \\\n-\t-pthread \\\n-\t-fvisibility=hidden \\\n-\t-O3 \\\n-\t-fomit-frame-pointer \\\n-\t-fdata-sections \\\n-\t-ffunction-sections\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Release := -I$(srcdir)/src/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-ping-pongs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pound.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/run-benchmarks.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(obj).target/src/libuv/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Debug := -pthread\n-\n-LDFLAGS_Release := -pthread\n-\n-LIBS := -lrt\n-\n-$(builddir)/run-benchmarks: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-benchmarks: LIBS := $(LIBS)\n-$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n-$(builddir)/run-benchmarks: TOOLSET := $(TOOLSET)\n-$(builddir)/run-benchmarks: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-benchmarks\n-# Add target alias\n-.PHONY: run-benchmarks\n-run-benchmarks: $(builddir)/run-benchmarks\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-benchmarks\n-"}, {"sha": "a2fe0d2065e230c637dd3c17a8cb946dfad41850", "filename": "mk/libuv/ia32/unix/linux/src/libuv/run-tests.target.mk", "status": "removed", "additions": 0, "deletions": 165, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Funix%2Flinux%2Fsrc%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Funix%2Flinux%2Fsrc%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2Flinux%2Fsrc%2Flibuv%2Frun-tests.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,165 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-tests\n-DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG' \\\n-\t'-DEV_VERIFY=2'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug := -pthread \\\n-\t-Wall \\\n-\t-ansi \\\n-\t-pthread \\\n-\t-fvisibility=hidden \\\n-\t-g \\\n-\t-O0\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include\n-\n-DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release := -pthread \\\n-\t-Wall \\\n-\t-ansi \\\n-\t-pthread \\\n-\t-fvisibility=hidden \\\n-\t-O3 \\\n-\t-fomit-frame-pointer \\\n-\t-fdata-sections \\\n-\t-ffunction-sections\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Release := -I$(srcdir)/src/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-util.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-cwd-and-chdir.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-eio-overflow.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-currentexe.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-memory.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-getsockname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc-threads.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-platform-output.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-process-title.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-stdio-over-pipes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind6-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-close.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-flags.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect6-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-mutexes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-options.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-counters-init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(obj).target/src/libuv/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Debug := -pthread\n-\n-LDFLAGS_Release := -pthread\n-\n-LIBS := -lrt\n-\n-$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-tests: LIBS := $(LIBS)\n-$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n-$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n-$(builddir)/run-tests: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-tests\n-# Add target alias\n-.PHONY: run-tests\n-run-tests: $(builddir)/run-tests\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-tests\n-"}, {"sha": "fb013a6f4b16b54181d05c7a8e0557c9932aeeea", "filename": "mk/libuv/ia32/unix/linux/src/libuv/uv.Makefile", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Funix%2Flinux%2Fsrc%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Funix%2Flinux%2Fsrc%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2Flinux%2Fsrc%2Flibuv%2Fuv.Makefile?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,6 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-export builddir_name ?= mk/libuv/ia32/unix/linux/./src/libuv/out\n-.PHONY: all\n-all:\n-\t$(MAKE) -C ../.. uv run-benchmarks run-tests"}, {"sha": "60e0e8fd2def64a48356d5b48390bab1906ae4a5", "filename": "mk/libuv/ia32/unix/linux/src/libuv/uv.target.mk", "status": "removed", "additions": 0, "deletions": 189, "changes": 189, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Funix%2Flinux%2Fsrc%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Funix%2Flinux%2Fsrc%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2Flinux%2Fsrc%2Flibuv%2Fuv.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,189 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := uv\n-DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DHAVE_CONFIG_H' \\\n-\t'-DEV_CONFIG_H=\"config_linux.h\"' \\\n-\t'-DEIO_CONFIG_H=\"config_linux.h\"' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG' \\\n-\t'-DEV_VERIFY=2'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug := -pthread \\\n-\t-Wall \\\n-\t-ansi \\\n-\t-pthread \\\n-\t-fvisibility=hidden \\\n-\t-g \\\n-\t--std=gnu89 \\\n-\t-pedantic \\\n-\t-Wall \\\n-\t-Wextra \\\n-\t-Wno-unused-parameter \\\n-\t-g \\\n-\t-O0\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include \\\n-\t-I$(srcdir)/src/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/libuv/src \\\n-\t-I$(srcdir)/src/libuv/src/unix/ev \\\n-\t-I$(srcdir)/src/libuv/src/ares/config_linux\n-\n-DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DHAVE_CONFIG_H' \\\n-\t'-DEV_CONFIG_H=\"config_linux.h\"' \\\n-\t'-DEIO_CONFIG_H=\"config_linux.h\"' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release := -pthread \\\n-\t-Wall \\\n-\t-ansi \\\n-\t-pthread \\\n-\t-fvisibility=hidden \\\n-\t-g \\\n-\t--std=gnu89 \\\n-\t-pedantic \\\n-\t-Wall \\\n-\t-Wextra \\\n-\t-Wno-unused-parameter \\\n-\t-O3 \\\n-\t-fomit-frame-pointer \\\n-\t-fdata-sections \\\n-\t-ffunction-sections\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Release := -I$(srcdir)/src/libuv/include \\\n-\t-I$(srcdir)/src/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/libuv/src \\\n-\t-I$(srcdir)/src/libuv/src/unix/ev \\\n-\t-I$(srcdir)/src/libuv/src/ares/config_linux\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_cancel.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__close_sockets.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_data.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_destroy.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_name.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_string.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_fds.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_string.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyaddr.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__get_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getnameinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getopt.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getsock.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_library_init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_llist.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_mkquery.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_nowarn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_options.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_aaaa_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_a_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_mx_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ns_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ptr_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_srv_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_txt_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_process.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_query.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__read_line.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_search.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_send.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strcasecmp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strdup.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strerror.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_timeout.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__timeval.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_version.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_writev.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/bitncmp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_net_pton.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_ntop.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/windows_port.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/core.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/uv-eio.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/fs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/udp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/tcp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/pipe.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/tty.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/stream.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/cares.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/dl.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/process.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/eio/eio.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/ev/ev.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/linux.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Debug := -pthread\n-\n-LDFLAGS_Release := -pthread\n-\n-LIBS := -lm\n-\n-$(obj).target/src/libuv/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(obj).target/src/libuv/libuv.a: LIBS := $(LIBS)\n-$(obj).target/src/libuv/libuv.a: TOOLSET := $(TOOLSET)\n-$(obj).target/src/libuv/libuv.a: $(OBJS) FORCE_DO_CMD\n-\t$(call do_cmd,alink)\n-\n-all_deps += $(obj).target/src/libuv/libuv.a\n-# Add target alias\n-.PHONY: uv\n-uv: $(obj).target/src/libuv/libuv.a\n-\n-# Add target alias to \"all\" target.\n-.PHONY: all\n-all: uv\n-"}, {"sha": "8a6222228d891cc85a085544f4e2230a695cff68", "filename": "mk/libuv/ia32/win/Makefile", "status": "removed", "additions": 0, "deletions": 354, "changes": 354, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Fwin%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Fwin%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2FMakefile?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,354 +0,0 @@\n-# We borrow heavily from the kernel build setup, though we are simpler since\n-# we don't have Kconfig tweaking settings on us.\n-\n-# The implicit make rules have it looking for RCS files, among other things.\n-# We instead explicitly write all the rules we care about.\n-# It's even quicker (saves ~200ms) to pass -r on the command line.\n-MAKEFLAGS=-r\n-\n-# The source directory tree.\n-srcdir := ../../../..\n-abs_srcdir := $(abspath $(srcdir))\n-\n-# The name of the builddir.\n-builddir_name ?= out\n-\n-# The V=1 flag on command line makes us verbosely print command lines.\n-ifdef V\n-  quiet=\n-else\n-  quiet=quiet_\n-endif\n-\n-# Specify BUILDTYPE=Release on the command line for a release build.\n-BUILDTYPE ?= Debug\n-\n-# Directory all our build output goes into.\n-# Note that this must be two directories beneath src/ for unit tests to pass,\n-# as they reach into the src/ directory for data with relative paths.\n-builddir ?= $(builddir_name)/$(BUILDTYPE)\n-abs_builddir := $(abspath $(builddir))\n-depsdir := $(builddir)/.deps\n-\n-# Object output directory.\n-obj := $(builddir)/obj\n-abs_obj := $(abspath $(obj))\n-\n-# We build up a list of every single one of the targets so we can slurp in the\n-# generated dependency rule Makefiles in one pass.\n-all_deps :=\n-\n-\n-\n-# C++ apps need to be linked with g++.\n-#\n-# Note: flock is used to seralize linking. Linking is a memory-intensive\n-# process so running parallel links can often lead to thrashing.  To disable\n-# the serialization, override LINK via an envrionment variable as follows:\n-#\n-#   export LINK=g++\n-#\n-# This will allow make to invoke N linker processes as specified in -jN.\n-LINK ?= flock $(builddir)/linker.lock $(CXX)\n-\n-CC.target ?= $(CC)\n-CFLAGS.target ?= $(CFLAGS)\n-CXX.target ?= $(CXX)\n-CXXFLAGS.target ?= $(CXXFLAGS)\n-LINK.target ?= $(LINK)\n-LDFLAGS.target ?= $(LDFLAGS) \n-AR.target ?= $(AR)\n-ARFLAGS.target ?= crsT\n-\n-# N.B.: the logic of which commands to run should match the computation done\n-# in gyp's make.py where ARFLAGS.host etc. is computed.\n-# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n-# to replicate this environment fallback in make as well.\n-CC.host ?= gcc\n-CFLAGS.host ?=\n-CXX.host ?= g++\n-CXXFLAGS.host ?=\n-LINK.host ?= g++\n-LDFLAGS.host ?=\n-AR.host ?= ar\n-ARFLAGS.host := crsT\n-\n-# Define a dir function that can handle spaces.\n-# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n-# \"leading spaces cannot appear in the text of the first argument as written.\n-# These characters can be put into the argument value by variable substitution.\"\n-empty :=\n-space := $(empty) $(empty)\n-\n-# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n-replace_spaces = $(subst $(space),?,$1)\n-unreplace_spaces = $(subst ?,$(space),$1)\n-dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n-\n-# Flags to make gcc output dependency info.  Note that you need to be\n-# careful here to use the flags that ccache and distcc can understand.\n-# We write to a dep file on the side first and then rename at the end\n-# so we can't end up with a broken dep file.\n-depfile = $(depsdir)/$(call replace_spaces,$@).d\n-DEPFLAGS = -MMD -MF $(depfile).raw\n-\n-# We have to fixup the deps output in a few ways.\n-# (1) the file output should mention the proper .o file.\n-# ccache or distcc lose the path to the target, so we convert a rule of\n-# the form:\n-#   foobar.o: DEP1 DEP2\n-# into\n-#   path/to/foobar.o: DEP1 DEP2\n-# (2) we want missing files not to cause us to fail to build.\n-# We want to rewrite\n-#   foobar.o: DEP1 DEP2 \\\n-#               DEP3\n-# to\n-#   DEP1:\n-#   DEP2:\n-#   DEP3:\n-# so if the files are missing, they're just considered phony rules.\n-# We have to do some pretty insane escaping to get those backslashes\n-# and dollar signs past make, the shell, and sed at the same time.\n-# Doesn't work with spaces, but that's fine: .d files have spaces in\n-# their names replaced with other characters.\n-define fixup_dep\n-# The depfile may not exist if the input file didn't have any #includes.\n-touch $(depfile).raw\n-# Fixup path as in (1).\n-sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n-# Add extra rules as in (2).\n-# We remove slashes and replace spaces with new lines;\n-# remove blank lines;\n-# delete the first line and append a colon to the remaining lines.\n-sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n-  grep -v '^$$'                             |\\\n-  sed -e 1d -e 's|$$|:|'                     \\\n-    >> $(depfile)\n-rm $(depfile).raw\n-endef\n-\n-# Command definitions:\n-# - cmd_foo is the actual command to run;\n-# - quiet_cmd_foo is the brief-output summary of the command.\n-\n-quiet_cmd_cc = CC($(TOOLSET)) $@\n-cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_cxx = CXX($(TOOLSET)) $@\n-cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_touch = TOUCH $@\n-cmd_touch = touch $@\n-\n-quiet_cmd_copy = COPY $@\n-# send stderr to /dev/null to ignore messages when linking directories.\n-cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n-\n-quiet_cmd_alink = AR($(TOOLSET)) $@\n-cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) $(ARFLAGS.$(TOOLSET)) $@ $(filter %.o,$^)\n-\n-# Due to circular dependencies between libraries :(, we wrap the\n-# special \"figure out circular dependencies\" flags around the entire\n-# input list during linking.\n-quiet_cmd_link = LINK($(TOOLSET)) $@\n-cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n-\n-# We support two kinds of shared objects (.so):\n-# 1) shared_library, which is just bundling together many dependent libraries\n-# into a link line.\n-# 2) loadable_module, which is generating a module intended for dlopen().\n-#\n-# They differ only slightly:\n-# In the former case, we want to package all dependent code into the .so.\n-# In the latter case, we want to package just the API exposed by the\n-# outermost module.\n-# This means shared_library uses --whole-archive, while loadable_module doesn't.\n-# (Note that --whole-archive is incompatible with the --start-group used in\n-# normal linking.)\n-\n-# Other shared-object link notes:\n-# - Set SONAME to the library filename so our binaries don't reference\n-# the local, absolute paths used on the link command-line.\n-quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n-cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n-\n-quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n-cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n-\n-\n-# Define an escape_quotes function to escape single quotes.\n-# This allows us to handle quotes properly as long as we always use\n-# use single quotes and escape_quotes.\n-escape_quotes = $(subst ','\\'',$(1))\n-# This comment is here just to include a ' to unconfuse syntax highlighting.\n-# Define an escape_vars function to escape '$' variable syntax.\n-# This allows us to read/write command lines with shell variables (e.g.\n-# $LD_LIBRARY_PATH), without triggering make substitution.\n-escape_vars = $(subst $$,$$$$,$(1))\n-# Helper that expands to a shell command to echo a string exactly as it is in\n-# make. This uses printf instead of echo because printf's behaviour with respect\n-# to escape sequences is more portable than echo's across different shells\n-# (e.g., dash, bash).\n-exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n-\n-# Helper to compare the command we're about to run against the command\n-# we logged the last time we ran the command.  Produces an empty\n-# string (false) when the commands match.\n-# Tricky point: Make has no string-equality test function.\n-# The kernel uses the following, but it seems like it would have false\n-# positives, where one string reordered its arguments.\n-#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n-#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n-# We instead substitute each for the empty string into the other, and\n-# say they're equal if both substitutions produce the empty string.\n-# .d files contain ? instead of spaces, take that into account.\n-command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n-                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n-\n-# Helper that is non-empty when a prerequisite changes.\n-# Normally make does this implicitly, but we force rules to always run\n-# so we can check their command lines.\n-#   $? -- new prerequisites\n-#   $| -- order-only dependencies\n-prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n-\n-# Helper that executes all postbuilds, and deletes the output file when done\n-# if any of the postbuilds failed.\n-define do_postbuilds\n-  @E=0;\\\n-  for p in $(POSTBUILDS); do\\\n-    eval $$p;\\\n-    F=$$?;\\\n-    if [ $$F -ne 0 ]; then\\\n-      E=$$F;\\\n-    fi;\\\n-  done;\\\n-  if [ $$E -ne 0 ]; then\\\n-    rm -rf \"$@\";\\\n-    exit $$E;\\\n-  fi\n-endef\n-\n-# do_cmd: run a command via the above cmd_foo names, if necessary.\n-# Should always run for a given target to handle command-line changes.\n-# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n-# Third argument, if non-zero, makes it do POSTBUILDS processing.\n-# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n-# spaces already and dirx strips the ? characters.\n-define do_cmd\n-$(if $(or $(command_changed),$(prereq_changed)),\n-  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n-  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n-  $(if $(findstring flock,$(word 1,$(cmd_$1))),\n-    @$(cmd_$(1))\n-    @echo \"  $(quiet_cmd_$(1)): Finished\",\n-    @$(cmd_$(1))\n-  )\n-  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n-  @$(if $(2),$(fixup_dep))\n-  $(if $(and $(3), $(POSTBUILDS)),\n-    $(call do_postbuilds)\n-  )\n-)\n-endef\n-\n-# Declare the \"all\" target first so it is the default,\n-# even though we don't have the deps yet.\n-.PHONY: all\n-all:\n-\n-# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n-# do_cmd.\n-.PHONY: FORCE_DO_CMD\n-FORCE_DO_CMD:\n-\n-TOOLSET := target\n-# Suffix rules, putting all outputs into $(obj).\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n-  include src/libuv/run-benchmarks.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-tests.target.mk)))),)\n-  include src/libuv/run-tests.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/uv.target.mk)))),)\n-  include src/libuv/uv.target.mk\n-endif\n-\n-#quiet_cmd_regen_makefile = ACTION Regenerating $@\n-#cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" -Isrc/libuv/common.gypi \"--depth=.\" \"--generator-output=mk/libuv/ia32/win\" \"-Ddefault_configuration=Default\" \"-Dcomponent=static_library\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=win\" src/libuv/uv.gyp\n-#Makefile: $(srcdir)/src/libuv/uv.gyp $(srcdir)/src/libuv/common.gypi\n-#\t$(call do_cmd,regen_makefile)\n-\n-# \"all\" is a concatenation of the \"all\" targets from all the included\n-# sub-makefiles. This is just here to clarify.\n-all:\n-\n-# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n-# target in our tree. Only consider the ones with .d (dependency) info:\n-d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n-ifneq ($(d_files),)\n-  # Rather than include each individual .d file, concatenate them into a\n-  # single file which make is able to load faster.  We split this into\n-  # commands that take 1000 files at a time to avoid overflowing the\n-  # command line.\n-  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n-\n-  ifneq ($(word 1001,$(d_files)),)\n-    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n-  endif\n-\n-  # make looks for ways to re-generate included makefiles, but in our case, we\n-  # don't have a direct way. Explicitly telling make that it has nothing to do\n-  # for them makes it go faster.\n-  $(depsdir)/all.deps: ;\n-\n-  include $(depsdir)/all.deps\n-endif"}, {"sha": "25bf58f854886b60bb13d8e58485cddd463f426e", "filename": "mk/libuv/ia32/win/src/libuv/run-benchmarks.target.mk", "status": "removed", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,110 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-benchmarks\n-DEFS_Debug := '-DWIN32' \\\n-\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n-\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug := -g \\\n-\t-O0\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := \n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include\n-\n-DEFS_Release := '-DWIN32' \\\n-\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n-\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release := -O3 \\\n-\t-fomit-frame-pointer \\\n-\t-fdata-sections \\\n-\t-ffunction-sections\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := \n-\n-INCS_Release := -I$(srcdir)/src/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-ping-pongs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pound.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/run-benchmarks.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner-win.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(obj).target/src/libuv/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Debug := \n-\n-LDFLAGS_Release := \n-\n-LIBS := ws2_32.lib \\\n-\t-lws2_32.lib \\\n-\t-lpsapi.lib \\\n-\t-liphlpapi.lib\n-\n-$(builddir)/run-benchmarks: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-benchmarks: LIBS := $(LIBS)\n-$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n-$(builddir)/run-benchmarks: TOOLSET := $(TOOLSET)\n-$(builddir)/run-benchmarks: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-benchmarks\n-# Add target alias\n-.PHONY: run-benchmarks\n-run-benchmarks: $(builddir)/run-benchmarks\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-benchmarks\n-"}, {"sha": "51b62f7a3e2d58f64a4e3c2f9b1e33b874894567", "filename": "mk/libuv/ia32/win/src/libuv/run-tests.target.mk", "status": "removed", "additions": 0, "deletions": 153, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Frun-tests.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,153 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-tests\n-DEFS_Debug := '-DWIN32' \\\n-\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n-\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug := -g \\\n-\t-O0\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := \n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include\n-\n-DEFS_Release := '-DWIN32' \\\n-\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n-\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release := -O3 \\\n-\t-fomit-frame-pointer \\\n-\t-fdata-sections \\\n-\t-ffunction-sections\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := \n-\n-INCS_Release := -I$(srcdir)/src/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-util.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-cwd-and-chdir.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-eio-overflow.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-currentexe.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-memory.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-getsockname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc-threads.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-platform-output.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-process-title.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-stdio-over-pipes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind6-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-close.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-flags.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect6-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-mutexes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-options.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-counters-init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner-win.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(obj).target/src/libuv/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Debug := \n-\n-LDFLAGS_Release := \n-\n-LIBS := ws2_32.lib \\\n-\t-lws2_32.lib \\\n-\t-lpsapi.lib \\\n-\t-liphlpapi.lib\n-\n-$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-tests: LIBS := $(LIBS)\n-$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n-$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n-$(builddir)/run-tests: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-tests\n-# Add target alias\n-.PHONY: run-tests\n-run-tests: $(builddir)/run-tests\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-tests\n-"}, {"sha": "65df03050e5ce4c49deeea5be32fbeb52521410f", "filename": "mk/libuv/ia32/win/src/libuv/uv.Makefile", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Fuv.Makefile?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,6 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-export builddir_name ?= mk/libuv/ia32/win/./src/libuv/out\n-.PHONY: all\n-all:\n-\t$(MAKE) -C ../.. uv run-benchmarks run-tests"}, {"sha": "53576a0f93570eec5f0ad4cbe4d217315332edd9", "filename": "mk/libuv/ia32/win/src/libuv/uv.target.mk", "status": "removed", "additions": 0, "deletions": 171, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Fuv.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,171 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := uv\n-DEFS_Debug := '-DWIN32' \\\n-\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n-\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n-\t'-DHAVE_CONFIG_H' \\\n-\t'-D_WIN32_WINNT=0x0600' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug := -g \\\n-\t-O0\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := \n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include \\\n-\t-I$(srcdir)/src/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/libuv/src \\\n-\t-I$(srcdir)/src/libuv/src/ares/config_win32\n-\n-DEFS_Release := '-DWIN32' \\\n-\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n-\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n-\t'-DHAVE_CONFIG_H' \\\n-\t'-D_WIN32_WINNT=0x0600' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release := -O3 \\\n-\t-fomit-frame-pointer \\\n-\t-fdata-sections \\\n-\t-ffunction-sections\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := \n-\n-INCS_Release := -I$(srcdir)/src/libuv/include \\\n-\t-I$(srcdir)/src/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/libuv/src \\\n-\t-I$(srcdir)/src/libuv/src/ares/config_win32\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_cancel.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__close_sockets.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_data.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_destroy.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_name.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_string.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_fds.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_string.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyaddr.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__get_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getnameinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getopt.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getsock.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_library_init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_llist.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_mkquery.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_nowarn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_options.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_aaaa_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_a_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_mx_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ns_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ptr_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_srv_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_txt_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_process.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_query.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__read_line.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_search.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_send.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strcasecmp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strdup.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strerror.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_timeout.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__timeval.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_version.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_writev.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/bitncmp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_net_pton.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_ntop.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/windows_port.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getenv.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_platform.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/async.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/cares.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/core.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/dl.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/fs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/fs-event.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/handle.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/loop-watcher.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/pipe.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/process.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/req.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/stream.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/tcp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/tty.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/threadpool.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/timer.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/udp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/util.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/winapi.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/winsock.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Debug := \n-\n-LDFLAGS_Release := \n-\n-LIBS := \n-\n-$(obj).target/src/libuv/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(obj).target/src/libuv/libuv.a: LIBS := $(LIBS)\n-$(obj).target/src/libuv/libuv.a: TOOLSET := $(TOOLSET)\n-$(obj).target/src/libuv/libuv.a: $(OBJS) FORCE_DO_CMD\n-\t$(call do_cmd,alink)\n-\n-all_deps += $(obj).target/src/libuv/libuv.a\n-# Add target alias\n-.PHONY: uv\n-uv: $(obj).target/src/libuv/libuv.a\n-\n-# Add target alias to \"all\" target.\n-.PHONY: all\n-all: uv\n-"}, {"sha": "bae2ca0016bfdf2a39fe09977163c0590959e9af", "filename": "mk/libuv/x86_64/mac/Makefile", "status": "removed", "additions": 0, "deletions": 379, "changes": 379, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Fmac%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Fmac%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2FMakefile?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,379 +0,0 @@\n-# We borrow heavily from the kernel build setup, though we are simpler since\n-# we don't have Kconfig tweaking settings on us.\n-\n-# The implicit make rules have it looking for RCS files, among other things.\n-# We instead explicitly write all the rules we care about.\n-# It's even quicker (saves ~200ms) to pass -r on the command line.\n-MAKEFLAGS=-r\n-\n-# The source directory tree.\n-srcdir := ../../../..\n-abs_srcdir := $(abspath $(srcdir))\n-\n-# The name of the builddir.\n-builddir_name ?= out\n-\n-# The V=1 flag on command line makes us verbosely print command lines.\n-ifdef V\n-  quiet=\n-else\n-  quiet=quiet_\n-endif\n-\n-# Specify BUILDTYPE=Release on the command line for a release build.\n-BUILDTYPE ?= Debug\n-\n-# Directory all our build output goes into.\n-# Note that this must be two directories beneath src/ for unit tests to pass,\n-# as they reach into the src/ directory for data with relative paths.\n-builddir ?= $(builddir_name)/$(BUILDTYPE)\n-abs_builddir := $(abspath $(builddir))\n-depsdir := $(builddir)/.deps\n-\n-# Object output directory.\n-obj := $(builddir)/obj\n-abs_obj := $(abspath $(obj))\n-\n-# We build up a list of every single one of the targets so we can slurp in the\n-# generated dependency rule Makefiles in one pass.\n-all_deps :=\n-\n-\n-\n-# C++ apps need to be linked with g++.\n-#\n-# Note: flock is used to seralize linking. Linking is a memory-intensive\n-# process so running parallel links can often lead to thrashing.  To disable\n-# the serialization, override LINK via an envrionment variable as follows:\n-#\n-#   export LINK=g++\n-#\n-# This will allow make to invoke N linker processes as specified in -jN.\n-LINK ?= ./gyp-mac-tool flock $(builddir)/linker.lock $(CXX)\n-\n-CC.target ?= $(CC)\n-CFLAGS.target ?= $(CFLAGS)\n-CXX.target ?= $(CXX)\n-CXXFLAGS.target ?= $(CXXFLAGS)\n-LINK.target ?= $(LINK)\n-LDFLAGS.target ?= $(LDFLAGS) \n-AR.target ?= $(AR)\n-ARFLAGS.target ?= crs\n-\n-# N.B.: the logic of which commands to run should match the computation done\n-# in gyp's make.py where ARFLAGS.host etc. is computed.\n-# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n-# to replicate this environment fallback in make as well.\n-CC.host ?= gcc\n-CFLAGS.host ?=\n-CXX.host ?= g++\n-CXXFLAGS.host ?=\n-LINK.host ?= g++\n-LDFLAGS.host ?=\n-AR.host ?= ar\n-ARFLAGS.host := crs\n-\n-# Define a dir function that can handle spaces.\n-# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n-# \"leading spaces cannot appear in the text of the first argument as written.\n-# These characters can be put into the argument value by variable substitution.\"\n-empty :=\n-space := $(empty) $(empty)\n-\n-# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n-replace_spaces = $(subst $(space),?,$1)\n-unreplace_spaces = $(subst ?,$(space),$1)\n-dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n-\n-# Flags to make gcc output dependency info.  Note that you need to be\n-# careful here to use the flags that ccache and distcc can understand.\n-# We write to a dep file on the side first and then rename at the end\n-# so we can't end up with a broken dep file.\n-depfile = $(depsdir)/$(call replace_spaces,$@).d\n-DEPFLAGS = -MMD -MF $(depfile).raw\n-\n-# We have to fixup the deps output in a few ways.\n-# (1) the file output should mention the proper .o file.\n-# ccache or distcc lose the path to the target, so we convert a rule of\n-# the form:\n-#   foobar.o: DEP1 DEP2\n-# into\n-#   path/to/foobar.o: DEP1 DEP2\n-# (2) we want missing files not to cause us to fail to build.\n-# We want to rewrite\n-#   foobar.o: DEP1 DEP2 \\\n-#               DEP3\n-# to\n-#   DEP1:\n-#   DEP2:\n-#   DEP3:\n-# so if the files are missing, they're just considered phony rules.\n-# We have to do some pretty insane escaping to get those backslashes\n-# and dollar signs past make, the shell, and sed at the same time.\n-# Doesn't work with spaces, but that's fine: .d files have spaces in\n-# their names replaced with other characters.\n-define fixup_dep\n-# The depfile may not exist if the input file didn't have any #includes.\n-touch $(depfile).raw\n-# Fixup path as in (1).\n-sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n-# Add extra rules as in (2).\n-# We remove slashes and replace spaces with new lines;\n-# remove blank lines;\n-# delete the first line and append a colon to the remaining lines.\n-sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n-  grep -v '^$$'                             |\\\n-  sed -e 1d -e 's|$$|:|'                     \\\n-    >> $(depfile)\n-rm $(depfile).raw\n-endef\n-\n-# Command definitions:\n-# - cmd_foo is the actual command to run;\n-# - quiet_cmd_foo is the brief-output summary of the command.\n-\n-quiet_cmd_cc = CC($(TOOLSET)) $@\n-cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_cxx = CXX($(TOOLSET)) $@\n-cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_objc = CXX($(TOOLSET)) $@\n-cmd_objc = $(CC.$(TOOLSET)) $(GYP_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\n-\n-quiet_cmd_objcxx = CXX($(TOOLSET)) $@\n-cmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n-\n-# Commands for precompiled header files.\n-quiet_cmd_pch_c = CXX($(TOOLSET)) $@\n-cmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n-quiet_cmd_pch_cc = CXX($(TOOLSET)) $@\n-cmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n-quiet_cmd_pch_m = CXX($(TOOLSET)) $@\n-cmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\n-quiet_cmd_pch_mm = CXX($(TOOLSET)) $@\n-cmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n-\n-# gyp-mac-tool is written next to the root Makefile by gyp.\n-# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n-# already.\n-quiet_cmd_mac_tool = MACTOOL $(4) $<\n-cmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\n-\n-quiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\n-cmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\n-\n-quiet_cmd_infoplist = INFOPLIST $@\n-cmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n-\n-quiet_cmd_touch = TOUCH $@\n-cmd_touch = touch $@\n-\n-quiet_cmd_copy = COPY $@\n-# send stderr to /dev/null to ignore messages when linking directories.\n-cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n-\n-quiet_cmd_alink = LIBTOOL-STATIC $@\n-cmd_alink = rm -f $@ && libtool -static -o $@ $(filter %.o,$^)\n-\n-quiet_cmd_link = LINK($(TOOLSET)) $@\n-cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\n-\n-# TODO(thakis): Find out and document the difference between shared_library and\n-# loadable_module on mac.\n-quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n-cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\n-\n-# TODO(thakis): The solink_module rule is likely wrong. Xcode seems to pass\n-# -bundle -single_module here (for osmesa.so).\n-quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n-cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n-\n-\n-# Define an escape_quotes function to escape single quotes.\n-# This allows us to handle quotes properly as long as we always use\n-# use single quotes and escape_quotes.\n-escape_quotes = $(subst ','\\'',$(1))\n-# This comment is here just to include a ' to unconfuse syntax highlighting.\n-# Define an escape_vars function to escape '$' variable syntax.\n-# This allows us to read/write command lines with shell variables (e.g.\n-# $LD_LIBRARY_PATH), without triggering make substitution.\n-escape_vars = $(subst $$,$$$$,$(1))\n-# Helper that expands to a shell command to echo a string exactly as it is in\n-# make. This uses printf instead of echo because printf's behaviour with respect\n-# to escape sequences is more portable than echo's across different shells\n-# (e.g., dash, bash).\n-exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n-\n-# Helper to compare the command we're about to run against the command\n-# we logged the last time we ran the command.  Produces an empty\n-# string (false) when the commands match.\n-# Tricky point: Make has no string-equality test function.\n-# The kernel uses the following, but it seems like it would have false\n-# positives, where one string reordered its arguments.\n-#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n-#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n-# We instead substitute each for the empty string into the other, and\n-# say they're equal if both substitutions produce the empty string.\n-# .d files contain ? instead of spaces, take that into account.\n-command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n-                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n-\n-# Helper that is non-empty when a prerequisite changes.\n-# Normally make does this implicitly, but we force rules to always run\n-# so we can check their command lines.\n-#   $? -- new prerequisites\n-#   $| -- order-only dependencies\n-prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n-\n-# Helper that executes all postbuilds, and deletes the output file when done\n-# if any of the postbuilds failed.\n-define do_postbuilds\n-  @E=0;\\\n-  for p in $(POSTBUILDS); do\\\n-    eval $$p;\\\n-    F=$$?;\\\n-    if [ $$F -ne 0 ]; then\\\n-      E=$$F;\\\n-    fi;\\\n-  done;\\\n-  if [ $$E -ne 0 ]; then\\\n-    rm -rf \"$@\";\\\n-    exit $$E;\\\n-  fi\n-endef\n-\n-# do_cmd: run a command via the above cmd_foo names, if necessary.\n-# Should always run for a given target to handle command-line changes.\n-# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n-# Third argument, if non-zero, makes it do POSTBUILDS processing.\n-# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n-# spaces already and dirx strips the ? characters.\n-define do_cmd\n-$(if $(or $(command_changed),$(prereq_changed)),\n-  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n-  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n-  $(if $(findstring flock,$(word 2,$(cmd_$1))),\n-    @$(cmd_$(1))\n-    @echo \"  $(quiet_cmd_$(1)): Finished\",\n-    @$(cmd_$(1))\n-  )\n-  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n-  @$(if $(2),$(fixup_dep))\n-  $(if $(and $(3), $(POSTBUILDS)),\n-    $(call do_postbuilds)\n-  )\n-)\n-endef\n-\n-# Declare the \"all\" target first so it is the default,\n-# even though we don't have the deps yet.\n-.PHONY: all\n-all:\n-\n-# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n-# do_cmd.\n-.PHONY: FORCE_DO_CMD\n-FORCE_DO_CMD:\n-\n-TOOLSET := target\n-# Suffix rules, putting all outputs into $(obj).\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.m FORCE_DO_CMD\n-\t@$(call do_cmd,objc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.mm FORCE_DO_CMD\n-\t@$(call do_cmd,objcxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.m FORCE_DO_CMD\n-\t@$(call do_cmd,objc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.mm FORCE_DO_CMD\n-\t@$(call do_cmd,objcxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.m FORCE_DO_CMD\n-\t@$(call do_cmd,objc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.mm FORCE_DO_CMD\n-\t@$(call do_cmd,objcxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n-  include src/libuv/run-benchmarks.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-tests.target.mk)))),)\n-  include src/libuv/run-tests.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/uv.target.mk)))),)\n-  include src/libuv/uv.target.mk\n-endif\n-\n-#quiet_cmd_regen_makefile = ACTION Regenerating $@\n-#cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" -Isrc/libuv/common.gypi \"--depth=.\" \"--generator-output=mk/libuv/x86_64/mac\" \"-Ddefault_configuration=Default\" \"-Dcomponent=static_library\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=mac\" src/libuv/uv.gyp\n-#Makefile: $(srcdir)/src/libuv/uv.gyp $(srcdir)/src/libuv/common.gypi\n-#\t$(call do_cmd,regen_makefile)\n-\n-# \"all\" is a concatenation of the \"all\" targets from all the included\n-# sub-makefiles. This is just here to clarify.\n-all:\n-\n-# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n-# target in our tree. Only consider the ones with .d (dependency) info:\n-d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n-ifneq ($(d_files),)\n-  # Rather than include each individual .d file, concatenate them into a\n-  # single file which make is able to load faster.  We split this into\n-  # commands that take 1000 files at a time to avoid overflowing the\n-  # command line.\n-  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n-\n-  ifneq ($(word 1001,$(d_files)),)\n-    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n-  endif\n-\n-  # make looks for ways to re-generate included makefiles, but in our case, we\n-  # don't have a direct way. Explicitly telling make that it has nothing to do\n-  # for them makes it go faster.\n-  $(depsdir)/all.deps: ;\n-\n-  include $(depsdir)/all.deps\n-endif"}, {"sha": "bd4059840ea8a6efa2825d0f5ea849e60f15b16b", "filename": "mk/libuv/x86_64/mac/gyp-mac-tool", "status": "removed", "additions": 0, "deletions": 193, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Fmac%2Fgyp-mac-tool", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Fmac%2Fgyp-mac-tool", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fgyp-mac-tool?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,193 +0,0 @@\n-#!/usr/bin/env python\n-# Generated by gyp. Do not edit.\n-# Copyright (c) 2011 Google Inc. All rights reserved.\n-# Use of this source code is governed by a BSD-style license that can be\n-# found in the LICENSE file.\n-\n-\"\"\"Utility functions to perform Xcode-style build steps.\n-\n-These functions are executed via gyp-mac-tool when using the Makefile generator.\n-\"\"\"\n-\n-import os\n-import fcntl\n-import plistlib\n-import shutil\n-import string\n-import subprocess\n-import sys\n-\n-\n-def main(args):\n-  executor = MacTool()\n-  executor.Dispatch(args)\n-\n-\n-class MacTool(object):\n-  \"\"\"This class performs all the Mac tooling steps. The methods can either be\n-  executed directly, or dispatched from an argument list.\"\"\"\n-\n-  def Dispatch(self, args):\n-    \"\"\"Dispatches a string command to a method.\"\"\"\n-    if len(args) < 1:\n-      raise Exception(\"Not enough arguments\")\n-\n-    method = \"Exec%s\" % self._CommandifyName(args[0])\n-    getattr(self, method)(*args[1:])\n-\n-  def _CommandifyName(self, name_string):\n-    \"\"\"Transforms a tool name like copy-info-plist to CopyInfoPlist\"\"\"\n-    return name_string.title().replace('-', '')\n-\n-  def ExecFlock(self, lockfile, *cmd_list):\n-    \"\"\"Emulates the most basic behavior of Linux's flock(1).\"\"\"\n-    # Rely on exception handling to report errors.\n-    fd = os.open(lockfile, os.O_RDONLY|os.O_NOCTTY|os.O_CREAT, 0o666)\n-    fcntl.flock(fd, fcntl.LOCK_EX)\n-    return subprocess.call(cmd_list)\n-\n-  def ExecCopyInfoPlist(self, source, dest):\n-    \"\"\"Copies the |source| Info.plist to the destination directory |dest|.\"\"\"\n-    # Read the source Info.plist into memory.\n-    fd = open(source, 'r')\n-    lines = fd.read()\n-    fd.close()\n-\n-    # Go through all the environment variables and replace them as variables in\n-    # the file.\n-    for key in os.environ:\n-      if key.startswith('_'):\n-        continue\n-      evar = '${%s}' % key\n-      lines = string.replace(lines, evar, os.environ[key])\n-\n-    # Write out the file with variables replaced.\n-    fd = open(dest, 'w')\n-    fd.write(lines)\n-    fd.close()\n-\n-    # Now write out PkgInfo file now that the Info.plist file has been\n-    # \"compiled\".\n-    self._WritePkgInfo(dest)\n-\n-  def _WritePkgInfo(self, info_plist):\n-    \"\"\"This writes the PkgInfo file from the data stored in Info.plist.\"\"\"\n-    plist = plistlib.readPlist(info_plist)\n-    if not plist:\n-      return\n-\n-    # Only create PkgInfo for executable types.\n-    package_type = plist['CFBundlePackageType']\n-    if package_type != 'APPL':\n-      return\n-\n-    # The format of PkgInfo is eight characters, representing the bundle type\n-    # and bundle signature, each four characters. If that is missing, four\n-    # '?' characters are used instead.\n-    signature_code = plist['CFBundleSignature']\n-    if len(signature_code) != 4:\n-      signature_code = '?' * 4\n-\n-    dest = os.path.join(os.path.dirname(info_plist), 'PkgInfo')\n-    fp = open(dest, 'w')\n-    fp.write('%s%s' % (package_type, signature_code))\n-    fp.close()\n-\n-  def ExecPackageFramework(self, framework, version):\n-    \"\"\"Takes a path to Something.framework and the Current version of that and\n-    sets up all the symlinks.\"\"\"\n-    # Find the name of the binary based on the part before the \".framework\".\n-    binary = os.path.basename(framework).split('.')[0]\n-\n-    CURRENT = 'Current'\n-    RESOURCES = 'Resources'\n-    VERSIONS = 'Versions'\n-\n-    if not os.path.exists(os.path.join(framework, VERSIONS, version, binary)):\n-      # Binary-less frameworks don't seem to contain symlinks (see e.g.\n-      # chromium's out/Debug/org.chromium.Chromium.manifest/ bundle).\n-      return\n-\n-    # Move into the framework directory to set the symlinks correctly.\n-    pwd = os.getcwd()\n-    os.chdir(framework)\n-\n-    # Set up the Current version.\n-    self._Relink(version, os.path.join(VERSIONS, CURRENT))\n-\n-    # Set up the root symlinks.\n-    self._Relink(os.path.join(VERSIONS, CURRENT, binary), binary)\n-    self._Relink(os.path.join(VERSIONS, CURRENT, RESOURCES), RESOURCES)\n-\n-    # Back to where we were before!\n-    os.chdir(pwd)\n-\n-  def _Relink(self, dest, link):\n-    \"\"\"Creates a symlink to |dest| named |link|. If |link| already exists,\n-    it is overwritten.\"\"\"\n-    if os.path.lexists(link):\n-      os.remove(link)\n-    os.symlink(dest, link)\n-\n-  def ExecCopyBundleResource(self, source, dest):\n-    \"\"\"Copies a resource file to the bundle/Resources directory, performing any\n-    necessary compilation on each resource.\"\"\"\n-    extension = os.path.splitext(source)[1].lower()\n-    if os.path.isdir(source):\n-      # Copy tree.\n-      if os.path.exists(dest):\n-        shutil.rmtree(dest)\n-      shutil.copytree(source, dest)\n-    elif extension == '.xib':\n-      self._CopyXIBFile(source, dest)\n-    elif extension == '.strings':\n-      self._CopyStringsFile(source, dest)\n-    # TODO: Given that files with arbitrary extensions can be copied to the\n-    # bundle, we will want to get rid of this whitelist eventually.\n-    elif extension in [\n-        '.icns', '.manifest', '.pak', '.pdf', '.png', '.sb', '.sh',\n-        '.ttf', '.sdef']:\n-      shutil.copyfile(source, dest)\n-    else:\n-      raise NotImplementedError(\n-          \"Don't know how to copy bundle resources of type %s while copying \"\n-          \"%s to %s)\" % (extension, source, dest))\n-\n-  def _CopyXIBFile(self, source, dest):\n-    \"\"\"Compiles a XIB file with ibtool into a binary plist in the bundle.\"\"\"\n-    args = ['/Developer/usr/bin/ibtool', '--errors', '--warnings',\n-        '--notices', '--output-format', 'human-readable-text', '--compile',\n-        dest, source]\n-    subprocess.call(args)\n-\n-  def _CopyStringsFile(self, source, dest):\n-    \"\"\"Copies a .strings file using iconv to reconvert the input into UTF-16.\"\"\"\n-    input_code = self._DetectInputEncoding(source) or \"UTF-8\"\n-    fp = open(dest, 'w')\n-    args = ['/usr/bin/iconv', '--from-code', input_code, '--to-code',\n-        'UTF-16', source]\n-    subprocess.call(args, stdout=fp)\n-    fp.close()\n-\n-  def _DetectInputEncoding(self, file_name):\n-    \"\"\"Reads the first few bytes from file_name and tries to guess the text\n-    encoding. Returns None as a guess if it can't detect it.\"\"\"\n-    fp = open(file_name, 'rb')\n-    try:\n-      header = fp.read(3)\n-    except e:\n-      fp.close()\n-      return None\n-    fp.close()\n-    if header.startswith(\"\\xFE\\xFF\"):\n-      return \"UTF-16BE\"\n-    elif header.startswith(\"\\xFF\\xFE\"):\n-      return \"UTF-16LE\"\n-    elif header.startswith(\"\\xEF\\xBB\\xBF\"):\n-      return \"UTF-8\"\n-    else:\n-      return None\n-\n-\n-if __name__ == '__main__':\n-  sys.exit(main(sys.argv[1:]))"}, {"sha": "f5930c9dc564d3d53dedece6866cadf828f6aeb9", "filename": "mk/libuv/x86_64/mac/src/libuv/run-benchmarks.target.mk", "status": "removed", "additions": 0, "deletions": 149, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,149 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-benchmarks\n-DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG' \\\n-\t'-DEV_VERIFY=2'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug := -Os \\\n-\t-gdwarf-2 \\\n-\t-fvisibility=hidden \\\n-\t-Wnewline-eof \\\n-\t-arch x86_64 \\\n-\t-fno-strict-aliasing \\\n-\t-Wall \\\n-\t-Wendif-labels \\\n-\t-W \\\n-\t-Wno-unused-parameter\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := -fno-rtti \\\n-\t-fno-exceptions \\\n-\t-fvisibility-inlines-hidden \\\n-\t-fno-threadsafe-statics\n-\n-# Flags passed to only ObjC files.\n-CFLAGS_OBJC_Debug := \n-\n-# Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Debug := \n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include\n-\n-DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release := -Os \\\n-\t-gdwarf-2 \\\n-\t-fvisibility=hidden \\\n-\t-Wnewline-eof \\\n-\t-arch x86_64 \\\n-\t-fno-strict-aliasing \\\n-\t-Wall \\\n-\t-Wendif-labels \\\n-\t-W \\\n-\t-Wno-unused-parameter\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := -fno-rtti \\\n-\t-fno-exceptions \\\n-\t-fvisibility-inlines-hidden \\\n-\t-fno-threadsafe-statics\n-\n-# Flags passed to only ObjC files.\n-CFLAGS_OBJC_Release := \n-\n-# Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Release := \n-\n-INCS_Release := -I$(srcdir)/src/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-ping-pongs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pound.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/run-benchmarks.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(builddir)/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Debug := -Wl,-search_paths_first \\\n-\t-arch x86_64 \\\n-\t-L$(builddir)\n-\n-LDFLAGS_Release := -Wl,-search_paths_first \\\n-\t-arch x86_64 \\\n-\t-L$(builddir)\n-\n-LIBS := -framework Carbon \\\n-\t-framework CoreServices\n-\n-$(builddir)/run-benchmarks: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-benchmarks: LIBS := $(LIBS)\n-$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(builddir)/libuv.a\n-$(builddir)/run-benchmarks: TOOLSET := $(TOOLSET)\n-$(builddir)/run-benchmarks: $(OBJS) $(builddir)/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-benchmarks\n-# Add target alias\n-.PHONY: run-benchmarks\n-run-benchmarks: $(builddir)/run-benchmarks\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-benchmarks\n-"}, {"sha": "4694c7cfd4d6ad45c7dfeb6a8a059bb241257cc0", "filename": "mk/libuv/x86_64/mac/src/libuv/run-tests.target.mk", "status": "removed", "additions": 0, "deletions": 192, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,192 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-tests\n-DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG' \\\n-\t'-DEV_VERIFY=2'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug := -Os \\\n-\t-gdwarf-2 \\\n-\t-fvisibility=hidden \\\n-\t-Wnewline-eof \\\n-\t-arch x86_64 \\\n-\t-fno-strict-aliasing \\\n-\t-Wall \\\n-\t-Wendif-labels \\\n-\t-W \\\n-\t-Wno-unused-parameter\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := -fno-rtti \\\n-\t-fno-exceptions \\\n-\t-fvisibility-inlines-hidden \\\n-\t-fno-threadsafe-statics\n-\n-# Flags passed to only ObjC files.\n-CFLAGS_OBJC_Debug := \n-\n-# Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Debug := \n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include\n-\n-DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release := -Os \\\n-\t-gdwarf-2 \\\n-\t-fvisibility=hidden \\\n-\t-Wnewline-eof \\\n-\t-arch x86_64 \\\n-\t-fno-strict-aliasing \\\n-\t-Wall \\\n-\t-Wendif-labels \\\n-\t-W \\\n-\t-Wno-unused-parameter\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := -fno-rtti \\\n-\t-fno-exceptions \\\n-\t-fvisibility-inlines-hidden \\\n-\t-fno-threadsafe-statics\n-\n-# Flags passed to only ObjC files.\n-CFLAGS_OBJC_Release := \n-\n-# Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Release := \n-\n-INCS_Release := -I$(srcdir)/src/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-util.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-cwd-and-chdir.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-eio-overflow.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-currentexe.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-memory.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-getsockname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc-threads.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-platform-output.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-process-title.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-stdio-over-pipes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind6-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-close.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-flags.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect6-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-mutexes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-options.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-counters-init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(builddir)/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Debug := -Wl,-search_paths_first \\\n-\t-arch x86_64 \\\n-\t-L$(builddir)\n-\n-LDFLAGS_Release := -Wl,-search_paths_first \\\n-\t-arch x86_64 \\\n-\t-L$(builddir)\n-\n-LIBS := -framework Carbon \\\n-\t-framework CoreServices\n-\n-$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-tests: LIBS := $(LIBS)\n-$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(builddir)/libuv.a\n-$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n-$(builddir)/run-tests: $(OBJS) $(builddir)/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-tests\n-# Add target alias\n-.PHONY: run-tests\n-run-tests: $(builddir)/run-tests\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-tests\n-"}, {"sha": "48cdc76e175246be67d9d6ec786d0cb779cafb3d", "filename": "mk/libuv/x86_64/mac/src/libuv/uv.Makefile", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Fuv.Makefile?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,6 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-export builddir_name ?= mk/libuv/x86_64/mac/./src/libuv/out\n-.PHONY: all\n-all:\n-\t$(MAKE) -C ../.. uv run-benchmarks run-tests"}, {"sha": "385a64c9f538b732f45b8efa955c9272875f80e1", "filename": "mk/libuv/x86_64/mac/src/libuv/uv.target.mk", "status": "removed", "additions": 0, "deletions": 202, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,202 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := uv\n-DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DHAVE_CONFIG_H' \\\n-\t'-DEV_CONFIG_H=\"config_darwin.h\"' \\\n-\t'-DEIO_CONFIG_H=\"config_darwin.h\"' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG' \\\n-\t'-DEV_VERIFY=2'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug := -Os \\\n-\t-gdwarf-2 \\\n-\t-fvisibility=hidden \\\n-\t-Wnewline-eof \\\n-\t-arch x86_64 \\\n-\t-fno-strict-aliasing \\\n-\t-Wall \\\n-\t-Wendif-labels \\\n-\t-W \\\n-\t-Wno-unused-parameter\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := -fno-rtti \\\n-\t-fno-exceptions \\\n-\t-fvisibility-inlines-hidden \\\n-\t-fno-threadsafe-statics\n-\n-# Flags passed to only ObjC files.\n-CFLAGS_OBJC_Debug := \n-\n-# Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Debug := \n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include \\\n-\t-I$(srcdir)/src/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/libuv/src \\\n-\t-I$(srcdir)/src/libuv/src/unix/ev \\\n-\t-I$(srcdir)/src/libuv/src/ares/config_darwin\n-\n-DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DHAVE_CONFIG_H' \\\n-\t'-DEV_CONFIG_H=\"config_darwin.h\"' \\\n-\t'-DEIO_CONFIG_H=\"config_darwin.h\"' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release := -Os \\\n-\t-gdwarf-2 \\\n-\t-fvisibility=hidden \\\n-\t-Wnewline-eof \\\n-\t-arch x86_64 \\\n-\t-fno-strict-aliasing \\\n-\t-Wall \\\n-\t-Wendif-labels \\\n-\t-W \\\n-\t-Wno-unused-parameter\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := -fno-rtti \\\n-\t-fno-exceptions \\\n-\t-fvisibility-inlines-hidden \\\n-\t-fno-threadsafe-statics\n-\n-# Flags passed to only ObjC files.\n-CFLAGS_OBJC_Release := \n-\n-# Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Release := \n-\n-INCS_Release := -I$(srcdir)/src/libuv/include \\\n-\t-I$(srcdir)/src/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/libuv/src \\\n-\t-I$(srcdir)/src/libuv/src/unix/ev \\\n-\t-I$(srcdir)/src/libuv/src/ares/config_darwin\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_cancel.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__close_sockets.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_data.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_destroy.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_name.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_string.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_fds.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_string.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyaddr.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__get_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getnameinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getopt.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getsock.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_library_init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_llist.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_mkquery.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_nowarn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_options.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_aaaa_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_a_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_mx_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ns_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ptr_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_srv_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_txt_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_process.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_query.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__read_line.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_search.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_send.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strcasecmp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strdup.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strerror.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_timeout.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__timeval.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_version.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_writev.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/bitncmp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_net_pton.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_ntop.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/windows_port.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/core.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/uv-eio.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/fs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/udp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/tcp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/pipe.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/tty.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/stream.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/cares.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/dl.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/process.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/eio/eio.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/ev/ev.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/darwin.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/kqueue.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Debug := -arch x86_64 \\\n-\t-L$(builddir)\n-\n-LDFLAGS_Release := -arch x86_64 \\\n-\t-L$(builddir)\n-\n-LIBS := -lm\n-\n-$(builddir)/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/libuv.a: LIBS := $(LIBS)\n-$(builddir)/libuv.a: TOOLSET := $(TOOLSET)\n-$(builddir)/libuv.a: $(OBJS) FORCE_DO_CMD\n-\t$(call do_cmd,alink)\n-\n-all_deps += $(builddir)/libuv.a\n-# Add target alias\n-.PHONY: uv\n-uv: $(builddir)/libuv.a\n-\n-# Add target alias to \"all\" target.\n-.PHONY: all\n-all: uv\n-"}, {"sha": "d77345c740e8eee91318afc7283598c0dddcc0a7", "filename": "mk/libuv/x86_64/unix/freebsd/Makefile", "status": "removed", "additions": 0, "deletions": 354, "changes": 354, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Funix%2Ffreebsd%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Funix%2Ffreebsd%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Ffreebsd%2FMakefile?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,354 +0,0 @@\n-# We borrow heavily from the kernel build setup, though we are simpler since\n-# we don't have Kconfig tweaking settings on us.\n-\n-# The implicit make rules have it looking for RCS files, among other things.\n-# We instead explicitly write all the rules we care about.\n-# It's even quicker (saves ~200ms) to pass -r on the command line.\n-MAKEFLAGS=-r\n-\n-# The source directory tree.\n-srcdir := ../../../../..\n-abs_srcdir := $(abspath $(srcdir))\n-\n-# The name of the builddir.\n-builddir_name ?= out\n-\n-# The V=1 flag on command line makes us verbosely print command lines.\n-ifdef V\n-  quiet=\n-else\n-  quiet=quiet_\n-endif\n-\n-# Specify BUILDTYPE=Release on the command line for a release build.\n-BUILDTYPE ?= Debug\n-\n-# Directory all our build output goes into.\n-# Note that this must be two directories beneath src/ for unit tests to pass,\n-# as they reach into the src/ directory for data with relative paths.\n-builddir ?= $(builddir_name)/$(BUILDTYPE)\n-abs_builddir := $(abspath $(builddir))\n-depsdir := $(builddir)/.deps\n-\n-# Object output directory.\n-obj := $(builddir)/obj\n-abs_obj := $(abspath $(obj))\n-\n-# We build up a list of every single one of the targets so we can slurp in the\n-# generated dependency rule Makefiles in one pass.\n-all_deps :=\n-\n-\n-\n-# C++ apps need to be linked with g++.\n-#\n-# Note: flock is used to seralize linking. Linking is a memory-intensive\n-# process so running parallel links can often lead to thrashing.  To disable\n-# the serialization, override LINK via an envrionment variable as follows:\n-#\n-#   export LINK=g++\n-#\n-# This will allow make to invoke N linker processes as specified in -jN.\n-LINK ?= flock $(builddir)/linker.lock $(CXX)\n-\n-CC.target ?= $(CC)\n-CFLAGS.target ?= $(CFLAGS)\n-CXX.target ?= $(CXX)\n-CXXFLAGS.target ?= $(CXXFLAGS)\n-LINK.target ?= $(LINK)\n-LDFLAGS.target ?= $(LDFLAGS)\n-AR.target ?= $(AR)\n-ARFLAGS.target ?= crs\n-\n-# N.B.: the logic of which commands to run should match the computation done\n-# in gyp's make.py where ARFLAGS.host etc. is computed.\n-# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n-# to replicate this environment fallback in make as well.\n-CC.host ?= gcc\n-CFLAGS.host ?=\n-CXX.host ?= g++\n-CXXFLAGS.host ?=\n-LINK.host ?= g++\n-LDFLAGS.host ?=\n-AR.host ?= ar\n-ARFLAGS.host := crs\n-\n-# Define a dir function that can handle spaces.\n-# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n-# \"leading spaces cannot appear in the text of the first argument as written.\n-# These characters can be put into the argument value by variable substitution.\"\n-empty :=\n-space := $(empty) $(empty)\n-\n-# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n-replace_spaces = $(subst $(space),?,$1)\n-unreplace_spaces = $(subst ?,$(space),$1)\n-dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n-\n-# Flags to make gcc output dependency info.  Note that you need to be\n-# careful here to use the flags that ccache and distcc can understand.\n-# We write to a dep file on the side first and then rename at the end\n-# so we can't end up with a broken dep file.\n-depfile = $(depsdir)/$(call replace_spaces,$@).d\n-DEPFLAGS = -MMD -MF $(depfile).raw\n-\n-# We have to fixup the deps output in a few ways.\n-# (1) the file output should mention the proper .o file.\n-# ccache or distcc lose the path to the target, so we convert a rule of\n-# the form:\n-#   foobar.o: DEP1 DEP2\n-# into\n-#   path/to/foobar.o: DEP1 DEP2\n-# (2) we want missing files not to cause us to fail to build.\n-# We want to rewrite\n-#   foobar.o: DEP1 DEP2 \\\n-#               DEP3\n-# to\n-#   DEP1:\n-#   DEP2:\n-#   DEP3:\n-# so if the files are missing, they're just considered phony rules.\n-# We have to do some pretty insane escaping to get those backslashes\n-# and dollar signs past make, the shell, and sed at the same time.\n-# Doesn't work with spaces, but that's fine: .d files have spaces in\n-# their names replaced with other characters.\n-define fixup_dep\n-# The depfile may not exist if the input file didn't have any #includes.\n-touch $(depfile).raw\n-# Fixup path as in (1).\n-sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n-# Add extra rules as in (2).\n-# We remove slashes and replace spaces with new lines;\n-# remove blank lines;\n-# delete the first line and append a colon to the remaining lines.\n-sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n-  grep -v '^$$'                             |\\\n-  sed -e 1d -e 's|$$|:|'                     \\\n-    >> $(depfile)\n-rm $(depfile).raw\n-endef\n-\n-# Command definitions:\n-# - cmd_foo is the actual command to run;\n-# - quiet_cmd_foo is the brief-output summary of the command.\n-\n-quiet_cmd_cc = CC($(TOOLSET)) $@\n-cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_cxx = CXX($(TOOLSET)) $@\n-cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_touch = TOUCH $@\n-cmd_touch = touch $@\n-\n-quiet_cmd_copy = COPY $@\n-# send stderr to /dev/null to ignore messages when linking directories.\n-cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n-\n-quiet_cmd_alink = AR($(TOOLSET)) $@\n-cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) $(ARFLAGS.$(TOOLSET)) $@ $(filter %.o,$^)\n-\n-# Due to circular dependencies between libraries :(, we wrap the\n-# special \"figure out circular dependencies\" flags around the entire\n-# input list during linking.\n-quiet_cmd_link = LINK($(TOOLSET)) $@\n-cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n-\n-# We support two kinds of shared objects (.so):\n-# 1) shared_library, which is just bundling together many dependent libraries\n-# into a link line.\n-# 2) loadable_module, which is generating a module intended for dlopen().\n-#\n-# They differ only slightly:\n-# In the former case, we want to package all dependent code into the .so.\n-# In the latter case, we want to package just the API exposed by the\n-# outermost module.\n-# This means shared_library uses --whole-archive, while loadable_module doesn't.\n-# (Note that --whole-archive is incompatible with the --start-group used in\n-# normal linking.)\n-\n-# Other shared-object link notes:\n-# - Set SONAME to the library filename so our binaries don't reference\n-# the local, absolute paths used on the link command-line.\n-quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n-cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n-\n-quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n-cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n-\n-\n-# Define an escape_quotes function to escape single quotes.\n-# This allows us to handle quotes properly as long as we always use\n-# use single quotes and escape_quotes.\n-escape_quotes = $(subst ','\\'',$(1))\n-# This comment is here just to include a ' to unconfuse syntax highlighting.\n-# Define an escape_vars function to escape '$' variable syntax.\n-# This allows us to read/write command lines with shell variables (e.g.\n-# $LD_LIBRARY_PATH), without triggering make substitution.\n-escape_vars = $(subst $$,$$$$,$(1))\n-# Helper that expands to a shell command to echo a string exactly as it is in\n-# make. This uses printf instead of echo because printf's behaviour with respect\n-# to escape sequences is more portable than echo's across different shells\n-# (e.g., dash, bash).\n-exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n-\n-# Helper to compare the command we're about to run against the command\n-# we logged the last time we ran the command.  Produces an empty\n-# string (false) when the commands match.\n-# Tricky point: Make has no string-equality test function.\n-# The kernel uses the following, but it seems like it would have false\n-# positives, where one string reordered its arguments.\n-#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n-#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n-# We instead substitute each for the empty string into the other, and\n-# say they're equal if both substitutions produce the empty string.\n-# .d files contain ? instead of spaces, take that into account.\n-command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n-                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n-\n-# Helper that is non-empty when a prerequisite changes.\n-# Normally make does this implicitly, but we force rules to always run\n-# so we can check their command lines.\n-#   $? -- new prerequisites\n-#   $| -- order-only dependencies\n-prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n-\n-# Helper that executes all postbuilds, and deletes the output file when done\n-# if any of the postbuilds failed.\n-define do_postbuilds\n-  @E=0;\\\n-  for p in $(POSTBUILDS); do\\\n-    eval $$p;\\\n-    F=$$?;\\\n-    if [ $$F -ne 0 ]; then\\\n-      E=$$F;\\\n-    fi;\\\n-  done;\\\n-  if [ $$E -ne 0 ]; then\\\n-    rm -rf \"$@\";\\\n-    exit $$E;\\\n-  fi\n-endef\n-\n-# do_cmd: run a command via the above cmd_foo names, if necessary.\n-# Should always run for a given target to handle command-line changes.\n-# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n-# Third argument, if non-zero, makes it do POSTBUILDS processing.\n-# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n-# spaces already and dirx strips the ? characters.\n-define do_cmd\n-$(if $(or $(command_changed),$(prereq_changed)),\n-  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n-  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n-  $(if $(findstring flock,$(word 1,$(cmd_$1))),\n-    @$(cmd_$(1))\n-    @echo \"  $(quiet_cmd_$(1)): Finished\",\n-    @$(cmd_$(1))\n-  )\n-  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n-  @$(if $(2),$(fixup_dep))\n-  $(if $(and $(3), $(POSTBUILDS)),\n-    $(call do_postbuilds)\n-  )\n-)\n-endef\n-\n-# Declare the \"all\" target first so it is the default,\n-# even though we don't have the deps yet.\n-.PHONY: all\n-all:\n-\n-# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n-# do_cmd.\n-.PHONY: FORCE_DO_CMD\n-FORCE_DO_CMD:\n-\n-TOOLSET := target\n-# Suffix rules, putting all outputs into $(obj).\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n-  include src/libuv/run-benchmarks.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-tests.target.mk)))),)\n-  include src/libuv/run-tests.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/uv.target.mk)))),)\n-  include src/libuv/uv.target.mk\n-endif\n-\n-#quiet_cmd_regen_makefile = ACTION Regenerating $@\n-#cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" -Isrc/libuv/common.gypi \"--depth=.\" \"--generator-output=mk/libuv/x86_64/unix/freebsd\" \"-Ddefault_configuration=Default\" \"-Dcomponent=static_library\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=freebsd\" src/libuv/uv.gyp\n-#Makefile: $(srcdir)/src/libuv/uv.gyp $(srcdir)/src/libuv/common.gypi\n-#\t$(call do_cmd,regen_makefile)\n-\n-# \"all\" is a concatenation of the \"all\" targets from all the included\n-# sub-makefiles. This is just here to clarify.\n-all:\n-\n-# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n-# target in our tree. Only consider the ones with .d (dependency) info:\n-d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n-ifneq ($(d_files),)\n-  # Rather than include each individual .d file, concatenate them into a\n-  # single file which make is able to load faster.  We split this into\n-  # commands that take 1000 files at a time to avoid overflowing the\n-  # command line.\n-  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n-\n-  ifneq ($(word 1001,$(d_files)),)\n-    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n-  endif\n-\n-  # make looks for ways to re-generate included makefiles, but in our case, we\n-  # don't have a direct way. Explicitly telling make that it has nothing to do\n-  # for them makes it go faster.\n-  $(depsdir)/all.deps: ;\n-\n-  include $(depsdir)/all.deps\n-endif"}, {"sha": "d65e86b00d34b83f0ceb36f36c3cd0a34f098341", "filename": "mk/libuv/x86_64/unix/freebsd/src/libuv/run-benchmarks.target.mk", "status": "removed", "additions": 0, "deletions": 120, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Funix%2Ffreebsd%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Funix%2Ffreebsd%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Ffreebsd%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,120 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-benchmarks\n-DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG' \\\n-\t'-DEV_VERIFY=2'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug := -pthread \\\n-\t-Wall \\\n-\t-pthread \\\n-\t-fvisibility=hidden \\\n-\t-g \\\n-\t-O0\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include\n-\n-DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release := -pthread \\\n-\t-Wall \\\n-\t-pthread \\\n-\t-fvisibility=hidden \\\n-\t-O3 \\\n-\t-fomit-frame-pointer \\\n-\t-fdata-sections \\\n-\t-ffunction-sections\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Release := -I$(srcdir)/src/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-ping-pongs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pound.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/run-benchmarks.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(obj).target/src/libuv/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Debug := -pthread\n-\n-LDFLAGS_Release := -pthread\n-\n-LIBS := -lkvm\n-\n-$(builddir)/run-benchmarks: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-benchmarks: LIBS := $(LIBS)\n-$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n-$(builddir)/run-benchmarks: TOOLSET := $(TOOLSET)\n-$(builddir)/run-benchmarks: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-benchmarks\n-# Add target alias\n-.PHONY: run-benchmarks\n-run-benchmarks: $(builddir)/run-benchmarks\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-benchmarks\n-"}, {"sha": "67f22eabb9323e888b5b5949f381f92e3b09893c", "filename": "mk/libuv/x86_64/unix/freebsd/src/libuv/run-tests.target.mk", "status": "removed", "additions": 0, "deletions": 163, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Funix%2Ffreebsd%2Fsrc%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Funix%2Ffreebsd%2Fsrc%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Ffreebsd%2Fsrc%2Flibuv%2Frun-tests.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,163 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-tests\n-DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG' \\\n-\t'-DEV_VERIFY=2'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug := -pthread \\\n-\t-Wall \\\n-\t-pthread \\\n-\t-fvisibility=hidden \\\n-\t-g \\\n-\t-O0\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include\n-\n-DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release := -pthread \\\n-\t-Wall \\\n-\t-pthread \\\n-\t-fvisibility=hidden \\\n-\t-O3 \\\n-\t-fomit-frame-pointer \\\n-\t-fdata-sections \\\n-\t-ffunction-sections\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Release := -I$(srcdir)/src/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-util.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-cwd-and-chdir.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-eio-overflow.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-currentexe.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-memory.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-getsockname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc-threads.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-platform-output.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-process-title.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-stdio-over-pipes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind6-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-close.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-flags.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect6-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-mutexes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-options.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-counters-init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(obj).target/src/libuv/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Debug := -pthread\n-\n-LDFLAGS_Release := -pthread\n-\n-LIBS := -lkvm\n-\n-$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-tests: LIBS := $(LIBS)\n-$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n-$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n-$(builddir)/run-tests: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-tests\n-# Add target alias\n-.PHONY: run-tests\n-run-tests: $(builddir)/run-tests\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-tests\n-"}, {"sha": "f49a7fb5ebf51f5b1c3f28eb5ca2ee68a96ce90a", "filename": "mk/libuv/x86_64/unix/freebsd/src/libuv/uv.Makefile", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Funix%2Ffreebsd%2Fsrc%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Funix%2Ffreebsd%2Fsrc%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Ffreebsd%2Fsrc%2Flibuv%2Fuv.Makefile?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,6 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-export builddir_name ?= mk/libuv/x86_64/unix/freebsd/./src/libuv/out\n-.PHONY: all\n-all:\n-\t$(MAKE) -C ../.. uv run-benchmarks run-tests"}, {"sha": "49319f7c0238796c5a5ef059aa2b2f9643e8a7a4", "filename": "mk/libuv/x86_64/unix/freebsd/src/libuv/uv.target.mk", "status": "removed", "additions": 0, "deletions": 188, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Funix%2Ffreebsd%2Fsrc%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Funix%2Ffreebsd%2Fsrc%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Ffreebsd%2Fsrc%2Flibuv%2Fuv.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,188 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := uv\n-DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DHAVE_CONFIG_H' \\\n-\t'-DEV_CONFIG_H=\"config_freebsd.h\"' \\\n-\t'-DEIO_CONFIG_H=\"config_freebsd.h\"' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG' \\\n-\t'-DEV_VERIFY=2'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug := -pthread \\\n-\t-Wall \\\n-\t-pthread \\\n-\t-fvisibility=hidden \\\n-\t-g \\\n-\t--std=gnu89 \\\n-\t-pedantic \\\n-\t-Wall \\\n-\t-Wextra \\\n-\t-Wno-unused-parameter \\\n-\t-g \\\n-\t-O0\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include \\\n-\t-I$(srcdir)/src/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/libuv/src \\\n-\t-I$(srcdir)/src/libuv/src/unix/ev \\\n-\t-I$(srcdir)/src/libuv/src/ares/config_freebsd\n-\n-DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DHAVE_CONFIG_H' \\\n-\t'-DEV_CONFIG_H=\"config_freebsd.h\"' \\\n-\t'-DEIO_CONFIG_H=\"config_freebsd.h\"' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release := -pthread \\\n-\t-Wall \\\n-\t-pthread \\\n-\t-fvisibility=hidden \\\n-\t-g \\\n-\t--std=gnu89 \\\n-\t-pedantic \\\n-\t-Wall \\\n-\t-Wextra \\\n-\t-Wno-unused-parameter \\\n-\t-O3 \\\n-\t-fomit-frame-pointer \\\n-\t-fdata-sections \\\n-\t-ffunction-sections\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Release := -I$(srcdir)/src/libuv/include \\\n-\t-I$(srcdir)/src/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/libuv/src \\\n-\t-I$(srcdir)/src/libuv/src/unix/ev \\\n-\t-I$(srcdir)/src/libuv/src/ares/config_freebsd\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_cancel.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__close_sockets.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_data.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_destroy.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_name.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_string.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_fds.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_string.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyaddr.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__get_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getnameinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getopt.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getsock.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_library_init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_llist.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_mkquery.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_nowarn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_options.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_aaaa_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_a_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_mx_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ns_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ptr_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_srv_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_txt_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_process.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_query.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__read_line.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_search.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_send.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strcasecmp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strdup.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strerror.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_timeout.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__timeval.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_version.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_writev.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/bitncmp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_net_pton.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_ntop.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/windows_port.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/core.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/uv-eio.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/fs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/udp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/tcp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/pipe.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/tty.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/stream.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/cares.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/dl.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/process.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/eio/eio.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/ev/ev.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/freebsd.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/kqueue.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Debug := -pthread\n-\n-LDFLAGS_Release := -pthread\n-\n-LIBS := -lm\n-\n-$(obj).target/src/libuv/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(obj).target/src/libuv/libuv.a: LIBS := $(LIBS)\n-$(obj).target/src/libuv/libuv.a: TOOLSET := $(TOOLSET)\n-$(obj).target/src/libuv/libuv.a: $(OBJS) FORCE_DO_CMD\n-\t$(call do_cmd,alink)\n-\n-all_deps += $(obj).target/src/libuv/libuv.a\n-# Add target alias\n-.PHONY: uv\n-uv: $(obj).target/src/libuv/libuv.a\n-\n-# Add target alias to \"all\" target.\n-.PHONY: all\n-all: uv\n-"}, {"sha": "72da2207599688d63d2b31b5ddb1e3b1f3f0f9b4", "filename": "mk/libuv/x86_64/unix/linux/Makefile", "status": "removed", "additions": 0, "deletions": 354, "changes": 354, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Funix%2Flinux%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Funix%2Flinux%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Flinux%2FMakefile?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,354 +0,0 @@\n-# We borrow heavily from the kernel build setup, though we are simpler since\n-# we don't have Kconfig tweaking settings on us.\n-\n-# The implicit make rules have it looking for RCS files, among other things.\n-# We instead explicitly write all the rules we care about.\n-# It's even quicker (saves ~200ms) to pass -r on the command line.\n-MAKEFLAGS=-r\n-\n-# The source directory tree.\n-srcdir := ../../../../..\n-abs_srcdir := $(abspath $(srcdir))\n-\n-# The name of the builddir.\n-builddir_name ?= out\n-\n-# The V=1 flag on command line makes us verbosely print command lines.\n-ifdef V\n-  quiet=\n-else\n-  quiet=quiet_\n-endif\n-\n-# Specify BUILDTYPE=Release on the command line for a release build.\n-BUILDTYPE ?= Debug\n-\n-# Directory all our build output goes into.\n-# Note that this must be two directories beneath src/ for unit tests to pass,\n-# as they reach into the src/ directory for data with relative paths.\n-builddir ?= $(builddir_name)/$(BUILDTYPE)\n-abs_builddir := $(abspath $(builddir))\n-depsdir := $(builddir)/.deps\n-\n-# Object output directory.\n-obj := $(builddir)/obj\n-abs_obj := $(abspath $(obj))\n-\n-# We build up a list of every single one of the targets so we can slurp in the\n-# generated dependency rule Makefiles in one pass.\n-all_deps :=\n-\n-\n-\n-# C++ apps need to be linked with g++.\n-#\n-# Note: flock is used to seralize linking. Linking is a memory-intensive\n-# process so running parallel links can often lead to thrashing.  To disable\n-# the serialization, override LINK via an envrionment variable as follows:\n-#\n-#   export LINK=g++\n-#\n-# This will allow make to invoke N linker processes as specified in -jN.\n-LINK ?= flock $(builddir)/linker.lock $(CXX)\n-\n-CC.target ?= $(CC)\n-CFLAGS.target ?= $(CFLAGS)\n-CXX.target ?= $(CXX)\n-CXXFLAGS.target ?= $(CXXFLAGS)\n-LINK.target ?= $(LINK)\n-LDFLAGS.target ?= $(LDFLAGS)\n-AR.target ?= $(AR)\n-ARFLAGS.target ?= crs\n-\n-# N.B.: the logic of which commands to run should match the computation done\n-# in gyp's make.py where ARFLAGS.host etc. is computed.\n-# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n-# to replicate this environment fallback in make as well.\n-CC.host ?= gcc\n-CFLAGS.host ?=\n-CXX.host ?= g++\n-CXXFLAGS.host ?=\n-LINK.host ?= g++\n-LDFLAGS.host ?=\n-AR.host ?= ar\n-ARFLAGS.host := crs\n-\n-# Define a dir function that can handle spaces.\n-# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n-# \"leading spaces cannot appear in the text of the first argument as written.\n-# These characters can be put into the argument value by variable substitution.\"\n-empty :=\n-space := $(empty) $(empty)\n-\n-# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n-replace_spaces = $(subst $(space),?,$1)\n-unreplace_spaces = $(subst ?,$(space),$1)\n-dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n-\n-# Flags to make gcc output dependency info.  Note that you need to be\n-# careful here to use the flags that ccache and distcc can understand.\n-# We write to a dep file on the side first and then rename at the end\n-# so we can't end up with a broken dep file.\n-depfile = $(depsdir)/$(call replace_spaces,$@).d\n-DEPFLAGS = -MMD -MF $(depfile).raw\n-\n-# We have to fixup the deps output in a few ways.\n-# (1) the file output should mention the proper .o file.\n-# ccache or distcc lose the path to the target, so we convert a rule of\n-# the form:\n-#   foobar.o: DEP1 DEP2\n-# into\n-#   path/to/foobar.o: DEP1 DEP2\n-# (2) we want missing files not to cause us to fail to build.\n-# We want to rewrite\n-#   foobar.o: DEP1 DEP2 \\\n-#               DEP3\n-# to\n-#   DEP1:\n-#   DEP2:\n-#   DEP3:\n-# so if the files are missing, they're just considered phony rules.\n-# We have to do some pretty insane escaping to get those backslashes\n-# and dollar signs past make, the shell, and sed at the same time.\n-# Doesn't work with spaces, but that's fine: .d files have spaces in\n-# their names replaced with other characters.\n-define fixup_dep\n-# The depfile may not exist if the input file didn't have any #includes.\n-touch $(depfile).raw\n-# Fixup path as in (1).\n-sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n-# Add extra rules as in (2).\n-# We remove slashes and replace spaces with new lines;\n-# remove blank lines;\n-# delete the first line and append a colon to the remaining lines.\n-sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n-  grep -v '^$$'                             |\\\n-  sed -e 1d -e 's|$$|:|'                     \\\n-    >> $(depfile)\n-rm $(depfile).raw\n-endef\n-\n-# Command definitions:\n-# - cmd_foo is the actual command to run;\n-# - quiet_cmd_foo is the brief-output summary of the command.\n-\n-quiet_cmd_cc = CC($(TOOLSET)) $@\n-cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_cxx = CXX($(TOOLSET)) $@\n-cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_touch = TOUCH $@\n-cmd_touch = touch $@\n-\n-quiet_cmd_copy = COPY $@\n-# send stderr to /dev/null to ignore messages when linking directories.\n-cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n-\n-quiet_cmd_alink = AR($(TOOLSET)) $@\n-cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) $(ARFLAGS.$(TOOLSET)) $@ $(filter %.o,$^)\n-\n-# Due to circular dependencies between libraries :(, we wrap the\n-# special \"figure out circular dependencies\" flags around the entire\n-# input list during linking.\n-quiet_cmd_link = LINK($(TOOLSET)) $@\n-cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n-\n-# We support two kinds of shared objects (.so):\n-# 1) shared_library, which is just bundling together many dependent libraries\n-# into a link line.\n-# 2) loadable_module, which is generating a module intended for dlopen().\n-#\n-# They differ only slightly:\n-# In the former case, we want to package all dependent code into the .so.\n-# In the latter case, we want to package just the API exposed by the\n-# outermost module.\n-# This means shared_library uses --whole-archive, while loadable_module doesn't.\n-# (Note that --whole-archive is incompatible with the --start-group used in\n-# normal linking.)\n-\n-# Other shared-object link notes:\n-# - Set SONAME to the library filename so our binaries don't reference\n-# the local, absolute paths used on the link command-line.\n-quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n-cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n-\n-quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n-cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n-\n-\n-# Define an escape_quotes function to escape single quotes.\n-# This allows us to handle quotes properly as long as we always use\n-# use single quotes and escape_quotes.\n-escape_quotes = $(subst ','\\'',$(1))\n-# This comment is here just to include a ' to unconfuse syntax highlighting.\n-# Define an escape_vars function to escape '$' variable syntax.\n-# This allows us to read/write command lines with shell variables (e.g.\n-# $LD_LIBRARY_PATH), without triggering make substitution.\n-escape_vars = $(subst $$,$$$$,$(1))\n-# Helper that expands to a shell command to echo a string exactly as it is in\n-# make. This uses printf instead of echo because printf's behaviour with respect\n-# to escape sequences is more portable than echo's across different shells\n-# (e.g., dash, bash).\n-exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n-\n-# Helper to compare the command we're about to run against the command\n-# we logged the last time we ran the command.  Produces an empty\n-# string (false) when the commands match.\n-# Tricky point: Make has no string-equality test function.\n-# The kernel uses the following, but it seems like it would have false\n-# positives, where one string reordered its arguments.\n-#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n-#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n-# We instead substitute each for the empty string into the other, and\n-# say they're equal if both substitutions produce the empty string.\n-# .d files contain ? instead of spaces, take that into account.\n-command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n-                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n-\n-# Helper that is non-empty when a prerequisite changes.\n-# Normally make does this implicitly, but we force rules to always run\n-# so we can check their command lines.\n-#   $? -- new prerequisites\n-#   $| -- order-only dependencies\n-prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n-\n-# Helper that executes all postbuilds, and deletes the output file when done\n-# if any of the postbuilds failed.\n-define do_postbuilds\n-  @E=0;\\\n-  for p in $(POSTBUILDS); do\\\n-    eval $$p;\\\n-    F=$$?;\\\n-    if [ $$F -ne 0 ]; then\\\n-      E=$$F;\\\n-    fi;\\\n-  done;\\\n-  if [ $$E -ne 0 ]; then\\\n-    rm -rf \"$@\";\\\n-    exit $$E;\\\n-  fi\n-endef\n-\n-# do_cmd: run a command via the above cmd_foo names, if necessary.\n-# Should always run for a given target to handle command-line changes.\n-# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n-# Third argument, if non-zero, makes it do POSTBUILDS processing.\n-# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n-# spaces already and dirx strips the ? characters.\n-define do_cmd\n-$(if $(or $(command_changed),$(prereq_changed)),\n-  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n-  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n-  $(if $(findstring flock,$(word 1,$(cmd_$1))),\n-    @$(cmd_$(1))\n-    @echo \"  $(quiet_cmd_$(1)): Finished\",\n-    @$(cmd_$(1))\n-  )\n-  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n-  @$(if $(2),$(fixup_dep))\n-  $(if $(and $(3), $(POSTBUILDS)),\n-    $(call do_postbuilds)\n-  )\n-)\n-endef\n-\n-# Declare the \"all\" target first so it is the default,\n-# even though we don't have the deps yet.\n-.PHONY: all\n-all:\n-\n-# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n-# do_cmd.\n-.PHONY: FORCE_DO_CMD\n-FORCE_DO_CMD:\n-\n-TOOLSET := target\n-# Suffix rules, putting all outputs into $(obj).\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n-  include src/libuv/run-benchmarks.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-tests.target.mk)))),)\n-  include src/libuv/run-tests.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/uv.target.mk)))),)\n-  include src/libuv/uv.target.mk\n-endif\n-\n-#quiet_cmd_regen_makefile = ACTION Regenerating $@\n-#cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" -Isrc/libuv/common.gypi \"--depth=.\" \"--generator-output=mk/libuv/x86_64/unix/linux\" \"-Ddefault_configuration=Default\" \"-Dcomponent=static_library\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=linux\" src/libuv/uv.gyp\n-#Makefile: $(srcdir)/src/libuv/uv.gyp $(srcdir)/src/libuv/common.gypi\n-#\t$(call do_cmd,regen_makefile)\n-\n-# \"all\" is a concatenation of the \"all\" targets from all the included\n-# sub-makefiles. This is just here to clarify.\n-all:\n-\n-# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n-# target in our tree. Only consider the ones with .d (dependency) info:\n-d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n-ifneq ($(d_files),)\n-  # Rather than include each individual .d file, concatenate them into a\n-  # single file which make is able to load faster.  We split this into\n-  # commands that take 1000 files at a time to avoid overflowing the\n-  # command line.\n-  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n-\n-  ifneq ($(word 1001,$(d_files)),)\n-    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n-  endif\n-\n-  # make looks for ways to re-generate included makefiles, but in our case, we\n-  # don't have a direct way. Explicitly telling make that it has nothing to do\n-  # for them makes it go faster.\n-  $(depsdir)/all.deps: ;\n-\n-  include $(depsdir)/all.deps\n-endif"}, {"sha": "25b01014e79d4d77388813a41830e8d1ad32d84a", "filename": "mk/libuv/x86_64/unix/linux/src/libuv/run-benchmarks.target.mk", "status": "removed", "additions": 0, "deletions": 122, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Funix%2Flinux%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Funix%2Flinux%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Flinux%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,122 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-benchmarks\n-DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG' \\\n-\t'-DEV_VERIFY=2'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug := -pthread \\\n-\t-Wall \\\n-\t-ansi \\\n-\t-pthread \\\n-\t-fvisibility=hidden \\\n-\t-g \\\n-\t-O0\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include\n-\n-DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release := -pthread \\\n-\t-Wall \\\n-\t-ansi \\\n-\t-pthread \\\n-\t-fvisibility=hidden \\\n-\t-O3 \\\n-\t-fomit-frame-pointer \\\n-\t-fdata-sections \\\n-\t-ffunction-sections\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Release := -I$(srcdir)/src/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-ping-pongs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pound.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/run-benchmarks.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(obj).target/src/libuv/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Debug := -pthread\n-\n-LDFLAGS_Release := -pthread\n-\n-LIBS := -lrt\n-\n-$(builddir)/run-benchmarks: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-benchmarks: LIBS := $(LIBS)\n-$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n-$(builddir)/run-benchmarks: TOOLSET := $(TOOLSET)\n-$(builddir)/run-benchmarks: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-benchmarks\n-# Add target alias\n-.PHONY: run-benchmarks\n-run-benchmarks: $(builddir)/run-benchmarks\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-benchmarks\n-"}, {"sha": "a2fe0d2065e230c637dd3c17a8cb946dfad41850", "filename": "mk/libuv/x86_64/unix/linux/src/libuv/run-tests.target.mk", "status": "removed", "additions": 0, "deletions": 165, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Funix%2Flinux%2Fsrc%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Funix%2Flinux%2Fsrc%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Flinux%2Fsrc%2Flibuv%2Frun-tests.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,165 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-tests\n-DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG' \\\n-\t'-DEV_VERIFY=2'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug := -pthread \\\n-\t-Wall \\\n-\t-ansi \\\n-\t-pthread \\\n-\t-fvisibility=hidden \\\n-\t-g \\\n-\t-O0\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include\n-\n-DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release := -pthread \\\n-\t-Wall \\\n-\t-ansi \\\n-\t-pthread \\\n-\t-fvisibility=hidden \\\n-\t-O3 \\\n-\t-fomit-frame-pointer \\\n-\t-fdata-sections \\\n-\t-ffunction-sections\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Release := -I$(srcdir)/src/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-util.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-cwd-and-chdir.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-eio-overflow.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-currentexe.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-memory.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-getsockname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc-threads.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-platform-output.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-process-title.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-stdio-over-pipes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind6-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-close.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-flags.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect6-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-mutexes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-options.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-counters-init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(obj).target/src/libuv/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Debug := -pthread\n-\n-LDFLAGS_Release := -pthread\n-\n-LIBS := -lrt\n-\n-$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-tests: LIBS := $(LIBS)\n-$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n-$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n-$(builddir)/run-tests: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-tests\n-# Add target alias\n-.PHONY: run-tests\n-run-tests: $(builddir)/run-tests\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-tests\n-"}, {"sha": "bd68c31a92062da7f9dcd57a220e2df0846f0dbc", "filename": "mk/libuv/x86_64/unix/linux/src/libuv/uv.Makefile", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Funix%2Flinux%2Fsrc%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Funix%2Flinux%2Fsrc%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Flinux%2Fsrc%2Flibuv%2Fuv.Makefile?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,6 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-export builddir_name ?= mk/libuv/x86_64/unix/linux/./src/libuv/out\n-.PHONY: all\n-all:\n-\t$(MAKE) -C ../.. uv run-benchmarks run-tests"}, {"sha": "60e0e8fd2def64a48356d5b48390bab1906ae4a5", "filename": "mk/libuv/x86_64/unix/linux/src/libuv/uv.target.mk", "status": "removed", "additions": 0, "deletions": 189, "changes": 189, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Funix%2Flinux%2Fsrc%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Funix%2Flinux%2Fsrc%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Flinux%2Fsrc%2Flibuv%2Fuv.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,189 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := uv\n-DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DHAVE_CONFIG_H' \\\n-\t'-DEV_CONFIG_H=\"config_linux.h\"' \\\n-\t'-DEIO_CONFIG_H=\"config_linux.h\"' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG' \\\n-\t'-DEV_VERIFY=2'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug := -pthread \\\n-\t-Wall \\\n-\t-ansi \\\n-\t-pthread \\\n-\t-fvisibility=hidden \\\n-\t-g \\\n-\t--std=gnu89 \\\n-\t-pedantic \\\n-\t-Wall \\\n-\t-Wextra \\\n-\t-Wno-unused-parameter \\\n-\t-g \\\n-\t-O0\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include \\\n-\t-I$(srcdir)/src/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/libuv/src \\\n-\t-I$(srcdir)/src/libuv/src/unix/ev \\\n-\t-I$(srcdir)/src/libuv/src/ares/config_linux\n-\n-DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DHAVE_CONFIG_H' \\\n-\t'-DEV_CONFIG_H=\"config_linux.h\"' \\\n-\t'-DEIO_CONFIG_H=\"config_linux.h\"' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release := -pthread \\\n-\t-Wall \\\n-\t-ansi \\\n-\t-pthread \\\n-\t-fvisibility=hidden \\\n-\t-g \\\n-\t--std=gnu89 \\\n-\t-pedantic \\\n-\t-Wall \\\n-\t-Wextra \\\n-\t-Wno-unused-parameter \\\n-\t-O3 \\\n-\t-fomit-frame-pointer \\\n-\t-fdata-sections \\\n-\t-ffunction-sections\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := -fno-rtti \\\n-\t-fno-exceptions\n-\n-INCS_Release := -I$(srcdir)/src/libuv/include \\\n-\t-I$(srcdir)/src/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/libuv/src \\\n-\t-I$(srcdir)/src/libuv/src/unix/ev \\\n-\t-I$(srcdir)/src/libuv/src/ares/config_linux\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_cancel.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__close_sockets.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_data.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_destroy.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_name.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_string.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_fds.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_string.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyaddr.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__get_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getnameinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getopt.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getsock.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_library_init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_llist.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_mkquery.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_nowarn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_options.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_aaaa_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_a_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_mx_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ns_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ptr_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_srv_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_txt_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_process.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_query.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__read_line.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_search.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_send.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strcasecmp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strdup.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strerror.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_timeout.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__timeval.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_version.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_writev.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/bitncmp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_net_pton.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_ntop.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/windows_port.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/core.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/uv-eio.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/fs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/udp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/tcp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/pipe.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/tty.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/stream.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/cares.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/dl.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/process.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/eio/eio.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/ev/ev.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/unix/linux.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Debug := -pthread\n-\n-LDFLAGS_Release := -pthread\n-\n-LIBS := -lm\n-\n-$(obj).target/src/libuv/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(obj).target/src/libuv/libuv.a: LIBS := $(LIBS)\n-$(obj).target/src/libuv/libuv.a: TOOLSET := $(TOOLSET)\n-$(obj).target/src/libuv/libuv.a: $(OBJS) FORCE_DO_CMD\n-\t$(call do_cmd,alink)\n-\n-all_deps += $(obj).target/src/libuv/libuv.a\n-# Add target alias\n-.PHONY: uv\n-uv: $(obj).target/src/libuv/libuv.a\n-\n-# Add target alias to \"all\" target.\n-.PHONY: all\n-all: uv\n-"}, {"sha": "d40391e0f8988659a5558bd22cf560c4745dbf90", "filename": "mk/libuv/x86_64/win/Makefile", "status": "removed", "additions": 0, "deletions": 354, "changes": 354, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Fwin%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Fwin%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2FMakefile?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,354 +0,0 @@\n-# We borrow heavily from the kernel build setup, though we are simpler since\n-# we don't have Kconfig tweaking settings on us.\n-\n-# The implicit make rules have it looking for RCS files, among other things.\n-# We instead explicitly write all the rules we care about.\n-# It's even quicker (saves ~200ms) to pass -r on the command line.\n-MAKEFLAGS=-r\n-\n-# The source directory tree.\n-srcdir := ../../../..\n-abs_srcdir := $(abspath $(srcdir))\n-\n-# The name of the builddir.\n-builddir_name ?= out\n-\n-# The V=1 flag on command line makes us verbosely print command lines.\n-ifdef V\n-  quiet=\n-else\n-  quiet=quiet_\n-endif\n-\n-# Specify BUILDTYPE=Release on the command line for a release build.\n-BUILDTYPE ?= Debug\n-\n-# Directory all our build output goes into.\n-# Note that this must be two directories beneath src/ for unit tests to pass,\n-# as they reach into the src/ directory for data with relative paths.\n-builddir ?= $(builddir_name)/$(BUILDTYPE)\n-abs_builddir := $(abspath $(builddir))\n-depsdir := $(builddir)/.deps\n-\n-# Object output directory.\n-obj := $(builddir)/obj\n-abs_obj := $(abspath $(obj))\n-\n-# We build up a list of every single one of the targets so we can slurp in the\n-# generated dependency rule Makefiles in one pass.\n-all_deps :=\n-\n-\n-\n-# C++ apps need to be linked with g++.\n-#\n-# Note: flock is used to seralize linking. Linking is a memory-intensive\n-# process so running parallel links can often lead to thrashing.  To disable\n-# the serialization, override LINK via an envrionment variable as follows:\n-#\n-#   export LINK=g++\n-#\n-# This will allow make to invoke N linker processes as specified in -jN.\n-LINK ?= flock $(builddir)/linker.lock $(CXX)\n-\n-CC.target ?= $(CC)\n-CFLAGS.target ?= $(CFLAGS)\n-CXX.target ?= $(CXX)\n-CXXFLAGS.target ?= $(CXXFLAGS)\n-LINK.target ?= $(LINK)\n-LDFLAGS.target ?= $(LDFLAGS) \n-AR.target ?= $(AR)\n-ARFLAGS.target ?= crsT\n-\n-# N.B.: the logic of which commands to run should match the computation done\n-# in gyp's make.py where ARFLAGS.host etc. is computed.\n-# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n-# to replicate this environment fallback in make as well.\n-CC.host ?= gcc\n-CFLAGS.host ?=\n-CXX.host ?= g++\n-CXXFLAGS.host ?=\n-LINK.host ?= g++\n-LDFLAGS.host ?=\n-AR.host ?= ar\n-ARFLAGS.host := crsT\n-\n-# Define a dir function that can handle spaces.\n-# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n-# \"leading spaces cannot appear in the text of the first argument as written.\n-# These characters can be put into the argument value by variable substitution.\"\n-empty :=\n-space := $(empty) $(empty)\n-\n-# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n-replace_spaces = $(subst $(space),?,$1)\n-unreplace_spaces = $(subst ?,$(space),$1)\n-dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n-\n-# Flags to make gcc output dependency info.  Note that you need to be\n-# careful here to use the flags that ccache and distcc can understand.\n-# We write to a dep file on the side first and then rename at the end\n-# so we can't end up with a broken dep file.\n-depfile = $(depsdir)/$(call replace_spaces,$@).d\n-DEPFLAGS = -MMD -MF $(depfile).raw\n-\n-# We have to fixup the deps output in a few ways.\n-# (1) the file output should mention the proper .o file.\n-# ccache or distcc lose the path to the target, so we convert a rule of\n-# the form:\n-#   foobar.o: DEP1 DEP2\n-# into\n-#   path/to/foobar.o: DEP1 DEP2\n-# (2) we want missing files not to cause us to fail to build.\n-# We want to rewrite\n-#   foobar.o: DEP1 DEP2 \\\n-#               DEP3\n-# to\n-#   DEP1:\n-#   DEP2:\n-#   DEP3:\n-# so if the files are missing, they're just considered phony rules.\n-# We have to do some pretty insane escaping to get those backslashes\n-# and dollar signs past make, the shell, and sed at the same time.\n-# Doesn't work with spaces, but that's fine: .d files have spaces in\n-# their names replaced with other characters.\n-define fixup_dep\n-# The depfile may not exist if the input file didn't have any #includes.\n-touch $(depfile).raw\n-# Fixup path as in (1).\n-sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n-# Add extra rules as in (2).\n-# We remove slashes and replace spaces with new lines;\n-# remove blank lines;\n-# delete the first line and append a colon to the remaining lines.\n-sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n-  grep -v '^$$'                             |\\\n-  sed -e 1d -e 's|$$|:|'                     \\\n-    >> $(depfile)\n-rm $(depfile).raw\n-endef\n-\n-# Command definitions:\n-# - cmd_foo is the actual command to run;\n-# - quiet_cmd_foo is the brief-output summary of the command.\n-\n-quiet_cmd_cc = CC($(TOOLSET)) $@\n-cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_cxx = CXX($(TOOLSET)) $@\n-cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n-\n-quiet_cmd_touch = TOUCH $@\n-cmd_touch = touch $@\n-\n-quiet_cmd_copy = COPY $@\n-# send stderr to /dev/null to ignore messages when linking directories.\n-cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n-\n-quiet_cmd_alink = AR($(TOOLSET)) $@\n-cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) $(ARFLAGS.$(TOOLSET)) $@ $(filter %.o,$^)\n-\n-# Due to circular dependencies between libraries :(, we wrap the\n-# special \"figure out circular dependencies\" flags around the entire\n-# input list during linking.\n-quiet_cmd_link = LINK($(TOOLSET)) $@\n-cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n-\n-# We support two kinds of shared objects (.so):\n-# 1) shared_library, which is just bundling together many dependent libraries\n-# into a link line.\n-# 2) loadable_module, which is generating a module intended for dlopen().\n-#\n-# They differ only slightly:\n-# In the former case, we want to package all dependent code into the .so.\n-# In the latter case, we want to package just the API exposed by the\n-# outermost module.\n-# This means shared_library uses --whole-archive, while loadable_module doesn't.\n-# (Note that --whole-archive is incompatible with the --start-group used in\n-# normal linking.)\n-\n-# Other shared-object link notes:\n-# - Set SONAME to the library filename so our binaries don't reference\n-# the local, absolute paths used on the link command-line.\n-quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n-cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n-\n-quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n-cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n-\n-\n-# Define an escape_quotes function to escape single quotes.\n-# This allows us to handle quotes properly as long as we always use\n-# use single quotes and escape_quotes.\n-escape_quotes = $(subst ','\\'',$(1))\n-# This comment is here just to include a ' to unconfuse syntax highlighting.\n-# Define an escape_vars function to escape '$' variable syntax.\n-# This allows us to read/write command lines with shell variables (e.g.\n-# $LD_LIBRARY_PATH), without triggering make substitution.\n-escape_vars = $(subst $$,$$$$,$(1))\n-# Helper that expands to a shell command to echo a string exactly as it is in\n-# make. This uses printf instead of echo because printf's behaviour with respect\n-# to escape sequences is more portable than echo's across different shells\n-# (e.g., dash, bash).\n-exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n-\n-# Helper to compare the command we're about to run against the command\n-# we logged the last time we ran the command.  Produces an empty\n-# string (false) when the commands match.\n-# Tricky point: Make has no string-equality test function.\n-# The kernel uses the following, but it seems like it would have false\n-# positives, where one string reordered its arguments.\n-#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n-#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n-# We instead substitute each for the empty string into the other, and\n-# say they're equal if both substitutions produce the empty string.\n-# .d files contain ? instead of spaces, take that into account.\n-command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n-                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n-\n-# Helper that is non-empty when a prerequisite changes.\n-# Normally make does this implicitly, but we force rules to always run\n-# so we can check their command lines.\n-#   $? -- new prerequisites\n-#   $| -- order-only dependencies\n-prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n-\n-# Helper that executes all postbuilds, and deletes the output file when done\n-# if any of the postbuilds failed.\n-define do_postbuilds\n-  @E=0;\\\n-  for p in $(POSTBUILDS); do\\\n-    eval $$p;\\\n-    F=$$?;\\\n-    if [ $$F -ne 0 ]; then\\\n-      E=$$F;\\\n-    fi;\\\n-  done;\\\n-  if [ $$E -ne 0 ]; then\\\n-    rm -rf \"$@\";\\\n-    exit $$E;\\\n-  fi\n-endef\n-\n-# do_cmd: run a command via the above cmd_foo names, if necessary.\n-# Should always run for a given target to handle command-line changes.\n-# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n-# Third argument, if non-zero, makes it do POSTBUILDS processing.\n-# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n-# spaces already and dirx strips the ? characters.\n-define do_cmd\n-$(if $(or $(command_changed),$(prereq_changed)),\n-  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n-  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n-  $(if $(findstring flock,$(word 1,$(cmd_$1))),\n-    @$(cmd_$(1))\n-    @echo \"  $(quiet_cmd_$(1)): Finished\",\n-    @$(cmd_$(1))\n-  )\n-  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n-  @$(if $(2),$(fixup_dep))\n-  $(if $(and $(3), $(POSTBUILDS)),\n-    $(call do_postbuilds)\n-  )\n-)\n-endef\n-\n-# Declare the \"all\" target first so it is the default,\n-# even though we don't have the deps yet.\n-.PHONY: all\n-all:\n-\n-# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n-# do_cmd.\n-.PHONY: FORCE_DO_CMD\n-FORCE_DO_CMD:\n-\n-TOOLSET := target\n-# Suffix rules, putting all outputs into $(obj).\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n-\t@$(call do_cmd,cxx,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n-  include src/libuv/run-benchmarks.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/run-tests.target.mk)))),)\n-  include src/libuv/run-tests.target.mk\n-endif\n-ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n-    $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/libuv/uv.target.mk)))),)\n-  include src/libuv/uv.target.mk\n-endif\n-\n-#quiet_cmd_regen_makefile = ACTION Regenerating $@\n-#cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" -Isrc/libuv/common.gypi \"--depth=.\" \"--generator-output=mk/libuv/x86_64/win\" \"-Ddefault_configuration=Default\" \"-Dcomponent=static_library\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=win\" src/libuv/uv.gyp\n-#Makefile: $(srcdir)/src/libuv/uv.gyp $(srcdir)/src/libuv/common.gypi\n-#\t$(call do_cmd,regen_makefile)\n-\n-# \"all\" is a concatenation of the \"all\" targets from all the included\n-# sub-makefiles. This is just here to clarify.\n-all:\n-\n-# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n-# target in our tree. Only consider the ones with .d (dependency) info:\n-d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n-ifneq ($(d_files),)\n-  # Rather than include each individual .d file, concatenate them into a\n-  # single file which make is able to load faster.  We split this into\n-  # commands that take 1000 files at a time to avoid overflowing the\n-  # command line.\n-  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n-\n-  ifneq ($(word 1001,$(d_files)),)\n-    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n-  endif\n-\n-  # make looks for ways to re-generate included makefiles, but in our case, we\n-  # don't have a direct way. Explicitly telling make that it has nothing to do\n-  # for them makes it go faster.\n-  $(depsdir)/all.deps: ;\n-\n-  include $(depsdir)/all.deps\n-endif"}, {"sha": "25bf58f854886b60bb13d8e58485cddd463f426e", "filename": "mk/libuv/x86_64/win/src/libuv/run-benchmarks.target.mk", "status": "removed", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,110 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-benchmarks\n-DEFS_Debug := '-DWIN32' \\\n-\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n-\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug := -g \\\n-\t-O0\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := \n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include\n-\n-DEFS_Release := '-DWIN32' \\\n-\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n-\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release := -O3 \\\n-\t-fomit-frame-pointer \\\n-\t-fdata-sections \\\n-\t-ffunction-sections\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := \n-\n-INCS_Release := -I$(srcdir)/src/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-ping-pongs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pound.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/run-benchmarks.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner-win.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(obj).target/src/libuv/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Debug := \n-\n-LDFLAGS_Release := \n-\n-LIBS := ws2_32.lib \\\n-\t-lws2_32.lib \\\n-\t-lpsapi.lib \\\n-\t-liphlpapi.lib\n-\n-$(builddir)/run-benchmarks: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-benchmarks: LIBS := $(LIBS)\n-$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n-$(builddir)/run-benchmarks: TOOLSET := $(TOOLSET)\n-$(builddir)/run-benchmarks: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-benchmarks\n-# Add target alias\n-.PHONY: run-benchmarks\n-run-benchmarks: $(builddir)/run-benchmarks\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-benchmarks\n-"}, {"sha": "51b62f7a3e2d58f64a4e3c2f9b1e33b874894567", "filename": "mk/libuv/x86_64/win/src/libuv/run-tests.target.mk", "status": "removed", "additions": 0, "deletions": 153, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Frun-tests.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,153 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-tests\n-DEFS_Debug := '-DWIN32' \\\n-\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n-\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug := -g \\\n-\t-O0\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := \n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include\n-\n-DEFS_Release := '-DWIN32' \\\n-\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n-\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release := -O3 \\\n-\t-fomit-frame-pointer \\\n-\t-fdata-sections \\\n-\t-ffunction-sections\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := \n-\n-INCS_Release := -I$(srcdir)/src/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-util.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-cwd-and-chdir.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-eio-overflow.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-currentexe.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-get-memory.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-getsockname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc-threads.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-platform-output.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-process-title.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-stdio-over-pipes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind6-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-close.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-flags.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect6-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-mutexes.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-options.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/test-counters-init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/test/runner-win.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(obj).target/src/libuv/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Debug := \n-\n-LDFLAGS_Release := \n-\n-LIBS := ws2_32.lib \\\n-\t-lws2_32.lib \\\n-\t-lpsapi.lib \\\n-\t-liphlpapi.lib\n-\n-$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-tests: LIBS := $(LIBS)\n-$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n-$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n-$(builddir)/run-tests: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-tests\n-# Add target alias\n-.PHONY: run-tests\n-run-tests: $(builddir)/run-tests\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-tests\n-"}, {"sha": "5c4f359e86ad2726b5ddb775242b5385f1ef013f", "filename": "mk/libuv/x86_64/win/src/libuv/uv.Makefile", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Fuv.Makefile?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,6 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-export builddir_name ?= mk/libuv/x86_64/win/./src/libuv/out\n-.PHONY: all\n-all:\n-\t$(MAKE) -C ../.. uv run-benchmarks run-tests"}, {"sha": "53576a0f93570eec5f0ad4cbe4d217315332edd9", "filename": "mk/libuv/x86_64/win/src/libuv/uv.target.mk", "status": "removed", "additions": 0, "deletions": 171, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Fuv.target.mk?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,171 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := uv\n-DEFS_Debug := '-DWIN32' \\\n-\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n-\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n-\t'-DHAVE_CONFIG_H' \\\n-\t'-D_WIN32_WINNT=0x0600' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DDEBUG' \\\n-\t'-D_DEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Debug := -g \\\n-\t-O0\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Debug := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Debug := \n-\n-INCS_Debug := -I$(srcdir)/src/libuv/include \\\n-\t-I$(srcdir)/src/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/libuv/src \\\n-\t-I$(srcdir)/src/libuv/src/ares/config_win32\n-\n-DEFS_Release := '-DWIN32' \\\n-\t'-D_CRT_SECURE_NO_DEPRECATE' \\\n-\t'-D_CRT_NONSTDC_NO_DEPRECATE' \\\n-\t'-DHAVE_CONFIG_H' \\\n-\t'-D_WIN32_WINNT=0x0600' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DNDEBUG'\n-\n-# Flags passed to all source files.\n-CFLAGS_Release := -O3 \\\n-\t-fomit-frame-pointer \\\n-\t-fdata-sections \\\n-\t-ffunction-sections\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Release := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Release := \n-\n-INCS_Release := -I$(srcdir)/src/libuv/include \\\n-\t-I$(srcdir)/src/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/libuv/src \\\n-\t-I$(srcdir)/src/libuv/src/ares/config_win32\n-\n-OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_cancel.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__close_sockets.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_data.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_destroy.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_name.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_string.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_fds.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_string.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyaddr.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__get_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getnameinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getopt.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getsock.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_library_init.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_llist.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_mkquery.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_nowarn.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_options.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_aaaa_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_a_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_mx_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ns_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ptr_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_srv_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_txt_reply.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_process.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_query.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__read_line.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_search.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_send.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strcasecmp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strdup.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strerror.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_timeout.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__timeval.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_version.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_writev.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/bitncmp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_net_pton.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_ntop.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/windows_port.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getenv.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_platform.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/async.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/cares.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/core.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/dl.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/error.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/fs.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/fs-event.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/handle.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/loop-watcher.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/pipe.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/thread.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/process.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/req.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/stream.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/tcp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/tty.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/threadpool.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/timer.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/udp.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/util.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/winapi.o \\\n-\t$(obj).target/$(TARGET)/src/libuv/src/win/winsock.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Debug := \n-\n-LDFLAGS_Release := \n-\n-LIBS := \n-\n-$(obj).target/src/libuv/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(obj).target/src/libuv/libuv.a: LIBS := $(LIBS)\n-$(obj).target/src/libuv/libuv.a: TOOLSET := $(TOOLSET)\n-$(obj).target/src/libuv/libuv.a: $(OBJS) FORCE_DO_CMD\n-\t$(call do_cmd,alink)\n-\n-all_deps += $(obj).target/src/libuv/libuv.a\n-# Add target alias\n-.PHONY: uv\n-uv: $(obj).target/src/libuv/libuv.a\n-\n-# Add target alias to \"all\" target.\n-.PHONY: all\n-all: uv\n-"}, {"sha": "2841ff25a0c6e0e7a99bde206017a28a9b903bb6", "filename": "mk/rt.mk", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a813e29b64dac9502f16b8cbaae6a6d16f9a687/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3a813e29b64dac9502f16b8cbaae6a6d16f9a687/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=3a813e29b64dac9502f16b8cbaae6a6d16f9a687", "patch": "@@ -88,16 +88,16 @@ endif\n \n ifeq ($$(CFG_WINDOWSY), 1)\n   LIBUV_OSTYPE_$(1) := win\n-  LIBUV_LIB_$(1) := rt/$(1)/libuv/Release/obj.target/src/libuv/libuv.a\n+  LIBUV_LIB_$(1) := rt/$(1)/libuv/libuv.a\n else ifeq ($(CFG_OSTYPE), apple-darwin)\n   LIBUV_OSTYPE_$(1) := mac\n-  LIBUV_LIB_$(1) := rt/$(1)/libuv/Release/libuv.a\n+  LIBUV_LIB_$(1) := rt/$(1)/libuv/libuv.a\n else ifeq ($(CFG_OSTYPE), unknown-freebsd)\n   LIBUV_OSTYPE_$(1) := unix/freebsd\n-  LIBUV_LIB_$(1) := rt/$(1)/libuv/Release/obj.target/src/libuv/libuv.a\n+  LIBUV_LIB_$(1) := rt/$(1)/libuv/libuv.a\n else\n   LIBUV_OSTYPE_$(1) := unix/linux\n-  LIBUV_LIB_$(1) := rt/$(1)/libuv/Release/obj.target/src/libuv/libuv.a\n+  LIBUV_LIB_$(1) := rt/$(1)/libuv/libuv.a\n endif\n \n RUNTIME_DEF_$(1) := rt/rustrt$$(CFG_DEF_SUFFIX)\n@@ -158,15 +158,15 @@ LIBUV_DEPS := $$(wildcard \\\n endif\n \n $$(LIBUV_LIB_$(1)): $$(LIBUV_DEPS)\n-\t$$(Q)$$(MAKE) -C $$(S)mk/libuv/$$(LIBUV_ARCH_$(1))/$$(LIBUV_OSTYPE_$(1)) \\\n+\t$$(Q)$$(MAKE) -C $$(S)src/libuv/ \\\n \t\tCFLAGS=\"$$(LIBUV_FLAGS_$$(HOST_$(1))) $$(SNAP_DEFINES)\" \\\n         LDFLAGS=\"$$(LIBUV_FLAGS_$$(HOST_$(1)))\" \\\n \t\tCC=\"$$(CFG_GCCISH_CROSS)$$(CC)\" \\\n \t\tCXX=\"$$(CFG_GCCISH_CROSS)$$(CXX)\" \\\n \t\tAR=\"$$(CFG_GCCISH_CROSS)$$(AR)\" \\\n \t\tBUILDTYPE=Release \\\n \t\tbuilddir_name=\"$$(CFG_BUILD_DIR)/rt/$(1)/libuv\" \\\n-\t\tV=$$(VERBOSE) FLOCK= uv\n+\t\tV=$$(VERBOSE) FLOCK= \n \n # These could go in rt.mk or rustllvm.mk, they're needed for both.\n "}, {"sha": "e64ed4f30597c036aa07884c95f68404737b61b0", "filename": "src/etc/gyp-uv", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0f04df8522cc93dfcdc0eb49f8403d305a508e58/src%2Fetc%2Fgyp-uv", "raw_url": "https://github.com/rust-lang/rust/raw/0f04df8522cc93dfcdc0eb49f8403d305a508e58/src%2Fetc%2Fgyp-uv", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgyp-uv?ref=0f04df8522cc93dfcdc0eb49f8403d305a508e58", "patch": "@@ -1,62 +0,0 @@\n-#!/bin/sh\n-\n-# This script generates rust compatible makefiles from libuv. When upgrading\n-# libuv, do:\n-#\n-# cd $RUST_DIR\n-# cd src/libuv\n-# git checkout master\n-# git pull\n-# svn co http://gyp.googlecode.com/svn/trunk build/gyp\n-# cd ../..\n-# rm -r mk/libuv\n-# ./src/etc/gyp-uv\n-#\n-# Note: you must not run gyp on windows. It will get the backslashes\n-# incorrect in its rules, and not work.\n-\n-set -e\n-\n-cd `dirname $0`\n-cd ../..\n-\n-GYPFILE=src/libuv/uv.gyp\n-INCLUDES=\"-I src/libuv/common.gypi\"\n-\n-for ARCH in ia32 x86_64\n-do\n-    ARGS=\"$GYPFILE \\\n-         $INCLUDES \\\n-         --depth . \\\n-         -Dcomponent=static_library \\\n-         -Dlibrary=static_library \\\n-         -Dtarget_arch=$ARCH\"\n-    \n-    ./src/libuv/build/gyp/gyp $ARGS \\\n-        -f make-mac \\\n-        --generator-output mk/libuv/$ARCH/mac \\\n-        -DOS=mac\n-\n-    ./src/libuv/build/gyp/gyp $ARGS \\\n-        -f make-linux \\\n-        --generator-output mk/libuv/$ARCH/unix \\\n-        -DOS=linux\n-\n-    ./src/libuv/build/gyp/gyp $ARGS \\\n-        -f make-linux \\\n-        --generator-output mk/libuv/$ARCH/win \\\n-        -DOS=win\n-\n-done\n-\n-# On Mac, GYP hardcodes a -arch i386 into the output. Fix that.\n-sed -i \\\n-    -e 's/-arch i386/-arch x86_64/' \\\n-    mk/libuv/x86_64/mac/src/libuv/*.mk\n-\n-MKFILES=$(find mk/libuv -name \\*.mk -o -name Makefile)\n-\n-# Comment out the gyp auto regeneration\n-perl -i -p -e 's@^(Makefile:.*)@#\\1@go' $MKFILES\n-perl -i -p -e 's@^(Makefile:.*)@#\\1@go' $MKFILES\n-perl -i -p -e 's@(.*regen_makefile.*)@#\\1@go' $MKFILES"}]}