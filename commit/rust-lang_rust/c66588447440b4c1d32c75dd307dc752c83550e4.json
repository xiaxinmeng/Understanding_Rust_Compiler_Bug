{"sha": "c66588447440b4c1d32c75dd307dc752c83550e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NjU4ODQ0NzQ0MGI0YzFkMzJjNzVkZDMwN2RjNzUyYzgzNTUwZTQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-06T02:06:08Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-06T02:06:08Z"}, "message": "Wrap non-block expressions in closures with a block", "tree": {"sha": "d9f3a441dfec127f2e40ef5821d4fd5cc4e7b36e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9f3a441dfec127f2e40ef5821d4fd5cc4e7b36e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c66588447440b4c1d32c75dd307dc752c83550e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c66588447440b4c1d32c75dd307dc752c83550e4", "html_url": "https://github.com/rust-lang/rust/commit/c66588447440b4c1d32c75dd307dc752c83550e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c66588447440b4c1d32c75dd307dc752c83550e4/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e6e5d8f7330c7970aa41e452a9fd9e3b3de4d84", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e6e5d8f7330c7970aa41e452a9fd9e3b3de4d84", "html_url": "https://github.com/rust-lang/rust/commit/2e6e5d8f7330c7970aa41e452a9fd9e3b3de4d84"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "b4944a6b0bcb17c5c041d5b94a7fd9536dbdd008", "filename": "crates/assists/src/handlers/infer_function_return_type.rs", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c66588447440b4c1d32c75dd307dc752c83550e4/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66588447440b4c1d32c75dd307dc752c83550e4/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs?ref=c66588447440b4c1d32c75dd307dc752c83550e4", "patch": "@@ -18,38 +18,43 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // ```\n pub(crate) fn infer_function_return_type(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let expr = ctx.find_node_at_offset::<ast::Expr>()?;\n-    let (tail_expr, insert_pos) = extract_tail(expr)?;\n+    let (tail_expr, insert_pos, wrap_expr) = extract_tail(expr)?;\n     let module = ctx.sema.scope(tail_expr.syntax()).module()?;\n     let ty = ctx.sema.type_of_expr(&tail_expr).filter(|ty| !ty.is_unit())?;\n     let ty = ty.display_source_code(ctx.db(), module.into()).ok()?;\n \n     acc.add(\n-        AssistId(\"change_return_type_to_result\", AssistKind::RefactorRewrite),\n-        \"Wrap return type in Result\",\n+        AssistId(\"infer_function_return_type\", AssistKind::RefactorRewrite),\n+        \"Add this function's return type\",\n         tail_expr.syntax().text_range(),\n         |builder| {\n             let insert_pos = insert_pos.text_range().end() + TextSize::from(1);\n             builder.insert(insert_pos, &format!(\"-> {} \", ty));\n+            if wrap_expr {\n+                mark::hit!(wrap_closure_non_block_expr);\n+                // `|x| x` becomes `|x| -> T x` which is invalid, so wrap it in a block\n+                builder.replace(tail_expr.syntax().text_range(), &format!(\"{{{}}}\", tail_expr));\n+            }\n         },\n     )\n }\n \n-fn extract_tail(expr: ast::Expr) -> Option<(ast::Expr, SyntaxToken)> {\n-    let (ret_ty, tail_expr, insert_pos) =\n+fn extract_tail(expr: ast::Expr) -> Option<(ast::Expr, SyntaxToken, bool)> {\n+    let (ret_ty, tail_expr, insert_pos, wrap_expr) =\n         if let Some(closure) = expr.syntax().ancestors().find_map(ast::ClosureExpr::cast) {\n-            let tail_expr = match closure.body()? {\n-                ast::Expr::BlockExpr(block) => block.expr()?,\n-                body => body,\n+            let (tail_expr, wrap_expr) = match closure.body()? {\n+                ast::Expr::BlockExpr(block) => (block.expr()?, false),\n+                body => (body, true),\n             };\n             let ret_ty = closure.ret_type();\n             let rpipe = closure.param_list()?.syntax().last_token()?;\n-            (ret_ty, tail_expr, rpipe)\n+            (ret_ty, tail_expr, rpipe, wrap_expr)\n         } else {\n             let func = expr.syntax().ancestors().find_map(ast::Fn::cast)?;\n             let tail_expr = func.body()?.expr()?;\n             let ret_ty = func.ret_type();\n             let rparen = func.param_list()?.r_paren_token()?;\n-            (ret_ty, tail_expr, rparen)\n+            (ret_ty, tail_expr, rparen, false)\n         };\n     if ret_ty.is_some() {\n         mark::hit!(existing_ret_type);\n@@ -61,7 +66,7 @@ fn extract_tail(expr: ast::Expr) -> Option<(ast::Expr, SyntaxToken)> {\n         mark::hit!(not_tail_expr);\n         return None;\n     }\n-    Some((tail_expr, insert_pos))\n+    Some((tail_expr, insert_pos, wrap_expr))\n }\n \n #[cfg(test)]\n@@ -156,13 +161,27 @@ mod tests {\n \n     #[test]\n     fn infer_return_type_closure() {\n+        check_assist(\n+            infer_function_return_type,\n+            r#\"fn foo() {\n+                |x: i32| { x<|> };\n+            }\"#,\n+            r#\"fn foo() {\n+                |x: i32| -> i32 { x };\n+            }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn infer_return_type_closure_wrap() {\n+        mark::check!(wrap_closure_non_block_expr);\n         check_assist(\n             infer_function_return_type,\n             r#\"fn foo() {\n                 |x: i32| x<|>;\n             }\"#,\n             r#\"fn foo() {\n-                |x: i32| -> i32 x;\n+                |x: i32| -> i32 {x};\n             }\"#,\n         );\n     }"}]}