{"sha": "bd18936d51c88e3f5452f6fe70bd137afbc0bd88", "node_id": "C_kwDOAAsO6NoAKGJkMTg5MzZkNTFjODhlM2Y1NDUyZjZmZTcwYmQxMzdhZmJjMGJkODg", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-26T11:18:51Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-01T17:57:08Z"}, "message": "Sort config definition", "tree": {"sha": "01f33508c5e1e3aa1ba95e2385ca35a130e1426d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01f33508c5e1e3aa1ba95e2385ca35a130e1426d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd18936d51c88e3f5452f6fe70bd137afbc0bd88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd18936d51c88e3f5452f6fe70bd137afbc0bd88", "html_url": "https://github.com/rust-lang/rust/commit/bd18936d51c88e3f5452f6fe70bd137afbc0bd88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd18936d51c88e3f5452f6fe70bd137afbc0bd88/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61643aca49e06317602ded1c90458a531844d54e", "url": "https://api.github.com/repos/rust-lang/rust/commits/61643aca49e06317602ded1c90458a531844d54e", "html_url": "https://github.com/rust-lang/rust/commit/61643aca49e06317602ded1c90458a531844d54e"}], "stats": {"total": 209, "additions": 102, "deletions": 107}, "files": [{"sha": "d0b2981c06de72d0009f7fbb7b14509d9768d20b", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 102, "deletions": 107, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/bd18936d51c88e3f5452f6fe70bd137afbc0bd88/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd18936d51c88e3f5452f6fe70bd137afbc0bd88/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=bd18936d51c88e3f5452f6fe70bd137afbc0bd88", "patch": "@@ -36,13 +36,12 @@ use crate::{\n };\n \n // Conventions for configuration keys to preserve maximal extendability without breakage:\n-//  - Toggles (be it binary true/false or with more options in-between) should always suffix as `_enable`\n+//  - Toggles (be it binary true/false or with more options in-between) should almost always suffix as `_enable`\n //  - In general be wary of using the namespace of something verbatim, it prevents us from adding subkeys in the future\n //  - Don't use abbreviations unless really necessary\n //  - foo_command = overrides the subcommand, foo_overrideCommand allows full overwriting\n //    - We could in theory only use `command` and have it change behavior depending on whether its a string or array?\n // - TODO: conventions regarding config keys for commands and their args\n-// - TODO: command, overrideCommand, extraArgs\n // - TODO: conventions regarding config polarity\n \n // Defines the server-side configuration of the rust-analyzer. We generate\n@@ -58,31 +57,9 @@ config_data! {\n         /// Placeholder for missing expressions in assists.\n         assist_expressionFillDefault: ExprFillDefaultDef              = \"\\\"todo\\\"\",\n \n-        /// How imports should be grouped into use statements.\n-        imports_granularity: ImportGranularityDef  = \"\\\"crate\\\"\",\n-        /// Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.\n-        imports_enforceGranularity: bool              = \"false\",\n-        /// The path structure for newly inserted paths to use.\n-        imports_prefix: ImportPrefixDef               = \"\\\"plain\\\"\",\n-        /// Group inserted imports by the https://rust-analyzer.github.io/manual.html#auto-import[following order]. Groups are separated by newlines.\n-        // TODO: Shouldn't be a bool\n-        imports_group: bool                           = \"true\",\n-        /// Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.\n-        imports_mergeIntoGlob: bool           = \"true\",\n-\n-        // TODO: needs a better name\n-        /// Show full signature of the callable. Only shows parameters if disabled.\n-        signatureInfo_signature_enable: bool                           = \"true\",\n-        /// Show documentation.\n-        signatureInfo_documentation_enable: bool                       = \"true\",\n-\n         /// Automatically refresh project info via `cargo metadata` on\n         /// `Cargo.toml` changes.\n         cargo_autoreload: bool           = \"true\",\n-        /// Unsets `#[cfg(test)]` for the specified crates.\n-        cargo_unsetTest: Vec<String>   = \"[\\\"core\\\"]\",\n-        /// List of features to activate. Set to `\"all\"` to pass `--all-features` to cargo.\n-        cargo_features: CargoFeatures      = \"[]\",\n         /// Run build scripts (`build.rs`) for more precise code analysis.\n         cargo_buildScripts_enable: bool = \"true\",\n         /// Advanced option, fully override the command rust-analyzer uses to\n@@ -92,37 +69,50 @@ config_data! {\n         /// Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\n         /// avoid compiling unnecessary things.\n         cargo_buildScripts_useRustcWrapper: bool = \"true\",\n+        /// List of features to activate. Set to `\"all\"` to pass `--all-features` to cargo.\n+        cargo_features: CargoFeatures      = \"[]\",\n         /// Do not activate the `default` feature.\n         cargo_noDefaultFeatures: bool    = \"false\",\n-        /// Compilation target override (target triple).\n-        cargo_target: Option<String>     = \"null\",\n         /// Internal config for debugging, disables loading of sysroot crates.\n         cargo_noSysroot: bool            = \"false\",\n+        /// Compilation target override (target triple).\n+        cargo_target: Option<String>     = \"null\",\n+        /// Unsets `#[cfg(test)]` for the specified crates.\n+        cargo_unsetTest: Vec<String>   = \"[\\\"core\\\"]\",\n \n-        /// Run specified `cargo check` command for diagnostics on save.\n-        checkOnSave_enable: bool                         = \"true\",\n         /// Check all targets and tests (`--all-targets`).\n         checkOnSave_allTargets: bool                     = \"true\",\n         /// Cargo command to use for `cargo check`.\n         checkOnSave_command: String                      = \"\\\"check\\\"\",\n-        /// Do not activate the `default` feature.\n-        checkOnSave_noDefaultFeatures: Option<bool>      = \"null\",\n-        /// Check for a specific target. Defaults to\n-        /// `#rust-analyzer.cargo.target#`.\n-        checkOnSave_target: Option<String>               = \"null\",\n+        /// Run specified `cargo check` command for diagnostics on save.\n+        checkOnSave_enable: bool                         = \"true\",\n         /// Extra arguments for `cargo check`.\n         checkOnSave_extraArgs: Vec<String>               = \"[]\",\n         /// List of features to activate. Defaults to\n         /// `#rust-analyzer.cargo.features#`. Set to `\"all\"` to pass `--all-features` to cargo.\n         checkOnSave_features: Option<CargoFeatures>        = \"null\",\n+        /// Do not activate the `default` feature.\n+        checkOnSave_noDefaultFeatures: Option<bool>      = \"null\",\n         /// Advanced option, fully override the command rust-analyzer uses for\n         /// checking. The command should include `--message-format=json` or\n         /// similar option.\n         checkOnSave_overrideCommand: Option<Vec<String>> = \"null\",\n+        /// Check for a specific target. Defaults to\n+        /// `#rust-analyzer.cargo.target#`.\n+        checkOnSave_target: Option<String>               = \"null\",\n \n-        // TODO: needs better name\n+        /// Toggles the additional completions that automatically add imports when completed.\n+        /// Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n+        completion_autoimport_enable: bool       = \"true\",\n+        /// Toggles the additional completions that automatically show method calls and field accesses\n+        /// with `self` prefixed to them when inside a method.\n+        completion_autoself_enable: bool        = \"true\",\n         /// Whether to add parenthesis and argument snippets when completing function.\n         completion_callable_snippets: CallableCompletionDef  = \"fillArguments\",\n+        /// Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\n+        completion_postfix_enable: bool         = \"true\",\n+        /// Enables completions of private items and fields that are defined in the current workspace even if they are not visible at the current position.\n+        completion_privateEditable_enable: bool = \"false\",\n         /// Custom completion snippets.\n         // NOTE: Keep this list in sync with the feature docs of user snippets.\n         completion_snippets_custom: FxHashMap<String, SnippetDef> = r#\"{\n@@ -166,25 +156,14 @@ config_data! {\n                 \"scope\": \"expr\"\n             }\n         }\"#,\n-        /// Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\n-        completion_postfix_enable: bool         = \"true\",\n-        /// Toggles the additional completions that automatically add imports when completed.\n-        /// Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n-        completion_autoimport_enable: bool       = \"true\",\n-        // TODO: Do we have a better name for this? I never really liked it\n-        /// Toggles the additional completions that automatically show method calls and field accesses\n-        /// with `self` prefixed to them when inside a method.\n-        completion_autoself_enable: bool        = \"true\",\n-        /// Enables completions of private items and fields that are defined in the current workspace even if they are not visible at the current position.\n-        completion_privateEditable_enable: bool = \"false\",\n \n+        /// List of rust-analyzer diagnostics to disable.\n+        diagnostics_disabled: FxHashSet<String> = \"[]\",\n         /// Whether to show native rust-analyzer diagnostics.\n         diagnostics_enable: bool                = \"true\",\n         /// Whether to show experimental rust-analyzer diagnostics that might\n         /// have more false positives than usual.\n         diagnostics_experimental_enable: bool    = \"false\",\n-        /// List of rust-analyzer diagnostics to disable.\n-        diagnostics_disabled: FxHashSet<String> = \"[]\",\n         /// Map of prefixes to be substituted when parsing diagnostic file paths.\n         /// This should be the reverse mapping of what is passed to `rustc` as `--remap-path-prefix`.\n         diagnostics_remapPrefix: FxHashMap<String, String> = \"{}\",\n@@ -199,38 +178,25 @@ config_data! {\n         /// and a blue icon in the `Problems Panel`.\n         diagnostics_warningsAsInfo: Vec<String> = \"[]\",\n \n-        /// Controls file watching implementation.\n-        files_watcher: String = \"\\\"client\\\"\",\n         /// These directories will be ignored by rust-analyzer. They are\n         /// relative to the workspace root, and globs are not supported. You may\n         /// also need to add the folders to Code's `files.watcherExclude`.\n         files_excludeDirs: Vec<PathBuf> = \"[]\",\n+        /// Controls file watching implementation.\n+        files_watcher: String = \"\\\"client\\\"\",\n \n-        /// Enables highlighting of related references while hovering your mouse above any identifier.\n-        highlightRelated_references_enable: bool = \"true\",\n-        /// Enables highlighting of all exit points while hovering your mouse above any `return`, `?`, or return type arrow (`->`).\n-        highlightRelated_exitPoints_enable: bool = \"true\",\n         /// Enables highlighting of related references while hovering your mouse `break`, `loop`, `while`, or `for` keywords.\n         highlightRelated_breakPoints_enable: bool = \"true\",\n+        /// Enables highlighting of all exit points while hovering your mouse above any `return`, `?`, or return type arrow (`->`).\n+        highlightRelated_exitPoints_enable: bool = \"true\",\n+        /// Enables highlighting of related references while hovering your mouse above any identifier.\n+        highlightRelated_references_enable: bool = \"true\",\n         /// Enables highlighting of all break points for a loop or block context while hovering your mouse above any `async` or `await` keywords.\n         highlightRelated_yieldPoints_enable: bool = \"true\",\n \n-        /// Use semantic tokens for strings.\n-        ///\n-        /// In some editors (e.g. vscode) semantic tokens override other highlighting grammars.\n-        /// By disabling semantic tokens for strings, other grammars can be used to highlight\n-        /// their contents.\n-        semanticHighlighting_strings_enable: bool = \"true\",\n-\n-        /// Whether to show documentation on hover.\n-        hover_documentation_enable: bool       = \"true\",\n-        /// Use markdown syntax for links in hover.\n-        hover_links_enable: bool = \"true\",\n-\n         /// Whether to show `Debug` action. Only applies when\n         /// `#rust-analyzer.hoverActions.enable#` is set.\n         hover_actions_debug_enable: bool           = \"true\",\n-        // TODO: There is not point in having a global option is there?\n         /// Whether to show HoverActions in Rust files.\n         hover_actions_enable: bool          = \"true\",\n         /// Whether to show `Go to Type Definition` action. Only applies when\n@@ -246,64 +212,81 @@ config_data! {\n         /// `#rust-analyzer.hoverActions.enable#` is set.\n         hover_actions_run_enable: bool             = \"true\",\n \n-        /// Whether to render trailing colons for parameter hints, and trailing colons for parameter hints.\n-        inlayHints_renderColons: bool                      = \"true\",\n+        /// Whether to show documentation on hover.\n+        hover_documentation_enable: bool       = \"true\",\n+        /// Use markdown syntax for links in hover.\n+        hover_links_enable: bool = \"true\",\n+\n+        // TODO: this should be in granulatiry?\n+        /// Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.\n+        imports_enforceGranularity: bool              = \"false\",\n+        /// How imports should be grouped into use statements.\n+        imports_granularity: ImportGranularityDef  = \"\\\"crate\\\"\",\n+        /// Group inserted imports by the https://rust-analyzer.github.io/manual.html#auto-import[following order]. Groups are separated by newlines.\n+        // TODO: Shouldn't be a bool\n+        imports_group: bool                           = \"true\",\n+        /// Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.\n+        imports_mergeIntoGlob: bool           = \"true\",\n+        /// The path structure for newly inserted paths to use.\n+        imports_prefix: ImportPrefixDef               = \"\\\"plain\\\"\",\n+\n+        /// Whether to show inlay type hints for method chains.\n+        inlayHints_chainingHints_enable: bool                      = \"true\",\n+        /// Whether to show inlay type hints for return types of closures with blocks.\n+        inlayHints_closureReturnTypeHints_enable: bool             = \"false\",\n+        /// Whether to show inlay type hints for elided lifetimes in function signatures.\n+        inlayHints_lifetimeElisionHints_enable: LifetimeElisionDef = \"\\\"never\\\"\",\n+        /// Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n+        inlayHints_lifetimeElisionHints_useParameterNames: bool  = \"false\",\n         /// Maximum length for inlay hints. Set to null to have an unlimited length.\n         inlayHints_maxLength: Option<usize>                = \"25\",\n         /// Whether to show function parameter name inlay hints at the call\n         /// site.\n         inlayHints_parameterHints_enable: bool                     = \"true\",\n+        /// Whether to show inlay type hints for compiler inserted reborrows.\n+        inlayHints_reborrowHints_enable: bool                      = \"false\",\n+        /// Whether to render trailing colons for parameter hints, and trailing colons for parameter hints.\n+        inlayHints_renderColons: bool                      = \"true\",\n         /// Whether to show inlay type hints for variables.\n         inlayHints_typeHints_enable: bool                          = \"true\",\n-        /// Whether to show inlay type hints for method chains.\n-        inlayHints_chainingHints_enable: bool                      = \"true\",\n         /// Whether to hide inlay hints for constructors.\n         inlayHints_typeHints_hideNamedConstructor: bool          = \"false\",\n-        /// Whether to show inlay type hints for return types of closures with blocks.\n-        inlayHints_closureReturnTypeHints_enable: bool             = \"false\",\n-        /// Whether to show inlay type hints for compiler inserted reborrows.\n-        inlayHints_reborrowHints_enable: bool                      = \"false\",\n-        /// Whether to show inlay type hints for elided lifetimes in function signatures.\n-        inlayHints_lifetimeElisionHints_enable: LifetimeElisionDef = \"\\\"never\\\"\",\n-        /// Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n-        inlayHints_lifetimeElisionHints_useParameterNames: bool  = \"false\",\n \n+        /// Join lines merges consecutive declaration and initialization of an assignment.\n+        joinLines_joinAssignments: bool = \"true\",\n         /// Join lines inserts else between consecutive ifs.\n         joinLines_joinElseIf: bool = \"true\",\n         /// Join lines removes trailing commas.\n         joinLines_removeTrailingComma: bool = \"true\",\n         /// Join lines unwraps trivial blocks.\n         joinLines_unwrapTrivialBlock: bool = \"true\",\n-        /// Join lines merges consecutive declaration and initialization of an assignment.\n-        joinLines_joinAssignments: bool = \"true\",\n \n         /// Whether to show `Debug` lens. Only applies when\n         /// `#rust-analyzer.lens.enable#` is set.\n         lens_debug_enable: bool            = \"true\",\n-        // TODO: Does a global enable make sense even?\n         /// Whether to show CodeLens in Rust files.\n         lens_enable: bool           = \"true\",\n+        /// Internal config: use custom client-side commands even when the\n+        /// client doesn't set the corresponding capability.\n+        lens_forceCustomCommands: bool = \"true\",\n         /// Whether to show `Implementations` lens. Only applies when\n         /// `#rust-analyzer.lens.enable#` is set.\n         lens_implementations_enable: bool  = \"true\",\n-        /// Whether to show `Run` lens. Only applies when\n-        /// `#rust-analyzer.lens.enable#` is set.\n-        lens_run_enable: bool              = \"true\",\n-        /// Whether to show `Method References` lens. Only applies when\n-        /// `#rust-analyzer.lens.enable#` is set.\n-        lens_references_method_enable: bool = \"false\",\n         /// Whether to show `References` lens for Struct, Enum, and Union.\n         /// Only applies when `#rust-analyzer.lens.enable#` is set.\n         lens_references_adt_enable: bool = \"false\",\n-        /// Whether to show `References` lens for Trait.\n-        /// Only applies when `#rust-analyzer.lens.enable#` is set.\n-        lens_references_trait_enable: bool = \"false\",\n         /// Whether to show `References` lens for Enum Variants.\n         /// Only applies when `#rust-analyzer.lens.enable#` is set.\n         lens_references_adt_variant_enable: bool = \"false\",\n-        /// Internal config: use custom client-side commands even when the\n-        /// client doesn't set the corresponding capability.\n-        lens_forceCustomCommands: bool = \"true\",\n+        /// Whether to show `Method References` lens. Only applies when\n+        /// `#rust-analyzer.lens.enable#` is set.\n+        lens_references_method_enable: bool = \"false\",\n+        /// Whether to show `References` lens for Trait.\n+        /// Only applies when `#rust-analyzer.lens.enable#` is set.\n+        lens_references_trait_enable: bool = \"false\",\n+        /// Whether to show `Run` lens. Only applies when\n+        /// `#rust-analyzer.lens.enable#` is set.\n+        lens_run_enable: bool              = \"true\",\n \n         /// Disable project auto-discovery in favor of explicitly specified set\n         /// of projects.\n@@ -318,22 +301,22 @@ config_data! {\n         /// Whether to show `can't find Cargo.toml` error message.\n         notifications_cargoTomlNotFound: bool      = \"true\",\n \n-        /// How many worker threads to to handle priming caches. The default `0` means to pick automatically.\n-        primeCaches_numThreads: ParallelPrimeCachesNumThreads = \"0\",\n         /// Warm up caches on project load.\n         primeCaches_enable: bool = \"true\",\n+        /// How many worker threads to to handle priming caches. The default `0` means to pick automatically.\n+        primeCaches_numThreads: ParallelPrimeCachesNumThreads = \"0\",\n \n+        /// Expand attribute macros. Requires `#rust-analyzer.procMacro.enable#` to be set.\n+        procMacro_attributes_enable: bool = \"true\",\n         /// Enable support for procedural macros, implies `#rust-analyzer.cargo.runBuildScripts#`.\n         procMacro_enable: bool                     = \"true\",\n-        /// Internal config, path to proc-macro server executable (typically,\n-        /// this is rust-analyzer itself, but we override this in tests).\n-        procMacro_server: Option<PathBuf>          = \"null\",\n         /// These proc-macros will be ignored when trying to expand them.\n         ///\n         /// This config takes a map of crate names with the exported proc-macro names to ignore as values.\n         procMacro_ignored: FxHashMap<Box<str>, Box<[Box<str>]>>          = \"{}\",\n-        /// Expand attribute macros. Requires `#rust-analyzer.procMacro.enable#` to be set.\n-        procMacro_attributes_enable: bool = \"true\",\n+        /// Internal config, path to proc-macro server executable (typically,\n+        /// this is rust-analyzer itself, but we override this in tests).\n+        procMacro_server: Option<PathBuf>          = \"null\",\n \n         /// Command to be executed instead of 'cargo' for runnables.\n         runnables_command: Option<String> = \"null\",\n@@ -361,14 +344,27 @@ config_data! {\n         /// available on a nightly build.\n         rustfmt_rangeFormatting_enable: bool = \"false\",\n \n-        /// Workspace symbol search scope.\n-        workspace_symbol_search_scope: WorkspaceSymbolSearchScopeDef = \"\\\"workspace\\\"\",\n+        /// Use semantic tokens for strings.\n+        ///\n+        /// In some editors (e.g. vscode) semantic tokens override other highlighting grammars.\n+        /// By disabling semantic tokens for strings, other grammars can be used to highlight\n+        /// their contents.\n+        semanticHighlighting_strings_enable: bool = \"true\",\n+\n+        /// Show documentation.\n+        signatureInfo_documentation_enable: bool                       = \"true\",\n+        // TODO: needs a better name\n+        /// Show full signature of the callable. Only shows parameters if disabled.\n+        signatureInfo_signature_enable: bool                           = \"true\",\n+\n         /// Workspace symbol search kind.\n         workspace_symbol_search_kind: WorkspaceSymbolSearchKindDef = \"\\\"only_types\\\"\",\n         /// Limits the number of items returned from a workspace symbol search (Defaults to 128).\n         /// Some clients like vs-code issue new searches on result filtering and don't require all results to be returned in the initial search.\n         /// Other clients requires all results upfront and might require a higher limit.\n         workspace_symbol_search_limit: usize = \"128\",\n+        /// Workspace symbol search scope.\n+        workspace_symbol_search_scope: WorkspaceSymbolSearchScopeDef = \"\\\"workspace\\\"\",\n     }\n }\n \n@@ -1368,11 +1364,10 @@ macro_rules! _config_data {\n             }\n         }\n \n-        // TODO: Uncomment this and sort once everything is done\n-        // #[test]\n-        // fn fields_are_sorted() {\n-        //     [$(stringify!($field)),*].windows(2).for_each(|w| assert!(w[0] <= w[1], \"{} <= {} does not hold\", w[0], w[1]));\n-        // }\n+        #[test]\n+        fn fields_are_sorted() {\n+            [$(stringify!($field)),*].windows(2).for_each(|w| assert!(w[0] <= w[1], \"{} <= {} does not hold\", w[0], w[1]));\n+        }\n     };\n }\n use _config_data as config_data;"}]}