{"sha": "ee79077d8008006f25fb591946bdc17e99c0b91a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNzkwNzdkODAwODAwNmYyNWZiNTkxOTQ2YmRjMTdlOTljMGI5MWE=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-05-06T17:45:21Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-05-26T21:53:13Z"}, "message": "Use break api config for pass by value or ref", "tree": {"sha": "b8cb14ddb753c17a70163215aae1455a584b0224", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8cb14ddb753c17a70163215aae1455a584b0224"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee79077d8008006f25fb591946bdc17e99c0b91a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee79077d8008006f25fb591946bdc17e99c0b91a", "html_url": "https://github.com/rust-lang/rust/commit/ee79077d8008006f25fb591946bdc17e99c0b91a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee79077d8008006f25fb591946bdc17e99c0b91a/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7f47f280ec267c0583f7d38fc149a2351b923e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7f47f280ec267c0583f7d38fc149a2351b923e6", "html_url": "https://github.com/rust-lang/rust/commit/d7f47f280ec267c0583f7d38fc149a2351b923e6"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "30db45a34f9686647fe5809c3658cd1954d30c3c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee79077d8008006f25fb591946bdc17e99c0b91a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee79077d8008006f25fb591946bdc17e99c0b91a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ee79077d8008006f25fb591946bdc17e99c0b91a", "patch": "@@ -1947,6 +1947,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let pass_by_ref_or_value = pass_by_ref_or_value::PassByRefOrValue::new(\n         conf.trivial_copy_size_limit,\n         conf.pass_by_value_size_limit,\n+        conf.avoid_breaking_exported_api,\n         &sess.target,\n     );\n     store.register_late_pass(move || box pass_by_ref_or_value);"}, {"sha": "f6a704785598ee44372878a9a7ab846081ec9403", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ee79077d8008006f25fb591946bdc17e99c0b91a/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee79077d8008006f25fb591946bdc17e99c0b91a/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=ee79077d8008006f25fb591946bdc17e99c0b91a", "patch": "@@ -102,10 +102,16 @@ declare_clippy_lint! {\n pub struct PassByRefOrValue {\n     ref_min_size: u64,\n     value_max_size: u64,\n+    avoid_breaking_exported_api: bool,\n }\n \n impl<'tcx> PassByRefOrValue {\n-    pub fn new(ref_min_size: Option<u64>, value_max_size: u64, target: &Target) -> Self {\n+    pub fn new(\n+        ref_min_size: Option<u64>,\n+        value_max_size: u64,\n+        avoid_breaking_exported_api: bool,\n+        target: &Target,\n+    ) -> Self {\n         let ref_min_size = ref_min_size.unwrap_or_else(|| {\n             let bit_width = u64::from(target.pointer_width);\n             // Cap the calculated bit width at 32-bits to reduce\n@@ -120,10 +126,14 @@ impl<'tcx> PassByRefOrValue {\n         Self {\n             ref_min_size,\n             value_max_size,\n+            avoid_breaking_exported_api,\n         }\n     }\n \n     fn check_poly_fn(&mut self, cx: &LateContext<'tcx>, hir_id: HirId, decl: &FnDecl<'_>, span: Option<Span>) {\n+        if self.avoid_breaking_exported_api && cx.access_levels.is_exported(hir_id) {\n+            return;\n+        }\n         let fn_def_id = cx.tcx.hir().local_def_id(hir_id);\n \n         let fn_sig = cx.tcx.fn_sig(fn_def_id);\n@@ -184,7 +194,6 @@ impl<'tcx> PassByRefOrValue {\n                     }\n \n                     if_chain! {\n-                        if !cx.access_levels.is_exported(hir_id);\n                         if is_copy(cx, ty);\n                         if !is_self_ty(input);\n                         if let Some(size) = cx.layout_of(ty).ok().map(|l| l.size.bytes());"}, {"sha": "2b0005bbff1db6911305327e40e40799a604ede9", "filename": "tests/ui/trivially_copy_pass_by_ref.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee79077d8008006f25fb591946bdc17e99c0b91a/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee79077d8008006f25fb591946bdc17e99c0b91a/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr?ref=ee79077d8008006f25fb591946bdc17e99c0b91a", "patch": "@@ -88,12 +88,6 @@ error: this argument (N byte) is passed by reference, but would be more efficien\n LL |     fn trait_method(&self, _foo: &Foo);\n    |                                  ^^^^ help: consider passing by value instead: `Foo`\n \n-error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:80:37\n-   |\n-LL |     fn trait_method2(&self, _color: &Color);\n-   |                                     ^^^^^^ help: consider passing by value instead: `Color`\n-\n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n   --> $DIR/trivially_copy_pass_by_ref.rs:108:21\n    |\n@@ -106,5 +100,5 @@ error: this argument (N byte) is passed by reference, but would be more efficien\n LL |     fn foo(x: &i32) {\n    |               ^^^^ help: consider passing by value instead: `i32`\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 16 previous errors\n "}]}