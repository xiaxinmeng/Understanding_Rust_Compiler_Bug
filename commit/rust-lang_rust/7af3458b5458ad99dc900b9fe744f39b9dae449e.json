{"sha": "7af3458b5458ad99dc900b9fe744f39b9dae449e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZjM0NThiNTQ1OGFkOTlkYzkwMGI5ZmU3NDRmMzliOWRhZTQ0OWU=", "commit": {"author": {"name": "Yusuke Tanaka", "email": "yusuktan@maguro.dev", "date": "2021-02-10T15:40:57Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-03-02T09:40:23Z"}, "message": "Move transmute_bytes_to_str and transmute_ptr_to_ptr to transmute_ref_to_ref module", "tree": {"sha": "b2fc3880ba60896fc38dde54c5310790ade93884", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2fc3880ba60896fc38dde54c5310790ade93884"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7af3458b5458ad99dc900b9fe744f39b9dae449e", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmA+CAcACgkQHKDfKvWd\naKW+JBAAoQgcC6sOVhLwTMNuJzsNXirQ7uLdKIPWKHnSZOjfU6YHorvJSpWWDYIp\ntTykLpDirIopLhBC5kTUfGmLCbcTZZeY9/hS3IMCGFK9jYzaVz21CIJPFbK63qYt\nnE3EfQpQiCeWrs9JRMLmHvFq4+N7KpXDDLwWgJLN2u8bWzE4LP+u5wUa7GCav1w7\nnY12/bqE2n5CyDNEeW087KGGMHwkjuCeerqlejMeGeQ3j523LPswtsZevjuz0Spi\nWyBZJ3D9xD2mBF1CkzxI/Zkv8I7wvyXWPAOXEGVyBCS1HgCmr9fry545uQbs4XGD\nl76AouS0AnVMiqd7Na/daXVj+Yp1c0/BTILIOXg7/SqhDxHxrUDfzMDdlFvK3HVS\nD47dHmUm5pSA5wNKUSUddegyCk+dd2DNWVF4W/k5Or0qceRLkXoxpZQdZW95S0j6\nDt+RmGicp+FgVPRhtny6xv/IonWZKfF7VHIzi/hjxXX8OXRo0pZ4dxKtd+TRee1R\njq0XCiHCEPw0tK91UqKWWflvPBuQLo3AtxsO72EP/IZ1HTbl0mlzLeDzwB4VGxVI\nzm+iMCQlR7y5KyhvyedwzP7IfR6RQNJIDu9CBOEEoarP4R2za64r4Qhc0bOckHEI\nC8Eu1OKaMQeOaGrTrPEwFciVqk9tec95lOGjAMHf+BgRayW1a84=\n=pTWo\n-----END PGP SIGNATURE-----", "payload": "tree b2fc3880ba60896fc38dde54c5310790ade93884\nparent 4c6522118802b5fd98337eeb57d3d81268069385\nauthor Yusuke Tanaka <yusuktan@maguro.dev> 1612971657 +0900\ncommitter flip1995 <philipp.krones@embecosm.com> 1614678023 +0100\n\nMove transmute_bytes_to_str and transmute_ptr_to_ptr to transmute_ref_to_ref module\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7af3458b5458ad99dc900b9fe744f39b9dae449e", "html_url": "https://github.com/rust-lang/rust/commit/7af3458b5458ad99dc900b9fe744f39b9dae449e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7af3458b5458ad99dc900b9fe744f39b9dae449e/comments", "author": {"login": "magurotuna", "id": 23649474, "node_id": "MDQ6VXNlcjIzNjQ5NDc0", "avatar_url": "https://avatars.githubusercontent.com/u/23649474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/magurotuna", "html_url": "https://github.com/magurotuna", "followers_url": "https://api.github.com/users/magurotuna/followers", "following_url": "https://api.github.com/users/magurotuna/following{/other_user}", "gists_url": "https://api.github.com/users/magurotuna/gists{/gist_id}", "starred_url": "https://api.github.com/users/magurotuna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/magurotuna/subscriptions", "organizations_url": "https://api.github.com/users/magurotuna/orgs", "repos_url": "https://api.github.com/users/magurotuna/repos", "events_url": "https://api.github.com/users/magurotuna/events{/privacy}", "received_events_url": "https://api.github.com/users/magurotuna/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c6522118802b5fd98337eeb57d3d81268069385", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c6522118802b5fd98337eeb57d3d81268069385", "html_url": "https://github.com/rust-lang/rust/commit/4c6522118802b5fd98337eeb57d3d81268069385"}], "stats": {"total": 153, "additions": 94, "deletions": 59}, "files": [{"sha": "8a0c83789d54fc854a28d056803eaf7ebf84ae06", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 5, "deletions": 59, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7af3458b5458ad99dc900b9fe744f39b9dae449e/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af3458b5458ad99dc900b9fe744f39b9dae449e/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=7af3458b5458ad99dc900b9fe744f39b9dae449e", "patch": "@@ -1,6 +1,7 @@\n mod crosspointer_transmute;\n mod transmute_int_to_char;\n mod transmute_ptr_to_ref;\n+mod transmute_ref_to_ref;\n mod useless_transmute;\n mod utils;\n mod wrong_transmute;\n@@ -370,67 +371,12 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                 if triggered {\n                     return;\n                 }\n+                let triggered = transmute_ref_to_ref::check(cx, e, from_ty, to_ty, args, const_context);\n+                if triggered {\n+                    return;\n+                }\n \n                 match (&from_ty.kind(), &to_ty.kind()) {\n-                    (ty::Ref(_, ty_from, from_mutbl), ty::Ref(_, ty_to, to_mutbl)) => {\n-                        if_chain! {\n-                            if let (&ty::Slice(slice_ty), &ty::Str) = (&ty_from.kind(), &ty_to.kind());\n-                            if let ty::Uint(ty::UintTy::U8) = slice_ty.kind();\n-                            if from_mutbl == to_mutbl;\n-                            then {\n-                                let postfix = if *from_mutbl == Mutability::Mut {\n-                                    \"_mut\"\n-                                } else {\n-                                    \"\"\n-                                };\n-\n-                                span_lint_and_sugg(\n-                                    cx,\n-                                    TRANSMUTE_BYTES_TO_STR,\n-                                    e.span,\n-                                    &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n-                                    \"consider using\",\n-                                    format!(\n-                                        \"std::str::from_utf8{}({}).unwrap()\",\n-                                        postfix,\n-                                        snippet(cx, args[0].span, \"..\"),\n-                                    ),\n-                                    Applicability::Unspecified,\n-                                );\n-                            } else {\n-                                if (cx.tcx.erase_regions(from_ty) != cx.tcx.erase_regions(to_ty))\n-                                    && !const_context {\n-                                    span_lint_and_then(\n-                                        cx,\n-                                        TRANSMUTE_PTR_TO_PTR,\n-                                        e.span,\n-                                        \"transmute from a reference to a reference\",\n-                                        |diag| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n-                                            let ty_from_and_mut = ty::TypeAndMut {\n-                                                ty: ty_from,\n-                                                mutbl: *from_mutbl\n-                                            };\n-                                            let ty_to_and_mut = ty::TypeAndMut { ty: ty_to, mutbl: *to_mutbl };\n-                                            let sugg_paren = arg\n-                                                .as_ty(cx.tcx.mk_ptr(ty_from_and_mut))\n-                                                .as_ty(cx.tcx.mk_ptr(ty_to_and_mut));\n-                                            let sugg = if *to_mutbl == Mutability::Mut {\n-                                                sugg_paren.mut_addr_deref()\n-                                            } else {\n-                                                sugg_paren.addr_deref()\n-                                            };\n-                                            diag.span_suggestion(\n-                                                e.span,\n-                                                \"try\",\n-                                                sugg.to_string(),\n-                                                Applicability::Unspecified,\n-                                            );\n-                                        },\n-                                    )\n-                                }\n-                            }\n-                        }\n-                    },\n                     (ty::RawPtr(_), ty::RawPtr(to_ty)) => span_lint_and_then(\n                         cx,\n                         TRANSMUTE_PTR_TO_PTR,"}, {"sha": "a9e3385664bdb387195afaef9f3f78b55522de64", "filename": "clippy_lints/src/transmute/transmute_ref_to_ref.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/7af3458b5458ad99dc900b9fe744f39b9dae449e/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7af3458b5458ad99dc900b9fe744f39b9dae449e/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs?ref=7af3458b5458ad99dc900b9fe744f39b9dae449e", "patch": "@@ -0,0 +1,89 @@\n+use super::{TRANSMUTE_BYTES_TO_STR, TRANSMUTE_PTR_TO_PTR};\n+use crate::utils::{snippet, span_lint_and_sugg, span_lint_and_then, sugg};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, Mutability};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use rustc_middle::ty::Ty;\n+\n+/// Checks for `transmute_bytes_to_str` and `transmute_ptr_to_ptr` lints.\n+/// Returns `true` if either one triggered, otherwise returns `false`.\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    e: &'tcx Expr<'_>,\n+    from_ty: Ty<'tcx>,\n+    to_ty: Ty<'tcx>,\n+    args: &'tcx [Expr<'_>],\n+    const_context: bool,\n+) -> bool {\n+    let mut triggered = false;\n+\n+    match (&from_ty.kind(), &to_ty.kind()) {\n+        (ty::Ref(_, ty_from, from_mutbl), ty::Ref(_, ty_to, to_mutbl)) => {\n+            if_chain! {\n+                if let (&ty::Slice(slice_ty), &ty::Str) = (&ty_from.kind(), &ty_to.kind());\n+                if let ty::Uint(ty::UintTy::U8) = slice_ty.kind();\n+                if from_mutbl == to_mutbl;\n+                then {\n+                    let postfix = if *from_mutbl == Mutability::Mut {\n+                        \"_mut\"\n+                    } else {\n+                        \"\"\n+                    };\n+\n+                    span_lint_and_sugg(\n+                        cx,\n+                        TRANSMUTE_BYTES_TO_STR,\n+                        e.span,\n+                        &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n+                        \"consider using\",\n+                        format!(\n+                            \"std::str::from_utf8{}({}).unwrap()\",\n+                            postfix,\n+                            snippet(cx, args[0].span, \"..\"),\n+                        ),\n+                        Applicability::Unspecified,\n+                    );\n+                    triggered = true;\n+                } else {\n+                    if (cx.tcx.erase_regions(from_ty) != cx.tcx.erase_regions(to_ty))\n+                        && !const_context {\n+                        span_lint_and_then(\n+                            cx,\n+                            TRANSMUTE_PTR_TO_PTR,\n+                            e.span,\n+                            \"transmute from a reference to a reference\",\n+                            |diag| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n+                                let ty_from_and_mut = ty::TypeAndMut {\n+                                    ty: ty_from,\n+                                    mutbl: *from_mutbl\n+                                };\n+                                let ty_to_and_mut = ty::TypeAndMut { ty: ty_to, mutbl: *to_mutbl };\n+                                let sugg_paren = arg\n+                                    .as_ty(cx.tcx.mk_ptr(ty_from_and_mut))\n+                                    .as_ty(cx.tcx.mk_ptr(ty_to_and_mut));\n+                                let sugg = if *to_mutbl == Mutability::Mut {\n+                                    sugg_paren.mut_addr_deref()\n+                                } else {\n+                                    sugg_paren.addr_deref()\n+                                };\n+                                diag.span_suggestion(\n+                                    e.span,\n+                                    \"try\",\n+                                    sugg.to_string(),\n+                                    Applicability::Unspecified,\n+                                );\n+                            },\n+                        );\n+\n+                        triggered = true;\n+                    }\n+                }\n+            }\n+        },\n+        _ => {},\n+    }\n+\n+    triggered\n+}"}]}