{"sha": "a7b8dcc60d50f9be0785ec5a572f813691af2032", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YjhkY2M2MGQ1MGY5YmUwNzg1ZWM1YTU3MmY4MTM2OTFhZjIwMzI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-05-25T04:39:44Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-05-25T04:39:44Z"}, "message": "Simplify --version info", "tree": {"sha": "6c0862b09301195efbe9024a2eb42ed58413e710", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c0862b09301195efbe9024a2eb42ed58413e710"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7b8dcc60d50f9be0785ec5a572f813691af2032", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7b8dcc60d50f9be0785ec5a572f813691af2032", "html_url": "https://github.com/rust-lang/rust/commit/a7b8dcc60d50f9be0785ec5a572f813691af2032", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7b8dcc60d50f9be0785ec5a572f813691af2032/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "393ba2731168a22d947edb6f1fadc0644e1a424d", "url": "https://api.github.com/repos/rust-lang/rust/commits/393ba2731168a22d947edb6f1fadc0644e1a424d", "html_url": "https://github.com/rust-lang/rust/commit/393ba2731168a22d947edb6f1fadc0644e1a424d"}], "stats": {"total": 102, "additions": 30, "deletions": 72}, "files": [{"sha": "2d34a8f7cea6052d2b7cb71650c72d868b0f0f3d", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a7b8dcc60d50f9be0785ec5a572f813691af2032/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a7b8dcc60d50f9be0785ec5a572f813691af2032/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a7b8dcc60d50f9be0785ec5a572f813691af2032", "patch": "@@ -18,7 +18,6 @@ dependencies = [\n  \"term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"walkdir 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -123,15 +122,6 @@ name = \"rustc-serialize\"\n version = \"0.3.24\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"same-file\"\n-version = \"0.1.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"serde\"\n version = \"1.0.7\"\n@@ -289,16 +279,6 @@ name = \"void\"\n version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"walkdir\"\n-version = \"1.0.7\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"same-file 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"winapi\"\n version = \"0.2.8\"\n@@ -326,7 +306,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1731164734096285ec2a5ec7fea5248ae2f5485b3feeb0115af4fda2183b2d1b\"\n \"checksum regex-syntax 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad890a5eef7953f55427c50575c680c42841653abd2b028b68cd223d157f62db\"\n \"checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n-\"checksum same-file 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d931a44fdaa43b8637009e7632a02adc4f2b2e0733c08caa4cf00e8da4a117a7\"\n \"checksum serde 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0c3d79316a6051231925504f6ef893d45088e8823c77a8331a3dcf427ee9087\"\n \"checksum serde_derive 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0019cd5b9f0529a1a0e145a912e9a2d60c325c58f7f260fc36c71976e9d76aee\"\n \"checksum serde_derive_internals 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"021c338d22c7e30f957a6ab7e388cb6098499dda9fd4ba1661ee074ca7a180d1\"\n@@ -346,6 +325,5 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f2ae5ddb18e1c92664717616dd9549dde73f539f01bd7b77c2edb2446bdff91\"\n \"checksum utf8-ranges 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"662fab6525a98beff2921d7f61a39e7d59e0b425ebc7d0d9e66d316e55124122\"\n \"checksum void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d\"\n-\"checksum walkdir 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb08f9e670fab86099470b97cd2b252d6527f0b3cc1401acdb595ffc9dd288ff\"\n \"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n \"checksum winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\""}, {"sha": "4f5eaa7f0181f2a37dd369fe1623143433e1b317", "filename": "Cargo.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7b8dcc60d50f9be0785ec5a572f813691af2032/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a7b8dcc60d50f9be0785ec5a572f813691af2032/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=a7b8dcc60d50f9be0785ec5a572f813691af2032", "patch": "@@ -34,9 +34,6 @@ log = \"0.3\"\n env_logger = \"0.4\"\n getopts = \"0.2\"\n \n-[build-dependencies]\n-walkdir = \"1.0.3\"\n-\n [target.'cfg(unix)'.dependencies]\n libc = \"0.2.11\"\n "}, {"sha": "42d9330f75d8507194c995b90de0aaa7d7d17515", "filename": "build.rs", "status": "modified", "additions": 27, "deletions": 34, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/a7b8dcc60d50f9be0785ec5a572f813691af2032/build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b8dcc60d50f9be0785ec5a572f813691af2032/build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.rs?ref=a7b8dcc60d50f9be0785ec5a572f813691af2032", "patch": "@@ -1,57 +1,50 @@\n-extern crate walkdir;\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n \n use std::env;\n use std::fs::File;\n use std::io::Write;\n-use std::path::Path;\n+use std::path::PathBuf;\n use std::process::Command;\n \n-use walkdir::WalkDir;\n \n fn main() {\n-    let out_dir = env::var(\"OUT_DIR\").unwrap();\n-    let dest_path = Path::new(&out_dir).join(\"git_info.rs\");\n-    let mut f = File::create(&dest_path).unwrap();\n+    let out_dir = PathBuf::from(env::var_os(\"OUT_DIR\").unwrap());\n \n-    writeln!(f,\n-             \"const COMMIT_HASH: Option<&'static str> = {:?};\",\n-             git_head_sha1())\n-        .unwrap();\n-    writeln!(f,\n-             \"const WORKTREE_CLEAN: Option<bool> = {:?};\",\n-             git_tree_is_clean())\n+    File::create(out_dir.join(\"commit-info.txt\"))\n+        .unwrap()\n+        .write_all(commit_info().as_bytes())\n         .unwrap();\n+}\n \n-    // cargo:rerun-if-changed requires one entry per individual file.\n-    for entry in WalkDir::new(\"src\") {\n-        let entry = entry.unwrap();\n-        println!(\"cargo:rerun-if-changed={}\", entry.path().display());\n+// Try to get hash and date of the last commit on a best effort basis. If anything goes wrong\n+// (git not installed or if this is not a git repository) just return an empty string.\n+fn commit_info() -> String {\n+    match (commit_hash(), commit_date()) {\n+        (Some(hash), Some(date)) => format!(\" ({} {})\", hash.trim_right(), date),\n+        _ => String::new(),\n     }\n }\n \n-// Returns `None` if git is not available.\n-fn git_head_sha1() -> Option<String> {\n+fn commit_hash() -> Option<String> {\n     Command::new(\"git\")\n-        .arg(\"rev-parse\")\n-        .arg(\"--short\")\n-        .arg(\"HEAD\")\n+        .args(&[\"rev-parse\", \"--short\", \"HEAD\"])\n         .output()\n         .ok()\n-        .and_then(|o| String::from_utf8(o.stdout).ok())\n-        .map(|mut s| {\n-                 let len = s.trim_right().len();\n-                 s.truncate(len);\n-                 s\n-             })\n+        .and_then(|r| String::from_utf8(r.stdout).ok())\n }\n \n-// Returns `None` if git is not available.\n-fn git_tree_is_clean() -> Option<bool> {\n+fn commit_date() -> Option<String> {\n     Command::new(\"git\")\n-        .arg(\"status\")\n-        .arg(\"--porcelain\")\n-        .arg(\"--untracked-files=no\")\n+        .args(&[\"log\", \"-1\", \"--date=short\", \"--pretty=format:%cd\"])\n         .output()\n         .ok()\n-        .map(|o| o.stdout.is_empty())\n+        .and_then(|r| String::from_utf8(r.stdout).ok())\n }"}, {"sha": "72946b8374a522120f3db2321347e2a632f72f5b", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a7b8dcc60d50f9be0785ec5a572f813691af2032/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b8dcc60d50f9be0785ec5a572f813691af2032/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=a7b8dcc60d50f9be0785ec5a572f813691af2032", "patch": "@@ -29,12 +29,6 @@ use std::str::FromStr;\n \n use getopts::{Matches, Options};\n \n-// Include git commit hash and worktree status; contents are like\n-//   const COMMIT_HASH: Option<&'static str> = Some(\"c31a366\");\n-//   const WORKTREE_CLEAN: Option<bool> = Some(false);\n-// with `None` if running git failed, eg if it is not installed.\n-include!(concat!(env!(\"OUT_DIR\"), \"/git_info.rs\"));\n-\n type FmtError = Box<error::Error + Send + Sync>;\n type FmtResult<T> = std::result::Result<T, FmtError>;\n \n@@ -365,13 +359,9 @@ fn print_usage(opts: &Options, reason: &str) {\n }\n \n fn print_version() {\n-    println!(\"{} ({}{})\",\n-             option_env!(\"CARGO_PKG_VERSION\").unwrap_or(\"unknown\"),\n-             COMMIT_HASH.unwrap_or(\"git commit unavailable\"),\n-             match WORKTREE_CLEAN {\n-                 Some(false) => \" worktree dirty\",\n-                 _ => \"\",\n-             });\n+    println!(\"{}-nightly{}\",\n+             env!(\"CARGO_PKG_VERSION\"),\n+             include_str!(concat!(env!(\"OUT_DIR\"), \"/commit-info.txt\")))\n }\n \n fn determine_operation(matches: &Matches) -> FmtResult<Operation> {"}]}