{"sha": "45c62c08f9740dfcdf64c64c8b183acfc22fb3d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YzYyYzA4Zjk3NDBkZmNkZjY0YzY0YzhiMTgzYWNmYzIyZmIzZDY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-10T02:57:08Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-13T01:54:11Z"}, "message": "std: rename Option::unwrap_or_default() to unwrap_or()", "tree": {"sha": "9b07570e252c12f1f20ea7caf151b13ad6a169a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b07570e252c12f1f20ea7caf151b13ad6a169a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6", "html_url": "https://github.com/rust-lang/rust/commit/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "761ae0035731ebc5c9e42b331fa86fb0385ad9f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/761ae0035731ebc5c9e42b331fa86fb0385ad9f1", "html_url": "https://github.com/rust-lang/rust/commit/761ae0035731ebc5c9e42b331fa86fb0385ad9f1"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "166638bc359bf98e4c560ad6d82187492b5cf4e3", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=45c62c08f9740dfcdf64c64c8b183acfc22fb3d6", "patch": "@@ -309,7 +309,7 @@ pub fn make_test_name(config: &config, testfile: &Path) -> test::TestName {\n         let filename = path.filename();\n         let p = path.pop();\n         let dir = p.filename();\n-        fmt!(\"%s/%s\", dir.unwrap_or_default(\"\"), filename.unwrap_or_default(\"\"))\n+        fmt!(\"%s/%s\", dir.unwrap_or(\"\"), filename.unwrap_or(\"\"))\n     }\n \n     test::DynTestName(fmt!(\"[%s] %s\","}, {"sha": "984a09aed3e38ac819eac23114faa0923146c643", "filename": "src/libextra/glob.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Flibextra%2Fglob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Flibextra%2Fglob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fglob.rs?ref=45c62c08f9740dfcdf64c64c8b183acfc22fb3d6", "patch": "@@ -312,7 +312,7 @@ impl Pattern {\n         let require_literal = |c| {\n             (options.require_literal_separator && is_sep(c)) ||\n             (options.require_literal_leading_dot && c == '.'\n-             && is_sep(prev_char.unwrap_or_default('/')))\n+             && is_sep(prev_char.unwrap_or('/')))\n         };\n \n         for (ti, token) in self.tokens.slice_from(i).iter().enumerate() {"}, {"sha": "1841e25ee95e7172033ae4586e00c3c7e0987a2f", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=45c62c08f9740dfcdf64c64c8b183acfc22fb3d6", "patch": "@@ -681,9 +681,9 @@ pub fn build_session_options(binary: @str,\n             link::output_type_bitcode\n         } else { link::output_type_exe };\n     let sysroot_opt = getopts::opt_maybe_str(matches, \"sysroot\").map_move(|m| @Path(m));\n-    let target = getopts::opt_maybe_str(matches, \"target\").unwrap_or_default(host_triple());\n-    let target_cpu = getopts::opt_maybe_str(matches, \"target-cpu\").unwrap_or_default(~\"generic\");\n-    let target_feature = getopts::opt_maybe_str(matches, \"target-feature\").unwrap_or_default(~\"\");\n+    let target = getopts::opt_maybe_str(matches, \"target\").unwrap_or(host_triple());\n+    let target_cpu = getopts::opt_maybe_str(matches, \"target-cpu\").unwrap_or(~\"generic\");\n+    let target_feature = getopts::opt_maybe_str(matches, \"target-feature\").unwrap_or(~\"\");\n     let save_temps = getopts::opt_present(matches, \"save-temps\");\n     let opt_level = {\n         if (debugging_opts & session::no_opt) != 0 {"}, {"sha": "51fe2acc72ad45b79bbd0a99d07b6da3635d3ee0", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=45c62c08f9740dfcdf64c64c8b183acfc22fb3d6", "patch": "@@ -221,8 +221,7 @@ impl PrivacyVisitor {\n         // If the method is a default method, we need to use the def_id of\n         // the default implementation.\n         // Having to do this this is really unfortunate.\n-        let method_id = ty::method(self.tcx, method_id).provided_source\n-            .unwrap_or_default(method_id);\n+        let method_id = ty::method(self.tcx, method_id).provided_source.unwrap_or(method_id);\n \n         if method_id.crate == LOCAL_CRATE {\n             let is_private = self.method_is_private(span, method_id.node);"}, {"sha": "f08694e44371728c2700b7907e8f730f01d8ce45", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=45c62c08f9740dfcdf64c64c8b183acfc22fb3d6", "patch": "@@ -173,7 +173,7 @@ pub fn check_pat_variant(pcx: &pat_ctxt, pat: @ast::Pat, path: &ast::Path,\n                     fcx.write_error(pat.id);\n                     kind_name = \"[error]\";\n                     arg_types = (*subpats).clone()\n-                                          .unwrap_or_default(~[])\n+                                          .unwrap_or(~[])\n                                           .map(|_| ty::mk_err());\n                 }\n             }\n@@ -222,7 +222,7 @@ pub fn check_pat_variant(pcx: &pat_ctxt, pat: @ast::Pat, path: &ast::Path,\n             fcx.write_error(pat.id);\n             kind_name = \"[error]\";\n             arg_types = (*subpats).clone()\n-                                  .unwrap_or_default(~[])\n+                                  .unwrap_or(~[])\n                                   .map(|_| ty::mk_err());\n         }\n     }"}, {"sha": "bd8d9a65cd33d666037b54bcf1739ce88966777b", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=45c62c08f9740dfcdf64c64c8b183acfc22fb3d6", "patch": "@@ -68,7 +68,7 @@ fn fold_crate(\n     doc::CrateDoc {\n         topmod: doc::ModDoc {\n             item: doc::ItemDoc {\n-                name: attrs.name.clone().unwrap_or_default(doc.topmod.name_()),\n+                name: attrs.name.clone().unwrap_or(doc.topmod.name_()),\n                 .. doc.topmod.item.clone()\n             },\n             .. doc.topmod.clone()"}, {"sha": "c8dd38394c96ee56fa4cb68b43c9fb3511b9034b", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=45c62c08f9740dfcdf64c64c8b183acfc22fb3d6", "patch": "@@ -142,7 +142,7 @@ fn config_from_opts(\n         let output_dir = getopts::opt_maybe_str(matches, opt_output_dir());\n         let output_dir = output_dir.map_move(|s| Path(s));\n         result::Ok(Config {\n-            output_dir: output_dir.unwrap_or_default(config.output_dir.clone()),\n+            output_dir: output_dir.unwrap_or(config.output_dir.clone()),\n             .. config\n         })\n     };"}, {"sha": "ce8e90e1a4324395f823a02201d7e223563b957c", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=45c62c08f9740dfcdf64c64c8b183acfc22fb3d6", "patch": "@@ -45,7 +45,7 @@ pub fn capacity<T>(v: @[T]) -> uint {\n #[inline]\n pub fn build<A>(size: Option<uint>, builder: &fn(push: &fn(v: A))) -> @[A] {\n     let mut vec = @[];\n-    unsafe { raw::reserve(&mut vec, size.unwrap_or_default(4)); }\n+    unsafe { raw::reserve(&mut vec, size.unwrap_or(4)); }\n     builder(|x| unsafe { raw::push(&mut vec, x) });\n     vec\n }"}, {"sha": "5ac6fcda04334c1f573e5ceb5f4eb77249ecb03f", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=45c62c08f9740dfcdf64c64c8b183acfc22fb3d6", "patch": "@@ -332,7 +332,7 @@ impl<T> Option<T> {\n \n     /// Returns the contained value or a default\n     #[inline]\n-    pub fn unwrap_or_default(self, def: T) -> T {\n+    pub fn unwrap_or(self, def: T) -> T {\n         match self {\n             Some(x) => x,\n             None => def"}, {"sha": "95a75b849233a8d5ed46c18ba636a3e3ef3214e5", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=45c62c08f9740dfcdf64c64c8b183acfc22fb3d6", "patch": "@@ -611,7 +611,7 @@ pub fn tmpdir() -> Path {\n         if cfg!(target_os = \"android\") {\n             Path(\"/data/tmp\")\n         } else {\n-            getenv_nonempty(\"TMPDIR\").unwrap_or_default(Path(\"/tmp\"))\n+            getenv_nonempty(\"TMPDIR\").unwrap_or(Path(\"/tmp\"))\n         }\n     }\n "}, {"sha": "55b8e3769ea0b4ae1bbf10b1300335f35010d94b", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=45c62c08f9740dfcdf64c64c8b183acfc22fb3d6", "patch": "@@ -205,7 +205,7 @@ pub fn with_capacity<T>(capacity: uint) -> ~[T] {\n  */\n #[inline]\n pub fn build<A>(size: Option<uint>, builder: &fn(push: &fn(v: A))) -> ~[A] {\n-    let mut vec = with_capacity(size.unwrap_or_default(4));\n+    let mut vec = with_capacity(size.unwrap_or(4));\n     builder(|x| vec.push(x));\n     vec\n }"}, {"sha": "8725a0426f72e46207fa59a9f2345b9533551766", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c62c08f9740dfcdf64c64c8b183acfc22fb3d6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=45c62c08f9740dfcdf64c64c8b183acfc22fb3d6", "patch": "@@ -802,7 +802,7 @@ impl Parser {\n         */\n \n         let opt_abis = self.parse_opt_abis();\n-        let abis = opt_abis.unwrap_or_default(AbiSet::Rust());\n+        let abis = opt_abis.unwrap_or(AbiSet::Rust());\n         let purity = self.parse_unsafety();\n         self.expect_keyword(keywords::Fn);\n         let (decl, lifetimes) = self.parse_ty_fn_decl();\n@@ -3461,7 +3461,7 @@ impl Parser {\n         let ident = self.parse_ident();\n         let opt_bounds = self.parse_optional_ty_param_bounds();\n         // For typarams we don't care about the difference b/w \"<T>\" and \"<T:>\".\n-        let bounds = opt_bounds.unwrap_or_default(opt_vec::Empty);\n+        let bounds = opt_bounds.unwrap_or(opt_vec::Empty);\n         ast::TyParam { ident: ident, id: ast::DUMMY_NODE_ID, bounds: bounds }\n     }\n \n@@ -4363,7 +4363,7 @@ impl Parser {\n                 self.obsolete(*self.last_span, ObsoleteExternVisibility);\n             }\n \n-            let abis = opt_abis.unwrap_or_default(AbiSet::C());\n+            let abis = opt_abis.unwrap_or(AbiSet::C());\n \n             let (inner, next) = self.parse_inner_attrs_and_next();\n             let m = self.parse_foreign_mod_items(sort, abis, next);\n@@ -4640,7 +4640,7 @@ impl Parser {\n \n             if self.eat_keyword(keywords::Fn) {\n                 // EXTERN FUNCTION ITEM\n-                let abis = opt_abis.unwrap_or_default(AbiSet::C());\n+                let abis = opt_abis.unwrap_or(AbiSet::C());\n                 let (ident, item_, extra_attrs) =\n                     self.parse_item_fn(extern_fn, abis);\n                 return iovi_item(self.mk_item(lo, self.last_span.hi, ident,"}]}