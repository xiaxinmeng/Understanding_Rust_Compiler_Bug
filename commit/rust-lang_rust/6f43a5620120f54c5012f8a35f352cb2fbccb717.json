{"sha": "6f43a5620120f54c5012f8a35f352cb2fbccb717", "node_id": "C_kwDOAAsO6NoAKDZmNDNhNTYyMDEyMGY1NGM1MDEyZjhhMzVmMzUyY2IyZmJjY2I3MTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-22T09:02:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-22T09:02:25Z"}, "message": "Auto merge of #14633 - Veykril:assoc-collect, r=Veykril\n\ninternal: Don't reparse files when trying to expand assoc item macro calls", "tree": {"sha": "ffc5a953a8515966d893cd452d5f76216dcea733", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffc5a953a8515966d893cd452d5f76216dcea733"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f43a5620120f54c5012f8a35f352cb2fbccb717", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f43a5620120f54c5012f8a35f352cb2fbccb717", "html_url": "https://github.com/rust-lang/rust/commit/6f43a5620120f54c5012f8a35f352cb2fbccb717", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f43a5620120f54c5012f8a35f352cb2fbccb717/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1379b5fac7aa99d0408c4612bd73beb41a851303", "url": "https://api.github.com/repos/rust-lang/rust/commits/1379b5fac7aa99d0408c4612bd73beb41a851303", "html_url": "https://github.com/rust-lang/rust/commit/1379b5fac7aa99d0408c4612bd73beb41a851303"}, {"sha": "2aa44c8e37b0230e05e0d8e32687685c28fb8f8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aa44c8e37b0230e05e0d8e32687685c28fb8f8d", "html_url": "https://github.com/rust-lang/rust/commit/2aa44c8e37b0230e05e0d8e32687685c28fb8f8d"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "701cc29f4ead69105108799bf9264a229394fb1a", "filename": "crates/hir-def/src/data.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6f43a5620120f54c5012f8a35f352cb2fbccb717/crates%2Fhir-def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f43a5620120f54c5012f8a35f352cb2fbccb717/crates%2Fhir-def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata.rs?ref=6f43a5620120f54c5012f8a35f352cb2fbccb717", "patch": "@@ -14,6 +14,7 @@ use crate::{\n     db::DefDatabase,\n     expander::{Expander, Mark},\n     item_tree::{self, AssocItem, FnFlags, ItemTree, ItemTreeId, ModItem, Param, TreeId},\n+    macro_call_as_call_id, macro_id_to_def_id,\n     nameres::{\n         attr_resolution::ResolvedAttr,\n         diagnostics::DefDiagnostic,\n@@ -639,18 +640,15 @@ impl<'a> AssocItemCollector<'a> {\n                 }\n                 AssocItem::MacroCall(call) => {\n                     let file_id = self.expander.current_file_id();\n-                    let root = self.db.parse_or_expand(file_id);\n                     let call = &item_tree[call];\n-\n-                    let ast_id_map = self.db.ast_id_map(file_id);\n-                    let macro_call = ast_id_map.get(call.ast_id).to_node(&root);\n-                    let _cx = stdx::panic_context::enter(format!(\n-                        \"collect_items MacroCall: {macro_call}\"\n-                    ));\n                     let module = self.expander.module.local_id;\n \n-                    if let Ok(res) =\n-                        self.expander.enter_expand::<ast::MacroItems>(self.db, macro_call, |path| {\n+                    if let Ok(Some(call_id)) = macro_call_as_call_id(\n+                        self.db.upcast(),\n+                        &AstIdWithPath::new(file_id, call.ast_id, Clone::clone(&call.path)),\n+                        call.expand_to,\n+                        self.expander.module.krate(),\n+                        |path| {\n                             self.def_map\n                                 .resolve_path(\n                                     self.db,\n@@ -660,8 +658,11 @@ impl<'a> AssocItemCollector<'a> {\n                                 )\n                                 .0\n                                 .take_macros()\n-                        })\n-                    {\n+                                .map(|it| macro_id_to_def_id(self.db, it))\n+                        },\n+                    ) {\n+                        let res =\n+                            self.expander.enter_expand_id::<ast::MacroItems>(self.db, call_id);\n                         self.collect_macro_items(res, &|| hir_expand::MacroCallKind::FnLike {\n                             ast_id: InFile::new(file_id, call.ast_id),\n                             expand_to: hir_expand::ExpandTo::Items,"}]}