{"sha": "56a35bc906be1250a76fdb9a4b70e9261e10aec5", "node_id": "C_kwDOAAsO6NoAKDU2YTM1YmM5MDZiZTEyNTBhNzZmZGI5YTRiNzBlOTI2MWUxMGFlYzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-01T17:11:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-01T17:11:19Z"}, "message": "Auto merge of #102545 - matthiaskrgr:rollup-13i3tc3, r=matthiaskrgr\n\nRollup of 3 pull requests\n\nSuccessful merges:\n\n - #101675 (Improve `File::set_times` error handling)\n - #102500 (Remove `expr_parentheses_needed` from `ParseSess`)\n - #102533 (rustdoc: remove unused CSS selector `a.source`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "fadad570b55acc7b2df2f40d110f6ecf0b54b36e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fadad570b55acc7b2df2f40d110f6ecf0b54b36e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56a35bc906be1250a76fdb9a4b70e9261e10aec5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56a35bc906be1250a76fdb9a4b70e9261e10aec5", "html_url": "https://github.com/rust-lang/rust/commit/56a35bc906be1250a76fdb9a4b70e9261e10aec5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56a35bc906be1250a76fdb9a4b70e9261e10aec5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edadc7ccdda644ef8149869d2f24018a1dac202a", "url": "https://api.github.com/repos/rust-lang/rust/commits/edadc7ccdda644ef8149869d2f24018a1dac202a", "html_url": "https://github.com/rust-lang/rust/commit/edadc7ccdda644ef8149869d2f24018a1dac202a"}, {"sha": "51e2f03af28c8e2a83a7cb51d8482297d8326260", "url": "https://api.github.com/repos/rust-lang/rust/commits/51e2f03af28c8e2a83a7cb51d8482297d8326260", "html_url": "https://github.com/rust-lang/rust/commit/51e2f03af28c8e2a83a7cb51d8482297d8326260"}], "stats": {"total": 126, "additions": 59, "deletions": 67}, "files": [{"sha": "09362eab673e83faf667157c8173e9a8942bb986", "filename": "compiler/rustc_hir_analysis/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56a35bc906be1250a76fdb9a4b70e9261e10aec5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a35bc906be1250a76fdb9a4b70e9261e10aec5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fexpr.rs?ref=56a35bc906be1250a76fdb9a4b70e9261e10aec5", "patch": "@@ -41,6 +41,7 @@ use rustc_middle::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase};\n use rustc_middle::ty::error::TypeError::FieldMisMatch;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, AdtKind, Ty, TypeVisitable};\n+use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_session::parse::feature_err;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n@@ -394,7 +395,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         if let Some(sp) =\n                             tcx.sess.parse_sess.ambiguous_block_expr_parse.borrow().get(&sp)\n                         {\n-                            tcx.sess.parse_sess.expr_parentheses_needed(&mut err, *sp);\n+                            err.subdiagnostic(ExprParenthesesNeeded::surrounding(*sp));\n                         }\n                         err.emit();\n                         oprnd_t = tcx.ty_error();"}, {"sha": "05ed3b299726c03fceb87b1048f1f5aee9829469", "filename": "compiler/rustc_hir_analysis/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56a35bc906be1250a76fdb9a4b70e9261e10aec5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a35bc906be1250a76fdb9a4b70e9261e10aec5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=56a35bc906be1250a76fdb9a4b70e9261e10aec5", "patch": "@@ -15,6 +15,7 @@ use rustc_infer::infer::{self, TyCtxtInferExt};\n use rustc_infer::traits::{self, StatementAsExpression};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Binder, IsSuggestable, ToPredicate, Ty};\n+use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_trait_selection::infer::InferCtxtExt;\n@@ -895,7 +896,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let sp = self.tcx.sess.source_map().start_point(expr.span);\n         if let Some(sp) = self.tcx.sess.parse_sess.ambiguous_block_expr_parse.borrow().get(&sp) {\n             // `{ 42 } &&x` (#61475) or `{ 42 } && if x { 1 } else { 0 }`\n-            self.tcx.sess.parse_sess.expr_parentheses_needed(err, *sp);\n+            err.subdiagnostic(ExprParenthesesNeeded::surrounding(*sp));\n         }\n     }\n "}, {"sha": "2d7d9020e3ecc9f8afd7087ac5700c3e6940cea5", "filename": "compiler/rustc_hir_analysis/src/check/op.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56a35bc906be1250a76fdb9a4b70e9261e10aec5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a35bc906be1250a76fdb9a4b70e9261e10aec5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fop.rs?ref=56a35bc906be1250a76fdb9a4b70e9261e10aec5", "patch": "@@ -13,6 +13,7 @@ use rustc_middle::ty::adjustment::{\n };\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt, TypeFolder, TypeSuperFoldable, TypeVisitable};\n+use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n@@ -677,7 +678,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // If the previous expression was a block expression, suggest parentheses\n                         // (turning this into a binary subtraction operation instead.)\n                         // for example, `{2} - 2` -> `({2}) - 2` (see src\\test\\ui\\parser\\expr-as-stmt.rs)\n-                        self.tcx.sess.parse_sess.expr_parentheses_needed(&mut err, *sp);\n+                        err.subdiagnostic(ExprParenthesesNeeded::surrounding(*sp));\n                     } else {\n                         match actual.kind() {\n                             Uint(_) if op == hir::UnOp::Neg => {"}, {"sha": "f57bd9cec19200610617ed28edb52115ef57ec84", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56a35bc906be1250a76fdb9a4b70e9261e10aec5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a35bc906be1250a76fdb9a4b70e9261e10aec5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=56a35bc906be1250a76fdb9a4b70e9261e10aec5", "patch": "@@ -33,6 +33,7 @@ use rustc_errors::{\n     fluent, Applicability, DiagnosticBuilder, DiagnosticMessage, Handler, MultiSpan, PResult,\n };\n use rustc_errors::{pluralize, Diagnostic, ErrorGuaranteed, IntoDiagnostic};\n+use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{Span, SpanSnippetError, DUMMY_SP};\n@@ -2049,7 +2050,7 @@ impl<'a> Parser<'a> {\n         let mut err = self.struct_span_err(span, &msg);\n         let sp = self.sess.source_map().start_point(self.token.span);\n         if let Some(sp) = self.sess.ambiguous_block_expr_parse.borrow().get(&sp) {\n-            self.sess.expr_parentheses_needed(&mut err, *sp);\n+            err.subdiagnostic(ExprParenthesesNeeded::surrounding(*sp));\n         }\n         err.span_label(span, \"expected expression\");\n         err"}, {"sha": "11301f03e48eb70615f05abbcc8deb3c3e1393f8", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56a35bc906be1250a76fdb9a4b70e9261e10aec5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a35bc906be1250a76fdb9a4b70e9261e10aec5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=56a35bc906be1250a76fdb9a4b70e9261e10aec5", "patch": "@@ -1310,7 +1310,7 @@ impl<'a> Parser<'a> {\n                 // If the input is something like `if a { 1 } else { 2 } | if a { 3 } else { 4 }`\n                 // then suggest parens around the lhs.\n                 if let Some(sp) = self.sess.ambiguous_block_expr_parse.borrow().get(&lo) {\n-                    self.sess.expr_parentheses_needed(&mut err, *sp);\n+                    err.subdiagnostic(ExprParenthesesNeeded::surrounding(*sp));\n                 }\n                 err\n             })"}, {"sha": "0250b518243c1ee9dce286102231d377e4e1e731", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56a35bc906be1250a76fdb9a4b70e9261e10aec5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a35bc906be1250a76fdb9a4b70e9261e10aec5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=56a35bc906be1250a76fdb9a4b70e9261e10aec5", "patch": "@@ -10,6 +10,7 @@ use rustc_ast::{\n };\n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed, PResult};\n+use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::{respan, Span, Spanned};\n use rustc_span::symbol::{kw, sym, Ident};\n \n@@ -693,7 +694,7 @@ impl<'a> Parser<'a> {\n \n         let sp = self.sess.source_map().start_point(self.token.span);\n         if let Some(sp) = self.sess.ambiguous_block_expr_parse.borrow().get(&sp) {\n-            self.sess.expr_parentheses_needed(&mut err, *sp);\n+            err.subdiagnostic(ExprParenthesesNeeded::surrounding(*sp));\n         }\n \n         Err(err)"}, {"sha": "2c3d8d5283b5736c9004d9e86d755746a912e8eb", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/56a35bc906be1250a76fdb9a4b70e9261e10aec5/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a35bc906be1250a76fdb9a4b70e9261e10aec5/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=56a35bc906be1250a76fdb9a4b70e9261e10aec5", "patch": "@@ -2,9 +2,7 @@\n //! It also serves as an input to the parser itself.\n \n use crate::config::CheckCfg;\n-use crate::errors::{\n-    ExprParenthesesNeeded, FeatureDiagnosticForIssue, FeatureDiagnosticHelp, FeatureGateError,\n-};\n+use crate::errors::{FeatureDiagnosticForIssue, FeatureDiagnosticHelp, FeatureGateError};\n use crate::lint::{\n     builtin::UNSTABLE_SYNTAX_PRE_EXPANSION, BufferedEarlyLint, BuiltinLintDiagnostics, Lint, LintId,\n };\n@@ -13,8 +11,8 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n use rustc_errors::{\n-    fallback_fluent_bundle, AddToDiagnostic, Diagnostic, DiagnosticBuilder, DiagnosticId,\n-    DiagnosticMessage, EmissionGuarantee, ErrorGuaranteed, IntoDiagnostic, MultiSpan, StashKey,\n+    fallback_fluent_bundle, Diagnostic, DiagnosticBuilder, DiagnosticId, DiagnosticMessage,\n+    EmissionGuarantee, ErrorGuaranteed, IntoDiagnostic, MultiSpan, StashKey,\n };\n use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};\n use rustc_span::edition::Edition;\n@@ -324,12 +322,6 @@ impl ParseSess {\n         });\n     }\n \n-    /// Extend an error with a suggestion to wrap an expression with parentheses to allow the\n-    /// parser to continue parsing the following operation as part of the same expression.\n-    pub fn expr_parentheses_needed(&self, err: &mut Diagnostic, span: Span) {\n-        ExprParenthesesNeeded::surrounding(span).add_to_diagnostic(err);\n-    }\n-\n     pub fn save_proc_macro_span(&self, span: Span) -> usize {\n         let mut spans = self.proc_macro_quoted_spans.lock();\n         spans.push(span);"}, {"sha": "97eed8a65c52e349541326fcf4f935ab07c51810", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56a35bc906be1250a76fdb9a4b70e9261e10aec5/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a35bc906be1250a76fdb9a4b70e9261e10aec5/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=56a35bc906be1250a76fdb9a4b70e9261e10aec5", "patch": "@@ -251,6 +251,7 @@\n #![feature(doc_notable_trait)]\n #![feature(dropck_eyepatch)]\n #![feature(exhaustive_patterns)]\n+#![feature(if_let_guard)]\n #![feature(intra_doc_pointers)]\n #![feature(lang_items)]\n #![feature(let_chains)]"}, {"sha": "57c7bf6a28b90491b2841adcd5615ddc0e2a85c0", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 21, "deletions": 41, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/56a35bc906be1250a76fdb9a4b70e9261e10aec5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a35bc906be1250a76fdb9a4b70e9261e10aec5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=56a35bc906be1250a76fdb9a4b70e9261e10aec5", "patch": "@@ -313,8 +313,11 @@ pub struct FilePermissions {\n     mode: mode_t,\n }\n \n-#[derive(Copy, Clone)]\n-pub struct FileTimes([libc::timespec; 2]);\n+#[derive(Copy, Clone, Debug, Default)]\n+pub struct FileTimes {\n+    accessed: Option<SystemTime>,\n+    modified: Option<SystemTime>,\n+}\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub struct FileType {\n@@ -512,45 +515,11 @@ impl FilePermissions {\n \n impl FileTimes {\n     pub fn set_accessed(&mut self, t: SystemTime) {\n-        self.0[0] = t.t.to_timespec().expect(\"Invalid system time\");\n+        self.accessed = Some(t);\n     }\n \n     pub fn set_modified(&mut self, t: SystemTime) {\n-        self.0[1] = t.t.to_timespec().expect(\"Invalid system time\");\n-    }\n-}\n-\n-struct TimespecDebugAdapter<'a>(&'a libc::timespec);\n-\n-impl fmt::Debug for TimespecDebugAdapter<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"timespec\")\n-            .field(\"tv_sec\", &self.0.tv_sec)\n-            .field(\"tv_nsec\", &self.0.tv_nsec)\n-            .finish()\n-    }\n-}\n-\n-impl fmt::Debug for FileTimes {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"FileTimes\")\n-            .field(\"accessed\", &TimespecDebugAdapter(&self.0[0]))\n-            .field(\"modified\", &TimespecDebugAdapter(&self.0[1]))\n-            .finish()\n-    }\n-}\n-\n-impl Default for FileTimes {\n-    fn default() -> Self {\n-        // Redox doesn't appear to support `UTIME_OMIT`, so we stub it out here, and always return\n-        // an error in `set_times`.\n-        // ESP-IDF and HorizonOS do not support `futimens` at all and the behavior for those OS is therefore\n-        // the same as for Redox.\n-        #[cfg(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\"))]\n-        let omit = libc::timespec { tv_sec: 0, tv_nsec: 0 };\n-        #[cfg(not(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\")))]\n-        let omit = libc::timespec { tv_sec: 0, tv_nsec: libc::UTIME_OMIT as _ };\n-        Self([omit; 2])\n+        self.modified = Some(t);\n     }\n }\n \n@@ -1084,6 +1053,17 @@ impl File {\n     }\n \n     pub fn set_times(&self, times: FileTimes) -> io::Result<()> {\n+        #[cfg(not(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\")))]\n+        let to_timespec = |time: Option<SystemTime>| {\n+            match time {\n+                Some(time) if let Some(ts) = time.t.to_timespec() => Ok(ts),\n+                Some(time) if time > crate::sys::time::UNIX_EPOCH => Err(io::const_io_error!(io::ErrorKind::InvalidInput, \"timestamp is too large to set as a file time\")),\n+                Some(_) => Err(io::const_io_error!(io::ErrorKind::InvalidInput, \"timestamp is too small to set as a file time\")),\n+                None => Ok(libc::timespec { tv_sec: 0, tv_nsec: libc::UTIME_OMIT as _ }),\n+            }\n+        };\n+        #[cfg(not(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\")))]\n+        let times = [to_timespec(times.accessed)?, to_timespec(times.modified)?];\n         cfg_if::cfg_if! {\n             if #[cfg(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\"))] {\n                 // Redox doesn't appear to support `UTIME_OMIT`.\n@@ -1099,7 +1079,7 @@ impl File {\n                 cvt(unsafe {\n                     weak!(fn futimens(c_int, *const libc::timespec) -> c_int);\n                     match futimens.get() {\n-                        Some(futimens) => futimens(self.as_raw_fd(), times.0.as_ptr()),\n+                        Some(futimens) => futimens(self.as_raw_fd(), times.as_ptr()),\n                         #[cfg(target_os = \"macos\")]\n                         None => {\n                             fn ts_to_tv(ts: &libc::timespec) -> libc::timeval {\n@@ -1108,7 +1088,7 @@ impl File {\n                                     tv_usec: (ts.tv_nsec / 1000) as _\n                                 }\n                             }\n-                            let timevals = [ts_to_tv(&times.0[0]), ts_to_tv(&times.0[1])];\n+                            let timevals = [ts_to_tv(&times[0]), ts_to_tv(&times[1])];\n                             libc::futimes(self.as_raw_fd(), timevals.as_ptr())\n                         }\n                         // futimes requires even newer Android.\n@@ -1121,7 +1101,7 @@ impl File {\n                 })?;\n                 Ok(())\n             } else {\n-                cvt(unsafe { libc::futimens(self.as_raw_fd(), times.0.as_ptr()) })?;\n+                cvt(unsafe { libc::futimens(self.as_raw_fd(), times.as_ptr()) })?;\n                 Ok(())\n             }\n         }"}, {"sha": "953fbeb8395ef37363940e4e3a585d0c2d0b9408", "filename": "library/std/src/sys/wasi/fs.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/56a35bc906be1250a76fdb9a4b70e9261e10aec5/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a35bc906be1250a76fdb9a4b70e9261e10aec5/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs?ref=56a35bc906be1250a76fdb9a4b70e9261e10aec5", "patch": "@@ -65,8 +65,8 @@ pub struct FilePermissions {\n \n #[derive(Copy, Clone, Debug, Default)]\n pub struct FileTimes {\n-    accessed: Option<wasi::Timestamp>,\n-    modified: Option<wasi::Timestamp>,\n+    accessed: Option<SystemTime>,\n+    modified: Option<SystemTime>,\n }\n \n #[derive(PartialEq, Eq, Hash, Debug, Copy, Clone)]\n@@ -120,11 +120,11 @@ impl FilePermissions {\n \n impl FileTimes {\n     pub fn set_accessed(&mut self, t: SystemTime) {\n-        self.accessed = Some(t.to_wasi_timestamp_or_panic());\n+        self.accessed = Some(t);\n     }\n \n     pub fn set_modified(&mut self, t: SystemTime) {\n-        self.modified = Some(t.to_wasi_timestamp_or_panic());\n+        self.modified = Some(t);\n     }\n }\n \n@@ -476,9 +476,16 @@ impl File {\n     }\n \n     pub fn set_times(&self, times: FileTimes) -> io::Result<()> {\n+        let to_timestamp = |time: Option<SystemTime>| {\n+            match time {\n+                Some(time) if let Some(ts) = time.to_wasi_timestamp() => Ok(ts),\n+                Some(_) => Err(io::const_io_error!(io::ErrorKind::InvalidInput, \"timestamp is too large to set as a file time\")),\n+                None => Ok(0),\n+            }\n+        };\n         self.fd.filestat_set_times(\n-            times.accessed.unwrap_or(0),\n-            times.modified.unwrap_or(0),\n+            to_timestamp(times.accessed)?,\n+            to_timestamp(times.modified)?,\n             times.accessed.map_or(0, |_| wasi::FSTFLAGS_ATIM)\n                 | times.modified.map_or(0, |_| wasi::FSTFLAGS_MTIM),\n         )"}, {"sha": "016b06efbdc633ae5535ad14766199a7b3decc8b", "filename": "library/std/src/sys/wasi/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56a35bc906be1250a76fdb9a4b70e9261e10aec5/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a35bc906be1250a76fdb9a4b70e9261e10aec5/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ftime.rs?ref=56a35bc906be1250a76fdb9a4b70e9261e10aec5", "patch": "@@ -47,8 +47,8 @@ impl SystemTime {\n         SystemTime(Duration::from_nanos(ts))\n     }\n \n-    pub fn to_wasi_timestamp_or_panic(&self) -> wasi::Timestamp {\n-        self.0.as_nanos().try_into().expect(\"time does not fit in WASI timestamp\")\n+    pub fn to_wasi_timestamp(&self) -> Option<wasi::Timestamp> {\n+        self.0.as_nanos().try_into().ok()\n     }\n \n     pub fn sub_time(&self, other: &SystemTime) -> Result<Duration, Duration> {"}, {"sha": "ade00750c959cc2b1b096dc32d4092809b77a955", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56a35bc906be1250a76fdb9a4b70e9261e10aec5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a35bc906be1250a76fdb9a4b70e9261e10aec5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=56a35bc906be1250a76fdb9a4b70e9261e10aec5", "patch": "@@ -572,6 +572,14 @@ impl File {\n                 \"Cannot set file timestamp to 0\",\n             ));\n         }\n+        let is_max =\n+            |t: c::FILETIME| t.dwLowDateTime == c::DWORD::MAX && t.dwHighDateTime == c::DWORD::MAX;\n+        if times.accessed.map_or(false, is_max) || times.modified.map_or(false, is_max) {\n+            return Err(io::const_io_error!(\n+                io::ErrorKind::InvalidInput,\n+                \"Cannot set file timestamp to 0xFFFF_FFFF_FFFF_FFFF\",\n+            ));\n+        }\n         cvt(unsafe {\n             c::SetFileTime(self.as_handle(), None, times.accessed.as_ref(), times.modified.as_ref())\n         })?;"}, {"sha": "a9dbb2d4a1b4260c20ed93e9bdbafb4a6aafc62f", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56a35bc906be1250a76fdb9a4b70e9261e10aec5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/56a35bc906be1250a76fdb9a4b70e9261e10aec5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=56a35bc906be1250a76fdb9a4b70e9261e10aec5", "patch": "@@ -201,7 +201,6 @@ h4.code-header {\n h1, h2, h3, h4, h5, h6,\n .sidebar,\n .mobile-topbar,\n-a.source,\n .search-input,\n .search-results .result-name,\n .item-left > a,"}]}