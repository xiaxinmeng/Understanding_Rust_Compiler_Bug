{"sha": "326ec52eacf34a0a446ca1775e514cf7e6016de4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNmVjNTJlYWNmMzRhMGE0NDZjYTE3NzVlNTE0Y2Y3ZTYwMTZkZTQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-05T12:01:48Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-16T10:57:43Z"}, "message": "rename RegionVarBindings to RegionConstraintCollector", "tree": {"sha": "6964ceb3acdb277eab1868142bc36321511a48f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6964ceb3acdb277eab1868142bc36321511a48f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/326ec52eacf34a0a446ca1775e514cf7e6016de4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/326ec52eacf34a0a446ca1775e514cf7e6016de4", "html_url": "https://github.com/rust-lang/rust/commit/326ec52eacf34a0a446ca1775e514cf7e6016de4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/326ec52eacf34a0a446ca1775e514cf7e6016de4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48d8f7210b99299eddeead7ac381cc11a4a2049e", "url": "https://api.github.com/repos/rust-lang/rust/commits/48d8f7210b99299eddeead7ac381cc11a4a2049e", "html_url": "https://github.com/rust-lang/rust/commit/48d8f7210b99299eddeead7ac381cc11a4a2049e"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "880c0e22947441d3e6c9241740dcc338e5b6cfb7", "filename": "src/librustc/infer/lexical_region_resolve/graphviz.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/326ec52eacf34a0a446ca1775e514cf7e6016de4/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ec52eacf34a0a446ca1775e514cf7e6016de4/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs?ref=326ec52eacf34a0a446ca1775e514cf7e6016de4", "patch": "@@ -25,7 +25,7 @@ use middle::free_region::RegionRelations;\n use middle::region;\n use super::Constraint;\n use infer::SubregionOrigin;\n-use infer::region_constraints::RegionVarBindings;\n+use infer::region_constraints::RegionConstraintCollector;\n use util::nodemap::{FxHashMap, FxHashSet};\n \n use std::borrow::Cow;\n@@ -57,7 +57,7 @@ graphs will be printed.                                                     \\n\\\n }\n \n pub fn maybe_print_constraints_for<'a, 'gcx, 'tcx>(\n-    region_vars: &RegionVarBindings<'tcx>,\n+    region_constraints: &RegionConstraintCollector<'tcx>,\n     region_rels: &RegionRelations<'a, 'gcx, 'tcx>)\n {\n     let tcx = region_rels.tcx;\n@@ -113,7 +113,7 @@ pub fn maybe_print_constraints_for<'a, 'gcx, 'tcx>(\n         }\n     };\n \n-    match dump_region_constraints_to(region_rels, &region_vars.constraints, &output_path) {\n+    match dump_region_constraints_to(region_rels, &region_constraints.constraints, &output_path) {\n         Ok(()) => {}\n         Err(e) => {\n             let msg = format!(\"io error dumping region constraints: {}\", e);"}, {"sha": "9a02b274b5fb0654a3776fb4aae73ac7c8052d73", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/326ec52eacf34a0a446ca1775e514cf7e6016de4/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ec52eacf34a0a446ca1775e514cf7e6016de4/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=326ec52eacf34a0a446ca1775e514cf7e6016de4", "patch": "@@ -14,7 +14,7 @@ use infer::SubregionOrigin;\n use infer::RegionVariableOrigin;\n use infer::region_constraints::Constraint;\n use infer::region_constraints::GenericKind;\n-use infer::region_constraints::RegionVarBindings;\n+use infer::region_constraints::RegionConstraintCollector;\n use infer::region_constraints::VerifyBound;\n use middle::free_region::RegionRelations;\n use rustc_data_structures::fx::FxHashSet;\n@@ -73,7 +73,7 @@ struct RegionAndOrigin<'tcx> {\n \n type RegionGraph<'tcx> = graph::Graph<(), Constraint<'tcx>>;\n \n-impl<'tcx> RegionVarBindings<'tcx> {\n+impl<'tcx> RegionConstraintCollector<'tcx> {\n     /// This function performs the actual region resolution.  It must be\n     /// called after all constraints have been added.  It performs a\n     /// fixed-point iteration to find region values which satisfy all\n@@ -86,7 +86,7 @@ impl<'tcx> RegionVarBindings<'tcx> {\n         LexicalRegionResolutions<'tcx>,\n         Vec<RegionResolutionError<'tcx>>,\n     ) {\n-        debug!(\"RegionVarBindings: resolve_regions()\");\n+        debug!(\"RegionConstraintCollector: resolve_regions()\");\n         let mut errors = vec![];\n         let values = self.infer_variable_values(region_rels, &mut errors);\n         (values, errors)\n@@ -642,7 +642,7 @@ impl<'tcx> RegionVarBindings<'tcx> {\n         return (result, dup_found);\n \n         fn process_edges<'tcx>(\n-            this: &RegionVarBindings<'tcx>,\n+            this: &RegionConstraintCollector<'tcx>,\n             state: &mut WalkState<'tcx>,\n             graph: &RegionGraph<'tcx>,\n             source_vid: RegionVid,"}, {"sha": "d42419d7dc64d487df152d93d34bec2c5d268185", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/326ec52eacf34a0a446ca1775e514cf7e6016de4/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ec52eacf34a0a446ca1775e514cf7e6016de4/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=326ec52eacf34a0a446ca1775e514cf7e6016de4", "patch": "@@ -41,7 +41,7 @@ use arena::DroplessArena;\n \n use self::combine::CombineFields;\n use self::higher_ranked::HrMatchResult;\n-use self::region_constraints::{RegionVarBindings, RegionSnapshot};\n+use self::region_constraints::{RegionConstraintCollector, RegionSnapshot};\n use self::lexical_region_resolve::LexicalRegionResolutions;\n use self::type_variable::TypeVariableOrigin;\n use self::unify_key::ToType;\n@@ -104,7 +104,7 @@ pub struct InferCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     float_unification_table: RefCell<UnificationTable<ty::FloatVid>>,\n \n     // For region variables.\n-    region_constraints: RefCell<RegionVarBindings<'tcx>>,\n+    region_constraints: RefCell<RegionConstraintCollector<'tcx>>,\n \n     // Once region inference is done, the values for each variable.\n     lexical_region_resolutions: RefCell<Option<LexicalRegionResolutions<'tcx>>>,\n@@ -424,7 +424,7 @@ impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n             type_variables: RefCell::new(type_variable::TypeVariableTable::new()),\n             int_unification_table: RefCell::new(UnificationTable::new()),\n             float_unification_table: RefCell::new(UnificationTable::new()),\n-            region_constraints: RefCell::new(RegionVarBindings::new()),\n+            region_constraints: RefCell::new(RegionConstraintCollector::new()),\n             lexical_region_resolutions: RefCell::new(None),\n             selection_cache: traits::SelectionCache::new(),\n             evaluation_cache: traits::EvaluationCache::new(),"}, {"sha": "446acac4fd184f1e39d829d1aebb64de28b1c057", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/326ec52eacf34a0a446ca1775e514cf7e6016de4/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ec52eacf34a0a446ca1775e514cf7e6016de4/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=326ec52eacf34a0a446ca1775e514cf7e6016de4", "patch": "@@ -143,7 +143,7 @@ enum CombineMapType {\n \n type CombineMap<'tcx> = FxHashMap<TwoRegions<'tcx>, RegionVid>;\n \n-pub struct RegionVarBindings<'tcx> {\n+pub struct RegionConstraintCollector<'tcx> {\n     pub(in infer) var_origins: Vec<RegionVariableOrigin>,\n \n     /// Constraints of the form `A <= B` introduced by the region\n@@ -242,9 +242,9 @@ impl TaintDirections {\n     }\n }\n \n-impl<'tcx> RegionVarBindings<'tcx> {\n-    pub fn new() -> RegionVarBindings<'tcx> {\n-        RegionVarBindings {\n+impl<'tcx> RegionConstraintCollector<'tcx> {\n+    pub fn new() -> RegionConstraintCollector<'tcx> {\n+        RegionConstraintCollector {\n             var_origins: Vec::new(),\n             constraints: BTreeMap::new(),\n             verifys: Vec::new(),\n@@ -264,7 +264,7 @@ impl<'tcx> RegionVarBindings<'tcx> {\n \n     pub fn start_snapshot(&mut self) -> RegionSnapshot {\n         let length = self.undo_log.len();\n-        debug!(\"RegionVarBindings: start_snapshot({})\", length);\n+        debug!(\"RegionConstraintCollector: start_snapshot({})\", length);\n         self.undo_log.push(OpenSnapshot);\n         RegionSnapshot {\n             length,\n@@ -274,7 +274,7 @@ impl<'tcx> RegionVarBindings<'tcx> {\n     }\n \n     pub fn commit(&mut self, snapshot: RegionSnapshot) {\n-        debug!(\"RegionVarBindings: commit({})\", snapshot.length);\n+        debug!(\"RegionConstraintCollector: commit({})\", snapshot.length);\n         assert!(self.undo_log.len() > snapshot.length);\n         assert!(self.undo_log[snapshot.length] == OpenSnapshot);\n         assert!(\n@@ -294,7 +294,7 @@ impl<'tcx> RegionVarBindings<'tcx> {\n     }\n \n     pub fn rollback_to(&mut self, snapshot: RegionSnapshot) {\n-        debug!(\"RegionVarBindings: rollback_to({:?})\", snapshot);\n+        debug!(\"RegionConstraintCollector: rollback_to({:?})\", snapshot);\n         assert!(self.undo_log.len() > snapshot.length);\n         assert!(self.undo_log[snapshot.length] == OpenSnapshot);\n         while self.undo_log.len() > snapshot.length + 1 {\n@@ -523,7 +523,7 @@ impl<'tcx> RegionVarBindings<'tcx> {\n \n     fn add_constraint(&mut self, constraint: Constraint<'tcx>, origin: SubregionOrigin<'tcx>) {\n         // cannot add constraints once regions are resolved\n-        debug!(\"RegionVarBindings: add_constraint({:?})\", constraint);\n+        debug!(\"RegionConstraintCollector: add_constraint({:?})\", constraint);\n \n         // never overwrite an existing (constraint, origin) - only insert one if it isn't\n         // present in the map yet. This prevents origins from outside the snapshot being\n@@ -542,7 +542,7 @@ impl<'tcx> RegionVarBindings<'tcx> {\n \n     fn add_verify(&mut self, verify: Verify<'tcx>) {\n         // cannot add verifys once regions are resolved\n-        debug!(\"RegionVarBindings: add_verify({:?})\", verify);\n+        debug!(\"RegionConstraintCollector: add_verify({:?})\", verify);\n \n         // skip no-op cases known to be satisfied\n         match verify.bound {\n@@ -594,7 +594,7 @@ impl<'tcx> RegionVarBindings<'tcx> {\n     ) {\n         // cannot add constraints once regions are resolved\n         debug!(\n-            \"RegionVarBindings: make_subregion({:?}, {:?}) due to {:?}\",\n+            \"RegionConstraintCollector: make_subregion({:?}, {:?}) due to {:?}\",\n             sub,\n             sup,\n             origin\n@@ -651,7 +651,7 @@ impl<'tcx> RegionVarBindings<'tcx> {\n         b: Region<'tcx>,\n     ) -> Region<'tcx> {\n         // cannot add constraints once regions are resolved\n-        debug!(\"RegionVarBindings: lub_regions({:?}, {:?})\", a, b);\n+        debug!(\"RegionConstraintCollector: lub_regions({:?}, {:?})\", a, b);\n         match (a, b) {\n             (r @ &ReStatic, _) | (_, r @ &ReStatic) => {\n                 r // nothing lives longer than static\n@@ -673,7 +673,7 @@ impl<'tcx> RegionVarBindings<'tcx> {\n         b: Region<'tcx>,\n     ) -> Region<'tcx> {\n         // cannot add constraints once regions are resolved\n-        debug!(\"RegionVarBindings: glb_regions({:?}, {:?})\", a, b);\n+        debug!(\"RegionConstraintCollector: glb_regions({:?}, {:?})\", a, b);\n         match (a, b) {\n             (&ReStatic, r) | (r, &ReStatic) => {\n                 r // static lives longer than everything else"}]}