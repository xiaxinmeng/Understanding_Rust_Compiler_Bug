{"sha": "09129c1b416cf0101b75e72e6a3ffdfbbef78542", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MTI5YzFiNDE2Y2YwMTAxYjc1ZTcyZTZhM2ZmZGZiYmVmNzg1NDI=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-12T19:23:28Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-13T16:27:36Z"}, "message": "Add BTreeMap to the HASHMAP_ENTRY rule\n\nFixes #433", "tree": {"sha": "0dbca5c6190f9b57564ca8e786afcc8a632664e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dbca5c6190f9b57564ca8e786afcc8a632664e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09129c1b416cf0101b75e72e6a3ffdfbbef78542", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09129c1b416cf0101b75e72e6a3ffdfbbef78542", "html_url": "https://github.com/rust-lang/rust/commit/09129c1b416cf0101b75e72e6a3ffdfbbef78542", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09129c1b416cf0101b75e72e6a3ffdfbbef78542/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e24730cb846f0fd1f5c28f5336e38be6e0143c5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e24730cb846f0fd1f5c28f5336e38be6e0143c5e", "html_url": "https://github.com/rust-lang/rust/commit/e24730cb846f0fd1f5c28f5336e38be6e0143c5e"}], "stats": {"total": 100, "additions": 58, "deletions": 42}, "files": [{"sha": "631c1d7f1d2b0141090ac1dd540ad70ddbd95b9b", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09129c1b416cf0101b75e72e6a3ffdfbbef78542/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/09129c1b416cf0101b75e72e6a3ffdfbbef78542/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=09129c1b416cf0101b75e72e6a3ffdfbbef78542", "patch": "@@ -32,7 +32,6 @@ name\n [explicit_iter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_iter_loop)                       | warn    | for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\n [filter_next](https://github.com/Manishearth/rust-clippy/wiki#filter_next)                                     | warn    | using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\n [float_cmp](https://github.com/Manishearth/rust-clippy/wiki#float_cmp)                                         | warn    | using `==` or `!=` on float values (as floating-point operations usually involve rounding errors, it is always better to check for approximate equality within small bounds)\n-[hashmap_entry](https://github.com/Manishearth/rust-clippy/wiki#hashmap_entry)                                 | warn    | use of `contains_key` followed by `insert` on a `HashMap`\n [identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                                     | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n [ineffective_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#ineffective_bit_mask)                   | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n [inline_always](https://github.com/Manishearth/rust-clippy/wiki#inline_always)                                 | warn    | `#[inline(always)]` is a bad idea in most cases\n@@ -43,6 +42,7 @@ name\n [let_unit_value](https://github.com/Manishearth/rust-clippy/wiki#let_unit_value)                               | warn    | creating a let binding to a value of unit type, which usually can't be used afterwards\n [linkedlist](https://github.com/Manishearth/rust-clippy/wiki#linkedlist)                                       | warn    | usage of LinkedList, usually a vector is faster, or a more specialized data structure like a VecDeque\n [map_clone](https://github.com/Manishearth/rust-clippy/wiki#map_clone)                                         | warn    | using `.map(|x| x.clone())` to clone an iterator or option's contents (recommends `.cloned()` instead)\n+[map_entry](https://github.com/Manishearth/rust-clippy/wiki#map_entry)                                         | warn    | use of `contains_key` followed by `insert` on a `HashMap` or `BTreeMap`\n [match_bool](https://github.com/Manishearth/rust-clippy/wiki#match_bool)                                       | warn    | a match on boolean expression; recommends `if..else` block instead\n [match_overlapping_arm](https://github.com/Manishearth/rust-clippy/wiki#match_overlapping_arm)                 | warn    | a match has overlapping arms\n [match_ref_pats](https://github.com/Manishearth/rust-clippy/wiki#match_ref_pats)                               | warn    | a match or `if let` has all arms prefixed with `&`; the match expression can be dereferenced instead"}, {"sha": "1885bea164b81afe61b636998eda5a0782526532", "filename": "src/entry.rs", "status": "renamed", "additions": 38, "deletions": 29, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/09129c1b416cf0101b75e72e6a3ffdfbbef78542/src%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09129c1b416cf0101b75e72e6a3ffdfbbef78542/src%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fentry.rs?ref=09129c1b416cf0101b75e72e6a3ffdfbbef78542", "patch": "@@ -2,11 +2,12 @@ use rustc::lint::*;\n use rustc_front::hir::*;\n use syntax::codemap::Span;\n use utils::{get_item_name, is_exp_equal, match_type, snippet, span_help_and_lint, walk_ptrs_ty};\n-use utils::HASHMAP_PATH;\n+use utils::{BTREEMAP_PATH, HASHMAP_PATH};\n \n-/// **What it does:** This lint checks for uses of `contains_key` + `insert` on `HashMap`.\n+/// **What it does:** This lint checks for uses of `contains_key` + `insert` on `HashMap` or\n+/// `BTreeMap`.\n ///\n-/// **Why is this bad?** Using `HashMap::entry` is more efficient.\n+/// **Why is this bad?** Using `entry` is more efficient.\n ///\n /// **Known problems:** Some false negatives, eg.:\n /// ```\n@@ -23,17 +24,17 @@ use utils::HASHMAP_PATH;\n /// m.entry(k).or_insert(v);\n /// ```\n declare_lint! {\n-    pub HASHMAP_ENTRY,\n+    pub MAP_ENTRY,\n     Warn,\n-    \"use of `contains_key` followed by `insert` on a `HashMap`\"\n+    \"use of `contains_key` followed by `insert` on a `HashMap` or `BTreeMap`\"\n }\n \n #[derive(Copy,Clone)]\n pub struct HashMapLint;\n \n impl LintPass for HashMapLint {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(HASHMAP_ENTRY)\n+        lint_array!(MAP_ENTRY)\n     }\n }\n \n@@ -55,25 +56,33 @@ impl LateLintPass for HashMapLint {\n                 let map = &params[0];\n                 let obj_ty = walk_ptrs_ty(cx.tcx.expr_ty(map));\n \n-                if match_type(cx, obj_ty, &HASHMAP_PATH) {\n-                    let sole_expr = if then.expr.is_some() { 1 } else { 0 } + then.stmts.len() == 1;\n+                let kind = if match_type(cx, obj_ty, &BTREEMAP_PATH) {\n+                    \"BTreeMap\"\n+                }\n+                else if match_type(cx, obj_ty, &HASHMAP_PATH) {\n+                    \"HashMap\"\n+                }\n+                else {\n+                    return\n+                };\n \n-                    if let Some(ref then) = then.expr {\n-                        check_for_insert(cx, expr.span, map, key, then, sole_expr);\n-                    }\n+                let sole_expr = if then.expr.is_some() { 1 } else { 0 } + then.stmts.len() == 1;\n \n-                    for stmt in &then.stmts {\n-                        if let StmtSemi(ref stmt, _) = stmt.node {\n-                            check_for_insert(cx, expr.span, map, key, stmt, sole_expr);\n-                        }\n+                if let Some(ref then) = then.expr {\n+                    check_for_insert(cx, expr.span, map, key, then, sole_expr, kind);\n+                }\n+\n+                for stmt in &then.stmts {\n+                    if let StmtSemi(ref stmt, _) = stmt.node {\n+                        check_for_insert(cx, expr.span, map, key, stmt, sole_expr, kind);\n                     }\n                 }\n             }\n         }\n     }\n }\n \n-fn check_for_insert(cx: &LateContext, span: Span, map: &Expr, key: &Expr, expr: &Expr, sole_expr: bool) {\n+fn check_for_insert(cx: &LateContext, span: Span, map: &Expr, key: &Expr, expr: &Expr, sole_expr: bool, kind: &str) {\n     if_let_chain! {\n         [\n             let ExprMethodCall(ref name, _, ref params) = expr.node,\n@@ -82,21 +91,21 @@ fn check_for_insert(cx: &LateContext, span: Span, map: &Expr, key: &Expr, expr:\n             get_item_name(cx, map) == get_item_name(cx, &*params[0]),\n             is_exp_equal(cx, key, &params[1])\n         ], {\n-            if sole_expr {\n-                span_help_and_lint(cx, HASHMAP_ENTRY, span,\n-                                   \"usage of `contains_key` followed by `insert` on `HashMap`\",\n-                                   &format!(\"Consider using `{}.entry({}).or_insert({})`\",\n-                                            snippet(cx, map.span, \"..\"),\n-                                            snippet(cx, params[1].span, \"..\"),\n-                                            snippet(cx, params[2].span, \"..\"))); \n+            let help = if sole_expr {\n+                format!(\"Consider using `{}.entry({}).or_insert({})`\",\n+                        snippet(cx, map.span, \"..\"),\n+                        snippet(cx, params[1].span, \"..\"),\n+                        snippet(cx, params[2].span, \"..\"))\n             }\n             else {\n-                span_help_and_lint(cx, HASHMAP_ENTRY, span,\n-                                   \"usage of `contains_key` followed by `insert` on `HashMap`\",\n-                                   &format!(\"Consider using `{}.entry({})`\",\n-                                            snippet(cx, map.span, \"..\"),\n-                                            snippet(cx, params[1].span, \"..\")));\n-            }\n+                format!(\"Consider using `{}.entry({})`\",\n+                        snippet(cx, map.span, \"..\"),\n+                        snippet(cx, params[1].span, \"..\"))\n+            };\n+\n+            span_help_and_lint(cx, MAP_ENTRY, span,\n+                               &format!(\"usage of `contains_key` followed by `insert` on `{}`\", kind),\n+                               &help);\n         }\n     }\n }", "previous_filename": "src/hashmap.rs"}, {"sha": "9bb59693795c1fe1f7af37f063446a44fe81ce0a", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09129c1b416cf0101b75e72e6a3ffdfbbef78542/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09129c1b416cf0101b75e72e6a3ffdfbbef78542/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=09129c1b416cf0101b75e72e6a3ffdfbbef78542", "patch": "@@ -71,7 +71,7 @@ pub mod temporary_assignment;\n pub mod transmute;\n pub mod cyclomatic_complexity;\n pub mod escape;\n-pub mod hashmap;\n+pub mod entry;\n pub mod misc_early;\n pub mod array_indexing;\n pub mod panic;\n@@ -113,7 +113,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box types::UnitCmp);\n     reg.register_late_lint_pass(box loops::LoopsPass);\n     reg.register_late_lint_pass(box lifetimes::LifetimePass);\n-    reg.register_late_lint_pass(box hashmap::HashMapLint);\n+    reg.register_late_lint_pass(box entry::HashMapLint);\n     reg.register_late_lint_pass(box ranges::StepByZero);\n     reg.register_late_lint_pass(box types::CastPass);\n     reg.register_late_lint_pass(box types::TypeComplexityPass);\n@@ -167,10 +167,10 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         block_in_if_condition::BLOCK_IN_IF_CONDITION_STMT,\n         collapsible_if::COLLAPSIBLE_IF,\n         cyclomatic_complexity::CYCLOMATIC_COMPLEXITY,\n+        entry::MAP_ENTRY,\n         eq_op::EQ_OP,\n         escape::BOXED_LOCAL,\n         eta_reduction::REDUNDANT_CLOSURE,\n-        hashmap::HASHMAP_ENTRY,\n         identity_op::IDENTITY_OP,\n         len_zero::LEN_WITHOUT_IS_EMPTY,\n         len_zero::LEN_ZERO,"}, {"sha": "d3ebe809ac9239abb39f0a9c39f1d6d07cf290a8", "filename": "src/utils.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/09129c1b416cf0101b75e72e6a3ffdfbbef78542/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09129c1b416cf0101b75e72e6a3ffdfbbef78542/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=09129c1b416cf0101b75e72e6a3ffdfbbef78542", "patch": "@@ -19,17 +19,18 @@ use std::ops::{Deref, DerefMut};\n pub type MethodArgs = HirVec<P<Expr>>;\n \n // module DefPaths for certain structs/enums we check for\n+pub const BEGIN_UNWIND: [&'static str; 3] = [\"std\", \"rt\", \"begin_unwind\"];\n+pub const BTREEMAP_PATH: [&'static str; 4] = [\"collections\", \"btree\", \"map\", \"BTreeMap\"];\n+pub const CLONE_PATH: [&'static str; 2] = [\"Clone\", \"clone\"];\n+pub const COW_PATH: [&'static str; 3] = [\"collections\", \"borrow\", \"Cow\"];\n+pub const HASHMAP_PATH: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n+pub const LL_PATH: [&'static str; 3] = [\"collections\", \"linked_list\", \"LinkedList\"];\n+pub const MUTEX_PATH: [&'static str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n+pub const OPEN_OPTIONS_PATH: [&'static str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n pub const OPTION_PATH: [&'static str; 3] = [\"core\", \"option\", \"Option\"];\n pub const RESULT_PATH: [&'static str; 3] = [\"core\", \"result\", \"Result\"];\n pub const STRING_PATH: [&'static str; 3] = [\"collections\", \"string\", \"String\"];\n pub const VEC_PATH: [&'static str; 3] = [\"collections\", \"vec\", \"Vec\"];\n-pub const LL_PATH: [&'static str; 3] = [\"collections\", \"linked_list\", \"LinkedList\"];\n-pub const HASHMAP_PATH: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n-pub const OPEN_OPTIONS_PATH: [&'static str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n-pub const MUTEX_PATH: [&'static str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n-pub const CLONE_PATH: [&'static str; 2] = [\"Clone\", \"clone\"];\n-pub const BEGIN_UNWIND: [&'static str; 3] = [\"std\", \"rt\", \"begin_unwind\"];\n-pub const COW_PATH: [&'static str; 3] = [\"collections\", \"borrow\", \"Cow\"];\n \n /// Produce a nested chain of if-lets and ifs from the patterns:\n ///"}, {"sha": "7ea0e3952b08c12a8807351381d9d79c8992efb1", "filename": "tests/compile-fail/entry.rs", "status": "renamed", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/09129c1b416cf0101b75e72e6a3ffdfbbef78542/tests%2Fcompile-fail%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09129c1b416cf0101b75e72e6a3ffdfbbef78542/tests%2Fcompile-fail%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fentry.rs?ref=09129c1b416cf0101b75e72e6a3ffdfbbef78542", "patch": "@@ -2,9 +2,9 @@\n #![plugin(clippy)]\n #![allow(unused)]\n \n-#![deny(hashmap_entry)]\n+#![deny(map_entry)]\n \n-use std::collections::HashMap;\n+use std::collections::{BTreeMap, HashMap};\n use std::hash::Hash;\n \n fn foo() {}\n@@ -33,6 +33,12 @@ fn insert_if_absent3<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n     //~^^HELP: Consider using `m.entry(k)`\n }\n \n+fn insert_in_btreemap<K: Ord, V>(m: &mut BTreeMap<K, V>, k: K, v: V) {\n+    if !m.contains_key(&k) { foo(); m.insert(k, v) } else { None };\n+    //~^ERROR: usage of `contains_key` followed by `insert` on `BTreeMap`\n+    //~^^HELP: Consider using `m.entry(k)`\n+}\n+\n fn insert_other_if_absent<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, o: K, v: V) {\n     if !m.contains_key(&k) { m.insert(o, v); }\n }", "previous_filename": "tests/compile-fail/hashmap.rs"}]}