{"sha": "23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzY2FlMWQzZjA2Y2NiMzM5ZjJmNzgwZTYzYjZkNmQ1YzFjNmE5ZGE=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-03-24T18:16:44Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-03-24T18:16:44Z"}, "message": "Re-order fields in `Def::Ctor`.\n\nThis commit moves the `DefId` field of `Def::Ctor` to be the first\nfield.", "tree": {"sha": "f13f507c6137245ab82318486cd69b947a56f22f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f13f507c6137245ab82318486cd69b947a56f22f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlyXyacACgkQAXYLT59T\n8VTzLA//ZP98m/zAOPw12XRdHN+py4OUl51GjU4AtRxA4GVLp1rtrOjnLTh/qr1V\nHPOf6WPV3R0teQODmzTERVNknBTSvK0P5JhKU546V5mL5DWD71JOhTER61YMgZOr\nsXwMjSgtEazgiYi4E+Vok6XtMA2+BE73X1oUmnAKCWD2c6E+cXV+ipjuhCmEgISV\nzXhacSHm7cncJLnKasPqzQI9OdBhIk1lE/0wMfluW1O++pMsFbIHX8mvjgHCcj5D\nIVTD6D3ySqn5NuNV+XRda5Q8bcirOsSTWHDk9eQl6heOUiOkOfv3JvybUcelJ6eF\ndfoFVj44mPJisfv3TeSuVYj29ma7ajMWKxj4Ve6QwKQWhT9cjoBHHWzbO2a+EDUn\nY4NusEQMub5MqP4Qt6730R8IuDm3Aw+stPmQ2gNc3oXPFWjl2qJXxeqU5/3blRBs\nMyTdrbDMnI42pSqJqbhQDlvW4vrfVw1YxiG7c4ecQytaWF0+U88S5v2iC82olJ88\nxbdzrDrPYaLtmJLGjWGTAWEMe7AfOueVM/PAelYsD17jsS3hONGmA8HkLpzjCkDy\nwHRLs3dFtz8J7jUlT+kcCJlkablkYxwCsnEnxPFMxXdv48j0us2cI1Oau6wg8+jA\nT8IosmxcU+TCny+l/7D5V4zBmRpDGgxcrRQapNwA/3c8ZyA+D/0=\n=JA2E\n-----END PGP SIGNATURE-----", "payload": "tree f13f507c6137245ab82318486cd69b947a56f22f\nparent 88f8f0779417963fe04aaba6719f1752ff1ce487\nauthor David Wood <david@davidtw.co> 1553451404 +0100\ncommitter David Wood <david@davidtw.co> 1553451404 +0100\n\nRe-order fields in `Def::Ctor`.\n\nThis commit moves the `DefId` field of `Def::Ctor` to be the first\nfield.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da", "html_url": "https://github.com/rust-lang/rust/commit/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88f8f0779417963fe04aaba6719f1752ff1ce487", "url": "https://api.github.com/repos/rust-lang/rust/commits/88f8f0779417963fe04aaba6719f1752ff1ce487", "html_url": "https://github.com/rust-lang/rust/commit/88f8f0779417963fe04aaba6719f1752ff1ce487"}], "stats": {"total": 77, "additions": 38, "deletions": 39}, "files": [{"sha": "3cc23ccdb642c586afb9e8cb200495128996526a", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da", "patch": "@@ -73,7 +73,7 @@ pub enum Def {\n     ConstParam(DefId),\n     Static(DefId, bool /* is_mutbl */),\n     /// `DefId` refers to the struct or enum variant's constructor.\n-    Ctor(CtorOf, DefId, CtorKind),\n+    Ctor(DefId, CtorOf, CtorKind),\n     SelfCtor(DefId /* impl */),  // `DefId` refers to the impl\n     Method(DefId),\n     AssociatedConst(DefId),\n@@ -276,7 +276,7 @@ impl Def {\n     pub fn opt_def_id(&self) -> Option<DefId> {\n         match *self {\n             Def::Fn(id) | Def::Mod(id) | Def::Static(id, _) |\n-            Def::Variant(id) | Def::Ctor(_, id, ..) | Def::Enum(id) |\n+            Def::Variant(id) | Def::Ctor(id, ..) | Def::Enum(id) |\n             Def::TyAlias(id) | Def::TraitAlias(id) |\n             Def::AssociatedTy(id) | Def::TyParam(id) | Def::ConstParam(id) | Def::Struct(id) |\n             Def::Union(id) | Def::Trait(id) | Def::Method(id) | Def::Const(id) |\n@@ -315,13 +315,13 @@ impl Def {\n             Def::Static(..) => \"static\",\n             Def::Enum(..) => \"enum\",\n             Def::Variant(..) => \"variant\",\n-            Def::Ctor(CtorOf::Variant, _, CtorKind::Fn) => \"tuple variant\",\n-            Def::Ctor(CtorOf::Variant, _, CtorKind::Const) => \"unit variant\",\n-            Def::Ctor(CtorOf::Variant, _, CtorKind::Fictive) => \"struct variant\",\n+            Def::Ctor(_, CtorOf::Variant, CtorKind::Fn) => \"tuple variant\",\n+            Def::Ctor(_, CtorOf::Variant, CtorKind::Const) => \"unit variant\",\n+            Def::Ctor(_, CtorOf::Variant, CtorKind::Fictive) => \"struct variant\",\n             Def::Struct(..) => \"struct\",\n-            Def::Ctor(CtorOf::Struct, _, CtorKind::Fn) => \"tuple struct\",\n-            Def::Ctor(CtorOf::Struct, _, CtorKind::Const) => \"unit struct\",\n-            Def::Ctor(CtorOf::Struct, _, CtorKind::Fictive) =>\n+            Def::Ctor(_, CtorOf::Struct, CtorKind::Fn) => \"tuple struct\",\n+            Def::Ctor(_, CtorOf::Struct, CtorKind::Const) => \"unit struct\",\n+            Def::Ctor(_, CtorOf::Struct, CtorKind::Fictive) =>\n                 bug!(\"impossible struct constructor\"),\n             Def::Existential(..) => \"existential type\",\n             Def::TyAlias(..) => \"type alias\","}, {"sha": "d810a9310c55fae4638161c91d60ce29b8749ddd", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da", "patch": "@@ -377,7 +377,7 @@ impl<'hir> Map<'hir> {\n                 };\n                 variant_data.ctor_hir_id()\n                     .map(|hir_id| self.local_def_id_from_hir_id(hir_id))\n-                    .map(|def_id| Def::Ctor(ctor_of, def_id, def::CtorKind::from_hir(variant_data)))\n+                    .map(|def_id| Def::Ctor(def_id, ctor_of, def::CtorKind::from_hir(variant_data)))\n             }\n             Node::AnonConst(_) |\n             Node::Field(_) |"}, {"sha": "e7eda5aab133fb2778a4e51df14484e4be92f906", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da", "patch": "@@ -126,7 +126,7 @@ impl hir::Pat {\n                 PatKind::Struct(hir::QPath::Resolved(_, ref path), ..) => {\n                     match path.def {\n                         Def::Variant(id) => variants.push(id),\n-                        Def::Ctor(CtorOf::Variant, id, _) => variants.push(id),\n+                        Def::Ctor(id, CtorOf::Variant, ..) => variants.push(id),\n                         _ => ()\n                     }\n                 }"}, {"sha": "f12367a89bbf3dae3c94414aa4a09812e8f812d6", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da", "patch": "@@ -76,7 +76,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             _ if self.in_pat => (),\n             Def::PrimTy(..) | Def::SelfTy(..) | Def::SelfCtor(..) |\n             Def::Local(..) | Def::Upvar(..) => {}\n-            Def::Ctor(CtorOf::Variant, ctor_def_id, ..) => {\n+            Def::Ctor(ctor_def_id, CtorOf::Variant, ..) => {\n                 let variant_id = self.tcx.parent(ctor_def_id).unwrap();\n                 let enum_id = self.tcx.parent(variant_id).unwrap();\n                 self.check_def_id(enum_id);"}, {"sha": "6c8d9fe29d7a0e8832a0a4da4a18cb4794a7c250", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da", "patch": "@@ -902,7 +902,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n             };\n             let def = mc.tables.qpath_def(qpath, pat.hir_id);\n             match def {\n-                Def::Ctor(CtorOf::Variant, variant_ctor_did, ..) => {\n+                Def::Ctor(variant_ctor_did, CtorOf::Variant, ..) => {\n                     let variant_did = mc.tcx.parent(variant_ctor_did).unwrap();\n                     let downcast_cmt = mc.cat_downcast_if_needed(pat, cmt_pat, variant_did);\n "}, {"sha": "4b169dea06c7c7970bf17e7375f2ae1316cbd930", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da", "patch": "@@ -1274,14 +1274,14 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                         debug!(\"access to unresolvable pattern {:?}\", pat);\n                         return Err(())\n                     }\n-                    Def::Ctor(CtorOf::Variant, variant_ctor_did, CtorKind::Fn) => {\n+                    Def::Ctor(variant_ctor_did, CtorOf::Variant, CtorKind::Fn) => {\n                         let variant_did = self.tcx.parent(variant_ctor_did).unwrap();\n                         let enum_did = self.tcx.parent(variant_did).unwrap();\n                         (self.cat_downcast_if_needed(pat, cmt, variant_did),\n                          self.tcx.adt_def(enum_did)\n                              .variant_with_ctor_id(variant_ctor_did).fields.len())\n                     }\n-                    Def::Ctor(CtorOf::Struct, _, CtorKind::Fn) | Def::SelfCtor(..) => {\n+                    Def::Ctor(_, CtorOf::Struct, CtorKind::Fn) | Def::SelfCtor(..) => {\n                         let ty = self.pat_ty_unadjusted(&pat)?;\n                         match ty.sty {\n                             ty::Adt(adt_def, _) => {\n@@ -1316,7 +1316,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                         debug!(\"access to unresolvable pattern {:?}\", pat);\n                         return Err(())\n                     }\n-                    Def::Ctor(CtorOf::Variant, variant_ctor_did, _) => {\n+                    Def::Ctor(variant_ctor_did, CtorOf::Variant, _) => {\n                         let variant_did = self.tcx.parent(variant_ctor_did).unwrap();\n                         self.cat_downcast_if_needed(pat, cmt, variant_did)\n                     }"}, {"sha": "f0045136f41bfc7f0b6016e3f896646a54d03052", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da", "patch": "@@ -2322,7 +2322,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n     pub fn variant_of_def(&self, def: Def) -> &VariantDef {\n         match def {\n             Def::Variant(vid) => self.variant_with_id(vid),\n-            Def::Ctor(_, cid, ..) => self.variant_with_ctor_id(cid),\n+            Def::Ctor(cid, ..) => self.variant_with_ctor_id(cid),\n             Def::Struct(..) | Def::Union(..) |\n             Def::TyAlias(..) | Def::AssociatedTy(..) | Def::SelfTy(..) |\n             Def::SelfCtor(..) => self.non_enum_variant(),\n@@ -2941,12 +2941,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             Def::Struct(did) | Def::Union(did) => {\n                 self.adt_def(did).non_enum_variant()\n             }\n-            Def::Ctor(CtorOf::Variant, variant_ctor_did, ..) => {\n+            Def::Ctor(variant_ctor_did, CtorOf::Variant, ..) => {\n                 let variant_did = self.parent(variant_ctor_did).unwrap();\n                 let enum_did = self.parent(variant_did).unwrap();\n                 self.adt_def(enum_did).variant_with_ctor_id(variant_ctor_did)\n             }\n-            Def::Ctor(CtorOf::Struct, ctor_did, ..) => {\n+            Def::Ctor(ctor_did, CtorOf::Struct, ..) => {\n                 let struct_did = self.parent(ctor_did).expect(\"struct ctor has no parent\");\n                 self.adt_def(struct_did).non_enum_variant()\n             }"}, {"sha": "fb519407398fe9a1074a216b0cf0ddb5e25d1e86", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da", "patch": "@@ -816,8 +816,7 @@ impl<'a, 'tcx> CrateMetadata {\n                         Def::Struct(..) => {\n                             if let Some(ctor_def_id) = self.get_ctor_def_id(child_index) {\n                                 let ctor_kind = self.get_ctor_kind(child_index);\n-                                let ctor_def = Def::Ctor(\n-                                    hir::def::CtorOf::Struct, ctor_def_id, ctor_kind);\n+                                let ctor_def = Def::Ctor(ctor_def_id, CtorOf::Struct, ctor_kind);\n                                 let vis = self.get_visibility(ctor_def_id.index);\n                                 callback(def::Export { def: ctor_def, vis, ident, span });\n                             }\n@@ -829,7 +828,7 @@ impl<'a, 'tcx> CrateMetadata {\n                             // error will be reported on any use of such resolution anyway.\n                             let ctor_def_id = self.get_ctor_def_id(child_index).unwrap_or(def_id);\n                             let ctor_kind = self.get_ctor_kind(child_index);\n-                            let ctor_def = Def::Ctor(CtorOf::Variant, ctor_def_id, ctor_kind);\n+                            let ctor_def = Def::Ctor(ctor_def_id, CtorOf::Variant, ctor_kind);\n                             let vis = self.get_visibility(ctor_def_id.index);\n                             callback(def::Export { def: ctor_def, ident, vis, span });\n                         }"}, {"sha": "2ca44ecaba220d586a9826ff69bba44ecc4d28b4", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da", "patch": "@@ -261,7 +261,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     // Tuple-like ADTs are represented as ExprKind::Call. We convert them here.\n                     expr_ty.ty_adt_def().and_then(|adt_def| {\n                         match path.def {\n-                            Def::Ctor(_, ctor_id, CtorKind::Fn) =>\n+                            Def::Ctor(ctor_id, _, CtorKind::Fn) =>\n                                 Some((adt_def, adt_def.variant_index_with_ctor_id(ctor_id))),\n                             Def::SelfCtor(..) => Some((adt_def, VariantIdx::new(0))),\n                             _ => None,\n@@ -675,7 +675,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         .ty_adt_def()\n                         .and_then(|adt_def| {\n                         match def {\n-                            Def::Ctor(CtorOf::Variant, variant_ctor_id, CtorKind::Const) => {\n+                            Def::Ctor(variant_ctor_id, CtorOf::Variant, CtorKind::Const) => {\n                                 let idx = adt_def.variant_index_with_ctor_id(variant_ctor_id);\n                                 let (d, o) = adt_def.discriminant_def_for_variant(idx);\n                                 use rustc::ty::util::IntTypeExt;\n@@ -951,7 +951,7 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             }\n         },\n \n-        Def::Ctor(_, def_id, CtorKind::Const) => {\n+        Def::Ctor(def_id, _, CtorKind::Const) => {\n             let user_provided_types = cx.tables.user_provided_types();\n             let user_provided_type = user_provided_types.get(expr.hir_id).map(|u_ty| *u_ty);\n             debug!(\"convert_path_expr: user_provided_type={:?}\", user_provided_type);"}, {"sha": "6c532fce57f0eab1bb69443397b64ffa2082819c", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da", "patch": "@@ -734,7 +734,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n         subpatterns: Vec<FieldPattern<'tcx>>,\n     ) -> PatternKind<'tcx> {\n         let def = match def {\n-            Def::Ctor(CtorOf::Variant, variant_ctor_id, ..) => {\n+            Def::Ctor(variant_ctor_id, CtorOf::Variant, ..) => {\n                 let variant_id = self.tcx.parent(variant_ctor_id).unwrap();\n                 Def::Variant(variant_id)\n             },\n@@ -765,7 +765,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 }\n             }\n \n-            Def::Struct(..) | Def::Ctor(CtorOf::Struct, ..) | Def::Union(..) |\n+            Def::Struct(..) | Def::Ctor(_, CtorOf::Struct, ..) | Def::Union(..) |\n             Def::TyAlias(..) | Def::AssociatedTy(..) | Def::SelfTy(..) | Def::SelfCtor(..) => {\n                 PatternKind::Leaf { subpatterns }\n             }"}, {"sha": "80cb14deac49a28f3fbac7955e91bac54fe9cd1d", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da", "patch": "@@ -533,8 +533,8 @@ impl<'a> Resolver<'a> {\n                 // If this is a tuple or unit struct, define a name\n                 // in the value namespace as well.\n                 if let Some(ctor_node_id) = struct_def.ctor_id() {\n-                    let ctor_def = Def::Ctor(CtorOf::Struct,\n-                                             self.definitions.local_def_id(ctor_node_id),\n+                    let ctor_def = Def::Ctor(self.definitions.local_def_id(ctor_node_id),\n+                                             CtorOf::Struct,\n                                              CtorKind::from_ast(struct_def));\n                     self.define(parent, ident, ValueNS, (ctor_def, ctor_vis, sp, expansion));\n                     self.struct_constructors.insert(def.def_id(), (ctor_def, ctor_vis));\n@@ -596,7 +596,7 @@ impl<'a> Resolver<'a> {\n         let ctor_node_id = variant.node.data.ctor_id().unwrap_or(variant.node.id);\n         let ctor_def_id = self.definitions.local_def_id(ctor_node_id);\n         let ctor_kind = CtorKind::from_ast(&variant.node.data);\n-        let ctor_def = Def::Ctor(CtorOf::Variant, ctor_def_id, ctor_kind);\n+        let ctor_def = Def::Ctor(ctor_def_id, CtorOf::Variant, ctor_kind);\n         self.define(parent, ident, ValueNS, (ctor_def, vis, variant.span, expansion));\n     }\n \n@@ -654,10 +654,10 @@ impl<'a> Resolver<'a> {\n                 self.define(parent, ident, TypeNS, (def, vis, DUMMY_SP, expansion));\n             }\n             Def::Fn(..) | Def::Static(..) | Def::Const(..) |\n-            Def::Ctor(CtorOf::Variant, ..) => {\n+            Def::Ctor(_, CtorOf::Variant, ..) => {\n                 self.define(parent, ident, ValueNS, (def, vis, DUMMY_SP, expansion));\n             }\n-            Def::Ctor(CtorOf::Struct, def_id, ..) => {\n+            Def::Ctor(def_id, CtorOf::Struct, ..) => {\n                 self.define(parent, ident, ValueNS, (def, vis, DUMMY_SP, expansion));\n \n                 if let Some(struct_def_id) ="}, {"sha": "a2b052044ce74ba5887923f28c3ea490e2ad20c2", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da", "patch": "@@ -1360,7 +1360,7 @@ impl<'a> NameBinding<'a> {\n     fn is_variant(&self) -> bool {\n         match self.kind {\n             NameBindingKind::Def(Def::Variant(..), _) |\n-            NameBindingKind::Def(Def::Ctor(CtorOf::Variant, ..), _) => true,\n+            NameBindingKind::Def(Def::Ctor(_, CtorOf::Variant, ..), _) => true,\n             _ => false,\n         }\n     }\n@@ -4452,7 +4452,7 @@ impl<'a> Resolver<'a> {\n                         // outside crate private modules => no need to check this)\n                         if !in_module_is_extern || name_binding.vis == ty::Visibility::Public {\n                             let did = match def {\n-                                Def::Ctor(_, did, _) => self.parent(did),\n+                                Def::Ctor(did, ..) => self.parent(did),\n                                 _ => def.opt_def_id(),\n                             };\n                             candidates.push(ImportSuggestion { did, path });"}, {"sha": "828ef802dd714a437edd7c6a9046b41b682fe095", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da", "patch": "@@ -757,7 +757,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     ref_id: id_from_def_id(def_id),\n                 })\n             }\n-            HirDef::Ctor(CtorOf::Struct, def_id, _) => {\n+            HirDef::Ctor(def_id, CtorOf::Struct, ..) => {\n                 // This is a reference to a tuple struct where the def_id points\n                 // to an invisible constructor function. That is not a very useful\n                 // def, so adjust to point to the tuple struct itself."}, {"sha": "3e61b175b76e048b34e8bdf8fafdade676a44c39", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da", "patch": "@@ -1596,7 +1596,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n \n         match def {\n             // Case 1. Reference to a struct constructor.\n-            Def::Ctor(CtorOf::Struct, def_id, ..) |\n+            Def::Ctor(def_id, CtorOf::Struct, ..) |\n             Def::SelfCtor(.., def_id) => {\n                 // Everything but the final segment should have no\n                 // parameters at all.\n@@ -1608,7 +1608,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             }\n \n             // Case 2. Reference to a variant constructor.\n-            Def::Ctor(CtorOf::Variant, def_id, ..) | Def::Variant(def_id, ..) => {\n+            Def::Ctor(def_id, CtorOf::Variant, ..) | Def::Variant(def_id, ..) => {\n                 let adt_def = self_ty.map(|t| t.ty_adt_def().unwrap());\n                 let (generics_def_id, index) = if let Some(adt_def) = adt_def {\n                     debug_assert!(adt_def.is_enum());"}, {"sha": "34a24308e491aa7950e1f5dfec2939db9971cb62", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da", "patch": "@@ -422,7 +422,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     // them as well. It's ok to use the variant's id as a ctor id since an\n                     // error will be reported on any use of such resolution anyway.\n                     let ctor_def_id = variant_def.ctor_def_id.unwrap_or(variant_def.def_id);\n-                    let def = Def::Ctor(CtorOf::Variant, ctor_def_id, variant_def.ctor_kind);\n+                    let def = Def::Ctor(ctor_def_id, CtorOf::Variant, variant_def.ctor_kind);\n                     tcx.check_stability(def.def_id(), Some(expr_id), span);\n                     return Ok(def);\n                 }"}, {"sha": "94f76b03a643cf4b83e744330eae69d2fe3ef4e4", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=23cae1d3f06ccb339f2f780e63b6d6d5c1c6a9da", "patch": "@@ -5345,7 +5345,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 Some(adt_def) if adt_def.has_ctor() => {\n                     let variant = adt_def.non_enum_variant();\n                     let ctor_def_id = variant.ctor_def_id.unwrap();\n-                    let def = Def::Ctor(CtorOf::Struct, ctor_def_id, variant.ctor_kind);\n+                    let def = Def::Ctor(ctor_def_id, CtorOf::Struct, variant.ctor_kind);\n                     (def, ctor_def_id, tcx.type_of(ctor_def_id))\n                 }\n                 _ => {\n@@ -5418,7 +5418,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let mut user_self_ty = None;\n         let mut is_alias_variant_ctor = false;\n         match def {\n-            Def::Ctor(CtorOf::Variant, _, _) => {\n+            Def::Ctor(_, CtorOf::Variant, _) => {\n                 if let Some(self_ty) = self_ty {\n                     let adt_def = self_ty.ty_adt_def().unwrap();\n                     user_self_ty = Some(UserSelfTy {"}]}