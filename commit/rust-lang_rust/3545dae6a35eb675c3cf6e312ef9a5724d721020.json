{"sha": "3545dae6a35eb675c3cf6e312ef9a5724d721020", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NDVkYWU2YTM1ZWI2NzVjM2NmNmUzMTJlZjlhNTcyNGQ3MjEwMjA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-26T09:12:22Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-29T08:16:27Z"}, "message": "let create_ref take a mutability, and leave it to step.rs to interpret mir::BorrowKind", "tree": {"sha": "f4448a5010ec4caf62047a8e18a86dc079c24b86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4448a5010ec4caf62047a8e18a86dc079c24b86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3545dae6a35eb675c3cf6e312ef9a5724d721020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3545dae6a35eb675c3cf6e312ef9a5724d721020", "html_url": "https://github.com/rust-lang/rust/commit/3545dae6a35eb675c3cf6e312ef9a5724d721020", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3545dae6a35eb675c3cf6e312ef9a5724d721020/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2f0f1a0a86ce658e1e037b4aece6d54ab1f7aa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2f0f1a0a86ce658e1e037b4aece6d54ab1f7aa7", "html_url": "https://github.com/rust-lang/rust/commit/f2f0f1a0a86ce658e1e037b4aece6d54ab1f7aa7"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "3b104e2284fe2d51459f1c168209359ffc6f76c0", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3545dae6a35eb675c3cf6e312ef9a5724d721020/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3545dae6a35eb675c3cf6e312ef9a5724d721020/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=3545dae6a35eb675c3cf6e312ef9a5724d721020", "patch": "@@ -299,23 +299,17 @@ where\n \n     /// Turn a mplace into a (thin or fat) pointer, as a reference, pointing to the same space.\n     /// This is the inverse of `ref_to_mplace`.\n+    /// `mutbl` indicates whether we are create a shared or mutable ref, or a raw pointer (`None`).\n     pub fn create_ref(\n         &mut self,\n         place: MPlaceTy<'tcx, M::PointerTag>,\n-        borrow_kind: Option<mir::BorrowKind>,\n+        mutbl: Option<hir::Mutability>,\n     ) -> EvalResult<'tcx, Value<M::PointerTag>> {\n         // Pointer tag tracking might want to adjust the tag\n         let place = if M::ENABLE_PTR_TRACKING_HOOKS {\n             let (size, _) = self.size_and_align_of_mplace(place)?\n                 // for extern types, just cover what we can\n                 .unwrap_or_else(|| place.layout.size_and_align());\n-            let mutbl = match borrow_kind {\n-                Some(mir::BorrowKind::Mut { .. }) |\n-                Some(mir::BorrowKind::Unique) =>\n-                    Some(hir::MutMutable),\n-                Some(_) => Some(hir::MutImmutable),\n-                None => None,\n-            };\n             M::tag_reference(self, *place, place.layout.ty, size, mutbl)?\n         } else {\n             *place"}, {"sha": "97431cfe6808e1a0afab7e107db72190a00e6692", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3545dae6a35eb675c3cf6e312ef9a5724d721020/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3545dae6a35eb675c3cf6e312ef9a5724d721020/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=3545dae6a35eb675c3cf6e312ef9a5724d721020", "patch": "@@ -12,7 +12,7 @@\n //!\n //! The main entry point is the `step` method.\n \n-use rustc::mir;\n+use rustc::{hir, mir};\n use rustc::ty::layout::LayoutOf;\n use rustc::mir::interpret::{EvalResult, Scalar, PointerArithmetic};\n \n@@ -250,7 +250,15 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             Ref(_, borrow_kind, ref place) => {\n                 let src = self.eval_place(place)?;\n                 let val = self.force_allocation(src)?;\n-                let val = self.create_ref(val, Some(borrow_kind))?;\n+                let mutbl = match borrow_kind {\n+                    mir::BorrowKind::Mut { .. } |\n+                    mir::BorrowKind::Unique =>\n+                        hir::MutMutable,\n+                    mir::BorrowKind::Shared |\n+                    mir::BorrowKind::Shallow =>\n+                        hir::MutImmutable,\n+                };\n+                let val = self.create_ref(val, Some(mutbl))?;\n                 self.write_value(val, dest)?;\n             }\n "}]}