{"sha": "e7bae89a3c739556c90758a5d73fc9565e9efdc8", "node_id": "C_kwDOAAsO6NoAKGU3YmFlODlhM2M3Mzk1NTZjOTA3NThhNWQ3M2ZjOTU2NWU5ZWZkYzg", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-11-02T17:18:00Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-11-04T00:33:59Z"}, "message": "Cleanup bind_pattern args", "tree": {"sha": "9320239598a45bceebd08c42bb68cfdec3c6617c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9320239598a45bceebd08c42bb68cfdec3c6617c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7bae89a3c739556c90758a5d73fc9565e9efdc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7bae89a3c739556c90758a5d73fc9565e9efdc8", "html_url": "https://github.com/rust-lang/rust/commit/e7bae89a3c739556c90758a5d73fc9565e9efdc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7bae89a3c739556c90758a5d73fc9565e9efdc8/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "160b19429523ea44c4c3b7cad4233b2a35f58b8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/160b19429523ea44c4c3b7cad4233b2a35f58b8f", "html_url": "https://github.com/rust-lang/rust/commit/160b19429523ea44c4c3b7cad4233b2a35f58b8f"}], "stats": {"total": 51, "additions": 14, "deletions": 37}, "files": [{"sha": "dfd8649cb97e7f716e5ab3218b9157cb192a732d", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 14, "deletions": 37, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e7bae89a3c739556c90758a5d73fc9565e9efdc8/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7bae89a3c739556c90758a5d73fc9565e9efdc8/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=e7bae89a3c739556c90758a5d73fc9565e9efdc8", "patch": "@@ -364,12 +364,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     let arm_block = this.bind_pattern(\n                         outer_source_info,\n                         candidate,\n-                        arm.guard.as_ref(),\n                         &fake_borrow_temps,\n                         scrutinee_span,\n-                        Some(arm.span),\n-                        Some(arm.scope),\n-                        Some(match_scope),\n+                        Some((arm, match_scope)),\n                         false,\n                     );\n \n@@ -410,12 +407,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         &mut self,\n         outer_source_info: SourceInfo,\n         candidate: Candidate<'_, 'tcx>,\n-        guard: Option<&Guard<'tcx>>,\n         fake_borrow_temps: &[(Place<'tcx>, Local)],\n         scrutinee_span: Span,\n-        arm_span: Option<Span>,\n-        arm_scope: Option<region::Scope>,\n-        match_scope: Option<region::Scope>,\n+        arm_match_scope: Option<(&Arm<'tcx>, region::Scope)>,\n         storages_alive: bool,\n     ) -> BasicBlock {\n         if candidate.subcandidates.is_empty() {\n@@ -424,11 +418,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             self.bind_and_guard_matched_candidate(\n                 candidate,\n                 &[],\n-                guard,\n                 fake_borrow_temps,\n                 scrutinee_span,\n-                arm_span,\n-                match_scope,\n+                arm_match_scope,\n                 true,\n                 storages_alive,\n             )\n@@ -449,28 +441,27 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // we lower the guard.\n             let target_block = self.cfg.start_new_block();\n             let mut schedule_drops = true;\n+            let arm = arm_match_scope.unzip().0;\n             // We keep a stack of all of the bindings and type ascriptions\n             // from the parent candidates that we visit, that also need to\n             // be bound for each candidate.\n             traverse_candidate(\n                 candidate,\n                 &mut Vec::new(),\n                 &mut |leaf_candidate, parent_bindings| {\n-                    if let Some(arm_scope) = arm_scope {\n-                        self.clear_top_scope(arm_scope);\n+                    if let Some(arm) = arm {\n+                        self.clear_top_scope(arm.scope);\n                     }\n                     let binding_end = self.bind_and_guard_matched_candidate(\n                         leaf_candidate,\n                         parent_bindings,\n-                        guard,\n                         &fake_borrow_temps,\n                         scrutinee_span,\n-                        arm_span,\n-                        match_scope,\n+                        arm_match_scope,\n                         schedule_drops,\n                         storages_alive,\n                     );\n-                    if arm_scope.is_none() {\n+                    if arm.is_none() {\n                         schedule_drops = false;\n                     }\n                     self.cfg.goto(binding_end, outer_source_info, target_block);\n@@ -636,12 +627,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.bind_pattern(\n             self.source_info(irrefutable_pat.span),\n             candidate,\n-            None,\n             &fake_borrow_temps,\n             irrefutable_pat.span,\n             None,\n-            None,\n-            None,\n             false,\n         )\n         .unit()\n@@ -1820,12 +1808,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let post_guard_block = self.bind_pattern(\n             self.source_info(pat.span),\n             guard_candidate,\n-            None,\n             &fake_borrow_temps,\n             expr.span,\n             None,\n-            None,\n-            None,\n             false,\n         );\n \n@@ -1844,11 +1829,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         &mut self,\n         candidate: Candidate<'pat, 'tcx>,\n         parent_bindings: &[(Vec<Binding<'tcx>>, Vec<Ascription<'tcx>>)],\n-        guard: Option<&Guard<'tcx>>,\n         fake_borrows: &[(Place<'tcx>, Local)],\n         scrutinee_span: Span,\n-        arm_span: Option<Span>,\n-        match_scope: Option<region::Scope>,\n+        arm_match_scope: Option<(&Arm<'tcx>, region::Scope)>,\n         schedule_drops: bool,\n         storages_alive: bool,\n     ) -> BasicBlock {\n@@ -1960,7 +1943,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         //      the reference that we create for the arm.\n         //    * So we eagerly create the reference for the arm and then take a\n         //      reference to that.\n-        if let Some(guard) = guard {\n+        if let Some((arm, match_scope)) = arm_match_scope\n+            && let Some(guard) = &arm.guard\n+        {\n             let tcx = self.tcx;\n             let bindings = parent_bindings\n                 .iter()\n@@ -1981,8 +1966,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 self.cfg.push_assign(block, scrutinee_source_info, Place::from(temp), borrow);\n             }\n \n-            let arm_span = arm_span.unwrap();\n-            let match_scope = match_scope.unwrap();\n             let mut guard_span = rustc_span::DUMMY_SP;\n \n             let (post_guard_block, otherwise_post_guard_block) =\n@@ -1995,13 +1978,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             e,\n                             None,\n                             match_scope,\n-                            this.source_info(arm_span),\n+                            this.source_info(arm.span),\n                         )\n                     }\n                     Guard::IfLet(ref pat, scrutinee) => {\n                         let s = &this.thir[scrutinee];\n                         guard_span = s.span;\n-                        this.lower_let_expr(block, s, pat, match_scope, None, arm_span)\n+                        this.lower_let_expr(block, s, pat, match_scope, None, arm.span)\n                     }\n                 });\n \n@@ -2317,24 +2300,18 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let matching = this.bind_pattern(\n                 this.source_info(pattern.span),\n                 candidate,\n-                None,\n                 &fake_borrow_temps,\n                 initializer_span,\n                 None,\n-                None,\n-                None,\n                 true,\n             );\n             // This block is for the failure case\n             let failure = this.bind_pattern(\n                 this.source_info(else_block_span),\n                 wildcard,\n-                None,\n                 &fake_borrow_temps,\n                 initializer_span,\n                 None,\n-                None,\n-                None,\n                 true,\n             );\n             this.break_for_else(failure, *let_else_scope, this.source_info(initializer_span));"}]}