{"sha": "b97abd0761d3949cd6e17ba0d31c3d8ea1c8f0fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5N2FiZDA3NjFkMzk0OWNkNmUxN2JhMGQzMWMzZDhlYTFjOGYwZmM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-23T16:31:55Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-26T11:11:12Z"}, "message": "Tidy", "tree": {"sha": "b0d8b61492739c7befa9ae03090a1b01012c2979", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0d8b61492739c7befa9ae03090a1b01012c2979"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b97abd0761d3949cd6e17ba0d31c3d8ea1c8f0fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b97abd0761d3949cd6e17ba0d31c3d8ea1c8f0fc", "html_url": "https://github.com/rust-lang/rust/commit/b97abd0761d3949cd6e17ba0d31c3d8ea1c8f0fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b97abd0761d3949cd6e17ba0d31c3d8ea1c8f0fc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49f5b0834b21025946839328aa38ab123de54913", "url": "https://api.github.com/repos/rust-lang/rust/commits/49f5b0834b21025946839328aa38ab123de54913", "html_url": "https://github.com/rust-lang/rust/commit/49f5b0834b21025946839328aa38ab123de54913"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "6b0635f1c76c57475fdd318b7c4e0e42d88db6b9", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b97abd0761d3949cd6e17ba0d31c3d8ea1c8f0fc/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97abd0761d3949cd6e17ba0d31c3d8ea1c8f0fc/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=b97abd0761d3949cd6e17ba0d31c3d8ea1c8f0fc", "patch": "@@ -310,11 +310,13 @@ pub fn const_eval_raw_provider<'tcx>(\n                 // constant defined in this crate, we can figure out a lint level!\n                 match tcx.def_kind(def_id) {\n                     // constants never produce a hard error at the definition site. Anything else is\n-                    // a backwards compatibility hazard (and will break old versions of winapi for sure)\n+                    // a backwards compatibility hazard (and will break old versions of winapi for\n+                    // sure)\n                     //\n                     // note that validation may still cause a hard error on this very same constant,\n-                    // because any code that existed before validation could not have failed validation\n-                    // thus preventing such a hard error from being a backwards compatibility hazard\n+                    // because any code that existed before validation could not have failed\n+                    // validation thus preventing such a hard error from being a backwards\n+                    // compatibility hazard\n                     Some(DefKind::Const) | Some(DefKind::AssocConst) => {\n                         let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n                         err.report_as_lint(\n@@ -324,8 +326,9 @@ pub fn const_eval_raw_provider<'tcx>(\n                             Some(err.span),\n                         )\n                     }\n-                    // promoting runtime code is only allowed to error if it references broken constants\n-                    // any other kind of error will be reported to the user as a deny-by-default lint\n+                    // promoting runtime code is only allowed to error if it references broken\n+                    // constants any other kind of error will be reported to the user as a\n+                    // deny-by-default lint\n                     _ => {\n                         if let Some(p) = cid.promoted {\n                             let span = tcx.promoted_mir(def_id)[p].span;\n@@ -342,8 +345,8 @@ pub fn const_eval_raw_provider<'tcx>(\n                                     Some(err.span),\n                                 )\n                             }\n-                        // anything else (array lengths, enum initializers, constant patterns) are reported\n-                        // as hard errors\n+                        // anything else (array lengths, enum initializers, constant patterns) are\n+                        // reported as hard errors\n                         } else {\n                             err.report_as_error(ecx.tcx, \"evaluation of constant value failed\")\n                         }"}]}