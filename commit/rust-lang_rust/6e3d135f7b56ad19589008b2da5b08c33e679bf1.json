{"sha": "6e3d135f7b56ad19589008b2da5b08c33e679bf1", "node_id": "C_kwDOAAsO6NoAKDZlM2QxMzVmN2I1NmFkMTk1ODkwMDhiMmRhNWIwOGMzM2U2NzliZjE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-02T15:50:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-02T15:50:57Z"}, "message": "Merge #11167\n\n11167: internal: check top level entry point invariants r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e2563bd075d9d05f1c80ae8875f58369e4e276ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2563bd075d9d05f1c80ae8875f58369e4e276ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e3d135f7b56ad19589008b2da5b08c33e679bf1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh0cnhCRBK7hj4Ov3rIwAAw7EIAF0Zz2MZ1/GlFVg5Bv5ZJ526\nHee9whkCeAHLSL2YdnRi+tjN1JJijIYIawPDtdieu5z3JhTnwfOSbKgl6X6bQUXu\nfRIykRTBQdiKNMy1bd1qvJSITF0axG4QXJlFwhe/jRKheIfJdRDW2uu9MrK/qdYl\nM8Ub8j6JtT6yykWMYS3zcF+EArZ656IyJNV8pUOiewUJiKTey0qQhA8MWkrZfdj5\ndvEHflijJwnr8xcdpA3uorc1Bxcc/xoLDHU0/h3Jj4n+FszUHk+/8rOVWLtAP3t3\nbpfSKG/2+hqlDnJ5dff1tJzJGppqL4tr8Dm+gnk1rnXGcHiP190KfGZb0Xu6zTw=\n=uAYW\n-----END PGP SIGNATURE-----\n", "payload": "tree e2563bd075d9d05f1c80ae8875f58369e4e276ab\nparent 68013ee315c72379c536941ba83c888e083d7441\nparent 2e34a5e2e997c7478a6b97897c6c603a50ed5f39\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641138657 +0000\ncommitter GitHub <noreply@github.com> 1641138657 +0000\n\nMerge #11167\n\n11167: internal: check top level entry point invariants r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e3d135f7b56ad19589008b2da5b08c33e679bf1", "html_url": "https://github.com/rust-lang/rust/commit/6e3d135f7b56ad19589008b2da5b08c33e679bf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e3d135f7b56ad19589008b2da5b08c33e679bf1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68013ee315c72379c536941ba83c888e083d7441", "url": "https://api.github.com/repos/rust-lang/rust/commits/68013ee315c72379c536941ba83c888e083d7441", "html_url": "https://github.com/rust-lang/rust/commit/68013ee315c72379c536941ba83c888e083d7441"}, {"sha": "2e34a5e2e997c7478a6b97897c6c603a50ed5f39", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e34a5e2e997c7478a6b97897c6c603a50ed5f39", "html_url": "https://github.com/rust-lang/rust/commit/2e34a5e2e997c7478a6b97897c6c603a50ed5f39"}], "stats": {"total": 232, "additions": 177, "deletions": 55}, "files": [{"sha": "5f4b7d6d0bcac057945cf49b1d33063ff2ab3481", "filename": "crates/hir_def/src/macro_expansion_tests/mbe/tt_conversion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e3d135f7b56ad19589008b2da5b08c33e679bf1/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3d135f7b56ad19589008b2da5b08c33e679bf1/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs?ref=6e3d135f7b56ad19589008b2da5b08c33e679bf1", "patch": "@@ -105,21 +105,21 @@ macro_rules! m2 { ($x:ident) => {} }\n \n #[test]\n fn expansion_does_not_parse_as_expression() {\n-    cov_mark::check!(expansion_does_not_parse_as_expression);\n     check(\n         r#\"\n macro_rules! stmts {\n     () => { let _ = 0; }\n }\n \n-fn f() { let _ = stmts!(); }\n+fn f() { let _ = stmts!/*+errors*/(); }\n \"#,\n         expect![[r#\"\n macro_rules! stmts {\n     () => { let _ = 0; }\n }\n \n-fn f() { let _ = /* error: could not convert tokens */; }\n+fn f() { let _ = /* parse error: expected expression */\n+let _ = 0;; }\n \"#]],\n     )\n }"}, {"sha": "2bfda1aff2e75ac8586c70d64ccb3787ae9a75f6", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e3d135f7b56ad19589008b2da5b08c33e679bf1/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3d135f7b56ad19589008b2da5b08c33e679bf1/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=6e3d135f7b56ad19589008b2da5b08c33e679bf1", "patch": "@@ -1148,7 +1148,7 @@ fn foo() { let a = id!([0u32, bar($0)] ); }\n fn test_hover_through_literal_string_in_macro() {\n     check(\n         r#\"\n-macro_rules! arr { ($($tt:tt)*) => { [$($tt)*)] } }\n+macro_rules! arr { ($($tt:tt)*) => { [$($tt)*] } }\n fn foo() {\n     let mastered_for_itunes = \"\";\n     let _ = arr!(\"Tr$0acks\", &mastered_for_itunes);"}, {"sha": "7d7807206f4fc1a3ff2063f250ea7d60268462cc", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6e3d135f7b56ad19589008b2da5b08c33e679bf1/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3d135f7b56ad19589008b2da5b08c33e679bf1/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=6e3d135f7b56ad19589008b2da5b08c33e679bf1", "patch": "@@ -1,7 +1,7 @@\n //! Conversions between [`SyntaxNode`] and [`tt::TokenTree`].\n \n use rustc_hash::{FxHashMap, FxHashSet};\n-use stdx::non_empty_vec::NonEmptyVec;\n+use stdx::{never, non_empty_vec::NonEmptyVec};\n use syntax::{\n     ast::{self, make::tokens::doc_comment},\n     AstToken, Parse, PreorderWithTokens, SmolStr, SyntaxElement, SyntaxKind,\n@@ -66,8 +66,7 @@ pub fn token_tree_to_syntax_node(\n             parser::Step::Error { msg } => tree_sink.error(msg.to_string()),\n         }\n     }\n-    if tree_sink.roots.len() != 1 {\n-        cov_mark::hit!(expansion_does_not_parse_as_expression);\n+    if never!(tree_sink.roots.len() != 1) {\n         return Err(ExpandError::ConversionError);\n     }\n     //FIXME: would be cool to report errors"}, {"sha": "0240a6f14f661152a98d88e7567b78d53c4838e1", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6e3d135f7b56ad19589008b2da5b08c33e679bf1/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3d135f7b56ad19589008b2da5b08c33e679bf1/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=6e3d135f7b56ad19589008b2da5b08c33e679bf1", "patch": "@@ -135,6 +135,32 @@ pub(crate) mod entry {\n             }\n             m.complete(p, ERROR);\n         }\n+\n+        pub(crate) fn expr(p: &mut Parser) {\n+            let m = p.start();\n+            expressions::expr(p);\n+            if p.at(EOF) {\n+                m.abandon(p);\n+                return;\n+            }\n+            while !p.at(EOF) {\n+                p.bump_any();\n+            }\n+            m.complete(p, ERROR);\n+        }\n+\n+        pub(crate) fn meta_item(p: &mut Parser) {\n+            let m = p.start();\n+            attributes::meta(p);\n+            if p.at(EOF) {\n+                m.abandon(p);\n+                return;\n+            }\n+            while !p.at(EOF) {\n+                p.bump_any();\n+            }\n+            m.complete(p, ERROR);\n+        }\n     }\n }\n "}, {"sha": "cff4ca4ba294c804010eeb525e248bed18d0d0fc", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 65, "deletions": 47, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/6e3d135f7b56ad19589008b2da5b08c33e679bf1/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3d135f7b56ad19589008b2da5b08c33e679bf1/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=6e3d135f7b56ad19589008b2da5b08c33e679bf1", "patch": "@@ -41,48 +41,6 @@ pub use crate::{\n     syntax_kind::SyntaxKind,\n };\n \n-/// Parse a prefix of the input as a given syntactic construct.\n-///\n-/// This is used by macro-by-example parser to implement things like `$i:item`\n-/// and the naming of variants follows the naming of macro fragments.\n-///\n-/// Note that this is generally non-optional -- the result is intentionally not\n-/// `Option<Output>`. The way MBE work, by the time we *try* to parse `$e:expr`\n-/// we already commit to expression. In other words, this API by design can't be\n-/// used to implement \"rollback and try another alternative\" logic.\n-#[derive(Debug)]\n-pub enum PrefixEntryPoint {\n-    Vis,\n-    Block,\n-    Stmt,\n-    Pat,\n-    Ty,\n-    Expr,\n-    Path,\n-    Item,\n-    MetaItem,\n-}\n-\n-impl PrefixEntryPoint {\n-    pub fn parse(&self, input: &Input) -> Output {\n-        let entry_point: fn(&'_ mut parser::Parser) = match self {\n-            PrefixEntryPoint::Vis => grammar::entry::prefix::vis,\n-            PrefixEntryPoint::Block => grammar::entry::prefix::block,\n-            PrefixEntryPoint::Stmt => grammar::entry::prefix::stmt,\n-            PrefixEntryPoint::Pat => grammar::entry::prefix::pat,\n-            PrefixEntryPoint::Ty => grammar::entry::prefix::ty,\n-            PrefixEntryPoint::Expr => grammar::entry::prefix::expr,\n-            PrefixEntryPoint::Path => grammar::entry::prefix::path,\n-            PrefixEntryPoint::Item => grammar::entry::prefix::item,\n-            PrefixEntryPoint::MetaItem => grammar::entry::prefix::meta_item,\n-        };\n-        let mut p = parser::Parser::new(input);\n-        entry_point(&mut p);\n-        let events = p.finish();\n-        event::process(events)\n-    }\n-}\n-\n /// Parse the whole of the input as a given syntactic construct.\n ///\n /// This covers two main use-cases:\n@@ -99,9 +57,11 @@ impl PrefixEntryPoint {\n /// ```\n ///\n /// the input to the macro will be parsed with [`PrefixEntryPoint::Item`], and\n-/// the result will be [`TopEntryPoint::Items`].\n+/// the result will be [`TopEntryPoint::MacroItems`].\n ///\n-/// This *should* (but currently doesn't) guarantee that all input is consumed.\n+/// [`TopEntryPoint::parse`] makes a guarantee that\n+///   * all input is consumed\n+///   * the result is a valid tree (there's one root node)\n #[derive(Debug)]\n pub enum TopEntryPoint {\n     SourceFile,\n@@ -123,9 +83,67 @@ impl TopEntryPoint {\n             TopEntryPoint::MacroItems => grammar::entry::top::macro_items,\n             TopEntryPoint::Pattern => grammar::entry::top::pattern,\n             TopEntryPoint::Type => grammar::entry::top::type_,\n-            // FIXME\n-            TopEntryPoint::Expr => grammar::entry::prefix::expr,\n-            TopEntryPoint::MetaItem => grammar::entry::prefix::meta_item,\n+            TopEntryPoint::Expr => grammar::entry::top::expr,\n+            TopEntryPoint::MetaItem => grammar::entry::top::meta_item,\n+        };\n+        let mut p = parser::Parser::new(input);\n+        entry_point(&mut p);\n+        let events = p.finish();\n+        let res = event::process(events);\n+\n+        if cfg!(debug_assertions) {\n+            let mut depth = 0;\n+            let mut first = true;\n+            for step in res.iter() {\n+                assert!(depth > 0 || first);\n+                first = false;\n+                match step {\n+                    Step::Enter { .. } => depth += 1,\n+                    Step::Exit => depth -= 1,\n+                    Step::Token { .. } | Step::Error { .. } => (),\n+                }\n+            }\n+            assert!(!first, \"no tree at all\");\n+        }\n+\n+        res\n+    }\n+}\n+\n+/// Parse a prefix of the input as a given syntactic construct.\n+///\n+/// This is used by macro-by-example parser to implement things like `$i:item`\n+/// and the naming of variants follows the naming of macro fragments.\n+///\n+/// Note that this is generally non-optional -- the result is intentionally not\n+/// `Option<Output>`. The way MBE work, by the time we *try* to parse `$e:expr`\n+/// we already commit to expression. In other words, this API by design can't be\n+/// used to implement \"rollback and try another alternative\" logic.\n+#[derive(Debug)]\n+pub enum PrefixEntryPoint {\n+    Vis,\n+    Block,\n+    Stmt,\n+    Pat,\n+    Ty,\n+    Expr,\n+    Path,\n+    Item,\n+    MetaItem,\n+}\n+\n+impl PrefixEntryPoint {\n+    pub fn parse(&self, input: &Input) -> Output {\n+        let entry_point: fn(&'_ mut parser::Parser) = match self {\n+            PrefixEntryPoint::Vis => grammar::entry::prefix::vis,\n+            PrefixEntryPoint::Block => grammar::entry::prefix::block,\n+            PrefixEntryPoint::Stmt => grammar::entry::prefix::stmt,\n+            PrefixEntryPoint::Pat => grammar::entry::prefix::pat,\n+            PrefixEntryPoint::Ty => grammar::entry::prefix::ty,\n+            PrefixEntryPoint::Expr => grammar::entry::prefix::expr,\n+            PrefixEntryPoint::Path => grammar::entry::prefix::path,\n+            PrefixEntryPoint::Item => grammar::entry::prefix::item,\n+            PrefixEntryPoint::MetaItem => grammar::entry::prefix::meta_item,\n         };\n         let mut p = parser::Parser::new(input);\n         entry_point(&mut p);"}, {"sha": "cb25abdfeae9dc245776d3576bf1c301cb8873e7", "filename": "crates/parser/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e3d135f7b56ad19589008b2da5b08c33e679bf1/crates%2Fparser%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3d135f7b56ad19589008b2da5b08c33e679bf1/crates%2Fparser%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests.rs?ref=6e3d135f7b56ad19589008b2da5b08c33e679bf1", "patch": "@@ -1,6 +1,6 @@\n mod sourcegen_inline_tests;\n-mod prefix_entries;\n mod top_entries;\n+mod prefix_entries;\n \n use std::{\n     fmt::Write,"}, {"sha": "24e41b46f8e4c14c40116b6ae7abf390980b9b84", "filename": "crates/parser/src/tests/top_entries.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/6e3d135f7b56ad19589008b2da5b08c33e679bf1/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3d135f7b56ad19589008b2da5b08c33e679bf1/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs?ref=6e3d135f7b56ad19589008b2da5b08c33e679bf1", "patch": "@@ -51,6 +51,13 @@ fn source_file() {\n \n #[test]\n fn macro_stmt() {\n+    check(\n+        TopEntryPoint::MacroStmts,\n+        \"\",\n+        expect![[r#\"\n+            MACRO_STMTS\n+        \"#]],\n+    );\n     check(\n         TopEntryPoint::MacroStmts,\n         \"#!/usr/bin/rust\",\n@@ -94,6 +101,13 @@ fn macro_stmt() {\n \n #[test]\n fn macro_items() {\n+    check(\n+        TopEntryPoint::MacroItems,\n+        \"\",\n+        expect![[r#\"\n+            MACRO_ITEMS\n+        \"#]],\n+    );\n     check(\n         TopEntryPoint::MacroItems,\n         \"#!/usr/bin/rust\",\n@@ -131,6 +145,14 @@ fn macro_items() {\n \n #[test]\n fn macro_pattern() {\n+    check(\n+        TopEntryPoint::Pattern,\n+        \"\",\n+        expect![[r#\"\n+            ERROR\n+            error 0: expected pattern\n+        \"#]],\n+    );\n     check(\n         TopEntryPoint::Pattern,\n         \"Some(_)\",\n@@ -177,6 +199,15 @@ fn macro_pattern() {\n \n #[test]\n fn type_() {\n+    check(\n+        TopEntryPoint::Type,\n+        \"\",\n+        expect![[r#\"\n+            ERROR\n+            error 0: expected type\n+        \"#]],\n+    );\n+\n     check(\n         TopEntryPoint::Type,\n         \"Option<!>\",\n@@ -224,6 +255,54 @@ fn type_() {\n     );\n }\n \n+#[test]\n+fn expr() {\n+    check(\n+        TopEntryPoint::Expr,\n+        \"\",\n+        expect![[r#\"\n+            ERROR\n+            error 0: expected expression\n+        \"#]],\n+    );\n+    check(\n+        TopEntryPoint::Expr,\n+        \"2 + 2 == 5\",\n+        expect![[r#\"\n+        BIN_EXPR\n+          BIN_EXPR\n+            LITERAL\n+              INT_NUMBER \"2\"\n+            WHITESPACE \" \"\n+            PLUS \"+\"\n+            WHITESPACE \" \"\n+            LITERAL\n+              INT_NUMBER \"2\"\n+          WHITESPACE \" \"\n+          EQ2 \"==\"\n+          WHITESPACE \" \"\n+          LITERAL\n+            INT_NUMBER \"5\"\n+    \"#]],\n+    );\n+    check(\n+        TopEntryPoint::Expr,\n+        \"let _ = 0;\",\n+        expect![[r#\"\n+        ERROR\n+          LET_KW \"let\"\n+          WHITESPACE \" \"\n+          UNDERSCORE \"_\"\n+          WHITESPACE \" \"\n+          EQ \"=\"\n+          WHITESPACE \" \"\n+          INT_NUMBER \"0\"\n+          SEMICOLON \";\"\n+        error 0: expected expression\n+    \"#]],\n+    );\n+}\n+\n #[track_caller]\n fn check(entry: TopEntryPoint, input: &str, expect: expect_test::Expect) {\n     let (parsed, _errors) = super::parse(entry, input);"}]}