{"sha": "21ba8160f2aed7a2195015c5889c8a991181fe2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYmE4MTYwZjJhZWQ3YTIxOTUwMTVjNTg4OWM4YTk5MTE4MWZlMmY=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-12T09:47:54Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-15T20:57:38Z"}, "message": "Move fields `single_step` and `keep_macs` from `MacroExpander` to `ExpansionConfig`.", "tree": {"sha": "3dafe69fb803928959dbdae2152bc62f5226b4e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dafe69fb803928959dbdae2152bc62f5226b4e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21ba8160f2aed7a2195015c5889c8a991181fe2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21ba8160f2aed7a2195015c5889c8a991181fe2f", "html_url": "https://github.com/rust-lang/rust/commit/21ba8160f2aed7a2195015c5889c8a991181fe2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21ba8160f2aed7a2195015c5889c8a991181fe2f/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1acabeaa204db9235d9e72c5bae4cfaa82da763", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1acabeaa204db9235d9e72c5bae4cfaa82da763", "html_url": "https://github.com/rust-lang/rust/commit/d1acabeaa204db9235d9e72c5bae4cfaa82da763"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "f07025910f07ef6cd2bfad901b51af4376a71255", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ba8160f2aed7a2195015c5889c8a991181fe2f/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ba8160f2aed7a2195015c5889c8a991181fe2f/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=21ba8160f2aed7a2195015c5889c8a991181fe2f", "patch": "@@ -674,11 +674,11 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n         }\n         let features = sess.features.borrow();\n         let cfg = syntax::ext::expand::ExpansionConfig {\n-            crate_name: crate_name.to_string(),\n             features: Some(&features),\n             recursion_limit: sess.recursion_limit.get(),\n             trace_mac: sess.opts.debugging_opts.trace_macros,\n             should_test: sess.opts.test,\n+            ..syntax::ext::expand::ExpansionConfig::default(crate_name.to_string())\n         };\n         let mut ecx = ExtCtxt::new(&sess.parse_sess, krate.config.clone(), cfg, &mut resolver);\n         let ret = syntax::ext::expand::expand_crate(&mut ecx, syntax_exts, krate);"}, {"sha": "eab59d3c9309b8e127a6357e991e8ddcb56dbef8", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/21ba8160f2aed7a2195015c5889c8a991181fe2f/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ba8160f2aed7a2195015c5889c8a991181fe2f/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=21ba8160f2aed7a2195015c5889c8a991181fe2f", "patch": "@@ -173,19 +173,12 @@ impl Invocation {\n \n pub struct MacroExpander<'a, 'b:'a> {\n     pub cx: &'a mut ExtCtxt<'b>,\n-    pub single_step: bool,\n-    pub keep_macs: bool,\n     monotonic: bool, // c.f. `cx.monotonic_expander()`\n }\n \n impl<'a, 'b> MacroExpander<'a, 'b> {\n     pub fn new(cx: &'a mut ExtCtxt<'b>, monotonic: bool) -> Self {\n-        MacroExpander {\n-            cx: cx,\n-            monotonic: monotonic,\n-            single_step: false,\n-            keep_macs: false,\n-        }\n+        MacroExpander { cx: cx, monotonic: monotonic }\n     }\n \n     fn expand_crate(&mut self, mut krate: ast::Crate) -> ast::Crate {\n@@ -238,7 +231,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 expansions.push(Vec::new());\n             }\n             expansions[depth].push((mark.as_u32(), expansion));\n-            if !self.single_step {\n+            if !self.cx.ecfg.single_step {\n                 invocations.extend(new_invocations.into_iter().rev());\n             }\n         }\n@@ -417,7 +410,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 self.cx.insert_macro(def.clone());\n \n                 // If keep_macs is true, expands to a MacEager::items instead.\n-                if self.keep_macs {\n+                if self.cx.ecfg.keep_macs {\n                     Some(placeholders::reconstructed_macro_rules(&def, &path))\n                 } else {\n                     Some(placeholders::macro_scope_placeholder())\n@@ -726,6 +719,8 @@ pub struct ExpansionConfig<'feat> {\n     pub recursion_limit: usize,\n     pub trace_mac: bool,\n     pub should_test: bool, // If false, strip `#[test]` nodes\n+    pub single_step: bool,\n+    pub keep_macs: bool,\n }\n \n macro_rules! feature_tests {\n@@ -749,6 +744,8 @@ impl<'feat> ExpansionConfig<'feat> {\n             recursion_limit: 64,\n             trace_mac: false,\n             should_test: false,\n+            single_step: false,\n+            keep_macs: false,\n         }\n     }\n "}]}