{"sha": "c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZDNmNWY3NzI1YTE1ZmIzYWQ4ZWM4OGZiZjg5NTk2ZjNjZTlhZWE=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-08T01:44:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-08T01:44:29Z"}, "message": "Rollup merge of #86639 - eholk:lint-tool, r=petrochenkov\n\nSupport lint tool names in rustc command line options\n\nWhen rustc is running without a lint tool such as clippy enabled, options for lints such as `clippy::foo` are meant to be ignored. This was already working for those specified by attrs, such as `#![allow(clippy::foo)]`, but this did not work for command line arguments like `-A clippy::foo`. This PR fixes that issue.\n\nNote that we discovered this issue while discussing https://github.com/rust-lang/cargo/issues/5034.\n\nFixes #86628.", "tree": {"sha": "7a4d0562b5b720c225c93945469f030ffed3c6f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a4d0562b5b720c225c93945469f030ffed3c6f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg5lh9CRBK7hj4Ov3rIwAAQU8IAIodtEi8O24ZSI/nCX7uoG56\nVdZzRXE9q9jxSJ5xQCsf3WeR5cHfOv/dTgWIbE1zT2gz+waVG4YHU+BYcXEOs+zu\n9NK3fRYS/+rCxoc7TA/jzZlX6DaCNQRM84+XiyTuDO/KAHb3ryRP+AdEj0ZkQmcX\nWDSFzrRctDE27bE7UTiwIZe6BFLO4PKiugKAWoa1iL5hFq9q5FBZjPsZXUUbxuuh\nEfHm1BtK0Ii8O6Kf6bduUuokunzTSyvmp5X1GwxvsD2OuGUzpj/ZzKJV7IFlBOeo\nZ6wEvVOWt0lXhagOYMTMslNj6fZC9Z5aC6ZxsS6W+1y+SIxNd1wXltYhhfZrhXY=\n=1P5u\n-----END PGP SIGNATURE-----\n", "payload": "tree 7a4d0562b5b720c225c93945469f030ffed3c6f8\nparent d2b04f075c0ce010758c4c8674152ff89d1d73f3\nparent 4a83a93e9afd29e7494af3cc2a33c44ec32b0303\nauthor Yuki Okushi <jtitor@2k36.org> 1625708669 +0900\ncommitter GitHub <noreply@github.com> 1625708669 +0900\n\nRollup merge of #86639 - eholk:lint-tool, r=petrochenkov\n\nSupport lint tool names in rustc command line options\n\nWhen rustc is running without a lint tool such as clippy enabled, options for lints such as `clippy::foo` are meant to be ignored. This was already working for those specified by attrs, such as `#![allow(clippy::foo)]`, but this did not work for command line arguments like `-A clippy::foo`. This PR fixes that issue.\n\nNote that we discovered this issue while discussing https://github.com/rust-lang/cargo/issues/5034.\n\nFixes #86628.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea", "html_url": "https://github.com/rust-lang/rust/commit/c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2b04f075c0ce010758c4c8674152ff89d1d73f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b04f075c0ce010758c4c8674152ff89d1d73f3", "html_url": "https://github.com/rust-lang/rust/commit/d2b04f075c0ce010758c4c8674152ff89d1d73f3"}, {"sha": "4a83a93e9afd29e7494af3cc2a33c44ec32b0303", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a83a93e9afd29e7494af3cc2a33c44ec32b0303", "html_url": "https://github.com/rust-lang/rust/commit/4a83a93e9afd29e7494af3cc2a33c44ec32b0303"}], "stats": {"total": 157, "additions": 123, "deletions": 34}, "files": [{"sha": "c44df407f6b3ae5ef3c88bc1bada2f2b6f3921af", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea", "patch": "@@ -16,7 +16,7 @@\n \n use self::TargetLint::*;\n \n-use crate::levels::LintLevelsBuilder;\n+use crate::levels::{is_known_lint_tool, LintLevelsBuilder};\n use crate::passes::{EarlyLintPassObject, LateLintPassObject};\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n@@ -129,6 +129,8 @@ pub enum CheckLintNameResult<'a> {\n     Ok(&'a [LintId]),\n     /// Lint doesn't exist. Potentially contains a suggestion for a correct lint name.\n     NoLint(Option<Symbol>),\n+    /// The lint refers to a tool that has not been registered.\n+    NoTool,\n     /// The lint is either renamed or removed. This is the warning\n     /// message, and an optional new name (`None` if removed).\n     Warning(String, Option<String>),\n@@ -321,9 +323,17 @@ impl LintStore {\n         }\n     }\n \n-    /// Checks the validity of lint names derived from the command line\n-    pub fn check_lint_name_cmdline(&self, sess: &Session, lint_name: &str, level: Level) {\n-        let db = match self.check_lint_name(lint_name, None) {\n+    /// Checks the validity of lint names derived from the command line.\n+    pub fn check_lint_name_cmdline(\n+        &self,\n+        sess: &Session,\n+        lint_name: &str,\n+        level: Level,\n+        crate_attrs: &[ast::Attribute],\n+    ) {\n+        let (tool_name, lint_name_only) = parse_lint_and_tool_name(lint_name);\n+\n+        let db = match self.check_lint_name(sess, lint_name_only, tool_name, crate_attrs) {\n             CheckLintNameResult::Ok(_) => None,\n             CheckLintNameResult::Warning(ref msg, _) => Some(sess.struct_warn(msg)),\n             CheckLintNameResult::NoLint(suggestion) => {\n@@ -345,6 +355,13 @@ impl LintStore {\n                 ))),\n                 _ => None,\n             },\n+            CheckLintNameResult::NoTool => Some(struct_span_err!(\n+                sess,\n+                DUMMY_SP,\n+                E0602,\n+                \"unknown lint tool: `{}`\",\n+                tool_name.unwrap()\n+            )),\n         };\n \n         if let Some(mut db) = db {\n@@ -387,9 +404,17 @@ impl LintStore {\n     /// printing duplicate warnings.\n     pub fn check_lint_name(\n         &self,\n+        sess: &Session,\n         lint_name: &str,\n         tool_name: Option<Symbol>,\n+        crate_attrs: &[ast::Attribute],\n     ) -> CheckLintNameResult<'_> {\n+        if let Some(tool_name) = tool_name {\n+            if !is_known_lint_tool(tool_name, sess, crate_attrs) {\n+                return CheckLintNameResult::NoTool;\n+            }\n+        }\n+\n         let complete_name = if let Some(tool_name) = tool_name {\n             format!(\"{}::{}\", tool_name, lint_name)\n         } else {\n@@ -1005,3 +1030,14 @@ impl<'tcx> LayoutOf for LateContext<'tcx> {\n         self.tcx.layout_of(self.param_env.and(ty))\n     }\n }\n+\n+pub fn parse_lint_and_tool_name(lint_name: &str) -> (Option<Symbol>, &str) {\n+    match lint_name.split_once(\"::\") {\n+        Some((tool_name, lint_name)) => {\n+            let tool_name = Symbol::intern(tool_name);\n+\n+            (Some(tool_name), lint_name)\n+        }\n+        None => (None, lint_name),\n+    }\n+}"}, {"sha": "bc6956f57978311e02de9344d56f3a9bc404533e", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 34, "deletions": 30, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea", "patch": "@@ -89,7 +89,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         self.sets.lint_cap = sess.opts.lint_cap.unwrap_or(Level::Forbid);\n \n         for &(ref lint_name, level) in &sess.opts.lint_opts {\n-            store.check_lint_name_cmdline(sess, &lint_name, level);\n+            store.check_lint_name_cmdline(sess, &lint_name, level, self.crate_attrs);\n             let orig_level = level;\n \n             // If the cap is less than this specified level, e.g., if we've got\n@@ -111,7 +111,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         }\n \n         for lint_name in &sess.opts.force_warns {\n-            store.check_lint_name_cmdline(sess, lint_name, Level::ForceWarn);\n+            store.check_lint_name_cmdline(sess, lint_name, Level::ForceWarn, self.crate_attrs);\n             let lints = store\n                 .find_lints(lint_name)\n                 .unwrap_or_else(|_| bug!(\"A valid lint failed to produce a lint ids\"));\n@@ -322,33 +322,14 @@ impl<'s> LintLevelsBuilder<'s> {\n                         continue;\n                     }\n                 };\n-                let tool_name = if meta_item.path.segments.len() > 1 {\n-                    let tool_ident = meta_item.path.segments[0].ident;\n-                    if !is_known_lint_tool(tool_ident.name, sess, &self.crate_attrs) {\n-                        let mut err = struct_span_err!(\n-                            sess,\n-                            tool_ident.span,\n-                            E0710,\n-                            \"unknown tool name `{}` found in scoped lint: `{}`\",\n-                            tool_ident.name,\n-                            pprust::path_to_string(&meta_item.path),\n-                        );\n-                        if sess.is_nightly_build() {\n-                            err.help(&format!(\n-                                \"add `#![register_tool({})]` to the crate root\",\n-                                tool_ident.name\n-                            ));\n-                        }\n-                        err.emit();\n-                        continue;\n-                    }\n-\n-                    Some(meta_item.path.segments.remove(0).ident.name)\n+                let tool_ident = if meta_item.path.segments.len() > 1 {\n+                    Some(meta_item.path.segments.remove(0).ident)\n                 } else {\n                     None\n                 };\n+                let tool_name = tool_ident.map(|ident| ident.name);\n                 let name = pprust::path_to_string(&meta_item.path);\n-                let lint_result = store.check_lint_name(&name, tool_name);\n+                let lint_result = store.check_lint_name(sess, &name, tool_name, self.crate_attrs);\n                 match &lint_result {\n                     CheckLintNameResult::Ok(ids) => {\n                         let src = LintLevelSource::Node(\n@@ -365,7 +346,8 @@ impl<'s> LintLevelsBuilder<'s> {\n                     CheckLintNameResult::Tool(result) => {\n                         match *result {\n                             Ok(ids) => {\n-                                let complete_name = &format!(\"{}::{}\", tool_name.unwrap(), name);\n+                                let complete_name =\n+                                    &format!(\"{}::{}\", tool_ident.unwrap().name, name);\n                                 let src = LintLevelSource::Node(\n                                     Symbol::intern(complete_name),\n                                     sp,\n@@ -420,6 +402,26 @@ impl<'s> LintLevelsBuilder<'s> {\n                         }\n                     }\n \n+                    &CheckLintNameResult::NoTool => {\n+                        let mut err = struct_span_err!(\n+                            sess,\n+                            tool_ident.map_or(DUMMY_SP, |ident| ident.span),\n+                            E0710,\n+                            \"unknown tool name `{}` found in scoped lint: `{}::{}`\",\n+                            tool_name.unwrap(),\n+                            tool_name.unwrap(),\n+                            pprust::path_to_string(&meta_item.path),\n+                        );\n+                        if sess.is_nightly_build() {\n+                            err.help(&format!(\n+                                \"add `#![register_tool({})]` to the crate root\",\n+                                tool_name.unwrap()\n+                            ));\n+                        }\n+                        err.emit();\n+                        continue;\n+                    }\n+\n                     _ if !self.warn_about_weird_lints => {}\n \n                     CheckLintNameResult::Warning(msg, renamed) => {\n@@ -451,8 +453,8 @@ impl<'s> LintLevelsBuilder<'s> {\n                         let (level, src) =\n                             self.sets.get_lint_level(lint, self.cur, Some(&specs), self.sess);\n                         struct_lint_level(self.sess, lint, level, src, Some(sp.into()), |lint| {\n-                            let name = if let Some(tool_name) = tool_name {\n-                                format!(\"{}::{}\", tool_name, name)\n+                            let name = if let Some(tool_ident) = tool_ident {\n+                                format!(\"{}::{}\", tool_ident.name, name)\n                             } else {\n                                 name.to_string()\n                             };\n@@ -475,7 +477,9 @@ impl<'s> LintLevelsBuilder<'s> {\n                 if let CheckLintNameResult::Warning(_, Some(new_name)) = lint_result {\n                     // Ignore any errors or warnings that happen because the new name is inaccurate\n                     // NOTE: `new_name` already includes the tool name, so we don't have to add it again.\n-                    if let CheckLintNameResult::Ok(ids) = store.check_lint_name(&new_name, None) {\n+                    if let CheckLintNameResult::Ok(ids) =\n+                        store.check_lint_name(sess, &new_name, None, self.crate_attrs)\n+                    {\n                         let src = LintLevelSource::Node(Symbol::intern(&new_name), sp, reason);\n                         for &id in ids {\n                             self.check_gated_lint(id, attr.span);\n@@ -578,7 +582,7 @@ impl<'s> LintLevelsBuilder<'s> {\n     }\n }\n \n-fn is_known_lint_tool(m_item: Symbol, sess: &Session, attrs: &[ast::Attribute]) -> bool {\n+pub fn is_known_lint_tool(m_item: Symbol, sess: &Session, attrs: &[ast::Attribute]) -> bool {\n     if [sym::clippy, sym::rustc, sym::rustdoc].contains(&m_item) {\n         return true;\n     }"}, {"sha": "28b60603a2dbb36a2a25d7d3c728cd08aca15783", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea", "patch": "@@ -497,3 +497,6 @@ fn register_internals(store: &mut LintStore) {\n         ],\n     );\n }\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "a50c88aa0f736df4ff5e0d67d251e63ffd0319b3", "filename": "compiler/rustc_lint/src/tests.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea/compiler%2Frustc_lint%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea/compiler%2Frustc_lint%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftests.rs?ref=c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea", "patch": "@@ -0,0 +1,24 @@\n+use crate::context::parse_lint_and_tool_name;\n+use rustc_span::{with_default_session_globals, Symbol};\n+\n+#[test]\n+fn parse_lint_no_tool() {\n+    with_default_session_globals(|| assert_eq!(parse_lint_and_tool_name(\"foo\"), (None, \"foo\")));\n+}\n+\n+#[test]\n+fn parse_lint_with_tool() {\n+    with_default_session_globals(|| {\n+        assert_eq!(parse_lint_and_tool_name(\"clippy::foo\"), (Some(Symbol::intern(\"clippy\")), \"foo\"))\n+    });\n+}\n+\n+#[test]\n+fn parse_lint_multiple_path() {\n+    with_default_session_globals(|| {\n+        assert_eq!(\n+            parse_lint_and_tool_name(\"clippy::foo::bar\"),\n+            (Some(Symbol::intern(\"clippy\")), \"foo::bar\")\n+        )\n+    });\n+}"}, {"sha": "d6e95fd3ec40307f9295c9a73e4a6f2af49aa669", "filename": "src/test/ui/lint/command-line-register-lint-tool.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea/src%2Ftest%2Fui%2Flint%2Fcommand-line-register-lint-tool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea/src%2Ftest%2Fui%2Flint%2Fcommand-line-register-lint-tool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-register-lint-tool.rs?ref=c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea", "patch": "@@ -0,0 +1,7 @@\n+// compile-flags: -A known_tool::foo\n+// check-pass\n+\n+#![feature(register_tool)]\n+#![register_tool(known_tool)]\n+\n+fn main() {}"}, {"sha": "59fc02000950762801f3f530e91e559a52b12552", "filename": "src/test/ui/lint/command-line-register-unknown-lint-tool.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea/src%2Ftest%2Fui%2Flint%2Fcommand-line-register-unknown-lint-tool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea/src%2Ftest%2Fui%2Flint%2Fcommand-line-register-unknown-lint-tool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-register-unknown-lint-tool.rs?ref=c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea", "patch": "@@ -0,0 +1,4 @@\n+// compile-flags: -A unknown_tool::foo\n+// error-pattern: unknown lint tool: `unknown_tool`\n+\n+fn main() {}"}, {"sha": "c9a2aff2137a72310c98f37b08e3d937eea5b0a2", "filename": "src/test/ui/lint/command-line-register-unknown-lint-tool.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea/src%2Ftest%2Fui%2Flint%2Fcommand-line-register-unknown-lint-tool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea/src%2Ftest%2Fui%2Flint%2Fcommand-line-register-unknown-lint-tool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-register-unknown-lint-tool.stderr?ref=c2d3f5f7725a15fb3ad8ec88fbf89596f3ce9aea", "patch": "@@ -0,0 +1,11 @@\n+error[E0602]: unknown lint tool: `unknown_tool`\n+   |\n+   = note: requested on the command line with `-A unknown_tool::foo`\n+\n+error[E0602]: unknown lint tool: `unknown_tool`\n+   |\n+   = note: requested on the command line with `-A unknown_tool::foo`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0602`."}]}