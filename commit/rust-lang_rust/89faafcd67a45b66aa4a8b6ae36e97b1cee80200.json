{"sha": "89faafcd67a45b66aa4a8b6ae36e97b1cee80200", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZmFhZmNkNjdhNDViNjZhYTRhOGI2YWUzNmU5N2IxY2VlODAyMDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-17T10:11:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-17T10:11:23Z"}, "message": "Auto merge of #28381 - ebfull:aint-fraid-a-no-ghosts-redux, r=me\n\n#27483 redux at Gankro's request.\r\n\r\nFixes #26905, Closes #28239\r\n\r\nr? @nrc", "tree": {"sha": "b8d29c9efa3e84e85b7e955a81cf1ffa7df26dea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8d29c9efa3e84e85b7e955a81cf1ffa7df26dea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89faafcd67a45b66aa4a8b6ae36e97b1cee80200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89faafcd67a45b66aa4a8b6ae36e97b1cee80200", "html_url": "https://github.com/rust-lang/rust/commit/89faafcd67a45b66aa4a8b6ae36e97b1cee80200", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89faafcd67a45b66aa4a8b6ae36e97b1cee80200/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3fc6e1858f6882bc9bd14641420bf3c4f7ee86b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3fc6e1858f6882bc9bd14641420bf3c4f7ee86b", "html_url": "https://github.com/rust-lang/rust/commit/d3fc6e1858f6882bc9bd14641420bf3c4f7ee86b"}, {"sha": "b096403d432afedc5d9ab1f26e3c1504f5015fe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b096403d432afedc5d9ab1f26e3c1504f5015fe2", "html_url": "https://github.com/rust-lang/rust/commit/b096403d432afedc5d9ab1f26e3c1504f5015fe2"}], "stats": {"total": 84, "additions": 82, "deletions": 2}, "files": [{"sha": "44f97a6b9e3c354e64698b670b383333020fe90e", "filename": "src/librustc/middle/ty/sty.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89faafcd67a45b66aa4a8b6ae36e97b1cee80200/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89faafcd67a45b66aa4a8b6ae36e97b1cee80200/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs?ref=89faafcd67a45b66aa4a8b6ae36e97b1cee80200", "patch": "@@ -899,6 +899,14 @@ impl<'tcx> TyS<'tcx> {\n         }\n     }\n \n+    pub fn is_phantom_data(&self) -> bool {\n+        if let TyStruct(def, _) = self.sty {\n+            def.is_phantom_data()\n+        } else {\n+            false\n+        }\n+    }\n+\n     pub fn is_bool(&self) -> bool { self.sty == TyBool }\n \n     pub fn is_param(&self, space: subst::ParamSpace, index: u32) -> bool {"}, {"sha": "5b0dae23807a9986750f07c5ac8745e81851e30e", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89faafcd67a45b66aa4a8b6ae36e97b1cee80200/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89faafcd67a45b66aa4a8b6ae36e97b1cee80200/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=89faafcd67a45b66aa4a8b6ae36e97b1cee80200", "patch": "@@ -533,7 +533,7 @@ fn coerce_unsized<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                               Rvalue::new(ByRef)));\n                 } else {\n                     // Otherwise, simply copy the data from the source.\n-                    assert_eq!(src_ty, target_ty);\n+                    assert!(src_ty.is_phantom_data() || src_ty == target_ty);\n                     memcpy_ty(bcx, ll_target, ll_source, src_ty);\n                 }\n             }"}, {"sha": "d5164af56b3574f50963a9a1554c97ba02cb6ed2", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/89faafcd67a45b66aa4a8b6ae36e97b1cee80200/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89faafcd67a45b66aa4a8b6ae36e97b1cee80200/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=89faafcd67a45b66aa4a8b6ae36e97b1cee80200", "patch": "@@ -480,9 +480,16 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n                     let fields = &def_a.struct_variant().fields;\n                     let diff_fields = fields.iter().enumerate().filter_map(|(i, f)| {\n                         let (a, b) = (f.ty(tcx, substs_a), f.ty(tcx, substs_b));\n-                        if infcx.sub_types(false, origin, b, a).is_ok() {\n+\n+                        if f.unsubst_ty().is_phantom_data() {\n+                            // Ignore PhantomData fields\n+                            None\n+                        } else if infcx.sub_types(false, origin, b, a).is_ok() {\n+                            // Ignore fields that aren't significantly changed\n                             None\n                         } else {\n+                            // Collect up all fields that were significantly changed\n+                            // i.e. those that contain T in coerce_unsized T -> U\n                             Some((i, a, b))\n                         }\n                     }).collect::<Vec<_>>();"}, {"sha": "3b8fac832a464de29b4e4befe79e4520362109f9", "filename": "src/test/compile-fail/issue-26905.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/89faafcd67a45b66aa4a8b6ae36e97b1cee80200/src%2Ftest%2Fcompile-fail%2Fissue-26905.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89faafcd67a45b66aa4a8b6ae36e97b1cee80200/src%2Ftest%2Fcompile-fail%2Fissue-26905.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26905.rs?ref=89faafcd67a45b66aa4a8b6ae36e97b1cee80200", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unsize, coerce_unsized)]\n+\n+// Verfies that non-PhantomData ZSTs still cause coercions to fail.\n+// They might have additional semantics that we don't want to bulldoze.\n+\n+use std::marker::{Unsize, PhantomData};\n+use std::ops::CoerceUnsized;\n+\n+struct NotPhantomData<T: ?Sized>(PhantomData<T>);\n+\n+struct MyRc<T: ?Sized> {\n+    _ptr: *const T,\n+    _boo: NotPhantomData<T>,\n+}\n+\n+impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<MyRc<U>> for MyRc<T>{ } //~ERROR\n+\n+fn main() {\n+    let data = [1, 2, 3];\n+    let iter = data.iter();\n+    let x = MyRc { _ptr: &iter, _boo: NotPhantomData(PhantomData) };\n+    let _y: MyRc<Iterator<Item=&u32>> = x;\n+}\n+"}, {"sha": "0ad193bb28c993affff0fca9c7ced820ed34c104", "filename": "src/test/run-pass/issue-26905.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/89faafcd67a45b66aa4a8b6ae36e97b1cee80200/src%2Ftest%2Frun-pass%2Fissue-26905.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89faafcd67a45b66aa4a8b6ae36e97b1cee80200/src%2Ftest%2Frun-pass%2Fissue-26905.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-26905.rs?ref=89faafcd67a45b66aa4a8b6ae36e97b1cee80200", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unsize, coerce_unsized)]\n+\n+// Verfies that PhantomData is ignored for DST coercions\n+\n+use std::marker::{Unsize, PhantomData};\n+use std::ops::CoerceUnsized;\n+\n+struct MyRc<T: ?Sized> {\n+    _ptr: *const T,\n+    _boo: PhantomData<T>,\n+}\n+\n+impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<MyRc<U>> for MyRc<T>{ }\n+\n+fn main() {\n+    let data = [1, 2, 3];\n+    let iter = data.iter();\n+    let x = MyRc { _ptr: &iter, _boo: PhantomData };\n+    let _y: MyRc<Iterator<Item=&u32>> = x;\n+}\n+"}]}