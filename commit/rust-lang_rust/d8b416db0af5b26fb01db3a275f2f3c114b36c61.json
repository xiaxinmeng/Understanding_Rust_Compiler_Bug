{"sha": "d8b416db0af5b26fb01db3a275f2f3c114b36c61", "node_id": "C_kwDOAAsO6NoAKGQ4YjQxNmRiMGFmNWIyNmZiMDFkYjNhMjc1ZjJmM2MxMTRiMzZjNjE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-15T09:44:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-15T09:44:10Z"}, "message": "Rollup merge of #104296 - compiler-errors:opaque-ty-ffi-normalization-cycle, r=lcnr\n\nWalk types more carefully in `ProhibitOpaqueTypes` visitor\n\nThe visitor didn't account for the case where you could have `<TAIT as Trait>::Assoc` normalize to itself, in the case of a `type TAIT = impl Trait` with an unconstrained associated type. That causes the visitor to loop on the same type over and over.\n\nFixes #104291", "tree": {"sha": "b37c2fef9ccb3a94c050bc450ab6765a84a2e5ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b37c2fef9ccb3a94c050bc450ab6765a84a2e5ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8b416db0af5b26fb01db3a275f2f3c114b36c61", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjc19qCRBK7hj4Ov3rIwAAfkUIACWwOyXAKjs7uz0+7O/Nv1Nu\nrATTldbEv3sPAXb8a8sJazzD8q/OPZH/rBLdmCso/v29byxZyxNWcNC/PVACmRIR\n4MRRqgLG0zMZDKbrGj3ZS0lZQ9knmnm0Wsenw5D0GVF7KvL7n0zphuZMWiTOlEGe\nsWXBZHMspPCrYRLqSaKQRhXT4nixRUvyXB+DFaVryZBYya9Rg1ZWcoPAYqPuyYkK\nXuRpGBdZvRg5oDxBiZgNF96ZvfcAKqPzF6WuecXzVKOF8gZ4zjIvdAymiykLHQdH\nIz1+DYQC2+2D7le/lhsEGB2dSV6lxIZDt4ZsyrkQL1sQkieVtwWv8AjXrkoaX8U=\n=krWY\n-----END PGP SIGNATURE-----\n", "payload": "tree b37c2fef9ccb3a94c050bc450ab6765a84a2e5ef\nparent 34425c8c00e85d3480746ddc1eef466b6fc8a697\nparent d8bd153ba54ce2ad2d7f1a431f471504690e33b1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1668505450 +0100\ncommitter GitHub <noreply@github.com> 1668505450 +0100\n\nRollup merge of #104296 - compiler-errors:opaque-ty-ffi-normalization-cycle, r=lcnr\n\nWalk types more carefully in `ProhibitOpaqueTypes` visitor\n\nThe visitor didn't account for the case where you could have `<TAIT as Trait>::Assoc` normalize to itself, in the case of a `type TAIT = impl Trait` with an unconstrained associated type. That causes the visitor to loop on the same type over and over.\n\nFixes #104291\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8b416db0af5b26fb01db3a275f2f3c114b36c61", "html_url": "https://github.com/rust-lang/rust/commit/d8b416db0af5b26fb01db3a275f2f3c114b36c61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8b416db0af5b26fb01db3a275f2f3c114b36c61/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34425c8c00e85d3480746ddc1eef466b6fc8a697", "url": "https://api.github.com/repos/rust-lang/rust/commits/34425c8c00e85d3480746ddc1eef466b6fc8a697", "html_url": "https://github.com/rust-lang/rust/commit/34425c8c00e85d3480746ddc1eef466b6fc8a697"}, {"sha": "d8bd153ba54ce2ad2d7f1a431f471504690e33b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8bd153ba54ce2ad2d7f1a431f471504690e33b1", "html_url": "https://github.com/rust-lang/rust/commit/d8bd153ba54ce2ad2d7f1a431f471504690e33b1"}], "stats": {"total": 95, "additions": 73, "deletions": 22}, "files": [{"sha": "afc568f3a505b61a139bb6adf25dad2a9f4d2623", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d8b416db0af5b26fb01db3a275f2f3c114b36c61/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b416db0af5b26fb01db3a275f2f3c114b36c61/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=d8b416db0af5b26fb01db3a275f2f3c114b36c61", "patch": "@@ -1195,35 +1195,30 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     }\n \n     fn check_for_opaque_ty(&mut self, sp: Span, ty: Ty<'tcx>) -> bool {\n-        struct ProhibitOpaqueTypes<'a, 'tcx> {\n-            cx: &'a LateContext<'tcx>,\n-        }\n-\n-        impl<'a, 'tcx> ty::visit::TypeVisitor<'tcx> for ProhibitOpaqueTypes<'a, 'tcx> {\n+        struct ProhibitOpaqueTypes;\n+        impl<'tcx> ty::visit::TypeVisitor<'tcx> for ProhibitOpaqueTypes {\n             type BreakTy = Ty<'tcx>;\n \n             fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                match ty.kind() {\n-                    ty::Opaque(..) => ControlFlow::Break(ty),\n-                    // Consider opaque types within projections FFI-safe if they do not normalize\n-                    // to more opaque types.\n-                    ty::Projection(..) => {\n-                        let ty = self.cx.tcx.normalize_erasing_regions(self.cx.param_env, ty);\n-\n-                        // If `ty` is an opaque type directly then `super_visit_with` won't invoke\n-                        // this function again.\n-                        if ty.has_opaque_types() {\n-                            self.visit_ty(ty)\n-                        } else {\n-                            ControlFlow::CONTINUE\n-                        }\n-                    }\n-                    _ => ty.super_visit_with(self),\n+                if !ty.has_opaque_types() {\n+                    return ControlFlow::CONTINUE;\n+                }\n+\n+                if let ty::Opaque(..) = ty.kind() {\n+                    ControlFlow::Break(ty)\n+                } else {\n+                    ty.super_visit_with(self)\n                 }\n             }\n         }\n \n-        if let Some(ty) = ty.visit_with(&mut ProhibitOpaqueTypes { cx: self.cx }).break_value() {\n+        if let Some(ty) = self\n+            .cx\n+            .tcx\n+            .normalize_erasing_regions(self.cx.param_env, ty)\n+            .visit_with(&mut ProhibitOpaqueTypes)\n+            .break_value()\n+        {\n             self.emit_ffi_unsafe_type_lint(ty, sp, fluent::lint_improper_ctypes_opaque, None);\n             true\n         } else {"}, {"sha": "c83bca4a4c57026b4467ac3191f1320f44d8c864", "filename": "src/test/ui/lint/opaque-ty-ffi-normalization-cycle.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d8b416db0af5b26fb01db3a275f2f3c114b36c61/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-normalization-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b416db0af5b26fb01db3a275f2f3c114b36c61/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-normalization-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-normalization-cycle.rs?ref=d8b416db0af5b26fb01db3a275f2f3c114b36c61", "patch": "@@ -0,0 +1,41 @@\n+#![feature(type_alias_impl_trait)]\n+#![allow(unused)]\n+#![deny(improper_ctypes)]\n+\n+pub trait TraitA {\n+    type Assoc;\n+}\n+\n+impl TraitA for u32 {\n+    type Assoc = u32;\n+}\n+\n+pub trait TraitB {\n+    type Assoc;\n+}\n+\n+impl<T> TraitB for T\n+where\n+    T: TraitA,\n+{\n+    type Assoc = <T as TraitA>::Assoc;\n+}\n+\n+type AliasA = impl TraitA<Assoc = u32>;\n+\n+type AliasB = impl TraitB;\n+\n+fn use_of_a() -> AliasA {\n+    3\n+}\n+\n+fn use_of_b() -> AliasB {\n+    3\n+}\n+\n+extern \"C\" {\n+    fn lint_me() -> <AliasB as TraitB>::Assoc;\n+    //~^ ERROR `extern` block uses type `AliasB`, which is not FFI-safe\n+}\n+\n+fn main() {}"}, {"sha": "e8d696477ada1d5a4654eca57028f79cce16bbe9", "filename": "src/test/ui/lint/opaque-ty-ffi-normalization-cycle.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d8b416db0af5b26fb01db3a275f2f3c114b36c61/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-normalization-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8b416db0af5b26fb01db3a275f2f3c114b36c61/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-normalization-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-normalization-cycle.stderr?ref=d8b416db0af5b26fb01db3a275f2f3c114b36c61", "patch": "@@ -0,0 +1,15 @@\n+error: `extern` block uses type `AliasB`, which is not FFI-safe\n+  --> $DIR/opaque-ty-ffi-normalization-cycle.rs:37:21\n+   |\n+LL |     fn lint_me() -> <AliasB as TraitB>::Assoc;\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: opaque types have no C equivalent\n+note: the lint level is defined here\n+  --> $DIR/opaque-ty-ffi-normalization-cycle.rs:3:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}