{"sha": "3e68803891dc384e8c3e5a24bb17700187d86cf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNjg4MDM4OTFkYzM4NGU4YzNlNWEyNGJiMTc3MDAxODdkODZjZjc=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-01-06T15:36:56Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-01-06T15:47:14Z"}, "message": "libcore: add [u8] helper functions to vec.", "tree": {"sha": "9e7231bf34dd53dc244e412e78ee900bda29cc01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e7231bf34dd53dc244e412e78ee900bda29cc01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e68803891dc384e8c3e5a24bb17700187d86cf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e68803891dc384e8c3e5a24bb17700187d86cf7", "html_url": "https://github.com/rust-lang/rust/commit/3e68803891dc384e8c3e5a24bb17700187d86cf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e68803891dc384e8c3e5a24bb17700187d86cf7/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eade7844a339557e57b2ba0503d8edf19ff60f43", "url": "https://api.github.com/repos/rust-lang/rust/commits/eade7844a339557e57b2ba0503d8edf19ff60f43", "html_url": "https://github.com/rust-lang/rust/commit/eade7844a339557e57b2ba0503d8edf19ff60f43"}], "stats": {"total": 104, "additions": 103, "deletions": 1}, "files": [{"sha": "311d5e6e4bf351a0c5864a5ade4b7ed47562321e", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 94, "deletions": 1, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/3e68803891dc384e8c3e5a24bb17700187d86cf7/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e68803891dc384e8c3e5a24bb17700187d86cf7/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=3e68803891dc384e8c3e5a24bb17700187d86cf7", "patch": "@@ -709,7 +709,7 @@ Function: enum_chars\n \n Returns a vector containing a range of chars\n */\n-fn enum_chars(start: u8, end: u8) : u8::le(start, end) -> [char] {\n+fn enum_chars(start: u8, end: u8) : ::u8::le(start, end) -> [char] {\n     let i = start;\n     let r = [];\n     while i <= end { r += [i as char]; i += 1u as u8; }\n@@ -879,6 +879,99 @@ mod unsafe {\n     }\n }\n \n+/*\n+Module: u8\n+*/\n+mod u8 {\n+    export cmp;\n+    export lt, le, eq, ne, ge, gt;\n+    export hash;\n+\n+    #[nolink]\n+    #[abi = \"cdecl\"]\n+    native mod libc {\n+        fn memcmp(s1: *u8, s2: *u8, n: ctypes::size_t) -> ctypes::c_int;\n+    }\n+\n+    /*\n+    Function cmp\n+\n+    Bytewise string comparison\n+    */\n+    pure fn cmp(&&a: [u8], &&b: [u8]) -> int unsafe {\n+        let a_len = len(a);\n+        let b_len = len(b);\n+        let n = math::min(a_len, b_len) as ctypes::size_t;\n+        let r = libc::memcmp(to_ptr(a), to_ptr(b), n) as int;\n+\n+        if r != 0 { r } else {\n+            if a_len == b_len {\n+                0\n+            } else if a_len < b_len {\n+                -1\n+            } else {\n+                1\n+            }\n+        }\n+    }\n+\n+    /*\n+    Function: lt\n+\n+    Bytewise less than or equal\n+    */\n+    pure fn lt(&&a: [u8], &&b: [u8]) -> bool { cmp(a, b) < 0 }\n+\n+    /*\n+    Function: le\n+\n+    Bytewise less than or equal\n+    */\n+    pure fn le(&&a: [u8], &&b: [u8]) -> bool { cmp(a, b) <= 0 }\n+\n+    /*\n+    Function: eq\n+\n+    Bytewise equality\n+    */\n+    pure fn eq(&&a: [u8], &&b: [u8]) -> bool unsafe { cmp(a, b) == 0 }\n+\n+    /*\n+    Function: ne\n+\n+    Bytewise inequality\n+    */\n+    pure fn ne(&&a: [u8], &&b: [u8]) -> bool unsafe { cmp(a, b) != 0 }\n+\n+    /*\n+    Function: ge\n+\n+    Bytewise greater than or equal\n+    */\n+    pure fn ge(&&a: [u8], &&b: [u8]) -> bool { cmp(a, b) >= 0 }\n+\n+    /*\n+    Function: gt\n+\n+    Bytewise greater than\n+    */\n+    pure fn gt(&&a: [u8], &&b: [u8]) -> bool { cmp(a, b) > 0 }\n+\n+    /*\n+    Function: hash\n+\n+    String hash function\n+    */\n+    fn hash(&&s: [u8]) -> uint {\n+        // djb hash.\n+        // FIXME: replace with murmur.\n+\n+        let u: uint = 5381u;\n+        vec::iter(s, { |c| u *= 33u; u += c as uint; });\n+        ret u;\n+    }\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "727d32ef65a24b54cc0902bc8225eb418005721d", "filename": "src/libstd/map.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3e68803891dc384e8c3e5a24bb17700187d86cf7/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e68803891dc384e8c3e5a24bb17700187d86cf7/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=3e68803891dc384e8c3e5a24bb17700187d86cf7", "patch": "@@ -378,6 +378,15 @@ fn new_str_hash<V: copy>() -> hashmap<str, V> {\n     ret mk_hashmap(str::hash, str::eq);\n }\n \n+/*\n+Function: new_bytes_hash\n+\n+Construct a hashmap for byte string keys\n+*/\n+fn new_bytes_hash<V: copy>() -> hashmap<[u8], V> {\n+    ret mk_hashmap(vec::u8::hash, vec::u8::eq);\n+}\n+\n /*\n Function: new_int_hash\n "}]}