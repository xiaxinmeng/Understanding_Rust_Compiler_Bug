{"sha": "bacf131accaf47759d4dfac41549d2c96af196a5", "node_id": "C_kwDOAAsO6NoAKGJhY2YxMzFhY2NhZjQ3NzU5ZDRkZmFjNDE1NDlkMmM5NmFmMTk2YTU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-09-20T06:42:45Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-09-20T06:51:13Z"}, "message": "remove Windows TERM env var hack and -Zmiri-env-exclude", "tree": {"sha": "a59e1ff9936d125128b1e2fa7ffa08287c7d16d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a59e1ff9936d125128b1e2fa7ffa08287c7d16d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bacf131accaf47759d4dfac41549d2c96af196a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bacf131accaf47759d4dfac41549d2c96af196a5", "html_url": "https://github.com/rust-lang/rust/commit/bacf131accaf47759d4dfac41549d2c96af196a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bacf131accaf47759d4dfac41549d2c96af196a5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b9463c5b713350b37ebc26a01122ea16e002451", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9463c5b713350b37ebc26a01122ea16e002451", "html_url": "https://github.com/rust-lang/rust/commit/4b9463c5b713350b37ebc26a01122ea16e002451"}], "stats": {"total": 36, "additions": 9, "deletions": 27}, "files": [{"sha": "72081f45499b86d674c9473e6823d6513a7bfa41", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bacf131accaf47759d4dfac41549d2c96af196a5/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/bacf131accaf47759d4dfac41549d2c96af196a5/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=bacf131accaf47759d4dfac41549d2c96af196a5", "patch": "@@ -288,14 +288,9 @@ environment variable. We first document the most relevant and most commonly used\n   execution with a \"permission denied\" error being returned to the program.\n   `warn` prints a full backtrace when that happens; `warn-nobacktrace` is less\n   verbose. `hide` hides the warning entirely.\n-* `-Zmiri-env-exclude=<var>` keeps the `var` environment variable isolated from the host so that it\n-  cannot be accessed by the program. Can be used multiple times to exclude several variables. The\n-  `TERM` environment variable is excluded by default in Windows to prevent the libtest harness from\n-  accessing the file system. This has no effect unless `-Zmiri-disable-isolation` is also set.\n * `-Zmiri-env-forward=<var>` forwards the `var` environment variable to the interpreted program. Can\n-  be used multiple times to forward several variables. This takes precedence over\n-  `-Zmiri-env-exclude`: if a variable is both forwarded and exluced, it *will* get forwarded. This\n-  means in particular `-Zmiri-env-forward=TERM` overwrites the default exclusion of `TERM`.\n+  be used multiple times to forward several variables. Execution will still be deterministic if the\n+  value of forwarded variables stays the same. Has no effect if `-Zmiri-disable-isolation` is set.\n * `-Zmiri-ignore-leaks` disables the memory leak checker, and also allows some\n   remaining threads to exist when the main thread exits.\n * `-Zmiri-permissive-provenance` disables the warning for integer-to-pointer casts and"}, {"sha": "644a8129eee7f659f56bccff685d19d9ecb2ac39", "filename": "src/bin/miri.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bacf131accaf47759d4dfac41549d2c96af196a5/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacf131accaf47759d4dfac41549d2c96af196a5/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=bacf131accaf47759d4dfac41549d2c96af196a5", "patch": "@@ -441,8 +441,10 @@ fn main() {\n                             \"-Zmiri-seed should only contain valid hex digits [0-9a-fA-F] and must fit into a u64 (max 16 characters)\"\n                         ));\n             miri_config.seed = Some(seed);\n-        } else if let Some(param) = arg.strip_prefix(\"-Zmiri-env-exclude=\") {\n-            miri_config.excluded_env_vars.push(param.to_owned());\n+        } else if let Some(_param) = arg.strip_prefix(\"-Zmiri-env-exclude=\") {\n+            show_error!(\n+                \"`-Zmiri-env-exclude` has been removed; unset env vars before starting Miri instead\"\n+            );\n         } else if let Some(param) = arg.strip_prefix(\"-Zmiri-env-forward=\") {\n             miri_config.forwarded_env_vars.push(param.to_owned());\n         } else if let Some(param) = arg.strip_prefix(\"-Zmiri-track-pointer-tag=\") {"}, {"sha": "819d71dc69fb9bfb71e3e4da56de1beae433f484", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bacf131accaf47759d4dfac41549d2c96af196a5/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacf131accaf47759d4dfac41549d2c96af196a5/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=bacf131accaf47759d4dfac41549d2c96af196a5", "patch": "@@ -74,7 +74,7 @@ pub enum BacktraceStyle {\n #[derive(Clone)]\n pub struct MiriConfig {\n     /// The host environment snapshot to use as basis for what is provided to the interpreted program.\n-    /// (This is still subject to isolation as well as `excluded_env_vars` and `forwarded_env_vars`.)\n+    /// (This is still subject to isolation as well as `forwarded_env_vars`.)\n     pub env: Vec<(OsString, OsString)>,\n     /// Determine if validity checking is enabled.\n     pub validate: bool,\n@@ -88,8 +88,6 @@ pub struct MiriConfig {\n     pub isolated_op: IsolatedOp,\n     /// Determines if memory leaks should be ignored.\n     pub ignore_leaks: bool,\n-    /// Environment variables that should always be isolated from the host.\n-    pub excluded_env_vars: Vec<String>,\n     /// Environment variables that should always be forwarded from the host.\n     pub forwarded_env_vars: Vec<String>,\n     /// Command-line arguments passed to the interpreted program.\n@@ -146,7 +144,6 @@ impl Default for MiriConfig {\n             check_abi: true,\n             isolated_op: IsolatedOp::Reject(RejectOpWith::Abort),\n             ignore_leaks: false,\n-            excluded_env_vars: vec![],\n             forwarded_env_vars: vec![],\n             args: vec![],\n             seed: None,"}, {"sha": "5b2d645c174a89769e46a65b43a635a397b60591", "filename": "src/shims/env.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bacf131accaf47759d4dfac41549d2c96af196a5/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacf131accaf47759d4dfac41549d2c96af196a5/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=bacf131accaf47759d4dfac41549d2c96af196a5", "patch": "@@ -42,19 +42,12 @@ impl<'tcx> EnvVars<'tcx> {\n         config: &MiriConfig,\n     ) -> InterpResult<'tcx> {\n         let target_os = ecx.tcx.sess.target.os.as_ref();\n-        let mut excluded_env_vars = config.excluded_env_vars.clone();\n-        if target_os == \"windows\" {\n-            // HACK: Exclude `TERM` var to avoid terminfo trying to open the termcap file.\n-            excluded_env_vars.push(\"TERM\".to_owned());\n-        }\n \n         // Skip the loop entirely if we don't want to forward anything.\n         if ecx.machine.communicate() || !config.forwarded_env_vars.is_empty() {\n             for (name, value) in &config.env {\n-                // Always forward what is in `forwarded_env_vars`; that list can take precedence over excluded_env_vars.\n-                let forward = config.forwarded_env_vars.iter().any(|v| **v == *name)\n-                    || (ecx.machine.communicate()\n-                        && !excluded_env_vars.iter().any(|v| **v == *name));\n+                let forward = ecx.machine.communicate()\n+                    || config.forwarded_env_vars.iter().any(|v| **v == *name);\n                 if forward {\n                     let var_ptr = match target_os {\n                         target if target_os_is_unix(target) =>"}, {"sha": "14ad827463a4ea3ddddd0fd7c3e0e458d8a8b4b2", "filename": "tests/pass/shims/env/var-exclude.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b9463c5b713350b37ebc26a01122ea16e002451/tests%2Fpass%2Fshims%2Fenv%2Fvar-exclude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9463c5b713350b37ebc26a01122ea16e002451/tests%2Fpass%2Fshims%2Fenv%2Fvar-exclude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fshims%2Fenv%2Fvar-exclude.rs?ref=4b9463c5b713350b37ebc26a01122ea16e002451", "patch": "@@ -1,5 +0,0 @@\n-//@compile-flags: -Zmiri-disable-isolation -Zmiri-env-exclude=MIRI_ENV_VAR_TEST\n-\n-fn main() {\n-    assert!(std::env::var(\"MIRI_ENV_VAR_TEST\").is_err());\n-}"}]}