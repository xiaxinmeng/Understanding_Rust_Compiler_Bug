{"sha": "f304ce329f5c40f52572be7dbe29224033516c10", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMDRjZTMyOWY1YzQwZjUyNTcyYmU3ZGJlMjkyMjQwMzM1MTZjMTA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-11T14:08:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-11T14:08:22Z"}, "message": "Merge #6821\n\n6821: Improve code structure r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "4e1e55fce21084fe59aa3413597dcde5f9079361", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e1e55fce21084fe59aa3413597dcde5f9079361"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f304ce329f5c40f52572be7dbe29224033516c10", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf031WCRBK7hj4Ov3rIwAAdHIIADNr0Zq7crtTFyS0xdvR9WHO\nYcBSh5NCaUPPY2mn0enqiqGQcCbygDa9NbBQt3S082swAcqYQVDSkuIK2Y0xDi4U\nOxPp3iKSkAuUbbG/cCi+5wvp3ZoW5YLk5cqTCvSC/dbn5P87fGu4/J5Ax85hOEWj\nJyI/mXpToaO/HsuVlFJUpr3pQ3XvdGdP+6KECLSkR2kF6ysPO04dwAratH2RINoV\nAjONhIJ4+Ci0UWPNwCpDPsCHzKq2HC7fkAZUn5NfpEvs/fqz4XSvpzac2QDWhmY8\n0R2zghhmsIoTczBjOntrO+T2iADDrd14m3wXDR2HsISNFvpNtoTDM/Wd4Y29hcA=\n=uqLQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 4e1e55fce21084fe59aa3413597dcde5f9079361\nparent 15a644d6063aac86a5eb387412b96b824c67ded3\nparent 4015ff0e0bb34ee81cf99d7be678baaea2211574\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1607695702 +0000\ncommitter GitHub <noreply@github.com> 1607695702 +0000\n\nMerge #6821\n\n6821: Improve code structure r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f304ce329f5c40f52572be7dbe29224033516c10", "html_url": "https://github.com/rust-lang/rust/commit/f304ce329f5c40f52572be7dbe29224033516c10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f304ce329f5c40f52572be7dbe29224033516c10/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15a644d6063aac86a5eb387412b96b824c67ded3", "url": "https://api.github.com/repos/rust-lang/rust/commits/15a644d6063aac86a5eb387412b96b824c67ded3", "html_url": "https://github.com/rust-lang/rust/commit/15a644d6063aac86a5eb387412b96b824c67ded3"}, {"sha": "4015ff0e0bb34ee81cf99d7be678baaea2211574", "url": "https://api.github.com/repos/rust-lang/rust/commits/4015ff0e0bb34ee81cf99d7be678baaea2211574", "html_url": "https://github.com/rust-lang/rust/commit/4015ff0e0bb34ee81cf99d7be678baaea2211574"}], "stats": {"total": 48, "additions": 23, "deletions": 25}, "files": [{"sha": "4bd22ed2769cdef2fe9dd1a8966f62c9d7280d52", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f304ce329f5c40f52572be7dbe29224033516c10/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f304ce329f5c40f52572be7dbe29224033516c10/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=f304ce329f5c40f52572be7dbe29224033516c10", "patch": "@@ -294,9 +294,8 @@ impl<'db> SemanticsImpl<'db> {\n     }\n \n     fn expand(&self, macro_call: &ast::MacroCall) -> Option<SyntaxNode> {\n-        let macro_call = self.find_file(macro_call.syntax().clone()).with_value(macro_call);\n-        let sa = self.analyze2(macro_call.map(|it| it.syntax()), None);\n-        let file_id = sa.expand(self.db, macro_call)?;\n+        let sa = self.analyze(macro_call.syntax());\n+        let file_id = sa.expand(self.db, InFile::new(sa.file_id, macro_call))?;\n         let node = self.db.parse_or_expand(file_id)?;\n         self.cache(node.clone(), file_id);\n         Some(node)\n@@ -308,9 +307,8 @@ impl<'db> SemanticsImpl<'db> {\n         hypothetical_args: &ast::TokenTree,\n         token_to_map: SyntaxToken,\n     ) -> Option<(SyntaxNode, SyntaxToken)> {\n-        let macro_call =\n-            self.find_file(actual_macro_call.syntax().clone()).with_value(actual_macro_call);\n-        let sa = self.analyze2(macro_call.map(|it| it.syntax()), None);\n+        let sa = self.analyze(actual_macro_call.syntax());\n+        let macro_call = InFile::new(sa.file_id, actual_macro_call);\n         let krate = sa.resolver.krate()?;\n         let macro_call_id = macro_call.as_call_id(self.db.upcast(), krate, |path| {\n             sa.resolver.resolve_path_as_macro(self.db.upcast(), &path)\n@@ -326,10 +324,9 @@ impl<'db> SemanticsImpl<'db> {\n     fn descend_into_macros(&self, token: SyntaxToken) -> SyntaxToken {\n         let _p = profile::span(\"descend_into_macros\");\n         let parent = token.parent();\n-        let parent = self.find_file(parent);\n-        let sa = self.analyze2(parent.as_ref(), None);\n+        let sa = self.analyze(&parent);\n \n-        let token = successors(Some(parent.with_value(token)), |token| {\n+        let token = successors(Some(InFile::new(sa.file_id, token)), |token| {\n             self.db.check_canceled();\n             let macro_call = token.value.ancestors().find_map(ast::MacroCall::cast)?;\n             let tt = macro_call.token_tree()?;\n@@ -486,15 +483,13 @@ impl<'db> SemanticsImpl<'db> {\n     }\n \n     fn scope(&self, node: &SyntaxNode) -> SemanticsScope<'db> {\n-        let node = self.find_file(node.clone());\n-        let resolver = self.analyze2(node.as_ref(), None).resolver;\n-        SemanticsScope { db: self.db, file_id: node.file_id, resolver }\n+        let sa = self.analyze(node);\n+        SemanticsScope { db: self.db, file_id: sa.file_id, resolver: sa.resolver }\n     }\n \n     fn scope_at_offset(&self, node: &SyntaxNode, offset: TextSize) -> SemanticsScope<'db> {\n-        let node = self.find_file(node.clone());\n-        let resolver = self.analyze2(node.as_ref(), Some(offset)).resolver;\n-        SemanticsScope { db: self.db, file_id: node.file_id, resolver }\n+        let sa = self.analyze_with_offset(node, offset);\n+        SemanticsScope { db: self.db, file_id: sa.file_id, resolver: sa.resolver }\n     }\n \n     fn scope_for_def(&self, def: Trait) -> SemanticsScope<'db> {\n@@ -504,21 +499,24 @@ impl<'db> SemanticsImpl<'db> {\n     }\n \n     fn analyze(&self, node: &SyntaxNode) -> SourceAnalyzer {\n-        let src = self.find_file(node.clone());\n-        self.analyze2(src.as_ref(), None)\n+        self.analyze_impl(node, None)\n     }\n+    fn analyze_with_offset(&self, node: &SyntaxNode, offset: TextSize) -> SourceAnalyzer {\n+        self.analyze_impl(node, Some(offset))\n+    }\n+    fn analyze_impl(&self, node: &SyntaxNode, offset: Option<TextSize>) -> SourceAnalyzer {\n+        let _p = profile::span(\"Semantics::analyze_impl\");\n+        let node = self.find_file(node.clone());\n+        let node = node.as_ref();\n \n-    fn analyze2(&self, src: InFile<&SyntaxNode>, offset: Option<TextSize>) -> SourceAnalyzer {\n-        let _p = profile::span(\"Semantics::analyze2\");\n-\n-        let container = match self.with_ctx(|ctx| ctx.find_container(src)) {\n+        let container = match self.with_ctx(|ctx| ctx.find_container(node)) {\n             Some(it) => it,\n-            None => return SourceAnalyzer::new_for_resolver(Resolver::default(), src),\n+            None => return SourceAnalyzer::new_for_resolver(Resolver::default(), node),\n         };\n \n         let resolver = match container {\n             ChildContainer::DefWithBodyId(def) => {\n-                return SourceAnalyzer::new_for_body(self.db, def, src, offset)\n+                return SourceAnalyzer::new_for_body(self.db, def, node, offset)\n             }\n             ChildContainer::TraitId(it) => it.resolver(self.db.upcast()),\n             ChildContainer::ImplId(it) => it.resolver(self.db.upcast()),\n@@ -528,7 +526,7 @@ impl<'db> SemanticsImpl<'db> {\n             ChildContainer::TypeAliasId(it) => it.resolver(self.db.upcast()),\n             ChildContainer::GenericDefId(it) => it.resolver(self.db.upcast()),\n         };\n-        SourceAnalyzer::new_for_resolver(resolver, src)\n+        SourceAnalyzer::new_for_resolver(resolver, node)\n     }\n \n     fn cache(&self, root_node: SyntaxNode, file_id: HirFileId) {"}, {"sha": "bf0c959feef22778d20055484536528726895af1", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f304ce329f5c40f52572be7dbe29224033516c10/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f304ce329f5c40f52572be7dbe29224033516c10/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=f304ce329f5c40f52572be7dbe29224033516c10", "patch": "@@ -37,7 +37,7 @@ use base_db::CrateId;\n /// original source files. It should not be used inside the HIR itself.\n #[derive(Debug)]\n pub(crate) struct SourceAnalyzer {\n-    file_id: HirFileId,\n+    pub(crate) file_id: HirFileId,\n     pub(crate) resolver: Resolver,\n     body: Option<Arc<Body>>,\n     body_source_map: Option<Arc<BodySourceMap>>,"}]}