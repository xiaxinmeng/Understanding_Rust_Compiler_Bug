{"sha": "fc41ba167cac9f63eda4ee4c4927b7c905306d50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNDFiYTE2N2NhYzlmNjNlZGE0ZWU0YzQ5MjdiN2M5MDUzMDZkNTA=", "commit": {"author": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-08-25T14:55:12Z"}, "committer": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-08-25T14:55:12Z"}, "message": "bigint: un-ignore test_shr", "tree": {"sha": "2f0f8b1dec40565e24034b10c1f1f7019f5f4b51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f0f8b1dec40565e24034b10c1f1f7019f5f4b51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc41ba167cac9f63eda4ee4c4927b7c905306d50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc41ba167cac9f63eda4ee4c4927b7c905306d50", "html_url": "https://github.com/rust-lang/rust/commit/fc41ba167cac9f63eda4ee4c4927b7c905306d50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc41ba167cac9f63eda4ee4c4927b7c905306d50/comments", "author": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17c8f8bd0cc1bd58f6adbf0ca954ec326f8ef8c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/17c8f8bd0cc1bd58f6adbf0ca954ec326f8ef8c6", "html_url": "https://github.com/rust-lang/rust/commit/17c8f8bd0cc1bd58f6adbf0ca954ec326f8ef8c6"}], "stats": {"total": 141, "additions": 68, "deletions": 73}, "files": [{"sha": "6e2a6fcbfeea99ed744bbbc0871c7d205a2c7a10", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 68, "deletions": 73, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/fc41ba167cac9f63eda4ee4c4927b7c905306d50/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc41ba167cac9f63eda4ee4c4927b7c905306d50/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=fc41ba167cac9f63eda4ee4c4927b7c905306d50", "patch": "@@ -1167,83 +1167,78 @@ mod biguint_tests {\n \n     #[test]\n     fn test_shl() {\n-        fn check(v: ~[BigDigit], shift: uint, ans: ~[BigDigit]) {\n-            assert_eq!(BigUint::new(v) << shift, BigUint::new(ans));\n-        }\n-\n-        check(~[], 3, ~[]);\n-        check(~[1, 1, 1], 3, ~[1 << 3, 1 << 3, 1 << 3]);\n-        check(~[1 << (BigDigit::bits - 2)], 2, ~[0, 1]);\n-        check(~[1 << (BigDigit::bits - 2)], 3, ~[0, 2]);\n-        check(~[1 << (BigDigit::bits - 2)], 3 + BigDigit::bits, ~[0, 0, 2]);\n-\n-        test_shl_bits();\n-\n-        #[cfg(target_word_size = \"64\")]\n-        fn test_shl_bits() {\n-            check(~[0x7654_3210, 0xfedc_ba98,\n-                    0x7654_3210, 0xfedc_ba98], 4,\n-                  ~[0x6543_2100, 0xedcb_a987,\n-                    0x6543_210f, 0xedcb_a987, 0xf]);\n-            check(~[0x2222_1111, 0x4444_3333,\n-                    0x6666_5555, 0x8888_7777], 16,\n-                  ~[0x1111_0000, 0x3333_2222,\n-                    0x5555_4444, 0x7777_6666, 0x8888]);\n-        }\n-\n-        #[cfg(target_word_size = \"32\")]\n-        fn test_shl_bits() {\n-            check(~[0x3210, 0x7654, 0xba98, 0xfedc,\n-                    0x3210, 0x7654, 0xba98, 0xfedc], 4,\n-                  ~[0x2100, 0x6543, 0xa987, 0xedcb,\n-                    0x210f, 0x6543, 0xa987, 0xedcb, 0xf]);\n-            check(~[0x1111, 0x2222, 0x3333, 0x4444,\n-                    0x5555, 0x6666, 0x7777, 0x8888], 16,\n-                  ~[0x0000, 0x1111, 0x2222, 0x3333,\n-                    0x4444, 0x5555, 0x6666, 0x7777, 0x8888]);\n-        }\n-\n+        fn check(s: &str, shift: uint, ans: &str) {\n+            let bu = (FromStrRadix::from_str_radix::<BigUint>(s, 16).unwrap() << shift)\n+                .to_str_radix(16);\n+            assert_eq!(bu.as_slice(), ans);\n+        }\n+\n+        check(\"0\", 3, \"0\");\n+        check(\"1\", 3, \"8\");\n+\n+        check(\"1\" + \"0000\" + \"0000\" + \"0000\" + \"0001\" + \"0000\" + \"0000\" + \"0000\" + \"0001\", 3,\n+              \"8\" + \"0000\" + \"0000\" + \"0000\" + \"0008\" + \"0000\" + \"0000\" + \"0000\" + \"0008\");\n+        check(\"1\" + \"0000\" + \"0001\" + \"0000\" + \"0001\", 2,\n+              \"4\" + \"0000\" + \"0004\" + \"0000\" + \"0004\");\n+        check(\"1\" + \"0001\" + \"0001\", 1,\n+              \"2\" + \"0002\" + \"0002\");\n+\n+        check(\"\"  + \"4000\" + \"0000\" + \"0000\" + \"0000\", 3,\n+              \"2\" + \"0000\" + \"0000\" + \"0000\" + \"0000\");\n+        check(\"\"  + \"4000\" + \"0000\", 2,\n+              \"1\" + \"0000\" + \"0000\");\n+        check(\"\"  + \"4000\", 2,\n+              \"1\" + \"0000\");\n+\n+        check(\"\"  + \"4000\" + \"0000\" + \"0000\" + \"0000\", 67,\n+              \"2\" + \"0000\" + \"0000\" + \"0000\" + \"0000\" + \"0000\" + \"0000\" + \"0000\" + \"0000\");\n+        check(\"\"  + \"4000\" + \"0000\", 35,\n+              \"2\" + \"0000\" + \"0000\" + \"0000\" + \"0000\");\n+        check(\"\"  + \"4000\", 19,\n+              \"2\" + \"0000\" + \"0000\");\n+\n+        check(\"\"  + \"fedc\" + \"ba98\" + \"7654\" + \"3210\" + \"fedc\" + \"ba98\" + \"7654\" + \"3210\", 4,\n+              \"f\" + \"edcb\" + \"a987\" + \"6543\" + \"210f\" + \"edcb\" + \"a987\" + \"6543\" + \"2100\");\n+        check(\"88887777666655554444333322221111\", 16,\n+              \"888877776666555544443333222211110000\");\n     }\n \n     #[test]\n-    #[ignore(cfg(target_word_size = \"32\"))]\n     fn test_shr() {\n-        fn check(v: ~[BigDigit], shift: uint, ans: ~[BigDigit]) {\n-            assert_eq!(BigUint::new(v) >> shift, BigUint::new(ans));\n-        }\n-\n-        check(~[], 3, ~[]);\n-        check(~[1, 1, 1], 3,\n-              ~[1 << (BigDigit::bits - 3), 1 << (BigDigit::bits - 3)]);\n-        check(~[1 << 2], 2, ~[1]);\n-        check(~[1, 2], 3, ~[1 << (BigDigit::bits - 2)]);\n-        check(~[1, 1, 2], 3 + BigDigit::bits, ~[1 << (BigDigit::bits - 2)]);\n-        check(~[0, 1], 1, ~[0x80000000]);\n-        test_shr_bits();\n-\n-        #[cfg(target_word_size = \"64\")]\n-        fn test_shr_bits() {\n-            check(~[0x6543_2100, 0xedcb_a987,\n-                    0x6543_210f, 0xedcb_a987, 0xf], 4,\n-                  ~[0x7654_3210, 0xfedc_ba98,\n-                    0x7654_3210, 0xfedc_ba98]);\n-            check(~[0x1111_0000, 0x3333_2222,\n-                    0x5555_4444, 0x7777_6666, 0x8888], 16,\n-                  ~[0x2222_1111, 0x4444_3333,\n-                    0x6666_5555, 0x8888_7777]);\n-        }\n-\n-        #[cfg(target_word_size = \"32\")]\n-        fn test_shr_bits() {\n-            check(~[0x2100, 0x6543, 0xa987, 0xedcb,\n-                    0x210f, 0x6543, 0xa987, 0xedcb, 0xf], 4,\n-                  ~[0x3210, 0x7654, 0xba98, 0xfedc,\n-                    0x3210, 0x7654, 0xba98, 0xfedc]);\n-            check(~[0x0000, 0x1111, 0x2222, 0x3333,\n-                    0x4444, 0x5555, 0x6666, 0x7777, 0x8888], 16,\n-                  ~[0x1111, 0x2222, 0x3333, 0x4444,\n-                    0x5555, 0x6666, 0x7777, 0x8888]);\n-        }\n+        fn check(s: &str, shift: uint, ans: &str) {\n+            let bu = (FromStrRadix::from_str_radix::<BigUint>(s, 16).unwrap() >> shift)\n+                .to_str_radix(16);\n+            assert_eq!(bu.as_slice(), ans);\n+        }\n+\n+        check(\"0\", 3, \"0\");\n+        check(\"f\", 3, \"1\");\n+\n+        check(\"1\" + \"0000\" + \"0000\" + \"0000\" + \"0001\" + \"0000\" + \"0000\" + \"0000\" + \"0001\", 3,\n+              \"\"  + \"2000\" + \"0000\" + \"0000\" + \"0000\" + \"2000\" + \"0000\" + \"0000\" + \"0000\");\n+        check(\"1\" + \"0000\" + \"0001\" + \"0000\" + \"0001\", 2,\n+              \"\"  + \"4000\" + \"0000\" + \"4000\" + \"0000\");\n+        check(\"1\" + \"0001\" + \"0001\", 1,\n+              \"\"  + \"8000\" + \"8000\");\n+\n+        check(\"2\" + \"0000\" + \"0000\" + \"0000\" + \"0001\" + \"0000\" + \"0000\" + \"0000\" + \"0001\", 67,\n+              \"\"  + \"4000\" + \"0000\" + \"0000\" + \"0000\");\n+        check(\"2\" + \"0000\" + \"0001\" + \"0000\" + \"0001\", 35,\n+              \"\"  + \"4000\" + \"0000\");\n+        check(\"2\" + \"0001\" + \"0001\", 19,\n+              \"\"  + \"4000\");\n+\n+        check(\"1\" + \"0000\" + \"0000\" + \"0000\" + \"0000\", 1,\n+              \"\"  + \"8000\" + \"0000\" + \"0000\" + \"0000\");\n+        check(\"1\" + \"0000\" + \"0000\", 1,\n+              \"\"  + \"8000\" + \"0000\");\n+        check(\"1\" + \"0000\", 1,\n+              \"\"  + \"8000\");\n+        check(\"f\" + \"edcb\" + \"a987\" + \"6543\" + \"210f\" + \"edcb\" + \"a987\" + \"6543\" + \"2100\", 4,\n+              \"\"  + \"fedc\" + \"ba98\" + \"7654\" + \"3210\" + \"fedc\" + \"ba98\" + \"7654\" + \"3210\");\n+\n+        check(\"888877776666555544443333222211110000\", 16,\n+              \"88887777666655554444333322221111\");\n     }\n \n     #[test]"}]}