{"sha": "f36c6559eabef7ad74818f8f7d952a474c64feaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNmM2NTU5ZWFiZWY3YWQ3NDgxOGY4ZjdkOTUyYTQ3NGM2NGZlYWE=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-13T08:34:23Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-01T19:05:02Z"}, "message": "Add `unwrap_usize` to `LazyConst`, too", "tree": {"sha": "a9f310c1002f60ddf4ee24d0cc3002decac9ab23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9f310c1002f60ddf4ee24d0cc3002decac9ab23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f36c6559eabef7ad74818f8f7d952a474c64feaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f36c6559eabef7ad74818f8f7d952a474c64feaa", "html_url": "https://github.com/rust-lang/rust/commit/f36c6559eabef7ad74818f8f7d952a474c64feaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f36c6559eabef7ad74818f8f7d952a474c64feaa/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "135132891d69dde7ff4a2a6356f9fb92b004c1f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/135132891d69dde7ff4a2a6356f9fb92b004c1f7", "html_url": "https://github.com/rust-lang/rust/commit/135132891d69dde7ff4a2a6356f9fb92b004c1f7"}], "stats": {"total": 65, "additions": 31, "deletions": 34}, "files": [{"sha": "c5b884525da4b29a027848496487de15cc63c852", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=f36c6559eabef7ad74818f8f7d952a474c64feaa", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'gcx, 'tcx> PlaceTy<'tcx> {\n                 PlaceTy::Ty {\n                     ty: match ty.sty {\n                         ty::Array(inner, size) => {\n-                            let size = size.unwrap_evaluated().unwrap_usize(tcx);\n+                            let size = size.unwrap_usize(tcx);\n                             let len = size - (from as u64) - (to as u64);\n                             tcx.mk_array(inner, len)\n                         }"}, {"sha": "171c53b7b20ba7e56082b85c2257a200327e325b", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=f36c6559eabef7ad74818f8f7d952a474c64feaa", "patch": "@@ -543,7 +543,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 }\n \n                 let element = self.layout_of(element)?;\n-                let count = count.unwrap_evaluated().unwrap_usize(tcx);\n+                let count = count.unwrap_usize(tcx);\n                 let size = element.size.checked_mul(count, dl)\n                     .ok_or(LayoutError::SizeOverflow(ty))?;\n "}, {"sha": "6fd3fbd7376f2ea94c615be89f1ec956f690f1c4", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=f36c6559eabef7ad74818f8f7d952a474c64feaa", "patch": "@@ -2024,23 +2024,21 @@ pub enum LazyConst<'tcx> {\n static_assert!(MEM_SIZE_OF_LAZY_CONST: ::std::mem::size_of::<LazyConst<'_>>() <= 24);\n \n impl<'tcx> LazyConst<'tcx> {\n-    pub fn unwrap_evaluated(self) -> &'tcx Const<'tcx> {\n-        match self {\n-            LazyConst::Evaluated(c) => c,\n-            LazyConst::Unevaluated(..) => bug!(\"unexpected unevaluated constant\"),\n-        }\n-    }\n-\n     pub fn map_evaluated<R>(self, f: impl FnOnce(&'tcx Const<'tcx>) -> Option<R>) -> Option<R> {\n         match self {\n             LazyConst::Evaluated(c) => f(c),\n             LazyConst::Unevaluated(..) => None,\n         }\n     }\n \n-    pub fn assert_usize(self, tcx: TyCtxt<'_, '_, 'tcx>) -> Option<u64> {\n+    pub fn assert_usize(self, tcx: TyCtxt<'_, '_, '_>) -> Option<u64> {\n         self.map_evaluated(|c| c.assert_usize(tcx))\n     }\n+\n+    #[inline]\n+    pub fn unwrap_usize(&self, tcx: TyCtxt<'_, '_, '_>) -> u64 {\n+        self.assert_usize(tcx).expect(\"expected `LazyConst` to contain a usize\")\n+    }\n }\n \n /// Typed constant value."}, {"sha": "0fd04e9d20393ccebf7fd688de88220ac00f3357", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=f36c6559eabef7ad74818f8f7d952a474c64feaa", "patch": "@@ -302,7 +302,7 @@ fn fixed_vec_metadata(\n \n     let upper_bound = match array_or_slice_type.sty {\n         ty::Array(_, len) => {\n-            len.unwrap_evaluated().unwrap_usize(cx.tcx) as c_longlong\n+            len.unwrap_usize(cx.tcx) as c_longlong\n         }\n         _ => -1\n     };"}, {"sha": "c8cbd735e850d1070121558219724af6f792354d", "filename": "src/librustc_codegen_llvm/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs?ref=f36c6559eabef7ad74818f8f7d952a474c64feaa", "patch": "@@ -88,7 +88,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         ty::Array(inner_type, len) => {\n             output.push('[');\n             push_debuginfo_type_name(cx, inner_type, true, output);\n-            output.push_str(&format!(\"; {}\", len.unwrap_evaluated().unwrap_usize(cx.tcx)));\n+            output.push_str(&format!(\"; {}\", len.unwrap_usize(cx.tcx)));\n             output.push(']');\n         },\n         ty::Slice(inner_type) => {"}, {"sha": "b88ec075653baef71e2b622789587ae861127246", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=f36c6559eabef7ad74818f8f7d952a474c64feaa", "patch": "@@ -171,7 +171,7 @@ pub fn unsized_info<'tcx, Cx: CodegenMethods<'tcx>>(\n     let (source, target) = cx.tcx().struct_lockstep_tails(source, target);\n     match (&source.sty, &target.sty) {\n         (&ty::Array(_, len), &ty::Slice(_)) => {\n-            cx.const_usize(len.unwrap_evaluated().unwrap_usize(cx.tcx()))\n+            cx.const_usize(len.unwrap_usize(cx.tcx()))\n         }\n         (&ty::Dynamic(..), &ty::Dynamic(..)) => {\n             // For now, upcasts are limited to changes in marker"}, {"sha": "35bd3a32e81828e2563d643cf33601ca4b381c87", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=f36c6559eabef7ad74818f8f7d952a474c64feaa", "patch": "@@ -52,7 +52,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             .and_then(|c| {\n                 let field_ty = c.ty.builtin_index().unwrap();\n                 let fields = match c.ty.sty {\n-                    ty::Array(_, n) => n.unwrap_evaluated().unwrap_usize(bx.tcx()),\n+                    ty::Array(_, n) => n.unwrap_usize(bx.tcx()),\n                     ref other => bug!(\"invalid simd shuffle type: {}\", other),\n                 };\n                 let values: Result<Vec<_>, ErrorHandled> = (0..fields).map(|field| {"}, {"sha": "9ca5414fa717e3214546604e487ae8ca6e6ff6cc", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=f36c6559eabef7ad74818f8f7d952a474c64feaa", "patch": "@@ -537,7 +537,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         if let mir::Place::Local(index) = *place {\n             if let LocalRef::Operand(Some(op)) = self.locals[index] {\n                 if let ty::Array(_, n) = op.layout.ty.sty {\n-                    let n = n.unwrap_evaluated().unwrap_usize(bx.cx().tcx());\n+                    let n = n.unwrap_usize(bx.cx().tcx());\n                     return bx.cx().const_usize(n);\n                 }\n             }"}, {"sha": "c11eae7edee08b906388ff673ec82f35d498dc98", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=f36c6559eabef7ad74818f8f7d952a474c64feaa", "patch": "@@ -568,7 +568,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n             ProjectionElem::Subslice { from, to } => PlaceTy::Ty {\n                 ty: match base_ty.sty {\n                     ty::Array(inner, size) => {\n-                        let size = size.unwrap_evaluated().unwrap_usize(tcx);\n+                        let size = size.unwrap_usize(tcx);\n                         let min_size = (from as u64) + (to as u64);\n                         if let Some(rest_size) = size.checked_sub(min_size) {\n                             tcx.mk_array(inner, rest_size)"}, {"sha": "ac7182abb36daa58e617e421436fe3cb4064beb8", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=f36c6559eabef7ad74818f8f7d952a474c64feaa", "patch": "@@ -388,7 +388,7 @@ fn place_element_conflict<'a, 'gcx: 'tcx, 'tcx>(\n         (Place::Promoted(p1), Place::Promoted(p2)) => {\n             if p1.0 == p2.0 {\n                 if let ty::Array(_, size) = p1.1.sty {\n-                    if size.unwrap_evaluated().unwrap_usize(tcx) == 0 {\n+                    if size.unwrap_usize(tcx) == 0 {\n                         // Ignore conflicts with promoted [T; 0].\n                         debug!(\"place_element_conflict: IGNORE-LEN-0-PROMOTED\");\n                         return Overlap::Disjoint;"}, {"sha": "0f5510a2921d7d84228faa1261fa0b6ab1bcf7ef", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=f36c6559eabef7ad74818f8f7d952a474c64feaa", "patch": "@@ -635,7 +635,7 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n             }).collect()\n         }\n         ty::Array(ref sub_ty, len) if len.assert_usize(cx.tcx).is_some() => {\n-            let len = len.unwrap_evaluated().unwrap_usize(cx.tcx);\n+            let len = len.unwrap_usize(cx.tcx);\n             if len != 0 && cx.is_uninhabited(sub_ty) {\n                 vec![]\n             } else {\n@@ -1310,7 +1310,7 @@ fn pat_constructors<'tcx>(cx: &mut MatchCheckCtxt<'_, 'tcx>,\n             )]),\n         PatternKind::Array { .. } => match pcx.ty.sty {\n             ty::Array(_, length) => Some(vec![\n-                Slice(length.unwrap_evaluated().unwrap_usize(cx.tcx))\n+                Slice(length.unwrap_usize(cx.tcx))\n             ]),\n             _ => span_bug!(pat.span, \"bad ty {:?} for array pattern\", pcx.ty)\n         },\n@@ -1753,7 +1753,7 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n                     // slices\n                     let (opt_ptr, n, ty) = match value.ty.builtin_deref(false).unwrap().ty.sty {\n                         ty::TyKind::Array(t, n) =>\n-                            (value.to_ptr(), n.unwrap_evaluated().unwrap_usize(cx.tcx), t),\n+                            (value.to_ptr(), n.unwrap_usize(cx.tcx), t),\n                         ty::TyKind::Slice(t) => {\n                             match value.val {\n                                 ConstValue::ScalarPair(ptr, n) => ("}, {"sha": "10d2d7bc1b18b7cb63bc724e5447c51d76a937b5", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=f36c6559eabef7ad74818f8f7d952a474c64feaa", "patch": "@@ -650,7 +650,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n \n             ty::Array(_, len) => {\n                 // fixed-length array\n-                let len = len.unwrap_evaluated().unwrap_usize(self.tcx);\n+                let len = len.unwrap_usize(self.tcx);\n                 assert!(len >= prefix.len() as u64 + suffix.len() as u64);\n                 PatternKind::Array { prefix: prefix, slice: slice, suffix: suffix }\n             }\n@@ -934,7 +934,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             }\n             ty::Array(_, n) => {\n                 PatternKind::Array {\n-                    prefix: (0..n.unwrap_evaluated().unwrap_usize(self.tcx))\n+                    prefix: (0..n.unwrap_usize(self.tcx))\n                         .map(|i| adt_subpattern(i as usize, None))\n                         .collect(),\n                     slice: None,"}, {"sha": "190a381cf52a5e0d5d20fb7b4adf7b87d0fa5859", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=f36c6559eabef7ad74818f8f7d952a474c64feaa", "patch": "@@ -307,7 +307,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                 // u64 cast is from usize to u64, which is always good\n                 let val = Immediate::new_slice(\n                     ptr,\n-                    length.unwrap_evaluated().unwrap_usize(self.tcx.tcx),\n+                    length.unwrap_usize(self.tcx.tcx),\n                     self,\n                 );\n                 self.write_immediate(val, dest)"}, {"sha": "e7f4451fdd7ee8a45ce303360999937bcfee76ac", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=f36c6559eabef7ad74818f8f7d952a474c64feaa", "patch": "@@ -295,7 +295,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n             ty::Array(inner_type, len) => {\n                 output.push('[');\n                 self.push_type_name(inner_type, output);\n-                write!(output, \"; {}\", len.unwrap_evaluated().unwrap_usize(self.tcx)).unwrap();\n+                write!(output, \"; {}\", len.unwrap_usize(self.tcx)).unwrap();\n                 output.push(']');\n             },\n             ty::Slice(inner_type) => {"}, {"sha": "73e26d6349340706445e557afbde5834d71d2d90", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=f36c6559eabef7ad74818f8f7d952a474c64feaa", "patch": "@@ -318,7 +318,7 @@ fn build_clone_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     match self_ty.sty {\n         _ if is_copy => builder.copy_shim(),\n         ty::Array(ty, len) => {\n-            let len = len.unwrap_evaluated().unwrap_usize(tcx);\n+            let len = len.unwrap_usize(tcx);\n             builder.array_shim(dest, src, ty, len)\n         }\n         ty::Closure(def_id, substs) => {"}, {"sha": "f35685b7b0c9dc0a501032990ee9c2f8bf095b6d", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=f36c6559eabef7ad74818f8f7d952a474c64feaa", "patch": "@@ -712,7 +712,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     } else if let ty::Array(_, len) = ty.sty {\n                         // FIXME(eddyb) the `self.mode == Mode::Fn` condition\n                         // seems unnecessary, given that this is merely a ZST.\n-                        let len = len.unwrap_evaluated().unwrap_usize(self.tcx);\n+                        let len = len.unwrap_usize(self.tcx);\n                         if len == 0 && self.mode == Mode::Fn {\n                             forbidden_mut = false;\n                         }"}, {"sha": "60a569e297d292865d08624145d0f88cd00ed31f", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=f36c6559eabef7ad74818f8f7d952a474c64feaa", "patch": "@@ -51,9 +51,8 @@ impl MirPass for SimplifyBranches {\n                 },\n                 TerminatorKind::Assert {\n                     target, cond: Operand::Constant(ref c), expected, ..\n-                } if (c.literal.unwrap_evaluated().assert_bool(tcx) == Some(true)) == expected => {\n-                    TerminatorKind::Goto { target }\n-                },\n+                } if (c.literal.map_evaluated(|e| e.assert_bool(tcx)) == Some(true)) == expected =>\n+                    TerminatorKind::Goto { target },\n                 TerminatorKind::FalseEdges { real_target, .. } => {\n                     TerminatorKind::Goto { target: real_target }\n                 },"}, {"sha": "5ab9669baaca0d39abb91d7c1e45451fac82221a", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=f36c6559eabef7ad74818f8f7d952a474c64feaa", "patch": "@@ -71,7 +71,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UniformArrayMoveOutVisitor<'a, 'tcx> {\n                 } else {\n                     let place_ty = proj.base.ty(self.mir, self.tcx).to_ty(self.tcx);\n                     if let ty::Array(item_ty, const_size) = place_ty.sty {\n-                        if let Some(size) = const_size.unwrap_evaluated().assert_usize(self.tcx) {\n+                        if let Some(size) = const_size.assert_usize(self.tcx) {\n                             assert!(size <= u32::max_value() as u64,\n                                     \"uniform array move out doesn't supported\n                                      for array bigger then u32\");\n@@ -193,7 +193,7 @@ impl MirPass for RestoreSubsliceArrayMoveOut {\n                         let opt_size = opt_src_place.and_then(|src_place| {\n                             let src_ty = src_place.ty(mir, tcx).to_ty(tcx);\n                             if let ty::Array(_, ref size_o) = src_ty.sty {\n-                                size_o.unwrap_evaluated().assert_usize(tcx)\n+                                size_o.assert_usize(tcx)\n                             } else {\n                                 None\n                             }"}, {"sha": "8b55a4424ae293f211f2264efeacf4db3b4a143e", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=f36c6559eabef7ad74818f8f7d952a474c64feaa", "patch": "@@ -809,7 +809,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n                 self.complete_drop(Some(DropFlagMode::Deep), succ, unwind)\n             }\n             ty::Array(ety, size) => {\n-                let size = size.unwrap_evaluated().assert_usize(self.tcx());\n+                let size = size.assert_usize(self.tcx());\n                 self.open_drop_for_array(ety, size)\n             },\n             ty::Slice(ety) => self.open_drop_for_array(ety, None),"}, {"sha": "b66c383edb51e85d2deee7586469c723c1612b45", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=f36c6559eabef7ad74818f8f7d952a474c64feaa", "patch": "@@ -377,7 +377,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let expected_ty = self.structurally_resolved_type(pat.span, expected);\n                 let (inner_ty, slice_ty) = match expected_ty.sty {\n                     ty::Array(inner_ty, size) => {\n-                        let size = size.unwrap_evaluated().unwrap_usize(tcx);\n+                        let size = size.unwrap_usize(tcx);\n                         let min_len = before.len() as u64 + after.len() as u64;\n                         if slice.is_none() {\n                             if min_len != size {"}, {"sha": "4865b70687d84784a12b5743f8c8b4af762c8ea7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36c6559eabef7ad74818f8f7d952a474c64feaa/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f36c6559eabef7ad74818f8f7d952a474c64feaa", "patch": "@@ -3453,7 +3453,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                     ty::Array(_, len) => {\n                         if let (Some(len), Ok(user_index)) = (\n-                            len.unwrap_evaluated().assert_usize(self.tcx),\n+                            len.assert_usize(self.tcx),\n                             field.as_str().parse::<u64>()\n                         ) {\n                             let base = self.tcx.sess.source_map()"}]}