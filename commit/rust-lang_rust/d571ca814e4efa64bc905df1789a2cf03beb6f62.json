{"sha": "d571ca814e4efa64bc905df1789a2cf03beb6f62", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NzFjYTgxNGU0ZWZhNjRiYzkwNWRmMTc4OWEyY2YwM2JlYjZmNjI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-26T10:36:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-26T10:36:31Z"}, "message": "Merge #9593\n\n9593: fix: Adding remove_unused_param for method and fixing same for assoc func r=matklad a=feniljain\n\nSolves #9571 \n\nCo-authored-by: vi_mi <fenil.jain2018@vitstudent.ac.in>", "tree": {"sha": "94efef772c1bc006b6a4c5c17b8833edfd094b64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94efef772c1bc006b6a4c5c17b8833edfd094b64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d571ca814e4efa64bc905df1789a2cf03beb6f62", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg/pAvCRBK7hj4Ov3rIwAAPewIADiS5EZk6mBiAbnmdEqDwiAh\nl0PYJVaf7+YE8IE4XwXdOJTyHnHx9ZPjAyfSB2V/PjSC4qRdfISGTtM6HoCDJ5S/\nFVC2X6O74EPZwmlhGM5H/7fOlFm96XVq5jDNPmWxKC4JB9FCZHou+x1WWNI0sG7D\nr7NOd94KTqUGEWI+C+dhQt42nVvBN8Uroz5XIVCpyqnedk5ShFJtcON3I++CiZjc\nDgSXABSYIyNIXRPbsODeIztaDpYq31L/XQY+bvRJrNY4yTjHG6L3iNTh71bW2l8g\ndL9uezPeVIN5V2V/lwSPHrllCUZx8h0ohPZSPVUJg8wlqsv84xkemhdJ+RChqbM=\n=EM+n\n-----END PGP SIGNATURE-----\n", "payload": "tree 94efef772c1bc006b6a4c5c17b8833edfd094b64\nparent bf8a55a2df807f1f80cf1c521c28bb2371c24a20\nparent 0898d3b63767704ec18d5160408c9cfeefa79c2a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1627295791 +0000\ncommitter GitHub <noreply@github.com> 1627295791 +0000\n\nMerge #9593\n\n9593: fix: Adding remove_unused_param for method and fixing same for assoc func r=matklad a=feniljain\n\nSolves #9571 \n\nCo-authored-by: vi_mi <fenil.jain2018@vitstudent.ac.in>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d571ca814e4efa64bc905df1789a2cf03beb6f62", "html_url": "https://github.com/rust-lang/rust/commit/d571ca814e4efa64bc905df1789a2cf03beb6f62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d571ca814e4efa64bc905df1789a2cf03beb6f62/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf8a55a2df807f1f80cf1c521c28bb2371c24a20", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf8a55a2df807f1f80cf1c521c28bb2371c24a20", "html_url": "https://github.com/rust-lang/rust/commit/bf8a55a2df807f1f80cf1c521c28bb2371c24a20"}, {"sha": "0898d3b63767704ec18d5160408c9cfeefa79c2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0898d3b63767704ec18d5160408c9cfeefa79c2a", "html_url": "https://github.com/rust-lang/rust/commit/0898d3b63767704ec18d5160408c9cfeefa79c2a"}], "stats": {"total": 68, "additions": 50, "deletions": 18}, "files": [{"sha": "bb71084fdd612ede64050c2cc03bd93c30318219", "filename": "crates/ide_assists/src/handlers/remove_unused_param.rs", "status": "modified", "additions": 50, "deletions": 18, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d571ca814e4efa64bc905df1789a2cf03beb6f62/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d571ca814e4efa64bc905df1789a2cf03beb6f62/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs?ref=d571ca814e4efa64bc905df1789a2cf03beb6f62", "patch": "@@ -37,6 +37,8 @@ pub(crate) fn remove_unused_param(acc: &mut Assists, ctx: &AssistContext) -> Opt\n         _ => return None,\n     };\n     let func = param.syntax().ancestors().find_map(ast::Fn::cast)?;\n+    let is_self_present =\n+        param.syntax().parent()?.children().find_map(ast::SelfParam::cast).is_some();\n \n     // check if fn is in impl Trait for ..\n     if func\n@@ -50,7 +52,16 @@ pub(crate) fn remove_unused_param(acc: &mut Assists, ctx: &AssistContext) -> Opt\n         return None;\n     }\n \n-    let param_position = func.param_list()?.params().position(|it| it == param)?;\n+    let mut param_position = func.param_list()?.params().position(|it| it == param)?;\n+    // param_list() does not take self param into consideration, hence this additional check is\n+    // added. There are two cases to handle in this scenario, where functions are\n+    // associative(functions not associative and not containting contain self, are not allowed), in\n+    // this case param position is rightly set. If a method call is present which has self param,\n+    // that needs to be handled and is added below in process_usage function to reduce this increment and\n+    // not consider self param.\n+    if is_self_present {\n+        param_position += 1;\n+    }\n     let fn_def = {\n         let func = ctx.sema.to_def(&func)?;\n         Definition::ModuleDef(func.into())\n@@ -71,7 +82,7 @@ pub(crate) fn remove_unused_param(acc: &mut Assists, ctx: &AssistContext) -> Opt\n         |builder| {\n             builder.delete(range_to_remove(param.syntax()));\n             for (file_id, references) in fn_def.usages(&ctx.sema).all() {\n-                process_usages(ctx, builder, file_id, references, param_position);\n+                process_usages(ctx, builder, file_id, references, param_position, is_self_present);\n             }\n         },\n     )\n@@ -83,11 +94,13 @@ fn process_usages(\n     file_id: FileId,\n     references: Vec<FileReference>,\n     arg_to_remove: usize,\n+    is_self_present: bool,\n ) {\n     let source_file = ctx.sema.parse(file_id);\n     builder.edit_file(file_id);\n     for usage in references {\n-        if let Some(text_range) = process_usage(&source_file, usage, arg_to_remove) {\n+        if let Some(text_range) = process_usage(&source_file, usage, arg_to_remove, is_self_present)\n+        {\n             builder.delete(text_range);\n         }\n     }\n@@ -96,15 +109,37 @@ fn process_usages(\n fn process_usage(\n     source_file: &SourceFile,\n     FileReference { range, .. }: FileReference,\n-    arg_to_remove: usize,\n+    mut arg_to_remove: usize,\n+    is_self_present: bool,\n ) -> Option<TextRange> {\n-    let call_expr: ast::CallExpr = find_node_at_range(source_file.syntax(), range)?;\n-    let call_expr_range = call_expr.expr()?.syntax().text_range();\n-    if !call_expr_range.contains_range(range) {\n-        return None;\n+    let call_expr_opt: Option<ast::CallExpr> = find_node_at_range(source_file.syntax(), range);\n+    if let Some(call_expr) = call_expr_opt {\n+        let call_expr_range = call_expr.expr()?.syntax().text_range();\n+        if !call_expr_range.contains_range(range) {\n+            return None;\n+        }\n+\n+        let arg = call_expr.arg_list()?.args().nth(arg_to_remove)?;\n+        return Some(range_to_remove(arg.syntax()));\n     }\n-    let arg = call_expr.arg_list()?.args().nth(arg_to_remove)?;\n-    Some(range_to_remove(arg.syntax()))\n+\n+    let method_call_expr_opt: Option<ast::MethodCallExpr> =\n+        find_node_at_range(source_file.syntax(), range);\n+    if let Some(method_call_expr) = method_call_expr_opt {\n+        let method_call_expr_range = method_call_expr.name_ref()?.syntax().text_range();\n+        if !method_call_expr_range.contains_range(range) {\n+            return None;\n+        }\n+\n+        if is_self_present {\n+            arg_to_remove -= 1;\n+        }\n+\n+        let arg = method_call_expr.arg_list()?.args().nth(arg_to_remove)?;\n+        return Some(range_to_remove(arg.syntax()));\n+    }\n+\n+    return None;\n }\n \n fn range_to_remove(node: &SyntaxNode) -> TextRange {\n@@ -315,10 +350,7 @@ fn bar() {\n     }\n \n     #[test]\n-    fn remove_method_param() {\n-        // FIXME: This is completely wrong:\n-        //  * method call expressions are not handled\n-        //  * assoc function syntax removes the wrong argument.\n+    fn test_remove_method_param() {\n         check_assist(\n             remove_unused_param,\n             r#\"\n@@ -327,18 +359,18 @@ impl S { fn f(&self, $0_unused: i32) {} }\n fn main() {\n     S.f(92);\n     S.f();\n-    S.f(92, 92);\n+    S.f(93, 92);\n     S::f(&S, 92);\n }\n \"#,\n             r#\"\n struct S;\n impl S { fn f(&self) {} }\n fn main() {\n-    S.f(92);\n     S.f();\n-    S.f(92, 92);\n-    S::f(92);\n+    S.f();\n+    S.f(92);\n+    S::f(&S);\n }\n \"#,\n         )"}]}