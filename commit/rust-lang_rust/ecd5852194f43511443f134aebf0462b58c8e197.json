{"sha": "ecd5852194f43511443f134aebf0462b58c8e197", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZDU4NTIxOTRmNDM1MTE0NDNmMTM0YWViZjA0NjJiNThjOGUxOTc=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-08T20:31:08Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-10T08:08:25Z"}, "message": "Errors in promoteds may only cause lints not hard errors", "tree": {"sha": "b260b340700e7777d6388ad2c1bf8ffe84e40f7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b260b340700e7777d6388ad2c1bf8ffe84e40f7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecd5852194f43511443f134aebf0462b58c8e197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd5852194f43511443f134aebf0462b58c8e197", "html_url": "https://github.com/rust-lang/rust/commit/ecd5852194f43511443f134aebf0462b58c8e197", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecd5852194f43511443f134aebf0462b58c8e197/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e1bbff2c6816236bc3fe0a396c35c405b58fe23", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e1bbff2c6816236bc3fe0a396c35c405b58fe23", "html_url": "https://github.com/rust-lang/rust/commit/6e1bbff2c6816236bc3fe0a396c35c405b58fe23"}], "stats": {"total": 333, "additions": 157, "deletions": 176}, "files": [{"sha": "3ce916d78127922251c64a89d0476440e81c8441", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ecd5852194f43511443f134aebf0462b58c8e197/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd5852194f43511443f134aebf0462b58c8e197/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=ecd5852194f43511443f134aebf0462b58c8e197", "patch": "@@ -20,10 +20,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             // use `get_static` to get at their id.\n             // FIXME(oli-obk): can we unify this somehow, maybe by making const eval of statics\n             // always produce `&STATIC`. This may also simplify how const eval works with statics.\n-            ty::ConstKind::Unevaluated(def_id, substs, promoted)\n-                if self.cx.tcx().is_static(def_id) =>\n-            {\n-                assert!(promoted.is_none());\n+            ty::ConstKind::Unevaluated(def_id, substs, None) if self.cx.tcx().is_static(def_id) => {\n                 assert!(substs.is_empty(), \"we don't support generic statics yet\");\n                 let static_ = bx.get_static(def_id);\n                 // we treat operands referring to statics as if they were `&STATIC` instead\n@@ -49,10 +46,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     .tcx()\n                     .const_eval_resolve(ty::ParamEnv::reveal_all(), def_id, substs, promoted, None)\n                     .map_err(|err| {\n-                        self.cx\n-                            .tcx()\n-                            .sess\n-                            .span_err(constant.span, \"erroneous constant encountered\");\n+                        if promoted.is_none() {\n+                            self.cx\n+                                .tcx()\n+                                .sess\n+                                .span_err(constant.span, \"erroneous constant encountered\");\n+                        }\n                         err\n                     })\n             }"}, {"sha": "1d5a643484a73d53b4efa5b72a31eb65b4f35e6e", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ecd5852194f43511443f134aebf0462b58c8e197/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd5852194f43511443f134aebf0462b58c8e197/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=ecd5852194f43511443f134aebf0462b58c8e197", "patch": "@@ -18,7 +18,7 @@ use rustc::ty::layout::{\n     HasDataLayout, HasTyCtxt, LayoutError, LayoutOf, Size, TargetDataLayout, TyLayout,\n };\n use rustc::ty::subst::{InternalSubsts, Subst};\n-use rustc::ty::{self, Instance, ParamEnv, Ty, TyCtxt, TypeFoldable};\n+use rustc::ty::{self, ConstKind, Instance, ParamEnv, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n@@ -441,8 +441,15 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             Ok(op) => Some(op),\n             Err(error) => {\n                 let err = error_to_const_error(&self.ecx, error);\n-                match self.lint_root(source_info) {\n-                    Some(lint_root) if c.literal.needs_subst() => {\n+                if let Some(lint_root) = self.lint_root(source_info) {\n+                    let lint_only = match c.literal.val {\n+                        // Promoteds must lint and not error as the user didn't ask for them\n+                        ConstKind::Unevaluated(_, _, Some(_)) => true,\n+                        // Out of backwards compatibility we cannot report hard errors in unused\n+                        // generic functions using associated constants of the generic parameters.\n+                        _ => c.literal.needs_subst(),\n+                    };\n+                    if lint_only {\n                         // Out of backwards compatibility we cannot report hard errors in unused\n                         // generic functions using associated constants of the generic parameters.\n                         err.report_as_lint(\n@@ -451,10 +458,11 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                             lint_root,\n                             Some(c.span),\n                         );\n-                    }\n-                    _ => {\n+                    } else {\n                         err.report_as_error(self.ecx.tcx, \"erroneous constant used\");\n                     }\n+                } else {\n+                    err.report_as_error(self.ecx.tcx, \"erroneous constant used\");\n                 }\n                 None\n             }"}, {"sha": "3fe51a19c20bb6fc7ae9ab81410d23041cf10eb9", "filename": "src/test/run-fail/promoted_div_by_zero.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Frun-fail%2Fpromoted_div_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Frun-fail%2Fpromoted_div_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpromoted_div_by_zero.rs?ref=ecd5852194f43511443f134aebf0462b58c8e197", "patch": "@@ -1,6 +1,6 @@\n #![allow(const_err)]\n \n-// error-pattern: referenced constant has errors\n+// error-pattern: attempt to divide by zero\n \n fn main() {\n     let x = &(1 / (1 - 1));", "previous_filename": "src/test/compile-fail/promoted_div_by_zero.rs"}, {"sha": "64aeb46894d169b63303972a07371c471d5498aa", "filename": "src/test/ui/consts/array-literal-index-oob.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs?ref=ecd5852194f43511443f134aebf0462b58c8e197", "patch": "@@ -1,8 +1,10 @@\n-// build-fail\n+// build-pass\n+\n+#![warn(const_err)]\n \n fn main() {\n-    &{[1, 2, 3][4]};\n-    //~^ ERROR index out of bounds\n-    //~| ERROR reaching this expression at runtime will panic or abort\n-    //~| ERROR erroneous constant used [E0080]\n+    &{ [1, 2, 3][4] };\n+    //~^ WARN index out of bounds\n+    //~| WARN reaching this expression at runtime will panic or abort\n+    //~| WARN erroneous constant used [const_err]\n }"}, {"sha": "50ad8e83e905cc0ad842642cc1986511d0ebb74f", "filename": "src/test/ui/consts/array-literal-index-oob.stderr", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr?ref=ecd5852194f43511443f134aebf0462b58c8e197", "patch": "@@ -1,25 +1,26 @@\n-error: index out of bounds: the len is 3 but the index is 4\n-  --> $DIR/array-literal-index-oob.rs:4:7\n+warning: index out of bounds: the len is 3 but the index is 4\n+  --> $DIR/array-literal-index-oob.rs:6:8\n    |\n-LL |     &{[1, 2, 3][4]};\n-   |       ^^^^^^^^^^^^\n+LL |     &{ [1, 2, 3][4] };\n+   |        ^^^^^^^^^^^^\n    |\n-   = note: `#[deny(const_err)]` on by default\n-\n-error: reaching this expression at runtime will panic or abort\n-  --> $DIR/array-literal-index-oob.rs:4:7\n+note: lint level defined here\n+  --> $DIR/array-literal-index-oob.rs:3:9\n    |\n-LL |     &{[1, 2, 3][4]};\n-   |     --^^^^^^^^^^^^-\n-   |       |\n-   |       indexing out of bounds: the len is 3 but the index is 4\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n \n-error[E0080]: erroneous constant used\n-  --> $DIR/array-literal-index-oob.rs:4:5\n+warning: reaching this expression at runtime will panic or abort\n+  --> $DIR/array-literal-index-oob.rs:6:8\n    |\n-LL |     &{[1, 2, 3][4]};\n-   |     ^^^^^^^^^^^^^^^ referenced constant has errors\n+LL |     &{ [1, 2, 3][4] };\n+   |     ---^^^^^^^^^^^^--\n+   |        |\n+   |        indexing out of bounds: the len is 3 but the index is 4\n \n-error: aborting due to 3 previous errors\n+warning: erroneous constant used\n+  --> $DIR/array-literal-index-oob.rs:6:5\n+   |\n+LL |     &{ [1, 2, 3][4] };\n+   |     ^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "2058d2e218473b925ca224333fcc1effa6beee25", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs?ref=ecd5852194f43511443f134aebf0462b58c8e197", "patch": "@@ -10,5 +10,5 @@ const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n fn main() {\n     println!(\"{}\", FOO);\n     //~^ ERROR\n-    //~| ERROR erroneous constant used [E0080]\n+    //~| WARN erroneous constant used [const_err]\n }"}, {"sha": "b5f5f84cf3894ddb57e0fc5b41e041883b1b87ac", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr?ref=ecd5852194f43511443f134aebf0462b58c8e197", "patch": "@@ -18,12 +18,12 @@ error[E0080]: evaluation of constant expression failed\n LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors\n \n-error[E0080]: erroneous constant used\n+warning: erroneous constant used\n   --> $DIR/conditional_array_execution.rs:11:20\n    |\n LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "81f53826d810348c27d247f0b3c4ae2411cca566", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs?ref=ecd5852194f43511443f134aebf0462b58c8e197", "patch": "@@ -4,7 +4,9 @@\n #![feature(const_fn)]\n #![allow(const_err)]\n \n-fn double(x: usize) -> usize { x * 2 }\n+fn double(x: usize) -> usize {\n+    x * 2\n+}\n const X: fn(usize) -> usize = double;\n \n const fn bar(x: fn(usize) -> usize, y: usize) -> usize {\n@@ -17,8 +19,6 @@ const Z: usize = bar(double, 2); // FIXME: should fail to typeck someday\n fn main() {\n     assert_eq!(Y, 4);\n     //~^ ERROR evaluation of constant expression failed\n-    //~| ERROR erroneous constant used [E0080]\n     assert_eq!(Z, 4);\n     //~^ ERROR evaluation of constant expression failed\n-    //~| ERROR erroneous constant used [E0080]\n }"}, {"sha": "f99505c30901d77c814eea77b541f9c962545312", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=ecd5852194f43511443f134aebf0462b58c8e197", "patch": "@@ -1,11 +1,11 @@\n warning: skipping const checks\n-  --> $DIR/const_fn_ptr_fail2.rs:11:5\n+  --> $DIR/const_fn_ptr_fail2.rs:13:5\n    |\n LL |     x(y)\n    |     ^^^^\n \n error[E0080]: evaluation of constant expression failed\n-  --> $DIR/const_fn_ptr_fail2.rs:18:5\n+  --> $DIR/const_fn_ptr_fail2.rs:20:5\n    |\n LL |     assert_eq!(Y, 4);\n    |     ^^^^^^^^^^^-^^^^^\n@@ -14,16 +14,8 @@ LL |     assert_eq!(Y, 4);\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error[E0080]: erroneous constant used\n-  --> $DIR/const_fn_ptr_fail2.rs:18:5\n-   |\n-LL |     assert_eq!(Y, 4);\n-   |     ^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n error[E0080]: evaluation of constant expression failed\n-  --> $DIR/const_fn_ptr_fail2.rs:21:5\n+  --> $DIR/const_fn_ptr_fail2.rs:22:5\n    |\n LL |     assert_eq!(Z, 4);\n    |     ^^^^^^^^^^^-^^^^^\n@@ -32,14 +24,6 @@ LL |     assert_eq!(Z, 4);\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error[E0080]: erroneous constant used\n-  --> $DIR/const_fn_ptr_fail2.rs:21:5\n-   |\n-LL |     assert_eq!(Z, 4);\n-   |     ^^^^^^^^^^^^^^^^^ referenced constant has errors\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "9109307632b595f60de4d1dd7995786809e4516f", "filename": "src/test/ui/consts/const-eval/issue-43197.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs?ref=ecd5852194f43511443f134aebf0462b58c8e197", "patch": "@@ -7,13 +7,13 @@ const fn foo(x: u32) -> u32 {\n }\n \n fn main() {\n-    const X: u32 = 0-1;\n+    const X: u32 = 0 - 1;\n     //~^ WARN any use of this value will cause\n-    const Y: u32 = foo(0-1);\n+    const Y: u32 = foo(0 - 1);\n     //~^ WARN any use of this value will cause\n     println!(\"{} {}\", X, Y);\n     //~^ ERROR evaluation of constant expression failed\n     //~| ERROR evaluation of constant expression failed\n-    //~| ERROR erroneous constant used [E0080]\n-    //~| ERROR erroneous constant used [E0080]\n+    //~| WARN erroneous constant used [const_err]\n+    //~| WARN erroneous constant used [const_err]\n }"}, {"sha": "23b54d954c65874c0d6e412915d2ac98b4c79c42", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=ecd5852194f43511443f134aebf0462b58c8e197", "patch": "@@ -1,8 +1,8 @@\n warning: any use of this value will cause an error\n   --> $DIR/issue-43197.rs:10:20\n    |\n-LL |     const X: u32 = 0-1;\n-   |     ---------------^^^-\n+LL |     const X: u32 = 0 - 1;\n+   |     ---------------^^^^^-\n    |                    |\n    |                    attempt to subtract with overflow\n    |\n@@ -15,8 +15,8 @@ LL | #![warn(const_err)]\n warning: any use of this value will cause an error\n   --> $DIR/issue-43197.rs:12:24\n    |\n-LL |     const Y: u32 = foo(0-1);\n-   |     -------------------^^^--\n+LL |     const Y: u32 = foo(0 - 1);\n+   |     -------------------^^^^^--\n    |                        |\n    |                        attempt to subtract with overflow\n \n@@ -26,7 +26,7 @@ error[E0080]: evaluation of constant expression failed\n LL |     println!(\"{} {}\", X, Y);\n    |                       ^ referenced constant has errors\n \n-error[E0080]: erroneous constant used\n+warning: erroneous constant used\n   --> $DIR/issue-43197.rs:14:23\n    |\n LL |     println!(\"{} {}\", X, Y);\n@@ -38,12 +38,12 @@ error[E0080]: evaluation of constant expression failed\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n \n-error[E0080]: erroneous constant used\n+warning: erroneous constant used\n   --> $DIR/issue-43197.rs:14:26\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "f9194709dc0b7c58e2925a5580d5a96d66c7939b", "filename": "src/test/ui/consts/const-eval/issue-44578.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs?ref=ecd5852194f43511443f134aebf0462b58c8e197", "patch": "@@ -25,6 +25,5 @@ impl Foo for u16 {\n \n fn main() {\n     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n-    //~^ ERROR erroneous constant used [E0080]\n-    //~| ERROR evaluation of constant expression failed [E0080]\n+    //~^ ERROR evaluation of constant expression failed [E0080]\n }"}, {"sha": "f4323713e682bce458600fc85b8dc4b8688b7331", "filename": "src/test/ui/consts/const-eval/issue-44578.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr?ref=ecd5852194f43511443f134aebf0462b58c8e197", "patch": "@@ -4,12 +4,6 @@ error[E0080]: evaluation of constant expression failed\n LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n-error[E0080]: erroneous constant used\n-  --> $DIR/issue-44578.rs:27:20\n-   |\n-LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "fee232185d29a93559f1a59058116a6139c76fc6", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=ecd5852194f43511443f134aebf0462b58c8e197", "patch": "@@ -1,22 +1,22 @@\n-// build-fail\n+// build-pass\n // compile-flags: -O\n \n-#![deny(const_err)]\n+#![warn(const_err)]\n \n fn main() {\n     println!(\"{}\", 0u32 - 1);\n     let _x = 0u32 - 1;\n-    //~^ ERROR const_err\n-    println!(\"{}\", 1/(1-1));\n-    //~^ ERROR attempt to divide by zero [const_err]\n-    //~| ERROR const_err\n-    //~| ERROR erroneous constant used [E0080]\n-    let _x = 1/(1-1);\n-    //~^ ERROR const_err\n-    println!(\"{}\", 1/(false as u32));\n-    //~^ ERROR attempt to divide by zero [const_err]\n-    //~| ERROR const_err\n-    //~| ERROR erroneous constant used [E0080]\n-    let _x = 1/(false as u32);\n-    //~^ ERROR const_err\n+    //~^ WARN const_err\n+    println!(\"{}\", 1 / (1 - 1));\n+    //~^ WARN attempt to divide by zero [const_err]\n+    //~| WARN const_err\n+    //~| WARN erroneous constant used [const_err]\n+    let _x = 1 / (1 - 1);\n+    //~^ WARN const_err\n+    println!(\"{}\", 1 / (false as u32));\n+    //~^ WARN attempt to divide by zero [const_err]\n+    //~| WARN const_err\n+    //~| WARN erroneous constant used [const_err]\n+    let _x = 1 / (false as u32);\n+    //~^ WARN const_err\n }"}, {"sha": "4de22fdf4ab1e4627d510fee7687bc45a7baa68d", "filename": "src/test/ui/consts/const-eval/promoted_errors.stderr", "status": "modified", "additions": 26, "deletions": 29, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr?ref=ecd5852194f43511443f134aebf0462b58c8e197", "patch": "@@ -1,4 +1,4 @@\n-error: this expression will panic at runtime\n+warning: this expression will panic at runtime\n   --> $DIR/promoted_errors.rs:8:14\n    |\n LL |     let _x = 0u32 - 1;\n@@ -7,57 +7,54 @@ LL |     let _x = 0u32 - 1;\n note: lint level defined here\n   --> $DIR/promoted_errors.rs:4:9\n    |\n-LL | #![deny(const_err)]\n+LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n-error: attempt to divide by zero\n+warning: attempt to divide by zero\n   --> $DIR/promoted_errors.rs:10:20\n    |\n-LL |     println!(\"{}\", 1/(1-1));\n-   |                    ^^^^^^^\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^\n \n-error: reaching this expression at runtime will panic or abort\n+warning: reaching this expression at runtime will panic or abort\n   --> $DIR/promoted_errors.rs:10:20\n    |\n-LL |     println!(\"{}\", 1/(1-1));\n-   |                    ^^^^^^^ dividing by zero\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ dividing by zero\n \n-error[E0080]: erroneous constant used\n+warning: erroneous constant used\n   --> $DIR/promoted_errors.rs:10:20\n    |\n-LL |     println!(\"{}\", 1/(1-1));\n-   |                    ^^^^^^^ referenced constant has errors\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ referenced constant has errors\n \n-error: attempt to divide by zero\n+warning: attempt to divide by zero\n   --> $DIR/promoted_errors.rs:14:14\n    |\n-LL |     let _x = 1/(1-1);\n-   |              ^^^^^^^\n+LL |     let _x = 1 / (1 - 1);\n+   |              ^^^^^^^^^^^\n \n-error: attempt to divide by zero\n+warning: attempt to divide by zero\n   --> $DIR/promoted_errors.rs:16:20\n    |\n-LL |     println!(\"{}\", 1/(false as u32));\n-   |                    ^^^^^^^^^^^^^^^^\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^\n \n-error: reaching this expression at runtime will panic or abort\n+warning: reaching this expression at runtime will panic or abort\n   --> $DIR/promoted_errors.rs:16:20\n    |\n-LL |     println!(\"{}\", 1/(false as u32));\n-   |                    ^^^^^^^^^^^^^^^^ dividing by zero\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n \n-error[E0080]: erroneous constant used\n+warning: erroneous constant used\n   --> $DIR/promoted_errors.rs:16:20\n    |\n-LL |     println!(\"{}\", 1/(false as u32));\n-   |                    ^^^^^^^^^^^^^^^^ referenced constant has errors\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n-error: attempt to divide by zero\n+warning: attempt to divide by zero\n   --> $DIR/promoted_errors.rs:20:14\n    |\n-LL |     let _x = 1/(false as u32);\n-   |              ^^^^^^^^^^^^^^^^\n+LL |     let _x = 1 / (false as u32);\n+   |              ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 9 previous errors\n-\n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "41a989d91c5d3f13407a9560d34abeaed015e21f", "filename": "src/test/ui/consts/const-eval/promoted_errors2.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs?ref=ecd5852194f43511443f134aebf0462b58c8e197", "patch": "@@ -1,23 +1,23 @@\n-// build-fail\n+// build-pass\n // compile-flags: -C overflow-checks=on -O\n \n-#![deny(const_err)]\n+#![warn(const_err)]\n \n fn main() {\n     println!(\"{}\", 0u32 - 1);\n-    //~^ ERROR attempt to subtract with overflow\n+    //~^ WARN attempt to subtract with overflow\n     let _x = 0u32 - 1;\n-    //~^ ERROR attempt to subtract with overflow\n-    println!(\"{}\", 1/(1-1));\n-    //~^ ERROR attempt to divide by zero [const_err]\n-    //~| ERROR const_err\n-    //~| ERROR erroneous constant used [E0080]\n-    let _x = 1/(1-1);\n-    //~^ ERROR const_err\n-    println!(\"{}\", 1/(false as u32));\n-    //~^ ERROR attempt to divide by zero [const_err]\n-    //~| ERROR const_err\n-    //~| ERROR erroneous constant used [E0080]\n-    let _x = 1/(false as u32);\n-    //~^ ERROR const_err\n+    //~^ WARN attempt to subtract with overflow\n+    println!(\"{}\", 1 / (1 - 1));\n+    //~^ WARN attempt to divide by zero [const_err]\n+    //~| WARN const_err\n+    //~| WARN erroneous constant used [const_err]\n+    let _x = 1 / (1 - 1);\n+    //~^ WARN const_err\n+    println!(\"{}\", 1 / (false as u32));\n+    //~^ WARN attempt to divide by zero [const_err]\n+    //~| WARN const_err\n+    //~| WARN erroneous constant used [const_err]\n+    let _x = 1 / (false as u32);\n+    //~^ WARN const_err\n }"}, {"sha": "4f7ba8bf385d3c036d18ee05de861ee988691f25", "filename": "src/test/ui/consts/const-eval/promoted_errors2.stderr", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr?ref=ecd5852194f43511443f134aebf0462b58c8e197", "patch": "@@ -1,4 +1,4 @@\n-error: attempt to subtract with overflow\n+warning: attempt to subtract with overflow\n   --> $DIR/promoted_errors2.rs:7:20\n    |\n LL |     println!(\"{}\", 0u32 - 1);\n@@ -7,63 +7,60 @@ LL |     println!(\"{}\", 0u32 - 1);\n note: lint level defined here\n   --> $DIR/promoted_errors2.rs:4:9\n    |\n-LL | #![deny(const_err)]\n+LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n-error: attempt to subtract with overflow\n+warning: attempt to subtract with overflow\n   --> $DIR/promoted_errors2.rs:9:14\n    |\n LL |     let _x = 0u32 - 1;\n    |              ^^^^^^^^\n \n-error: attempt to divide by zero\n+warning: attempt to divide by zero\n   --> $DIR/promoted_errors2.rs:11:20\n    |\n-LL |     println!(\"{}\", 1/(1-1));\n-   |                    ^^^^^^^\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^\n \n-error: reaching this expression at runtime will panic or abort\n+warning: reaching this expression at runtime will panic or abort\n   --> $DIR/promoted_errors2.rs:11:20\n    |\n-LL |     println!(\"{}\", 1/(1-1));\n-   |                    ^^^^^^^ dividing by zero\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ dividing by zero\n \n-error[E0080]: erroneous constant used\n+warning: erroneous constant used\n   --> $DIR/promoted_errors2.rs:11:20\n    |\n-LL |     println!(\"{}\", 1/(1-1));\n-   |                    ^^^^^^^ referenced constant has errors\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ referenced constant has errors\n \n-error: attempt to divide by zero\n+warning: attempt to divide by zero\n   --> $DIR/promoted_errors2.rs:15:14\n    |\n-LL |     let _x = 1/(1-1);\n-   |              ^^^^^^^\n+LL |     let _x = 1 / (1 - 1);\n+   |              ^^^^^^^^^^^\n \n-error: attempt to divide by zero\n+warning: attempt to divide by zero\n   --> $DIR/promoted_errors2.rs:17:20\n    |\n-LL |     println!(\"{}\", 1/(false as u32));\n-   |                    ^^^^^^^^^^^^^^^^\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^\n \n-error: reaching this expression at runtime will panic or abort\n+warning: reaching this expression at runtime will panic or abort\n   --> $DIR/promoted_errors2.rs:17:20\n    |\n-LL |     println!(\"{}\", 1/(false as u32));\n-   |                    ^^^^^^^^^^^^^^^^ dividing by zero\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n \n-error[E0080]: erroneous constant used\n+warning: erroneous constant used\n   --> $DIR/promoted_errors2.rs:17:20\n    |\n-LL |     println!(\"{}\", 1/(false as u32));\n-   |                    ^^^^^^^^^^^^^^^^ referenced constant has errors\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n-error: attempt to divide by zero\n+warning: attempt to divide by zero\n   --> $DIR/promoted_errors2.rs:21:14\n    |\n-LL |     let _x = 1/(false as u32);\n-   |              ^^^^^^^^^^^^^^^^\n+LL |     let _x = 1 / (false as u32);\n+   |              ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 10 previous errors\n-\n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "cfb57d21ceec5ffc10a05f1e9490faa7351285c9", "filename": "src/test/ui/consts/miri_unleashed/non_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.rs?ref=ecd5852194f43511443f134aebf0462b58c8e197", "patch": "@@ -13,5 +13,5 @@ const C: () = foo(); //~ WARN: skipping const checks\n fn main() {\n     println!(\"{:?}\", C);\n     //~^ ERROR: evaluation of constant expression failed\n-    //~| ERROR: erroneous constant used [E0080]\n+    //~| WARN: erroneous constant used [const_err]\n }"}, {"sha": "6a7df858febcf38d863a4e8d2b934e68bfa83571", "filename": "src/test/ui/consts/miri_unleashed/non_const_fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecd5852194f43511443f134aebf0462b58c8e197/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr?ref=ecd5852194f43511443f134aebf0462b58c8e197", "patch": "@@ -24,12 +24,12 @@ error[E0080]: evaluation of constant expression failed\n LL |     println!(\"{:?}\", C);\n    |                      ^ referenced constant has errors\n \n-error[E0080]: erroneous constant used\n+warning: erroneous constant used\n   --> $DIR/non_const_fn.rs:14:22\n    |\n LL |     println!(\"{:?}\", C);\n    |                      ^ referenced constant has errors\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}]}