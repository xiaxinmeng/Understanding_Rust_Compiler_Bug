{"sha": "ac804f27a8ce2e02fd3a9c5eff83098258b78da6", "node_id": "C_kwDOAAsO6NoAKGFjODA0ZjI3YThjZTJlMDJmZDNhOWM1ZWZmODMwOTgyNThiNzhkYTY", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-02-23T00:10:17Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-03-07T17:43:27Z"}, "message": "Trying to detect autorefs to avoid unnecessary borrowed temporaries\n\nThis is all almost certainly wrong", "tree": {"sha": "236beff1b6319a24c8867593c49ef1f1c9bf3174", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/236beff1b6319a24c8867593c49ef1f1c9bf3174"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac804f27a8ce2e02fd3a9c5eff83098258b78da6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac804f27a8ce2e02fd3a9c5eff83098258b78da6", "html_url": "https://github.com/rust-lang/rust/commit/ac804f27a8ce2e02fd3a9c5eff83098258b78da6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac804f27a8ce2e02fd3a9c5eff83098258b78da6/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "513a9c67a59c0e1b9a7903d7e5fca4b6da974673", "url": "https://api.github.com/repos/rust-lang/rust/commits/513a9c67a59c0e1b9a7903d7e5fca4b6da974673", "html_url": "https://github.com/rust-lang/rust/commit/513a9c67a59c0e1b9a7903d7e5fca4b6da974673"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "3ff7d7ad010ffd22249978f60bd7ef631b24820f", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac804f27a8ce2e02fd3a9c5eff83098258b78da6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac804f27a8ce2e02fd3a9c5eff83098258b78da6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=ac804f27a8ce2e02fd3a9c5eff83098258b78da6", "patch": "@@ -102,9 +102,13 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n         &mut self,\n         place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>,\n         diag_expr_id: HirId,\n-        _bk: rustc_middle::ty::BorrowKind,\n+        bk: rustc_middle::ty::BorrowKind,\n+        is_autoref: bool,\n     ) {\n-        debug!(\"borrow: place_with_id = {place_with_id:?}, diag_expr_id={diag_expr_id:?}\");\n+        debug!(\n+            \"borrow: place_with_id = {place_with_id:?}, diag_expr_id={diag_expr_id:?}, \\\n+            borrow_kind={bk:?}, is_autoref={is_autoref}\"\n+        );\n \n         self.places\n             .borrowed\n@@ -114,7 +118,7 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n         //\n         // XXX -- we need to distinguish `&*E` where `E: &T` which is not creating a temporary\n         // even though the place-base E is an rvalue\n-        if let PlaceBase::Rvalue = place_with_id.place.base {\n+        if let (false, PlaceBase::Rvalue) = (is_autoref, place_with_id.place.base) {\n             self.places.borrowed_temporaries.insert(place_with_id.hir_id);\n         }\n     }"}, {"sha": "a3317f1cd7c7c18be1ffb32fe56b6a6b470c5e92", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac804f27a8ce2e02fd3a9c5eff83098258b78da6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac804f27a8ce2e02fd3a9c5eff83098258b78da6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=ac804f27a8ce2e02fd3a9c5eff83098258b78da6", "patch": "@@ -1792,6 +1792,7 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'tcx> {\n         place_with_id: &PlaceWithHirId<'tcx>,\n         diag_expr_id: hir::HirId,\n         bk: ty::BorrowKind,\n+        _is_autoref: bool,\n     ) {\n         let PlaceBase::Upvar(upvar_id) = place_with_id.place.base else { return };\n         assert_eq!(self.closure_def_id, upvar_id.closure_expr_id);\n@@ -1826,7 +1827,7 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'tcx> {\n \n     #[instrument(skip(self), level = \"debug\")]\n     fn mutate(&mut self, assignee_place: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId) {\n-        self.borrow(assignee_place, diag_expr_id, ty::BorrowKind::MutBorrow);\n+        self.borrow(assignee_place, diag_expr_id, ty::BorrowKind::MutBorrow, false);\n     }\n }\n "}, {"sha": "1cce2a1da744d3674f1372b2c56c0589a6828186", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ac804f27a8ce2e02fd3a9c5eff83098258b78da6/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac804f27a8ce2e02fd3a9c5eff83098258b78da6/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=ac804f27a8ce2e02fd3a9c5eff83098258b78da6", "patch": "@@ -45,6 +45,7 @@ pub trait Delegate<'tcx> {\n         place_with_id: &PlaceWithHirId<'tcx>,\n         diag_expr_id: hir::HirId,\n         bk: ty::BorrowKind,\n+        is_autoref: bool,\n     );\n \n     /// The path at `assignee_place` is being assigned to.\n@@ -175,7 +176,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         debug!(\"borrow_expr(expr={:?}, bk={:?})\", expr, bk);\n \n         let place_with_id = return_if_err!(self.mc.cat_expr(expr));\n-        self.delegate.borrow(&place_with_id, place_with_id.hir_id, bk);\n+        self.delegate.borrow(&place_with_id, place_with_id.hir_id, bk, false);\n \n         self.walk_expr(expr)\n     }\n@@ -558,7 +559,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 // this is an autoref of `x`.\n                 adjustment::Adjust::Deref(Some(ref deref)) => {\n                     let bk = ty::BorrowKind::from_mutbl(deref.mutbl);\n-                    self.delegate.borrow(&place_with_id, place_with_id.hir_id, bk);\n+                    self.delegate.borrow(&place_with_id, place_with_id.hir_id, bk, true);\n                 }\n \n                 adjustment::Adjust::Borrow(ref autoref) => {\n@@ -590,13 +591,14 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                     base_place,\n                     base_place.hir_id,\n                     ty::BorrowKind::from_mutbl(m.into()),\n+                    true,\n                 );\n             }\n \n             adjustment::AutoBorrow::RawPtr(m) => {\n                 debug!(\"walk_autoref: expr.hir_id={} base_place={:?}\", expr.hir_id, base_place);\n \n-                self.delegate.borrow(base_place, base_place.hir_id, ty::BorrowKind::from_mutbl(m));\n+                self.delegate.borrow(base_place, base_place.hir_id, ty::BorrowKind::from_mutbl(m), true);\n             }\n         }\n     }\n@@ -669,7 +671,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                     match bm {\n                         ty::BindByReference(m) => {\n                             let bk = ty::BorrowKind::from_mutbl(m);\n-                            delegate.borrow(place, discr_place.hir_id, bk);\n+                            delegate.borrow(place, discr_place.hir_id, bk, false);\n                         }\n                         ty::BindByValue(..) => {\n                             debug!(\"walk_pat binding consuming pat\");\n@@ -799,6 +801,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                                 &place_with_id,\n                                 place_with_id.hir_id,\n                                 upvar_borrow,\n+                                false,\n                             );\n                         }\n                     }\n@@ -837,7 +840,7 @@ fn delegate_consume<'a, 'tcx>(\n     match mode {\n         ConsumeMode::Move => delegate.consume(place_with_id, diag_expr_id),\n         ConsumeMode::Copy => {\n-            delegate.borrow(place_with_id, diag_expr_id, ty::BorrowKind::ImmBorrow)\n+            delegate.borrow(place_with_id, diag_expr_id, ty::BorrowKind::ImmBorrow, false)\n         }\n     }\n }"}]}