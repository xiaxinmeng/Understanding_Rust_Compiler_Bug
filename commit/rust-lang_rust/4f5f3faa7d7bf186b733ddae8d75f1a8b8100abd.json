{"sha": "4f5f3faa7d7bf186b733ddae8d75f1a8b8100abd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNWYzZmFhN2Q3YmYxODZiNzMzZGRhZThkNzVmMWE4YjgxMDBhYmQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-08-11T08:20:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-11T08:20:31Z"}, "message": "Rollup merge of #43791 - GuillaumeGomez:file-docs, r=QuietMisdreavus\n\nFile docs\n\nr? @rust-lang/docs", "tree": {"sha": "b74867d5268eba533dae2b73f7e70201f44f9c6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b74867d5268eba533dae2b73f7e70201f44f9c6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f5f3faa7d7bf186b733ddae8d75f1a8b8100abd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f5f3faa7d7bf186b733ddae8d75f1a8b8100abd", "html_url": "https://github.com/rust-lang/rust/commit/4f5f3faa7d7bf186b733ddae8d75f1a8b8100abd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f5f3faa7d7bf186b733ddae8d75f1a8b8100abd/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e6e26246e35cc203115e400b320372bf34fb562", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e6e26246e35cc203115e400b320372bf34fb562", "html_url": "https://github.com/rust-lang/rust/commit/3e6e26246e35cc203115e400b320372bf34fb562"}, {"sha": "972d67cec1fc0aeafebcc60ffcdf4dea0eadff8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/972d67cec1fc0aeafebcc60ffcdf4dea0eadff8c", "html_url": "https://github.com/rust-lang/rust/commit/972d67cec1fc0aeafebcc60ffcdf4dea0eadff8c"}], "stats": {"total": 49, "additions": 30, "deletions": 19}, "files": [{"sha": "062186ef70866fec67ef4d4676950b5bc3dc02e1", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4f5f3faa7d7bf186b733ddae8d75f1a8b8100abd/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5f3faa7d7bf186b733ddae8d75f1a8b8100abd/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=4f5f3faa7d7bf186b733ddae8d75f1a8b8100abd", "patch": "@@ -28,7 +28,7 @@ use time::SystemTime;\n /// A reference to an open file on the filesystem.\n ///\n /// An instance of a `File` can be read and/or written depending on what options\n-/// it was opened with. Files also implement `Seek` to alter the logical cursor\n+/// it was opened with. Files also implement [`Seek`] to alter the logical cursor\n /// that the file contains internally.\n ///\n /// Files are automatically closed when they go out of scope.\n@@ -48,7 +48,7 @@ use time::SystemTime;\n /// # }\n /// ```\n ///\n-/// Read the contents of a file into a `String`:\n+/// Read the contents of a file into a [`String`]:\n ///\n /// ```no_run\n /// use std::fs::File;\n@@ -81,6 +81,8 @@ use time::SystemTime;\n /// # }\n /// ```\n ///\n+/// [`Seek`]: ../io/trait.Seek.html\n+/// [`String`]: ../string/struct.String.html\n /// [`Read`]: ../io/trait.Read.html\n /// [`BufReader<R>`]: ../io/struct.BufReader.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -104,19 +106,19 @@ pub struct Metadata(fs_imp::FileAttr);\n /// Iterator over the entries in a directory.\n ///\n /// This iterator is returned from the [`read_dir`] function of this module and\n-/// will yield instances of `io::Result<DirEntry>`. Through a [`DirEntry`]\n+/// will yield instances of [`io::Result`]`<`[`DirEntry`]`>`. Through a [`DirEntry`]\n /// information like the entry's path and possibly other metadata can be\n /// learned.\n ///\n-/// [`read_dir`]: fn.read_dir.html\n-/// [`DirEntry`]: struct.DirEntry.html\n-///\n /// # Errors\n ///\n-/// This [`io::Result`] will be an `Err` if there's some sort of intermittent\n+/// This [`io::Result`] will be an [`Err`] if there's some sort of intermittent\n /// IO error during iteration.\n ///\n+/// [`read_dir`]: fn.read_dir.html\n+/// [`DirEntry`]: struct.DirEntry.html\n /// [`io::Result`]: ../io/type.Result.html\n+/// [`Err`]: ../result/enum.Result.html#variant.Err\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct ReadDir(fs_imp::ReadDir);"}, {"sha": "68f55221a6c985f1fb7ee84718afcd9e9d97c52b", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4f5f3faa7d7bf186b733ddae8d75f1a8b8100abd/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5f3faa7d7bf186b733ddae8d75f1a8b8100abd/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=4f5f3faa7d7bf186b733ddae8d75f1a8b8100abd", "patch": "@@ -17,17 +17,21 @@ use convert::From;\n /// A specialized [`Result`](../result/enum.Result.html) type for I/O\n /// operations.\n ///\n-/// This type is broadly used across `std::io` for any operation which may\n+/// This type is broadly used across [`std::io`] for any operation which may\n /// produce an error.\n ///\n-/// This typedef is generally used to avoid writing out `io::Error` directly and\n-/// is otherwise a direct mapping to `Result`.\n+/// This typedef is generally used to avoid writing out [`io::Error`] directly and\n+/// is otherwise a direct mapping to [`Result`].\n ///\n-/// While usual Rust style is to import types directly, aliases of `Result`\n-/// often are not, to make it easier to distinguish between them. `Result` is\n-/// generally assumed to be `std::result::Result`, and so users of this alias\n+/// While usual Rust style is to import types directly, aliases of [`Result`]\n+/// often are not, to make it easier to distinguish between them. [`Result`] is\n+/// generally assumed to be [`std::result::Result`][`Result`], and so users of this alias\n /// will generally use `io::Result` instead of shadowing the prelude's import\n-/// of `std::result::Result`.\n+/// of [`std::result::Result`][`Result`].\n+///\n+/// [`std::io`]: ../io/index.html\n+/// [`io::Error`]: ../io/struct.Error.html\n+/// [`Result`]: ../result/enum.Result.html\n ///\n /// # Examples\n ///\n@@ -47,13 +51,16 @@ use convert::From;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub type Result<T> = result::Result<T, Error>;\n \n-/// The error type for I/O operations of the `Read`, `Write`, `Seek`, and\n+/// The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and\n /// associated traits.\n ///\n /// Errors mostly originate from the underlying OS, but custom instances of\n /// `Error` can be created with crafted error messages and a particular value of\n /// [`ErrorKind`].\n ///\n+/// [`Read`]: ../io/trait.Read.html\n+/// [`Write`]: ../io/trait.Write.html\n+/// [`Seek`]: ../io/trait.Seek.html\n /// [`ErrorKind`]: enum.ErrorKind.html\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "f486493f98b4c275f6ac3d37ebe612c494f703db", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f5f3faa7d7bf186b733ddae8d75f1a8b8100abd/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5f3faa7d7bf186b733ddae8d75f1a8b8100abd/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=4f5f3faa7d7bf186b733ddae8d75f1a8b8100abd", "patch": "@@ -22,7 +22,7 @@\n //! you'll see a few different types of I/O throughout the documentation in\n //! this module: [`File`]s, [`TcpStream`]s, and sometimes even [`Vec<T>`]s. For\n //! example, [`Read`] adds a [`read`][`Read::read`] method, which we can use on\n-//! `File`s:\n+//! [`File`]s:\n //!\n //! ```\n //! use std::io;\n@@ -146,9 +146,9 @@\n //! # }\n //! ```\n //!\n-//! Note that you cannot use the `?` operator in functions that do not return\n-//! a `Result<T, E>` (e.g. `main`). Instead, you can call `.unwrap()` or `match`\n-//! on the return value to catch any possible errors:\n+//! Note that you cannot use the [`?` operator] in functions that do not return\n+//! a [`Result<T, E>`][`Result`] (e.g. `main`). Instead, you can call [`.unwrap()`]\n+//! or `match` on the return value to catch any possible errors:\n //!\n //! ```\n //! use std::io;\n@@ -265,6 +265,8 @@\n //! [`io::Result`]: type.Result.html\n //! [`?` operator]: ../../book/first-edition/syntax-index.html\n //! [`Read::read`]: trait.Read.html#tymethod.read\n+//! [`Result`]: ../result/enum.Result.html\n+//! [`.unwrap()`]: ../result/enum.Result.html#method.unwrap\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}