{"sha": "cdb8e64bc78400f9366db3b556bb01f470855f55", "node_id": "C_kwDOAAsO6NoAKGNkYjhlNjRiYzc4NDAwZjkzNjZkYjNiNTU2YmIwMWY0NzA4NTVmNTU", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-05-28T22:40:47Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-05-28T23:44:11Z"}, "message": "Use Box::new() instead of box syntax in core tests", "tree": {"sha": "1016d7c5605a52610b46e6a507f7faf91e927627", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1016d7c5605a52610b46e6a507f7faf91e927627"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdb8e64bc78400f9366db3b556bb01f470855f55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdb8e64bc78400f9366db3b556bb01f470855f55", "html_url": "https://github.com/rust-lang/rust/commit/cdb8e64bc78400f9366db3b556bb01f470855f55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdb8e64bc78400f9366db3b556bb01f470855f55/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d75c60f9a37c9b1810ddcdf19216da76319bdf04", "url": "https://api.github.com/repos/rust-lang/rust/commits/d75c60f9a37c9b1810ddcdf19216da76319bdf04", "html_url": "https://github.com/rust-lang/rust/commit/d75c60f9a37c9b1810ddcdf19216da76319bdf04"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "0dffd137565b3dfb34123c04cdf3c78b3c547672", "filename": "library/core/tests/any.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cdb8e64bc78400f9366db3b556bb01f470855f55/library%2Fcore%2Ftests%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb8e64bc78400f9366db3b556bb01f470855f55/library%2Fcore%2Ftests%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fany.rs?ref=cdb8e64bc78400f9366db3b556bb01f470855f55", "patch": "@@ -24,8 +24,11 @@ fn any_referenced() {\n \n #[test]\n fn any_owning() {\n-    let (a, b, c) =\n-        (box 5_usize as Box<dyn Any>, box TEST as Box<dyn Any>, box Test as Box<dyn Any>);\n+    let (a, b, c) = (\n+        Box::new(5_usize) as Box<dyn Any>,\n+        Box::new(TEST) as Box<dyn Any>,\n+        Box::new(Test) as Box<dyn Any>,\n+    );\n \n     assert!(a.is::<usize>());\n     assert!(!b.is::<usize>());\n@@ -58,7 +61,7 @@ fn any_downcast_ref() {\n #[test]\n fn any_downcast_mut() {\n     let mut a = 5_usize;\n-    let mut b: Box<_> = box 7_usize;\n+    let mut b: Box<_> = Box::new(7_usize);\n \n     let a_r = &mut a as &mut dyn Any;\n     let tmp: &mut usize = &mut *b;"}, {"sha": "33ca9f2c6a3a1ef0995101c28e622d4c72bdf941", "filename": "library/core/tests/clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdb8e64bc78400f9366db3b556bb01f470855f55/library%2Fcore%2Ftests%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb8e64bc78400f9366db3b556bb01f470855f55/library%2Fcore%2Ftests%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fclone.rs?ref=cdb8e64bc78400f9366db3b556bb01f470855f55", "patch": "@@ -8,8 +8,8 @@ fn test_borrowed_clone() {\n \n #[test]\n fn test_clone_from() {\n-    let a = box 5;\n-    let mut b = box 10;\n+    let a = Box::new(5);\n+    let mut b = Box::new(10);\n     b.clone_from(&a);\n     assert_eq!(*b, 5);\n }"}, {"sha": "00ef4a6e6a987bd6f6108ef1c98b01ea2864cfef", "filename": "library/core/tests/iter/traits/double_ended.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cdb8e64bc78400f9366db3b556bb01f470855f55/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb8e64bc78400f9366db3b556bb01f470855f55/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=cdb8e64bc78400f9366db3b556bb01f470855f55", "patch": "@@ -78,7 +78,8 @@ fn test_rev_rposition() {\n #[test]\n #[should_panic]\n fn test_rposition_panic() {\n-    let v: [(Box<_>, Box<_>); 4] = [(box 0, box 0), (box 0, box 0), (box 0, box 0), (box 0, box 0)];\n+    let u = (Box::new(0), Box::new(0));\n+    let v: [(Box<_>, Box<_>); 4] = [u.clone(), u.clone(), u.clone(), u];\n     let mut i = 0;\n     v.iter().rposition(|_elt| {\n         if i == 2 {"}, {"sha": "7e9d7d27101802b66e40d1ba1a8e9f10019aa7fc", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cdb8e64bc78400f9366db3b556bb01f470855f55/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb8e64bc78400f9366db3b556bb01f470855f55/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=cdb8e64bc78400f9366db3b556bb01f470855f55", "patch": "@@ -3,7 +3,6 @@\n #![feature(array_methods)]\n #![feature(array_windows)]\n #![feature(bench_black_box)]\n-#![feature(box_syntax)]\n #![feature(cell_update)]\n #![feature(const_assume)]\n #![feature(const_black_box)]"}, {"sha": "9f5e537dcefc0a8109af28ff4290e111163f214e", "filename": "library/core/tests/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdb8e64bc78400f9366db3b556bb01f470855f55/library%2Fcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb8e64bc78400f9366db3b556bb01f470855f55/library%2Fcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Foption.rs?ref=cdb8e64bc78400f9366db3b556bb01f470855f55", "patch": "@@ -7,7 +7,7 @@ use core::option::*;\n #[test]\n fn test_get_ptr() {\n     unsafe {\n-        let x: Box<_> = box 0;\n+        let x: Box<_> = Box::new(0);\n         let addr_x: *const isize = mem::transmute(&*x);\n         let opt = Some(x);\n         let y = opt.unwrap();\n@@ -315,7 +315,7 @@ fn test_collect() {\n \n     // test that it does not take more elements than it needs\n     let mut functions: [Box<dyn Fn() -> Option<()>>; 3] =\n-        [box || Some(()), box || None, box || panic!()];\n+        [Box::new(|| Some(())), Box::new(|| None), Box::new(|| panic!())];\n \n     let v: Option<Vec<()>> = functions.iter_mut().map(|f| (*f)()).collect();\n "}, {"sha": "103e8cc3a96facada05da2bd5f1afba39c288613", "filename": "library/core/tests/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdb8e64bc78400f9366db3b556bb01f470855f55/library%2Fcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb8e64bc78400f9366db3b556bb01f470855f55/library%2Fcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fresult.rs?ref=cdb8e64bc78400f9366db3b556bb01f470855f55", "patch": "@@ -69,7 +69,7 @@ fn test_collect() {\n \n     // test that it does not take more elements than it needs\n     let mut functions: [Box<dyn Fn() -> Result<(), isize>>; 3] =\n-        [box || Ok(()), box || Err(1), box || panic!()];\n+        [Box::new(|| Ok(())), Box::new(|| Err(1)), Box::new(|| panic!())];\n \n     let v: Result<Vec<()>, isize> = functions.iter_mut().map(|f| (*f)()).collect();\n     assert!(v == Err(1));"}]}