{"sha": "f6ed16674c461cb20c39e787fffab2269b9629b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZWQxNjY3NGM0NjFjYjIwYzM5ZTc4N2ZmZmFiMjI2OWI5NjI5YjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-20T07:05:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-20T07:05:24Z"}, "message": "Align code_model name with ungrammar", "tree": {"sha": "6cc2943b901f35ea3c351490f15cad9061a69c15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cc2943b901f35ea3c351490f15cad9061a69c15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6ed16674c461cb20c39e787fffab2269b9629b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6ed16674c461cb20c39e787fffab2269b9629b0", "html_url": "https://github.com/rust-lang/rust/commit/f6ed16674c461cb20c39e787fffab2269b9629b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6ed16674c461cb20c39e787fffab2269b9629b0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87886e89867d36c14812e70505c4db61a6b66bf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/87886e89867d36c14812e70505c4db61a6b66bf0", "html_url": "https://github.com/rust-lang/rust/commit/87886e89867d36c14812e70505c4db61a6b66bf0"}], "stats": {"total": 190, "additions": 88, "deletions": 102}, "files": [{"sha": "030b9cd0c7d9f7992db9641e852afae002bbe520", "filename": "crates/assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=f6ed16674c461cb20c39e787fffab2269b9629b0", "patch": "@@ -1,7 +1,7 @@\n use std::iter;\n \n use either::Either;\n-use hir::{AsName, EnumVariant, Module, ModuleDef, Name};\n+use hir::{AsName, Module, ModuleDef, Name, Variant};\n use ide_db::helpers::{\n     insert_use::{insert_use, ImportScope},\n     mod_path_to_ast,\n@@ -53,7 +53,7 @@ pub(crate) fn extract_struct_from_enum_variant(\n             let variant_hir_name = variant_hir.name(ctx.db());\n             let enum_module_def = ModuleDef::from(enum_hir);\n             let usages =\n-                Definition::ModuleDef(ModuleDef::EnumVariant(variant_hir)).usages(&ctx.sema).all();\n+                Definition::ModuleDef(ModuleDef::Variant(variant_hir)).usages(&ctx.sema).all();\n \n             let mut visited_modules_set = FxHashSet::default();\n             let current_module = enum_hir.module(ctx.db());\n@@ -109,7 +109,7 @@ fn extract_field_list_if_applicable(\n     }\n }\n \n-fn existing_definition(db: &RootDatabase, variant_name: &ast::Name, variant: &EnumVariant) -> bool {\n+fn existing_definition(db: &RootDatabase, variant_name: &ast::Name, variant: &Variant) -> bool {\n     variant\n         .parent_enum(db)\n         .module(db)\n@@ -119,7 +119,7 @@ fn existing_definition(db: &RootDatabase, variant_name: &ast::Name, variant: &En\n             // only check type-namespace\n             hir::ScopeDef::ModuleDef(def) => matches!(def,\n                 ModuleDef::Module(_) | ModuleDef::Adt(_) |\n-                ModuleDef::EnumVariant(_) | ModuleDef::Trait(_) |\n+                ModuleDef::Variant(_) | ModuleDef::Trait(_) |\n                 ModuleDef::TypeAlias(_) | ModuleDef::BuiltinType(_)\n             ),\n             _ => false,"}, {"sha": "cb60a3128288be989b11ffd267bf9f18faf7534d", "filename": "crates/assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=f6ed16674c461cb20c39e787fffab2269b9629b0", "patch": "@@ -192,7 +192,7 @@ fn resolve_tuple_of_enum_def(\n         .collect()\n }\n \n-fn build_pat(db: &RootDatabase, module: hir::Module, var: hir::EnumVariant) -> Option<ast::Pat> {\n+fn build_pat(db: &RootDatabase, module: hir::Module, var: hir::Variant) -> Option<ast::Pat> {\n     let path = mod_path_to_ast(&module.find_use_path(db, ModuleDef::from(var))?);\n \n     // FIXME: use HIR for this; it doesn't currently expose struct vs. tuple vs. unit variants though"}, {"sha": "8558a8ff01ce0c282caf96d284b905eea2c0aeb3", "filename": "crates/assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fassists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fassists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=f6ed16674c461cb20c39e787fffab2269b9629b0", "patch": "@@ -201,7 +201,7 @@ fn target_data_for_def(\n             (vis_offset(syntax), in_file_source.value.visibility(), syntax.text_range(), file_id)\n         }\n         // Enum variants can't be private, we can't modify builtin types\n-        hir::ModuleDef::EnumVariant(_) | hir::ModuleDef::BuiltinType(_) => return None,\n+        hir::ModuleDef::Variant(_) | hir::ModuleDef::BuiltinType(_) => return None,\n     };\n \n     Some((offset, current_visibility, target, target_file, target_name))"}, {"sha": "1ef6b5f48f1dd9bb5353ac01a1927191b7f3a2a4", "filename": "crates/completion/src/completions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fcompletion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fcompletion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions.rs?ref=f6ed16674c461cb20c39e787fffab2269b9629b0", "patch": "@@ -19,7 +19,7 @@ use hir::{ModPath, ScopeDef, Type};\n use crate::{\n     item::Builder,\n     render::{\n-        const_::render_const, enum_variant::render_enum_variant, function::render_fn,\n+        const_::render_const, enum_variant::render_variant, function::render_fn,\n         macro_::render_macro, render_field, render_resolution, render_tuple_field,\n         type_alias::render_type_alias, RenderContext,\n     },\n@@ -120,20 +120,20 @@ impl Completions {\n     pub(crate) fn add_qualified_enum_variant(\n         &mut self,\n         ctx: &CompletionContext,\n-        variant: hir::EnumVariant,\n+        variant: hir::Variant,\n         path: ModPath,\n     ) {\n-        let item = render_enum_variant(RenderContext::new(ctx), None, None, variant, Some(path));\n+        let item = render_variant(RenderContext::new(ctx), None, None, variant, Some(path));\n         self.add(item);\n     }\n \n     pub(crate) fn add_enum_variant(\n         &mut self,\n         ctx: &CompletionContext,\n-        variant: hir::EnumVariant,\n+        variant: hir::Variant,\n         local_name: Option<String>,\n     ) {\n-        let item = render_enum_variant(RenderContext::new(ctx), None, local_name, variant, None);\n+        let item = render_variant(RenderContext::new(ctx), None, local_name, variant, None);\n         self.add(item);\n     }\n }"}, {"sha": "4d56731ec619c833aee9d74d949a5de6ef9ed57b", "filename": "crates/completion/src/completions/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=f6ed16674c461cb20c39e787fffab2269b9629b0", "patch": "@@ -23,7 +23,7 @@ pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n                         def,\n                         hir::ModuleDef::Adt(hir::Adt::Enum(..))\n                             | hir::ModuleDef::Adt(hir::Adt::Struct(..))\n-                            | hir::ModuleDef::EnumVariant(..)\n+                            | hir::ModuleDef::Variant(..)\n                             | hir::ModuleDef::Const(..)\n                             | hir::ModuleDef::Module(..)\n                     )"}, {"sha": "1092a48256181ef4e7e8d4674c29070c89a8451e", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=f6ed16674c461cb20c39e787fffab2269b9629b0", "patch": "@@ -19,7 +19,7 @@ use crate::{\n     CompletionKind, CompletionScore,\n };\n \n-use crate::render::{enum_variant::render_enum_variant, function::render_fn, macro_::render_macro};\n+use crate::render::{enum_variant::render_variant, function::render_fn, macro_::render_macro};\n \n pub(crate) fn render_field<'a>(\n     ctx: RenderContext<'a>,\n@@ -159,9 +159,8 @@ impl<'a> Render<'a> {\n                 let item = render_fn(self.ctx, import_to_add, Some(local_name), *func);\n                 return Some(item);\n             }\n-            ScopeDef::ModuleDef(EnumVariant(var)) => {\n-                let item =\n-                    render_enum_variant(self.ctx, import_to_add, Some(local_name), *var, None);\n+            ScopeDef::ModuleDef(Variant(var)) => {\n+                let item = render_variant(self.ctx, import_to_add, Some(local_name), *var, None);\n                 return Some(item);\n             }\n             ScopeDef::MacroDef(mac) => {\n@@ -257,7 +256,7 @@ impl<'a> Render<'a> {\n         match resolution {\n             ScopeDef::ModuleDef(Module(it)) => it.docs(self.ctx.db()),\n             ScopeDef::ModuleDef(Adt(it)) => it.docs(self.ctx.db()),\n-            ScopeDef::ModuleDef(EnumVariant(it)) => it.docs(self.ctx.db()),\n+            ScopeDef::ModuleDef(Variant(it)) => it.docs(self.ctx.db()),\n             ScopeDef::ModuleDef(Const(it)) => it.docs(self.ctx.db()),\n             ScopeDef::ModuleDef(Static(it)) => it.docs(self.ctx.db()),\n             ScopeDef::ModuleDef(Trait(it)) => it.docs(self.ctx.db()),"}, {"sha": "7176fd9b3d1bed555259105bdda6f95d49eb750b", "filename": "crates/completion/src/render/enum_variant.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs?ref=f6ed16674c461cb20c39e787fffab2269b9629b0", "patch": "@@ -9,35 +9,35 @@ use crate::{\n     render::{builder_ext::Params, RenderContext},\n };\n \n-pub(crate) fn render_enum_variant<'a>(\n+pub(crate) fn render_variant<'a>(\n     ctx: RenderContext<'a>,\n     import_to_add: Option<ImportEdit>,\n     local_name: Option<String>,\n-    variant: hir::EnumVariant,\n+    variant: hir::Variant,\n     path: Option<ModPath>,\n ) -> CompletionItem {\n     let _p = profile::span(\"render_enum_variant\");\n-    EnumVariantRender::new(ctx, local_name, variant, path).render(import_to_add)\n+    EnumRender::new(ctx, local_name, variant, path).render(import_to_add)\n }\n \n #[derive(Debug)]\n-struct EnumVariantRender<'a> {\n+struct EnumRender<'a> {\n     ctx: RenderContext<'a>,\n     name: String,\n-    variant: hir::EnumVariant,\n+    variant: hir::Variant,\n     path: Option<ModPath>,\n     qualified_name: String,\n     short_qualified_name: String,\n     variant_kind: StructKind,\n }\n \n-impl<'a> EnumVariantRender<'a> {\n+impl<'a> EnumRender<'a> {\n     fn new(\n         ctx: RenderContext<'a>,\n         local_name: Option<String>,\n-        variant: hir::EnumVariant,\n+        variant: hir::Variant,\n         path: Option<ModPath>,\n-    ) -> EnumVariantRender<'a> {\n+    ) -> EnumRender<'a> {\n         let name = local_name.unwrap_or_else(|| variant.name(ctx.db()).to_string());\n         let variant_kind = variant.kind(ctx.db());\n \n@@ -51,15 +51,7 @@ impl<'a> EnumVariantRender<'a> {\n             None => (name.to_string(), name.to_string()),\n         };\n \n-        EnumVariantRender {\n-            ctx,\n-            name,\n-            variant,\n-            path,\n-            qualified_name,\n-            short_qualified_name,\n-            variant_kind,\n-        }\n+        EnumRender { ctx, name, variant, path, qualified_name, short_qualified_name, variant_kind }\n     }\n \n     fn render(self, import_to_add: Option<ImportEdit>) -> CompletionItem {"}, {"sha": "d32ce37edb2264882670262feaa1b5cb52dabd51", "filename": "crates/hir/src/attrs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fhir%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fhir%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fattrs.rs?ref=f6ed16674c461cb20c39e787fffab2269b9629b0", "patch": "@@ -10,8 +10,8 @@ use hir_ty::db::HirDatabase;\n use syntax::ast;\n \n use crate::{\n-    Adt, Const, Enum, EnumVariant, Field, Function, MacroDef, Module, ModuleDef, Static, Struct,\n-    Trait, TypeAlias, Union,\n+    Adt, Const, Enum, Field, Function, MacroDef, Module, ModuleDef, Static, Struct, Trait,\n+    TypeAlias, Union, Variant,\n };\n \n pub trait HasAttrs {\n@@ -53,7 +53,7 @@ macro_rules! impl_has_attrs {\n \n impl_has_attrs![\n     (Field, FieldId),\n-    (EnumVariant, EnumVariantId),\n+    (Variant, EnumVariantId),\n     (Static, StaticId),\n     (Const, ConstId),\n     (Trait, TraitId),"}, {"sha": "d6c7e71ea5a50e8251de19355c117015493dc4ad", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=f6ed16674c461cb20c39e787fffab2269b9629b0", "patch": "@@ -161,7 +161,7 @@ pub enum ModuleDef {\n     Function(Function),\n     Adt(Adt),\n     // Can't be directly declared, but can be imported.\n-    EnumVariant(EnumVariant),\n+    Variant(Variant),\n     Const(Const),\n     Static(Static),\n     Trait(Trait),\n@@ -172,7 +172,7 @@ impl_from!(\n     Module,\n     Function,\n     Adt(Struct, Enum, Union),\n-    EnumVariant,\n+    Variant,\n     Const,\n     Static,\n     Trait,\n@@ -186,7 +186,7 @@ impl From<VariantDef> for ModuleDef {\n         match var {\n             VariantDef::Struct(t) => Adt::from(t).into(),\n             VariantDef::Union(t) => Adt::from(t).into(),\n-            VariantDef::EnumVariant(t) => t.into(),\n+            VariantDef::Variant(t) => t.into(),\n         }\n     }\n }\n@@ -197,7 +197,7 @@ impl ModuleDef {\n             ModuleDef::Module(it) => it.parent(db),\n             ModuleDef::Function(it) => Some(it.module(db)),\n             ModuleDef::Adt(it) => Some(it.module(db)),\n-            ModuleDef::EnumVariant(it) => Some(it.module(db)),\n+            ModuleDef::Variant(it) => Some(it.module(db)),\n             ModuleDef::Const(it) => Some(it.module(db)),\n             ModuleDef::Static(it) => Some(it.module(db)),\n             ModuleDef::Trait(it) => Some(it.module(db)),\n@@ -221,7 +221,7 @@ impl ModuleDef {\n             ModuleDef::Module(it) => it.parent(db)?,\n             ModuleDef::Function(it) => return Some(it.visibility(db)),\n             ModuleDef::Adt(it) => it.module(db),\n-            ModuleDef::EnumVariant(it) => {\n+            ModuleDef::Variant(it) => {\n                 let parent = it.parent_enum(db);\n                 let module = it.module(db);\n                 return module.visibility_of(db, &ModuleDef::Adt(Adt::Enum(parent)));\n@@ -241,7 +241,7 @@ impl ModuleDef {\n             ModuleDef::Adt(it) => Some(it.name(db)),\n             ModuleDef::Trait(it) => Some(it.name(db)),\n             ModuleDef::Function(it) => Some(it.name(db)),\n-            ModuleDef::EnumVariant(it) => Some(it.name(db)),\n+            ModuleDef::Variant(it) => Some(it.name(db)),\n             ModuleDef::TypeAlias(it) => Some(it.name(db)),\n             ModuleDef::Module(it) => it.name(db),\n             ModuleDef::Const(it) => it.name(db),\n@@ -455,7 +455,7 @@ impl Field {\n         let generic_def_id: GenericDefId = match self.parent {\n             VariantDef::Struct(it) => it.id.into(),\n             VariantDef::Union(it) => it.id.into(),\n-            VariantDef::EnumVariant(it) => it.parent.id.into(),\n+            VariantDef::Variant(it) => it.parent.id.into(),\n         };\n         let substs = Substs::type_params(db, generic_def_id);\n         let ty = db.field_types(var_id)[self.id].clone().subst(&substs);\n@@ -566,12 +566,8 @@ impl Enum {\n         db.enum_data(self.id).name.clone()\n     }\n \n-    pub fn variants(self, db: &dyn HirDatabase) -> Vec<EnumVariant> {\n-        db.enum_data(self.id)\n-            .variants\n-            .iter()\n-            .map(|(id, _)| EnumVariant { parent: self, id })\n-            .collect()\n+    pub fn variants(self, db: &dyn HirDatabase) -> Vec<Variant> {\n+        db.enum_data(self.id).variants.iter().map(|(id, _)| Variant { parent: self, id }).collect()\n     }\n \n     pub fn ty(self, db: &dyn HirDatabase) -> Type {\n@@ -580,12 +576,12 @@ impl Enum {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct EnumVariant {\n+pub struct Variant {\n     pub(crate) parent: Enum,\n     pub(crate) id: LocalEnumVariantId,\n }\n \n-impl EnumVariant {\n+impl Variant {\n     pub fn module(self, db: &dyn HirDatabase) -> Module {\n         self.parent.module(db)\n     }\n@@ -662,40 +658,40 @@ impl Adt {\n pub enum VariantDef {\n     Struct(Struct),\n     Union(Union),\n-    EnumVariant(EnumVariant),\n+    Variant(Variant),\n }\n-impl_from!(Struct, Union, EnumVariant for VariantDef);\n+impl_from!(Struct, Union, Variant for VariantDef);\n \n impl VariantDef {\n     pub fn fields(self, db: &dyn HirDatabase) -> Vec<Field> {\n         match self {\n             VariantDef::Struct(it) => it.fields(db),\n             VariantDef::Union(it) => it.fields(db),\n-            VariantDef::EnumVariant(it) => it.fields(db),\n+            VariantDef::Variant(it) => it.fields(db),\n         }\n     }\n \n     pub fn module(self, db: &dyn HirDatabase) -> Module {\n         match self {\n             VariantDef::Struct(it) => it.module(db),\n             VariantDef::Union(it) => it.module(db),\n-            VariantDef::EnumVariant(it) => it.module(db),\n+            VariantDef::Variant(it) => it.module(db),\n         }\n     }\n \n     pub fn name(&self, db: &dyn HirDatabase) -> Name {\n         match self {\n             VariantDef::Struct(s) => s.name(db),\n             VariantDef::Union(u) => u.name(db),\n-            VariantDef::EnumVariant(e) => e.name(db),\n+            VariantDef::Variant(e) => e.name(db),\n         }\n     }\n \n     pub(crate) fn variant_data(self, db: &dyn HirDatabase) -> Arc<VariantData> {\n         match self {\n             VariantDef::Struct(it) => it.variant_data(db),\n             VariantDef::Union(it) => it.variant_data(db),\n-            VariantDef::EnumVariant(it) => it.variant_data(db),\n+            VariantDef::Variant(it) => it.variant_data(db),\n         }\n     }\n }\n@@ -1095,7 +1091,7 @@ pub enum GenericDef {\n     Impl(Impl),\n     // enum variants cannot have generics themselves, but their parent enums\n     // can, and this makes some code easier to write\n-    EnumVariant(EnumVariant),\n+    Variant(Variant),\n     // consts can have type parameters from their parents (i.e. associated consts of traits)\n     Const(Const),\n }\n@@ -1105,7 +1101,7 @@ impl_from!(\n     Trait,\n     TypeAlias,\n     Impl,\n-    EnumVariant,\n+    Variant,\n     Const\n     for GenericDef\n );\n@@ -1847,7 +1843,7 @@ pub struct Callable {\n pub enum CallableKind {\n     Function(Function),\n     TupleStruct(Struct),\n-    TupleEnumVariant(EnumVariant),\n+    TupleEnumVariant(Variant),\n     Closure,\n }\n "}, {"sha": "8e0c571b8510283bb0007f42c7346669c00840ba", "filename": "crates/hir/src/from_id.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Ffrom_id.rs?ref=f6ed16674c461cb20c39e787fffab2269b9629b0", "patch": "@@ -9,8 +9,7 @@ use hir_def::{\n };\n \n use crate::{\n-    Adt, AssocItem, DefWithBody, EnumVariant, Field, GenericDef, Local, MacroDef, ModuleDef,\n-    VariantDef,\n+    Adt, AssocItem, DefWithBody, Field, GenericDef, Local, MacroDef, ModuleDef, Variant, VariantDef,\n };\n \n macro_rules! from_id {\n@@ -65,14 +64,14 @@ impl From<Adt> for AdtId {\n     }\n }\n \n-impl From<EnumVariantId> for EnumVariant {\n+impl From<EnumVariantId> for Variant {\n     fn from(id: EnumVariantId) -> Self {\n-        EnumVariant { parent: id.parent.into(), id: id.local_id }\n+        Variant { parent: id.parent.into(), id: id.local_id }\n     }\n }\n \n-impl From<EnumVariant> for EnumVariantId {\n-    fn from(def: EnumVariant) -> Self {\n+impl From<Variant> for EnumVariantId {\n+    fn from(def: Variant) -> Self {\n         EnumVariantId { parent: def.parent.id, local_id: def.id }\n     }\n }\n@@ -83,7 +82,7 @@ impl From<ModuleDefId> for ModuleDef {\n             ModuleDefId::ModuleId(it) => ModuleDef::Module(it.into()),\n             ModuleDefId::FunctionId(it) => ModuleDef::Function(it.into()),\n             ModuleDefId::AdtId(it) => ModuleDef::Adt(it.into()),\n-            ModuleDefId::EnumVariantId(it) => ModuleDef::EnumVariant(it.into()),\n+            ModuleDefId::EnumVariantId(it) => ModuleDef::Variant(it.into()),\n             ModuleDefId::ConstId(it) => ModuleDef::Const(it.into()),\n             ModuleDefId::StaticId(it) => ModuleDef::Static(it.into()),\n             ModuleDefId::TraitId(it) => ModuleDef::Trait(it.into()),\n@@ -99,7 +98,7 @@ impl From<ModuleDef> for ModuleDefId {\n             ModuleDef::Module(it) => ModuleDefId::ModuleId(it.into()),\n             ModuleDef::Function(it) => ModuleDefId::FunctionId(it.into()),\n             ModuleDef::Adt(it) => ModuleDefId::AdtId(it.into()),\n-            ModuleDef::EnumVariant(it) => ModuleDefId::EnumVariantId(it.into()),\n+            ModuleDef::Variant(it) => ModuleDefId::EnumVariantId(it.into()),\n             ModuleDef::Const(it) => ModuleDefId::ConstId(it.into()),\n             ModuleDef::Static(it) => ModuleDefId::StaticId(it.into()),\n             ModuleDef::Trait(it) => ModuleDefId::TraitId(it.into()),\n@@ -147,7 +146,7 @@ impl From<GenericDef> for GenericDefId {\n             GenericDef::Trait(it) => GenericDefId::TraitId(it.id),\n             GenericDef::TypeAlias(it) => GenericDefId::TypeAliasId(it.id),\n             GenericDef::Impl(it) => GenericDefId::ImplId(it.id),\n-            GenericDef::EnumVariant(it) => {\n+            GenericDef::Variant(it) => {\n                 GenericDefId::EnumVariantId(EnumVariantId { parent: it.parent.id, local_id: it.id })\n             }\n             GenericDef::Const(it) => GenericDefId::ConstId(it.id),\n@@ -164,7 +163,7 @@ impl From<GenericDefId> for GenericDef {\n             GenericDefId::TypeAliasId(it) => GenericDef::TypeAlias(it.into()),\n             GenericDefId::ImplId(it) => GenericDef::Impl(it.into()),\n             GenericDefId::EnumVariantId(it) => {\n-                GenericDef::EnumVariant(EnumVariant { parent: it.parent.into(), id: it.local_id })\n+                GenericDef::Variant(Variant { parent: it.parent.into(), id: it.local_id })\n             }\n             GenericDefId::ConstId(it) => GenericDef::Const(it.into()),\n         }\n@@ -185,7 +184,7 @@ impl From<VariantId> for VariantDef {\n     fn from(def: VariantId) -> Self {\n         match def {\n             VariantId::StructId(it) => VariantDef::Struct(it.into()),\n-            VariantId::EnumVariantId(it) => VariantDef::EnumVariant(it.into()),\n+            VariantId::EnumVariantId(it) => VariantDef::Variant(it.into()),\n             VariantId::UnionId(it) => VariantDef::Union(it.into()),\n         }\n     }\n@@ -195,7 +194,7 @@ impl From<VariantDef> for VariantId {\n     fn from(def: VariantDef) -> Self {\n         match def {\n             VariantDef::Struct(it) => VariantId::StructId(it.id),\n-            VariantDef::EnumVariant(it) => VariantId::EnumVariantId(it.into()),\n+            VariantDef::Variant(it) => VariantId::EnumVariantId(it.into()),\n             VariantDef::Union(it) => VariantId::UnionId(it.id),\n         }\n     }"}, {"sha": "0dc07c33e22832f2663088c8f1d0d148d59177d4", "filename": "crates/hir/src/has_source.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fhir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fhir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fhas_source.rs?ref=f6ed16674c461cb20c39e787fffab2269b9629b0", "patch": "@@ -10,8 +10,8 @@ use hir_expand::InFile;\n use syntax::ast;\n \n use crate::{\n-    db::HirDatabase, Const, Enum, EnumVariant, Field, FieldSource, Function, Impl, LifetimeParam,\n-    MacroDef, Module, Static, Struct, Trait, TypeAlias, TypeParam, Union,\n+    db::HirDatabase, Const, Enum, Field, FieldSource, Function, Impl, LifetimeParam, MacroDef,\n+    Module, Static, Struct, Trait, TypeAlias, TypeParam, Union, Variant,\n };\n \n pub trait HasSource {\n@@ -73,7 +73,7 @@ impl HasSource for Enum {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }\n-impl HasSource for EnumVariant {\n+impl HasSource for Variant {\n     type Ast = ast::Variant;\n     fn source(self, db: &dyn HirDatabase) -> InFile<ast::Variant> {\n         self.parent.id.child_source(db.upcast()).map(|map| map[self.id].clone())"}, {"sha": "bdd270c58d373e3e0d87594ca4289ebf5e37324e", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=f6ed16674c461cb20c39e787fffab2269b9629b0", "patch": "@@ -34,9 +34,9 @@ pub use crate::{\n     attrs::{HasAttrs, Namespace},\n     code_model::{\n         Access, Adt, AsAssocItem, AssocItem, AssocItemContainer, Callable, CallableKind, Const,\n-        Crate, CrateDependency, DefWithBody, Enum, EnumVariant, Field, FieldSource, Function,\n-        GenericDef, HasVisibility, Impl, LifetimeParam, Local, MacroDef, Module, ModuleDef,\n-        ScopeDef, Static, Struct, Trait, Type, TypeAlias, TypeParam, Union, VariantDef,\n+        Crate, CrateDependency, DefWithBody, Enum, Field, FieldSource, Function, GenericDef,\n+        HasVisibility, Impl, LifetimeParam, Local, MacroDef, Module, ModuleDef, ScopeDef, Static,\n+        Struct, Trait, Type, TypeAlias, TypeParam, Union, Variant, VariantDef,\n     },\n     has_source::HasSource,\n     semantics::{PathResolution, Semantics, SemanticsScope},"}, {"sha": "25ebf73d88ef47c591829c14cd84e93fbe29d539", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=f6ed16674c461cb20c39e787fffab2269b9629b0", "patch": "@@ -51,7 +51,7 @@ impl PathResolution {\n                 Some(TypeNs::BuiltinType(*builtin))\n             }\n             PathResolution::Def(ModuleDef::Const(_))\n-            | PathResolution::Def(ModuleDef::EnumVariant(_))\n+            | PathResolution::Def(ModuleDef::Variant(_))\n             | PathResolution::Def(ModuleDef::Function(_))\n             | PathResolution::Def(ModuleDef::Module(_))\n             | PathResolution::Def(ModuleDef::Static(_))\n@@ -715,7 +715,7 @@ to_def_impls![\n     (crate::Function, ast::Fn, fn_to_def),\n     (crate::Field, ast::RecordField, record_field_to_def),\n     (crate::Field, ast::TupleField, tuple_field_to_def),\n-    (crate::EnumVariant, ast::Variant, enum_variant_to_def),\n+    (crate::Variant, ast::Variant, enum_variant_to_def),\n     (crate::TypeParam, ast::TypeParam, type_param_to_def),\n     (crate::LifetimeParam, ast::LifetimeParam, lifetime_param_to_def),\n     (crate::MacroDef, ast::MacroRules, macro_rules_to_def),"}, {"sha": "bddc49c05a85686e63155e57bcc3fefa45cc446a", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=f6ed16674c461cb20c39e787fffab2269b9629b0", "patch": "@@ -28,8 +28,8 @@ use syntax::{\n };\n \n use crate::{\n-    db::HirDatabase, semantics::PathResolution, Adt, Const, EnumVariant, Field, Function, Local,\n-    MacroDef, ModuleDef, Static, Struct, Trait, Type, TypeAlias, TypeParam,\n+    db::HirDatabase, semantics::PathResolution, Adt, Const, Field, Function, Local, MacroDef,\n+    ModuleDef, Static, Struct, Trait, Type, TypeAlias, TypeParam, Variant,\n };\n use base_db::CrateId;\n \n@@ -230,7 +230,7 @@ impl SourceAnalyzer {\n             if let Some(VariantId::EnumVariantId(variant)) =\n                 self.infer.as_ref()?.variant_resolution_for_expr(expr_id)\n             {\n-                return Some(PathResolution::Def(ModuleDef::EnumVariant(variant.into())));\n+                return Some(PathResolution::Def(ModuleDef::Variant(variant.into())));\n             }\n         }\n \n@@ -242,7 +242,7 @@ impl SourceAnalyzer {\n             if let Some(VariantId::EnumVariantId(variant)) =\n                 self.infer.as_ref()?.variant_resolution_for_pat(pat_id)\n             {\n-                return Some(PathResolution::Def(ModuleDef::EnumVariant(variant.into())));\n+                return Some(PathResolution::Def(ModuleDef::Variant(variant.into())));\n             }\n         }\n \n@@ -251,7 +251,7 @@ impl SourceAnalyzer {\n             if let Some(VariantId::EnumVariantId(variant)) =\n                 self.infer.as_ref()?.variant_resolution_for_expr(expr_id)\n             {\n-                return Some(PathResolution::Def(ModuleDef::EnumVariant(variant.into())));\n+                return Some(PathResolution::Def(ModuleDef::Variant(variant.into())));\n             }\n         }\n \n@@ -260,7 +260,7 @@ impl SourceAnalyzer {\n             if let Some(VariantId::EnumVariantId(variant)) =\n                 self.infer.as_ref()?.variant_resolution_for_pat(pat_id)\n             {\n-                return Some(PathResolution::Def(ModuleDef::EnumVariant(variant.into())));\n+                return Some(PathResolution::Def(ModuleDef::Variant(variant.into())));\n             }\n         }\n \n@@ -459,7 +459,7 @@ pub(crate) fn resolve_hir_path(\n             TypeNs::AdtSelfType(it) | TypeNs::AdtId(it) => {\n                 PathResolution::Def(Adt::from(it).into())\n             }\n-            TypeNs::EnumVariantId(it) => PathResolution::Def(EnumVariant::from(it).into()),\n+            TypeNs::EnumVariantId(it) => PathResolution::Def(Variant::from(it).into()),\n             TypeNs::TypeAliasId(it) => PathResolution::Def(TypeAlias::from(it).into()),\n             TypeNs::BuiltinType(it) => PathResolution::Def(it.into()),\n             TypeNs::TraitId(it) => PathResolution::Def(Trait::from(it).into()),\n@@ -477,7 +477,7 @@ pub(crate) fn resolve_hir_path(\n                 ValueNs::ConstId(it) => PathResolution::Def(Const::from(it).into()),\n                 ValueNs::StaticId(it) => PathResolution::Def(Static::from(it).into()),\n                 ValueNs::StructId(it) => PathResolution::Def(Struct::from(it).into()),\n-                ValueNs::EnumVariantId(it) => PathResolution::Def(EnumVariant::from(it).into()),\n+                ValueNs::EnumVariantId(it) => PathResolution::Def(Variant::from(it).into()),\n                 ValueNs::ImplSelf(impl_id) => PathResolution::SelfType(impl_id.into()),\n             };\n             Some(res)\n@@ -526,7 +526,7 @@ fn resolve_hir_path_qualifier(\n         TypeNs::SelfType(it) => PathResolution::SelfType(it.into()),\n         TypeNs::GenericParam(id) => PathResolution::TypeParam(TypeParam { id }),\n         TypeNs::AdtSelfType(it) | TypeNs::AdtId(it) => PathResolution::Def(Adt::from(it).into()),\n-        TypeNs::EnumVariantId(it) => PathResolution::Def(EnumVariant::from(it).into()),\n+        TypeNs::EnumVariantId(it) => PathResolution::Def(Variant::from(it).into()),\n         TypeNs::TypeAliasId(it) => PathResolution::Def(TypeAlias::from(it).into()),\n         TypeNs::BuiltinType(it) => PathResolution::Def(it.into()),\n         TypeNs::TraitId(it) => PathResolution::Def(Trait::from(it).into()),"}, {"sha": "e8b89662385b8f7029d9fb95ffff86dda5660059", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=f6ed16674c461cb20c39e787fffab2269b9629b0", "patch": "@@ -166,7 +166,7 @@ fn missing_record_expr_field_fix(\n             def_file_id = source.file_id;\n             source.value.record_field_list()?\n         }\n-        VariantDef::EnumVariant(e) => {\n+        VariantDef::Variant(e) => {\n             module = e.module(sema.db);\n             let source = e.source(sema.db);\n             def_file_id = source.file_id;"}, {"sha": "cd8ec54fa72e20c469e167ee325e9b593725405a", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=f6ed16674c461cb20c39e787fffab2269b9629b0", "patch": "@@ -233,7 +233,7 @@ impl TryToNav for hir::ModuleDef {\n             hir::ModuleDef::Module(it) => it.to_nav(db),\n             hir::ModuleDef::Function(it) => it.to_nav(db),\n             hir::ModuleDef::Adt(it) => it.to_nav(db),\n-            hir::ModuleDef::EnumVariant(it) => it.to_nav(db),\n+            hir::ModuleDef::Variant(it) => it.to_nav(db),\n             hir::ModuleDef::Const(it) => it.to_nav(db),\n             hir::ModuleDef::Static(it) => it.to_nav(db),\n             hir::ModuleDef::Trait(it) => it.to_nav(db),\n@@ -262,7 +262,7 @@ impl ToNavFromAst for hir::Struct {\n impl ToNavFromAst for hir::Enum {\n     const KIND: SymbolKind = SymbolKind::Enum;\n }\n-impl ToNavFromAst for hir::EnumVariant {\n+impl ToNavFromAst for hir::Variant {\n     const KIND: SymbolKind = SymbolKind::Variant;\n }\n impl ToNavFromAst for hir::Union {"}, {"sha": "b61ea0b3e40919f75403d5c8d2b3cbcda30808b8", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=f6ed16674c461cb20c39e787fffab2269b9629b0", "patch": "@@ -181,7 +181,7 @@ fn rewrite_intra_doc_link(\n             ModuleDef::Module(it) => it.resolve_doc_path(db, link, ns),\n             ModuleDef::Function(it) => it.resolve_doc_path(db, link, ns),\n             ModuleDef::Adt(it) => it.resolve_doc_path(db, link, ns),\n-            ModuleDef::EnumVariant(it) => it.resolve_doc_path(db, link, ns),\n+            ModuleDef::Variant(it) => it.resolve_doc_path(db, link, ns),\n             ModuleDef::Const(it) => it.resolve_doc_path(db, link, ns),\n             ModuleDef::Static(it) => it.resolve_doc_path(db, link, ns),\n             ModuleDef::Trait(it) => it.resolve_doc_path(db, link, ns),\n@@ -390,7 +390,7 @@ fn get_symbol_filename(db: &dyn HirDatabase, definition: &ModuleDef) -> Option<S\n         ModuleDef::TypeAlias(t) => format!(\"type.{}.html\", t.name(db)),\n         ModuleDef::BuiltinType(t) => format!(\"primitive.{}.html\", t.as_name()),\n         ModuleDef::Function(f) => format!(\"fn.{}.html\", f.name(db)),\n-        ModuleDef::EnumVariant(ev) => {\n+        ModuleDef::Variant(ev) => {\n             format!(\"enum.{}.html#variant.{}\", ev.parent_enum(db).name(db), ev.name(db))\n         }\n         ModuleDef::Const(c) => format!(\"const.{}.html\", c.name(db)?),"}, {"sha": "52f993cc92b46f2d7778cfb5627bb882b57ca4a7", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=f6ed16674c461cb20c39e787fffab2269b9629b0", "patch": "@@ -297,7 +297,7 @@ fn definition_owner_name(db: &RootDatabase, def: &Definition) -> Option<String>\n                 AssocItemContainer::Trait(t) => Some(t.name(db)),\n                 AssocItemContainer::Impl(i) => i.target_ty(db).as_adt().map(|adt| adt.name(db)),\n             },\n-            ModuleDef::EnumVariant(e) => Some(e.parent_enum(db).name(db)),\n+            ModuleDef::Variant(e) => Some(e.parent_enum(db).name(db)),\n             _ => None,\n         },\n         _ => None,\n@@ -355,7 +355,7 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n             ModuleDef::Adt(Adt::Struct(it)) => from_def_source(db, it, mod_path),\n             ModuleDef::Adt(Adt::Union(it)) => from_def_source(db, it, mod_path),\n             ModuleDef::Adt(Adt::Enum(it)) => from_def_source(db, it, mod_path),\n-            ModuleDef::EnumVariant(it) => from_def_source(db, it, mod_path),\n+            ModuleDef::Variant(it) => from_def_source(db, it, mod_path),\n             ModuleDef::Const(it) => from_def_source(db, it, mod_path),\n             ModuleDef::Static(it) => from_def_source(db, it, mod_path),\n             ModuleDef::Trait(it) => from_def_source(db, it, mod_path),"}, {"sha": "2f2b99130e3b117ec6405609219e79ad21207d6e", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=f6ed16674c461cb20c39e787fffab2269b9629b0", "patch": "@@ -167,7 +167,7 @@ fn module_def_doctest(sema: &Semantics<RootDatabase>, def: hir::ModuleDef) -> Op\n         hir::ModuleDef::Module(it) => it.attrs(sema.db),\n         hir::ModuleDef::Function(it) => it.attrs(sema.db),\n         hir::ModuleDef::Adt(it) => it.attrs(sema.db),\n-        hir::ModuleDef::EnumVariant(it) => it.attrs(sema.db),\n+        hir::ModuleDef::Variant(it) => it.attrs(sema.db),\n         hir::ModuleDef::Const(it) => it.attrs(sema.db),\n         hir::ModuleDef::Static(it) => it.attrs(sema.db),\n         hir::ModuleDef::Trait(it) => it.attrs(sema.db),"}, {"sha": "00c717c7c7e9256f833cb6ce2f4b199fa9ba4f7f", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=f6ed16674c461cb20c39e787fffab2269b9629b0", "patch": "@@ -781,7 +781,7 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n             hir::ModuleDef::Adt(hir::Adt::Struct(_)) => HighlightTag::Symbol(SymbolKind::Struct),\n             hir::ModuleDef::Adt(hir::Adt::Enum(_)) => HighlightTag::Symbol(SymbolKind::Enum),\n             hir::ModuleDef::Adt(hir::Adt::Union(_)) => HighlightTag::Symbol(SymbolKind::Union),\n-            hir::ModuleDef::EnumVariant(_) => HighlightTag::Symbol(SymbolKind::Variant),\n+            hir::ModuleDef::Variant(_) => HighlightTag::Symbol(SymbolKind::Variant),\n             hir::ModuleDef::Const(konst) => {\n                 let mut h = Highlight::new(HighlightTag::Symbol(SymbolKind::Const));\n                 if konst.as_assoc_item(db).is_some() {"}, {"sha": "9d7dce1d47dbccd8feb5ac2c87064f951f60f931", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=f6ed16674c461cb20c39e787fffab2269b9629b0", "patch": "@@ -66,7 +66,7 @@ impl Definition {\n                     hir::Adt::Union(it) => it.name(db),\n                     hir::Adt::Enum(it) => it.name(db),\n                 },\n-                hir::ModuleDef::EnumVariant(it) => it.name(db),\n+                hir::ModuleDef::Variant(it) => it.name(db),\n                 hir::ModuleDef::Const(it) => it.name(db)?,\n                 hir::ModuleDef::Static(it) => it.name(db)?,\n                 hir::ModuleDef::Trait(it) => it.name(db),\n@@ -207,7 +207,7 @@ impl NameClass {\n                     Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n                 },\n                 ast::Variant(it) => {\n-                    let def: hir::EnumVariant = sema.to_def(&it)?;\n+                    let def: hir::Variant = sema.to_def(&it)?;\n                     Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n                 },\n                 ast::Fn(it) => {"}, {"sha": "ff10f71c358aa9ef5948ce94acfe79d8900a9aec", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ed16674c461cb20c39e787fffab2269b9629b0/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=f6ed16674c461cb20c39e787fffab2269b9629b0", "patch": "@@ -141,7 +141,7 @@ impl Definition {\n                 hir::GenericDef::Trait(it) => it.source(db).value.syntax().text_range(),\n                 hir::GenericDef::TypeAlias(it) => it.source(db).value.syntax().text_range(),\n                 hir::GenericDef::Impl(it) => it.source(db).value.syntax().text_range(),\n-                hir::GenericDef::EnumVariant(it) => it.source(db).value.syntax().text_range(),\n+                hir::GenericDef::Variant(it) => it.source(db).value.syntax().text_range(),\n                 hir::GenericDef::Const(it) => it.source(db).value.syntax().text_range(),\n             };\n             let mut res = FxHashMap::default();"}]}