{"sha": "826cda664089f6468460e68a1f5f7ae0a47d1587", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNmNkYTY2NDA4OWY2NDY4NDYwZTY4YTFmNWY3YWUwYTQ3ZDE1ODc=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-12-17T15:31:11Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-12-17T15:41:59Z"}, "message": "profiler: improve readability", "tree": {"sha": "64e5232bd084356c555be46f552e22c812ba1978", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64e5232bd084356c555be46f552e22c812ba1978"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/826cda664089f6468460e68a1f5f7ae0a47d1587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/826cda664089f6468460e68a1f5f7ae0a47d1587", "html_url": "https://github.com/rust-lang/rust/commit/826cda664089f6468460e68a1f5f7ae0a47d1587", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/826cda664089f6468460e68a1f5f7ae0a47d1587/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b549ebbdf30224b229f90f00c79225e1f7b346e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b549ebbdf30224b229f90f00c79225e1f7b346e", "html_url": "https://github.com/rust-lang/rust/commit/1b549ebbdf30224b229f90f00c79225e1f7b346e"}], "stats": {"total": 115, "additions": 56, "deletions": 59}, "files": [{"sha": "0d4610d288ce6f0818e975b9da43e49f70c647a5", "filename": "src/librustc_driver/profile/mod.rs", "status": "modified", "additions": 56, "deletions": 59, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/826cda664089f6468460e68a1f5f7ae0a47d1587/src%2Flibrustc_driver%2Fprofile%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/826cda664089f6468460e68a1f5f7ae0a47d1587/src%2Flibrustc_driver%2Fprofile%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Fmod.rs?ref=826cda664089f6468460e68a1f5f7ae0a47d1587", "patch": "@@ -91,50 +91,48 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n             ProfileQueriesMsg::Dump(params) => {\n                 assert!(stack.is_empty());\n                 assert!(frame.parse_st == ParseState::Clear);\n-                {\n-                    // write log of all messages\n-                    if params.dump_profq_msg_log {\n-                        let mut log_file =\n-                            File::create(format!(\"{}.log.txt\", params.path)).unwrap();\n-                        for m in profq_msgs.iter() {\n-                            writeln!(&mut log_file, \"{:?}\", m).unwrap()\n-                        };\n-                    }\n \n-                    // write HTML file, and counts file\n-                    let html_path = format!(\"{}.html\", params.path);\n-                    let mut html_file = File::create(&html_path).unwrap();\n+                // write log of all messages\n+                if params.dump_profq_msg_log {\n+                    let mut log_file =\n+                        File::create(format!(\"{}.log.txt\", params.path)).unwrap();\n+                    for m in profq_msgs.iter() {\n+                        writeln!(&mut log_file, \"{:?}\", m).unwrap()\n+                    };\n+                }\n \n-                    let counts_path = format!(\"{}.counts.txt\", params.path);\n-                    let mut counts_file = File::create(&counts_path).unwrap();\n+                // write HTML file, and counts file\n+                let html_path = format!(\"{}.html\", params.path);\n+                let mut html_file = File::create(&html_path).unwrap();\n \n-                    writeln!(html_file,\n-                        \"<html>\\n<head>\\n<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{}\\\">\",\n-                        \"profile_queries.css\").unwrap();\n-                    writeln!(html_file, \"<style>\").unwrap();\n-                    trace::write_style(&mut html_file);\n-                    writeln!(html_file, \"</style>\\n</head>\\n<body>\").unwrap();\n-                    trace::write_traces(&mut html_file, &mut counts_file, &frame.traces);\n-                    writeln!(html_file, \"</body>\\n</html>\").unwrap();\n+                let counts_path = format!(\"{}.counts.txt\", params.path);\n+                let mut counts_file = File::create(&counts_path).unwrap();\n \n-                    let ack_path = format!(\"{}.ack\", params.path);\n-                    let ack_file = File::create(&ack_path).unwrap();\n-                    drop(ack_file);\n+                writeln!(html_file,\n+                    \"<html>\\n<head>\\n<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{}\\\">\",\n+                    \"profile_queries.css\").unwrap();\n+                writeln!(html_file, \"<style>\").unwrap();\n+                trace::write_style(&mut html_file);\n+                writeln!(html_file, \"</style>\\n</head>\\n<body>\").unwrap();\n+                trace::write_traces(&mut html_file, &mut counts_file, &frame.traces);\n+                writeln!(html_file, \"</body>\\n</html>\").unwrap();\n \n-                    // Tell main thread that we are done, e.g., so it can exit\n-                    params.ack.send(()).unwrap();\n-                }\n-                continue\n+                let ack_path = format!(\"{}.ack\", params.path);\n+                let ack_file = File::create(&ack_path).unwrap();\n+                drop(ack_file);\n+\n+                // Tell main thread that we are done, e.g., so it can exit\n+                params.ack.send(()).unwrap();\n             }\n             // Actual query message:\n             msg => {\n                 // Record msg in our log\n                 profq_msgs.push(msg.clone());\n                 // Respond to the message, knowing that we've already handled Halt and Dump, above.\n                 match (frame.parse_st.clone(), msg) {\n-                    (_,ProfileQueriesMsg::Halt) => unreachable!(),\n-                    (_,ProfileQueriesMsg::Dump(_)) => unreachable!(),\n-\n+                    (_, ProfileQueriesMsg::Halt) | (_, ProfileQueriesMsg::Dump(_)) => {\n+                        unreachable!();\n+                    },\n                     // Parse State: Clear\n                     (ParseState::Clear,\n                      ProfileQueriesMsg::QueryBegin(span, querymsg)) => {\n@@ -161,8 +159,8 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n                                     ParseState::HaveQuery(q, start) => {\n                                         let duration = start.elapsed();\n                                         frame = StackFrame{\n-                                            parse_st:ParseState::Clear,\n-                                            traces:old_frame.traces\n+                                            parse_st: ParseState::Clear,\n+                                            traces: old_frame.traces\n                                         };\n                                         let dur_extent = total_duration(&provider_extent);\n                                         let trace = Rec {\n@@ -179,18 +177,16 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n                             }\n                         }\n                     },\n-\n-\n                     (ParseState::Clear,\n                      ProfileQueriesMsg::TimeBegin(msg)) => {\n                         let start = Instant::now();\n                         frame.parse_st = ParseState::HaveTimeBegin(msg, start);\n                         stack.push(frame);\n-                        frame = StackFrame{parse_st:ParseState::Clear, traces:vec![]};\n+                        frame = StackFrame{parse_st: ParseState::Clear, traces: vec![]};\n+                    },\n+                    (_, ProfileQueriesMsg::TimeBegin(_)) => {\n+                        panic!(\"parse error; did not expect time begin here\");\n                     },\n-                    (_, ProfileQueriesMsg::TimeBegin(_)) =>\n-                        panic!(\"parse error; did not expect time begin here\"),\n-\n                     (ParseState::Clear,\n                      ProfileQueriesMsg::TimeEnd) => {\n                         let provider_extent = frame.traces;\n@@ -202,8 +198,8 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n                                     ParseState::HaveTimeBegin(msg, start) => {\n                                         let duration = start.elapsed();\n                                         frame = StackFrame{\n-                                            parse_st:ParseState::Clear,\n-                                            traces:old_frame.traces\n+                                            parse_st: ParseState::Clear,\n+                                            traces: old_frame.traces\n                                         };\n                                         let dur_extent = total_duration(&provider_extent);\n                                         let trace = Rec {\n@@ -220,18 +216,19 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n                             }\n                         }\n                     },\n-                    (_, ProfileQueriesMsg::TimeEnd) => { panic!(\"parse error\") }\n-\n+                    (_, ProfileQueriesMsg::TimeEnd) => {\n+                        panic!(\"parse error\")\n+                    },\n                     (ParseState::Clear,\n                      ProfileQueriesMsg::TaskBegin(key)) => {\n                         let start = Instant::now();\n                         frame.parse_st = ParseState::HaveTaskBegin(key, start);\n                         stack.push(frame);\n-                        frame = StackFrame{parse_st:ParseState::Clear, traces:vec![]};\n+                        frame = StackFrame{ parse_st: ParseState::Clear, traces: vec![] };\n+                    },\n+                    (_, ProfileQueriesMsg::TaskBegin(_)) => {\n+                        panic!(\"parse error; did not expect time begin here\");\n                     },\n-                    (_, ProfileQueriesMsg::TaskBegin(_)) =>\n-                        panic!(\"parse error; did not expect time begin here\"),\n-\n                     (ParseState::Clear,\n                      ProfileQueriesMsg::TaskEnd) => {\n                         let provider_extent = frame.traces;\n@@ -243,8 +240,8 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n                                     ParseState::HaveTaskBegin(key, start) => {\n                                         let duration = start.elapsed();\n                                         frame = StackFrame{\n-                                            parse_st:ParseState::Clear,\n-                                            traces:old_frame.traces\n+                                            parse_st: ParseState::Clear,\n+                                            traces: old_frame.traces\n                                         };\n                                         let dur_extent = total_duration(&provider_extent);\n                                         let trace = Rec {\n@@ -261,8 +258,9 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n                             }\n                         }\n                     },\n-                    (_, ProfileQueriesMsg::TaskEnd) => { panic!(\"parse error\") }\n-\n+                    (_, ProfileQueriesMsg::TaskEnd) => {\n+                        panic!(\"parse error\")\n+                    },\n                     // Parse State: HaveQuery\n                     (ParseState::HaveQuery(q,start),\n                      ProfileQueriesMsg::CacheHit) => {\n@@ -277,26 +275,25 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n                         frame.traces.push( trace );\n                         frame.parse_st = ParseState::Clear;\n                     },\n-                    (ParseState::HaveQuery(_,_),\n+                    (ParseState::HaveQuery(_, _),\n                      ProfileQueriesMsg::ProviderBegin) => {\n                         stack.push(frame);\n-                        frame = StackFrame{parse_st:ParseState::Clear, traces:vec![]};\n+                        frame = StackFrame{ parse_st: ParseState::Clear, traces: vec![] };\n                     },\n \n                     // Parse errors:\n \n-                    (ParseState::HaveQuery(q,_),\n+                    (ParseState::HaveQuery(q, _),\n                      ProfileQueriesMsg::ProviderEnd) => {\n                         panic!(\"parse error: unexpected ProviderEnd; \\\n                                 expected something else to follow BeginQuery for {:?}\", q)\n                     },\n-                    (ParseState::HaveQuery(q1,_),\n-                     ProfileQueriesMsg::QueryBegin(span2,querymsg2)) => {\n+                    (ParseState::HaveQuery(q1, _),\n+                     ProfileQueriesMsg::QueryBegin(span2, querymsg2)) => {\n                         panic!(\"parse error: unexpected QueryBegin; \\\n                                 earlier query is unfinished: {:?} and now {:?}\",\n-                               q1, Query{span:span2, msg:querymsg2})\n+                               q1, Query{span:span2, msg: querymsg2})\n                     },\n-\n                     (ParseState::HaveTimeBegin(_, _), _) => {\n                         unreachable!()\n                     },"}]}