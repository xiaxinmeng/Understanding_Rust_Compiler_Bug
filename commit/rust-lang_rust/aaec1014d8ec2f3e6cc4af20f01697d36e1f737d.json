{"sha": "aaec1014d8ec2f3e6cc4af20f01697d36e1f737d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZWMxMDE0ZDhlYzJmM2U2Y2M0YWYyMGYwMTY5N2QzNmUxZjczN2Q=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-07-27T14:11:19Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-08-04T23:44:05Z"}, "message": "strongly-typed passes", "tree": {"sha": "1810793b574a92c0960bdafd9f20466be5b89944", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1810793b574a92c0960bdafd9f20466be5b89944"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaec1014d8ec2f3e6cc4af20f01697d36e1f737d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaec1014d8ec2f3e6cc4af20f01697d36e1f737d", "html_url": "https://github.com/rust-lang/rust/commit/aaec1014d8ec2f3e6cc4af20f01697d36e1f737d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaec1014d8ec2f3e6cc4af20f01697d36e1f737d/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "667fdc1ce49aa5be2a11bf565f27f8118bd7c4d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/667fdc1ce49aa5be2a11bf565f27f8118bd7c4d3", "html_url": "https://github.com/rust-lang/rust/commit/667fdc1ce49aa5be2a11bf565f27f8118bd7c4d3"}], "stats": {"total": 135, "additions": 86, "deletions": 49}, "files": [{"sha": "f59d3fb68bfb556bb308a436b37dcbee9c6c4e67", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aaec1014d8ec2f3e6cc4af20f01697d36e1f737d/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaec1014d8ec2f3e6cc4af20f01697d36e1f737d/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=aaec1014d8ec2f3e6cc4af20f01697d36e1f737d", "patch": "@@ -26,6 +26,7 @@\n #![feature(entry_and_modify)]\n #![feature(ptr_offset_from)]\n #![feature(crate_visibility_modifier)]\n+#![feature(const_fn)]\n \n #![recursion_limit=\"256\"]\n \n@@ -367,8 +368,8 @@ fn main_args(args: &[String]) -> isize {\n \n     if matches.opt_strs(\"passes\") == [\"list\"] {\n         println!(\"Available passes for running rustdoc:\");\n-        for &(name, _, description) in passes::PASSES {\n-            println!(\"{:>20} - {}\", name, description);\n+        for pass in passes::PASSES {\n+            println!(\"{:>20} - {}\", pass.name(), pass.description());\n         }\n         println!(\"\\nDefault passes for rustdoc:\");\n         for &name in passes::DEFAULT_PASSES {\n@@ -751,8 +752,13 @@ where R: 'static + Send,\n \n         for pass in &passes {\n             // determine if we know about this pass\n-            let pass = match passes::PASSES.iter().find(|(p, ..)| p == pass) {\n-                Some(pass) => pass.1,\n+            let pass = match passes::PASSES.iter().find(|p| p.name() == pass) {\n+                Some(pass) => if let Some(pass) = pass.late_fn() {\n+                    pass\n+                } else {\n+                    // not a late pass, but still valid so don't report the error\n+                    continue\n+                }\n                 None => {\n                     error!(\"unknown pass {}, skipping\", *pass);\n "}, {"sha": "33d052775ba76d3af28bdbe16769878dc83b27c9", "filename": "src/librustdoc/passes/collapse_docs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aaec1014d8ec2f3e6cc4af20f01697d36e1f737d/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaec1014d8ec2f3e6cc4af20f01697d36e1f737d/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs?ref=aaec1014d8ec2f3e6cc4af20f01697d36e1f737d", "patch": "@@ -11,8 +11,13 @@\n use clean::{self, DocFragment, Item};\n use fold;\n use fold::DocFolder;\n+use passes::Pass;\n use std::mem::replace;\n \n+pub const COLLAPSE_DOCS: Pass =\n+    Pass::late(\"collapse-docs\", collapse_docs,\n+        \"concatenates all document attributes into one document attribute\");\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n enum DocFragmentKind {\n     Sugared,"}, {"sha": "e3f867d7fb1cf7a0a1e077a709826ccbc3577f2e", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 46, "deletions": 42, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/aaec1014d8ec2f3e6cc4af20f01697d36e1f737d/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaec1014d8ec2f3e6cc4af20f01697d36e1f737d/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=aaec1014d8ec2f3e6cc4af20f01697d36e1f737d", "patch": "@@ -18,61 +18,65 @@ use fold;\n use fold::StripItem;\n \n mod collapse_docs;\n-pub use self::collapse_docs::collapse_docs;\n+pub use self::collapse_docs::COLLAPSE_DOCS;\n \n mod strip_hidden;\n-pub use self::strip_hidden::strip_hidden;\n+pub use self::strip_hidden::STRIP_HIDDEN;\n \n mod strip_private;\n-pub use self::strip_private::strip_private;\n+pub use self::strip_private::STRIP_PRIVATE;\n \n mod strip_priv_imports;\n-pub use self::strip_priv_imports::strip_priv_imports;\n+pub use self::strip_priv_imports::STRIP_PRIV_IMPORTS;\n \n mod unindent_comments;\n-pub use self::unindent_comments::unindent_comments;\n+pub use self::unindent_comments::UNINDENT_COMMENTS;\n \n mod propagate_doc_cfg;\n-pub use self::propagate_doc_cfg::propagate_doc_cfg;\n+pub use self::propagate_doc_cfg::PROPAGATE_DOC_CFG;\n \n-type Pass = (\n-    &'static str,                     // name\n-    fn(clean::Crate) -> clean::Crate, // fn\n-    &'static str,\n-); // description\n+#[derive(Copy, Clone, Debug)]\n+pub enum Pass {\n+    LatePass {\n+        name: &'static str,\n+        pass: fn(clean::Crate) -> clean::Crate,\n+        description: &'static str,\n+    }\n+}\n+\n+impl Pass {\n+    pub const fn late(name: &'static str,\n+                      pass: fn(clean::Crate) -> clean::Crate,\n+                      description: &'static str) -> Pass {\n+        Pass::LatePass { name, pass, description }\n+    }\n+\n+    pub fn name(self) -> &'static str {\n+        match self {\n+            Pass::LatePass { name, .. } => name,\n+        }\n+    }\n+\n+    pub fn description(self) -> &'static str {\n+        match self {\n+            Pass::LatePass { description, .. } => description,\n+        }\n+    }\n+\n+    pub fn late_fn(self) -> Option<fn(clean::Crate) -> clean::Crate> {\n+        match self {\n+            Pass::LatePass { pass, .. } => Some(pass),\n+        }\n+    }\n+}\n \n pub const PASSES: &'static [Pass] = &[\n-    (\n-        \"strip-hidden\",\n-        strip_hidden,\n-        \"strips all doc(hidden) items from the output\",\n-    ),\n-    (\n-        \"unindent-comments\",\n-        unindent_comments,\n-        \"removes excess indentation on comments in order for markdown to like it\",\n-    ),\n-    (\n-        \"collapse-docs\",\n-        collapse_docs,\n-        \"concatenates all document attributes into one document attribute\",\n-    ),\n-    (\n-        \"strip-private\",\n-        strip_private,\n-        \"strips all private items from a crate which cannot be seen externally, \\\n-         implies strip-priv-imports\",\n-    ),\n-    (\n-        \"strip-priv-imports\",\n-        strip_priv_imports,\n-        \"strips all private import statements (`use`, `extern crate`) from a crate\",\n-    ),\n-    (\n-        \"propagate-doc-cfg\",\n-        propagate_doc_cfg,\n-        \"propagates `#[doc(cfg(...))]` to child items\",\n-    ),\n+    STRIP_HIDDEN,\n+    UNINDENT_COMMENTS,\n+    COLLAPSE_DOCS,\n+    STRIP_PRIVATE,\n+    STRIP_PRIV_IMPORTS,\n+    PROPAGATE_DOC_CFG,\n ];\n \n pub const DEFAULT_PASSES: &'static [&'static str] = &["}, {"sha": "69093846302a7c65da5f60b6811aebcf240860a8", "filename": "src/librustdoc/passes/propagate_doc_cfg.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aaec1014d8ec2f3e6cc4af20f01697d36e1f737d/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaec1014d8ec2f3e6cc4af20f01697d36e1f737d/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs?ref=aaec1014d8ec2f3e6cc4af20f01697d36e1f737d", "patch": "@@ -13,6 +13,11 @@ use std::sync::Arc;\n use clean::{Crate, Item};\n use clean::cfg::Cfg;\n use fold::DocFolder;\n+use passes::Pass;\n+\n+pub const PROPAGATE_DOC_CFG: Pass =\n+    Pass::late(\"propagate-doc-cfg\", propagate_doc_cfg,\n+        \"propagates `#[doc(cfg(...))]` to child items\");\n \n pub fn propagate_doc_cfg(cr: Crate) -> Crate {\n     CfgPropagator { parent_cfg: None }.fold_crate(cr)"}, {"sha": "2093da41222b6f0210c15596503ecb54cc91480c", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aaec1014d8ec2f3e6cc4af20f01697d36e1f737d/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaec1014d8ec2f3e6cc4af20f01697d36e1f737d/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=aaec1014d8ec2f3e6cc4af20f01697d36e1f737d", "patch": "@@ -16,7 +16,11 @@ use clean::Item;\n use fold;\n use fold::DocFolder;\n use fold::StripItem;\n-use passes::ImplStripper;\n+use passes::{ImplStripper, Pass};\n+\n+pub const STRIP_HIDDEN: Pass =\n+    Pass::late(\"strip-hidden\", strip_hidden,\n+               \"strips all doc(hidden) items from the output\");\n \n /// Strip items marked `#[doc(hidden)]`\n pub fn strip_hidden(krate: clean::Crate) -> clean::Crate {"}, {"sha": "62f8b1092c7cb4cf4aa24b795462cbde1f502fb5", "filename": "src/librustdoc/passes/strip_priv_imports.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aaec1014d8ec2f3e6cc4af20f01697d36e1f737d/src%2Flibrustdoc%2Fpasses%2Fstrip_priv_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaec1014d8ec2f3e6cc4af20f01697d36e1f737d/src%2Flibrustdoc%2Fpasses%2Fstrip_priv_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_priv_imports.rs?ref=aaec1014d8ec2f3e6cc4af20f01697d36e1f737d", "patch": "@@ -10,7 +10,10 @@\n \n use clean;\n use fold::DocFolder;\n-use passes::ImportStripper;\n+use passes::{ImportStripper, Pass};\n+\n+pub const STRIP_PRIV_IMPORTS: Pass = Pass::late(\"strip-priv-imports\", strip_priv_imports,\n+     \"strips all private import statements (`use`, `extern crate`) from a crate\");\n \n pub fn strip_priv_imports(krate: clean::Crate)  -> clean::Crate {\n     ImportStripper.fold_crate(krate)"}, {"sha": "0011aedd80acae7d640fd82557567c7244e5f259", "filename": "src/librustdoc/passes/strip_private.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aaec1014d8ec2f3e6cc4af20f01697d36e1f737d/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaec1014d8ec2f3e6cc4af20f01697d36e1f737d/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs?ref=aaec1014d8ec2f3e6cc4af20f01697d36e1f737d", "patch": "@@ -12,7 +12,12 @@ use rustc::util::nodemap::DefIdSet;\n \n use clean;\n use fold::DocFolder;\n-use passes::{ImplStripper, ImportStripper, Stripper};\n+use passes::{ImplStripper, ImportStripper, Stripper, Pass};\n+\n+pub const STRIP_PRIVATE: Pass =\n+    Pass::late(\"strip-private\", strip_private,\n+        \"strips all private items from a crate which cannot be seen externally, \\\n+         implies strip-priv-imports\");\n \n /// Strip private items from the point of view of a crate or externally from a\n /// crate, specified by the `xcrate` flag."}, {"sha": "6d875c107c874f2f719aab039f6f8fba791be90b", "filename": "src/librustdoc/passes/unindent_comments.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aaec1014d8ec2f3e6cc4af20f01697d36e1f737d/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaec1014d8ec2f3e6cc4af20f01697d36e1f737d/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs?ref=aaec1014d8ec2f3e6cc4af20f01697d36e1f737d", "patch": "@@ -14,6 +14,11 @@ use std::usize;\n \n use clean::{self, DocFragment, Item};\n use fold::{self, DocFolder};\n+use passes::Pass;\n+\n+pub const UNINDENT_COMMENTS: Pass =\n+    Pass::late(\"unindent-comments\", unindent_comments,\n+        \"removes excess indentation on comments in order for markdown to like it\");\n \n pub fn unindent_comments(krate: clean::Crate) -> clean::Crate {\n     CommentCleaner.fold_crate(krate)"}]}