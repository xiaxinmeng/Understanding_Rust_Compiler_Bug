{"sha": "a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5OGIyZWJiNGFkMDkwZDNkN2VhYTlhYjNiMWQ5OGJlMDg2N2U5OTA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-03T20:15:32Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-03T20:15:32Z"}, "message": "Change 'stratum' to the friendlier term 'layer'.", "tree": {"sha": "2d9036d432ea83e08f03720854ad10d2477e513c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d9036d432ea83e08f03720854ad10d2477e513c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990", "html_url": "https://github.com/rust-lang/rust/commit/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bdb93266d3a88e407f7996d374a8364b84b8e01", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bdb93266d3a88e407f7996d374a8364b84b8e01", "html_url": "https://github.com/rust-lang/rust/commit/7bdb93266d3a88e407f7996d374a8364b84b8e01"}], "stats": {"total": 210, "additions": 105, "deletions": 105}, "files": [{"sha": "79a8176740b4a2673186c34e4f73b9f694cb421e", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990", "patch": "@@ -265,7 +265,7 @@ BE_MLS := $(addprefix boot/be/, x86.ml ra.ml pe.ml elf.ml \\\n           macho.ml)\n IL_MLS := $(addprefix boot/be/, asm.ml il.ml abi.ml)\n ME_MLS := $(addprefix boot/me/, walk.ml semant.ml resolve.ml alias.ml \\\n-            simplify.ml type.ml dead.ml stratum.ml effect.ml typestate.ml \\\n+            simplify.ml type.ml dead.ml layer.ml effect.ml typestate.ml \\\n             loop.ml layout.ml transutil.ml trans.ml dwarf.ml)\n FE_MLS := $(addprefix boot/fe/, ast.ml token.ml lexer.ml parser.ml \\\n             extfmt.ml pexp.ml item.ml cexp.ml fuzz.ml)"}, {"sha": "c1dc2894adea21287679f1db5bbc430d616264aa", "filename": "src/boot/driver/llvm/glue.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fboot%2Fdriver%2Fllvm%2Fglue.ml", "raw_url": "https://github.com/rust-lang/rust/raw/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fboot%2Fdriver%2Fllvm%2Fglue.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fllvm%2Fglue.ml?ref=a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990", "patch": "@@ -18,7 +18,7 @@ let alt_pipeline sess sem_cx crate =\n       Simplify.process_crate;\n       Type.process_crate;\n       Typestate.process_crate;\n-      Stratum.process_crate;\n+      Layer.process_crate;\n       Effect.process_crate;\n       Loop.process_crate;\n       Alias.process_crate;"}, {"sha": "2bbc832bf04ffcc0dfbc1099ac3e79bb9ae1fcc6", "filename": "src/boot/driver/main.ml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fboot%2Fdriver%2Fmain.ml", "raw_url": "https://github.com/rust-lang/rust/raw/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fboot%2Fdriver%2Fmain.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fmain.ml?ref=a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990", "patch": "@@ -38,7 +38,7 @@ let (sess:Session.sess) =\n     Session.sess_log_resolve = false;\n     Session.sess_log_type = false;\n     Session.sess_log_simplify = false;\n-    Session.sess_log_stratum = false;\n+    Session.sess_log_layer = false;\n     Session.sess_log_effect = false;\n     Session.sess_log_typestate = false;\n     Session.sess_log_loop = false;\n@@ -180,8 +180,8 @@ let argspecs =\n        \"-ltype\"     \"log type checking\");\n     (flag (fun _ -> sess.Session.sess_log_simplify <- true)\n        \"-lsimplify\" \"log simplification\");\n-    (flag (fun _ -> sess.Session.sess_log_stratum <- true)\n-       \"-lstratum\"  \"log stratum checking\");\n+    (flag (fun _ -> sess.Session.sess_log_layer <- true)\n+       \"-llayer\"  \"log layer checking\");\n     (flag (fun _ -> sess.Session.sess_log_effect <- true)\n        \"-leffect\"   \"log effect checking\");\n     (flag (fun _ -> sess.Session.sess_log_typestate <- true)\n@@ -396,7 +396,7 @@ let main_pipeline _ =\n          Simplify.process_crate;\n          Type.process_crate;\n          Typestate.process_crate;\n-         Stratum.process_crate;\n+         Layer.process_crate;\n          Effect.process_crate;\n          Loop.process_crate;\n          Alias.process_crate;"}, {"sha": "0b02096f2ced682fae71ebc49343e6b028073120", "filename": "src/boot/driver/session.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fboot%2Fdriver%2Fsession.ml", "raw_url": "https://github.com/rust-lang/rust/raw/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fboot%2Fdriver%2Fsession.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fsession.ml?ref=a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990", "patch": "@@ -24,7 +24,7 @@ type sess =\n   mutable sess_log_resolve: bool;\n   mutable sess_log_type: bool;\n   mutable sess_log_simplify: bool;\n-  mutable sess_log_stratum: bool;\n+  mutable sess_log_layer: bool;\n   mutable sess_log_effect: bool;\n   mutable sess_log_typestate: bool;\n   mutable sess_log_dead: bool;"}, {"sha": "5e814af3af586c7b54618ff267c99dc024f67f3f", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990", "patch": "@@ -34,10 +34,10 @@ type effect =\n   | EFF_unsafe\n ;;\n \n-type stratum =\n-    STRAT_value\n-  | STRAT_state\n-  | STRAT_gc\n+type layer =\n+    LAYER_value\n+  | LAYER_state\n+  | LAYER_gc\n ;;\n \n type opacity =\n@@ -94,7 +94,7 @@ and ty =\n   | TY_task\n \n   | TY_native of opaque_id\n-  | TY_param of (ty_param_idx * stratum)\n+  | TY_param of (ty_param_idx * layer)\n   | TY_named of name\n   | TY_type\n \n@@ -181,7 +181,7 @@ and ty_fn = (ty_sig * ty_fn_aux)\n \n and ty_obj_header = (slot array * constrs)\n \n-and ty_obj = (stratum * ((ident,ty_fn) Hashtbl.t))\n+and ty_obj = (layer * ((ident,ty_fn) Hashtbl.t))\n \n and check_calls = (lval * (atom array)) array\n \n@@ -434,7 +434,7 @@ and fn =\n and obj =\n     {\n       obj_state: header_slots;\n-      obj_stratum: stratum;\n+      obj_layer: layer;\n       obj_constrs: constrs;\n       obj_fns: (ident,fn identified) Hashtbl.t;\n       obj_drop: block option;\n@@ -449,10 +449,10 @@ and obj =\n  * even if it's a type that's bound by a quantifier in its environment.\n  *)\n \n-and ty_param = ident * (ty_param_idx * stratum)\n+and ty_param = ident * (ty_param_idx * layer)\n \n and mod_item' =\n-    MOD_ITEM_type of (stratum * ty)\n+    MOD_ITEM_type of (layer * ty)\n   | MOD_ITEM_tag of (header_slots * opaque_id * int)\n   | MOD_ITEM_mod of (mod_view * mod_items)\n   | MOD_ITEM_fn of fn\n@@ -723,21 +723,21 @@ and fmt_effect_qual\n   fmt_effect ff e;\n   if e <> EFF_pure then fmt ff \" \";\n \n-and fmt_stratum\n+and fmt_layer\n     (ff:Format.formatter)\n-    (strat:stratum)\n+    (la:layer)\n     : unit =\n-  match strat with\n-      STRAT_value -> ()\n-    | STRAT_state -> fmt ff \"state\"\n-    | STRAT_gc -> fmt ff \"gc\"\n+  match la with\n+      LAYER_value -> ()\n+    | LAYER_state -> fmt ff \"state\"\n+    | LAYER_gc -> fmt ff \"gc\"\n \n-and fmt_stratum_qual\n+and fmt_layer_qual\n     (ff:Format.formatter)\n-    (s:stratum)\n+    (s:layer)\n     : unit =\n-  fmt_stratum ff s;\n-  if s <> STRAT_value then fmt ff \" \";\n+  fmt_layer ff s;\n+  if s <> LAYER_value then fmt ff \" \";\n \n and fmt_opacity\n     (ff:Format.formatter)\n@@ -810,7 +810,7 @@ and fmt_ty (ff:Format.formatter) (t:ty) : unit =\n       fmt_ident_tys ff entries;\n       fmt ff \"@]\"\n \n-  | TY_param (i, s) -> (fmt_stratum_qual ff s;\n+  | TY_param (i, s) -> (fmt_layer_qual ff s;\n                         fmt ff \"<p#%d>\" i)\n   | TY_native oid -> fmt ff \"<native#%d>\" (int_of_opaque oid)\n   | TY_named n -> fmt_name ff n\n@@ -833,9 +833,9 @@ and fmt_ty (ff:Format.formatter) (t:ty) : unit =\n \n   | TY_constrained ctrd -> fmt_constrained ff ctrd\n \n-  | TY_obj (stratum, fns) ->\n+  | TY_obj (layer, fns) ->\n       fmt_obox ff;\n-      fmt_stratum_qual ff stratum;\n+      fmt_layer_qual ff layer;\n       fmt ff \"obj \";\n       fmt_obr ff;\n       Hashtbl.iter\n@@ -1629,7 +1629,7 @@ and fmt_slice (ff:Format.formatter) (slice:slice) : unit =\n \n and fmt_decl_param (ff:Format.formatter) (param:ty_param) : unit =\n   let (ident, (i, s)) = param in\n-  fmt_stratum_qual ff s;\n+  fmt_layer_qual ff s;\n   fmt_ident ff ident;\n   fmt ff \"=<p#%d>\" i\n \n@@ -1683,7 +1683,7 @@ and fmt_obj\n     (obj:obj)\n     : unit =\n   fmt_obox ff;\n-  fmt_stratum_qual ff obj.obj_stratum;\n+  fmt_layer_qual ff obj.obj_layer;\n   fmt ff \"obj \";\n   fmt_ident_and_params ff id params;\n   fmt_header_slots ff obj.obj_state;\n@@ -1720,7 +1720,7 @@ and fmt_mod_item (ff:Format.formatter) (id:ident) (item:mod_item) : unit =\n     begin\n       match item.node.decl_item with\n           MOD_ITEM_type (s, ty) ->\n-            fmt_stratum_qual ff s;\n+            fmt_layer_qual ff s;\n             fmt ff \"type \";\n             fmt_ident_and_params ff id params;\n             fmt ff \" = \";"}, {"sha": "2c465be4f3bdd161f24036f56b31d24bec905683", "filename": "src/boot/fe/fuzz.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fboot%2Ffe%2Ffuzz.ml", "raw_url": "https://github.com/rust-lang/rust/raw/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fboot%2Ffe%2Ffuzz.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Ffuzz.ml?ref=a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990", "patch": "@@ -104,7 +104,7 @@ let rec generate_mod_item (mis:mod_items) (cx:ctxt) : unit =\n     match Random.int 2 with\n         0 ->\n           let ty = generate_ty cx in\n-          let st = Ast.STRAT_value in\n+          let st = Ast.LAYER_value in\n             decl (MOD_ITEM_type (st, ty))\n       | _ ->\n           let mis' = Hashtbl.create 0 in"}, {"sha": "6cee87963e7fbaef1fa4eab477e58265e2f4ecc9", "filename": "src/boot/fe/item.ml", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fboot%2Ffe%2Fitem.ml", "raw_url": "https://github.com/rust-lang/rust/raw/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fboot%2Ffe%2Fitem.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fitem.ml?ref=a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990", "patch": "@@ -692,7 +692,7 @@ and parse_stmts_including_none (ps:pstate) : Ast.stmt array =\n and parse_ty_param (iref:int ref) (ps:pstate) : Ast.ty_param identified =\n   let apos = lexpos ps in\n   let _ = Pexp.parse_opacity ps in\n-  let s = Pexp.parse_stratum ps in\n+  let s = Pexp.parse_layer ps in\n   let ident = Pexp.parse_ident ps in\n   let i = !iref in\n   let bpos = lexpos ps in\n@@ -842,7 +842,7 @@ and parse_optional_meta_pat (ps:pstate) (ident:Ast.ident) : Ast.meta_pat =\n and parse_obj_item\n     (ps:pstate)\n     (apos:pos)\n-    (stratum:Ast.stratum)\n+    (layer:Ast.layer)\n     : (Ast.ident * Ast.mod_item) =\n   expect ps OBJ;\n   let (ident, params) = parse_ident_and_params ps \"obj\" in\n@@ -871,7 +871,7 @@ and parse_obj_item\n       expect ps RBRACE;\n       let bpos = lexpos ps in\n       let obj = { Ast.obj_state = state;\n-                  Ast.obj_stratum = stratum;\n+                  Ast.obj_layer = layer;\n                   Ast.obj_constrs = constrs;\n                   Ast.obj_fns = fns;\n                   Ast.obj_drop = !drop }\n@@ -883,7 +883,7 @@ and parse_obj_item\n and parse_tag_item\n     (ps:pstate)\n     (apos:pos)\n-    (stratum:Ast.stratum)\n+    (layer:Ast.layer)\n     : (Ast.ident * Ast.mod_item) array =\n   expect ps TAG;\n   let (ident, params) = parse_ident_and_params ps \"tag\" in\n@@ -945,22 +945,22 @@ and parse_tag_item\n   let ty_item =\n     (ident,\n      span ps apos bpos\n-       (decl params (Ast.MOD_ITEM_type (stratum, ty))))\n+       (decl params (Ast.MOD_ITEM_type (layer, ty))))\n   in\n     Array.append [| ty_item |] constructors\n \n and parse_type_item\n     (ps:pstate)\n     (apos:pos)\n-    (stratum:Ast.stratum)\n+    (layer:Ast.layer)\n     : (Ast.ident * Ast.mod_item) =\n   expect ps TYPE;\n   let (ident, params) = parse_ident_and_params ps \"type\" in\n   let _ = expect ps EQ in\n   let ty = ctxt \"mod type item: ty\" Pexp.parse_ty ps in\n   let _ = expect ps SEMI in\n   let bpos = lexpos ps in\n-  let item = Ast.MOD_ITEM_type (stratum, ty) in\n+  let item = Ast.MOD_ITEM_type (layer, ty) in\n     (ident, span ps apos bpos (decl params item))\n \n and parse_mod_item (ps:pstate)\n@@ -992,25 +992,25 @@ and parse_mod_item (ps:pstate)\n         STATE | GC | IMPURE | UNSAFE | ABS\n       | TYPE | OBJ | TAG | FN | ITER ->\n           let _ = Pexp.parse_opacity ps in\n-          let stratum = Pexp.parse_stratum ps in\n+          let layer = Pexp.parse_layer ps in\n           let effect = Pexp.parse_effect ps in\n             begin\n               match peek ps with\n                   OBJ ->\n                     if effect <> Ast.EFF_pure\n                     then raise (err \"effect specified for obj\" ps);\n-                    [| parse_obj_item ps apos stratum |]\n+                    [| parse_obj_item ps apos layer |]\n                 | TAG ->\n                     if effect <> Ast.EFF_pure\n                     then raise (err \"effect specified for tag\" ps);\n-                    parse_tag_item ps apos stratum\n+                    parse_tag_item ps apos layer\n                 | TYPE ->\n                     if effect <> Ast.EFF_pure\n                     then raise (err \"effect specified for type\" ps);\n-                    [| parse_type_item ps apos stratum |]\n+                    [| parse_type_item ps apos layer |]\n                 | _ ->\n-                    if stratum <> Ast.STRAT_value\n-                    then raise (err \"stratum specified for fn or iter\" ps);\n+                    if layer <> Ast.LAYER_value\n+                    then raise (err \"layer specified for fn or iter\" ps);\n                     let is_iter = (peek ps) = ITER in\n                       bump ps;\n                       let (ident, params) = parse_ident_and_params ps \"fn\" in\n@@ -1159,7 +1159,7 @@ and parse_native_mod_item_from_signature (ps:pstate)\n           expect ps SEMI;\n           let bpos = lexpos ps in\n             [| (ident, span ps apos bpos\n-                  (decl params (Ast.MOD_ITEM_type (Ast.STRAT_value, t)))) |]\n+                  (decl params (Ast.MOD_ITEM_type (Ast.LAYER_value, t)))) |]\n \n     | _ -> raise (unexpected ps)\n "}, {"sha": "2f9c2badf7275df0eddf74202505fb36bfeb345e", "filename": "src/boot/fe/pexp.ml", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fboot%2Ffe%2Fpexp.ml", "raw_url": "https://github.com/rust-lang/rust/raw/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fboot%2Ffe%2Fpexp.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fpexp.ml?ref=a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990", "patch": "@@ -145,11 +145,11 @@ and parse_opacity (ps:pstate) : Ast.opacity =\n       ABS -> bump ps; Ast.OPA_abstract\n     |  _ -> Ast.OPA_transparent\n \n-and parse_stratum (ps:pstate) : Ast.stratum =\n+and parse_layer (ps:pstate) : Ast.layer =\n   match peek ps with\n-      STATE -> bump ps; Ast.STRAT_state\n-    | GC -> bump ps; Ast.STRAT_gc\n-    |  _ -> Ast.STRAT_value\n+      STATE -> bump ps; Ast.LAYER_state\n+    | GC -> bump ps; Ast.LAYER_gc\n+    |  _ -> Ast.LAYER_value\n \n and parse_effect (ps:pstate) : Ast.effect =\n   match peek ps with\n@@ -274,7 +274,7 @@ and parse_atomic_ty (ps:pstate) : Ast.ty =\n         Ast.TY_mach m\n \n     | STATE | GC | IMPURE | UNSAFE | OBJ | FN | ITER ->\n-        let stratum = parse_stratum ps in\n+        let layer = parse_layer ps in\n         let effect = parse_effect ps in\n           begin\n             match peek ps with\n@@ -295,11 +295,11 @@ and parse_atomic_ty (ps:pstate) : Ast.ty =\n                   in\n                     ignore (bracketed_zero_or_more LBRACE RBRACE\n                               None parse_method ps);\n-                    Ast.TY_obj (stratum, methods)\n+                    Ast.TY_obj (layer, methods)\n \n               | FN | ITER ->\n-                  if stratum <> Ast.STRAT_value\n-                  then raise (err \"stratum specified for fn or iter\" ps);\n+                  if layer <> Ast.LAYER_value\n+                  then raise (err \"layer specified for fn or iter\" ps);\n                   Ast.TY_fn (fst (parse_ty_fn effect ps))\n               | _ -> raise (unexpected ps)\n           end"}, {"sha": "7467d4e6eea4a18b321d38560bbb529cfa437ed7", "filename": "src/boot/fe/token.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fboot%2Ffe%2Ftoken.ml", "raw_url": "https://github.com/rust-lang/rust/raw/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fboot%2Ffe%2Ftoken.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Ftoken.ml?ref=a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990", "patch": "@@ -83,7 +83,7 @@ type token =\n   (* Opacity keywords *)\n   | ABS\n \n-  (* Stratum keywords *)\n+  (* Layer keywords *)\n   | STATE\n   | GC\n \n@@ -246,7 +246,7 @@ let rec string_of_tok t =\n     (* Opacity keywords *)\n     | ABS        -> \"abs\"\n \n-    (* Stratum keywords *)\n+    (* Layer keywords *)\n     | STATE      -> \"state\"\n     | GC         -> \"gc\"\n "}, {"sha": "5b7c0ca1da15eb59875811663f5abe4694d37793", "filename": "src/boot/me/dwarf.ml", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fboot%2Fme%2Fdwarf.ml", "raw_url": "https://github.com/rust-lang/rust/raw/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fboot%2Fme%2Fdwarf.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fdwarf.ml?ref=a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990", "patch": "@@ -1539,13 +1539,13 @@ let dwarf_visitor\n       |]\n   in\n \n-  let encode_stratum eff =\n+  let encode_layer eff =\n     (* Note: weird encoding: mutable+pure = gc. *)\n     let mut_byte, pure_byte =\n       match eff with\n-          Ast.STRAT_value -> (0,1)\n-        | Ast.STRAT_state -> (1,0)\n-        | Ast.STRAT_gc -> (1,1)\n+          Ast.LAYER_value -> (0,1)\n+        | Ast.LAYER_state -> (1,0)\n+        | Ast.LAYER_gc -> (1,1)\n     in\n       SEQ [|\n         (* DW_AT_mutable: DW_FORM_flag *)\n@@ -1557,15 +1557,15 @@ let dwarf_visitor\n \n   (* Type-param DIEs. *)\n \n-  let type_param_die (p:(ty_param_idx * Ast.stratum)) =\n+  let type_param_die (p:(ty_param_idx * Ast.layer)) =\n     let (idx, s) = p in\n       SEQ [|\n         uleb (get_abbrev_code abbrev_rust_type_param);\n         (* DW_AT_rust_type_code: DW_FORM_data1 *)\n         BYTE (dw_rust_type_to_int DW_RUST_type_param);\n         (* DW_AT_rust_type_param_index: DW_FORM_data4 *)\n         WORD (word_ty_mach, IMM (Int64.of_int idx));\n-        encode_stratum s;\n+        encode_layer s;\n       |]\n   in\n \n@@ -1817,7 +1817,7 @@ let dwarf_visitor\n           emit_die die\n       in\n \n-      let rust_type_param (p:(ty_param_idx * Ast.stratum)) =\n+      let rust_type_param (p:(ty_param_idx * Ast.layer)) =\n         let die = DEF (fix, type_param_die p) in\n           emit_die die\n       in\n@@ -1892,7 +1892,7 @@ let dwarf_visitor\n         let die =\n           DEF (fix, SEQ [|\n                  uleb (get_abbrev_code abbrev_obj_type);\n-                 encode_stratum str;\n+                 encode_layer str;\n                |])\n         in\n           emit_die die;\n@@ -2255,7 +2255,7 @@ let dwarf_visitor\n       curr_cu_line := []\n   in\n \n-  let type_param_decl_die (p:(Ast.ident * (ty_param_idx * Ast.stratum))) =\n+  let type_param_decl_die (p:(Ast.ident * (ty_param_idx * Ast.layer))) =\n     let (ident, (idx, str)) = p in\n       SEQ [|\n         uleb (get_abbrev_code abbrev_rust_type_param_decl);\n@@ -2265,7 +2265,7 @@ let dwarf_visitor\n         ZSTRING (Filename.basename ident);\n         (* DW_AT_rust_type_param_index: DW_FORM_data4 *)\n         WORD (word_ty_mach, IMM (Int64.of_int idx));\n-        encode_stratum str;\n+        encode_layer str;\n       |]\n   in\n \n@@ -2360,7 +2360,7 @@ let dwarf_visitor\n \n   let emit_typedef_die\n       (id:Ast.ident)\n-      (s:Ast.stratum)\n+      (s:Ast.layer)\n       (ty:Ast.ty)\n       : unit =\n     let abbrev_code = get_abbrev_code abbrev_typedef in\n@@ -2369,7 +2369,7 @@ let dwarf_visitor\n          uleb abbrev_code;\n          (* DW_AT_name: DW_FORM_string *)\n          ZSTRING id;\n-         encode_stratum s;\n+         encode_layer s;\n          (* DW_AT_type: DW_FORM_ref_addr *)\n          (ref_type_die ty);\n        |])\n@@ -2909,20 +2909,20 @@ let rec extract_mod_items\n       | _ -> failwith \"bad effect encoding\"\n   in\n \n-  let get_stratum die =\n+  let get_layer die =\n     match (get_flag die DW_AT_mutable, get_flag die DW_AT_pure) with\n         (* Note: weird encoding: mutable+pure = gc. *)\n-      | (false, true) -> Ast.STRAT_value\n-      | (true, false) -> Ast.STRAT_state\n-      | (true, true) -> Ast.STRAT_gc\n+      | (false, true) -> Ast.LAYER_value\n+      | (true, false) -> Ast.LAYER_state\n+      | (true, true) -> Ast.LAYER_gc\n       | _ -> failwith \"bad statum encoding\"\n   in\n \n   let get_name die = get_str die DW_AT_name in\n \n   let get_type_param die =\n     let idx = get_num die DW_AT_rust_type_param_index in\n-    let s = get_stratum die in\n+    let s = get_layer die in\n       (idx, s)\n   in\n \n@@ -3071,7 +3071,7 @@ let rec extract_mod_items\n             end\n \n         | DW_TAG_interface_type ->\n-            let str = get_stratum die in\n+            let str = get_layer die in\n             let fns = Hashtbl.create 0 in\n               Array.iter\n                 begin\n@@ -3187,10 +3187,10 @@ let rec extract_mod_items\n   let die = Hashtbl.find dies i in\n     match die.die_tag with\n         DW_TAG_typedef ->\n-          let stratum = get_stratum die in\n+          let layer = get_layer die in\n           let ident = get_name die in\n           let ty = get_referenced_ty die in\n-          let tyi = Ast.MOD_ITEM_type (stratum, ty) in\n+          let tyi = Ast.MOD_ITEM_type (layer, ty) in\n           let (params, islots) = get_formals die in\n             assert ((Array.length islots) = 0);\n             htab_put mis ident (decl params tyi)"}, {"sha": "a5a33b0ba361d9e1d45b8e8a78d67415c8b2662c", "filename": "src/boot/me/layer.ml", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fboot%2Fme%2Flayer.ml", "raw_url": "https://github.com/rust-lang/rust/raw/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fboot%2Fme%2Flayer.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Flayer.ml?ref=a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990", "patch": "@@ -1,19 +1,19 @@\n open Semant;;\n open Common;;\n \n-let log cx = Session.log \"stratum\"\n-  (should_log cx cx.ctxt_sess.Session.sess_log_stratum)\n+let log cx = Session.log \"layer\"\n+  (should_log cx cx.ctxt_sess.Session.sess_log_layer)\n   cx.ctxt_sess.Session.sess_log_out\n ;;\n \n let iflog cx thunk =\n-  if (should_log cx cx.ctxt_sess.Session.sess_log_stratum)\n+  if (should_log cx cx.ctxt_sess.Session.sess_log_layer)\n   then thunk ()\n   else ()\n ;;\n \n \n-let state_stratum_checking_visitor\n+let state_layer_checking_visitor\n     (cx:ctxt)\n     (inner:Walk.visitor)\n     : Walk.visitor =\n@@ -90,12 +90,12 @@ let process_crate\n     : unit =\n   let passes =\n     [|\n-      (state_stratum_checking_visitor cx\n+      (state_layer_checking_visitor cx\n          Walk.empty_visitor);\n     |]\n   in\n-    run_passes cx \"stratum\" passes\n-      cx.ctxt_sess.Session.sess_log_stratum log crate\n+    run_passes cx \"layer\" passes\n+      cx.ctxt_sess.Session.sess_log_layer log crate\n ;;\n \n (*", "previous_filename": "src/boot/me/stratum.ml"}, {"sha": "cea0b479b13161d35d97f8f57b9b9179a9d9edd4", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990", "patch": "@@ -192,7 +192,7 @@ type ctxt =\n \n       ctxt_rty_cache: (Ast.ty,Il.referent_ty) Hashtbl.t;\n \n-      ctxt_type_stratum_cache: (Ast.ty,Ast.stratum) Hashtbl.t;\n+      ctxt_type_layer_cache: (Ast.ty,Ast.layer) Hashtbl.t;\n       ctxt_type_points_to_heap_cache: (Ast.ty,bool) Hashtbl.t;\n       ctxt_type_is_structured_cache: (Ast.ty,bool) Hashtbl.t;\n       ctxt_type_contains_chan_cache: (Ast.ty,bool) Hashtbl.t;\n@@ -298,7 +298,7 @@ let new_ctxt sess abi crate =\n     ctxt_curr_path = Stack.create ();\n \n     ctxt_rty_cache = Hashtbl.create 0;\n-    ctxt_type_stratum_cache = Hashtbl.create 0;\n+    ctxt_type_layer_cache = Hashtbl.create 0;\n     ctxt_type_points_to_heap_cache = Hashtbl.create 0;\n     ctxt_type_is_structured_cache = Hashtbl.create 0;\n     ctxt_type_contains_chan_cache = Hashtbl.create 0;\n@@ -731,15 +731,15 @@ type ('ty, 'tys, 'slot, 'slots, 'tag) ty_fold =\n       ty_fold_vec : 'ty -> 'ty;\n       ty_fold_rec : (Ast.ident * 'ty) array -> 'ty;\n       ty_fold_fn : (('slots * Ast.constrs * 'slot) * Ast.ty_fn_aux) -> 'ty;\n-      ty_fold_obj : (Ast.stratum\n+      ty_fold_obj : (Ast.layer\n                      * (Ast.ident, (('slots * Ast.constrs * 'slot) *\n                                       Ast.ty_fn_aux)) Hashtbl.t) -> 'ty;\n       ty_fold_chan : 'ty -> 'ty;\n       ty_fold_port : 'ty -> 'ty;\n       ty_fold_task : unit -> 'ty;\n       ty_fold_native : opaque_id -> 'ty;\n       ty_fold_tag : 'tag -> 'ty;\n-      ty_fold_param : (int * Ast.stratum) -> 'ty;\n+      ty_fold_param : (int * Ast.layer) -> 'ty;\n       ty_fold_named : Ast.name -> 'ty;\n       ty_fold_type : unit -> 'ty;\n       ty_fold_box : 'ty -> 'ty;\n@@ -1253,30 +1253,30 @@ let lower_effect_of x y =\n   if effect_le x y then x else y\n ;;\n \n-let stratum_le x y =\n+let layer_le x y =\n   match (x,y) with\n-      (Ast.STRAT_gc, _) -> true\n-    | (Ast.STRAT_state, Ast.STRAT_value) -> true\n-    | (Ast.STRAT_state, Ast.STRAT_state) -> true\n-    | (Ast.STRAT_value, Ast.STRAT_value) -> true\n+      (Ast.LAYER_gc, _) -> true\n+    | (Ast.LAYER_state, Ast.LAYER_value) -> true\n+    | (Ast.LAYER_state, Ast.LAYER_state) -> true\n+    | (Ast.LAYER_value, Ast.LAYER_value) -> true\n     | _ -> false\n ;;\n \n-let lower_stratum_of x y =\n-  if stratum_le x y then x else y\n+let lower_layer_of x y =\n+  if layer_le x y then x else y\n ;;\n \n-let type_stratum (cx:ctxt) (t:Ast.ty) : Ast.stratum =\n-  let fold_mutable _ = Ast.STRAT_state in\n-  let fold = associative_binary_op_ty_fold Ast.STRAT_value lower_stratum_of in\n+let type_layer (cx:ctxt) (t:Ast.ty) : Ast.layer =\n+  let fold_mutable _ = Ast.LAYER_state in\n+  let fold = associative_binary_op_ty_fold Ast.LAYER_value lower_layer_of in\n   let fold = { fold with ty_fold_mutable = fold_mutable } in\n-    htab_search_or_add cx.ctxt_type_stratum_cache t\n+    htab_search_or_add cx.ctxt_type_layer_cache t\n       (fun _ -> fold_ty cx fold t)\n ;;\n \n \n let type_has_state (cx:ctxt) (t:Ast.ty) : bool =\n-  stratum_le (type_stratum cx t) Ast.STRAT_state\n+  layer_le (type_layer cx t) Ast.LAYER_state\n ;;\n \n \n@@ -1640,7 +1640,7 @@ let ty_fn_of_fn (fn:Ast.fn) : Ast.ty_fn =\n ;;\n \n let ty_obj_of_obj (obj:Ast.obj) : Ast.ty_obj =\n-  (obj.Ast.obj_stratum,\n+  (obj.Ast.obj_layer,\n    htab_map obj.Ast.obj_fns (fun i f -> (i, ty_fn_of_fn f.node)))\n ;;\n "}, {"sha": "8c594054e40eff738e483eccdb171e1b03aff911", "filename": "src/comp/front/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fcomp%2Ffront%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fcomp%2Ffront%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftoken.rs?ref=a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990", "patch": "@@ -92,7 +92,7 @@ tag token {\n     /* Opacity keywords */\n     ABS;\n \n-    /* Stratum keywords */\n+    /* Layer keywords */\n     STATE;\n     GC;\n \n@@ -258,7 +258,7 @@ fn to_str(token t) -> str {\n         /* Opacity keywords */\n         case (ABS) { ret \"abs\"; }\n \n-        /* Stratum keywords */\n+        /* Layer keywords */\n         case (STATE) { ret \"state\"; }\n         case (GC) { ret \"gc\"; }\n "}, {"sha": "ddf71b4c5b6520ef9e475ca27bd98eaf943112b0", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a98b2ebb4ad090d3d7eaa9ab3b1d98be0867e990", "patch": "@@ -730,7 +730,7 @@ fn drop_ty(@block_ctxt cx,\n             fn hit_zero(@block_ctxt cx, ValueRef v,\n                         @typeck.ty t) -> result {\n                 auto res = iter_sequence(cx, v, t, bind drop_ty(_,_,_));\n-                // FIXME: switch gc/non-gc on stratum of the type.\n+                // FIXME: switch gc/non-gc on layer of the type.\n                 ret trans_non_gc_free(res.bcx, v);\n             }\n             ret decr_refcnt_and_if_zero(cx, v,\n@@ -747,7 +747,7 @@ fn drop_ty(@block_ctxt cx,\n                                              C_int(abi.box_rc_field_body)));\n \n                 auto res = drop_ty(cx, body, body_ty);\n-                // FIXME: switch gc/non-gc on stratum of the type.\n+                // FIXME: switch gc/non-gc on layer of the type.\n                 ret trans_non_gc_free(res.bcx, v);\n             }\n             ret decr_refcnt_and_if_zero(cx, v,"}]}