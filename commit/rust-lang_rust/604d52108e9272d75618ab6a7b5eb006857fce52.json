{"sha": "604d52108e9272d75618ab6a7b5eb006857fce52", "node_id": "C_kwDOAAsO6NoAKDYwNGQ1MjEwOGU5MjcyZDc1NjE4YWI2YTdiNWViMDA2ODU3ZmNlNTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-22T23:43:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-22T23:43:13Z"}, "message": "Auto merge of #104743 - JohnTitor:rollup-9z9u7yd, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #101368 (Forbid inlining `thread_local!`'s `__getit` function on Windows)\n - #102293 (Add powerpc64-ibm-aix as Tier-3 target)\n - #104717 (Add failing test for projections used as const generic)\n - #104720 (rustdoc: remove no-op CSS `.popover::before / a.test-arrow { display: inline-block }`)\n - #104722 (Speed up mpsc_stress test)\n - #104724 (Fix `ClosureKind::to_def_id`)\n - #104728 (Use `tcx.require_lang_item` instead of unwrapping lang items)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2c04dcb020f4d26723b733f58e742dcb717b9fe6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c04dcb020f4d26723b733f58e742dcb717b9fe6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/604d52108e9272d75618ab6a7b5eb006857fce52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/604d52108e9272d75618ab6a7b5eb006857fce52", "html_url": "https://github.com/rust-lang/rust/commit/604d52108e9272d75618ab6a7b5eb006857fce52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/604d52108e9272d75618ab6a7b5eb006857fce52/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff8c8dfbe66701531e3e5e335c28c544d0fbc945", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff8c8dfbe66701531e3e5e335c28c544d0fbc945", "html_url": "https://github.com/rust-lang/rust/commit/ff8c8dfbe66701531e3e5e335c28c544d0fbc945"}, {"sha": "3ec1ca0516ed1762a1c7039266b1e8c64efcb4d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ec1ca0516ed1762a1c7039266b1e8c64efcb4d3", "html_url": "https://github.com/rust-lang/rust/commit/3ec1ca0516ed1762a1c7039266b1e8c64efcb4d3"}], "stats": {"total": 272, "additions": 218, "deletions": 54}, "files": [{"sha": "5f99d86b4eaff2f61d77a0dfcb54b72f2cd0d0dc", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=604d52108e9272d75618ab6a7b5eb006857fce52", "patch": "@@ -7,7 +7,7 @@ use rustc_errors::{\n };\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_block, walk_expr, Visitor};\n-use rustc_hir::{AsyncGeneratorKind, GeneratorKind};\n+use rustc_hir::{AsyncGeneratorKind, GeneratorKind, LangItem};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::ObligationCause;\n use rustc_middle::mir::tcx::PlaceTy;\n@@ -601,7 +601,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         else { return; };\n         // Try to find predicates on *generic params* that would allow copying `ty`\n         let infcx = tcx.infer_ctxt().build();\n-        let copy_did = infcx.tcx.lang_items().copy_trait().unwrap();\n+        let copy_did = infcx.tcx.require_lang_item(LangItem::Copy, Some(span));\n         let cause = ObligationCause::new(\n             span,\n             self.mir_hir_id(),"}, {"sha": "c62c6651587794c966daeed257976e875f46e1bd", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=604d52108e9272d75618ab6a7b5eb006857fce52", "patch": "@@ -1,7 +1,7 @@\n //! Concrete error types for all operations which may be invalid in a certain const context.\n \n use hir::def_id::LocalDefId;\n-use hir::ConstContext;\n+use hir::{ConstContext, LangItem};\n use rustc_errors::{\n     error_code, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed,\n };\n@@ -304,7 +304,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                     err.span_note(deref_target, \"deref defined here\");\n                 }\n \n-                diag_trait(&mut err, self_ty, tcx.lang_items().deref_trait().unwrap());\n+                diag_trait(&mut err, self_ty, tcx.require_lang_item(LangItem::Deref, Some(span)));\n                 err\n             }\n             _ if tcx.opt_parent(callee) == tcx.get_diagnostic_item(sym::ArgumentV1Methods) => {"}, {"sha": "b38a6c551388e473b7771d0e03f805f0db0b173b", "filename": "compiler/rustc_const_eval/src/util/call_kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs?ref=604d52108e9272d75618ab6a7b5eb006857fce52", "patch": "@@ -3,7 +3,7 @@\n //! context.\n \n use rustc_hir::def_id::DefId;\n-use rustc_hir::lang_items;\n+use rustc_hir::{lang_items, LangItem};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, AssocItemContainer, DefIdTree, Instance, ParamEnv, Ty, TyCtxt};\n use rustc_span::symbol::Ident;\n@@ -26,7 +26,7 @@ impl CallDesugaringKind {\n         match self {\n             Self::ForLoopIntoIter => tcx.get_diagnostic_item(sym::IntoIterator).unwrap(),\n             Self::QuestionBranch | Self::TryBlockFromOutput => {\n-                tcx.lang_items().try_trait().unwrap()\n+                tcx.require_lang_item(LangItem::Try, None)\n             }\n             Self::QuestionFromResidual => tcx.get_diagnostic_item(sym::FromResidual).unwrap(),\n         }"}, {"sha": "11661215ae1cc383e241c7c25f0b11ddd373307e", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=604d52108e9272d75618ab6a7b5eb006857fce52", "patch": "@@ -114,7 +114,7 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n                     traits::ObligationCause::dummy_with_span(field_ty_span),\n                     param_env,\n                     ty,\n-                    tcx.lang_items().copy_trait().unwrap(),\n+                    tcx.require_lang_item(LangItem::Copy, Some(span)),\n                 ) {\n                     let error_predicate = error.obligation.predicate;\n                     // Only note if it's not the root obligation, otherwise it's trivial and"}, {"sha": "91f65b8c0f21f6e74054bf74993e414419d1e402", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=604d52108e9272d75618ab6a7b5eb006857fce52", "patch": "@@ -1118,7 +1118,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let lhs_deref_ty_is_sized = self\n                     .infcx\n                     .type_implements_trait(\n-                        self.tcx.lang_items().sized_trait().unwrap(),\n+                        self.tcx.require_lang_item(LangItem::Sized, None),\n                         [lhs_deref_ty],\n                         self.param_env,\n                     )"}, {"sha": "273a61c966c72c08edd4e7842b33bbb81b997002", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=604d52108e9272d75618ab6a7b5eb006857fce52", "patch": "@@ -5,6 +5,7 @@ use crate::{mir, ty};\n \n use std::fmt::Write;\n \n+use hir::LangItem;\n use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -130,11 +131,14 @@ impl<'tcx> ClosureKind {\n     }\n \n     pub fn to_def_id(&self, tcx: TyCtxt<'_>) -> DefId {\n-        match self {\n-            ClosureKind::Fn => tcx.lang_items().fn_once_trait().unwrap(),\n-            ClosureKind::FnMut => tcx.lang_items().fn_mut_trait().unwrap(),\n-            ClosureKind::FnOnce => tcx.lang_items().fn_trait().unwrap(),\n-        }\n+        tcx.require_lang_item(\n+            match self {\n+                ClosureKind::Fn => LangItem::Fn,\n+                ClosureKind::FnMut => LangItem::FnMut,\n+                ClosureKind::FnOnce => LangItem::FnOnce,\n+            },\n+            None,\n+        )\n     }\n }\n "}, {"sha": "26d30308ed371239fe1f4c529212cf313372f590", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=604d52108e9272d75618ab6a7b5eb006857fce52", "patch": "@@ -2293,7 +2293,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Given a `ty`, return whether it's an `impl Future<...>`.\n     pub fn ty_is_opaque_future(self, ty: Ty<'_>) -> bool {\n         let ty::Opaque(def_id, _) = ty.kind() else { return false };\n-        let future_trait = self.lang_items().future_trait().unwrap();\n+        let future_trait = self.require_lang_item(LangItem::Future, None);\n \n         self.explicit_item_bounds(def_id).iter().any(|(predicate, _)| {\n             let ty::PredicateKind::Trait(trait_predicate) = predicate.kind().skip_binder() else {"}, {"sha": "9c7721bf49a8afa68c07db5756e5bcaa02147334", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=604d52108e9272d75618ab6a7b5eb006857fce52", "patch": "@@ -11,6 +11,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{self, CtorKind, DefKind, Namespace};\n use rustc_hir::def_id::{DefId, DefIdSet, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathData};\n+use rustc_hir::LangItem;\n use rustc_session::config::TrimmedDefPaths;\n use rustc_session::cstore::{ExternCrate, ExternCrateSource};\n use rustc_session::Limit;\n@@ -889,7 +890,7 @@ pub trait PrettyPrinter<'tcx>:\n                                 // Group the return ty with its def id, if we had one.\n                                 entry\n                                     .return_ty\n-                                    .map(|ty| (tcx.lang_items().fn_once_output().unwrap(), ty)),\n+                                    .map(|ty| (tcx.require_lang_item(LangItem::FnOnce, None), ty)),\n                             );\n                         }\n                         if let Some(trait_ref) = entry.fn_mut_trait_ref {"}, {"sha": "e7a751fa0afca004a5fc301477e48368897d58f0", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=604d52108e9272d75618ab6a7b5eb006857fce52", "patch": "@@ -17,6 +17,7 @@ use rustc_data_structures::captures::Captures;\n use rustc_data_structures::intern::Interned;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::LangItem;\n use rustc_index::vec::Idx;\n use rustc_macros::HashStable;\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -2108,7 +2109,7 @@ impl<'tcx> Ty<'tcx> {\n \n             ty::Str | ty::Slice(_) => (tcx.types.usize, false),\n             ty::Dynamic(..) => {\n-                let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();\n+                let dyn_metadata = tcx.require_lang_item(LangItem::DynMetadata, None);\n                 (tcx.bound_type_of(dyn_metadata).subst(tcx, &[tail.into()]), false)\n             },\n "}, {"sha": "c71c4ba2cc9020d6b15d0b57b2fed2b974d1605a", "filename": "compiler/rustc_target/src/spec/aix_base.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_target%2Fsrc%2Fspec%2Faix_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_target%2Fsrc%2Fspec%2Faix_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faix_base.rs?ref=604d52108e9272d75618ab6a7b5eb006857fce52", "patch": "@@ -0,0 +1,32 @@\n+use crate::abi::Endian;\n+use crate::spec::{crt_objects, cvs, Cc, CodeModel, LinkOutputKind, LinkerFlavor, TargetOptions};\n+\n+pub fn opts() -> TargetOptions {\n+    TargetOptions {\n+        abi: \"vec-extabi\".into(),\n+        code_model: Some(CodeModel::Small),\n+        cpu: \"pwr7\".into(),\n+        os: \"aix\".into(),\n+        vendor: \"ibm\".into(),\n+        dynamic_linking: true,\n+        endian: Endian::Big,\n+        executables: true,\n+        archive_format: \"aix_big\".into(),\n+        families: cvs![\"unix\"],\n+        has_rpath: false,\n+        has_thread_local: true,\n+        crt_static_respected: true,\n+        linker_flavor: LinkerFlavor::Unix(Cc::No),\n+        linker: Some(\"ld\".into()),\n+        eh_frame_header: false,\n+        is_like_aix: true,\n+        default_dwarf_version: 3,\n+        function_sections: true,\n+        pre_link_objects: crt_objects::new(&[\n+            (LinkOutputKind::DynamicNoPicExe, &[\"/usr/lib/crt0_64.o\", \"/usr/lib/crti_64.o\"]),\n+            (LinkOutputKind::DynamicPicExe, &[\"/usr/lib/crt0_64.o\", \"/usr/lib/crti_64.o\"]),\n+        ]),\n+        dll_suffix: \".a\".into(),\n+        ..Default::default()\n+    }\n+}"}, {"sha": "c633ef1e76193d94485f1525382ad5c1d27a1992", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=604d52108e9272d75618ab6a7b5eb006857fce52", "patch": "@@ -58,6 +58,7 @@ use rustc_macros::HashStable_Generic;\n pub mod abi;\n pub mod crt_objects;\n \n+mod aix_base;\n mod android_base;\n mod apple_base;\n mod avr_gnu_base;\n@@ -1027,6 +1028,7 @@ supported_targets! {\n     (\"powerpc-unknown-linux-gnu\", powerpc_unknown_linux_gnu),\n     (\"powerpc-unknown-linux-gnuspe\", powerpc_unknown_linux_gnuspe),\n     (\"powerpc-unknown-linux-musl\", powerpc_unknown_linux_musl),\n+    (\"powerpc64-ibm-aix\", powerpc64_ibm_aix),\n     (\"powerpc64-unknown-linux-gnu\", powerpc64_unknown_linux_gnu),\n     (\"powerpc64-unknown-linux-musl\", powerpc64_unknown_linux_musl),\n     (\"powerpc64le-unknown-linux-gnu\", powerpc64le_unknown_linux_gnu),\n@@ -1454,6 +1456,9 @@ pub struct TargetOptions {\n     pub families: StaticCow<[StaticCow<str>]>,\n     /// Whether the target toolchain's ABI supports returning small structs as an integer.\n     pub abi_return_struct_as_int: bool,\n+    /// Whether the target toolchain is like AIX's. Linker options on AIX are special and it uses\n+    /// XCOFF as binary format. Defaults to false.\n+    pub is_like_aix: bool,\n     /// Whether the target toolchain is like macOS's. Only useful for compiling against iOS/macOS,\n     /// in particular running dsymutil and some other stuff like `-dead_strip`. Defaults to false.\n     /// Also indiates whether to use Apple-specific ABI changes, such as extending function\n@@ -1817,6 +1822,7 @@ impl Default for TargetOptions {\n             staticlib_suffix: \".a\".into(),\n             families: cvs![],\n             abi_return_struct_as_int: false,\n+            is_like_aix: false,\n             is_like_osx: false,\n             is_like_solaris: false,\n             is_like_windows: false,\n@@ -2488,6 +2494,7 @@ impl Target {\n         key!(staticlib_suffix);\n         key!(families, TargetFamilies);\n         key!(abi_return_struct_as_int, bool);\n+        key!(is_like_aix, bool);\n         key!(is_like_osx, bool);\n         key!(is_like_solaris, bool);\n         key!(is_like_windows, bool);\n@@ -2741,6 +2748,7 @@ impl ToJson for Target {\n         target_option_val!(staticlib_suffix);\n         target_option_val!(families, \"target-family\");\n         target_option_val!(abi_return_struct_as_int);\n+        target_option_val!(is_like_aix);\n         target_option_val!(is_like_osx);\n         target_option_val!(is_like_solaris);\n         target_option_val!(is_like_windows);"}, {"sha": "e3eb9bccd5ed78d5001471c83cec143a3586d02c", "filename": "compiler/rustc_target/src/spec/powerpc64_ibm_aix.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_ibm_aix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_ibm_aix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_ibm_aix.rs?ref=604d52108e9272d75618ab6a7b5eb006857fce52", "patch": "@@ -0,0 +1,23 @@\n+use crate::spec::{Cc, LinkerFlavor, Target};\n+\n+pub fn target() -> Target {\n+    let mut base = super::aix_base::opts();\n+    base.max_atomic_width = Some(64);\n+    base.add_pre_link_args(\n+        LinkerFlavor::Unix(Cc::No),\n+        &[\n+            \"-b64\".into(),\n+            \"-bpT:0x100000000\".into(),\n+            \"-bpD:0x110000000\".into(),\n+            \"-bcdtors:all:0:s\".into(),\n+        ],\n+    );\n+\n+    Target {\n+        llvm_target: \"powerpc64-ibm-aix\".into(),\n+        pointer_width: 64,\n+        data_layout: \"E-m:a-i64:64-n32:64-S128-v256:256:256-v512:512:512\".into(),\n+        arch: \"powerpc64\".into(),\n+        options: base,\n+    }\n+}"}, {"sha": "186109e7075f13e397bfea1e2c2cab13d499f09c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604d52108e9272d75618ab6a7b5eb006857fce52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=604d52108e9272d75618ab6a7b5eb006857fce52", "patch": "@@ -2625,7 +2625,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     }\n                 };\n \n-                let from_generator = tcx.lang_items().from_generator_fn().unwrap();\n+                let from_generator = tcx.require_lang_item(LangItem::FromGenerator, None);\n \n                 // Don't print the tuple of capture types\n                 'print: {"}, {"sha": "154b608c0dc5c30cbc183117ac1ed847391f5cd0", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/604d52108e9272d75618ab6a7b5eb006857fce52/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604d52108e9272d75618ab6a7b5eb006857fce52/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=604d52108e9272d75618ab6a7b5eb006857fce52", "patch": "@@ -181,7 +181,8 @@ macro_rules! thread_local {\n macro_rules! __thread_local_inner {\n     // used to generate the `LocalKey` value for const-initialized thread locals\n     (@key $t:ty, const $init:expr) => {{\n-        #[cfg_attr(not(windows), inline)] // see comments below\n+        #[cfg_attr(not(all(windows, target_thread_local)), inline)] // see comments below\n+        #[cfg_attr(all(windows, target_thread_local), inline(never))]\n         #[deny(unsafe_op_in_unsafe_fn)]\n         unsafe fn __getit(\n             _init: $crate::option::Option<&mut $crate::option::Option<$t>>,\n@@ -294,12 +295,17 @@ macro_rules! __thread_local_inner {\n             fn __init() -> $t { $init }\n \n             // When reading this function you might ask \"why is this inlined\n-            // everywhere other than Windows?\", and that's a very reasonable\n-            // question to ask. The short story is that it segfaults rustc if\n-            // this function is inlined. The longer story is that Windows looks\n-            // to not support `extern` references to thread locals across DLL\n-            // boundaries. This appears to at least not be supported in the ABI\n-            // that LLVM implements.\n+            // everywhere other than Windows?\", and \"why must it not be inlined\n+            // on Windows?\" and these are very reasonable questions to ask.\n+            //\n+            // The short story is that Windows doesn't support referencing\n+            // `#[thread_local]` across DLL boundaries. The slightly longer\n+            // story is that each module (dll or exe) has its own separate set\n+            // of static thread locals, so if you try and reference a\n+            // `#[thread_local]` that comes from `crate1.dll` from within one of\n+            // `crate2.dll`'s functions, then it might give you a completely\n+            // different thread local than what you asked for (or it might just\n+            // crash).\n             //\n             // Because of this we never inline on Windows, but we do inline on\n             // other platforms (where external references to thread locals\n@@ -314,8 +320,9 @@ macro_rules! __thread_local_inner {\n             // Cargo question kinda). This means that, unfortunately, Windows\n             // gets the pessimistic path for now where it's never inlined.\n             //\n-            // The issue of \"should enable on Windows sometimes\" is #84933\n-            #[cfg_attr(not(windows), inline)]\n+            // The issue of \"should improve things on Windows\" is #84933\n+            #[cfg_attr(not(all(windows, target_thread_local)), inline)]\n+            #[cfg_attr(all(windows, target_thread_local), inline(never))]\n             unsafe fn __getit(\n                 init: $crate::option::Option<&mut $crate::option::Option<$t>>,\n             ) -> $crate::option::Option<&'static $t> {"}, {"sha": "27e911c6be5a25a8082490822d3a8e92e97bd7fa", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/604d52108e9272d75618ab6a7b5eb006857fce52/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/604d52108e9272d75618ab6a7b5eb006857fce52/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=604d52108e9272d75618ab6a7b5eb006857fce52", "patch": "@@ -283,6 +283,7 @@ target | std | host | notes\n `powerpc64-wrs-vxworks` | ? |  |\n `powerpc64le-unknown-linux-musl` | ? |  |\n [`powerpc64-unknown-openbsd`](platform-support/openbsd.md) | \u2713 | \u2713 | OpenBSD/powerpc64\n+`powerpc64-ibm-aix` | ? |  | 64-bit AIX (7.2 and newer)\n `riscv32gc-unknown-linux-gnu` |   |   | RISC-V Linux (kernel 5.4, glibc 2.33)\n `riscv32gc-unknown-linux-musl` |   |   | RISC-V Linux (kernel 5.4, musl + RISCV32 support patches)\n `riscv32im-unknown-none-elf` | * |  | Bare RISC-V (RV32IM ISA)"}, {"sha": "d4e881ad832af56c1e8c5267aadaab318f985f63", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/604d52108e9272d75618ab6a7b5eb006857fce52/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/604d52108e9272d75618ab6a7b5eb006857fce52/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=604d52108e9272d75618ab6a7b5eb006857fce52", "patch": "@@ -932,7 +932,6 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \tright: var(--popover-arrow-offset);\n \tborder: solid var(--border-color);\n \tborder-width: 1px 1px 0 0;\n-\tdisplay: inline-block;\n \tpadding: 4px;\n \ttransform: rotate(-45deg);\n \ttop: -5px;\n@@ -1200,7 +1199,6 @@ pre.rust .doccomment {\n }\n \n a.test-arrow {\n-\tdisplay: inline-block;\n \tvisibility: hidden;\n \tposition: absolute;\n \tpadding: 5px 10px 5px 10px;"}, {"sha": "29ececea5d3941ea4f61099ef1deb17155bcc425", "filename": "src/test/ui/check-cfg/well-known-values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/604d52108e9272d75618ab6a7b5eb006857fce52/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/604d52108e9272d75618ab6a7b5eb006857fce52/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr?ref=604d52108e9272d75618ab6a7b5eb006857fce52", "patch": "@@ -6,7 +6,7 @@ LL | #[cfg(target_os = \"linuz\")]\n    |                   |\n    |                   help: did you mean: `\"linux\"`\n    |\n-   = note: expected values for `target_os` are: android, cuda, dragonfly, emscripten, espidf, freebsd, fuchsia, haiku, hermit, horizon, illumos, ios, l4re, linux, macos, netbsd, none, nto, openbsd, psp, redox, solaris, solid_asp3, tvos, uefi, unknown, vxworks, wasi, watchos, windows, xous\n+   = note: expected values for `target_os` are: aix, android, cuda, dragonfly, emscripten, espidf, freebsd, fuchsia, haiku, hermit, horizon, illumos, ios, l4re, linux, macos, netbsd, none, nto, openbsd, psp, redox, solaris, solid_asp3, tvos, uefi, unknown, vxworks, wasi, watchos, windows, xous\n    = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: unexpected `cfg` condition value"}, {"sha": "903548c75db56fad166193d68bf7bc3ebfb25ff1", "filename": "src/test/ui/const-generics/projection-as-arg-const.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/604d52108e9272d75618ab6a7b5eb006857fce52/src%2Ftest%2Fui%2Fconst-generics%2Fprojection-as-arg-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604d52108e9272d75618ab6a7b5eb006857fce52/src%2Ftest%2Fui%2Fconst-generics%2Fprojection-as-arg-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fprojection-as-arg-const.rs?ref=604d52108e9272d75618ab6a7b5eb006857fce52", "patch": "@@ -0,0 +1,20 @@\n+// This is currently not possible to use projections as const generics.\n+// More information about this available here:\n+// https://github.com/rust-lang/rust/pull/104443#discussion_r1029375633\n+\n+pub trait Identity {\n+    type Identity;\n+}\n+\n+impl<T> Identity for T {\n+    type Identity = Self;\n+}\n+\n+pub fn foo<const X: <i32 as Identity>::Identity>() {\n+//~^ ERROR\n+    assert!(X == 12);\n+}\n+\n+fn main() {\n+    foo::<12>();\n+}"}, {"sha": "803ed9c959752de837a68e23e47b32890665d4ce", "filename": "src/test/ui/const-generics/projection-as-arg-const.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/604d52108e9272d75618ab6a7b5eb006857fce52/src%2Ftest%2Fui%2Fconst-generics%2Fprojection-as-arg-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/604d52108e9272d75618ab6a7b5eb006857fce52/src%2Ftest%2Fui%2Fconst-generics%2Fprojection-as-arg-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fprojection-as-arg-const.stderr?ref=604d52108e9272d75618ab6a7b5eb006857fce52", "patch": "@@ -0,0 +1,11 @@\n+error: `<i32 as Identity>::Identity` is forbidden as the type of a const generic parameter\n+  --> $DIR/projection-as-arg-const.rs:13:21\n+   |\n+LL | pub fn foo<const X: <i32 as Identity>::Identity>() {\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "232cd2ba88cc27cbabb328a9a64d0cb6ad5f0e15", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/604d52108e9272d75618ab6a7b5eb006857fce52/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604d52108e9272d75618ab6a7b5eb006857fce52/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs?ref=604d52108e9272d75618ab6a7b5eb006857fce52", "patch": "@@ -20,14 +20,23 @@ impl FnOnce<(isize,)> for S {\n     }\n }\n \n+struct F;\n+\n+impl FnOnce<(i32,)> for F {\n+    type Output = ();\n+\n+    extern \"rust-call\" fn call_once(self, args: (i32,)) -> Self::Output {}\n+}\n+\n fn main() {\n-    let mut s = S {\n-        x: 3,\n-        y: 3,\n-    };\n-    let ans = s(\"what\");    //~ ERROR mismatched types\n+    let mut s = S { x: 3, y: 3 };\n+    let ans = s(\"what\");\n+    //~^ ERROR mismatched types\n     let ans = s();\n     //~^ ERROR this function takes 1 argument but 0 arguments were supplied\n     let ans = s(\"burma\", \"shave\");\n     //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+\n+    F(\"\");\n+    //~^ ERROR mismatched types\n }"}, {"sha": "3a895acbdb5dd6ea68051b834743d86b4b51c0ed", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.stderr", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/604d52108e9272d75618ab6a7b5eb006857fce52/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/604d52108e9272d75618ab6a7b5eb006857fce52/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr?ref=604d52108e9272d75618ab6a7b5eb006857fce52", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/overloaded-calls-bad.rs:28:17\n+  --> $DIR/overloaded-calls-bad.rs:33:17\n    |\n LL |     let ans = s(\"what\");\n    |               - ^^^^^^ expected `isize`, found `&str`\n@@ -13,7 +13,7 @@ LL | impl FnMut<(isize,)> for S {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0057]: this function takes 1 argument but 0 arguments were supplied\n-  --> $DIR/overloaded-calls-bad.rs:29:15\n+  --> $DIR/overloaded-calls-bad.rs:35:15\n    |\n LL |     let ans = s();\n    |               ^-- an argument of type `isize` is missing\n@@ -29,7 +29,7 @@ LL |     let ans = s(/* isize */);\n    |                ~~~~~~~~~~~~~\n \n error[E0057]: this function takes 1 argument but 2 arguments were supplied\n-  --> $DIR/overloaded-calls-bad.rs:31:15\n+  --> $DIR/overloaded-calls-bad.rs:37:15\n    |\n LL |     let ans = s(\"burma\", \"shave\");\n    |               ^ -------  ------- argument of type `&'static str` unexpected\n@@ -46,7 +46,21 @@ help: remove the extra argument\n LL |     let ans = s(/* isize */);\n    |                ~~~~~~~~~~~~~\n \n-error: aborting due to 3 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/overloaded-calls-bad.rs:40:7\n+   |\n+LL |     F(\"\");\n+   |     - ^^ expected `i32`, found `&str`\n+   |     |\n+   |     arguments to this struct are incorrect\n+   |\n+note: implementation defined here\n+  --> $DIR/overloaded-calls-bad.rs:25:1\n+   |\n+LL | impl FnOnce<(i32,)> for F {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0057, E0308.\n For more information about an error, try `rustc --explain E0057`."}, {"sha": "c2e1912deb7aa21828c22b30805e7db532e887e2", "filename": "src/test/ui/threads-sendsync/mpsc_stress.rs", "status": "modified", "additions": 51, "deletions": 16, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/604d52108e9272d75618ab6a7b5eb006857fce52/src%2Ftest%2Fui%2Fthreads-sendsync%2Fmpsc_stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604d52108e9272d75618ab6a7b5eb006857fce52/src%2Ftest%2Fui%2Fthreads-sendsync%2Fmpsc_stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fmpsc_stress.rs?ref=604d52108e9272d75618ab6a7b5eb006857fce52", "patch": "@@ -64,9 +64,11 @@ fn shared_close_sender_does_not_lose_messages_iter() {\n \n #[test]\n fn shared_close_sender_does_not_lose_messages() {\n-    for _ in 0..10000 {\n-        shared_close_sender_does_not_lose_messages_iter();\n-    }\n+    with_minimum_timer_resolution(|| {\n+        for _ in 0..10000 {\n+            shared_close_sender_does_not_lose_messages_iter();\n+        }\n+    });\n }\n \n \n@@ -96,17 +98,11 @@ fn concurrent_recv_timeout_and_upgrade_iter() {\n \n #[test]\n fn concurrent_recv_timeout_and_upgrade() {\n-    // FIXME: fix and enable\n-    if true { return }\n-\n-    // at the moment of writing this test fails like this:\n-    // thread '<unnamed>' panicked at 'assertion failed: `(left == right)`\n-    //  left: `4561387584`,\n-    // right: `0`', libstd/sync/mpsc/shared.rs:253:13\n-\n-    for _ in 0..10000 {\n-        concurrent_recv_timeout_and_upgrade_iter();\n-    }\n+    with_minimum_timer_resolution(|| {\n+        for _ in 0..10000 {\n+            concurrent_recv_timeout_and_upgrade_iter();\n+        }\n+    });\n }\n \n \n@@ -159,7 +155,46 @@ fn concurrent_writes_iter() {\n \n #[test]\n fn concurrent_writes() {\n-    for _ in 0..100 {\n-        concurrent_writes_iter();\n+    with_minimum_timer_resolution(|| {\n+        for _ in 0..100 {\n+            concurrent_writes_iter();\n+        }\n+    });\n+}\n+\n+#[cfg(windows)]\n+pub mod timeapi {\n+    #![allow(non_snake_case)]\n+    use std::ffi::c_uint;\n+\n+    pub const TIMERR_NOERROR: c_uint = 0;\n+\n+    #[link(name = \"winmm\")]\n+    extern \"system\" {\n+        pub fn timeBeginPeriod(uPeriod: c_uint) -> c_uint;\n+        pub fn timeEndPeriod(uPeriod: c_uint) -> c_uint;\n+    }\n+}\n+\n+/// Window's minimum sleep time can be as much as 16ms.\n+// This function evaluates the closure with this resolution\n+// set as low as possible.\n+///\n+/// This takes the above test's duration from 10000*16/1000/60=2.67 minutes to ~16 seconds.\n+fn with_minimum_timer_resolution(f: impl Fn()) {\n+    #[cfg(windows)]\n+    unsafe {\n+        let ret = timeapi::timeBeginPeriod(1);\n+        assert_eq!(ret, timeapi::TIMERR_NOERROR);\n+\n+        f();\n+\n+        let ret = timeapi::timeEndPeriod(1);\n+        assert_eq!(ret, timeapi::TIMERR_NOERROR);\n+    }\n+\n+    #[cfg(not(windows))]\n+    {\n+        f();\n     }\n }"}]}