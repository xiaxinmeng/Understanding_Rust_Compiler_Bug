{"sha": "743cfce7032e3b0649c22bf1c397280192bf9e95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0M2NmY2U3MDMyZTNiMDY0OWMyMmJmMWMzOTcyODAxOTJiZjllOTU=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-06T03:39:18Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-06T03:39:18Z"}, "message": "core: convert vec::{last,last_opt} to return references", "tree": {"sha": "43dcf5c92761891df95bc33c2480426708926e73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43dcf5c92761891df95bc33c2480426708926e73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/743cfce7032e3b0649c22bf1c397280192bf9e95", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/743cfce7032e3b0649c22bf1c397280192bf9e95", "html_url": "https://github.com/rust-lang/rust/commit/743cfce7032e3b0649c22bf1c397280192bf9e95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/743cfce7032e3b0649c22bf1c397280192bf9e95/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a18bf8c67d99385ce4db6083ed8d4368c5b6ccfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/a18bf8c67d99385ce4db6083ed8d4368c5b6ccfe", "html_url": "https://github.com/rust-lang/rust/commit/a18bf8c67d99385ce4db6083ed8d4368c5b6ccfe"}], "stats": {"total": 125, "additions": 74, "deletions": 51}, "files": [{"sha": "1be0daf21ba94f94e89ff23e017869a2635625e1", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 39, "deletions": 22, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=743cfce7032e3b0649c22bf1c397280192bf9e95", "patch": "@@ -212,7 +212,7 @@ pub pure fn build_sized_opt<A>(size: Option<uint>,\n \n /// Returns the first element of a vector\n pub pure fn head<T>(v: &r/[T]) -> &r/T {\n-    if v.len() == 0 { fail!(~\"last_unsafe: empty vector\") }\n+    if v.len() == 0 { fail!(~\"head: empty vector\") }\n     &v[0]\n }\n \n@@ -237,18 +237,15 @@ pub pure fn initn<T>(v: &r/[T], n: uint) -> &r/[T] {\n }\n \n /// Returns the last element of the slice `v`, failing if the slice is empty.\n-pub pure fn last<T:Copy>(v: &[const T]) -> T {\n-    if len(v) == 0u { fail!(~\"last_unsafe: empty vector\") }\n-    v[len(v) - 1u]\n+pub pure fn last<T>(v: &r/[T]) -> &r/T {\n+    if v.len() == 0 { fail!(~\"last: empty vector\") }\n+    &v[v.len() - 1]\n }\n \n-/**\n- * Returns `Some(x)` where `x` is the last element of the slice `v`,\n- * or `none` if the vector is empty.\n- */\n-pub pure fn last_opt<T:Copy>(v: &[const T]) -> Option<T> {\n-    if len(v) == 0u { return None; }\n-    Some(v[len(v) - 1u])\n+/// Returns `Some(x)` where `x` is the last element of the slice `v`, or\n+/// `None` if the vector is empty.\n+pub pure fn last_opt<T>(v: &r/[T]) -> Option<&r/T> {\n+    if v.len() == 0 { None } else { Some(&v[v.len() - 1]) }\n }\n \n /// Return a slice that points into another slice.\n@@ -1696,16 +1693,11 @@ impl<T> Container for &[const T] {\n }\n \n pub trait CopyableVector<T> {\n-    pure fn last(&self) -> T;\n     pure fn slice(&self, start: uint, end: uint) -> ~[T];\n }\n \n /// Extension methods for vectors\n impl<T: Copy> CopyableVector<T> for &[const T] {\n-    /// Returns the last element of a `v`, failing if the vector is empty.\n-    #[inline]\n-    pure fn last(&self) -> T { last(*self) }\n-\n     /// Returns a copy of the elements from [`start`..`end`) from `v`.\n     #[inline]\n     pure fn slice(&self, start: uint, end: uint) -> ~[T] {\n@@ -1721,6 +1713,8 @@ pub trait ImmutableVector<T> {\n     pure fn tailn(&self, n: uint) -> &self/[T];\n     pure fn init(&self) -> &self/[T];\n     pure fn initn(&self, n: uint) -> &self/[T];\n+    pure fn last(&self) -> &self/T;\n+    pure fn last_opt(&self) -> Option<&self/T>;\n     pure fn foldr<U: Copy>(&self, z: U, p: fn(t: &T, u: U) -> U) -> U;\n     pure fn map<U>(&self, f: fn(t: &T) -> U) -> ~[U];\n     pure fn mapi<U>(&self, f: fn(uint, t: &T) -> U) -> ~[U];\n@@ -1762,6 +1756,14 @@ impl<T> ImmutableVector<T> for &[T] {\n     #[inline]\n     pure fn initn(&self, n: uint) -> &self/[T] { initn(*self, n) }\n \n+    /// Returns the last element of a `v`, failing if the vector is empty.\n+    #[inline]\n+    pure fn last(&self) -> &self/T { last(*self) }\n+\n+    /// Returns the last element of a `v`, failing if the vector is empty.\n+    #[inline]\n+    pure fn last_opt(&self) -> Option<&self/T> { last_opt(*self) }\n+\n     /// Reduce a vector from right to left\n     #[inline]\n     pure fn foldr<U:Copy>(&self, z: U, p: fn(t: &T, u: U) -> U) -> U {\n@@ -2679,12 +2681,27 @@ mod tests {\n \n     #[test]\n     fn test_last() {\n-        let mut n = last_opt(~[]);\n-        assert (n.is_none());\n-        n = last_opt(~[1, 2, 3]);\n-        assert (n == Some(3));\n-        n = last_opt(~[1, 2, 3, 4, 5]);\n-        assert (n == Some(5));\n+        let mut a = ~[11];\n+        assert a.last() == &11;\n+        a = ~[11, 12];\n+        assert a.last() == &12;\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_last_empty() {\n+        let a: ~[int] = ~[];\n+        a.last();\n+    }\n+\n+    #[test]\n+    fn test_last_opt() {\n+        let mut a = ~[];\n+        assert a.last_opt() == None;\n+        a = ~[11];\n+        assert a.last_opt().unwrap() == &11;\n+        a = ~[11, 12];\n+        assert a.last_opt().unwrap() == &12;\n     }\n \n     #[test]"}, {"sha": "ff26000af9749e3720aa58e44d6cce2d66d09683", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=743cfce7032e3b0649c22bf1c397280192bf9e95", "patch": "@@ -81,7 +81,9 @@ fn warn_if_multiple_versions(e: @mut Env,\n \n     if crate_cache.len() != 0u {\n         let name = loader::crate_name_from_metas(\n-            /*bad*/copy *crate_cache.last().metas);\n+            *crate_cache[crate_cache.len() - 1].metas\n+        );\n+\n         let (matches, non_matches) =\n             partition(crate_cache.map_to_vec(|&entry| {\n                 let othername = loader::crate_name_from_metas("}, {"sha": "d45cefdbf081f2203d407f7caa88167e15c2853d", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=743cfce7032e3b0649c22bf1c397280192bf9e95", "patch": "@@ -143,9 +143,9 @@ fn find_library_crate_aux(\n \n pub fn crate_name_from_metas(metas: &[@ast::meta_item]) -> @~str {\n     let name_items = attr::find_meta_items_by_name(metas, ~\"name\");\n-    match vec::last_opt(name_items) {\n+    match name_items.last_opt() {\n         Some(i) => {\n-            match attr::get_meta_item_value_str(i) {\n+            match attr::get_meta_item_value_str(*i) {\n                 Some(n) => n,\n                 // FIXME (#2406): Probably want a warning here since the user\n                 // is using the wrong type of meta item."}, {"sha": "49898885a66034a5712f4693e8c55a0911cb9ef1", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=743cfce7032e3b0649c22bf1c397280192bf9e95", "patch": "@@ -1438,7 +1438,7 @@ pub impl Resolver {\n                                 type_value_ns => AnyNS\n                             };\n \n-                            let source_ident = full_path.idents.last();\n+                            let source_ident = *full_path.idents.last();\n                             let subclass = @SingleImport(binding,\n                                                          source_ident,\n                                                          ns);\n@@ -4087,7 +4087,7 @@ pub impl Resolver {\n \n                 // First, check to see whether the name is a primitive type.\n                 if path.idents.len() == 1 {\n-                    let name = path.idents.last();\n+                    let name = *path.idents.last();\n \n                     match self.primitive_type_table\n                             .primitive_types\n@@ -4110,7 +4110,7 @@ pub impl Resolver {\n                                 debug!(\"(resolving type) resolved `%s` to \\\n                                         type %?\",\n                                        *self.session.str_of(\n-                                            path.idents.last()),\n+                                            *path.idents.last()),\n                                        def);\n                                 result_def = Some(def);\n                             }\n@@ -4296,7 +4296,7 @@ pub impl Resolver {\n                                 path.span,\n                                 fmt!(\"not an enum variant: %s\",\n                                      *self.session.str_of(\n-                                         path.idents.last())));\n+                                         *path.idents.last())));\n                         }\n                         None => {\n                             self.session.span_err(path.span,\n@@ -4418,7 +4418,7 @@ pub impl Resolver {\n                                                      namespace);\n         }\n \n-        return self.resolve_identifier(path.idents.last(),\n+        return self.resolve_identifier(*path.idents.last(),\n                                        namespace,\n                                        check_ribs,\n                                        path.span);\n@@ -4552,7 +4552,7 @@ pub impl Resolver {\n             }\n         }\n \n-        let name = path.idents.last();\n+        let name = *path.idents.last();\n         match self.resolve_definition_of_name_in_module(containing_module,\n                                                         name,\n                                                         namespace,\n@@ -4601,7 +4601,7 @@ pub impl Resolver {\n             }\n         }\n \n-        let name = path.idents.last();\n+        let name = *path.idents.last();\n         match self.resolve_definition_of_name_in_module(containing_module,\n                                                         name,\n                                                         namespace,"}, {"sha": "1926b2f2e5df7912915c2fb019cc0ee3e000913c", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=743cfce7032e3b0649c22bf1c397280192bf9e95", "patch": "@@ -2207,7 +2207,7 @@ pub fn register_fn_fuller(ccx: @CrateContext,\n            ast_map::path_to_str(path, ccx.sess.parse_sess.interner));\n \n     let ps = if attr::attrs_contains_name(attrs, \"no_mangle\") {\n-        path_elt_to_str(path.last(), ccx.sess.parse_sess.interner)\n+        path_elt_to_str(*path.last(), ccx.sess.parse_sess.interner)\n     } else {\n         mangle_exported_name(ccx, /*bad*/copy path, node_type)\n     };"}, {"sha": "61d0594d2274f98bee27bf7fc3227a53b5b47cc5", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=743cfce7032e3b0649c22bf1c397280192bf9e95", "patch": "@@ -792,12 +792,14 @@ pub fn create_arg(bcx: block, arg: ast::arg, sp: span)\n         match arg.pat.node {\n             ast::pat_ident(_, path, _) => {\n                 // XXX: This is wrong; it should work for multiple bindings.\n-                let mdnode = create_var(tg,\n-                                        context.node,\n-                                        *cx.sess.str_of(path.idents.last()),\n-                                        filemd.node,\n-                                        loc.line as int,\n-                                        tymd.node);\n+                let mdnode = create_var(\n+                    tg,\n+                    context.node,\n+                    *cx.sess.str_of(*path.idents.last()),\n+                    filemd.node,\n+                    loc.line as int,\n+                    tymd.node\n+                );\n \n                 let mdval = @Metadata {\n                     node: mdnode,"}, {"sha": "d7428ae15e7ef2dcb28629f2a9ec2e30971f9bc1", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=743cfce7032e3b0649c22bf1c397280192bf9e95", "patch": "@@ -57,7 +57,7 @@ pub fn parse_name(id: ~str) -> result::Result<~str, ~str> {\n         }\n     }\n \n-    result::Ok(parts.last())\n+    result::Ok(copy *parts.last())\n }\n \n struct ListenerFn {\n@@ -516,9 +516,11 @@ pub fn get_pkg(id: ~str,\n         return result::Err(~\"package not found\");\n     }\n \n-    result::Ok(sort::merge_sort(possibs, |v1, v2| {\n+    let possibs = sort::merge_sort(possibs, |v1, v2| {\n         v1.vers <= v2.vers\n-    }).last())\n+    });\n+\n+    result::Ok(copy *possibs.last())\n }\n \n pub fn add_pkg(pkg: &Package) -> bool {"}, {"sha": "e8836c5866284fecba1e922ee7bca5521f04a48f", "filename": "src/libstd/bigint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibstd%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibstd%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbigint.rs?ref=743cfce7032e3b0649c22bf1c397280192bf9e95", "patch": "@@ -346,7 +346,7 @@ pub impl BigUint {\n         }\n \n         let mut shift = 0;\n-        let mut n = other.data.last();\n+        let mut n = *other.data.last();\n         while n < (1 << BigDigit::bits - 2) {\n             n <<= 1;\n             shift += 1;\n@@ -384,7 +384,7 @@ pub impl BigUint {\n             }\n \n             let an = vec::slice(a.data, a.data.len() - n, a.data.len());\n-            let bn = b.data.last();\n+            let bn = *b.data.last();\n             let mut d = ~[];\n             let mut carry = 0;\n             for vec::rev_each(an) |elt| {"}, {"sha": "7993f15f622c8566f9fac2f2ead3d086f48733f0", "filename": "src/libstd/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=743cfce7032e3b0649c22bf1c397280192bf9e95", "patch": "@@ -759,7 +759,7 @@ pub fn Decoder(json: Json) -> Decoder {\n priv impl Decoder {\n     fn peek(&self) -> &self/Json {\n         if self.stack.len() == 0 { self.stack.push(&self.json); }\n-        vec::last(self.stack)\n+        self.stack[self.stack.len() - 1]\n     }\n \n     fn pop(&self) -> &self/Json {"}, {"sha": "2a2c655cca9eebeaef6c06f85b78ebb2858714ed", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=743cfce7032e3b0649c22bf1c397280192bf9e95", "patch": "@@ -197,7 +197,7 @@ mod tests {\n         let mut sorted = merge_sort(data, le);\n         let mut heap = from_vec(data);\n         while !heap.is_empty() {\n-            assert *heap.top() == sorted.last();\n+            assert heap.top() == sorted.last();\n             assert heap.pop() == sorted.pop();\n         }\n     }"}, {"sha": "ba683004aeec7ee10069e82c739c35217ce0b298", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=743cfce7032e3b0649c22bf1c397280192bf9e95", "patch": "@@ -31,7 +31,7 @@ pub pure fn path_name_i(idents: &[ident], intr: @token::ident_interner)\n }\n \n \n-pub pure fn path_to_ident(p: @path) -> ident { vec::last(p.idents) }\n+pub pure fn path_to_ident(p: @path) -> ident { copy *p.idents.last() }\n \n pub pure fn local_def(id: node_id) -> def_id {\n     ast::def_id { crate: local_crate, node: id }"}, {"sha": "fb7143f7c1438012effd31f4f273025c5d8a4f8c", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=743cfce7032e3b0649c22bf1c397280192bf9e95", "patch": "@@ -229,7 +229,7 @@ fn last_meta_item_by_name(items: &[@ast::meta_item], name: &str)\n     -> Option<@ast::meta_item> {\n \n     let items = attr::find_meta_items_by_name(items, name);\n-    vec::last_opt(items)\n+    items.last_opt().map(|item| **item)\n }\n \n pub fn last_meta_item_value_str_by_name(items: &[@ast::meta_item], name: &str)"}, {"sha": "116ecc37d2e18c0c8a9259a9cece29caebda411f", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=743cfce7032e3b0649c22bf1c397280192bf9e95", "patch": "@@ -167,7 +167,7 @@ pub fn tt_next_token(r: @mut TtReader) -> TokenAndSpan {\n     while r.cur.idx >= r.cur.readme.len() {\n         /* done with this set; pop or repeat? */\n         if ! r.cur.dotdotdoted\n-            || r.repeat_idx.last() == r.repeat_len.last() - 1 {\n+            || { *r.repeat_idx.last() == *r.repeat_len.last() - 1 } {\n \n             match r.cur.up {\n               None => {"}, {"sha": "4a372d016f9cf70d8ae2b6d9887eeb16d22fb55a", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=743cfce7032e3b0649c22bf1c397280192bf9e95", "patch": "@@ -93,7 +93,7 @@ fn recurse_or_fail(depth: int, st: Option<State>) {\n                 fn_box: || @Cons((), fn_box()),\n                 tuple: (@Cons((), st.tuple.first()),\n                         ~Cons((), @*st.tuple.second())),\n-                vec: st.vec + ~[@Cons((), st.vec.last())],\n+                vec: st.vec + ~[@Cons((), *st.vec.last())],\n                 res: r(@Cons((), st.res._l))\n             }\n           }"}, {"sha": "fdb6989b7bb37b2adc9b28a53fc6e2c2d77db6a9", "filename": "src/test/run-pass/zip-same-length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Ftest%2Frun-pass%2Fzip-same-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743cfce7032e3b0649c22bf1c397280192bf9e95/src%2Ftest%2Frun-pass%2Fzip-same-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fzip-same-length.rs?ref=743cfce7032e3b0649c22bf1c397280192bf9e95", "patch": "@@ -35,5 +35,5 @@ pub fn main() {\n     let ps = vec::zip(chars, ints);\n \n     assert (ps.head() == &('a', 1u));\n-    assert (ps.last() == (j as char, 10u));\n+    assert (ps.last() == &(j as char, 10u));\n }"}]}