{"sha": "d43674e2c9b1a7b134ef76378c30e822c75c9aa1", "node_id": "C_kwDOAAsO6NoAKGQ0MzY3NGUyYzliMWE3YjEzNGVmNzYzNzhjMzBlODIyYzc1YzlhYTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-07T00:32:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-07T00:32:57Z"}, "message": "Auto merge of #105397 - matthiaskrgr:rollup-xv5imz8, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #105298 (llvm-wrapper: adapt for an LLVM API change)\n - #105358 (Add a test for #104260)\n - #105380 (add const generics ping files things for me)\n - #105382 (remove an excess `this`)\n - #105388 (rustdoc: remove redundant CSS `.import-item .stab { font-size }`)\n - #105390 (unstable-book: Add `ignore` to `abi_efiapi` example code)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "adc30e8c94cb6bfbb6ca35288d6c6545ffc8f1c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adc30e8c94cb6bfbb6ca35288d6c6545ffc8f1c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d43674e2c9b1a7b134ef76378c30e822c75c9aa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d43674e2c9b1a7b134ef76378c30e822c75c9aa1", "html_url": "https://github.com/rust-lang/rust/commit/d43674e2c9b1a7b134ef76378c30e822c75c9aa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d43674e2c9b1a7b134ef76378c30e822c75c9aa1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "023b5136b597053f76941b54eeae668219e6e18d", "url": "https://api.github.com/repos/rust-lang/rust/commits/023b5136b597053f76941b54eeae668219e6e18d", "html_url": "https://github.com/rust-lang/rust/commit/023b5136b597053f76941b54eeae668219e6e18d"}, {"sha": "62d5beed0f29c32147c7c91308d201b8940711b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/62d5beed0f29c32147c7c91308d201b8940711b8", "html_url": "https://github.com/rust-lang/rust/commit/62d5beed0f29c32147c7c91308d201b8940711b8"}], "stats": {"total": 58, "additions": 52, "deletions": 6}, "files": [{"sha": "1a3d458c30067cfce22e11625a5c9e5fa9ccaf53", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d43674e2c9b1a7b134ef76378c30e822c75c9aa1/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d43674e2c9b1a7b134ef76378c30e822c75c9aa1/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=d43674e2c9b1a7b134ef76378c30e822c75c9aa1", "patch": "@@ -205,7 +205,12 @@ enum class LLVMRustCodeModel {\n   None,\n };\n \n-static Optional<CodeModel::Model> fromRust(LLVMRustCodeModel Model) {\n+#if LLVM_VERSION_LT(16, 0)\n+static Optional<CodeModel::Model>\n+#else\n+static std::optional<CodeModel::Model>\n+#endif\n+fromRust(LLVMRustCodeModel Model) {\n   switch (Model) {\n   case LLVMRustCodeModel::Tiny:\n     return CodeModel::Tiny;\n@@ -638,7 +643,11 @@ LLVMRustOptimize(\n     LLVMSelfProfileInitializeCallbacks(PIC,LlvmSelfProfiler,BeforePassCallback,AfterPassCallback);\n   }\n \n+#if LLVM_VERSION_LT(16, 0)\n   Optional<PGOOptions> PGOOpt;\n+#else\n+  std::optional<PGOOptions> PGOOpt;\n+#endif\n   if (PGOGenPath) {\n     assert(!PGOUsePath && !PGOSampleUsePath);\n     PGOOpt = PGOOptions(PGOGenPath, \"\", \"\", PGOOptions::IRInstr,"}, {"sha": "3a748f38995bbc77bf8102379e227ab4a922d2f4", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d43674e2c9b1a7b134ef76378c30e822c75c9aa1/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d43674e2c9b1a7b134ef76378c30e822c75c9aa1/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=d43674e2c9b1a7b134ef76378c30e822c75c9aa1", "patch": "@@ -17,7 +17,9 @@\n #include \"llvm/Pass.h\"\n #include \"llvm/Bitcode/BitcodeWriter.h\"\n #include \"llvm/Support/Signals.h\"\n+#if LLVM_VERSION_LT(16, 0)\n #include \"llvm/ADT/Optional.h\"\n+#endif\n \n #include <iostream>\n \n@@ -708,7 +710,11 @@ enum class LLVMRustChecksumKind {\n   SHA256,\n };\n \n+#if LLVM_VERSION_LT(16, 0)\n static Optional<DIFile::ChecksumKind> fromRust(LLVMRustChecksumKind Kind) {\n+#else\n+static std::optional<DIFile::ChecksumKind> fromRust(LLVMRustChecksumKind Kind) {\n+#endif\n   switch (Kind) {\n   case LLVMRustChecksumKind::None:\n     return None;\n@@ -787,8 +793,18 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateFile(\n     const char *Filename, size_t FilenameLen,\n     const char *Directory, size_t DirectoryLen, LLVMRustChecksumKind CSKind,\n     const char *Checksum, size_t ChecksumLen) {\n+\n+#if LLVM_VERSION_LT(16, 0)\n   Optional<DIFile::ChecksumKind> llvmCSKind = fromRust(CSKind);\n+#else\n+  std::optional<DIFile::ChecksumKind> llvmCSKind = fromRust(CSKind);\n+#endif\n+\n+#if LLVM_VERSION_LT(16, 0)\n   Optional<DIFile::ChecksumInfo<StringRef>> CSInfo{};\n+#else\n+  std::optional<DIFile::ChecksumInfo<StringRef>> CSInfo{};\n+#endif\n   if (llvmCSKind)\n     CSInfo.emplace(*llvmCSKind, StringRef{Checksum, ChecksumLen});\n   return wrap(Builder->createFile(StringRef(Filename, FilenameLen),"}, {"sha": "7cc0999478a3eddf3aeff66d0c868647ba38cf9d", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d43674e2c9b1a7b134ef76378c30e822c75c9aa1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43674e2c9b1a7b134ef76378c30e822c75c9aa1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=d43674e2c9b1a7b134ef76378c30e822c75c9aa1", "patch": "@@ -64,7 +64,7 @@ pub fn is_const_evaluatable<'tcx>(\n             ty::ConstKind::Expr(_) => {\n                 // FIXME(generic_const_exprs): we have a `ConstKind::Expr` which is fully concrete, but\n                 // currently it is not possible to evaluate `ConstKind::Expr` so we are unable to tell if it\n-                // is evaluatable or not. For now we just ICE until this is implemented this.\n+                // is evaluatable or not. For now we just ICE until this is implemented.\n                 Err(NotConstEvaluatable::Error(tcx.sess.delay_span_bug(\n                     span,\n                     \"evaluating `ConstKind::Expr` is not currently supported\","}, {"sha": "b492da88474ee297d63fa6fbafc08fbd9c1f8ae5", "filename": "src/doc/unstable-book/src/language-features/abi-efiapi.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d43674e2c9b1a7b134ef76378c30e822c75c9aa1/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-efiapi.md", "raw_url": "https://github.com/rust-lang/rust/raw/d43674e2c9b1a7b134ef76378c30e822c75c9aa1/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-efiapi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-efiapi.md?ref=d43674e2c9b1a7b134ef76378c30e822c75c9aa1", "patch": "@@ -12,7 +12,7 @@ Specification].\n \n Example:\n \n-```rust\n+```rust,ignore (not-all-targets-support-uefi)\n #![feature(abi_efiapi)]\n \n extern \"efiapi\" { fn f1(); }"}, {"sha": "5ebc545d10c2b0fa4ff67cc9938cbaa82e81add0", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d43674e2c9b1a7b134ef76378c30e822c75c9aa1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/d43674e2c9b1a7b134ef76378c30e822c75c9aa1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=d43674e2c9b1a7b134ef76378c30e822c75c9aa1", "patch": "@@ -1014,7 +1014,6 @@ so that we can apply CSS-filters to change the arrow color in themes */\n .import-item .stab {\n \tborder-radius: 3px;\n \tdisplay: inline-block;\n-\tfont-size: 0.875rem;\n \tline-height: 1.2;\n \tmargin-bottom: 0;\n \tmargin-left: 0.3125em;"}, {"sha": "a73cd1775b462e8795a456c1c9123026d6122d23", "filename": "src/test/ui/associated-inherent-types/issue-104260.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d43674e2c9b1a7b134ef76378c30e822c75c9aa1/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fissue-104260.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43674e2c9b1a7b134ef76378c30e822c75c9aa1/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fissue-104260.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fissue-104260.rs?ref=d43674e2c9b1a7b134ef76378c30e822c75c9aa1", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+struct Foo;\n+\n+impl Foo {\n+    type Bar<T> = u8;\n+}\n+\n+fn main() {\n+    let a: Foo::Bar<()>;\n+}"}, {"sha": "49945e5c533cb3e922d09783fded46c45661895e", "filename": "triagebot.toml", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d43674e2c9b1a7b134ef76378c30e822c75c9aa1/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d43674e2c9b1a7b134ef76378c30e822c75c9aa1/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=d43674e2c9b1a7b134ef76378c30e822c75c9aa1", "patch": "@@ -331,8 +331,16 @@ message = \"Some changes occurred to MIR optimizations\"\n cc = [\"@rust-lang/wg-mir-opt\"]\n \n [mentions.\"compiler/rustc_trait_selection/src/traits/const_evaluatable.rs\"]\n-message = \"Some changes occurred in const_evaluatable.rs\"\n-cc = [\"@lcnr\"]\n+message = \"Some changes occurred in `const_evaluatable.rs`\"\n+cc = [\"@BoxyUwU\"]\n+\n+[mentions.\"compiler/rustc_middle/src/ty/abstract_const.rs\"]\n+message = \"Some changes occured in `abstract_const.rs`\"\n+cc = [\"@BoxyUwU\"]\n+\n+[mentions.\"compiler/rustc_ty_utils/src/consts.rs\"]\n+message = \"Some changes occured in `rustc_ty_utils::consts.rs`\"\n+cc = [\"@BoxyUwU\"]\n \n [mentions.\"compiler/rustc_trait_selection/src/traits/engine.rs\"]\n message = \"\"\""}]}