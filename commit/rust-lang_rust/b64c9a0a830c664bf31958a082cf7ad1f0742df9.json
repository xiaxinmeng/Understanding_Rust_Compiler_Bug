{"sha": "b64c9a0a830c664bf31958a082cf7ad1f0742df9", "node_id": "C_kwDOAAsO6NoAKGI2NGM5YTBhODMwYzY2NGJmMzE5NThhMDgyY2Y3YWQxZjA3NDJkZjk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-06T21:44:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-07T00:16:02Z"}, "message": "make scheduler preemptive, with configurable preemption rate", "tree": {"sha": "55a56343fee910fa535a46be472a271b22706c0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55a56343fee910fa535a46be472a271b22706c0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b64c9a0a830c664bf31958a082cf7ad1f0742df9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b64c9a0a830c664bf31958a082cf7ad1f0742df9", "html_url": "https://github.com/rust-lang/rust/commit/b64c9a0a830c664bf31958a082cf7ad1f0742df9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b64c9a0a830c664bf31958a082cf7ad1f0742df9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dac95a3ad8507fcad5fa64656ededd4cffc5b996", "url": "https://api.github.com/repos/rust-lang/rust/commits/dac95a3ad8507fcad5fa64656ededd4cffc5b996", "html_url": "https://github.com/rust-lang/rust/commit/dac95a3ad8507fcad5fa64656ededd4cffc5b996"}], "stats": {"total": 132, "additions": 111, "deletions": 21}, "files": [{"sha": "6ccc9e25f69755e796732791e24321ca5aff96eb", "filename": "README.md", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b64c9a0a830c664bf31958a082cf7ad1f0742df9/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b64c9a0a830c664bf31958a082cf7ad1f0742df9/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b64c9a0a830c664bf31958a082cf7ad1f0742df9", "patch": "@@ -288,14 +288,16 @@ environment variable. We first document the most relevant and most commonly used\n   `-Zmiri-disable-isolation` is set.\n * `-Zmiri-ignore-leaks` disables the memory leak checker, and also allows some\n   remaining threads to exist when the main thread exits.\n-* `-Zmiri-seed=<hex>` configures the seed of the RNG that Miri uses to resolve\n-  non-determinism. This RNG is used to pick base addresses for allocations. When\n-  isolation is enabled (the default), this is also used to emulate system\n-  entropy. The default seed is 0. You can increase test coverage by running Miri\n-  multiple times with different seeds.\n-  **NOTE**: This entropy is not good enough for cryptographic use! Do not\n-  generate secret keys in Miri or perform other kinds of cryptographic\n-  operations that rely on proper random numbers.\n+* `-Zmiri-preemption-rate` configures the probability that at the end of a basic block, the active\n+  thread will be preempted. The default is `0.01` (i.e., 1%). Setting this to `0` disables\n+  preemption.\n+* `-Zmiri-seed=<hex>` configures the seed of the RNG that Miri uses to resolve non-determinism. This\n+  RNG is used to pick base addresses for allocations, to determine preemption and failure of\n+  `compare_exchange_weak`, and to control store buffering for weak memory emulation. When isolation\n+  is enabled (the default), this is also used to emulate system entropy. The default seed is 0. You\n+  can increase test coverage by running Miri multiple times with different seeds. **NOTE**: This\n+  entropy is not good enough for cryptographic use! Do not generate secret keys in Miri or perform\n+  other kinds of cryptographic operations that rely on proper random numbers.\n * `-Zmiri-strict-provenance` enables [strict\n   provenance](https://github.com/rust-lang/rust/issues/95228) checking in Miri. This means that\n   casting an integer to a pointer yields a result with 'invalid' provenance, i.e., with provenance"}, {"sha": "64047d146c3b992bd820b85e67bcda72ef8a0ad9", "filename": "src/bin/miri.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b64c9a0a830c664bf31958a082cf7ad1f0742df9/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b64c9a0a830c664bf31958a082cf7ad1f0742df9/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=b64c9a0a830c664bf31958a082cf7ad1f0742df9", "patch": "@@ -449,6 +449,17 @@ fn main() {\n                     ),\n             };\n             miri_config.cmpxchg_weak_failure_rate = rate;\n+        } else if let Some(param) = arg.strip_prefix(\"-Zmiri-preemption-rate=\") {\n+            let rate = match param.parse::<f64>() {\n+                Ok(rate) if rate >= 0.0 && rate <= 1.0 => rate,\n+                Ok(_) => panic!(\"-Zmiri-preemption-rate must be between `0.0` and `1.0`\"),\n+                Err(err) =>\n+                    panic!(\n+                        \"-Zmiri-preemption-rate requires a `f64` between `0.0` and `1.0`: {}\",\n+                        err\n+                    ),\n+            };\n+            miri_config.preemption_rate = rate;\n         } else if let Some(param) = arg.strip_prefix(\"-Zmiri-measureme=\") {\n             miri_config.measureme_out = Some(param.to_string());\n         } else if let Some(param) = arg.strip_prefix(\"-Zmiri-backtrace=\") {"}, {"sha": "7c971d2a1490ad184e2794c99b7e45f3b527994b", "filename": "src/eval.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b64c9a0a830c664bf31958a082cf7ad1f0742df9/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b64c9a0a830c664bf31958a082cf7ad1f0742df9/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=b64c9a0a830c664bf31958a082cf7ad1f0742df9", "patch": "@@ -122,6 +122,8 @@ pub struct MiriConfig {\n     /// Whether to ignore any output by the program. This is helpful when debugging miri\n     /// as its messages don't get intermingled with the program messages.\n     pub mute_stdout_stderr: bool,\n+    /// The probability of the active thread being preempted at the end of each basic block.\n+    pub preemption_rate: f64,\n }\n \n impl Default for MiriConfig {\n@@ -145,12 +147,13 @@ impl Default for MiriConfig {\n             tag_raw: false,\n             data_race_detector: true,\n             weak_memory_emulation: true,\n-            cmpxchg_weak_failure_rate: 0.8,\n+            cmpxchg_weak_failure_rate: 0.8, // 80%\n             measureme_out: None,\n             panic_on_unsupported: false,\n             backtrace_style: BacktraceStyle::Short,\n             provenance_mode: ProvenanceMode::Legacy,\n             mute_stdout_stderr: false,\n+            preemption_rate: 0.01, // 1%\n         }\n     }\n }"}, {"sha": "5e93045aec1abd200a429068bc403c8d777cf35b", "filename": "src/machine.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b64c9a0a830c664bf31958a082cf7ad1f0742df9/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b64c9a0a830c664bf31958a082cf7ad1f0742df9/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=b64c9a0a830c664bf31958a082cf7ad1f0742df9", "patch": "@@ -333,6 +333,9 @@ pub struct Evaluator<'mir, 'tcx> {\n \n     /// Whether weak memory emulation is enabled\n     pub(crate) weak_memory: bool,\n+\n+    /// The probability of the active thread being preempted at the end of each basic block.\n+    pub(crate) preemption_rate: f64,\n }\n \n impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n@@ -389,6 +392,7 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n             cmpxchg_weak_failure_rate: config.cmpxchg_weak_failure_rate,\n             mute_stdout_stderr: config.mute_stdout_stderr,\n             weak_memory: config.weak_memory_emulation,\n+            preemption_rate: config.preemption_rate,\n         }\n     }\n \n@@ -846,6 +850,11 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         ecx.active_thread_stack_mut()\n     }\n \n+    fn before_terminator(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n+        ecx.maybe_preempt_active_thread();\n+        Ok(())\n+    }\n+\n     #[inline(always)]\n     fn after_stack_push(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n         if ecx.machine.stacked_borrows.is_some() { ecx.retag_return_place() } else { Ok(()) }"}, {"sha": "9eabbd77419fb82d33dfab10a76fb6aa5d39e807", "filename": "src/thread.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b64c9a0a830c664bf31958a082cf7ad1f0742df9/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b64c9a0a830c664bf31958a082cf7ad1f0742df9/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=b64c9a0a830c664bf31958a082cf7ad1f0742df9", "patch": "@@ -717,6 +717,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.machine.threads.yield_active_thread();\n     }\n \n+    #[inline]\n+    fn maybe_preempt_active_thread(&mut self) {\n+        use rand::Rng as _;\n+\n+        let this = self.eval_context_mut();\n+        if this.machine.rng.get_mut().gen_bool(this.machine.preemption_rate) {\n+            this.yield_active_thread();\n+        }\n+    }\n+\n     #[inline]\n     fn register_timeout_callback(\n         &mut self,"}, {"sha": "db45b33c146840bf50ee0b4c8810bd592282e768", "filename": "tests/fail/concurrency/libc_pthread_join_self.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_self.rs?ref=b64c9a0a830c664bf31958a082cf7ad1f0742df9", "patch": "@@ -1,4 +1,6 @@\n // ignore-windows: No libc on Windows\n+// We are making scheduler assumptions here.\n+// compile-flags: -Zmiri-preemption-rate=0\n \n // Joining itself is undefined behavior.\n "}, {"sha": "4adb7071f294b9aa9b10d50b48a38f787e6caa1d", "filename": "tests/fail/data_race/alloc_read_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Ffail%2Fdata_race%2Falloc_read_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Ffail%2Fdata_race%2Falloc_read_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Falloc_read_race.rs?ref=b64c9a0a830c664bf31958a082cf7ad1f0742df9", "patch": "@@ -1,5 +1,5 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-weak-memory-emulation\n+// compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n #![feature(new_uninit)]\n \n use std::thread::spawn;"}, {"sha": "e4a1192f95b39605eb0b7916a06ce7cead6a6a45", "filename": "tests/fail/data_race/alloc_write_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Ffail%2Fdata_race%2Falloc_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Ffail%2Fdata_race%2Falloc_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Falloc_write_race.rs?ref=b64c9a0a830c664bf31958a082cf7ad1f0742df9", "patch": "@@ -1,5 +1,5 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-weak-memory-emulation\n+// compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n #![feature(new_uninit)]\n \n use std::thread::spawn;"}, {"sha": "f458d1126efe73684488ac5125b330bb58ef6231", "filename": "tests/fail/data_race/dealloc_read_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs?ref=b64c9a0a830c664bf31958a082cf7ad1f0742df9", "patch": "@@ -1,5 +1,5 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation\n+// compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n \n use std::thread::{spawn, sleep};\n use std::ptr::null_mut;"}, {"sha": "d1fe8c3e9a16040e20794f5197bcd37818b7730c", "filename": "tests/fail/data_race/dealloc_write_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs?ref=b64c9a0a830c664bf31958a082cf7ad1f0742df9", "patch": "@@ -1,5 +1,5 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation\n+// compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n \n use std::thread::{spawn, sleep};\n use std::ptr::null_mut;"}, {"sha": "f5c4768296b01aa90219c65b910fc32eda9d3070", "filename": "tests/fail/data_race/read_write_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs?ref=b64c9a0a830c664bf31958a082cf7ad1f0742df9", "patch": "@@ -1,5 +1,5 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation -Zmir-opt-level=0 -Zmiri-disable-weak-memory-emulation\n+// compile-flags: -Zmiri-disable-isolation -Zmir-opt-level=0 -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n \n // Note: mir-opt-level set to 0 to prevent the read of stack_var in thread 1\n // from being optimized away and preventing the detection of the data-race."}, {"sha": "64c0f95fa4bae850621256dffef2fe033740335c", "filename": "tests/fail/data_race/relax_acquire_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs?ref=b64c9a0a830c664bf31958a082cf7ad1f0742df9", "patch": "@@ -1,5 +1,5 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-weak-memory-emulation\n+// compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n \n use std::thread::spawn;\n use std::sync::atomic::{AtomicUsize, Ordering};"}, {"sha": "964d1b4937b8968b6da7453f90485001fe9ace2b", "filename": "tests/fail/data_race/release_seq_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Ffail%2Fdata_race%2Frelease_seq_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Ffail%2Fdata_race%2Frelease_seq_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelease_seq_race.rs?ref=b64c9a0a830c664bf31958a082cf7ad1f0742df9", "patch": "@@ -1,5 +1,5 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation\n+// compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n \n use std::thread::{spawn, sleep};\n use std::sync::atomic::{AtomicUsize, Ordering};"}, {"sha": "01d45a1b7ccf03c8d4f37aa88407194270e368f1", "filename": "tests/fail/data_race/release_seq_race_same_thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs?ref=b64c9a0a830c664bf31958a082cf7ad1f0742df9", "patch": "@@ -1,5 +1,5 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation\n+// compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n \n use std::thread::spawn;\n use std::sync::atomic::{AtomicUsize, Ordering};"}, {"sha": "fab6fabe5b6fb744dc2fe652cf331163debabf51", "filename": "tests/fail/data_race/rmw_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Ffail%2Fdata_race%2Frmw_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Ffail%2Fdata_race%2Frmw_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frmw_race.rs?ref=b64c9a0a830c664bf31958a082cf7ad1f0742df9", "patch": "@@ -1,5 +1,5 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-weak-memory-emulation\n+// compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n \n use std::thread::spawn;\n use std::sync::atomic::{AtomicUsize, Ordering};"}, {"sha": "e6ae207d8610039857a62fa58a96eccb1bc67e01", "filename": "tests/fail/data_race/write_write_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs?ref=b64c9a0a830c664bf31958a082cf7ad1f0742df9", "patch": "@@ -1,5 +1,5 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation\n+// compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n \n use std::thread::{spawn, sleep};\n use std::ptr::null_mut;"}, {"sha": "7d26077bb49f83a33c984e489d904f28502ff425", "filename": "tests/pass/concurrency/spin_loop.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Fpass%2Fconcurrency%2Fspin_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Fpass%2Fconcurrency%2Fspin_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Fspin_loop.rs?ref=b64c9a0a830c664bf31958a082cf7ad1f0742df9", "patch": "@@ -0,0 +1,42 @@\n+use std::thread;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+\n+static FLAG: AtomicUsize = AtomicUsize::new(0);\n+\n+fn spin() {\n+    let j = thread::spawn(|| {\n+        while FLAG.load(Ordering::Acquire) == 0 {\n+            // We do *not* yield, and yet this should terminate eventually.\n+        }\n+    });\n+    thread::yield_now(); // schedule the other thread\n+    FLAG.store(1, Ordering::Release);\n+    j.join().unwrap();\n+}\n+\n+fn two_player_ping_pong() {\n+    static FLAG: AtomicUsize = AtomicUsize::new(0);\n+\n+    let waiter1 = thread::spawn(|| {\n+        while FLAG.load(Ordering::Acquire) == 0 {\n+            // We do *not* yield, and yet this should terminate eventually.\n+        }\n+    });\n+    let waiter2 = thread::spawn(|| {\n+        while FLAG.load(Ordering::Acquire) == 0 {\n+            // We do *not* yield, and yet this should terminate eventually.\n+        }\n+    });\n+    let progress = thread::spawn(|| {\n+        FLAG.store(1, Ordering::Release);\n+    });\n+    // The first `join` blocks the main thread and thus takes it out of the equation.\n+    waiter1.join().unwrap();\n+    waiter2.join().unwrap();\n+    progress.join().unwrap();\n+}\n+\n+fn main() {\n+    spin();\n+    two_player_ping_pong();\n+}"}, {"sha": "9fe6daa778c1fc66489c84ab4c37b05f227b1e52", "filename": "tests/pass/concurrency/spin_loop.stderr", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Fpass%2Fconcurrency%2Fspin_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Fpass%2Fconcurrency%2Fspin_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Fspin_loop.stderr?ref=b64c9a0a830c664bf31958a082cf7ad1f0742df9", "patch": "@@ -0,0 +1,3 @@\n+warning: thread support is experimental: the scheduler is not preemptive, and can get stuck in spin loops.\n+         (see https://github.com/rust-lang/miri/issues/1388)\n+"}, {"sha": "d8064f6ed53964630cf1259530a223c2187fc645", "filename": "tests/pass/concurrency/spin_loops_nopreempt.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Fpass%2Fconcurrency%2Fspin_loops_nopreempt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Fpass%2Fconcurrency%2Fspin_loops_nopreempt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Fspin_loops_nopreempt.rs?ref=b64c9a0a830c664bf31958a082cf7ad1f0742df9", "patch": "@@ -1,4 +1,6 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n+// This specifically tests behavior *without* preemption.\n+// compile-flags: -Zmiri-preemption-rate=0\n \n use std::thread;\n use std::sync::atomic::{AtomicBool, AtomicUsize, Ordering};", "previous_filename": "tests/pass/concurrency/spin_loops.rs"}, {"sha": "9fe6daa778c1fc66489c84ab4c37b05f227b1e52", "filename": "tests/pass/concurrency/spin_loops_nopreempt.stderr", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Fpass%2Fconcurrency%2Fspin_loops_nopreempt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Fpass%2Fconcurrency%2Fspin_loops_nopreempt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Fspin_loops_nopreempt.stderr?ref=b64c9a0a830c664bf31958a082cf7ad1f0742df9", "patch": "@@ -0,0 +1,3 @@\n+warning: thread support is experimental: the scheduler is not preemptive, and can get stuck in spin loops.\n+         (see https://github.com/rust-lang/miri/issues/1388)\n+"}, {"sha": "26f44aa4371896239e714f5f0685958f717a6832", "filename": "tests/pass/concurrency/sync.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Fpass%2Fconcurrency%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Fpass%2Fconcurrency%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Fsync.rs?ref=b64c9a0a830c664bf31958a082cf7ad1f0742df9", "patch": "@@ -1,5 +1,6 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation -Zmiri-strict-provenance\n+// We are making scheduler assumptions here.\n+// compile-flags: -Zmiri-disable-isolation -Zmiri-strict-provenance -Zmiri-preemption-rate=0\n \n use std::sync::{Arc, Barrier, Condvar, Mutex, Once, RwLock};\n use std::thread;"}, {"sha": "7b17ac4fa79c1ae95eecd0cb678a2c45efa8e797", "filename": "tests/pass/panic/concurrent-panic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Fpass%2Fpanic%2Fconcurrent-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Fpass%2Fpanic%2Fconcurrent-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fpanic%2Fconcurrent-panic.rs?ref=b64c9a0a830c664bf31958a082cf7ad1f0742df9", "patch": "@@ -1,4 +1,6 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n+// We are making scheduler assumptions here.\n+// compile-flags: -Zmiri-preemption-rate=0\n \n //! Cause a panic in one thread while another thread is unwinding. This checks\n //! that separate threads have their own panicking state."}, {"sha": "e1e9c41e36f5d94489d0891ebbb520dffead38f7", "filename": "tests/pass/weak_memory/weak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Fpass%2Fweak_memory%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b64c9a0a830c664bf31958a082cf7ad1f0742df9/tests%2Fpass%2Fweak_memory%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fweak_memory%2Fweak.rs?ref=b64c9a0a830c664bf31958a082cf7ad1f0742df9", "patch": "@@ -1,5 +1,5 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-ignore-leaks\n+// compile-flags: -Zmiri-ignore-leaks -Zmiri-preemption-rate=0\n \n // Tests showing weak memory behaviours are exhibited. All tests\n // return true when the desired behaviour is seen."}]}