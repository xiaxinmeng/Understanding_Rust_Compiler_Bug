{"sha": "11915108810250f74e0d30ac6f12948a7e94e648", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExOTE1MTA4ODEwMjUwZjc0ZTBkMzBhYzZmMTI5NDhhN2U5NGU2NDg=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-02-11T22:39:09Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-03-09T03:30:00Z"}, "message": "Remove ONLY_BUILD_TARGETS.\n\nAll cases where it is used can be replaced by substituing run.host for\nrun.builder.build.build; that is its only effect. As such, it is\nremovable.", "tree": {"sha": "606b83e5c20879fb363446ba7c0b806438ac9c55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/606b83e5c20879fb363446ba7c0b806438ac9c55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11915108810250f74e0d30ac6f12948a7e94e648", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11915108810250f74e0d30ac6f12948a7e94e648", "html_url": "https://github.com/rust-lang/rust/commit/11915108810250f74e0d30ac6f12948a7e94e648", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11915108810250f74e0d30ac6f12948a7e94e648/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "604d4ce7577b07b73d115c94fbd8007c1d9c9335", "url": "https://api.github.com/repos/rust-lang/rust/commits/604d4ce7577b07b73d115c94fbd8007c1d9c9335", "html_url": "https://github.com/rust-lang/rust/commit/604d4ce7577b07b73d115c94fbd8007c1d9c9335"}], "stats": {"total": 31, "additions": 5, "deletions": 26}, "files": [{"sha": "1e15d5393829f15662b3453d021777c3a9a3a36c", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11915108810250f74e0d30ac6f12948a7e94e648/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11915108810250f74e0d30ac6f12948a7e94e648/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=11915108810250f74e0d30ac6f12948a7e94e648", "patch": "@@ -60,9 +60,6 @@ pub trait Step: 'static + Clone + Debug + PartialEq + Eq + Hash {\n     /// Run this rule for all hosts without cross compiling.\n     const ONLY_HOSTS: bool = false;\n \n-    /// Run this rule for all targets, but only with the native host.\n-    const ONLY_BUILD_TARGETS: bool = false;\n-\n     /// Only run this step with the build triple as host and target.\n     const ONLY_BUILD: bool = false;\n \n@@ -101,7 +98,6 @@ pub struct RunConfig<'a> {\n struct StepDescription {\n     default: bool,\n     only_hosts: bool,\n-    only_build_targets: bool,\n     only_build: bool,\n     should_run: fn(ShouldRun) -> ShouldRun,\n     make_run: fn(RunConfig),\n@@ -138,7 +134,6 @@ impl StepDescription {\n         StepDescription {\n             default: S::DEFAULT,\n             only_hosts: S::ONLY_HOSTS,\n-            only_build_targets: S::ONLY_BUILD_TARGETS,\n             only_build: S::ONLY_BUILD,\n             should_run: S::should_run,\n             make_run: S::make_run,\n@@ -155,7 +150,7 @@ impl StepDescription {\n                 self.name, builder.config.exclude);\n         }\n         let build = builder.build;\n-        let hosts = if self.only_build_targets || self.only_build {\n+        let hosts = if self.only_build {\n             build.build_triple()\n         } else {\n             &build.hosts"}, {"sha": "c3d8c9f8c010d4019e526f9886489479040176f4", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/11915108810250f74e0d30ac6f12948a7e94e648/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11915108810250f74e0d30ac6f12948a7e94e648/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=11915108810250f74e0d30ac6f12948a7e94e648", "patch": "@@ -70,7 +70,6 @@ pub struct Docs {\n impl Step for Docs {\n     type Output = PathBuf;\n     const DEFAULT: bool = true;\n-    const ONLY_BUILD_TARGETS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n         run.path(\"src/doc\")\n@@ -271,7 +270,6 @@ pub struct Mingw {\n impl Step for Mingw {\n     type Output = Option<PathBuf>;\n     const DEFAULT: bool = true;\n-    const ONLY_BUILD_TARGETS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n         run.never()\n@@ -331,7 +329,6 @@ impl Step for Rustc {\n     type Output = PathBuf;\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n-    const ONLY_BUILD_TARGETS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n         run.path(\"src/librustc\")\n@@ -561,15 +558,14 @@ pub struct Std {\n impl Step for Std {\n     type Output = PathBuf;\n     const DEFAULT: bool = true;\n-    const ONLY_BUILD_TARGETS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n         run.path(\"src/libstd\")\n     }\n \n     fn make_run(run: RunConfig) {\n         run.builder.ensure(Std {\n-            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n+            compiler: run.builder.compiler(run.builder.top_stage, run.builder.build.build),\n             target: run.target,\n         });\n     }\n@@ -638,7 +634,6 @@ pub struct Analysis {\n impl Step for Analysis {\n     type Output = PathBuf;\n     const DEFAULT: bool = true;\n-    const ONLY_BUILD_TARGETS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n         let builder = run.builder;\n@@ -647,7 +642,7 @@ impl Step for Analysis {\n \n     fn make_run(run: RunConfig) {\n         run.builder.ensure(Analysis {\n-            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n+            compiler: run.builder.compiler(run.builder.top_stage, run.builder.build.build),\n             target: run.target,\n         });\n     }\n@@ -755,8 +750,6 @@ impl Step for Src {\n     type Output = PathBuf;\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n-    const ONLY_BUILD_TARGETS: bool = true;\n-    const ONLY_BUILD: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n         run.path(\"src\")\n@@ -851,8 +844,6 @@ impl Step for PlainSourceTarball {\n     type Output = PathBuf;\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n-    const ONLY_BUILD_TARGETS: bool = true;\n-    const ONLY_BUILD: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n         let builder = run.builder;\n@@ -1007,7 +998,6 @@ pub struct Cargo {\n \n impl Step for Cargo {\n     type Output = PathBuf;\n-    const ONLY_BUILD_TARGETS: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n@@ -1095,7 +1085,6 @@ pub struct Rls {\n \n impl Step for Rls {\n     type Output = Option<PathBuf>;\n-    const ONLY_BUILD_TARGETS: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n@@ -1177,7 +1166,6 @@ pub struct Rustfmt {\n \n impl Step for Rustfmt {\n     type Output = Option<PathBuf>;\n-    const ONLY_BUILD_TARGETS: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n@@ -1263,7 +1251,6 @@ pub struct Extended {\n impl Step for Extended {\n     type Output = ();\n     const DEFAULT: bool = true;\n-    const ONLY_BUILD_TARGETS: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n@@ -1274,7 +1261,7 @@ impl Step for Extended {\n     fn make_run(run: RunConfig) {\n         run.builder.ensure(Extended {\n             stage: run.builder.top_stage,\n-            host: run.host,\n+            host: run.builder.build.build,\n             target: run.target,\n         });\n     }\n@@ -1692,9 +1679,7 @@ pub struct HashSign;\n \n impl Step for HashSign {\n     type Output = ();\n-    const ONLY_BUILD_TARGETS: bool = true;\n     const ONLY_HOSTS: bool = true;\n-    const ONLY_BUILD: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n         run.path(\"hash-and-sign\")"}, {"sha": "fa48902d55893b73921058e53fc507dd416e9f96", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11915108810250f74e0d30ac6f12948a7e94e648/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11915108810250f74e0d30ac6f12948a7e94e648/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=11915108810250f74e0d30ac6f12948a7e94e648", "patch": "@@ -161,7 +161,6 @@ macro_rules! install {\n         impl Step for $name {\n             type Output = ();\n             const DEFAULT: bool = true;\n-            const ONLY_BUILD_TARGETS: bool = true;\n             const ONLY_HOSTS: bool = $only_hosts;\n             $(const $c: bool = true;)*\n \n@@ -174,7 +173,7 @@ macro_rules! install {\n                 run.builder.ensure($name {\n                     stage: run.builder.top_stage,\n                     target: run.target,\n-                    host: run.host,\n+                    host: run.builder.build.build,\n                 });\n             }\n "}]}