{"sha": "13e07a4e180e964717a0f71f0fc40260bab7d84a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZTA3YTRlMTgwZTk2NDcxN2EwZjcxZjBmYzQwMjYwYmFiN2Q4NGE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-05T16:53:48Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-05T18:34:07Z"}, "message": "Move the tests in src/libcore/slice/memchr.rs as well.", "tree": {"sha": "f698b5470954ddb870666aee878d847fda31454a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f698b5470954ddb870666aee878d847fda31454a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13e07a4e180e964717a0f71f0fc40260bab7d84a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlrt+SAACgkQ/vbIBR0O\nATz2Iw/+KfGWzXX9kSRY8xV0x6SQLP7dX7jLZrDX61bTJ+JUVAC5mksq3ljYwnix\nEDLPdjuVI+8aG6SwFH/YQJMzh0s56WrHqXaIbLjNF+STNZYDNzx1x7n6Pwlg7w7W\nPZwytSCoIHwrtqPXb7C7TweIn08vdx9BemFEwUNphf7zHOxEfby2f1n1vmfhioCa\niHipg0YDD/MMmF0ClwX3GmFBYPZ3ENTmrnI9VNTbe9cnMYadctt5oMyBtSgEoOr5\ndTm+BOd3dPGg8q8DzS9Ui7eMfP/aRId9PBazVetzoKuPg4A+ZnzPENZqrE5+fVzr\nmLTqZrAKxQm/Ufj2Rbv6qG23XJr6dm1aVQ+nBrc6A3VcJDoTe3XN/T6JZL4a0Nns\nWrbfKhYW/E6ulb450Cd5YtXmZF0wbgeD2iUO1G3elPdcDipTu/8+IJZfwrdQ0g9M\njXBMkZAZAI1ZSbZrSOp6n2Wc8TrwXmlpVAdR7hXQUyrOrbNHsiCCQj0rx13qZevL\nW4XXNb3DvsNOk7ZM8dz/mB+ESw+IWHGN4cdcmIQO83snOpD/hPCAUh4IA0EDOXyR\nXsC/munOgvLIzfjemTKteSL7/9/aNS89rQtuolkjlurzqMnVpLyLJ/gx2mzh3byt\n+AKCT0ceJRCIRAkf3Ic3kmWP+uiFRspG0J06MXbOv0QLJKXA4l0=\n=SJZa\n-----END PGP SIGNATURE-----", "payload": "tree f698b5470954ddb870666aee878d847fda31454a\nparent 10ab98da8c8e53ab7b89eff489e09d352522889e\nauthor kennytm <kennytm@gmail.com> 1525539228 +0800\ncommitter kennytm <kennytm@gmail.com> 1525545247 +0800\n\nMove the tests in src/libcore/slice/memchr.rs as well.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13e07a4e180e964717a0f71f0fc40260bab7d84a", "html_url": "https://github.com/rust-lang/rust/commit/13e07a4e180e964717a0f71f0fc40260bab7d84a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13e07a4e180e964717a0f71f0fc40260bab7d84a/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10ab98da8c8e53ab7b89eff489e09d352522889e", "url": "https://api.github.com/repos/rust-lang/rust/commits/10ab98da8c8e53ab7b89eff489e09d352522889e", "html_url": "https://github.com/rust-lang/rust/commit/10ab98da8c8e53ab7b89eff489e09d352522889e"}], "stats": {"total": 168, "additions": 86, "deletions": 82}, "files": [{"sha": "7b62e7b0620fd4ddd51348f523139004d2a4a0ed", "filename": "src/libcore/slice/memchr.rs", "status": "modified", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/13e07a4e180e964717a0f71f0fc40260bab7d84a/src%2Flibcore%2Fslice%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e07a4e180e964717a0f71f0fc40260bab7d84a/src%2Flibcore%2Fslice%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmemchr.rs?ref=13e07a4e180e964717a0f71f0fc40260bab7d84a", "patch": "@@ -135,85 +135,3 @@ pub fn memrchr(x: u8, text: &[u8]) -> Option<usize> {\n     // find the byte before the point the body loop stopped\n     text[..offset].iter().rposition(|elt| *elt == x)\n }\n-\n-// test fallback implementations on all platforms\n-#[test]\n-fn matches_one() {\n-    assert_eq!(Some(0), memchr(b'a', b\"a\"));\n-}\n-\n-#[test]\n-fn matches_begin() {\n-    assert_eq!(Some(0), memchr(b'a', b\"aaaa\"));\n-}\n-\n-#[test]\n-fn matches_end() {\n-    assert_eq!(Some(4), memchr(b'z', b\"aaaaz\"));\n-}\n-\n-#[test]\n-fn matches_nul() {\n-    assert_eq!(Some(4), memchr(b'\\x00', b\"aaaa\\x00\"));\n-}\n-\n-#[test]\n-fn matches_past_nul() {\n-    assert_eq!(Some(5), memchr(b'z', b\"aaaa\\x00z\"));\n-}\n-\n-#[test]\n-fn no_match_empty() {\n-    assert_eq!(None, memchr(b'a', b\"\"));\n-}\n-\n-#[test]\n-fn no_match() {\n-    assert_eq!(None, memchr(b'a', b\"xyz\"));\n-}\n-\n-#[test]\n-fn matches_one_reversed() {\n-    assert_eq!(Some(0), memrchr(b'a', b\"a\"));\n-}\n-\n-#[test]\n-fn matches_begin_reversed() {\n-    assert_eq!(Some(3), memrchr(b'a', b\"aaaa\"));\n-}\n-\n-#[test]\n-fn matches_end_reversed() {\n-    assert_eq!(Some(0), memrchr(b'z', b\"zaaaa\"));\n-}\n-\n-#[test]\n-fn matches_nul_reversed() {\n-    assert_eq!(Some(4), memrchr(b'\\x00', b\"aaaa\\x00\"));\n-}\n-\n-#[test]\n-fn matches_past_nul_reversed() {\n-    assert_eq!(Some(0), memrchr(b'z', b\"z\\x00aaaa\"));\n-}\n-\n-#[test]\n-fn no_match_empty_reversed() {\n-    assert_eq!(None, memrchr(b'a', b\"\"));\n-}\n-\n-#[test]\n-fn no_match_reversed() {\n-    assert_eq!(None, memrchr(b'a', b\"xyz\"));\n-}\n-\n-#[test]\n-fn each_alignment_reversed() {\n-    let mut data = [1u8; 64];\n-    let needle = 2;\n-    let pos = 40;\n-    data[pos] = needle;\n-    for start in 0..16 {\n-        assert_eq!(Some(pos - start), memrchr(needle, &data[start..]));\n-    }\n-}"}, {"sha": "c81e5e97cbb7acc5c43927e8d2fae22c14fa2969", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/13e07a4e180e964717a0f71f0fc40260bab7d84a/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e07a4e180e964717a0f71f0fc40260bab7d84a/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=13e07a4e180e964717a0f71f0fc40260bab7d84a", "patch": "@@ -550,3 +550,89 @@ fn sort_unstable() {\n     v.sort_unstable();\n     assert!(v == [0xDEADBEEF]);\n }\n+\n+pub mod memchr {\n+    use core::slice::memchr::{memchr, memrchr};\n+\n+    // test fallback implementations on all platforms\n+    #[test]\n+    fn matches_one() {\n+        assert_eq!(Some(0), memchr(b'a', b\"a\"));\n+    }\n+\n+    #[test]\n+    fn matches_begin() {\n+        assert_eq!(Some(0), memchr(b'a', b\"aaaa\"));\n+    }\n+\n+    #[test]\n+    fn matches_end() {\n+        assert_eq!(Some(4), memchr(b'z', b\"aaaaz\"));\n+    }\n+\n+    #[test]\n+    fn matches_nul() {\n+        assert_eq!(Some(4), memchr(b'\\x00', b\"aaaa\\x00\"));\n+    }\n+\n+    #[test]\n+    fn matches_past_nul() {\n+        assert_eq!(Some(5), memchr(b'z', b\"aaaa\\x00z\"));\n+    }\n+\n+    #[test]\n+    fn no_match_empty() {\n+        assert_eq!(None, memchr(b'a', b\"\"));\n+    }\n+\n+    #[test]\n+    fn no_match() {\n+        assert_eq!(None, memchr(b'a', b\"xyz\"));\n+    }\n+\n+    #[test]\n+    fn matches_one_reversed() {\n+        assert_eq!(Some(0), memrchr(b'a', b\"a\"));\n+    }\n+\n+    #[test]\n+    fn matches_begin_reversed() {\n+        assert_eq!(Some(3), memrchr(b'a', b\"aaaa\"));\n+    }\n+\n+    #[test]\n+    fn matches_end_reversed() {\n+        assert_eq!(Some(0), memrchr(b'z', b\"zaaaa\"));\n+    }\n+\n+    #[test]\n+    fn matches_nul_reversed() {\n+        assert_eq!(Some(4), memrchr(b'\\x00', b\"aaaa\\x00\"));\n+    }\n+\n+    #[test]\n+    fn matches_past_nul_reversed() {\n+        assert_eq!(Some(0), memrchr(b'z', b\"z\\x00aaaa\"));\n+    }\n+\n+    #[test]\n+    fn no_match_empty_reversed() {\n+        assert_eq!(None, memrchr(b'a', b\"\"));\n+    }\n+\n+    #[test]\n+    fn no_match_reversed() {\n+        assert_eq!(None, memrchr(b'a', b\"xyz\"));\n+    }\n+\n+    #[test]\n+    fn each_alignment_reversed() {\n+        let mut data = [1u8; 64];\n+        let needle = 2;\n+        let pos = 40;\n+        data[pos] = needle;\n+        for start in 0..16 {\n+            assert_eq!(Some(pos - start), memrchr(needle, &data[start..]));\n+        }\n+    }\n+}"}]}