{"sha": "69e5a4ccaa37b9d4c666133122f5ef4e2d0046e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZTVhNGNjYWEzN2I5ZDRjNjY2MTMzMTIyZjVlZjRlMmQwMDQ2ZTU=", "commit": {"author": {"name": "Denis Vasilik", "email": "contact@denisvasilik.com", "date": "2020-08-18T22:05:49Z"}, "committer": {"name": "Denis Vasilik", "email": "contact@denisvasilik.com", "date": "2020-08-18T22:05:49Z"}, "message": "Use intra-doc links for AtomicBool::*", "tree": {"sha": "46e98818c39824805c639c69016c163f2136248b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46e98818c39824805c639c69016c163f2136248b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69e5a4ccaa37b9d4c666133122f5ef4e2d0046e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69e5a4ccaa37b9d4c666133122f5ef4e2d0046e5", "html_url": "https://github.com/rust-lang/rust/commit/69e5a4ccaa37b9d4c666133122f5ef4e2d0046e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69e5a4ccaa37b9d4c666133122f5ef4e2d0046e5/comments", "author": {"login": "denisvasilik", "id": 18697981, "node_id": "MDQ6VXNlcjE4Njk3OTgx", "avatar_url": "https://avatars.githubusercontent.com/u/18697981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denisvasilik", "html_url": "https://github.com/denisvasilik", "followers_url": "https://api.github.com/users/denisvasilik/followers", "following_url": "https://api.github.com/users/denisvasilik/following{/other_user}", "gists_url": "https://api.github.com/users/denisvasilik/gists{/gist_id}", "starred_url": "https://api.github.com/users/denisvasilik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denisvasilik/subscriptions", "organizations_url": "https://api.github.com/users/denisvasilik/orgs", "repos_url": "https://api.github.com/users/denisvasilik/repos", "events_url": "https://api.github.com/users/denisvasilik/events{/privacy}", "received_events_url": "https://api.github.com/users/denisvasilik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "denisvasilik", "id": 18697981, "node_id": "MDQ6VXNlcjE4Njk3OTgx", "avatar_url": "https://avatars.githubusercontent.com/u/18697981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denisvasilik", "html_url": "https://github.com/denisvasilik", "followers_url": "https://api.github.com/users/denisvasilik/followers", "following_url": "https://api.github.com/users/denisvasilik/following{/other_user}", "gists_url": "https://api.github.com/users/denisvasilik/gists{/gist_id}", "starred_url": "https://api.github.com/users/denisvasilik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denisvasilik/subscriptions", "organizations_url": "https://api.github.com/users/denisvasilik/orgs", "repos_url": "https://api.github.com/users/denisvasilik/repos", "events_url": "https://api.github.com/users/denisvasilik/events{/privacy}", "received_events_url": "https://api.github.com/users/denisvasilik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c159e1764a3dd8ac2214b80f0a2e0e5ebc6da6b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c159e1764a3dd8ac2214b80f0a2e0e5ebc6da6b0", "html_url": "https://github.com/rust-lang/rust/commit/c159e1764a3dd8ac2214b80f0a2e0e5ebc6da6b0"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "07169692f8f45ef5cb8b96396ab74ba345c69d07", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/69e5a4ccaa37b9d4c666133122f5ef4e2d0046e5/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e5a4ccaa37b9d4c666133122f5ef4e2d0046e5/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=69e5a4ccaa37b9d4c666133122f5ef4e2d0046e5", "patch": "@@ -280,23 +280,23 @@ extern \"rust-intrinsic\" {\n     /// `std::sync::atomic` types via the `load` method by passing\n     /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::load`](../../std/sync/atomic/struct.AtomicBool.html#method.load).\n+    /// [`AtomicBool::load`](crate::sync::atomic::AtomicBool::load).\n     pub fn atomic_load<T: Copy>(src: *const T) -> T;\n     /// Loads the current value of the pointer.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `load` method by passing\n     /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::load`](../../std/sync/atomic/struct.AtomicBool.html#method.load).\n+    /// [`AtomicBool::load`](crate::sync::atomic::AtomicBool::load).\n     pub fn atomic_load_acq<T: Copy>(src: *const T) -> T;\n     /// Loads the current value of the pointer.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `load` method by passing\n     /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::load`](../../std/sync/atomic/struct.AtomicBool.html#method.load).\n+    /// [`AtomicBool::load`](crate::sync::atomic::AtomicBool::load).\n     pub fn atomic_load_relaxed<T: Copy>(src: *const T) -> T;\n     pub fn atomic_load_unordered<T: Copy>(src: *const T) -> T;\n \n@@ -306,23 +306,23 @@ extern \"rust-intrinsic\" {\n     /// `std::sync::atomic` types via the `store` method by passing\n     /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::store`](../../std/sync/atomic/struct.AtomicBool.html#method.store).\n+    /// [`AtomicBool::store`](crate::sync::atomic::AtomicBool::store).\n     pub fn atomic_store<T: Copy>(dst: *mut T, val: T);\n     /// Stores the value at the specified memory location.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `store` method by passing\n     /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::store`](../../std/sync/atomic/struct.AtomicBool.html#method.store).\n+    /// [`AtomicBool::store`](crate::sync::atomic::AtomicBool::store).\n     pub fn atomic_store_rel<T: Copy>(dst: *mut T, val: T);\n     /// Stores the value at the specified memory location.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `store` method by passing\n     /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::store`](../../std/sync/atomic/struct.AtomicBool.html#method.store).\n+    /// [`AtomicBool::store`](crate::sync::atomic::AtomicBool::store).\n     pub fn atomic_store_relaxed<T: Copy>(dst: *mut T, val: T);\n     pub fn atomic_store_unordered<T: Copy>(dst: *mut T, val: T);\n \n@@ -332,39 +332,39 @@ extern \"rust-intrinsic\" {\n     /// `std::sync::atomic` types via the `swap` method by passing\n     /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n+    /// [`AtomicBool::swap`](crate::sync::atomic::AtomicBool::swap).\n     pub fn atomic_xchg<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Stores the value at the specified memory location, returning the old value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `swap` method by passing\n     /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n+    /// [`AtomicBool::swap`](crate::sync::atomic::AtomicBool::swap).\n     pub fn atomic_xchg_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Stores the value at the specified memory location, returning the old value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `swap` method by passing\n     /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n+    /// [`AtomicBool::swap`](crate::sync::atomic::AtomicBool::swap).\n     pub fn atomic_xchg_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Stores the value at the specified memory location, returning the old value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `swap` method by passing\n     /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n+    /// [`AtomicBool::swap`](crate::sync::atomic::AtomicBool::swap).\n     pub fn atomic_xchg_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Stores the value at the specified memory location, returning the old value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `swap` method by passing\n     /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n+    /// [`AtomicBool::swap`](crate::sync::atomic::AtomicBool::swap).\n     pub fn atomic_xchg_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n \n     /// Adds to the current value, returning the previous value.\n@@ -455,39 +455,39 @@ extern \"rust-intrinsic\" {\n     /// `std::sync::atomic` types via the `fetch_and` method by passing\n     /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n+    /// [`AtomicBool::fetch_and`](crate::sync::atomic::AtomicBool::fetch_and).\n     pub fn atomic_and<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise and with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_and` method by passing\n     /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n+    /// [`AtomicBool::fetch_and`](crate::sync::atomic::AtomicBool::fetch_and).\n     pub fn atomic_and_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise and with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_and` method by passing\n     /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n+    /// [`AtomicBool::fetch_and`](crate::sync::atomic::AtomicBool::fetch_and).\n     pub fn atomic_and_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise and with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_and` method by passing\n     /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n+    /// [`AtomicBool::fetch_and`](crate::sync::atomic::AtomicBool::fetch_and).\n     pub fn atomic_and_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise and with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_and` method by passing\n     /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n+    /// [`AtomicBool::fetch_and`](crate::sync::atomic::AtomicBool::fetch_and).\n     pub fn atomic_and_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n \n     /// Bitwise nand with the current value, returning the previous value.\n@@ -496,39 +496,39 @@ extern \"rust-intrinsic\" {\n     /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n     /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n+    /// [`AtomicBool::fetch_nand`](crate::sync::atomic::AtomicBool::fetch_nand).\n     pub fn atomic_nand<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise nand with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n     /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n+    /// [`AtomicBool::fetch_nand`](crate::sync::atomic::AtomicBool::fetch_nand).\n     pub fn atomic_nand_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise nand with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n     /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n+    /// [`AtomicBool::fetch_nand`](crate::sync::atomic::AtomicBool::fetch_nand).\n     pub fn atomic_nand_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise nand with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n     /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n+    /// [`AtomicBool::fetch_nand`](crate::sync::atomic::AtomicBool::fetch_nand).\n     pub fn atomic_nand_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise nand with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n     /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n+    /// [`AtomicBool::fetch_nand`](crate::sync::atomic::AtomicBool::fetch_nand).\n     pub fn atomic_nand_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n \n     /// Bitwise or with the current value, returning the previous value.\n@@ -537,39 +537,39 @@ extern \"rust-intrinsic\" {\n     /// `std::sync::atomic` types via the `fetch_or` method by passing\n     /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n+    /// [`AtomicBool::fetch_or`](crate::sync::atomic::AtomicBool::fetch_or).\n     pub fn atomic_or<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise or with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_or` method by passing\n     /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n+    /// [`AtomicBool::fetch_or`](crate::sync::atomic::AtomicBool::fetch_or).\n     pub fn atomic_or_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise or with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_or` method by passing\n     /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n+    /// [`AtomicBool::fetch_or`](crate::sync::atomic::AtomicBool::fetch_or).\n     pub fn atomic_or_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise or with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_or` method by passing\n     /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n+    /// [`AtomicBool::fetch_or`](crate::sync::atomic::AtomicBool::fetch_or).\n     pub fn atomic_or_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise or with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_or` method by passing\n     /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n+    /// [`AtomicBool::fetch_or`](crate::sync::atomic::AtomicBool::fetch_or).\n     pub fn atomic_or_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n \n     /// Bitwise xor with the current value, returning the previous value.\n@@ -578,39 +578,39 @@ extern \"rust-intrinsic\" {\n     /// `std::sync::atomic` types via the `fetch_xor` method by passing\n     /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n+    /// [`AtomicBool::fetch_xor`](crate::sync::atomic::AtomicBool::fetch_xor).\n     pub fn atomic_xor<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise xor with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_xor` method by passing\n     /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n+    /// [`AtomicBool::fetch_xor`](crate::sync::atomic::AtomicBool::fetch_xor).\n     pub fn atomic_xor_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise xor with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_xor` method by passing\n     /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n+    /// [`AtomicBool::fetch_xor`](crate::sync::atomic::AtomicBool::fetch_xor).\n     pub fn atomic_xor_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise xor with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_xor` method by passing\n     /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n+    /// [`AtomicBool::fetch_xor`](crate::sync::atomic::AtomicBool::fetch_xor).\n     pub fn atomic_xor_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise xor with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_xor` method by passing\n     /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n+    /// [`AtomicBool::fetch_xor`](crate::sync::atomic::AtomicBool::fetch_xor).\n     pub fn atomic_xor_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n \n     /// Maximum with the current value using a signed comparison."}]}