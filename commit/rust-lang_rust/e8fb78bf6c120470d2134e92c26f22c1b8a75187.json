{"sha": "e8fb78bf6c120470d2134e92c26f22c1b8a75187", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZmI3OGJmNmMxMjA0NzBkMjEzNGU5MmMyNmYyMmMxYjhhNzUxODc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-17T01:03:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-17T01:03:02Z"}, "message": "Rollup merge of #63642 - eddyb:wrap-it-up, r=rkruppe,Mark-Simulacrum\n\nRename overflowing_{add,sub,mul} intrinsics to wrapping_{add,sub,mul}.\n\nThese confused @Gankra, and then, also me, especially since `overflowing_*` *methods* also exist, but they map to `*_with_overflow` intrinsics!\n\nr? @oli-obk / @nikomatsakis cc @Mark-Simulacrum (on the rustbuild workaround)", "tree": {"sha": "b0f6d090762cc3f19f2217afec4bba476b2e663a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0f6d090762cc3f19f2217afec4bba476b2e663a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8fb78bf6c120470d2134e92c26f22c1b8a75187", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdV1JHCRBK7hj4Ov3rIwAAdHIIAKt9sL0PUye7JuK7r9wpG26A\ngt1iUibP/X560Ao22sDiDssdNt7CKcL7m5Q8PSZFkEraBsK8hKxG1Ix8gryqomeW\nMAF3iP3X08ywz5wTSMN8pKEu/+HGqbzoD/k0V2BPhGiIQdZy5MpjhlCcArbE2yoP\ntiUp0xXue4SBM18QJU/IvDkOin5PYMFWJVtCqpYgDGTijvh9Ooa4uyg58BjTvSyd\nruU7k0SZeRfaZzOX2572Ut+huDeMQ174yzTPhHaq+Ixz4ng/Zb/9919mm6s2hY7o\n/mK8JIfB6oiGIX2kWGFN8tSccQN1jF3ByPDeHlmnUJ4jhdCNUAQtYWrNUKa40sU=\n=unvP\n-----END PGP SIGNATURE-----\n", "payload": "tree b0f6d090762cc3f19f2217afec4bba476b2e663a\nparent 816808295dba315140a535a52f5aa2e40fbc13e6\nparent 892ef6fa48bd20c037351e0cf8ea12c4c429a868\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1566003782 +0200\ncommitter GitHub <noreply@github.com> 1566003782 +0200\n\nRollup merge of #63642 - eddyb:wrap-it-up, r=rkruppe,Mark-Simulacrum\n\nRename overflowing_{add,sub,mul} intrinsics to wrapping_{add,sub,mul}.\n\nThese confused @Gankra, and then, also me, especially since `overflowing_*` *methods* also exist, but they map to `*_with_overflow` intrinsics!\n\nr? @oli-obk / @nikomatsakis cc @Mark-Simulacrum (on the rustbuild workaround)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8fb78bf6c120470d2134e92c26f22c1b8a75187", "html_url": "https://github.com/rust-lang/rust/commit/e8fb78bf6c120470d2134e92c26f22c1b8a75187", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8fb78bf6c120470d2134e92c26f22c1b8a75187/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "816808295dba315140a535a52f5aa2e40fbc13e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/816808295dba315140a535a52f5aa2e40fbc13e6", "html_url": "https://github.com/rust-lang/rust/commit/816808295dba315140a535a52f5aa2e40fbc13e6"}, {"sha": "892ef6fa48bd20c037351e0cf8ea12c4c429a868", "url": "https://api.github.com/repos/rust-lang/rust/commits/892ef6fa48bd20c037351e0cf8ea12c4c429a868", "html_url": "https://github.com/rust-lang/rust/commit/892ef6fa48bd20c037351e0cf8ea12c4c429a868"}], "stats": {"total": 115, "additions": 89, "deletions": 26}, "files": [{"sha": "da372781738d66e7a2ecf94c10ce618b214d8ecb", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e8fb78bf6c120470d2134e92c26f22c1b8a75187/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8fb78bf6c120470d2134e92c26f22c1b8a75187/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=e8fb78bf6c120470d2134e92c26f22c1b8a75187", "patch": "@@ -102,8 +102,13 @@ fn main() {\n     // FIXME: the fact that core here is excluded is due to core_arch from our stdarch submodule\n     // being broken on the beta compiler with bootstrap passed, so this is a temporary workaround\n     // (we've just snapped, so there are no cfg(bootstrap) related annotations in core).\n-    if stage == \"0\" && crate_name != Some(\"core\") {\n-        cmd.arg(\"--cfg\").arg(\"bootstrap\");\n+    if stage == \"0\" {\n+        if crate_name != Some(\"core\") {\n+            cmd.arg(\"--cfg\").arg(\"bootstrap\");\n+        } else {\n+            // NOTE(eddyb) see FIXME above, except now we need annotations again in core.\n+            cmd.arg(\"--cfg\").arg(\"boostrap_stdarch_ignore_this\");\n+        }\n     }\n \n     // Print backtrace in case of ICE"}, {"sha": "d145f2212f93a639e2c4ab50dff24b5b6b64ef57", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e8fb78bf6c120470d2134e92c26f22c1b8a75187/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8fb78bf6c120470d2134e92c26f22c1b8a75187/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=e8fb78bf6c120470d2134e92c26f22c1b8a75187", "patch": "@@ -1293,18 +1293,40 @@ extern \"rust-intrinsic\" {\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_add` method. For example,\n     /// [`std::u32::wrapping_add`](../../std/primitive.u32.html#method.wrapping_add)\n+    #[cfg(boostrap_stdarch_ignore_this)]\n     pub fn overflowing_add<T>(a: T, b: T) -> T;\n     /// Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_sub` method. For example,\n     /// [`std::u32::wrapping_sub`](../../std/primitive.u32.html#method.wrapping_sub)\n+    #[cfg(boostrap_stdarch_ignore_this)]\n     pub fn overflowing_sub<T>(a: T, b: T) -> T;\n     /// Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_mul` method. For example,\n     /// [`std::u32::wrapping_mul`](../../std/primitive.u32.html#method.wrapping_mul)\n+    #[cfg(boostrap_stdarch_ignore_this)]\n     pub fn overflowing_mul<T>(a: T, b: T) -> T;\n \n+    /// Returns (a + b) mod 2<sup>N</sup>, where N is the width of T in bits.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `wrapping_add` method. For example,\n+    /// [`std::u32::wrapping_add`](../../std/primitive.u32.html#method.wrapping_add)\n+    #[cfg(not(boostrap_stdarch_ignore_this))]\n+    pub fn wrapping_add<T>(a: T, b: T) -> T;\n+    /// Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `wrapping_sub` method. For example,\n+    /// [`std::u32::wrapping_sub`](../../std/primitive.u32.html#method.wrapping_sub)\n+    #[cfg(not(boostrap_stdarch_ignore_this))]\n+    pub fn wrapping_sub<T>(a: T, b: T) -> T;\n+    /// Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `wrapping_mul` method. For example,\n+    /// [`std::u32::wrapping_mul`](../../std/primitive.u32.html#method.wrapping_mul)\n+    #[cfg(not(boostrap_stdarch_ignore_this))]\n+    pub fn wrapping_mul<T>(a: T, b: T) -> T;\n+\n     /// Computes `a + b`, while saturating at numeric bounds.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `saturating_add` method. For example,"}, {"sha": "b46e06f8d8ada93b5c8089cef11cfa14dac22e71", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e8fb78bf6c120470d2134e92c26f22c1b8a75187/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8fb78bf6c120470d2134e92c26f22c1b8a75187/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=e8fb78bf6c120470d2134e92c26f22c1b8a75187", "patch": "@@ -1112,7 +1112,13 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_add(self, rhs: Self) -> Self {\n-                intrinsics::overflowing_add(self, rhs)\n+                #[cfg(boostrap_stdarch_ignore_this)] {\n+                    intrinsics::overflowing_add(self, rhs)\n+                }\n+\n+                #[cfg(not(boostrap_stdarch_ignore_this))] {\n+                    intrinsics::wrapping_add(self, rhs)\n+                }\n             }\n         }\n \n@@ -1135,7 +1141,13 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_sub(self, rhs: Self) -> Self {\n-                intrinsics::overflowing_sub(self, rhs)\n+                #[cfg(boostrap_stdarch_ignore_this)] {\n+                    intrinsics::overflowing_sub(self, rhs)\n+                }\n+\n+                #[cfg(not(boostrap_stdarch_ignore_this))] {\n+                    intrinsics::wrapping_sub(self, rhs)\n+                }\n             }\n         }\n \n@@ -1157,7 +1169,13 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_mul(self, rhs: Self) -> Self {\n-                intrinsics::overflowing_mul(self, rhs)\n+                #[cfg(boostrap_stdarch_ignore_this)] {\n+                    intrinsics::overflowing_mul(self, rhs)\n+                }\n+\n+                #[cfg(not(boostrap_stdarch_ignore_this))] {\n+                    intrinsics::wrapping_mul(self, rhs)\n+                }\n             }\n         }\n \n@@ -3031,7 +3049,13 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_add(self, rhs: Self) -> Self {\n-                intrinsics::overflowing_add(self, rhs)\n+                #[cfg(boostrap_stdarch_ignore_this)] {\n+                    intrinsics::overflowing_add(self, rhs)\n+                }\n+\n+                #[cfg(not(boostrap_stdarch_ignore_this))] {\n+                    intrinsics::wrapping_add(self, rhs)\n+                }\n             }\n         }\n \n@@ -3053,7 +3077,13 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_sub(self, rhs: Self) -> Self {\n-                intrinsics::overflowing_sub(self, rhs)\n+                #[cfg(boostrap_stdarch_ignore_this)] {\n+                    intrinsics::overflowing_sub(self, rhs)\n+                }\n+\n+                #[cfg(not(boostrap_stdarch_ignore_this))] {\n+                    intrinsics::wrapping_sub(self, rhs)\n+                }\n             }\n         }\n \n@@ -3076,7 +3106,13 @@ $EndFeature, \"\n                           without modifying the original\"]\n         #[inline]\n         pub const fn wrapping_mul(self, rhs: Self) -> Self {\n-            intrinsics::overflowing_mul(self, rhs)\n+            #[cfg(boostrap_stdarch_ignore_this)] {\n+                intrinsics::overflowing_mul(self, rhs)\n+            }\n+\n+            #[cfg(not(boostrap_stdarch_ignore_this))] {\n+                intrinsics::wrapping_mul(self, rhs)\n+            }\n         }\n \n         doc_comment! {"}, {"sha": "9483ffca448e3daec91450dee6055194490874a4", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8fb78bf6c120470d2134e92c26f22c1b8a75187/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8fb78bf6c120470d2134e92c26f22c1b8a75187/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=e8fb78bf6c120470d2134e92c26f22c1b8a75187", "patch": "@@ -328,7 +328,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             },\n             \"ctlz\" | \"ctlz_nonzero\" | \"cttz\" | \"cttz_nonzero\" | \"ctpop\" | \"bswap\" |\n             \"bitreverse\" | \"add_with_overflow\" | \"sub_with_overflow\" |\n-            \"mul_with_overflow\" | \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" |\n+            \"mul_with_overflow\" | \"wrapping_add\" | \"wrapping_sub\" | \"wrapping_mul\" |\n             \"unchecked_div\" | \"unchecked_rem\" | \"unchecked_shl\" | \"unchecked_shr\" |\n             \"unchecked_add\" | \"unchecked_sub\" | \"unchecked_mul\" | \"exact_div\" |\n             \"rotate_left\" | \"rotate_right\" | \"saturating_add\" | \"saturating_sub\" => {\n@@ -398,9 +398,9 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n \n                                 return;\n                             },\n-                            \"overflowing_add\" => self.add(args[0].immediate(), args[1].immediate()),\n-                            \"overflowing_sub\" => self.sub(args[0].immediate(), args[1].immediate()),\n-                            \"overflowing_mul\" => self.mul(args[0].immediate(), args[1].immediate()),\n+                            \"wrapping_add\" => self.add(args[0].immediate(), args[1].immediate()),\n+                            \"wrapping_sub\" => self.sub(args[0].immediate(), args[1].immediate()),\n+                            \"wrapping_mul\" => self.mul(args[0].immediate(), args[1].immediate()),\n                             \"exact_div\" =>\n                                 if signed {\n                                     self.exactsdiv(args[0].immediate(), args[1].immediate())"}, {"sha": "ee105fed1a324aadf7dd68ccbf33cc5f25623071", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8fb78bf6c120470d2134e92c26f22c1b8a75187/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8fb78bf6c120470d2134e92c26f22c1b8a75187/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=e8fb78bf6c120470d2134e92c26f22c1b8a75187", "patch": "@@ -110,18 +110,18 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 };\n                 self.write_scalar(out_val, dest)?;\n             }\n-            | \"overflowing_add\"\n-            | \"overflowing_sub\"\n-            | \"overflowing_mul\"\n+            | \"wrapping_add\"\n+            | \"wrapping_sub\"\n+            | \"wrapping_mul\"\n             | \"add_with_overflow\"\n             | \"sub_with_overflow\"\n             | \"mul_with_overflow\" => {\n                 let lhs = self.read_immediate(args[0])?;\n                 let rhs = self.read_immediate(args[1])?;\n                 let (bin_op, ignore_overflow) = match intrinsic_name {\n-                    \"overflowing_add\" => (BinOp::Add, true),\n-                    \"overflowing_sub\" => (BinOp::Sub, true),\n-                    \"overflowing_mul\" => (BinOp::Mul, true),\n+                    \"wrapping_add\" => (BinOp::Add, true),\n+                    \"wrapping_sub\" => (BinOp::Sub, true),\n+                    \"wrapping_mul\" => (BinOp::Mul, true),\n                     \"add_with_overflow\" => (BinOp::Add, false),\n                     \"sub_with_overflow\" => (BinOp::Sub, false),\n                     \"mul_with_overflow\" => (BinOp::Mul, false),"}, {"sha": "649cccc36c346e88c9542912250db9762bdd9c02", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8fb78bf6c120470d2134e92c26f22c1b8a75187/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8fb78bf6c120470d2134e92c26f22c1b8a75187/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=e8fb78bf6c120470d2134e92c26f22c1b8a75187", "patch": "@@ -537,9 +537,9 @@ impl Qualif for IsNotPromotable {\n                             | \"cttz_nonzero\"\n                             | \"ctlz\"\n                             | \"ctlz_nonzero\"\n-                            | \"overflowing_add\"\n-                            | \"overflowing_sub\"\n-                            | \"overflowing_mul\"\n+                            | \"wrapping_add\"\n+                            | \"wrapping_sub\"\n+                            | \"wrapping_mul\"\n                             | \"unchecked_shl\"\n                             | \"unchecked_shr\"\n                             | \"rotate_left\""}, {"sha": "334d0cee9fbe7412a7e401c9e8afbf963c151f61", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8fb78bf6c120470d2134e92c26f22c1b8a75187/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8fb78bf6c120470d2134e92c26f22c1b8a75187/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=e8fb78bf6c120470d2134e92c26f22c1b8a75187", "patch": "@@ -379,9 +379,9 @@ fn is_intrinsic_whitelisted(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n         | \"add_with_overflow\" // ~> .overflowing_add\n         | \"sub_with_overflow\" // ~> .overflowing_sub\n         | \"mul_with_overflow\" // ~> .overflowing_mul\n-        | \"overflowing_add\" // ~> .wrapping_add\n-        | \"overflowing_sub\" // ~> .wrapping_sub\n-        | \"overflowing_mul\" // ~> .wrapping_mul\n+        | \"wrapping_add\" // ~> .wrapping_add\n+        | \"wrapping_sub\" // ~> .wrapping_sub\n+        | \"wrapping_mul\" // ~> .wrapping_mul\n         | \"saturating_add\" // ~> .saturating_add\n         | \"saturating_sub\" // ~> .saturating_sub\n         | \"unchecked_shl\" // ~> .wrapping_shl"}, {"sha": "dfbf8bcd0f60fcdf26d583f381480ea469b3cc02", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8fb78bf6c120470d2134e92c26f22c1b8a75187/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8fb78bf6c120470d2134e92c26f22c1b8a75187/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=e8fb78bf6c120470d2134e92c26f22c1b8a75187", "patch": "@@ -67,7 +67,7 @@ pub fn intrisic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n     match intrinsic {\n         \"size_of\" | \"min_align_of\" | \"needs_drop\" |\n         \"add_with_overflow\" | \"sub_with_overflow\" | \"mul_with_overflow\" |\n-        \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" |\n+        \"wrapping_add\" | \"wrapping_sub\" | \"wrapping_mul\" |\n         \"saturating_add\" | \"saturating_sub\" |\n         \"rotate_left\" | \"rotate_right\" |\n         \"ctpop\" | \"ctlz\" | \"cttz\" | \"bswap\" | \"bitreverse\" |\n@@ -314,7 +314,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n                 (1, vec![param(0), param(0)], param(0)),\n             \"unchecked_add\" | \"unchecked_sub\" | \"unchecked_mul\" =>\n                 (1, vec![param(0), param(0)], param(0)),\n-            \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" =>\n+            \"wrapping_add\" | \"wrapping_sub\" | \"wrapping_mul\" =>\n                 (1, vec![param(0), param(0)], param(0)),\n             \"saturating_add\" | \"saturating_sub\" =>\n                 (1, vec![param(0), param(0)], param(0)),"}]}