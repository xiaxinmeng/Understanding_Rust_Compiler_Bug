{"sha": "816e46dd633cf4cc5741dde6ce3bffd4a9ba67a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNmU0NmRkNjMzY2Y0Y2M1NzQxZGRlNmNlM2JmZmQ0YTliYTY3YTc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-22T15:41:05Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-24T21:22:35Z"}, "message": "Fixing some tests, adding some pipes\n\nThis adds constructors to pipe streams in the new runtime to take ownership of\nfile descriptors, and also fixes a few tests relating to the std::run changes\n(new errors are raised on io_error and one test is xfail'd).", "tree": {"sha": "91be9afd56dcda81b3ed6f09e43f9fa4d12290cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91be9afd56dcda81b3ed6f09e43f9fa4d12290cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/816e46dd633cf4cc5741dde6ce3bffd4a9ba67a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/816e46dd633cf4cc5741dde6ce3bffd4a9ba67a7", "html_url": "https://github.com/rust-lang/rust/commit/816e46dd633cf4cc5741dde6ce3bffd4a9ba67a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/816e46dd633cf4cc5741dde6ce3bffd4a9ba67a7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "262b958a4bedf419335069c95f054a22da48a88a", "url": "https://api.github.com/repos/rust-lang/rust/commits/262b958a4bedf419335069c95f054a22da48a88a", "html_url": "https://github.com/rust-lang/rust/commit/262b958a4bedf419335069c95f054a22da48a88a"}], "stats": {"total": 48, "additions": 43, "deletions": 5}, "files": [{"sha": "ec9a4a0101fee27e03ebcbc89e4c10ac63490966", "filename": "src/libstd/rt/io/pipe.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/816e46dd633cf4cc5741dde6ce3bffd4a9ba67a7/src%2Flibstd%2Frt%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/816e46dd633cf4cc5741dde6ce3bffd4a9ba67a7/src%2Flibstd%2Frt%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fpipe.rs?ref=816e46dd633cf4cc5741dde6ce3bffd4a9ba67a7", "patch": "@@ -16,13 +16,45 @@\n use prelude::*;\n use super::{Reader, Writer};\n use rt::io::{io_error, EndOfFile};\n-use rt::rtio::RtioPipe;\n+use rt::io::native::file;\n+use rt::rtio::{RtioPipe, with_local_io};\n \n pub struct PipeStream {\n     priv obj: ~RtioPipe,\n }\n \n impl PipeStream {\n+    /// Consumes a file descriptor to return a pipe stream that will have\n+    /// synchronous, but non-blocking reads/writes. This is useful if the file\n+    /// descriptor is acquired via means other than the standard methods.\n+    ///\n+    /// This operation consumes ownership of the file descriptor and it will be\n+    /// closed once the object is deallocated.\n+    ///\n+    /// # Example\n+    ///\n+    ///     use std::libc;\n+    ///     use std::rt::io::pipe;\n+    ///\n+    ///     let mut pipe = PipeStream::open(libc::STDERR_FILENO);\n+    ///     pipe.write(bytes!(\"Hello, stderr!\"));\n+    ///\n+    /// # Failure\n+    ///\n+    /// If the pipe cannot be created, an error will be raised on the\n+    /// `io_error` condition.\n+    pub fn open(fd: file::fd_t) -> Option<PipeStream> {\n+        do with_local_io |io| {\n+            match io.pipe_open(fd) {\n+                Ok(obj) => Some(PipeStream { obj: obj }),\n+                Err(e) => {\n+                    io_error::cond.raise(e);\n+                    None\n+                }\n+            }\n+        }\n+    }\n+\n     pub fn new(inner: ~RtioPipe) -> PipeStream {\n         PipeStream { obj: inner }\n     }"}, {"sha": "650ef491a3bff7ed9920bad66e9b68a97d05089e", "filename": "src/libstd/run.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/816e46dd633cf4cc5741dde6ce3bffd4a9ba67a7/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/816e46dd633cf4cc5741dde6ce3bffd4a9ba67a7/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=816e46dd633cf4cc5741dde6ce3bffd4a9ba67a7", "patch": "@@ -322,6 +322,7 @@ mod tests {\n     use path::Path;\n     use run;\n     use str;\n+    use task::spawn;\n     use unstable::running_on_valgrind;\n     use rt::io::native::file;\n     use rt::io::{Writer, Reader};\n@@ -394,6 +395,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[ignore] // FIXME(#10016) cat never sees stdin close\n     fn test_pipes() {\n \n         let pipe_in = os::pipe();\n@@ -412,13 +414,14 @@ mod tests {\n         os::close(pipe_out.out);\n         os::close(pipe_err.out);\n \n-        let expected = ~\"test\";\n-        writeclose(pipe_in.out, expected);\n+        do spawn {\n+            writeclose(pipe_in.out, ~\"test\");\n+        }\n         let actual = readclose(pipe_out.input);\n         readclose(pipe_err.input);\n         proc.finish();\n \n-        assert_eq!(expected, actual);\n+        assert_eq!(~\"test\", actual);\n     }\n \n     fn writeclose(fd: c_int, s: &str) {"}, {"sha": "4ff184b44831e4f371cecfd399b855749a085ce0", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/816e46dd633cf4cc5741dde6ce3bffd4a9ba67a7/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/816e46dd633cf4cc5741dde6ce3bffd4a9ba67a7/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=816e46dd633cf4cc5741dde6ce3bffd4a9ba67a7", "patch": "@@ -18,6 +18,7 @@\n use std::libc;\n use std::run;\n use std::str;\n+use std::rt::io;\n \n #[test]\n fn test_destroy_once() {\n@@ -29,7 +30,9 @@ fn test_destroy_once() {\n fn test_destroy_twice() {\n     let mut p = run::Process::new(\"echo\", [], run::ProcessOptions::new());\n     p.destroy(); // this shouldnt crash...\n-    p.destroy(); // ...and nor should this (and nor should the destructor)\n+    do io::io_error::cond.trap(|_| {}).inside {\n+        p.destroy(); // ...and nor should this (and nor should the destructor)\n+    }\n }\n \n fn test_destroy_actually_kills(force: bool) {"}]}