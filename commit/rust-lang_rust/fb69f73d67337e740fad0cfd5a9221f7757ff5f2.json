{"sha": "fb69f73d67337e740fad0cfd5a9221f7757ff5f2", "node_id": "C_kwDOAAsO6NoAKGZiNjlmNzNkNjczMzdlNzQwZmFkMGNmZDVhOTIyMWY3NzU3ZmY1ZjI", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-06-07T01:17:14Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-06-07T01:17:14Z"}, "message": "Fix exactudiv", "tree": {"sha": "0b2a260ac92deb9008aa22b55bb0995ba03b304f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b2a260ac92deb9008aa22b55bb0995ba03b304f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb69f73d67337e740fad0cfd5a9221f7757ff5f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb69f73d67337e740fad0cfd5a9221f7757ff5f2", "html_url": "https://github.com/rust-lang/rust/commit/fb69f73d67337e740fad0cfd5a9221f7757ff5f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb69f73d67337e740fad0cfd5a9221f7757ff5f2/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8697dec5327c7bf103dd15756ad54a54f38a4f66", "url": "https://api.github.com/repos/rust-lang/rust/commits/8697dec5327c7bf103dd15756ad54a54f38a4f66", "html_url": "https://github.com/rust-lang/rust/commit/8697dec5327c7bf103dd15756ad54a54f38a4f66"}], "stats": {"total": 79, "additions": 76, "deletions": 3}, "files": [{"sha": "fa490fe3f222ebdd8801020d150036e714ed2227", "filename": "src/builder.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fb69f73d67337e740fad0cfd5a9221f7757ff5f2/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb69f73d67337e740fad0cfd5a9221f7757ff5f2/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=fb69f73d67337e740fad0cfd5a9221f7757ff5f2", "patch": "@@ -492,8 +492,11 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     fn exactudiv(&mut self, a: RValue<'gcc>, b: RValue<'gcc>) -> RValue<'gcc> {\n-        // TODO(antoyo): convert the arguments to unsigned?\n         // TODO(antoyo): poison if not exact.\n+        let a_type = a.get_type().to_unsigned(self);\n+        let a = self.gcc_int_cast(a, a_type);\n+        let b_type = b.get_type().to_unsigned(self);\n+        let b = self.gcc_int_cast(b, b_type);\n         a / b\n     }\n "}, {"sha": "ce341406eaf4561a2d6aefa29283e8ecb28837dc", "filename": "src/common.rs", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/fb69f73d67337e740fad0cfd5a9221f7757ff5f2/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb69f73d67337e740fad0cfd5a9221f7757ff5f2/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=fb69f73d67337e740fad0cfd5a9221f7757ff5f2", "patch": "@@ -279,6 +279,21 @@ impl<'gcc, 'tcx> SignType<'gcc, 'tcx> for Type<'gcc> {\n         else if self.is_u128(cx) {\n             cx.i128_type\n         }\n+        else if self.is_uchar(cx) {\n+            cx.char_type\n+        }\n+        else if self.is_ushort(cx) {\n+            cx.short_type\n+        }\n+        else if self.is_uint(cx) {\n+            cx.int_type\n+        }\n+        else if self.is_ulong(cx) {\n+            cx.long_type\n+        }\n+        else if self.is_ulonglong(cx) {\n+            cx.longlong_type\n+        }\n         else {\n             self.clone()\n         }\n@@ -300,6 +315,21 @@ impl<'gcc, 'tcx> SignType<'gcc, 'tcx> for Type<'gcc> {\n         else if self.is_i128(cx) {\n             cx.u128_type\n         }\n+        else if self.is_char(cx) {\n+            cx.uchar_type\n+        }\n+        else if self.is_short(cx) {\n+            cx.ushort_type\n+        }\n+        else if self.is_int(cx) {\n+            cx.uint_type\n+        }\n+        else if self.is_long(cx) {\n+            cx.ulong_type\n+        }\n+        else if self.is_longlong(cx) {\n+            cx.ulonglong_type\n+        }\n         else {\n             self.clone()\n         }\n@@ -312,6 +342,11 @@ pub trait TypeReflection<'gcc, 'tcx>  {\n     fn is_uint(&self, cx: &CodegenCx<'gcc, 'tcx>) -> bool;\n     fn is_ulong(&self, cx: &CodegenCx<'gcc, 'tcx>) -> bool;\n     fn is_ulonglong(&self, cx: &CodegenCx<'gcc, 'tcx>) -> bool;\n+    fn is_char(&self, cx: &CodegenCx<'gcc, 'tcx>) -> bool;\n+    fn is_short(&self, cx: &CodegenCx<'gcc, 'tcx>) -> bool;\n+    fn is_int(&self, cx: &CodegenCx<'gcc, 'tcx>) -> bool;\n+    fn is_long(&self, cx: &CodegenCx<'gcc, 'tcx>) -> bool;\n+    fn is_longlong(&self, cx: &CodegenCx<'gcc, 'tcx>) -> bool;\n \n     fn is_i8(&self, cx: &CodegenCx<'gcc, 'tcx>) -> bool;\n     fn is_u8(&self, cx: &CodegenCx<'gcc, 'tcx>) -> bool;\n@@ -332,11 +367,11 @@ pub trait TypeReflection<'gcc, 'tcx>  {\n \n impl<'gcc, 'tcx> TypeReflection<'gcc, 'tcx> for Type<'gcc> {\n     fn is_uchar(&self, cx: &CodegenCx<'gcc, 'tcx>) -> bool {\n-        self.unqualified() == cx.u8_type\n+        self.unqualified() == cx.uchar_type\n     }\n \n     fn is_ushort(&self, cx: &CodegenCx<'gcc, 'tcx>) -> bool {\n-        self.unqualified() == cx.u16_type\n+        self.unqualified() == cx.ushort_type\n     }\n \n     fn is_uint(&self, cx: &CodegenCx<'gcc, 'tcx>) -> bool {\n@@ -351,6 +386,26 @@ impl<'gcc, 'tcx> TypeReflection<'gcc, 'tcx> for Type<'gcc> {\n         self.unqualified() == cx.ulonglong_type\n     }\n \n+    fn is_char(&self, cx: &CodegenCx<'gcc, 'tcx>) -> bool {\n+        self.unqualified() == cx.char_type\n+    }\n+\n+    fn is_short(&self, cx: &CodegenCx<'gcc, 'tcx>) -> bool {\n+        self.unqualified() == cx.short_type\n+    }\n+\n+    fn is_int(&self, cx: &CodegenCx<'gcc, 'tcx>) -> bool {\n+        self.unqualified() == cx.int_type\n+    }\n+\n+    fn is_long(&self, cx: &CodegenCx<'gcc, 'tcx>) -> bool {\n+        self.unqualified() == cx.long_type\n+    }\n+\n+    fn is_longlong(&self, cx: &CodegenCx<'gcc, 'tcx>) -> bool {\n+        self.unqualified() == cx.longlong_type\n+    }\n+\n     fn is_i8(&self, cx: &CodegenCx<'gcc, 'tcx>) -> bool {\n         self.unqualified() == cx.i8_type\n     }"}, {"sha": "44f36cfa4cad4388e11f8ec333deea71c4291f19", "filename": "src/context.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fb69f73d67337e740fad0cfd5a9221f7757ff5f2/src%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb69f73d67337e740fad0cfd5a9221f7757ff5f2/src%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcontext.rs?ref=fb69f73d67337e740fad0cfd5a9221f7757ff5f2", "patch": "@@ -54,10 +54,15 @@ pub struct CodegenCx<'gcc, 'tcx> {\n     pub u128_type: Type<'gcc>,\n     pub usize_type: Type<'gcc>,\n \n+    pub char_type: Type<'gcc>,\n+    pub uchar_type: Type<'gcc>,\n+    pub short_type: Type<'gcc>,\n+    pub ushort_type: Type<'gcc>,\n     pub int_type: Type<'gcc>,\n     pub uint_type: Type<'gcc>,\n     pub long_type: Type<'gcc>,\n     pub ulong_type: Type<'gcc>,\n+    pub longlong_type: Type<'gcc>,\n     pub ulonglong_type: Type<'gcc>,\n     pub sizet_type: Type<'gcc>,\n \n@@ -146,10 +151,15 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n         let float_type = context.new_type::<f32>();\n         let double_type = context.new_type::<f64>();\n \n+        let char_type = context.new_c_type(CType::Char);\n+        let uchar_type = context.new_c_type(CType::UChar);\n+        let short_type = context.new_c_type(CType::Short);\n+        let ushort_type = context.new_c_type(CType::UShort);\n         let int_type = context.new_c_type(CType::Int);\n         let uint_type = context.new_c_type(CType::UInt);\n         let long_type = context.new_c_type(CType::Long);\n         let ulong_type = context.new_c_type(CType::ULong);\n+        let longlong_type = context.new_c_type(CType::LongLong);\n         let ulonglong_type = context.new_c_type(CType::ULongLong);\n         let sizet_type = context.new_c_type(CType::SizeT);\n \n@@ -202,10 +212,15 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n             u32_type,\n             u64_type,\n             u128_type,\n+            char_type,\n+            uchar_type,\n+            short_type,\n+            ushort_type,\n             int_type,\n             uint_type,\n             long_type,\n             ulong_type,\n+            longlong_type,\n             ulonglong_type,\n             sizet_type,\n "}]}