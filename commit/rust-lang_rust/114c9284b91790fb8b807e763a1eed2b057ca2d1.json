{"sha": "114c9284b91790fb8b807e763a1eed2b057ca2d1", "node_id": "C_kwDOAAsO6NoAKDExNGM5Mjg0YjkxNzkwZmI4YjgwN2U3NjNhMWVlZDJiMDU3Y2EyZDE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-12-13T12:46:30Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-30T19:45:29Z"}, "message": "Check history earlier.", "tree": {"sha": "ba9704cfecd703331c1f3071ebaea61a447aceea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba9704cfecd703331c1f3071ebaea61a447aceea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/114c9284b91790fb8b807e763a1eed2b057ca2d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/114c9284b91790fb8b807e763a1eed2b057ca2d1", "html_url": "https://github.com/rust-lang/rust/commit/114c9284b91790fb8b807e763a1eed2b057ca2d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/114c9284b91790fb8b807e763a1eed2b057ca2d1/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5999f34ff600b64c208e9d7cff6e1e7d1bb1662d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5999f34ff600b64c208e9d7cff6e1e7d1bb1662d", "html_url": "https://github.com/rust-lang/rust/commit/5999f34ff600b64c208e9d7cff6e1e7d1bb1662d"}], "stats": {"total": 68, "additions": 43, "deletions": 25}, "files": [{"sha": "15a0e0a41ea79a9d01323d5efdbf3f88fe49e7ea", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/114c9284b91790fb8b807e763a1eed2b057ca2d1/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114c9284b91790fb8b807e763a1eed2b057ca2d1/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=114c9284b91790fb8b807e763a1eed2b057ca2d1", "patch": "@@ -263,6 +263,10 @@ impl<'tcx> Inliner<'tcx> {\n                     return None;\n                 }\n \n+                if self.history.contains(&callee) {\n+                    return None;\n+                }\n+\n                 let fn_sig = self.tcx.bound_fn_sig(def_id).subst(self.tcx, substs);\n \n                 return Some(CallSite {\n@@ -407,22 +411,9 @@ impl<'tcx> Inliner<'tcx> {\n                 }\n \n                 TerminatorKind::Call { func: Operand::Constant(ref f), cleanup, .. } => {\n-                    if let ty::FnDef(def_id, substs) =\n+                    if let ty::FnDef(def_id, _) =\n                         *callsite.callee.subst_mir(self.tcx, &f.literal.ty()).kind()\n                     {\n-                        if let Ok(substs) =\n-                            self.tcx.try_normalize_erasing_regions(self.param_env, substs)\n-                        {\n-                            if let Ok(Some(instance)) =\n-                                Instance::resolve(self.tcx, self.param_env, def_id, substs)\n-                            {\n-                                if callsite.callee.def_id() == instance.def_id() {\n-                                    return Err(\"self-recursion\");\n-                                } else if self.history.contains(&instance) {\n-                                    return Err(\"already inlined\");\n-                                }\n-                            }\n-                        }\n                         // Don't give intrinsics the extra penalty for calls\n                         if tcx.is_intrinsic(def_id) {\n                             cost += INSTR_COST;"}, {"sha": "3b32cb809113e70a5a0f52ba447c7e61452aa7ae", "filename": "src/test/mir-opt/inline/inline_cycle.one.Inline.diff", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/114c9284b91790fb8b807e763a1eed2b057ca2d1/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/114c9284b91790fb8b807e763a1eed2b057ca2d1/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff?ref=114c9284b91790fb8b807e763a1eed2b057ca2d1", "patch": "@@ -5,17 +5,20 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-cycle.rs:13:10: 13:10\n       let _1: ();                          // in scope 0 at $DIR/inline-cycle.rs:14:5: 14:24\n +     scope 1 (inlined <C as Call>::call) { // at $DIR/inline-cycle.rs:14:5: 14:24\n++         scope 2 (inlined <A<C> as Call>::call) { // at $DIR/inline-cycle.rs:43:9: 43:23\n++             scope 3 (inlined <B<C> as Call>::call) { // at $DIR/inline-cycle.rs:28:9: 28:31\n++             }\n++         }\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline-cycle.rs:14:5: 14:24\n -         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline-cycle.rs:14:5: 14:24\n-+         _1 = <A<C> as Call>::call() -> bb1; // scope 1 at $DIR/inline-cycle.rs:43:9: 43:23\n++         _1 = <C as Call>::call() -> bb1; // scope 3 at $DIR/inline-cycle.rs:36:9: 36:28\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-cycle.rs:14:5: 14:22\n--                                          // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(Scalar(<ZST>)) }\n-+                                          // + span: $DIR/inline-cycle.rs:43:9: 43:21\n-+                                          // + literal: Const { ty: fn() {<A<C> as Call>::call}, val: Value(Scalar(<ZST>)) }\n++                                          // + span: $DIR/inline-cycle.rs:36:9: 36:26\n+                                           // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {"}, {"sha": "c7f8a64afcd8d93c76429659651a94e67976e119", "filename": "src/test/mir-opt/inline/inline_cycle.two.Inline.diff", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/114c9284b91790fb8b807e763a1eed2b057ca2d1/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/114c9284b91790fb8b807e763a1eed2b057ca2d1/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff?ref=114c9284b91790fb8b807e763a1eed2b057ca2d1", "patch": "@@ -11,6 +11,9 @@\n +         let _3: ();                      // in scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n +         let mut _4: fn() {f};            // in scope 1 at $DIR/inline-cycle.rs:54:5: 54:6\n +         scope 2 (inlined <fn() {f} as FnOnce<()>>::call_once - shim(fn() {f})) { // at $DIR/inline-cycle.rs:54:5: 54:8\n++             scope 3 (inlined f) {        // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++                 let _6: ();              // in scope 3 at $DIR/inline-cycle.rs:59:5: 59:12\n++             }\n +         }\n +     }\n   \n@@ -21,19 +24,26 @@\n +         _2 = f;                          // scope 0 at $DIR/inline-cycle.rs:49:5: 49:12\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-cycle.rs:49:5: 49:9\n--                                          // + literal: Const { ty: fn(fn() {f}) {call::<fn() {f}>}, val: Value(Scalar(<ZST>)) }\n--                                          // mir::Constant\n-                                           // + span: $DIR/inline-cycle.rs:49:10: 49:11\n-                                           // + literal: Const { ty: fn() {f}, val: Value(Scalar(<ZST>)) }\n++                                          // + span: $DIR/inline-cycle.rs:49:10: 49:11\n++                                          // + literal: Const { ty: fn() {f}, val: Value(Scalar(<ZST>)) }\n +         StorageLive(_3);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n +         StorageLive(_4);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:6\n +         _4 = move _2;                    // scope 1 at $DIR/inline-cycle.rs:54:5: 54:6\n +         StorageLive(_5);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n +         _5 = const ();                   // scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n-+         _3 = move _4() -> bb1;           // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++         StorageLive(_6);                 // scope 3 at $DIR/inline-cycle.rs:59:5: 59:12\n++         _6 = call::<fn() {f}>(f) -> bb1; // scope 3 at $DIR/inline-cycle.rs:59:5: 59:12\n++                                          // mir::Constant\n++                                          // + span: $DIR/inline-cycle.rs:59:5: 59:9\n+                                           // + literal: Const { ty: fn(fn() {f}) {call::<fn() {f}>}, val: Value(Scalar(<ZST>)) }\n+                                           // mir::Constant\n+-                                          // + span: $DIR/inline-cycle.rs:49:10: 49:11\n++                                          // + span: $DIR/inline-cycle.rs:59:10: 59:11\n+                                           // + literal: Const { ty: fn() {f}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n++         StorageDead(_6);                 // scope 3 at $DIR/inline-cycle.rs:59:12: 59:13\n +         StorageDead(_5);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n +         StorageDead(_4);                 // scope 1 at $DIR/inline-cycle.rs:54:7: 54:8\n +         StorageDead(_3);                 // scope 1 at $DIR/inline-cycle.rs:54:8: 54:9"}, {"sha": "2a19b21510a1023835e8db86de6a62bbbb047993", "filename": "src/test/mir-opt/inline/inline_cycle_generic.main.Inline.diff", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/114c9284b91790fb8b807e763a1eed2b057ca2d1/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/114c9284b91790fb8b807e763a1eed2b057ca2d1/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff?ref=114c9284b91790fb8b807e763a1eed2b057ca2d1", "patch": "@@ -4,19 +4,33 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-cycle-generic.rs:8:11: 8:11\n       let _1: ();                          // in scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n++     scope 1 (inlined <C as Call>::call) { // at $DIR/inline-cycle-generic.rs:9:5: 9:24\n++         scope 2 (inlined <B<A> as Call>::call) { // at $DIR/inline-cycle-generic.rs:38:9: 38:31\n++             scope 3 (inlined <A as Call>::call) { // at $DIR/inline-cycle-generic.rs:31:9: 31:28\n++                 scope 4 (inlined <B<C> as Call>::call) { // at $DIR/inline-cycle-generic.rs:23:9: 23:31\n++                 }\n++             }\n++         }\n++     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n-          _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n+-         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n++         _1 = <C as Call>::call() -> bb1; // scope 4 at $DIR/inline-cycle-generic.rs:31:9: 31:28\n                                            // mir::Constant\n-                                           // + span: $DIR/inline-cycle-generic.rs:9:5: 9:22\n+-                                          // + span: $DIR/inline-cycle-generic.rs:9:5: 9:22\n++                                          // + span: $DIR/inline-cycle-generic.rs:31:9: 31:26\n                                            // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n           StorageDead(_1);                 // scope 0 at $DIR/inline-cycle-generic.rs:9:24: 9:25\n           _0 = const ();                   // scope 0 at $DIR/inline-cycle-generic.rs:8:11: 10:2\n           return;                          // scope 0 at $DIR/inline-cycle-generic.rs:10:2: 10:2\n++     }\n++ \n++     bb2 (cleanup): {\n++         resume;                          // scope 0 at $DIR/inline-cycle-generic.rs:8:1: 10:2\n       }\n   }\n   "}]}