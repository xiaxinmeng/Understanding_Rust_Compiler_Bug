{"sha": "e84f9a15929d0a915664176cc0dbef43691dd172", "node_id": "C_kwDOAAsO6NoAKGU4NGY5YTE1OTI5ZDBhOTE1NjY0MTc2Y2MwZGJlZjQzNjkxZGQxNzI", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2022-10-09T21:24:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-09T21:24:59Z"}, "message": "Merge pull request #231 from rust-lang/fix/simd_select_bitmask\n\nFix/simd select bitmask", "tree": {"sha": "87d8839de06422933dc5ac6b6784b44b495ed5b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87d8839de06422933dc5ac6b6784b44b495ed5b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e84f9a15929d0a915664176cc0dbef43691dd172", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjQzwrCRBK7hj4Ov3rIwAALb4IAJUde2L8lX8asoUDXGJvS8mq\nkd3S7OK6AxtN4m/EqoxasvHFJVLUjKDLQWiVgo2tZYLmtPakHDsE3cgN6Oze2UdS\nKOUlUND9QrRFjvUMJAPFOfzhnf6ME/KeIbAo7AWeHXDtccspKL427Jbx83pVkZ1k\n0rpzvyT8UlSjgmwqcyLAZ+waxkGvr06rl18CikTAzRL7JOuJlaokJbwazegdjHr+\neaE9ysE529A/cCLZWKoDFo4m7f4A5y4pD3SpVrFts4QAWh9Li5xXTZ90Tv9aMpQA\nNY9/J7n03nMc3lRc5HDuDXXQ7vERPghCQcUYV3bW3lp6/3TM63wQTcbEITcRIe8=\n=p/EX\n-----END PGP SIGNATURE-----\n", "payload": "tree 87d8839de06422933dc5ac6b6784b44b495ed5b7\nparent 04fd2d3c9c58124b3038ff1e575d054660d836ab\nparent 173db39f916a1ae33b15543cd42a88113cf3114f\nauthor antoyo <antoyo@users.noreply.github.com> 1665350699 -0400\ncommitter GitHub <noreply@github.com> 1665350699 -0400\n\nMerge pull request #231 from rust-lang/fix/simd_select_bitmask\n\nFix/simd select bitmask"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e84f9a15929d0a915664176cc0dbef43691dd172", "html_url": "https://github.com/rust-lang/rust/commit/e84f9a15929d0a915664176cc0dbef43691dd172", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e84f9a15929d0a915664176cc0dbef43691dd172/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04fd2d3c9c58124b3038ff1e575d054660d836ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/04fd2d3c9c58124b3038ff1e575d054660d836ab", "html_url": "https://github.com/rust-lang/rust/commit/04fd2d3c9c58124b3038ff1e575d054660d836ab"}, {"sha": "173db39f916a1ae33b15543cd42a88113cf3114f", "url": "https://api.github.com/repos/rust-lang/rust/commits/173db39f916a1ae33b15543cd42a88113cf3114f", "html_url": "https://github.com/rust-lang/rust/commit/173db39f916a1ae33b15543cd42a88113cf3114f"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "5b3166113e77fbf24b4d93b1eaece48bf809fcc5", "filename": "failing-ui-tests.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e84f9a15929d0a915664176cc0dbef43691dd172/failing-ui-tests.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e84f9a15929d0a915664176cc0dbef43691dd172/failing-ui-tests.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/failing-ui-tests.txt?ref=e84f9a15929d0a915664176cc0dbef43691dd172", "patch": "@@ -33,7 +33,6 @@ src/test/ui/sepcomp/sepcomp-statics.rs\n src/test/ui/simd/intrinsic/generic-arithmetic-pass.rs\n src/test/ui/simd/intrinsic/generic-bitmask-pass.rs\n src/test/ui/simd/intrinsic/generic-gather-pass.rs\n-src/test/ui/simd/intrinsic/generic-select-pass.rs\n src/test/ui/simd/issue-17170.rs\n src/test/ui/simd/issue-39720.rs\n src/test/ui/simd/issue-85915-simd-ptrs.rs"}, {"sha": "32feb2c886b2c9900b9346f463fe900ce80c34bb", "filename": "failing-ui-tests12.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e84f9a15929d0a915664176cc0dbef43691dd172/failing-ui-tests12.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e84f9a15929d0a915664176cc0dbef43691dd172/failing-ui-tests12.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/failing-ui-tests12.txt?ref=e84f9a15929d0a915664176cc0dbef43691dd172", "patch": "@@ -16,6 +16,7 @@ src/test/ui/simd/intrinsic/generic-cast-pointer-width.rs\n src/test/ui/simd/intrinsic/generic-comparison-pass.rs\n src/test/ui/simd/intrinsic/generic-elements-pass.rs\n src/test/ui/simd/intrinsic/generic-reduction-pass.rs\n+src/test/ui/simd/intrinsic/generic-select-pass.rs\n src/test/ui/simd/intrinsic/inlining-issue67557-ice.rs\n src/test/ui/simd/intrinsic/inlining-issue67557.rs\n src/test/ui/simd/monomorphize-shuffle-index.rs"}, {"sha": "b7342f507168c55fa33a9db32e1774d18d1b77dc", "filename": "src/builder.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e84f9a15929d0a915664176cc0dbef43691dd172/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84f9a15929d0a915664176cc0dbef43691dd172/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=e84f9a15929d0a915664176cc0dbef43691dd172", "patch": "@@ -1597,20 +1597,42 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n         unimplemented!();\n     }\n \n-\n     pub fn vector_select(&mut self, cond: RValue<'gcc>, then_val: RValue<'gcc>, else_val: RValue<'gcc>) -> RValue<'gcc> {\n         // cond is a vector of integers, not of bools.\n-        let cond_type = cond.get_type();\n-        let vector_type = cond_type.unqualified().dyncast_vector().expect(\"vector type\");\n+        let vector_type = cond.get_type().unqualified().dyncast_vector().expect(\"vector type\");\n         let num_units = vector_type.get_num_units();\n         let element_type = vector_type.get_element_type();\n+\n+        #[cfg(feature=\"master\")]\n+        let (cond, element_type) = {\n+            let then_val_vector_type = then_val.get_type().dyncast_vector().expect(\"vector type\");\n+            let then_val_element_type = then_val_vector_type.get_element_type();\n+            let then_val_element_size = then_val_element_type.get_size();\n+\n+            // NOTE: the mask needs to be of the same size as the other arguments in order for the &\n+            // operation to work.\n+            if then_val_element_size != element_type.get_size() {\n+                let new_element_type = self.type_ix(then_val_element_size as u64 * 8);\n+                let new_vector_type = self.context.new_vector_type(new_element_type, num_units as u64);\n+                let cond = self.context.convert_vector(None, cond, new_vector_type);\n+                (cond, new_element_type)\n+            }\n+            else {\n+                (cond, element_type)\n+            }\n+        };\n+\n+        let cond_type = cond.get_type();\n+\n         let zeros = vec![self.context.new_rvalue_zero(element_type); num_units];\n         let zeros = self.context.new_rvalue_from_vector(None, cond_type, &zeros);\n \n+        let result_type = then_val.get_type();\n+\n         let masks = self.context.new_comparison(None, ComparisonOp::NotEquals, cond, zeros);\n         // NOTE: masks is a vector of integers, but the values can be vectors of floats, so use bitcast to make\n         // the & operation work.\n-        let masks = self.bitcast_if_needed(masks, then_val.get_type());\n+        let then_val = self.bitcast_if_needed(then_val, masks.get_type());\n         let then_vals = masks & then_val;\n \n         let minus_ones = vec![self.context.new_rvalue_from_int(element_type, -1); num_units];\n@@ -1623,7 +1645,8 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n         let else_val = self.context.new_bitcast(None, else_val, then_val.get_type());\n         let else_vals = inverted_masks & else_val;\n \n-        then_vals | else_vals\n+        let res = then_vals | else_vals;\n+        self.bitcast_if_needed(res, result_type)\n     }\n }\n "}, {"sha": "fbfcebe46a13e589b04a0aab703cabf05e43d897", "filename": "src/intrinsic/simd.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e84f9a15929d0a915664176cc0dbef43691dd172/src%2Fintrinsic%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84f9a15929d0a915664176cc0dbef43691dd172/src%2Fintrinsic%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fsimd.rs?ref=e84f9a15929d0a915664176cc0dbef43691dd172", "patch": "@@ -93,14 +93,19 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         let arg1_vector_type = arg1_type.unqualified().dyncast_vector().expect(\"vector type\");\n         let arg1_element_type = arg1_vector_type.get_element_type();\n \n+        // NOTE: since the arguments can be vectors of floats, make sure the mask is a vector of\n+        // integer.\n+        let mask_element_type = bx.type_ix(arg1_element_type.get_size() as u64 * 8);\n+        let vector_mask_type = bx.context.new_vector_type(mask_element_type, arg1_vector_type.get_num_units() as u64);\n+\n         let mut elements = vec![];\n         let one = bx.context.new_rvalue_one(mask.get_type());\n         for _ in 0..len {\n-            let element = bx.context.new_cast(None, mask & one, arg1_element_type);\n+            let element = bx.context.new_cast(None, mask & one, mask_element_type);\n             elements.push(element);\n             mask = mask >> one;\n         }\n-        let vector_mask = bx.context.new_rvalue_from_vector(None, arg1_type, &elements);\n+        let vector_mask = bx.context.new_rvalue_from_vector(None, vector_mask_type, &elements);\n \n         return Ok(bx.vector_select(vector_mask, arg1, args[2].immediate()));\n     }"}]}