{"sha": "a69d43493a91b11eb5b840253825330e9320a56f", "node_id": "C_kwDOAAsO6NoAKGE2OWQ0MzQ5M2E5MWIxMWViNWI4NDAyNTM4MjUzMzBlOTMyMGE1NmY", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-11-05T16:02:10Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-11-05T16:02:10Z"}, "message": "rustdoc: use `ThinVec` and `Box<str>` to shrink `clean::ItemKind`", "tree": {"sha": "c8cc5b53fbaf57f90275948ce1a23ce50526c0b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8cc5b53fbaf57f90275948ce1a23ce50526c0b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a69d43493a91b11eb5b840253825330e9320a56f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a69d43493a91b11eb5b840253825330e9320a56f", "html_url": "https://github.com/rust-lang/rust/commit/a69d43493a91b11eb5b840253825330e9320a56f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a69d43493a91b11eb5b840253825330e9320a56f/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09508489efc223287731fe8abbd2a81bbf7adf8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/09508489efc223287731fe8abbd2a81bbf7adf8e", "html_url": "https://github.com/rust-lang/rust/commit/09508489efc223287731fe8abbd2a81bbf7adf8e"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "cd40413c2648fbb6d1dcdd79f1e75a2b60183c7f", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a69d43493a91b11eb5b840253825330e9320a56f/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69d43493a91b11eb5b840253825330e9320a56f/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=a69d43493a91b11eb5b840253825330e9320a56f", "patch": "@@ -3,7 +3,7 @@\n use std::iter::once;\n use std::sync::Arc;\n \n-use thin_vec::ThinVec;\n+use thin_vec::{thin_vec, ThinVec};\n \n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashSet;\n@@ -596,7 +596,7 @@ fn build_module_items(\n                         clean::ImportSource {\n                             path: clean::Path {\n                                 res,\n-                                segments: vec![clean::PathSegment {\n+                                segments: thin_vec![clean::PathSegment {\n                                     name: prim_ty.as_sym(),\n                                     args: clean::GenericArgs::AngleBracketed {\n                                         args: Default::default(),"}, {"sha": "ad02bc592866d473f534843652fcaa15192f17e0", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a69d43493a91b11eb5b840253825330e9320a56f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69d43493a91b11eb5b840253825330e9320a56f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a69d43493a91b11eb5b840253825330e9320a56f", "patch": "@@ -227,7 +227,7 @@ pub(crate) fn clean_middle_const<'tcx>(\n     // FIXME: instead of storing the stringified expression, store `self` directly instead.\n     Constant {\n         type_: clean_middle_ty(constant.ty(), cx, None),\n-        kind: ConstantKind::TyConst { expr: constant.to_string() },\n+        kind: ConstantKind::TyConst { expr: constant.to_string().into() },\n     }\n }\n \n@@ -1200,7 +1200,7 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n                         true\n                     }\n                     (GenericParamDefKind::Const { .. }, GenericArg::Const(c)) => match &c.kind {\n-                        ConstantKind::TyConst { expr } => expr == param.name.as_str(),\n+                        ConstantKind::TyConst { expr } => **expr == *param.name.as_str(),\n                         _ => false,\n                     },\n                     _ => false,\n@@ -1529,7 +1529,7 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n                 }\n             };\n \n-            Array(Box::new(clean_ty(ty, cx)), length)\n+            Array(Box::new(clean_ty(ty, cx)), length.into())\n         }\n         TyKind::Tup(tys) => Tuple(tys.iter().map(|ty| clean_ty(ty, cx)).collect()),\n         TyKind::OpaqueDef(item_id, _, _) => {\n@@ -1601,7 +1601,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n         ty::Array(ty, mut n) => {\n             n = n.eval(cx.tcx, ty::ParamEnv::reveal_all());\n             let n = print_const(cx, n);\n-            Array(Box::new(clean_middle_ty(ty, cx, None)), n)\n+            Array(Box::new(clean_middle_ty(ty, cx, None)), n.into())\n         }\n         ty::RawPtr(mt) => RawPointer(mt.mutbl, Box::new(clean_middle_ty(mt.ty, cx, None))),\n         ty::Ref(r, ty, mutbl) => BorrowedRef {"}, {"sha": "7ffb380913796591da531c9745955836315c0fc0", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a69d43493a91b11eb5b840253825330e9320a56f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69d43493a91b11eb5b840253825330e9320a56f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=a69d43493a91b11eb5b840253825330e9320a56f", "patch": "@@ -1621,7 +1621,7 @@ pub(crate) enum Type {\n     /// An array type.\n     ///\n     /// The `String` field is a stringified version of the array's length parameter.\n-    Array(Box<Type>, String),\n+    Array(Box<Type>, Box<str>),\n     /// A raw pointer type: `*const i32`, `*mut i32`\n     RawPointer(Mutability, Box<Type>),\n     /// A reference type: `&i32`, `&'a mut Foo`\n@@ -2206,7 +2206,7 @@ impl Span {\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub(crate) struct Path {\n     pub(crate) res: Res,\n-    pub(crate) segments: Vec<PathSegment>,\n+    pub(crate) segments: ThinVec<PathSegment>,\n }\n \n impl Path {\n@@ -2356,7 +2356,7 @@ pub(crate) enum ConstantKind {\n     ///\n     /// Note that `ty::Const` includes generic parameters, and may not always be uniquely identified\n     /// by a DefId. So this field must be different from `Extern`.\n-    TyConst { expr: String },\n+    TyConst { expr: Box<str> },\n     /// A constant (expression) that's not an item or associated item. These are usually found\n     /// nested inside types (e.g., array lengths) or expressions (e.g., repeat counts), and also\n     /// used to define explicit discriminant values for enum variants.\n@@ -2384,7 +2384,7 @@ impl Constant {\n impl ConstantKind {\n     pub(crate) fn expr(&self, tcx: TyCtxt<'_>) -> String {\n         match *self {\n-            ConstantKind::TyConst { ref expr } => expr.clone(),\n+            ConstantKind::TyConst { ref expr } => expr.to_string(),\n             ConstantKind::Extern { def_id } => print_inlined_const(tcx, def_id),\n             ConstantKind::Local { body, .. } | ConstantKind::Anonymous { body } => {\n                 print_const_expr(tcx, body)\n@@ -2570,13 +2570,13 @@ mod size_asserts {\n     // tidy-alphabetical-start\n     static_assert_size!(Crate, 72); // frequently moved by-value\n     static_assert_size!(DocFragment, 32);\n-    static_assert_size!(GenericArg, 48);\n+    static_assert_size!(GenericArg, 32);\n     static_assert_size!(GenericArgs, 32);\n     static_assert_size!(GenericParamDef, 56);\n     static_assert_size!(Generics, 16);\n     static_assert_size!(Item, 56);\n-    static_assert_size!(ItemKind, 88);\n+    static_assert_size!(ItemKind, 64);\n     static_assert_size!(PathSegment, 40);\n-    static_assert_size!(Type, 48);\n+    static_assert_size!(Type, 32);\n     // tidy-alphabetical-end\n }"}, {"sha": "4e1f39cf87b96d7bf794c2591cf1c5b2d763f1ac", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a69d43493a91b11eb5b840253825330e9320a56f/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69d43493a91b11eb5b840253825330e9320a56f/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=a69d43493a91b11eb5b840253825330e9320a56f", "patch": "@@ -21,7 +21,7 @@ use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_span::symbol::{kw, sym, Symbol};\n use std::fmt::Write as _;\n use std::mem;\n-use thin_vec::ThinVec;\n+use thin_vec::{thin_vec, ThinVec};\n \n #[cfg(test)]\n mod tests;\n@@ -136,7 +136,7 @@ pub(super) fn external_path<'tcx>(\n     let name = cx.tcx.item_name(did);\n     Path {\n         res: Res::Def(def_kind, did),\n-        segments: vec![PathSegment {\n+        segments: thin_vec![PathSegment {\n             name,\n             args: external_generic_args(cx, did, has_self, bindings, substs),\n         }],"}, {"sha": "091a1ba70cab7d2a3691acb17dde6d8cd1c9220c", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a69d43493a91b11eb5b840253825330e9320a56f/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69d43493a91b11eb5b840253825330e9320a56f/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=a69d43493a91b11eb5b840253825330e9320a56f", "patch": "@@ -485,7 +485,7 @@ impl FromWithTcx<clean::Type> for Type {\n             BareFunction(f) => Type::FunctionPointer(Box::new((*f).into_tcx(tcx))),\n             Tuple(t) => Type::Tuple(t.into_tcx(tcx)),\n             Slice(t) => Type::Slice(Box::new((*t).into_tcx(tcx))),\n-            Array(t, s) => Type::Array { type_: Box::new((*t).into_tcx(tcx)), len: s },\n+            Array(t, s) => Type::Array { type_: Box::new((*t).into_tcx(tcx)), len: s.to_string() },\n             ImplTrait(g) => Type::ImplTrait(g.into_tcx(tcx)),\n             Infer => Type::Infer,\n             RawPointer(mutability, type_) => Type::RawPointer {"}]}