{"sha": "cf00142b4db822735b31392ded7c039844411a74", "node_id": "C_kwDOAAsO6NoAKGNmMDAxNDJiNGRiODIyNzM1YjMxMzkyZGVkN2MwMzk4NDQ0MTFhNzQ", "commit": {"author": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-04-28T12:18:01Z"}, "committer": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-04-28T12:18:01Z"}, "message": "use tcx.require_lang_item() instead", "tree": {"sha": "2a579fa45f9c55928cce8fd8b17cb7e1f63fa888", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a579fa45f9c55928cce8fd8b17cb7e1f63fa888"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf00142b4db822735b31392ded7c039844411a74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf00142b4db822735b31392ded7c039844411a74", "html_url": "https://github.com/rust-lang/rust/commit/cf00142b4db822735b31392ded7c039844411a74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf00142b4db822735b31392ded7c039844411a74/comments", "author": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d735aa68107bbe4d617903f221088eeef92ee223", "url": "https://api.github.com/repos/rust-lang/rust/commits/d735aa68107bbe4d617903f221088eeef92ee223", "html_url": "https://github.com/rust-lang/rust/commit/d735aa68107bbe4d617903f221088eeef92ee223"}], "stats": {"total": 17, "additions": 5, "deletions": 12}, "files": [{"sha": "1574b30497b4b38dbe8abce2d12b814d1f67a378", "filename": "compiler/rustc_codegen_ssa/src/common.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cf00142b4db822735b31392ded7c039844411a74/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf00142b4db822735b31392ded7c039844411a74/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcommon.rs?ref=cf00142b4db822735b31392ded7c039844411a74", "patch": "@@ -119,17 +119,10 @@ mod temp_stable_hash_impls {\n pub fn build_langcall<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &Bx,\n     span: Option<Span>,\n-    msg: &str,\n     li: LangItem,\n ) -> (Bx::FnAbiOfResult, Bx::Value) {\n     let tcx = bx.tcx();\n-    let def_id = tcx.lang_items().require(li).unwrap_or_else(|s| {\n-        let msg = format!(\"{} {}\", msg, s);\n-        match span {\n-            Some(span) => tcx.sess.span_fatal(span, &msg),\n-            None => tcx.sess.fatal(&msg),\n-        }\n-    });\n+    let def_id = tcx.require_lang_item(li, span);\n     let instance = ty::Instance::mono(tcx, def_id);\n     (bx.fn_abi_of_instance(instance, ty::List::empty()), bx.get_fn_addr(instance))\n }"}, {"sha": "a185eb298e0926b825002ec928295308fd2aa1c7", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf00142b4db822735b31392ded7c039844411a74/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf00142b4db822735b31392ded7c039844411a74/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=cf00142b4db822735b31392ded7c039844411a74", "patch": "@@ -489,7 +489,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n         };\n \n-        let (fn_abi, llfn) = common::build_langcall(&bx, Some(span), \"\", lang_item);\n+        let (fn_abi, llfn) = common::build_langcall(&bx, Some(span), lang_item);\n \n         // Codegen the actual panic invoke/call.\n         helper.do_call(self, &mut bx, fn_abi, llfn, &args, None, cleanup);\n@@ -505,7 +505,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         self.set_debug_loc(&mut bx, terminator.source_info);\n \n         // Obtain the panic entry point.\n-        let (fn_abi, llfn) = common::build_langcall(&bx, Some(span), \"\", LangItem::PanicNoUnwind);\n+        let (fn_abi, llfn) = common::build_langcall(&bx, Some(span), LangItem::PanicNoUnwind);\n \n         // Codegen the actual panic invoke/call.\n         helper.do_call(self, &mut bx, fn_abi, llfn, &[], None, None);\n@@ -567,7 +567,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n                 // Obtain the panic entry point.\n                 let (fn_abi, llfn) =\n-                    common::build_langcall(bx, Some(source_info.span), \"\", LangItem::Panic);\n+                    common::build_langcall(bx, Some(source_info.span), LangItem::Panic);\n \n                 // Codegen the actual panic invoke/call.\n                 helper.do_call(\n@@ -1429,7 +1429,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let llretty = self.landing_pad_type();\n             bx.cleanup_landing_pad(llretty, llpersonality);\n \n-            let (fn_abi, fn_ptr) = common::build_langcall(&bx, None, \"\", LangItem::PanicNoUnwind);\n+            let (fn_abi, fn_ptr) = common::build_langcall(&bx, None, LangItem::PanicNoUnwind);\n             let fn_ty = bx.fn_decl_backend_type(&fn_abi);\n \n             let llret = bx.call(fn_ty, fn_ptr, &[], None);"}]}