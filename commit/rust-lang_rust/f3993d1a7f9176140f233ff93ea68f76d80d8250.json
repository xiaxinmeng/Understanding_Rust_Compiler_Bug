{"sha": "f3993d1a7f9176140f233ff93ea68f76d80d8250", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzOTkzZDFhN2Y5MTc2MTQwZjIzM2ZmOTNlYTY4Zjc2ZDgwZDgyNTA=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-20T04:31:14Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-22T20:01:50Z"}, "message": "Rename `loader.rs` -> `locator.rs`.", "tree": {"sha": "af4c225e28043f4a6da9cf69bbd2dc7a34b337c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af4c225e28043f4a6da9cf69bbd2dc7a34b337c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3993d1a7f9176140f233ff93ea68f76d80d8250", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3993d1a7f9176140f233ff93ea68f76d80d8250", "html_url": "https://github.com/rust-lang/rust/commit/f3993d1a7f9176140f233ff93ea68f76d80d8250", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3993d1a7f9176140f233ff93ea68f76d80d8250/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92413c9cf4508fb40c7563dabcc156a6528c4913", "url": "https://api.github.com/repos/rust-lang/rust/commits/92413c9cf4508fb40c7563dabcc156a6528c4913", "html_url": "https://github.com/rust-lang/rust/commit/92413c9cf4508fb40c7563dabcc156a6528c4913"}], "stats": {"total": 53, "additions": 26, "deletions": 27}, "files": [{"sha": "cb001688da286e24c49249e40a51670841a9cc72", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3993d1a7f9176140f233ff93ea68f76d80d8250/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3993d1a7f9176140f233ff93ea68f76d80d8250/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=f3993d1a7f9176140f233ff93ea68f76d80d8250", "patch": "@@ -77,7 +77,7 @@ use rustc::session::config::nightly_options;\n use rustc::session::early_error;\n use rustc::lint::Lint;\n use rustc::lint;\n-use rustc_metadata::loader;\n+use rustc_metadata::locator;\n use rustc_metadata::cstore::CStore;\n use rustc::util::common::time;\n \n@@ -578,8 +578,7 @@ impl RustcDefaultCalls {\n                 &Input::File(ref ifile) => {\n                     let path = &(*ifile);\n                     let mut v = Vec::new();\n-                    loader::list_file_metadata(&sess.target.target, path, &mut v)\n-                        .unwrap();\n+                    locator::list_file_metadata(&sess.target.target, path, &mut v).unwrap();\n                     println!(\"{}\", String::from_utf8(v).unwrap());\n                 }\n                 &Input::Str { .. } => {"}, {"sha": "7ae3f6f81079e9cf75723d12e55021add8b5e181", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f3993d1a7f9176140f233ff93ea68f76d80d8250/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3993d1a7f9176140f233ff93ea68f76d80d8250/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=f3993d1a7f9176140f233ff93ea68f76d80d8250", "patch": "@@ -11,7 +11,7 @@\n //! Validates all used crates and extern libraries and loads their metadata\n \n use cstore::{self, CStore, CrateSource, MetadataBlob};\n-use loader::{self, CratePaths};\n+use locator::{self, CratePaths};\n use macro_import;\n use schema::CrateRoot;\n \n@@ -352,7 +352,7 @@ impl<'a> CrateLoader<'a> {\n             Some(cnum) => LoadResult::Previous(cnum),\n             None => {\n                 info!(\"falling back to a load\");\n-                let mut load_ctxt = loader::Context {\n+                let mut locate_ctxt = locator::Context {\n                     sess: self.sess,\n                     span: span,\n                     ident: ident,\n@@ -368,9 +368,9 @@ impl<'a> CrateLoader<'a> {\n                     rejected_via_version: vec!(),\n                     should_match_name: true,\n                 };\n-                match self.load(&mut load_ctxt) {\n+                match self.load(&mut locate_ctxt) {\n                     Some(result) => result,\n-                    None => load_ctxt.report_load_errs(),\n+                    None => locate_ctxt.report_errs(),\n                 }\n             }\n         };\n@@ -390,8 +390,8 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n-    fn load(&mut self, loader: &mut loader::Context) -> Option<LoadResult> {\n-        let library = match loader.maybe_load_library_crate() {\n+    fn load(&mut self, locate_ctxt: &mut locator::Context) -> Option<LoadResult> {\n+        let library = match locate_ctxt.maybe_load_library_crate() {\n             Some(lib) => lib,\n             None => return None,\n         };\n@@ -405,11 +405,11 @@ impl<'a> CrateLoader<'a> {\n         // don't want to match a host crate against an equivalent target one\n         // already loaded.\n         let root = library.metadata.get_root();\n-        if loader.triple == self.sess.opts.target_triple {\n+        if locate_ctxt.triple == self.sess.opts.target_triple {\n             let mut result = LoadResult::Loaded(library);\n             self.cstore.iter_crate_data(|cnum, data| {\n                 if data.name() == root.name && root.hash == data.hash() {\n-                    assert!(loader.hash.is_none());\n+                    assert!(locate_ctxt.hash.is_none());\n                     info!(\"load success, going to previous cnum: {}\", cnum);\n                     result = LoadResult::Previous(cnum);\n                 }\n@@ -494,7 +494,7 @@ impl<'a> CrateLoader<'a> {\n         let mut target_only = false;\n         let ident = info.ident.clone();\n         let name = info.name.clone();\n-        let mut load_ctxt = loader::Context {\n+        let mut locate_ctxt = locator::Context {\n             sess: self.sess,\n             span: span,\n             ident: &ident[..],\n@@ -510,7 +510,7 @@ impl<'a> CrateLoader<'a> {\n             rejected_via_version: vec!(),\n             should_match_name: true,\n         };\n-        let library = self.load(&mut load_ctxt).or_else(|| {\n+        let library = self.load(&mut locate_ctxt).or_else(|| {\n             if !is_cross {\n                 return None\n             }\n@@ -519,15 +519,15 @@ impl<'a> CrateLoader<'a> {\n             target_only = true;\n             should_link = info.should_link;\n \n-            load_ctxt.target = &self.sess.target.target;\n-            load_ctxt.triple = target_triple;\n-            load_ctxt.filesearch = self.sess.target_filesearch(PathKind::Crate);\n+            locate_ctxt.target = &self.sess.target.target;\n+            locate_ctxt.triple = target_triple;\n+            locate_ctxt.filesearch = self.sess.target_filesearch(PathKind::Crate);\n \n-            self.load(&mut load_ctxt)\n+            self.load(&mut locate_ctxt)\n         });\n         let library = match library {\n             Some(l) => l,\n-            None => load_ctxt.report_load_errs(),\n+            None => locate_ctxt.report_errs(),\n         };\n \n         let (dylib, metadata) = match library {"}, {"sha": "a87e61c4c944c54ec213e1b8b131470ab789eedf", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3993d1a7f9176140f233ff93ea68f76d80d8250/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3993d1a7f9176140f233ff93ea68f76d80d8250/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=f3993d1a7f9176140f233ff93ea68f76d80d8250", "patch": "@@ -11,7 +11,7 @@\n // The crate store - a central repo for information collected about external\n // crates and libraries\n \n-use loader;\n+use locator;\n use schema;\n \n use rustc::dep_graph::DepGraph;\n@@ -43,7 +43,7 @@ pub type CrateNumMap = IndexVec<CrateNum, CrateNum>;\n \n pub enum MetadataBlob {\n     Inflated(Bytes),\n-    Archive(loader::ArchiveMetadata),\n+    Archive(locator::ArchiveMetadata),\n }\n \n /// Holds information about a syntax_pos::FileMap imported from another crate."}, {"sha": "7637b769f937755fcfe62c23190634fd0b090b61", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3993d1a7f9176140f233ff93ea68f76d80d8250/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3993d1a7f9176140f233ff93ea68f76d80d8250/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=f3993d1a7f9176140f233ff93ea68f76d80d8250", "patch": "@@ -10,7 +10,7 @@\n \n use cstore;\n use encoder;\n-use loader;\n+use locator;\n use schema;\n \n use rustc::middle::cstore::{InlinedItem, CrateStore, CrateSource, ExternCrate};\n@@ -497,12 +497,12 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n \n     fn metadata_filename(&self) -> &str\n     {\n-        loader::METADATA_FILENAME\n+        locator::METADATA_FILENAME\n     }\n \n     fn metadata_section_name(&self, target: &Target) -> &str\n     {\n-        loader::meta_section_name(target)\n+        locator::meta_section_name(target)\n     }\n \n     fn used_crates(&self, prefer: LinkagePreference) -> Vec<(CrateNum, Option<PathBuf>)>"}, {"sha": "c0fc1a7065cc0d34dd5d894056320fea77cd6925", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3993d1a7f9176140f233ff93ea68f76d80d8250/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3993d1a7f9176140f233ff93ea68f76d80d8250/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=f3993d1a7f9176140f233ff93ea68f76d80d8250", "patch": "@@ -58,7 +58,7 @@ mod schema;\n \n pub mod creader;\n pub mod cstore;\n-pub mod loader;\n+pub mod locator;\n pub mod macro_import;\n \n __build_diagnostic_array! { librustc_metadata, DIAGNOSTICS }"}, {"sha": "e684cd16366ec41ca5d030b863a33646eed31d98", "filename": "src/librustc_metadata/locator.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3993d1a7f9176140f233ff93ea68f76d80d8250/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3993d1a7f9176140f233ff93ea68f76d80d8250/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=f3993d1a7f9176140f233ff93ea68f76d80d8250", "patch": "@@ -210,7 +210,7 @@\n //!\n //! That's the general overview of loading crates in the compiler, but it's by\n //! no means all of the necessary details. Take a look at the rest of\n-//! metadata::loader or metadata::creader for all the juicy details!\n+//! metadata::locator or metadata::creader for all the juicy details!\n \n use cstore::MetadataBlob;\n use creader::Library;\n@@ -310,10 +310,10 @@ impl<'a> Context<'a> {\n     }\n \n     pub fn load_library_crate(&mut self) -> Library {\n-        self.find_library_crate().unwrap_or_else(|| self.report_load_errs())\n+        self.find_library_crate().unwrap_or_else(|| self.report_errs())\n     }\n \n-    pub fn report_load_errs(&mut self) -> ! {\n+    pub fn report_errs(&mut self) -> ! {\n         let add = match self.root {\n             &None => String::new(),\n             &Some(ref r) => format!(\" which `{}` depends on\",", "previous_filename": "src/librustc_metadata/loader.rs"}]}