{"sha": "091b5471226a5dd8049ba498134daac03376c4d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MWI1NDcxMjI2YTVkZDgwNDliYTQ5ODEzNGRhYWMwMzM3NmM0ZDU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-10-12T17:15:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-12T17:15:26Z"}, "message": "Rollup merge of #36831 - michaelwoerister:ich-updates, r=nikomatsakis\n\nincr.comp.: Minor refactoring and update to struct ICH test case\n\nr? @nikomatsakis", "tree": {"sha": "841ff491fe0f27b6f9755dde1f38970c38656d79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/841ff491fe0f27b6f9755dde1f38970c38656d79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/091b5471226a5dd8049ba498134daac03376c4d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/091b5471226a5dd8049ba498134daac03376c4d5", "html_url": "https://github.com/rust-lang/rust/commit/091b5471226a5dd8049ba498134daac03376c4d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/091b5471226a5dd8049ba498134daac03376c4d5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76fb6e776120be5622c80628791843734daec26e", "url": "https://api.github.com/repos/rust-lang/rust/commits/76fb6e776120be5622c80628791843734daec26e", "html_url": "https://github.com/rust-lang/rust/commit/76fb6e776120be5622c80628791843734daec26e"}, {"sha": "954d89b75460d10cd96ec607d38cbf2fd028cf9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/954d89b75460d10cd96ec607d38cbf2fd028cf9c", "html_url": "https://github.com/rust-lang/rust/commit/954d89b75460d10cd96ec607d38cbf2fd028cf9c"}], "stats": {"total": 151, "additions": 143, "deletions": 8}, "files": [{"sha": "d002aba595bcac22f70fc8215c4eb1febd36c2e6", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/091b5471226a5dd8049ba498134daac03376c4d5/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091b5471226a5dd8049ba498134daac03376c4d5/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=091b5471226a5dd8049ba498134daac03376c4d5", "patch": "@@ -118,6 +118,8 @@ pub struct PerfStats {\n     pub incr_comp_hashes_time: Cell<Duration>,\n     // The number of incr. comp. hash computations performed\n     pub incr_comp_hashes_count: Cell<u64>,\n+    // The number of bytes hashed when computing ICH values\n+    pub incr_comp_bytes_hashed: Cell<u64>,\n     // The accumulated time spent on computing symbol hashes\n     pub symbol_hash_time: Cell<Duration>,\n }\n@@ -439,6 +441,11 @@ impl Session {\n                  duration_to_secs_str(self.perf_stats.incr_comp_hashes_time.get()));\n         println!(\"Total number of incr. comp. hashes computed:   {}\",\n                  self.perf_stats.incr_comp_hashes_count.get());\n+        println!(\"Total number of bytes hashed for incr. comp.:  {}\",\n+                 self.perf_stats.incr_comp_bytes_hashed.get());\n+        println!(\"Average bytes hashed per incr. comp. HIR node: {}\",\n+                 self.perf_stats.incr_comp_bytes_hashed.get() /\n+                 self.perf_stats.incr_comp_hashes_count.get());\n         println!(\"Total time spent computing symbol hashes:      {}\",\n                  duration_to_secs_str(self.perf_stats.symbol_hash_time.get()));\n     }\n@@ -571,6 +578,7 @@ pub fn build_session_(sopts: config::Options,\n             svh_time: Cell::new(Duration::from_secs(0)),\n             incr_comp_hashes_time: Cell::new(Duration::from_secs(0)),\n             incr_comp_hashes_count: Cell::new(0),\n+            incr_comp_bytes_hashed: Cell::new(0),\n             symbol_hash_time: Cell::new(Duration::from_secs(0)),\n         }\n     };"}, {"sha": "28db39d667c4c864012fc34c8537b4b8af05bc53", "filename": "src/librustc_incremental/calculate_svh/hasher.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/091b5471226a5dd8049ba498134daac03376c4d5/src%2Flibrustc_incremental%2Fcalculate_svh%2Fhasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091b5471226a5dd8049ba498134daac03376c4d5/src%2Flibrustc_incremental%2Fcalculate_svh%2Fhasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fhasher.rs?ref=091b5471226a5dd8049ba498134daac03376c4d5", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::hash::Hasher;\n+use std::collections::hash_map::DefaultHasher;\n+\n+#[derive(Debug)]\n+pub struct IchHasher {\n+    // FIXME: this should use SHA1, not DefaultHasher. DefaultHasher is not\n+    // built to avoid collisions.\n+    state: DefaultHasher,\n+    bytes_hashed: u64,\n+}\n+\n+impl IchHasher {\n+    pub fn new() -> IchHasher {\n+        IchHasher {\n+            state: DefaultHasher::new(),\n+            bytes_hashed: 0\n+        }\n+    }\n+\n+    pub fn bytes_hashed(&self) -> u64 {\n+        self.bytes_hashed\n+    }\n+}\n+\n+impl Hasher for IchHasher {\n+    #[inline]\n+    fn finish(&self) -> u64 {\n+        self.state.finish()\n+    }\n+\n+    #[inline]\n+    fn write(&mut self, bytes: &[u8]) {\n+        self.state.write(bytes);\n+        self.bytes_hashed += bytes.len() as u64;\n+    }\n+}"}, {"sha": "12627e02debd0d723427d028e1cad35a042a8603", "filename": "src/librustc_incremental/calculate_svh/mod.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/091b5471226a5dd8049ba498134daac03376c4d5/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091b5471226a5dd8049ba498134daac03376c4d5/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs?ref=091b5471226a5dd8049ba498134daac03376c4d5", "patch": "@@ -30,7 +30,6 @@\n use syntax::ast;\n use std::cell::RefCell;\n use std::hash::{Hash, Hasher};\n-use std::collections::hash_map::DefaultHasher;\n use rustc::dep_graph::DepNode;\n use rustc::hir;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n@@ -43,10 +42,12 @@ use rustc::session::config::DebugInfoLevel::NoDebugInfo;\n use self::def_path_hash::DefPathHashes;\n use self::svh_visitor::StrictVersionHashVisitor;\n use self::caching_codemap_view::CachingCodemapView;\n+use self::hasher::IchHasher;\n \n mod def_path_hash;\n mod svh_visitor;\n mod caching_codemap_view;\n+mod hasher;\n \n pub struct IncrementalHashesMap {\n     hashes: FnvHashMap<DepNode<DefId>, u64>,\n@@ -74,6 +75,10 @@ impl IncrementalHashesMap {\n     pub fn iter<'a>(&'a self) -> ::std::collections::hash_map::Iter<'a, DepNode<DefId>, u64> {\n         self.hashes.iter()\n     }\n+\n+    pub fn len(&self) -> usize {\n+        self.hashes.len()\n+    }\n }\n \n impl<'a> ::std::ops::Index<&'a DepNode<DefId>> for IncrementalHashesMap {\n@@ -102,6 +107,9 @@ pub fn compute_incremental_hashes_map<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n                                  |v| visit::walk_crate(v, krate));\n         krate.visit_all_items(&mut visitor);\n     });\n+\n+    tcx.sess.perf_stats.incr_comp_hashes_count.set(visitor.hashes.len() as u64);\n+\n     record_time(&tcx.sess.perf_stats.svh_time, || visitor.compute_crate_hash());\n     visitor.hashes\n }\n@@ -127,9 +135,7 @@ impl<'a, 'tcx> HashItemsVisitor<'a, 'tcx> {\n     {\n         assert!(def_id.is_local());\n         debug!(\"HashItemsVisitor::calculate(def_id={:?})\", def_id);\n-        // FIXME: this should use SHA1, not DefaultHasher. DefaultHasher is not\n-        // built to avoid collisions.\n-        let mut state = DefaultHasher::new();\n+        let mut state = IchHasher::new();\n         walk_op(&mut StrictVersionHashVisitor::new(&mut state,\n                                                    self.tcx,\n                                                    &mut self.def_path_hashes,\n@@ -138,12 +144,16 @@ impl<'a, 'tcx> HashItemsVisitor<'a, 'tcx> {\n         let item_hash = state.finish();\n         self.hashes.insert(DepNode::Hir(def_id), item_hash);\n         debug!(\"calculate_item_hash: def_id={:?} hash={:?}\", def_id, item_hash);\n+\n+        let bytes_hashed = self.tcx.sess.perf_stats.incr_comp_bytes_hashed.get() +\n+                           state.bytes_hashed();\n+        self.tcx.sess.perf_stats.incr_comp_bytes_hashed.set(bytes_hashed);\n     }\n \n     fn compute_crate_hash(&mut self) {\n         let krate = self.tcx.map.krate();\n \n-        let mut crate_state = DefaultHasher::new();\n+        let mut crate_state = IchHasher::new();\n \n         let crate_disambiguator = self.tcx.sess.local_crate_disambiguator();\n         \"crate_disambiguator\".hash(&mut crate_state);"}, {"sha": "584e5598b9f9ffec78ecb6e9f9f4233dcc14c119", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/091b5471226a5dd8049ba498134daac03376c4d5/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091b5471226a5dd8049ba498134daac03376c4d5/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=091b5471226a5dd8049ba498134daac03376c4d5", "patch": "@@ -31,10 +31,10 @@ use rustc::hir::intravisit as visit;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fnv;\n use std::hash::Hash;\n-use std::collections::hash_map::DefaultHasher;\n \n use super::def_path_hash::DefPathHashes;\n use super::caching_codemap_view::CachingCodemapView;\n+use super::hasher::IchHasher;\n \n const IGNORED_ATTRIBUTES: &'static [&'static str] = &[\n     \"cfg\",\n@@ -48,15 +48,15 @@ const IGNORED_ATTRIBUTES: &'static [&'static str] = &[\n \n pub struct StrictVersionHashVisitor<'a, 'hash: 'a, 'tcx: 'hash> {\n     pub tcx: TyCtxt<'hash, 'tcx, 'tcx>,\n-    pub st: &'a mut DefaultHasher,\n+    pub st: &'a mut IchHasher,\n     // collect a deterministic hash of def-ids that we have seen\n     def_path_hashes: &'a mut DefPathHashes<'hash, 'tcx>,\n     hash_spans: bool,\n     codemap: &'a mut CachingCodemapView<'tcx>,\n }\n \n impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n-    pub fn new(st: &'a mut DefaultHasher,\n+    pub fn new(st: &'a mut IchHasher,\n                tcx: TyCtxt<'hash, 'tcx, 'tcx>,\n                def_path_hashes: &'a mut DefPathHashes<'hash, 'tcx>,\n                codemap: &'a mut CachingCodemapView<'tcx>,"}, {"sha": "2d79987823f2036c1c944fdd412c6e22b9a39b13", "filename": "src/test/incremental/hashes/struct_defs.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/091b5471226a5dd8049ba498134daac03376c4d5/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091b5471226a5dd8049ba498134daac03376c4d5/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs?ref=091b5471226a5dd8049ba498134daac03376c4d5", "patch": "@@ -236,3 +236,74 @@ struct Visibility;\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub struct Visibility;\n+\n+\n+\n+\n+struct ReferencedType1;\n+struct ReferencedType2;\n+\n+// Tuple Struct Change Field Type Indirectly -----------------------------------\n+mod tuple_struct_change_field_type_indirectly {\n+    #[cfg(cfail1)]\n+    use super::ReferencedType1 as FieldType;\n+    #[cfg(not(cfail1))]\n+    use super::ReferencedType2 as FieldType;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    struct TupleStruct(FieldType);\n+}\n+\n+\n+// Record Struct Change Field Type Indirectly -----------------------------------\n+mod record_struct_change_field_type_indirectly {\n+    #[cfg(cfail1)]\n+    use super::ReferencedType1 as FieldType;\n+    #[cfg(not(cfail1))]\n+    use super::ReferencedType2 as FieldType;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    struct RecordStruct {\n+        _x: FieldType\n+    }\n+}\n+\n+\n+\n+\n+trait ReferencedTrait1 {}\n+trait ReferencedTrait2 {}\n+\n+// Change Trait Bound Indirectly -----------------------------------------------\n+mod change_trait_bound_indirectly {\n+    #[cfg(cfail1)]\n+    use super::ReferencedTrait1 as Trait;\n+    #[cfg(not(cfail1))]\n+    use super::ReferencedTrait2 as Trait;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    struct Struct<T: Trait>(T);\n+}\n+\n+// Change Trait Bound Indirectly In Where Clause -------------------------------\n+mod change_trait_bound_indirectly_in_where_clause {\n+    #[cfg(cfail1)]\n+    use super::ReferencedTrait1 as Trait;\n+    #[cfg(not(cfail1))]\n+    use super::ReferencedTrait2 as Trait;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    struct Struct<T>(T) where T : Trait;\n+}"}]}