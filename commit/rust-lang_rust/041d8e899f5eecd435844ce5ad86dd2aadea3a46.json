{"sha": "041d8e899f5eecd435844ce5ad86dd2aadea3a46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MWQ4ZTg5OWY1ZWVjZDQzNTg0NGNlNWFkODZkZDJhYWRlYTNhNDY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-22T20:46:47Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-24T02:31:54Z"}, "message": "Allow metadata to be not compressed", "tree": {"sha": "504863df84ee95d56d8b9441b247f6510fbaa045", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/504863df84ee95d56d8b9441b247f6510fbaa045"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/041d8e899f5eecd435844ce5ad86dd2aadea3a46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/041d8e899f5eecd435844ce5ad86dd2aadea3a46", "html_url": "https://github.com/rust-lang/rust/commit/041d8e899f5eecd435844ce5ad86dd2aadea3a46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/041d8e899f5eecd435844ce5ad86dd2aadea3a46/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9feaf1d0233b3052b2110320a5a2b433d690965c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9feaf1d0233b3052b2110320a5a2b433d690965c", "html_url": "https://github.com/rust-lang/rust/commit/9feaf1d0233b3052b2110320a5a2b433d690965c"}], "stats": {"total": 63, "additions": 51, "deletions": 12}, "files": [{"sha": "fb0bb6ff379116ea8bd70dc81ddf2c80d89923d6", "filename": "Makefile.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/041d8e899f5eecd435844ce5ad86dd2aadea3a46/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/041d8e899f5eecd435844ce5ad86dd2aadea3a46/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=041d8e899f5eecd435844ce5ad86dd2aadea3a46", "patch": "@@ -107,6 +107,12 @@ else\n   CFG_GCCISH_CFLAGS += -DRUST_NDEBUG\n endif\n \n+ifndef CFG_ENABLE_COMPRESS_METADATA\n+  # XXX: After snapshots extend this to all stages\n+  RUSTFLAGS_STAGE1 += --no-compress-metadata\n+  RUSTFLAGS_STAGE2 += --no-compress-metadata\n+endif\n+\n ifdef SAVE_TEMPS\n   CFG_RUSTC_FLAGS += --save-temps\n endif"}, {"sha": "8a7a2bae4eaa8d1841d4d02a154db73e7ad4090b", "filename": "configure", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/041d8e899f5eecd435844ce5ad86dd2aadea3a46/configure", "raw_url": "https://github.com/rust-lang/rust/raw/041d8e899f5eecd435844ce5ad86dd2aadea3a46/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=041d8e899f5eecd435844ce5ad86dd2aadea3a46", "patch": "@@ -381,7 +381,9 @@ opt mingw-cross 0 \"cross-compile for win32 using mingw\"\n opt clang 0 \"prefer clang to gcc for building the runtime\"\n opt ccache 0 \"invoke gcc/clang via ccache to reuse object files between builds\"\n opt local-rust 0 \"use an installed rustc rather than downloading a snapshot\"\n-opt pax-flags 0 \"apply PaX flags to rustc binaries (required for GRSecurity/PaX-patched kernels)\"\n+opt pax-flags 0 \"apply PaX flags to rustc binaries (required for GRSecurity/PaX-patched\n+ kernels)\"\n+opt compress-metadata 0 \"compress crate metadata\"\n valopt prefix \"/usr/local\" \"set installation prefix\"\n valopt local-rust-root \"/usr/local\" \"set prefix for local rust binary\"\n valopt llvm-root \"\" \"set LLVM root\""}, {"sha": "bba818c7c9d3c3d50da2c327f4a382b4d221d3f4", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/041d8e899f5eecd435844ce5ad86dd2aadea3a46/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/041d8e899f5eecd435844ce5ad86dd2aadea3a46/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=041d8e899f5eecd435844ce5ad86dd2aadea3a46", "patch": "@@ -718,6 +718,8 @@ pub fn build_session_options(binary: @str,\n     let android_cross_path = getopts::opt_maybe_str(\n         matches, \"android-cross-path\");\n \n+    let no_compress_metadata = opt_present(matches, \"no-compress-metadata\");\n+\n     let custom_passes = match getopts::opt_maybe_str(matches, \"passes\") {\n         None => ~[],\n         Some(s) => {\n@@ -752,7 +754,8 @@ pub fn build_session_options(binary: @str,\n         parse_only: parse_only,\n         no_trans: no_trans,\n         debugging_opts: debugging_opts,\n-        android_cross_path: android_cross_path\n+        android_cross_path: android_cross_path,\n+        no_compress_metadata: no_compress_metadata\n     };\n     return sopts;\n }\n@@ -870,6 +873,8 @@ pub fn optgroups() -> ~[getopts::groups::OptGroup] {\n                           for details)\", \"FEATURE\"),\n   optopt(\"\", \"android-cross-path\",\n          \"The path to the Android NDK\", \"PATH\"),\n+  optflag(\"\", \"no-compress-metadata\",\n+          \"Do not compress crate metadata (make builds a little faster)\"),\n   optflagopt(\"W\", \"warn\",\n                         \"Set lint warnings\", \"OPT\"),\n   optmulti(\"A\", \"allow\","}, {"sha": "e70ac52a0f59d9c972565f41dcb09b4d2f848be2", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/041d8e899f5eecd435844ce5ad86dd2aadea3a46/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/041d8e899f5eecd435844ce5ad86dd2aadea3a46/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=041d8e899f5eecd435844ce5ad86dd2aadea3a46", "patch": "@@ -166,6 +166,7 @@ pub struct options {\n     no_trans: bool,\n     debugging_opts: uint,\n     android_cross_path: Option<~str>,\n+    no_compress_metadata: bool\n }\n \n pub struct crate_metadata {\n@@ -350,6 +351,7 @@ pub fn basic_options() -> @options {\n         no_trans: false,\n         debugging_opts: 0u,\n         android_cross_path: None,\n+        no_compress_metadata: false\n     }\n }\n "}, {"sha": "3ada5592f75376ed4ddf0c7d8f7977dba2f8a4f1", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/041d8e899f5eecd435844ce5ad86dd2aadea3a46/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/041d8e899f5eecd435844ce5ad86dd2aadea3a46/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=041d8e899f5eecd435844ce5ad86dd2aadea3a46", "patch": "@@ -64,6 +64,7 @@ pub struct EncodeParams<'self> {\n     cstore: @mut cstore::CStore,\n     encode_inlined_item: encode_inlined_item<'self>,\n     reachable: @mut HashSet<ast::NodeId>,\n+    compress: bool\n }\n \n struct Stats {\n@@ -1567,7 +1568,7 @@ pub static metadata_encoding_version : &'static [u8] =\n       0x75, //'u' as u8,\n       0x73, //'s' as u8,\n       0x74, //'t' as u8,\n-      0, 0, 0, 1 ];\n+      0, 0, 0, 2 ];\n \n pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n     let wr = @io::BytesWriter::new();\n@@ -1594,6 +1595,7 @@ pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n         encode_inlined_item,\n         link_meta,\n         reachable,\n+        compress,\n         _\n     } = parms;\n     let type_abbrevs = @mut HashMap::new();\n@@ -1679,9 +1681,17 @@ pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n     wr.write(&[0u8, 0u8, 0u8, 0u8]);\n \n     let writer_bytes: &mut ~[u8] = wr.bytes;\n-\n-    metadata_encoding_version.to_owned() +\n-        flate::deflate_bytes(*writer_bytes)\n+    let compression_flag = if compress { [1u8] } else { [0u8] };\n+\n+    if compress {\n+        metadata_encoding_version.to_owned() +\n+            compression_flag.to_owned() +\n+            flate::deflate_bytes(*writer_bytes)\n+    } else {\n+        metadata_encoding_version.to_owned() +\n+            compression_flag.to_owned() +\n+            *writer_bytes\n+    }\n }\n \n // Get the encoded string for a type"}, {"sha": "f374ce2c19a1054decbbe73f548ee03144ccf68a", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/041d8e899f5eecd435844ce5ad86dd2aadea3a46/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/041d8e899f5eecd435844ce5ad86dd2aadea3a46/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=041d8e899f5eecd435844ce5ad86dd2aadea3a46", "patch": "@@ -228,13 +228,26 @@ fn get_metadata_section(os: os,\n                 }\n                 if !version_ok { return None; }\n \n-                let cvbuf1 = ptr::offset(cvbuf, vlen as int);\n-                debug!(\"inflating %u bytes of compressed metadata\",\n-                       csz - vlen);\n-                do vec::raw::buf_as_slice(cvbuf1, csz-vlen) |bytes| {\n-                    let inflated = flate::inflate_bytes(bytes);\n-                    found = Some(@(inflated));\n+                assert!(csz >= vlen + 1);\n+\n+                let must_decompress = *ptr::offset(cvbuf, vlen as int) == 1;\n+                let cvbuf1 = ptr::offset(cvbuf, vlen as int + 1);\n+\n+                do vec::raw::buf_as_slice(cvbuf1, csz-vlen-1) |bytes| {\n+                    if must_decompress {\n+                        debug!(\"inflating %u bytes of compressed metadata\",\n+                               csz - vlen);\n+                        let inflated = flate::inflate_bytes(bytes);\n+                        found = Some(@(inflated));\n+                    } else {\n+                        // Copy the byte vector as fast as possible\n+                        let mut buf = vec::with_capacity(bytes.len());\n+                        vec::raw::set_len(&mut buf, bytes.len());\n+                        vec::raw::copy_memory(buf, bytes, bytes.len());\n+                        found = Some(@buf)\n+                    }\n                 }\n+\n                 if found != None {\n                     return found;\n                 }"}, {"sha": "85db79ca54bf94676d8719f1ab4ba7a628d7c936", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/041d8e899f5eecd435844ce5ad86dd2aadea3a46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/041d8e899f5eecd435844ce5ad86dd2aadea3a46/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=041d8e899f5eecd435844ce5ad86dd2aadea3a46", "patch": "@@ -2907,6 +2907,7 @@ pub fn crate_ctxt_to_encode_parms<'r>(cx: &'r CrateContext, ie: encoder::encode_\n             cstore: cx.sess.cstore,\n             encode_inlined_item: ie,\n             reachable: cx.reachable,\n+            compress: !cx.sess.opts.no_compress_metadata\n         }\n }\n "}]}