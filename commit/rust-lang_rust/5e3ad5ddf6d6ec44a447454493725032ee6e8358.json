{"sha": "5e3ad5ddf6d6ec44a447454493725032ee6e8358", "node_id": "C_kwDOAAsO6NoAKDVlM2FkNWRkZjZkNmVjNDRhNDQ3NDU0NDkzNzI1MDMyZWU2ZTgzNTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-24T20:44:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-24T20:44:33Z"}, "message": "Auto merge of #13592 - MihailMihov:trait_impl_assist, r=Veykril\n\nAdd assist to generate trait impl's\n\nresolves #13553\n\nThis pull request adds a `generate_trait_impl` assist, which generates trait impl's for a type. It is almost the same as the one to generate impl's and I also reduced the trigger range to only outside the `RecordFieldList`. Also moved all the tests into separate test functions. A few of the old tests seemed redundant, so I didn't port them.", "tree": {"sha": "ca5b2cb8ec619811501858432f365b6d1a56703e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca5b2cb8ec619811501858432f365b6d1a56703e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e3ad5ddf6d6ec44a447454493725032ee6e8358", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e3ad5ddf6d6ec44a447454493725032ee6e8358", "html_url": "https://github.com/rust-lang/rust/commit/5e3ad5ddf6d6ec44a447454493725032ee6e8358", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e3ad5ddf6d6ec44a447454493725032ee6e8358/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbc0f7a771287170298d882093b3c95e91ac01d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc0f7a771287170298d882093b3c95e91ac01d5", "html_url": "https://github.com/rust-lang/rust/commit/fbc0f7a771287170298d882093b3c95e91ac01d5"}, {"sha": "469f620b064d2935c741222927dc955da395532b", "url": "https://api.github.com/repos/rust-lang/rust/commits/469f620b064d2935c741222927dc955da395532b", "html_url": "https://github.com/rust-lang/rust/commit/469f620b064d2935c741222927dc955da395532b"}], "stats": {"total": 437, "additions": 357, "deletions": 80}, "files": [{"sha": "690c97e26d8c6ad9206207a781166cb02c35fdac", "filename": "crates/ide-assists/src/handlers/generate_impl.rs", "status": "modified", "additions": 333, "deletions": 78, "changes": 411, "blob_url": "https://github.com/rust-lang/rust/blob/5e3ad5ddf6d6ec44a447454493725032ee6e8358/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3ad5ddf6d6ec44a447454493725032ee6e8358/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs?ref=5e3ad5ddf6d6ec44a447454493725032ee6e8358", "patch": "@@ -1,14 +1,17 @@\n use syntax::ast::{self, AstNode, HasName};\n \n-use crate::{utils::generate_impl_text, AssistContext, AssistId, AssistKind, Assists};\n+use crate::{\n+    utils::{generate_impl_text, generate_trait_impl_text},\n+    AssistContext, AssistId, AssistKind, Assists,\n+};\n \n // Assist: generate_impl\n //\n // Adds a new inherent impl for a type.\n //\n // ```\n-// struct Ctx<T: Clone> {\n-//     data: T,$0\n+// struct Ctx$0<T: Clone> {\n+//     data: T,\n // }\n // ```\n // ->\n@@ -26,6 +29,10 @@ pub(crate) fn generate_impl(acc: &mut Assists, ctx: &AssistContext<'_>) -> Optio\n     let name = nominal.name()?;\n     let target = nominal.syntax().text_range();\n \n+    if let Some(_) = ctx.find_node_at_offset::<ast::RecordFieldList>() {\n+        return None;\n+    }\n+\n     acc.add(\n         AssistId(\"generate_impl\", AssistKind::Generate),\n         format!(\"Generate impl for `{name}`\"),\n@@ -46,145 +53,393 @@ pub(crate) fn generate_impl(acc: &mut Assists, ctx: &AssistContext<'_>) -> Optio\n     )\n }\n \n+// Assist: generate_trait_impl\n+//\n+// Adds a new trait impl for a type.\n+//\n+// ```\n+// struct $0Ctx<T: Clone> {\n+//     data: T,\n+// }\n+// ```\n+// ->\n+// ```\n+// struct Ctx<T: Clone> {\n+//     data: T,\n+// }\n+//\n+// impl<T: Clone> $0 for Ctx<T> {\n+//\n+// }\n+// ```\n+pub(crate) fn generate_trait_impl(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+    let nominal = ctx.find_node_at_offset::<ast::Adt>()?;\n+    let name = nominal.name()?;\n+    let target = nominal.syntax().text_range();\n+\n+    if let Some(_) = ctx.find_node_at_offset::<ast::RecordFieldList>() {\n+        return None;\n+    }\n+\n+    acc.add(\n+        AssistId(\"generate_trait_impl\", AssistKind::Generate),\n+        format!(\"Generate trait impl for `{name}`\"),\n+        target,\n+        |edit| {\n+            let start_offset = nominal.syntax().text_range().end();\n+            match ctx.config.snippet_cap {\n+                Some(cap) => {\n+                    let snippet = generate_trait_impl_text(&nominal, \"$0\", \"\");\n+                    edit.insert_snippet(cap, start_offset, snippet);\n+                }\n+                None => {\n+                    let text = generate_trait_impl_text(&nominal, \"\", \"\");\n+                    edit.insert(start_offset, text);\n+                }\n+            }\n+        },\n+    )\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_target};\n \n     use super::*;\n \n-    // FIXME: break up into separate test fns\n     #[test]\n     fn test_add_impl() {\n         check_assist(\n             generate_impl,\n-            \"struct Foo {$0}\\n\",\n-            \"struct Foo {}\\n\\nimpl Foo {\\n    $0\\n}\\n\",\n+            r#\"\n+                struct Foo$0 {}\n+            \"#,\n+            r#\"\n+                struct Foo {}\n+\n+                impl Foo {\n+                    $0\n+                }\n+            \"#,\n         );\n+    }\n+\n+    #[test]\n+    fn test_add_impl_with_generics() {\n         check_assist(\n             generate_impl,\n-            \"struct Foo<T: Clone> {$0}\",\n-            \"struct Foo<T: Clone> {}\\n\\nimpl<T: Clone> Foo<T> {\\n    $0\\n}\",\n+            r#\"\n+                struct Foo$0<T: Clone> {}\n+            \"#,\n+            r#\"\n+                struct Foo<T: Clone> {}\n+\n+                impl<T: Clone> Foo<T> {\n+                    $0\n+                }\n+            \"#,\n         );\n+    }\n+\n+    #[test]\n+    fn test_add_impl_with_generics_and_lifetime_parameters() {\n         check_assist(\n             generate_impl,\n-            \"struct Foo<'a, T: Foo<'a>> {$0}\",\n-            \"struct Foo<'a, T: Foo<'a>> {}\\n\\nimpl<'a, T: Foo<'a>> Foo<'a, T> {\\n    $0\\n}\",\n+            r#\"\n+                struct Foo<'a, T: Foo<'a>>$0 {}\n+            \"#,\n+            r#\"\n+                struct Foo<'a, T: Foo<'a>> {}\n+\n+                impl<'a, T: Foo<'a>> Foo<'a, T> {\n+                    $0\n+                }\n+            \"#,\n         );\n+    }\n+\n+    #[test]\n+    fn test_add_impl_with_attributes() {\n         check_assist(\n             generate_impl,\n             r#\"\n-            struct MyOwnArray<T, const S: usize> {}$0\"#,\n+                #[cfg(feature = \"foo\")]\n+                struct Foo<'a, T: Foo$0<'a>> {}\n+            \"#,\n             r#\"\n-            struct MyOwnArray<T, const S: usize> {}\n+                #[cfg(feature = \"foo\")]\n+                struct Foo<'a, T: Foo<'a>> {}\n \n-            impl<T, const S: usize> MyOwnArray<T, S> {\n-                $0\n-            }\"#,\n+                #[cfg(feature = \"foo\")]\n+                impl<'a, T: Foo<'a>> Foo<'a, T> {\n+                    $0\n+                }\n+            \"#,\n         );\n+    }\n+\n+    #[test]\n+    fn test_add_impl_with_default_generic() {\n         check_assist(\n             generate_impl,\n             r#\"\n-            #[cfg(feature = \"foo\")]\n-            struct Foo<'a, T: Foo<'a>> {$0}\"#,\n+                struct Defaulted$0<T = i32> {}\n+            \"#,\n             r#\"\n-            #[cfg(feature = \"foo\")]\n-            struct Foo<'a, T: Foo<'a>> {}\n+                struct Defaulted<T = i32> {}\n \n-            #[cfg(feature = \"foo\")]\n-            impl<'a, T: Foo<'a>> Foo<'a, T> {\n-                $0\n-            }\"#,\n+                impl<T> Defaulted<T> {\n+                    $0\n+                }\n+            \"#,\n         );\n+    }\n \n+    #[test]\n+    fn test_add_impl_with_constrained_default_generic() {\n         check_assist(\n             generate_impl,\n             r#\"\n-            #[cfg(not(feature = \"foo\"))]\n-            struct Foo<'a, T: Foo<'a>> {$0}\"#,\n+                struct Defaulted$0<'a, 'b: 'a, T: Debug + Clone + 'a + 'b = String, const S: usize> {}\n+            \"#,\n             r#\"\n-            #[cfg(not(feature = \"foo\"))]\n-            struct Foo<'a, T: Foo<'a>> {}\n+                struct Defaulted<'a, 'b: 'a, T: Debug + Clone + 'a + 'b = String, const S: usize> {}\n \n-            #[cfg(not(feature = \"foo\"))]\n-            impl<'a, T: Foo<'a>> Foo<'a, T> {\n-                $0\n-            }\"#,\n+                impl<'a, 'b: 'a, T: Debug + Clone + 'a + 'b, const S: usize> Defaulted<'a, 'b, T, S> {\n+                    $0\n+                }\n+            \"#,\n         );\n+    }\n \n+    #[test]\n+    fn test_add_impl_with_const_defaulted_generic() {\n         check_assist(\n             generate_impl,\n             r#\"\n-            struct Defaulted<T = i32> {}$0\"#,\n+                struct Defaulted$0<const N: i32 = 0> {}\n+            \"#,\n             r#\"\n-            struct Defaulted<T = i32> {}\n+                struct Defaulted<const N: i32 = 0> {}\n \n-            impl<T> Defaulted<T> {\n-                $0\n-            }\"#,\n+                impl<const N: i32> Defaulted<N> {\n+                    $0\n+                }\n+            \"#,\n         );\n+    }\n \n+    #[test]\n+    fn test_add_impl_with_trait_constraint() {\n         check_assist(\n             generate_impl,\n             r#\"\n-            struct Defaulted<'a, 'b: 'a, T: Debug + Clone + 'a + 'b = String, const S: usize> {}$0\"#,\n+                pub trait Trait {}\n+                struct Struct$0<T>\n+                where\n+                    T: Trait,\n+                {\n+                    inner: T,\n+                }\n+            \"#,\n             r#\"\n-            struct Defaulted<'a, 'b: 'a, T: Debug + Clone + 'a + 'b = String, const S: usize> {}\n+                pub trait Trait {}\n+                struct Struct<T>\n+                where\n+                    T: Trait,\n+                {\n+                    inner: T,\n+                }\n \n-            impl<'a, 'b: 'a, T: Debug + Clone + 'a + 'b, const S: usize> Defaulted<'a, 'b, T, S> {\n-                $0\n-            }\"#,\n+                impl<T> Struct<T>\n+                where\n+                    T: Trait,\n+                {\n+                    $0\n+                }\n+            \"#,\n         );\n+    }\n \n-        check_assist(\n+    #[test]\n+    fn add_impl_target() {\n+        check_assist_target(\n             generate_impl,\n             r#\"\n-            struct Defaulted<const N: i32 = 0> {}$0\"#,\n+                struct SomeThingIrrelevant;\n+                /// Has a lifetime parameter\n+                struct Foo$0<'a, T: Foo<'a>> {}\n+                struct EvenMoreIrrelevant;\n+            \"#,\n+            \"/// Has a lifetime parameter\\nstruct Foo<'a, T: Foo<'a>> {}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_trait_impl() {\n+        check_assist(\n+            generate_trait_impl,\n+            r#\"\n+                struct Foo$0 {}\n+            \"#,\n             r#\"\n-            struct Defaulted<const N: i32 = 0> {}\n+                struct Foo {}\n \n-            impl<const N: i32> Defaulted<N> {\n-                $0\n-            }\"#,\n+                impl $0 for Foo {\n+\n+                }\n+            \"#,\n         );\n+    }\n \n+    #[test]\n+    fn test_add_trait_impl_with_generics() {\n         check_assist(\n-            generate_impl,\n-            r#\"pub trait Trait {}\n-struct Struct<T>$0\n-where\n-    T: Trait,\n-{\n-    inner: T,\n-}\"#,\n-            r#\"pub trait Trait {}\n-struct Struct<T>\n-where\n-    T: Trait,\n-{\n-    inner: T,\n-}\n+            generate_trait_impl,\n+            r#\"\n+                struct Foo$0<T: Clone> {}\n+            \"#,\n+            r#\"\n+                struct Foo<T: Clone> {}\n \n-impl<T> Struct<T>\n-where\n-    T: Trait,\n-{\n-    $0\n-}\"#,\n+                impl<T: Clone> $0 for Foo<T> {\n+\n+                }\n+            \"#,\n         );\n     }\n \n     #[test]\n-    fn add_impl_target() {\n+    fn test_add_trait_impl_with_generics_and_lifetime_parameters() {\n+        check_assist(\n+            generate_trait_impl,\n+            r#\"\n+                struct Foo<'a, T: Foo<'a>>$0 {}\n+            \"#,\n+            r#\"\n+                struct Foo<'a, T: Foo<'a>> {}\n+\n+                impl<'a, T: Foo<'a>> $0 for Foo<'a, T> {\n+\n+                }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_trait_impl_with_attributes() {\n+        check_assist(\n+            generate_trait_impl,\n+            r#\"\n+                #[cfg(feature = \"foo\")]\n+                struct Foo<'a, T: Foo$0<'a>> {}\n+            \"#,\n+            r#\"\n+                #[cfg(feature = \"foo\")]\n+                struct Foo<'a, T: Foo<'a>> {}\n+\n+                #[cfg(feature = \"foo\")]\n+                impl<'a, T: Foo<'a>> $0 for Foo<'a, T> {\n+\n+                }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_trait_impl_with_default_generic() {\n+        check_assist(\n+            generate_trait_impl,\n+            r#\"\n+                struct Defaulted$0<T = i32> {}\n+            \"#,\n+            r#\"\n+                struct Defaulted<T = i32> {}\n+\n+                impl<T> $0 for Defaulted<T> {\n+\n+                }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_trait_impl_with_constrained_default_generic() {\n+        check_assist(\n+            generate_trait_impl,\n+            r#\"\n+                struct Defaulted$0<'a, 'b: 'a, T: Debug + Clone + 'a + 'b = String, const S: usize> {}\n+            \"#,\n+            r#\"\n+                struct Defaulted<'a, 'b: 'a, T: Debug + Clone + 'a + 'b = String, const S: usize> {}\n+\n+                impl<'a, 'b: 'a, T: Debug + Clone + 'a + 'b, const S: usize> $0 for Defaulted<'a, 'b, T, S> {\n+\n+                }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_trait_impl_with_const_defaulted_generic() {\n+        check_assist(\n+            generate_trait_impl,\n+            r#\"\n+                struct Defaulted$0<const N: i32 = 0> {}\n+            \"#,\n+            r#\"\n+                struct Defaulted<const N: i32 = 0> {}\n+\n+                impl<const N: i32> $0 for Defaulted<N> {\n+\n+                }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_trait_impl_with_trait_constraint() {\n+        check_assist(\n+            generate_trait_impl,\n+            r#\"\n+                pub trait Trait {}\n+                struct Struct$0<T>\n+                where\n+                    T: Trait,\n+                {\n+                    inner: T,\n+                }\n+            \"#,\n+            r#\"\n+                pub trait Trait {}\n+                struct Struct<T>\n+                where\n+                    T: Trait,\n+                {\n+                    inner: T,\n+                }\n+\n+                impl<T> $0 for Struct<T>\n+                where\n+                    T: Trait,\n+                {\n+\n+                }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_trait_impl_target() {\n         check_assist_target(\n-            generate_impl,\n-            \"\n-struct SomeThingIrrelevant;\n-/// Has a lifetime parameter\n-struct Foo<'a, T: Foo<'a>> {$0}\n-struct EvenMoreIrrelevant;\n-\",\n-            \"/// Has a lifetime parameter\n-struct Foo<'a, T: Foo<'a>> {}\",\n+            generate_trait_impl,\n+            r#\"\n+                struct SomeThingIrrelevant;\n+                /// Has a lifetime parameter\n+                struct Foo$0<'a, T: Foo<'a>> {}\n+                struct EvenMoreIrrelevant;\n+            \"#,\n+            \"/// Has a lifetime parameter\\nstruct Foo<'a, T: Foo<'a>> {}\",\n         );\n     }\n }"}, {"sha": "b12f99cc53298e9524c3f5c575a7cf7c031dc174", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e3ad5ddf6d6ec44a447454493725032ee6e8358/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3ad5ddf6d6ec44a447454493725032ee6e8358/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=5e3ad5ddf6d6ec44a447454493725032ee6e8358", "patch": "@@ -247,6 +247,7 @@ mod handlers {\n             generate_from_impl_for_enum::generate_from_impl_for_enum,\n             generate_function::generate_function,\n             generate_impl::generate_impl,\n+            generate_impl::generate_trait_impl,\n             generate_is_empty_from_len::generate_is_empty_from_len,\n             generate_new::generate_new,\n             inline_call::inline_call,"}, {"sha": "d797f077672da5d35c3a9139f5675a207575db0d", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5e3ad5ddf6d6ec44a447454493725032ee6e8358/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3ad5ddf6d6ec44a447454493725032ee6e8358/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=5e3ad5ddf6d6ec44a447454493725032ee6e8358", "patch": "@@ -1249,8 +1249,8 @@ fn doctest_generate_impl() {\n     check_doc_test(\n         \"generate_impl\",\n         r#####\"\n-struct Ctx<T: Clone> {\n-    data: T,$0\n+struct Ctx$0<T: Clone> {\n+    data: T,\n }\n \"#####,\n         r#####\"\n@@ -1341,6 +1341,27 @@ impl Person {\n     )\n }\n \n+#[test]\n+fn doctest_generate_trait_impl() {\n+    check_doc_test(\n+        \"generate_trait_impl\",\n+        r#####\"\n+struct $0Ctx<T: Clone> {\n+    data: T,\n+}\n+\"#####,\n+        r#####\"\n+struct Ctx<T: Clone> {\n+    data: T,\n+}\n+\n+impl<T: Clone> $0 for Ctx<T> {\n+\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_inline_call() {\n     check_doc_test("}]}