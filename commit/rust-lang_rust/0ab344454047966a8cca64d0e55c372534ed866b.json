{"sha": "0ab344454047966a8cca64d0e55c372534ed866b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYjM0NDQ1NDA0Nzk2NmE4Y2NhNjRkMGU1NWMzNzI1MzRlZDg2NmI=", "commit": {"author": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-16T13:02:31Z"}, "committer": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-30T17:10:37Z"}, "message": "rustc_codegen_llvm: use safe references for OperandBundleDef.", "tree": {"sha": "53c05d4bbd184b317bb42d81e775ded2d3aa1de9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53c05d4bbd184b317bb42d81e775ded2d3aa1de9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ab344454047966a8cca64d0e55c372534ed866b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ab344454047966a8cca64d0e55c372534ed866b", "html_url": "https://github.com/rust-lang/rust/commit/0ab344454047966a8cca64d0e55c372534ed866b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ab344454047966a8cca64d0e55c372534ed866b/comments", "author": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92af9694b9d70a78d0fbd0d8d7d421265a244a3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/92af9694b9d70a78d0fbd0d8d7d421265a244a3c", "html_url": "https://github.com/rust-lang/rust/commit/92af9694b9d70a78d0fbd0d8d7d421265a244a3c"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "2307ad49b5b49b17f4960a3bb9b913aadf096611", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0ab344454047966a8cca64d0e55c372534ed866b/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab344454047966a8cca64d0e55c372534ed866b/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=0ab344454047966a8cca64d0e55c372534ed866b", "patch": "@@ -23,7 +23,6 @@ use std::borrow::Cow;\n use std::ffi::CString;\n use std::ops::Range;\n use std::ptr;\n-use std::ptr::NonNull;\n \n // All Builders must have an llfn associated with them\n #[must_use]\n@@ -176,15 +175,15 @@ impl Builder<'a, 'll, 'tcx> {\n                   args: &[&'ll Value],\n                   then: &'ll BasicBlock,\n                   catch: &'ll BasicBlock,\n-                  bundle: Option<&OperandBundleDef>) -> &'ll Value {\n+                  bundle: Option<&OperandBundleDef<'ll>>) -> &'ll Value {\n         self.count_insn(\"invoke\");\n \n         debug!(\"Invoke {:?} with args ({:?})\",\n                llfn,\n                args);\n \n         let args = self.check_call(\"invoke\", llfn, args);\n-        let bundle = bundle.as_ref().and_then(|b| NonNull::new(b.raw()));\n+        let bundle = bundle.map(|b| &*b.raw);\n \n         unsafe {\n             llvm::LLVMRustBuildInvoke(self.llbuilder,\n@@ -724,15 +723,15 @@ impl Builder<'a, 'll, 'tcx> {\n     }\n \n     pub fn call(&self, llfn: &'ll Value, args: &[&'ll Value],\n-                bundle: Option<&OperandBundleDef>) -> &'ll Value {\n+                bundle: Option<&OperandBundleDef<'ll>>) -> &'ll Value {\n         self.count_insn(\"call\");\n \n         debug!(\"Call {:?} with args ({:?})\",\n                llfn,\n                args);\n \n         let args = self.check_call(\"call\", llfn, args);\n-        let bundle = bundle.as_ref().and_then(|b| NonNull::new(b.raw()));\n+        let bundle = bundle.map(|b| &*b.raw);\n \n         unsafe {\n             llvm::LLVMRustBuildCall(self.llbuilder, llfn, args.as_ptr(),"}, {"sha": "2d0ef7b3eef32b4bf2d728af4d72b8eac1fa42e8", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ab344454047966a8cca64d0e55c372534ed866b/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab344454047966a8cca64d0e55c372534ed866b/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=0ab344454047966a8cca64d0e55c372534ed866b", "patch": "@@ -92,7 +92,7 @@ pub fn type_is_freeze<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bo\n /// the `OperandBundleDef` value created for MSVC landing pads.\n pub struct Funclet<'ll> {\n     cleanuppad: &'ll Value,\n-    operand: OperandBundleDef,\n+    operand: OperandBundleDef<'ll>,\n }\n \n impl Funclet<'ll> {\n@@ -107,7 +107,7 @@ impl Funclet<'ll> {\n         self.cleanuppad\n     }\n \n-    pub fn bundle(&self) -> &OperandBundleDef {\n+    pub fn bundle(&self) -> &OperandBundleDef<'ll> {\n         &self.operand\n     }\n }"}, {"sha": "02a7bc045d6fcb40a07afcebfe7dbe52c0eaa9fa", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0ab344454047966a8cca64d0e55c372534ed866b/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab344454047966a8cca64d0e55c372534ed866b/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=0ab344454047966a8cca64d0e55c372534ed866b", "patch": "@@ -24,6 +24,7 @@ use super::debuginfo::{\n use libc::{c_uint, c_int, size_t, c_char};\n use libc::{c_ulonglong, c_void};\n \n+use std::marker::PhantomData;\n use std::ptr::NonNull;\n \n use super::RustString;\n@@ -381,6 +382,12 @@ pub enum ThreadLocalMode {\n   LocalExec\n }\n \n+extern { type Opaque; }\n+struct InvariantOpaque<'a> {\n+    _marker: PhantomData<&'a mut &'a ()>,\n+    _opaque: Opaque,\n+}\n+\n // Opaque pointer types\n extern { pub type Module; }\n extern { pub type Context; }\n@@ -408,8 +415,7 @@ extern { pub type DiagnosticInfo; }\n extern { pub type SMDiagnostic; }\n extern { pub type RustArchiveMember; }\n pub type RustArchiveMemberRef = *mut RustArchiveMember;\n-extern { pub type OperandBundleDef; }\n-pub type OperandBundleDefRef = *mut OperandBundleDef;\n+pub struct OperandBundleDef<'a>(InvariantOpaque<'a>);\n extern { pub type Linker; }\n pub type LinkerRef = *mut Linker;\n \n@@ -706,7 +712,7 @@ extern \"C\" {\n                                NumArgs: c_uint,\n                                Then: &'a BasicBlock,\n                                Catch: &'a BasicBlock,\n-                               Bundle: Option<NonNull<OperandBundleDef>>,\n+                               Bundle: Option<&OperandBundleDef<'a>>,\n                                Name: *const c_char)\n                                -> &'a Value;\n     pub fn LLVMBuildLandingPad(B: &'a Builder,\n@@ -975,7 +981,7 @@ extern \"C\" {\n                              Fn: &'a Value,\n                              Args: *const &'a Value,\n                              NumArgs: c_uint,\n-                             Bundle: Option<NonNull<OperandBundleDef>>,\n+                             Bundle: Option<&OperandBundleDef<'a>>,\n                              Name: *const c_char)\n                              -> &'a Value;\n     pub fn LLVMBuildSelect(B: &'a Builder,\n@@ -1520,10 +1526,10 @@ extern \"C\" {\n     pub fn LLVMRustSetDataLayoutFromTargetMachine(M: &'a Module, TM: &'a TargetMachine);\n \n     pub fn LLVMRustBuildOperandBundleDef(Name: *const c_char,\n-                                         Inputs: *const &Value,\n+                                         Inputs: *const &'a Value,\n                                          NumInputs: c_uint)\n-                                         -> OperandBundleDefRef;\n-    pub fn LLVMRustFreeOperandBundleDef(Bundle: OperandBundleDefRef);\n+                                         -> &'a mut OperandBundleDef<'a>;\n+    pub fn LLVMRustFreeOperandBundleDef(Bundle: &'a mut OperandBundleDef<'a>);\n \n     pub fn LLVMRustPositionBuilderAtStart(B: &'a Builder, BB: &'a BasicBlock);\n "}, {"sha": "93dd98c62dc3edd28afd61561218f4cfe4aa51a2", "filename": "src/librustc_codegen_llvm/llvm/mod.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0ab344454047966a8cca64d0e55c372534ed866b/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab344454047966a8cca64d0e55c372534ed866b/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs?ref=0ab344454047966a8cca64d0e55c372534ed866b", "patch": "@@ -258,28 +258,24 @@ pub fn last_error() -> Option<String> {\n     }\n }\n \n-pub struct OperandBundleDef {\n-    inner: OperandBundleDefRef,\n+pub struct OperandBundleDef<'a> {\n+    pub raw: &'a mut ffi::OperandBundleDef<'a>,\n }\n \n-impl OperandBundleDef {\n-    pub fn new(name: &str, vals: &[&'a Value]) -> OperandBundleDef {\n+impl OperandBundleDef<'a> {\n+    pub fn new(name: &str, vals: &[&'a Value]) -> Self {\n         let name = CString::new(name).unwrap();\n         let def = unsafe {\n             LLVMRustBuildOperandBundleDef(name.as_ptr(), vals.as_ptr(), vals.len() as c_uint)\n         };\n-        OperandBundleDef { inner: def }\n-    }\n-\n-    pub fn raw(&self) -> OperandBundleDefRef {\n-        self.inner\n+        OperandBundleDef { raw: def }\n     }\n }\n \n-impl Drop for OperandBundleDef {\n+impl Drop for OperandBundleDef<'a> {\n     fn drop(&mut self) {\n         unsafe {\n-            LLVMRustFreeOperandBundleDef(self.inner);\n+            LLVMRustFreeOperandBundleDef(&mut *(self.raw as *mut _));\n         }\n     }\n }"}]}