{"sha": "104168a0f8ec9f218af84c315c0006c2d72450fe", "node_id": "C_kwDOAAsO6NoAKDEwNDE2OGEwZjhlYzlmMjE4YWY4NGMzMTVjMDAwNmMyZDcyNDUwZmU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-12T10:05:00Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-06T14:18:32Z"}, "message": "Generalize the Assume intrinsic statement to a general Intrinsic statement", "tree": {"sha": "897c1279aed9909dc080a272df8174cebb59f261", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/897c1279aed9909dc080a272df8174cebb59f261"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/104168a0f8ec9f218af84c315c0006c2d72450fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/104168a0f8ec9f218af84c315c0006c2d72450fe", "html_url": "https://github.com/rust-lang/rust/commit/104168a0f8ec9f218af84c315c0006c2d72450fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/104168a0f8ec9f218af84c315c0006c2d72450fe/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "088e03fe224e4e7adf3fe1c3d5365a699418b7d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/088e03fe224e4e7adf3fe1c3d5365a699418b7d9", "html_url": "https://github.com/rust-lang/rust/commit/088e03fe224e4e7adf3fe1c3d5365a699418b7d9"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "2aa11ac2eeaa653d1c0b2243afbf31e62effc467", "filename": "src/base.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/104168a0f8ec9f218af84c315c0006c2d72450fe/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104168a0f8ec9f218af84c315c0006c2d72450fe/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=104168a0f8ec9f218af84c315c0006c2d72450fe", "patch": "@@ -791,25 +791,34 @@ fn codegen_stmt<'tcx>(\n         | StatementKind::Nop\n         | StatementKind::FakeRead(..)\n         | StatementKind::Retag { .. }\n-        // We ignore `assume` intrinsics, they are only useful for optimizations\n-        | StatementKind::Assume(..)\n         | StatementKind::AscribeUserType(..) => {}\n \n         StatementKind::Coverage { .. } => fx.tcx.sess.fatal(\"-Zcoverage is unimplemented\"),\n-        StatementKind::CopyNonOverlapping(inner) => {\n-            let dst = codegen_operand(fx, &inner.dst);\n-            let pointee = dst\n-                .layout()\n-                .pointee_info_at(fx, rustc_target::abi::Size::ZERO)\n-                .expect(\"Expected pointer\");\n-            let dst = dst.load_scalar(fx);\n-            let src = codegen_operand(fx, &inner.src).load_scalar(fx);\n-            let count = codegen_operand(fx, &inner.count).load_scalar(fx);\n-            let elem_size: u64 = pointee.size.bytes();\n-            let bytes =\n-                if elem_size != 1 { fx.bcx.ins().imul_imm(count, elem_size as i64) } else { count };\n-            fx.bcx.call_memcpy(fx.target_config, dst, src, bytes);\n-        }\n+        StatementKind::Intrinsic(ref intrinsic) => match &**intrinsic {\n+            // We ignore `assume` intrinsics, they are only useful for optimizations\n+            NonDivergingIntrinsic::Assume(_) => {}\n+            NonDivergingIntrinsic::CopyNonOverlapping(mir::CopyNonOverlapping {\n+                src,\n+                dst,\n+                count,\n+            }) => {\n+                let dst = codegen_operand(fx, dst);\n+                let pointee = dst\n+                    .layout()\n+                    .pointee_info_at(fx, rustc_target::abi::Size::ZERO)\n+                    .expect(\"Expected pointer\");\n+                let dst = dst.load_scalar(fx);\n+                let src = codegen_operand(fx, src).load_scalar(fx);\n+                let count = codegen_operand(fx, count).load_scalar(fx);\n+                let elem_size: u64 = pointee.size.bytes();\n+                let bytes = if elem_size != 1 {\n+                    fx.bcx.ins().imul_imm(count, elem_size as i64)\n+                } else {\n+                    count\n+                };\n+                fx.bcx.call_memcpy(fx.target_config, dst, src, bytes);\n+            }\n+        },\n     }\n }\n "}, {"sha": "0305341da784e28dba54a1bdbb2892c1a937a994", "filename": "src/constant.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/104168a0f8ec9f218af84c315c0006c2d72450fe/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104168a0f8ec9f218af84c315c0006c2d72450fe/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=104168a0f8ec9f218af84c315c0006c2d72450fe", "patch": "@@ -536,11 +536,12 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                         {\n                             return None;\n                         }\n-                        StatementKind::CopyNonOverlapping(_) => {\n-                            return None;\n-                        } // conservative handling\n+                        StatementKind::Intrinsic(ref intrinsic) => match **intrinsic {\n+                            NonDivergingIntrinsic::CopyNonOverlapping(..) => return None,\n+                            NonDivergingIntrinsic::Assume(..) => {}\n+                        },\n+                        // conservative handling\n                         StatementKind::Assign(_)\n-                        | StatementKind::Assume(_)\n                         | StatementKind::FakeRead(_)\n                         | StatementKind::SetDiscriminant { .. }\n                         | StatementKind::Deinit(_)"}]}