{"sha": "b69738590ca1c4823a030d317e7fa6e918618a4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2OTczODU5MGNhMWM0ODIzYTAzMGQzMTdlN2ZhNmU5MTg2MThhNGI=", "commit": {"author": {"name": "Metabaron", "email": "metabaron@tuta.io", "date": "2019-11-11T22:16:59Z"}, "committer": {"name": "Metabaron", "email": "metabaron@tuta.io", "date": "2019-11-12T11:01:13Z"}, "message": "Implement FromStr for enum Edition", "tree": {"sha": "802b7d860e22f74ea891517ea9ed5b68991adbc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/802b7d860e22f74ea891517ea9ed5b68991adbc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b69738590ca1c4823a030d317e7fa6e918618a4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b69738590ca1c4823a030d317e7fa6e918618a4b", "html_url": "https://github.com/rust-lang/rust/commit/b69738590ca1c4823a030d317e7fa6e918618a4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b69738590ca1c4823a030d317e7fa6e918618a4b/comments", "author": null, "committer": null, "parents": [{"sha": "f5e1b0f97c9e46b5186f99d744f4587b2aee397e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e1b0f97c9e46b5186f99d744f4587b2aee397e", "html_url": "https://github.com/rust-lang/rust/commit/f5e1b0f97c9e46b5186f99d744f4587b2aee397e"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "ee883b615457f48fcbffaef9bf2c284bb54a7205", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b69738590ca1c4823a030d317e7fa6e918618a4b/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b69738590ca1c4823a030d317e7fa6e918618a4b/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=b69738590ca1c4823a030d317e7fa6e918618a4b", "patch": "@@ -1,5 +1,6 @@\n //! FIXME: write short doc here\n \n+use std::str::FromStr;\n use std::sync::Arc;\n \n use ra_cfg::CfgOptions;\n@@ -164,7 +165,7 @@ fn parse_meta(meta: &str) -> ParsedMeta {\n         match key {\n             \"crate\" => krate = Some(value.to_string()),\n             \"deps\" => deps = value.split(',').map(|it| it.to_string()).collect(),\n-            \"edition\" => edition = Edition::from_string(&value),\n+            \"edition\" => edition = Edition::from_str(&value).unwrap(),\n             \"cfg\" => {\n                 for key in value.split(',') {\n                     match split1(key, '=') {"}, {"sha": "fb9a3297a47316326fbaa39851b02c7dfbb51d7f", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b69738590ca1c4823a030d317e7fa6e918618a4b/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b69738590ca1c4823a030d317e7fa6e918618a4b/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=b69738590ca1c4823a030d317e7fa6e918618a4b", "patch": "@@ -13,6 +13,7 @@ use ra_syntax::SmolStr;\n use rustc_hash::FxHashSet;\n \n use crate::{RelativePath, RelativePathBuf};\n+use std::str::FromStr;\n \n /// `FileId` is an integer which uniquely identifies a file. File paths are\n /// messy and system-dependent, so most of the code should work directly with\n@@ -97,12 +98,13 @@ pub enum Edition {\n     Edition2015,\n }\n \n-impl Edition {\n-    //FIXME: replace with FromStr with proper error handling\n-    pub fn from_string(s: &str) -> Edition {\n+impl FromStr for Edition {\n+    type Err = String;\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n         match s {\n-            \"2015\" => Edition::Edition2015,\n-            \"2018\" | _ => Edition::Edition2018,\n+            \"2015\" => Ok(Edition::Edition2015),\n+            \"2018\" => Ok(Edition::Edition2018),\n+            _ => Err(format! {\"unknown edition: {}\" , s}),\n         }\n     }\n }"}, {"sha": "ff96bf904d2260464d33089d0e5bae8302a429d2", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b69738590ca1c4823a030d317e7fa6e918618a4b/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b69738590ca1c4823a030d317e7fa6e918618a4b/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=b69738590ca1c4823a030d317e7fa6e918618a4b", "patch": "@@ -1,6 +1,7 @@\n //! FIXME: write short doc here\n \n use std::path::{Path, PathBuf};\n+use std::str::FromStr;\n \n use cargo_metadata::{CargoOpt, MetadataCommand};\n use ra_arena::{impl_arena_id, Arena, RawId};\n@@ -141,12 +142,14 @@ impl CargoWorkspace {\n \n         for meta_pkg in meta.packages {\n             let is_member = ws_members.contains(&meta_pkg.id);\n+            let name = meta_pkg.name;\n             let pkg = packages.alloc(PackageData {\n-                name: meta_pkg.name,\n+                name: name.clone(),\n                 manifest: meta_pkg.manifest_path.clone(),\n                 targets: Vec::new(),\n                 is_member,\n-                edition: Edition::from_string(&meta_pkg.edition),\n+                edition: Edition::from_str(&meta_pkg.edition)\n+                    .unwrap_or_else(|e| panic!(\"unknown edition {} for package {:?}\", e, &name)),\n                 dependencies: Vec::new(),\n                 features: Vec::new(),\n             });"}]}