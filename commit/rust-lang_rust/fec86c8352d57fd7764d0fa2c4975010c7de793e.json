{"sha": "fec86c8352d57fd7764d0fa2c4975010c7de793e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYzg2YzgzNTJkNTdmZDc3NjRkMGZhMmM0OTc1MDEwYzdkZTc5M2U=", "commit": {"author": {"name": "Levente Kurusa", "email": "lkurusa@acm.org", "date": "2018-09-25T18:35:19Z"}, "committer": {"name": "Levente Kurusa", "email": "lkurusa@acm.org", "date": "2018-09-25T18:38:35Z"}, "message": "codegen_llvm: check inline assembly constraints with LLVM\n\nLLVM provides a way of checking whether the constraints and the actual\ninline assembly make sense. This commit introduces a check before\nemitting code for the inline assembly. If LLVM rejects the inline\nassembly (or its constraints), then the compiler emits an error E0668\n(\"malformed inline assembly\").\n\nSigned-off-by: Levente Kurusa <lkurusa@acm.org>", "tree": {"sha": "76d7eb0fbda781b8ee5a5c6aca645a99d4946d7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76d7eb0fbda781b8ee5a5c6aca645a99d4946d7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fec86c8352d57fd7764d0fa2c4975010c7de793e", "comment_count": 0, "verification": {"verified": false, "reason": "unverified_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE9aWNXk3bBSVLHV6MKNaxXmtJEmkFAluqgKsACgkQKNaxXmtJ\nEmkNmAf/QFHnbkQKUHdmMINAg+XUsmJ/g0wQ2+peRBOsqMAJKjYXjmGKC4zDbdic\nVyKBZqUPZQDMq2SSCX/6lO5zSRgn1lThNl9EUGexbowoS42Fkrfum4NXI+OSjumH\nXIOZwvJKJDDNf7a8NB+o0LE6pGEvdu3aWxPfIHnZiZUdc2FNY/nqRQp0fCC0YGZr\njE6X7BkEs1syb+2vx6dhy13Ry/cIZWZjYgmd+aKHbwFHUIFIng722WGlwssz6o5T\nTb4/I1LDimD1uZAUPTJkekl78jh7FLIDfiGEs1ZFtD8TXKCI44MnroaHUU2l5wXp\nfBqPUnhZXcVBoS3iG6yj8ADRdDojHQ==\n=5cTn\n-----END PGP SIGNATURE-----", "payload": "tree 76d7eb0fbda781b8ee5a5c6aca645a99d4946d7f\nparent e5c6575801028f5e089ef2e7720aa1af9d452334\nauthor Levente Kurusa <lkurusa@acm.org> 1537900519 +0200\ncommitter Levente Kurusa <lkurusa@acm.org> 1537900715 +0200\n\ncodegen_llvm: check inline assembly constraints with LLVM\n\nLLVM provides a way of checking whether the constraints and the actual\ninline assembly make sense. This commit introduces a check before\nemitting code for the inline assembly. If LLVM rejects the inline\nassembly (or its constraints), then the compiler emits an error E0668\n(\"malformed inline assembly\").\n\nSigned-off-by: Levente Kurusa <lkurusa@acm.org>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fec86c8352d57fd7764d0fa2c4975010c7de793e", "html_url": "https://github.com/rust-lang/rust/commit/fec86c8352d57fd7764d0fa2c4975010c7de793e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fec86c8352d57fd7764d0fa2c4975010c7de793e/comments", "author": {"login": "levex", "id": 849140, "node_id": "MDQ6VXNlcjg0OTE0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/849140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/levex", "html_url": "https://github.com/levex", "followers_url": "https://api.github.com/users/levex/followers", "following_url": "https://api.github.com/users/levex/following{/other_user}", "gists_url": "https://api.github.com/users/levex/gists{/gist_id}", "starred_url": "https://api.github.com/users/levex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/levex/subscriptions", "organizations_url": "https://api.github.com/users/levex/orgs", "repos_url": "https://api.github.com/users/levex/repos", "events_url": "https://api.github.com/users/levex/events{/privacy}", "received_events_url": "https://api.github.com/users/levex/received_events", "type": "User", "site_admin": false}, "committer": {"login": "levex", "id": 849140, "node_id": "MDQ6VXNlcjg0OTE0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/849140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/levex", "html_url": "https://github.com/levex", "followers_url": "https://api.github.com/users/levex/followers", "following_url": "https://api.github.com/users/levex/following{/other_user}", "gists_url": "https://api.github.com/users/levex/gists{/gist_id}", "starred_url": "https://api.github.com/users/levex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/levex/subscriptions", "organizations_url": "https://api.github.com/users/levex/orgs", "repos_url": "https://api.github.com/users/levex/repos", "events_url": "https://api.github.com/users/levex/events{/privacy}", "received_events_url": "https://api.github.com/users/levex/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5c6575801028f5e089ef2e7720aa1af9d452334", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5c6575801028f5e089ef2e7720aa1af9d452334", "html_url": "https://github.com/rust-lang/rust/commit/e5c6575801028f5e089ef2e7720aa1af9d452334"}], "stats": {"total": 59, "additions": 53, "deletions": 6}, "files": [{"sha": "f1bb41bcebacf3e3f85608d9b92cff01725bee62", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fec86c8352d57fd7764d0fa2c4975010c7de793e/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec86c8352d57fd7764d0fa2c4975010c7de793e/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=fec86c8352d57fd7764d0fa2c4975010c7de793e", "patch": "@@ -30,7 +30,7 @@ pub fn codegen_inline_asm(\n     ia: &hir::InlineAsm,\n     outputs: Vec<PlaceRef<'ll, 'tcx>>,\n     mut inputs: Vec<&'ll Value>\n-) {\n+) -> bool {\n     let mut ext_constraints = vec![];\n     let mut output_types = vec![];\n \n@@ -97,6 +97,10 @@ pub fn codegen_inline_asm(\n         ia.alignstack,\n         dialect\n     );\n+    if r.is_none() {\n+        return false;\n+    }\n+    let r = r.unwrap();\n \n     // Again, based on how many outputs we have\n     let outputs = ia.outputs.iter().zip(&outputs).filter(|&(ref o, _)| !o.is_indirect);\n@@ -117,6 +121,8 @@ pub fn codegen_inline_asm(\n         llvm::LLVMSetMetadata(r, kind,\n             llvm::LLVMMDNodeInContext(bx.cx.llcx, &val, 1));\n     }\n+\n+    return true;\n }\n \n pub fn codegen_global_asm<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,"}, {"sha": "afb87e2723f8aa10510922594105dd3591496dd7", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fec86c8352d57fd7764d0fa2c4975010c7de793e/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec86c8352d57fd7764d0fa2c4975010c7de793e/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=fec86c8352d57fd7764d0fa2c4975010c7de793e", "patch": "@@ -737,7 +737,7 @@ impl Builder<'a, 'll, 'tcx> {\n     pub fn inline_asm_call(&self, asm: *const c_char, cons: *const c_char,\n                          inputs: &[&'ll Value], output: &'ll Type,\n                          volatile: bool, alignstack: bool,\n-                         dia: AsmDialect) -> &'ll Value {\n+                         dia: AsmDialect) -> Option<&'ll Value> {\n         self.count_insn(\"inlineasm\");\n \n         let volatile = if volatile { llvm::True }\n@@ -753,9 +753,17 @@ impl Builder<'a, 'll, 'tcx> {\n         debug!(\"Asm Output Type: {:?}\", output);\n         let fty = Type::func(&argtys[..], output);\n         unsafe {\n-            let v = llvm::LLVMRustInlineAsm(\n-                fty, asm, cons, volatile, alignstack, dia);\n-            self.call(v, inputs, None)\n+            // Ask LLVM to verify that the constraints are well-formed.\n+            let constraints_ok = llvm::LLVMRustInlineAsmVerify(fty, cons);\n+            debug!(\"Constraint verification result: {:?}\", constraints_ok);\n+            if constraints_ok == 1 {\n+                let v = llvm::LLVMRustInlineAsm(\n+                    fty, asm, cons, volatile, alignstack, dia);\n+                Some(self.call(v, inputs, None))\n+            } else {\n+                // LLVM has detected an issue with our constaints, bail out\n+                None\n+            }\n         }\n     }\n "}, {"sha": "05359f62ac03c29863ffdbeba8c10c7b267ad32a", "filename": "src/librustc_codegen_llvm/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fec86c8352d57fd7764d0fa2c4975010c7de793e/src%2Flibrustc_codegen_llvm%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec86c8352d57fd7764d0fa2c4975010c7de793e/src%2Flibrustc_codegen_llvm%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdiagnostics.rs?ref=fec86c8352d57fd7764d0fa2c4975010c7de793e", "patch": "@@ -47,4 +47,26 @@ unsafe { simd_add(i32x2(0, 0), i32x2(1, 2)); } // ok!\n ```\n \"##,\n \n+E0668: r##\"\n+Malformed inline assembly rejected by LLVM.\n+\n+LLVM checks the validity of the constraints and the assembly string passed to\n+it. This error implies that LLVM seems something wrong with the inline\n+assembly call.\n+\n+In particular, it can happen if you forgot the closing bracket of a register\n+constraint (see issue #51430):\n+```\n+#![feature(asm)]\n+\n+fn main() {\n+    let rax: u64;\n+    unsafe {\n+        asm!(\"\" :\"={rax\"(rax));\n+        println!(\"Accumulator is: {}\", rax);\n+    }\n+}\n+```\n+\"##,\n+\n }"}, {"sha": "7975e7ad67033b607001202f6b09f878625f01fb", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fec86c8352d57fd7764d0fa2c4975010c7de793e/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec86c8352d57fd7764d0fa2c4975010c7de793e/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=fec86c8352d57fd7764d0fa2c4975010c7de793e", "patch": "@@ -1208,6 +1208,9 @@ extern \"C\" {\n                              AlignStack: Bool,\n                              Dialect: AsmDialect)\n                              -> &Value;\n+    pub fn LLVMRustInlineAsmVerify(Ty: &Type,\n+                             Constraints: *const c_char)\n+                             -> Bool;\n \n     pub fn LLVMRustDebugMetadataVersion() -> u32;\n     pub fn LLVMRustVersionMajor() -> u32;"}, {"sha": "eb7eb1dbd468a2152bc6fb6b0d5e0359fb15662a", "filename": "src/librustc_codegen_llvm/mir/statement.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fec86c8352d57fd7764d0fa2c4975010c7de793e/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec86c8352d57fd7764d0fa2c4975010c7de793e/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs?ref=fec86c8352d57fd7764d0fa2c4975010c7de793e", "patch": "@@ -86,7 +86,10 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                     self.codegen_operand(&bx, input).immediate()\n                 }).collect();\n \n-                asm::codegen_inline_asm(&bx, asm, outputs, input_vals);\n+                let res = asm::codegen_inline_asm(&bx, asm, outputs, input_vals);\n+                if !res {\n+                    span_err!(bx.sess(), statement.source_info.span, E0668, \"malformed inline assembly\");\n+                }\n                 bx\n             }\n             mir::StatementKind::FakeRead(..) |"}, {"sha": "f1ab1d4ddfa476d8fb0006583f4a3b7521eac4e6", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fec86c8352d57fd7764d0fa2c4975010c7de793e/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fec86c8352d57fd7764d0fa2c4975010c7de793e/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=fec86c8352d57fd7764d0fa2c4975010c7de793e", "patch": "@@ -426,6 +426,11 @@ extern \"C\" LLVMValueRef LLVMRustInlineAsm(LLVMTypeRef Ty, char *AsmString,\n                              HasSideEffects, IsAlignStack, fromRust(Dialect)));\n }\n \n+extern \"C\" bool LLVMRustInlineAsmVerify(LLVMTypeRef Ty,\n+                                          char *Constraints) {\n+  return InlineAsm::Verify(unwrap<FunctionType>(Ty), Constraints);\n+}\n+\n extern \"C\" void LLVMRustAppendModuleInlineAsm(LLVMModuleRef M, const char *Asm) {\n   unwrap(M)->appendModuleInlineAsm(StringRef(Asm));\n }"}]}