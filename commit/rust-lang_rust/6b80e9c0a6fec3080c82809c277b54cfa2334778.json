{"sha": "6b80e9c0a6fec3080c82809c277b54cfa2334778", "node_id": "C_kwDOAAsO6NoAKDZiODBlOWMwYTZmZWMzMDgwYzgyODA5YzI3N2I1NGNmYTIzMzQ3Nzg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-22T00:10:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-22T00:10:44Z"}, "message": "Auto merge of #106934 - DrMeepster:offset_of, r=WaffleLapkin\n\nAdd offset_of! macro (RFC 3308)\n\nImplements https://github.com/rust-lang/rfcs/pull/3308 (tracking issue #106655) by adding the built in macro `core::mem::offset_of`. Two of the future possibilities are also implemented:\n\n* Nested field accesses (without array indexing)\n* DST support (for `Sized` fields)\n\nI wrote this a few months ago, before the RFC merged. Now that it's merged, I decided to rebase and finish it.\n\ncc `@thomcc` (RFC author)", "tree": {"sha": "20e777f9af8b1233b808417f7b530d3561949a6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20e777f9af8b1233b808417f7b530d3561949a6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b80e9c0a6fec3080c82809c277b54cfa2334778", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b80e9c0a6fec3080c82809c277b54cfa2334778", "html_url": "https://github.com/rust-lang/rust/commit/6b80e9c0a6fec3080c82809c277b54cfa2334778", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b80e9c0a6fec3080c82809c277b54cfa2334778/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22e6885de0b02097eb6a8599c70df7925601ddc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/22e6885de0b02097eb6a8599c70df7925601ddc1", "html_url": "https://github.com/rust-lang/rust/commit/22e6885de0b02097eb6a8599c70df7925601ddc1"}, {"sha": "9dd0653ed53595886669620f51fdf69c7ff0b63f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dd0653ed53595886669620f51fdf69c7ff0b63f", "html_url": "https://github.com/rust-lang/rust/commit/9dd0653ed53595886669620f51fdf69c7ff0b63f"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "f481290583e0678e10abe762f18b979c9fab258d", "filename": "src/base.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b80e9c0a6fec3080c82809c277b54cfa2334778/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b80e9c0a6fec3080c82809c277b54cfa2334778/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=6b80e9c0a6fec3080c82809c277b54cfa2334778", "patch": "@@ -781,12 +781,15 @@ fn codegen_stmt<'tcx>(\n                     let operand = operand.load_scalar(fx);\n                     lval.write_cvalue(fx, CValue::by_val(operand, box_layout));\n                 }\n-                Rvalue::NullaryOp(null_op, ty) => {\n+                Rvalue::NullaryOp(ref null_op, ty) => {\n                     assert!(lval.layout().ty.is_sized(fx.tcx, ParamEnv::reveal_all()));\n                     let layout = fx.layout_of(fx.monomorphize(ty));\n                     let val = match null_op {\n                         NullOp::SizeOf => layout.size.bytes(),\n                         NullOp::AlignOf => layout.align.abi.bytes(),\n+                        NullOp::OffsetOf(fields) => {\n+                            layout.offset_of_subfield(fx, fields.iter().map(|f| f.index())).bytes()\n+                        }\n                     };\n                     let val = CValue::const_val(fx, fx.layout_of(fx.tcx.types.usize), val.into());\n                     lval.write_cvalue(fx, val);"}]}