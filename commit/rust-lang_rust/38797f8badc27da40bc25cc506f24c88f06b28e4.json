{"sha": "38797f8badc27da40bc25cc506f24c88f06b28e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4Nzk3ZjhiYWRjMjdkYTQwYmMyNWNjNTA2ZjI0Yzg4ZjA2YjI4ZTQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-11T15:49:42Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-11T16:10:42Z"}, "message": "Implement `#[track_caller]`\n\nFixes #848", "tree": {"sha": "87761fecda3e4a565f14d7bd4aa3c8c91f9ca252", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87761fecda3e4a565f14d7bd4aa3c8c91f9ca252"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38797f8badc27da40bc25cc506f24c88f06b28e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38797f8badc27da40bc25cc506f24c88f06b28e4", "html_url": "https://github.com/rust-lang/rust/commit/38797f8badc27da40bc25cc506f24c88f06b28e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38797f8badc27da40bc25cc506f24c88f06b28e4/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fed3b265635997dc84e8a01311c79726ad1e2ebf", "url": "https://api.github.com/repos/rust-lang/rust/commits/fed3b265635997dc84e8a01311c79726ad1e2ebf", "html_url": "https://github.com/rust-lang/rust/commit/fed3b265635997dc84e8a01311c79726ad1e2ebf"}], "stats": {"total": 132, "additions": 114, "deletions": 18}, "files": [{"sha": "40bf369a6fee32967cd0314a3250a3ebff8b812e", "filename": "example/track-caller-attribute.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/38797f8badc27da40bc25cc506f24c88f06b28e4/example%2Ftrack-caller-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38797f8badc27da40bc25cc506f24c88f06b28e4/example%2Ftrack-caller-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Ftrack-caller-attribute.rs?ref=38797f8badc27da40bc25cc506f24c88f06b28e4", "patch": "@@ -0,0 +1,42 @@\n+// Based on https://github.com/anp/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src/test/ui/rfc-2091-track-caller/track-caller-attribute.rs\n+\n+// run-pass\n+\n+#![feature(track_caller)]\n+\n+use std::panic::Location;\n+\n+#[track_caller]\n+fn tracked() -> &'static Location<'static> {\n+    Location::caller()\n+}\n+\n+fn nested_intrinsic() -> &'static Location<'static> {\n+    Location::caller()\n+}\n+\n+fn nested_tracked() -> &'static Location<'static> {\n+    tracked()\n+}\n+\n+fn main() {\n+    let location = Location::caller();\n+    assert_eq!(location.file(), file!());\n+    assert_eq!(location.line(), 23);\n+    assert_eq!(location.column(), 20);\n+\n+    let tracked = tracked();\n+    assert_eq!(tracked.file(), file!());\n+    assert_eq!(tracked.line(), 28);\n+    assert_eq!(tracked.column(), 19);\n+\n+    let nested = nested_intrinsic();\n+    assert_eq!(nested.file(), file!());\n+    assert_eq!(nested.line(), 15);\n+    assert_eq!(nested.column(), 5);\n+\n+    let contained = nested_tracked();\n+    assert_eq!(contained.file(), file!());\n+    assert_eq!(contained.line(), 19);\n+    assert_eq!(contained.column(), 5);\n+}"}, {"sha": "2201c6482563b48e0c72f5c196bdc4f71aba4cd6", "filename": "src/abi/comments.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38797f8badc27da40bc25cc506f24c88f06b28e4/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38797f8badc27da40bc25cc506f24c88f06b28e4/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=38797f8badc27da40bc25cc506f24c88f06b28e4", "patch": "@@ -14,27 +14,34 @@ pub fn add_args_header_comment(fx: &mut FunctionCx<impl Backend>) {\n pub fn add_arg_comment<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     kind: &str,\n-    local: mir::Local,\n+    local: Option<mir::Local>,\n     local_field: Option<usize>,\n     params: EmptySinglePair<Value>,\n     pass_mode: PassMode,\n     ty: Ty<'tcx>,\n ) {\n+    let local = if let Some(local) = local {\n+        Cow::Owned(format!(\"{:?}\", local))\n+    } else {\n+        Cow::Borrowed(\"???\")\n+    };\n     let local_field = if let Some(local_field) = local_field {\n         Cow::Owned(format!(\".{}\", local_field))\n     } else {\n         Cow::Borrowed(\"\")\n     };\n+\n     let params = match params {\n         Empty => Cow::Borrowed(\"-\"),\n         Single(param) => Cow::Owned(format!(\"= {:?}\", param)),\n         Pair(param_a, param_b) => Cow::Owned(format!(\"= {:?}, {:?}\", param_a, param_b)),\n     };\n+\n     let pass_mode = format!(\"{:?}\", pass_mode);\n     fx.add_global_comment(format!(\n         \"{kind:5}{local:>3}{local_field:<5} {params:10} {pass_mode:36} {ty:?}\",\n         kind = kind,\n-        local = format!(\"{:?}\", local),\n+        local = local,\n         local_field = local_field,\n         params = params,\n         pass_mode = pass_mode,"}, {"sha": "e9c9a751c26d2bb65093677f9b562ba98c537d76", "filename": "src/abi/mod.rs", "status": "modified", "additions": 45, "deletions": 11, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/38797f8badc27da40bc25cc506f24c88f06b28e4/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38797f8badc27da40bc25cc506f24c88f06b28e4/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=38797f8badc27da40bc25cc506f24c88f06b28e4", "patch": "@@ -80,6 +80,7 @@ fn clif_sig_from_fn_sig<'tcx>(\n     triple: &target_lexicon::Triple,\n     sig: FnSig<'tcx>,\n     is_vtable_fn: bool,\n+    requires_caller_location: bool,\n ) -> Signature {\n     let abi = match sig.abi {\n         Abi::System => {\n@@ -125,7 +126,7 @@ fn clif_sig_from_fn_sig<'tcx>(\n         })\n         .flatten();\n \n-    let (params, returns) = match get_pass_mode(\n+    let (mut params, returns): (Vec<_>, Vec<_>) = match get_pass_mode(\n         tcx,\n         tcx.layout_of(ParamEnv::reveal_all().and(output)).unwrap(),\n     ) {\n@@ -150,6 +151,10 @@ fn clif_sig_from_fn_sig<'tcx>(\n         }\n     };\n \n+    if requires_caller_location {\n+        params.push(AbiParam::new(pointer_ty(tcx)));\n+    }\n+\n     Signature {\n         params,\n         returns,\n@@ -169,7 +174,7 @@ pub fn get_function_name_and_sig<'tcx>(\n     if fn_sig.c_variadic && !support_vararg {\n         unimpl!(\"Variadic function definitions are not yet supported\");\n     }\n-    let sig = clif_sig_from_fn_sig(tcx, triple, fn_sig, false);\n+    let sig = clif_sig_from_fn_sig(tcx, triple, fn_sig, false, inst.def.requires_caller_location(tcx));\n     (tcx.symbol_name(inst).name.as_str().to_string(), sig)\n }\n \n@@ -316,18 +321,24 @@ pub fn codegen_fn_prelude(fx: &mut FunctionCx<'_, '_, impl Backend>, start_ebb:\n \n                 let mut params = Vec::new();\n                 for (i, arg_ty) in tupled_arg_tys.types().enumerate() {\n-                    let param = cvalue_for_param(fx, start_ebb, local, Some(i), arg_ty);\n+                    let param = cvalue_for_param(fx, start_ebb, Some(local), Some(i), arg_ty);\n                     params.push(param);\n                 }\n \n                 (local, ArgKind::Spread(params), arg_ty)\n             } else {\n-                let param = cvalue_for_param(fx, start_ebb, local, None, arg_ty);\n+                let param = cvalue_for_param(fx, start_ebb, Some(local), None, arg_ty);\n                 (local, ArgKind::Normal(param), arg_ty)\n             }\n         })\n         .collect::<Vec<(Local, ArgKind, Ty)>>();\n \n+    assert!(fx.caller_location.is_none());\n+    if fx.instance.def.requires_caller_location(fx.tcx) {\n+        // Store caller location for `#[track_caller]`.\n+        fx.caller_location = Some(cvalue_for_param(fx, start_ebb, None, None, fx.tcx.caller_location_ty()).unwrap());\n+    }\n+\n     fx.bcx.switch_to_block(start_ebb);\n     fx.bcx.ins().nop();\n \n@@ -403,10 +414,10 @@ pub fn codegen_fn_prelude(fx: &mut FunctionCx<'_, '_, impl Backend>, start_ebb:\n \n pub fn codegen_terminator_call<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    span: Span,\n     func: &Operand<'tcx>,\n     args: &[Operand<'tcx>],\n     destination: &Option<(Place<'tcx>, BasicBlock)>,\n-    span: Span,\n ) {\n     let fn_ty = fx.monomorphize(&func.ty(fx.mir, fx.tcx));\n     let sig = fx\n@@ -472,6 +483,7 @@ pub fn codegen_terminator_call<'tcx>(\n \n     codegen_call_inner(\n         fx,\n+        span,\n         Some(func),\n         fn_ty,\n         args,\n@@ -488,6 +500,7 @@ pub fn codegen_terminator_call<'tcx>(\n \n fn codegen_call_inner<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    span: Span,\n     func: Option<&Operand<'tcx>>,\n     fn_ty: Ty<'tcx>,\n     args: Vec<CValue<'tcx>>,\n@@ -558,7 +571,7 @@ fn codegen_call_inner<'tcx>(\n \n     let (call_inst, call_args) =\n         self::returning::codegen_with_call_return_arg(fx, fn_sig, ret_place, |fx, return_ptr| {\n-            let call_args: Vec<Value> = return_ptr\n+            let mut call_args: Vec<Value> = return_ptr\n                 .into_iter()\n                 .chain(first_arg.into_iter())\n                 .chain(\n@@ -569,9 +582,20 @@ fn codegen_call_inner<'tcx>(\n                 )\n                 .collect::<Vec<_>>();\n \n+            if instance.map(|inst| inst.def.requires_caller_location(fx.tcx)).unwrap_or(false) {\n+                // Pass the caller location for `#[track_caller]`.\n+                let caller_location = fx.get_caller_location(span);\n+                call_args.extend(adjust_arg_for_abi(fx, caller_location).into_iter());\n+            }\n+\n             let call_inst = if let Some(func_ref) = func_ref {\n-                let sig =\n-                    clif_sig_from_fn_sig(fx.tcx, fx.triple(), fn_sig, is_virtual_call);\n+                let sig = clif_sig_from_fn_sig(\n+                    fx.tcx,\n+                    fx.triple(),\n+                    fn_sig,\n+                    is_virtual_call,\n+                    false, // calls through function pointers never pass the caller location\n+                );\n                 let sig = fx.bcx.import_signature(sig);\n                 fx.bcx.ins().call_indirect(sig, func_ref, &call_args)\n             } else {\n@@ -604,7 +628,11 @@ fn codegen_call_inner<'tcx>(\n     }\n }\n \n-pub fn codegen_drop<'tcx>(fx: &mut FunctionCx<'_, 'tcx, impl Backend>, drop_place: CPlace<'tcx>) {\n+pub fn codegen_drop<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    span: Span,\n+    drop_place: CPlace<'tcx>,\n+) {\n     let ty = drop_place.layout().ty;\n     let drop_fn = Instance::resolve_drop_in_place(fx.tcx, ty);\n \n@@ -625,7 +653,13 @@ pub fn codegen_drop<'tcx>(fx: &mut FunctionCx<'_, 'tcx, impl Backend>, drop_plac\n \n                 assert_eq!(fn_sig.output(), fx.tcx.mk_unit());\n \n-                let sig = clif_sig_from_fn_sig(fx.tcx, fx.triple(), fn_sig, true);\n+                let sig = clif_sig_from_fn_sig(\n+                    fx.tcx,\n+                    fx.triple(),\n+                    fn_sig,\n+                    true,\n+                    false, // `drop_in_place` is never `#[track_caller]`\n+                );\n                 let sig = fx.bcx.import_signature(sig);\n                 fx.bcx.ins().call_indirect(sig, drop_fn, &[ptr]);\n             }\n@@ -642,7 +676,7 @@ pub fn codegen_drop<'tcx>(fx: &mut FunctionCx<'_, 'tcx, impl Backend>, drop_plac\n                 );\n                 drop_place.write_place_ref(fx, arg_place);\n                 let arg_value = arg_place.to_cvalue(fx);\n-                codegen_call_inner(fx, None, drop_fn_ty, vec![arg_value], None);\n+                codegen_call_inner(fx, span, None, drop_fn_ty, vec![arg_value], None);\n             }\n         }\n     }"}, {"sha": "b2df277798764972903fe013555ec5fc3f4719cc", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38797f8badc27da40bc25cc506f24c88f06b28e4/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38797f8badc27da40bc25cc506f24c88f06b28e4/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=38797f8badc27da40bc25cc506f24c88f06b28e4", "patch": "@@ -126,7 +126,7 @@ pub fn adjust_arg_for_abi<'tcx>(\n pub fn cvalue_for_param<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     start_ebb: Ebb,\n-    local: mir::Local,\n+    local: Option<mir::Local>,\n     local_field: Option<usize>,\n     arg_ty: Ty<'tcx>,\n ) -> Option<CValue<'tcx>> {"}, {"sha": "f0a36e193b245a2e999861b61991767bc90da90f", "filename": "src/abi/returning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38797f8badc27da40bc25cc506f24c88f06b28e4/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38797f8badc27da40bc25cc506f24c88f06b28e4/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=38797f8badc27da40bc25cc506f24c88f06b28e4", "patch": "@@ -46,7 +46,7 @@ pub fn codegen_return_param(\n     crate::abi::comments::add_arg_comment(\n         fx,\n         \"ret\",\n-        RETURN_PLACE,\n+        Some(RETURN_PLACE),\n         None,\n         ret_param,\n         ret_pass_mode,"}, {"sha": "6dc9f92775f1003f6da52321bc9f2f5be6325f17", "filename": "src/base.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/38797f8badc27da40bc25cc506f24c88f06b28e4/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38797f8badc27da40bc25cc506f24c88f06b28e4/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=38797f8badc27da40bc25cc506f24c88f06b28e4", "patch": "@@ -48,6 +48,7 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n         bcx,\n         ebb_map,\n         local_map: HashMap::new(),\n+        caller_location: None, // set by `codegen_fn_prelude`\n \n         clif_comments,\n         constants_cx: &mut cx.constants_cx,\n@@ -236,10 +237,10 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n             } => {\n                 fx.tcx.sess.time(\"codegen call\", || crate::abi::codegen_terminator_call(\n                     fx,\n+                    bb_data.terminator().source_info.span,\n                     func,\n                     args,\n                     destination,\n-                    bb_data.terminator().source_info.span,\n                 ));\n             }\n             TerminatorKind::Resume | TerminatorKind::Abort => {\n@@ -261,7 +262,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n                 unwind: _,\n             } => {\n                 let drop_place = trans_place(fx, location);\n-                crate::abi::codegen_drop(fx, drop_place);\n+                crate::abi::codegen_drop(fx, bb_data.terminator().source_info.span, drop_place);\n \n                 let target_ebb = fx.get_ebb(*target);\n                 fx.bcx.ins().jump(target_ebb, &[]);\n@@ -370,7 +371,7 @@ fn trans_stmt<'tcx>(\n                     match from_ty.kind {\n                         ty::FnDef(def_id, substs) => {\n                             let func_ref = fx.get_function_ref(\n-                                Instance::resolve(fx.tcx, ParamEnv::reveal_all(), def_id, substs)\n+                                Instance::resolve_for_fn_ptr(fx.tcx, ParamEnv::reveal_all(), def_id, substs)\n                                     .unwrap(),\n                             );\n                             let func_addr = fx.bcx.ins().func_addr(fx.pointer_type, func_ref);"}, {"sha": "66e690d31222c2d7387dbcca4454156f762fe281", "filename": "src/common.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38797f8badc27da40bc25cc506f24c88f06b28e4/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38797f8badc27da40bc25cc506f24c88f06b28e4/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=38797f8badc27da40bc25cc506f24c88f06b28e4", "patch": "@@ -267,6 +267,9 @@ pub struct FunctionCx<'clif, 'tcx, B: Backend + 'static> {\n     pub ebb_map: IndexVec<BasicBlock, Ebb>,\n     pub local_map: HashMap<Local, CPlace<'tcx>>,\n \n+    /// When `#[track_caller]` is used, the implicit caller location is stored in this variable.\n+    pub caller_location: Option<CValue<'tcx>>,\n+\n     pub clif_comments: crate::pretty_clif::CommentWriter,\n     pub constants_cx: &'clif mut crate::constant::ConstantCx,\n     pub vtables: &'clif mut HashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,\n@@ -355,6 +358,11 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n     }\n \n     pub fn get_caller_location(&mut self, span: Span) -> CValue<'tcx> {\n+        if let Some(loc) = self.caller_location {\n+            // `#[track_caller]` is used; return caller location instead of current location.\n+            return loc;\n+        }\n+\n         let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n         let caller = self.tcx.sess.source_map().lookup_char_pos(topmost.lo());\n         let const_loc = self.tcx.const_caller_location(("}, {"sha": "72934e689584f59cc0630c1073241cf3dcae15a6", "filename": "test.sh", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38797f8badc27da40bc25cc506f24c88f06b28e4/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/38797f8badc27da40bc25cc506f24c88f06b28e4/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=38797f8badc27da40bc25cc506f24c88f06b28e4", "patch": "@@ -64,6 +64,10 @@ echo \"[AOT] subslice-patterns-const-eval\"\n $RUSTC example/subslice-patterns-const-eval.rs --crate-type bin -Cpanic=abort\n ./target/out/subslice-patterns-const-eval\n \n+echo \"[AOT] track-caller-attribute\"\n+$RUSTC example/track-caller-attribute.rs --crate-type bin -Cpanic=abort\n+./target/out/track-caller-attribute\n+\n echo \"[BUILD] mod_bench\"\n $RUSTC example/mod_bench.rs --crate-type bin\n "}]}