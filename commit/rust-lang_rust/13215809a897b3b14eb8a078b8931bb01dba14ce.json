{"sha": "13215809a897b3b14eb8a078b8931bb01dba14ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMjE1ODA5YTg5N2IzYjE0ZWI4YTA3OGI4OTMxYmIwMWRiYTE0Y2U=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-09-21T18:24:59Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-09-21T18:24:59Z"}, "message": "Expand our own config.guess-like logic in configure, rather than only asking LLVM. We have to decide some things before we get an LLVM to ask.", "tree": {"sha": "348722bf4279f6dcb3c7584a1e40209489802ee1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/348722bf4279f6dcb3c7584a1e40209489802ee1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13215809a897b3b14eb8a078b8931bb01dba14ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13215809a897b3b14eb8a078b8931bb01dba14ce", "html_url": "https://github.com/rust-lang/rust/commit/13215809a897b3b14eb8a078b8931bb01dba14ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13215809a897b3b14eb8a078b8931bb01dba14ce/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f19ab1ff3c85973a54cc98e3f98ae240e2d0d816", "url": "https://api.github.com/repos/rust-lang/rust/commits/f19ab1ff3c85973a54cc98e3f98ae240e2d0d816", "html_url": "https://github.com/rust-lang/rust/commit/f19ab1ff3c85973a54cc98e3f98ae240e2d0d816"}], "stats": {"total": 62, "additions": 56, "deletions": 6}, "files": [{"sha": "e74b4cb29e5b2d42f593521c6b1a1d5b682729d5", "filename": "Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13215809a897b3b14eb8a078b8931bb01dba14ce/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/13215809a897b3b14eb8a078b8931bb01dba14ce/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=13215809a897b3b14eb8a078b8931bb01dba14ce", "patch": "@@ -11,7 +11,8 @@ ifneq ($(MAKE_RESTARTS),)\n CFG_INFO := $(info cfg: make restarts: $(MAKE_RESTARTS))\n endif\n \n-CFG_INFO := $(info cfg: building on $(CFG_OSTYPE) $(CFG_CPUTYPE))\n+CFG_INFO := $(info cfg: shell host triple $(CFG_HOST_TRIPLE))\n+CFG_INFO := $(info cfg: llvm host triple $(CFG_LLVM_TRIPLE))\n \n ifdef CFG_DISABLE_OPTIMIZE\n   $(info cfg: disabling rustc optimization (CFG_DISABLE_OPTIMIZE))"}, {"sha": "c4516c85a315c2fa33ec6aed2140e3e2ff951efc", "filename": "configure", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/13215809a897b3b14eb8a078b8931bb01dba14ce/configure", "raw_url": "https://github.com/rust-lang/rust/raw/13215809a897b3b14eb8a078b8931bb01dba14ce/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=13215809a897b3b14eb8a078b8931bb01dba14ce", "patch": "@@ -127,8 +127,8 @@ need_cmd sed\n msg \"inspecting environment\"\n \n CFG_OSTYPE=$(uname -s)\n-\n CFG_CPUTYPE=$(uname -m)\n+\n if [ $CFG_OSTYPE = Darwin -a $CFG_CPUTYPE = i386 ]\n then\n     # Darwin's `uname -s` lies and always returns i386. We have to use sysctl\n@@ -139,6 +139,54 @@ then\n     fi\n fi\n \n+\n+# The goal here is to come up with the same triple as LLVM would,\n+# at least for the subset of platforms we're willing to target.\n+\n+case $CFG_OSTYPE in\n+\n+    Linux)\n+        CFG_OSTYPE=unknown-linux-gnu\n+        ;;\n+\n+    FreeBSD)\n+        CFG_OSTYPE=unknown-freebsd\n+        ;;\n+\n+    Darwin)\n+        CFG_OSTYPE=apple-darwin\n+        ;;\n+\n+    MINGW32*)\n+        CFG_OSTYPE=pc-mingw32\n+        ;;\n+\n+    *)\n+        err \"unknown OS type: $CFG_OSTYPE\"\n+        ;;\n+esac\n+\n+\n+case $CFG_CPUTYPE in\n+\n+    i386 | i486 | i686 | i786 | x86)\n+        CFG_CPUTYPE=i686\n+        ;;\n+\n+    xscale | arm)\n+        CFG_CPUTYPE=arm\n+        ;;\n+\n+    x86_64 | x86-64 | x64)\n+        CFG_CPUTYPE=x86_64\n+        ;;\n+\n+    *)\n+        err \"unknown CPU type: $CFG_CPUTYPE\"\n+esac\n+\n+CFG_HOST_TRIPLE=\"${CFG_CPUTYPE}-${CFG_OSTYPE}\"\n+\n CFG_SELF=$(echo $0 | tr '\\\\' '/')\n CFG_SRC_DIR=${CFG_SELF%${CFG_SELF##*/}}\n CFG_BUILD_DIR=$(echo $PWD | tr '\\\\' '/')\n@@ -180,6 +228,7 @@ putvar CFG_SRC_DIR\n putvar CFG_BUILD_DIR\n putvar CFG_OSTYPE\n putvar CFG_CPUTYPE\n+putvar CFG_HOST_TRIPLE\n putvar CFG_CONFIGURE_ARGS\n \n step_msg \"looking for build programs\""}, {"sha": "c38d081f9a58e88fa5749bc45a1c3b43ba2fe01f", "filename": "mk/platform.mk", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13215809a897b3b14eb8a078b8931bb01dba14ce/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/13215809a897b3b14eb8a078b8931bb01dba14ce/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=13215809a897b3b14eb8a078b8931bb01dba14ce", "patch": "@@ -7,7 +7,7 @@ CFG_GCCISH_LINK_FLAGS :=\n # embedded into the executable, so use a no-op command.\n CFG_DSYMUTIL := true\n \n-ifeq ($(CFG_OSTYPE), FreeBSD)\n+ifeq ($(findstring freebsd,$(CFG_OSTYPE)),)\n   CFG_LIB_NAME=lib$(1).so\n   CFG_GCCISH_CFLAGS += -fPIC -march=i686 -I/usr/local/include\n   CFG_GCCISH_LINK_FLAGS += -shared -fPIC -lpthread -lrt\n@@ -20,7 +20,7 @@ ifeq ($(CFG_OSTYPE), FreeBSD)\n   CFG_DEF_SUFFIX := .bsd.def\n endif\n \n-ifeq ($(CFG_OSTYPE), Linux)\n+ifneq ($(findstring linux,$(CFG_OSTYPE)),)\n   CFG_LIB_NAME=lib$(1).so\n   CFG_GCCISH_CFLAGS += -fPIC -march=i686\n   CFG_GCCISH_LINK_FLAGS += -shared -fPIC -ldl -lpthread -lrt\n@@ -46,7 +46,7 @@ ifeq ($(CFG_OSTYPE), Linux)\n   endif\n endif\n \n-ifeq ($(CFG_OSTYPE), Darwin)\n+ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n   CFG_LIB_NAME=lib$(1).dylib\n   CFG_UNIXY := 1\n   CFG_LDENV := DYLD_LIBRARY_PATH\n@@ -69,7 +69,7 @@ ifeq ($(CFG_OSTYPE), Darwin)\n   CFG_DEF_SUFFIX := .darwin.def\n endif\n \n-ifneq ($(findstring MINGW,$(CFG_OSTYPE)),)\n+ifneq ($(findstring mingw,$(CFG_OSTYPE)),)\n   CFG_WINDOWSY := 1\n endif\n "}]}