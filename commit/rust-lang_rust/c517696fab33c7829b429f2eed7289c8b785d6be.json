{"sha": "c517696fab33c7829b429f2eed7289c8b785d6be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MTc2OTZmYWIzM2M3ODI5YjQyOWYyZWVkNzI4OWM4Yjc4NWQ2YmU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-20T17:55:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-20T17:55:08Z"}, "message": "use with_db consistently", "tree": {"sha": "f50c4f942096beae27479a7e403c048e06fe6b86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f50c4f942096beae27479a7e403c048e06fe6b86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c517696fab33c7829b429f2eed7289c8b785d6be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c517696fab33c7829b429f2eed7289c8b785d6be", "html_url": "https://github.com/rust-lang/rust/commit/c517696fab33c7829b429f2eed7289c8b785d6be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c517696fab33c7829b429f2eed7289c8b785d6be/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3508ba9bc2c2180a6495238c2fafa493557f36d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3508ba9bc2c2180a6495238c2fafa493557f36d0", "html_url": "https://github.com/rust-lang/rust/commit/3508ba9bc2c2180a6495238c2fafa493557f36d0"}], "stats": {"total": 21, "additions": 7, "deletions": 14}, "files": [{"sha": "ca6b2551646ced0018001537009d03b8f7d81548", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c517696fab33c7829b429f2eed7289c8b785d6be/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c517696fab33c7829b429f2eed7289c8b785d6be/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=c517696fab33c7829b429f2eed7289c8b785d6be", "patch": "@@ -388,8 +388,7 @@ impl Analysis {\n         &self,\n         position: FilePosition,\n     ) -> Cancelable<Option<RangeInfo<Vec<NavigationTarget>>>> {\n-        self.db\n-            .catch_canceled(|db| goto_definition::goto_definition(db, position))\n+        self.with_db(|db| goto_definition::goto_definition(db, position))\n     }\n \n     /// Finds all usages of the reference at point.\n@@ -404,8 +403,7 @@ impl Analysis {\n \n     /// Computes parameter information for the given call expression.\n     pub fn call_info(&self, position: FilePosition) -> Cancelable<Option<CallInfo>> {\n-        self.db\n-            .catch_canceled(|db| call_info::call_info(db, position))\n+        self.with_db(|db| call_info::call_info(db, position))\n     }\n \n     /// Returns a `mod name;` declaration which created the current module.\n@@ -420,33 +418,28 @@ impl Analysis {\n \n     /// Returns the root file of the given crate.\n     pub fn crate_root(&self, crate_id: CrateId) -> Cancelable<FileId> {\n-        Ok(self.db.crate_graph().crate_root(crate_id))\n+        self.with_db(|db| db.crate_graph().crate_root(crate_id))\n     }\n \n     /// Returns the set of possible targets to run for the current file.\n     pub fn runnables(&self, file_id: FileId) -> Cancelable<Vec<Runnable>> {\n-        self.db\n-            .catch_canceled(|db| runnables::runnables(db, file_id))\n+        self.with_db(|db| runnables::runnables(db, file_id))\n     }\n \n     /// Computes syntax highlighting for the given file.\n     pub fn highlight(&self, file_id: FileId) -> Cancelable<Vec<HighlightedRange>> {\n-        self.db\n-            .catch_canceled(|db| syntax_highlighting::highlight(db, file_id))\n+        self.with_db(|db| syntax_highlighting::highlight(db, file_id))\n     }\n \n     /// Computes completions at the given position.\n     pub fn completions(&self, position: FilePosition) -> Cancelable<Option<Vec<CompletionItem>>> {\n-        let completions = self\n-            .db\n-            .catch_canceled(|db| completion::completions(db, position))?;\n-        Ok(completions.map(|it| it.into()))\n+        self.with_db(|db| completion::completions(db, position).map(Into::into))\n     }\n \n     /// Computes assists (aks code actons aka intentions) for the given\n     /// position.\n     pub fn assists(&self, frange: FileRange) -> Cancelable<Vec<SourceChange>> {\n-        Ok(self.db.assists(frange))\n+        self.with_db(|db| db.assists(frange))\n     }\n \n     /// Computes the set of diagnostics for the given file."}]}