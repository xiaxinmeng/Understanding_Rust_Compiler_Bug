{"sha": "632b0f290232913ef9950ee46917d5c195193102", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMmIwZjI5MDIzMjkxM2VmOTk1MGVlNDY5MTdkNWMxOTUxOTMxMDI=", "commit": {"author": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2019-01-26T20:16:15Z"}, "committer": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2019-01-26T20:16:15Z"}, "message": "Use the correct working directory for cargo metadata and rustfmt", "tree": {"sha": "be26fe86b87105ca64505e37e0b42824a0414dce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be26fe86b87105ca64505e37e0b42824a0414dce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/632b0f290232913ef9950ee46917d5c195193102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/632b0f290232913ef9950ee46917d5c195193102", "html_url": "https://github.com/rust-lang/rust/commit/632b0f290232913ef9950ee46917d5c195193102", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/632b0f290232913ef9950ee46917d5c195193102/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0ef1bde893bb46f0c7f9cab34706713169adb49", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0ef1bde893bb46f0c7f9cab34706713169adb49", "html_url": "https://github.com/rust-lang/rust/commit/d0ef1bde893bb46f0c7f9cab34706713169adb49"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "3f58e3c93e8aa20aa2ffd5552f512d08dbef45d1", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/632b0f290232913ef9950ee46917d5c195193102/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632b0f290232913ef9950ee46917d5c195193102/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=632b0f290232913ef9950ee46917d5c195193102", "patch": "@@ -520,18 +520,27 @@ pub fn handle_formatting(\n     let end_position = TextUnit::of_str(&file).conv_with(&file_line_index);\n \n     use std::process;\n-    let mut rustfmt = process::Command::new(\"rustfmt\")\n+    let mut rustfmt = process::Command::new(\"rustfmt\");\n+    rustfmt\n         .stdin(process::Stdio::piped())\n-        .stdout(process::Stdio::piped())\n-        .spawn()?;\n+        .stdout(process::Stdio::piped());\n+\n+    if let Ok(path) = params.text_document.uri.to_file_path() {\n+        if let Some(parent) = path.parent() {\n+            rustfmt.current_dir(parent);\n+        }\n+    }\n+    let mut rustfmt = rustfmt.spawn()?;\n \n     rustfmt.stdin.as_mut().unwrap().write_all(file.as_bytes())?;\n \n     let output = rustfmt.wait_with_output()?;\n     let captured_stdout = String::from_utf8(output.stdout)?;\n     if !output.status.success() {\n         failure::bail!(\n-            \"rustfmt exited with error code {}: {}.\",\n+            r#\"rustfmt exited with:\n+            Status: {}\n+            stdout: {}\"#,\n             output.status,\n             captured_stdout,\n         );"}, {"sha": "8cf99d5865d2f0152cdffb35116f0c0d8f86cd1a", "filename": "crates/ra_lsp_server/src/project_model/cargo_workspace.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/632b0f290232913ef9950ee46917d5c195193102/crates%2Fra_lsp_server%2Fsrc%2Fproject_model%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632b0f290232913ef9950ee46917d5c195193102/crates%2Fra_lsp_server%2Fsrc%2Fproject_model%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fproject_model%2Fcargo_workspace.rs?ref=632b0f290232913ef9950ee46917d5c195193102", "patch": "@@ -117,9 +117,13 @@ impl Target {\n \n impl CargoWorkspace {\n     pub fn from_cargo_metadata(cargo_toml: &Path) -> Result<CargoWorkspace> {\n-        let meta = MetadataCommand::new()\n-            .manifest_path(cargo_toml)\n-            .features(CargoOpt::AllFeatures)\n+        let mut meta = MetadataCommand::new();\n+        meta.manifest_path(cargo_toml)\n+            .features(CargoOpt::AllFeatures);\n+        if let Some(parent) = cargo_toml.parent() {\n+            meta.current_dir(parent);\n+        }\n+        let meta = meta\n             .exec()\n             .map_err(|e| format_err!(\"cargo metadata failed: {}\", e))?;\n         let mut pkg_by_id = FxHashMap::default();"}]}