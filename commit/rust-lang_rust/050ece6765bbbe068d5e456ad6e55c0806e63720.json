{"sha": "050ece6765bbbe068d5e456ad6e55c0806e63720", "node_id": "C_kwDOAAsO6NoAKDA1MGVjZTY3NjViYmJlMDY4ZDVlNDU2YWQ2ZTU1YzA4MDZlNjM3MjA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-14T18:26:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-14T18:26:18Z"}, "message": "Rollup merge of #104356 - RalfJung:interpret-check-mplace, r=oli-obk\n\ninterpret: make check_mplace public\n\nThis helps avoid code duplication in https://github.com/rust-lang/miri/pull/2661.", "tree": {"sha": "7516507a7520e8c84eadfd43af79ebe2fad0845f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7516507a7520e8c84eadfd43af79ebe2fad0845f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/050ece6765bbbe068d5e456ad6e55c0806e63720", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjcohKCRBK7hj4Ov3rIwAA96cIAGxoZvwpeLoYsn/Ou8Hzv06z\nod907tjZEhFTPd9ln+jbR7WZTpW21TaWwCl02aL6nbxbHngBCJl400iONjoKo+h+\nPkga49FViW8NPQbHcP8QpcIRRRQvnrXhKm7MEsHNuqREXGjCwSdzy8hd21VXqXMv\nWAQs9FyAQRZ4BcVsr7Bz4HwJeMROn2em54gcocBsc7hH/OGgXfg0SEAMvkjJ5qth\nL9lWfob08cB4pC0nWLuinLNN85C/4sgev5f/u1qjV1zc12sgAnxbyWrVhFJf4Bfg\nxbjcsJGP0hen3NFM8Cb2BIyg+9k8d2Fr5SJ6lP6J19mIQL+T+k36liccxzP5BZU=\n=2GK1\n-----END PGP SIGNATURE-----\n", "payload": "tree 7516507a7520e8c84eadfd43af79ebe2fad0845f\nparent aa29a8b4c71c18f736ddf0848ff388642861a419\nparent 7982d6ac6407040ba22bad707bd6f3ce88a6c7dc\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1668450378 +0100\ncommitter GitHub <noreply@github.com> 1668450378 +0100\n\nRollup merge of #104356 - RalfJung:interpret-check-mplace, r=oli-obk\n\ninterpret: make check_mplace public\n\nThis helps avoid code duplication in https://github.com/rust-lang/miri/pull/2661.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/050ece6765bbbe068d5e456ad6e55c0806e63720", "html_url": "https://github.com/rust-lang/rust/commit/050ece6765bbbe068d5e456ad6e55c0806e63720", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/050ece6765bbbe068d5e456ad6e55c0806e63720/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa29a8b4c71c18f736ddf0848ff388642861a419", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa29a8b4c71c18f736ddf0848ff388642861a419", "html_url": "https://github.com/rust-lang/rust/commit/aa29a8b4c71c18f736ddf0848ff388642861a419"}, {"sha": "7982d6ac6407040ba22bad707bd6f3ce88a6c7dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7982d6ac6407040ba22bad707bd6f3ce88a6c7dc", "html_url": "https://github.com/rust-lang/rust/commit/7982d6ac6407040ba22bad707bd6f3ce88a6c7dc"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "29d2312612ea9fb8fa5d5dc7e5de03b54baa5320", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/050ece6765bbbe068d5e456ad6e55c0806e63720/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050ece6765bbbe068d5e456ad6e55c0806e63720/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=050ece6765bbbe068d5e456ad6e55c0806e63720", "patch": "@@ -316,8 +316,7 @@ where\n         Ok(MPlaceTy { mplace, layout, align })\n     }\n \n-    /// Take an operand, representing a pointer, and dereference it to a place -- that\n-    /// will always be a MemPlace.  Lives in `place.rs` because it creates a place.\n+    /// Take an operand, representing a pointer, and dereference it to a place.\n     #[instrument(skip(self), level = \"debug\")]\n     pub fn deref_operand(\n         &self,\n@@ -331,7 +330,7 @@ where\n         }\n \n         let mplace = self.ref_to_mplace(&val)?;\n-        self.check_mplace_access(mplace, CheckInAllocMsg::DerefTest)?;\n+        self.check_mplace(mplace)?;\n         Ok(mplace)\n     }\n \n@@ -358,17 +357,18 @@ where\n     }\n \n     /// Check if this mplace is dereferenceable and sufficiently aligned.\n-    fn check_mplace_access(\n-        &self,\n-        mplace: MPlaceTy<'tcx, M::Provenance>,\n-        msg: CheckInAllocMsg,\n-    ) -> InterpResult<'tcx> {\n+    pub fn check_mplace(&self, mplace: MPlaceTy<'tcx, M::Provenance>) -> InterpResult<'tcx> {\n         let (size, align) = self\n             .size_and_align_of_mplace(&mplace)?\n             .unwrap_or((mplace.layout.size, mplace.layout.align.abi));\n         assert!(mplace.align <= align, \"dynamic alignment less strict than static one?\");\n         let align = M::enforce_alignment(self).then_some(align);\n-        self.check_ptr_access_align(mplace.ptr, size, align.unwrap_or(Align::ONE), msg)?;\n+        self.check_ptr_access_align(\n+            mplace.ptr,\n+            size,\n+            align.unwrap_or(Align::ONE),\n+            CheckInAllocMsg::DerefTest,\n+        )?;\n         Ok(())\n     }\n "}]}