{"sha": "44b0fe8ec7360fcf78bf0a0b77d3394d48cc83f1", "node_id": "C_kwDOAAsO6NoAKDQ0YjBmZThlYzczNjBmY2Y3OGJmMGEwYjc3ZDMzOTRkNDhjYzgzZjE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-02T16:34:28Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-02T22:44:26Z"}, "message": "cleanup", "tree": {"sha": "9bb6ae763e55f7c7193904f9c0d38b6307f6b859", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bb6ae763e55f7c7193904f9c0d38b6307f6b859"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44b0fe8ec7360fcf78bf0a0b77d3394d48cc83f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44b0fe8ec7360fcf78bf0a0b77d3394d48cc83f1", "html_url": "https://github.com/rust-lang/rust/commit/44b0fe8ec7360fcf78bf0a0b77d3394d48cc83f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44b0fe8ec7360fcf78bf0a0b77d3394d48cc83f1/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aeb5d6491246fcf53d6cb11bb3035d30580570e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/aeb5d6491246fcf53d6cb11bb3035d30580570e7", "html_url": "https://github.com/rust-lang/rust/commit/aeb5d6491246fcf53d6cb11bb3035d30580570e7"}], "stats": {"total": 81, "additions": 49, "deletions": 32}, "files": [{"sha": "33cbf74f5e467e966e738c8b942be736d82fcef8", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 44, "deletions": 31, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/44b0fe8ec7360fcf78bf0a0b77d3394d48cc83f1/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b0fe8ec7360fcf78bf0a0b77d3394d48cc83f1/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=44b0fe8ec7360fcf78bf0a0b77d3394d48cc83f1", "patch": "@@ -5,6 +5,7 @@ mod source_to_def;\n use std::{cell::RefCell, fmt};\n \n use base_db::{FileId, FileRange};\n+use either::Either;\n use hir_def::{\n     body,\n     resolver::{self, HasResolver, Resolver, TypeNs},\n@@ -909,42 +910,54 @@ impl<'db> SemanticsImpl<'db> {\n             return None;\n         }\n \n-        let attr_def =\n-            ast::Attr::to_def(self, self.find_file(attr.syntax()).with_value(attr.clone()))?;\n-\n-        let mut derive_paths = attr_def.parse_path_comma_token_tree()?;\n-        let derives = self.resolve_derive_macro(&attr)?;\n+        let file = self.find_file(attr.syntax());\n+        let adt = attr.syntax().parent().and_then(ast::Adt::cast)?;\n \n-        let derive_idx = tt\n-            .syntax()\n-            .children_with_tokens()\n-            .filter_map(SyntaxElement::into_token)\n-            .take_while(|tok| tok != syntax)\n-            .filter(|t| t.kind() == T![,])\n-            .count();\n-        let path_segment_idx = syntax\n-            .siblings_with_tokens(Direction::Prev)\n-            .filter_map(SyntaxElement::into_token)\n-            .take_while(|tok| matches!(tok.kind(), T![:] | T![ident]))\n-            .filter(|tok| tok.kind() == T![ident])\n-            .count();\n-\n-        let mut mod_path = derive_paths.nth(derive_idx)?;\n-\n-        if path_segment_idx < mod_path.len() {\n-            // the path for the given ident is a qualifier, resolve to module if possible\n-            while path_segment_idx < mod_path.len() {\n-                mod_path.pop_segment();\n+        let res = self.with_ctx(|ctx| {\n+            let attr_def = ctx.attr_to_def(file.with_value(attr.clone()))?;\n+            let derives = ctx\n+                .attr_to_derive_macro_call(file.with_value(&adt), file.with_value(attr.clone()))?;\n+\n+            let mut derive_paths = attr_def.parse_path_comma_token_tree()?;\n+\n+            let derive_idx = tt\n+                .syntax()\n+                .children_with_tokens()\n+                .filter_map(SyntaxElement::into_token)\n+                .take_while(|tok| tok != syntax)\n+                .filter(|t| t.kind() == T![,])\n+                .count();\n+            let path_segment_idx = syntax\n+                .siblings_with_tokens(Direction::Prev)\n+                .filter_map(SyntaxElement::into_token)\n+                .take_while(|tok| matches!(tok.kind(), T![:] | T![ident]))\n+                .filter(|tok| tok.kind() == T![ident])\n+                .count();\n+\n+            let mut mod_path = derive_paths.nth(derive_idx)?;\n+\n+            if path_segment_idx < mod_path.len() {\n+                // the path for the given ident is a qualifier, resolve to module if possible\n+                while path_segment_idx < mod_path.len() {\n+                    mod_path.pop_segment();\n+                }\n+                Some(Either::Left(mod_path))\n+            } else {\n+                // otherwise fetch the derive\n+                Some(Either::Right(derives[derive_idx]))\n             }\n-            resolve_hir_path(\n+        })?;\n+\n+        match res {\n+            Either::Left(path) => resolve_hir_path(\n                 self.db,\n                 &self.scope(attr.syntax()).resolver,\n-                &Path::from_known_path(mod_path, []),\n+                &Path::from_known_path(path, []),\n             )\n-            .filter(|res| matches!(res, PathResolution::Def(ModuleDef::Module(_))))\n-        } else {\n-            // otherwise fetch the derive\n-            derives.get(derive_idx)?.map(PathResolution::Macro)\n+            .filter(|res| matches!(res, PathResolution::Def(ModuleDef::Module(_)))),\n+            Either::Right(derive) => derive\n+                .map(|call| MacroDef { id: self.db.lookup_intern_macro_call(call).def })\n+                .map(PathResolution::Macro),\n         }\n     }\n "}, {"sha": "ca87b501aa8f5b7e2756ae214ce408491acd91ed", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44b0fe8ec7360fcf78bf0a0b77d3394d48cc83f1/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b0fe8ec7360fcf78bf0a0b77d3394d48cc83f1/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=44b0fe8ec7360fcf78bf0a0b77d3394d48cc83f1", "patch": "@@ -746,7 +746,11 @@ impl Attr {\n             })\n             .collect::<Vec<_>>();\n \n-        return Some(paths.into_iter());\n+        Some(paths.into_iter())\n+    }\n+\n+    pub fn path(&self) -> &ModPath {\n+        &self.path\n     }\n \n     pub fn string_value(&self) -> Option<&SmolStr> {"}]}