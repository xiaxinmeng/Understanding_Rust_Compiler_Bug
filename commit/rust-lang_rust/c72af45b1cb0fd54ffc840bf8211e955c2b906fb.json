{"sha": "c72af45b1cb0fd54ffc840bf8211e955c2b906fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MmFmNDViMWNiMGZkNTRmZmM4NDBiZjgyMTFlOTU1YzJiOTA2ZmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-06T11:13:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-06T11:13:57Z"}, "message": "Auto merge of #1209 - RalfJung:track-alloc-id, r=oli-obk\n\nAdd option to print when an AllocId gets created\n\nr? @oli-obk", "tree": {"sha": "94ad2697463c455d74852dc0a809359f8cc64e64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94ad2697463c455d74852dc0a809359f8cc64e64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c72af45b1cb0fd54ffc840bf8211e955c2b906fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c72af45b1cb0fd54ffc840bf8211e955c2b906fb", "html_url": "https://github.com/rust-lang/rust/commit/c72af45b1cb0fd54ffc840bf8211e955c2b906fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c72af45b1cb0fd54ffc840bf8211e955c2b906fb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af451e2b6568596f63fe81e2667d323091b0c613", "url": "https://api.github.com/repos/rust-lang/rust/commits/af451e2b6568596f63fe81e2667d323091b0c613", "html_url": "https://github.com/rust-lang/rust/commit/af451e2b6568596f63fe81e2667d323091b0c613"}, {"sha": "ade4c4e7331fcff40643c1666ca89078b84b125a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ade4c4e7331fcff40643c1666ca89078b84b125a", "html_url": "https://github.com/rust-lang/rust/commit/ade4c4e7331fcff40643c1666ca89078b84b125a"}], "stats": {"total": 86, "additions": 53, "deletions": 33}, "files": [{"sha": "936da469f599c26a390c492961b853e6aab68076", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c72af45b1cb0fd54ffc840bf8211e955c2b906fb/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c72af45b1cb0fd54ffc840bf8211e955c2b906fb/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c72af45b1cb0fd54ffc840bf8211e955c2b906fb", "patch": "@@ -180,6 +180,8 @@ Several `-Z` flags are relevant for Miri:\n   is popped from a borrow stack (which is where the tag becomes invalid and any\n   future use of it will error).  This helps you in finding out why UB is\n   happening and where in your code would be a good place to look for it.\n+* `-Zmiri-track-alloc-id=<id>` shows a backtrace when the given allocation is\n+  being allocated.  This helps in debugging memory leaks.\n \n Moreover, Miri recognizes some environment variables:\n "}, {"sha": "b478a7d23eb982198935b4ae2c9c80882bd5a37f", "filename": "benches/helpers/miri_helper.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c72af45b1cb0fd54ffc840bf8211e955c2b906fb/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72af45b1cb0fd54ffc840bf8211e955c2b906fb/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=c72af45b1cb0fd54ffc840bf8211e955c2b906fb", "patch": "@@ -29,16 +29,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls<'_> {\n                 tcx.entry_fn(LOCAL_CRATE).expect(\"no main or start function found\");\n \n             self.bencher.iter(|| {\n-                let config = miri::MiriConfig {\n-                    validate: true,\n-                    stacked_borrows: true,\n-                    communicate: false,\n-                    ignore_leaks: false,\n-                    excluded_env_vars: vec![],\n-                    args: vec![],\n-                    seed: None,\n-                    tracked_pointer_tag: None,\n-                };\n+                let config = miri::MiriConfig::default();\n                 eval_main(tcx, entry_def_id, config);\n             });\n         });"}, {"sha": "509a1592152d045fadbe03e6a34693b6847b822e", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c72af45b1cb0fd54ffc840bf8211e955c2b906fb/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72af45b1cb0fd54ffc840bf8211e955c2b906fb/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=c72af45b1cb0fd54ffc840bf8211e955c2b906fb", "patch": "@@ -46,16 +46,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                                 .iter()\n                                 .any(|attr| attr.check_name(rustc_span::symbol::sym::test))\n                             {\n-                                let config = MiriConfig {\n-                                    validate: true,\n-                                    stacked_borrows: true,\n-                                    communicate: false,\n-                                    ignore_leaks: false,\n-                                    excluded_env_vars: vec![],\n-                                    args: vec![],\n-                                    seed: None,\n-                                    tracked_pointer_tag: None,\n-                                };\n+                                let config = MiriConfig::default();\n                                 let did = self.0.hir().body_owner_def_id(body_id);\n                                 println!(\"running test: {}\", self.0.def_path_debug_str(did));\n                                 miri::eval_main(self.0, did, config);\n@@ -68,16 +59,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                 }\n                 tcx.hir().krate().visit_all_item_likes(&mut Visitor(tcx));\n             } else if let Some((entry_def_id, _)) = tcx.entry_fn(LOCAL_CRATE) {\n-                let config = MiriConfig {\n-                    validate: true,\n-                    stacked_borrows: true,\n-                    communicate: false,\n-                    ignore_leaks: false,\n-                    excluded_env_vars: vec![],\n-                    args: vec![],\n-                    seed: None,\n-                    tracked_pointer_tag: None,\n-                };\n+                let config = MiriConfig::default();\n                 miri::eval_main(tcx, entry_def_id, config);\n \n                 compiler.session().abort_if_errors();"}, {"sha": "d2709643237f168bb0b2ec7c722ac7778796058b", "filename": "src/bin/miri.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c72af45b1cb0fd54ffc840bf8211e955c2b906fb/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72af45b1cb0fd54ffc840bf8211e955c2b906fb/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=c72af45b1cb0fd54ffc840bf8211e955c2b906fb", "patch": "@@ -135,6 +135,7 @@ fn main() {\n     let mut ignore_leaks = false;\n     let mut seed: Option<u64> = None;\n     let mut tracked_pointer_tag: Option<miri::PtrId> = None;\n+    let mut tracked_alloc_id: Option<miri::AllocId> = None;\n     let mut rustc_args = vec![];\n     let mut miri_args = vec![];\n     let mut after_dashdash = false;\n@@ -206,6 +207,17 @@ fn main() {\n                         panic!(\"-Zmiri-track-pointer-tag must be a nonzero id\");\n                     }\n                 }\n+                arg if arg.starts_with(\"-Zmiri-track-alloc-id=\") => {\n+                    let id: u64 = match arg.trim_start_matches(\"-Zmiri-track-alloc-id=\").parse()\n+                    {\n+                        Ok(id) => id,\n+                        Err(err) => panic!(\n+                            \"-Zmiri-track-alloc-id requires a valid `u64` as the argument: {}\",\n+                            err\n+                        ),\n+                    };\n+                    tracked_alloc_id = Some(miri::AllocId(id));\n+                }\n                 _ => {\n                     rustc_args.push(arg);\n                 }\n@@ -240,6 +252,7 @@ fn main() {\n         seed,\n         args: miri_args,\n         tracked_pointer_tag,\n+        tracked_alloc_id,\n     };\n     rustc_driver::install_ice_hook();\n     let result = rustc_driver::catch_fatal_errors(move || {"}, {"sha": "fb6598495af5e5da382aeffed877415b4b95e79e", "filename": "src/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c72af45b1cb0fd54ffc840bf8211e955c2b906fb/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72af45b1cb0fd54ffc840bf8211e955c2b906fb/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=c72af45b1cb0fd54ffc840bf8211e955c2b906fb", "patch": "@@ -6,6 +6,7 @@ use crate::*;\n /// Miri specific diagnostics\n pub enum NonHaltingDiagnostic {\n     PoppedTrackedPointerTag(Item),\n+    CreatedAlloc(AllocId),\n }\n \n /// Emit a custom diagnostic without going through the miri-engine machinery\n@@ -97,9 +98,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_ref();\n         DIAGNOSTICS.with(|diagnostics| {\n             for e in diagnostics.borrow_mut().drain(..) {\n+                use NonHaltingDiagnostic::*;\n                 let msg = match e {\n-                    NonHaltingDiagnostic::PoppedTrackedPointerTag(item) =>\n+                    PoppedTrackedPointerTag(item) =>\n                         format!(\"popped tracked tag for item {:?}\", item),\n+                    CreatedAlloc(AllocId(id)) =>\n+                        format!(\"created allocation with id {}\", id),\n                 };\n                 report_msg(this, msg, false);\n             }"}, {"sha": "1981a8d1e03e919f848a005e7b3c7b0428a0900f", "filename": "src/eval.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c72af45b1cb0fd54ffc840bf8211e955c2b906fb/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72af45b1cb0fd54ffc840bf8211e955c2b906fb/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=c72af45b1cb0fd54ffc840bf8211e955c2b906fb", "patch": "@@ -30,6 +30,24 @@ pub struct MiriConfig {\n     pub seed: Option<u64>,\n     /// The stacked borrow id to report about\n     pub tracked_pointer_tag: Option<PtrId>,\n+    /// The allocation id to report about.\n+    pub tracked_alloc_id: Option<AllocId>,\n+}\n+\n+impl Default for MiriConfig {\n+    fn default() -> MiriConfig {\n+        MiriConfig {\n+            validate: true,\n+            stacked_borrows: true,\n+            communicate: false,\n+            ignore_leaks: false,\n+            excluded_env_vars: vec![],\n+            args: vec![],\n+            seed: None,\n+            tracked_pointer_tag: None,\n+            tracked_alloc_id: None,\n+        }\n+    }\n }\n \n /// Details of premature program termination.\n@@ -55,6 +73,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n             StdRng::seed_from_u64(config.seed.unwrap_or(0)),\n             config.stacked_borrows,\n             config.tracked_pointer_tag,\n+            config.tracked_alloc_id,\n         ),\n     );\n     // Complete initialization."}, {"sha": "d15e290cbfdc9982be5fc995fdd5467686cdc72e", "filename": "src/machine.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c72af45b1cb0fd54ffc840bf8211e955c2b906fb/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72af45b1cb0fd54ffc840bf8211e955c2b906fb/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=c72af45b1cb0fd54ffc840bf8211e955c2b906fb", "patch": "@@ -75,15 +75,19 @@ pub struct MemoryExtra {\n     pub intptrcast: intptrcast::MemoryExtra,\n \n     /// Mapping extern static names to their canonical allocation.\n-    pub(crate) extern_statics: FxHashMap<Symbol, AllocId>,\n+    extern_statics: FxHashMap<Symbol, AllocId>,\n \n     /// The random number generator used for resolving non-determinism.\n     /// Needs to be queried by ptr_to_int, hence needs interior mutability.\n     pub(crate) rng: RefCell<StdRng>,\n+\n+    /// An allocation ID to report when it is being allocated\n+    /// (helps for debugging memory leaks).\n+    tracked_alloc_id: Option<AllocId>,\n }\n \n impl MemoryExtra {\n-    pub fn new(rng: StdRng, stacked_borrows: bool, tracked_pointer_tag: Option<PtrId>) -> Self {\n+    pub fn new(rng: StdRng, stacked_borrows: bool, tracked_pointer_tag: Option<PtrId>, tracked_alloc_id: Option<AllocId>) -> Self {\n         let stacked_borrows = if stacked_borrows {\n             Some(Rc::new(RefCell::new(stacked_borrows::GlobalState::new(tracked_pointer_tag))))\n         } else {\n@@ -94,6 +98,7 @@ impl MemoryExtra {\n             intptrcast: Default::default(),\n             extern_statics: FxHashMap::default(),\n             rng: RefCell::new(rng),\n+            tracked_alloc_id,\n         }\n     }\n \n@@ -329,6 +334,10 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         alloc: Cow<'b, Allocation>,\n         kind: Option<MemoryKind<Self::MemoryKinds>>,\n     ) -> (Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>, Self::PointerTag) {\n+        if Some(id) == memory_extra.tracked_alloc_id {\n+            register_diagnostic(NonHaltingDiagnostic::CreatedAlloc(id));\n+        }\n+\n         let kind = kind.expect(\"we set our STATIC_KIND so this cannot be None\");\n         let alloc = alloc.into_owned();\n         let (stacks, base_tag) ="}]}