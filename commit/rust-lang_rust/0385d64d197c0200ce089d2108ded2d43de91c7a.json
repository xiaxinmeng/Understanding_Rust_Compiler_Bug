{"sha": "0385d64d197c0200ce089d2108ded2d43de91c7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzODVkNjRkMTk3YzAyMDBjZTA4OWQyMTA4ZGVkMmQ0M2RlOTFjN2E=", "commit": {"author": {"name": "Samy Kacimi", "email": "samy.kacimi@protonmail.ch", "date": "2019-07-18T22:05:23Z"}, "committer": {"name": "Samy Kacimi", "email": "samy.kacimi@protonmail.ch", "date": "2019-07-21T09:47:24Z"}, "message": "normalize use of backticks in compiler messages for librustc_lint", "tree": {"sha": "b58577f7746a1a6f6bccbf2e90504b29740456aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b58577f7746a1a6f6bccbf2e90504b29740456aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0385d64d197c0200ce089d2108ded2d43de91c7a", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEExrhwoK6DmrCETV5+4ilOki9MVuUFAl00NKwACgkQ4ilOki9M\nVuV+DwwAh77EPZFfYFnw77wbOmoqZLam/Q4Dx0Nw/wAFqYey0dZe13q3KdNXMgzM\nrixWVfxQWj7ctQBQIlyIsASyKDnam2o0SY6J7bp8rScwlfyF7kITS9rCVxmXS2XB\n8w/9nLsqACTBoAu5HlzgyIf1kGII4kuVK4rHHi/LkC/027rBHpk4WJE2gH+JotIq\nKB7htHpHxSLTIiJSfLAc3GsD6gQamzugLruIcZcT+5BV7ANFhGyz0ilYZV8zxAIY\nj6KQz9JRdwvxAcHHULXw6Q28UsjWj1zySIz3tz+cMrIpxsbpd4aUXJtNElURfbjx\nbFK1SWK/SlhV46Q8uIpR7FTbTQ7rIcBXSiose/rRCoXgbsZXufal6u3b6DumrF4N\nJtCLnjr4VEi4D4IkKmPmBgGmZAoLOjwnPTpmcAl1HOpMs0EYc5hrUxO/ob7Sr0ej\nJn7BbNc20pga755p2n1fndq0SrnyLK1aYHuildGXw4r/sa+n/j+kGOejqzV5eTlC\nhyQh48uO\n=7gKa\n-----END PGP SIGNATURE-----", "payload": "tree b58577f7746a1a6f6bccbf2e90504b29740456aa\nparent 1301422a6c2e8916560b8cc2f0564f38d8858a75\nauthor Samy Kacimi <samy.kacimi@protonmail.ch> 1563487523 +0200\ncommitter Samy Kacimi <samy.kacimi@protonmail.ch> 1563702444 +0200\n\nnormalize use of backticks in compiler messages for librustc_lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0385d64d197c0200ce089d2108ded2d43de91c7a", "html_url": "https://github.com/rust-lang/rust/commit/0385d64d197c0200ce089d2108ded2d43de91c7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0385d64d197c0200ce089d2108ded2d43de91c7a/comments", "author": null, "committer": null, "parents": [{"sha": "1301422a6c2e8916560b8cc2f0564f38d8858a75", "url": "https://api.github.com/repos/rust-lang/rust/commits/1301422a6c2e8916560b8cc2f0564f38d8858a75", "html_url": "https://github.com/rust-lang/rust/commit/1301422a6c2e8916560b8cc2f0564f38d8858a75"}], "stats": {"total": 130, "additions": 65, "deletions": 65}, "files": [{"sha": "4105e030477f13ded267b7abec7b9851795a5775", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=0385d64d197c0200ce089d2108ded2d43de91c7a", "patch": "@@ -591,7 +591,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDebugImplementations {\n         if !self.impling_types.as_ref().unwrap().contains(&item.hir_id) {\n             cx.span_lint(MISSING_DEBUG_IMPLEMENTATIONS,\n                          item.span,\n-                         \"type does not implement `fmt::Debug`; consider adding #[derive(Debug)] \\\n+                         \"type does not implement `fmt::Debug`; consider adding `#[derive(Debug)]` \\\n                           or a manual implementation\")\n         }\n     }\n@@ -867,7 +867,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n                 if attr::contains_name(&it.attrs, sym::no_mangle) {\n                     // Const items do not refer to a particular location in memory, and therefore\n                     // don't have anything to attach a symbol to\n-                    let msg = \"const items should never be #[no_mangle]\";\n+                    let msg = \"const items should never be `#[no_mangle]`\";\n                     let mut err = cx.struct_span_lint(NO_MANGLE_CONST_ITEMS, it.span, msg);\n \n                     // account for \"pub const\" (#45562)\n@@ -1358,7 +1358,7 @@ impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n declare_lint! {\n     UNNAMEABLE_TEST_ITEMS,\n     Warn,\n-    \"detects an item that cannot be named being marked as #[test_case]\",\n+    \"detects an item that cannot be named being marked as `#[test_case]`\",\n     report_in_external_macro: true\n }\n "}, {"sha": "c7a8c2b892351839dedd8533b4dd31b331f1152f", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=0385d64d197c0200ce089d2108ded2d43de91c7a", "patch": "@@ -481,9 +481,9 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     store.register_removed(\"resolve_trait_on_defaulted_unit\",\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/48950\");\n     store.register_removed(\"private_no_mangle_fns\",\n-        \"no longer a warning, #[no_mangle] functions always exported\");\n+        \"no longer a warning, `#[no_mangle]` functions always exported\");\n     store.register_removed(\"private_no_mangle_statics\",\n-        \"no longer a warning, #[no_mangle] statics always exported\");\n+        \"no longer a warning, `#[no_mangle]` statics always exported\");\n     store.register_removed(\"bad_repr\",\n         \"replaced with a generic attribute input check\");\n     store.register_removed(\"duplicate_matcher_binding_name\","}, {"sha": "4cccaa942b7429d929b640203b64527e1c50987d", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=0385d64d197c0200ce089d2108ded2d43de91c7a", "patch": "@@ -24,7 +24,7 @@ use log::debug;\n declare_lint! {\n     pub UNUSED_MUST_USE,\n     Warn,\n-    \"unused result of a type flagged as #[must_use]\",\n+    \"unused result of a type flagged as `#[must_use]`\",\n     report_in_external_macro: true\n }\n \n@@ -316,7 +316,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAttributes {\n \n         let name = attr.name_or_empty();\n         if !attr::is_used(attr) {\n-            debug!(\"Emitting warning for: {:?}\", attr);\n+            debug!(\"emitting warning for: {:?}\", attr);\n             cx.span_lint(UNUSED_ATTRIBUTES, attr.span, \"unused attribute\");\n             // Is it a builtin attribute that must be used at the crate level?\n             let known_crate = attr_info.map(|&&(_, ty, ..)| {\n@@ -332,7 +332,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAttributes {\n                 let msg = match attr.style {\n                     ast::AttrStyle::Outer => {\n                         \"crate-level attribute should be an inner attribute: add an exclamation \\\n-                         mark: #![foo]\"\n+                         mark: `#![foo]`\"\n                     }\n                     ast::AttrStyle::Inner => \"crate-level attribute should be in the root module\",\n                 };\n@@ -570,9 +570,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAllocation {\n             if let adjustment::Adjust::Borrow(adjustment::AutoBorrow::Ref(_, m)) = adj.kind {\n                 let msg = match m {\n                     adjustment::AutoBorrowMutability::Immutable =>\n-                        \"unnecessary allocation, use & instead\",\n+                        \"unnecessary allocation, use `&` instead\",\n                     adjustment::AutoBorrowMutability::Mutable { .. }=>\n-                        \"unnecessary allocation, use &mut instead\"\n+                        \"unnecessary allocation, use `&mut` instead\"\n                 };\n                 cx.span_lint(UNUSED_ALLOCATION, e.span, msg);\n             }"}, {"sha": "64a67f6e16036c86290c4b082f1544c99170481d", "filename": "src/test/ui-fulldeps/plugin-attr-register-deny.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.stderr?ref=0385d64d197c0200ce089d2108ded2d43de91c7a", "patch": "@@ -10,7 +10,7 @@ note: lint level defined here\n LL | #![deny(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+error: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/plugin-attr-register-deny.rs:14:5\n    |\n LL |     #[bar]"}, {"sha": "94757c5a35af2628020c2c063933202365c7192e", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=0385d64d197c0200ce089d2108ded2d43de91c7a", "patch": "@@ -632,7 +632,7 @@ warning: unused attribute\n LL |     #[no_std] fn f() { }\n    |     ^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:483:5\n    |\n LL |     #[no_std] fn f() { }\n@@ -644,7 +644,7 @@ warning: unused attribute\n LL |     #[no_std] struct S;\n    |     ^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:487:5\n    |\n LL |     #[no_std] struct S;\n@@ -656,7 +656,7 @@ warning: unused attribute\n LL |     #[no_std] type T = S;\n    |     ^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:491:5\n    |\n LL |     #[no_std] type T = S;\n@@ -668,7 +668,7 @@ warning: unused attribute\n LL |     #[no_std] impl S { }\n    |     ^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:495:5\n    |\n LL |     #[no_std] impl S { }\n@@ -680,7 +680,7 @@ warning: unused attribute\n LL | #[no_std]\n    | ^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:475:1\n    |\n LL | #[no_std]\n@@ -704,7 +704,7 @@ warning: unused attribute\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:638:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n@@ -716,7 +716,7 @@ warning: unused attribute\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:642:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n@@ -728,7 +728,7 @@ warning: unused attribute\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:646:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n@@ -740,7 +740,7 @@ warning: unused attribute\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:650:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n@@ -752,7 +752,7 @@ warning: unused attribute\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:630:1\n    |\n LL | #[crate_name = \"0900\"]\n@@ -776,7 +776,7 @@ warning: unused attribute\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:663:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n@@ -788,7 +788,7 @@ warning: unused attribute\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:667:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n@@ -800,7 +800,7 @@ warning: unused attribute\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:671:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n@@ -812,7 +812,7 @@ warning: unused attribute\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:675:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n@@ -824,7 +824,7 @@ warning: unused attribute\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:655:1\n    |\n LL | #[crate_type = \"0800\"]\n@@ -848,7 +848,7 @@ warning: unused attribute\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:688:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n@@ -860,7 +860,7 @@ warning: unused attribute\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:692:5\n    |\n LL |     #[feature(x0600)] struct S;\n@@ -872,7 +872,7 @@ warning: unused attribute\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:696:5\n    |\n LL |     #[feature(x0600)] type T = S;\n@@ -884,7 +884,7 @@ warning: unused attribute\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:700:5\n    |\n LL |     #[feature(x0600)] impl S { }\n@@ -896,7 +896,7 @@ warning: unused attribute\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:680:1\n    |\n LL | #[feature(x0600)]\n@@ -920,7 +920,7 @@ warning: unused attribute\n LL |     #[no_main] fn f() { }\n    |     ^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:714:5\n    |\n LL |     #[no_main] fn f() { }\n@@ -932,7 +932,7 @@ warning: unused attribute\n LL |     #[no_main] struct S;\n    |     ^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:718:5\n    |\n LL |     #[no_main] struct S;\n@@ -944,7 +944,7 @@ warning: unused attribute\n LL |     #[no_main] type T = S;\n    |     ^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:722:5\n    |\n LL |     #[no_main] type T = S;\n@@ -956,7 +956,7 @@ warning: unused attribute\n LL |     #[no_main] impl S { }\n    |     ^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:726:5\n    |\n LL |     #[no_main] impl S { }\n@@ -968,7 +968,7 @@ warning: unused attribute\n LL | #[no_main]\n    | ^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:706:1\n    |\n LL | #[no_main]\n@@ -992,7 +992,7 @@ warning: unused attribute\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:752:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n@@ -1004,7 +1004,7 @@ warning: unused attribute\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:756:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n@@ -1016,7 +1016,7 @@ warning: unused attribute\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:760:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n@@ -1028,7 +1028,7 @@ warning: unused attribute\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:764:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n@@ -1040,7 +1040,7 @@ warning: unused attribute\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:744:1\n    |\n LL | #[recursion_limit=\"0200\"]\n@@ -1064,7 +1064,7 @@ warning: unused attribute\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:777:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n@@ -1076,7 +1076,7 @@ warning: unused attribute\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:781:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n@@ -1088,7 +1088,7 @@ warning: unused attribute\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:785:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n@@ -1100,7 +1100,7 @@ warning: unused attribute\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:789:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n@@ -1112,7 +1112,7 @@ warning: unused attribute\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:769:1\n    |\n LL | #[type_length_limit=\"0100\"]"}, {"sha": "36714c39b315a7650c59eab3deef446884672a8c", "filename": "src/test/ui/invalid/invalid-plugin-attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui%2Finvalid%2Finvalid-plugin-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui%2Finvalid%2Finvalid-plugin-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-plugin-attr.stderr?ref=0385d64d197c0200ce089d2108ded2d43de91c7a", "patch": "@@ -10,7 +10,7 @@ note: lint level defined here\n LL | #![deny(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+error: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/invalid-plugin-attr.rs:4:1\n    |\n LL | #[plugin(bla)]"}, {"sha": "ac700fbd0464392744b4258d4df22547fd773def", "filename": "src/test/ui/issues/issue-45562.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui%2Fissues%2Fissue-45562.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui%2Fissues%2Fissue-45562.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45562.fixed?ref=0385d64d197c0200ce089d2108ded2d43de91c7a", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n #[no_mangle] pub static RAH: usize = 5;\n-//~^ ERROR const items should never be #[no_mangle]\n+//~^ ERROR const items should never be `#[no_mangle]`\n \n fn main() {}"}, {"sha": "eabb5a5cecf81208295c38766bcc18b1138db9b2", "filename": "src/test/ui/issues/issue-45562.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui%2Fissues%2Fissue-45562.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui%2Fissues%2Fissue-45562.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45562.rs?ref=0385d64d197c0200ce089d2108ded2d43de91c7a", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n #[no_mangle] pub const RAH: usize = 5;\n-//~^ ERROR const items should never be #[no_mangle]\n+//~^ ERROR const items should never be `#[no_mangle]`\n \n fn main() {}"}, {"sha": "be259d3f8a49e0399afeed8356948ddcef8c8614", "filename": "src/test/ui/issues/issue-45562.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui%2Fissues%2Fissue-45562.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui%2Fissues%2Fissue-45562.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45562.stderr?ref=0385d64d197c0200ce089d2108ded2d43de91c7a", "patch": "@@ -1,4 +1,4 @@\n-error: const items should never be #[no_mangle]\n+error: const items should never be `#[no_mangle]`\n   --> $DIR/issue-45562.rs:3:14\n    |\n LL | #[no_mangle] pub const RAH: usize = 5;"}, {"sha": "cd4a89f91c4cc25954dc27f285974cdf0ae6bc5f", "filename": "src/test/ui/lint/lint-misplaced-attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui%2Flint%2Flint-misplaced-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui%2Flint%2Flint-misplaced-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-misplaced-attr.stderr?ref=0385d64d197c0200ce089d2108ded2d43de91c7a", "patch": "@@ -22,7 +22,7 @@ error: unused attribute\n LL | #[crate_type = \"bin\"] fn main() {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n-error: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+error: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/lint-misplaced-attr.rs:11:1\n    |\n LL | #[crate_type = \"bin\"] fn main() {}"}, {"sha": "f260fc32303cff08343c89ba768a4fc208b25883", "filename": "src/test/ui/lint/lint-unexported-no-mangle.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.rs?ref=0385d64d197c0200ce089d2108ded2d43de91c7a", "patch": "@@ -6,10 +6,10 @@ fn foo() {\n \n #[allow(dead_code)]\n #[no_mangle]\n-const FOO: u64 = 1; //~ ERROR const items should never be #[no_mangle]\n+const FOO: u64 = 1; //~ ERROR const items should never be `#[no_mangle]`\n \n #[no_mangle]\n-pub const PUB_FOO: u64 = 1; //~ ERROR const items should never be #[no_mangle]\n+pub const PUB_FOO: u64 = 1; //~ ERROR const items should never be `#[no_mangle]`\n \n #[no_mangle]\n pub fn bar()  {"}, {"sha": "c2cbf5feaada4d8c08f93f6d7d79e582180c847a", "filename": "src/test/ui/lint/lint-unexported-no-mangle.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.stderr?ref=0385d64d197c0200ce089d2108ded2d43de91c7a", "patch": "@@ -1,12 +1,12 @@\n-warning: lint `private_no_mangle_fns` has been removed: `no longer a warning, #[no_mangle] functions always exported`\n+warning: lint `private_no_mangle_fns` has been removed: `no longer a warning, `#[no_mangle]` functions always exported`\n    |\n    = note: requested on the command line with `-F private_no_mangle_fns`\n \n-warning: lint `private_no_mangle_statics` has been removed: `no longer a warning, #[no_mangle] statics always exported`\n+warning: lint `private_no_mangle_statics` has been removed: `no longer a warning, `#[no_mangle]` statics always exported`\n    |\n    = note: requested on the command line with `-F private_no_mangle_statics`\n \n-error: const items should never be #[no_mangle]\n+error: const items should never be `#[no_mangle]`\n   --> $DIR/lint-unexported-no-mangle.rs:9:1\n    |\n LL | const FOO: u64 = 1;\n@@ -16,7 +16,7 @@ LL | const FOO: u64 = 1;\n    |\n    = note: requested on the command line with `-F no-mangle-const-items`\n \n-error: const items should never be #[no_mangle]\n+error: const items should never be `#[no_mangle]`\n   --> $DIR/lint-unexported-no-mangle.rs:12:1\n    |\n LL | pub const PUB_FOO: u64 = 1;"}, {"sha": "aa5518d1a7adcfcbf60b51945d807d9ae17d5e48", "filename": "src/test/ui/lint/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs?ref=0385d64d197c0200ce089d2108ded2d43de91c7a", "patch": "@@ -4,7 +4,7 @@\n #![feature(no_debug)]\n \n #[no_mangle] const DISCOVERY: usize = 1;\n-//~^ ERROR const items should never be #[no_mangle]\n+//~^ ERROR const items should never be `#[no_mangle]`\n //~| HELP try a static value\n \n #[no_mangle]\n@@ -20,15 +20,15 @@ mod badlands {\n     // item is already `pub` (but triggered the lint because, e.g., it's in a\n     // private module). (Issue #47383)\n     #[no_mangle] pub const DAUNTLESS: bool = true;\n-    //~^ ERROR const items should never be #[no_mangle]\n+    //~^ ERROR const items should never be `#[no_mangle]`\n     //~| HELP try a static value\n     #[no_mangle] pub fn val_jean<T>() {}\n     //~^ WARN functions generic over types or consts must be mangled\n     //~| HELP remove this attribute\n \n     // ... but we can suggest just-`pub` instead of restricted\n     #[no_mangle] pub(crate) const VETAR: bool = true;\n-    //~^ ERROR const items should never be #[no_mangle]\n+    //~^ ERROR const items should never be `#[no_mangle]`\n     //~| HELP try a static value\n     #[no_mangle] pub(crate) fn crossfield<T>() {}\n     //~^ WARN functions generic over types or consts must be mangled"}, {"sha": "2042ed7553786fe6e7e760bf862304f8d43f6fbf", "filename": "src/test/ui/lint/suggestions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr?ref=0385d64d197c0200ce089d2108ded2d43de91c7a", "patch": "@@ -52,7 +52,7 @@ LL | ||             b = 1;\n    |  |____________|\n    |               help: remove this `mut`\n \n-error: const items should never be #[no_mangle]\n+error: const items should never be `#[no_mangle]`\n   --> $DIR/suggestions.rs:6:14\n    |\n LL | #[no_mangle] const DISCOVERY: usize = 1;\n@@ -83,7 +83,7 @@ LL |             Equinox { warp_factor: warp_factor } => {}\n    |\n    = note: `#[warn(non_shorthand_field_patterns)]` on by default\n \n-error: const items should never be #[no_mangle]\n+error: const items should never be `#[no_mangle]`\n   --> $DIR/suggestions.rs:22:18\n    |\n LL |     #[no_mangle] pub const DAUNTLESS: bool = true;\n@@ -99,7 +99,7 @@ LL |     #[no_mangle] pub fn val_jean<T>() {}\n    |     |\n    |     help: remove this attribute\n \n-error: const items should never be #[no_mangle]\n+error: const items should never be `#[no_mangle]`\n   --> $DIR/suggestions.rs:30:18\n    |\n LL |     #[no_mangle] pub(crate) const VETAR: bool = true;"}, {"sha": "b9530587787917b49c39848d9d424ddb2071fa2f", "filename": "src/test/ui/missing_debug_impls.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui%2Fmissing_debug_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0385d64d197c0200ce089d2108ded2d43de91c7a/src%2Ftest%2Fui%2Fmissing_debug_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing_debug_impls.stderr?ref=0385d64d197c0200ce089d2108ded2d43de91c7a", "patch": "@@ -1,4 +1,4 @@\n-error: type does not implement `fmt::Debug`; consider adding #[derive(Debug)] or a manual implementation\n+error: type does not implement `fmt::Debug`; consider adding `#[derive(Debug)]` or a manual implementation\n   --> $DIR/missing_debug_impls.rs:7:1\n    |\n LL | pub enum A {}\n@@ -10,7 +10,7 @@ note: lint level defined here\n LL | #![deny(missing_debug_implementations)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: type does not implement `fmt::Debug`; consider adding #[derive(Debug)] or a manual implementation\n+error: type does not implement `fmt::Debug`; consider adding `#[derive(Debug)]` or a manual implementation\n   --> $DIR/missing_debug_impls.rs:20:1\n    |\n LL | pub struct Foo;"}]}