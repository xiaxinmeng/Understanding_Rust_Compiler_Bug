{"sha": "43403b416907e6b965c37daa53d071e1c054a302", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNDAzYjQxNjkwN2U2Yjk2NWMzN2RhYTUzZDA3MWUxYzA1NGEzMDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-06T23:35:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-06T23:35:13Z"}, "message": "Auto merge of #30750 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #30683, #30698, #30699, #30700, #30716, #30720, #30727, #30729, #30735, #30749\n- Failed merges:", "tree": {"sha": "bc0fd4c0e4d176b750b03834b90a65209e4149f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc0fd4c0e4d176b750b03834b90a65209e4149f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43403b416907e6b965c37daa53d071e1c054a302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43403b416907e6b965c37daa53d071e1c054a302", "html_url": "https://github.com/rust-lang/rust/commit/43403b416907e6b965c37daa53d071e1c054a302", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43403b416907e6b965c37daa53d071e1c054a302/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5daa75373d870f255923aed37d99db73a661bd51", "url": "https://api.github.com/repos/rust-lang/rust/commits/5daa75373d870f255923aed37d99db73a661bd51", "html_url": "https://github.com/rust-lang/rust/commit/5daa75373d870f255923aed37d99db73a661bd51"}, {"sha": "6cca7758650ce6d3fa4ea0ecf89759278bd5e435", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cca7758650ce6d3fa4ea0ecf89759278bd5e435", "html_url": "https://github.com/rust-lang/rust/commit/6cca7758650ce6d3fa4ea0ecf89759278bd5e435"}], "stats": {"total": 104, "additions": 75, "deletions": 29}, "files": [{"sha": "7558065831ace3e52982e76bf9f849d6f7232ff2", "filename": "README.md", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/43403b416907e6b965c37daa53d071e1c054a302/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/43403b416907e6b965c37daa53d071e1c054a302/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=43403b416907e6b965c37daa53d071e1c054a302", "patch": "@@ -53,6 +53,16 @@ Read [\"Installing Rust\"] from [The Book].\n \n ### Building on Windows\n \n+There are two prominent ABIs in use on Windows: the native (MSVC) ABI used by\n+Visual Studio, and the GNU ABI used by the GCC toolchain. Which version of Rust\n+you need depends largely on what C/C++ libraries you want to interoperate with:\n+for interop with software produced by Visual Studio use the MSVC build of Rust;\n+for interop with GNU software built using the MinGW/MSYS2 toolchain use the GNU\n+build.\n+\n+\n+#### MinGW\n+\n [MSYS2](http://msys2.github.io/) can be used to easily build Rust on Windows:\n \n 1. Grab the latest MSYS2 installer and go through the installer.\n@@ -63,12 +73,15 @@ Read [\"Installing Rust\"] from [The Book].\n    ```sh\n    # Update package mirrors (may be needed if you have a fresh install of MSYS2)\n    $ pacman -Sy pacman-mirrors\n+   ```\n \n-   # Choose one based on platform: \n-   # *** see the note below ***\n-   $ pacman -S mingw-w64-i686-toolchain\n-   $ pacman -S mingw-w64-x86_64-toolchain\n+Download [MinGW from\n+here](http://mingw-w64.org/doku.php/download/mingw-builds), and choose the\n+`threads=win32,exceptions=dwarf/seh` flavor when installing. After installing,\n+add its `bin` directory to your `PATH`. This is due to #28260, in the future,\n+installing from pacman should be just fine.\n \n+   ```\n    # Make git available in MSYS2 (if not already available on path)\n    $ pacman -S git\n \n@@ -84,16 +97,19 @@ Read [\"Installing Rust\"] from [The Book].\n    $ ./configure\n    $ make && make install\n    ```\n-> ***Note:*** gcc versions >= 5 currently have issues building LLVM on Windows\n-> resulting in a segmentation fault when building Rust. In order to avoid this\n-> it may be necessary to obtain an earlier version of gcc such as 4.9.x.  \n-> Msys's `pacman` will install the latest version, so for the time being it is\n-> recommended to skip gcc toolchain installation step above and use [Mingw-Builds]\n-> project's installer instead.  Be sure to add gcc `bin` directory to the path\n-> before running `configure`.  \n-> For more information on this see issue #28260.\n-\n-[Mingw-Builds]: http://sourceforge.net/projects/mingw-w64/\n+\n+#### MSVC\n+\n+MSVC builds of Rust additionally require an installation of Visual Studio 2013\n+(or later) so `rustc` can use its linker. Make sure to check the \u201cC++ tools\u201d\n+option. In addition, `cmake` needs to be installed to build LLVM.\n+\n+With these dependencies installed, the build takes two steps:\n+\n+```sh\n+$ ./configure\n+$ make && make install\n+```\n \n ## Building Documentation\n "}, {"sha": "17eb91852664f3f69b389544caed9b091d57dc5b", "filename": "src/doc/book/error-handling.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43403b416907e6b965c37daa53d071e1c054a302/src%2Fdoc%2Fbook%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/43403b416907e6b965c37daa53d071e1c054a302/src%2Fdoc%2Fbook%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ferror-handling.md?ref=43403b416907e6b965c37daa53d071e1c054a302", "patch": "@@ -1573,11 +1573,11 @@ fn main() {\n \n     let matches = match opts.parse(&args[1..]) {\n         Ok(m)  => { m }\n-\tErr(e) => { panic!(e.to_string()) }\n+        Err(e) => { panic!(e.to_string()) }\n     };\n     if matches.opt_present(\"h\") {\n         print_usage(&program, opts);\n-\treturn;\n+        return;\n     }\n     let data_path = args[1].clone();\n     let city = args[2].clone();"}, {"sha": "75d0093b1476aff74063c962b05372672199b907", "filename": "src/doc/book/structs.md", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/43403b416907e6b965c37daa53d071e1c054a302/src%2Fdoc%2Fbook%2Fstructs.md", "raw_url": "https://github.com/rust-lang/rust/raw/43403b416907e6b965c37daa53d071e1c054a302/src%2Fdoc%2Fbook%2Fstructs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fstructs.md?ref=43403b416907e6b965c37daa53d071e1c054a302", "patch": "@@ -88,6 +88,35 @@ fn main() {\n }\n ```\n \n+Your structure can still contain `&mut` pointers, which will let\n+you do some kinds of mutation:\n+\n+```rust\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+\n+struct PointRef<'a> {\n+    x: &'a mut i32,\n+    y: &'a mut i32,\n+}\n+\n+fn main() {\n+    let mut point = Point { x: 0, y: 0 };\n+\n+    {\n+        let r = PointRef { x: &mut point.x, y: &mut point.y };\n+\n+        *r.x = 5;\n+        *r.y = 6;\n+    }\n+\n+    assert_eq!(5, point.x);\n+    assert_eq!(6, point.y);\n+}\n+```\n+\n # Update syntax\n \n A `struct` can include `..` to indicate that you want to use a copy of some"}, {"sha": "bc40eeb8dccfbc4ce2fddaaac07971e2bf91abcd", "filename": "src/doc/book/the-stack-and-the-heap.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43403b416907e6b965c37daa53d071e1c054a302/src%2Fdoc%2Fbook%2Fthe-stack-and-the-heap.md", "raw_url": "https://github.com/rust-lang/rust/raw/43403b416907e6b965c37daa53d071e1c054a302/src%2Fdoc%2Fbook%2Fthe-stack-and-the-heap.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fthe-stack-and-the-heap.md?ref=43403b416907e6b965c37daa53d071e1c054a302", "patch": "@@ -539,7 +539,7 @@ instead.\n # Which to use?\n \n So if the stack is faster and easier to manage, why do we need the heap? A big\n-reason is that Stack-allocation alone means you only have LIFO semantics for\n+reason is that Stack-allocation alone means you only have 'Last In First Out (LIFO)' semantics for\n reclaiming storage. Heap-allocation is strictly more general, allowing storage\n to be taken from and returned to the pool in arbitrary order, but at a\n complexity cost."}, {"sha": "706fe680e006669ba82cf7a5da34b79e28d528c6", "filename": "src/doc/nomicon/vec-dealloc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43403b416907e6b965c37daa53d071e1c054a302/src%2Fdoc%2Fnomicon%2Fvec-dealloc.md", "raw_url": "https://github.com/rust-lang/rust/raw/43403b416907e6b965c37daa53d071e1c054a302/src%2Fdoc%2Fnomicon%2Fvec-dealloc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fvec-dealloc.md?ref=43403b416907e6b965c37daa53d071e1c054a302", "patch": "@@ -21,7 +21,7 @@ impl<T> Drop for Vec<T> {\n             let elem_size = mem::size_of::<T>();\n             let num_bytes = elem_size * self.cap;\n             unsafe {\n-                heap::deallocate(*self.ptr, num_bytes, align);\n+                heap::deallocate(*self.ptr as *mut _, num_bytes, align);\n             }\n         }\n     }"}, {"sha": "5f71ee4437958974f7cd250d1737b9e106df7035", "filename": "src/doc/reference.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43403b416907e6b965c37daa53d071e1c054a302/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/43403b416907e6b965c37daa53d071e1c054a302/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=43403b416907e6b965c37daa53d071e1c054a302", "patch": "@@ -208,10 +208,10 @@ A _string literal_ is a sequence of any Unicode characters enclosed within two\n which must be _escaped_ by a preceding `U+005C` character (`\\`).\n \n Line-break characters are allowed in string literals. Normally they represent\n-themselves (i.e. no translation), but as a special exception, when a `U+005C`\n-character (`\\`) occurs immediately before the newline, the `U+005C` character,\n-the newline, and all whitespace at the beginning of the next line are ignored.\n-Thus `a` and `b` are equal:\n+themselves (i.e. no translation), but as a special exception, when an unescaped\n+`U+005C` character (`\\`) occurs immediately before the newline (`U+000A`), the\n+`U+005C` character, the newline, and all whitespace at the beginning of the\n+next line are ignored. Thus `a` and `b` are equal:\n \n ```rust\n let a = \"foobar\";"}, {"sha": "0fc154a0cd59199c5200ee5eebfb4057264f821c", "filename": "src/libcore/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43403b416907e6b965c37daa53d071e1c054a302/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43403b416907e6b965c37daa53d071e1c054a302/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=43403b416907e6b965c37daa53d071e1c054a302", "patch": "@@ -181,7 +181,7 @@ pub unsafe fn from_u32_unchecked(i: u32) -> char {\n ///\n /// A 'radix' here is sometimes also called a 'base'. A radix of two\n /// indicates a binary number, a radix of ten, decimal, and a radix of\n-/// sixteen, hexicdecimal, to give some common values. Arbitrary\n+/// sixteen, hexadecimal, to give some common values. Arbitrary\n /// radicum are supported.\n ///\n /// `from_digit()` will return `None` if the input is not a digit in"}, {"sha": "65ddae51b98f63ab960701eb2f9557fb2c240ce4", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43403b416907e6b965c37daa53d071e1c054a302/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43403b416907e6b965c37daa53d071e1c054a302/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=43403b416907e6b965c37daa53d071e1c054a302", "patch": "@@ -24,6 +24,8 @@ use hash::Hash;\n use hash::Hasher;\n \n /// Types that can be transferred across thread boundaries.\n+///\n+/// This trait is automatically derived when the compiler determines it's appropriate.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"send\"]\n #[rustc_on_unimplemented = \"`{Self}` cannot be sent between threads safely\"]\n@@ -219,6 +221,8 @@ pub trait Copy : Clone {\n /// wrapper around the value(s) which can be mutated when behind a `&`\n /// reference; not doing this is undefined behavior (for example,\n /// `transmute`-ing from `&T` to `&mut T` is invalid).\n+///\n+/// This trait is automatically derived when the compiler determines it's appropriate.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"sync\"]\n #[rustc_on_unimplemented = \"`{Self}` cannot be shared between threads safely\"]"}, {"sha": "801700ba673d56b163c26731366ee45917183f42", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43403b416907e6b965c37daa53d071e1c054a302/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43403b416907e6b965c37daa53d071e1c054a302/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=43403b416907e6b965c37daa53d071e1c054a302", "patch": "@@ -61,7 +61,7 @@\n //!\n //!     struct Foo { i: i32 }\n //!     struct Bar { foo: Foo  }\n-//!     fn get_i(x: &'a Bar) -> &'a i32 {\n+//!     fn get_i<'a>(x: &'a Bar) -> &'a i32 {\n //!        let foo = &x.foo; // Lifetime L1\n //!        &foo.i            // Lifetime L2\n //!     }"}, {"sha": "66f8068eae6571658645754015d5f8fd70bd9ce0", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43403b416907e6b965c37daa53d071e1c054a302/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43403b416907e6b965c37daa53d071e1c054a302/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=43403b416907e6b965c37daa53d071e1c054a302", "patch": "@@ -126,7 +126,7 @@ impl char {\n     ///\n     /// A 'radix' here is sometimes also called a 'base'. A radix of two\n     /// indicates a binary number, a radix of ten, decimal, and a radix of\n-    /// sixteen, hexicdecimal, to give some common values. Arbitrary\n+    /// sixteen, hexadecimal, to give some common values. Arbitrary\n     /// radicum are supported.\n     ///\n     /// Compared to `is_numeric()`, this function only recognizes the characters\n@@ -185,7 +185,7 @@ impl char {\n     ///\n     /// A 'radix' here is sometimes also called a 'base'. A radix of two\n     /// indicates a binary number, a radix of ten, decimal, and a radix of\n-    /// sixteen, hexicdecimal, to give some common values. Arbitrary\n+    /// sixteen, hexadecimal, to give some common values. Arbitrary\n     /// radicum are supported.\n     ///\n     /// 'Digit' is defined to be only the following characters:"}, {"sha": "242626154fc8c4066ff0c617f3bd277274aad598", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/43403b416907e6b965c37daa53d071e1c054a302/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43403b416907e6b965c37daa53d071e1c054a302/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=43403b416907e6b965c37daa53d071e1c054a302", "patch": "@@ -495,9 +495,6 @@ macro_rules! declare_special_idents_and_keywords {(\n     }\n \n     fn mk_fresh_ident_interner() -> IdentInterner {\n-        // The indices here must correspond to the numbers in\n-        // special_idents, in Keyword to_name(), and in static\n-        // constants below.\n         let mut init_vec = Vec::new();\n         $(init_vec.push($si_str);)*\n         $(init_vec.push($sk_str);)*"}]}