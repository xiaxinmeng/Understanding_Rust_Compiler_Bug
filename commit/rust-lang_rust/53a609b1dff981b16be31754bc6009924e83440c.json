{"sha": "53a609b1dff981b16be31754bc6009924e83440c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzYTYwOWIxZGZmOTgxYjE2YmUzMTc1NGJjNjAwOTkyNGU4MzQ0MGM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-09T16:00:06Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-09T18:54:45Z"}, "message": "Rollup merge of #24217 - aturon:iterator-fixes, r=alexcrichton", "tree": {"sha": "b8d4fb5c705514042e257b03117059d1871a9866", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8d4fb5c705514042e257b03117059d1871a9866"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53a609b1dff981b16be31754bc6009924e83440c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53a609b1dff981b16be31754bc6009924e83440c", "html_url": "https://github.com/rust-lang/rust/commit/53a609b1dff981b16be31754bc6009924e83440c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53a609b1dff981b16be31754bc6009924e83440c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ede25fe5d14e3ff3cbcc766903eb49eaa87cceb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ede25fe5d14e3ff3cbcc766903eb49eaa87cceb8", "html_url": "https://github.com/rust-lang/rust/commit/ede25fe5d14e3ff3cbcc766903eb49eaa87cceb8"}, {"sha": "e3f324cd9d7b27eda6133c407a4751a8b0217631", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3f324cd9d7b27eda6133c407a4751a8b0217631", "html_url": "https://github.com/rust-lang/rust/commit/e3f324cd9d7b27eda6133c407a4751a8b0217631"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "8cbdda758697b370bee105c7d5d409d6d9276c31", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/53a609b1dff981b16be31754bc6009924e83440c/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53a609b1dff981b16be31754bc6009924e83440c/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=53a609b1dff981b16be31754bc6009924e83440c", "patch": "@@ -171,10 +171,10 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn chain<U>(self, other: U) -> Chain<Self, U> where\n-        Self: Sized, U: Iterator<Item=Self::Item>,\n+    fn chain<U>(self, other: U) -> Chain<Self, U::IntoIter> where\n+        Self: Sized, U: IntoIterator<Item=Self::Item>,\n     {\n-        Chain{a: self, b: other, flag: false}\n+        Chain{a: self, b: other.into_iter(), flag: false}\n     }\n \n     /// Creates an iterator that iterates over both this and the specified\n@@ -207,8 +207,10 @@ pub trait Iterator {\n     /// both produce the same output.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn zip<U: Iterator>(self, other: U) -> Zip<Self, U> where Self: Sized {\n-        Zip{a: self, b: other}\n+    fn zip<U>(self, other: U) -> Zip<Self, U::IntoIter> where\n+        Self: Sized, U: IntoIterator\n+    {\n+        Zip{a: self, b: other.into_iter()}\n     }\n \n     /// Creates a new iterator that will apply the specified function to each\n@@ -443,7 +445,7 @@ pub trait Iterator {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F>\n-        where Self: Sized, U: Iterator, F: FnMut(Self::Item) -> U,\n+        where Self: Sized, U: IntoIterator, F: FnMut(Self::Item) -> U,\n     {\n         FlatMap{iter: self, f: f, frontiter: None, backiter: None }\n     }\n@@ -933,7 +935,7 @@ pub trait Iterator {\n     /// `std::usize::MAX` elements of the original iterator.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn rev(self) -> Rev<Self> where Self: Sized {\n+    fn rev(self) -> Rev<Self> where Self: Sized + DoubleEndedIterator {\n         Rev{iter: self}\n     }\n \n@@ -2093,15 +2095,15 @@ impl<B, I, St, F> Iterator for Scan<I, St, F> where\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n-pub struct FlatMap<I, U, F> {\n+pub struct FlatMap<I, U: IntoIterator, F> {\n     iter: I,\n     f: F,\n-    frontiter: Option<U>,\n-    backiter: Option<U>,\n+    frontiter: Option<U::IntoIter>,\n+    backiter: Option<U::IntoIter>,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I: Iterator, U: Iterator, F> Iterator for FlatMap<I, U, F>\n+impl<I: Iterator, U: IntoIterator, F> Iterator for FlatMap<I, U, F>\n     where F: FnMut(I::Item) -> U,\n {\n     type Item = U::Item;\n@@ -2110,13 +2112,13 @@ impl<I: Iterator, U: Iterator, F> Iterator for FlatMap<I, U, F>\n     fn next(&mut self) -> Option<U::Item> {\n         loop {\n             if let Some(ref mut inner) = self.frontiter {\n-                for x in inner.by_ref() {\n+                if let Some(x) = inner.by_ref().next() {\n                     return Some(x)\n                 }\n             }\n             match self.iter.next().map(|x| (self.f)(x)) {\n                 None => return self.backiter.as_mut().and_then(|it| it.next()),\n-                next => self.frontiter = next,\n+                next => self.frontiter = next.map(IntoIterator::into_iter),\n             }\n         }\n     }\n@@ -2134,22 +2136,22 @@ impl<I: Iterator, U: Iterator, F> Iterator for FlatMap<I, U, F>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I: DoubleEndedIterator, U: DoubleEndedIterator, F> DoubleEndedIterator\n-    for FlatMap<I, U, F>\n-    where F: FnMut(I::Item) -> U\n+impl<I: DoubleEndedIterator, U, F> DoubleEndedIterator for FlatMap<I, U, F> where\n+    F: FnMut(I::Item) -> U,\n+    U: IntoIterator,\n+    U::IntoIter: DoubleEndedIterator\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<U::Item> {\n         loop {\n             if let Some(ref mut inner) = self.backiter {\n-                match inner.next_back() {\n-                    None => (),\n-                    y => return y\n+                if let Some(y) = inner.next_back() {\n+                    return Some(y)\n                 }\n             }\n             match self.iter.next_back().map(|x| (self.f)(x)) {\n                 None => return self.frontiter.as_mut().and_then(|it| it.next_back()),\n-                next => self.backiter = next,\n+                next => self.backiter = next.map(IntoIterator::into_iter),\n             }\n         }\n     }"}]}