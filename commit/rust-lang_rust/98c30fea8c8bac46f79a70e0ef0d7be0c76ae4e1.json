{"sha": "98c30fea8c8bac46f79a70e0ef0d7be0c76ae4e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YzMwZmVhOGM4YmFjNDZmNzlhNzBlMGVmMGQ3YmUwYzc2YWU0ZTE=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-04-02T20:04:54Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-04-03T19:19:32Z"}, "message": "Build lint lists once and the reuse them to update files", "tree": {"sha": "111916b66e8ebb33dbbe0139055fb8aa782bd535", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/111916b66e8ebb33dbbe0139055fb8aa782bd535"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98c30fea8c8bac46f79a70e0ef0d7be0c76ae4e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAl6HjEQACgkQLO/Nsn7Q\nvnkkKg/+Nzb0ssaxlylOrWJylrDfiYrbzrZPh15Jp5upRziAin/OlrA0PrMzd2le\ng8pOb6qQ6ZrGp9Bl0pgWDPqBoy3ou2Im9QqmZGtZnqEaSADUNIMQideniuFdqV+5\nQnLVHFjOGRH5u7ZYTo8a8rkXVA3XT8a85ztBx6/Q+JOvHmsUFCXLDtW065jvJoEq\nyJrDldFAFVys/EMfQ4ysmNdz95AzcqCLrCqb0F+qV9y6GIi3TDcK6MZu9Vxj0uLm\nMfRlU2tYp7U7QpSS21C3zMK1Leh2oCvA1ZufGPNxz2OG4zU+rZ9FuHIKvzzKYw/U\nVu9+wqF7Xf7ysBD6uxXseI0iSrBaF4uXMVrgB1YDBLOS8QF9GEOgmqDifa/QLMyO\npyAmDa+J710+7IKYEqbZTK8/8ektvU2ZhyUZJL68zMUVpZU+VC4J85JCznjnQyki\nHh4rYJmmlj4wIDHXiIGUhk8FxlGgLSPirlt9TcDhLz74aO/Qu4lc02521q271+hD\nyZnAj67hkq+DeN+R64BULWpcda/MnCeVcpn5c57PdkSt29oQ3Z10m5yi9eMdo/G+\nWGl/9/6NgT6I39wl/HST97PeXmFKk7g21SOmwBkMkpaOJYtR4Syh2hYKnxjNH3k9\nG6mxmTTq4d2wu1RTjpQnjJOpyACmk2pVMTTXtwM3oU5UD/rNuNw=\n=/JzP\n-----END PGP SIGNATURE-----", "payload": "tree 111916b66e8ebb33dbbe0139055fb8aa782bd535\nparent da679825e0d3b1dda22044b3ec9ec1612a4e26f0\nauthor flip1995 <hello@philkrones.com> 1585857894 +0200\ncommitter flip1995 <hello@philkrones.com> 1585941572 +0200\n\nBuild lint lists once and the reuse them to update files\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98c30fea8c8bac46f79a70e0ef0d7be0c76ae4e1", "html_url": "https://github.com/rust-lang/rust/commit/98c30fea8c8bac46f79a70e0ef0d7be0c76ae4e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98c30fea8c8bac46f79a70e0ef0d7be0c76ae4e1/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da679825e0d3b1dda22044b3ec9ec1612a4e26f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/da679825e0d3b1dda22044b3ec9ec1612a4e26f0", "html_url": "https://github.com/rust-lang/rust/commit/da679825e0d3b1dda22044b3ec9ec1612a4e26f0"}], "stats": {"total": 83, "additions": 43, "deletions": 40}, "files": [{"sha": "bec415aae94ca91118f318a951b466bd51cd0c24", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/98c30fea8c8bac46f79a70e0ef0d7be0c76ae4e1/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c30fea8c8bac46f79a70e0ef0d7be0c76ae4e1/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=98c30fea8c8bac46f79a70e0ef0d7be0c76ae4e1", "patch": "@@ -62,13 +62,25 @@ impl Lint {\n     }\n \n     /// Returns all non-deprecated lints and non-internal lints\n-    pub fn usable_lints(lints: impl Iterator<Item = Self>) -> impl Iterator<Item = Self> {\n-        lints.filter(|l| l.deprecation.is_none() && !l.group.starts_with(\"internal\"))\n+    #[must_use]\n+    pub fn usable_lints(lints: &[Self]) -> Vec<Self> {\n+        lints\n+            .iter()\n+            .filter(|l| l.deprecation.is_none() && !l.group.starts_with(\"internal\"))\n+            .cloned()\n+            .collect()\n     }\n \n     /// Returns all internal lints (not `internal_warn` lints)\n-    pub fn internal_lints(lints: impl Iterator<Item = Self>) -> impl Iterator<Item = Self> {\n-        lints.filter(|l| l.group == \"internal\")\n+    #[must_use]\n+    pub fn internal_lints(lints: &[Self]) -> Vec<Self> {\n+        lints.iter().filter(|l| l.group == \"internal\").cloned().collect()\n+    }\n+\n+    /// Returns all deprecated lints\n+    #[must_use]\n+    pub fn deprecated_lints(lints: &[Self]) -> Vec<Self> {\n+        lints.iter().filter(|l| l.deprecation.is_some()).cloned().collect()\n     }\n \n     /// Returns the lints in a `HashMap`, grouped by the different lint groups\n@@ -80,9 +92,8 @@ impl Lint {\n \n /// Generates the Vec items for `register_lint_group` calls in `clippy_lints/src/lib.rs`.\n #[must_use]\n-pub fn gen_lint_group_list(lints: &[Lint]) -> Vec<String> {\n+pub fn gen_lint_group_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n     lints\n-        .into_iter()\n         .filter_map(|l| {\n             if l.deprecation.is_some() {\n                 None\n@@ -96,9 +107,8 @@ pub fn gen_lint_group_list(lints: &[Lint]) -> Vec<String> {\n \n /// Generates the `pub mod module_name` list in `clippy_lints/src/lib.rs`.\n #[must_use]\n-pub fn gen_modules_list(lints: &[Lint]) -> Vec<String> {\n+pub fn gen_modules_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n     lints\n-        .iter()\n         .map(|l| &l.module)\n         .unique()\n         .map(|module| format!(\"pub mod {};\", module))\n@@ -108,9 +118,8 @@ pub fn gen_modules_list(lints: &[Lint]) -> Vec<String> {\n \n /// Generates the list of lint links at the bottom of the README\n #[must_use]\n-pub fn gen_changelog_lint_list(lints: &[Lint]) -> Vec<String> {\n+pub fn gen_changelog_lint_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n     lints\n-        .iter()\n         .sorted_by_key(|l| l.name.clone())\n         .filter_map(|l| {\n             if l.group.starts_with(\"internal\") {\n@@ -124,9 +133,8 @@ pub fn gen_changelog_lint_list(lints: &[Lint]) -> Vec<String> {\n \n /// Generates the `register_removed` code in `./clippy_lints/src/lib.rs`.\n #[must_use]\n-pub fn gen_deprecated(lints: &[Lint]) -> Vec<String> {\n+pub fn gen_deprecated<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n     lints\n-        .iter()\n         .filter_map(|l| {\n             l.clone().deprecation.map(|depr_text| {\n                 vec![\n@@ -142,11 +150,10 @@ pub fn gen_deprecated(lints: &[Lint]) -> Vec<String> {\n }\n \n #[must_use]\n-pub fn gen_register_lint_list(lints: &[Lint]) -> Vec<String> {\n+pub fn gen_register_lint_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n     let pre = \"    store.register_lints(&[\".to_string();\n     let post = \"    ]);\".to_string();\n     let mut inner = lints\n-        .iter()\n         .map(|l| format!(\"        &{}::{},\", l.module, l.name.to_uppercase()))\n         .sorted()\n         .collect::<Vec<String>>();\n@@ -421,7 +428,7 @@ fn test_usable_lints() {\n         None,\n         \"module_name\",\n     )];\n-    assert_eq!(expected, Lint::usable_lints(lints.into_iter()).collect::<Vec<Lint>>());\n+    assert_eq!(expected, Lint::usable_lints(&lints));\n }\n \n #[test]\n@@ -457,7 +464,7 @@ fn test_gen_changelog_lint_list() {\n         format!(\"[`should_assert_eq`]: {}#should_assert_eq\", DOCS_LINK.to_string()),\n         format!(\"[`should_assert_eq2`]: {}#should_assert_eq2\", DOCS_LINK.to_string()),\n     ];\n-    assert_eq!(expected, gen_changelog_lint_list(&lints));\n+    assert_eq!(expected, gen_changelog_lint_list(lints.iter()));\n }\n \n #[test]\n@@ -492,7 +499,7 @@ fn test_gen_deprecated() {\n     .into_iter()\n     .map(String::from)\n     .collect();\n-    assert_eq!(expected, gen_deprecated(&lints));\n+    assert_eq!(expected, gen_deprecated(lints.iter()));\n }\n \n #[test]\n@@ -507,7 +514,7 @@ fn test_gen_modules_list() {\n         \"pub mod another_module;\".to_string(),\n         \"pub mod module_name;\".to_string(),\n     ];\n-    assert_eq!(expected, gen_modules_list(&lints));\n+    assert_eq!(expected, gen_modules_list(lints.iter()));\n }\n \n #[test]\n@@ -523,5 +530,5 @@ fn test_gen_lint_group_list() {\n         \"        LintId::of(&module_name::INTERNAL),\".to_string(),\n         \"        LintId::of(&module_name::SHOULD_ASSERT_EQ),\".to_string(),\n     ];\n-    assert_eq!(expected, gen_lint_group_list(&lints));\n+    assert_eq!(expected, gen_lint_group_list(lints.iter()));\n }"}, {"sha": "a9a7092994269b7cc84075756d74f0eda57a3af0", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/98c30fea8c8bac46f79a70e0ef0d7be0c76ae4e1/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c30fea8c8bac46f79a70e0ef0d7be0c76ae4e1/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=98c30fea8c8bac46f79a70e0ef0d7be0c76ae4e1", "patch": "@@ -14,14 +14,14 @@ pub enum UpdateMode {\n pub fn run(update_mode: UpdateMode) {\n     let lint_list: Vec<Lint> = gather_all().collect();\n \n-    let internal_lints = Lint::internal_lints(lint_list.clone().into_iter());\n-\n-    let usable_lints: Vec<Lint> = Lint::usable_lints(lint_list.clone().into_iter()).collect();\n-    let usable_lint_count = round_to_fifty(usable_lints.len());\n-\n+    let internal_lints = Lint::internal_lints(&lint_list);\n+    let deprecated_lints = Lint::deprecated_lints(&lint_list);\n+    let usable_lints = Lint::usable_lints(&lint_list);\n     let mut sorted_usable_lints = usable_lints.clone();\n     sorted_usable_lints.sort_by_key(|lint| lint.name.clone());\n \n+    let usable_lint_count = round_to_fifty(usable_lints.len());\n+\n     let mut file_change = replace_region_in_file(\n         Path::new(\"src/lintlist/mod.rs\"),\n         \"begin lint list\",\n@@ -61,7 +61,7 @@ pub fn run(update_mode: UpdateMode) {\n         \"<!-- end autogenerated links to lint list -->\",\n         false,\n         update_mode == UpdateMode::Change,\n-        || gen_changelog_lint_list(&lint_list),\n+        || gen_changelog_lint_list(usable_lints.iter().chain(deprecated_lints.iter())),\n     )\n     .changed;\n \n@@ -71,7 +71,7 @@ pub fn run(update_mode: UpdateMode) {\n         \"end deprecated lints\",\n         false,\n         update_mode == UpdateMode::Change,\n-        || gen_deprecated(&lint_list),\n+        || gen_deprecated(deprecated_lints.iter()),\n     )\n     .changed;\n \n@@ -81,7 +81,7 @@ pub fn run(update_mode: UpdateMode) {\n         \"end register lints\",\n         false,\n         update_mode == UpdateMode::Change,\n-        || gen_register_lint_list(&usable_lints),\n+        || gen_register_lint_list(usable_lints.iter().chain(internal_lints.iter())),\n     )\n     .changed;\n \n@@ -91,7 +91,7 @@ pub fn run(update_mode: UpdateMode) {\n         \"end lints modules\",\n         false,\n         update_mode == UpdateMode::Change,\n-        || gen_modules_list(&usable_lints),\n+        || gen_modules_list(usable_lints.iter()),\n     )\n     .changed;\n \n@@ -104,15 +104,11 @@ pub fn run(update_mode: UpdateMode) {\n         update_mode == UpdateMode::Change,\n         || {\n             // clippy::all should only include the following lint groups:\n-            let all_group_lints = usable_lints\n-                .clone()\n-                .into_iter()\n-                .filter(|l| {\n-                    l.group == \"correctness\" || l.group == \"style\" || l.group == \"complexity\" || l.group == \"perf\"\n-                })\n-                .collect::<Vec<_>>();\n-\n-            gen_lint_group_list(&all_group_lints)\n+            let all_group_lints = usable_lints.iter().filter(|l| {\n+                l.group == \"correctness\" || l.group == \"style\" || l.group == \"complexity\" || l.group == \"perf\"\n+            });\n+\n+            gen_lint_group_list(all_group_lints)\n         },\n     )\n     .changed;\n@@ -125,7 +121,7 @@ pub fn run(update_mode: UpdateMode) {\n             r#\"\\]\\);\"#,\n             false,\n             update_mode == UpdateMode::Change,\n-            || gen_lint_group_list(&lints),\n+            || gen_lint_group_list(lints.iter()),\n         )\n         .changed;\n     }\n@@ -140,8 +136,8 @@ pub fn run(update_mode: UpdateMode) {\n }\n \n pub fn print_lints() {\n-    let lint_list = gather_all();\n-    let usable_lints: Vec<Lint> = Lint::usable_lints(lint_list).collect();\n+    let lint_list: Vec<Lint> = gather_all().collect();\n+    let usable_lints = Lint::usable_lints(&lint_list);\n     let usable_lint_count = usable_lints.len();\n     let grouped_by_lint_group = Lint::by_lint_group(usable_lints.into_iter());\n "}]}