{"sha": "c141f223d4fd4d8c8be8649877e08ddceaa43783", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNDFmMjIzZDRmZDRkOGM4YmU4NjQ5ODc3ZTA4ZGRjZWFhNDM3ODM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-21T13:22:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-21T13:22:48Z"}, "message": "auto merge of #19953 : sanxiyn/rust/privacy-span, r=alexcrichton\n\nFix #19062.", "tree": {"sha": "32a857402a4a55f6db3395fad80c31275dcda905", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32a857402a4a55f6db3395fad80c31275dcda905"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c141f223d4fd4d8c8be8649877e08ddceaa43783", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c141f223d4fd4d8c8be8649877e08ddceaa43783", "html_url": "https://github.com/rust-lang/rust/commit/c141f223d4fd4d8c8be8649877e08ddceaa43783", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c141f223d4fd4d8c8be8649877e08ddceaa43783/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce468e643a9e048900e5495948737efdf5bb2385", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce468e643a9e048900e5495948737efdf5bb2385", "html_url": "https://github.com/rust-lang/rust/commit/ce468e643a9e048900e5495948737efdf5bb2385"}, {"sha": "2800695fb064a9fcc10ecc21fee175c24d145030", "url": "https://api.github.com/repos/rust-lang/rust/commits/2800695fb064a9fcc10ecc21fee175c24d145030", "html_url": "https://github.com/rust-lang/rust/commit/2800695fb064a9fcc10ecc21fee175c24d145030"}], "stats": {"total": 66, "additions": 52, "deletions": 14}, "files": [{"sha": "f8b4ae73a1cdf95a90732d4c6bda1ef67c91380b", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c141f223d4fd4d8c8be8649877e08ddceaa43783/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c141f223d4fd4d8c8be8649877e08ddceaa43783/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=c141f223d4fd4d8c8be8649877e08ddceaa43783", "patch": "@@ -1307,13 +1307,13 @@ impl<'a, 'tcx> VisiblePrivateTypesVisitor<'a, 'tcx> {\n     }\n \n     fn check_ty_param_bound(&self,\n-                            span: Span,\n                             ty_param_bound: &ast::TyParamBound) {\n         if let ast::TraitTyParamBound(ref trait_ref) = *ty_param_bound {\n             if !self.tcx.sess.features.borrow().visible_private_types &&\n                 self.path_is_private_type(trait_ref.trait_ref.ref_id) {\n+                    let span = trait_ref.trait_ref.path.span;\n                     self.tcx.sess.span_err(span,\n-                                           \"private type in exported type \\\n+                                           \"private trait in exported type \\\n                                             parameter bound\");\n             }\n         }\n@@ -1357,7 +1357,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n                 }\n \n                 for bound in bounds.iter() {\n-                    self.check_ty_param_bound(item.span, bound)\n+                    self.check_ty_param_bound(bound)\n                 }\n             }\n \n@@ -1495,14 +1495,14 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n     fn visit_generics(&mut self, generics: &ast::Generics) {\n         for ty_param in generics.ty_params.iter() {\n             for bound in ty_param.bounds.iter() {\n-                self.check_ty_param_bound(ty_param.span, bound)\n+                self.check_ty_param_bound(bound)\n             }\n         }\n         for predicate in generics.where_clause.predicates.iter() {\n             match predicate {\n                 &ast::WherePredicate::BoundPredicate(ref bound_pred) => {\n                     for bound in bound_pred.bounds.iter() {\n-                        self.check_ty_param_bound(bound_pred.span, bound)\n+                        self.check_ty_param_bound(bound)\n                     }\n                 }\n                 &ast::WherePredicate::RegionPredicate(_) => {}"}, {"sha": "7ff18f8e0886c1d5826a5142228b9b872e610db2", "filename": "src/test/compile-fail/visible-private-types-generics.rs", "status": "modified", "additions": 46, "deletions": 7, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c141f223d4fd4d8c8be8649877e08ddceaa43783/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c141f223d4fd4d8c8be8649877e08ddceaa43783/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-generics.rs?ref=c141f223d4fd4d8c8be8649877e08ddceaa43783", "patch": "@@ -10,17 +10,56 @@\n \n trait Foo {}\n \n-pub fn f<T:Foo>() {}    //~ ERROR private type in exported type\n+pub fn f<\n+    T\n+    : Foo //~ ERROR private trait in exported type parameter bound\n+>() {}\n \n-pub fn g<T>() where T: Foo {}   //~ ERROR private type in exported type\n+pub fn g<T>() where\n+    T\n+    : Foo //~ ERROR private trait in exported type parameter bound\n+{}\n \n-pub struct H<T:Foo> {   //~ ERROR private type in exported type\n-    x: T,\n+pub struct S;\n+\n+impl S {\n+    pub fn f<\n+        T\n+        : Foo //~ ERROR private trait in exported type parameter bound\n+    >() {}\n+\n+    pub fn g<T>() where\n+        T\n+        : Foo //~ ERROR private trait in exported type parameter bound\n+    {}\n }\n \n-pub struct I<T> where T: Foo {  //~ ERROR private type in exported type\n-    x: T,\n+pub struct S1<\n+    T\n+    : Foo //~ ERROR private trait in exported type parameter bound\n+> {\n+    x: T\n }\n \n-fn main() {}\n+pub struct S2<T> where\n+    T\n+    : Foo //~ ERROR private trait in exported type parameter bound\n+{\n+    x: T\n+}\n \n+pub enum E1<\n+    T\n+    : Foo //~ ERROR private trait in exported type parameter bound\n+> {\n+    V1(T)\n+}\n+\n+pub enum E2<T> where\n+    T\n+    : Foo //~ ERROR private trait in exported type parameter bound\n+{\n+    V2(T)\n+}\n+\n+fn main() {}"}, {"sha": "dc6d446154ac75b4045c7006e98b7a6f07134495", "filename": "src/test/compile-fail/visible-private-types-supertrait.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c141f223d4fd4d8c8be8649877e08ddceaa43783/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c141f223d4fd4d8c8be8649877e08ddceaa43783/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-supertrait.rs?ref=c141f223d4fd4d8c8be8649877e08ddceaa43783", "patch": "@@ -10,7 +10,6 @@\n \n trait Foo {}\n \n-pub trait Bar : Foo {}  //~ ERROR private type in exported type\n+pub trait Bar : Foo {} //~ ERROR private trait in exported type\n \n fn main() {}\n-"}]}