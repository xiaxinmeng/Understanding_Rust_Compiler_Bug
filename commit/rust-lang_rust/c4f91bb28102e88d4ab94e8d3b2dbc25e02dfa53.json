{"sha": "c4f91bb28102e88d4ab94e8d3b2dbc25e02dfa53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZjkxYmIyODEwMmU4OGQ0YWI5NGU4ZDNiMmRiYzI1ZTAyZGZhNTM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-07-18T19:14:50Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-08-14T16:34:32Z"}, "message": "Fix rustc_serialize unit tests", "tree": {"sha": "61e39e76fdfef89fa7dce7db6276088240536b36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61e39e76fdfef89fa7dce7db6276088240536b36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4f91bb28102e88d4ab94e8d3b2dbc25e02dfa53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f91bb28102e88d4ab94e8d3b2dbc25e02dfa53", "html_url": "https://github.com/rust-lang/rust/commit/c4f91bb28102e88d4ab94e8d3b2dbc25e02dfa53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4f91bb28102e88d4ab94e8d3b2dbc25e02dfa53/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae7951ed43558fa887f52b0786237935d11cb5c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae7951ed43558fa887f52b0786237935d11cb5c3", "html_url": "https://github.com/rust-lang/rust/commit/ae7951ed43558fa887f52b0786237935d11cb5c3"}], "stats": {"total": 57, "additions": 34, "deletions": 23}, "files": [{"sha": "c1fa3bef07c7ef294074f36ac1f5cefe0f620eda", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4f91bb28102e88d4ab94e8d3b2dbc25e02dfa53/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c4f91bb28102e88d4ab94e8d3b2dbc25e02dfa53/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c4f91bb28102e88d4ab94e8d3b2dbc25e02dfa53", "patch": "@@ -3877,6 +3877,7 @@ name = \"rustc_serialize\"\n version = \"0.0.0\"\n dependencies = [\n  \"indexmap\",\n+ \"rustc_macros\",\n  \"smallvec 1.4.0\",\n ]\n "}, {"sha": "939e6a59ba0990e99bd9d0c6e90e5b2853228fe3", "filename": "src/librustc_serialize/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4f91bb28102e88d4ab94e8d3b2dbc25e02dfa53/src%2Flibrustc_serialize%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c4f91bb28102e88d4ab94e8d3b2dbc25e02dfa53/src%2Flibrustc_serialize%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_serialize%2FCargo.toml?ref=c4f91bb28102e88d4ab94e8d3b2dbc25e02dfa53", "patch": "@@ -11,3 +11,6 @@ path = \"lib.rs\"\n [dependencies]\n indexmap = \"1\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n+\n+[dev-dependencies]\n+rustc_macros = { path = \"../librustc_macros\" }"}, {"sha": "6c8965aa2e31f92bac37026d419bac493c67b6be", "filename": "src/librustc_serialize/json.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c4f91bb28102e88d4ab94e8d3b2dbc25e02dfa53/src%2Flibrustc_serialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f91bb28102e88d4ab94e8d3b2dbc25e02dfa53/src%2Flibrustc_serialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_serialize%2Fjson.rs?ref=c4f91bb28102e88d4ab94e8d3b2dbc25e02dfa53", "patch": "@@ -47,17 +47,17 @@\n //!\n //! Rust provides a mechanism for low boilerplate encoding & decoding of values to and from JSON via\n //! the serialization API.\n-//! To be able to encode a piece of data, it must implement the `serialize::RustcEncodable` trait.\n-//! To be able to decode a piece of data, it must implement the `serialize::RustcDecodable` trait.\n+//! To be able to encode a piece of data, it must implement the `serialize::Encodable` trait.\n+//! To be able to decode a piece of data, it must implement the `serialize::Decodable` trait.\n //! The Rust compiler provides an annotation to automatically generate the code for these traits:\n-//! `#[derive(RustcDecodable, RustcEncodable)]`\n+//! `#[derive(Decodable, Encodable)]`\n //!\n //! The JSON API provides an enum `json::Json` and a trait `ToJson` to encode objects.\n //! The `ToJson` trait provides a `to_json` method to convert an object into a `json::Json` value.\n //! A `json::Json` value can be encoded as a string or buffer using the functions described above.\n //! You can also use the `json::Encoder` object, which implements the `Encoder` trait.\n //!\n-//! When using `ToJson` the `RustcEncodable` trait implementation is not mandatory.\n+//! When using `ToJson` the `Encodable` trait implementation is not mandatory.\n //!\n //! # Examples of use\n //!\n@@ -68,10 +68,11 @@\n //!\n //! ```rust\n //! # #![feature(rustc_private)]\n+//! use rustc_macros::{Decodable, Encodable};\n //! use rustc_serialize::json;\n //!\n //! // Automatically generate `Decodable` and `Encodable` trait implementations\n-//! #[derive(RustcDecodable, RustcEncodable)]\n+//! #[derive(Decodable, Encodable)]\n //! pub struct TestStruct  {\n //!     data_int: u8,\n //!     data_str: String,\n@@ -100,6 +101,7 @@\n //!\n //! ```rust\n //! # #![feature(rustc_private)]\n+//! use rustc_macros::Encodable;\n //! use rustc_serialize::json::{self, ToJson, Json};\n //!\n //! // A custom data structure\n@@ -115,8 +117,8 @@\n //!     }\n //! }\n //!\n-//! // Only generate `RustcEncodable` trait implementation\n-//! #[derive(RustcEncodable)]\n+//! // Only generate `Encodable` trait implementation\n+//! #[derive(Encodable)]\n //! pub struct ComplexNumRecord {\n //!     uid: u8,\n //!     dsc: String,\n@@ -137,11 +139,12 @@\n //!\n //! ```rust\n //! # #![feature(rustc_private)]\n+//! use rustc_macros::Decodable;\n //! use std::collections::BTreeMap;\n //! use rustc_serialize::json::{self, Json, ToJson};\n //!\n-//! // Only generate `RustcDecodable` trait implementation\n-//! #[derive(RustcDecodable)]\n+//! // Only generate `Decodable` trait implementation\n+//! #[derive(Decodable)]\n //! pub struct TestStruct {\n //!     data_int: u8,\n //!     data_str: String,"}, {"sha": "e3a823127d93ea60621623ec8cb51e593ed4b192", "filename": "src/librustc_serialize/tests/json.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c4f91bb28102e88d4ab94e8d3b2dbc25e02dfa53/src%2Flibrustc_serialize%2Ftests%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f91bb28102e88d4ab94e8d3b2dbc25e02dfa53/src%2Flibrustc_serialize%2Ftests%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_serialize%2Ftests%2Fjson.rs?ref=c4f91bb28102e88d4ab94e8d3b2dbc25e02dfa53", "patch": "@@ -9,6 +9,7 @@ use json::{\n     from_str, DecodeResult, Decoder, DecoderError, Encoder, EncoderError, Json, JsonEvent, Parser,\n     StackElement,\n };\n+use rustc_macros::{Decodable, Encodable};\n use rustc_serialize::json;\n use rustc_serialize::{Decodable, Encodable};\n \n@@ -17,7 +18,7 @@ use std::io::prelude::*;\n use std::string;\n use Animal::*;\n \n-#[derive(RustcDecodable, Eq, PartialEq, Debug)]\n+#[derive(Decodable, Eq, PartialEq, Debug)]\n struct OptionData {\n     opt: Option<usize>,\n }\n@@ -48,20 +49,20 @@ fn test_decode_option_malformed() {\n     );\n }\n \n-#[derive(PartialEq, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(PartialEq, Encodable, Decodable, Debug)]\n enum Animal {\n     Dog,\n     Frog(string::String, isize),\n }\n \n-#[derive(PartialEq, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(PartialEq, Encodable, Decodable, Debug)]\n struct Inner {\n     a: (),\n     b: usize,\n     c: Vec<string::String>,\n }\n \n-#[derive(PartialEq, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(PartialEq, Encodable, Decodable, Debug)]\n struct Outer {\n     inner: Vec<Inner>,\n }\n@@ -568,7 +569,7 @@ fn test_decode_struct() {\n     );\n }\n \n-#[derive(RustcDecodable)]\n+#[derive(Decodable)]\n struct FloatStruct {\n     f: f64,\n     a: Vec<f64>,\n@@ -616,20 +617,20 @@ fn test_multiline_errors() {\n     assert_eq!(from_str(\"{\\n  \\\"foo\\\":\\n \\\"bar\\\"\"), Err(SyntaxError(EOFWhileParsingObject, 3, 8)));\n }\n \n-#[derive(RustcDecodable)]\n+#[derive(Decodable)]\n #[allow(dead_code)]\n struct DecodeStruct {\n     x: f64,\n     y: bool,\n     z: string::String,\n     w: Vec<DecodeStruct>,\n }\n-#[derive(RustcDecodable)]\n+#[derive(Decodable)]\n enum DecodeEnum {\n     A(f64),\n     B(string::String),\n }\n-fn check_err<T: Decodable>(to_parse: &'static str, expected: DecoderError) {\n+fn check_err<T: Decodable<Decoder>>(to_parse: &'static str, expected: DecoderError) {\n     let res: DecodeResult<T> = match from_str(to_parse) {\n         Err(e) => Err(ParseError(e)),\n         Ok(json) => Decodable::decode(&mut Decoder::new(json)),\n@@ -933,7 +934,7 @@ fn test_prettyencoder_indent_level_param() {\n #[test]\n fn test_hashmap_with_enum_key() {\n     use std::collections::HashMap;\n-    #[derive(RustcEncodable, Eq, Hash, PartialEq, RustcDecodable, Debug)]\n+    #[derive(Encodable, Eq, Hash, PartialEq, Decodable, Debug)]\n     enum Enum {\n         Foo,\n         #[allow(dead_code)]\n@@ -1254,7 +1255,7 @@ fn test_to_json() {\n #[test]\n fn test_encode_hashmap_with_arbitrary_key() {\n     use std::collections::HashMap;\n-    #[derive(PartialEq, Eq, Hash, RustcEncodable)]\n+    #[derive(PartialEq, Eq, Hash, Encodable)]\n     struct ArbitraryType(usize);\n     let mut hm: HashMap<ArbitraryType, bool> = HashMap::new();\n     hm.insert(ArbitraryType(1), true);"}, {"sha": "13b3676a56cd51b40cd0621633a440e886e84b45", "filename": "src/librustc_serialize/tests/opaque.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c4f91bb28102e88d4ab94e8d3b2dbc25e02dfa53/src%2Flibrustc_serialize%2Ftests%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f91bb28102e88d4ab94e8d3b2dbc25e02dfa53/src%2Flibrustc_serialize%2Ftests%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_serialize%2Ftests%2Fopaque.rs?ref=c4f91bb28102e88d4ab94e8d3b2dbc25e02dfa53", "patch": "@@ -1,10 +1,11 @@\n #![allow(rustc::internal)]\n \n+use rustc_macros::{Decodable, Encodable};\n use rustc_serialize::opaque::{Decoder, Encoder};\n use rustc_serialize::{Decodable, Encodable};\n use std::fmt::Debug;\n \n-#[derive(PartialEq, Clone, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(PartialEq, Clone, Debug, Encodable, Decodable)]\n struct Struct {\n     a: (),\n     b: u8,\n@@ -27,11 +28,13 @@ struct Struct {\n     q: Option<u32>,\n }\n \n-fn check_round_trip<T: Encodable + Decodable + PartialEq + Debug>(values: Vec<T>) {\n+fn check_round_trip<T: Encodable<Encoder> + for<'a> Decodable<Decoder<'a>> + PartialEq + Debug>(\n+    values: Vec<T>,\n+) {\n     let mut encoder = Encoder::new(Vec::new());\n \n     for value in &values {\n-        Encodable::encode(&value, &mut encoder).unwrap();\n+        Encodable::encode(value, &mut encoder).unwrap();\n     }\n \n     let data = encoder.into_inner();\n@@ -225,7 +228,7 @@ fn test_struct() {\n     }]);\n }\n \n-#[derive(PartialEq, Clone, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(PartialEq, Clone, Debug, Encodable, Decodable)]\n enum Enum {\n     Variant1,\n     Variant2(usize, f32),"}]}