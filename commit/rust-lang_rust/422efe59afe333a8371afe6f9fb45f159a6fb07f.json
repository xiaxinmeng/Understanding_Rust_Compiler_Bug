{"sha": "422efe59afe333a8371afe6f9fb45f159a6fb07f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMmVmZTU5YWZlMzMzYTgzNzFhZmU2ZjlmYjQ1ZjE1OWE2ZmIwN2Y=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-27T19:52:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-27T19:52:43Z"}, "message": "you better run", "tree": {"sha": "cfdc2a4209419e690257cff2235b3fd3f75fe53d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfdc2a4209419e690257cff2235b3fd3f75fe53d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/422efe59afe333a8371afe6f9fb45f159a6fb07f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/422efe59afe333a8371afe6f9fb45f159a6fb07f", "html_url": "https://github.com/rust-lang/rust/commit/422efe59afe333a8371afe6f9fb45f159a6fb07f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/422efe59afe333a8371afe6f9fb45f159a6fb07f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57518153147ad53639f16cc940d219dc582c550a", "url": "https://api.github.com/repos/rust-lang/rust/commits/57518153147ad53639f16cc940d219dc582c550a", "html_url": "https://github.com/rust-lang/rust/commit/57518153147ad53639f16cc940d219dc582c550a"}], "stats": {"total": 5283, "additions": 2652, "deletions": 2631}, "files": [{"sha": "5fe00fea85e9128773a891b0562ce1ef25b9ecda", "filename": "code/.gitignore", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/422efe59afe333a8371afe6f9fb45f159a6fb07f/code%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/422efe59afe333a8371afe6f9fb45f159a6fb07f/code%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2F.gitignore?ref=422efe59afe333a8371afe6f9fb45f159a6fb07f", "patch": "@@ -1,7 +1,4 @@\n-target\n-index.node\n-artifacts.json\n+out\n+node_modules\n+.vscode-test/\n *.vsix\n-out/*\n-node_modules/*\n-log/*"}, {"sha": "ac8f24bde2b33d34ca2237fb917e3b03ef4d084e", "filename": "code/.npmrc", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57518153147ad53639f16cc940d219dc582c550a/code%2F.npmrc", "raw_url": "https://github.com/rust-lang/rust/raw/57518153147ad53639f16cc940d219dc582c550a/code%2F.npmrc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2F.npmrc?ref=57518153147ad53639f16cc940d219dc582c550a", "patch": "@@ -1,4 +0,0 @@\n-runtime = electron\n-target = 1.7.9\n-target_arch = x64\n-disturl = https://atom.io/download/atom-shell"}, {"sha": "c174db304ce852954086e0d4c423b322e88ad49c", "filename": "code/.vscode/launch.json", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/422efe59afe333a8371afe6f9fb45f159a6fb07f/code%2F.vscode%2Flaunch.json", "raw_url": "https://github.com/rust-lang/rust/raw/422efe59afe333a8371afe6f9fb45f159a6fb07f/code%2F.vscode%2Flaunch.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2F.vscode%2Flaunch.json?ref=422efe59afe333a8371afe6f9fb45f159a6fb07f", "patch": "@@ -1,22 +1,36 @@\n+// A launch configuration that compiles the extension and then opens it inside a new window\n+// Use IntelliSense to learn about possible attributes.\n+// Hover to view descriptions of existing attributes.\n+// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n {\n-    // Use IntelliSense to learn about possible attributes.\n-    // Hover to view descriptions of existing attributes.\n-    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n-    \"version\": \"0.2.0\",\n+\t\"version\": \"0.2.0\",\n     \"configurations\": [\n         {\n-            \"name\": \"Launch Extension\",\n+            \"name\": \"Extension\",\n             \"type\": \"extensionHost\",\n             \"request\": \"launch\",\n             \"runtimeExecutable\": \"${execPath}\",\n-            \"args\": [\"--extensionDevelopmentPath='./'\"],\n-            \"env\": {\n-                \"RUST_LOG\": \"m=trace\"\n-            },\n-            \"stopOnEntry\": false,\n-            \"sourceMaps\": true,\n-            \"outFiles\": [ \"./out/src/**/*.js\" ],\n-            \"preLaunchTask\": \"npm\"\n+            \"args\": [\n+                \"--extensionDevelopmentPath=${workspaceFolder}\"\n+            ],\n+            \"outFiles\": [\n+                \"${workspaceFolder}/out/**/*.js\"\n+            ],\n+            \"preLaunchTask\": \"npm: watch\"\n         },\n+        {\n+            \"name\": \"Extension Tests\",\n+            \"type\": \"extensionHost\",\n+            \"request\": \"launch\",\n+            \"runtimeExecutable\": \"${execPath}\",\n+            \"args\": [\n+                \"--extensionDevelopmentPath=${workspaceFolder}\",\n+                \"--extensionTestsPath=${workspaceFolder}/out/test\"\n+            ],\n+            \"outFiles\": [\n+                \"${workspaceFolder}/out/test/**/*.js\"\n+            ],\n+            \"preLaunchTask\": \"npm: watch\"\n+        }\n     ]\n }"}, {"sha": "30bf8c2d3f11630391958c9635172e63ee1a2122", "filename": "code/.vscode/settings.json", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/422efe59afe333a8371afe6f9fb45f159a6fb07f/code%2F.vscode%2Fsettings.json", "raw_url": "https://github.com/rust-lang/rust/raw/422efe59afe333a8371afe6f9fb45f159a6fb07f/code%2F.vscode%2Fsettings.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2F.vscode%2Fsettings.json?ref=422efe59afe333a8371afe6f9fb45f159a6fb07f", "patch": "@@ -1,10 +1,11 @@\n // Place your settings in this file to overwrite default and user settings.\n {\n     \"files.exclude\": {\n-        \"out\": true\n-        // \"node_modules\": true\n+        \"out\": false // set this to true to hide the \"out\" folder with the compiled JS files\n     },\n     \"search.exclude\": {\n         \"out\": true // set this to false to include \"out\" folder in search results\n-    }\n-}\n+    },\n+    // Turn off tsc task auto detection since we have the necessary tasks as npm scripts\n+    \"typescript.tsc.autoDetect\": \"off\"\n+}\n\\ No newline at end of file"}, {"sha": "604e38f5ad774086f5152a9d74338dc3234b4716", "filename": "code/.vscode/tasks.json", "status": "modified", "additions": 19, "deletions": 30, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/422efe59afe333a8371afe6f9fb45f159a6fb07f/code%2F.vscode%2Ftasks.json", "raw_url": "https://github.com/rust-lang/rust/raw/422efe59afe333a8371afe6f9fb45f159a6fb07f/code%2F.vscode%2Ftasks.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2F.vscode%2Ftasks.json?ref=422efe59afe333a8371afe6f9fb45f159a6fb07f", "patch": "@@ -1,31 +1,20 @@\n-\n-// Available variables which can be used inside of strings.\n-// ${workspaceRoot}: the root folder of the team\n-// ${file}: the current opened file\n-// ${fileBasename}: the current opened file's basename\n-// ${fileDirname}: the current opened file's dirname\n-// ${fileExtname}: the current opened file's extension\n-// ${cwd}: the current working directory of the spawned process\n-\n-// A task runner that calls a custom npm script that compiles the extension.\n+// See https://go.microsoft.com/fwlink/?LinkId=733558\n+// for the documentation about the tasks.json format\n {\n-    \"version\": \"0.2.0\",\n-\n-    // we want to run npm\n-    \"command\": \"npm\",\n-\n-    // the command is a shell script\n-    \"isShellCommand\": true,\n-\n-    // show the output window only if unrecognized errors occur.\n-    \"showOutput\": \"silent\",\n-\n-    // we run the custom script \"compile\" as defined in package.json\n-    \"args\": [\"run\", \"compile\",],\n-\n-    // The tsc compiler is started in watching mode\n-    \"isBackground\": true,\n-\n-    // use the standard tsc in watch mode problem matcher to find compile problems in the output.\n-    \"problemMatcher\": \"$tsc-watch\"\n-}\n+    \"version\": \"2.0.0\",\n+    \"tasks\": [\n+        {\n+            \"type\": \"npm\",\n+            \"script\": \"watch\",\n+            \"problemMatcher\": \"$tsc-watch\",\n+            \"isBackground\": true,\n+            \"presentation\": {\n+                \"reveal\": \"never\"\n+            },\n+            \"group\": {\n+                \"kind\": \"build\",\n+                \"isDefault\": true\n+            }\n+        }\n+    ]\n+}\n\\ No newline at end of file"}, {"sha": "85571789677b288bcc3474b8dae6c56522611668", "filename": "code/.vscodeignore", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/422efe59afe333a8371afe6f9fb45f159a6fb07f/code%2F.vscodeignore", "raw_url": "https://github.com/rust-lang/rust/raw/422efe59afe333a8371afe6f9fb45f159a6fb07f/code%2F.vscodeignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2F.vscodeignore?ref=422efe59afe333a8371afe6f9fb45f159a6fb07f", "patch": "@@ -0,0 +1,9 @@\n+.vscode/**\n+.vscode-test/**\n+out/test/**\n+out/**/*.map\n+src/**\n+.gitignore\n+tsconfig.json\n+vsc-extension-quickstart.md\n+tslint.json\n\\ No newline at end of file"}, {"sha": "d9084b1b363779ac831eb88f004d02247f396605", "filename": "code/package-lock.json", "status": "modified", "additions": 2363, "deletions": 2363, "changes": 4726, "blob_url": "https://github.com/rust-lang/rust/blob/422efe59afe333a8371afe6f9fb45f159a6fb07f/code%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/422efe59afe333a8371afe6f9fb45f159a6fb07f/code%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Fpackage-lock.json?ref=422efe59afe333a8371afe6f9fb45f159a6fb07f"}, {"sha": "87e715c44bc120cadebd3946205b3b4ae2765c1d", "filename": "code/package.json", "status": "modified", "additions": 143, "deletions": 132, "changes": 275, "blob_url": "https://github.com/rust-lang/rust/blob/422efe59afe333a8371afe6f9fb45f159a6fb07f/code%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/422efe59afe333a8371afe6f9fb45f159a6fb07f/code%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Fpackage.json?ref=422efe59afe333a8371afe6f9fb45f159a6fb07f", "patch": "@@ -1,138 +1,149 @@\n {\n-  \"name\": \"libsyntax-rust\",\n-  \"displayName\": \"libsyntax-rust\",\n-  \"description\": \"An experimental Rust plugin for VS Code based on libsyntax2\",\n-  \"license\": \"MIT\",\n-  \"repository\": \"http://github.com/matklad/libsyntax2/\",\n-  \"version\": \"0.0.1\",\n-  \"publisher\": \"matklad\",\n-  \"engines\": {\n-    \"vscode\": \"^1.26.0\"\n-  },\n-  \"scripts\": {\n-    \"vscode:prepublish\": \"tsc -p ./\",\n-    \"compile\": \"tsc -watch -p ./\",\n-    \"postinstall\": \"node ./node_modules/vscode/bin/install\"\n-  },\n-  \"dependencies\": {\n-    \"vscode-languageclient\": \"^4.4.0\"\n-  },\n-  \"devDependencies\": {\n-    \"@types/node\": \"^7.0.56\",\n-    \"typescript\": \"^2.9.1\",\n-    \"vsce\": \"^1.42.0\",\n-    \"vscode\": \"^1.1.18\"\n-  },\n-  \"main\": \"./out/src/extension\",\n-  \"activationEvents\": [\n-    \"onLanguage:rust\"\n-  ],\n-  \"contributes\": {\n-    \"taskDefinitions\": [\n-      {\n-        \"type\": \"cargo\",\n-        \"required\": [\n-          \"command\"\n-        ],\n-        \"properties\": {\n-          \"label\": {\n-            \"type\": \"string\"\n-          },\n-          \"command\": {\n-            \"type\": \"string\"\n-          },\n-          \"args\": {\n-            \"type\": \"array\"\n-          },\n-          \"env\": {\n-            \"type\": \"object\"\n-          }\n-        }\n-      }\n-    ],\n-    \"commands\": [\n-      {\n-        \"command\": \"libsyntax-rust.createFile\",\n-        \"title\": \"Show Rust syntax tree\"\n-      },\n-      {\n-        \"command\": \"libsyntax-rust.syntaxTree\",\n-        \"title\": \"Show Rust syntax tree\"\n-      },\n-      {\n-        \"command\": \"libsyntax-rust.extendSelection\",\n-        \"title\": \"Rust Extend Selection\"\n-      },\n-      {\n-        \"command\": \"libsyntax-rust.matchingBrace\",\n-        \"title\": \"Rust Matching Brace\"\n-      },\n-      {\n-        \"command\": \"libsyntax-rust.parentModule\",\n-        \"title\": \"Rust Parent Module\"\n-      },\n-      {\n-        \"command\": \"libsyntax-rust.joinLines\",\n-        \"title\": \"Rust Join Lines\"\n-      },\n-      {\n-        \"command\": \"libsyntax-rust.run\",\n-        \"title\": \"Rust Run\"\n-      }\n+    \"name\": \"rcf-lsp\",\n+    \"displayName\": \"rcf-lsp\",\n+    \"description\": \"\",\n+    \"version\": \"0.0.1\",\n+    \"publisher\": \"matklad\",\n+    \"repository\": {\n+        \"url\": \"https://github.com/matklad/libsyntax2/\"\n+    },\n+    \"categories\": [\n+        \"Other\"\n     ],\n-    \"keybindings\": [\n-      {\n-        \"command\": \"libsyntax-rust.parentModule\",\n-        \"key\": \"ctrl+u\",\n-        \"when\": \"editorTextFocus && editorLangId == rust\"\n-      },\n-      {\n-        \"command\": \"libsyntax-rust.matchingBrace\",\n-        \"key\": \"ctrl+shift+m\",\n-        \"when\": \"editorTextFocus && editorLangId == rust\"\n-      },\n-      {\n-        \"command\": \"libsyntax-rust.extendSelection\",\n-        \"key\": \"ctrl+w\",\n-        \"when\": \"editorTextFocus && editorLangId == rust\"\n-      },\n-      {\n-        \"command\": \"libsyntax-rust.joinLines\",\n-        \"key\": \"ctrl+shift+j\",\n-        \"when\": \"editorTextFocus && editorLangId == rust\"\n-      }\n+    \"engines\": {\n+        \"vscode\": \"^1.26.0\"\n+    },\n+    \"scripts\": {\n+        \"vscode:prepublish\": \"npm run compile\",\n+        \"compile\": \"tsc -p ./\",\n+        \"watch\": \"tsc -watch -p ./\",\n+        \"postinstall\": \"node ./node_modules/vscode/bin/install\"\n+    },\n+    \"dependencies\": {\n+        \"vscode-languageclient\": \"^4.4.0\"\n+    },\n+    \"devDependencies\": {\n+        \"typescript\": \"^2.6.1\",\n+        \"vscode\": \"^1.1.21\",\n+        \"vsce\": \"^1.42.0\",\n+        \"@types/node\": \"^8.10.25\",\n+        \"@types/mocha\": \"^2.2.42\"\n+    },\n+    \"activationEvents\": [\n+        \"onLanguage:rust\"\n     ],\n-    \"problemMatchers\": [\n-      {\n-        \"name\": \"rustc\",\n-        \"fileLocation\": [\n-          \"relative\",\n-          \"${workspaceRoot}\"\n+    \"main\": \"./out/extension\",\n+    \"contributes\": {\n+        \"taskDefinitions\": [\n+            {\n+                \"type\": \"cargo\",\n+                \"required\": [\n+                    \"command\"\n+                ],\n+                \"properties\": {\n+                    \"label\": {\n+                        \"type\": \"string\"\n+                    },\n+                    \"command\": {\n+                        \"type\": \"string\"\n+                    },\n+                    \"args\": {\n+                        \"type\": \"array\"\n+                    },\n+                    \"env\": {\n+                        \"type\": \"object\"\n+                    }\n+                }\n+            }\n+        ],\n+        \"commands\": [\n+            {\n+                \"command\": \"libsyntax-rust.createFile\",\n+                \"title\": \"Show Rust syntax tree\"\n+            },\n+            {\n+                \"command\": \"libsyntax-rust.syntaxTree\",\n+                \"title\": \"Show Rust syntax tree\"\n+            },\n+            {\n+                \"command\": \"libsyntax-rust.extendSelection\",\n+                \"title\": \"Rust Extend Selection\"\n+            },\n+            {\n+                \"command\": \"libsyntax-rust.matchingBrace\",\n+                \"title\": \"Rust Matching Brace\"\n+            },\n+            {\n+                \"command\": \"libsyntax-rust.parentModule\",\n+                \"title\": \"Rust Parent Module\"\n+            },\n+            {\n+                \"command\": \"libsyntax-rust.joinLines\",\n+                \"title\": \"Rust Join Lines\"\n+            },\n+            {\n+                \"command\": \"libsyntax-rust.run\",\n+                \"title\": \"Rust Run\"\n+            }\n+        ],\n+        \"keybindings\": [\n+            {\n+                \"command\": \"libsyntax-rust.parentModule\",\n+                \"key\": \"ctrl+u\",\n+                \"when\": \"editorTextFocus && editorLangId == rust\"\n+            },\n+            {\n+                \"command\": \"libsyntax-rust.matchingBrace\",\n+                \"key\": \"ctrl+shift+m\",\n+                \"when\": \"editorTextFocus && editorLangId == rust\"\n+            },\n+            {\n+                \"command\": \"libsyntax-rust.extendSelection\",\n+                \"key\": \"ctrl+w\",\n+                \"when\": \"editorTextFocus && editorLangId == rust\"\n+            },\n+            {\n+                \"command\": \"libsyntax-rust.joinLines\",\n+                \"key\": \"ctrl+shift+j\",\n+                \"when\": \"editorTextFocus && editorLangId == rust\"\n+            },\n+            {\n+                \"command\": \"libsyntax-rust.run\",\n+                \"key\": \"ctrl+r\",\n+                \"when\": \"editorTextFocus && editorLangId == rust\"\n+            }\n         ],\n-        \"pattern\": [\n-          {\n-            \"regexp\": \"^(warning|warn|error)(\\\\[(.*)\\\\])?: (.*)$\",\n-            \"severity\": 1,\n-            \"message\": 4,\n-            \"code\": 3\n-          },\n-          {\n-            \"regexp\": \"^([\\\\s->=]*(.*):(\\\\d*):(\\\\d*)|.*)$\",\n-            \"file\": 2,\n-            \"line\": 3,\n-            \"column\": 4\n-          },\n-          {\n-            \"regexp\": \"^.*$\"\n-          },\n-          {\n-            \"regexp\": \"^([\\\\s->=]*(.*):(\\\\d*):(\\\\d*)|.*)$\",\n-            \"file\": 2,\n-            \"line\": 3,\n-            \"column\": 4\n-          }\n+        \"problemMatchers\": [\n+            {\n+                \"name\": \"rustc\",\n+                \"fileLocation\": [\n+                    \"relative\",\n+                    \"${workspaceRoot}\"\n+                ],\n+                \"pattern\": [\n+                    {\n+                        \"regexp\": \"^(warning|warn|error)(\\\\[(.*)\\\\])?: (.*)$\",\n+                        \"severity\": 1,\n+                        \"message\": 4,\n+                        \"code\": 3\n+                    },\n+                    {\n+                        \"regexp\": \"^([\\\\s->=]*(.*):(\\\\d*):(\\\\d*)|.*)$\",\n+                        \"file\": 2,\n+                        \"line\": 3,\n+                        \"column\": 4\n+                    },\n+                    {\n+                        \"regexp\": \"^.*$\"\n+                    },\n+                    {\n+                        \"regexp\": \"^([\\\\s->=]*(.*):(\\\\d*):(\\\\d*)|.*)$\",\n+                        \"file\": 2,\n+                        \"line\": 3,\n+                        \"column\": 4\n+                    }\n+                ]\n+            }\n         ]\n-      }\n-    ]\n-  }\n+    }\n }"}, {"sha": "7acde195d1ae3c3b754130c62b409ce86d30e8a8", "filename": "code/src/extension.ts", "status": "modified", "additions": 72, "deletions": 32, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/422efe59afe333a8371afe6f9fb45f159a6fb07f/code%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/422efe59afe333a8371afe6f9fb45f159a6fb07f/code%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Fsrc%2Fextension.ts?ref=422efe59afe333a8371afe6f9fb45f159a6fb07f", "patch": "@@ -1,6 +1,7 @@\n 'use strict';\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient'\n+import { DH_UNABLE_TO_CHECK_GENERATOR } from 'constants';\n \n \n let client: lc.LanguageClient;\n@@ -12,10 +13,10 @@ let uris = {\n \n export function activate(context: vscode.ExtensionContext) {\n     let textDocumentContentProvider = new TextDocumentContentProvider()\n-    let dispose = (disposable) => {\n+    let dispose = (disposable: vscode.Disposable) => {\n         context.subscriptions.push(disposable);\n     }\n-    let registerCommand = (name, f) => {\n+    let registerCommand = (name: string, f: any) => {\n         dispose(vscode.commands.registerCommand(name, f))\n     }\n \n@@ -42,7 +43,7 @@ export function activate(context: vscode.ExtensionContext) {\n             textDocument: { uri: editor.document.uri.toString() },\n             offsets: editor.selections.map((s) => {\n                 return client.code2ProtocolConverter.asPosition(s.active)\n-             })\n+            })\n         }\n         let response = await client.sendRequest<lc.Position[]>(\"m/findMatchingBrace\", request)\n         editor.selections = editor.selections.map((sel, idx) => {\n@@ -71,8 +72,8 @@ export function activate(context: vscode.ExtensionContext) {\n         let request: lc.TextDocumentIdentifier = {\n             uri: editor.document.uri.toString()\n         }\n-        let response = await client.sendRequest<lc.TextDocumentIdentifier>(\"m/parentModule\", request)\n-        let loc: lc.Location = response[0]\n+        let response = await client.sendRequest<lc.Location[]>(\"m/parentModule\", request)\n+        let loc = response[0]\n         if (loc == null) return\n         let uri = client.protocol2CodeConverter.asUri(loc.uri)\n         let range = client.protocol2CodeConverter.asRange(loc.range)\n@@ -82,19 +83,40 @@ export function activate(context: vscode.ExtensionContext) {\n         e.revealRange(range, vscode.TextEditorRevealType.InCenter)\n     })\n \n-    registerCommand('libsyntax-rust.run', async (cmd: ProcessSpec) => {\n-        let task = createTask(cmd)\n-        await vscode.tasks.executeTask(task)\n+    let prevRunnable: RunnableQuickPick | undefined = undefined\n+    registerCommand('libsyntax-rust.run', async () => {\n+        let editor = vscode.window.activeTextEditor\n+        if (editor == null || editor.document.languageId != \"rust\") return\n+        let textDocument: lc.TextDocumentIdentifier = {\n+            uri: editor.document.uri.toString()\n+        }\n+        let params: RunnablesParams = {\n+            textDocument,\n+            position: client.code2ProtocolConverter.asPosition(editor.selection.active)\n+        }\n+        let runnables = await client.sendRequest<Runnable[]>('m/runnables', params)\n+        let items: RunnableQuickPick[] = []\n+        if (prevRunnable) {\n+            items.push(prevRunnable)\n+        }\n+        for (let r of runnables) {\n+            items.push(new RunnableQuickPick(r))\n+        }\n+        let item = await vscode.window.showQuickPick(items)\n+        if (item) {\n+            item.detail = \"last\"\n+            prevRunnable = item\n+            let task = createTask(item.runnable)\n+            return await vscode.tasks.executeTask(task)\n+        }\n     })\n     registerCommand('libsyntax-rust.createFile', async (uri_: string) => {\n-        console.log(`uri: ${uri_}`)\n         let uri = vscode.Uri.parse(uri_)\n         let edit = new vscode.WorkspaceEdit()\n         edit.createFile(uri)\n         await vscode.workspace.applyEdit(edit)\n         let doc = await vscode.workspace.openTextDocument(uri)\n         await vscode.window.showTextDocument(doc)\n-        console.log(\"Done\")\n     })\n \n     dispose(vscode.workspace.registerTextDocumentContentProvider(\n@@ -113,13 +135,13 @@ export function activate(context: vscode.ExtensionContext) {\n \n // We need to order this after LS updates, but there's no API for that.\n // Hence, good old setTimeout.\n-function afterLs(f) {\n+function afterLs(f: () => any) {\n     setTimeout(f, 10)\n }\n \n export function deactivate(): Thenable<void> {\n     if (!client) {\n-        return undefined;\n+        return Promise.resolve();\n     }\n     return client.stop();\n }\n@@ -148,7 +170,7 @@ function startServer() {\n     );\n     client.onReady().then(() => {\n         client.onNotification(\n-            new lc.NotificationType(\"m/publishDecorations\"),\n+            \"m/publishDecorations\",\n             (params: PublishDecorationsParams) => {\n                 let editor = vscode.window.visibleTextEditors.find(\n                     (editor) => editor.document.uri.toString() == params.uri\n@@ -164,11 +186,11 @@ function startServer() {\n             new lc.RequestType<lc.Position, void, any, any>(\"m/moveCursor\"),\n             (params: lc.Position, token: lc.CancellationToken) => {\n                 let editor = vscode.window.activeTextEditor;\n-                if (editor == null) return\n+                if (!editor) return\n                 if (!editor.selection.isEmpty) return\n                 let position = client.protocol2CodeConverter.asPosition(params)\n                 afterLs(() => {\n-                    editor.selection = new vscode.Selection(position, position)\n+                    editor!.selection = new vscode.Selection(position, position)\n                 })\n             }\n         )\n@@ -200,8 +222,8 @@ class TextDocumentContentProvider implements vscode.TextDocumentContentProvider\n }\n \n \n-const decorations = (() => {\n-    const decor = (obj) => vscode.window.createTextEditorDecorationType({ color: obj })\n+const decorations: { [index: string]: vscode.TextEditorDecorationType } = (() => {\n+    const decor = (obj: any) => vscode.window.createTextEditorDecorationType({ color: obj })\n     return {\n         background: decor(\"#3F3F3F\"),\n         error: vscode.window.createTextEditorDecorationType({\n@@ -224,24 +246,24 @@ function setHighlights(\n     editor: vscode.TextEditor,\n     highlihgs: Array<Decoration>\n ) {\n-    let byTag = {}\n+    let byTag: Map<string, vscode.Range[]> = new Map()\n     for (let tag in decorations) {\n-        byTag[tag] = []\n+        byTag.set(tag, [])\n     }\n \n     for (let d of highlihgs) {\n-        if (!byTag[d.tag]) {\n+        if (!byTag.get(d.tag)) {\n             console.log(`unknown tag ${d.tag}`)\n             continue\n         }\n-        byTag[d.tag].push(\n+        byTag.get(d.tag)!.push(\n             client.protocol2CodeConverter.asRange(d.range)\n         )\n     }\n \n-    for (let tag in byTag) {\n-        let dec = decorations[tag]\n-        let ranges = byTag[tag]\n+    for (let tag of byTag.keys()) {\n+        let dec: vscode.TextEditorDecorationType = decorations[tag]\n+        let ranges = byTag.get(tag)!\n         editor.setDecorations(dec, ranges)\n     }\n }\n@@ -276,17 +298,36 @@ interface PublishDecorationsParams {\n     decorations: Decoration[],\n }\n \n-interface Decoration {\n-    range: lc.Range,\n-    tag: string,\n+interface RunnablesParams {\n+    textDocument: lc.TextDocumentIdentifier,\n+    position?: lc.Position,\n }\n \n-interface ProcessSpec {\n+interface Runnable {\n+    range: lc.Range;\n+    label: string;\n     bin: string;\n     args: string[];\n-    env: { [key: string]: string };\n+    env: { [index: string]: string },\n }\n \n+class RunnableQuickPick implements vscode.QuickPickItem {\n+    label: string;\n+    description?: string | undefined;\n+    detail?: string | undefined;\n+    picked?: boolean | undefined;\n+\n+    constructor(public runnable: Runnable) {\n+        this.label = runnable.label\n+    }\n+}\n+\n+interface Decoration {\n+    range: lc.Range,\n+    tag: string,\n+}\n+\n+\n interface CargoTaskDefinition extends vscode.TaskDefinition {\n     type: 'cargo';\n     label: string;\n@@ -295,8 +336,7 @@ interface CargoTaskDefinition extends vscode.TaskDefinition {\n     env?: { [key: string]: string };\n }\n \n-\n-function createTask(spec: ProcessSpec): vscode.Task {\n+function createTask(spec: Runnable): vscode.Task {\n     const TASK_SOURCE = 'Rust';\n     let definition: CargoTaskDefinition = {\n         type: 'cargo',\n@@ -313,7 +353,7 @@ function createTask(spec: ProcessSpec): vscode.Task {\n     };\n     let exec = new vscode.ShellExecution(execCmd, execOption);\n \n-    let f = vscode.workspace.workspaceFolders[0]\n+    let f = vscode.workspace.workspaceFolders![0]\n     let t = new vscode.Task(definition, f, definition.label, TASK_SOURCE, exec, ['$rustc']);\n     return t;\n }"}, {"sha": "ebec01624dd4f4b2dbdae5e214599474ac8a819f", "filename": "code/tsconfig.json", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/422efe59afe333a8371afe6f9fb45f159a6fb07f/code%2Ftsconfig.json", "raw_url": "https://github.com/rust-lang/rust/raw/422efe59afe333a8371afe6f9fb45f159a6fb07f/code%2Ftsconfig.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Ftsconfig.json?ref=422efe59afe333a8371afe6f9fb45f159a6fb07f", "patch": "@@ -3,9 +3,15 @@\n         \"module\": \"commonjs\",\n         \"target\": \"es6\",\n         \"outDir\": \"out\",\n-        \"lib\": [ \"es6\" ],\n+        \"lib\": [\n+            \"es6\"\n+        ],\n         \"sourceMap\": true,\n-        \"rootDir\": \".\"\n+        \"rootDir\": \"src\",\n+        \"strict\": true\n     },\n-    \"include\": [ \"src/*.ts\" ],\n+    \"exclude\": [\n+        \"node_modules\",\n+        \".vscode-test\"\n+    ]\n }"}, {"sha": "ee4072084f5b1c3f16a079a961336de72bc078eb", "filename": "crates/server/src/main_loop/handlers.rs", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/422efe59afe333a8371afe6f9fb45f159a6fb07f/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422efe59afe333a8371afe6f9fb45f159a6fb07f/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=422efe59afe333a8371afe6f9fb45f159a6fb07f", "patch": "@@ -135,48 +135,6 @@ pub fn handle_code_action(\n             res.push(cmd);\n         }\n     }\n-    for runnable in libeditor::runnables(&file) {\n-        if !contains_offset_nonstrict(runnable.range, offset) {\n-            continue;\n-        }\n-\n-        #[derive(Serialize)]\n-        struct ProcessSpec {\n-            bin: String,\n-            args: Vec<String>,\n-            env: HashMap<String, String>,\n-        }\n-\n-        let spec = ProcessSpec {\n-            bin: \"cargo\".to_string(),\n-            args: match runnable.kind {\n-                libeditor::RunnableKind::Test { name } => {\n-                    vec![\n-                        \"test\".to_string(),\n-                        \"--\".to_string(),\n-                        name,\n-                        \"--nocapture\".to_string(),\n-                    ]\n-                }\n-                libeditor::RunnableKind::Bin => vec![\"run\".to_string()]\n-            },\n-            env: {\n-                let mut m = HashMap::new();\n-                m.insert(\n-                    \"RUST_BACKTRACE\".to_string(),\n-                    \"short\".to_string(),\n-                );\n-                m\n-            }\n-        };\n-\n-        let cmd = Command {\n-            title: \"Run ...\".to_string(),\n-            command: \"libsyntax-rust.run\".to_string(),\n-            arguments: Some(vec![to_value(spec).unwrap()]),\n-        };\n-        res.push(cmd);\n-    }\n \n     for (diag, quick_fix) in world.analysis().diagnostics(file_id)? {\n         let quick_fix = match quick_fix {"}, {"sha": "269246dff067c9a8e356d32ed37f5716d7ed1b8d", "filename": "crates/server/src/req.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/422efe59afe333a8371afe6f9fb45f159a6fb07f/crates%2Fserver%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422efe59afe333a8371afe6f9fb45f159a6fb07f/crates%2Fserver%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Freq.rs?ref=422efe59afe333a8371afe6f9fb45f159a6fb07f", "patch": "@@ -142,7 +142,7 @@ pub enum Runnables {}\n impl Request for Runnables {\n     type Params = RunnablesParams;\n     type Result = Vec<Runnable>;\n-    const METHOD: &'static str = \"m/joinLines\";\n+    const METHOD: &'static str = \"m/runnables\";\n }\n \n #[derive(Deserialize, Debug)]"}, {"sha": "d7f34d75772d0a9b42e86c00a639c753449bb651", "filename": "crates/tools/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/422efe59afe333a8371afe6f9fb45f159a6fb07f/crates%2Ftools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422efe59afe333a8371afe6f9fb45f159a6fb07f/crates%2Ftools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Fmain.rs?ref=422efe59afe333a8371afe6f9fb45f159a6fb07f", "patch": "@@ -204,7 +204,7 @@ cd code\n     execute!(\n         r\"\n cd code\n-code --install-extension ./libsyntax-rust-0.0.1.vsix\n+code --install-extension ./rcf-lsp-0.0.1.vsix\n     \"\n     )?;\n     Ok(())"}]}