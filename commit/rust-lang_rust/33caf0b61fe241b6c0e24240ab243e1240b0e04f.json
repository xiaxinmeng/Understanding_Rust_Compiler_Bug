{"sha": "33caf0b61fe241b6c0e24240ab243e1240b0e04f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzY2FmMGI2MWZlMjQxYjZjMGUyNDI0MGFiMjQzZTEyNDBiMGUwNGY=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-01-05T19:59:40Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-01-05T19:59:40Z"}, "message": "Rename Instance.ty to Instance.monomorphic_ty", "tree": {"sha": "2dabdba53089542601dc7e270cf0f742f2fac3a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dabdba53089542601dc7e270cf0f742f2fac3a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33caf0b61fe241b6c0e24240ab243e1240b0e04f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl4SQDcACgkQtAh+UQ6Y\nsWR8qBAAh1ikEYFyferHlm9ZgU7IWLCp7sw5PtqXMPkPztD0HOyiaSCZkhojI6lZ\nenwbkF+UNN6qq3zA8InQhCi1z8dDNgwyfft6PxVnMbsjkWz11SXD32WewLybJwLm\nHJNmikM9/R86iL56hG/Qkln46Zso/aDqJ6M4QM4H9dQ7oPsjSXZwzPdEAgmHXq+I\n7oUUiT5b+yuKmBE6rI9akEJNksn33k1JMXgZA5RrEuwhdpUwZwAFKZNGeabR5j5P\nuX5iI5VxzfeL4mVN3n2mzL+4yxtus6wkZymOw5gZBSfA4vdldHSiLGnSi3YiRL3M\n+T72jbNnFJN/oBpJ3A1C6jDtOA5mrF4ohIPYK+4mg9Y4UsA2lHhF29BvQFdBPmcC\nFs1PpCIGWLi65k3prZO2UQx2wm2H9r8AGhRDR1OUTZJW/+TWrdJsqkg+GM70OJkE\nOGXCwa8psHLVpPtNa0jY1jklpX4v/S3DlA3YjS3HydqRAZg/OYb5ZEQ7DsSpmQfH\nM1PNNMa0/q66a6wGqiN7JsgIUmDmDgincg7LahC4qB1O9mNnRrLYXdWfOcVTa0aI\n1bKbOfSuzm2HSaUqFTuHXXYes11Tl/mcJazSmgzXuwRb1Q347WKYQTI76LlJt4lm\nWy0kV8W7kCTHLQW5nlvHz0E+TSeQN4i2bGFmhbl4VYCbQHvXu4s=\n=ReAe\n-----END PGP SIGNATURE-----", "payload": "tree 2dabdba53089542601dc7e270cf0f742f2fac3a7\nparent 464b58ca11d33e742f5d86c8bdad185e7b273e0d\nauthor Aaron Hill <aa1ronham@gmail.com> 1578254380 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1578254380 -0500\n\nRename Instance.ty to Instance.monomorphic_ty\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33caf0b61fe241b6c0e24240ab243e1240b0e04f", "html_url": "https://github.com/rust-lang/rust/commit/33caf0b61fe241b6c0e24240ab243e1240b0e04f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33caf0b61fe241b6c0e24240ab243e1240b0e04f/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "464b58ca11d33e742f5d86c8bdad185e7b273e0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/464b58ca11d33e742f5d86c8bdad185e7b273e0d", "html_url": "https://github.com/rust-lang/rust/commit/464b58ca11d33e742f5d86c8bdad185e7b273e0d"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "f2813f04035770a11013cc05885b25703365e3b2", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33caf0b61fe241b6c0e24240ab243e1240b0e04f/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33caf0b61fe241b6c0e24240ab243e1240b0e04f/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=33caf0b61fe241b6c0e24240ab243e1240b0e04f", "patch": "@@ -73,17 +73,13 @@ impl<'tcx> Instance<'tcx> {\n     /// (e.g. when we are attempting to to do const-propagation).\n     /// In this case, `Instace.ty_env` should be used to provide\n     /// the `ParamEnv` for our generic context.\n-    pub fn ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n+    pub fn monomorphic_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n         let ty = tcx.type_of(self.def.def_id());\n         // There shouldn't be any params - if there are, then\n         // Instance.ty_env should have been used to provide the proper\n         // ParamEnv\n         if self.substs.has_param_types() {\n-            bug!(\n-                \"Instance.ty called for type {:?} with params in substs: {:?}\",\n-                ty,\n-                self.substs\n-            );\n+            bug!(\"Instance.ty called for type {:?} with params in substs: {:?}\", ty, self.substs);\n         }\n         tcx.subst_and_normalize_erasing_regions(self.substs, ty::ParamEnv::reveal_all(), &ty)\n     }"}, {"sha": "5f599034e7d4d25512c015672ce1835bbee8f77c", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33caf0b61fe241b6c0e24240ab243e1240b0e04f/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33caf0b61fe241b6c0e24240ab243e1240b0e04f/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=33caf0b61fe241b6c0e24240ab243e1240b0e04f", "patch": "@@ -2301,7 +2301,7 @@ impl<'tcx> ty::Instance<'tcx> {\n     // or should go through `FnAbi` instead, to avoid losing any\n     // adjustments `FnAbi::of_instance` might be performing.\n     fn fn_sig_for_fn_abi(&self, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {\n-        let ty = self.ty(tcx);\n+        let ty = self.monomorphic_ty(tcx);\n         match ty.kind {\n             ty::FnDef(..) |\n             // Shims currently have type FnPtr. Not sure this should remain."}, {"sha": "78dd6fc8ffe750d80f504b366a6a6b0922576606", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33caf0b61fe241b6c0e24240ab243e1240b0e04f/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33caf0b61fe241b6c0e24240ab243e1240b0e04f/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=33caf0b61fe241b6c0e24240ab243e1240b0e04f", "patch": "@@ -36,7 +36,7 @@ pub fn get_fn(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) -> &'ll Value\n     }\n \n     let sym = tcx.symbol_name(instance).name.as_str();\n-    debug!(\"get_fn({:?}: {:?}) => {}\", instance, instance.ty(cx.tcx()), sym);\n+    debug!(\"get_fn({:?}: {:?}) => {}\", instance, instance.monomorphic_ty(cx.tcx()), sym);\n \n     let fn_abi = FnAbi::of_instance(cx, instance, &[]);\n "}, {"sha": "bccf3f5735cc871cebf7bb105e7e7e67aa2abfce", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33caf0b61fe241b6c0e24240ab243e1240b0e04f/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33caf0b61fe241b6c0e24240ab243e1240b0e04f/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=33caf0b61fe241b6c0e24240ab243e1240b0e04f", "patch": "@@ -204,7 +204,7 @@ impl CodegenCx<'ll, 'tcx> {\n             def_id\n         );\n \n-        let ty = instance.ty(self.tcx);\n+        let ty = instance.monomorphic_ty(self.tcx);\n         let sym = self.tcx.symbol_name(instance).name;\n \n         debug!(\"get_static: sym={} instance={:?}\", sym, instance);\n@@ -361,7 +361,7 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n             };\n \n             let instance = Instance::mono(self.tcx, def_id);\n-            let ty = instance.ty(self.tcx);\n+            let ty = instance.monomorphic_ty(self.tcx);\n             let llty = self.layout_of(ty).llvm_type(self);\n             let g = if val_llty == llty {\n                 g"}, {"sha": "a1e81c10b415ee90de4f813edee03b961bd1c9eb", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33caf0b61fe241b6c0e24240ab243e1240b0e04f/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33caf0b61fe241b6c0e24240ab243e1240b0e04f/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=33caf0b61fe241b6c0e24240ab243e1240b0e04f", "patch": "@@ -2287,7 +2287,7 @@ pub fn create_global_var_metadata(cx: &CodegenCx<'ll, '_>, def_id: DefId, global\n     };\n \n     let is_local_to_unit = is_node_local_to_unit(cx, def_id);\n-    let variable_type = Instance::mono(cx.tcx, def_id).ty(cx.tcx);\n+    let variable_type = Instance::mono(cx.tcx, def_id).monomorphic_ty(cx.tcx);\n     let type_metadata = type_metadata(cx, variable_type, span);\n     let var_name = SmallCStr::new(&tcx.item_name(def_id).as_str());\n     let linkage_name = if no_mangle {"}, {"sha": "1c7146308389aa4acb4754391308b892c84ed1f6", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33caf0b61fe241b6c0e24240ab243e1240b0e04f/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33caf0b61fe241b6c0e24240ab243e1240b0e04f/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=33caf0b61fe241b6c0e24240ab243e1240b0e04f", "patch": "@@ -89,7 +89,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         span: Span,\n     ) {\n         let tcx = self.tcx;\n-        let callee_ty = instance.ty(tcx);\n+        let callee_ty = instance.monomorphic_ty(tcx);\n \n         let (def_id, substs) = match callee_ty.kind {\n             ty::FnDef(def_id, substs) => (def_id, substs),"}, {"sha": "681bc1f2dcb77b30af5f6954593bfe62c54dfc45", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33caf0b61fe241b6c0e24240ab243e1240b0e04f/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33caf0b61fe241b6c0e24240ab243e1240b0e04f/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=33caf0b61fe241b6c0e24240ab243e1240b0e04f", "patch": "@@ -22,7 +22,7 @@ impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         symbol_name: &str,\n     ) {\n         let instance = Instance::mono(self.tcx, def_id);\n-        let ty = instance.ty(self.tcx);\n+        let ty = instance.monomorphic_ty(self.tcx);\n         let llty = self.layout_of(ty).llvm_type(self);\n \n         let g = self.define_global(symbol_name, llty).unwrap_or_else(|| {"}, {"sha": "f660a4a72a18903660ec1bad0e570b9ae17b18c4", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33caf0b61fe241b6c0e24240ab243e1240b0e04f/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33caf0b61fe241b6c0e24240ab243e1240b0e04f/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=33caf0b61fe241b6c0e24240ab243e1240b0e04f", "patch": "@@ -140,7 +140,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // to determine the type.\n         let drop_instance = self.memory.get_fn(drop_fn)?.as_instance()?;\n         trace!(\"Found drop fn: {:?}\", drop_instance);\n-        let fn_sig = drop_instance.ty(*self.tcx).fn_sig(*self.tcx);\n+        let fn_sig = drop_instance.monomorphic_ty(*self.tcx).fn_sig(*self.tcx);\n         let fn_sig = self.tcx.normalize_erasing_late_bound_regions(self.param_env, &fn_sig);\n         // The drop function takes `*mut T` where `T` is the type being dropped, so get that.\n         let args = fn_sig.inputs();"}, {"sha": "dca850462ce2ea6d2465662961f470fe67ac5364", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/33caf0b61fe241b6c0e24240ab243e1240b0e04f/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33caf0b61fe241b6c0e24240ab243e1240b0e04f/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=33caf0b61fe241b6c0e24240ab243e1240b0e04f", "patch": "@@ -358,7 +358,7 @@ fn collect_items_rec<'tcx>(\n             // Sanity check whether this ended up being collected accidentally\n             debug_assert!(should_monomorphize_locally(tcx, &instance));\n \n-            let ty = instance.ty(tcx);\n+            let ty = instance.monomorphic_ty(tcx);\n             visit_drop_use(tcx, ty, true, &mut neighbors);\n \n             recursion_depth_reset = None;\n@@ -1002,7 +1002,8 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n                             def_id_to_string(self.tcx, def_id)\n                         );\n \n-                        let ty = Instance::new(def_id, InternalSubsts::empty()).ty(self.tcx);\n+                        let ty =\n+                            Instance::new(def_id, InternalSubsts::empty()).monomorphic_ty(self.tcx);\n                         visit_drop_use(self.tcx, ty, true, self.output);\n                     }\n                 }"}]}