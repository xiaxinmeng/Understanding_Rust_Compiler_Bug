{"sha": "be4e05a1906d975ac0e09ca1a5ea2daf6a0018a0", "node_id": "C_kwDOAAsO6NoAKGJlNGUwNWExOTA2ZDk3NWFjMGUwOWNhMWE1ZWEyZGFmNmEwMDE4YTA", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-06-02T08:09:32Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-06-02T08:09:32Z"}, "message": "fmt", "tree": {"sha": "a1649a1fd2e4663b8c5d239354674a387a855ae5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1649a1fd2e4663b8c5d239354674a387a855ae5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be4e05a1906d975ac0e09ca1a5ea2daf6a0018a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be4e05a1906d975ac0e09ca1a5ea2daf6a0018a0", "html_url": "https://github.com/rust-lang/rust/commit/be4e05a1906d975ac0e09ca1a5ea2daf6a0018a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be4e05a1906d975ac0e09ca1a5ea2daf6a0018a0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5aebfb9348277639b0877eb83995dfd1bd2ff23", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5aebfb9348277639b0877eb83995dfd1bd2ff23", "html_url": "https://github.com/rust-lang/rust/commit/c5aebfb9348277639b0877eb83995dfd1bd2ff23"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "2a06bd871ef92cb379c2acb40a56df100785f09e", "filename": "src/tools/miri/src/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/be4e05a1906d975ac0e09ca1a5ea2daf6a0018a0/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be4e05a1906d975ac0e09ca1a5ea2daf6a0018a0/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs?ref=be4e05a1906d975ac0e09ca1a5ea2daf6a0018a0", "patch": "@@ -97,8 +97,12 @@ impl MachineStopType for TerminationInfo {\n     }\n     fn add_args(\n         self: Box<Self>,\n-        _: &mut dyn FnMut(std::borrow::Cow<'static, str>, rustc_errors::DiagnosticArgValue<'static>),\n-    ) {}\n+        _: &mut dyn FnMut(\n+            std::borrow::Cow<'static, str>,\n+            rustc_errors::DiagnosticArgValue<'static>,\n+        ),\n+    ) {\n+    }\n }\n \n /// Miri specific diagnostics\n@@ -324,10 +328,9 @@ pub fn report_error<'tcx, 'mir>(\n     // We want to dump the allocation if this is `InvalidUninitBytes`. Since `add_args` consumes\n     // the `InterpError`, we extract the variables it before that.\n     let extra = match e {\n-        UndefinedBehavior(UndefinedBehaviorInfo::InvalidUninitBytes(Some((alloc_id, access)))) => {\n-            Some((alloc_id, access))\n-        }\n-        _ => None\n+        UndefinedBehavior(UndefinedBehaviorInfo::InvalidUninitBytes(Some((alloc_id, access)))) =>\n+            Some((alloc_id, access)),\n+        _ => None,\n     };\n \n     // FIXME(fee1-dead), HACK: we want to use the error as title therefore we can just extract the\n@@ -477,7 +480,7 @@ pub fn report_msg<'tcx>(\n     }\n \n     let (mut err, handler) = err.into_diagnostic().unwrap();\n-    \n+\n     // Add backtrace\n     for (idx, frame_info) in stacktrace.iter().enumerate() {\n         let is_local = machine.is_local(frame_info);"}, {"sha": "befdddfa8c901bdcb422e3a0bb763253cb0de7fe", "filename": "src/tools/miri/src/helpers.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be4e05a1906d975ac0e09ca1a5ea2daf6a0018a0/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be4e05a1906d975ac0e09ca1a5ea2daf6a0018a0/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs?ref=be4e05a1906d975ac0e09ca1a5ea2daf6a0018a0", "patch": "@@ -162,9 +162,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         let instance = this.resolve_path(path, Namespace::ValueNS);\n         let cid = GlobalId { instance, promoted: None };\n         // We don't give a span -- this isn't actually used directly by the program anyway.\n-        let const_val = this\n-            .eval_global(cid, None)\n-            .unwrap_or_else(|err| panic!(\"failed to evaluate required Rust item: {path:?}\\n{err:?}\"));\n+        let const_val = this.eval_global(cid, None).unwrap_or_else(|err| {\n+            panic!(\"failed to evaluate required Rust item: {path:?}\\n{err:?}\")\n+        });\n         this.read_scalar(&const_val.into())\n             .unwrap_or_else(|err| panic!(\"failed to read required Rust item: {path:?}\\n{err:?}\"))\n     }"}]}