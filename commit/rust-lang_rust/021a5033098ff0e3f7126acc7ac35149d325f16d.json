{"sha": "021a5033098ff0e3f7126acc7ac35149d325f16d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMWE1MDMzMDk4ZmYwZTNmNzEyNmFjYzdhYzM1MTQ5ZDMyNWYxNmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-04T08:31:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-04T08:31:53Z"}, "message": "Auto merge of #61136 - matthewjasper:cannot-move-errors, r=pnkfelix\n\nMake cannot move errors more consistent with other borrowck errors\n\n* Note the type of the place being moved in all cases.\n* Note the place being moved from.\n* Simplify the search for overloaded place operators\n* Extend the note for move from overloaded deref apply to all types.\n* Add a note for moves from overloaded index.\n* Special case moves for closure captures.\n\nr? @pnkfelix", "tree": {"sha": "45360fcd7822839d7d7128f29b9161e4e8581c1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45360fcd7822839d7d7128f29b9161e4e8581c1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/021a5033098ff0e3f7126acc7ac35149d325f16d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/021a5033098ff0e3f7126acc7ac35149d325f16d", "html_url": "https://github.com/rust-lang/rust/commit/021a5033098ff0e3f7126acc7ac35149d325f16d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/021a5033098ff0e3f7126acc7ac35149d325f16d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c22ce2806c3198c9a2b90b78d00c5451593c833f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c22ce2806c3198c9a2b90b78d00c5451593c833f", "html_url": "https://github.com/rust-lang/rust/commit/c22ce2806c3198c9a2b90b78d00c5451593c833f"}, {"sha": "8ffa4080597231c49fabf63795dae4bf8e116248", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ffa4080597231c49fabf63795dae4bf8e116248", "html_url": "https://github.com/rust-lang/rust/commit/8ffa4080597231c49fabf63795dae4bf8e116248"}], "stats": {"total": 2632, "additions": 1116, "deletions": 1516}, "files": [{"sha": "c2b4a765c59fe7192e19df9e9888981838f2ac6d", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -913,6 +913,16 @@ impl<'tcx> LocalDecl<'tcx> {\n         }\n     }\n \n+    /// Returns `true` if this is a reference to a variable bound in a `match`\n+    /// expression that is used to access said variable for the guard of the\n+    /// match arm.\n+    pub fn is_ref_for_guard(&self) -> bool {\n+        match self.is_user_variable {\n+            Some(ClearCrossCrate::Set(BindingForm::RefForGuard)) => true,\n+            _ => false,\n+        }\n+    }\n+\n     /// Returns `true` is the local is from a compiler desugaring, e.g.,\n     /// `__next` from a `for` loop.\n     #[inline]"}, {"sha": "f8e73e838df49263c383da04ad68ddd20adae38a", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -234,22 +234,18 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         );\n                     }\n                 }\n-                if let Place::Base(PlaceBase::Local(local)) = place {\n+                let span = if let Place::Base(PlaceBase::Local(local)) = place {\n                     let decl = &self.mir.local_decls[*local];\n-                    err.span_label(\n-                        decl.source_info.span,\n-                        format!(\n-                            \"move occurs because {} has type `{}`, \\\n-                                which does not implement the `Copy` trait\",\n-                            note_msg, ty,\n-                    ));\n+                    Some(decl.source_info.span)\n                 } else {\n-                    err.note(&format!(\n-                        \"move occurs because {} has type `{}`, \\\n-                         which does not implement the `Copy` trait\",\n-                        note_msg, ty\n-                    ));\n-                }\n+                    None\n+                };\n+                self.note_type_does_not_implement_copy(\n+                    &mut err,\n+                    &note_msg,\n+                    ty,\n+                    span,\n+                );\n             }\n \n             if let Some((_, mut old_err)) = self.move_error_reported"}, {"sha": "3f977ea198b6dd00c11bdbb91917f7019a2112cf", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -2,9 +2,9 @@ use rustc::hir;\n use rustc::hir::def::Namespace;\n use rustc::hir::def_id::DefId;\n use rustc::mir::{\n-    AggregateKind, BindingForm, ClearCrossCrate, Constant, Field, Local,\n-    LocalKind, Location, Operand, Place, PlaceBase, ProjectionElem, Rvalue,\n-    Statement, StatementKind, Static, StaticKind, TerminatorKind,\n+    AggregateKind, Constant, Field, Local, LocalKind, Location, Operand,\n+    Place, PlaceBase, ProjectionElem, Rvalue, Statement, StatementKind, Static,\n+    StaticKind, TerminatorKind,\n };\n use rustc::ty::{self, DefIdTree, Ty};\n use rustc::ty::layout::VariantIdx;\n@@ -180,9 +180,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                                     &including_downcast,\n                                 )?;\n                             } else if let Place::Base(PlaceBase::Local(local)) = proj.base {\n-                                if let Some(ClearCrossCrate::Set(BindingForm::RefForGuard)) =\n-                                    self.mir.local_decls[local].is_user_variable\n-                                {\n+                                if self.mir.local_decls[local].is_ref_for_guard() {\n                                     self.append_place_to_string(\n                                         &proj.base,\n                                         buf,\n@@ -383,6 +381,26 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             false\n         }\n     }\n+\n+    /// Add a note that a type does not implement `Copy`\n+    pub(super) fn note_type_does_not_implement_copy(\n+        &self,\n+        err: &mut DiagnosticBuilder<'a>,\n+        place_desc: &str,\n+        ty: Ty<'tcx>,\n+        span: Option<Span>,\n+    ) {\n+        let message = format!(\n+            \"move occurs because {} has type `{}`, which does not implement the `Copy` trait\",\n+            place_desc,\n+            ty,\n+        );\n+        if let Some(span) = span {\n+            err.span_label(span, message);\n+        } else {\n+            err.note(&message);\n+        }\n+    }\n }\n \n impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {"}, {"sha": "f892c1597057bed8fa97f287d73b738e710efdb5", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 343, "deletions": 213, "changes": 556, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,13 +1,13 @@\n use core::unicode::property::Pattern_White_Space;\n-use std::fmt::{self, Display};\n \n use rustc::mir::*;\n-use rustc::ty;\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc_errors::{DiagnosticBuilder,Applicability};\n use syntax_pos::Span;\n \n use crate::borrow_check::MirBorrowckCtxt;\n use crate::borrow_check::prefixes::PrefixSet;\n+use crate::borrow_check::error_reporting::UseSpans;\n use crate::dataflow::move_paths::{\n     IllegalMoveOrigin, IllegalMoveOriginKind, InitLocation,\n     LookupResult, MoveError, MovePathIndex,\n@@ -50,25 +50,71 @@ enum GroupedMoveError<'tcx> {\n     // Everything that isn't from pattern matching.\n     OtherIllegalMove {\n         original_path: Place<'tcx>,\n-        span: Span,\n+        use_spans: UseSpans,\n         kind: IllegalMoveOriginKind<'tcx>,\n     },\n }\n \n-enum BorrowedContentSource {\n-    Arc,\n-    Rc,\n+enum BorrowedContentSource<'tcx> {\n     DerefRawPointer,\n-    Other,\n+    DerefMutableRef,\n+    DerefSharedRef,\n+    OverloadedDeref(Ty<'tcx>),\n+    OverloadedIndex(Ty<'tcx>),\n }\n \n-impl Display for BorrowedContentSource {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+impl BorrowedContentSource<'tcx> {\n+    fn describe_for_unnamed_place(&self) -> String {\n+        match *self {\n+            BorrowedContentSource::DerefRawPointer => format!(\"a raw pointer\"),\n+            BorrowedContentSource::DerefSharedRef => format!(\"a shared reference\"),\n+            BorrowedContentSource::DerefMutableRef => {\n+                format!(\"a mutable reference\")\n+            }\n+            BorrowedContentSource::OverloadedDeref(ty) => {\n+                if ty.is_rc() {\n+                   format!(\"an `Rc`\")\n+                } else if ty.is_arc() {\n+                    format!(\"an `Arc`\")\n+                } else {\n+                    format!(\"dereference of `{}`\", ty)\n+                }\n+            }\n+            BorrowedContentSource::OverloadedIndex(ty) => format!(\"index of `{}`\", ty),\n+        }\n+    }\n+\n+    fn describe_for_named_place(&self) -> Option<&'static str> {\n         match *self {\n-            BorrowedContentSource::Arc => write!(f, \"an `Arc`\"),\n-            BorrowedContentSource::Rc => write!(f, \"an `Rc`\"),\n-            BorrowedContentSource::DerefRawPointer => write!(f, \"dereference of raw pointer\"),\n-            BorrowedContentSource::Other => write!(f, \"borrowed content\"),\n+            BorrowedContentSource::DerefRawPointer => Some(\"raw pointer\"),\n+            BorrowedContentSource::DerefSharedRef => Some(\"shared reference\"),\n+            BorrowedContentSource::DerefMutableRef => Some(\"mutable reference\"),\n+            // Overloaded deref and index operators should be evaluated into a\n+            // temporary. So we don't need a description here.\n+            BorrowedContentSource::OverloadedDeref(_)\n+            | BorrowedContentSource::OverloadedIndex(_) => None\n+        }\n+    }\n+\n+    fn from_call(func: Ty<'tcx>, tcx: TyCtxt<'_, '_, 'tcx>) -> Option<Self> {\n+        match func.sty {\n+            ty::FnDef(def_id, substs) => {\n+                let trait_id = tcx.trait_of_item(def_id)?;\n+\n+                let lang_items = tcx.lang_items();\n+                if Some(trait_id) == lang_items.deref_trait()\n+                    || Some(trait_id) == lang_items.deref_mut_trait()\n+                {\n+                    Some(BorrowedContentSource::OverloadedDeref(substs.type_at(0)))\n+                } else if Some(trait_id) == lang_items.index_trait()\n+                    || Some(trait_id) == lang_items.index_mut_trait()\n+                {\n+                    Some(BorrowedContentSource::OverloadedIndex(substs.type_at(0)))\n+                } else {\n+                    None\n+                }\n+            }\n+            _ => None,\n         }\n     }\n }\n@@ -105,7 +151,6 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n             MoveError::IllegalMove {\n                 cannot_move_out_of: IllegalMoveOrigin { location, kind },\n             } => {\n-                let stmt_source_info = self.mir.source_info(location);\n                 // Note: that the only time we assign a place isn't a temporary\n                 // to a user variable is when initializing it.\n                 // If that ever stops being the case, then the ever initialized\n@@ -133,6 +178,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                         pat_span: _,\n                     }))) = local_decl.is_user_variable\n                     {\n+                        let stmt_source_info = self.mir.source_info(location);\n                         self.append_binding_error(\n                             grouped_errors,\n                             kind,\n@@ -146,8 +192,10 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                         return;\n                     }\n                 }\n+\n+                let move_spans = self.move_spans(&original_path, location);\n                 grouped_errors.push(GroupedMoveError::OtherIllegalMove {\n-                    span: stmt_source_info.span,\n+                    use_spans: move_spans,\n                     original_path,\n                     kind,\n                 });\n@@ -243,114 +291,205 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n             let (span, original_path, kind): (Span, &Place<'tcx>, &IllegalMoveOriginKind<'_>) =\n                 match error {\n                     GroupedMoveError::MovesFromPlace { span, ref original_path, ref kind, .. } |\n-                    GroupedMoveError::MovesFromValue { span, ref original_path, ref kind, .. } |\n-                    GroupedMoveError::OtherIllegalMove { span, ref original_path, ref kind } => {\n+                    GroupedMoveError::MovesFromValue { span, ref original_path, ref kind, .. } => {\n                         (span, original_path, kind)\n+                    }\n+                    GroupedMoveError::OtherIllegalMove {\n+                        use_spans,\n+                        ref original_path,\n+                        ref kind\n+                    } => {\n+                        (use_spans.args_or_use(), original_path, kind)\n                     },\n                 };\n-            let origin = Origin::Mir;\n             debug!(\"report: original_path={:?} span={:?}, kind={:?} \\\n                    original_path.is_upvar_field_projection={:?}\", original_path, span, kind,\n                    self.is_upvar_field_projection(original_path));\n-            let err = match kind {\n-                IllegalMoveOriginKind::Static => {\n-                    self.infcx.tcx.cannot_move_out_of(span, \"static item\", origin)\n-                }\n-                IllegalMoveOriginKind::BorrowedContent { target_place: place } => {\n-                    // Inspect the type of the content behind the\n-                    // borrow to provide feedback about why this\n-                    // was a move rather than a copy.\n-                    let ty = place.ty(self.mir, self.infcx.tcx).ty;\n-                    let is_upvar_field_projection =\n-                        self.prefixes(&original_path, PrefixSet::All)\n-                        .any(|p| self.is_upvar_field_projection(p).is_some());\n-                    debug!(\"report: ty={:?}\", ty);\n-                    let mut err = match ty.sty {\n-                        ty::Array(..) | ty::Slice(..) =>\n-                            self.infcx.tcx.cannot_move_out_of_interior_noncopy(\n-                                span, ty, None, origin\n-                            ),\n-                        ty::Closure(def_id, closure_substs)\n-                            if def_id == self.mir_def_id && is_upvar_field_projection\n-                        => {\n-                            let closure_kind_ty =\n-                                closure_substs.closure_kind_ty(def_id, self.infcx.tcx);\n-                            let closure_kind = closure_kind_ty.to_opt_closure_kind();\n-                            let place_description = match closure_kind {\n-                                Some(ty::ClosureKind::Fn) => {\n-                                    \"captured variable in an `Fn` closure\"\n-                                }\n-                                Some(ty::ClosureKind::FnMut) => {\n-                                    \"captured variable in an `FnMut` closure\"\n-                                }\n-                                Some(ty::ClosureKind::FnOnce) => {\n-                                    bug!(\"closure kind does not match first argument type\")\n-                                }\n-                                None => bug!(\"closure kind not inferred by borrowck\"),\n-                            };\n-                            debug!(\"report: closure_kind_ty={:?} closure_kind={:?} \\\n-                                    place_description={:?}\", closure_kind_ty, closure_kind,\n-                                    place_description);\n-\n-                            let mut diag = self.infcx.tcx.cannot_move_out_of(\n-                                span, place_description, origin);\n-\n-                            for prefix in self.prefixes(&original_path, PrefixSet::All) {\n-                                if let Some(field) = self.is_upvar_field_projection(prefix) {\n-                                    let upvar_hir_id = self.upvars[field.index()].var_hir_id;\n-                                    let upvar_span = self.infcx.tcx.hir().span_by_hir_id(\n-                                        upvar_hir_id);\n-                                    diag.span_label(upvar_span, \"captured outer variable\");\n-                                    break;\n-                                }\n-                            }\n-\n-                            diag\n-                        }\n-                        _ => {\n-                            let source = self.borrowed_content_source(place);\n-                            self.infcx.tcx.cannot_move_out_of(\n-                                span, &source.to_string(), origin\n-                            )\n-                        },\n-                    };\n-                    let orig_path_ty = format!(\n-                        \"{:?}\",\n-                        original_path.ty(self.mir, self.infcx.tcx).ty,\n-                    );\n-                    let snippet = self.infcx.tcx.sess.source_map().span_to_snippet(span).unwrap();\n-                    let is_option = orig_path_ty.starts_with(\"std::option::Option\");\n-                    let is_result = orig_path_ty.starts_with(\"std::result::Result\");\n-                    if  is_option || is_result {\n-                        err.span_suggestion(\n+            (\n+                match kind {\n+                    IllegalMoveOriginKind::Static => {\n+                        self.report_cannot_move_from_static(original_path, span)\n+                    }\n+                    IllegalMoveOriginKind::BorrowedContent { target_place } => {\n+                        self.report_cannot_move_from_borrowed_content(\n+                            original_path,\n+                            target_place,\n                             span,\n-                            &format!(\"consider borrowing the `{}`'s content\", if is_option {\n-                                \"Option\"\n-                            } else {\n-                                \"Result\"\n-                            }),\n-                            format!(\"{}.as_ref()\", snippet),\n-                            Applicability::MaybeIncorrect,\n-                        );\n+                        )\n                     }\n-                    err\n-                }\n-                IllegalMoveOriginKind::InteriorOfTypeWithDestructor { container_ty: ty } => {\n-                    self.infcx.tcx\n-                        .cannot_move_out_of_interior_of_drop(span, ty, origin)\n-                }\n-                IllegalMoveOriginKind::InteriorOfSliceOrArray { ty, is_index } =>\n-                    self.infcx.tcx.cannot_move_out_of_interior_noncopy(\n-                        span, ty, Some(*is_index), origin\n-                    ),\n-            };\n-            (err, span)\n+                    IllegalMoveOriginKind::InteriorOfTypeWithDestructor { container_ty: ty } => {\n+                        self.infcx.tcx\n+                            .cannot_move_out_of_interior_of_drop(span, ty, Origin::Mir)\n+                    }\n+                    IllegalMoveOriginKind::InteriorOfSliceOrArray { ty, is_index } =>\n+                        self.infcx.tcx.cannot_move_out_of_interior_noncopy(\n+                            span, ty, Some(*is_index), Origin::Mir\n+                        ),\n+                },\n+                span,\n+            )\n         };\n \n         self.add_move_hints(error, &mut err, err_span);\n         err.buffer(&mut self.errors_buffer);\n     }\n \n+    fn report_cannot_move_from_static(\n+        &mut self,\n+        place: &Place<'tcx>,\n+        span: Span\n+    ) -> DiagnosticBuilder<'a> {\n+        let mut base_static = place;\n+        loop {\n+            match base_static {\n+                Place::Base(_) => break,\n+                Place::Projection(box Projection { base, .. }) => base_static = base,\n+            }\n+        }\n+\n+        let description = if let Place::Base(_) = place {\n+            format!(\"static item `{}`\", self.describe_place(place).unwrap())\n+        } else {\n+            format!(\n+                \"`{:?}` as `{:?}` is a static item\",\n+                self.describe_place(place).unwrap(),\n+                self.describe_place(base_static).unwrap(),\n+            )\n+        };\n+\n+        self.infcx.tcx.cannot_move_out_of(span, &description, Origin::Mir)\n+    }\n+\n+    fn report_cannot_move_from_borrowed_content(\n+        &mut self,\n+        move_place: &Place<'tcx>,\n+        deref_target_place: &Place<'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'a> {\n+        let origin = Origin::Mir;\n+\n+        // Inspect the type of the content behind the\n+        // borrow to provide feedback about why this\n+        // was a move rather than a copy.\n+        let ty = deref_target_place.ty(self.mir, self.infcx.tcx).ty;\n+        let upvar_field = self.prefixes(&move_place, PrefixSet::All)\n+            .find_map(|p| self.is_upvar_field_projection(p));\n+\n+        let deref_base = match deref_target_place {\n+            Place::Projection(box Projection { base, elem: ProjectionElem::Deref }) => base,\n+            _ => bug!(\"deref_target_place is not a deref projection\"),\n+        };\n+\n+        if let Place::Base(PlaceBase::Local(local)) = *deref_base {\n+            let decl = &self.mir.local_decls[local];\n+            if decl.is_ref_for_guard() {\n+                let mut err = self.infcx.tcx.cannot_move_out_of(\n+                    span,\n+                    &format!(\"`{}` in pattern guard\", decl.name.unwrap()),\n+                    origin,\n+                );\n+                err.note(\n+                    \"variables bound in patterns cannot be moved from \\\n+                     until after the end of the pattern guard\");\n+                return err;\n+            }\n+        }\n+\n+        debug!(\"report: ty={:?}\", ty);\n+        let mut err = match ty.sty {\n+            ty::Array(..) | ty::Slice(..) =>\n+                self.infcx.tcx.cannot_move_out_of_interior_noncopy(\n+                    span, ty, None, origin\n+                ),\n+            ty::Closure(def_id, closure_substs)\n+                if def_id == self.mir_def_id && upvar_field.is_some()\n+            => {\n+                let closure_kind_ty = closure_substs.closure_kind_ty(def_id, self.infcx.tcx);\n+                let closure_kind = closure_kind_ty.to_opt_closure_kind();\n+                let capture_description = match closure_kind {\n+                    Some(ty::ClosureKind::Fn) => {\n+                        \"captured variable in an `Fn` closure\"\n+                    }\n+                    Some(ty::ClosureKind::FnMut) => {\n+                        \"captured variable in an `FnMut` closure\"\n+                    }\n+                    Some(ty::ClosureKind::FnOnce) => {\n+                        bug!(\"closure kind does not match first argument type\")\n+                    }\n+                    None => bug!(\"closure kind not inferred by borrowck\"),\n+                };\n+\n+                let upvar = &self.upvars[upvar_field.unwrap().index()];\n+                let upvar_hir_id = upvar.var_hir_id;\n+                let upvar_name = upvar.name;\n+                let upvar_span = self.infcx.tcx.hir().span_by_hir_id(upvar_hir_id);\n+\n+                let place_name = self.describe_place(move_place).unwrap();\n+\n+                let place_description = if self.is_upvar_field_projection(move_place).is_some() {\n+                    format!(\"`{}`, a {}\", place_name, capture_description)\n+                } else {\n+                    format!(\n+                        \"`{}`, as `{}` is a {}\",\n+                        place_name,\n+                        upvar_name,\n+                        capture_description,\n+                    )\n+                };\n+\n+                debug!(\n+                    \"report: closure_kind_ty={:?} closure_kind={:?} place_description={:?}\",\n+                    closure_kind_ty, closure_kind, place_description,\n+                );\n+\n+                let mut diag = self.infcx.tcx.cannot_move_out_of(span, &place_description, origin);\n+\n+                diag.span_label(upvar_span, \"captured outer variable\");\n+\n+                diag\n+            }\n+            _ => {\n+                let source = self.borrowed_content_source(deref_base);\n+                match (self.describe_place(move_place), source.describe_for_named_place()) {\n+                    (Some(place_desc), Some(source_desc)) => {\n+                        self.infcx.tcx.cannot_move_out_of(\n+                            span,\n+                            &format!(\"`{}` which is behind a {}\", place_desc, source_desc),\n+                            origin,\n+                        )\n+                    }\n+                    (_, _) => {\n+                        self.infcx.tcx.cannot_move_out_of(\n+                            span,\n+                            &source.describe_for_unnamed_place(),\n+                            origin,\n+                        )\n+                    }\n+                }\n+            },\n+        };\n+        let move_ty = format!(\n+            \"{:?}\",\n+            move_place.ty(self.mir, self.infcx.tcx).ty,\n+        );\n+        let snippet = self.infcx.tcx.sess.source_map().span_to_snippet(span).unwrap();\n+        let is_option = move_ty.starts_with(\"std::option::Option\");\n+        let is_result = move_ty.starts_with(\"std::result::Result\");\n+        if  is_option || is_result {\n+            err.span_suggestion(\n+                span,\n+                &format!(\"consider borrowing the `{}`'s content\", if is_option {\n+                    \"Option\"\n+                } else {\n+                    \"Result\"\n+                }),\n+                format!(\"{}.as_ref()\", snippet),\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+        err\n+    }\n+\n     fn add_move_hints(\n         &self,\n         error: GroupedMoveError<'tcx>,\n@@ -391,9 +530,25 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                     );\n                 }\n \n-                binds_to.sort();\n-                binds_to.dedup();\n-                self.add_move_error_details(err, &binds_to);\n+                if binds_to.is_empty() {\n+                    let place_ty = move_from.ty(self.mir, self.infcx.tcx).ty;\n+                    let place_desc = match self.describe_place(&move_from) {\n+                        Some(desc) => format!(\"`{}`\", desc),\n+                        None => format!(\"value\"),\n+                    };\n+\n+                    self.note_type_does_not_implement_copy(\n+                        err,\n+                        &place_desc,\n+                        place_ty,\n+                        Some(span)\n+                    );\n+                } else {\n+                    binds_to.sort();\n+                    binds_to.dedup();\n+\n+                    self.add_move_error_details(err, &binds_to);\n+                }\n             }\n             GroupedMoveError::MovesFromValue { mut binds_to, .. } => {\n                 binds_to.sort();\n@@ -402,7 +557,26 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 self.add_move_error_details(err, &binds_to);\n             }\n             // No binding. Nothing to suggest.\n-            GroupedMoveError::OtherIllegalMove { .. } => (),\n+            GroupedMoveError::OtherIllegalMove { ref original_path, use_spans, .. } => {\n+                let span = use_spans.var_or_use();\n+                let place_ty = original_path.ty(self.mir, self.infcx.tcx).ty;\n+                let place_desc = match self.describe_place(original_path) {\n+                    Some(desc) => format!(\"`{}`\", desc),\n+                    None => format!(\"value\"),\n+                };\n+                self.note_type_does_not_implement_copy(\n+                    err,\n+                    &place_desc,\n+                    place_ty,\n+                    Some(span),\n+                );\n+\n+                use_spans.args_span_label(err, format!(\"move out of {} occurs here\", place_desc));\n+                use_spans.var_span_label(\n+                    err,\n+                    format!(\"move occurs due to use{}\", use_spans.describe()),\n+                );\n+            },\n         }\n     }\n \n@@ -473,14 +647,11 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n             }\n \n             if binds_to.len() == 1 {\n-                err.span_note(\n-                    binding_span,\n-                    &format!(\n-                        \"move occurs because `{}` has type `{}`, \\\n-                            which does not implement the `Copy` trait\",\n-                        bind_to.name.unwrap(),\n-                        bind_to.ty\n-                    ),\n+                self.note_type_does_not_implement_copy(\n+                    err,\n+                    &format!(\"`{}`\", bind_to.name.unwrap()),\n+                    bind_to.ty,\n+                    Some(binding_span)\n                 );\n             } else {\n                 noncopy_var_spans.push(binding_span);\n@@ -496,105 +667,64 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn borrowed_content_source(&self, place: &Place<'tcx>) -> BorrowedContentSource {\n-        // Look up the provided place and work out the move path index for it,\n-        // we'll use this to work back through where this value came from and check whether it\n-        // was originally part of an `Rc` or `Arc`.\n-        let initial_mpi = match self.move_data.rev_lookup.find(place) {\n-            LookupResult::Exact(mpi) | LookupResult::Parent(Some(mpi)) => mpi,\n-            _ => return BorrowedContentSource::Other,\n-        };\n+    fn borrowed_content_source(&self, deref_base: &Place<'tcx>) -> BorrowedContentSource<'tcx> {\n+        let tcx = self.infcx.tcx;\n \n-        let mut queue = vec![initial_mpi];\n-        let mut visited = Vec::new();\n-        debug!(\"borrowed_content_source: queue={:?}\", queue);\n-        while let Some(mpi) = queue.pop() {\n-            debug!(\n-                \"borrowed_content_source: mpi={:?} queue={:?} visited={:?}\",\n-                mpi, queue, visited\n-            );\n-\n-            // Don't visit the same path twice.\n-            if visited.contains(&mpi) {\n-                continue;\n-            }\n-            visited.push(mpi);\n-\n-            for i in &self.move_data.init_path_map[mpi] {\n-                let init = &self.move_data.inits[*i];\n-                debug!(\"borrowed_content_source: init={:?}\", init);\n-                // We're only interested in statements that initialized a value, not the\n-                // initializations from arguments.\n-                let loc = match init.location {\n-                    InitLocation::Statement(stmt) => stmt,\n-                    _ => continue,\n-                };\n+        // Look up the provided place and work out the move path index for it,\n+        // we'll use this to check whether it was originally from an overloaded\n+        // operator.\n+        match self.move_data.rev_lookup.find(deref_base) {\n+            LookupResult::Exact(mpi) | LookupResult::Parent(Some(mpi)) => {\n+                debug!(\"borrowed_content_source: mpi={:?}\", mpi);\n+\n+                for i in &self.move_data.init_path_map[mpi] {\n+                    let init = &self.move_data.inits[*i];\n+                    debug!(\"borrowed_content_source: init={:?}\", init);\n+                    // We're only interested in statements that initialized a value, not the\n+                    // initializations from arguments.\n+                    let loc = match init.location {\n+                        InitLocation::Statement(stmt) => stmt,\n+                        _ => continue,\n+                    };\n \n-                let bbd = &self.mir[loc.block];\n-                let is_terminator = bbd.statements.len() == loc.statement_index;\n-                debug!(\"borrowed_content_source: loc={:?} is_terminator={:?}\", loc, is_terminator);\n-                if !is_terminator {\n-                    let stmt = &bbd.statements[loc.statement_index];\n-                    debug!(\"borrowed_content_source: stmt={:?}\", stmt);\n-                    // We're only interested in assignments (in particular, where the\n-                    // assignment came from - was it an `Rc` or `Arc`?).\n-                    if let StatementKind::Assign(_, box Rvalue::Ref(_, _, source)) = &stmt.kind {\n-                        let ty = source.ty(self.mir, self.infcx.tcx).ty;\n-                        let ty = match ty.sty {\n-                            ty::Ref(_, ty, _) => ty,\n-                            _ => ty,\n-                        };\n-                        debug!(\"borrowed_content_source: ty={:?}\", ty);\n-\n-                        if ty.is_arc() {\n-                            return BorrowedContentSource::Arc;\n-                        } else if ty.is_rc() {\n-                            return BorrowedContentSource::Rc;\n-                        } else {\n-                            queue.push(init.path);\n-                        }\n-                    }\n-                } else if let Some(Terminator {\n-                    kind: TerminatorKind::Call { args, .. },\n-                    ..\n-                }) = &bbd.terminator {\n-                    for arg in args {\n-                        let source = match arg {\n-                            Operand::Copy(place) | Operand::Move(place) => place,\n-                            _ => continue,\n-                        };\n-\n-                        let ty = source.ty(self.mir, self.infcx.tcx).ty;\n-                        let ty = match ty.sty {\n-                            ty::Ref(_, ty, _) => ty,\n-                            _ => ty,\n-                        };\n-                        debug!(\"borrowed_content_source: ty={:?}\", ty);\n-\n-                        if ty.is_arc() {\n-                            return BorrowedContentSource::Arc;\n-                        } else if ty.is_rc() {\n-                            return BorrowedContentSource::Rc;\n-                        } else {\n-                            queue.push(init.path);\n+                    let bbd = &self.mir[loc.block];\n+                    let is_terminator = bbd.statements.len() == loc.statement_index;\n+                    debug!(\n+                        \"borrowed_content_source: loc={:?} is_terminator={:?}\",\n+                        loc,\n+                        is_terminator,\n+                    );\n+                    if !is_terminator {\n+                        continue;\n+                    } else if let Some(Terminator {\n+                        kind: TerminatorKind::Call {\n+                            ref func,\n+                            from_hir_call: false,\n+                            ..\n+                        },\n+                        ..\n+                    }) = bbd.terminator {\n+                        if let Some(source)\n+                            = BorrowedContentSource::from_call(func.ty(self.mir, tcx), tcx)\n+                        {\n+                            return source;\n                         }\n                     }\n                 }\n             }\n-        }\n+            // Base is a `static` so won't be from an overloaded operator\n+            _ => (),\n+        };\n \n-        // If we didn't find an `Arc` or an `Rc`, then check specifically for\n-        // a dereference of a place that has the type of a raw pointer.\n-        // We can't use `place.ty(..).to_ty(..)` here as that strips away the raw pointer.\n-        if let Place::Projection(box Projection {\n-            base,\n-            elem: ProjectionElem::Deref,\n-        }) = place {\n-            if base.ty(self.mir, self.infcx.tcx).ty.is_unsafe_ptr() {\n-                return BorrowedContentSource::DerefRawPointer;\n-            }\n+        // If we didn't find an overloaded deref or index, then assume it's a\n+        // built in deref and check the type of the base.\n+        let base_ty = deref_base.ty(self.mir, tcx).ty;\n+        if base_ty.is_unsafe_ptr() {\n+            BorrowedContentSource::DerefRawPointer\n+        } else if base_ty.is_mutable_pointer() {\n+            BorrowedContentSource::DerefMutableRef\n+        } else {\n+            BorrowedContentSource::DerefSharedRef\n         }\n-\n-        BorrowedContentSource::Other\n     }\n }"}, {"sha": "cbab84c2961a906dc20f97a2c3dfa1059ca5291b", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -95,12 +95,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 } else if {\n                     if let Place::Base(PlaceBase::Local(local)) = *base {\n-                        if let Some(ClearCrossCrate::Set(BindingForm::RefForGuard))\n-                            = self.mir.local_decls[local].is_user_variable {\n-                                true\n-                        } else {\n-                            false\n-                        }\n+                        self.mir.local_decls[local].is_ref_for_guard()\n                     } else {\n                         false\n                     }"}, {"sha": "87e2118094cafe8e39de407c0813eed72aa67f50", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -503,13 +503,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 elem: ProjectionElem::Deref,\n             }) => {\n                 debug_assert!(\n-                    if let Some(ClearCrossCrate::Set(BindingForm::RefForGuard)) =\n-                        this.local_decls[local].is_user_variable\n-                    {\n-                        true\n-                    } else {\n-                        false\n-                    },\n+                    this.local_decls[local].is_ref_for_guard(),\n                     \"Unexpected capture place\",\n                 );\n                 this.local_decls[local].mutability"}, {"sha": "37df368f3b72560cbf2db8d66552c13bbd5d75bc", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -399,18 +399,14 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         move_from_desc: &str,\n         o: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n-        let mut err = struct_span_err!(\n+        let err = struct_span_err!(\n             self,\n             move_from_span,\n             E0507,\n             \"cannot move out of {}{OGN}\",\n             move_from_desc,\n             OGN = o\n         );\n-        err.span_label(\n-            move_from_span,\n-            format!(\"cannot move out of {}\", move_from_desc),\n-        );\n \n         self.cancel_if_wrong_origin(err, o)\n     }\n@@ -434,8 +430,7 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n             self,\n             move_from_span,\n             E0508,\n-            \"cannot move out of type `{}`, \\\n-             a non-copy {}{OGN}\",\n+            \"cannot move out of type `{}`, a non-copy {}{OGN}\",\n             ty,\n             type_name,\n             OGN = o\n@@ -455,8 +450,7 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n             self,\n             move_from_span,\n             E0509,\n-            \"cannot move out of type `{}`, \\\n-             which implements the `Drop` trait{OGN}\",\n+            \"cannot move out of type `{}`, which implements the `Drop` trait{OGN}\",\n             container_ty,\n             OGN = o\n         );"}, {"sha": "424d7ebb37444a49120f747197782a8df2e68534", "filename": "src/test/ui/access-mode-in-closures.stderr", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,17 +1,12 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `s.0` which is behind a shared reference\n   --> $DIR/access-mode-in-closures.rs:8:15\n    |\n LL |         match *s { S(v) => v }\n-   |               ^^     - data moved here\n-   |               |\n-   |               cannot move out of borrowed content\n+   |               ^^     -\n+   |               |      |\n+   |               |      data moved here\n+   |               |      move occurs because `v` has type `std::vec::Vec<isize>`, which does not implement the `Copy` trait\n    |               help: consider removing the `*`: `s`\n-   |\n-note: move occurs because `v` has type `std::vec::Vec<isize>`, which does not implement the `Copy` trait\n-  --> $DIR/access-mode-in-closures.rs:8:22\n-   |\n-LL |         match *s { S(v) => v }\n-   |                      ^\n \n error: aborting due to previous error\n "}, {"sha": "b5133ea7c92a0f69f863ac7a571613934ad3dddb", "filename": "src/test/ui/binop/binop-move-semantics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -27,9 +27,9 @@ fn illegal_dereference<T: Add<Output=()>>(mut x: T, y: T) {\n     let m = &mut x;\n     let n = &y;\n \n-    *m  //~ ERROR: cannot move out of borrowed content\n+    *m  //~ ERROR: cannot move\n     +\n-    *n;  //~ ERROR: cannot move out of borrowed content\n+    *n;  //~ ERROR: cannot move\n     use_imm(n); use_mut(m);\n }\n struct Foo;"}, {"sha": "897607dc2d8d52b59457c21d528386af02670093", "filename": "src/test/ui/binop/binop-move-semantics.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -47,17 +47,17 @@ LL |     y;\n LL |     use_mut(n); use_imm(m);\n    |             - borrow later used here\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `*m` which is behind a mutable reference\n   --> $DIR/binop-move-semantics.rs:30:5\n    |\n LL |     *m\n-   |     ^^ cannot move out of borrowed content\n+   |     ^^ move occurs because `*m` has type `T`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `*n` which is behind a shared reference\n   --> $DIR/binop-move-semantics.rs:32:5\n    |\n LL |     *n;\n-   |     ^^ cannot move out of borrowed content\n+   |     ^^ move occurs because `*n` has type `T`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `f` as immutable because it is also borrowed as mutable\n   --> $DIR/binop-move-semantics.rs:54:5"}, {"sha": "ebdacee7f65d8d330d60812c1ec32696762bb596", "filename": "src/test/ui/borrowck/borrowck-feature-nll-overrides-migrate.edition.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.edition.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,8 +1,14 @@\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-feature-nll-overrides-migrate.rs:22:17\n+error[E0507]: cannot move out of `foo` in pattern guard\n+  --> $DIR/borrowck-feature-nll-overrides-migrate.rs:22:18\n    |\n LL |                 (|| { let bar = foo; bar.take() })();\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |                  ^^             ---\n+   |                  |              |\n+   |                  |              move occurs because `foo` has type `&mut std::option::Option<&i32>`, which does not implement the `Copy` trait\n+   |                  |              move occurs due to use in closure\n+   |                  move out of `foo` occurs here\n+   |\n+   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error: aborting due to previous error\n "}, {"sha": "a6f3905bebd53c908243c4a596a8a87a0fd2be6b", "filename": "src/test/ui/borrowck/borrowck-feature-nll-overrides-migrate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -20,8 +20,8 @@ fn main() {\n         ref mut foo\n             if {\n                 (|| { let bar = foo; bar.take() })();\n-                //[zflag]~^ ERROR cannot move out of borrowed content [E0507]\n-                //[edition]~^^ ERROR cannot move out of borrowed content [E0507]\n+                //[zflag]~^ ERROR cannot move out of `foo` in pattern guard [E0507]\n+                //[edition]~^^ ERROR cannot move out of `foo` in pattern guard [E0507]\n                 false\n             } => {},\n         Some(ref _s) => println!(\"Note this arm is bogus; the `Some` became `None` in the guard.\"),"}, {"sha": "ebdacee7f65d8d330d60812c1ec32696762bb596", "filename": "src/test/ui/borrowck/borrowck-feature-nll-overrides-migrate.zflag.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.zflag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.zflag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-feature-nll-overrides-migrate.zflag.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,8 +1,14 @@\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-feature-nll-overrides-migrate.rs:22:17\n+error[E0507]: cannot move out of `foo` in pattern guard\n+  --> $DIR/borrowck-feature-nll-overrides-migrate.rs:22:18\n    |\n LL |                 (|| { let bar = foo; bar.take() })();\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |                  ^^             ---\n+   |                  |              |\n+   |                  |              move occurs because `foo` has type `&mut std::option::Option<&i32>`, which does not implement the `Copy` trait\n+   |                  |              move occurs due to use in closure\n+   |                  move out of `foo` occurs here\n+   |\n+   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error: aborting due to previous error\n "}, {"sha": "d4ceae2963b34304a0f613db71f904eeb664169a", "filename": "src/test/ui/borrowck/borrowck-fn-in-const-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -3,7 +3,7 @@\n \n const MOVE: fn(&String) -> String = {\n     fn broken(x: &String) -> String {\n-        return *x //~ ERROR cannot move out of borrowed content [E0507]\n+        return *x //~ ERROR cannot move\n     }\n     broken\n };"}, {"sha": "4c9cfa60ad46370f318d8c84d40936caac3519c9", "filename": "src/test/ui/borrowck/borrowck-fn-in-const-a.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,8 +1,8 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `*x` which is behind a shared reference\n   --> $DIR/borrowck-fn-in-const-a.rs:6:16\n    |\n LL |         return *x\n-   |                ^^ cannot move out of borrowed content\n+   |                ^^ move occurs because `*x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "38e41f315fc52016339869e9fa98e950de9c26f0", "filename": "src/test/ui/borrowck/borrowck-for-loop-correct-cmt-for-pattern.stderr", "status": "modified", "additions": 9, "deletions": 24, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,47 +1,32 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:12:15\n    |\n LL |     for &a in x.iter() {\n-   |         --    ^^^^^^^^ cannot move out of borrowed content\n+   |         --    ^^^^^^^^\n    |         ||\n    |         |data moved here\n+   |         |move occurs because `a` has type `&mut i32`, which does not implement the `Copy` trait\n    |         help: consider removing the `&`: `a`\n-   |\n-note: move occurs because `a` has type `&mut i32`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:12:10\n-   |\n-LL |     for &a in x.iter() {\n-   |          ^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:18:15\n    |\n LL |     for &a in &f.a {\n-   |         --    ^^^^ cannot move out of borrowed content\n+   |         --    ^^^^\n    |         ||\n    |         |data moved here\n+   |         |move occurs because `a` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n    |         help: consider removing the `&`: `a`\n-   |\n-note: move occurs because `a` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:18:10\n-   |\n-LL |     for &a in &f.a {\n-   |          ^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:22:15\n    |\n LL |     for &a in x.iter() {\n-   |         --    ^^^^^^^^ cannot move out of borrowed content\n+   |         --    ^^^^^^^^\n    |         ||\n    |         |data moved here\n+   |         |move occurs because `a` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n    |         help: consider removing the `&`: `a`\n-   |\n-note: move occurs because `a` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:22:10\n-   |\n-LL |     for &a in x.iter() {\n-   |          ^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a45f7b18e07d689e6c7929824c811c15f10c196d", "filename": "src/test/ui/borrowck/borrowck-in-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -2,7 +2,7 @@\n \n static FN : &'static (dyn Fn() -> (Box<dyn Fn()->Box<i32>>) + Sync) = &|| {\n     let x = Box::new(0);\n-    Box::new(|| x) //~ ERROR cannot move out of captured variable in an `Fn` closure\n+    Box::new(|| x) //~ ERROR cannot move out of `x`, a captured variable in an `Fn` closure\n };\n \n fn main() {"}, {"sha": "77d6d7c231d1914f6e2369104cc9fe6654669764", "filename": "src/test/ui/borrowck/borrowck-in-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,10 +1,10 @@\n-error[E0507]: cannot move out of captured variable in an `Fn` closure\n+error[E0507]: cannot move out of `x`, a captured variable in an `Fn` closure\n   --> $DIR/borrowck-in-static.rs:5:17\n    |\n LL |     let x = Box::new(0);\n    |         - captured outer variable\n LL |     Box::new(|| x)\n-   |                 ^ cannot move out of captured variable in an `Fn` closure\n+   |                 ^ move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "908b2c0ff5ee8ef6e4900998f4d0b2211be0ecc0", "filename": "src/test/ui/borrowck/borrowck-issue-2657-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,10 +1,10 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `*y` which is behind a shared reference\n   --> $DIR/borrowck-issue-2657-2.rs:7:18\n    |\n LL |         let _b = *y;\n    |                  ^^\n    |                  |\n-   |                  cannot move out of borrowed content\n+   |                  move occurs because `*y` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n    |                  help: consider removing the `*`: `y`\n \n error: aborting due to previous error"}, {"sha": "663164cfc2c1ced99c495cc92094868d2ef8a6f1", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.edition.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,9 +1,14 @@\n-warning[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-migrate-to-nll.rs:25:17\n+warning[E0507]: cannot move out of `foo` in pattern guard\n+  --> $DIR/borrowck-migrate-to-nll.rs:25:18\n    |\n LL |                 (|| { let bar = foo; bar.take() })();\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |                  ^^             ---\n+   |                  |              |\n+   |                  |              move occurs because `foo` has type `&mut std::option::Option<&i32>`, which does not implement the `Copy` trait\n+   |                  |              move occurs due to use in closure\n+   |                  move out of `foo` occurs here\n    |\n+   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n    = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n    = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n    = note: for more information, try `rustc --explain E0729`"}, {"sha": "663164cfc2c1ced99c495cc92094868d2ef8a6f1", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.zflag.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,9 +1,14 @@\n-warning[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-migrate-to-nll.rs:25:17\n+warning[E0507]: cannot move out of `foo` in pattern guard\n+  --> $DIR/borrowck-migrate-to-nll.rs:25:18\n    |\n LL |                 (|| { let bar = foo; bar.take() })();\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |                  ^^             ---\n+   |                  |              |\n+   |                  |              move occurs because `foo` has type `&mut std::option::Option<&i32>`, which does not implement the `Copy` trait\n+   |                  |              move occurs due to use in closure\n+   |                  move out of `foo` occurs here\n    |\n+   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n    = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n    = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n    = note: for more information, try `rustc --explain E0729`"}, {"sha": "0eceaf561b44c27e0343c46f88eb7a53306d5a16", "filename": "src/test/ui/borrowck/borrowck-move-by-capture.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,11 +1,15 @@\n-error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+error[E0507]: cannot move out of `bar`, a captured variable in an `FnMut` closure\n   --> $DIR/borrowck-move-by-capture.rs:9:29\n    |\n LL |     let bar: Box<_> = box 3;\n    |         --- captured outer variable\n LL |     let _g = to_fn_mut(|| {\n LL |         let _h = to_fn_once(move || -> isize { *bar });\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of captured variable in an `FnMut` closure\n+   |                             ^^^^^^^^^^^^^^^^    ---\n+   |                             |                   |\n+   |                             |                   move occurs because `bar` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   |                             |                   move occurs due to use in closure\n+   |                             move out of `bar` occurs here\n \n error: aborting due to previous error\n "}, {"sha": "7ef59f50c0332c856247b5df47e13d1ca73f1492", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -9,7 +9,6 @@ enum Foo {\n fn blah() {\n     let f = &Foo::Foo1(box 1, box 2);\n     match *f {             //~ ERROR cannot move out of\n-                           //~| cannot move out\n         Foo::Foo1(num1,\n                   num2) => (),\n         Foo::Foo2(num) => (),\n@@ -28,7 +27,6 @@ impl Drop for S {\n fn move_in_match() {\n     match (S {f: \"foo\".to_string(), g: \"bar\".to_string()}) {\n         //~^ ERROR cannot move out of type `S`, which implements the `Drop` trait\n-        //~| cannot move out of here\n         S {\n             f: _s,\n             g: _t\n@@ -46,7 +44,6 @@ fn free<T>(_: T) {}\n fn blah2() {\n     let a = &A { a: box 1 };\n     match a.a {           //~ ERROR cannot move out of\n-                          //~| cannot move out\n         n => {\n             free(n)\n         }"}, {"sha": "13d3faab6508a4c3fac647e5c7de5e847cd45a69", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.stderr", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,12 +1,8 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `f.0` which is behind a shared reference\n   --> $DIR/borrowck-move-error-with-note.rs:11:11\n    |\n LL |     match *f {\n-   |           ^^\n-   |           |\n-   |           cannot move out of borrowed content\n-   |           help: consider removing the `*`: `f`\n-LL |\n+   |           ^^ help: consider removing the `*`: `f`\n LL |         Foo::Foo1(num1,\n    |                   ---- data moved here\n LL |                   num2) => (),\n@@ -15,7 +11,7 @@ LL |         Foo::Foo2(num) => (),\n    |                   --- ...and here\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/borrowck-move-error-with-note.rs:13:19\n+  --> $DIR/borrowck-move-error-with-note.rs:12:19\n    |\n LL |         Foo::Foo1(num1,\n    |                   ^^^^\n@@ -25,7 +21,7 @@ LL |         Foo::Foo2(num) => (),\n    |                   ^^^\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/borrowck-move-error-with-note.rs:29:11\n+  --> $DIR/borrowck-move-error-with-note.rs:28:11\n    |\n LL |     match (S {f: \"foo\".to_string(), g: \"bar\".to_string()}) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n@@ -36,30 +32,23 @@ LL |             g: _t\n    |                -- ...and here\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/borrowck-move-error-with-note.rs:33:16\n+  --> $DIR/borrowck-move-error-with-note.rs:31:16\n    |\n LL |             f: _s,\n    |                ^^\n LL |             g: _t\n    |                ^^\n \n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-move-error-with-note.rs:48:11\n+error[E0507]: cannot move out of `a.a` which is behind a shared reference\n+  --> $DIR/borrowck-move-error-with-note.rs:46:11\n    |\n LL |     match a.a {\n-   |           ^^^\n-   |           |\n-   |           cannot move out of borrowed content\n-   |           help: consider borrowing here: `&a.a`\n-LL |\n+   |           ^^^ help: consider borrowing here: `&a.a`\n LL |         n => {\n-   |         - data moved here\n-   |\n-note: move occurs because `n` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-move-error-with-note.rs:50:9\n-   |\n-LL |         n => {\n-   |         ^\n+   |         -\n+   |         |\n+   |         data moved here\n+   |         move occurs because `n` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error: aborting due to 3 previous errors\n "}, {"sha": "824da5ceb07a0dee07baec16d1e011c158693a37", "filename": "src/test/ui/borrowck/borrowck-move-from-unsafe-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,5 +1,5 @@\n unsafe fn foo(x: *const Box<isize>) -> Box<isize> {\n-    let y = *x; //~ ERROR cannot move out of dereference of raw pointer\n+    let y = *x; //~ ERROR cannot move out of `*x` which is behind a raw pointer\n     return y;\n }\n "}, {"sha": "6c806e0896b37edd2367ef0b38dad0eba6e1ecb3", "filename": "src/test/ui/borrowck/borrowck-move-from-unsafe-ptr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,10 +1,10 @@\n-error[E0507]: cannot move out of dereference of raw pointer\n+error[E0507]: cannot move out of `*x` which is behind a raw pointer\n   --> $DIR/borrowck-move-from-unsafe-ptr.rs:2:13\n    |\n LL |     let y = *x;\n    |             ^^\n    |             |\n-   |             cannot move out of dereference of raw pointer\n+   |             move occurs because `*x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n    |             help: consider removing the `*`: `x`\n \n error: aborting due to previous error"}, {"sha": "f0a490d359dc645631f27092807737b75ef7903c", "filename": "src/test/ui/borrowck/borrowck-move-in-irrefut-pat.stderr", "status": "modified", "additions": 7, "deletions": 24, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,49 +1,32 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/borrowck-move-in-irrefut-pat.rs:3:13\n    |\n LL | fn arg_item(&_x: &String) {}\n    |             ^--\n    |             ||\n    |             |data moved here\n-   |             cannot move out of borrowed content\n+   |             |move occurs because `_x` has type `std::string::String`, which does not implement the `Copy` trait\n    |             help: consider removing the `&`: `_x`\n-   |\n-note: move occurs because `_x` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-move-in-irrefut-pat.rs:3:14\n-   |\n-LL | fn arg_item(&_x: &String) {}\n-   |              ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/borrowck-move-in-irrefut-pat.rs:7:11\n    |\n LL |     with(|&_x| ())\n    |           ^--\n    |           ||\n    |           |data moved here\n-   |           cannot move out of borrowed content\n+   |           |move occurs because `_x` has type `std::string::String`, which does not implement the `Copy` trait\n    |           help: consider removing the `&`: `_x`\n-   |\n-note: move occurs because `_x` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-move-in-irrefut-pat.rs:7:12\n-   |\n-LL |     with(|&_x| ())\n-   |            ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/borrowck-move-in-irrefut-pat.rs:12:15\n    |\n LL |     let &_x = &\"hi\".to_string();\n-   |         ---   ^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |         ---   ^^^^^^^^^^^^^^^^^\n    |         ||\n    |         |data moved here\n+   |         |move occurs because `_x` has type `std::string::String`, which does not implement the `Copy` trait\n    |         help: consider removing the `&`: `_x`\n-   |\n-note: move occurs because `_x` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-move-in-irrefut-pat.rs:12:10\n-   |\n-LL |     let &_x = &\"hi\".to_string();\n-   |          ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "8a94c85ef27eb06a001d6f224f3165bcc0d0b283", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-auto-deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -2,7 +2,7 @@ error[E0507]: cannot move out of an `Rc`\n   --> $DIR/borrowck-move-out-of-overloaded-auto-deref.rs:4:14\n    |\n LL |     let _x = Rc::new(vec![1, 2]).into_iter();\n-   |              ^^^^^^^^^^^^^^^^^^^ cannot move out of an `Rc`\n+   |              ^^^^^^^^^^^^^^^^^^^ move occurs because value has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "da3e5c54b75f74f3d27f1d5b2b44ab3ed2a7e0ed", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -4,7 +4,7 @@ error[E0507]: cannot move out of an `Rc`\n LL |     let _x = *Rc::new(\"hi\".to_string());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n-   |              cannot move out of an `Rc`\n+   |              move occurs because value has type `std::string::String`, which does not implement the `Copy` trait\n    |              help: consider removing the `*`: `Rc::new(\"hi\".to_string())`\n \n error: aborting due to previous error"}, {"sha": "d01fb261894c81844ed66d1fa2d90b0fc4a187ca", "filename": "src/test/ui/borrowck/borrowck-move-out-of-static-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-static-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-static-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-static-item.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -12,5 +12,5 @@ fn test(f: Foo) {\n }\n \n fn main() {\n-    test(BAR); //~ ERROR cannot move out of static item [E0507]\n+    test(BAR); //~ ERROR cannot move out of static item `BAR` [E0507]\n }"}, {"sha": "edf8c954f816b692ad3a8de4915c0991f0d95a8c", "filename": "src/test/ui/borrowck/borrowck-move-out-of-static-item.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-static-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-static-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-static-item.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,8 +1,8 @@\n-error[E0507]: cannot move out of static item\n+error[E0507]: cannot move out of static item `BAR`\n   --> $DIR/borrowck-move-out-of-static-item.rs:15:10\n    |\n LL |     test(BAR);\n-   |          ^^^ cannot move out of static item\n+   |          ^^^ move occurs because `BAR` has type `Foo`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "a2f66f3ec465d4f9aafadff8b50b95e252c0800b", "filename": "src/test/ui/borrowck/borrowck-move-out-of-struct-with-dtor.stderr", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -5,13 +5,10 @@ LL |     match (S {f:\"foo\".to_string()}) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n LL |\n LL |         S {f:_s} => {}\n-   |              -- data moved here\n-   |\n-note: move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:9:14\n-   |\n-LL |         S {f:_s} => {}\n-   |              ^^\n+   |              --\n+   |              |\n+   |              data moved here\n+   |              move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:14:20\n@@ -20,12 +17,7 @@ LL |     let S {f:_s} = S {f:\"foo\".to_string()};\n    |              --    ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n    |              |\n    |              data moved here\n-   |\n-note: move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:14:14\n-   |\n-LL |     let S {f:_s} = S {f:\"foo\".to_string()};\n-   |              ^^\n+   |              move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:18:19\n@@ -34,13 +26,8 @@ LL | fn move_in_fn_arg(S {f:_s}: S) {\n    |                   ^^^^^--^\n    |                   |    |\n    |                   |    data moved here\n+   |                   |    move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n    |                   cannot move out of here\n-   |\n-note: move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:18:24\n-   |\n-LL | fn move_in_fn_arg(S {f:_s}: S) {\n-   |                        ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f9a539c1c9fd129c26e2405beafbb934f69e5ed4", "filename": "src/test/ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor.stderr", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -5,13 +5,10 @@ LL |     match S(\"foo\".to_string()) {\n    |           ^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n LL |\n LL |         S(_s) => {}\n-   |           -- data moved here\n-   |\n-note: move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:9:11\n-   |\n-LL |         S(_s) => {}\n-   |           ^^\n+   |           --\n+   |           |\n+   |           data moved here\n+   |           move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:14:17\n@@ -20,12 +17,7 @@ LL |     let S(_s) = S(\"foo\".to_string());\n    |           --    ^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n    |           |\n    |           data moved here\n-   |\n-note: move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:14:11\n-   |\n-LL |     let S(_s) = S(\"foo\".to_string());\n-   |           ^^\n+   |           move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:18:19\n@@ -34,13 +26,8 @@ LL | fn move_in_fn_arg(S(_s): S) {\n    |                   ^^--^\n    |                   | |\n    |                   | data moved here\n+   |                   | move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n    |                   cannot move out of here\n-   |\n-note: move occurs because `_s` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:18:21\n-   |\n-LL | fn move_in_fn_arg(S(_s): S) {\n-   |                     ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ddc210f9aa2332dd2321ccb93988ab6775486249", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-move-from-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -18,5 +18,5 @@ fn main() {\n     let v = MyVec::<Box<_>> { data: vec![box 1, box 2, box 3] };\n     let good = &v[0]; // Shouldn't fail here\n     let bad = v[0];\n-    //~^ ERROR cannot move out of borrowed content\n+    //~^ ERROR cannot move out of index of `MyVec<std::boxed::Box<i32>>`\n }"}, {"sha": "57f42ede21cd0c0db21bf7ae74604adc9e7d0ccf", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-move-from-vec.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,10 +1,10 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of index of `MyVec<std::boxed::Box<i32>>`\n   --> $DIR/borrowck-overloaded-index-move-from-vec.rs:20:15\n    |\n LL |     let bad = v[0];\n    |               ^^^^\n    |               |\n-   |               cannot move out of borrowed content\n+   |               move occurs because value has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n    |               help: consider borrowing here: `&v[0]`\n \n error: aborting due to previous error"}, {"sha": "c92c65ba736f493ab828b44c3507a27b6d7e8a90", "filename": "src/test/ui/borrowck/borrowck-struct-update-with-dtor.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-struct-update-with-dtor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-struct-update-with-dtor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-struct-update-with-dtor.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -2,13 +2,19 @@ error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-struct-update-with-dtor.rs:12:15\n    |\n LL |     let _s2 = S{a: 2, ..s0};\n-   |               ^^^^^^^^^^^^^ cannot move out of here\n+   |               ^^^^^^^^^^^^^\n+   |               |\n+   |               cannot move out of here\n+   |               move occurs because `s0.b` has type `B`, which does not implement the `Copy` trait\n \n error[E0509]: cannot move out of type `T`, which implements the `Drop` trait\n   --> $DIR/borrowck-struct-update-with-dtor.rs:17:15\n    |\n LL |     let _s2 = T{a: 2, ..s0};\n-   |               ^^^^^^^^^^^^^ cannot move out of here\n+   |               ^^^^^^^^^^^^^\n+   |               |\n+   |               cannot move out of here\n+   |               move occurs because `s0.mv` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6448149391def94d64693953821c317d3caebe8b", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -46,6 +46,7 @@ fn c() {\n     }\n     let a = vec[0]; //~ ERROR cannot move out\n     //~| NOTE cannot move out of here\n+    //~| NOTE move occurs because\n     //~| HELP consider borrowing here\n }\n \n@@ -64,6 +65,7 @@ fn d() {\n     }\n     let a = vec[0]; //~ ERROR cannot move out\n     //~| NOTE cannot move out of here\n+    //~| NOTE move occurs because\n     //~| HELP consider borrowing here\n }\n \n@@ -83,6 +85,7 @@ fn e() {\n     }\n     let a = vec[0]; //~ ERROR cannot move out\n     //~| NOTE cannot move out of here\n+    //~| NOTE move occurs because\n     //~| HELP consider borrowing here\n }\n "}, {"sha": "072501f23ff840ae2654bc6db5408d290d2cf2f2", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.stderr", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -29,13 +29,10 @@ LL |     match vec {\n    |           ^^^ cannot move out of here\n ...\n LL |         &mut [_a,\n-   |               -- data moved here\n-   |\n-note: move occurs because `_a` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:38:15\n-   |\n-LL |         &mut [_a,\n-   |               ^^\n+   |               --\n+   |               |\n+   |               data moved here\n+   |               move occurs because `_a` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n help: consider removing the `&mut`\n    |\n LL |         [_a,\n@@ -53,22 +50,20 @@ LL |     let a = vec[0];\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here\n+   |             move occurs because `vec[_]` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n    |             help: consider borrowing here: `&vec[0]`\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:55:11\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:56:11\n    |\n LL |     match vec {\n    |           ^^^ cannot move out of here\n ...\n LL |          _b] => {}\n-   |          -- data moved here\n-   |\n-note: move occurs because `_b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:60:10\n-   |\n-LL |          _b] => {}\n-   |          ^^\n+   |          --\n+   |          |\n+   |          data moved here\n+   |          move occurs because `_b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n help: consider removing the `&mut`\n    |\n LL |         [\n@@ -77,16 +72,17 @@ LL |          _b] => {}\n    |\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:65:13\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:66:13\n    |\n LL |     let a = vec[0];\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here\n+   |             move occurs because `vec[_]` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n    |             help: consider borrowing here: `&vec[0]`\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:73:11\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:75:11\n    |\n LL |     match vec {\n    |           ^^^ cannot move out of here\n@@ -100,18 +96,19 @@ LL |         &mut [_a, _b, _c] => {}\n    |         help: consider removing the `&mut`: `[_a, _b, _c]`\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:76:15\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:78:15\n    |\n LL |         &mut [_a, _b, _c] => {}\n    |               ^^  ^^  ^^\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:84:13\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:86:13\n    |\n LL |     let a = vec[0];\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here\n+   |             move occurs because `vec[_]` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n    |             help: consider borrowing here: `&vec[0]`\n \n error: aborting due to 8 previous errors"}, {"sha": "e95a6b7c88b9574eddd2802dfb945777ff4c0be9", "filename": "src/test/ui/borrowck/issue-47215-ice-from-drop-elab.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -14,7 +14,7 @@ static mut X: ::std::sync::atomic::AtomicUsize = ::std::sync::atomic::AtomicUsiz\n \n fn main() {\n     unsafe {\n-        let mut x = X; //~ ERROR cannot move out of static item [E0507]\n+        let mut x = X; //~ ERROR cannot move out of static item `X` [E0507]\n         let _y = x.get_mut();\n     }\n }"}, {"sha": "249a05192b282db38f60670ef5e6c53152466b3a", "filename": "src/test/ui/borrowck/issue-47215-ice-from-drop-elab.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,10 +1,10 @@\n-error[E0507]: cannot move out of static item\n+error[E0507]: cannot move out of static item `X`\n   --> $DIR/issue-47215-ice-from-drop-elab.rs:17:21\n    |\n LL |         let mut x = X;\n    |                     ^\n    |                     |\n-   |                     cannot move out of static item\n+   |                     move occurs because `X` has type `std::sync::atomic::AtomicUsize`, which does not implement the `Copy` trait\n    |                     help: consider borrowing here: `&X`\n \n error: aborting due to previous error"}, {"sha": "96175b149606303567ca6bfc3bfbdee1a50995c4", "filename": "src/test/ui/borrowck/issue-51415.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,17 +1,11 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/issue-51415.rs:6:42\n    |\n LL |     let opt = a.iter().enumerate().find(|(_, &s)| {\n    |                                          ^^^^^-^\n-   |                                          |    |\n-   |                                          |    data moved here\n-   |                                          cannot move out of borrowed content\n-   |\n-note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/issue-51415.rs:6:47\n-   |\n-LL |     let opt = a.iter().enumerate().find(|(_, &s)| {\n-   |                                               ^\n+   |                                               |\n+   |                                               data moved here\n+   |                                               move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "3e46ee6f0789a8ccf1af1ca6b8e6064fd4826f81", "filename": "src/test/ui/borrowck/issue-54597-reject-move-out-of-borrow-via-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -11,7 +11,7 @@ impl Value {\n fn foo(val: Value) {\n     let _reviewers_original: Vec<Value> = match val.as_array() {\n         Some(array) => {\n-            *array //~ ERROR cannot move out of borrowed content\n+            *array //~ ERROR cannot move out of `*array`\n         }\n         None => vec![]\n     };"}, {"sha": "6ba801b9714bf1ea00ed3cc97a44e45c0d403666", "filename": "src/test/ui/borrowck/issue-54597-reject-move-out-of-borrow-via-pat.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,10 +1,10 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `*array` which is behind a shared reference\n   --> $DIR/issue-54597-reject-move-out-of-borrow-via-pat.rs:14:13\n    |\n LL |             *array\n    |             ^^^^^^\n    |             |\n-   |             cannot move out of borrowed content\n+   |             move occurs because `*array` has type `std::vec::Vec<Value>`, which does not implement the `Copy` trait\n    |             help: consider removing the `*`: `array`\n \n error: aborting due to previous error"}, {"sha": "6619fb42c281a57926329cdd371602aeec659808", "filename": "src/test/ui/borrowck/move-in-static-initializer-issue-38520.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,14 +1,14 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/move-in-static-initializer-issue-38520.rs:12:23\n    |\n LL | static Y: usize = get(*&X);\n-   |                       ^^^ cannot move out of borrowed content\n+   |                       ^^^ move occurs because value has type `Foo`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/move-in-static-initializer-issue-38520.rs:13:22\n    |\n LL | const Z: usize = get(*&X);\n-   |                      ^^^ cannot move out of borrowed content\n+   |                      ^^^ move occurs because value has type `Foo`, which does not implement the `Copy` trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d54b09c5da95ac95f8ed2d2c5e0ab32bf122ecef", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -9,6 +9,6 @@ fn main() {\n     let y = vec![format!(\"World\")];\n     call(|| {\n         y.into_iter();\n-        //~^ ERROR cannot move out of captured variable in an `Fn` closure\n+        //~^ ERROR cannot move out of `y`, a captured variable in an `Fn` closure\n     });\n }"}, {"sha": "73cea6fc361ecd2ef2e8b527c258dd7311dc0d04", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,11 +1,11 @@\n-error[E0507]: cannot move out of captured variable in an `Fn` closure\n+error[E0507]: cannot move out of `y`, a captured variable in an `Fn` closure\n   --> $DIR/unboxed-closures-move-upvar-from-non-once-ref-closure.rs:11:9\n    |\n LL |     let y = vec![format!(\"World\")];\n    |         - captured outer variable\n LL |     call(|| {\n LL |         y.into_iter();\n-   |         ^ cannot move out of captured variable in an `Fn` closure\n+   |         ^ move occurs because `y` has type `std::vec::Vec<std::string::String>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "1db4e2a66dbde7ed387deaf85f3144d57432916b", "filename": "src/test/ui/by-move-pattern-binding.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fby-move-pattern-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fby-move-pattern-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fby-move-pattern-binding.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,20 +1,15 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/by-move-pattern-binding.rs:14:11\n    |\n LL |     match &s.x {\n-   |           ^^^^ cannot move out of borrowed content\n+   |           ^^^^\n LL |         &E::Foo => {}\n LL |         &E::Bar(identifier) => f(identifier.clone())\n    |         -------------------\n    |         |       |\n    |         |       data moved here\n+   |         |       move occurs because `identifier` has type `std::string::String`, which does not implement the `Copy` trait\n    |         help: consider removing the `&`: `E::Bar(identifier)`\n-   |\n-note: move occurs because `identifier` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/by-move-pattern-binding.rs:16:17\n-   |\n-LL |         &E::Bar(identifier) => f(identifier.clone())\n-   |                 ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a13c217483d5dea7e2028c1f4bdc91830b192025", "filename": "src/test/ui/check-static-values-constraints.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -85,13 +85,13 @@ error[E0019]: static contains unimplemented expression type\n LL |     box 3;\n    |         ^\n \n-error[E0507]: cannot move out of static item\n+error[E0507]: cannot move out of static item `x`\n   --> $DIR/check-static-values-constraints.rs:116:45\n    |\n LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                             ^\n    |                                             |\n-   |                                             cannot move out of static item\n+   |                                             move occurs because `x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n    |                                             help: consider borrowing here: `&x`\n \n error[E0010]: allocations are not allowed in statics"}, {"sha": "8c64149a0ff51753f6042bd74f3bab76756d1a25", "filename": "src/test/ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -5,12 +5,7 @@ LL |     let X { x: y } = x;\n    |                -     ^ cannot move out of here\n    |                |\n    |                data moved here\n-   |\n-note: move occurs because `y` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/disallowed-deconstructing-destructing-struct-let.rs:12:16\n-   |\n-LL |     let X { x: y } = x;\n-   |                ^\n+   |                move occurs because `y` has type `std::string::String`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "afc5170e1b84e8e4151048bde645db1593f890d9", "filename": "src/test/ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-match.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -5,13 +5,10 @@ LL |     match x {\n    |           ^ cannot move out of here\n LL |\n LL |         X { x: y } => println!(\"contents: {}\", y)\n-   |                - data moved here\n-   |\n-note: move occurs because `y` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/disallowed-deconstructing-destructing-struct-match.rs:16:16\n-   |\n-LL |         X { x: y } => println!(\"contents: {}\", y)\n-   |                ^\n+   |                -\n+   |                |\n+   |                data moved here\n+   |                move occurs because `y` has type `std::string::String`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "2f2c5df46269915b96ea25b69a606af5b7818f87", "filename": "src/test/ui/dst/dst-index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fdst%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fdst%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-index.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -29,9 +29,9 @@ impl Index<usize> for T {\n \n fn main() {\n     S[0];\n-    //~^ ERROR cannot move out of borrowed content\n+    //~^ ERROR cannot move out of index of `S`\n     //~^^ ERROR E0161\n     T[0];\n-    //~^ ERROR cannot move out of borrowed content\n+    //~^ ERROR cannot move out of index of `T`\n     //~^^ ERROR E0161\n }"}, {"sha": "6cdb0e76e90a24e78692f3e2686724aec27c1a56", "filename": "src/test/ui/dst/dst-index.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fdst%2Fdst-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fdst%2Fdst-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-index.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -10,17 +10,17 @@ error[E0161]: cannot move a value of type dyn std::fmt::Debug: the size of dyn s\n LL |     T[0];\n    |     ^^^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of index of `S`\n   --> $DIR/dst-index.rs:31:5\n    |\n LL |     S[0];\n-   |     ^^^^ cannot move out of borrowed content\n+   |     ^^^^ move occurs because value has type `str`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of index of `T`\n   --> $DIR/dst-index.rs:34:5\n    |\n LL |     T[0];\n-   |     ^^^^ cannot move out of borrowed content\n+   |     ^^^^ move occurs because value has type `dyn std::fmt::Debug`, which does not implement the `Copy` trait\n \n error: aborting due to 4 previous errors\n "}, {"sha": "aa028396be4addd688e8d8803afe4b2fad8ead75", "filename": "src/test/ui/dst/dst-rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -5,7 +5,7 @@\n pub fn main() {\n     let _x: Box<str> = box *\"hello world\";\n     //~^ ERROR E0161\n-    //~^^ ERROR cannot move out of borrowed content\n+    //~^^ ERROR cannot move out of a shared reference\n \n     let array: &[isize] = &[1, 2, 3];\n     let _x: Box<[isize]> = box *array;"}, {"sha": "6a51c5175588020265d8f8e3564741c7a7c43782", "filename": "src/test/ui/dst/dst-rvalue.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -10,17 +10,20 @@ error[E0161]: cannot move a value of type [isize]: the size of [isize] cannot be\n LL |     let _x: Box<[isize]> = box *array;\n    |                                ^^^^^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/dst-rvalue.rs:6:28\n    |\n LL |     let _x: Box<str> = box *\"hello world\";\n-   |                            ^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |                            ^^^^^^^^^^^^^^ move occurs because value has type `str`, which does not implement the `Copy` trait\n \n error[E0508]: cannot move out of type `[isize]`, a non-copy slice\n   --> $DIR/dst-rvalue.rs:11:32\n    |\n LL |     let _x: Box<[isize]> = box *array;\n-   |                                ^^^^^^ cannot move out of here\n+   |                                ^^^^^^\n+   |                                |\n+   |                                cannot move out of here\n+   |                                move occurs because `*array` has type `[isize]`, which does not implement the `Copy` trait\n \n error: aborting due to 4 previous errors\n "}, {"sha": "170b8831911002f62b4fcb4a87874b93e9794ea8", "filename": "src/test/ui/error-codes/E0507.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Ferror-codes%2FE0507.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Ferror-codes%2FE0507.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0507.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,8 +1,8 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of dereference of `std::cell::Ref<'_, TheDarkKnight>`\n   --> $DIR/E0507.rs:12:5\n    |\n LL |     x.borrow().nothing_is_true();\n-   |     ^^^^^^^^^^ cannot move out of borrowed content\n+   |     ^^^^^^^^^^ move occurs because value has type `TheDarkKnight`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "b69d7743b6c2c98839dde8ad4ea8eb2a6f65a033", "filename": "src/test/ui/error-codes/E0508-fail.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Ferror-codes%2FE0508-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Ferror-codes%2FE0508-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0508-fail.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -5,6 +5,7 @@ LL |     let _value = array[0];\n    |                  ^^^^^^^^\n    |                  |\n    |                  cannot move out of here\n+   |                  move occurs because `array[_]` has type `NonCopy`, which does not implement the `Copy` trait\n    |                  help: consider borrowing here: `&array[0]`\n \n error: aborting due to previous error"}, {"sha": "5e7b56dcd372a7d257768702ed40eec12f72f88f", "filename": "src/test/ui/error-codes/E0508.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Ferror-codes%2FE0508.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Ferror-codes%2FE0508.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0508.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -5,6 +5,7 @@ LL |     let _value = array[0];\n    |                  ^^^^^^^^\n    |                  |\n    |                  cannot move out of here\n+   |                  move occurs because `array[_]` has type `NonCopy`, which does not implement the `Copy` trait\n    |                  help: consider borrowing here: `&array[0]`\n \n error: aborting due to previous error"}, {"sha": "cbfbc3ccf6a879c2e95cc0c262e79b8877a7042e", "filename": "src/test/ui/error-codes/E0509.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Ferror-codes%2FE0509.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Ferror-codes%2FE0509.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0509.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -5,6 +5,7 @@ LL |     let fancy_field = drop_struct.fancy;\n    |                       ^^^^^^^^^^^^^^^^^\n    |                       |\n    |                       cannot move out of here\n+   |                       move occurs because `drop_struct.fancy` has type `FancyNum`, which does not implement the `Copy` trait\n    |                       help: consider borrowing here: `&drop_struct.fancy`\n \n error: aborting due to previous error"}, {"sha": "635f83bbf480cbb6322a5c63d0f681d3b1159ad3", "filename": "src/test/ui/functional-struct-update/functional-struct-update-noncopyable.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Ffunctional-struct-update%2Ffunctional-struct-update-noncopyable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Ffunctional-struct-update%2Ffunctional-struct-update-noncopyable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctional-struct-update%2Ffunctional-struct-update-noncopyable.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -2,7 +2,10 @@ error[E0509]: cannot move out of type `A`, which implements the `Drop` trait\n   --> $DIR/functional-struct-update-noncopyable.rs:12:14\n    |\n LL |     let _b = A { y: Arc::new(3), ..a };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              |\n+   |              cannot move out of here\n+   |              move occurs because `a.x` has type `std::sync::Arc<isize>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "984534bfb8b86cbe19adeef35ac5699d7343c72f", "filename": "src/test/ui/issues/issue-17718-static-move.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-17718-static-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-17718-static-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-static-move.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,10 +1,10 @@\n-error[E0507]: cannot move out of static item\n+error[E0507]: cannot move out of static item `FOO`\n   --> $DIR/issue-17718-static-move.rs:6:14\n    |\n LL |     let _a = FOO;\n    |              ^^^\n    |              |\n-   |              cannot move out of static item\n+   |              move occurs because `FOO` has type `Foo`, which does not implement the `Copy` trait\n    |              help: consider borrowing here: `&FOO`\n \n error: aborting due to previous error"}, {"sha": "35d6f8c0fae135c13eab3fda8bd174779c09e758", "filename": "src/test/ui/issues/issue-20801.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-20801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-20801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20801.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -24,14 +24,14 @@ fn const_ptr() -> *const T {\n \n pub fn main() {\n     let a = unsafe { *mut_ref() };\n-    //~^ ERROR cannot move out of borrowed content\n+    //~^ ERROR cannot move out of a mutable reference\n \n     let b = unsafe { *imm_ref() };\n-    //~^ ERROR cannot move out of borrowed content\n+    //~^ ERROR cannot move out of a shared reference\n \n     let c = unsafe { *mut_ptr() };\n-    //~^ ERROR cannot move out of dereference of raw pointer\n+    //~^ ERROR cannot move out of a raw pointer\n \n     let d = unsafe { *const_ptr() };\n-    //~^ ERROR cannot move out of dereference of raw pointer\n+    //~^ ERROR cannot move out of a raw pointer\n }"}, {"sha": "1bbd874a448022fba141ceb608e6fad16fa2e5fa", "filename": "src/test/ui/issues/issue-20801.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-20801.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-20801.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20801.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,37 +1,37 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a mutable reference\n   --> $DIR/issue-20801.rs:26:22\n    |\n LL |     let a = unsafe { *mut_ref() };\n    |                      ^^^^^^^^^^\n    |                      |\n-   |                      cannot move out of borrowed content\n+   |                      move occurs because value has type `T`, which does not implement the `Copy` trait\n    |                      help: consider removing the `*`: `mut_ref()`\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/issue-20801.rs:29:22\n    |\n LL |     let b = unsafe { *imm_ref() };\n    |                      ^^^^^^^^^^\n    |                      |\n-   |                      cannot move out of borrowed content\n+   |                      move occurs because value has type `T`, which does not implement the `Copy` trait\n    |                      help: consider removing the `*`: `imm_ref()`\n \n-error[E0507]: cannot move out of dereference of raw pointer\n+error[E0507]: cannot move out of a raw pointer\n   --> $DIR/issue-20801.rs:32:22\n    |\n LL |     let c = unsafe { *mut_ptr() };\n    |                      ^^^^^^^^^^\n    |                      |\n-   |                      cannot move out of dereference of raw pointer\n+   |                      move occurs because value has type `T`, which does not implement the `Copy` trait\n    |                      help: consider removing the `*`: `mut_ptr()`\n \n-error[E0507]: cannot move out of dereference of raw pointer\n+error[E0507]: cannot move out of a raw pointer\n   --> $DIR/issue-20801.rs:35:22\n    |\n LL |     let d = unsafe { *const_ptr() };\n    |                      ^^^^^^^^^^^^\n    |                      |\n-   |                      cannot move out of dereference of raw pointer\n+   |                      move occurs because value has type `T`, which does not implement the `Copy` trait\n    |                      help: consider removing the `*`: `const_ptr()`\n \n error: aborting due to 4 previous errors"}, {"sha": "a9a0e5ca4ec162cbeb7e5ea7d7e8cd51aff3cddd", "filename": "src/test/ui/issues/issue-2590.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-2590.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-2590.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2590.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -8,7 +8,7 @@ trait Parse {\n \n impl Parse for Parser {\n     fn parse(&self) -> Vec<isize> {\n-        self.tokens //~ ERROR cannot move out of borrowed content\n+        self.tokens //~ ERROR cannot move out\n     }\n }\n "}, {"sha": "3517d92403fbba2ac415b100146def4552107f43", "filename": "src/test/ui/issues/issue-2590.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-2590.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-2590.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2590.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,8 +1,8 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `self.tokens` which is behind a shared reference\n   --> $DIR/issue-2590.rs:11:9\n    |\n LL |         self.tokens\n-   |         ^^^^^^^^^^^ cannot move out of borrowed content\n+   |         ^^^^^^^^^^^ move occurs because `self.tokens` has type `std::vec::Vec<isize>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "e570b04a2beade6c3044b7cf97aea0ca73799173", "filename": "src/test/ui/issues/issue-27282-move-ref-mut-into-guard.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-ref-mut-into-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-ref-mut-into-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-ref-mut-into-guard.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -12,7 +12,7 @@ fn main() {\n         None => {},\n         ref mut foo\n             if { (|| { let bar = foo; bar.take() })(); false } => {},\n-        //~^ ERROR cannot move out of borrowed content [E0507]\n+        //~^ ERROR cannot move out of `foo` in pattern guard [E0507]\n         Some(s) => std::process::exit(*s),\n     }\n }"}, {"sha": "c5a9dd98a1596e932c532e032f93ac50b88577f6", "filename": "src/test/ui/issues/issue-27282-move-ref-mut-into-guard.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-ref-mut-into-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-ref-mut-into-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-ref-mut-into-guard.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,8 +1,14 @@\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/issue-27282-move-ref-mut-into-guard.rs:14:18\n+error[E0507]: cannot move out of `foo` in pattern guard\n+  --> $DIR/issue-27282-move-ref-mut-into-guard.rs:14:19\n    |\n LL |             if { (|| { let bar = foo; bar.take() })(); false } => {},\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |                   ^^             ---\n+   |                   |              |\n+   |                   |              move occurs because `foo` has type `&mut std::option::Option<&i32>`, which does not implement the `Copy` trait\n+   |                   |              move occurs due to use in closure\n+   |                   move out of `foo` occurs here\n+   |\n+   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error: aborting due to previous error\n "}, {"sha": "254956ae306925fc56fcf1d9928548b0340681ff", "filename": "src/test/ui/issues/issue-40402-ref-hints/issue-40402-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-1.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -6,5 +6,5 @@ struct Foo {\n fn main() {\n     let mut f = Foo { v: Vec::new() };\n     f.v.push(\"hello\".to_string());\n-    let e = f.v[0]; //~ ERROR cannot move out of borrowed content\n+    let e = f.v[0]; //~ ERROR cannot move out of index\n }"}, {"sha": "8a9d9aab81a6a3ce3c26608c0420b6e69d0559f9", "filename": "src/test/ui/issues/issue-40402-ref-hints/issue-40402-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-1.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,10 +1,10 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of index of `std::vec::Vec<std::string::String>`\n   --> $DIR/issue-40402-1.rs:9:13\n    |\n LL |     let e = f.v[0];\n    |             ^^^^^^\n    |             |\n-   |             cannot move out of borrowed content\n+   |             move occurs because value has type `std::string::String`, which does not implement the `Copy` trait\n    |             help: consider borrowing here: `&f.v[0]`\n \n error: aborting due to previous error"}, {"sha": "1fb6e31e964ee1ab068969dc3e679bc57f3c0ed4", "filename": "src/test/ui/issues/issue-40402-ref-hints/issue-40402-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -2,5 +2,5 @@\n // are nested within a pattern\n fn main() {\n     let x = vec![(String::new(), String::new())];\n-    let (a, b) = x[0]; //~ ERROR cannot move out of borrowed content\n+    let (a, b) = x[0]; //~ ERROR cannot move out of index\n }"}, {"sha": "e547ec7e4754c5719aa60839ca8b641cea2d411d", "filename": "src/test/ui/issues/issue-40402-ref-hints/issue-40402-2.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,11 +1,9 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of index of `std::vec::Vec<(std::string::String, std::string::String)>`\n   --> $DIR/issue-40402-2.rs:5:18\n    |\n LL |     let (a, b) = x[0];\n-   |          -  -    ^^^^\n-   |          |  |    |\n-   |          |  |    cannot move out of borrowed content\n-   |          |  |    help: consider borrowing here: `&x[0]`\n+   |          -  -    ^^^^ help: consider borrowing here: `&x[0]`\n+   |          |  |\n    |          |  ...and here\n    |          data moved here\n    |"}, {"sha": "ca1c0b68d2a5f295e6d933cd0144b73966a64ddb", "filename": "src/test/ui/issues/issue-4335.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-4335.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fissues%2Fissue-4335.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4335.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,10 +1,10 @@\n-error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+error[E0507]: cannot move out of `*v`, as `v` is a captured variable in an `FnMut` closure\n   --> $DIR/issue-4335.rs:6:20\n    |\n LL | fn f<'r, T>(v: &'r T) -> Box<dyn FnMut() -> T + 'r> {\n    |             - captured outer variable\n LL |     id(Box::new(|| *v))\n-   |                    ^^ cannot move out of captured variable in an `FnMut` closure\n+   |                    ^^ move occurs because `*v` has type `T`, which does not implement the `Copy` trait\n \n error[E0373]: closure may outlive the current function, but it borrows `v`, which is owned by the current function\n   --> $DIR/issue-4335.rs:6:17"}, {"sha": "0af083e5b5233d811d6dfb4fb41825e3c69ff404", "filename": "src/test/ui/moves/move-out-of-array-1.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-array-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-array-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-array-1.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -2,7 +2,10 @@ error[E0508]: cannot move out of type `[D; 4]`, a non-copy array\n   --> $DIR/move-out-of-array-1.rs:17:5\n    |\n LL |     a[i]\n-   |     ^^^^ cannot move out of here\n+   |     ^^^^\n+   |     |\n+   |     cannot move out of here\n+   |     move occurs because `a[_]` has type `D`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "ce5ddb3e183b10ed1ca113fe70ca8aa6baa21ac1", "filename": "src/test/ui/moves/move-out-of-slice-1.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-1.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -4,13 +4,10 @@ error[E0508]: cannot move out of type `[A]`, a non-copy slice\n LL |     match a {\n    |           ^ cannot move out of here\n LL |         box [a] => {},\n-   |              - data moved here\n-   |\n-note: move occurs because `a` has type `A`, which does not implement the `Copy` trait\n-  --> $DIR/move-out-of-slice-1.rs:8:14\n-   |\n-LL |         box [a] => {},\n-   |              ^\n+   |              -\n+   |              |\n+   |              data moved here\n+   |              move occurs because `a` has type `A`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "085e249c0fb073d6bb180fcad3ab2eba648009d8", "filename": "src/test/ui/moves/moves-based-on-type-block-bad.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -20,7 +20,6 @@ fn main() {\n     loop {\n         f(&s, |hellothere| {\n             match hellothere.x { //~ ERROR cannot move out\n-                                 //~| cannot move out of borrowed content\n                 box E::Foo(_) => {}\n                 box E::Bar(x) => println!(\"{}\", x.to_string()),\n                 box E::Baz => {}"}, {"sha": "12b87c54b9c7349613a3111ad3b182eebc22d017", "filename": "src/test/ui/moves/moves-based-on-type-block-bad.stderr", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,20 +1,14 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `hellothere.x.0` which is behind a shared reference\n   --> $DIR/moves-based-on-type-block-bad.rs:22:19\n    |\n LL |             match hellothere.x {\n-   |                   ^^^^^^^^^^^^\n-   |                   |\n-   |                   cannot move out of borrowed content\n-   |                   help: consider borrowing here: `&hellothere.x`\n-...\n+   |                   ^^^^^^^^^^^^ help: consider borrowing here: `&hellothere.x`\n+LL |                 box E::Foo(_) => {}\n LL |                 box E::Bar(x) => println!(\"{}\", x.to_string()),\n-   |                            - data moved here\n-   |\n-note: move occurs because `x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-  --> $DIR/moves-based-on-type-block-bad.rs:25:28\n-   |\n-LL |                 box E::Bar(x) => println!(\"{}\", x.to_string()),\n-   |                            ^\n+   |                            -\n+   |                            |\n+   |                            data moved here\n+   |                            move occurs because `x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "fafd377c12b9da5a92560be356e4e677a3103296", "filename": "src/test/ui/moves/moves-based-on-type-move-out-of-closure-env-issue-1965.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,10 +1,10 @@\n-error[E0507]: cannot move out of captured variable in an `Fn` closure\n+error[E0507]: cannot move out of `i`, a captured variable in an `Fn` closure\n   --> $DIR/moves-based-on-type-move-out-of-closure-env-issue-1965.rs:11:28\n    |\n LL |     let i = box 3;\n    |         - captured outer variable\n LL |     let _f = to_fn(|| test(i));\n-   |                            ^ cannot move out of captured variable in an `Fn` closure\n+   |                            ^ move occurs because `i` has type `std::boxed::Box<usize>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "4a9635b060db36e924278bb36abfa8edd0178a0c", "filename": "src/test/ui/nll/cannot-move-block-spans.stderr", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,28 +1,28 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:5:15\n    |\n LL |     let x = { *r };\n    |               ^^\n    |               |\n-   |               cannot move out of borrowed content\n+   |               move occurs because `*r` has type `std::string::String`, which does not implement the `Copy` trait\n    |               help: consider removing the `*`: `r`\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:6:22\n    |\n LL |     let y = unsafe { *r };\n    |                      ^^\n    |                      |\n-   |                      cannot move out of borrowed content\n+   |                      move occurs because `*r` has type `std::string::String`, which does not implement the `Copy` trait\n    |                      help: consider removing the `*`: `r`\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:7:26\n    |\n LL |     let z = loop { break *r; };\n    |                          ^^\n    |                          |\n-   |                          cannot move out of borrowed content\n+   |                          move occurs because `*r` has type `std::string::String`, which does not implement the `Copy` trait\n    |                          help: consider removing the `*`: `r`\n \n error[E0508]: cannot move out of type `[std::string::String; 2]`, a non-copy array\n@@ -32,6 +32,7 @@ LL |     let x = { arr[0] };\n    |               ^^^^^^\n    |               |\n    |               cannot move out of here\n+   |               move occurs because `arr[_]` has type `std::string::String`, which does not implement the `Copy` trait\n    |               help: consider borrowing here: `&arr[0]`\n \n error[E0508]: cannot move out of type `[std::string::String; 2]`, a non-copy array\n@@ -41,6 +42,7 @@ LL |     let y = unsafe { arr[0] };\n    |                      ^^^^^^\n    |                      |\n    |                      cannot move out of here\n+   |                      move occurs because `arr[_]` has type `std::string::String`, which does not implement the `Copy` trait\n    |                      help: consider borrowing here: `&arr[0]`\n \n error[E0508]: cannot move out of type `[std::string::String; 2]`, a non-copy array\n@@ -50,33 +52,34 @@ LL |     let z = loop { break arr[0]; };\n    |                          ^^^^^^\n    |                          |\n    |                          cannot move out of here\n+   |                          move occurs because `arr[_]` has type `std::string::String`, which does not implement the `Copy` trait\n    |                          help: consider borrowing here: `&arr[0]`\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:17:38\n    |\n LL |     let x = { let mut u = 0; u += 1; *r };\n    |                                      ^^\n    |                                      |\n-   |                                      cannot move out of borrowed content\n+   |                                      move occurs because `*r` has type `std::string::String`, which does not implement the `Copy` trait\n    |                                      help: consider removing the `*`: `r`\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:18:45\n    |\n LL |     let y = unsafe { let mut u = 0; u += 1; *r };\n    |                                             ^^\n    |                                             |\n-   |                                             cannot move out of borrowed content\n+   |                                             move occurs because `*r` has type `std::string::String`, which does not implement the `Copy` trait\n    |                                             help: consider removing the `*`: `r`\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:19:49\n    |\n LL |     let z = loop { let mut u = 0; u += 1; break *r; u += 2; };\n    |                                                 ^^\n    |                                                 |\n-   |                                                 cannot move out of borrowed content\n+   |                                                 move occurs because `*r` has type `std::string::String`, which does not implement the `Copy` trait\n    |                                                 help: consider removing the `*`: `r`\n \n error: aborting due to 9 previous errors"}, {"sha": "ce48457abe7ec754a06ca7e68a4b780cc1f92b91", "filename": "src/test/ui/nll/issue-52059-report-when-borrow-and-drop-conflict.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -35,6 +35,7 @@ LL |     let p = s.url; p\n    |             ^^^^^\n    |             |\n    |             cannot move out of here\n+   |             move occurs because `s.url` has type `&mut std::string::String`, which does not implement the `Copy` trait\n    |             help: consider borrowing here: `&s.url`\n \n error: aborting due to 4 previous errors"}, {"sha": "e9aa7939f7778e3bf8ae82448550baf5d7cc760f", "filename": "src/test/ui/nll/issue-52086.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fnll%2Fissue-52086.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fnll%2Fissue-52086.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52086.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -2,13 +2,13 @@ error[E0507]: cannot move out of an `Rc`\n   --> $DIR/issue-52086.rs:8:10\n    |\n LL |     drop(x.field);\n-   |          ^^^^^^^ cannot move out of an `Rc`\n+   |          ^^^^^^^ move occurs because value has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of an `Arc`\n   --> $DIR/issue-52086.rs:12:10\n    |\n LL |     drop(y.field);\n-   |          ^^^^^^^ cannot move out of an `Arc`\n+   |          ^^^^^^^ move occurs because value has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cd1f457a13064f0de9eb22b1dda56969c18c90d5", "filename": "src/test/ui/nll/issue-52663-span-decl-captured-variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -6,6 +6,6 @@ fn main() {\n    {\n        let x = (vec![22], vec![44]);\n        expect_fn(|| drop(x.0));\n-       //~^ ERROR cannot move out of captured variable in an `Fn` closure [E0507]\n+       //~^ ERROR cannot move out of `x.0`, as `x` is a captured variable in an `Fn` closure [E0507]\n    }\n }"}, {"sha": "57b9dc1f0be57b42afbb5c3f962dff94a821efdc", "filename": "src/test/ui/nll/issue-52663-span-decl-captured-variable.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,10 +1,10 @@\n-error[E0507]: cannot move out of captured variable in an `Fn` closure\n+error[E0507]: cannot move out of `x.0`, as `x` is a captured variable in an `Fn` closure\n   --> $DIR/issue-52663-span-decl-captured-variable.rs:8:26\n    |\n LL |        let x = (vec![22], vec![44]);\n    |            - captured outer variable\n LL |        expect_fn(|| drop(x.0));\n-   |                          ^^^ cannot move out of captured variable in an `Fn` closure\n+   |                          ^^^ move occurs because `x.0` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "d423730bdbc358f63a6e99b730cb382a07d4f368", "filename": "src/test/ui/nll/match-guards-always-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -8,7 +8,7 @@ fn should_reject_destructive_mutate_in_guard() {\n         None => {},\n         ref mut foo if {\n             (|| { let bar = foo; bar.take() })();\n-            //~^ ERROR cannot move out of borrowed content [E0507]\n+            //~^ ERROR cannot move out of `foo` in pattern guard [E0507]\n             false } => { },\n         Some(s) => std::process::exit(*s),\n     }"}, {"sha": "5b49db45a52ec424187c18ca6eaeb25c49c22746", "filename": "src/test/ui/nll/match-guards-always-borrow.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,8 +1,14 @@\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/match-guards-always-borrow.rs:10:13\n+error[E0507]: cannot move out of `foo` in pattern guard\n+  --> $DIR/match-guards-always-borrow.rs:10:14\n    |\n LL |             (|| { let bar = foo; bar.take() })();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |              ^^             ---\n+   |              |              |\n+   |              |              move occurs because `foo` has type `&mut std::option::Option<&i32>`, which does not implement the `Copy` trait\n+   |              |              move occurs due to use in closure\n+   |              move out of `foo` occurs here\n+   |\n+   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error: aborting due to previous error\n "}, {"sha": "086f7bcdc4f27c3c88824ae9427b3c98907dda22", "filename": "src/test/ui/nll/move-errors.stderr", "status": "modified", "additions": 34, "deletions": 59, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,10 +1,10 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `*a` which is behind a shared reference\n   --> $DIR/move-errors.rs:6:13\n    |\n LL |     let b = *a;\n    |             ^^\n    |             |\n-   |             cannot move out of borrowed content\n+   |             move occurs because `*a` has type `A`, which does not implement the `Copy` trait\n    |             help: consider removing the `*`: `a`\n \n error[E0508]: cannot move out of type `[A; 1]`, a non-copy array\n@@ -14,15 +14,16 @@ LL |     let b = a[0];\n    |             ^^^^\n    |             |\n    |             cannot move out of here\n+   |             move occurs because `a[_]` has type `A`, which does not implement the `Copy` trait\n    |             help: consider borrowing here: `&a[0]`\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `**r` which is behind a shared reference\n   --> $DIR/move-errors.rs:19:13\n    |\n LL |     let s = **r;\n    |             ^^^\n    |             |\n-   |             cannot move out of borrowed content\n+   |             move occurs because `**r` has type `A`, which does not implement the `Copy` trait\n    |             help: consider removing the `*`: `*r`\n \n error[E0507]: cannot move out of an `Rc`\n@@ -31,7 +32,7 @@ error[E0507]: cannot move out of an `Rc`\n LL |     let s = *r;\n    |             ^^\n    |             |\n-   |             cannot move out of an `Rc`\n+   |             move occurs because value has type `A`, which does not implement the `Copy` trait\n    |             help: consider removing the `*`: `r`\n \n error[E0508]: cannot move out of type `[A; 1]`, a non-copy array\n@@ -41,23 +42,17 @@ LL |     let a = [A(\"\".to_string())][0];\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             cannot move out of here\n+   |             move occurs because value has type `A`, which does not implement the `Copy` trait\n    |             help: consider borrowing here: `&[A(\"\".to_string())][0]`\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `a.0` which is behind a shared reference\n   --> $DIR/move-errors.rs:38:16\n    |\n LL |     let A(s) = *a;\n-   |           -    ^^\n-   |           |    |\n-   |           |    cannot move out of borrowed content\n-   |           |    help: consider removing the `*`: `a`\n+   |           -    ^^ help: consider removing the `*`: `a`\n+   |           |\n    |           data moved here\n-   |\n-note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/move-errors.rs:38:11\n-   |\n-LL |     let A(s) = *a;\n-   |           ^\n+   |           move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0509]: cannot move out of type `D`, which implements the `Drop` trait\n   --> $DIR/move-errors.rs:44:19\n@@ -66,18 +61,13 @@ LL |     let C(D(s)) = c;\n    |             -     ^ cannot move out of here\n    |             |\n    |             data moved here\n-   |\n-note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/move-errors.rs:44:13\n-   |\n-LL |     let C(D(s)) = c;\n-   |             ^\n+   |             move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `*a` which is behind a shared reference\n   --> $DIR/move-errors.rs:51:9\n    |\n LL |     b = *a;\n-   |         ^^ cannot move out of borrowed content\n+   |         ^^ move occurs because `*a` has type `A`, which does not implement the `Copy` trait\n \n error[E0508]: cannot move out of type `[B; 1]`, a non-copy array\n   --> $DIR/move-errors.rs:74:11\n@@ -108,13 +98,10 @@ LL |     match x {\n    |           ^ cannot move out of here\n ...\n LL |         B::U(D(s)) => (),\n-   |                - data moved here\n-   |\n-note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/move-errors.rs:86:16\n-   |\n-LL |         B::U(D(s)) => (),\n-   |                ^\n+   |                -\n+   |                |\n+   |                data moved here\n+   |                move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0509]: cannot move out of type `D`, which implements the `Drop` trait\n   --> $DIR/move-errors.rs:92:11\n@@ -123,28 +110,22 @@ LL |     match x {\n    |           ^ cannot move out of here\n ...\n LL |         (D(s), &t) => (),\n-   |            - data moved here\n-   |\n-note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/move-errors.rs:95:12\n-   |\n-LL |         (D(s), &t) => (),\n-   |            ^\n+   |            -\n+   |            |\n+   |            data moved here\n+   |            move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `*x.1` which is behind a shared reference\n   --> $DIR/move-errors.rs:92:11\n    |\n LL |     match x {\n-   |           ^ cannot move out of borrowed content\n+   |           ^\n ...\n LL |         (D(s), &t) => (),\n-   |                 - data moved here\n-   |\n-note: move occurs because `t` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/move-errors.rs:95:17\n-   |\n-LL |         (D(s), &t) => (),\n-   |                 ^\n+   |                 -\n+   |                 |\n+   |                 data moved here\n+   |                 move occurs because `t` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0509]: cannot move out of type `F`, which implements the `Drop` trait\n   --> $DIR/move-errors.rs:102:11\n@@ -163,23 +144,17 @@ note: move occurs because these variables have types that don't implement the `C\n LL |         F(s, mut t) => (),\n    |           ^  ^^^^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `x.0` which is behind a shared reference\n   --> $DIR/move-errors.rs:110:11\n    |\n LL |     match *x {\n-   |           ^^\n-   |           |\n-   |           cannot move out of borrowed content\n-   |           help: consider removing the `*`: `x`\n+   |           ^^ help: consider removing the `*`: `x`\n LL |\n LL |         Ok(s) | Err(s) => (),\n-   |            - data moved here\n-   |\n-note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/move-errors.rs:112:12\n-   |\n-LL |         Ok(s) | Err(s) => (),\n-   |            ^\n+   |            -\n+   |            |\n+   |            data moved here\n+   |            move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n \n error: aborting due to 14 previous errors\n "}, {"sha": "f6252f4ed79771d60b455f2fb73375477ca1bc10", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-box-error.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.nll.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -7,11 +7,11 @@ LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait> {\n LL |     ss.r\n    |     ^^^^ lifetime `'static` required\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `ss.r` which is behind a mutable reference\n   --> $DIR/object-lifetime-default-from-box-error.rs:18:5\n    |\n LL |     ss.r\n-   |     ^^^^ cannot move out of borrowed content\n+   |     ^^^^ move occurs because `ss.r` has type `std::boxed::Box<dyn SomeTrait>`, which does not implement the `Copy` trait\n \n error[E0621]: explicit lifetime required in the type of `ss`\n   --> $DIR/object-lifetime-default-from-box-error.rs:31:5"}, {"sha": "bf387d01b6b2e7fac3edb86764441c681ee3c588", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-across-arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -6,7 +6,7 @@ enum VecWrapper { A(Vec<i32>) }\n fn foo(x: VecWrapper) -> usize {\n     match x {\n         VecWrapper::A(v) if { drop(v); false } => 1,\n-        //~^ ERROR cannot move out of borrowed content\n+        //~^ ERROR cannot move out of `v` in pattern guard\n         VecWrapper::A(v) => v.len()\n     }\n }"}, {"sha": "f6e4e5bd49bf8b46da78c1a43842efab14258ddd", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-across-arms.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,8 +1,10 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `v` in pattern guard\n   --> $DIR/rfc-reject-double-move-across-arms.rs:8:36\n    |\n LL |         VecWrapper::A(v) if { drop(v); false } => 1,\n-   |                                    ^ cannot move out of borrowed content\n+   |                                    ^ move occurs because `v` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n+   |\n+   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error: aborting due to previous error\n "}, {"sha": "ba999e9b3a4a318f3d2b9b8b71d78bea06b7885f", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-in-first-arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -7,7 +7,7 @@ fn foo(n: i32) {\n     let x = A { a: Box::new(n) };\n     let _y = match x {\n         A { a: v } if { drop(v); true } => v,\n-        //~^ ERROR cannot move out of borrowed content\n+        //~^ ERROR cannot move out of `v` in pattern guard\n         _ => Box::new(0),\n     };\n }"}, {"sha": "ec133b028e8f8732ab41497ea46090e48a02cc49", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-in-first-arm.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,8 +1,10 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `v` in pattern guard\n   --> $DIR/rfc-reject-double-move-in-first-arm.rs:9:30\n    |\n LL |         A { a: v } if { drop(v); true } => v,\n-   |                              ^ cannot move out of borrowed content\n+   |                              ^ move occurs because `v` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n+   |\n+   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error: aborting due to previous error\n "}, {"sha": "3bf053eb874ce62496ffc1ac6426596b1468d5b9", "filename": "src/test/ui/rfc-2005-default-binding-mode/for.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -5,6 +5,6 @@ pub fn main() {\n     // The below desugars to &(ref n, mut m).\n     for (n, mut m) in &tups {\n         //~^ ERROR cannot bind by-move and by-ref in the same pattern\n-        //~| ERROR cannot move out of borrowed content\n+        //~| ERROR cannot move out of a shared reference\n     }\n }"}, {"sha": "8a1ded1d5b94a2c2dcaba369a51e57ccfc3c6814", "filename": "src/test/ui/rfc-2005-default-binding-mode/for.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -6,19 +6,14 @@ LL |     for (n, mut m) in &tups {\n    |          |\n    |          both by-ref and by-move used\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/for.rs:6:23\n    |\n LL |     for (n, mut m) in &tups {\n-   |             -----     ^^^^^ cannot move out of borrowed content\n+   |             -----     ^^^^^\n    |             |\n    |             data moved here\n-   |\n-note: move occurs because `m` has type `Foo`, which does not implement the `Copy` trait\n-  --> $DIR/for.rs:6:13\n-   |\n-LL |     for (n, mut m) in &tups {\n-   |             ^^^^^\n+   |             move occurs because `m` has type `Foo`, which does not implement the `Copy` trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "938fdaf11f09ba32d32a798cefb2df89d2c40538", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -55,7 +55,7 @@ fn test7() {\n     f(Box::new(|a| {\n         //~^ ERROR cannot move out of `f` because it is borrowed\n         foo(f);\n-        //~^ ERROR cannot move out of captured variable in an `FnMut` closure\n+        //~^ ERROR cannot move out of `f`, a captured variable in an `FnMut` closure\n     }), 3);\n }\n "}, {"sha": "72f875bbd14a4101c2d1146febb23296422e4dbf", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -26,14 +26,14 @@ LL | fn test4(f: &Test) {\n LL |     f.f.call_mut(())\n    |     ^^^ `f` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+error[E0507]: cannot move out of `f`, a captured variable in an `FnMut` closure\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:57:13\n    |\n LL |     let mut f = move |g: Box<dyn FnMut(isize)>, b: isize| {\n    |         ----- captured outer variable\n ...\n LL |         foo(f);\n-   |             ^ cannot move out of captured variable in an `FnMut` closure\n+   |             ^ move occurs because `f` has type `[closure@$DIR/borrowck-call-is-borrow-issue-12224.rs:52:17: 54:6 s:std::string::String]`, which does not implement the `Copy` trait\n \n error[E0505]: cannot move out of `f` because it is borrowed\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:55:16"}, {"sha": "235e9ee9b919d4a7c1089fdc9f68e0186e77bf22", "filename": "src/test/ui/static/static-items-cant-move.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fstatic%2Fstatic-items-cant-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fstatic%2Fstatic-items-cant-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-items-cant-move.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,8 +1,8 @@\n-error[E0507]: cannot move out of static item\n+error[E0507]: cannot move out of static item `BAR`\n   --> $DIR/static-items-cant-move.rs:18:10\n    |\n LL |     test(BAR);\n-   |          ^^^ cannot move out of static item\n+   |          ^^^ move occurs because `BAR` has type `Foo`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "d85864ecac2853f6a88708177c8769d208257325", "filename": "src/test/ui/std-uncopyable-atomics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -6,11 +6,11 @@ use std::ptr;\n \n fn main() {\n     let x = AtomicBool::new(false);\n-    let x = *&x; //~ ERROR: cannot move out of borrowed content\n+    let x = *&x; //~ ERROR: cannot move out of a shared reference\n     let x = AtomicIsize::new(0);\n-    let x = *&x; //~ ERROR: cannot move out of borrowed content\n+    let x = *&x; //~ ERROR: cannot move out of a shared reference\n     let x = AtomicUsize::new(0);\n-    let x = *&x; //~ ERROR: cannot move out of borrowed content\n+    let x = *&x; //~ ERROR: cannot move out of a shared reference\n     let x: AtomicPtr<usize> = AtomicPtr::new(ptr::null_mut());\n-    let x = *&x; //~ ERROR: cannot move out of borrowed content\n+    let x = *&x; //~ ERROR: cannot move out of a shared reference\n }"}, {"sha": "189a27db382cda69f4344f0d105f9b08db3a6fbc", "filename": "src/test/ui/std-uncopyable-atomics.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,37 +1,37 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/std-uncopyable-atomics.rs:9:13\n    |\n LL |     let x = *&x;\n    |             ^^^\n    |             |\n-   |             cannot move out of borrowed content\n+   |             move occurs because value has type `std::sync::atomic::AtomicBool`, which does not implement the `Copy` trait\n    |             help: consider removing the `*`: `&x`\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/std-uncopyable-atomics.rs:11:13\n    |\n LL |     let x = *&x;\n    |             ^^^\n    |             |\n-   |             cannot move out of borrowed content\n+   |             move occurs because value has type `std::sync::atomic::AtomicIsize`, which does not implement the `Copy` trait\n    |             help: consider removing the `*`: `&x`\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/std-uncopyable-atomics.rs:13:13\n    |\n LL |     let x = *&x;\n    |             ^^^\n    |             |\n-   |             cannot move out of borrowed content\n+   |             move occurs because value has type `std::sync::atomic::AtomicUsize`, which does not implement the `Copy` trait\n    |             help: consider removing the `*`: `&x`\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/std-uncopyable-atomics.rs:15:13\n    |\n LL |     let x = *&x;\n    |             ^^^\n    |             |\n-   |             cannot move out of borrowed content\n+   |             move occurs because value has type `std::sync::atomic::AtomicPtr<usize>`, which does not implement the `Copy` trait\n    |             help: consider removing the `*`: `&x`\n \n error: aborting due to 4 previous errors"}, {"sha": "c0b7a5a5b6250ad217aa4b689195d6c0b64a1a1c", "filename": "src/test/ui/suggestions/dont-suggest-ref/duplicate-suggestions.stderr", "status": "modified", "additions": 32, "deletions": 34, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,8 +1,8 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/duplicate-suggestions.rs:39:27\n    |\n LL |     let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n-   |         ---------------   ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |         ---------------   ^^^^^^^^^^^^^^^^^^^^^^^\n    |         |   |      |\n    |         |   |      ...and here\n    |         |   data moved here\n@@ -14,11 +14,11 @@ note: move occurs because these variables have types that don't implement the `C\n LL |     let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n    |             ^^     ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/duplicate-suggestions.rs:43:50\n    |\n LL |     if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n-   |            -----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |            -----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^\n    |            |             |                |\n    |            |             |                ...and here\n    |            |             data moved here\n@@ -30,11 +30,11 @@ note: move occurs because these variables have types that don't implement the `C\n LL |     if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n    |                          ^^               ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/duplicate-suggestions.rs:47:53\n    |\n LL |     while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n-   |               -----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |               -----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^\n    |               |             |                |\n    |               |             |                ...and here\n    |               |             data moved here\n@@ -46,11 +46,11 @@ note: move occurs because these variables have types that don't implement the `C\n LL |     while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n    |                             ^^               ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/duplicate-suggestions.rs:51:11\n    |\n LL |     match &(e.clone(), e.clone()) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^\n LL |\n LL |         &(Either::One(_t), Either::Two(_u)) => (),\n    |                       --               -- ...and here\n@@ -77,11 +77,11 @@ help: consider removing the `&`\n LL |         (Either::Two(_t), Either::One(_u)) => (),\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/duplicate-suggestions.rs:61:11\n    |\n LL |     match &(e.clone(), e.clone()) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^\n LL |\n LL |         &(Either::One(_t), Either::Two(_u))\n    |         -----------------------------------\n@@ -96,11 +96,11 @@ note: move occurs because these variables have types that don't implement the `C\n LL |         &(Either::One(_t), Either::Two(_u))\n    |                       ^^               ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/duplicate-suggestions.rs:70:11\n    |\n LL |     match &(e.clone(), e.clone()) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^\n LL |\n LL |         &(Either::One(_t), Either::Two(_u)) => (),\n    |         -----------------------------------\n@@ -115,11 +115,11 @@ note: move occurs because these variables have types that don't implement the `C\n LL |         &(Either::One(_t), Either::Two(_u)) => (),\n    |                       ^^               ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/duplicate-suggestions.rs:78:11\n    |\n LL |     match &(e.clone(), e.clone()) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^\n LL |\n LL |         &(Either::One(_t), Either::Two(_u)) => (),\n    |         -----------------------------------\n@@ -134,11 +134,11 @@ note: move occurs because these variables have types that don't implement the `C\n LL |         &(Either::One(_t), Either::Two(_u)) => (),\n    |                       ^^               ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:91:31\n    |\n LL |     let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n-   |         -------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |         -------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |       |      |\n    |         |       |      ...and here\n    |         |       data moved here\n@@ -150,11 +150,11 @@ note: move occurs because these variables have types that don't implement the `C\n LL |     let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n    |                 ^^     ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:95:54\n    |\n LL |     if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n-   |            ---------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |            ---------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |            |                 |                |\n    |            |                 |                ...and here\n    |            |                 data moved here\n@@ -166,11 +166,11 @@ note: move occurs because these variables have types that don't implement the `C\n LL |     if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n    |                              ^^               ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:99:57\n    |\n LL |     while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n-   |               ---------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |               ---------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |               |                 |                |\n    |               |                 |                ...and here\n    |               |                 data moved here\n@@ -182,11 +182,11 @@ note: move occurs because these variables have types that don't implement the `C\n LL |     while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n    |                                 ^^               ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:103:11\n    |\n LL |     match &mut (em.clone(), em.clone()) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |\n LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |                           --               -- ...and here\n@@ -213,11 +213,11 @@ help: consider removing the `&mut`\n LL |         (Either::Two(_t), Either::One(_u)) => (),\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:113:11\n    |\n LL |     match &mut (em.clone(), em.clone()) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |\n LL |         &mut (Either::One(_t), Either::Two(_u))\n    |         ---------------------------------------\n@@ -232,11 +232,11 @@ note: move occurs because these variables have types that don't implement the `C\n LL |         &mut (Either::One(_t), Either::Two(_u))\n    |                           ^^               ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:122:11\n    |\n LL |     match &mut (em.clone(), em.clone()) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |\n LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |         ---------------------------------------\n@@ -251,11 +251,11 @@ note: move occurs because these variables have types that don't implement the `C\n LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |                           ^^               ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:130:11\n    |\n LL |     match &mut (em.clone(), em.clone()) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |\n LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |         ---------------------------------------\n@@ -270,11 +270,11 @@ note: move occurs because these variables have types that don't implement the `C\n LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |                           ^^               ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:138:11\n    |\n LL |     match &mut (em.clone(), em.clone()) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |\n LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |         ---------------------------------------\n@@ -289,15 +289,14 @@ note: move occurs because these variables have types that don't implement the `C\n LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |                           ^^               ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/duplicate-suggestions.rs:86:11\n    |\n LL |     fn f5(&(X(_t), X(_u)): &(X, X)) { }\n    |           ^^^^--^^^^^--^^\n    |           |   |      |\n    |           |   |      ...and here\n    |           |   data moved here\n-   |           cannot move out of borrowed content\n    |           help: consider removing the `&`: `(X(_t), X(_u))`\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait\n@@ -306,15 +305,14 @@ note: move occurs because these variables have types that don't implement the `C\n LL |     fn f5(&(X(_t), X(_u)): &(X, X)) { }\n    |               ^^     ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:146:11\n    |\n LL |     fn f6(&mut (X(_t), X(_u)): &mut (X, X)) { }\n    |           ^^^^^^^^--^^^^^--^^\n    |           |       |      |\n    |           |       |      ...and here\n    |           |       data moved here\n-   |           cannot move out of borrowed content\n    |           help: consider removing the `&mut`: `(X(_t), X(_u))`\n    |\n note: move occurs because these variables have types that don't implement the `Copy` trait"}, {"sha": "c50cbcde85553f43743b419998318f1a51588ced", "filename": "src/test/ui/suggestions/dont-suggest-ref/move-into-closure.stderr", "status": "modified", "additions": 102, "deletions": 240, "changes": 342, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,419 +1,281 @@\n-error[E0507]: cannot move out of captured variable in an `Fn` closure\n+error[E0507]: cannot move out of `x.0`, as `x` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:28:21\n    |\n LL |     let x = X(Y);\n    |         - captured outer variable\n ...\n LL |         let X(_t) = x;\n-   |               --    ^\n-   |               |     |\n-   |               |     cannot move out of captured variable in an `Fn` closure\n-   |               |     help: consider borrowing here: `&x`\n+   |               --    ^ help: consider borrowing here: `&x`\n+   |               |\n    |               data moved here\n-   |\n-note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:28:15\n-   |\n-LL |         let X(_t) = x;\n-   |               ^^\n+   |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of captured variable in an `Fn` closure\n+error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:32:34\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n ...\n LL |         if let Either::One(_t) = e { }\n-   |                            --    ^\n-   |                            |     |\n-   |                            |     cannot move out of captured variable in an `Fn` closure\n-   |                            |     help: consider borrowing here: `&e`\n+   |                            --    ^ help: consider borrowing here: `&e`\n+   |                            |\n    |                            data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:32:28\n-   |\n-LL |         if let Either::One(_t) = e { }\n-   |                            ^^\n+   |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of captured variable in an `Fn` closure\n+error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:36:37\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n ...\n LL |         while let Either::One(_t) = e { }\n-   |                               --    ^\n-   |                               |     |\n-   |                               |     cannot move out of captured variable in an `Fn` closure\n-   |                               |     help: consider borrowing here: `&e`\n+   |                               --    ^ help: consider borrowing here: `&e`\n+   |                               |\n    |                               data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:36:31\n-   |\n-LL |         while let Either::One(_t) = e { }\n-   |                               ^^\n+   |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of captured variable in an `Fn` closure\n+error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:40:15\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n ...\n LL |         match e {\n-   |               ^\n-   |               |\n-   |               cannot move out of captured variable in an `Fn` closure\n-   |               help: consider borrowing here: `&e`\n+   |               ^ help: consider borrowing here: `&e`\n ...\n LL |             Either::One(_t)\n-   |                         -- data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:44:25\n-   |\n-LL |             Either::One(_t)\n-   |                         ^^\n+   |                         --\n+   |                         |\n+   |                         data moved here\n+   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of captured variable in an `Fn` closure\n+error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:47:15\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n ...\n LL |         match e {\n-   |               ^\n-   |               |\n-   |               cannot move out of captured variable in an `Fn` closure\n-   |               help: consider borrowing here: `&e`\n+   |               ^ help: consider borrowing here: `&e`\n ...\n LL |             Either::One(_t) => (),\n-   |                         -- data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:51:25\n-   |\n-LL |             Either::One(_t) => (),\n-   |                         ^^\n+   |                         --\n+   |                         |\n+   |                         data moved here\n+   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of captured variable in an `Fn` closure\n+error[E0507]: cannot move out of `x.0`, as `x` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:56:25\n    |\n LL |     let x = X(Y);\n    |         - captured outer variable\n ...\n LL |         let X(mut _t) = x;\n-   |               ------    ^\n-   |               |         |\n-   |               |         cannot move out of captured variable in an `Fn` closure\n-   |               |         help: consider borrowing here: `&x`\n+   |               ------    ^ help: consider borrowing here: `&x`\n+   |               |\n    |               data moved here\n-   |\n-note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:56:15\n-   |\n-LL |         let X(mut _t) = x;\n-   |               ^^^^^^\n+   |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of captured variable in an `Fn` closure\n+error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:60:38\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n ...\n LL |         if let Either::One(mut _t) = em { }\n-   |                            ------    ^^\n-   |                            |         |\n-   |                            |         cannot move out of captured variable in an `Fn` closure\n-   |                            |         help: consider borrowing here: `&em`\n+   |                            ------    ^^ help: consider borrowing here: `&em`\n+   |                            |\n    |                            data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:60:28\n-   |\n-LL |         if let Either::One(mut _t) = em { }\n-   |                            ^^^^^^\n+   |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of captured variable in an `Fn` closure\n+error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:64:41\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n ...\n LL |         while let Either::One(mut _t) = em { }\n-   |                               ------    ^^\n-   |                               |         |\n-   |                               |         cannot move out of captured variable in an `Fn` closure\n-   |                               |         help: consider borrowing here: `&em`\n+   |                               ------    ^^ help: consider borrowing here: `&em`\n+   |                               |\n    |                               data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:64:31\n-   |\n-LL |         while let Either::One(mut _t) = em { }\n-   |                               ^^^^^^\n+   |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of captured variable in an `Fn` closure\n+error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:68:15\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n ...\n LL |         match em {\n-   |               ^^\n-   |               |\n-   |               cannot move out of captured variable in an `Fn` closure\n-   |               help: consider borrowing here: `&em`\n+   |               ^^ help: consider borrowing here: `&em`\n ...\n LL |             Either::One(mut _t)\n-   |                         ------ data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:72:25\n-   |\n-LL |             Either::One(mut _t)\n-   |                         ^^^^^^\n+   |                         ------\n+   |                         |\n+   |                         data moved here\n+   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of captured variable in an `Fn` closure\n+error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:75:15\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n ...\n LL |         match em {\n-   |               ^^\n-   |               |\n-   |               cannot move out of captured variable in an `Fn` closure\n-   |               help: consider borrowing here: `&em`\n+   |               ^^ help: consider borrowing here: `&em`\n ...\n LL |             Either::One(mut _t) => (),\n-   |                         ------ data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:79:25\n-   |\n-LL |             Either::One(mut _t) => (),\n-   |                         ^^^^^^\n+   |                         ------\n+   |                         |\n+   |                         data moved here\n+   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+error[E0507]: cannot move out of `x.0`, as `x` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:95:21\n    |\n LL |     let x = X(Y);\n    |         - captured outer variable\n ...\n LL |         let X(_t) = x;\n-   |               --    ^\n-   |               |     |\n-   |               |     cannot move out of captured variable in an `FnMut` closure\n-   |               |     help: consider borrowing here: `&x`\n+   |               --    ^ help: consider borrowing here: `&x`\n+   |               |\n    |               data moved here\n-   |\n-note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:95:15\n-   |\n-LL |         let X(_t) = x;\n-   |               ^^\n+   |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:99:34\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n ...\n LL |         if let Either::One(_t) = e { }\n-   |                            --    ^\n-   |                            |     |\n-   |                            |     cannot move out of captured variable in an `FnMut` closure\n-   |                            |     help: consider borrowing here: `&e`\n+   |                            --    ^ help: consider borrowing here: `&e`\n+   |                            |\n    |                            data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:99:28\n-   |\n-LL |         if let Either::One(_t) = e { }\n-   |                            ^^\n+   |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:103:37\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n ...\n LL |         while let Either::One(_t) = e { }\n-   |                               --    ^\n-   |                               |     |\n-   |                               |     cannot move out of captured variable in an `FnMut` closure\n-   |                               |     help: consider borrowing here: `&e`\n+   |                               --    ^ help: consider borrowing here: `&e`\n+   |                               |\n    |                               data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:103:31\n-   |\n-LL |         while let Either::One(_t) = e { }\n-   |                               ^^\n+   |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:107:15\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n ...\n LL |         match e {\n-   |               ^\n-   |               |\n-   |               cannot move out of captured variable in an `FnMut` closure\n-   |               help: consider borrowing here: `&e`\n+   |               ^ help: consider borrowing here: `&e`\n ...\n LL |             Either::One(_t)\n-   |                         -- data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:111:25\n-   |\n-LL |             Either::One(_t)\n-   |                         ^^\n+   |                         --\n+   |                         |\n+   |                         data moved here\n+   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:114:15\n    |\n LL |     let e = Either::One(X(Y));\n    |         - captured outer variable\n ...\n LL |         match e {\n-   |               ^\n-   |               |\n-   |               cannot move out of captured variable in an `FnMut` closure\n-   |               help: consider borrowing here: `&e`\n+   |               ^ help: consider borrowing here: `&e`\n ...\n LL |             Either::One(_t) => (),\n-   |                         -- data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:118:25\n-   |\n-LL |             Either::One(_t) => (),\n-   |                         ^^\n+   |                         --\n+   |                         |\n+   |                         data moved here\n+   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+error[E0507]: cannot move out of `x.0`, as `x` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:123:25\n    |\n LL |     let x = X(Y);\n    |         - captured outer variable\n ...\n LL |         let X(mut _t) = x;\n-   |               ------    ^\n-   |               |         |\n-   |               |         cannot move out of captured variable in an `FnMut` closure\n-   |               |         help: consider borrowing here: `&x`\n+   |               ------    ^ help: consider borrowing here: `&x`\n+   |               |\n    |               data moved here\n-   |\n-note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:123:15\n-   |\n-LL |         let X(mut _t) = x;\n-   |               ^^^^^^\n+   |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:127:38\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n ...\n LL |         if let Either::One(mut _t) = em { }\n-   |                            ------    ^^\n-   |                            |         |\n-   |                            |         cannot move out of captured variable in an `FnMut` closure\n-   |                            |         help: consider borrowing here: `&em`\n+   |                            ------    ^^ help: consider borrowing here: `&em`\n+   |                            |\n    |                            data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:127:28\n-   |\n-LL |         if let Either::One(mut _t) = em { }\n-   |                            ^^^^^^\n+   |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:131:41\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n ...\n LL |         while let Either::One(mut _t) = em { }\n-   |                               ------    ^^\n-   |                               |         |\n-   |                               |         cannot move out of captured variable in an `FnMut` closure\n-   |                               |         help: consider borrowing here: `&em`\n+   |                               ------    ^^ help: consider borrowing here: `&em`\n+   |                               |\n    |                               data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:131:31\n-   |\n-LL |         while let Either::One(mut _t) = em { }\n-   |                               ^^^^^^\n+   |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:135:15\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n ...\n LL |         match em {\n-   |               ^^\n-   |               |\n-   |               cannot move out of captured variable in an `FnMut` closure\n-   |               help: consider borrowing here: `&em`\n+   |               ^^ help: consider borrowing here: `&em`\n ...\n LL |             Either::One(mut _t)\n-   |                         ------ data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:139:25\n-   |\n-LL |             Either::One(mut _t)\n-   |                         ^^^^^^\n+   |                         ------\n+   |                         |\n+   |                         data moved here\n+   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:142:15\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n ...\n LL |         match em {\n-   |               ^^\n-   |               |\n-   |               cannot move out of captured variable in an `FnMut` closure\n-   |               help: consider borrowing here: `&em`\n+   |               ^^ help: consider borrowing here: `&em`\n ...\n LL |             Either::One(mut _t) => (),\n-   |                         ------ data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:146:25\n-   |\n-LL |             Either::One(mut _t) => (),\n-   |                         ^^^^^^\n+   |                         ------\n+   |                         |\n+   |                         data moved here\n+   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:150:15\n    |\n LL |     let mut em = Either::One(X(Y));\n    |         ------ captured outer variable\n ...\n LL |         match em {\n-   |               ^^\n-   |               |\n-   |               cannot move out of captured variable in an `FnMut` closure\n-   |               help: consider borrowing here: `&em`\n+   |               ^^ help: consider borrowing here: `&em`\n ...\n LL |             Either::One(mut _t) => (),\n-   |                         ------ data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/move-into-closure.rs:154:25\n-   |\n-LL |             Either::One(mut _t) => (),\n-   |                         ^^^^^^\n+   |                         ------\n+   |                         |\n+   |                         data moved here\n+   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n error: aborting due to 21 previous errors\n "}, {"sha": "bde3afa3840a25a0f23c10d28bdae4be92c3550c", "filename": "src/test/ui/suggestions/dont-suggest-ref/simple.stderr", "status": "modified", "additions": 223, "deletions": 549, "changes": 772, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,524 +1,335 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `s.0` which is behind a shared reference\n   --> $DIR/simple.rs:38:17\n    |\n LL |     let X(_t) = *s;\n-   |           --    ^^\n-   |           |     |\n-   |           |     cannot move out of borrowed content\n-   |           |     help: consider removing the `*`: `s`\n+   |           --    ^^ help: consider removing the `*`: `s`\n+   |           |\n    |           data moved here\n-   |\n-note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:38:11\n-   |\n-LL |     let X(_t) = *s;\n-   |           ^^\n+   |           move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `r.0` which is behind a shared reference\n   --> $DIR/simple.rs:42:30\n    |\n LL |     if let Either::One(_t) = *r { }\n-   |                        --    ^^\n-   |                        |     |\n-   |                        |     cannot move out of borrowed content\n-   |                        |     help: consider removing the `*`: `r`\n+   |                        --    ^^ help: consider removing the `*`: `r`\n+   |                        |\n    |                        data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:42:24\n-   |\n-LL |     if let Either::One(_t) = *r { }\n-   |                        ^^\n+   |                        move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `r.0` which is behind a shared reference\n   --> $DIR/simple.rs:46:33\n    |\n LL |     while let Either::One(_t) = *r { }\n-   |                           --    ^^\n-   |                           |     |\n-   |                           |     cannot move out of borrowed content\n-   |                           |     help: consider removing the `*`: `r`\n+   |                           --    ^^ help: consider removing the `*`: `r`\n+   |                           |\n    |                           data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:46:27\n-   |\n-LL |     while let Either::One(_t) = *r { }\n-   |                           ^^\n+   |                           move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `r.0` which is behind a shared reference\n   --> $DIR/simple.rs:50:11\n    |\n LL |     match *r {\n-   |           ^^\n-   |           |\n-   |           cannot move out of borrowed content\n-   |           help: consider removing the `*`: `r`\n+   |           ^^ help: consider removing the `*`: `r`\n ...\n LL |         Either::One(_t)\n-   |                     -- data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:54:21\n-   |\n-LL |         Either::One(_t)\n-   |                     ^^\n+   |                     --\n+   |                     |\n+   |                     data moved here\n+   |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `r.0` which is behind a shared reference\n   --> $DIR/simple.rs:57:11\n    |\n LL |     match *r {\n-   |           ^^\n-   |           |\n-   |           cannot move out of borrowed content\n-   |           help: consider removing the `*`: `r`\n+   |           ^^ help: consider removing the `*`: `r`\n ...\n LL |         Either::One(_t) => (),\n-   |                     -- data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:61:21\n-   |\n-LL |         Either::One(_t) => (),\n-   |                     ^^\n+   |                     --\n+   |                     |\n+   |                     data moved here\n+   |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `sm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:66:17\n    |\n LL |     let X(_t) = *sm;\n-   |           --    ^^^\n-   |           |     |\n-   |           |     cannot move out of borrowed content\n-   |           |     help: consider removing the `*`: `sm`\n+   |           --    ^^^ help: consider removing the `*`: `sm`\n+   |           |\n    |           data moved here\n-   |\n-note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:66:11\n-   |\n-LL |     let X(_t) = *sm;\n-   |           ^^\n+   |           move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:70:30\n    |\n LL |     if let Either::One(_t) = *rm { }\n-   |                        --    ^^^\n-   |                        |     |\n-   |                        |     cannot move out of borrowed content\n-   |                        |     help: consider removing the `*`: `rm`\n+   |                        --    ^^^ help: consider removing the `*`: `rm`\n+   |                        |\n    |                        data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:70:24\n-   |\n-LL |     if let Either::One(_t) = *rm { }\n-   |                        ^^\n+   |                        move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:74:33\n    |\n LL |     while let Either::One(_t) = *rm { }\n-   |                           --    ^^^\n-   |                           |     |\n-   |                           |     cannot move out of borrowed content\n-   |                           |     help: consider removing the `*`: `rm`\n+   |                           --    ^^^ help: consider removing the `*`: `rm`\n+   |                           |\n    |                           data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:74:27\n-   |\n-LL |     while let Either::One(_t) = *rm { }\n-   |                           ^^\n+   |                           move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:78:11\n    |\n LL |     match *rm {\n-   |           ^^^\n-   |           |\n-   |           cannot move out of borrowed content\n-   |           help: consider removing the `*`: `rm`\n+   |           ^^^ help: consider removing the `*`: `rm`\n ...\n LL |         Either::One(_t)\n-   |                     -- data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:82:21\n-   |\n-LL |         Either::One(_t)\n-   |                     ^^\n+   |                     --\n+   |                     |\n+   |                     data moved here\n+   |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:85:11\n    |\n LL |     match *rm {\n-   |           ^^^\n-   |           |\n-   |           cannot move out of borrowed content\n-   |           help: consider removing the `*`: `rm`\n+   |           ^^^ help: consider removing the `*`: `rm`\n ...\n LL |         Either::One(_t) => (),\n-   |                     -- data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:89:21\n-   |\n-LL |         Either::One(_t) => (),\n-   |                     ^^\n+   |                     --\n+   |                     |\n+   |                     data moved here\n+   |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:93:11\n    |\n LL |     match *rm {\n-   |           ^^^\n-   |           |\n-   |           cannot move out of borrowed content\n-   |           help: consider removing the `*`: `rm`\n+   |           ^^^ help: consider removing the `*`: `rm`\n ...\n LL |         Either::One(_t) => (),\n-   |                     -- data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:97:21\n-   |\n-LL |         Either::One(_t) => (),\n-   |                     ^^\n+   |                     --\n+   |                     |\n+   |                     data moved here\n+   |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of index of `std::vec::Vec<X>`\n   --> $DIR/simple.rs:102:17\n    |\n LL |     let X(_t) = vs[0];\n-   |           --    ^^^^^\n-   |           |     |\n-   |           |     cannot move out of borrowed content\n-   |           |     help: consider borrowing here: `&vs[0]`\n+   |           --    ^^^^^ help: consider borrowing here: `&vs[0]`\n+   |           |\n    |           data moved here\n-   |\n-note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:102:11\n-   |\n-LL |     let X(_t) = vs[0];\n-   |           ^^\n+   |           move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of index of `std::vec::Vec<Either>`\n   --> $DIR/simple.rs:106:30\n    |\n LL |     if let Either::One(_t) = vr[0] { }\n-   |                        --    ^^^^^\n-   |                        |     |\n-   |                        |     cannot move out of borrowed content\n-   |                        |     help: consider borrowing here: `&vr[0]`\n+   |                        --    ^^^^^ help: consider borrowing here: `&vr[0]`\n+   |                        |\n    |                        data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:106:24\n-   |\n-LL |     if let Either::One(_t) = vr[0] { }\n-   |                        ^^\n+   |                        move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of index of `std::vec::Vec<Either>`\n   --> $DIR/simple.rs:110:33\n    |\n LL |     while let Either::One(_t) = vr[0] { }\n-   |                           --    ^^^^^\n-   |                           |     |\n-   |                           |     cannot move out of borrowed content\n-   |                           |     help: consider borrowing here: `&vr[0]`\n+   |                           --    ^^^^^ help: consider borrowing here: `&vr[0]`\n+   |                           |\n    |                           data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:110:27\n-   |\n-LL |     while let Either::One(_t) = vr[0] { }\n-   |                           ^^\n+   |                           move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of index of `std::vec::Vec<Either>`\n   --> $DIR/simple.rs:114:11\n    |\n LL |     match vr[0] {\n-   |           ^^^^^\n-   |           |\n-   |           cannot move out of borrowed content\n-   |           help: consider borrowing here: `&vr[0]`\n+   |           ^^^^^ help: consider borrowing here: `&vr[0]`\n ...\n LL |         Either::One(_t)\n-   |                     -- data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:118:21\n-   |\n-LL |         Either::One(_t)\n-   |                     ^^\n+   |                     --\n+   |                     |\n+   |                     data moved here\n+   |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of index of `std::vec::Vec<Either>`\n   --> $DIR/simple.rs:121:11\n    |\n LL |     match vr[0] {\n-   |           ^^^^^\n-   |           |\n-   |           cannot move out of borrowed content\n-   |           help: consider borrowing here: `&vr[0]`\n+   |           ^^^^^ help: consider borrowing here: `&vr[0]`\n ...\n LL |         Either::One(_t) => (),\n-   |                     -- data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:125:21\n-   |\n-LL |         Either::One(_t) => (),\n-   |                     ^^\n+   |                     --\n+   |                     |\n+   |                     data moved here\n+   |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of index of `std::vec::Vec<X>`\n   --> $DIR/simple.rs:130:17\n    |\n LL |     let X(_t) = vsm[0];\n-   |           --    ^^^^^^\n-   |           |     |\n-   |           |     cannot move out of borrowed content\n-   |           |     help: consider borrowing here: `&vsm[0]`\n+   |           --    ^^^^^^ help: consider borrowing here: `&vsm[0]`\n+   |           |\n    |           data moved here\n-   |\n-note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:130:11\n-   |\n-LL |     let X(_t) = vsm[0];\n-   |           ^^\n+   |           move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of index of `std::vec::Vec<Either>`\n   --> $DIR/simple.rs:134:30\n    |\n LL |     if let Either::One(_t) = vrm[0] { }\n-   |                        --    ^^^^^^\n-   |                        |     |\n-   |                        |     cannot move out of borrowed content\n-   |                        |     help: consider borrowing here: `&vrm[0]`\n+   |                        --    ^^^^^^ help: consider borrowing here: `&vrm[0]`\n+   |                        |\n    |                        data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:134:24\n-   |\n-LL |     if let Either::One(_t) = vrm[0] { }\n-   |                        ^^\n+   |                        move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of index of `std::vec::Vec<Either>`\n   --> $DIR/simple.rs:138:33\n    |\n LL |     while let Either::One(_t) = vrm[0] { }\n-   |                           --    ^^^^^^\n-   |                           |     |\n-   |                           |     cannot move out of borrowed content\n-   |                           |     help: consider borrowing here: `&vrm[0]`\n+   |                           --    ^^^^^^ help: consider borrowing here: `&vrm[0]`\n+   |                           |\n    |                           data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:138:27\n-   |\n-LL |     while let Either::One(_t) = vrm[0] { }\n-   |                           ^^\n+   |                           move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of index of `std::vec::Vec<Either>`\n   --> $DIR/simple.rs:142:11\n    |\n LL |     match vrm[0] {\n-   |           ^^^^^^\n-   |           |\n-   |           cannot move out of borrowed content\n-   |           help: consider borrowing here: `&vrm[0]`\n+   |           ^^^^^^ help: consider borrowing here: `&vrm[0]`\n ...\n LL |         Either::One(_t)\n-   |                     -- data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:146:21\n-   |\n-LL |         Either::One(_t)\n-   |                     ^^\n+   |                     --\n+   |                     |\n+   |                     data moved here\n+   |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of index of `std::vec::Vec<Either>`\n   --> $DIR/simple.rs:149:11\n    |\n LL |     match vrm[0] {\n-   |           ^^^^^^\n-   |           |\n-   |           cannot move out of borrowed content\n-   |           help: consider borrowing here: `&vrm[0]`\n+   |           ^^^^^^ help: consider borrowing here: `&vrm[0]`\n ...\n LL |         Either::One(_t) => (),\n-   |                     -- data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:153:21\n-   |\n-LL |         Either::One(_t) => (),\n-   |                     ^^\n+   |                     --\n+   |                     |\n+   |                     data moved here\n+   |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of index of `std::vec::Vec<Either>`\n   --> $DIR/simple.rs:157:11\n    |\n LL |     match vrm[0] {\n-   |           ^^^^^^\n-   |           |\n-   |           cannot move out of borrowed content\n-   |           help: consider borrowing here: `&vrm[0]`\n+   |           ^^^^^^ help: consider borrowing here: `&vrm[0]`\n ...\n LL |         Either::One(_t) => (),\n-   |                     -- data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:161:21\n-   |\n-LL |         Either::One(_t) => (),\n-   |                     ^^\n+   |                     --\n+   |                     |\n+   |                     data moved here\n+   |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `s.0` which is behind a shared reference\n   --> $DIR/simple.rs:168:18\n    |\n LL |     let &X(_t) = s;\n-   |         ------   ^ cannot move out of borrowed content\n+   |         ------   ^\n    |         |  |\n    |         |  data moved here\n+   |         |  move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n    |         help: consider removing the `&`: `X(_t)`\n-   |\n-note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:168:12\n-   |\n-LL |     let &X(_t) = s;\n-   |            ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `r.0` which is behind a shared reference\n   --> $DIR/simple.rs:172:31\n    |\n LL |     if let &Either::One(_t) = r { }\n-   |            ----------------   ^ cannot move out of borrowed content\n+   |            ----------------   ^\n    |            |            |\n    |            |            data moved here\n+   |            |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |            help: consider removing the `&`: `Either::One(_t)`\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:172:25\n-   |\n-LL |     if let &Either::One(_t) = r { }\n-   |                         ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `r.0` which is behind a shared reference\n   --> $DIR/simple.rs:176:34\n    |\n LL |     while let &Either::One(_t) = r { }\n-   |               ----------------   ^ cannot move out of borrowed content\n+   |               ----------------   ^\n    |               |            |\n    |               |            data moved here\n+   |               |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |               help: consider removing the `&`: `Either::One(_t)`\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:176:28\n-   |\n-LL |     while let &Either::One(_t) = r { }\n-   |                            ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `r.0` which is behind a shared reference\n   --> $DIR/simple.rs:180:11\n    |\n LL |     match r {\n-   |           ^ cannot move out of borrowed content\n+   |           ^\n LL |\n LL |         &Either::One(_t)\n    |         ----------------\n    |         |            |\n    |         |            data moved here\n+   |         |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |         help: consider removing the `&`: `Either::One(_t)`\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:182:22\n-   |\n-LL |         &Either::One(_t)\n-   |                      ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `r.0` which is behind a shared reference\n   --> $DIR/simple.rs:188:11\n    |\n LL |     match r {\n-   |           ^ cannot move out of borrowed content\n+   |           ^\n LL |\n LL |         &Either::One(_t) => (),\n    |         ----------------\n    |         |            |\n    |         |            data moved here\n+   |         |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |         help: consider removing the `&`: `Either::One(_t)`\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:190:22\n-   |\n-LL |         &Either::One(_t) => (),\n-   |                      ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `r.0` which is behind a shared reference\n   --> $DIR/simple.rs:195:11\n    |\n LL |     match r {\n-   |           ^ cannot move out of borrowed content\n+   |           ^\n LL |\n LL |         &Either::One(_t) => (),\n    |         ----------------\n    |         |            |\n    |         |            data moved here\n+   |         |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |         help: consider removing the `&`: `Either::One(_t)`\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:197:22\n-   |\n-LL |         &Either::One(_t) => (),\n-   |                      ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `sm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:207:22\n    |\n LL |     let &mut X(_t) = sm;\n-   |         ----------   ^^ cannot move out of borrowed content\n+   |         ----------   ^^\n    |         |      |\n    |         |      data moved here\n+   |         |      move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n    |         help: consider removing the `&mut`: `X(_t)`\n-   |\n-note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:207:16\n-   |\n-LL |     let &mut X(_t) = sm;\n-   |                ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:211:35\n    |\n LL |     if let &mut Either::One(_t) = rm { }\n-   |            --------------------   ^^ cannot move out of borrowed content\n+   |            --------------------   ^^\n    |            |                |\n    |            |                data moved here\n+   |            |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |            help: consider removing the `&mut`: `Either::One(_t)`\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:211:29\n-   |\n-LL |     if let &mut Either::One(_t) = rm { }\n-   |                             ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:215:38\n    |\n LL |     while let &mut Either::One(_t) = rm { }\n-   |               --------------------   ^^ cannot move out of borrowed content\n+   |               --------------------   ^^\n    |               |                |\n    |               |                data moved here\n+   |               |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |               help: consider removing the `&mut`: `Either::One(_t)`\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:215:32\n-   |\n-LL |     while let &mut Either::One(_t) = rm { }\n-   |                                ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:219:11\n    |\n LL |     match rm {\n-   |           ^^ cannot move out of borrowed content\n+   |           ^^\n LL |\n LL |         &mut Either::One(_t) => (),\n    |                          -- data moved here\n@@ -543,164 +354,116 @@ help: consider removing the `&mut`\n LL |         Either::Two(_t) => (),\n    |         ^^^^^^^^^^^^^^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:228:11\n    |\n LL |     match rm {\n-   |           ^^ cannot move out of borrowed content\n+   |           ^^\n LL |\n LL |         &mut Either::One(_t) => (),\n    |         --------------------\n    |         |                |\n    |         |                data moved here\n+   |         |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |         help: consider removing the `&mut`: `Either::One(_t)`\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:230:26\n-   |\n-LL |         &mut Either::One(_t) => (),\n-   |                          ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:235:11\n    |\n LL |     match rm {\n-   |           ^^ cannot move out of borrowed content\n+   |           ^^\n LL |\n LL |         &mut Either::One(_t) => (),\n    |         --------------------\n    |         |                |\n    |         |                data moved here\n+   |         |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |         help: consider removing the `&mut`: `Either::One(_t)`\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:237:26\n-   |\n-LL |         &mut Either::One(_t) => (),\n-   |                          ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:242:11\n    |\n LL |     match rm {\n-   |           ^^ cannot move out of borrowed content\n+   |           ^^\n LL |\n LL |         &mut Either::One(_t) => (),\n    |         --------------------\n    |         |                |\n    |         |                data moved here\n+   |         |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |         help: consider removing the `&mut`: `Either::One(_t)`\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:244:26\n-   |\n-LL |         &mut Either::One(_t) => (),\n-   |                          ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/simple.rs:258:21\n    |\n LL |     let (&X(_t),) = (&x.clone(),);\n-   |             --      ^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |             --      ^^^^^^^^^^^^^\n    |             |\n    |             data moved here\n-   |\n-note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:258:13\n-   |\n-LL |     let (&X(_t),) = (&x.clone(),);\n-   |             ^^\n+   |             move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/simple.rs:260:34\n    |\n LL |     if let (&Either::One(_t),) = (&e.clone(),) { }\n-   |                          --      ^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |                          --      ^^^^^^^^^^^^^\n    |                          |\n    |                          data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:260:26\n-   |\n-LL |     if let (&Either::One(_t),) = (&e.clone(),) { }\n-   |                          ^^\n+   |                          move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/simple.rs:262:37\n    |\n LL |     while let (&Either::One(_t),) = (&e.clone(),) { }\n-   |                             --      ^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |                             --      ^^^^^^^^^^^^^\n    |                             |\n    |                             data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:262:29\n-   |\n-LL |     while let (&Either::One(_t),) = (&e.clone(),) { }\n-   |                             ^^\n+   |                             move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/simple.rs:264:11\n    |\n LL |     match (&e.clone(),) {\n-   |           ^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |           ^^^^^^^^^^^^^\n LL |\n LL |         (&Either::One(_t),)\n-   |                       -- data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:266:23\n-   |\n-LL |         (&Either::One(_t),)\n-   |                       ^^\n+   |                       --\n+   |                       |\n+   |                       data moved here\n+   |                       move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a mutable reference\n   --> $DIR/simple.rs:272:25\n    |\n LL |     let (&mut X(_t),) = (&mut xm.clone(),);\n-   |                 --      ^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |                 --      ^^^^^^^^^^^^^^^^^^\n    |                 |\n    |                 data moved here\n-   |\n-note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:272:17\n-   |\n-LL |     let (&mut X(_t),) = (&mut xm.clone(),);\n-   |                 ^^\n+   |                 move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a mutable reference\n   --> $DIR/simple.rs:274:38\n    |\n LL |     if let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n-   |                              --      ^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |                              --      ^^^^^^^^^^^^^^^^^^\n    |                              |\n    |                              data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:274:30\n-   |\n-LL |     if let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n-   |                              ^^\n+   |                              move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a mutable reference\n   --> $DIR/simple.rs:276:41\n    |\n LL |     while let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n-   |                                 --      ^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |                                 --      ^^^^^^^^^^^^^^^^^^\n    |                                 |\n    |                                 data moved here\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:276:33\n-   |\n-LL |     while let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n-   |                                 ^^\n+   |                                 move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a mutable reference\n   --> $DIR/simple.rs:278:11\n    |\n LL |     match (&mut em.clone(),) {\n-   |           ^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |           ^^^^^^^^^^^^^^^^^^\n LL |\n LL |         (&mut Either::One(_t),) => (),\n    |                           -- data moved here\n@@ -715,283 +478,194 @@ LL |         (&mut Either::One(_t),) => (),\n LL |         (&mut Either::Two(_t),) => (),\n    |                           ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/simple.rs:288:18\n    |\n LL |     let &X(_t) = &x;\n-   |         ------   ^^ cannot move out of borrowed content\n+   |         ------   ^^\n    |         |  |\n    |         |  data moved here\n+   |         |  move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n    |         help: consider removing the `&`: `X(_t)`\n-   |\n-note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:288:12\n-   |\n-LL |     let &X(_t) = &x;\n-   |            ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/simple.rs:292:31\n    |\n LL |     if let &Either::One(_t) = &e { }\n-   |            ----------------   ^^ cannot move out of borrowed content\n+   |            ----------------   ^^\n    |            |            |\n    |            |            data moved here\n+   |            |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |            help: consider removing the `&`: `Either::One(_t)`\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:292:25\n-   |\n-LL |     if let &Either::One(_t) = &e { }\n-   |                         ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/simple.rs:296:34\n    |\n LL |     while let &Either::One(_t) = &e { }\n-   |               ----------------   ^^ cannot move out of borrowed content\n+   |               ----------------   ^^\n    |               |            |\n    |               |            data moved here\n+   |               |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |               help: consider removing the `&`: `Either::One(_t)`\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:296:28\n-   |\n-LL |     while let &Either::One(_t) = &e { }\n-   |                            ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/simple.rs:300:11\n    |\n LL |     match &e {\n-   |           ^^ cannot move out of borrowed content\n+   |           ^^\n LL |\n LL |         &Either::One(_t)\n    |         ----------------\n    |         |            |\n    |         |            data moved here\n+   |         |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |         help: consider removing the `&`: `Either::One(_t)`\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:302:22\n-   |\n-LL |         &Either::One(_t)\n-   |                      ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/simple.rs:308:11\n    |\n LL |     match &e {\n-   |           ^^ cannot move out of borrowed content\n+   |           ^^\n LL |\n LL |         &Either::One(_t) => (),\n    |         ----------------\n    |         |            |\n    |         |            data moved here\n+   |         |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |         help: consider removing the `&`: `Either::One(_t)`\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:310:22\n-   |\n-LL |         &Either::One(_t) => (),\n-   |                      ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/simple.rs:315:11\n    |\n LL |     match &e {\n-   |           ^^ cannot move out of borrowed content\n+   |           ^^\n LL |\n LL |         &Either::One(_t) => (),\n    |         ----------------\n    |         |            |\n    |         |            data moved here\n+   |         |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |         help: consider removing the `&`: `Either::One(_t)`\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:317:22\n-   |\n-LL |         &Either::One(_t) => (),\n-   |                      ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a mutable reference\n   --> $DIR/simple.rs:323:22\n    |\n LL |     let &mut X(_t) = &mut xm;\n-   |         ----------   ^^^^^^^ cannot move out of borrowed content\n+   |         ----------   ^^^^^^^\n    |         |      |\n    |         |      data moved here\n+   |         |      move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n    |         help: consider removing the `&mut`: `X(_t)`\n-   |\n-note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:323:16\n-   |\n-LL |     let &mut X(_t) = &mut xm;\n-   |                ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a mutable reference\n   --> $DIR/simple.rs:327:35\n    |\n LL |     if let &mut Either::One(_t) = &mut em { }\n-   |            --------------------   ^^^^^^^ cannot move out of borrowed content\n+   |            --------------------   ^^^^^^^\n    |            |                |\n    |            |                data moved here\n+   |            |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |            help: consider removing the `&mut`: `Either::One(_t)`\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:327:29\n-   |\n-LL |     if let &mut Either::One(_t) = &mut em { }\n-   |                             ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a mutable reference\n   --> $DIR/simple.rs:331:38\n    |\n LL |     while let &mut Either::One(_t) = &mut em { }\n-   |               --------------------   ^^^^^^^ cannot move out of borrowed content\n+   |               --------------------   ^^^^^^^\n    |               |                |\n    |               |                data moved here\n+   |               |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |               help: consider removing the `&mut`: `Either::One(_t)`\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:331:32\n-   |\n-LL |     while let &mut Either::One(_t) = &mut em { }\n-   |                                ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a mutable reference\n   --> $DIR/simple.rs:335:11\n    |\n LL |     match &mut em {\n-   |           ^^^^^^^ cannot move out of borrowed content\n+   |           ^^^^^^^\n LL |\n LL |         &mut Either::One(_t)\n    |         --------------------\n    |         |                |\n    |         |                data moved here\n+   |         |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |         help: consider removing the `&mut`: `Either::One(_t)`\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:337:26\n-   |\n-LL |         &mut Either::One(_t)\n-   |                          ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a mutable reference\n   --> $DIR/simple.rs:343:11\n    |\n LL |     match &mut em {\n-   |           ^^^^^^^ cannot move out of borrowed content\n+   |           ^^^^^^^\n LL |\n LL |         &mut Either::One(_t) => (),\n    |         --------------------\n    |         |                |\n    |         |                data moved here\n+   |         |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |         help: consider removing the `&mut`: `Either::One(_t)`\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:345:26\n-   |\n-LL |         &mut Either::One(_t) => (),\n-   |                          ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a mutable reference\n   --> $DIR/simple.rs:350:11\n    |\n LL |     match &mut em {\n-   |           ^^^^^^^ cannot move out of borrowed content\n+   |           ^^^^^^^\n LL |\n LL |         &mut Either::One(_t) => (),\n    |         --------------------\n    |         |                |\n    |         |                data moved here\n+   |         |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |         help: consider removing the `&mut`: `Either::One(_t)`\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:352:26\n-   |\n-LL |         &mut Either::One(_t) => (),\n-   |                          ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a mutable reference\n   --> $DIR/simple.rs:357:11\n    |\n LL |     match &mut em {\n-   |           ^^^^^^^ cannot move out of borrowed content\n+   |           ^^^^^^^\n LL |\n LL |         &mut Either::One(_t) => (),\n    |         --------------------\n    |         |                |\n    |         |                data moved here\n+   |         |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |         help: consider removing the `&mut`: `Either::One(_t)`\n-   |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:359:26\n-   |\n-LL |         &mut Either::One(_t) => (),\n-   |                          ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/simple.rs:202:11\n    |\n LL |     fn f1(&X(_t): &X) { }\n    |           ^^^--^\n    |           |  |\n    |           |  data moved here\n-   |           cannot move out of borrowed content\n+   |           |  move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n    |           help: consider removing the `&`: `X(_t)`\n-   |\n-note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:202:14\n-   |\n-LL |     fn f1(&X(_t): &X) { }\n-   |              ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a mutable reference\n   --> $DIR/simple.rs:249:11\n    |\n LL |     fn f2(&mut X(_t): &mut X) { }\n    |           ^^^^^^^--^\n    |           |      |\n    |           |      data moved here\n-   |           cannot move out of borrowed content\n+   |           |      move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n    |           help: consider removing the `&mut`: `X(_t)`\n-   |\n-note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:249:18\n-   |\n-LL |     fn f2(&mut X(_t): &mut X) { }\n-   |                  ^^\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a shared reference\n   --> $DIR/simple.rs:269:11\n    |\n LL |     fn f3((&X(_t),): (&X,)) { }\n    |           ^^^^--^^^\n-   |           |   |\n-   |           |   data moved here\n-   |           cannot move out of borrowed content\n-   |\n-note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:269:15\n-   |\n-LL |     fn f3((&X(_t),): (&X,)) { }\n-   |               ^^\n+   |               |\n+   |               data moved here\n+   |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of a mutable reference\n   --> $DIR/simple.rs:283:11\n    |\n LL |     fn f4((&mut X(_t),): (&mut X,)) { }\n    |           ^^^^^^^^--^^^\n-   |           |       |\n-   |           |       data moved here\n-   |           cannot move out of borrowed content\n-   |\n-note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/simple.rs:283:19\n-   |\n-LL |     fn f4((&mut X(_t),): (&mut X,)) { }\n-   |                   ^^\n+   |                   |\n+   |                   data moved here\n+   |                   move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n \n error: aborting due to 60 previous errors\n "}, {"sha": "ba16bcc8a336d845ba9800be3b9c7e862491f0d6", "filename": "src/test/ui/suggestions/option-content-move.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.fixed?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -9,7 +9,7 @@ impl LipogramCorpora {\n         for selection in &self.selections {\n             if selection.1.is_some() {\n                 if selection.1.as_ref().unwrap().contains(selection.0) {\n-                //~^ ERROR cannot move out of borrowed content\n+                //~^ ERROR cannot move out of `selection.1`\n                     return Err(selection.0);\n                 }\n             }\n@@ -27,7 +27,7 @@ impl LipogramCorpora2 {\n         for selection in &self.selections {\n             if selection.1.is_ok() {\n                 if selection.1.as_ref().unwrap().contains(selection.0) {\n-                //~^ ERROR cannot move out of borrowed content\n+                //~^ ERROR cannot move out of `selection.1`\n                     return Err(selection.0);\n                 }\n             }"}, {"sha": "ef38f114eca55f405a73cf6aa7f7fad9052910c6", "filename": "src/test/ui/suggestions/option-content-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -9,7 +9,7 @@ impl LipogramCorpora {\n         for selection in &self.selections {\n             if selection.1.is_some() {\n                 if selection.1.unwrap().contains(selection.0) {\n-                //~^ ERROR cannot move out of borrowed content\n+                //~^ ERROR cannot move out of `selection.1`\n                     return Err(selection.0);\n                 }\n             }\n@@ -27,7 +27,7 @@ impl LipogramCorpora2 {\n         for selection in &self.selections {\n             if selection.1.is_ok() {\n                 if selection.1.unwrap().contains(selection.0) {\n-                //~^ ERROR cannot move out of borrowed content\n+                //~^ ERROR cannot move out of `selection.1`\n                     return Err(selection.0);\n                 }\n             }"}, {"sha": "c842e7b2930bd89b590408025d608a883cb8a54d", "filename": "src/test/ui/suggestions/option-content-move.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,19 +1,19 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `selection.1` which is behind a shared reference\n   --> $DIR/option-content-move.rs:11:20\n    |\n LL |                 if selection.1.unwrap().contains(selection.0) {\n    |                    ^^^^^^^^^^^\n    |                    |\n-   |                    cannot move out of borrowed content\n+   |                    move occurs because `selection.1` has type `std::option::Option<std::string::String>`, which does not implement the `Copy` trait\n    |                    help: consider borrowing the `Option`'s content: `selection.1.as_ref()`\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `selection.1` which is behind a shared reference\n   --> $DIR/option-content-move.rs:29:20\n    |\n LL |                 if selection.1.unwrap().contains(selection.0) {\n    |                    ^^^^^^^^^^^\n    |                    |\n-   |                    cannot move out of borrowed content\n+   |                    move occurs because `selection.1` has type `std::result::Result<std::string::String, std::string::String>`, which does not implement the `Copy` trait\n    |                    help: consider borrowing the `Result`'s content: `selection.1.as_ref()`\n \n error: aborting due to 2 previous errors"}, {"sha": "e96a24196863c478e088c6b1d6c753ac61659247", "filename": "src/test/ui/trivial-bounds/trivial-bounds-leak-copy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak-copy.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,8 +1,8 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `*t` which is behind a shared reference\n   --> $DIR/trivial-bounds-leak-copy.rs:9:5\n    |\n LL |     *t\n-   |     ^^ cannot move out of borrowed content\n+   |     ^^ move occurs because `*t` has type `std::string::String`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "58062872aa3c3e7f73c150df26ee610f357d80c6", "filename": "src/test/ui/unboxed-closures/unboxed-closure-illegal-move.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -1,34 +1,34 @@\n-error[E0507]: cannot move out of captured variable in an `Fn` closure\n+error[E0507]: cannot move out of `x`, a captured variable in an `Fn` closure\n   --> $DIR/unboxed-closure-illegal-move.rs:15:31\n    |\n LL |         let x = Box::new(0);\n    |             - captured outer variable\n LL |         let f = to_fn(|| drop(x));\n-   |                               ^ cannot move out of captured variable in an `Fn` closure\n+   |                               ^ move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+error[E0507]: cannot move out of `x`, a captured variable in an `FnMut` closure\n   --> $DIR/unboxed-closure-illegal-move.rs:19:35\n    |\n LL |         let x = Box::new(0);\n    |             - captured outer variable\n LL |         let f = to_fn_mut(|| drop(x));\n-   |                                   ^ cannot move out of captured variable in an `FnMut` closure\n+   |                                   ^ move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of captured variable in an `Fn` closure\n+error[E0507]: cannot move out of `x`, a captured variable in an `Fn` closure\n   --> $DIR/unboxed-closure-illegal-move.rs:28:36\n    |\n LL |         let x = Box::new(0);\n    |             - captured outer variable\n LL |         let f = to_fn(move || drop(x));\n-   |                                    ^ cannot move out of captured variable in an `Fn` closure\n+   |                                    ^ move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of captured variable in an `FnMut` closure\n+error[E0507]: cannot move out of `x`, a captured variable in an `FnMut` closure\n   --> $DIR/unboxed-closure-illegal-move.rs:32:40\n    |\n LL |         let x = Box::new(0);\n    |             - captured outer variable\n LL |         let f = to_fn_mut(move || drop(x));\n-   |                                        ^ cannot move out of captured variable in an `FnMut` closure\n+   |                                        ^ move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n \n error: aborting due to 4 previous errors\n "}, {"sha": "8168da8242fd4ebd4d4e1d6c3a6950b15c01ca05", "filename": "src/test/ui/unop-move-semantics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Funop-move-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Funop-move-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funop-move-semantics.rs?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -21,9 +21,9 @@ fn illegal_dereference<T: Not<Output=T>>(mut x: T, y: T) {\n     let m = &mut x;\n     let n = &y;\n \n-    !*m;  //~ ERROR: cannot move out of borrowed content\n+    !*m;  //~ ERROR: cannot move out of `*m`\n \n-    !*n;  //~ ERROR: cannot move out of borrowed content\n+    !*n;  //~ ERROR: cannot move out of `*n`\n     use_imm(n); use_mut(m);\n }\n fn main() {}"}, {"sha": "6aa3d0b09896b6b77444ea3e7600a7c10897e435", "filename": "src/test/ui/unop-move-semantics.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funop-move-semantics.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -34,17 +34,17 @@ LL |     !y;\n LL |     use_mut(n); use_imm(m);\n    |             - borrow later used here\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `*m` which is behind a mutable reference\n   --> $DIR/unop-move-semantics.rs:24:6\n    |\n LL |     !*m;\n-   |      ^^ cannot move out of borrowed content\n+   |      ^^ move occurs because `*m` has type `T`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of `*n` which is behind a shared reference\n   --> $DIR/unop-move-semantics.rs:26:6\n    |\n LL |     !*n;\n-   |      ^^ cannot move out of borrowed content\n+   |      ^^ move occurs because `*n` has type `T`, which does not implement the `Copy` trait\n \n error: aborting due to 5 previous errors\n "}, {"sha": "650285cb6740a505374223b5b611139f26aca647", "filename": "src/test/ui/unsized-locals/unsized-exprs2.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/021a5033098ff0e3f7126acc7ac35149d325f16d/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.stderr?ref=021a5033098ff0e3f7126acc7ac35149d325f16d", "patch": "@@ -2,7 +2,10 @@ error[E0508]: cannot move out of type `[u8]`, a non-copy slice\n   --> $DIR/unsized-exprs2.rs:22:19\n    |\n LL |     udrop::<[u8]>(foo()[..]);\n-   |                   ^^^^^^^^^ cannot move out of here\n+   |                   ^^^^^^^^^\n+   |                   |\n+   |                   cannot move out of here\n+   |                   move occurs because value has type `[u8]`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}]}