{"sha": "4d72ed61ee11acf084de1a375c839ce40bbdf548", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNzJlZDYxZWUxMWFjZjA4NGRlMWEzNzVjODM5Y2U0MGJiZGY1NDg=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-01-23T22:19:49Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-01-23T22:19:49Z"}, "message": "Make declare_cfn more flexible", "tree": {"sha": "0247b370778db1758655b24cc64d7d92901a7ae6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0247b370778db1758655b24cc64d7d92901a7ae6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d72ed61ee11acf084de1a375c839ce40bbdf548", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d72ed61ee11acf084de1a375c839ce40bbdf548", "html_url": "https://github.com/rust-lang/rust/commit/4d72ed61ee11acf084de1a375c839ce40bbdf548", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d72ed61ee11acf084de1a375c839ce40bbdf548/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8451656fe72db1b168fa2bf66710ee40eb77b45c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8451656fe72db1b168fa2bf66710ee40eb77b45c", "html_url": "https://github.com/rust-lang/rust/commit/8451656fe72db1b168fa2bf66710ee40eb77b45c"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "6beb607b1c3cf91676b7b3a1cd9e2f9d6d8bf3ef", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4d72ed61ee11acf084de1a375c839ce40bbdf548/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d72ed61ee11acf084de1a375c839ce40bbdf548/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=4d72ed61ee11acf084de1a375c839ce40bbdf548", "patch": "@@ -380,7 +380,7 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                     \"rust_eh_personality\"\n                 };\n                 let fty = self.type_variadic_func(&[], self.type_i32());\n-                self.declare_cfn(name, fty)\n+                self.declare_cfn(name, llvm::UnnamedAddr::Global, fty)\n             }\n         };\n         attributes::apply_target_cpu_attr(self, llfn);\n@@ -429,7 +429,7 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n     fn declare_c_main(&self, fn_type: Self::Type) -> Option<Self::Function> {\n         if self.get_declared_value(\"main\").is_none() {\n-            Some(self.declare_cfn(\"main\", fn_type))\n+            Some(self.declare_cfn(\"main\", llvm::UnnamedAddr::Global, fn_type))\n         } else {\n             // If the symbol already exists, it is an error: for example, the user wrote\n             // #[no_mangle] extern \"C\" fn main(..) {..}\n@@ -459,8 +459,7 @@ impl CodegenCx<'b, 'tcx> {\n         } else {\n             self.type_variadic_func(&[], ret)\n         };\n-        let f = self.declare_cfn(name, fn_ty);\n-        llvm::SetUnnamedAddress(f, llvm::UnnamedAddr::No);\n+        let f = self.declare_cfn(name, llvm::UnnamedAddr::No, fn_ty);\n         self.intrinsics.borrow_mut().insert(name, f);\n         f\n     }"}, {"sha": "8977fa085b9bbe1093f14f4723a52abcf8dd04df", "filename": "compiler/rustc_codegen_llvm/src/declare.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4d72ed61ee11acf084de1a375c839ce40bbdf548/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d72ed61ee11acf084de1a375c839ce40bbdf548/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs?ref=4d72ed61ee11acf084de1a375c839ce40bbdf548", "patch": "@@ -30,6 +30,7 @@ fn declare_raw_fn(\n     cx: &CodegenCx<'ll, '_>,\n     name: &str,\n     callconv: llvm::CallConv,\n+    unnamed: llvm::UnnamedAddr,\n     ty: &'ll Type,\n ) -> &'ll Value {\n     debug!(\"declare_raw_fn(name={:?}, ty={:?})\", name, ty);\n@@ -38,9 +39,7 @@ fn declare_raw_fn(\n     };\n \n     llvm::SetFunctionCallConv(llfn, callconv);\n-    // Function addresses in Rust are never significant, allowing functions to\n-    // be merged.\n-    llvm::SetUnnamedAddress(llfn, llvm::UnnamedAddr::Global);\n+    llvm::SetUnnamedAddress(llfn, unnamed);\n \n     if cx.tcx.sess.opts.cg.no_redzone.unwrap_or(cx.tcx.sess.target.disable_redzone) {\n         llvm::Attribute::NoRedZone.apply_llfn(Function, llfn);\n@@ -68,8 +67,13 @@ impl CodegenCx<'ll, 'tcx> {\n     ///\n     /// If there\u2019s a value with the same name already declared, the function will\n     /// update the declaration and return existing Value instead.\n-    pub fn declare_cfn(&self, name: &str, fn_type: &'ll Type) -> &'ll Value {\n-        declare_raw_fn(self, name, llvm::CCallConv, fn_type)\n+    pub fn declare_cfn(\n+        &self,\n+        name: &str,\n+        unnamed: llvm::UnnamedAddr,\n+        fn_type: &'ll Type,\n+    ) -> &'ll Value {\n+        declare_raw_fn(self, name, llvm::CCallConv, unnamed, fn_type)\n     }\n \n     /// Declare a Rust function.\n@@ -79,7 +83,15 @@ impl CodegenCx<'ll, 'tcx> {\n     pub fn declare_fn(&self, name: &str, fn_abi: &FnAbi<'tcx, Ty<'tcx>>) -> &'ll Value {\n         debug!(\"declare_rust_fn(name={:?}, fn_abi={:?})\", name, fn_abi);\n \n-        let llfn = declare_raw_fn(self, name, fn_abi.llvm_cconv(), fn_abi.llvm_type(self));\n+        // Function addresses in Rust are never significant, allowing functions to\n+        // be merged.\n+        let llfn = declare_raw_fn(\n+            self,\n+            name,\n+            fn_abi.llvm_cconv(),\n+            llvm::UnnamedAddr::Global,\n+            fn_abi.llvm_type(self),\n+        );\n         fn_abi.apply_attrs_llfn(self, llfn);\n         llfn\n     }"}, {"sha": "668daa52ed262edd9d42097de7407e549cbba9f9", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d72ed61ee11acf084de1a375c839ce40bbdf548/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d72ed61ee11acf084de1a375c839ce40bbdf548/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=4d72ed61ee11acf084de1a375c839ce40bbdf548", "patch": "@@ -1075,8 +1075,7 @@ fn generic_simd_intrinsic(\n         };\n \n         let llvm_name = &format!(\"llvm.{0}.v{1}{2}\", intr_name, in_len, elem_ty_str);\n-        let f = bx.declare_cfn(&llvm_name, fn_ty);\n-        llvm::SetUnnamedAddress(f, llvm::UnnamedAddr::No);\n+        let f = bx.declare_cfn(&llvm_name, llvm::UnnamedAddr::No, fn_ty);\n         let c = bx.call(f, &args.iter().map(|arg| arg.immediate()).collect::<Vec<_>>(), None);\n         unsafe { llvm::LLVMRustSetHasUnsafeAlgebra(c) };\n         Ok(c)\n@@ -1255,12 +1254,12 @@ fn generic_simd_intrinsic(\n             format!(\"llvm.masked.gather.{}.{}\", llvm_elem_vec_str, llvm_pointer_vec_str);\n         let f = bx.declare_cfn(\n             &llvm_intrinsic,\n+            llvm::UnnamedAddr::No,\n             bx.type_func(\n                 &[llvm_pointer_vec_ty, alignment_ty, mask_ty, llvm_elem_vec_ty],\n                 llvm_elem_vec_ty,\n             ),\n         );\n-        llvm::SetUnnamedAddress(f, llvm::UnnamedAddr::No);\n         let v = bx.call(f, &[args[1].immediate(), alignment, mask, args[0].immediate()], None);\n         return Ok(v);\n     }\n@@ -1385,9 +1384,9 @@ fn generic_simd_intrinsic(\n             format!(\"llvm.masked.scatter.{}.{}\", llvm_elem_vec_str, llvm_pointer_vec_str);\n         let f = bx.declare_cfn(\n             &llvm_intrinsic,\n+            llvm::UnnamedAddr::No,\n             bx.type_func(&[llvm_elem_vec_ty, llvm_pointer_vec_ty, alignment_ty, mask_ty], ret_t),\n         );\n-        llvm::SetUnnamedAddress(f, llvm::UnnamedAddr::No);\n         let v = bx.call(f, &[args[0].immediate(), args[1].immediate(), alignment, mask], None);\n         return Ok(v);\n     }\n@@ -1691,8 +1690,11 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n         );\n         let vec_ty = bx.cx.type_vector(elem_ty, in_len as u64);\n \n-        let f = bx.declare_cfn(&llvm_intrinsic, bx.type_func(&[vec_ty, vec_ty], vec_ty));\n-        llvm::SetUnnamedAddress(f, llvm::UnnamedAddr::No);\n+        let f = bx.declare_cfn(\n+            &llvm_intrinsic,\n+            llvm::UnnamedAddr::No,\n+            bx.type_func(&[vec_ty, vec_ty], vec_ty),\n+        );\n         let v = bx.call(f, &[lhs, rhs], None);\n         return Ok(v);\n     }"}]}