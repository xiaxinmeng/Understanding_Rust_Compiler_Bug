{"sha": "dde61f38557335870a2d53bfa4099466fb71bd60", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZTYxZjM4NTU3MzM1ODcwYTJkNTNiZmE0MDk5NDY2ZmI3MWJkNjA=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2017-10-25T22:04:57Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-10-31T16:41:39Z"}, "message": "add basic region subtyping inference", "tree": {"sha": "09997c7b67ccb214cdc2228edb46bc905c751882", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09997c7b67ccb214cdc2228edb46bc905c751882"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dde61f38557335870a2d53bfa4099466fb71bd60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dde61f38557335870a2d53bfa4099466fb71bd60", "html_url": "https://github.com/rust-lang/rust/commit/dde61f38557335870a2d53bfa4099466fb71bd60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dde61f38557335870a2d53bfa4099466fb71bd60/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8615f3bea67f12db7a84687923d62d5aabc22c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8615f3bea67f12db7a84687923d62d5aabc22c1", "html_url": "https://github.com/rust-lang/rust/commit/b8615f3bea67f12db7a84687923d62d5aabc22c1"}], "stats": {"total": 161, "additions": 161, "deletions": 0}, "files": [{"sha": "a7570c610d8d34a1b07f0f6e897bd9f1d2c6612f", "filename": "src/librustc_mir/transform/nll/constraint_generation.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dde61f38557335870a2d53bfa4099466fb71bd60/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dde61f38557335870a2d53bfa4099466fb71bd60/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fconstraint_generation.rs?ref=dde61f38557335870a2d53bfa4099466fb71bd60", "patch": "@@ -22,6 +22,7 @@ use rustc::util::common::ErrorReported;\n use rustc_data_structures::fx::FxHashSet;\n use syntax::codemap::DUMMY_SP;\n \n+use super::subtype;\n use super::LivenessResults;\n use super::ToRegionIndex;\n use super::region_infer::RegionInferenceContext;\n@@ -239,6 +240,9 @@ impl<'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cx, 'gcx, 'tcx> {\n                        block: BasicBlock,\n                        statement: &Statement<'tcx>,\n                        location: Location) {\n+\n+        debug!(\"visit_statement(statement={:?}, location={:?})\", statement, location);\n+\n         // Look for a statement like:\n         //\n         //     D = & L\n@@ -250,6 +254,14 @@ impl<'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cx, 'gcx, 'tcx> {\n                 self.add_borrow_constraint(location, destination_lv, region, bk, borrowed_lv);\n                 self.add_reborrow_constraint(location, region, borrowed_lv);\n             }\n+\n+            let tcx = self.infcx.tcx;\n+            let destination_ty = destination_lv.ty(self.mir, tcx).to_ty(tcx);\n+            let rv_ty = rv.ty(self.mir, tcx);\n+\n+            for (a, b) in subtype::outlives_pairs(tcx, rv_ty, destination_ty) {\n+                self.regioncx.add_outlives(a, b, location.successor_within_block());\n+            }\n         }\n \n         self.super_statement(block, statement, location);"}, {"sha": "3bd4f65d0dd385567ccd86090f5e2fe7a6c37e6a", "filename": "src/librustc_mir/transform/nll/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dde61f38557335870a2d53bfa4099466fb71bd60/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dde61f38557335870a2d53bfa4099466fb71bd60/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs?ref=dde61f38557335870a2d53bfa4099466fb71bd60", "patch": "@@ -22,6 +22,7 @@ use util as mir_util;\n use self::mir_util::PassWhere;\n \n mod constraint_generation;\n+mod subtype;\n \n mod region_infer;\n use self::region_infer::RegionInferenceContext;"}, {"sha": "953fc0eb733c2187159a690fde5025f9b7dfe5c7", "filename": "src/librustc_mir/transform/nll/subtype.rs", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/dde61f38557335870a2d53bfa4099466fb71bd60/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fsubtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dde61f38557335870a2d53bfa4099466fb71bd60/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fsubtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fsubtype.rs?ref=dde61f38557335870a2d53bfa4099466fb71bd60", "patch": "@@ -0,0 +1,99 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use super::RegionIndex;\n+use transform::nll::ToRegionIndex;\n+use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::relate::{self, Relate, RelateResult, TypeRelation};\n+\n+pub fn outlives_pairs<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                      a: Ty<'tcx>,\n+                      b: Ty<'tcx>)\n+                      -> Vec<(RegionIndex, RegionIndex)>\n+{\n+    let mut subtype = Subtype::new(tcx);\n+    match subtype.relate(&a, &b) {\n+        Ok(_) => subtype.outlives_pairs,\n+\n+        Err(_) => bug!(\"Fail to relate a = {:?} and b = {:?}\", a, b)\n+    }\n+}\n+\n+struct Subtype<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+    outlives_pairs: Vec<(RegionIndex, RegionIndex)>,\n+    ambient_variance: ty::Variance,\n+}\n+\n+impl<'a, 'gcx, 'tcx> Subtype<'a, 'gcx, 'tcx> {\n+    pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Subtype<'a, 'gcx, 'tcx> {\n+        Subtype {\n+            tcx,\n+            outlives_pairs: vec![],\n+            ambient_variance: ty::Covariant,\n+        }\n+    }\n+}\n+\n+impl<'a, 'gcx, 'tcx> TypeRelation<'a, 'gcx, 'tcx> for Subtype<'a, 'gcx, 'tcx> {\n+    fn tag(&self) -> &'static str { \"Subtype\" }\n+    fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> { self.tcx }\n+    fn a_is_expected(&self) -> bool { true } // irrelevant\n+\n+    fn relate_with_variance<T: Relate<'tcx>>(&mut self,\n+                                             variance: ty::Variance,\n+                                             a: &T,\n+                                             b: &T)\n+                                             -> RelateResult<'tcx, T>\n+    {\n+        let old_ambient_variance = self.ambient_variance;\n+        self.ambient_variance = self.ambient_variance.xform(variance);\n+\n+        let result = self.relate(a, b);\n+        self.ambient_variance = old_ambient_variance;\n+        result\n+    }\n+\n+    fn tys(&mut self, t: Ty<'tcx>, t2: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n+        relate::super_relate_tys(self, t, t2)\n+    }\n+\n+    fn regions(&mut self, r_a: ty::Region<'tcx>, r_b: ty::Region<'tcx>)\n+               -> RelateResult<'tcx, ty::Region<'tcx>> {\n+        let a = r_a.to_region_index();\n+        let b = r_b.to_region_index();\n+\n+        match self.ambient_variance {\n+            ty::Covariant => {\n+                self.outlives_pairs.push((b, a));\n+            },\n+\n+            ty::Invariant => {\n+                self.outlives_pairs.push((a, b));\n+                self.outlives_pairs.push((b, a));\n+            },\n+\n+            ty::Contravariant => {\n+                self.outlives_pairs.push((a, b));\n+            },\n+\n+            ty::Bivariant => {},\n+        }\n+\n+        Ok(r_a)\n+    }\n+\n+    fn binders<T>(&mut self, _a: &ty::Binder<T>, _b: &ty::Binder<T>)\n+                  -> RelateResult<'tcx, ty::Binder<T>>\n+        where T: Relate<'tcx>\n+    {\n+        unimplemented!();\n+    }\n+}"}, {"sha": "bc97858e03d974db05a07c999685a464b547c061", "filename": "src/test/mir-opt/nll/region-subtyping-basic.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/dde61f38557335870a2d53bfa4099466fb71bd60/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dde61f38557335870a2d53bfa4099466fb71bd60/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs?ref=dde61f38557335870a2d53bfa4099466fb71bd60", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Basic test for liveness constraints: the region (`R1`) that appears\n+// in the type of `p` includes the points after `&v[0]` up to (but not\n+// including) the call to `use_x`. The `else` branch is not included.\n+\n+// compile-flags:-Znll -Zverbose\n+//                     ^^^^^^^^^ force compiler to dump more region information\n+\n+#![allow(warnings)]\n+\n+fn use_x(_: usize) -> bool { true }\n+\n+fn main() {\n+    let mut v = [1, 2, 3];\n+    let p = &v[0];\n+    let q = p;\n+    if true {\n+        use_x(*q);\n+    } else {\n+        use_x(22);\n+    }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node12.nll.0.mir\n+// | R0: {bb1[1], bb1[2], bb1[3], bb1[4], bb1[5], bb1[6], bb2[0], bb2[1]}\n+// | R1: {bb1[1], bb1[2], bb1[3], bb1[4], bb1[5], bb1[6], bb2[0], bb2[1]}\n+// | R2: {bb1[5], bb1[6], bb2[0], bb2[1]}\n+// END rustc.node12.nll.0.mir\n+// START rustc.node12.nll.0.mir\n+// let _2: &'_#1r usize;\n+// ...\n+// let _6: &'_#2r usize;\n+// ...\n+// _2 = &'_#0r _1[_3];\n+// ...\n+// _7 = _2;\n+// ...\n+// _6 = _7;\n+// END rustc.node12.nll.0.mir"}]}