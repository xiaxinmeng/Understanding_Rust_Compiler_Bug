{"sha": "398fa2187c88de46c13c142f600064483a563c86", "node_id": "C_kwDOAAsO6NoAKDM5OGZhMjE4N2M4OGRlNDZjMTNjMTQyZjYwMDA2NDQ4M2E1NjNjODY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-03T19:18:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-03T19:18:43Z"}, "message": "Auto merge of #112253 - matthiaskrgr:rollup-c37jpm5, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #111659 (suggest `Option::as_deref(_mut)` on type mismatch in option combinator if it passes typeck)\n - #111702 (Option::map_or_else: Show an example of integrating with Result)\n - #111878 (Fix codegen test suite for bare-metal-like targets)\n - #111969 (bootstrap: Make `clean` respect `dry-run`)\n - #111998 (Add other workspaces to `linkedProjects` in rust_analyzer_settings)\n - #112215 (only suppress coercion error if type is definitely unsized)\n - #112231 (Make sure the build.rustc version is either the same or 1 apart (revised))\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "74d42d4297d81015c6bc14c0ddd08cb88956d5d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74d42d4297d81015c6bc14c0ddd08cb88956d5d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/398fa2187c88de46c13c142f600064483a563c86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/398fa2187c88de46c13c142f600064483a563c86", "html_url": "https://github.com/rust-lang/rust/commit/398fa2187c88de46c13c142f600064483a563c86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/398fa2187c88de46c13c142f600064483a563c86/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f5e6bb817c115c067ff47453eb9aa89a0a31358", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f5e6bb817c115c067ff47453eb9aa89a0a31358", "html_url": "https://github.com/rust-lang/rust/commit/2f5e6bb817c115c067ff47453eb9aa89a0a31358"}, {"sha": "d4f87d1e4f2b18bfc6eb01a9eef7b908fb9346eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4f87d1e4f2b18bfc6eb01a9eef7b908fb9346eb", "html_url": "https://github.com/rust-lang/rust/commit/d4f87d1e4f2b18bfc6eb01a9eef7b908fb9346eb"}], "stats": {"total": 666, "additions": 586, "deletions": 80}, "files": [{"sha": "ba49e0c41618a38bb61bfa794202b6cba877a853", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -1595,7 +1595,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             Some(blk_id),\n                         );\n                         if !fcx.tcx.features().unsized_locals {\n-                            unsized_return = self.is_return_ty_unsized(fcx, blk_id);\n+                            unsized_return = self.is_return_ty_definitely_unsized(fcx);\n                         }\n                         if let Some(expression) = expression\n                             && let hir::ExprKind::Loop(loop_blk, ..) = expression.kind {\n@@ -1614,8 +1614,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             None,\n                         );\n                         if !fcx.tcx.features().unsized_locals {\n-                            let id = fcx.tcx.hir().parent_id(id);\n-                            unsized_return = self.is_return_ty_unsized(fcx, id);\n+                            unsized_return = self.is_return_ty_definitely_unsized(fcx);\n                         }\n                     }\n                     _ => {\n@@ -1896,15 +1895,24 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         err.help(\"you could instead create a new `enum` with a variant for each returned type\");\n     }\n \n-    fn is_return_ty_unsized<'a>(&self, fcx: &FnCtxt<'a, 'tcx>, blk_id: hir::HirId) -> bool {\n-        if let Some((_, fn_decl, _)) = fcx.get_fn_decl(blk_id)\n-            && let hir::FnRetTy::Return(ty) = fn_decl.output\n-            && let ty = fcx.astconv().ast_ty_to_ty( ty)\n-            && let ty::Dynamic(..) = ty.kind()\n-        {\n-            return true;\n+    /// Checks whether the return type is unsized via an obligation, which makes\n+    /// sure we consider `dyn Trait: Sized` where clauses, which are trivially\n+    /// false but technically valid for typeck.\n+    fn is_return_ty_definitely_unsized(&self, fcx: &FnCtxt<'_, 'tcx>) -> bool {\n+        if let Some(sig) = fcx.body_fn_sig() {\n+            !fcx.predicate_may_hold(&Obligation::new(\n+                fcx.tcx,\n+                ObligationCause::dummy(),\n+                fcx.param_env,\n+                ty::TraitRef::new(\n+                    fcx.tcx,\n+                    fcx.tcx.require_lang_item(hir::LangItem::Sized, None),\n+                    [sig.output()],\n+                ),\n+            ))\n+        } else {\n+            false\n         }\n-        false\n     }\n \n     pub fn complete<'a>(self, fcx: &FnCtxt<'a, 'tcx>) -> Ty<'tcx> {"}, {"sha": "42038dbc3d82ee7ca194950d0fb6fffe6acbcbca", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 95, "deletions": 9, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -13,7 +13,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{\n     error_code, pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder,\n-    ErrorGuaranteed, MultiSpan, Style,\n+    ErrorGuaranteed, MultiSpan, Style, SuggestionStyle,\n };\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n@@ -362,6 +362,15 @@ pub trait TypeErrCtxtExt<'tcx> {\n         err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     );\n+\n+    fn suggest_option_method_if_applicable(\n+        &self,\n+        failed_pred: ty::Predicate<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        err: &mut Diagnostic,\n+        expr: &hir::Expr<'_>,\n+    );\n+\n     fn note_function_argument_obligation(\n         &self,\n         body_id: LocalDefId,\n@@ -3521,15 +3530,92 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 err.replace_span_with(path.ident.span, true);\n             }\n         }\n-        if let Some(Node::Expr(hir::Expr {\n-            kind:\n-                hir::ExprKind::Call(hir::Expr { span, .. }, _)\n-                | hir::ExprKind::MethodCall(hir::PathSegment { ident: Ident { span, .. }, .. }, ..),\n-            ..\n-        })) = hir.find(call_hir_id)\n+\n+        if let Some(Node::Expr(expr)) = hir.find(call_hir_id) {\n+            if let hir::ExprKind::Call(hir::Expr { span, .. }, _)\n+            | hir::ExprKind::MethodCall(\n+                hir::PathSegment { ident: Ident { span, .. }, .. },\n+                ..,\n+            ) = expr.kind\n+            {\n+                if Some(*span) != err.span.primary_span() {\n+                    err.span_label(*span, \"required by a bound introduced by this call\");\n+                }\n+            }\n+\n+            if let hir::ExprKind::MethodCall(_, expr, ..) = expr.kind {\n+                self.suggest_option_method_if_applicable(failed_pred, param_env, err, expr);\n+            }\n+        }\n+    }\n+\n+    fn suggest_option_method_if_applicable(\n+        &self,\n+        failed_pred: ty::Predicate<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        err: &mut Diagnostic,\n+        expr: &hir::Expr<'_>,\n+    ) {\n+        let tcx = self.tcx;\n+        let infcx = self.infcx;\n+        let Some(typeck_results) = self.typeck_results.as_ref() else { return };\n+\n+        // Make sure we're dealing with the `Option` type.\n+        let Some(option_ty_adt) = typeck_results.expr_ty_adjusted(expr).ty_adt_def() else { return };\n+        if !tcx.is_diagnostic_item(sym::Option, option_ty_adt.did()) {\n+            return;\n+        }\n+\n+        // Given the predicate `fn(&T): FnOnce<(U,)>`, extract `fn(&T)` and `(U,)`,\n+        // then suggest `Option::as_deref(_mut)` if `U` can deref to `T`\n+        if let ty::PredicateKind::Clause(ty::Clause::Trait(ty::TraitPredicate { trait_ref, .. }))\n+            = failed_pred.kind().skip_binder()\n+            && tcx.is_fn_trait(trait_ref.def_id)\n+            && let [self_ty, found_ty] = trait_ref.substs.as_slice()\n+            && let Some(fn_ty) = self_ty.as_type().filter(|ty| ty.is_fn())\n+            && let fn_sig @ ty::FnSig {\n+                abi: abi::Abi::Rust,\n+                c_variadic: false,\n+                unsafety: hir::Unsafety::Normal,\n+                ..\n+            } = fn_ty.fn_sig(tcx).skip_binder()\n+\n+            // Extract first param of fn sig with peeled refs, e.g. `fn(&T)` -> `T`\n+            && let Some(&ty::Ref(_, target_ty, needs_mut)) = fn_sig.inputs().first().map(|t| t.kind())\n+            && !target_ty.has_escaping_bound_vars()\n+\n+            // Extract first tuple element out of fn trait, e.g. `FnOnce<(U,)>` -> `U`\n+            && let Some(ty::Tuple(tys)) = found_ty.as_type().map(Ty::kind)\n+            && let &[found_ty] = tys.as_slice()\n+            && !found_ty.has_escaping_bound_vars()\n+\n+            // Extract `<U as Deref>::Target` assoc type and check that it is `T`\n+            && let Some(deref_target_did) = tcx.lang_items().deref_target()\n+            && let projection = tcx.mk_projection(deref_target_did, tcx.mk_substs(&[ty::GenericArg::from(found_ty)]))\n+            && let Ok(deref_target) = tcx.try_normalize_erasing_regions(param_env, projection)\n+            && deref_target == target_ty\n         {\n-            if Some(*span) != err.span.primary_span() {\n-                err.span_label(*span, \"required by a bound introduced by this call\");\n+            let help = if let hir::Mutability::Mut = needs_mut\n+                && let Some(deref_mut_did) = tcx.lang_items().deref_mut_trait()\n+                && infcx\n+                    .type_implements_trait(deref_mut_did, iter::once(found_ty), param_env)\n+                    .must_apply_modulo_regions()\n+            {\n+                Some((\"call `Option::as_deref_mut()` first\", \".as_deref_mut()\"))\n+            } else if let hir::Mutability::Not = needs_mut {\n+                Some((\"call `Option::as_deref()` first\", \".as_deref()\"))\n+            } else {\n+                None\n+            };\n+\n+            if let Some((msg, sugg)) = help {\n+                err.span_suggestion_with_style(\n+                    expr.span.shrink_to_hi(),\n+                    msg,\n+                    sugg,\n+                    Applicability::MaybeIncorrect,\n+                    SuggestionStyle::ShowAlways\n+                );\n             }\n         }\n     }"}, {"sha": "b93b40e300361765ec6ec1f76ce19bb887c29a5f", "filename": "library/core/src/option.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -1138,7 +1138,7 @@ impl<T> Option<T> {\n     /// Computes a default function result (if none), or\n     /// applies a different function to the contained value (if any).\n     ///\n-    /// # Examples\n+    /// # Basic examples\n     ///\n     /// ```\n     /// let k = 21;\n@@ -1149,6 +1149,25 @@ impl<T> Option<T> {\n     /// let x: Option<&str> = None;\n     /// assert_eq!(x.map_or_else(|| 2 * k, |v| v.len()), 42);\n     /// ```\n+    ///\n+    /// # Handling a Result-based fallback\n+    ///\n+    /// A somewhat common occurrence when dealing with optional values\n+    /// in combination with [`Result<T, E>`] is the case where one wants to invoke\n+    /// a fallible fallback if the option is not present.  This example\n+    /// parses a command line argument (if present), or the contents of a file to\n+    /// an integer.  However, unlike accessing the command line argument, reading\n+    /// the file is fallible, so it must be wrapped with `Ok`.\n+    ///\n+    /// ```no_run\n+    /// # fn main() -> Result<(), Box<dyn std::error::Error>> {\n+    /// let v: u64 = std::env::args()\n+    ///    .nth(1)\n+    ///    .map_or_else(|| std::fs::read_to_string(\"/etc/someconfig.conf\"), Ok)?\n+    ///    .parse()?;\n+    /// #   Ok(())\n+    /// # }\n+    /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn map_or_else<U, D, F>(self, default: D, f: F) -> U"}, {"sha": "8f8778efee79693189f601643d0dfd7400ae9181", "filename": "src/bootstrap/Cargo.lock", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/src%2Fbootstrap%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/src%2Fbootstrap%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.lock?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -58,6 +58,7 @@ dependencies = [\n  \"once_cell\",\n  \"opener\",\n  \"pretty_assertions\",\n+ \"semver\",\n  \"serde\",\n  \"serde_derive\",\n  \"serde_json\",\n@@ -645,6 +646,12 @@ version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n \n+[[package]]\n+name = \"semver\"\n+version = \"1.0.17\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bebd363326d05ec3e2f532ab7660680f3b02130d780c299bca73469d521bc0ed\"\n+\n [[package]]\n name = \"serde\"\n version = \"1.0.160\""}, {"sha": "367c6190967c670eb83725e30b76873f694fc444", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -57,6 +57,7 @@ walkdir = \"2\"\n sysinfo = { version = \"0.26.0\", optional = true }\n clap = { version = \"4.2.4\", default-features = false, features = [\"std\", \"usage\", \"help\", \"derive\", \"error-context\"] }\n clap_complete = \"4.2.2\"\n+semver = \"1.0.17\"\n \n # Solaris doesn't support flock() and thus fd-lock is not option now\n [target.'cfg(not(target_os = \"solaris\"))'.dependencies]"}, {"sha": "c1d867a0bd14b94146f987babbb2d772650e904e", "filename": "src/bootstrap/clean.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/src%2Fbootstrap%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/src%2Fbootstrap%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fclean.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -85,6 +85,10 @@ clean_crate_tree! {\n }\n \n fn clean_default(build: &Build, all: bool) {\n+    if build.config.dry_run() {\n+        return;\n+    }\n+\n     rm_rf(\"tmp\".as_ref());\n \n     if all {"}, {"sha": "8ea7e836375965e3c3777db1d9299cf81c679c0e", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -25,6 +25,7 @@ use crate::flags::{Color, Flags, Warnings};\n use crate::util::{exe, output, t};\n use build_helper::detail_exit_macro;\n use once_cell::sync::OnceCell;\n+use semver::Version;\n use serde::{Deserialize, Deserializer};\n use serde_derive::Deserialize;\n \n@@ -1114,10 +1115,14 @@ impl Config {\n             config.out = crate::util::absolute(&config.out);\n         }\n \n-        config.initial_rustc = build.rustc.map(PathBuf::from).unwrap_or_else(|| {\n+        config.initial_rustc = if let Some(rustc) = build.rustc {\n+            config.check_build_rustc_version(&rustc);\n+            PathBuf::from(rustc)\n+        } else {\n             config.download_beta_toolchain();\n             config.out.join(config.build.triple).join(\"stage0/bin/rustc\")\n-        });\n+        };\n+\n         config.initial_cargo = build\n             .cargo\n             .map(|cargo| {\n@@ -1779,6 +1784,42 @@ impl Config {\n         self.rust_codegen_backends.get(0).cloned()\n     }\n \n+    pub fn check_build_rustc_version(&self, rustc_path: &str) {\n+        if self.dry_run() {\n+            return;\n+        }\n+\n+        // check rustc version is same or lower with 1 apart from the building one\n+        let mut cmd = Command::new(rustc_path);\n+        cmd.arg(\"--version\");\n+        let rustc_output = output(&mut cmd)\n+            .lines()\n+            .next()\n+            .unwrap()\n+            .split(' ')\n+            .nth(1)\n+            .unwrap()\n+            .split('-')\n+            .next()\n+            .unwrap()\n+            .to_owned();\n+        let rustc_version = Version::parse(&rustc_output.trim()).unwrap();\n+        let source_version =\n+            Version::parse(&fs::read_to_string(self.src.join(\"src/version\")).unwrap().trim())\n+                .unwrap();\n+        if !(source_version == rustc_version\n+            || (source_version.major == rustc_version.major\n+                && source_version.minor == rustc_version.minor + 1))\n+        {\n+            let prev_version = format!(\"{}.{}.x\", source_version.major, source_version.minor - 1);\n+            eprintln!(\n+                \"Unexpected rustc version: {}, we should use {}/{} to build source with {}\",\n+                rustc_version, prev_version, source_version, source_version\n+            );\n+            detail_exit_macro!(1);\n+        }\n+    }\n+\n     /// Returns the commit to download, or `None` if we shouldn't download CI artifacts.\n     fn download_ci_rustc_commit(&self, download_rustc: Option<StringOrBool>) -> Option<String> {\n         // If `download-rustc` is not set, default to rebuilding."}, {"sha": "c604c63a4dd765fe874223f1aa004ee05577f6ca", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -31,6 +31,7 @@ static SETTINGS_HASHES: &[&str] = &[\n     \"ea67e259dedf60d4429b6c349a564ffcd1563cf41c920a856d1f5b16b4701ac8\",\n     \"56e7bf011c71c5d81e0bf42e84938111847a810eee69d906bba494ea90b51922\",\n     \"af1b5efe196aed007577899db9dae15d6dbc923d6fa42fa0934e68617ba9bbe0\",\n+    \"3468fea433c25fff60be6b71e8a215a732a7b1268b6a83bf10d024344e140541\",\n ];\n static RUST_ANALYZER_SETTINGS: &str = include_str!(\"../etc/rust_analyzer_settings.json\");\n "}, {"sha": "d9c4645f0b3b76dc2eff4ebe5a56b22dcdb9ec68", "filename": "src/etc/rust_analyzer_settings.json", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/src%2Fetc%2Frust_analyzer_settings.json", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/src%2Fetc%2Frust_analyzer_settings.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frust_analyzer_settings.json?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -7,7 +7,14 @@\n         \"check\",\n         \"--json-output\"\n     ],\n-    \"rust-analyzer.linkedProjects\": [\"src/bootstrap/Cargo.toml\", \"Cargo.toml\"],\n+    \"rust-analyzer.linkedProjects\": [\n+        \"Cargo.toml\",\n+        \"src/tools/x/Cargo.toml\",\n+        \"src/bootstrap/Cargo.toml\",\n+        \"src/tools/rust-analyzer/Cargo.toml\",\n+        \"compiler/rustc_codegen_cranelift/Cargo.toml\",\n+        \"compiler/rustc_codegen_gcc/Cargo.toml\"\n+    ],\n     \"rust-analyzer.rustfmt.overrideCommand\": [\n         \"./build/host/rustfmt/bin/rustfmt\",\n         \"--edition=2021\""}, {"sha": "09e5c7507490d650365bc8d06468e6073663edc4", "filename": "src/tools/x/Cargo.lock", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/src%2Ftools%2Fx%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/src%2Ftools%2Fx%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fx%2FCargo.lock?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -1,5 +1,7 @@\n # This file is automatically @generated by Cargo.\n # It is not intended for manual editing.\n+version = 3\n+\n [[package]]\n name = \"x\"\n-version = \"0.1.0\"\n+version = \"0.1.1\""}, {"sha": "c9f88fb3fe4525067740cec5ad29014a8ff6f5fd", "filename": "tests/codegen/box-maybe-uninit-llvm14.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fbox-maybe-uninit-llvm14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fbox-maybe-uninit-llvm14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fbox-maybe-uninit-llvm14.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -31,4 +31,4 @@ pub fn box_uninitialized2() -> Box<MaybeUninit<[usize; 1024 * 1024]>> {\n // Hide the LLVM 15+ `allocalign` attribute in the declaration of __rust_alloc\n // from the CHECK-NOT above. We don't check the attributes here because we can't rely\n // on all of them being set until LLVM 15.\n-// CHECK: declare noalias{{.*}} @__rust_alloc(i{{[0-9]+}} noundef, i{{[0-9]+.*}} noundef)\n+// CHECK: declare {{(dso_local )?}}noalias{{.*}} @__rust_alloc(i{{[0-9]+}} noundef, i{{[0-9]+.*}} noundef)"}, {"sha": "5c08b5832ad80163236cf4bc3278cf6119c8f87d", "filename": "tests/codegen/box-maybe-uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fbox-maybe-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fbox-maybe-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fbox-maybe-uninit.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -28,6 +28,6 @@ pub fn box_uninitialized2() -> Box<MaybeUninit<[usize; 1024 * 1024]>> {\n \n // Hide the `allocalign` attribute in the declaration of __rust_alloc\n // from the CHECK-NOT above, and also verify the attributes got set reasonably.\n-// CHECK: declare noalias noundef ptr @__rust_alloc(i{{[0-9]+}} noundef, i{{[0-9]+}} allocalign noundef) unnamed_addr [[RUST_ALLOC_ATTRS:#[0-9]+]]\n+// CHECK: declare {{(dso_local )?}}noalias noundef ptr @__rust_alloc(i{{[0-9]+}} noundef, i{{[0-9]+}} allocalign noundef) unnamed_addr [[RUST_ALLOC_ATTRS:#[0-9]+]]\n \n-// CHECK-DAG: attributes [[RUST_ALLOC_ATTRS]] = { {{.*}} allockind(\"alloc,uninitialized,aligned\") allocsize(0) uwtable \"alloc-family\"=\"__rust_alloc\" {{.*}} }\n+// CHECK-DAG: attributes [[RUST_ALLOC_ATTRS]] = { {{.*}} allockind(\"alloc,uninitialized,aligned\") allocsize(0) {{(uwtable )?}}\"alloc-family\"=\"__rust_alloc\" {{.*}} }"}, {"sha": "07cc0c963717e6920edc4023368f3857c543e64f", "filename": "tests/codegen/call-metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fcall-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fcall-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fcall-metadata.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -6,7 +6,7 @@\n #![crate_type = \"lib\"]\n \n pub fn test() {\n-    // CHECK: call noundef i8 @some_true(), !range [[R0:![0-9]+]]\n+    // CHECK: call noundef i8 @some_true(){{( #[0-9]+)?}}, !range [[R0:![0-9]+]]\n     // CHECK: [[R0]] = !{i8 0, i8 3}\n     some_true();\n }"}, {"sha": "f3b19a2eb2f42318f56149adf322d11d078dabd8", "filename": "tests/codegen/debug-column.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fdebug-column.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fdebug-column.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fdebug-column.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -6,11 +6,11 @@\n fn main() {\n     unsafe {\n         // Column numbers are 1-based. Regression test for #65437.\n-        // CHECK: call void @giraffe(), !dbg [[A:!.*]]\n+        // CHECK: call void @giraffe(){{( #[0-9]+)?}}, !dbg [[A:!.*]]\n         giraffe();\n \n         // Column numbers use byte offests. Regression test for #67360\n-        // CHECK: call void @turtle(), !dbg [[B:!.*]]\n+        // CHECK: call void @turtle(){{( #[0-9]+)?}}, !dbg [[B:!.*]]\n /* \u017c */ turtle();\n \n         // CHECK: [[A]] = !DILocation(line: 10, column: 9,"}, {"sha": "3615ef47b531ba9048129a4c8c8ea36c4192e45f", "filename": "tests/codegen/drop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fdrop.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -1,4 +1,5 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n+// needs-unwind - this test verifies the amount of drop calls when unwinding is used\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "48023a2a901cd3b13dfe16dee2713dd171475beb", "filename": "tests/codegen/external-no-mangle-statics.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fexternal-no-mangle-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fexternal-no-mangle-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fexternal-no-mangle-statics.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -6,72 +6,72 @@\n // `#[no_mangle]`d static variables always have external linkage, i.e., no `internal` in their\n // definitions\n \n-// CHECK: @A = local_unnamed_addr constant\n+// CHECK: @A = {{(dso_local )?}}local_unnamed_addr constant\n #[no_mangle]\n static A: u8 = 0;\n \n-// CHECK: @B = local_unnamed_addr global\n+// CHECK: @B = {{(dso_local )?}}local_unnamed_addr global\n #[no_mangle]\n static mut B: u8 = 0;\n \n-// CHECK: @C = local_unnamed_addr constant\n+// CHECK: @C = {{(dso_local )?}}local_unnamed_addr constant\n #[no_mangle]\n pub static C: u8 = 0;\n \n-// CHECK: @D = local_unnamed_addr global\n+// CHECK: @D = {{(dso_local )?}}local_unnamed_addr global\n #[no_mangle]\n pub static mut D: u8 = 0;\n \n mod private {\n-    // CHECK: @E = local_unnamed_addr constant\n+    // CHECK: @E = {{(dso_local )?}}local_unnamed_addr constant\n     #[no_mangle]\n     static E: u8 = 0;\n \n-    // CHECK: @F = local_unnamed_addr global\n+    // CHECK: @F = {{(dso_local )?}}local_unnamed_addr global\n     #[no_mangle]\n     static mut F: u8 = 0;\n \n-    // CHECK: @G = local_unnamed_addr constant\n+    // CHECK: @G = {{(dso_local )?}}local_unnamed_addr constant\n     #[no_mangle]\n     pub static G: u8 = 0;\n \n-    // CHECK: @H = local_unnamed_addr global\n+    // CHECK: @H = {{(dso_local )?}}local_unnamed_addr global\n     #[no_mangle]\n     pub static mut H: u8 = 0;\n }\n \n const HIDDEN: () = {\n-    // CHECK: @I = local_unnamed_addr constant\n+    // CHECK: @I = {{(dso_local )?}}local_unnamed_addr constant\n     #[no_mangle]\n     static I: u8 = 0;\n \n-    // CHECK: @J = local_unnamed_addr global\n+    // CHECK: @J = {{(dso_local )?}}local_unnamed_addr global\n     #[no_mangle]\n     static mut J: u8 = 0;\n \n-    // CHECK: @K = local_unnamed_addr constant\n+    // CHECK: @K = {{(dso_local )?}}local_unnamed_addr constant\n     #[no_mangle]\n     pub static K: u8 = 0;\n \n-    // CHECK: @L = local_unnamed_addr global\n+    // CHECK: @L = {{(dso_local )?}}local_unnamed_addr global\n     #[no_mangle]\n     pub static mut L: u8 = 0;\n };\n \n fn x() {\n-    // CHECK: @M = local_unnamed_addr constant\n+    // CHECK: @M = {{(dso_local )?}}local_unnamed_addr constant\n     #[no_mangle]\n     static M: fn() = x;\n \n-    // CHECK: @N = local_unnamed_addr global\n+    // CHECK: @N = {{(dso_local )?}}local_unnamed_addr global\n     #[no_mangle]\n     static mut N: u8 = 0;\n \n-    // CHECK: @O = local_unnamed_addr constant\n+    // CHECK: @O = {{(dso_local )?}}local_unnamed_addr constant\n     #[no_mangle]\n     pub static O: u8 = 0;\n \n-    // CHECK: @P = local_unnamed_addr global\n+    // CHECK: @P = {{(dso_local )?}}local_unnamed_addr global\n     #[no_mangle]\n     pub static mut P: u8 = 0;\n }"}, {"sha": "be5034dcfbd7ed7073a97aab1c43cf959a708726", "filename": "tests/codegen/issues/issue-86106.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fissues%2Fissue-86106.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fissues%2Fissue-86106.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fissues%2Fissue-86106.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -7,7 +7,7 @@\n \n #![crate_type = \"lib\"]\n \n-// CHECK-LABEL: define void @string_new\n+// CHECK-LABEL: define {{(dso_local )?}}void @string_new\n #[no_mangle]\n pub fn string_new() -> String {\n     // CHECK: store ptr inttoptr\n@@ -17,7 +17,7 @@ pub fn string_new() -> String {\n     String::new()\n }\n \n-// CHECK-LABEL: define void @empty_to_string\n+// CHECK-LABEL: define {{(dso_local )?}}void @empty_to_string\n #[no_mangle]\n pub fn empty_to_string() -> String {\n     // CHECK: store ptr inttoptr"}, {"sha": "2b26b604ad323308e6913029f3d584feac234708", "filename": "tests/codegen/link_section.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Flink_section.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Flink_section.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Flink_section.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -3,7 +3,7 @@\n \n #![crate_type = \"lib\"]\n \n-// CHECK: @VAR1 = constant <{ [4 x i8] }> <{ [4 x i8] c\"\\01\\00\\00\\00\" }>, section \".test_one\"\n+// CHECK: @VAR1 = {{(dso_local )?}}constant <{ [4 x i8] }> <{ [4 x i8] c\"\\01\\00\\00\\00\" }>, section \".test_one\"\n #[no_mangle]\n #[link_section = \".test_one\"]\n #[cfg(target_endian = \"little\")]\n@@ -19,17 +19,17 @@ pub enum E {\n     B(f32)\n }\n \n-// CHECK: @VAR2 = constant {{.*}}, section \".test_two\"\n+// CHECK: @VAR2 = {{(dso_local )?}}constant {{.*}}, section \".test_two\"\n #[no_mangle]\n #[link_section = \".test_two\"]\n pub static VAR2: E = E::A(666);\n \n-// CHECK: @VAR3 = constant {{.*}}, section \".test_three\"\n+// CHECK: @VAR3 = {{(dso_local )?}}constant {{.*}}, section \".test_three\"\n #[no_mangle]\n #[link_section = \".test_three\"]\n pub static VAR3: E = E::B(1.);\n \n-// CHECK: define void @fn1() {{.*}} section \".test_four\" {\n+// CHECK: define {{(dso_local )?}}void @fn1() {{.*}} section \".test_four\" {\n #[no_mangle]\n #[link_section = \".test_four\"]\n pub fn fn1() {}"}, {"sha": "d13527b95213052cb3f5333c3dadca9f32279a50", "filename": "tests/codegen/mir-inlined-line-numbers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fmir-inlined-line-numbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fmir-inlined-line-numbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fmir-inlined-line-numbers.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -19,7 +19,7 @@ pub fn example() {\n }\n \n // CHECK-LABEL: @example\n-// CHECK:   tail call void @bar(), !dbg [[DBG_ID:![0-9]+]]\n+// CHECK:   tail call void @bar(){{( #[0-9]+)?}}, !dbg [[DBG_ID:![0-9]+]]\n // CHECK: [[DBG_ID]] = !DILocation(line: 7,\n // CHECK-SAME:                     inlinedAt: [[INLINE_ID:![0-9]+]])\n // CHECK: [[INLINE_ID]] = !DILocation(line: 18,"}, {"sha": "5cfb500c0ef883972edee7c0f1b93b9dd60ca41b", "filename": "tests/codegen/naked-noinline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fnaked-noinline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fnaked-noinline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fnaked-noinline.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -12,7 +12,7 @@ use std::arch::asm;\n pub unsafe extern \"C\" fn f() {\n     // Check that f has naked and noinline attributes.\n     //\n-    // CHECK:       define void @f() unnamed_addr [[ATTR:#[0-9]+]]\n+    // CHECK:       define {{(dso_local )?}}void @f() unnamed_addr [[ATTR:#[0-9]+]]\n     // CHECK-NEXT:  start:\n     // CHECK-NEXT:    call void asm\n     asm!(\"\", options(noreturn));\n@@ -22,7 +22,7 @@ pub unsafe extern \"C\" fn f() {\n pub unsafe fn g() {\n     // Check that call to f is not inlined.\n     //\n-    // CHECK-LABEL: define void @g()\n+    // CHECK-LABEL: define {{(dso_local )?}}void @g()\n     // CHECK-NEXT:  start:\n     // CHECK-NEXT:    call void @f()\n     f();"}, {"sha": "9ff7a9b3e8879b2b07a7fe93e4f159b20fc812ee", "filename": "tests/codegen/personality_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fpersonality_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fpersonality_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fpersonality_lifetimes.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -1,5 +1,6 @@\n // ignore-msvc\n // ignore-wasm32-bare compiled with panic=abort by default\n+// needs-unwind\n \n // compile-flags: -O -C no-prepopulate-passes\n "}, {"sha": "73d1db6df277b5ae803a46b8c3c898d609020e0c", "filename": "tests/codegen/ptr-read-metadata.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fptr-read-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fptr-read-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fptr-read-metadata.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -9,7 +9,7 @@\n \n use std::mem::MaybeUninit;\n \n-// CHECK-LABEL: define noundef i8 @copy_byte(\n+// CHECK-LABEL: define {{(dso_local )?}}noundef i8 @copy_byte(\n #[no_mangle]\n pub unsafe fn copy_byte(p: *const u8) -> u8 {\n     // CHECK-NOT: load\n@@ -19,7 +19,7 @@ pub unsafe fn copy_byte(p: *const u8) -> u8 {\n     *p\n }\n \n-// CHECK-LABEL: define noundef i8 @read_byte(\n+// CHECK-LABEL: define {{(dso_local )?}}noundef i8 @read_byte(\n #[no_mangle]\n pub unsafe fn read_byte(p: *const u8) -> u8 {\n     // CHECK-NOT: load\n@@ -29,7 +29,7 @@ pub unsafe fn read_byte(p: *const u8) -> u8 {\n     p.read()\n }\n \n-// CHECK-LABEL: define i8 @read_byte_maybe_uninit(\n+// CHECK-LABEL: define {{(dso_local )?}}i8 @read_byte_maybe_uninit(\n #[no_mangle]\n pub unsafe fn read_byte_maybe_uninit(p: *const MaybeUninit<u8>) -> MaybeUninit<u8> {\n     // CHECK-NOT: load\n@@ -39,7 +39,7 @@ pub unsafe fn read_byte_maybe_uninit(p: *const MaybeUninit<u8>) -> MaybeUninit<u\n     p.read()\n }\n \n-// CHECK-LABEL: define noundef i8 @read_byte_assume_init(\n+// CHECK-LABEL: define {{(dso_local )?}}noundef i8 @read_byte_assume_init(\n #[no_mangle]\n pub unsafe fn read_byte_assume_init(p: &MaybeUninit<u8>) -> u8 {\n     // CHECK-NOT: load\n@@ -49,7 +49,7 @@ pub unsafe fn read_byte_assume_init(p: &MaybeUninit<u8>) -> u8 {\n     p.assume_init_read()\n }\n \n-// CHECK-LABEL: define noundef i32 @copy_char(\n+// CHECK-LABEL: define {{(dso_local )?}}noundef i32 @copy_char(\n #[no_mangle]\n pub unsafe fn copy_char(p: *const char) -> char {\n     // CHECK-NOT: load\n@@ -60,7 +60,7 @@ pub unsafe fn copy_char(p: *const char) -> char {\n     *p\n }\n \n-// CHECK-LABEL: define noundef i32 @read_char(\n+// CHECK-LABEL: define {{(dso_local )?}}noundef i32 @read_char(\n #[no_mangle]\n pub unsafe fn read_char(p: *const char) -> char {\n     // CHECK-NOT: load\n@@ -71,7 +71,7 @@ pub unsafe fn read_char(p: *const char) -> char {\n     p.read()\n }\n \n-// CHECK-LABEL: define i32 @read_char_maybe_uninit(\n+// CHECK-LABEL: define {{(dso_local )?}}i32 @read_char_maybe_uninit(\n #[no_mangle]\n pub unsafe fn read_char_maybe_uninit(p: *const MaybeUninit<char>) -> MaybeUninit<char> {\n     // CHECK-NOT: load\n@@ -82,7 +82,7 @@ pub unsafe fn read_char_maybe_uninit(p: *const MaybeUninit<char>) -> MaybeUninit\n     p.read()\n }\n \n-// CHECK-LABEL: define noundef i32 @read_char_assume_init(\n+// CHECK-LABEL: define {{(dso_local )?}}noundef i32 @read_char_assume_init(\n #[no_mangle]\n pub unsafe fn read_char_assume_init(p: &MaybeUninit<char>) -> char {\n     // CHECK-NOT: load"}, {"sha": "309fe1d5ec90250a181825323a2ed56b89e61476", "filename": "tests/codegen/tuple-layout-opt.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Ftuple-layout-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Ftuple-layout-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Ftuple-layout-opt.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -6,31 +6,31 @@\n #![crate_type=\"lib\"]\n \n type ScalarZstLast = (u128, ());\n-// CHECK: define i128 @test_ScalarZstLast(i128 %_1)\n+// CHECK: define {{(dso_local )?}}i128 @test_ScalarZstLast(i128 %_1)\n #[no_mangle]\n pub fn test_ScalarZstLast(_: ScalarZstLast) -> ScalarZstLast { loop {} }\n \n type ScalarZstFirst = ((), u128);\n-// CHECK: define i128 @test_ScalarZstFirst(i128 %_1)\n+// CHECK: define {{(dso_local )?}}i128 @test_ScalarZstFirst(i128 %_1)\n #[no_mangle]\n pub fn test_ScalarZstFirst(_: ScalarZstFirst) -> ScalarZstFirst { loop {} }\n \n type ScalarPairZstLast = (u8, u128, ());\n-// CHECK: define { i128, i8 } @test_ScalarPairZstLast(i128 %_1.0, i8 %_1.1)\n+// CHECK: define {{(dso_local )?}}{ i128, i8 } @test_ScalarPairZstLast(i128 %_1.0, i8 %_1.1)\n #[no_mangle]\n pub fn test_ScalarPairZstLast(_: ScalarPairZstLast) -> ScalarPairZstLast { loop {} }\n \n type ScalarPairZstFirst = ((), u8, u128);\n-// CHECK: define { i8, i128 } @test_ScalarPairZstFirst(i8 %_1.0, i128 %_1.1)\n+// CHECK: define {{(dso_local )?}}{ i8, i128 } @test_ScalarPairZstFirst(i8 %_1.0, i128 %_1.1)\n #[no_mangle]\n pub fn test_ScalarPairZstFirst(_: ScalarPairZstFirst) -> ScalarPairZstFirst { loop {} }\n \n type ScalarPairLotsOfZsts = ((), u8, (), u128, ());\n-// CHECK: define { i128, i8 } @test_ScalarPairLotsOfZsts(i128 %_1.0, i8 %_1.1)\n+// CHECK: define {{(dso_local )?}}{ i128, i8 } @test_ScalarPairLotsOfZsts(i128 %_1.0, i8 %_1.1)\n #[no_mangle]\n pub fn test_ScalarPairLotsOfZsts(_: ScalarPairLotsOfZsts) -> ScalarPairLotsOfZsts { loop {} }\n \n type ScalarPairLottaNesting = (((), ((), u8, (), u128, ())), ());\n-// CHECK: define { i128, i8 } @test_ScalarPairLottaNesting(i128 %_1.0, i8 %_1.1)\n+// CHECK: define {{(dso_local )?}}{ i128, i8 } @test_ScalarPairLottaNesting(i128 %_1.0, i8 %_1.1)\n #[no_mangle]\n pub fn test_ScalarPairLottaNesting(_: ScalarPairLottaNesting) -> ScalarPairLottaNesting { loop {} }"}, {"sha": "8481ca8ccfa197ed2d72a37449c2c6481f20e131", "filename": "tests/codegen/union-abi.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Funion-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Funion-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Funion-abi.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -17,60 +17,60 @@ pub struct i64x4(i64, i64, i64, i64);\n #[derive(Copy, Clone)]\n pub union UnionI64x4{ a:(), b: i64x4 }\n \n-// CHECK: define void @test_UnionI64x4({{<4 x i64>\\*|ptr}} {{.*}} %_1)\n+// CHECK: define {{(dso_local )?}}void @test_UnionI64x4({{<4 x i64>\\*|ptr}} {{.*}} %_1)\n #[no_mangle]\n pub fn test_UnionI64x4(_: UnionI64x4) { loop {} }\n \n pub union UnionI64x4_{ a: i64x4, b: (), c:i64x4, d: Unhab, e: ((),()), f: UnionI64x4 }\n \n-// CHECK: define void @test_UnionI64x4_({{<4 x i64>\\*|ptr}} {{.*}} %_1)\n+// CHECK: define {{(dso_local )?}}void @test_UnionI64x4_({{<4 x i64>\\*|ptr}} {{.*}} %_1)\n #[no_mangle]\n pub fn test_UnionI64x4_(_: UnionI64x4_) { loop {} }\n \n pub union UnionI64x4I64{ a: i64x4, b: i64 }\n \n-// CHECK: define void @test_UnionI64x4I64({{%UnionI64x4I64\\*|ptr}} {{.*}} %_1)\n+// CHECK: define {{(dso_local )?}}void @test_UnionI64x4I64({{%UnionI64x4I64\\*|ptr}} {{.*}} %_1)\n #[no_mangle]\n pub fn test_UnionI64x4I64(_: UnionI64x4I64) { loop {} }\n \n pub union UnionI64x4Tuple{ a: i64x4, b: (i64, i64, i64, i64) }\n \n-// CHECK: define void @test_UnionI64x4Tuple({{%UnionI64x4Tuple\\*|ptr}} {{.*}} %_1)\n+// CHECK: define {{(dso_local )?}}void @test_UnionI64x4Tuple({{%UnionI64x4Tuple\\*|ptr}} {{.*}} %_1)\n #[no_mangle]\n pub fn test_UnionI64x4Tuple(_: UnionI64x4Tuple) { loop {} }\n \n \n pub union UnionF32{a:f32}\n \n-// CHECK: define float @test_UnionF32(float %_1)\n+// CHECK: define {{(dso_local )?}}float @test_UnionF32(float %_1)\n #[no_mangle]\n pub fn test_UnionF32(_: UnionF32) -> UnionF32 { loop {} }\n \n pub union UnionF32F32{a:f32, b:f32}\n \n-// CHECK: define float @test_UnionF32F32(float %_1)\n+// CHECK: define {{(dso_local )?}}float @test_UnionF32F32(float %_1)\n #[no_mangle]\n pub fn test_UnionF32F32(_: UnionF32F32) -> UnionF32F32 { loop {} }\n \n pub union UnionF32U32{a:f32, b:u32}\n \n-// CHECK: define i32 @test_UnionF32U32(i32{{( %0)?}})\n+// CHECK: define {{(dso_local )?}}i32 @test_UnionF32U32(i32{{( %0)?}})\n #[no_mangle]\n pub fn test_UnionF32U32(_: UnionF32U32) -> UnionF32U32 { loop {} }\n \n pub union UnionU128{a:u128}\n-// CHECK: define i128 @test_UnionU128(i128 %_1)\n+// CHECK: define {{(dso_local )?}}i128 @test_UnionU128(i128 %_1)\n #[no_mangle]\n pub fn test_UnionU128(_: UnionU128) -> UnionU128 { loop {} }\n \n #[repr(C)]\n pub union CUnionU128{a:u128}\n-// CHECK: define void @test_CUnionU128({{%CUnionU128\\*|ptr}} {{.*}} %_1)\n+// CHECK: define {{(dso_local )?}}void @test_CUnionU128({{%CUnionU128\\*|ptr}} {{.*}} %_1)\n #[no_mangle]\n pub fn test_CUnionU128(_: CUnionU128) { loop {} }\n \n pub union UnionBool { b:bool }\n-// CHECK: define noundef zeroext i1 @test_UnionBool(i8 %b)\n+// CHECK: define {{(dso_local )?}}noundef zeroext i1 @test_UnionBool(i8 %b)\n #[no_mangle]\n pub fn test_UnionBool(b: UnionBool) -> bool { unsafe { b.b }  }\n // CHECK: %0 = trunc i8 %b to i1"}, {"sha": "fa5b6bad75cb3b0e601b00135bd63c9daea0e53c", "filename": "tests/codegen/unwind-abis/c-unwind-abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Funwind-abis%2Fc-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Funwind-abis%2Fc-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Funwind-abis%2Fc-unwind-abi.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -C opt-level=0\n+// needs-unwind\n \n // Test that `nounwind` attributes are correctly applied to exported `C` and `C-unwind` extern\n // functions. `C-unwind` functions MUST NOT have this attribute. We disable optimizations above"}, {"sha": "64746d32175beb8af2ab367f2fc45a1aad3fc85d", "filename": "tests/codegen/unwind-abis/cdecl-unwind-abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Funwind-abis%2Fcdecl-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Funwind-abis%2Fcdecl-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Funwind-abis%2Fcdecl-unwind-abi.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -C opt-level=0\n+// needs-unwind\n \n // Test that `nounwind` attributes are correctly applied to exported `cdecl` and\n // `cdecl-unwind` extern functions. `cdecl-unwind` functions MUST NOT have this attribute. We"}, {"sha": "dc3911cd4ebaccc18fe5b4ac696720228b4508aa", "filename": "tests/codegen/unwind-abis/nounwind-on-stable-panic-unwind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Funwind-abis%2Fnounwind-on-stable-panic-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Funwind-abis%2Fnounwind-on-stable-panic-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Funwind-abis%2Fnounwind-on-stable-panic-unwind.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: -C opt-level=0\n // ignore-wasm32-bare compiled with panic=abort by default\n+// needs-unwind\n \n #![crate_type = \"lib\"]\n "}, {"sha": "f274a33b099480bd291f2e9d368d71edd8697e5d", "filename": "tests/codegen/unwind-abis/system-unwind-abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Funwind-abis%2Fsystem-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Funwind-abis%2Fsystem-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Funwind-abis%2Fsystem-unwind-abi.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -C opt-level=0\n+// needs-unwind\n \n // Test that `nounwind` attributes are correctly applied to exported `system` and `system-unwind`\n // extern functions. `system-unwind` functions MUST NOT have this attribute. We disable"}, {"sha": "4e1e719d5cd1895d6a44642b18492bef2cefd692", "filename": "tests/codegen/unwind-extern-exports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Funwind-extern-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Funwind-extern-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Funwind-extern-exports.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: -C opt-level=0\n // ignore-wasm32-bare compiled with panic=abort by default\n+// needs-unwind\n \n #![crate_type = \"lib\"]\n #![feature(c_unwind)]"}, {"sha": "260dcc628cc0e3fd8b4379ef173c1c72b7bce42e", "filename": "tests/codegen/unwind-extern-imports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Funwind-extern-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Funwind-extern-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Funwind-extern-imports.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: -C no-prepopulate-passes\n // ignore-wasm32-bare compiled with panic=abort by default\n+// needs-unwind\n \n #![crate_type = \"lib\"]\n #![feature(c_unwind)]"}, {"sha": "606d68ff3ab38e56805f9feb9a7560e2f2716b11", "filename": "tests/codegen/vec-shrink-panik.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fvec-shrink-panik.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fcodegen%2Fvec-shrink-panik.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fvec-shrink-panik.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -5,6 +5,7 @@\n // [new]min-llvm-version: 17\n // compile-flags: -O\n // ignore-debug: the debug assertions get in the way\n+// needs-unwind\n #![crate_type = \"lib\"]\n #![feature(shrink_to)]\n "}, {"sha": "cc9ba5514fef129c1b75f24850d74131049d5080", "filename": "tests/ui/mismatched_types/suggest-option-asderef-unfixable.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-unfixable.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -0,0 +1,40 @@\n+fn produces_string() -> Option<String> {\n+    Some(\"my cool string\".to_owned())\n+}\n+\n+fn takes_str_but_too_many_refs(_: &&str) -> Option<()> {\n+    Some(())\n+}\n+\n+fn no_args() -> Option<()> {\n+    Some(())\n+}\n+\n+fn generic_ref<T>(_: &T) -> Option<()> {\n+    Some(())\n+}\n+\n+extern \"C\" fn takes_str_but_wrong_abi(_: &str) -> Option<()> {\n+    Some(())\n+}\n+\n+unsafe fn takes_str_but_unsafe(_: &str) -> Option<()> {\n+    Some(())\n+}\n+\n+struct TypeWithoutDeref;\n+\n+fn main() {\n+    let _ = produces_string().and_then(takes_str_but_too_many_refs);\n+    //~^ ERROR type mismatch in function arguments\n+    let _ = produces_string().and_then(takes_str_but_wrong_abi);\n+    //~^ ERROR expected a `FnOnce<(String,)>` closure, found `for<'a> extern \"C\" fn(&'a str) -> Option<()> {takes_str_but_wrong_abi}`\n+    let _ = produces_string().and_then(takes_str_but_unsafe);\n+    //~^ ERROR expected a `FnOnce<(String,)>` closure, found `for<'a> unsafe fn(&'a str) -> Option<()> {takes_str_but_unsafe}`\n+    let _ = produces_string().and_then(no_args);\n+    //~^ ERROR function is expected to take 1 argument, but it takes 0 arguments\n+    let _ = produces_string().and_then(generic_ref);\n+    //~^ ERROR type mismatch in function arguments\n+    let _ = Some(TypeWithoutDeref).and_then(takes_str_but_too_many_refs);\n+    //~^ ERROR type mismatch in function arguments\n+}"}, {"sha": "079909eb48d1d188a1d20623885076793628ddca", "filename": "tests/ui/mismatched_types/suggest-option-asderef-unfixable.stderr", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-unfixable.stderr?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -0,0 +1,96 @@\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/suggest-option-asderef-unfixable.rs:28:40\n+   |\n+LL | fn takes_str_but_too_many_refs(_: &&str) -> Option<()> {\n+   | ------------------------------------------------------ found signature defined here\n+...\n+LL |     let _ = produces_string().and_then(takes_str_but_too_many_refs);\n+   |                               -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected due to this\n+   |                               |\n+   |                               required by a bound introduced by this call\n+   |\n+   = note: expected function signature `fn(String) -> _`\n+              found function signature `for<'a, 'b> fn(&'a &'b str) -> _`\n+note: required by a bound in `Option::<T>::and_then`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+\n+error[E0277]: expected a `FnOnce<(String,)>` closure, found `for<'a> extern \"C\" fn(&'a str) -> Option<()> {takes_str_but_wrong_abi}`\n+  --> $DIR/suggest-option-asderef-unfixable.rs:30:40\n+   |\n+LL |     let _ = produces_string().and_then(takes_str_but_wrong_abi);\n+   |                               -------- ^^^^^^^^^^^^^^^^^^^^^^^ expected an `FnOnce<(String,)>` closure, found `for<'a> extern \"C\" fn(&'a str) -> Option<()> {takes_str_but_wrong_abi}`\n+   |                               |\n+   |                               required by a bound introduced by this call\n+   |\n+   = help: the trait `FnOnce<(String,)>` is not implemented for fn item `for<'a> extern \"C\" fn(&'a str) -> Option<()> {takes_str_but_wrong_abi}`\n+note: required by a bound in `Option::<T>::and_then`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+\n+error[E0277]: expected a `FnOnce<(String,)>` closure, found `for<'a> unsafe fn(&'a str) -> Option<()> {takes_str_but_unsafe}`\n+  --> $DIR/suggest-option-asderef-unfixable.rs:32:40\n+   |\n+LL |     let _ = produces_string().and_then(takes_str_but_unsafe);\n+   |                               -------- ^^^^^^^^^^^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n+   |                               |\n+   |                               required by a bound introduced by this call\n+   |\n+   = help: the trait `FnOnce<(String,)>` is not implemented for fn item `for<'a> unsafe fn(&'a str) -> Option<()> {takes_str_but_unsafe}`\n+   = note: unsafe function cannot be called generically without an unsafe block\n+note: required by a bound in `Option::<T>::and_then`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+\n+error[E0593]: function is expected to take 1 argument, but it takes 0 arguments\n+  --> $DIR/suggest-option-asderef-unfixable.rs:34:40\n+   |\n+LL | fn no_args() -> Option<()> {\n+   | -------------------------- takes 0 arguments\n+...\n+LL |     let _ = produces_string().and_then(no_args);\n+   |                               -------- ^^^^^^^ expected function that takes 1 argument\n+   |                               |\n+   |                               required by a bound introduced by this call\n+   |\n+note: required by a bound in `Option::<T>::and_then`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/suggest-option-asderef-unfixable.rs:36:40\n+   |\n+LL | fn generic_ref<T>(_: &T) -> Option<()> {\n+   | -------------------------------------- found signature defined here\n+...\n+LL |     let _ = produces_string().and_then(generic_ref);\n+   |                               -------- ^^^^^^^^^^^ expected due to this\n+   |                               |\n+   |                               required by a bound introduced by this call\n+   |\n+   = note: expected function signature `fn(String) -> _`\n+              found function signature `for<'a> fn(&'a _) -> _`\n+note: required by a bound in `Option::<T>::and_then`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+help: do not borrow the argument\n+   |\n+LL - fn generic_ref<T>(_: &T) -> Option<()> {\n+LL + fn generic_ref<T>(_: T) -> Option<()> {\n+   |\n+\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/suggest-option-asderef-unfixable.rs:38:45\n+   |\n+LL | fn takes_str_but_too_many_refs(_: &&str) -> Option<()> {\n+   | ------------------------------------------------------ found signature defined here\n+...\n+LL |     let _ = Some(TypeWithoutDeref).and_then(takes_str_but_too_many_refs);\n+   |                                    -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected due to this\n+   |                                    |\n+   |                                    required by a bound introduced by this call\n+   |\n+   = note: expected function signature `fn(TypeWithoutDeref) -> _`\n+              found function signature `for<'a, 'b> fn(&'a &'b str) -> _`\n+note: required by a bound in `Option::<T>::and_then`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0277, E0593, E0631.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "08805999341ffbbd1aa77e393458d779de4fe904", "filename": "tests/ui/mismatched_types/suggest-option-asderef.fixed", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.fixed?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -0,0 +1,30 @@\n+// run-rustfix\n+\n+fn produces_string() -> Option<String> {\n+    Some(\"my cool string\".to_owned())\n+}\n+\n+fn takes_str(_: &str) -> Option<()> {\n+    Some(())\n+}\n+\n+fn takes_str_mut(_: &mut str) -> Option<()> {\n+    Some(())\n+}\n+\n+fn generic<T>(_: T) -> Option<()> {\n+    Some(())\n+}\n+\n+fn main() {\n+    let _: Option<()> = produces_string().as_deref().and_then(takes_str);\n+    //~^ ERROR type mismatch in function arguments\n+    //~| HELP call `Option::as_deref()` first\n+    let _: Option<Option<()>> = produces_string().as_deref().map(takes_str);\n+    //~^ ERROR type mismatch in function arguments\n+    //~| HELP call `Option::as_deref()` first\n+    let _: Option<Option<()>> = produces_string().as_deref_mut().map(takes_str_mut);\n+    //~^ ERROR type mismatch in function arguments\n+    //~| HELP call `Option::as_deref_mut()` first\n+    let _ = produces_string().and_then(generic);\n+}"}, {"sha": "3cfb2ffa828c6687f4ab0cf5dd50e57299ebeeb1", "filename": "tests/ui/mismatched_types/suggest-option-asderef.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -0,0 +1,30 @@\n+// run-rustfix\n+\n+fn produces_string() -> Option<String> {\n+    Some(\"my cool string\".to_owned())\n+}\n+\n+fn takes_str(_: &str) -> Option<()> {\n+    Some(())\n+}\n+\n+fn takes_str_mut(_: &mut str) -> Option<()> {\n+    Some(())\n+}\n+\n+fn generic<T>(_: T) -> Option<()> {\n+    Some(())\n+}\n+\n+fn main() {\n+    let _: Option<()> = produces_string().and_then(takes_str);\n+    //~^ ERROR type mismatch in function arguments\n+    //~| HELP call `Option::as_deref()` first\n+    let _: Option<Option<()>> = produces_string().map(takes_str);\n+    //~^ ERROR type mismatch in function arguments\n+    //~| HELP call `Option::as_deref()` first\n+    let _: Option<Option<()>> = produces_string().map(takes_str_mut);\n+    //~^ ERROR type mismatch in function arguments\n+    //~| HELP call `Option::as_deref_mut()` first\n+    let _ = produces_string().and_then(generic);\n+}"}, {"sha": "46da19d2bf4f2da1829561e9a74124c42253f9cc", "filename": "tests/ui/mismatched_types/suggest-option-asderef.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.stderr?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -0,0 +1,63 @@\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/suggest-option-asderef.rs:20:52\n+   |\n+LL | fn takes_str(_: &str) -> Option<()> {\n+   | ----------------------------------- found signature defined here\n+...\n+LL |     let _: Option<()> = produces_string().and_then(takes_str);\n+   |                                           -------- ^^^^^^^^^ expected due to this\n+   |                                           |\n+   |                                           required by a bound introduced by this call\n+   |\n+   = note: expected function signature `fn(String) -> _`\n+              found function signature `for<'a> fn(&'a str) -> _`\n+note: required by a bound in `Option::<T>::and_then`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+help: call `Option::as_deref()` first\n+   |\n+LL |     let _: Option<()> = produces_string().as_deref().and_then(takes_str);\n+   |                                          +++++++++++\n+\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/suggest-option-asderef.rs:23:55\n+   |\n+LL | fn takes_str(_: &str) -> Option<()> {\n+   | ----------------------------------- found signature defined here\n+...\n+LL |     let _: Option<Option<()>> = produces_string().map(takes_str);\n+   |                                                   --- ^^^^^^^^^ expected due to this\n+   |                                                   |\n+   |                                                   required by a bound introduced by this call\n+   |\n+   = note: expected function signature `fn(String) -> _`\n+              found function signature `for<'a> fn(&'a str) -> _`\n+note: required by a bound in `Option::<T>::map`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+help: call `Option::as_deref()` first\n+   |\n+LL |     let _: Option<Option<()>> = produces_string().as_deref().map(takes_str);\n+   |                                                  +++++++++++\n+\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/suggest-option-asderef.rs:26:55\n+   |\n+LL | fn takes_str_mut(_: &mut str) -> Option<()> {\n+   | ------------------------------------------- found signature defined here\n+...\n+LL |     let _: Option<Option<()>> = produces_string().map(takes_str_mut);\n+   |                                                   --- ^^^^^^^^^^^^^ expected due to this\n+   |                                                   |\n+   |                                                   required by a bound introduced by this call\n+   |\n+   = note: expected function signature `fn(String) -> _`\n+              found function signature `for<'a> fn(&'a mut str) -> _`\n+note: required by a bound in `Option::<T>::map`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+help: call `Option::as_deref_mut()` first\n+   |\n+LL |     let _: Option<Option<()>> = produces_string().as_deref_mut().map(takes_str_mut);\n+   |                                                  +++++++++++++++\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0631`."}, {"sha": "328f154dcbc3e0c7f5ec3ed7f8707ee5d674c3e3", "filename": "tests/ui/typeck/return-dyn-type-mismatch-2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch-2.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -0,0 +1,11 @@\n+trait Trait<T> {}\n+\n+fn foo<T>() -> dyn Trait<T>\n+where\n+    dyn Trait<T>: Sized, // pesky sized predicate\n+{\n+    42\n+    //~^ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "9c368e83834b10c71c6c2bfb57456936c3773538", "filename": "tests/ui/typeck/return-dyn-type-mismatch-2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch-2.stderr?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/return-dyn-type-mismatch-2.rs:7:5\n+   |\n+LL | fn foo<T>() -> dyn Trait<T>\n+   |                ------------ expected `(dyn Trait<T> + 'static)` because of return type\n+...\n+LL |     42\n+   |     ^^ expected `dyn Trait`, found integer\n+   |\n+   = note: expected trait object `(dyn Trait<T> + 'static)`\n+                      found type `{integer}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "93718f70f41938a651fc7423e99130c5a70b7124", "filename": "tests/ui/typeck/return-dyn-type-mismatch.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch.rs?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -0,0 +1,21 @@\n+pub trait TestTrait {\n+    type MyType;\n+\n+    fn func() -> Option<Self>\n+    where\n+        Self: Sized;\n+}\n+\n+impl<T> dyn TestTrait<MyType = T>\n+where\n+    Self: Sized, // pesky sized predicate\n+{\n+    fn other_func() -> dyn TestTrait<MyType = T> {\n+        match Self::func() {\n+            None => None,\n+            //~^ ERROR mismatched types\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9d0a609d87f81bb437d8f7c383228f227a2135f9", "filename": "tests/ui/typeck/return-dyn-type-mismatch.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/398fa2187c88de46c13c142f600064483a563c86/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/398fa2187c88de46c13c142f600064483a563c86/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Freturn-dyn-type-mismatch.stderr?ref=398fa2187c88de46c13c142f600064483a563c86", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/return-dyn-type-mismatch.rs:15:21\n+   |\n+LL |     fn other_func() -> dyn TestTrait<MyType = T> {\n+   |                        ------------------------- expected `(dyn TestTrait<MyType = T> + 'static)` because of return type\n+LL |         match Self::func() {\n+LL |             None => None,\n+   |                     ^^^^ expected `dyn TestTrait`, found `Option<_>`\n+   |\n+   = note: expected trait object `(dyn TestTrait<MyType = T> + 'static)`\n+                      found enum `Option<_>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}