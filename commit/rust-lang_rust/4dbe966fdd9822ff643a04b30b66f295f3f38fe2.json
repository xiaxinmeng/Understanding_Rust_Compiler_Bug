{"sha": "4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "node_id": "C_kwDOAAsO6NoAKDRkYmU5NjZmZGQ5ODIyZmY2NDNhMDRiMzBiNjZmMjk1ZjNmMzhmZTI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-19T09:45:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-19T09:45:53Z"}, "message": "Rollup merge of #92042 - ChrisDenton:msvc-static-tls, r=nagisa\n\nEnable `#[thread_local]` for all windows-msvc targets\n\nAs it stands, `#[thread_local]` is enabled haphazardly for msvc. It seems all 64-bit targets have it enabled, but not 32-bit targets unless they're also UWP targets (perhaps because UWP was added more recently?). So this PR simply enables it for 32-bit targets as well. I can't think of a reason not to and I've confirmed by running tests locally which pass.\n\nSee also #91659", "tree": {"sha": "c98d4a1d7ec42c96d8295be3a5f1078685694630", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c98d4a1d7ec42c96d8295be3a5f1078685694630"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhvv9RCRBK7hj4Ov3rIwAAGFgIAGrYR+ogbN8cOYtv2n+MHbrq\nAlHsHeVznJkt04MKkzDEK2kCHv8fu/nVEi+P1uQ7IU1amyMOb8wcqgCiMKjWFSTC\nzOoJY+xCUMlQ40oBecleLTZKyNypACHQdL3CRhBnuFW7P7b8sxEi9J3qlyPAKb60\nRjYvMzGWPR79b/SLP95AqNYOO/cpP6MuCTgDJQLMj51VpPNgCuO82YwzyLvtUPIH\nTLysv+dRw8DGMd8mI8nZ6UFyS1FtruV4aigBPN0ahKJ673RCwNafwOdd7IxeY1ID\nYQAY6FyubjI9cro8U/HFNeWsj1rooGMBRSFpQUfGhtt9XCvCq+Uv2JCd2A+aILc=\n=VpFr\n-----END PGP SIGNATURE-----\n", "payload": "tree c98d4a1d7ec42c96d8295be3a5f1078685694630\nparent a2db9004cb3404aba0ef7f6816ad99925bfe45b8\nparent 391332c5d9d5a5e97a0d36e011a87ad43045cfd3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639907153 +0100\ncommitter GitHub <noreply@github.com> 1639907153 +0100\n\nRollup merge of #92042 - ChrisDenton:msvc-static-tls, r=nagisa\n\nEnable `#[thread_local]` for all windows-msvc targets\n\nAs it stands, `#[thread_local]` is enabled haphazardly for msvc. It seems all 64-bit targets have it enabled, but not 32-bit targets unless they're also UWP targets (perhaps because UWP was added more recently?). So this PR simply enables it for 32-bit targets as well. I can't think of a reason not to and I've confirmed by running tests locally which pass.\n\nSee also #91659\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "html_url": "https://github.com/rust-lang/rust/commit/4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2db9004cb3404aba0ef7f6816ad99925bfe45b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2db9004cb3404aba0ef7f6816ad99925bfe45b8", "html_url": "https://github.com/rust-lang/rust/commit/a2db9004cb3404aba0ef7f6816ad99925bfe45b8"}, {"sha": "391332c5d9d5a5e97a0d36e011a87ad43045cfd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/391332c5d9d5a5e97a0d36e011a87ad43045cfd3", "html_url": "https://github.com/rust-lang/rust/commit/391332c5d9d5a5e97a0d36e011a87ad43045cfd3"}], "stats": {"total": 48, "additions": 21, "deletions": 27}, "files": [{"sha": "de5ff231d6171659d562374cbb9285458b24f3eb", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "patch": "@@ -880,7 +880,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     ret.insert((sym::target_env, Some(Symbol::intern(env))));\n     ret.insert((sym::target_abi, Some(Symbol::intern(abi))));\n     ret.insert((sym::target_vendor, Some(Symbol::intern(vendor))));\n-    if sess.target.has_elf_tls {\n+    if sess.target.has_thread_local {\n         ret.insert((sym::target_thread_local, None));\n     }\n     for (i, align) in ["}, {"sha": "a9a0977e70285c9c5eed6174a2df26a7071277ba", "filename": "compiler/rustc_target/src/spec/aarch64_pc_windows_msvc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs?ref=4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "patch": "@@ -3,7 +3,6 @@ use crate::spec::Target;\n pub fn target() -> Target {\n     let mut base = super::windows_msvc_base::opts();\n     base.max_atomic_width = Some(64);\n-    base.has_elf_tls = true;\n     base.features = \"+neon,+fp-armv8\".to_string();\n \n     Target {"}, {"sha": "db4eb204e0b127307cfcaba2979b297e3bcba752", "filename": "compiler/rustc_target/src/spec/aarch64_uwp_windows_msvc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_uwp_windows_msvc.rs?ref=4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "patch": "@@ -3,7 +3,6 @@ use crate::spec::Target;\n pub fn target() -> Target {\n     let mut base = super::windows_uwp_msvc_base::opts();\n     base.max_atomic_width = Some(64);\n-    base.has_elf_tls = true;\n \n     Target {\n         llvm_target: \"aarch64-pc-windows-msvc\".to_string(),"}, {"sha": "e982b3565b56c521a5607f1d6ec5a8725922a892", "filename": "compiler/rustc_target/src/spec/android_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs?ref=4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "patch": "@@ -11,7 +11,7 @@ pub fn opts() -> TargetOptions {\n         .push(\"-Wl,--allow-multiple-definition\".to_string());\n     base.dwarf_version = Some(2);\n     base.position_independent_executables = true;\n-    base.has_elf_tls = false;\n+    base.has_thread_local = false;\n     // This is for backward compatibility, see https://github.com/rust-lang/rust/issues/49867\n     // for context. (At that time, there was no `-C force-unwind-tables`, so the only solution\n     // was to always emit `uwtable`)."}, {"sha": "a4488f695f2103bcbf498c33b079d476ca3d9929", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "patch": "@@ -16,7 +16,7 @@ pub fn opts(os: &str) -> TargetOptions {\n     // TLS is flagged as enabled if it looks to be supported. The architecture\n     // only matters for default deployment target which is 11.0 for ARM64 and\n     // 10.7 for everything else.\n-    let has_elf_tls = macos_deployment_target(\"x86_64\") >= (10, 7);\n+    let has_thread_local = macos_deployment_target(\"x86_64\") >= (10, 7);\n \n     TargetOptions {\n         os: os.to_string(),\n@@ -33,7 +33,7 @@ pub fn opts(os: &str) -> TargetOptions {\n         has_rpath: true,\n         dll_suffix: \".dylib\".to_string(),\n         archive_format: \"darwin\".to_string(),\n-        has_elf_tls,\n+        has_thread_local,\n         abi_return_struct_as_int: true,\n         emit_debug_gdb_scripts: false,\n         eh_frame_header: false,"}, {"sha": "874e9b56aaa1ef8841de8a792bc48d43ee72cad9", "filename": "compiler/rustc_target/src/spec/apple_sdk_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs?ref=4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "patch": "@@ -53,7 +53,7 @@ pub fn opts(os: &str, arch: Arch) -> TargetOptions {\n         dynamic_linking: false,\n         executables: true,\n         link_env_remove: link_env_remove(arch),\n-        has_elf_tls: false,\n+        has_thread_local: false,\n         ..super::apple_base::opts(os)\n     }\n }"}, {"sha": "4a7686ae1a1e477e2dd91b6d47aed1e24bc16741", "filename": "compiler/rustc_target/src/spec/fuchsia_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs?ref=4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "patch": "@@ -35,7 +35,7 @@ pub fn opts() -> TargetOptions {\n             (LinkOutputKind::StaticPicExe, &[\"Scrt1.o\"]),\n         ]),\n         position_independent_executables: true,\n-        has_elf_tls: true,\n+        has_thread_local: true,\n         ..Default::default()\n     }\n }"}, {"sha": "b0b1d80ab37fc009f8f13269532f0fbfc53f858b", "filename": "compiler/rustc_target/src/spec/hermit_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs?ref=4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "patch": "@@ -12,7 +12,7 @@ pub fn opts() -> TargetOptions {\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         executables: true,\n-        has_elf_tls: true,\n+        has_thread_local: true,\n         pre_link_args,\n         panic_strategy: PanicStrategy::Abort,\n         position_independent_executables: true,"}, {"sha": "05f204c56044612c2ee9825d86ccee642206275a", "filename": "compiler/rustc_target/src/spec/i686_uwp_windows_msvc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_msvc.rs?ref=4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "patch": "@@ -4,7 +4,6 @@ pub fn target() -> Target {\n     let mut base = super::windows_uwp_msvc_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.has_elf_tls = true;\n \n     Target {\n         llvm_target: \"i686-pc-windows-msvc\".to_string(),"}, {"sha": "aeb40f7712ee3dc4fd8569c69a9ac03740c6f61d", "filename": "compiler/rustc_target/src/spec/illumos_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs?ref=4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "patch": "@@ -45,7 +45,7 @@ pub fn opts() -> TargetOptions {\n         // (see src/libstd/sys/unix/fast_thread_local.rs) that is currently\n         // missing in illumos.  For now at least, we must fallback to using\n         // pthread_{get,set}specific.\n-        //has_elf_tls: true,\n+        //has_thread_local: true,\n \n         // FIXME: Currently, rust is invoking cc to link, which ends up\n         // causing these to get included twice.  We should eventually transition"}, {"sha": "e53d465e20dfdb88e054b65a99f258c8bb39cc9f", "filename": "compiler/rustc_target/src/spec/linux_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs?ref=4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "patch": "@@ -9,7 +9,7 @@ pub fn opts() -> TargetOptions {\n         has_rpath: true,\n         position_independent_executables: true,\n         relro_level: RelroLevel::Full,\n-        has_elf_tls: true,\n+        has_thread_local: true,\n         crt_static_respected: true,\n         ..Default::default()\n     }"}, {"sha": "43913183694e0c41d6ef80f1bf05683ab6c36ea8", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "patch": "@@ -1279,9 +1279,8 @@ pub struct TargetOptions {\n     /// `argc` and `argv` values.\n     pub main_needs_argc_argv: bool,\n \n-    /// Flag indicating whether ELF TLS (e.g., #[thread_local]) is available for\n-    /// this target.\n-    pub has_elf_tls: bool,\n+    /// Flag indicating whether #[thread_local] is available for this target.\n+    pub has_thread_local: bool,\n     // This is mainly for easy compatibility with emscripten.\n     // If we give emcc .o files that are actually .bc files it\n     // will 'just work'.\n@@ -1487,7 +1486,7 @@ impl Default for TargetOptions {\n             archive_format: \"gnu\".to_string(),\n             main_needs_argc_argv: true,\n             allow_asm: true,\n-            has_elf_tls: false,\n+            has_thread_local: false,\n             obj_is_bitcode: false,\n             forces_embed_bitcode: false,\n             bitcode_llvm_cmdline: String::new(),\n@@ -2074,7 +2073,7 @@ impl Target {\n         key!(archive_format);\n         key!(allow_asm, bool);\n         key!(main_needs_argc_argv, bool);\n-        key!(has_elf_tls, bool);\n+        key!(has_thread_local, bool);\n         key!(obj_is_bitcode, bool);\n         key!(forces_embed_bitcode, bool);\n         key!(bitcode_llvm_cmdline);\n@@ -2315,7 +2314,7 @@ impl ToJson for Target {\n         target_option_val!(archive_format);\n         target_option_val!(allow_asm);\n         target_option_val!(main_needs_argc_argv);\n-        target_option_val!(has_elf_tls);\n+        target_option_val!(has_thread_local);\n         target_option_val!(obj_is_bitcode);\n         target_option_val!(forces_embed_bitcode);\n         target_option_val!(bitcode_llvm_cmdline);"}, {"sha": "bcb536b37a17e35f5314e7575f971905f23181ab", "filename": "compiler/rustc_target/src/spec/redox_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs?ref=4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "patch": "@@ -10,7 +10,7 @@ pub fn opts() -> TargetOptions {\n         has_rpath: true,\n         position_independent_executables: true,\n         relro_level: RelroLevel::Full,\n-        has_elf_tls: true,\n+        has_thread_local: true,\n         crt_static_default: true,\n         crt_static_respected: true,\n         ..Default::default()"}, {"sha": "421cfc401127de66b94e25b417fb76662c7fe0d8", "filename": "compiler/rustc_target/src/spec/solid_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolid_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolid_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolid_base.rs?ref=4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "patch": "@@ -6,7 +6,7 @@ pub fn opts(kernel: &str) -> TargetOptions {\n         os: format!(\"solid_{}\", kernel),\n         vendor: \"kmc\".to_string(),\n         frame_pointer: FramePointer::NonLeaf,\n-        has_elf_tls: true,\n+        has_thread_local: true,\n         ..Default::default()\n     }\n }"}, {"sha": "72d39ef9a95ac1085c347c5d860dd662fde9c5ba", "filename": "compiler/rustc_target/src/spec/thumbv7a_uwp_windows_msvc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs?ref=4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "patch": "@@ -9,7 +9,6 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             features: \"+vfp3,+neon\".to_string(),\n             max_atomic_width: Some(64),\n-            has_elf_tls: true,\n             // FIXME(jordanrh): use PanicStrategy::Unwind when SEH is\n             // implemented for windows/arm in LLVM\n             panic_strategy: PanicStrategy::Abort,"}, {"sha": "3f709e7023469c6db4c3c98ba1e0839649268333", "filename": "compiler/rustc_target/src/spec/vxworks_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs?ref=4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "patch": "@@ -11,7 +11,7 @@ pub fn opts() -> TargetOptions {\n         executables: true,\n         families: vec![\"unix\".to_string()],\n         has_rpath: true,\n-        has_elf_tls: true,\n+        has_thread_local: true,\n         crt_static_default: true,\n         crt_static_respected: true,\n         crt_static_allows_dylibs: true,"}, {"sha": "71aa279144bb943433a09154351071b0e4f58c0b", "filename": "compiler/rustc_target/src/spec/wasm_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs?ref=4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "patch": "@@ -120,9 +120,9 @@ pub fn options() -> TargetOptions {\n         // When the atomics feature is activated then these two keys matter,\n         // otherwise they're basically ignored by the standard library. In this\n         // mode, however, the `#[thread_local]` attribute works (i.e.\n-        // `has_elf_tls`) and we need to get it to work by specifying\n+        // `has_thread_local`) and we need to get it to work by specifying\n         // `local-exec` as that's all that's implemented in LLVM today for wasm.\n-        has_elf_tls: true,\n+        has_thread_local: true,\n         tls_model: TlsModel::LocalExec,\n \n         // gdb scripts don't work on wasm blobs"}, {"sha": "063b6538d95eef091133ad09d27df1e178e04b60", "filename": "compiler/rustc_target/src/spec/windows_msvc_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs?ref=4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "patch": "@@ -27,6 +27,7 @@ pub fn opts() -> TargetOptions {\n         // linking some libraries which require a specific agreement, so it may\n         // not ever be possible for us to pass this flag.\n         no_default_libraries: false,\n+        has_thread_local: true,\n \n         ..base\n     }"}, {"sha": "1c4ccebb488c52a56c26d3ffd210369410b2de7e", "filename": "compiler/rustc_target/src/spec/x86_64_pc_windows_msvc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_msvc.rs?ref=4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "patch": "@@ -4,7 +4,6 @@ pub fn target() -> Target {\n     let mut base = super::windows_msvc_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.has_elf_tls = true;\n \n     Target {\n         llvm_target: \"x86_64-pc-windows-msvc\".to_string(),"}, {"sha": "109f86d3a410ab6f47d453e25384543758743ee0", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnux32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs?ref=4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "patch": "@@ -8,7 +8,7 @@ pub fn target() -> Target {\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-mx32\".to_string());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n-    base.has_elf_tls = false;\n+    base.has_thread_local = false;\n     // BUG(GabrielMajeri): disabling the PLT on x86_64 Linux with x32 ABI\n     // breaks code gen. See LLVM bug 36743\n     base.needs_plt = true;"}, {"sha": "06ccc272300d65c12c8d6a476fff78f268eed758", "filename": "compiler/rustc_target/src/spec/x86_64_uwp_windows_msvc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbe966fdd9822ff643a04b30b66f295f3f38fe2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_msvc.rs?ref=4dbe966fdd9822ff643a04b30b66f295f3f38fe2", "patch": "@@ -4,7 +4,6 @@ pub fn target() -> Target {\n     let mut base = super::windows_uwp_msvc_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.has_elf_tls = true;\n \n     Target {\n         llvm_target: \"x86_64-pc-windows-msvc\".to_string(),"}]}