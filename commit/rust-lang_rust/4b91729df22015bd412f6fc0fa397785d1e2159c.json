{"sha": "4b91729df22015bd412f6fc0fa397785d1e2159c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiOTE3MjlkZjIyMDE1YmQ0MTJmNmZjMGZhMzk3Nzg1ZDFlMjE1OWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-21T04:33:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-21T04:33:13Z"}, "message": "Rollup merge of #65097 - tmiasko:arc, r=Amanieu\n\nMake std::sync::Arc compatible with ThreadSanitizer\n\nThe memory fences used previously in Arc implementation are not properly\nunderstood by thread sanitizer as synchronization primitives. This had\nunfortunate effect where running any non-trivial program compiled with\n`-Z sanitizer=thread` would result in numerous false positives.\n\nReplace acquire fences with acquire loads to address the issue.\n\nFixes #39608.", "tree": {"sha": "36c451e885194eb5255918758e5e9bfb98101ef4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36c451e885194eb5255918758e5e9bfb98101ef4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b91729df22015bd412f6fc0fa397785d1e2159c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJedZkJCRBK7hj4Ov3rIwAAdHIIAJHjws/LvwoGMoXsZv3f9Z6s\n8diFarPWg5ocfeqsZ+HEm0P/PftiY6mk4sy8aVa8aTvPeJSbna7PWEmqAsReO7mG\n5TYL3V/YaZHYnq0zkXT1dniFxBN179eXvLJCriMxHzadZfRIWF1wJBhxgUSrqwSn\nRoBkG5+eY7MWCJBvUIYZTJLB9Xj9UZzQ4qzWXGsmu72DZuR1lCtAXvxr/i89fbYY\nRhtRPRQjVQPK86XR7VqFzbqYni9UaRRNoG1rosUBICRlcDm1SQk6OtoN5IRYT7nI\nlhj0v2Tzy1YbI4kkyc+8QM9z8OzRwpwHKTx0dmI4HO9S9h4Xk+IDb99kO38SZsU=\n=5qGc\n-----END PGP SIGNATURE-----\n", "payload": "tree 36c451e885194eb5255918758e5e9bfb98101ef4\nparent 1057dc97afce39ff6a224966ece3ed438af4c1f5\nparent fd0e15bbcda4b1674f22e8db5fd81a63d671c996\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584765193 +0100\ncommitter GitHub <noreply@github.com> 1584765193 +0100\n\nRollup merge of #65097 - tmiasko:arc, r=Amanieu\n\nMake std::sync::Arc compatible with ThreadSanitizer\n\nThe memory fences used previously in Arc implementation are not properly\nunderstood by thread sanitizer as synchronization primitives. This had\nunfortunate effect where running any non-trivial program compiled with\n`-Z sanitizer=thread` would result in numerous false positives.\n\nReplace acquire fences with acquire loads to address the issue.\n\nFixes #39608.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b91729df22015bd412f6fc0fa397785d1e2159c", "html_url": "https://github.com/rust-lang/rust/commit/4b91729df22015bd412f6fc0fa397785d1e2159c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b91729df22015bd412f6fc0fa397785d1e2159c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1057dc97afce39ff6a224966ece3ed438af4c1f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1057dc97afce39ff6a224966ece3ed438af4c1f5", "html_url": "https://github.com/rust-lang/rust/commit/1057dc97afce39ff6a224966ece3ed438af4c1f5"}, {"sha": "fd0e15bbcda4b1674f22e8db5fd81a63d671c996", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd0e15bbcda4b1674f22e8db5fd81a63d671c996", "html_url": "https://github.com/rust-lang/rust/commit/fd0e15bbcda4b1674f22e8db5fd81a63d671c996"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "d877ac6ac5c7944558007b37c3fe317af5999f2d", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b91729df22015bd412f6fc0fa397785d1e2159c/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b91729df22015bd412f6fc0fa397785d1e2159c/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=4b91729df22015bd412f6fc0fa397785d1e2159c", "patch": "@@ -80,6 +80,7 @@\n #![feature(box_into_raw_non_null)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(cfg_sanitize)]\n #![feature(cfg_target_has_atomic)]\n #![feature(coerce_unsized)]\n #![feature(const_generic_impls_guard)]"}, {"sha": "d9b54fb0b177ad05a81cc06c52fec3186fc06303", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4b91729df22015bd412f6fc0fa397785d1e2159c/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b91729df22015bd412f6fc0fa397785d1e2159c/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=4b91729df22015bd412f6fc0fa397785d1e2159c", "patch": "@@ -40,6 +40,23 @@ mod tests;\n /// necessarily) at _exactly_ `MAX_REFCOUNT + 1` references.\n const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n \n+#[cfg(not(sanitize = \"thread\"))]\n+macro_rules! acquire {\n+    ($x:expr) => {\n+        atomic::fence(Acquire)\n+    };\n+}\n+\n+// ThreadSanitizer does not support memory fences. To avoid false positive\n+// reports in Arc / Weak implementation use atomic loads for synchronization\n+// instead.\n+#[cfg(sanitize = \"thread\")]\n+macro_rules! acquire {\n+    ($x:expr) => {\n+        $x.load(Acquire)\n+    };\n+}\n+\n /// A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically\n /// Reference Counted'.\n ///\n@@ -402,7 +419,7 @@ impl<T> Arc<T> {\n             return Err(this);\n         }\n \n-        atomic::fence(Acquire);\n+        acquire!(this.inner().strong);\n \n         unsafe {\n             let elem = ptr::read(&this.ptr.as_ref().data);\n@@ -739,7 +756,7 @@ impl<T: ?Sized> Arc<T> {\n         ptr::drop_in_place(&mut self.ptr.as_mut().data);\n \n         if self.inner().weak.fetch_sub(1, Release) == 1 {\n-            atomic::fence(Acquire);\n+            acquire!(self.inner().weak);\n             Global.dealloc(self.ptr.cast(), Layout::for_value(self.ptr.as_ref()))\n         }\n     }\n@@ -1243,7 +1260,7 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Arc<T> {\n         //\n         // [1]: (www.boost.org/doc/libs/1_55_0/doc/html/atomic/usage_examples.html)\n         // [2]: (https://github.com/rust-lang/rust/pull/41714)\n-        atomic::fence(Acquire);\n+        acquire!(self.inner().strong);\n \n         unsafe {\n             self.drop_slow();\n@@ -1701,7 +1718,7 @@ impl<T: ?Sized> Drop for Weak<T> {\n         let inner = if let Some(inner) = self.inner() { inner } else { return };\n \n         if inner.weak.fetch_sub(1, Release) == 1 {\n-            atomic::fence(Acquire);\n+            acquire!(inner.weak);\n             unsafe { Global.dealloc(self.ptr.cast(), Layout::for_value(self.ptr.as_ref())) }\n         }\n     }"}]}