{"sha": "a65411e4f7b5df78e34dcaf8061d4641f4b56412", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NTQxMWU0ZjdiNWRmNzhlMzRkY2FmODA2MWQ0NjQxZjRiNTY0MTI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-04-09T01:43:33Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-10T22:21:58Z"}, "message": "std,serialize: remove some internal uses of ~[].\n\nThese are all private uses of ~[], so can easily & non-controversially\nbe replaced with Vec.", "tree": {"sha": "3215d5cac2cd39ada18f21d8746dc95765d71b02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3215d5cac2cd39ada18f21d8746dc95765d71b02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a65411e4f7b5df78e34dcaf8061d4641f4b56412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a65411e4f7b5df78e34dcaf8061d4641f4b56412", "html_url": "https://github.com/rust-lang/rust/commit/a65411e4f7b5df78e34dcaf8061d4641f4b56412", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a65411e4f7b5df78e34dcaf8061d4641f4b56412/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "342e8b59be97c28be38d54bec10e511ae17da129", "url": "https://api.github.com/repos/rust-lang/rust/commits/342e8b59be97c28be38d54bec10e511ae17da129", "html_url": "https://github.com/rust-lang/rust/commit/342e8b59be97c28be38d54bec10e511ae17da129"}], "stats": {"total": 83, "additions": 43, "deletions": 40}, "files": [{"sha": "d753922f7f42661c96d9ccffecdea67887a43294", "filename": "src/libserialize/ebml.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a65411e4f7b5df78e34dcaf8061d4641f4b56412/src%2Flibserialize%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65411e4f7b5df78e34dcaf8061d4641f4b56412/src%2Flibserialize%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Febml.rs?ref=a65411e4f7b5df78e34dcaf8061d4641f4b56412", "patch": "@@ -636,7 +636,7 @@ pub mod writer {\n     // ebml writing\n     pub struct Encoder<'a, W> {\n         pub writer: &'a mut W,\n-        size_positions: ~[uint],\n+        size_positions: Vec<uint>,\n     }\n \n     fn write_sized_vuint<W: Writer>(w: &mut W, n: uint, size: uint) -> EncodeResult {\n@@ -668,10 +668,9 @@ pub mod writer {\n     }\n \n     pub fn Encoder<'a, W: Writer + Seek>(w: &'a mut W) -> Encoder<'a, W> {\n-        let size_positions: ~[uint] = ~[];\n         Encoder {\n             writer: w,\n-            size_positions: size_positions,\n+            size_positions: vec!(),\n         }\n     }\n "}, {"sha": "e1eaa2792bf3198a812ee1ad8c2cce787fd9f136", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a65411e4f7b5df78e34dcaf8061d4641f4b56412/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65411e4f7b5df78e34dcaf8061d4641f4b56412/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=a65411e4f7b5df78e34dcaf8061d4641f4b56412", "patch": "@@ -21,7 +21,7 @@ use option::{Option, Some, None};\n use result::{Ok, Err};\n use io;\n use io::{IoError, IoResult, Reader};\n-use slice::{OwnedVector, ImmutableVector};\n+use slice::{OwnedVector, ImmutableVector, Vector};\n use ptr::RawPtr;\n \n /// An iterator that reads a single byte on each iteration,\n@@ -88,15 +88,15 @@ pub fn u64_to_le_bytes<T>(n: u64, size: uint, f: |v: &[u8]| -> T) -> T {\n       8u => f(unsafe { transmute::<i64, [u8, ..8]>(to_le64(n as i64)) }),\n       _ => {\n \n-        let mut bytes: ~[u8] = ~[];\n+        let mut bytes = vec!();\n         let mut i = size;\n         let mut n = n;\n         while i > 0u {\n             bytes.push((n & 255_u64) as u8);\n             n >>= 8_u64;\n             i -= 1u;\n         }\n-        f(bytes)\n+        f(bytes.as_slice())\n       }\n     }\n }\n@@ -127,14 +127,14 @@ pub fn u64_to_be_bytes<T>(n: u64, size: uint, f: |v: &[u8]| -> T) -> T {\n       4u => f(unsafe { transmute::<i32, [u8, ..4]>(to_be32(n as i32)) }),\n       8u => f(unsafe { transmute::<i64, [u8, ..8]>(to_be64(n as i64)) }),\n       _ => {\n-        let mut bytes: ~[u8] = ~[];\n+        let mut bytes = vec!();\n         let mut i = size;\n         while i > 0u {\n             let shift = ((i - 1u) * 8u) as u64;\n             bytes.push((n >> shift) as u8);\n             i -= 1u;\n         }\n-        f(bytes)\n+        f(bytes.as_slice())\n       }\n     }\n }"}, {"sha": "00b2e4f2307d8efbf443a6ac4e602f31364c5a43", "filename": "src/libstd/io/signal.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a65411e4f7b5df78e34dcaf8061d4641f4b56412/src%2Flibstd%2Fio%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65411e4f7b5df78e34dcaf8061d4641f4b56412/src%2Flibstd%2Fio%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fsignal.rs?ref=a65411e4f7b5df78e34dcaf8061d4641f4b56412", "patch": "@@ -29,6 +29,7 @@ use option::{Some, None};\n use result::{Ok, Err};\n use rt::rtio::{IoFactory, LocalIo, RtioSignal};\n use slice::{ImmutableVector, OwnedVector};\n+use vec::Vec;\n \n /// Signals that can be sent and received\n #[repr(int)]\n@@ -80,7 +81,7 @@ pub enum Signum {\n /// ```\n pub struct Listener {\n     /// A map from signums to handles to keep the handles in memory\n-    handles: ~[(Signum, ~RtioSignal:Send)],\n+    handles: Vec<(Signum, ~RtioSignal:Send)>,\n     /// This is where all the handles send signums, which are received by\n     /// the clients from the receiver.\n     tx: Sender<Signum>,\n@@ -99,7 +100,7 @@ impl Listener {\n         Listener {\n             tx: tx,\n             rx: rx,\n-            handles: ~[],\n+            handles: vec!(),\n         }\n     }\n "}, {"sha": "c76e079432ae1255bef886a3350d9994b6ee3e29", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a65411e4f7b5df78e34dcaf8061d4641f4b56412/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65411e4f7b5df78e34dcaf8061d4641f4b56412/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=a65411e4f7b5df78e34dcaf8061d4641f4b56412", "patch": "@@ -47,6 +47,7 @@ use mem::replace;\n use option::{None, Option, Some};\n use rt::task::{Task, LocalStorage};\n use slice::{ImmutableVector, MutableVector, OwnedVector};\n+use vec::Vec;\n \n /**\n  * Indexes a task-local data slot. This pointer is used for comparison to\n@@ -89,7 +90,7 @@ impl<T: 'static> LocalData for T {}\n // n.b. If TLS is used heavily in future, this could be made more efficient with\n //      a proper map.\n #[doc(hidden)]\n-pub type Map = ~[Option<(*u8, TLSValue, LoanState)>];\n+pub type Map = Vec<Option<(*u8, TLSValue, LoanState)>>;\n type TLSValue = ~LocalData:Send;\n \n // Gets the map from the runtime. Lazily initialises if not done so already.\n@@ -106,7 +107,7 @@ unsafe fn get_local_map() -> &mut Map {\n         // If this is the first time we've accessed TLS, perform similar\n         // actions to the oldsched way of doing things.\n         &LocalStorage(ref mut slot) => {\n-            *slot = Some(~[]);\n+            *slot = Some(vec!());\n             match *slot {\n                 Some(ref mut map_ptr) => { return map_ptr }\n                 None => abort()\n@@ -237,7 +238,7 @@ fn get_with<T:'static,\n         Some(i) => {\n             let ret;\n             let mut return_loan = false;\n-            match map[i] {\n+            match *map.get_mut(i) {\n                 Some((_, ref data, ref mut loan)) => {\n                     match (state, *loan) {\n                         (_, NoLoan) => {\n@@ -271,7 +272,7 @@ fn get_with<T:'static,\n             // in turn relocated the vector. Hence we do another lookup here to\n             // fixup the loans.\n             if return_loan {\n-                match map[i] {\n+                match *map.get_mut(i) {\n                     Some((_, _, ref mut loan)) => { *loan = NoLoan; }\n                     None => abort()\n                 }\n@@ -331,7 +332,7 @@ pub fn set<T: 'static>(key: Key<T>, data: T) {\n     // we're not actually sending it to other schedulers or anything.\n     let data: ~LocalData:Send = unsafe { cast::transmute(data) };\n     match insertion_position(map, keyval) {\n-        Some(i) => { map[i] = Some((keyval, data, NoLoan)); }\n+        Some(i) => { *map.get_mut(i) = Some((keyval, data, NoLoan)); }\n         None => { map.push(Some((keyval, data, NoLoan))); }\n     }\n }"}, {"sha": "7205edee611c1226f108806063b3f9e2bd83fc4a", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a65411e4f7b5df78e34dcaf8061d4641f4b56412/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65411e4f7b5df78e34dcaf8061d4641f4b56412/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=a65411e4f7b5df78e34dcaf8061d4641f4b56412", "patch": "@@ -31,6 +31,7 @@ use to_str::ToStr;\n use slice::{Vector, OwnedVector};\n use intrinsics::{Disr, Opaque, TyDesc, TyVisitor, get_tydesc, visit_tydesc};\n use raw;\n+use vec::Vec;\n \n macro_rules! try( ($me:expr, $e:expr) => (\n     match $e {\n@@ -102,8 +103,8 @@ enum VariantState {\n \n pub struct ReprVisitor<'a> {\n     ptr: *u8,\n-    ptr_stk: ~[*u8],\n-    var_stk: ~[VariantState],\n+    ptr_stk: Vec<*u8>,\n+    var_stk: Vec<VariantState>,\n     writer: &'a mut io::Writer,\n     last_err: Option<io::IoError>,\n }\n@@ -112,8 +113,8 @@ pub fn ReprVisitor<'a>(ptr: *u8,\n                        writer: &'a mut io::Writer) -> ReprVisitor<'a> {\n     ReprVisitor {\n         ptr: ptr,\n-        ptr_stk: ~[],\n-        var_stk: ~[],\n+        ptr_stk: vec!(),\n+        var_stk: vec!(),\n         writer: writer,\n         last_err: None,\n     }\n@@ -154,8 +155,8 @@ impl<'a> ReprVisitor<'a> {\n             // issues we have to recreate it here.\n             let u = ReprVisitor {\n                 ptr: ptr,\n-                ptr_stk: ~[],\n-                var_stk: ~[],\n+                ptr_stk: vec!(),\n+                var_stk: vec!(),\n                 writer: ::cast::transmute_copy(&self.writer),\n                 last_err: None,\n             };\n@@ -505,7 +506,7 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n                                 _offset: uint,\n                                 inner: *TyDesc)\n                                 -> bool {\n-        match self.var_stk[self.var_stk.len() - 1] {\n+        match *self.var_stk.get(self.var_stk.len() - 1) {\n             Matched => {\n                 if i != 0 {\n                     try!(self, self.writer.write(\", \".as_bytes()));\n@@ -523,7 +524,7 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n                                 _disr_val: Disr,\n                                 n_fields: uint,\n                                 _name: &str) -> bool {\n-        match self.var_stk[self.var_stk.len() - 1] {\n+        match *self.var_stk.get(self.var_stk.len() - 1) {\n             Matched => {\n                 if n_fields > 0 {\n                     try!(self, self.writer.write([')' as u8]));"}, {"sha": "67b8b40b47e6eef620ff4334a34eef33014b0eb6", "filename": "src/libstd/rt/at_exit_imp.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a65411e4f7b5df78e34dcaf8061d4641f4b56412/src%2Flibstd%2Frt%2Fat_exit_imp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65411e4f7b5df78e34dcaf8061d4641f4b56412/src%2Flibstd%2Frt%2Fat_exit_imp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fat_exit_imp.rs?ref=a65411e4f7b5df78e34dcaf8061d4641f4b56412", "patch": "@@ -20,8 +20,9 @@ use option::{Some, None};\n use ptr::RawPtr;\n use unstable::sync::Exclusive;\n use slice::OwnedVector;\n+use vec::Vec;\n \n-type Queue = Exclusive<~[proc():Send]>;\n+type Queue = Exclusive<Vec<proc():Send>>;\n \n // You'll note that these variables are *not* atomic, and this is done on\n // purpose. This module is designed to have init() called *once* in a\n@@ -35,7 +36,7 @@ pub fn init() {\n     unsafe {\n         rtassert!(!RUNNING);\n         rtassert!(QUEUE.is_null());\n-        let state: ~Queue = ~Exclusive::new(~[]);\n+        let state: ~Queue = ~Exclusive::new(vec!());\n         QUEUE = cast::transmute(state);\n     }\n }\n@@ -61,7 +62,7 @@ pub fn run() {\n         QUEUE = 0 as *mut Queue;\n         let mut vec = None;\n         state.with(|arr| {\n-            vec = Some(mem::replace(arr, ~[]));\n+            vec = Some(mem::replace(arr, vec!()));\n         });\n         vec.take_unwrap()\n     };"}, {"sha": "8beadce21604e99d3d6db9a46cef1440f5514dbf", "filename": "src/libstd/sync/deque.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a65411e4f7b5df78e34dcaf8061d4641f4b56412/src%2Flibstd%2Fsync%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65411e4f7b5df78e34dcaf8061d4641f4b56412/src%2Flibstd%2Fsync%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fdeque.rs?ref=a65411e4f7b5df78e34dcaf8061d4641f4b56412", "patch": "@@ -62,6 +62,7 @@ use sync::arc::UnsafeArc;\n use sync::atomics::{AtomicInt, AtomicPtr, SeqCst};\n use unstable::sync::Exclusive;\n use slice::{OwnedVector, ImmutableVector};\n+use vec::Vec;\n \n // Once the queue is less than 1/K full, then it will be downsized. Note that\n // the deque requires that this number be less than 2.\n@@ -116,14 +117,14 @@ pub enum Stolen<T> {\n /// will only use this structure when allocating a new buffer or deallocating a\n /// previous one.\n pub struct BufferPool<T> {\n-    pool: Exclusive<~[~Buffer<T>]>,\n+    pool: Exclusive<Vec<~Buffer<T>>>,\n }\n \n /// An internal buffer used by the chase-lev deque. This structure is actually\n /// implemented as a circular buffer, and is used as the intermediate storage of\n /// the data in the deque.\n ///\n-/// This type is implemented with *T instead of ~[T] for two reasons:\n+/// This type is implemented with *T instead of Vec<T> for two reasons:\n ///\n ///   1. There is nothing safe about using this buffer. This easily allows the\n ///      same value to be read twice in to rust, and there is nothing to\n@@ -132,7 +133,7 @@ pub struct BufferPool<T> {\n ///      destructors for values in this buffer (on drop) because the bounds\n ///      are defined by the deque it's owned by.\n ///\n-///   2. We can certainly avoid bounds checks using *T instead of ~[T], although\n+///   2. We can certainly avoid bounds checks using *T instead of Vec<T>, although\n ///      LLVM is probably pretty good at doing this already.\n struct Buffer<T> {\n     storage: *T,\n@@ -143,7 +144,7 @@ impl<T: Send> BufferPool<T> {\n     /// Allocates a new buffer pool which in turn can be used to allocate new\n     /// deques.\n     pub fn new() -> BufferPool<T> {\n-        BufferPool { pool: Exclusive::new(~[]) }\n+        BufferPool { pool: Exclusive::new(vec!()) }\n     }\n \n     /// Allocates a new work-stealing deque which will send/receiving memory to\n@@ -494,7 +495,7 @@ mod tests {\n                     }\n                 }\n             })\n-        }).collect::<~[Thread<()>]>();\n+        }).collect::<Vec<Thread<()>>>();\n \n         while remaining.load(SeqCst) > 0 {\n             match w.pop() {\n@@ -525,7 +526,7 @@ mod tests {\n             Thread::start(proc() {\n                 stampede(w, s, 4, 10000);\n             })\n-        }).collect::<~[Thread<()>]>();\n+        }).collect::<Vec<Thread<()>>>();\n \n         for thread in threads.move_iter() {\n             thread.join();\n@@ -556,7 +557,7 @@ mod tests {\n                     }\n                 }\n             })\n-        }).collect::<~[Thread<()>]>();\n+        }).collect::<Vec<Thread<()>>>();\n \n         let mut rng = rand::task_rng();\n         let mut expected = 0;\n@@ -658,4 +659,3 @@ mod tests {\n         }\n     }\n }\n-"}, {"sha": "b392cc8ff9a7099451a107226b6d4f9b5a4725fc", "filename": "src/libstd/sync/mpmc_bounded_queue.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a65411e4f7b5df78e34dcaf8061d4641f4b56412/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65411e4f7b5df78e34dcaf8061d4641f4b56412/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs?ref=a65411e4f7b5df78e34dcaf8061d4641f4b56412", "patch": "@@ -35,7 +35,7 @@ use num::next_power_of_two;\n use option::{Option, Some, None};\n use sync::arc::UnsafeArc;\n use sync::atomics::{AtomicUint,Relaxed,Release,Acquire};\n-use slice;\n+use vec::Vec;\n \n struct Node<T> {\n     sequence: AtomicUint,\n@@ -44,7 +44,7 @@ struct Node<T> {\n \n struct State<T> {\n     pad0: [u8, ..64],\n-    buffer: ~[Node<T>],\n+    buffer: Vec<Node<T>>,\n     mask: uint,\n     pad1: [u8, ..64],\n     enqueue_pos: AtomicUint,\n@@ -69,7 +69,7 @@ impl<T: Send> State<T> {\n         } else {\n             capacity\n         };\n-        let buffer = slice::from_fn(capacity, |i| {\n+        let buffer = Vec::from_fn(capacity, |i| {\n             Node { sequence:AtomicUint::new(i), value: None }\n         });\n         State{\n@@ -88,7 +88,7 @@ impl<T: Send> State<T> {\n         let mask = self.mask;\n         let mut pos = self.enqueue_pos.load(Relaxed);\n         loop {\n-            let node = &mut self.buffer[pos & mask];\n+            let node = self.buffer.get_mut(pos & mask);\n             let seq = node.sequence.load(Acquire);\n             let diff: int = seq as int - pos as int;\n \n@@ -114,7 +114,7 @@ impl<T: Send> State<T> {\n         let mask = self.mask;\n         let mut pos = self.dequeue_pos.load(Relaxed);\n         loop {\n-            let node = &mut self.buffer[pos & mask];\n+            let node = self.buffer.get_mut(pos & mask);\n             let seq = node.sequence.load(Acquire);\n             let diff: int = seq as int - (pos + 1) as int;\n             if diff == 0 {\n@@ -186,7 +186,7 @@ mod tests {\n             });\n         }\n \n-        let mut completion_rxs = ~[];\n+        let mut completion_rxs = vec![];\n         for _ in range(0, nthreads) {\n             let (tx, rx) = channel();\n             completion_rxs.push(rx);"}]}