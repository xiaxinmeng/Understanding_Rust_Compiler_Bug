{"sha": "ef658907a5e88563e4b67a07ba1639c7bf58756f", "node_id": "C_kwDOAAsO6NoAKGVmNjU4OTA3YTVlODg1NjNlNGI2N2EwN2JhMTYzOWM3YmY1ODc1NmY", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2023-03-03T07:38:07Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2023-03-03T07:39:36Z"}, "message": "Match end user facing unmatched backticks in compiler/", "tree": {"sha": "1ea20512a9252707c26649e41617253f41fb811d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ea20512a9252707c26649e41617253f41fb811d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef658907a5e88563e4b67a07ba1639c7bf58756f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef658907a5e88563e4b67a07ba1639c7bf58756f", "html_url": "https://github.com/rust-lang/rust/commit/ef658907a5e88563e4b67a07ba1639c7bf58756f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef658907a5e88563e4b67a07ba1639c7bf58756f/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13471d3b2046cce78181dde6cfc146c09f55e29e", "url": "https://api.github.com/repos/rust-lang/rust/commits/13471d3b2046cce78181dde6cfc146c09f55e29e", "html_url": "https://github.com/rust-lang/rust/commit/13471d3b2046cce78181dde6cfc146c09f55e29e"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "37bc8533dc8db2883dd199d8a97257025d7c1991", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=ef658907a5e88563e4b67a07ba1639c7bf58756f", "patch": "@@ -949,7 +949,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     .push_span_label(*span, \"this has an implicit `'static` lifetime requirement\");\n                 multi_span.push_span_label(\n                     ident.span,\n-                    \"calling this method introduces the `impl`'s 'static` requirement\",\n+                    \"calling this method introduces the `impl`'s `'static` requirement\",\n                 );\n                 err.subdiagnostic(RequireStaticErr::UsedImpl { multi_span });\n                 err.span_suggestion_verbose("}, {"sha": "a2b8647a965c8fa0993a3145b76f14e8cffa64bd", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=ef658907a5e88563e4b67a07ba1639c7bf58756f", "patch": "@@ -457,7 +457,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 assert_eq!(input_len, dest_len, \"Return vector length must match input length\");\n                 assert!(\n                     index < dest_len,\n-                    \"Index `{}` must be in bounds of vector with length {}`\",\n+                    \"Index `{}` must be in bounds of vector with length `{}`\",\n                     index,\n                     dest_len\n                 );"}, {"sha": "aa24d9053b98a78b614f753c02c03b6084924e5d", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=ef658907a5e88563e4b67a07ba1639c7bf58756f", "patch": "@@ -332,7 +332,7 @@ impl<'mir, 'tcx> Checker<'mir, 'tcx> {\n \n     fn check_static(&mut self, def_id: DefId, span: Span) {\n         if self.tcx.is_thread_local_static(def_id) {\n-            self.tcx.sess.delay_span_bug(span, \"tls access is checked in `Rvalue::ThreadLocalRef\");\n+            self.tcx.sess.delay_span_bug(span, \"tls access is checked in `Rvalue::ThreadLocalRef`\");\n         }\n         self.check_op_spanned(ops::StaticAccess, span)\n     }"}, {"sha": "724be5888ddb46da7e35744835fc60aeb15e331f", "filename": "compiler/rustc_data_structures/src/stable_hasher/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs?ref=ef658907a5e88563e4b67a07ba1639c7bf58756f", "patch": "@@ -150,7 +150,7 @@ fn test_isize_compression() {\n         let hash_b = hash(&(b as isize, a as isize));\n         assert_ne!(\n             hash_a, hash_b,\n-            \"The hash stayed the same when permuting values `{a}` and `{b}!\",\n+            \"The hash stayed the same when permuting values `{a}` and `{b}`!\",\n         );\n     }\n "}, {"sha": "47a8b4bc48885515c701122f62ee6622b0113373", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=ef658907a5e88563e4b67a07ba1639c7bf58756f", "patch": "@@ -282,7 +282,7 @@ pub(super) fn transcribe<'a>(\n             }\n \n             // There should be no meta-var declarations in the invocation of a macro.\n-            mbe::TokenTree::MetaVarDecl(..) => panic!(\"unexpected `TokenTree::MetaVarDecl\"),\n+            mbe::TokenTree::MetaVarDecl(..) => panic!(\"unexpected `TokenTree::MetaVarDecl`\"),\n         }\n     }\n }"}, {"sha": "e3db44477de4e3ab2c811135bff8e0d6777dabc5", "filename": "compiler/rustc_infer/locales/en-US.ftl", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_infer%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_infer%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Flocales%2Fen-US.ftl?ref=ef658907a5e88563e4b67a07ba1639c7bf58756f", "patch": "@@ -79,7 +79,7 @@ infer_subtype = ...so that the {$requirement ->\n     [if_else_different] `if` and `else` have incompatible types\n     [no_else] `if` missing an `else` returns `()`\n     [fn_main_correct_type] `main` function has the correct type\n-    [fn_start_correct_type] #[start]` function has the correct type\n+    [fn_start_correct_type] `#[start]` function has the correct type\n     [intristic_correct_type] intrinsic has the correct type\n     [method_correct_type] method receiver has the correct type\n     *[other] types are compatible\n@@ -92,7 +92,7 @@ infer_subtype_2 = ...so that {$requirement ->\n     [if_else_different] `if` and `else` have incompatible types\n     [no_else] `if` missing an `else` returns `()`\n     [fn_main_correct_type] `main` function has the correct type\n-    [fn_start_correct_type] #[start]` function has the correct type\n+    [fn_start_correct_type] `#[start]` function has the correct type\n     [intristic_correct_type] intrinsic has the correct type\n     [method_correct_type] method receiver has the correct type\n     *[other] types are compatible\n@@ -277,7 +277,7 @@ infer_tid_consider_borrowing = consider borrowing this type parameter in the tra\n infer_tid_param_help = the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n \n infer_dtcs_has_lifetime_req_label = this has an implicit `'static` lifetime requirement\n-infer_dtcs_introduces_requirement = calling this method introduces the `impl`'s 'static` requirement\n+infer_dtcs_introduces_requirement = calling this method introduces the `impl`'s `'static` requirement\n infer_dtcs_has_req_note = the used `impl` has a `'static` requirement\n infer_dtcs_suggestion = consider relaxing the implicit `'static` requirement\n \n@@ -313,7 +313,7 @@ infer_but_needs_to_satisfy = {$has_param_name ->\n         [false] ...and is required to live as long as `'static` here\n     }\n     .used_here = ...is used here...\n-    .introduced_by_bound = 'static` lifetime requirement introduced by this bound\n+    .introduced_by_bound = `'static` lifetime requirement introduced by this bound\n \n infer_more_targeted = {$has_param_name ->\n     [true] `{$param_name}`"}, {"sha": "bf6af57c66a40e47246fc6a34cb041a1aed76c05", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ef658907a5e88563e4b67a07ba1639c7bf58756f", "patch": "@@ -1690,7 +1690,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                                 format!(\"{name} is defined in the current crate\")\n                             } else {\n                                 let crate_name = self.tcx.crate_name(defid.krate);\n-                                format!(\"{name} is defined in crate `{crate_name}\")\n+                                format!(\"{name} is defined in crate `{crate_name}`\")\n                             };\n                             diagnostic.span_note(def_span, msg);\n                         };"}, {"sha": "37994899a2038acb3eb4aac39127f73c2c684820", "filename": "compiler/rustc_interface/locales/en-US.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_interface%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_interface%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Flocales%2Fen-US.ftl?ref=ef658907a5e88563e4b67a07ba1639c7bf58756f", "patch": "@@ -33,7 +33,7 @@ interface_rustc_error_fatal =\n     fatal error triggered by #[rustc_error]\n \n interface_rustc_error_unexpected_annotation =\n-    unexpected annotation used with `#[rustc_error(...)]!\n+    unexpected annotation used with `#[rustc_error(...)]`!\n \n interface_failed_writing_file =\n     failed to write file {$path}: {$error}\""}, {"sha": "9a517d2d2b425d65e6f5c66269780026716c668a", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=ef658907a5e88563e4b67a07ba1639c7bf58756f", "patch": "@@ -93,7 +93,7 @@ impl IntegerExt for Integer {\n             if discr < fit {\n                 bug!(\n                     \"Integer::repr_discr: `#[repr]` hint too small for \\\n-                      discriminant range of enum `{}\",\n+                      discriminant range of enum `{}`\",\n                     ty\n                 )\n             }"}, {"sha": "cfacb5ea327771b9f36df61da61f80c55107f841", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=ef658907a5e88563e4b67a07ba1639c7bf58756f", "patch": "@@ -55,7 +55,7 @@ pub fn as_constant_inner<'tcx>(\n                         ConstantKind::Ty(tcx.const_error_with_guaranteed(ty, guar))\n                     }\n                     Err(LitToConstError::TypeError) => {\n-                        bug!(\"encountered type error in `lit_to_mir_constant\")\n+                        bug!(\"encountered type error in `lit_to_mir_constant`\")\n                     }\n                 };\n "}, {"sha": "ff53f22d43f9316c829295dcf962e1fee21a875c", "filename": "compiler/rustc_session/locales/en-US.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_session%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_session%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Flocales%2Fen-US.ftl?ref=ef658907a5e88563e4b67a07ba1639c7bf58756f", "patch": "@@ -5,7 +5,7 @@ session_incorrect_cgu_reuse_type =\n     }`{$expected_reuse}`\n \n session_cgu_not_recorded =\n-    CGU-reuse for `{$cgu_user_name}` is (mangled: `{$cgu_name}`) was not recorded`\n+    CGU-reuse for `{$cgu_user_name}` is (mangled: `{$cgu_name}`) was not recorded\n \n session_feature_gate_error = {$explain}\n "}, {"sha": "52fd9fc6afbd0e2811b58325e512794c0a04559f", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef658907a5e88563e4b67a07ba1639c7bf58756f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=ef658907a5e88563e4b67a07ba1639c7bf58756f", "patch": "@@ -2245,7 +2245,7 @@ pub fn parse_externs(\n                 early_error(\n                     error_format,\n                     \"the `-Z unstable-options` flag must also be passed to \\\n-                     enable `--extern options\",\n+                     enable `--extern` options\",\n                 );\n             }\n             for opt in opts.split(',') {"}, {"sha": "da72c8ebf19b6a644012741e1f9a02e6e86f5e46", "filename": "tests/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef658907a5e88563e4b67a07ba1639c7bf58756f/tests%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef658907a5e88563e4b67a07ba1639c7bf58756f/tests%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr?ref=ef658907a5e88563e4b67a07ba1639c7bf58756f", "patch": "@@ -17,7 +17,7 @@ note: the used `impl` has a `'static` requirement\n LL |     impl<T> MyTrait<T> for dyn ObjectTrait<T> {\n    |                                ^^^^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n LL |         fn use_self<K>(&self) -> &() { panic!() }\n-   |            -------- calling this method introduces the `impl`'s 'static` requirement\n+   |            -------- calling this method introduces the `impl`'s `'static` requirement\n help: consider relaxing the implicit `'static` requirement\n    |\n LL |     impl<T> MyTrait<T> for dyn ObjectTrait<T> + '_ {\n@@ -42,7 +42,7 @@ note: the used `impl` has a `'static` requirement\n LL |     impl dyn ObjectTrait {\n    |              ^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n LL |         fn use_self(&self) -> &() { panic!() }\n-   |            -------- calling this method introduces the `impl`'s 'static` requirement\n+   |            -------- calling this method introduces the `impl`'s `'static` requirement\n help: consider relaxing the implicit `'static` requirement\n    |\n LL |     impl dyn ObjectTrait + '_ {\n@@ -65,7 +65,7 @@ note: the used `impl` has a `'static` requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:87:26\n    |\n LL |         fn use_self(&self) -> &() { panic!() }\n-   |            -------- calling this method introduces the `impl`'s 'static` requirement\n+   |            -------- calling this method introduces the `impl`'s `'static` requirement\n ...\n LL |     impl MyTrait for dyn ObjectTrait {}\n    |                          ^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n@@ -91,7 +91,7 @@ note: the used `impl` has a `'static` requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:106:26\n    |\n LL |         fn use_self(&self) -> &() { panic!() }\n-   |            -------- calling this method introduces the `impl`'s 'static` requirement\n+   |            -------- calling this method introduces the `impl`'s `'static` requirement\n ...\n LL |     impl MyTrait for dyn ObjectTrait {}\n    |                          ^^^^^^^^^^^ this has an implicit `'static` lifetime requirement"}]}