{"sha": "3174a694e08d00beff59a07d4117b9ccdb870dd9", "node_id": "C_kwDOAAsO6NoAKDMxNzRhNjk0ZTA4ZDAwYmVmZjU5YTA3ZDQxMTdiOWNjZGI4NzBkZDk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-19T13:26:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-19T13:26:27Z"}, "message": "Rollup merge of #98105 - notriddle:notriddle/tuple-links, r=jsha\n\nrustdoc: remove tuple link on round braces\n\nThis is #98069 but for tuples. The reasoning is the same:\n\n* This PR also changes it so that tuples with all-generic elements still link to the primitive.tuple.html page, just like slices. So there still plenty of on-ramps for anybody who doesn't know about it.\n* It's too hard to see when round braces are a separate link from the type inside of them.\n* It's too hard to click even if you do notice them.\n\nBefore:\n\n* impl [ToSocketAddrs](https://doc.rust-lang.org/nightly/std/net/trait.ToSocketAddrs.html) for [(](https://doc.rust-lang.org/nightly/std/primitive.tuple.html)[IpAddr](https://doc.rust-lang.org/nightly/std/net/enum.IpAddr.html), [u16](https://doc.rust-lang.org/nightly/std/primitive.u16.html)[)](https://doc.rust-lang.org/nightly/std/primitive.tuple.html)\n* impl<K, V> [FromIterator](https://notriddle.com/notriddle-rustdoc-test/std/iter/trait.FromIterator.html)<[(](https://notriddle.com/notriddle-rustdoc-test/std/primitive.tuple.html)K, V[)](https://notriddle.com/notriddle-rustdoc-test/std/primitive.tuple.html)> for [BTreeMap](https://notriddle.com/notriddle-rustdoc-test/std/collections/struct.BTreeMap.html)<K, V>\n\nAfter:\n\n* impl [ToSocketAddrs](https://doc.rust-lang.org/nightly/std/net/trait.ToSocketAddrs.html) for ([IpAddr](https://doc.rust-lang.org/nightly/std/net/enum.IpAddr.html), [u16](https://doc.rust-lang.org/nightly/std/primitive.u16.html))\n* impl<K, V> [FromIterator](https://notriddle.com/notriddle-rustdoc-test/std/iter/trait.FromIterator.html)<[(K, V)](https://notriddle.com/notriddle-rustdoc-test/std/primitive.tuple.html)> for [BTreeMap](https://notriddle.com/notriddle-rustdoc-test/std/collections/struct.BTreeMap.html)<K, V>", "tree": {"sha": "a2454508192dc21432eaf9ef004539134e7dadf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2454508192dc21432eaf9ef004539134e7dadf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3174a694e08d00beff59a07d4117b9ccdb870dd9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiryQECRBK7hj4Ov3rIwAA4TYIAG+gdOfv3SZfa5H0N0SSROFN\n89NQemnBJziQa1wXD0/VAemrtmASW/C1my/BiVjQ6AIpXbPOqr5xgBa9SOO6mwJS\n8mcueutDffMv0iXC2Q4DISyGyAizTXhQoVEc2Ap/7t69DRikXEqgvWUwXBLpCWw0\nPVkvhALnz/T+oYf3e0CnLI5yy40PMo8F/r30+GBBQy2IUFht5PzfXtdhhjTYmIEx\nLMq/H32/BeS7qlLbkIIGd0bUDX6iv+F/CPHQjxnKCAk8ik0AC4eP+ezzA1mVJ3XI\nLpYXv1To9DIHAosWTa/JX5ERe75RrxvhEVPmApEjlDXAicEiPsnN6BP1lZmW1jE=\n=jAqP\n-----END PGP SIGNATURE-----\n", "payload": "tree a2454508192dc21432eaf9ef004539134e7dadf2\nparent 15fc228d0d0a68b5ba565758fab13ed7f863fcea\nparent 29a9f36685c8da552d0d8772778ff4ec70af0032\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1655645187 +0200\ncommitter GitHub <noreply@github.com> 1655645187 +0200\n\nRollup merge of #98105 - notriddle:notriddle/tuple-links, r=jsha\n\nrustdoc: remove tuple link on round braces\n\nThis is #98069 but for tuples. The reasoning is the same:\n\n* This PR also changes it so that tuples with all-generic elements still link to the primitive.tuple.html page, just like slices. So there still plenty of on-ramps for anybody who doesn't know about it.\n* It's too hard to see when round braces are a separate link from the type inside of them.\n* It's too hard to click even if you do notice them.\n\nBefore:\n\n* impl [ToSocketAddrs](https://doc.rust-lang.org/nightly/std/net/trait.ToSocketAddrs.html) for [(](https://doc.rust-lang.org/nightly/std/primitive.tuple.html)[IpAddr](https://doc.rust-lang.org/nightly/std/net/enum.IpAddr.html), [u16](https://doc.rust-lang.org/nightly/std/primitive.u16.html)[)](https://doc.rust-lang.org/nightly/std/primitive.tuple.html)\n* impl<K, V> [FromIterator](https://notriddle.com/notriddle-rustdoc-test/std/iter/trait.FromIterator.html)<[(](https://notriddle.com/notriddle-rustdoc-test/std/primitive.tuple.html)K, V[)](https://notriddle.com/notriddle-rustdoc-test/std/primitive.tuple.html)> for [BTreeMap](https://notriddle.com/notriddle-rustdoc-test/std/collections/struct.BTreeMap.html)<K, V>\n\nAfter:\n\n* impl [ToSocketAddrs](https://doc.rust-lang.org/nightly/std/net/trait.ToSocketAddrs.html) for ([IpAddr](https://doc.rust-lang.org/nightly/std/net/enum.IpAddr.html), [u16](https://doc.rust-lang.org/nightly/std/primitive.u16.html))\n* impl<K, V> [FromIterator](https://notriddle.com/notriddle-rustdoc-test/std/iter/trait.FromIterator.html)<[(K, V)](https://notriddle.com/notriddle-rustdoc-test/std/primitive.tuple.html)> for [BTreeMap](https://notriddle.com/notriddle-rustdoc-test/std/collections/struct.BTreeMap.html)<K, V>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3174a694e08d00beff59a07d4117b9ccdb870dd9", "html_url": "https://github.com/rust-lang/rust/commit/3174a694e08d00beff59a07d4117b9ccdb870dd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3174a694e08d00beff59a07d4117b9ccdb870dd9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15fc228d0d0a68b5ba565758fab13ed7f863fcea", "url": "https://api.github.com/repos/rust-lang/rust/commits/15fc228d0d0a68b5ba565758fab13ed7f863fcea", "html_url": "https://github.com/rust-lang/rust/commit/15fc228d0d0a68b5ba565758fab13ed7f863fcea"}, {"sha": "29a9f36685c8da552d0d8772778ff4ec70af0032", "url": "https://api.github.com/repos/rust-lang/rust/commits/29a9f36685c8da552d0d8772778ff4ec70af0032", "html_url": "https://github.com/rust-lang/rust/commit/29a9f36685c8da552d0d8772778ff4ec70af0032"}], "stats": {"total": 66, "additions": 53, "deletions": 13}, "files": [{"sha": "70b6af717cd384c81526a267ee437e75d134ac51", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3174a694e08d00beff59a07d4117b9ccdb870dd9/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/3174a694e08d00beff59a07d4117b9ccdb870dd9/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=3174a694e08d00beff59a07d4117b9ccdb870dd9", "patch": "@@ -417,7 +417,7 @@ def check_snapshot(snapshot_name, actual_tree, normalize_to_text):\n     snapshot_path = '{}.{}.{}'.format(rust_test_path[:-3], snapshot_name, 'html')\n     try:\n         with open(snapshot_path, 'r') as snapshot_file:\n-            expected_str = snapshot_file.read()\n+            expected_str = snapshot_file.read().replace(\"{{channel}}\", channel)\n     except FileNotFoundError:\n         if bless:\n             expected_str = None\n@@ -429,8 +429,6 @@ def check_snapshot(snapshot_name, actual_tree, normalize_to_text):\n     else:\n         actual_str = flatten(actual_tree)\n \n-    expected_str = expected_str.replace(\"{{channel}}\", channel)\n-\n     # Conditions:\n     #  1. Is --bless\n     #  2. Are actual and expected tree different"}, {"sha": "5baa53d55545f5ce6c760b667c58869cdc8b72b2", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3174a694e08d00beff59a07d4117b9ccdb870dd9/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3174a694e08d00beff59a07d4117b9ccdb870dd9/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=3174a694e08d00beff59a07d4117b9ccdb870dd9", "patch": "@@ -23,6 +23,8 @@ use rustc_span::symbol::kw;\n use rustc_span::{sym, Symbol};\n use rustc_target::spec::abi::Abi;\n \n+use itertools::Itertools;\n+\n use crate::clean::{\n     self, types::ExternalLocation, utils::find_nearest_parent_module, ExternalCrate, ItemId,\n     PrimitiveType,\n@@ -874,20 +876,42 @@ fn fmt_type<'cx>(\n             match &typs[..] {\n                 &[] => primitive_link(f, PrimitiveType::Unit, \"()\", cx),\n                 &[ref one] => {\n-                    primitive_link(f, PrimitiveType::Tuple, \"(\", cx)?;\n-                    // Carry `f.alternate()` into this display w/o branching manually.\n-                    fmt::Display::fmt(&one.print(cx), f)?;\n-                    primitive_link(f, PrimitiveType::Tuple, \",)\", cx)\n+                    if let clean::Generic(name) = one {\n+                        primitive_link(f, PrimitiveType::Tuple, &format!(\"({name},)\"), cx)\n+                    } else {\n+                        write!(f, \"(\")?;\n+                        // Carry `f.alternate()` into this display w/o branching manually.\n+                        fmt::Display::fmt(&one.print(cx), f)?;\n+                        write!(f, \",)\")\n+                    }\n                 }\n                 many => {\n-                    primitive_link(f, PrimitiveType::Tuple, \"(\", cx)?;\n-                    for (i, item) in many.iter().enumerate() {\n-                        if i != 0 {\n-                            write!(f, \", \")?;\n+                    let generic_names: Vec<Symbol> = many\n+                        .iter()\n+                        .filter_map(|t| match t {\n+                            clean::Generic(name) => Some(*name),\n+                            _ => None,\n+                        })\n+                        .collect();\n+                    let is_generic = generic_names.len() == many.len();\n+                    if is_generic {\n+                        primitive_link(\n+                            f,\n+                            PrimitiveType::Tuple,\n+                            &format!(\"({})\", generic_names.iter().map(|s| s.as_str()).join(\", \")),\n+                            cx,\n+                        )\n+                    } else {\n+                        write!(f, \"(\")?;\n+                        for (i, item) in many.iter().enumerate() {\n+                            if i != 0 {\n+                                write!(f, \", \")?;\n+                            }\n+                            // Carry `f.alternate()` into this display w/o branching manually.\n+                            fmt::Display::fmt(&item.print(cx), f)?;\n                         }\n-                        fmt::Display::fmt(&item.print(cx), f)?;\n+                        write!(f, \")\")\n                     }\n-                    primitive_link(f, PrimitiveType::Tuple, \")\", cx)\n                 }\n             }\n         }"}, {"sha": "4efde28ed52e78d6bd043d6c986c7f6d7b6f8793", "filename": "src/test/rustdoc/tuples.link1_i32.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3174a694e08d00beff59a07d4117b9ccdb870dd9/src%2Ftest%2Frustdoc%2Ftuples.link1_i32.html", "raw_url": "https://github.com/rust-lang/rust/raw/3174a694e08d00beff59a07d4117b9ccdb870dd9/src%2Ftest%2Frustdoc%2Ftuples.link1_i32.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftuples.link1_i32.html?ref=3174a694e08d00beff59a07d4117b9ccdb870dd9", "patch": "@@ -0,0 +1 @@\n+<code>pub fn tuple1(x: (<a class=\"primitive\" href=\"{{channel}}/std/primitive.i32.html\">i32</a>,)) -&gt; (<a class=\"primitive\" href=\"{{channel}}/std/primitive.i32.html\">i32</a>,)</code>\n\\ No newline at end of file"}, {"sha": "1cbaec05733b54e6b84f1b7d4a14368b36277a20", "filename": "src/test/rustdoc/tuples.link1_t.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3174a694e08d00beff59a07d4117b9ccdb870dd9/src%2Ftest%2Frustdoc%2Ftuples.link1_t.html", "raw_url": "https://github.com/rust-lang/rust/raw/3174a694e08d00beff59a07d4117b9ccdb870dd9/src%2Ftest%2Frustdoc%2Ftuples.link1_t.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftuples.link1_t.html?ref=3174a694e08d00beff59a07d4117b9ccdb870dd9", "patch": "@@ -0,0 +1 @@\n+<code>pub fn tuple1_t&lt;T&gt;(x: <a class=\"primitive\" href=\"{{channel}}/std/primitive.tuple.html\">(T,)</a>) -&gt; <a class=\"primitive\" href=\"{{channel}}/std/primitive.tuple.html\">(T,)</a></code>\n\\ No newline at end of file"}, {"sha": "77c8d81b842df0740e4eb303417e8312903f4075", "filename": "src/test/rustdoc/tuples.link2_i32.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3174a694e08d00beff59a07d4117b9ccdb870dd9/src%2Ftest%2Frustdoc%2Ftuples.link2_i32.html", "raw_url": "https://github.com/rust-lang/rust/raw/3174a694e08d00beff59a07d4117b9ccdb870dd9/src%2Ftest%2Frustdoc%2Ftuples.link2_i32.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftuples.link2_i32.html?ref=3174a694e08d00beff59a07d4117b9ccdb870dd9", "patch": "@@ -0,0 +1 @@\n+<code>pub fn tuple2(x: (<a class=\"primitive\" href=\"{{channel}}/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"{{channel}}/std/primitive.i32.html\">i32</a>)) -&gt; (<a class=\"primitive\" href=\"{{channel}}/std/primitive.i32.html\">i32</a>, <a class=\"primitive\" href=\"{{channel}}/std/primitive.i32.html\">i32</a>)</code>\n\\ No newline at end of file"}, {"sha": "2477aa6be9d39a50a28f0c8d6777f59411710840", "filename": "src/test/rustdoc/tuples.link2_t.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3174a694e08d00beff59a07d4117b9ccdb870dd9/src%2Ftest%2Frustdoc%2Ftuples.link2_t.html", "raw_url": "https://github.com/rust-lang/rust/raw/3174a694e08d00beff59a07d4117b9ccdb870dd9/src%2Ftest%2Frustdoc%2Ftuples.link2_t.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftuples.link2_t.html?ref=3174a694e08d00beff59a07d4117b9ccdb870dd9", "patch": "@@ -0,0 +1 @@\n+<code>pub fn tuple2_t&lt;T&gt;(x: <a class=\"primitive\" href=\"{{channel}}/std/primitive.tuple.html\">(T, T)</a>) -&gt; <a class=\"primitive\" href=\"{{channel}}/std/primitive.tuple.html\">(T, T)</a></code>\n\\ No newline at end of file"}, {"sha": "b02f8dd8d6530c39d321788e0a1282a8a7c8727c", "filename": "src/test/rustdoc/tuples.link2_tu.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3174a694e08d00beff59a07d4117b9ccdb870dd9/src%2Ftest%2Frustdoc%2Ftuples.link2_tu.html", "raw_url": "https://github.com/rust-lang/rust/raw/3174a694e08d00beff59a07d4117b9ccdb870dd9/src%2Ftest%2Frustdoc%2Ftuples.link2_tu.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftuples.link2_tu.html?ref=3174a694e08d00beff59a07d4117b9ccdb870dd9", "patch": "@@ -0,0 +1 @@\n+<code>pub fn tuple2_tu&lt;T, U&gt;(x: <a class=\"primitive\" href=\"{{channel}}/std/primitive.tuple.html\">(T, U)</a>) -&gt; <a class=\"primitive\" href=\"{{channel}}/std/primitive.tuple.html\">(T, U)</a></code>\n\\ No newline at end of file"}, {"sha": "839990e1587c6b22ea2756c61eea84a1945a1699", "filename": "src/test/rustdoc/tuples.link_unit.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3174a694e08d00beff59a07d4117b9ccdb870dd9/src%2Ftest%2Frustdoc%2Ftuples.link_unit.html", "raw_url": "https://github.com/rust-lang/rust/raw/3174a694e08d00beff59a07d4117b9ccdb870dd9/src%2Ftest%2Frustdoc%2Ftuples.link_unit.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftuples.link_unit.html?ref=3174a694e08d00beff59a07d4117b9ccdb870dd9", "patch": "@@ -0,0 +1 @@\n+<code>pub fn tuple0(x: <a class=\"primitive\" href=\"{{channel}}/std/primitive.unit.html\">()</a>)</code>\n\\ No newline at end of file"}, {"sha": "62e2f9e7ef24474008caf643c7d04a49eba424c6", "filename": "src/test/rustdoc/tuples.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3174a694e08d00beff59a07d4117b9ccdb870dd9/src%2Ftest%2Frustdoc%2Ftuples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3174a694e08d00beff59a07d4117b9ccdb870dd9/src%2Ftest%2Frustdoc%2Ftuples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftuples.rs?ref=3174a694e08d00beff59a07d4117b9ccdb870dd9", "patch": "@@ -1,8 +1,20 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.tuple0.html //pre 'pub fn tuple0(x: ())'\n+// @snapshot link_unit - '//pre[@class=\"rust fn\"]/code'\n pub fn tuple0(x: ()) -> () { x }\n // @has foo/fn.tuple1.html //pre 'pub fn tuple1(x: (i32,)) -> (i32,)'\n+// @snapshot link1_i32 - '//pre[@class=\"rust fn\"]/code'\n pub fn tuple1(x: (i32,)) -> (i32,) { x }\n // @has foo/fn.tuple2.html //pre 'pub fn tuple2(x: (i32, i32)) -> (i32, i32)'\n+// @snapshot link2_i32 - '//pre[@class=\"rust fn\"]/code'\n pub fn tuple2(x: (i32, i32)) -> (i32, i32) { x }\n+// @has foo/fn.tuple1_t.html //pre 'pub fn tuple1_t<T>(x: (T,)) -> (T,)'\n+// @snapshot link1_t - '//pre[@class=\"rust fn\"]/code'\n+pub fn tuple1_t<T>(x: (T,)) -> (T,) { x }\n+// @has foo/fn.tuple2_t.html //pre 'pub fn tuple2_t<T>(x: (T, T)) -> (T, T)'\n+// @snapshot link2_t - '//pre[@class=\"rust fn\"]/code'\n+pub fn tuple2_t<T>(x: (T, T)) -> (T, T) { x }\n+// @has foo/fn.tuple2_tu.html //pre 'pub fn tuple2_tu<T, U>(x: (T, U)) -> (T, U)'\n+// @snapshot link2_tu - '//pre[@class=\"rust fn\"]/code'\n+pub fn tuple2_tu<T, U>(x: (T, U)) -> (T, U) { x }"}]}