{"sha": "57a45e9cbd951efd8224c3535431890b7bef9e6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YTQ1ZTljYmQ5NTFlZmQ4MjI0YzM1MzU0MzE4OTBiN2JlZjllNmE=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-09-14T20:14:03Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-09-15T08:15:37Z"}, "message": "Avoid some unnecessary `&str` to `Ident` conversions", "tree": {"sha": "489303927d14bc0050b01c11786a09e74835578f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/489303927d14bc0050b01c11786a09e74835578f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57a45e9cbd951efd8224c3535431890b7bef9e6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57a45e9cbd951efd8224c3535431890b7bef9e6a", "html_url": "https://github.com/rust-lang/rust/commit/57a45e9cbd951efd8224c3535431890b7bef9e6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57a45e9cbd951efd8224c3535431890b7bef9e6a/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8d2f629245f956ec63da04ca672f4cab3a928ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8d2f629245f956ec63da04ca672f4cab3a928ef", "html_url": "https://github.com/rust-lang/rust/commit/e8d2f629245f956ec63da04ca672f4cab3a928ef"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "a1e3bbcbf8ea94d8205ca043e9fe7a0f780a9525", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57a45e9cbd951efd8224c3535431890b7bef9e6a/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a45e9cbd951efd8224c3535431890b7bef9e6a/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=57a45e9cbd951efd8224c3535431890b7bef9e6a", "patch": "@@ -444,7 +444,8 @@ impl cstore::CStore {\n             .insert(local_span, (name.to_string(), data.get_span(id.index, sess)));\n \n         LoadedMacro::MacroDef(ast::Item {\n-            ident: ast::Ident::from_str(&name.as_str()),\n+            // FIXME: cross-crate hygiene\n+            ident: ast::Ident::with_dummy_span(name.as_symbol()),\n             id: ast::DUMMY_NODE_ID,\n             span: local_span,\n             attrs: attrs.iter().cloned().collect(),"}, {"sha": "eea66f9147d9347caeb5207d748f613821612937", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57a45e9cbd951efd8224c3535431890b7bef9e6a/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a45e9cbd951efd8224c3535431890b7bef9e6a/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=57a45e9cbd951efd8224c3535431890b7bef9e6a", "patch": "@@ -363,7 +363,7 @@ impl<'a> ExtCtxt<'a> {\n         self.expr(sp, ast::ExprKind::Field(expr, ident.with_span_pos(sp)))\n     }\n     pub fn expr_tup_field_access(&self, sp: Span, expr: P<ast::Expr>, idx: usize) -> P<ast::Expr> {\n-        let ident = Ident::from_str(&idx.to_string()).with_span_pos(sp);\n+        let ident = Ident::new(sym::integer(idx), sp);\n         self.expr(sp, ast::ExprKind::Field(expr, ident))\n     }\n     pub fn expr_addr_of(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr> {"}, {"sha": "da16ee7a544349b940e5ba6ff4e4a520e3655b16", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57a45e9cbd951efd8224c3535431890b7bef9e6a/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a45e9cbd951efd8224c3535431890b7bef9e6a/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=57a45e9cbd951efd8224c3535431890b7bef9e6a", "patch": "@@ -237,7 +237,7 @@ pub struct MethodDef<'a> {\n     /// Whether there is a self argument (outer Option) i.e., whether\n     /// this is a static function, and whether it is a pointer (inner\n     /// Option)\n-    pub explicit_self: Option<Option<PtrTy<'a>>>,\n+    pub explicit_self: Option<Option<PtrTy>>,\n \n     /// Arguments other than the self argument\n     pub args: Vec<(Ty<'a>, &'a str)>,"}, {"sha": "d47ef2c5d595904cb157f416aa6177017e8419e4", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/57a45e9cbd951efd8224c3535431890b7bef9e6a/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a45e9cbd951efd8224c3535431890b7bef9e6a/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=57a45e9cbd951efd8224c3535431890b7bef9e6a", "patch": "@@ -13,9 +13,9 @@ use syntax_pos::symbol::kw;\n \n /// The types of pointers\n #[derive(Clone)]\n-pub enum PtrTy<'a> {\n+pub enum PtrTy {\n     /// &'lifetime mut\n-    Borrowed(Option<&'a str>, ast::Mutability),\n+    Borrowed(Option<Ident>, ast::Mutability),\n     /// *mut\n     #[allow(dead_code)]\n     Raw(ast::Mutability),\n@@ -26,7 +26,7 @@ pub enum PtrTy<'a> {\n #[derive(Clone)]\n pub struct Path<'a> {\n     path: Vec<&'a str>,\n-    lifetime: Option<&'a str>,\n+    lifetime: Option<Ident>,\n     params: Vec<Box<Ty<'a>>>,\n     kind: PathKind,\n }\n@@ -46,7 +46,7 @@ impl<'a> Path<'a> {\n         Path::new_(vec![path], None, Vec::new(), PathKind::Local)\n     }\n     pub fn new_<'r>(path: Vec<&'r str>,\n-                    lifetime: Option<&'r str>,\n+                    lifetime: Option<Ident>,\n                     params: Vec<Box<Ty<'r>>>,\n                     kind: PathKind)\n                     -> Path<'r> {\n@@ -99,22 +99,22 @@ impl<'a> Path<'a> {\n pub enum Ty<'a> {\n     Self_,\n     /// &/Box/ Ty\n-    Ptr(Box<Ty<'a>>, PtrTy<'a>),\n+    Ptr(Box<Ty<'a>>, PtrTy),\n     /// mod::mod::Type<[lifetime], [Params...]>, including a plain type\n     /// parameter, and things like `i32`\n     Literal(Path<'a>),\n     /// includes unit\n     Tuple(Vec<Ty<'a>>),\n }\n \n-pub fn borrowed_ptrty<'r>() -> PtrTy<'r> {\n+pub fn borrowed_ptrty() -> PtrTy {\n     Borrowed(None, ast::Mutability::Immutable)\n }\n pub fn borrowed(ty: Box<Ty<'_>>) -> Ty<'_> {\n     Ptr(ty, borrowed_ptrty())\n }\n \n-pub fn borrowed_explicit_self<'r>() -> Option<Option<PtrTy<'r>>> {\n+pub fn borrowed_explicit_self() -> Option<Option<PtrTy>> {\n     Some(Some(borrowed_ptrty()))\n }\n \n@@ -126,13 +126,11 @@ pub fn nil_ty<'r>() -> Ty<'r> {\n     Tuple(Vec::new())\n }\n \n-fn mk_lifetime(cx: &ExtCtxt<'_>, span: Span, lt: &Option<&str>) -> Option<ast::Lifetime> {\n-    lt.map(|s|\n-        cx.lifetime(span, Ident::from_str(s))\n-    )\n+fn mk_lifetime(cx: &ExtCtxt<'_>, span: Span, lt: &Option<Ident>) -> Option<ast::Lifetime> {\n+    lt.map(|ident| cx.lifetime(span, ident))\n }\n \n-fn mk_lifetimes(cx: &ExtCtxt<'_>, span: Span, lt: &Option<&str>) -> Vec<ast::Lifetime> {\n+fn mk_lifetimes(cx: &ExtCtxt<'_>, span: Span, lt: &Option<Ident>) -> Vec<ast::Lifetime> {\n     mk_lifetime(cx, span, lt).into_iter().collect()\n }\n \n@@ -265,7 +263,7 @@ impl<'a> LifetimeBounds<'a> {\n \n pub fn get_explicit_self(cx: &ExtCtxt<'_>,\n                          span: Span,\n-                         self_ptr: &Option<PtrTy<'_>>)\n+                         self_ptr: &Option<PtrTy>)\n                          -> (P<Expr>, ast::ExplicitSelf) {\n     // this constructs a fresh `self` path\n     let self_path = cx.expr_self(span);\n@@ -276,7 +274,7 @@ pub fn get_explicit_self(cx: &ExtCtxt<'_>,\n                 respan(span,\n                        match *ptr {\n                            Borrowed(ref lt, mutbl) => {\n-                               let lt = lt.map(|s| cx.lifetime(span, Ident::from_str(s)));\n+                               let lt = lt.map(|s| cx.lifetime(span, s));\n                                SelfKind::Region(lt, mutbl)\n                            }\n                            Raw(_) => {"}, {"sha": "257c967d0d02f746c88fb12993bf9f3bbecf9c92", "filename": "src/libsyntax_ext/test_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57a45e9cbd951efd8224c3535431890b7bef9e6a/src%2Flibsyntax_ext%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a45e9cbd951efd8224c3535431890b7bef9e6a/src%2Flibsyntax_ext%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_harness.rs?ref=57a45e9cbd951efd8224c3535431890b7bef9e6a", "patch": "@@ -288,7 +288,7 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n     // Honor the reexport_test_harness_main attribute\n     let main_id = match cx.reexport_test_harness_main {\n         Some(sym) => Ident::new(sym, sp.with_ctxt(SyntaxContext::root())),\n-        None => Ident::from_str_and_span(\"main\", sp),\n+        None => Ident::new(sym::main, sp),\n     };\n \n     let main = P(ast::Item {"}]}