{"sha": "076e0ce259104bcbf9b018add4ac1b720f747e98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NmUwY2UyNTkxMDRiY2JmOWIwMThhZGQ0YWMxYjcyMGY3NDdlOTg=", "commit": {"author": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-09-16T23:54:30Z"}, "committer": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-09-16T23:54:30Z"}, "message": "Use shorthand syntax in the self parameter of methods of Pin", "tree": {"sha": "0df8fd1f95a62d7b372dabe805c2919e264bf840", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0df8fd1f95a62d7b372dabe805c2919e264bf840"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/076e0ce259104bcbf9b018add4ac1b720f747e98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/076e0ce259104bcbf9b018add4ac1b720f747e98", "html_url": "https://github.com/rust-lang/rust/commit/076e0ce259104bcbf9b018add4ac1b720f747e98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/076e0ce259104bcbf9b018add4ac1b720f747e98/comments", "author": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a44881d892fb4f4a8ed93f8f392bab942fac7a41", "url": "https://api.github.com/repos/rust-lang/rust/commits/a44881d892fb4f4a8ed93f8f392bab942fac7a41", "html_url": "https://github.com/rust-lang/rust/commit/a44881d892fb4f4a8ed93f8f392bab942fac7a41"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "8ce32fd111e9dbcaa62af914d894d166b7aa25da", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/076e0ce259104bcbf9b018add4ac1b720f747e98/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076e0ce259104bcbf9b018add4ac1b720f747e98/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=076e0ce259104bcbf9b018add4ac1b720f747e98", "patch": "@@ -549,7 +549,7 @@ impl<P: Deref> Pin<P> {\n     /// ruled out by the contract of `Pin::new_unchecked`.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn as_ref(self: &Pin<P>) -> Pin<&P::Target> {\n+    pub fn as_ref(&self) -> Pin<&P::Target> {\n         unsafe { Pin::new_unchecked(&*self.pointer) }\n     }\n \n@@ -586,7 +586,7 @@ impl<P: DerefMut> Pin<P> {\n     /// ruled out by the contract of `Pin::new_unchecked`.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn as_mut(self: &mut Pin<P>) -> Pin<&mut P::Target> {\n+    pub fn as_mut(&mut self) -> Pin<&mut P::Target> {\n         unsafe { Pin::new_unchecked(&mut *self.pointer) }\n     }\n \n@@ -596,7 +596,7 @@ impl<P: DerefMut> Pin<P> {\n     /// run before being overwritten, so no pinning guarantee is violated.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn set(self: &mut Pin<P>, value: P::Target)\n+    pub fn set(&mut self, value: P::Target)\n     where\n         P::Target: Sized,\n     {\n@@ -621,7 +621,7 @@ impl<'a, T: ?Sized> Pin<&'a T> {\n     ///\n     /// [`pin` module]: ../../std/pin/index.html#projections-and-structural-pinning\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n-    pub unsafe fn map_unchecked<U, F>(self: Pin<&'a T>, func: F) -> Pin<&'a U> where\n+    pub unsafe fn map_unchecked<U, F>(self, func: F) -> Pin<&'a U> where\n         F: FnOnce(&T) -> &U,\n     {\n         let pointer = &*self.pointer;\n@@ -648,7 +648,7 @@ impl<'a, T: ?Sized> Pin<&'a T> {\n     /// [\"pinning projections\"]: ../../std/pin/index.html#projections-and-structural-pinning\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn get_ref(self: Pin<&'a T>) -> &'a T {\n+    pub fn get_ref(self) -> &'a T {\n         self.pointer\n     }\n }\n@@ -657,7 +657,7 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// Converts this `Pin<&mut T>` into a `Pin<&T>` with the same lifetime.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn into_ref(self: Pin<&'a mut T>) -> Pin<&'a T> {\n+    pub fn into_ref(self) -> Pin<&'a T> {\n         Pin { pointer: self.pointer }\n     }\n \n@@ -672,7 +672,7 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// with the same lifetime as the original `Pin`.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn get_mut(self: Pin<&'a mut T>) -> &'a mut T\n+    pub fn get_mut(self) -> &'a mut T\n         where T: Unpin,\n     {\n         self.pointer\n@@ -690,7 +690,7 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// instead.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub unsafe fn get_unchecked_mut(self: Pin<&'a mut T>) -> &'a mut T {\n+    pub unsafe fn get_unchecked_mut(self) -> &'a mut T {\n         self.pointer\n     }\n \n@@ -710,7 +710,7 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     ///\n     /// [`pin` module]: ../../std/pin/index.html#projections-and-structural-pinning\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n-    pub unsafe fn map_unchecked_mut<U, F>(self: Pin<&'a mut T>, func: F) -> Pin<&'a mut U> where\n+    pub unsafe fn map_unchecked_mut<U, F>(self, func: F) -> Pin<&'a mut U> where\n         F: FnOnce(&mut T) -> &mut U,\n     {\n         let pointer = Pin::get_unchecked_mut(self);"}]}