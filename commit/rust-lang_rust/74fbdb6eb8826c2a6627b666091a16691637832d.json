{"sha": "74fbdb6eb8826c2a6627b666091a16691637832d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZmJkYjZlYjg4MjZjMmE2NjI3YjY2NjA5MWExNjY5MTYzNzgzMmQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-28T20:41:52Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-28T20:41:52Z"}, "message": "move 'get me the access-checked version of an mplace' into separate function", "tree": {"sha": "39e6a65dc9648c738f826e2f2fffdc7059fe61a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39e6a65dc9648c738f826e2f2fffdc7059fe61a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74fbdb6eb8826c2a6627b666091a16691637832d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74fbdb6eb8826c2a6627b666091a16691637832d", "html_url": "https://github.com/rust-lang/rust/commit/74fbdb6eb8826c2a6627b666091a16691637832d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74fbdb6eb8826c2a6627b666091a16691637832d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "388d99d3a555e8c47c9465b896966298d11dc43f", "url": "https://api.github.com/repos/rust-lang/rust/commits/388d99d3a555e8c47c9465b896966298d11dc43f", "html_url": "https://github.com/rust-lang/rust/commit/388d99d3a555e8c47c9465b896966298d11dc43f"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "d35f9127da40c94915dbeff7fd5816921ad922d9", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/74fbdb6eb8826c2a6627b666091a16691637832d/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74fbdb6eb8826c2a6627b666091a16691637832d/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=74fbdb6eb8826c2a6627b666091a16691637832d", "patch": "@@ -308,16 +308,8 @@ where\n     ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n         let val = self.read_immediate(src)?;\n         trace!(\"deref to {} on {:?}\", val.layout.ty, *val);\n-        let mut place = self.ref_to_mplace(val)?;\n-        let (size, align) = self.size_and_align_of_mplace(place)?\n-            .unwrap_or((place.layout.size, place.layout.align.abi));\n-        assert!(place.mplace.align <= align, \"dynamic alignment less strict than static one?\");\n-        place.mplace.align = align; // maximally strict checking\n-        // When dereferencing a pointer, it must be non-NULL, aligned, and live.\n-        if let Some(ptr) = self.check_mplace_access(place, Some(size))? {\n-            place.mplace.ptr = ptr.into();\n-        }\n-        Ok(place)\n+        let place = self.ref_to_mplace(val)?;\n+        self.mplace_access_checked(place)\n     }\n \n     /// Check if the given place is good for memory access with the given\n@@ -340,6 +332,23 @@ where\n         self.memory.check_ptr_access(place.ptr, size, place.align)\n     }\n \n+    /// Return the \"access-checked\" version of this `MPlace`, where for non-ZST\n+    /// this is definitely a `Pointer`.\n+    pub fn mplace_access_checked(\n+        &self,\n+        mut place: MPlaceTy<'tcx, M::PointerTag>,\n+    ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n+        let (size, align) = self.size_and_align_of_mplace(place)?\n+            .unwrap_or((place.layout.size, place.layout.align.abi));\n+        assert!(place.mplace.align <= align, \"dynamic alignment less strict than static one?\");\n+        place.mplace.align = align; // maximally strict checking\n+        // When dereferencing a pointer, it must be non-NULL, aligned, and live.\n+        if let Some(ptr) = self.check_mplace_access(place, Some(size))? {\n+            place.mplace.ptr = ptr.into();\n+        }\n+        Ok(place)\n+    }\n+\n     /// Force `place.ptr` to a `Pointer`.\n     /// Can be helpful to avoid lots of `force_ptr` calls later, if this place is used a lot.\n     pub fn force_mplace_ptr("}]}