{"sha": "5ddc15e42e3c1eba07bf1197f0f5bdf04ca94c73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZGMxNWU0MmUzYzFlYmEwN2JmMTE5N2YwZjViZGYwNGNhOTRjNzM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-10-21T00:06:52Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-24T23:06:17Z"}, "message": "migrate debugging funcs", "tree": {"sha": "543c1543373627cefb64d7b77da526d0f3b5ace7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/543c1543373627cefb64d7b77da526d0f3b5ace7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ddc15e42e3c1eba07bf1197f0f5bdf04ca94c73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ddc15e42e3c1eba07bf1197f0f5bdf04ca94c73", "html_url": "https://github.com/rust-lang/rust/commit/5ddc15e42e3c1eba07bf1197f0f5bdf04ca94c73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ddc15e42e3c1eba07bf1197f0f5bdf04ca94c73/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c04f42e2c78b3c0f30be281a8bbfe1a1c0123e58", "url": "https://api.github.com/repos/rust-lang/rust/commits/c04f42e2c78b3c0f30be281a8bbfe1a1c0123e58", "html_url": "https://github.com/rust-lang/rust/commit/c04f42e2c78b3c0f30be281a8bbfe1a1c0123e58"}], "stats": {"total": 70, "additions": 36, "deletions": 34}, "files": [{"sha": "a943c7a92315055c39bad901b656cfa5acf3eb8b", "filename": "src/lib/dbg.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5ddc15e42e3c1eba07bf1197f0f5bdf04ca94c73/src%2Flib%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ddc15e42e3c1eba07bf1197f0f5bdf04ca94c73/src%2Flib%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fdbg.rs?ref=5ddc15e42e3c1eba07bf1197f0f5bdf04ca94c73", "patch": "@@ -8,23 +8,31 @@\n  * logging.\n  */\n \n-native \"rust\" mod rustrt {\n-    fn debug_tydesc<T>();\n-    fn debug_opaque<T>(x: T);\n-    fn debug_box<T>(x: @T);\n-    fn debug_tag<T>(x: T);\n-    fn debug_obj<T>(x: T, nmethods: uint, nbytes: uint);\n-    fn debug_fn<T>(x: T);\n-    fn debug_ptrcast<T, U>(x: @T) -> @U;\n+native \"c-stack-cdecl\" mod rustrt {\n+    fn debug_tydesc(td: *sys::type_desc);\n+    fn debug_opaque<T>(td: *sys::type_desc, x: T);\n+    fn debug_box<T>(td: *sys::type_desc, x: @T);\n+    fn debug_tag<T>(td: *sys::type_desc, x: T);\n+    fn debug_obj<T>(td: *sys::type_desc, x: T, nmethods: uint, nbytes: uint);\n+    fn debug_fn<T>(td: *sys::type_desc, x: T);\n+    fn debug_ptrcast<T, U>(td: *sys::type_desc, x: @T) -> @U;\n }\n \n-fn debug_tydesc<T>() { rustrt::debug_tydesc::<T>(); }\n+fn debug_tydesc<T>() {\n+    rustrt::debug_tydesc(sys::get_type_desc::<T>());\n+}\n \n-fn debug_opaque<T>(x: T) { rustrt::debug_opaque::<T>(x); }\n+fn debug_opaque<T>(x: T) {\n+    rustrt::debug_opaque::<T>(sys::get_type_desc::<T>(), x);\n+}\n \n-fn debug_box<T>(x: @T) { rustrt::debug_box::<T>(x); }\n+fn debug_box<T>(x: @T) {\n+    rustrt::debug_box::<T>(sys::get_type_desc::<T>(), x);\n+}\n \n-fn debug_tag<T>(x: T) { rustrt::debug_tag::<T>(x); }\n+fn debug_tag<T>(x: T) {\n+    rustrt::debug_tag::<T>(sys::get_type_desc::<T>(), x);\n+}\n \n \n /**\n@@ -37,13 +45,15 @@ fn debug_tag<T>(x: T) { rustrt::debug_tag::<T>(x); }\n  * the front of any obj's data tuple.x\n  */\n fn debug_obj<T>(x: T, nmethods: uint, nbytes: uint) {\n-    rustrt::debug_obj::<T>(x, nmethods, nbytes);\n+    rustrt::debug_obj::<T>(sys::get_type_desc::<T>(), x, nmethods, nbytes);\n }\n \n-fn debug_fn<T>(x: T) { rustrt::debug_fn::<T>(x); }\n+fn debug_fn<T>(x: T) {\n+    rustrt::debug_fn::<T>(sys::get_type_desc::<T>(), x);\n+}\n \n unsafe fn ptr_cast<T, U>(x: @T) -> @U {\n-    ret rustrt::debug_ptrcast::<T, U>(x);\n+    ret rustrt::debug_ptrcast::<T, U>(sys::get_type_desc::<T>(), x);\n }\n \n fn refcount<T>(a: @T) -> uint unsafe {"}, {"sha": "bfd2b046ca6154c0707ce6192cb1294e02905c65", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5ddc15e42e3c1eba07bf1197f0f5bdf04ca94c73/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5ddc15e42e3c1eba07bf1197f0f5bdf04ca94c73/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=5ddc15e42e3c1eba07bf1197f0f5bdf04ca94c73", "patch": "@@ -160,22 +160,12 @@ rand_new() {\n }\n \n extern \"C\" CDECL size_t\n-<<<<<<< HEAD\n rand_next(randctx *rctx) {\n-=======\n-rand_next(randctx *rctx)\n-{\n->>>>>>> move rand functions into c-stack-cdecl mode\n     return isaac_rand(rctx);\n }\n \n extern \"C\" CDECL void\n-<<<<<<< HEAD\n rand_free(randctx *rctx) {\n-=======\n-rand_free(randctx *rctx)\n-{\n->>>>>>> move rand functions into c-stack-cdecl mode\n     rust_task *task = rust_scheduler::get_task();\n     task->free(rctx);\n }\n@@ -221,7 +211,9 @@ task_join(rust_task_id tid) {\n /* Debug builtins for std::dbg. */\n \n static void\n-debug_tydesc_helper(rust_task* task, type_desc *t) {\n+debug_tydesc_helper(type_desc *t)\n+{\n+    rust_task *task = rust_scheduler::get_task();\n     LOG(task, stdlib, \"  size %\" PRIdPTR \", align %\" PRIdPTR\n         \", first_param 0x%\" PRIxPTR,\n         t->size, t->align, t->first_param);\n@@ -231,14 +223,14 @@ extern \"C\" CDECL void\n debug_tydesc(type_desc *t) {\n     rust_task *task = rust_scheduler::get_task();\n     LOG(task, stdlib, \"debug_tydesc\");\n-    debug_tydesc_helper(task, t);\n+    debug_tydesc_helper(t);\n }\n \n extern \"C\" CDECL void\n debug_opaque(type_desc *t, uint8_t *front) {\n     rust_task *task = rust_scheduler::get_task();\n     LOG(task, stdlib, \"debug_opaque\");\n-    debug_tydesc_helper(task, t);\n+    debug_tydesc_helper(t);\n     // FIXME may want to actually account for alignment.  `front` may not\n     // indeed be the front byte of the passed-in argument.\n     for (uintptr_t i = 0; i < t->size; ++front, ++i) {\n@@ -257,7 +249,7 @@ extern \"C\" CDECL void\n debug_box(type_desc *t, rust_box *box) {\n     rust_task *task = rust_scheduler::get_task();\n     LOG(task, stdlib, \"debug_box(0x%\" PRIxPTR \")\", box);\n-    debug_tydesc_helper(task, t);\n+    debug_tydesc_helper(t);\n     LOG(task, stdlib, \"  refcount %\" PRIdPTR,\n         box->ref_count - 1);  // -1 because we ref'ed for this call\n     for (uintptr_t i = 0; i < t->size; ++i) {\n@@ -275,7 +267,7 @@ debug_tag(type_desc *t, rust_tag *tag) {\n     rust_task *task = rust_scheduler::get_task();\n \n     LOG(task, stdlib, \"debug_tag\");\n-    debug_tydesc_helper(task, t);\n+    debug_tydesc_helper(t);\n     LOG(task, stdlib, \"  discriminant %\" PRIdPTR, tag->discriminant);\n \n     for (uintptr_t i = 0; i < t->size - sizeof(tag->discriminant); ++i)\n@@ -293,7 +285,7 @@ debug_obj(type_desc *t, rust_obj *obj, size_t nmethods, size_t nbytes) {\n     rust_task *task = rust_scheduler::get_task();\n \n     LOG(task, stdlib, \"debug_obj with %\" PRIdPTR \" methods\", nmethods);\n-    debug_tydesc_helper(task, t);\n+    debug_tydesc_helper(t);\n     LOG(task, stdlib, \"  vtbl at 0x%\" PRIxPTR, obj->vtbl);\n     LOG(task, stdlib, \"  body at 0x%\" PRIxPTR, obj->body);\n \n@@ -314,7 +306,7 @@ extern \"C\" CDECL void\n debug_fn(type_desc *t, rust_fn *fn) {\n     rust_task *task = rust_scheduler::get_task();\n     LOG(task, stdlib, \"debug_fn\");\n-    debug_tydesc_helper(task, t);\n+    debug_tydesc_helper(t);\n     LOG(task, stdlib, \"  thunk at 0x%\" PRIxPTR, fn->thunk);\n     LOG(task, stdlib, \"  closure at 0x%\" PRIxPTR, fn->closure);\n     if (fn->closure) {\n@@ -328,9 +320,9 @@ debug_ptrcast(type_desc *from_ty,\n               void *ptr) {\n     rust_task *task = rust_scheduler::get_task();\n     LOG(task, stdlib, \"debug_ptrcast from\");\n-    debug_tydesc_helper(task, from_ty);\n+    debug_tydesc_helper(from_ty);\n     LOG(task, stdlib, \"to\");\n-    debug_tydesc_helper(task, to_ty);\n+    debug_tydesc_helper(to_ty);\n     return ptr;\n }\n "}]}