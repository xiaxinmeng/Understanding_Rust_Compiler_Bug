{"sha": "56bf2c63167bf462e7a514a4f222305e04a72a0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2YmYyYzYzMTY3YmY0NjJlN2E1MTRhNGYyMjIzMDVlMDRhNzJhMGE=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-15T09:46:28Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-20T10:00:43Z"}, "message": "hir: change HirIdValidator.hir_ids_seen to a set", "tree": {"sha": "6045faf448dab02702541e4b18e92c8264c34ec1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6045faf448dab02702541e4b18e92c8264c34ec1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56bf2c63167bf462e7a514a4f222305e04a72a0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56bf2c63167bf462e7a514a4f222305e04a72a0a", "html_url": "https://github.com/rust-lang/rust/commit/56bf2c63167bf462e7a514a4f222305e04a72a0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56bf2c63167bf462e7a514a4f222305e04a72a0a/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a4e5f3897562c4c622981b61779d3f78e786e5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a4e5f3897562c4c622981b61779d3f78e786e5d", "html_url": "https://github.com/rust-lang/rust/commit/4a4e5f3897562c4c622981b61779d3f78e786e5d"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "dc146a8bc09b8e4e906b098ee58fec8296c4caac", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/56bf2c63167bf462e7a514a4f222305e04a72a0a/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56bf2c63167bf462e7a514a4f222305e04a72a0a/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=56bf2c63167bf462e7a514a4f222305e04a72a0a", "patch": "@@ -2,7 +2,7 @@ use crate::hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n use crate::hir::{self, intravisit, HirId, ItemLocalId};\n use syntax::ast::NodeId;\n use crate::hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{Lock, ParallelIterator, par_iter};\n \n pub fn check_crate<'hir>(hir_map: &hir::map::Map<'hir>) {\n@@ -30,7 +30,7 @@ pub fn check_crate<'hir>(hir_map: &hir::map::Map<'hir>) {\n struct HirIdValidator<'a, 'hir: 'a> {\n     hir_map: &'a hir::map::Map<'hir>,\n     owner_def_index: Option<DefIndex>,\n-    hir_ids_seen: FxHashMap<ItemLocalId, NodeId>,\n+    hir_ids_seen: FxHashSet<ItemLocalId>,\n     errors: &'a Lock<Vec<String>>,\n }\n \n@@ -90,16 +90,19 @@ impl<'a, 'hir: 'a> HirIdValidator<'a, 'hir> {\n \n         // There's always at least one entry for the owning item itself\n         let max = self.hir_ids_seen\n-                      .keys()\n+                      .iter()\n                       .map(|local_id| local_id.as_usize())\n                       .max()\n                       .expect(\"owning item has no entry\");\n \n         if max != self.hir_ids_seen.len() - 1 {\n             // Collect the missing ItemLocalIds\n             let missing: Vec<_> = (0 ..= max as u32)\n-              .filter(|&i| !self.hir_ids_seen.contains_key(&ItemLocalId::from_u32(i)))\n-              .collect();\n+              .filter(|&i| !self.hir_ids_seen\n+                                .iter()\n+                                .find(|&local_id| local_id == &ItemLocalId::from_u32(i))\n+                                .is_some()\n+            ).collect();\n \n             // Try to map those to something more useful\n             let mut missing_items = Vec::with_capacity(missing.len());\n@@ -133,8 +136,12 @@ impl<'a, 'hir: 'a> HirIdValidator<'a, 'hir> {\n                 max,\n                 missing_items,\n                 self.hir_ids_seen\n-                    .values()\n-                    .map(|n| format!(\"({:?} {})\", n, self.hir_map.node_to_string(*n)))\n+                    .iter()\n+                    .map(|&local_id| HirId {\n+                        owner: owner_def_index,\n+                        local_id,\n+                    })\n+                    .map(|h| format!(\"({:?} {})\", h, self.hir_map.hir_to_string(h)))\n                     .collect::<Vec<_>>()));\n         }\n     }\n@@ -164,9 +171,7 @@ impl<'a, 'hir: 'a> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n                 self.hir_map.def_path(DefId::local(owner)).to_string_no_crate()));\n         }\n \n-        let node_id = self.hir_map.hir_to_node_id(hir_id);\n-\n-        self.hir_ids_seen.insert(hir_id.local_id, node_id);\n+        self.hir_ids_seen.insert(hir_id.local_id);\n     }\n \n     fn visit_impl_item_ref(&mut self, _: &'hir hir::ImplItemRef) {"}]}