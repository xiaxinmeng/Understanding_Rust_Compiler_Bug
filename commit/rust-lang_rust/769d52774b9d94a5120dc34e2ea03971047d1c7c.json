{"sha": "769d52774b9d94a5120dc34e2ea03971047d1c7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2OWQ1Mjc3NGI5ZDk0YTUxMjBkYzM0ZTJlYTAzOTcxMDQ3ZDFjN2M=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-09T09:34:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-09T09:34:16Z"}, "message": "partially port invalid_value lint to diagnostic items", "tree": {"sha": "562cec6cfadb2445baae0c8aa4b4c7ac4252bcd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/562cec6cfadb2445baae0c8aa4b4c7ac4252bcd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/769d52774b9d94a5120dc34e2ea03971047d1c7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/769d52774b9d94a5120dc34e2ea03971047d1c7c", "html_url": "https://github.com/rust-lang/rust/commit/769d52774b9d94a5120dc34e2ea03971047d1c7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/769d52774b9d94a5120dc34e2ea03971047d1c7c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a76fe76f756895b8cda1e10398f2268656a2e0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a76fe76f756895b8cda1e10398f2268656a2e0f", "html_url": "https://github.com/rust-lang/rust/commit/7a76fe76f756895b8cda1e10398f2268656a2e0f"}], "stats": {"total": 35, "additions": 16, "deletions": 19}, "files": [{"sha": "1da368d40a964b4eb57a02b7fbc02119a3a605b2", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/769d52774b9d94a5120dc34e2ea03971047d1c7c/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/769d52774b9d94a5120dc34e2ea03971047d1c7c/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=769d52774b9d94a5120dc34e2ea03971047d1c7c", "patch": "@@ -254,6 +254,7 @@ impl<T> MaybeUninit<T> {\n     /// [type]: union.MaybeUninit.html\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[inline(always)]\n+    #[cfg_attr(all(not(bootstrap)), rustc_diagnostic_item = \"maybe_uninit_uninit\")]\n     pub const fn uninit() -> MaybeUninit<T> {\n         MaybeUninit { uninit: () }\n     }\n@@ -300,6 +301,7 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[inline]\n+    #[cfg_attr(all(not(bootstrap)), rustc_diagnostic_item = \"maybe_uninit_zeroed\")]\n     pub fn zeroed() -> MaybeUninit<T> {\n         let mut u = MaybeUninit::<T>::uninit();\n         unsafe {"}, {"sha": "27cbff144ba9131d8905648d6f4ff814c4125f4c", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/769d52774b9d94a5120dc34e2ea03971047d1c7c/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/769d52774b9d94a5120dc34e2ea03971047d1c7c/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=769d52774b9d94a5120dc34e2ea03971047d1c7c", "patch": "@@ -457,6 +457,7 @@ pub const fn needs_drop<T>() -> bool {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated_in_future)]\n #[allow(deprecated)]\n+#[cfg_attr(all(not(bootstrap)), rustc_diagnostic_item = \"mem_zeroed\")]\n pub unsafe fn zeroed<T>() -> T {\n     intrinsics::panic_if_uninhabited::<T>();\n     intrinsics::init()\n@@ -485,6 +486,7 @@ pub unsafe fn zeroed<T>() -> T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated_in_future)]\n #[allow(deprecated)]\n+#[cfg_attr(all(not(bootstrap)), rustc_diagnostic_item = \"mem_uninitialized\")]\n pub unsafe fn uninitialized<T>() -> T {\n     intrinsics::panic_if_uninhabited::<T>();\n     intrinsics::uninit()"}, {"sha": "09cb784b1541a63586f530b4f7a7bbfd8837edea", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/769d52774b9d94a5120dc34e2ea03971047d1c7c/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/769d52774b9d94a5120dc34e2ea03971047d1c7c/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=769d52774b9d94a5120dc34e2ea03971047d1c7c", "patch": "@@ -1903,29 +1903,23 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n \n         /// Determine if this expression is a \"dangerous initialization\".\n         fn is_dangerous_init(cx: &LateContext<'_, '_>, expr: &hir::Expr) -> Option<InitKind> {\n-            const ZEROED_PATH: &[Symbol] = &[sym::core, sym::mem, sym::zeroed];\n-            const UININIT_PATH: &[Symbol] = &[sym::core, sym::mem, sym::uninitialized];\n             // `transmute` is inside an anonymous module (the `extern` block?);\n             // `Invalid` represents the empty string and matches that.\n+            // FIXME(#66075): use diagnostic items.  Somehow, that does not seem to work\n+            // on intrinsics right now.\n             const TRANSMUTE_PATH: &[Symbol] =\n                 &[sym::core, sym::intrinsics, kw::Invalid, sym::transmute];\n-            const MU_ZEROED_PATH: &[Symbol] =\n-                &[sym::core, sym::mem, sym::maybe_uninit, sym::MaybeUninit, sym::zeroed];\n-            const MU_UNINIT_PATH: &[Symbol] =\n-                &[sym::core, sym::mem, sym::maybe_uninit, sym::MaybeUninit, sym::uninit];\n \n             if let hir::ExprKind::Call(ref path_expr, ref args) = expr.kind {\n                 // Find calls to `mem::{uninitialized,zeroed}` methods.\n                 if let hir::ExprKind::Path(ref qpath) = path_expr.kind {\n                     let def_id = cx.tables.qpath_res(qpath, path_expr.hir_id).opt_def_id()?;\n \n-                    if cx.match_def_path(def_id, ZEROED_PATH) {\n+                    if cx.tcx.is_diagnostic_item(sym::mem_zeroed, def_id) {\n                         return Some(InitKind::Zeroed);\n-                    }\n-                    if cx.match_def_path(def_id, UININIT_PATH) {\n+                    } else if cx.tcx.is_diagnostic_item(sym::mem_uninitialized, def_id) {\n                         return Some(InitKind::Uninit);\n-                    }\n-                    if cx.match_def_path(def_id, TRANSMUTE_PATH) {\n+                    } else if cx.match_def_path(def_id, TRANSMUTE_PATH) {\n                         if is_zero(&args[0]) {\n                             return Some(InitKind::Zeroed);\n                         }\n@@ -1940,9 +1934,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n                     if let hir::ExprKind::Call(ref path_expr, _) = args[0].kind {\n                         if let hir::ExprKind::Path(ref qpath) = path_expr.kind {\n                             let def_id = cx.tables.qpath_res(qpath, path_expr.hir_id).opt_def_id()?;\n-                            if cx.match_def_path(def_id, MU_ZEROED_PATH) {\n+\n+                            if cx.tcx.is_diagnostic_item(sym::maybe_uninit_zeroed, def_id) {\n                                 return Some(InitKind::Zeroed);\n-                            } else if cx.match_def_path(def_id, MU_UNINIT_PATH) {\n+                            } else if cx.tcx.is_diagnostic_item(sym::maybe_uninit_uninit, def_id) {\n                                 return Some(InitKind::Uninit);\n                             }\n                         }"}, {"sha": "594fd5621fdb334c9d5d3e79cd5f41bbe41f6981", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/769d52774b9d94a5120dc34e2ea03971047d1c7c/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/769d52774b9d94a5120dc34e2ea03971047d1c7c/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=769d52774b9d94a5120dc34e2ea03971047d1c7c", "patch": "@@ -418,9 +418,10 @@ symbols! {\n         match_beginning_vert,\n         match_default_bindings,\n         may_dangle,\n-        maybe_uninit,\n-        MaybeUninit,\n-        mem,\n+        maybe_uninit_uninit,\n+        maybe_uninit_zeroed,\n+        mem_uninitialized,\n+        mem_zeroed,\n         member_constraints,\n         message,\n         meta,\n@@ -712,8 +713,6 @@ symbols! {\n         underscore_imports,\n         underscore_lifetimes,\n         uniform_paths,\n-        uninit,\n-        uninitialized,\n         universal_impl_trait,\n         unmarked_api,\n         unreachable_code,\n@@ -745,7 +744,6 @@ symbols! {\n         windows,\n         windows_subsystem,\n         Yield,\n-        zeroed,\n     }\n }\n "}]}