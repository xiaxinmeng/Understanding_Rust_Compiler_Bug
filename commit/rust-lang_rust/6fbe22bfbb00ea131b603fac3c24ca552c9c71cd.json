{"sha": "6fbe22bfbb00ea131b603fac3c24ca552c9c71cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYmUyMmJmYmIwMGVhMTMxYjYwM2ZhYzNjMjRjYTU1MmM5YzcxY2Q=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-12-20T17:31:08Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-12-20T17:31:08Z"}, "message": "Split lines between sentences", "tree": {"sha": "efd8ef1849e9d2cab2db19774dd4afdb583ef3d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efd8ef1849e9d2cab2db19774dd4afdb583ef3d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fbe22bfbb00ea131b603fac3c24ca552c9c71cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fbe22bfbb00ea131b603fac3c24ca552c9c71cd", "html_url": "https://github.com/rust-lang/rust/commit/6fbe22bfbb00ea131b603fac3c24ca552c9c71cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fbe22bfbb00ea131b603fac3c24ca552c9c71cd/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ecb224d7565d28ad6bd5903e651dd056f73bd89", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ecb224d7565d28ad6bd5903e651dd056f73bd89", "html_url": "https://github.com/rust-lang/rust/commit/0ecb224d7565d28ad6bd5903e651dd056f73bd89"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "40f10972f427baefa85290d24fef1c4f0157133d", "filename": "docs/user/manual.adoc", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6fbe22bfbb00ea131b603fac3c24ca552c9c71cd/docs%2Fuser%2Fmanual.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/6fbe22bfbb00ea131b603fac3c24ca552c9c71cd/docs%2Fuser%2Fmanual.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fmanual.adoc?ref=6fbe22bfbb00ea131b603fac3c24ca552c9c71cd", "patch": "@@ -46,8 +46,8 @@ You can install the latest release of the plugin from\n https://marketplace.visualstudio.com/items?itemName=matklad.rust-analyzer[the marketplace].\n \n Note that the plugin may cause conflicts with the\n-https://marketplace.visualstudio.com/items?itemName=rust-lang.rust[official Rust plugin]. It is\n-recommended to disable the Rust plugin when using the rust-analyzer extension.\n+https://marketplace.visualstudio.com/items?itemName=rust-lang.rust[official Rust plugin].\n+It is recommended to disable the Rust plugin when using the rust-analyzer extension.\n \n By default, the plugin will prompt you to download the matching version of the server as well:\n \n@@ -74,18 +74,21 @@ Note that we only support two most recent versions of VS Code.\n \n ==== Updates\n \n-The extension will be updated automatically as new versions become available. It will ask your permission to download the matching language server version binary if needed.\n+The extension will be updated automatically as new versions become available.\n+It will ask your permission to download the matching language server version binary if needed.\n \n ===== Nightly\n \n-We ship nightly releases for VS Code. To help us out with testing the newest code and follow the bleeding edge of our `master`, please use the following config:\n+We ship nightly releases for VS Code.\n+To help us out with testing the newest code and follow the bleeding edge of our `master`, please use the following config:\n \n [source,json]\n ----\n { \"rust-analyzer.updates.channel\": \"nightly\" }\n ----\n \n-You will be prompted to install the `nightly` extension version. Just click `Download now` and from that moment you will get automatic updates every 24 hours.\n+You will be prompted to install the `nightly` extension version.\n+Just click `Download now` and from that moment you will get automatic updates every 24 hours.\n \n If you don't want to be asked for `Download now` every day when the new nightly version is released add the following to your `settings.json`:\n [source,json]\n@@ -160,7 +163,8 @@ $ chmod +x ~/.local/bin/rust-analyzer\n \n Ensure `~/.local/bin` is listed in the `$PATH` variable.\n \n-Alternatively, you can install it from source using the command below. You'll need the latest stable version of the Rust toolchain.\n+Alternatively, you can install it from source using the command below.\n+You'll need the latest stable version of the Rust toolchain.\n \n [source,bash]\n ----\n@@ -198,7 +202,8 @@ Emacs support is maintained as part of the https://github.com/emacs-lsp/lsp-mode\n \n === Vim/NeoVim\n \n-Prerequisites: You have installed the <<rust-analyzer-language-server-binary,`rust-analyzer` binary>>. Not needed if the extension can install/update it on its own, coc-rust-analyzer is one example.\n+Prerequisites: You have installed the <<rust-analyzer-language-server-binary,`rust-analyzer` binary>>.\n+Not needed if the extension can install/update it on its own, coc-rust-analyzer is one example.\n \n The are several LSP client implementations for vim or neovim:\n \n@@ -270,22 +275,25 @@ Once `neovim/nvim-lspconfig` is installed, use `+lua require'nvim_lsp'.rust_anal\n \n Prerequisites: You have installed the <<rust-analyzer-language-server-binary,`rust-analyzer` binary>>.\n \n-You also need the `LSP` package. To install it:\n+You also need the `LSP` package.\n+To install it:\n \n 1. If you've never installed a Sublime Text package, install Package Control:\n    * Open the command palette (Win/Linux: `ctrl+shift+p`, Mac: `cmd+shift+p`)\n    * Type `Install Package Control`, press enter\n 2. In the command palette, run `Package control: Install package`, and in the list that pops up, type `LSP` and press enter.\n \n-Finally, with your Rust project open, in the command palette, run `LSP: Enable Language Server In Project` or `LSP: Enable Language Server Globally`, then select `rust-analyzer` in the list that pops up to enable the rust-analyzer LSP. The latter means that rust-analyzer is enabled by default in Rust projects.\n+Finally, with your Rust project open, in the command palette, run `LSP: Enable Language Server In Project` or `LSP: Enable Language Server Globally`, then select `rust-analyzer` in the list that pops up to enable the rust-analyzer LSP.\n+The latter means that rust-analyzer is enabled by default in Rust projects.\n \n If it worked, you should see \"rust-analyzer, Line X, Column Y\" on the left side of the bottom bar, and after waiting a bit, functionality like tooltips on hovering over variables should become available.\n \n If you get an error saying `No such file or directory: 'rust-analyzer'`, see the <<rust-analyzer-language-server-binary,`rust-analyzer` binary>> section on installing the language server binary.\n \n === GNOME Builder\n \n-GNOME Builder 3.37.1 and newer has native `rust-analyzer` support. If the LSP binary is not available, GNOME Builder can install it when opening a Rust file.\n+GNOME Builder 3.37.1 and newer has native `rust-analyzer` support.\n+If the LSP binary is not available, GNOME Builder can install it when opening a Rust file.\n \n == Configuration\n \n@@ -413,8 +421,8 @@ include::./generated_diagnostic.adoc[]\n \n ==== Color configurations\n \n-It is possible to change the foreground/background color of inlay hints. Just add this to your\n-`settings.json`:\n+It is possible to change the foreground/background color of inlay hints.\n+Just add this to your `settings.json`:\n \n [source,jsonc]\n ----\n@@ -436,7 +444,8 @@ It is possible to change the foreground/background color of inlay hints. Just ad\n \n ==== Semantic style customizations\n \n-You can customize the look of different semantic elements in the source code. For example, mutable bindings are underlined by default and you can override this behavior by adding the following section to your `settings.json`:\n+You can customize the look of different semantic elements in the source code.\n+For example, mutable bindings are underlined by default and you can override this behavior by adding the following section to your `settings.json`:\n \n [source,jsonc]\n ----\n@@ -452,7 +461,9 @@ You can customize the look of different semantic elements in the source code. Fo\n ----\n \n ==== Special `when` clause context for keybindings.\n-You may use `inRustProject` context to configure keybindings for rust projects only. For example:\n+You may use `inRustProject` context to configure keybindings for rust projects only.\n+For example:\n+\n [source,json]\n ----\n {\n@@ -491,7 +502,8 @@ Or it is possible to specify vars more granularly:\n ]\n ```\n \n-You can use any valid RegExp as a mask. Also note that a full runnable name is something like *run bin_or_example_name*, *test some::mod::test_name* or *test-mod some::mod*, so it is possible to distinguish binaries, single tests, and test modules with this masks: `\"^run\"`, `\"^test \"` (the trailing space matters!), and `\"^test-mod\"` respectively.\n+You can use any valid regular expression as a mask.\n+Also note that a full runnable name is something like *run bin_or_example_name*, *test some::mod::test_name* or *test-mod some::mod*, so it is possible to distinguish binaries, single tests, and test modules with this masks: `\"^run\"`, `\"^test \"` (the trailing space matters!), and `\"^test-mod\"` respectively.\n \n ==== Compiler feedback from external commands\n "}]}