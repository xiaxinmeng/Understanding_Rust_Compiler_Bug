{"sha": "15f15d92eb4d6ab791047eefbd6dd9b2baba1140", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZjE1ZDkyZWI0ZDZhYjc5MTA0N2VlZmJkNmRkOWIyYmFiYTExNDA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-28T20:59:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-28T20:59:57Z"}, "message": "add impl works with lifetimes", "tree": {"sha": "3f8fde6b53446c9ecfeac4f6bd2f34da5a91aa33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f8fde6b53446c9ecfeac4f6bd2f34da5a91aa33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15f15d92eb4d6ab791047eefbd6dd9b2baba1140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15f15d92eb4d6ab791047eefbd6dd9b2baba1140", "html_url": "https://github.com/rust-lang/rust/commit/15f15d92eb4d6ab791047eefbd6dd9b2baba1140", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15f15d92eb4d6ab791047eefbd6dd9b2baba1140/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba02a55330d2ec9a0ea2c5cd457b82782ae299e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba02a55330d2ec9a0ea2c5cd457b82782ae299e9", "html_url": "https://github.com/rust-lang/rust/commit/ba02a55330d2ec9a0ea2c5cd457b82782ae299e9"}], "stats": {"total": 219, "additions": 202, "deletions": 17}, "files": [{"sha": "08a85f6e26f0b311d7ae3691bf43770649177fb7", "filename": "crates/libeditor/src/code_actions.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15f15d92eb4d6ab791047eefbd6dd9b2baba1140/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f15d92eb4d6ab791047eefbd6dd9b2baba1140/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs?ref=15f15d92eb4d6ab791047eefbd6dd9b2baba1140", "patch": "@@ -80,7 +80,9 @@ pub fn add_impl<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce() ->\n         buf.push_str(\" \");\n         buf.push_str(name.text().as_str());\n         if let Some(type_params) = type_params {\n-            join(type_params.type_params().filter_map(|it| it.name()).map(|it| it.text()))\n+            let lifetime_params = type_params.lifetime_params().filter_map(|it| it.lifetime()).map(|it| it.text());\n+            let type_params = type_params.type_params().filter_map(|it| it.name()).map(|it| it.text());\n+            join(lifetime_params.chain(type_params))\n                 .surround_with(\"<\", \">\")\n                 .to_buf(&mut buf);\n         }\n@@ -146,6 +148,11 @@ mod tests {\n             \"struct Foo<T: Clone> {}\\n\\nimpl<T: Clone> Foo<T> {\\n<|>\\n}\",\n             |file, off| add_impl(file, off).map(|f| f()),\n         );\n+        check_action(\n+            \"struct Foo<'a, T: Foo<'a>> {<|>}\",\n+            \"struct Foo<'a, T: Foo<'a>> {}\\n\\nimpl<'a, T: Foo<'a>> Foo<'a, T> {\\n<|>\\n}\",\n+            |file, off| add_impl(file, off).map(|f| f()),\n+        );\n     }\n \n }"}, {"sha": "a38647c433f9c3a560b73915e268cf7996e2efd2", "filename": "crates/libeditor/src/scope/fn_scope.rs", "status": "modified", "additions": 75, "deletions": 8, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/15f15d92eb4d6ab791047eefbd6dd9b2baba1140/crates%2Flibeditor%2Fsrc%2Fscope%2Ffn_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f15d92eb4d6ab791047eefbd6dd9b2baba1140/crates%2Flibeditor%2Fsrc%2Fscope%2Ffn_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fscope%2Ffn_scope.rs?ref=15f15d92eb4d6ab791047eefbd6dd9b2baba1140", "patch": "@@ -24,11 +24,7 @@ impl FnScopes {\n             scope_for: HashMap::new()\n         };\n         let root = scopes.root_scope();\n-        fn_def.param_list().into_iter()\n-            .flat_map(|it| it.params())\n-            .filter_map(|it| it.pat())\n-            .for_each(|it| scopes.add_bindings(root, it));\n-\n+        scopes.add_params_bindings(root, fn_def.param_list());\n         if let Some(body) = fn_def.body() {\n             compute_block_scopes(body, &mut scopes, root)\n         }\n@@ -56,6 +52,12 @@ impl FnScopes {\n             .filter_map(ScopeEntry::new);\n         self.scopes[scope].entries.extend(entries);\n     }\n+    fn add_params_bindings(&mut self, scope: ScopeId, params: Option<ast::ParamList>) {\n+        params.into_iter()\n+            .flat_map(|it| it.params())\n+            .filter_map(|it| it.pat())\n+            .for_each(|it| self.add_bindings(scope, it));\n+    }\n     fn set_scope(&mut self, node: SyntaxNodeRef, scope: ScopeId) {\n         self.scope_for.insert(node.owned(), scope);\n     }\n@@ -102,13 +104,14 @@ fn compute_block_scopes(block: ast::Block, scopes: &mut FnScopes, mut scope: Sco\n     for stmt in block.statements() {\n         match stmt {\n             ast::Stmt::LetStmt(stmt) => {\n+                if let Some(expr) = stmt.initializer() {\n+                    scopes.set_scope(expr.syntax(), scope);\n+                    compute_expr_scopes(expr, scopes, scope);\n+                }\n                 scope = scopes.new_scope(scope);\n                 if let Some(pat) = stmt.pat() {\n                     scopes.add_bindings(scope, pat);\n                 }\n-                if let Some(expr) = stmt.initializer() {\n-                    scopes.set_scope(expr.syntax(), scope)\n-                }\n             }\n             ast::Stmt::ExprStmt(expr_stmt) => {\n                 if let Some(expr) = expr_stmt.expr() {\n@@ -163,6 +166,20 @@ fn compute_expr_scopes(expr: ast::Expr, scopes: &mut FnScopes, scope: ScopeId) {\n                 compute_block_scopes(block, scopes, scope);\n             }\n         },\n+        ast::Expr::LambdaExpr(e) => {\n+            let mut scope = scopes.new_scope(scope);\n+            scopes.add_params_bindings(scope, e.param_list());\n+            if let Some(body) = e.body() {\n+                scopes.set_scope(body.syntax(), scope);\n+                compute_expr_scopes(body, scopes, scope);\n+            }\n+        }\n+        ast::Expr::CallExpr(e) => {\n+            e.arg_list().into_iter()\n+                .flat_map(|it| it.args())\n+                .chain(e.expr())\n+                .for_each(|expr| compute_expr_scopes(expr, scopes, scope));\n+        }\n         _ => {\n             expr.syntax().children()\n                 .filter_map(ast::Expr::cast)\n@@ -189,3 +206,53 @@ struct ScopeData {\n     parent: Option<ScopeId>,\n     entries: Vec<ScopeEntry>\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use libsyntax2::File;\n+    use {find_node_at_offset, test_utils::extract_offset};\n+\n+    fn do_check(code: &str, expected: &[&str]) {\n+        let (off, code) = extract_offset(code);\n+        let code = {\n+            let mut buf = String::new();\n+            let off = u32::from(off) as usize;\n+            buf.push_str(&code[..off]);\n+            buf.push_str(\"marker\");\n+            buf.push_str(&code[off..]);\n+            buf\n+        };\n+        let file = File::parse(&code);\n+        let marker: ast::PathExpr = find_node_at_offset(file.syntax(), off).unwrap();\n+        let fn_def: ast::FnDef = find_node_at_offset(file.syntax(), off).unwrap();\n+        let scopes = FnScopes::new(fn_def);\n+        let actual = scopes.scope_chain(marker.syntax())\n+            .flat_map(|scope| scopes.entries(scope))\n+            .map(|it| it.name())\n+            .collect::<Vec<_>>();\n+        assert_eq!(expected, actual.as_slice());\n+    }\n+\n+    #[test]\n+    fn test_lambda_scope() {\n+        do_check(r\"\n+            fn quux(foo: i32) {\n+                let f = |bar| {\n+                    <|>\n+                };\n+            }\",\n+            &[\"bar\", \"foo\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_call_scope() {\n+        do_check(r\"\n+            fn quux() {\n+                f(|x| <|> );\n+            }\",\n+            &[\"x\"],\n+        );\n+    }\n+}"}, {"sha": "d72e2091af965c74ea774e9ee26d70e238ff7350", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 84, "deletions": 2, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/15f15d92eb4d6ab791047eefbd6dd9b2baba1140/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f15d92eb4d6ab791047eefbd6dd9b2baba1140/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=15f15d92eb4d6ab791047eefbd6dd9b2baba1140", "patch": "@@ -4,6 +4,28 @@ use {\n     SyntaxKind::*,\n };\n \n+// ArgList\n+#[derive(Debug, Clone, Copy)]\n+pub struct ArgList<'a> {\n+    syntax: SyntaxNodeRef<'a>,\n+}\n+\n+impl<'a> AstNode<'a> for ArgList<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            ARG_LIST => Some(ArgList { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<'a> ArgList<'a> {\n+    pub fn args(self) -> impl Iterator<Item = Expr<'a>> + 'a {\n+        super::children(self)\n+    }\n+}\n+\n // ArrayExpr\n #[derive(Debug, Clone, Copy)]\n pub struct ArrayExpr<'a> {\n@@ -181,7 +203,15 @@ impl<'a> AstNode<'a> for CallExpr<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> CallExpr<'a> {}\n+impl<'a> CallExpr<'a> {\n+    pub fn expr(self) -> Option<Expr<'a>> {\n+        super::child_opt(self)\n+    }\n+\n+    pub fn arg_list(self) -> Option<ArgList<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n \n // CastExpr\n #[derive(Debug, Clone, Copy)]\n@@ -705,7 +735,15 @@ impl<'a> AstNode<'a> for LambdaExpr<'a> {\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n \n-impl<'a> LambdaExpr<'a> {}\n+impl<'a> LambdaExpr<'a> {\n+    pub fn param_list(self) -> Option<ParamList<'a>> {\n+        super::child_opt(self)\n+    }\n+\n+    pub fn body(self) -> Option<Expr<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n \n // LetStmt\n #[derive(Debug, Clone, Copy)]\n@@ -733,6 +771,46 @@ impl<'a> LetStmt<'a> {\n     }\n }\n \n+// Lifetime\n+#[derive(Debug, Clone, Copy)]\n+pub struct Lifetime<'a> {\n+    syntax: SyntaxNodeRef<'a>,\n+}\n+\n+impl<'a> AstNode<'a> for Lifetime<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            LIFETIME => Some(Lifetime { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<'a> Lifetime<'a> {}\n+\n+// LifetimeParam\n+#[derive(Debug, Clone, Copy)]\n+pub struct LifetimeParam<'a> {\n+    syntax: SyntaxNodeRef<'a>,\n+}\n+\n+impl<'a> AstNode<'a> for LifetimeParam<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            LIFETIME_PARAM => Some(LifetimeParam { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<'a> LifetimeParam<'a> {\n+    pub fn lifetime(self) -> Option<Lifetime<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n+\n // Literal\n #[derive(Debug, Clone, Copy)]\n pub struct Literal<'a> {\n@@ -1813,6 +1891,10 @@ impl<'a> TypeParamList<'a> {\n     pub fn type_params(self) -> impl Iterator<Item = TypeParam<'a>> + 'a {\n         super::children(self)\n     }\n+\n+    pub fn lifetime_params(self) -> impl Iterator<Item = LifetimeParam<'a>> + 'a {\n+        super::children(self)\n+    }\n }\n \n // TypeRef"}, {"sha": "3b5e9269f1fcc3005d9b2ac3349ddb4a49b77c02", "filename": "crates/libsyntax2/src/ast/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15f15d92eb4d6ab791047eefbd6dd9b2baba1140/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f15d92eb4d6ab791047eefbd6dd9b2baba1140/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs?ref=15f15d92eb4d6ab791047eefbd6dd9b2baba1140", "patch": "@@ -67,6 +67,12 @@ impl<'a> Attr<'a> {\n     }\n }\n \n+impl<'a> Lifetime<'a> {\n+    pub fn text(&self) -> SmolStr {\n+        self.syntax().leaf_text().unwrap()\n+    }\n+}\n+\n impl<'a> Name<'a> {\n     pub fn text(&self) -> SmolStr {\n         let ident = self.syntax().first_child()"}, {"sha": "3c293d3e432c96b2951de262d25c36ed6ff7ae44", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/15f15d92eb4d6ab791047eefbd6dd9b2baba1140/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/15f15d92eb4d6ab791047eefbd6dd9b2baba1140/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=15f15d92eb4d6ab791047eefbd6dd9b2baba1140", "patch": "@@ -344,7 +344,12 @@ Grammar(\n         \"ArrayExpr\": (),\n         \"ParenExpr\": (),\n         \"PathExpr\": (),\n-        \"LambdaExpr\": (),\n+        \"LambdaExpr\": (\n+            options: [\n+                [\"param_list\", \"ParamList\"],\n+                [\"body\", \"Expr\"],\n+            ]\n+        ),\n         \"IfExpr\": (\n             options: [ [\"condition\", \"Condition\"] ]\n         ),\n@@ -378,7 +383,12 @@ Grammar(\n         \"StructLit\": (),\n         \"NamedFieldList\": (),\n         \"NamedField\": (),\n-        \"CallExpr\": (),\n+        \"CallExpr\": (\n+            options: [\n+                [ \"expr\", \"Expr\" ],\n+                [ \"arg_list\", \"ArgList\" ],\n+            ]\n+        ),\n         \"IndexExpr\": (),\n         \"MethodCallExpr\": (),\n         \"FieldExpr\": (),\n@@ -457,8 +467,15 @@ Grammar(\n         \"NameRef\": (),\n         \"Attr\": ( options: [ [\"value\", \"TokenTree\"] ] ),\n         \"TokenTree\": (),\n-        \"TypeParamList\": ( collections: [ [\"type_params\", \"TypeParam\" ] ]),\n+        \"TypeParamList\": (\n+            collections: [\n+                [\"type_params\", \"TypeParam\" ],\n+                [\"lifetime_params\", \"LifetimeParam\" ],\n+            ]\n+        ),\n         \"TypeParam\": ( traits: [\"NameOwner\"] ),\n+        \"LifetimeParam\": ( options: [ [\"lifetime\", \"Lifetime\"] ] ),\n+        \"Lifetime\": (),\n         \"WhereClause\": (),\n         \"ExprStmt\": (\n             options: [ [\"expr\", \"Expr\"] ]\n@@ -492,5 +509,10 @@ Grammar(\n         ),\n         \"UseItem\": (),\n         \"ExternCrateItem\": (),\n+        \"ArgList\": (\n+            collections: [\n+                [\"args\", \"Expr\"]\n+            ]\n+        )\n     },\n )"}, {"sha": "a17c27b31abba5407be15f5ca34a08cb9e7ed170", "filename": "crates/libsyntax2/src/grammar/expressions/atom.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15f15d92eb4d6ab791047eefbd6dd9b2baba1140/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f15d92eb4d6ab791047eefbd6dd9b2baba1140/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=15f15d92eb4d6ab791047eefbd6dd9b2baba1140", "patch": "@@ -151,10 +151,11 @@ fn lambda_expr(p: &mut Parser) -> CompletedMarker {\n     p.eat(MOVE_KW);\n     params::param_list_opt_types(p);\n     if opt_fn_ret_type(p) {\n-        block(p);\n-    } else {\n-        expr(p);\n+        if !p.at(L_CURLY) {\n+            p.error(\"expected `{`\");\n+        }\n     }\n+    expr(p);\n     m.complete(p, LAMBDA_EXPR)\n }\n "}]}