{"sha": "c9b4116a5e8ef956066c9aca51e3adbaa1647fcb", "node_id": "C_kwDOAAsO6NoAKGM5YjQxMTZhNWU4ZWY5NTYwNjZjOWFjYTUxZTNhZGJhYTE2NDdmY2I", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-02T15:57:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-02T15:57:19Z"}, "message": "Auto merge of #14662 - Ddystopia:open_locally_built_documentatin_instead_of_docs_dot_rs, r=Ddystopia\n\n Provide links to locally built documentation for `experimental/externalDocs`\n\nThis pull request addresses issue #12867, which requested the ability to provide links to locally built documentation when using the \"Open docs for symbol\" feature. Previously, rust-analyzer always used docs.rs for this purpose. With these changes, the feature will provide both web (docs.rs) and local documentation links without verifying their existence.\n\nChanges in this PR:\n\n   - Added support for local documentation links alongside web documentation links.\n   - Added `target_dir` path argument for external_docs and other related methods.\n   - Added `sysroot` argument for external_docs.\n   - Added `target_directory` path to `CargoWorkspace`.\n\nAPI Changes:\n\n   - Added an experimental client capability `{ \"localDocs\": boolean }`. If this capability is set, the `Open External Documentation` request returned from the server will include both web and local documentation links in the `ExternalDocsResponse` object.\n\nHere's the `ExternalDocsResponse` interface:\n\n```typescript\ninterface ExternalDocsResponse {\n    web?: string;\n    local?: string;\n}\n```\n\nBy providing links to both web-based and locally built documentation, this update improves the developer experience for those using different versions of crates, git dependencies, or local crates not available on docs.rs. Rust-analyzer will now provide both web (docs.rs) and local documentation links, leaving it to the client to open the desired link. Please note that this update does not perform any checks to ensure the validity of the provided links.", "tree": {"sha": "cd49d0fe266e0994954eeec93fbca057167782cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd49d0fe266e0994954eeec93fbca057167782cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9b4116a5e8ef956066c9aca51e3adbaa1647fcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9b4116a5e8ef956066c9aca51e3adbaa1647fcb", "html_url": "https://github.com/rust-lang/rust/commit/c9b4116a5e8ef956066c9aca51e3adbaa1647fcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9b4116a5e8ef956066c9aca51e3adbaa1647fcb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ecd7e6c0d25ed9a83bf94e49c63d0b6919c22f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ecd7e6c0d25ed9a83bf94e49c63d0b6919c22f0", "html_url": "https://github.com/rust-lang/rust/commit/4ecd7e6c0d25ed9a83bf94e49c63d0b6919c22f0"}, {"sha": "2025f17ac394fc75528bb61422f15c5861a0fa8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2025f17ac394fc75528bb61422f15c5861a0fa8b", "html_url": "https://github.com/rust-lang/rust/commit/2025f17ac394fc75528bb61422f15c5861a0fa8b"}], "stats": {"total": 372, "additions": 307, "deletions": 65}, "files": [{"sha": "597b28d36d7f7eb5eb8b3f0e6be261f2c200fc2e", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 84, "deletions": 28, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4116a5e8ef956066c9aca51e3adbaa1647fcb/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4116a5e8ef956066c9aca51e3adbaa1647fcb/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=c9b4116a5e8ef956066c9aca51e3adbaa1647fcb", "patch": "@@ -5,6 +5,8 @@ mod tests;\n \n mod intra_doc_links;\n \n+use std::ffi::OsStr;\n+\n use pulldown_cmark::{BrokenLink, CowStr, Event, InlineStr, LinkType, Options, Parser, Tag};\n use pulldown_cmark_to_cmark::{cmark_resume_with_options, Options as CMarkOptions};\n use stdx::format_to;\n@@ -29,8 +31,16 @@ use crate::{\n     FilePosition, Semantics,\n };\n \n-/// Weblink to an item's documentation.\n-pub(crate) type DocumentationLink = String;\n+/// Web and local links to an item's documentation.\n+#[derive(Default, Debug, Clone, PartialEq, Eq)]\n+pub struct DocumentationLinks {\n+    /// The URL to the documentation on docs.rs.\n+    /// May not lead anywhere.\n+    pub web_url: Option<String>,\n+    /// The URL to the documentation in the local file system.\n+    /// May not lead anywhere.\n+    pub local_url: Option<String>,\n+}\n \n const MARKDOWN_OPTIONS: Options =\n     Options::ENABLE_FOOTNOTES.union(Options::ENABLE_TABLES).union(Options::ENABLE_TASKLISTS);\n@@ -109,7 +119,7 @@ pub(crate) fn remove_links(markdown: &str) -> String {\n \n // Feature: Open Docs\n //\n-// Retrieve a link to documentation for the given symbol.\n+// Retrieve a links to documentation for the given symbol.\n //\n // The simplest way to use this feature is via the context menu. Right-click on\n // the selected item. The context menu opens. Select **Open Docs**.\n@@ -122,7 +132,9 @@ pub(crate) fn remove_links(markdown: &str) -> String {\n pub(crate) fn external_docs(\n     db: &RootDatabase,\n     position: &FilePosition,\n-) -> Option<DocumentationLink> {\n+    target_dir: Option<&OsStr>,\n+    sysroot: Option<&OsStr>,\n+) -> Option<DocumentationLinks> {\n     let sema = &Semantics::new(db);\n     let file = sema.parse(position.file_id).syntax().clone();\n     let token = pick_best_token(file.token_at_offset(position.offset), |kind| match kind {\n@@ -146,11 +158,11 @@ pub(crate) fn external_docs(\n                 NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n                 NameClass::PatFieldShorthand { local_def: _, field_ref } => Definition::Field(field_ref),\n             },\n-            _ => return None,\n+            _ => return None\n         }\n     };\n \n-    get_doc_link(db, definition)\n+    Some(get_doc_links(db, definition, target_dir, sysroot))\n }\n \n /// Extracts all links from a given markdown text returning the definition text range, link-text\n@@ -308,19 +320,35 @@ fn broken_link_clone_cb(link: BrokenLink<'_>) -> Option<(CowStr<'_>, CowStr<'_>)\n //\n // This should cease to be a problem if RFC2988 (Stable Rustdoc URLs) is implemented\n // https://github.com/rust-lang/rfcs/pull/2988\n-fn get_doc_link(db: &RootDatabase, def: Definition) -> Option<String> {\n-    let (target, file, frag) = filename_and_frag_for_def(db, def)?;\n+fn get_doc_links(\n+    db: &RootDatabase,\n+    def: Definition,\n+    target_dir: Option<&OsStr>,\n+    sysroot: Option<&OsStr>,\n+) -> DocumentationLinks {\n+    let join_url = |base_url: Option<Url>, path: &str| -> Option<Url> {\n+        base_url.and_then(|url| url.join(path).ok())\n+    };\n+\n+    let Some((target, file, frag)) = filename_and_frag_for_def(db, def) else { return Default::default(); };\n \n-    let mut url = get_doc_base_url(db, target)?;\n+    let (mut web_url, mut local_url) = get_doc_base_urls(db, target, target_dir, sysroot);\n \n     if let Some(path) = mod_path_of_def(db, target) {\n-        url = url.join(&path).ok()?;\n+        web_url = join_url(web_url, &path);\n+        local_url = join_url(local_url, &path);\n     }\n \n-    url = url.join(&file).ok()?;\n-    url.set_fragment(frag.as_deref());\n+    web_url = join_url(web_url, &file);\n+    local_url = join_url(local_url, &file);\n+\n+    web_url.as_mut().map(|url| url.set_fragment(frag.as_deref()));\n+    local_url.as_mut().map(|url| url.set_fragment(frag.as_deref()));\n \n-    Some(url.into())\n+    DocumentationLinks {\n+        web_url: web_url.map(|it| it.into()),\n+        local_url: local_url.map(|it| it.into()),\n+    }\n }\n \n fn rewrite_intra_doc_link(\n@@ -332,7 +360,7 @@ fn rewrite_intra_doc_link(\n     let (link, ns) = parse_intra_doc_link(target);\n \n     let resolved = resolve_doc_path_for_def(db, def, link, ns)?;\n-    let mut url = get_doc_base_url(db, resolved)?;\n+    let mut url = get_doc_base_urls(db, resolved, None, None).0?;\n \n     let (_, file, frag) = filename_and_frag_for_def(db, resolved)?;\n     if let Some(path) = mod_path_of_def(db, resolved) {\n@@ -351,7 +379,7 @@ fn rewrite_url_link(db: &RootDatabase, def: Definition, target: &str) -> Option<\n         return None;\n     }\n \n-    let mut url = get_doc_base_url(db, def)?;\n+    let mut url = get_doc_base_urls(db, def, None, None).0?;\n     let (def, file, frag) = filename_and_frag_for_def(db, def)?;\n \n     if let Some(path) = mod_path_of_def(db, def) {\n@@ -426,19 +454,38 @@ fn map_links<'e>(\n /// ```ignore\n /// https://doc.rust-lang.org/std/iter/trait.Iterator.html#tymethod.next\n /// ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+/// file:///project/root/target/doc/std/iter/trait.Iterator.html#tymethod.next\n+/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n /// ```\n-fn get_doc_base_url(db: &RootDatabase, def: Definition) -> Option<Url> {\n+fn get_doc_base_urls(\n+    db: &RootDatabase,\n+    def: Definition,\n+    target_dir: Option<&OsStr>,\n+    sysroot: Option<&OsStr>,\n+) -> (Option<Url>, Option<Url>) {\n+    let local_doc = target_dir\n+        .and_then(|path| path.to_str())\n+        .and_then(|path| Url::parse(&format!(\"file:///{path}/\")).ok())\n+        .and_then(|it| it.join(\"doc/\").ok());\n+    let system_doc = sysroot\n+        .and_then(|it| it.to_str())\n+        .map(|sysroot| format!(\"file:///{sysroot}/share/doc/rust/html/\"))\n+        .and_then(|it| Url::parse(&it).ok());\n+\n     // special case base url of `BuiltinType` to core\n     // https://github.com/rust-lang/rust-analyzer/issues/12250\n     if let Definition::BuiltinType(..) = def {\n-        return Url::parse(\"https://doc.rust-lang.org/nightly/core/\").ok();\n+        let web_link = Url::parse(\"https://doc.rust-lang.org/nightly/core/\").ok();\n+        let system_link = system_doc.and_then(|it| it.join(\"core/\").ok());\n+        return (web_link, system_link);\n     };\n \n-    let krate = def.krate(db)?;\n-    let display_name = krate.display_name(db)?;\n+    let Some(krate) = def.krate(db) else { return Default::default() };\n+    let Some(display_name) = krate.display_name(db) else { return Default::default() };\n     let crate_data = &db.crate_graph()[krate.into()];\n     let channel = crate_data.channel.map_or(\"nightly\", ReleaseChannel::as_str);\n-    let base = match &crate_data.origin {\n+\n+    let (web_base, local_base) = match &crate_data.origin {\n         // std and co do not specify `html_root_url` any longer so we gotta handwrite this ourself.\n         // FIXME: Use the toolchains channel instead of nightly\n         CrateOrigin::Lang(\n@@ -448,15 +495,17 @@ fn get_doc_base_url(db: &RootDatabase, def: Definition) -> Option<Url> {\n             | LangCrateOrigin::Std\n             | LangCrateOrigin::Test),\n         ) => {\n-            format!(\"https://doc.rust-lang.org/{channel}/{origin}\")\n+            let system_url = system_doc.and_then(|it| it.join(&format!(\"{origin}\")).ok());\n+            let web_url = format!(\"https://doc.rust-lang.org/{channel}/{origin}\");\n+            (Some(web_url), system_url)\n         }\n-        CrateOrigin::Lang(_) => return None,\n+        CrateOrigin::Lang(_) => return (None, None),\n         CrateOrigin::Rustc { name: _ } => {\n-            format!(\"https://doc.rust-lang.org/{channel}/nightly-rustc/\")\n+            (Some(format!(\"https://doc.rust-lang.org/{channel}/nightly-rustc/\")), None)\n         }\n         CrateOrigin::Local { repo: _, name: _ } => {\n             // FIXME: These should not attempt to link to docs.rs!\n-            krate.get_html_root_url(db).or_else(|| {\n+            let weblink = krate.get_html_root_url(db).or_else(|| {\n                 let version = krate.version(db);\n                 // Fallback to docs.rs. This uses `display_name` and can never be\n                 // correct, but that's what fallbacks are about.\n@@ -468,10 +517,11 @@ fn get_doc_base_url(db: &RootDatabase, def: Definition) -> Option<Url> {\n                     krate = display_name,\n                     version = version.as_deref().unwrap_or(\"*\")\n                 ))\n-            })?\n+            });\n+            (weblink, local_doc)\n         }\n         CrateOrigin::Library { repo: _, name } => {\n-            krate.get_html_root_url(db).or_else(|| {\n+            let weblink = krate.get_html_root_url(db).or_else(|| {\n                 let version = krate.version(db);\n                 // Fallback to docs.rs. This uses `display_name` and can never be\n                 // correct, but that's what fallbacks are about.\n@@ -483,10 +533,16 @@ fn get_doc_base_url(db: &RootDatabase, def: Definition) -> Option<Url> {\n                     krate = name,\n                     version = version.as_deref().unwrap_or(\"*\")\n                 ))\n-            })?\n+            });\n+            (weblink, local_doc)\n         }\n     };\n-    Url::parse(&base).ok()?.join(&format!(\"{display_name}/\")).ok()\n+    let web_base = web_base\n+        .and_then(|it| Url::parse(&it).ok())\n+        .and_then(|it| it.join(&format!(\"{display_name}/\")).ok());\n+    let local_base = local_base.and_then(|it| it.join(&format!(\"{display_name}/\")).ok());\n+\n+    (web_base, local_base)\n }\n \n /// Get the filename and extension generated for a symbol by rustdoc."}, {"sha": "05a64b33bfdc9b4c6caf71f19ff71a7bd8b838c7", "filename": "crates/ide/src/doc_links/tests.rs", "status": "modified", "additions": 133, "deletions": 19, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4116a5e8ef956066c9aca51e3adbaa1647fcb/crates%2Fide%2Fsrc%2Fdoc_links%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4116a5e8ef956066c9aca51e3adbaa1647fcb/crates%2Fide%2Fsrc%2Fdoc_links%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links%2Ftests.rs?ref=c9b4116a5e8ef956066c9aca51e3adbaa1647fcb", "patch": "@@ -1,3 +1,5 @@\n+use std::ffi::OsStr;\n+\n use expect_test::{expect, Expect};\n use hir::{HasAttrs, Semantics};\n use ide_db::{\n@@ -13,11 +15,33 @@ use crate::{\n     fixture, TryToNav,\n };\n \n-fn check_external_docs(ra_fixture: &str, expect: Expect) {\n+fn check_external_docs(\n+    ra_fixture: &str,\n+    target_dir: Option<&OsStr>,\n+    expect_web_url: Option<Expect>,\n+    expect_local_url: Option<Expect>,\n+    sysroot: Option<&OsStr>,\n+) {\n     let (analysis, position) = fixture::position(ra_fixture);\n-    let url = analysis.external_docs(position).unwrap().expect(\"could not find url for symbol\");\n+    let links = analysis.external_docs(position, target_dir, sysroot).unwrap();\n+\n+    let web_url = links.web_url;\n+    let local_url = links.local_url;\n+\n+    println!(\"web_url: {:?}\", web_url);\n+    println!(\"local_url: {:?}\", local_url);\n+\n+    match (expect_web_url, web_url) {\n+        (Some(expect), Some(url)) => expect.assert_eq(&url),\n+        (None, None) => (),\n+        _ => panic!(\"Unexpected web url\"),\n+    }\n \n-    expect.assert_eq(&url)\n+    match (expect_local_url, local_url) {\n+        (Some(expect), Some(url)) => expect.assert_eq(&url),\n+        (None, None) => (),\n+        _ => panic!(\"Unexpected local url\"),\n+    }\n }\n \n fn check_rewrite(ra_fixture: &str, expect: Expect) {\n@@ -96,6 +120,20 @@ fn node_to_def(\n     })\n }\n \n+#[test]\n+fn external_docs_doc_builtin_type() {\n+    check_external_docs(\n+        r#\"\n+//- /main.rs crate:foo\n+let x: u3$02 = 0;\n+\"#,\n+        Some(&OsStr::new(\"/home/user/project\")),\n+        Some(expect![[r#\"https://doc.rust-lang.org/nightly/core/primitive.u32.html\"#]]),\n+        Some(expect![[r#\"file:///sysroot/share/doc/rust/html/core/primitive.u32.html\"#]]),\n+        Some(&OsStr::new(\"/sysroot\")),\n+    );\n+}\n+\n #[test]\n fn external_docs_doc_url_crate() {\n     check_external_docs(\n@@ -105,7 +143,10 @@ use foo$0::Foo;\n //- /lib.rs crate:foo\n pub struct Foo;\n \"#,\n-        expect![[r#\"https://docs.rs/foo/*/foo/index.html\"#]],\n+        Some(&OsStr::new(\"/home/user/project\")),\n+        Some(expect![[r#\"https://docs.rs/foo/*/foo/index.html\"#]]),\n+        Some(expect![[r#\"file:///home/user/project/doc/foo/index.html\"#]]),\n+        Some(&OsStr::new(\"/sysroot\")),\n     );\n }\n \n@@ -116,7 +157,10 @@ fn external_docs_doc_url_std_crate() {\n //- /main.rs crate:std\n use self$0;\n \"#,\n-        expect![\"https://doc.rust-lang.org/stable/std/index.html\"],\n+        Some(&OsStr::new(\"/home/user/project\")),\n+        Some(expect![\"https://doc.rust-lang.org/stable/std/index.html\"]),\n+        Some(expect![\"file:///sysroot/share/doc/rust/html/std/index.html\"]),\n+        Some(&OsStr::new(\"/sysroot\")),\n     );\n }\n \n@@ -127,7 +171,38 @@ fn external_docs_doc_url_struct() {\n //- /main.rs crate:foo\n pub struct Fo$0o;\n \"#,\n-        expect![[r#\"https://docs.rs/foo/*/foo/struct.Foo.html\"#]],\n+        Some(&OsStr::new(\"/home/user/project\")),\n+        Some(expect![[r#\"https://docs.rs/foo/*/foo/struct.Foo.html\"#]]),\n+        Some(expect![[r#\"file:///home/user/project/doc/foo/struct.Foo.html\"#]]),\n+        Some(&OsStr::new(\"/sysroot\")),\n+    );\n+}\n+\n+#[test]\n+fn external_docs_doc_url_windows_backslash_path() {\n+    check_external_docs(\n+        r#\"\n+//- /main.rs crate:foo\n+pub struct Fo$0o;\n+\"#,\n+        Some(&OsStr::new(r\"C:\\Users\\user\\project\")),\n+        Some(expect![[r#\"https://docs.rs/foo/*/foo/struct.Foo.html\"#]]),\n+        Some(expect![[r#\"file:///C:/Users/user/project/doc/foo/struct.Foo.html\"#]]),\n+        Some(&OsStr::new(\"/sysroot\")),\n+    );\n+}\n+\n+#[test]\n+fn external_docs_doc_url_windows_slash_path() {\n+    check_external_docs(\n+        r#\"\n+//- /main.rs crate:foo\n+pub struct Fo$0o;\n+\"#,\n+        Some(&OsStr::new(r\"C:/Users/user/project\")),\n+        Some(expect![[r#\"https://docs.rs/foo/*/foo/struct.Foo.html\"#]]),\n+        Some(expect![[r#\"file:///C:/Users/user/project/doc/foo/struct.Foo.html\"#]]),\n+        Some(&OsStr::new(\"/sysroot\")),\n     );\n }\n \n@@ -140,7 +215,10 @@ pub struct Foo {\n     field$0: ()\n }\n \"#,\n-        expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#structfield.field\"##]],\n+        None,\n+        Some(expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#structfield.field\"##]]),\n+        None,\n+        None,\n     );\n }\n \n@@ -151,7 +229,10 @@ fn external_docs_doc_url_fn() {\n //- /main.rs crate:foo\n pub fn fo$0o() {}\n \"#,\n-        expect![[r#\"https://docs.rs/foo/*/foo/fn.foo.html\"#]],\n+        None,\n+        Some(expect![[r#\"https://docs.rs/foo/*/foo/fn.foo.html\"#]]),\n+        None,\n+        None,\n     );\n }\n \n@@ -165,7 +246,10 @@ impl Foo {\n     pub fn method$0() {}\n }\n \"#,\n-        expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#method.method\"##]],\n+        None,\n+        Some(expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#method.method\"##]]),\n+        None,\n+        None,\n     );\n     check_external_docs(\n         r#\"\n@@ -175,7 +259,10 @@ impl Foo {\n     const CONST$0: () = ();\n }\n \"#,\n-        expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#associatedconstant.CONST\"##]],\n+        None,\n+        Some(expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#associatedconstant.CONST\"##]]),\n+        None,\n+        None,\n     );\n }\n \n@@ -192,7 +279,10 @@ impl Trait for Foo {\n     pub fn method$0() {}\n }\n \"#,\n-        expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#method.method\"##]],\n+        None,\n+        Some(expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#method.method\"##]]),\n+        None,\n+        None,\n     );\n     check_external_docs(\n         r#\"\n@@ -205,7 +295,10 @@ impl Trait for Foo {\n     const CONST$0: () = ();\n }\n \"#,\n-        expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#associatedconstant.CONST\"##]],\n+        None,\n+        Some(expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#associatedconstant.CONST\"##]]),\n+        None,\n+        None,\n     );\n     check_external_docs(\n         r#\"\n@@ -218,7 +311,10 @@ impl Trait for Foo {\n     type Type$0 = ();\n }\n \"#,\n-        expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#associatedtype.Type\"##]],\n+        None,\n+        Some(expect![[r##\"https://docs.rs/foo/*/foo/struct.Foo.html#associatedtype.Type\"##]]),\n+        None,\n+        None,\n     );\n }\n \n@@ -231,7 +327,10 @@ pub trait Foo {\n     fn method$0();\n }\n \"#,\n-        expect![[r##\"https://docs.rs/foo/*/foo/trait.Foo.html#tymethod.method\"##]],\n+        None,\n+        Some(expect![[r##\"https://docs.rs/foo/*/foo/trait.Foo.html#tymethod.method\"##]]),\n+        None,\n+        None,\n     );\n     check_external_docs(\n         r#\"\n@@ -240,7 +339,10 @@ pub trait Foo {\n     const CONST$0: ();\n }\n \"#,\n-        expect![[r##\"https://docs.rs/foo/*/foo/trait.Foo.html#associatedconstant.CONST\"##]],\n+        None,\n+        Some(expect![[r##\"https://docs.rs/foo/*/foo/trait.Foo.html#associatedconstant.CONST\"##]]),\n+        None,\n+        None,\n     );\n     check_external_docs(\n         r#\"\n@@ -249,7 +351,10 @@ pub trait Foo {\n     type Type$0;\n }\n \"#,\n-        expect![[r##\"https://docs.rs/foo/*/foo/trait.Foo.html#associatedtype.Type\"##]],\n+        None,\n+        Some(expect![[r##\"https://docs.rs/foo/*/foo/trait.Foo.html#associatedtype.Type\"##]]),\n+        None,\n+        None,\n     );\n }\n \n@@ -260,7 +365,10 @@ fn external_docs_trait() {\n //- /main.rs crate:foo\n trait Trait$0 {}\n \"#,\n-        expect![[r#\"https://docs.rs/foo/*/foo/trait.Trait.html\"#]],\n+        None,\n+        Some(expect![[r#\"https://docs.rs/foo/*/foo/trait.Trait.html\"#]]),\n+        None,\n+        None,\n     )\n }\n \n@@ -273,7 +381,10 @@ pub mod foo {\n     pub mod ba$0r {}\n }\n \"#,\n-        expect![[r#\"https://docs.rs/foo/*/foo/foo/bar/index.html\"#]],\n+        None,\n+        Some(expect![[r#\"https://docs.rs/foo/*/foo/foo/bar/index.html\"#]]),\n+        None,\n+        None,\n     )\n }\n \n@@ -294,7 +405,10 @@ fn foo() {\n     let bar: wrapper::It$0em;\n }\n         \"#,\n-        expect![[r#\"https://docs.rs/foo/*/foo/wrapper/module/struct.Item.html\"#]],\n+        None,\n+        Some(expect![[r#\"https://docs.rs/foo/*/foo/wrapper/module/struct.Item.html\"#]]),\n+        None,\n+        None,\n     )\n }\n "}, {"sha": "1af4d39265f43d9b5cddbdfb601abc824b2249cb", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4116a5e8ef956066c9aca51e3adbaa1647fcb/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4116a5e8ef956066c9aca51e3adbaa1647fcb/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=c9b4116a5e8ef956066c9aca51e3adbaa1647fcb", "patch": "@@ -61,7 +61,7 @@ mod view_item_tree;\n mod shuffle_crate_graph;\n mod fetch_crates;\n \n-use std::sync::Arc;\n+use std::{ffi::OsStr, sync::Arc};\n \n use cfg::CfgOptions;\n use fetch_crates::CrateInfo;\n@@ -467,12 +467,19 @@ impl Analysis {\n         self.with_db(|db| moniker::moniker(db, position))\n     }\n \n-    /// Return URL(s) for the documentation of the symbol under the cursor.\n+    /// Returns URL(s) for the documentation of the symbol under the cursor.\n+    /// # Arguments\n+    /// * `position` - Position in the file.\n+    /// * `target_dir` - Directory where the build output is storeda.\n     pub fn external_docs(\n         &self,\n         position: FilePosition,\n-    ) -> Cancellable<Option<doc_links::DocumentationLink>> {\n-        self.with_db(|db| doc_links::external_docs(db, &position))\n+        target_dir: Option<&OsStr>,\n+        sysroot: Option<&OsStr>,\n+    ) -> Cancellable<doc_links::DocumentationLinks> {\n+        self.with_db(|db| {\n+            doc_links::external_docs(db, &position, target_dir, sysroot).unwrap_or_default()\n+        })\n     }\n \n     /// Computes parameter information at the given position."}, {"sha": "e821cae00ac9ff8fa28f1238f3c4a32e455a7fb8", "filename": "crates/project-model/src/cargo_workspace.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4116a5e8ef956066c9aca51e3adbaa1647fcb/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4116a5e8ef956066c9aca51e3adbaa1647fcb/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs?ref=c9b4116a5e8ef956066c9aca51e3adbaa1647fcb", "patch": "@@ -32,6 +32,7 @@ pub struct CargoWorkspace {\n     packages: Arena<PackageData>,\n     targets: Arena<TargetData>,\n     workspace_root: AbsPathBuf,\n+    target_directory: AbsPathBuf,\n }\n \n impl ops::Index<Package> for CargoWorkspace {\n@@ -414,7 +415,10 @@ impl CargoWorkspace {\n         let workspace_root =\n             AbsPathBuf::assert(PathBuf::from(meta.workspace_root.into_os_string()));\n \n-        CargoWorkspace { packages, targets, workspace_root }\n+        let target_directory =\n+            AbsPathBuf::assert(PathBuf::from(meta.target_directory.into_os_string()));\n+\n+        CargoWorkspace { packages, targets, workspace_root, target_directory }\n     }\n \n     pub fn packages(&self) -> impl Iterator<Item = Package> + ExactSizeIterator + '_ {\n@@ -432,6 +436,10 @@ impl CargoWorkspace {\n         &self.workspace_root\n     }\n \n+    pub fn target_directory(&self) -> &AbsPath {\n+        &self.target_directory\n+    }\n+\n     pub fn package_flag(&self, package: &PackageData) -> String {\n         if self.is_unique(&package.name) {\n             package.name.clone()"}, {"sha": "51874382a8b4c2f751bef4f315a35a83ae48a73f", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4116a5e8ef956066c9aca51e3adbaa1647fcb/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4116a5e8ef956066c9aca51e3adbaa1647fcb/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=c9b4116a5e8ef956066c9aca51e3adbaa1647fcb", "patch": "@@ -1036,6 +1036,10 @@ impl Config {\n         self.experimental(\"codeActionGroup\")\n     }\n \n+    pub fn local_docs(&self) -> bool {\n+        self.experimental(\"localDocs\")\n+    }\n+\n     pub fn open_server_logs(&self) -> bool {\n         self.experimental(\"openServerLogs\")\n     }"}, {"sha": "3a208865a7868e47ffe6dfc55853cd61eb9c81b0", "filename": "crates/rust-analyzer/src/handlers/request.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4116a5e8ef956066c9aca51e3adbaa1647fcb/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4116a5e8ef956066c9aca51e3adbaa1647fcb/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs?ref=c9b4116a5e8ef956066c9aca51e3adbaa1647fcb", "patch": "@@ -40,8 +40,8 @@ use crate::{\n     global_state::{GlobalState, GlobalStateSnapshot},\n     line_index::LineEndings,\n     lsp_ext::{\n-        self, CrateInfoResult, FetchDependencyListParams, FetchDependencyListResult,\n-        PositionOrRange, ViewCrateGraphParams, WorkspaceSymbolParams,\n+        self, CrateInfoResult, ExternalDocsPair, ExternalDocsResponse, FetchDependencyListParams,\n+        FetchDependencyListResult, PositionOrRange, ViewCrateGraphParams, WorkspaceSymbolParams,\n     },\n     lsp_utils::{all_edits_are_disjoint, invalid_params_error},\n     to_proto, LspError, Result,\n@@ -1535,13 +1535,40 @@ pub(crate) fn handle_semantic_tokens_range(\n pub(crate) fn handle_open_docs(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::TextDocumentPositionParams,\n-) -> Result<Option<lsp_types::Url>> {\n+) -> Result<ExternalDocsResponse> {\n     let _p = profile::span(\"handle_open_docs\");\n     let position = from_proto::file_position(&snap, params)?;\n \n-    let remote = snap.analysis.external_docs(position)?;\n+    let ws_and_sysroot = snap.workspaces.iter().find_map(|ws| match ws {\n+        ProjectWorkspace::Cargo { cargo, sysroot, .. } => Some((cargo, sysroot.as_ref().ok())),\n+        ProjectWorkspace::Json { .. } => None,\n+        ProjectWorkspace::DetachedFiles { .. } => None,\n+    });\n \n-    Ok(remote.and_then(|remote| Url::parse(&remote).ok()))\n+    let (cargo, sysroot) = match ws_and_sysroot {\n+        Some((ws, sysroot)) => (Some(ws), sysroot),\n+        _ => (None, None),\n+    };\n+\n+    let sysroot = sysroot.map(|p| p.root().as_os_str());\n+    let target_dir = cargo.map(|cargo| cargo.target_directory()).map(|p| p.as_os_str());\n+\n+    let Ok(remote_urls) = snap.analysis.external_docs(position, target_dir, sysroot) else {\n+        return if snap.config.local_docs() {\n+            Ok(ExternalDocsResponse::WithLocal(Default::default()))\n+            } else {\n+            Ok(ExternalDocsResponse::Simple(None))\n+            }\n+    };\n+\n+    let web = remote_urls.web_url.and_then(|it| Url::parse(&it).ok());\n+    let local = remote_urls.local_url.and_then(|it| Url::parse(&it).ok());\n+\n+    if snap.config.local_docs() {\n+        Ok(ExternalDocsResponse::WithLocal(ExternalDocsPair { web, local }))\n+    } else {\n+        Ok(ExternalDocsResponse::Simple(web))\n+    }\n }\n \n pub(crate) fn handle_open_cargo_toml("}, {"sha": "4d67c8b305fe338bfe0048af521b4c094dfa477e", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4116a5e8ef956066c9aca51e3adbaa1647fcb/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4116a5e8ef956066c9aca51e3adbaa1647fcb/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=c9b4116a5e8ef956066c9aca51e3adbaa1647fcb", "patch": "@@ -508,10 +508,24 @@ pub enum ExternalDocs {}\n \n impl Request for ExternalDocs {\n     type Params = lsp_types::TextDocumentPositionParams;\n-    type Result = Option<lsp_types::Url>;\n+    type Result = ExternalDocsResponse;\n     const METHOD: &'static str = \"experimental/externalDocs\";\n }\n \n+#[derive(Debug, PartialEq, Serialize, Deserialize, Clone)]\n+#[serde(untagged)]\n+pub enum ExternalDocsResponse {\n+    Simple(Option<lsp_types::Url>),\n+    WithLocal(ExternalDocsPair),\n+}\n+\n+#[derive(Debug, Default, PartialEq, Serialize, Deserialize, Clone)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct ExternalDocsPair {\n+    pub web: Option<lsp_types::Url>,\n+    pub local: Option<lsp_types::Url>,\n+}\n+\n pub enum OpenCargoToml {}\n \n impl Request for OpenCargoToml {"}, {"sha": "bc58aa7220dc02aa9474f9f782ddcfe422854487", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c9b4116a5e8ef956066c9aca51e3adbaa1647fcb/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/c9b4116a5e8ef956066c9aca51e3adbaa1647fcb/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=c9b4116a5e8ef956066c9aca51e3adbaa1647fcb", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: fdf1afd34548abbc\n+lsp_ext.rs hash: 2d60bbffe70ae198\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:\n@@ -386,14 +386,26 @@ rust-analyzer supports only one `kind`, `\"cargo\"`. The `args` for `\"cargo\"` look\n \n ## Open External Documentation\n \n-This request is sent from client to server to get a URL to documentation for the symbol under the cursor, if available.\n+This request is sent from the client to the server to obtain web and local URL(s) for documentation related to the symbol under the cursor, if available.\n \n-**Method** `experimental/externalDocs`\n+**Method:** `experimental/externalDocs`\n \n-**Request:**: `TextDocumentPositionParams`\n+**Request:** `TextDocumentPositionParams`\n+\n+**Response:** `string | null`\n \n-**Response** `string | null`\n+## Local Documentation\n \n+**Experimental Client Capability:** `{ \"localDocs\": boolean }`\n+\n+If this capability is set, the `Open External Documentation` request returned from the server will have the following structure:\n+\n+```typescript\n+interface ExternalDocsResponse {\n+    web?: string;\n+    local?: string;\n+}\n+```\n \n ## Analyzer Status\n \n@@ -863,7 +875,7 @@ export interface Diagnostic {\n export interface FetchDependencyListParams {}\n ```\n \n-**Response:** \n+**Response:**\n ```typescript\n export interface FetchDependencyListResult {\n     crates: {\n@@ -873,4 +885,4 @@ export interface FetchDependencyListResult {\n     }[];\n }\n ```\n-Returns all crates from this workspace, so it can be used create a viewTree to help navigate the dependency tree.\n\\ No newline at end of file\n+Returns all crates from this workspace, so it can be used create a viewTree to help navigate the dependency tree."}]}