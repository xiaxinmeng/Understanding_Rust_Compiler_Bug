{"sha": "f5332769d58c5e8d9fee36a7e1f8faa4f5c1b861", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MzMyNzY5ZDU4YzVlOGQ5ZmVlMzZhN2UxZjhmYWE0ZjVjMWI4NjE=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-21T19:05:57Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-21T19:30:53Z"}, "message": "Convert atomic intrinsics away from old argument modes (partial #3200)", "tree": {"sha": "cd96f3ade46c9ecba55ba9ab1cb1783f6589596b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd96f3ade46c9ecba55ba9ab1cb1783f6589596b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5332769d58c5e8d9fee36a7e1f8faa4f5c1b861", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5332769d58c5e8d9fee36a7e1f8faa4f5c1b861", "html_url": "https://github.com/rust-lang/rust/commit/f5332769d58c5e8d9fee36a7e1f8faa4f5c1b861", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5332769d58c5e8d9fee36a7e1f8faa4f5c1b861/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9423302c82b0974315c7f2637f72c00ab3c26a18", "url": "https://api.github.com/repos/rust-lang/rust/commits/9423302c82b0974315c7f2637f72c00ab3c26a18", "html_url": "https://github.com/rust-lang/rust/commit/9423302c82b0974315c7f2637f72c00ab3c26a18"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "50c86ddd86a3c1c502fa9b8cdb1ceedea777170b", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f5332769d58c5e8d9fee36a7e1f8faa4f5c1b861/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5332769d58c5e8d9fee36a7e1f8faa4f5c1b861/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=f5332769d58c5e8d9fee36a7e1f8faa4f5c1b861", "patch": "@@ -799,64 +799,66 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::foreign_item,\n     let fcx = new_fn_ctxt_w_id(ccx, path, decl, item.id,\n                                some(substs), some(item.span));\n     let mut bcx = top_scope_block(fcx, none), lltop = bcx.llbb;\n-    match check *item.ident {\n-      ~\"atomic_xchng\" => {\n+    match *item.ident {\n+      // NB: Transitionary, de-mode-ing. Remove the first string of each\n+      // pattern when the old intrinsics are gone.\n+      ~\"atomic_xchng\" | ~\"atomic_xchg\" => {\n         let old = AtomicRMW(bcx, Xchg,\n                   get_param(decl, first_real_arg),\n                   get_param(decl, first_real_arg + 1u),\n                   SequentiallyConsistent);\n         Store(bcx, old, fcx.llretptr);\n       }\n-      ~\"atomic_xchng_acq\" => {\n+      ~\"atomic_xchng_acq\" | ~\"atomic_xchg_acq\" => {\n         let old = AtomicRMW(bcx, Xchg,\n                   get_param(decl, first_real_arg),\n                   get_param(decl, first_real_arg + 1u),\n                   Acquire);\n         Store(bcx, old, fcx.llretptr);\n       }\n-      ~\"atomic_xchng_rel\" => {\n+      ~\"atomic_xchng_rel\" | ~\"atomic_xchg_rel\" => {\n         let old = AtomicRMW(bcx, Xchg,\n                   get_param(decl, first_real_arg),\n                   get_param(decl, first_real_arg + 1u),\n                   Release);\n         Store(bcx, old, fcx.llretptr);\n       }\n-      ~\"atomic_add\" => {\n+      ~\"atomic_add\" | ~\"atomic_xadd\" => {\n         let old = AtomicRMW(bcx, lib::llvm::Add,\n                   get_param(decl, first_real_arg),\n                   get_param(decl, first_real_arg + 1u),\n                   SequentiallyConsistent);\n         Store(bcx, old, fcx.llretptr);\n       }\n-      ~\"atomic_add_acq\" => {\n+      ~\"atomic_add_acq\" | ~\"atomic_xadd_acq\" => {\n         let old = AtomicRMW(bcx, lib::llvm::Add,\n                   get_param(decl, first_real_arg),\n                   get_param(decl, first_real_arg + 1u),\n                   Acquire);\n         Store(bcx, old, fcx.llretptr);\n       }\n-      ~\"atomic_add_rel\" => {\n+      ~\"atomic_add_rel\" | ~\"atomic_xadd_rel\" => {\n         let old = AtomicRMW(bcx, lib::llvm::Add,\n                   get_param(decl, first_real_arg),\n                   get_param(decl, first_real_arg + 1u),\n                   Release);\n         Store(bcx, old, fcx.llretptr);\n       }\n-      ~\"atomic_sub\" => {\n+      ~\"atomic_sub\" | ~\"atomic_xsub\" => {\n         let old = AtomicRMW(bcx, lib::llvm::Sub,\n                   get_param(decl, first_real_arg),\n                   get_param(decl, first_real_arg + 1u),\n                   SequentiallyConsistent);\n         Store(bcx, old, fcx.llretptr);\n       }\n-      ~\"atomic_sub_acq\" => {\n+      ~\"atomic_sub_acq\" | ~\"atomic_xsub_acq\" => {\n         let old = AtomicRMW(bcx, lib::llvm::Sub,\n                   get_param(decl, first_real_arg),\n                   get_param(decl, first_real_arg + 1u),\n                   Acquire);\n         Store(bcx, old, fcx.llretptr);\n       }\n-      ~\"atomic_sub_rel\" => {\n+      ~\"atomic_sub_rel\" | ~\"atomic_xsub_rel\" => {\n         let old = AtomicRMW(bcx, lib::llvm::Sub,\n                   get_param(decl, first_real_arg),\n                   get_param(decl, first_real_arg + 1u),\n@@ -980,6 +982,9 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::foreign_item,\n                                    lv_temporary),\n                                arg_vals(~[frameaddress_val]), ignore);\n       }\n+      _ => {\n+          ccx.sess.span_bug(item.span, ~\"unknown intrinsic\");\n+      }\n     }\n     build_return(bcx);\n     finish_fn(fcx, lltop);"}, {"sha": "93f5d4e996f15a43e119ac7d0b7da668f74dbaa0", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f5332769d58c5e8d9fee36a7e1f8faa4f5c1b861/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5332769d58c5e8d9fee36a7e1f8faa4f5c1b861/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=f5332769d58c5e8d9fee36a7e1f8faa4f5c1b861", "patch": "@@ -64,7 +64,7 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n         none    => ccx.sess.bug(fmt!{\"type_uses_for: unbound item ID %?\",\n                                      fn_id_loc})\n     };\n-    match check map_node {\n+    match map_node {\n       ast_map::node_item(@{node: item_fn(_, _, body), _}, _) |\n       ast_map::node_method(@{body, _}, _, _) => {\n         handle_body(cx, body);\n@@ -81,7 +81,7 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n       ast_map::node_foreign_item(i@@{node: foreign_item_fn(_, _), _},\n                                  abi, _) => {\n         if abi == foreign_abi_rust_intrinsic {\n-            let flags = match check *i.ident {\n+            let flags = match *i.ident {\n               ~\"size_of\" |  ~\"pref_align_of\" | ~\"min_align_of\" |\n               ~\"init\" |  ~\"reinterpret_cast\" |\n               ~\"move_val\" | ~\"move_val_init\" => {\n@@ -90,6 +90,11 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n               ~\"get_tydesc\" | ~\"needs_drop\" => {\n                 use_tydesc\n               }\n+              // NB: new intrinsics\n+              ~\"atomic_xchg\"     | ~\"atomic_xadd\"     | ~\"atomic_xsub\" |\n+              ~\"atomic_xchg_acq\" | ~\"atomic_xadd_acq\" | ~\"atomic_xsub_acq\" |\n+              ~\"atomic_xchg_rel\" | ~\"atomic_xadd_rel\" | ~\"atomic_xsub_rel\" |\n+              // old intrinsics\n               ~\"atomic_xchng\" | ~\"atomic_add\" | ~\"atomic_sub\" |\n               ~\"atomic_xchng_acq\" | ~\"atomic_add_acq\" | ~\"atomic_sub_acq\" |\n               ~\"atomic_xchng_rel\" | ~\"atomic_add_rel\" | ~\"atomic_sub_rel\" => {\n@@ -98,6 +103,7 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n               ~\"visit_tydesc\" | ~\"forget\" | ~\"addr_of\" => {\n                 0u\n               }\n+              _ => fail ~\"unknown intrinsic in type_use\"\n             };\n             for uint::range(0u, n_tps) |n| { cx.uses[n] |= flags;}\n         }\n@@ -108,7 +114,7 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n       ast_map::node_dtor(_, dtor, _, _) => {\n         handle_body(cx, dtor.node.body);\n       }\n-\n+      _ => fail ~\"unknown node type in type_use\"\n     }\n     let uses = vec::from_mut(copy cx.uses);\n     ccx.type_use_cache.insert(fn_id, uses);"}, {"sha": "e59a29cfec28bd1de53f2d4eb11d48be1a3e686b", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f5332769d58c5e8d9fee36a7e1f8faa4f5c1b861/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5332769d58c5e8d9fee36a7e1f8faa4f5c1b861/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=f5332769d58c5e8d9fee36a7e1f8faa4f5c1b861", "patch": "@@ -88,7 +88,7 @@ export ty_nil, mk_nil, type_is_nil;\n export ty_trait, mk_trait;\n export ty_param, mk_param, ty_params_to_tys;\n export ty_ptr, mk_ptr, mk_mut_ptr, mk_imm_ptr, mk_nil_ptr, type_is_unsafe_ptr;\n-export ty_rptr, mk_rptr;\n+export ty_rptr, mk_rptr, mk_mut_rptr, mk_imm_rptr;\n export ty_rec, mk_rec;\n export ty_enum, mk_enum, type_is_enum;\n export ty_tup, mk_tup;\n@@ -764,6 +764,13 @@ fn mk_ptr(cx: ctxt, tm: mt) -> t { mk_t(cx, ty_ptr(tm)) }\n \n fn mk_rptr(cx: ctxt, r: region, tm: mt) -> t { mk_t(cx, ty_rptr(r, tm)) }\n \n+fn mk_mut_rptr(cx: ctxt, r: region, ty: t) -> t {\n+    mk_rptr(cx, r, {ty: ty, mutbl: ast::m_mutbl})\n+}\n+fn mk_imm_rptr(cx: ctxt, r: region, ty: t) -> t {\n+    mk_rptr(cx, r, {ty: ty, mutbl: ast::m_imm})\n+}\n+\n fn mk_mut_ptr(cx: ctxt, ty: t) -> t { mk_ptr(cx, {ty: ty,\n                                                   mutbl: ast::m_mutbl}) }\n "}, {"sha": "7947bc6ee183ea8389b3dd33bddf069c64ee6115", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f5332769d58c5e8d9fee36a7e1f8faa4f5c1b861/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5332769d58c5e8d9fee36a7e1f8faa4f5c1b861/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=f5332769d58c5e8d9fee36a7e1f8faa4f5c1b861", "patch": "@@ -2487,6 +2487,7 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n       }\n       ~\"needs_drop\" => (1u, ~[], ty::mk_bool(tcx)),\n \n+      // NB: Old intrinsics.\n       ~\"atomic_xchng\" | ~\"atomic_add\" | ~\"atomic_sub\" |\n       ~\"atomic_xchng_acq\" | ~\"atomic_add_acq\" | ~\"atomic_sub_acq\" |\n       ~\"atomic_xchng_rel\" | ~\"atomic_add_rel\" | ~\"atomic_sub_rel\" => {\n@@ -2495,6 +2496,17 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n          ty::mk_int(tcx))\n       }\n \n+      // NB: Transitionary, de-mode-ing.\n+      ~\"atomic_xchg\"     | ~\"atomic_xadd\"     | ~\"atomic_xsub\" |\n+      ~\"atomic_xchg_acq\" | ~\"atomic_xadd_acq\" | ~\"atomic_xsub_acq\" |\n+      ~\"atomic_xchg_rel\" | ~\"atomic_xadd_rel\" | ~\"atomic_xsub_rel\" => {\n+        (0u, ~[arg(ast::by_val,\n+                   ty::mk_mut_rptr(tcx, ty::re_bound(ty::br_anon(0)),\n+                                   ty::mk_int(tcx))),\n+               arg(ast::by_val, ty::mk_int(tcx))],\n+         ty::mk_int(tcx))\n+      }\n+\n       ~\"get_tydesc\" => {\n         // FIXME (#2712): return *intrinsic::tydesc, not *()\n         (1u, ~[], ty::mk_nil_ptr(tcx))"}]}