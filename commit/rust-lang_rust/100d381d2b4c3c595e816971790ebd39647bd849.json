{"sha": "100d381d2b4c3c595e816971790ebd39647bd849", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMGQzODFkMmI0YzNjNTk1ZTgxNjk3MTc5MGViZDM5NjQ3YmQ4NDk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-20T13:29:24Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-20T13:29:24Z"}, "message": "lint `a += a + b` (possible mis-refactoring of `a = a + b`)", "tree": {"sha": "fa800c7ad22d12acbfc6fe321cfc26f53a5819ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa800c7ad22d12acbfc6fe321cfc26f53a5819ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/100d381d2b4c3c595e816971790ebd39647bd849", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXj3y0AAoJEFbW7qD8Z6xGX6EQAKIKRoK9ojnuSJDefqiE7czH\nc2KQsUFvc7dmIp3q6QlSiFMxhIhP7ZylwSRFoLOHOHFcQi0HpICxVjFUu7lYP8XH\nEMcFYhvPrpZZn0GwfuvBCoO6aWAm/Hb2W4g78FTuBjikSeCFvVtp0OkL/vWh+XI9\n0YwqtB0fCAAkZ3CIkEUDgcManGQ+T6yNTu69GMRmJHx37DV15rl2OojBw0TUvZEI\nsItHuuV8LuvjfuXHb1obY1eDlms9MDfW8A0k6fXZ5LjcwSRrzQ4YLjuiitXBr7tF\ndI2ia/+OKFwfTKKE968vDpQPDOFAL9YX0bJk1ar97SA35RcSrl34Po2SXVBuUAFd\n1nBdgLkBLS0kwFGI3w5f8I+EvIeIytMPegIL3b1126q2c9XWpzbdesANMgW0WKs3\nI3U6K4UCk4bkOkKjFHkDyj/eQfxk+ZSwMdttv6XlT+FSoQFhEgFvxeEn9lq30rwc\nFjd24L3tnC2PI2hLbQiLGAL6laHrgMo1vhmPvujj+JVVuMR7CdSK12oDqqou2ip9\n2AOLsWvRXE0QC5uDN4Ko1qzpArxCSAQypDUj9+vP1Bypd6J04WUCXb+wz+Vuwrff\n6aozV3KNeH3UjH+fEmGLWHolFmJALVQTDR1RNwVTL2sn8s+lQtDIcGQSn+XhkdLX\nmkG1f+8P86b2Wu9LIkzW\n=E8zt\n-----END PGP SIGNATURE-----", "payload": "tree fa800c7ad22d12acbfc6fe321cfc26f53a5819ae\nparent 3ea9a249bc7059952c9a9a5932c2bf7596e236ae\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1469021364 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1469021364 +0200\n\nlint `a += a + b` (possible mis-refactoring of `a = a + b`)"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/100d381d2b4c3c595e816971790ebd39647bd849", "html_url": "https://github.com/rust-lang/rust/commit/100d381d2b4c3c595e816971790ebd39647bd849", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/100d381d2b4c3c595e816971790ebd39647bd849/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ea9a249bc7059952c9a9a5932c2bf7596e236ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ea9a249bc7059952c9a9a5932c2bf7596e236ae", "html_url": "https://github.com/rust-lang/rust/commit/3ea9a249bc7059952c9a9a5932c2bf7596e236ae"}], "stats": {"total": 115, "additions": 114, "deletions": 1}, "files": [{"sha": "3327482f09d52e0f67c58bc6ca6b3f819a123ca6", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 78, "deletions": 1, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/100d381d2b4c3c595e816971790ebd39647bd849/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100d381d2b4c3c595e816971790ebd39647bd849/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=100d381d2b4c3c595e816971790ebd39647bd849", "patch": "@@ -38,12 +38,31 @@ declare_lint! {\n     \"assigning the result of an operation on a variable to that same variable\"\n }\n \n+/// **What it does:** Check for `a op= a op b` or `a op= b op a` patterns.\n+///\n+/// **Why is this bad?** Most likely these are bugs where one meant to write `a op= b`\n+///\n+/// **Known problems:** Someone might actually mean `a op= a op b`, but that should rather be written as `a = (2 * a) op b` where applicable.\n+///\n+/// **Example:**\n+///\n+/// ```rust\n+/// let mut a = 5;\n+/// ...\n+/// a += a + b;\n+/// ```\n+declare_lint! {\n+    pub MISREFACTORED_ASSIGN_OP,\n+    Warn,\n+    \"having a variable on both sides of an assign op\"\n+}\n+\n #[derive(Copy, Clone, Default)]\n pub struct AssignOps;\n \n impl LintPass for AssignOps {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(ASSIGN_OPS, ASSIGN_OP_PATTERN)\n+        lint_array!(ASSIGN_OPS, ASSIGN_OP_PATTERN, MISREFACTORED_ASSIGN_OP)\n     }\n }\n \n@@ -59,6 +78,40 @@ impl LateLintPass for AssignOps {\n                                        \"replace it with\",\n                                        format!(\"{} = {}\", lhs, sugg::make_binop(higher::binop(op.node), lhs, rhs)));\n                 });\n+                if let hir::ExprBinary(binop, ref l, ref r) = rhs.node {\n+                    if op.node == binop.node {\n+                        let lint = |assignee: &hir::Expr, rhs: &hir::Expr| {\n+                            let ty = cx.tcx.expr_ty(assignee);\n+                            if ty.walk_shallow().next().is_some() {\n+                                return; // implements_trait does not work with generics\n+                            }\n+                            let rty = cx.tcx.expr_ty(rhs);\n+                            if rty.walk_shallow().next().is_some() {\n+                                return; // implements_trait does not work with generics\n+                            }\n+                            span_lint_and_then(cx,\n+                                               MISREFACTORED_ASSIGN_OP,\n+                                               expr.span,\n+                                               \"variable appears on both sides of an assignment operation\",\n+                                               |db| {\n+                                                   if let (Some(snip_a), Some(snip_r)) = (snippet_opt(cx, assignee.span),\n+                                                                                          snippet_opt(cx, rhs.span)) {\n+                                                       db.span_suggestion(expr.span,\n+                                                                          \"replace it with\",\n+                                                                          format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r));\n+                                                   }\n+                                               });\n+                        };\n+                        // lhs op= l op r\n+                        if SpanlessEq::new(cx).ignore_fn().eq_expr(lhs, l) {\n+                            lint(lhs, r);\n+                        }\n+                        // lhs op= l commutative_op r\n+                        if is_commutative(op.node) && SpanlessEq::new(cx).ignore_fn().eq_expr(lhs, r) {\n+                            lint(lhs, l);\n+                        }\n+                    }\n+                }\n             }\n             hir::ExprAssign(ref assignee, ref e) => {\n                 if let hir::ExprBinary(op, ref l, ref r) = e.node {\n@@ -138,3 +191,27 @@ impl LateLintPass for AssignOps {\n         }\n     }\n }\n+\n+fn is_commutative(op: hir::BinOp_) -> bool {\n+    use rustc::hir::BinOp_::*;\n+    match op {\n+        BiAdd |\n+        BiMul |\n+        BiAnd |\n+        BiOr |\n+        BiBitXor |\n+        BiBitAnd |\n+        BiBitOr |\n+        BiEq |\n+        BiNe => true,\n+        BiSub |\n+        BiDiv |\n+        BiRem |\n+        BiShl |\n+        BiShr |\n+        BiLt |\n+        BiLe |\n+        BiGe |\n+        BiGt => false,\n+    }\n+}"}, {"sha": "1537232bf1828dd326feeba8fb40d988474e5b13", "filename": "tests/compile-fail/assign_ops2.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/100d381d2b4c3c595e816971790ebd39647bd849/tests%2Fcompile-fail%2Fassign_ops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100d381d2b4c3c595e816971790ebd39647bd849/tests%2Fcompile-fail%2Fassign_ops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fassign_ops2.rs?ref=100d381d2b4c3c595e816971790ebd39647bd849", "patch": "@@ -0,0 +1,36 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[allow(unused_assignments)]\n+#[deny(misrefactored_assign_op)]\n+fn main() {\n+    let mut a = 5;\n+    a += a + 1; //~ ERROR variable appears on both sides of an assignment operation\n+    //~^ HELP replace it with\n+    //~| SUGGESTION a += 1\n+    a += 1 + a; //~ ERROR variable appears on both sides of an assignment operation\n+    //~^ HELP replace it with\n+    //~| SUGGESTION a += 1\n+    a -= a - 1; //~ ERROR variable appears on both sides of an assignment operation\n+    //~^ HELP replace it with\n+    //~| SUGGESTION a -= 1\n+    a *= a * 99; //~ ERROR variable appears on both sides of an assignment operation\n+    //~^ HELP replace it with\n+    //~| SUGGESTION a *= 99\n+    a *= 42 * a; //~ ERROR variable appears on both sides of an assignment operation\n+    //~^ HELP replace it with\n+    //~| SUGGESTION a *= 42\n+    a /= a / 2; //~ ERROR variable appears on both sides of an assignment operation\n+    //~^ HELP replace it with\n+    //~| SUGGESTION a /= 2\n+    a %= a % 5; //~ ERROR variable appears on both sides of an assignment operation\n+    //~^ HELP replace it with\n+    //~| SUGGESTION a %= 5\n+    a &= a & 1; //~ ERROR variable appears on both sides of an assignment operation\n+    //~^ HELP replace it with\n+    //~| SUGGESTION a &= 1\n+    a -= 1 - a;\n+    a /= 5 / a;\n+    a %= 42 % a;\n+    a <<= 6 << a;\n+}"}]}