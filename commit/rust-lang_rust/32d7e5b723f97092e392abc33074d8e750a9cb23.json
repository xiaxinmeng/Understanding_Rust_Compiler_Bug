{"sha": "32d7e5b723f97092e392abc33074d8e750a9cb23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZDdlNWI3MjNmOTcwOTJlMzkyYWJjMzMwNzRkOGU3NTBhOWNiMjM=", "commit": {"author": {"name": "Andreas Liljeqvist", "email": "bonega@gmail.com", "date": "2021-08-23T13:44:56Z"}, "committer": {"name": "Andreas Liljeqvist", "email": "bonega@gmail.com", "date": "2021-08-23T13:44:56Z"}, "message": "add `with_start` and `with_end`", "tree": {"sha": "8a9f1d692faf310c638b3021cda9afcbbf1da9de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a9f1d692faf310c638b3021cda9afcbbf1da9de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32d7e5b723f97092e392abc33074d8e750a9cb23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32d7e5b723f97092e392abc33074d8e750a9cb23", "html_url": "https://github.com/rust-lang/rust/commit/32d7e5b723f97092e392abc33074d8e750a9cb23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32d7e5b723f97092e392abc33074d8e750a9cb23/comments", "author": {"login": "bonega", "id": 411677, "node_id": "MDQ6VXNlcjQxMTY3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/411677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonega", "html_url": "https://github.com/bonega", "followers_url": "https://api.github.com/users/bonega/followers", "following_url": "https://api.github.com/users/bonega/following{/other_user}", "gists_url": "https://api.github.com/users/bonega/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonega/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonega/subscriptions", "organizations_url": "https://api.github.com/users/bonega/orgs", "repos_url": "https://api.github.com/users/bonega/repos", "events_url": "https://api.github.com/users/bonega/events{/privacy}", "received_events_url": "https://api.github.com/users/bonega/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bonega", "id": 411677, "node_id": "MDQ6VXNlcjQxMTY3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/411677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonega", "html_url": "https://github.com/bonega", "followers_url": "https://api.github.com/users/bonega/followers", "following_url": "https://api.github.com/users/bonega/following{/other_user}", "gists_url": "https://api.github.com/users/bonega/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonega/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonega/subscriptions", "organizations_url": "https://api.github.com/users/bonega/orgs", "repos_url": "https://api.github.com/users/bonega/repos", "events_url": "https://api.github.com/users/bonega/events{/privacy}", "received_events_url": "https://api.github.com/users/bonega/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d230b92ba7a2a32000be5e207860aa27d1a11113", "url": "https://api.github.com/repos/rust-lang/rust/commits/d230b92ba7a2a32000be5e207860aa27d1a11113", "html_url": "https://github.com/rust-lang/rust/commit/d230b92ba7a2a32000be5e207860aa27d1a11113"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "dcb56d5b2ba1b2f6da3917a6635dfed53305ad38", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32d7e5b723f97092e392abc33074d8e750a9cb23/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d7e5b723f97092e392abc33074d8e750a9cb23/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=32d7e5b723f97092e392abc33074d8e750a9cb23", "patch": "@@ -529,7 +529,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             }),\n             ty::FnPtr(_) => {\n                 let mut ptr = scalar_unit(Pointer);\n-                ptr.valid_range = WrappingRange { start: 1, end: ptr.valid_range.end };\n+                ptr.valid_range = ptr.valid_range.with_start(1);\n                 tcx.intern_layout(Layout::scalar(self, ptr))\n             }\n \n@@ -547,8 +547,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             ty::Ref(_, pointee, _) | ty::RawPtr(ty::TypeAndMut { ty: pointee, .. }) => {\n                 let mut data_ptr = scalar_unit(Pointer);\n                 if !ty.is_unsafe_ptr() {\n-                    data_ptr.valid_range =\n-                        WrappingRange { start: 1, end: data_ptr.valid_range.end };\n+                    data_ptr.valid_range = data_ptr.valid_range.with_start(1);\n                 }\n \n                 let pointee = tcx.normalize_erasing_regions(param_env, pointee);\n@@ -564,8 +563,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     ty::Slice(_) | ty::Str => scalar_unit(Int(dl.ptr_sized_integer(), false)),\n                     ty::Dynamic(..) => {\n                         let mut vtable = scalar_unit(Pointer);\n-                        vtable.valid_range =\n-                            WrappingRange { start: 1, end: vtable.valid_range.end };\n+                        vtable.valid_range = vtable.valid_range.with_start(1);\n                         vtable\n                     }\n                     _ => return Err(LayoutError::Unknown(unsized_part)),"}, {"sha": "6e2f8962eef4899e75c9c3c32a2ddfb327439b47", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/32d7e5b723f97092e392abc33074d8e750a9cb23/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32d7e5b723f97092e392abc33074d8e750a9cb23/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=32d7e5b723f97092e392abc33074d8e750a9cb23", "patch": "@@ -712,6 +712,16 @@ impl WrappingRange {\n     pub fn contains_zero(&self) -> bool {\n         !(self.start <= self.end && self.start != 0)\n     }\n+\n+    /// Returns new `WrappingRange` with replaced `start`\n+    pub fn with_start(&self, start: u128) -> Self {\n+        Self { start, end: self.end }\n+    }\n+\n+    /// Returns new `WrappingRange` with replaced `end`\n+    pub fn with_end(&self, end: u128) -> Self {\n+        Self { start: self.start, end }\n+    }\n }\n \n impl fmt::Debug for WrappingRange {\n@@ -1029,7 +1039,7 @@ impl Niche {\n             return None;\n         }\n \n-        Some((start, Scalar { value, valid_range: WrappingRange { start: v.start, end } }))\n+        Some((start, Scalar { value, valid_range: v.with_end(end) }))\n     }\n }\n "}]}