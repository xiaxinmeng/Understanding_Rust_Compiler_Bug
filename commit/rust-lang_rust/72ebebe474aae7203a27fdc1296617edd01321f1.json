{"sha": "72ebebe474aae7203a27fdc1296617edd01321f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZWJlYmU0NzRhYWU3MjAzYTI3ZmRjMTI5NjYxN2VkZDAxMzIxZjE=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-03-08T23:32:41Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-03-26T16:32:31Z"}, "message": "Use iter::zip in compiler/", "tree": {"sha": "e3c47cd4378cc6370ad588318970b2118099fd2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3c47cd4378cc6370ad588318970b2118099fd2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72ebebe474aae7203a27fdc1296617edd01321f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72ebebe474aae7203a27fdc1296617edd01321f1", "html_url": "https://github.com/rust-lang/rust/commit/72ebebe474aae7203a27fdc1296617edd01321f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72ebebe474aae7203a27fdc1296617edd01321f1/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b", "html_url": "https://github.com/rust-lang/rust/commit/3b1f5e34620d6bfa32a127258e2c2d9f2f4d693b"}], "stats": {"total": 417, "additions": 213, "deletions": 204}, "files": [{"sha": "96277950cfe1a0fbf9489172436ddc6c49f18480", "filename": "compiler/rustc_apfloat/src/ieee.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -2273,6 +2273,7 @@ impl Loss {\n mod sig {\n     use super::{limbs_for_bits, ExpInt, Limb, Loss, LIMB_BITS};\n     use core::cmp::Ordering;\n+    use core::iter;\n     use core::mem;\n \n     pub(super) fn is_all_zeros(limbs: &[Limb]) -> bool {\n@@ -2483,7 +2484,7 @@ mod sig {\n     pub(super) fn add(a: &mut [Limb], b: &[Limb], mut c: Limb) -> Limb {\n         assert!(c <= 1);\n \n-        for (a, &b) in a.iter_mut().zip(b) {\n+        for (a, &b) in iter::zip(a, b) {\n             let (r, overflow) = a.overflowing_add(b);\n             let (r, overflow2) = r.overflowing_add(c);\n             *a = r;\n@@ -2497,7 +2498,7 @@ mod sig {\n     pub(super) fn sub(a: &mut [Limb], b: &[Limb], mut c: Limb) -> Limb {\n         assert!(c <= 1);\n \n-        for (a, &b) in a.iter_mut().zip(b) {\n+        for (a, &b) in iter::zip(a, b) {\n             let (r, overflow) = a.overflowing_sub(b);\n             let (r, overflow2) = r.overflowing_sub(c);\n             *a = r;"}, {"sha": "c648147d108fb4c0e14e440bf0e720db31dcc2cd", "filename": "compiler/rustc_apfloat/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_apfloat%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_apfloat%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Fsrc%2Flib.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -33,6 +33,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![no_std]\n #![forbid(unsafe_code)]\n+#![feature(iter_zip)]\n #![feature(nll)]\n #![cfg_attr(bootstrap, feature(or_patterns))]\n "}, {"sha": "032a4e6c78211a15d89694173a08e448fd2003bd", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -14,6 +14,7 @@\n #![feature(const_fn_transmute)]\n #![feature(const_panic)]\n #![feature(crate_visibility_modifier)]\n+#![feature(iter_zip)]\n #![feature(label_break_value)]\n #![feature(nll)]\n #![cfg_attr(bootstrap, feature(or_patterns))]"}, {"sha": "1e63ca172e7fc0224d5f9f851bf42dddd0bf3e82", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -341,7 +341,7 @@ impl TokenStream {\n     pub fn eq_unspanned(&self, other: &TokenStream) -> bool {\n         let mut t1 = self.trees();\n         let mut t2 = other.trees();\n-        for (t1, t2) in t1.by_ref().zip(t2.by_ref()) {\n+        for (t1, t2) in iter::zip(&mut t1, &mut t2) {\n             if !t1.eq_unspanned(&t2) {\n                 return false;\n             }"}, {"sha": "ea01632d75d6a975d19eea985306df7af3d101e8", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -18,6 +18,7 @@ use rustc_target::spec::abi;\n use smallvec::{smallvec, SmallVec};\n use tracing::debug;\n \n+use std::iter;\n use std::mem;\n \n pub(super) struct ItemLowerer<'a, 'lowering, 'hir> {\n@@ -206,7 +207,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             UseTreeKind::Glob => {}\n             UseTreeKind::Simple(_, id1, id2) => {\n                 for (_, &id) in\n-                    self.expect_full_res_from_use(base_id).skip(1).zip([id1, id2].iter())\n+                    iter::zip(self.expect_full_res_from_use(base_id).skip(1), &[id1, id2])\n                 {\n                     vec.push(id);\n                 }\n@@ -537,7 +538,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 // won't be dealing with macros in the rest of the compiler.\n                 // Essentially a single `use` which imports two names is desugared into\n                 // two imports.\n-                for (res, &new_node_id) in resolutions.zip([id1, id2].iter()) {\n+                for (res, &new_node_id) in iter::zip(resolutions, &[id1, id2]) {\n                     let ident = *ident;\n                     let mut path = path.clone();\n                     for seg in &mut path.segments {"}, {"sha": "192c32803271250ac2d307939a6efedca48392d6", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -33,6 +33,7 @@\n #![feature(crate_visibility_modifier)]\n #![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(box_patterns)]\n+#![feature(iter_zip)]\n #![recursion_limit = \"256\"]\n \n use rustc_ast::node_id::NodeMap;"}, {"sha": "04753926c3e2a7d7bd5d2cee60d201a6fc4a5377", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -1034,7 +1034,7 @@ impl<'a> MethodDef<'a> {\n         // make a series of nested matches, to destructure the\n         // structs. This is actually right-to-left, but it shouldn't\n         // matter.\n-        for (arg_expr, pat) in self_args.iter().zip(patterns) {\n+        for (arg_expr, pat) in iter::zip(self_args, patterns) {\n             body = cx.expr_match(\n                 trait_.span,\n                 arg_expr.clone(),\n@@ -1351,7 +1351,7 @@ impl<'a> MethodDef<'a> {\n             let mut discriminant_test = cx.expr_bool(sp, true);\n \n             let mut first_ident = None;\n-            for (&ident, self_arg) in vi_idents.iter().zip(&self_args) {\n+            for (&ident, self_arg) in iter::zip(&vi_idents, &self_args) {\n                 let self_addr = cx.expr_addr_of(sp, self_arg.clone());\n                 let variant_value =\n                     deriving::call_intrinsic(cx, sp, sym::discriminant_value, vec![self_addr]);\n@@ -1571,9 +1571,7 @@ impl<'a> TraitDef<'a> {\n         let subpats = self.create_subpatterns(cx, paths, mutbl, use_temporaries);\n         let pattern = match *struct_def {\n             VariantData::Struct(..) => {\n-                let field_pats = subpats\n-                    .into_iter()\n-                    .zip(&ident_exprs)\n+                let field_pats = iter::zip(subpats, &ident_exprs)\n                     .map(|(pat, &(sp, ident, ..))| {\n                         if ident.is_none() {\n                             cx.span_bug(sp, \"a braced struct with unnamed fields in `derive`\");"}, {"sha": "d7926ed0e0bce1805d7afaee040aec8fd70f81ed", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -7,6 +7,7 @@\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n+#![feature(iter_zip)]\n #![feature(nll)]\n #![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(proc_macro_internals)]"}, {"sha": "4226ed7d99be13cd1731e63dccd408d1659eccb2", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -24,6 +24,7 @@ use tracing::{debug, info};\n use std::ffi::{CStr, CString};\n use std::fs::File;\n use std::io;\n+use std::iter;\n use std::path::Path;\n use std::ptr;\n use std::slice;\n@@ -916,9 +917,7 @@ impl ThinLTOKeysMap {\n         modules: &[llvm::ThinLTOModule],\n         names: &[CString],\n     ) -> Self {\n-        let keys = modules\n-            .iter()\n-            .zip(names.iter())\n+        let keys = iter::zip(modules, names)\n             .map(|(module, name)| {\n                 let key = build_string(|rust_str| unsafe {\n                     llvm::LLVMRustComputeLTOCacheKey(rust_str, module.identifier, data.0);"}, {"sha": "896e56a9a1e3a6410d128cb6fccccad337e47464", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -21,6 +21,7 @@ use rustc_target::abi::{self, Align, Size};\n use rustc_target::spec::{HasTargetSpec, Target};\n use std::borrow::Cow;\n use std::ffi::CStr;\n+use std::iter;\n use std::ops::{Deref, Range};\n use std::ptr;\n use tracing::debug;\n@@ -1352,18 +1353,14 @@ impl Builder<'a, 'll, 'tcx> {\n \n         let param_tys = self.cx.func_params_types(fn_ty);\n \n-        let all_args_match = param_tys\n-            .iter()\n-            .zip(args.iter().map(|&v| self.val_ty(v)))\n+        let all_args_match = iter::zip(&param_tys, args.iter().map(|&v| self.val_ty(v)))\n             .all(|(expected_ty, actual_ty)| *expected_ty == actual_ty);\n \n         if all_args_match {\n             return Cow::Borrowed(args);\n         }\n \n-        let casted_args: Vec<_> = param_tys\n-            .into_iter()\n-            .zip(args.iter())\n+        let casted_args: Vec<_> = iter::zip(param_tys, args)\n             .enumerate()\n             .map(|(i, (expected_ty, &actual_val))| {\n                 let actual_ty = self.val_ty(actual_val);"}, {"sha": "d90e93f116cc1c034aa015172af24e2fdc73ccfd", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -1962,9 +1962,7 @@ fn prepare_enum_metadata(\n \n     let discriminant_type_metadata = |discr: Primitive| {\n         let enumerators_metadata: Vec<_> = match enum_type.kind() {\n-            ty::Adt(def, _) => def\n-                .discriminants(tcx)\n-                .zip(&def.variants)\n+            ty::Adt(def, _) => iter::zip(def.discriminants(tcx), &def.variants)\n                 .map(|((_, discr), v)| {\n                     let name = v.ident.as_str();\n                     let is_unsigned = match discr.ty.kind() {\n@@ -2336,9 +2334,7 @@ fn compute_type_parameters(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>) -> &'ll DIAr\n         if substs.types().next().is_some() {\n             let generics = cx.tcx.generics_of(def.did);\n             let names = get_parameter_names(cx, generics);\n-            let template_params: Vec<_> = substs\n-                .iter()\n-                .zip(names)\n+            let template_params: Vec<_> = iter::zip(substs, names)\n                 .filter_map(|(kind, name)| {\n                     if let GenericArgKind::Type(ty) = kind.unpack() {\n                         let actual_type ="}, {"sha": "e157a38aa03d5838e58bb37f421e6b25f0a4ef3a", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -37,6 +37,7 @@ use rustc_target::abi::{LayoutOf, Primitive, Size};\n use libc::c_uint;\n use smallvec::SmallVec;\n use std::cell::RefCell;\n+use std::iter;\n use tracing::debug;\n \n mod create_scope_map;\n@@ -448,9 +449,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             // Again, only create type information if full debuginfo is enabled\n             let template_params: Vec<_> = if cx.sess().opts.debuginfo == DebugInfo::Full {\n                 let names = get_parameter_names(cx, generics);\n-                substs\n-                    .iter()\n-                    .zip(names)\n+                iter::zip(substs, names)\n                     .filter_map(|(kind, name)| {\n                         if let GenericArgKind::Type(ty) = kind.unpack() {\n                             let actual_type ="}, {"sha": "5ca4b226c38fba32a404b06182947fa1428fac09", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -11,6 +11,7 @@\n #![feature(extended_key_value_attributes)]\n #![feature(extern_types)]\n #![feature(in_band_lifetimes)]\n+#![feature(iter_zip)]\n #![feature(nll)]\n #![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]"}, {"sha": "56b4ef7938312a068d95992e2a0513110fc96342", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -8,6 +8,7 @@\n #![feature(nll)]\n #![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(associated_type_bounds)]\n+#![feature(iter_zip)]\n #![recursion_limit = \"256\"]\n #![feature(box_syntax)]\n "}, {"sha": "91df67b53d21fb6192ebb162a72a327a3c0d587d", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -282,9 +282,7 @@ fn create_funclets<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     IndexVec<mir::BasicBlock, Option<Bx::BasicBlock>>,\n     IndexVec<mir::BasicBlock, Option<Bx::Funclet>>,\n ) {\n-    block_bxs\n-        .iter_enumerated()\n-        .zip(cleanup_kinds)\n+    iter::zip(block_bxs.iter_enumerated(), cleanup_kinds)\n         .map(|((bb, &llbb), cleanup_kind)| {\n             match *cleanup_kind {\n                 CleanupKind::Funclet if base::wants_msvc_seh(bx.sess()) => {}"}, {"sha": "633c64af3c59080d319975059fd52c6ce46f3a00", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -2214,9 +2214,7 @@ pub fn is_case_difference(sm: &SourceMap, suggested: &str, sp: Span) -> bool {\n     };\n     let ascii_confusables = &['c', 'f', 'i', 'k', 'o', 's', 'u', 'v', 'w', 'x', 'y', 'z'];\n     // All the chars that differ in capitalization are confusable (above):\n-    let confusable = found\n-        .chars()\n-        .zip(suggested.chars())\n+    let confusable = iter::zip(found.chars(), suggested.chars())\n         .filter(|(f, s)| f != s)\n         .all(|(f, s)| (ascii_confusables.contains(&f) || ascii_confusables.contains(&s)));\n     confusable && found.to_lowercase() == suggested.to_lowercase()"}, {"sha": "6f3ce20fc8ed28df5373a5490cf94872f0efff61", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -6,6 +6,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(backtrace)]\n #![feature(extended_key_value_attributes)]\n+#![feature(iter_zip)]\n #![feature(nll)]\n \n #[macro_use]"}, {"sha": "ec122e7be6e8efd52462a4ca5f5ec2685b9ec639", "filename": "compiler/rustc_errors/src/styled_buffer.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -1,6 +1,7 @@\n // Code for creating styled buffers\n \n use crate::snippet::{Style, StyledString};\n+use std::iter;\n \n #[derive(Debug)]\n pub struct StyledBuffer {\n@@ -20,11 +21,11 @@ impl StyledBuffer {\n         let mut output: Vec<Vec<StyledString>> = vec![];\n         let mut styled_vec: Vec<StyledString> = vec![];\n \n-        for (row, row_style) in self.text.iter().zip(&self.styles) {\n+        for (row, row_style) in iter::zip(&self.text, &self.styles) {\n             let mut current_style = Style::NoStyle;\n             let mut current_text = String::new();\n \n-            for (&c, &s) in row.iter().zip(row_style) {\n+            for (&c, &s) in iter::zip(row, row_style) {\n                 if s != current_style {\n                     if !current_text.is_empty() {\n                         styled_vec.push(StyledString { text: current_text, style: current_style });"}, {"sha": "5fb85867501673b5e03c36c74e75f3e8a5c3c2c0", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -2,6 +2,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(destructuring_assignment)]\n+#![feature(iter_zip)]\n #![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]"}, {"sha": "3497e5ad543a1fcb6cb2b3f5d8df86086543f41d", "filename": "compiler/rustc_expand/src/mbe/macro_check.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -116,6 +116,8 @@ use rustc_span::{symbol::MacroRulesNormalizedIdent, MultiSpan, Span};\n \n use smallvec::SmallVec;\n \n+use std::iter;\n+\n /// Stack represented as linked list.\n ///\n /// Those are used for environments because they grow incrementally and are not mutable.\n@@ -204,7 +206,7 @@ pub(super) fn check_meta_variables(\n         sess.span_diagnostic.span_bug(span, \"length mismatch between LHSes and RHSes\")\n     }\n     let mut valid = true;\n-    for (lhs, rhs) in lhses.iter().zip(rhses.iter()) {\n+    for (lhs, rhs) in iter::zip(lhses, rhses) {\n         let mut binders = Binders::default();\n         check_binders(sess, node_id, lhs, &Stack::Empty, &mut binders, &Stack::Empty, &mut valid);\n         check_occurrences(sess, node_id, rhs, &Stack::Empty, &binders, &Stack::Empty, &mut valid);"}, {"sha": "cfea5092bc30655f7cac2acf11e1bb7e99a9e9a1", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -356,7 +356,7 @@ where\n {\n     assert_eq!(out_vec.len(), in_vec.len());\n     let mut changed = false;\n-    for (out_elem, in_elem) in out_vec.iter_mut().zip(in_vec.iter()) {\n+    for (out_elem, in_elem) in iter::zip(out_vec, in_vec) {\n         let old_val = *out_elem;\n         let new_val = op(old_val, *in_elem);\n         *out_elem = new_val;\n@@ -842,7 +842,7 @@ impl<R: Idx, C: Idx> BitMatrix<R, C> {\n         let (write_start, write_end) = self.range(write);\n         let words = &mut self.words[..];\n         let mut changed = false;\n-        for (read_index, write_index) in (read_start..read_end).zip(write_start..write_end) {\n+        for (read_index, write_index) in iter::zip(read_start..read_end, write_start..write_end) {\n             let word = words[write_index];\n             let new_word = word | words[read_index];\n             words[write_index] = new_word;\n@@ -858,7 +858,7 @@ impl<R: Idx, C: Idx> BitMatrix<R, C> {\n         assert_eq!(with.domain_size(), self.num_columns);\n         let (write_start, write_end) = self.range(write);\n         let mut changed = false;\n-        for (read_index, write_index) in (0..with.words().len()).zip(write_start..write_end) {\n+        for (read_index, write_index) in iter::zip(0..with.words().len(), write_start..write_end) {\n             let word = self.words[write_index];\n             let new_word = word | with.words()[read_index];\n             self.words[write_index] = new_word;"}, {"sha": "3ced3920cfdfe82118fa0914c970dd0bf98c8b97", "filename": "compiler/rustc_index/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Flib.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -2,6 +2,7 @@\n #![feature(const_fn)]\n #![feature(const_panic)]\n #![feature(extend_one)]\n+#![feature(iter_zip)]\n #![feature(unboxed_closures)]\n #![feature(test)]\n #![feature(fn_traits)]"}, {"sha": "f000d491b99a6f69adedeb5716c773a813bc3ce8", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -27,6 +27,7 @@ use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, BoundVar, Const, ToPredicate, Ty, TyCtxt};\n use std::fmt::Debug;\n+use std::iter;\n \n impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     /// This method is meant to be invoked as the final step of a canonical query\n@@ -418,7 +419,8 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n \n         // In terms of our example above, we are iterating over pairs like:\n         // [(?A, Vec<?0>), ('static, '?1), (?B, ?0)]\n-        for (original_value, result_value) in original_values.var_values.iter().zip(result_values) {\n+        for (original_value, result_value) in iter::zip(&original_values.var_values, result_values)\n+        {\n             match result_value.unpack() {\n                 GenericArgKind::Type(result_value) => {\n                     // e.g., here `result_value` might be `?0` in the example above..."}, {"sha": "a18c9569a8cd37174947a9290a3048b2491e8511", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -73,7 +73,7 @@ use rustc_middle::ty::{\n use rustc_span::{sym, BytePos, DesugaringKind, Pos, Span};\n use rustc_target::spec::abi;\n use std::ops::ControlFlow;\n-use std::{cmp, fmt};\n+use std::{cmp, fmt, iter};\n \n mod note;\n \n@@ -963,7 +963,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             ty::GenericParamDefKind::Const { has_default: true } => Some(param.def_id),\n             _ => None,\n         });\n-        for (def_id, actual) in default_params.zip(substs.iter().rev()) {\n+        for (def_id, actual) in iter::zip(default_params, substs.iter().rev()) {\n             match actual.unpack() {\n                 GenericArgKind::Const(c) => {\n                     if self.tcx.const_param_default(def_id).subst(self.tcx, substs) != c {\n@@ -1040,7 +1040,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let len1 = sig1.inputs().len();\n         let len2 = sig2.inputs().len();\n         if len1 == len2 {\n-            for (i, (l, r)) in sig1.inputs().iter().zip(sig2.inputs().iter()).enumerate() {\n+            for (i, (l, r)) in iter::zip(sig1.inputs(), sig2.inputs()).enumerate() {\n                 let (x1, x2) = self.cmp(l, r);\n                 (values.0).0.extend(x1.0);\n                 (values.1).0.extend(x2.0);\n@@ -1161,12 +1161,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     let common_len = cmp::min(len1, len2);\n                     let remainder1: Vec<_> = sub1.types().skip(common_len).collect();\n                     let remainder2: Vec<_> = sub2.types().skip(common_len).collect();\n-                    let common_default_params = remainder1\n-                        .iter()\n-                        .rev()\n-                        .zip(remainder2.iter().rev())\n-                        .filter(|(a, b)| a == b)\n-                        .count();\n+                    let common_default_params =\n+                        iter::zip(remainder1.iter().rev(), remainder2.iter().rev())\n+                            .filter(|(a, b)| a == b)\n+                            .count();\n                     let len = sub1.len() - common_default_params;\n                     let consts_offset = len - sub1.consts().count();\n \n@@ -1297,12 +1295,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n                     const SEPARATOR: &str = \"::\";\n                     let separator_len = SEPARATOR.len();\n-                    let split_idx: usize = t1_str\n-                        .split(SEPARATOR)\n-                        .zip(t2_str.split(SEPARATOR))\n-                        .take_while(|(mod1_str, mod2_str)| mod1_str == mod2_str)\n-                        .map(|(mod_str, _)| mod_str.len() + separator_len)\n-                        .sum();\n+                    let split_idx: usize =\n+                        iter::zip(t1_str.split(SEPARATOR), t2_str.split(SEPARATOR))\n+                            .take_while(|(mod1_str, mod2_str)| mod1_str == mod2_str)\n+                            .map(|(mod_str, _)| mod_str.len() + separator_len)\n+                            .sum();\n \n                     debug!(\n                         \"cmp: separator_len={}, split_idx={}, min_len={}\",\n@@ -1907,7 +1904,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         .find_map(|(path, msg)| (&path_str == path).then_some(msg))\n                     {\n                         let mut show_suggestion = true;\n-                        for (exp_ty, found_ty) in exp_substs.types().zip(found_substs.types()) {\n+                        for (exp_ty, found_ty) in\n+                            iter::zip(exp_substs.types(), found_substs.types())\n+                        {\n                             match *exp_ty.kind() {\n                                 ty::Ref(_, exp_ty, _) => {\n                                     match (exp_ty.kind(), found_ty.kind()) {"}, {"sha": "d352214b57926f908eb36a59c4ac7cec7a4f71fc", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -19,6 +19,7 @@\n #![feature(const_fn)]\n #![feature(const_panic)]\n #![feature(extend_one)]\n+#![feature(iter_zip)]\n #![feature(never_type)]\n #![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(in_band_lifetimes)]"}, {"sha": "0ac4b6b25bbfe54804ae045cd29dfdb8ff922f65", "filename": "compiler/rustc_infer/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -9,6 +9,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::Symbol;\n use rustc_span::{MultiSpan, Span};\n use std::fmt;\n+use std::iter;\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn report_extra_impl_obligation(\n@@ -94,7 +95,7 @@ pub fn report_object_safety_error(\n         note_span\n             .push_span_label(trait_span, \"this trait cannot be made into an object...\".to_string());\n     }\n-    for (span, msg) in multi_span.into_iter().zip(messages.into_iter()) {\n+    for (span, msg) in iter::zip(multi_span, messages) {\n         note_span.push_span_label(span, msg);\n     }\n     err.span_note("}, {"sha": "cf2f1489e0296da95e05d7efc2e08e39a382664f", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -45,6 +45,7 @@ use rustc_target::abi::LayoutOf;\n use tracing::debug;\n \n use std::cell::Cell;\n+use std::iter;\n use std::slice;\n \n /// Information about the registered lints.\n@@ -864,7 +865,7 @@ impl<'tcx> LateContext<'tcx> {\n     pub fn match_def_path(&self, def_id: DefId, path: &[Symbol]) -> bool {\n         let names = self.get_def_path(def_id);\n \n-        names.len() == path.len() && names.into_iter().zip(path.iter()).all(|(a, &b)| a == b)\n+        names.len() == path.len() && iter::zip(names, path).all(|(a, &b)| a == b)\n     }\n \n     /// Gets the absolute path of `def_id` as a vector of `Symbol`."}, {"sha": "c32f5714a6725c9eb807a4047e4d5a06b3fe0671", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -33,6 +33,7 @@\n #![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n #![feature(iter_order_by)]\n+#![feature(iter_zip)]\n #![feature(never_type)]\n #![feature(nll)]\n #![cfg_attr(bootstrap, feature(or_patterns))]"}, {"sha": "9c94bab04e98f6401458c9856c5d66f4a92ef8d0", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -17,6 +17,7 @@ use rustc_target::abi::{Integer, LayoutOf, TagEncoding, VariantIdx, Variants};\n use rustc_target::spec::abi::Abi as SpecAbi;\n \n use std::cmp;\n+use std::iter;\n use std::ops::ControlFlow;\n use tracing::debug;\n \n@@ -1255,7 +1256,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         let sig = self.cx.tcx.fn_sig(def_id);\n         let sig = self.cx.tcx.erase_late_bound_regions(sig);\n \n-        for (input_ty, input_hir) in sig.inputs().iter().zip(decl.inputs) {\n+        for (input_ty, input_hir) in iter::zip(sig.inputs(), decl.inputs) {\n             self.check_type_for_ffi_and_report_errors(input_hir.span, input_ty, false, false);\n         }\n \n@@ -1355,10 +1356,7 @@ impl<'tcx> LateLintPass<'tcx> for VariantSizeDifferences {\n                 layout\n             );\n \n-            let (largest, slargest, largest_index) = enum_definition\n-                .variants\n-                .iter()\n-                .zip(variants)\n+            let (largest, slargest, largest_index) = iter::zip(enum_definition.variants, variants)\n                 .map(|(variant, variant_layout)| {\n                     // Subtract the size of the enum tag.\n                     let bytes = variant_layout.size.bytes().saturating_sub(tag_size);"}, {"sha": "842d2a977189d53e6a7e0102ef8a9e7e9823cd57", "filename": "compiler/rustc_macros/src/symbols/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_macros%2Fsrc%2Fsymbols%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_macros%2Fsrc%2Fsymbols%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsymbols%2Ftests.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -43,7 +43,7 @@ fn test_symbols_macro(input: TokenStream, expected_errors: &[&str]) {\n         \"Macro generated a different number of errors than expected\"\n     );\n \n-    for (found_error, &expected_error) in found_errors.iter().zip(expected_errors.iter()) {\n+    for (found_error, &expected_error) in found_errors.iter().zip(expected_errors) {\n         let found_error_str = format!(\"{}\", found_error);\n         assert_eq!(found_error_str, expected_error);\n     }"}, {"sha": "8a13ceec2211b5cd9e13b95d1614634702de026b", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -27,6 +27,7 @@ use crate::ty::{self, BoundVar, List, Region, TyCtxt};\n use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable;\n use smallvec::SmallVec;\n+use std::iter;\n use std::ops::Index;\n \n /// A \"canonicalized\" type `V` is one where all free inference\n@@ -315,10 +316,7 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n         use crate::ty::subst::GenericArgKind;\n \n         CanonicalVarValues {\n-            var_values: self\n-                .var_values\n-                .iter()\n-                .zip(0..)\n+            var_values: iter::zip(&self.var_values, 0..)\n                 .map(|(kind, i)| match kind.unpack() {\n                     GenericArgKind::Type(..) => {\n                         tcx.mk_ty(ty::Bound(ty::INNERMOST, ty::BoundVar::from_u32(i).into())).into()"}, {"sha": "bd0749792db8bbffee6b24741bc5c3b0aa998669", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -51,6 +51,7 @@\n #![feature(exclusive_range_pattern)]\n #![feature(control_flow_enum)]\n #![feature(associated_type_defaults)]\n+#![feature(iter_zip)]\n #![recursion_limit = \"512\"]\n \n #[macro_use]"}, {"sha": "807d63948003a9cf877af2e8c8b708153e97842e", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -2329,7 +2329,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                             CtorKind::Fn => fmt_tuple(fmt, &name),\n                             CtorKind::Fictive => {\n                                 let mut struct_fmt = fmt.debug_struct(&name);\n-                                for (field, place) in variant_def.fields.iter().zip(places) {\n+                                for (field, place) in iter::zip(&variant_def.fields, places) {\n                                     struct_fmt.field(&field.ident.as_str(), place);\n                                 }\n                                 struct_fmt.finish()\n@@ -2353,7 +2353,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                             let mut struct_fmt = fmt.debug_struct(&name);\n \n                             if let Some(upvars) = tcx.upvars_mentioned(def_id) {\n-                                for (&var_id, place) in upvars.keys().zip(places) {\n+                                for (&var_id, place) in iter::zip(upvars.keys(), places) {\n                                     let var_name = tcx.hir().name(var_id);\n                                     struct_fmt.field(&var_name.as_str(), place);\n                                 }\n@@ -2372,7 +2372,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                             let mut struct_fmt = fmt.debug_struct(&name);\n \n                             if let Some(upvars) = tcx.upvars_mentioned(def_id) {\n-                                for (&var_id, place) in upvars.keys().zip(places) {\n+                                for (&var_id, place) in iter::zip(upvars.keys(), places) {\n                                     let var_name = tcx.hir().name(var_id);\n                                     struct_fmt.field(&var_name.as_str(), place);\n                                 }"}, {"sha": "c8db4aeb449b87e66b1a99e78572f7046a1dce98", "filename": "compiler/rustc_middle/src/mir/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -67,7 +67,7 @@ impl SwitchTargets {\n     ///\n     /// Note that this may yield 0 elements. Only the `otherwise` branch is mandatory.\n     pub fn iter(&self) -> SwitchTargetsIter<'_> {\n-        SwitchTargetsIter { inner: self.values.iter().zip(self.targets.iter()) }\n+        SwitchTargetsIter { inner: iter::zip(&self.values, &self.targets) }\n     }\n \n     /// Returns a slice with all possible jump targets (including the fallback target)."}, {"sha": "8fdae695ceb7f99612dab1f6603e4b0df7d7f06d", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -789,7 +789,7 @@ impl CanonicalUserType<'tcx> {\n                     return false;\n                 }\n \n-                user_substs.substs.iter().zip(BoundVar::new(0)..).all(|(kind, cvar)| {\n+                iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {\n                     match kind.unpack() {\n                         GenericArgKind::Type(ty) => match ty.kind() {\n                             ty::Bound(debruijn, b) => {"}, {"sha": "0d03cf4575fcf3db3e0fdd52c37b89d1fe4096f4", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -1251,13 +1251,13 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 } else {\n                     // Try to use a ScalarPair for all tagged enums.\n                     let mut common_prim = None;\n-                    for (field_layouts, layout_variant) in variants.iter().zip(&layout_variants) {\n+                    for (field_layouts, layout_variant) in iter::zip(&variants, &layout_variants) {\n                         let offsets = match layout_variant.fields {\n                             FieldsShape::Arbitrary { ref offsets, .. } => offsets,\n                             _ => bug!(),\n                         };\n                         let mut fields =\n-                            field_layouts.iter().zip(offsets).filter(|p| !p.0.is_zst());\n+                            iter::zip(field_layouts, offsets).filter(|p| !p.0.is_zst());\n                         let (field, offset) = match (fields.next(), fields.next()) {\n                             (None, None) => continue,\n                             (Some(pair), None) => pair,\n@@ -1626,7 +1626,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 const INVALID_FIELD_IDX: u32 = !0;\n                 let mut combined_inverse_memory_index =\n                     vec![INVALID_FIELD_IDX; promoted_memory_index.len() + memory_index.len()];\n-                let mut offsets_and_memory_index = offsets.into_iter().zip(memory_index);\n+                let mut offsets_and_memory_index = iter::zip(offsets, memory_index);\n                 let combined_offsets = variant_fields\n                     .iter()\n                     .enumerate()"}, {"sha": "f23c64cb036cf8c0ed9f71e577d0f6032614d93f", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -19,6 +19,7 @@ use std::char;\n use std::collections::BTreeMap;\n use std::convert::TryFrom;\n use std::fmt::{self, Write as _};\n+use std::iter;\n use std::ops::{ControlFlow, Deref, DerefMut};\n \n // `pretty` is a separate module only for organization.\n@@ -1223,7 +1224,7 @@ pub trait PrettyPrinter<'tcx>:\n                             CtorKind::Fictive => {\n                                 p!(\" {{ \");\n                                 let mut first = true;\n-                                for (field_def, field) in variant_def.fields.iter().zip(fields) {\n+                                for (field_def, field) in iter::zip(&variant_def.fields, fields) {\n                                     if !first {\n                                         p!(\", \");\n                                     }"}, {"sha": "1eb17d55a6ae6708dfbae89b0166bc871fb70031", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -149,7 +149,7 @@ pub fn relate_substs<R: TypeRelation<'tcx>>(\n ) -> RelateResult<'tcx, SubstsRef<'tcx>> {\n     let tcx = relation.tcx();\n \n-    let params = a_subst.iter().zip(b_subst).enumerate().map(|(i, (a, b))| {\n+    let params = iter::zip(a_subst, b_subst).enumerate().map(|(i, (a, b))| {\n         let variance = variances.map_or(ty::Invariant, |v| v[i]);\n         relation.relate_with_variance(variance, a, b)\n     });\n@@ -179,12 +179,8 @@ impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {\n             return Err(TypeError::ArgCount);\n         }\n \n-        let inputs_and_output = a\n-            .inputs()\n-            .iter()\n-            .cloned()\n-            .zip(b.inputs().iter().cloned())\n-            .map(|x| (x, false))\n+        let inputs_and_output = iter::zip(a.inputs(), b.inputs())\n+            .map(|(&a, &b)| ((a, b), false))\n             .chain(iter::once(((a.output(), b.output()), true)))\n             .map(|((a, b), is_output)| {\n                 if is_output {\n@@ -308,7 +304,7 @@ impl<'tcx> Relate<'tcx> for GeneratorWitness<'tcx> {\n     ) -> RelateResult<'tcx, GeneratorWitness<'tcx>> {\n         assert_eq!(a.0.len(), b.0.len());\n         let tcx = relation.tcx();\n-        let types = tcx.mk_type_list(a.0.iter().zip(b.0).map(|(a, b)| relation.relate(a, b)))?;\n+        let types = tcx.mk_type_list(iter::zip(a.0, b.0).map(|(a, b)| relation.relate(a, b)))?;\n         Ok(GeneratorWitness(types))\n     }\n }\n@@ -449,7 +445,7 @@ pub fn super_relate_tys<R: TypeRelation<'tcx>>(\n         (&ty::Tuple(as_), &ty::Tuple(bs)) => {\n             if as_.len() == bs.len() {\n                 Ok(tcx.mk_tup(\n-                    as_.iter().zip(bs).map(|(a, b)| relation.relate(a.expect_ty(), b.expect_ty())),\n+                    iter::zip(as_, bs).map(|(a, b)| relation.relate(a.expect_ty(), b.expect_ty())),\n                 )?)\n             } else if !(as_.is_empty() || bs.is_empty()) {\n                 Err(TypeError::TupleSize(expected_found(relation, as_.len(), bs.len())))\n@@ -593,9 +589,7 @@ fn check_const_value_eq<R: TypeRelation<'tcx>>(\n \n             // Both the variant and each field have to be equal.\n             if a_destructured.variant == b_destructured.variant {\n-                for (a_field, b_field) in\n-                    a_destructured.fields.iter().zip(b_destructured.fields.iter())\n-                {\n+                for (a_field, b_field) in iter::zip(a_destructured.fields, b_destructured.fields) {\n                     relation.consts(a_field, b_field)?;\n                 }\n \n@@ -631,7 +625,7 @@ impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'\n             return Err(TypeError::ExistentialMismatch(expected_found(relation, a, b)));\n         }\n \n-        let v = a_v.into_iter().zip(b_v.into_iter()).map(|(ep_a, ep_b)| {\n+        let v = iter::zip(a_v, b_v).map(|(ep_a, ep_b)| {\n             use crate::ty::ExistentialPredicate::*;\n             match (ep_a.skip_binder(), ep_b.skip_binder()) {\n                 (Trait(a), Trait(b)) => Ok(ty::Binder::bind(Trait("}, {"sha": "9926cca2f51c6b45f3e9de24a3142983832cc96d", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -21,7 +21,7 @@ use rustc_macros::HashStable;\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::{Integer, Size, TargetDataLayout};\n use smallvec::SmallVec;\n-use std::{cmp, fmt};\n+use std::{cmp, fmt, iter};\n \n #[derive(Copy, Clone, Debug)]\n pub struct Discr<'tcx> {\n@@ -414,9 +414,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             _ => bug!(),\n         };\n \n-        let result = item_substs\n-            .iter()\n-            .zip(impl_substs.iter())\n+        let result = iter::zip(item_substs, impl_substs)\n             .filter(|&(_, k)| {\n                 match k.unpack() {\n                     GenericArgKind::Lifetime(&ty::RegionKind::ReEarlyBound(ref ebr)) => {"}, {"sha": "4f61b8d0910ff940467cfd0cdd051aa50c1f27f3", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -18,6 +18,7 @@ use rustc_span::{\n     Span,\n };\n use rustc_target::abi::VariantIdx;\n+use std::iter;\n \n use super::borrow_set::BorrowData;\n use super::MirBorrowckCtxt;\n@@ -970,13 +971,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let expr = &self.infcx.tcx.hir().expect_expr(hir_id).kind;\n         debug!(\"closure_span: hir_id={:?} expr={:?}\", hir_id, expr);\n         if let hir::ExprKind::Closure(.., body_id, args_span, _) = expr {\n-            for (captured_place, place) in self\n-                .infcx\n-                .tcx\n-                .typeck(def_id.expect_local())\n-                .closure_min_captures_flattened(def_id)\n-                .zip(places)\n-            {\n+            for (captured_place, place) in iter::zip(\n+                self.infcx.tcx.typeck(def_id.expect_local()).closure_min_captures_flattened(def_id),\n+                places,\n+            ) {\n                 let upvar_hir_id = captured_place.get_root_variable();\n                 //FIXME(project-rfc-2229#8): Use better span from captured_place\n                 let span = self.infcx.tcx.upvars_mentioned(local_did)?[&upvar_hir_id].span;"}, {"sha": "1f168c612f16726f78b3f98ded96658f6be6926e", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -1,4 +1,5 @@\n use std::fmt::{self, Display};\n+use std::iter;\n \n use rustc_errors::DiagnosticBuilder;\n use rustc_hir as hir;\n@@ -536,7 +537,8 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                 // just worry about trying to match up the rustc type\n                 // with the HIR types:\n                 (ty::Tuple(elem_tys), hir::TyKind::Tup(elem_hir_tys)) => {\n-                    search_stack.extend(elem_tys.iter().map(|k| k.expect_ty()).zip(*elem_hir_tys));\n+                    search_stack\n+                        .extend(iter::zip(elem_tys.iter().map(|k| k.expect_ty()), *elem_hir_tys));\n                 }\n \n                 (ty::Slice(elem_ty), hir::TyKind::Slice(elem_hir_ty))\n@@ -611,7 +613,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         args: &'hir hir::GenericArgs<'hir>,\n         search_stack: &mut Vec<(Ty<'tcx>, &'hir hir::Ty<'hir>)>,\n     ) -> Option<&'hir hir::Lifetime> {\n-        for (kind, hir_arg) in substs.iter().zip(args.args) {\n+        for (kind, hir_arg) in iter::zip(substs, args.args) {\n             match (kind.unpack(), hir_arg) {\n                 (GenericArgKind::Lifetime(r), hir::GenericArg::Lifetime(lt)) => {\n                     if r.to_region_vid() == needle_fr {"}, {"sha": "1055e30a3a44cf3fbf1b380364f587132d9048c6", "filename": "compiler/rustc_mir/src/borrow_check/invalidation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -5,6 +5,7 @@ use rustc_middle::mir::{BorrowKind, Mutability, Operand};\n use rustc_middle::mir::{InlineAsmOperand, Terminator, TerminatorKind};\n use rustc_middle::mir::{Statement, StatementKind};\n use rustc_middle::ty::TyCtxt;\n+use std::iter;\n \n use crate::dataflow::indexes::BorrowIndex;\n \n@@ -69,7 +70,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 self.mutate_place(location, **place, Shallow(None), JustWrite);\n             }\n             StatementKind::LlvmInlineAsm(asm) => {\n-                for (o, output) in asm.asm.outputs.iter().zip(asm.outputs.iter()) {\n+                for (o, output) in iter::zip(&asm.asm.outputs, &*asm.outputs) {\n                     if o.is_indirect {\n                         // FIXME(eddyb) indirect inline asm outputs should\n                         // be encoded through MIR place derefs instead."}, {"sha": "583f73d5775d1bb713d3e5e7d5d67fc1fbe7655d", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -25,6 +25,7 @@ use either::Either;\n use smallvec::SmallVec;\n use std::cell::RefCell;\n use std::collections::BTreeMap;\n+use std::iter;\n use std::mem;\n use std::rc::Rc;\n \n@@ -595,7 +596,7 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n                 self.mutate_place(location, (**place, span), Shallow(None), JustWrite, flow_state);\n             }\n             StatementKind::LlvmInlineAsm(ref asm) => {\n-                for (o, output) in asm.asm.outputs.iter().zip(asm.outputs.iter()) {\n+                for (o, output) in iter::zip(&asm.asm.outputs, &*asm.outputs) {\n                     if o.is_indirect {\n                         // FIXME(eddyb) indirect inline asm outputs should\n                         // be encoded through MIR place derefs instead."}, {"sha": "3654b51949e70a03ec9d8e3d07c3bd055be45f35", "filename": "compiler/rustc_mir/src/borrow_check/places_conflict.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fplaces_conflict.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -5,6 +5,7 @@ use rustc_hir as hir;\n use rustc_middle::mir::{Body, BorrowKind, Local, Place, PlaceElem, PlaceRef, ProjectionElem};\n use rustc_middle::ty::{self, TyCtxt};\n use std::cmp::max;\n+use std::iter;\n \n /// When checking if a place conflicts with another place, this enum is used to influence decisions\n /// where a place might be equal or disjoint with another place, such as if `a[i] == a[j]`.\n@@ -139,7 +140,7 @@ fn place_components_conflict<'tcx>(\n \n     // loop invariant: borrow_c is always either equal to access_c or disjoint from it.\n     for (i, (borrow_c, &access_c)) in\n-        borrow_place.projection.iter().zip(access_place.projection.iter()).enumerate()\n+        iter::zip(borrow_place.projection, access_place.projection).enumerate()\n     {\n         debug!(\"borrow_conflicts_with_place: borrow_c = {:?}\", borrow_c);\n         let borrow_proj_base = &borrow_place.projection[..i];"}, {"sha": "fddd1401868832ce6e3002895e5dc3a9671f8ccd", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -1770,7 +1770,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         if args.len() < sig.inputs().len() || (args.len() > sig.inputs().len() && !sig.c_variadic) {\n             span_mirbug!(self, term, \"call to {:?} with wrong # of args\", sig);\n         }\n-        for (n, (fn_arg, op_arg)) in sig.inputs().iter().zip(args).enumerate() {\n+        for (n, (fn_arg, op_arg)) in iter::zip(sig.inputs(), args).enumerate() {\n             let op_arg_ty = op_arg.ty(body, self.tcx());\n             let op_arg_ty = self.normalize(op_arg_ty, term_location);\n             let category = if from_hir_call {"}, {"sha": "68fa9d8bf9858af6679076fa13feedc9698875a3", "filename": "compiler/rustc_mir/src/borrow_check/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Funiversal_regions.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -580,7 +580,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n \n         let global_mapping = iter::once((tcx.lifetimes.re_static, fr_static));\n         let subst_mapping =\n-            identity_substs.regions().zip(fr_substs.regions().map(|r| r.to_region_vid()));\n+            iter::zip(identity_substs.regions(), fr_substs.regions().map(|r| r.to_region_vid()));\n \n         UniversalRegionIndices { indices: global_mapping.chain(subst_mapping).collect() }\n     }"}, {"sha": "f937b31f4cfc9d00afb13f31958ec9ba856e8e4c", "filename": "compiler/rustc_mir/src/dataflow/framework/lattice.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Flattice.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -40,6 +40,7 @@\n \n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n+use std::iter;\n \n /// A [partially ordered set][poset] that has a [least upper bound][lub] for any pair of elements\n /// in the set.\n@@ -110,7 +111,7 @@ impl<I: Idx, T: JoinSemiLattice> JoinSemiLattice for IndexVec<I, T> {\n         assert_eq!(self.len(), other.len());\n \n         let mut changed = false;\n-        for (a, b) in self.iter_mut().zip(other.iter()) {\n+        for (a, b) in iter::zip(self, other) {\n             changed |= a.join(b);\n         }\n         changed\n@@ -122,7 +123,7 @@ impl<I: Idx, T: MeetSemiLattice> MeetSemiLattice for IndexVec<I, T> {\n         assert_eq!(self.len(), other.len());\n \n         let mut changed = false;\n-        for (a, b) in self.iter_mut().zip(other.iter()) {\n+        for (a, b) in iter::zip(self, other) {\n             changed |= a.meet(b);\n         }\n         changed"}, {"sha": "c92cff1433f1a50ef520de7fb21089063fea738d", "filename": "compiler/rustc_mir/src/dataflow/impls/borrows.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrows.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -11,6 +11,7 @@ use crate::borrow_check::{\n use crate::dataflow::{self, fmt::DebugWithContext, GenKill};\n \n use std::fmt;\n+use std::iter;\n \n rustc_index::newtype_index! {\n     pub struct BorrowIndex {\n@@ -292,7 +293,7 @@ impl<'tcx> dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n             }\n \n             mir::StatementKind::LlvmInlineAsm(ref asm) => {\n-                for (output, kind) in asm.outputs.iter().zip(&asm.asm.outputs) {\n+                for (output, kind) in iter::zip(&*asm.outputs, &asm.asm.outputs) {\n                     if !kind.is_indirect && !kind.is_rw {\n                         self.kill_borrows_on_place(trans, *output);\n                     }"}, {"sha": "52b6e9f3753bef4a848fbb2dcd0dacc0b2b3b54e", "filename": "compiler/rustc_mir/src/dataflow/move_paths/builder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -4,6 +4,7 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::{self, TyCtxt};\n use smallvec::{smallvec, SmallVec};\n \n+use std::iter;\n use std::mem;\n \n use super::abs_domain::Lift;\n@@ -296,7 +297,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 self.create_move_path(**place);\n             }\n             StatementKind::LlvmInlineAsm(ref asm) => {\n-                for (output, kind) in asm.outputs.iter().zip(&asm.asm.outputs) {\n+                for (output, kind) in iter::zip(&*asm.outputs, &asm.asm.outputs) {\n                     if !kind.is_indirect {\n                         self.gather_init(output.as_ref(), InitKind::Deep);\n                     }"}, {"sha": "b0db4f9e649b31b437a8461b7677540414095381", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -18,6 +18,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(decl_macro)]\n #![feature(exact_size_is_empty)]\n #![feature(exhaustive_patterns)]\n+#![feature(iter_zip)]\n #![feature(never_type)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]"}, {"sha": "0e9728df73ca749520a62b7e873487f15d3fa3f3", "filename": "compiler/rustc_mir/src/transform/coverage/debug.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -121,6 +121,7 @@ use rustc_middle::mir::coverage::*;\n use rustc_middle::mir::{self, BasicBlock, TerminatorKind};\n use rustc_middle::ty::TyCtxt;\n \n+use std::iter;\n use std::lazy::SyncOnceCell;\n \n pub const NESTED_INDENT: &str = \"    \";\n@@ -703,9 +704,7 @@ pub(super) fn dump_coverage_graphviz(\n         let edge_counters = from_terminator\n             .successors()\n             .map(|&successor_bb| graphviz_data.get_edge_counter(from_bcb, successor_bb));\n-        edge_labels\n-            .iter()\n-            .zip(edge_counters)\n+        iter::zip(&edge_labels, edge_counters)\n             .map(|(label, some_counter)| {\n                 if let Some(counter) = some_counter {\n                     format!(\"{}\\n{}\", label, debug_counters.format_counter(counter))"}, {"sha": "c41e71e09a4efc7d64186850460538b2b254d0cb", "filename": "compiler/rustc_mir/src/transform/deduplicate_blocks.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdeduplicate_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdeduplicate_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdeduplicate_blocks.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -1,7 +1,7 @@\n //! This pass finds basic blocks that are completely equal,\n //! and replaces all uses with just one of them.\n \n-use std::{collections::hash_map::Entry, hash::Hash, hash::Hasher};\n+use std::{collections::hash_map::Entry, hash::Hash, hash::Hasher, iter};\n \n use crate::transform::MirPass;\n \n@@ -115,11 +115,7 @@ impl<'tcx, 'a> PartialEq for BasicBlockHashable<'tcx, 'a> {\n     fn eq(&self, other: &Self) -> bool {\n         self.basic_block_data.statements.len() == other.basic_block_data.statements.len()\n             && &self.basic_block_data.terminator().kind == &other.basic_block_data.terminator().kind\n-            && self\n-                .basic_block_data\n-                .statements\n-                .iter()\n-                .zip(&other.basic_block_data.statements)\n+            && iter::zip(&self.basic_block_data.statements, &other.basic_block_data.statements)\n                 .all(|(x, y)| statement_eq(&x.kind, &y.kind))\n     }\n }"}, {"sha": "f7a9835353e5cff77c14c762641f2bf99103e088", "filename": "compiler/rustc_mir/src/transform/match_branches.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -1,6 +1,7 @@\n use crate::transform::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n+use std::iter;\n \n use super::simplify::simplify_cfg;\n \n@@ -83,7 +84,7 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n             if first_stmts.len() != scnd_stmts.len() {\n                 continue;\n             }\n-            for (f, s) in first_stmts.iter().zip(scnd_stmts.iter()) {\n+            for (f, s) in iter::zip(first_stmts, scnd_stmts) {\n                 match (&f.kind, &s.kind) {\n                     // If two statements are exactly the same, we can optimize.\n                     (f_s, s_s) if f_s == s_s => {}\n@@ -113,7 +114,7 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n             // and bb_idx has a different terminator from both of them.\n             let (from, first, second) = bbs.pick3_mut(bb_idx, first, second);\n \n-            let new_stmts = first.statements.iter().zip(second.statements.iter()).map(|(f, s)| {\n+            let new_stmts = iter::zip(&first.statements, &second.statements).map(|(f, s)| {\n                 match (&f.kind, &s.kind) {\n                     (f_s, s_s) if f_s == s_s => (*f).clone(),\n "}, {"sha": "589a4467dcae1023d9170f09fe27020e62adf284", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -17,6 +17,8 @@ use rustc_target::abi::VariantIdx;\n \n use rustc_index::vec::Idx;\n \n+use std::iter;\n+\n /// The \"outermost\" place that holds this value.\n #[derive(Copy, Clone, Debug, PartialEq)]\n crate enum PlaceBase {\n@@ -140,7 +142,7 @@ fn is_ancestor_or_same_capture(\n         return false;\n     }\n \n-    proj_possible_ancestor.iter().zip(proj_capture).all(|(a, b)| a == b)\n+    iter::zip(proj_possible_ancestor, proj_capture).all(|(a, b)| a == b)\n }\n \n /// Computes the index of a capture within the desugared closure provided the closure's"}, {"sha": "2097f38c25d76fcbd2de94006aef21e2c9db4fde", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -10,6 +10,7 @@ use rustc_hir as hir;\n use rustc_index::vec::Idx;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, CanonicalUserTypeAnnotation};\n+use std::iter;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Compile `expr`, storing the result into `destination`, which\n@@ -286,9 +287,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     // MIR does not natively support FRU, so for each\n                     // base-supplied field, generate an operand that\n                     // reads it from the base.\n-                    field_names\n-                        .into_iter()\n-                        .zip(field_types.into_iter())\n+                    iter::zip(field_names, *field_types)\n                         .map(|(n, ty)| match fields_map.get(&n) {\n                             Some(v) => v.clone(),\n                             None => {"}, {"sha": "23bc1da09b5554975b1ac01a183f0a69ce621d83", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -9,6 +9,7 @@\n #![feature(control_flow_enum)]\n #![feature(crate_visibility_modifier)]\n #![feature(bool_to_option)]\n+#![feature(iter_zip)]\n #![feature(once_cell)]\n #![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]"}, {"sha": "933e8ad1d727c4719baf896de0cdd220785d0091", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -9,6 +9,7 @@\n #![feature(const_panic)]\n #![feature(crate_visibility_modifier)]\n #![feature(in_band_lifetimes)]\n+#![feature(iter_zip)]\n #![feature(nll)]\n #![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]"}, {"sha": "f24309fa950217e2a45a0105712c08de80c0e30c", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -103,6 +103,7 @@ use rustc_span::Span;\n use std::collections::VecDeque;\n use std::io;\n use std::io::prelude::*;\n+use std::iter;\n use std::rc::Rc;\n \n mod rwu_table;\n@@ -1093,7 +1094,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 let ia = &asm.inner;\n                 let outputs = asm.outputs_exprs;\n                 let inputs = asm.inputs_exprs;\n-                let succ = ia.outputs.iter().zip(outputs).rev().fold(succ, |succ, (o, output)| {\n+                let succ = iter::zip(&ia.outputs, outputs).rev().fold(succ, |succ, (o, output)| {\n                     // see comment on places\n                     // in propagate_through_place_components()\n                     if o.is_indirect {\n@@ -1344,7 +1345,7 @@ fn check_expr<'tcx>(this: &mut Liveness<'_, 'tcx>, expr: &'tcx Expr<'tcx>) {\n             }\n \n             // Output operands must be places\n-            for (o, output) in asm.inner.outputs.iter().zip(asm.outputs_exprs) {\n+            for (o, output) in iter::zip(&asm.inner.outputs, asm.outputs_exprs) {\n                 if !o.is_indirect {\n                     this.check_place(output);\n                 }"}, {"sha": "6d5983f53dc3947556a6aeea712e48404c67b0a8", "filename": "compiler/rustc_passes/src/liveness/rwu_table.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_passes%2Fsrc%2Fliveness%2Frwu_table.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_passes%2Fsrc%2Fliveness%2Frwu_table.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness%2Frwu_table.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -1,4 +1,5 @@\n use crate::liveness::{LiveNode, Variable};\n+use std::iter;\n \n #[derive(Clone, Copy)]\n pub(super) struct RWU {\n@@ -91,7 +92,7 @@ impl RWUTable {\n \n         let mut changed = false;\n         let (dst_row, src_row) = self.pick2_rows_mut(dst, src);\n-        for (dst_word, src_word) in dst_row.iter_mut().zip(src_row.iter()) {\n+        for (dst_word, src_word) in iter::zip(dst_row, &*src_row) {\n             let old = *dst_word;\n             let new = *dst_word | src_word;\n             *dst_word = new;"}, {"sha": "e54b1796aaa55349d20d6c1cc4152aef7bd4d328", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -22,6 +22,7 @@ use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n use std::cmp::Ordering;\n+use std::iter;\n use std::mem::replace;\n use std::num::NonZeroU32;\n \n@@ -214,7 +215,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             {\n                 // Explicit version of iter::order::lt to handle parse errors properly\n                 for (dep_v, stab_v) in\n-                    dep_since.as_str().split('.').zip(stab_since.as_str().split('.'))\n+                    iter::zip(dep_since.as_str().split('.'), stab_since.as_str().split('.'))\n                 {\n                     match stab_v.parse::<u64>() {\n                         Err(_) => {"}, {"sha": "3db57c0ab3a4c26b04321d6cccf142cedb790da9", "filename": "compiler/rustc_query_system/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Flib.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -3,6 +3,7 @@\n #![feature(const_panic)]\n #![feature(core_intrinsics)]\n #![feature(hash_raw_entry)]\n+#![feature(iter_zip)]\n #![feature(min_specialization)]\n #![feature(stmt_expr_attributes)]\n "}, {"sha": "21f580db04f282920a808ba01f686dbd79e3163e", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -22,7 +22,7 @@ use {\n     rustc_data_structures::{jobserver, OnDrop},\n     rustc_rayon_core as rayon_core,\n     rustc_span::DUMMY_SP,\n-    std::iter::FromIterator,\n+    std::iter::{self, FromIterator},\n     std::{mem, process},\n };\n \n@@ -463,7 +463,7 @@ fn remove_cycle<D: DepKind>(\n         spans.rotate_right(1);\n \n         // Zip them back together\n-        let mut stack: Vec<_> = spans.into_iter().zip(queries).collect();\n+        let mut stack: Vec<_> = iter::zip(spans, queries).collect();\n \n         // Remove the queries in our cycle from the list of jobs to look at\n         for r in &stack {"}, {"sha": "e659ce2c48ef9e9ec471f18b4f03cb5f87a6854c", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -22,6 +22,8 @@ use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n \n+use std::iter;\n+\n use tracing::debug;\n \n type Res = def::Res<ast::NodeId>;\n@@ -1004,9 +1006,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 if let Some(spans) =\n                     field_spans.filter(|spans| spans.len() > 0 && fields.len() == spans.len())\n                 {\n-                    let non_visible_spans: Vec<Span> = fields\n-                        .iter()\n-                        .zip(spans.iter())\n+                    let non_visible_spans: Vec<Span> = iter::zip(&fields, &spans)\n                         .filter(|(vis, _)| {\n                             !self.r.is_accessible_from(**vis, self.parent_scope.module)\n                         })"}, {"sha": "8210da7b6ce3cd8a5fd8e5a0b1dc04ea5a5d6734", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -14,6 +14,7 @@\n #![feature(control_flow_enum)]\n #![feature(crate_visibility_modifier)]\n #![feature(format_args_capture)]\n+#![feature(iter_zip)]\n #![feature(nll)]\n #![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]"}, {"sha": "daecbe9225032b3faaaefc1e1e7365ae485177ab", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -413,7 +413,7 @@ pub fn update_dollar_crate_names(mut get_name: impl FnMut(SyntaxContext) -> Symb\n     let names: Vec<_> =\n         range_to_update.clone().map(|idx| get_name(SyntaxContext::from_u32(idx as u32))).collect();\n     HygieneData::with(|data| {\n-        range_to_update.zip(names.into_iter()).for_each(|(idx, name)| {\n+        range_to_update.zip(names).for_each(|(idx, name)| {\n             data.syntax_context_data[idx].dollar_crate_name = name;\n         })\n     })"}, {"sha": "4097e1577e1127372621742ecc43231cea25bef4", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -15,6 +15,7 @@\n #![feature(box_patterns)]\n #![feature(drain_filter)]\n #![feature(in_band_lifetimes)]\n+#![feature(iter_zip)]\n #![feature(never_type)]\n #![feature(crate_visibility_modifier)]\n #![cfg_attr(bootstrap, feature(or_patterns))]"}, {"sha": "b38e3fbaab407b699265757489de1ab8ffac78b8", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -12,6 +12,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n use std::collections::hash_map::Entry;\n use std::collections::VecDeque;\n+use std::iter;\n \n // FIXME(twk): this is obviously not nice to duplicate like that\n #[derive(Eq, PartialEq, Hash, Copy, Clone, Debug)]\n@@ -428,7 +429,9 @@ impl AutoTraitFinder<'tcx> {\n                         return true;\n                     }\n \n-                    for (new_region, old_region) in new_substs.regions().zip(old_substs.regions()) {\n+                    for (new_region, old_region) in\n+                        iter::zip(new_substs.regions(), old_substs.regions())\n+                    {\n                         match (new_region, old_region) {\n                             // If both predicates have an `ReLateBound` (a HRTB) in the\n                             // same spot, we do nothing."}, {"sha": "38cb4ee66cac515a4949b14c392c2aab0863ff93", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -74,23 +74,22 @@ where\n     let impl2_ref = tcx.impl_trait_ref(impl2_def_id);\n \n     // Check if any of the input types definitely do not unify.\n-    if impl1_ref\n-        .iter()\n-        .flat_map(|tref| tref.substs.types())\n-        .zip(impl2_ref.iter().flat_map(|tref| tref.substs.types()))\n-        .any(|(ty1, ty2)| {\n-            let t1 = fast_reject::simplify_type(tcx, ty1, false);\n-            let t2 = fast_reject::simplify_type(tcx, ty2, false);\n-            if let (Some(t1), Some(t2)) = (t1, t2) {\n-                // Simplified successfully\n-                // Types cannot unify if they differ in their reference mutability or simplify to different types\n-                t1 != t2 || ty1.ref_mutability() != ty2.ref_mutability()\n-            } else {\n-                // Types might unify\n-                false\n-            }\n-        })\n-    {\n+    if iter::zip(\n+        impl1_ref.iter().flat_map(|tref| tref.substs.types()),\n+        impl2_ref.iter().flat_map(|tref| tref.substs.types()),\n+    )\n+    .any(|(ty1, ty2)| {\n+        let t1 = fast_reject::simplify_type(tcx, ty1, false);\n+        let t2 = fast_reject::simplify_type(tcx, ty2, false);\n+        if let (Some(t1), Some(t2)) = (t1, t2) {\n+            // Simplified successfully\n+            // Types cannot unify if they differ in their reference mutability or simplify to different types\n+            t1 != t2 || ty1.ref_mutability() != ty2.ref_mutability()\n+        } else {\n+            // Types might unify\n+            false\n+        }\n+    }) {\n         // Some types involved are definitely different, so the impls couldn't possibly overlap.\n         debug!(\"overlapping_impls: fast_reject early-exit\");\n         return no_overlap();"}, {"sha": "8961cdaebf345eb26f497802ba12e40a8905079d", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -23,6 +23,7 @@ use rustc_span::def_id::{DefId, LocalDefId};\n use rustc_span::Span;\n \n use std::cmp;\n+use std::iter;\n use std::ops::ControlFlow;\n \n /// Check if a given constant can be evaluated.\n@@ -672,9 +673,7 @@ pub(super) fn try_unify<'tcx>(\n             if a_args.len() == b_args.len() =>\n         {\n             try_unify(tcx, a.subtree(a_f), b.subtree(b_f))\n-                && a_args\n-                    .iter()\n-                    .zip(b_args)\n+                && iter::zip(a_args, b_args)\n                     .all(|(&an, &bn)| try_unify(tcx, a.subtree(an), b.subtree(bn)))\n         }\n         _ => false,"}, {"sha": "93a37bd40902de7b52b6347ff901ee96a272db9f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -28,6 +28,7 @@ use rustc_session::DiagnosticMessageId;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{ExpnKind, MultiSpan, Span, DUMMY_SP};\n use std::fmt;\n+use std::iter;\n \n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n use crate::traits::query::normalize::AtExt as _;\n@@ -161,7 +162,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n         }\n \n-        for (error, suppressed) in errors.iter().zip(is_suppressed) {\n+        for (error, suppressed) in iter::zip(errors, is_suppressed) {\n             if !suppressed {\n                 self.report_fulfillment_error(error, body_id, fallback_has_occurred);\n             }"}, {"sha": "979c56004ee48096494af72cef4aa8b02b1df505", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -7,6 +7,7 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, GenericParamDefKind};\n use rustc_span::symbol::sym;\n+use std::iter;\n \n use super::InferCtxtPrivExt;\n \n@@ -51,12 +52,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             if let Ok(..) = self.can_eq(param_env, trait_self_ty, impl_self_ty) {\n                 self_match_impls.push(def_id);\n \n-                if trait_ref\n-                    .substs\n-                    .types()\n-                    .skip(1)\n-                    .zip(impl_trait_ref.substs.types().skip(1))\n-                    .all(|(u, v)| self.fuzzy_match_tys(u, v))\n+                if iter::zip(\n+                    trait_ref.substs.types().skip(1),\n+                    impl_trait_ref.substs.types().skip(1),\n+                )\n+                .all(|(u, v)| self.fuzzy_match_tys(u, v))\n                 {\n                     fuzzy_match_impls.push(def_id);\n                 }"}, {"sha": "45680c90cdc17008d5e0a9c3223f78369b8be65e", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -1887,7 +1887,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // substitution if we find that any of the input types, when\n         // simplified, do not match.\n \n-        obligation.predicate.skip_binder().trait_ref.substs.iter().zip(impl_trait_ref.substs).any(\n+        iter::zip(obligation.predicate.skip_binder().trait_ref.substs, impl_trait_ref.substs).any(\n             |(obligation_arg, impl_arg)| {\n                 match (obligation_arg.unpack(), impl_arg.unpack()) {\n                     (GenericArgKind::Type(obligation_ty), GenericArgKind::Type(impl_ty)) => {"}, {"sha": "3d5f8d128dc4b85b3c8bbc267ad9710a1722526f", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -692,11 +692,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n         let predicates = predicates.instantiate(self.infcx.tcx, substs);\n         debug_assert_eq!(predicates.predicates.len(), origins.len());\n \n-        predicates\n-            .predicates\n-            .into_iter()\n-            .zip(predicates.spans.into_iter())\n-            .zip(origins.into_iter().rev())\n+        iter::zip(iter::zip(predicates.predicates, predicates.spans), origins.into_iter().rev())\n             .map(|((pred, span), origin_def_id)| {\n                 let cause = self.cause(traits::BindingObligation(origin_def_id, span));\n                 traits::Obligation::with_depth(cause, self.recursion_depth, self.param_env, pred)"}, {"sha": "695132281c6bac81b364375a41c0a12c2dbbe046", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -10,6 +10,7 @@ use rustc_span::symbol::{sym, Ident};\n use rustc_span::{Span, DUMMY_SP};\n \n use std::collections::BTreeSet;\n+use std::iter;\n \n impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// On missing type parameters, emit an E0393 error and provide a structured suggestion using\n@@ -309,7 +310,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // that the user forgot to give the associtated type's name. The canonical\n                 // example would be trying to use `Iterator<isize>` instead of\n                 // `Iterator<Item = isize>`.\n-                for (potential, item) in potential_assoc_types.iter().zip(assoc_items.iter()) {\n+                for (potential, item) in iter::zip(&potential_assoc_types, assoc_items) {\n                     if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(*potential) {\n                         suggestions.push((*potential, format!(\"{} = {}\", item.ident, snippet)));\n                     }"}, {"sha": "b48102e0fc9b8c900888abf5ebb9393120924d8d", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -17,6 +17,7 @@ use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n use rustc_trait_selection::autoderef::Autoderef;\n+use std::iter;\n \n /// Checks that it is legal to call methods of the trait corresponding\n /// to `trait_id` (this only cares about the trait, not the specific\n@@ -539,7 +540,7 @@ impl<'a, 'tcx> DeferredCallResolution<'tcx> {\n                 debug!(\"attempt_resolution: method_callee={:?}\", method_callee);\n \n                 for (method_arg_ty, self_arg_ty) in\n-                    method_sig.inputs().iter().skip(1).zip(self.fn_sig.inputs())\n+                    iter::zip(method_sig.inputs().iter().skip(1), self.fn_sig.inputs())\n                 {\n                     fcx.demand_eqtype(self.call_expr.span, &self_arg_ty, &method_arg_ty);\n                 }"}, {"sha": "892abb5a344659ff7107a84568e7fdffd41b6556", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -26,6 +26,7 @@ use rustc_trait_selection::opaque_types::InferCtxtExt as _;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;\n use rustc_trait_selection::traits::{self, ObligationCauseCode};\n \n+use std::iter;\n use std::ops::ControlFlow;\n \n pub fn check_wf_new(tcx: TyCtxt<'_>) {\n@@ -1472,7 +1473,7 @@ fn check_enum<'tcx>(\n     }\n \n     let mut disr_vals: Vec<Discr<'tcx>> = Vec::with_capacity(vs.len());\n-    for ((_, discr), v) in def.discriminants(tcx).zip(vs) {\n+    for ((_, discr), v) in iter::zip(def.discriminants(tcx), vs) {\n         // Check for duplicate discriminant values\n         if let Some(i) = disr_vals.iter().position(|&x| x.val == discr.val) {\n             let variant_did = def.variants[VariantIdx::new(i)].def_id;"}, {"sha": "4099ecd435d5160168bcbc49ef3cd920b387a771", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -492,13 +492,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             // The liberated version of this signature should be a subtype\n             // of the liberated form of the expectation.\n-            for ((hir_ty, &supplied_ty), expected_ty) in decl\n-                .inputs\n-                .iter()\n-                .zip(supplied_sig.inputs().skip_binder()) // binder moved to (*) below\n-                .zip(expected_sigs.liberated_sig.inputs())\n-            // `liberated_sig` is E'.\n-            {\n+            for ((hir_ty, &supplied_ty), expected_ty) in iter::zip(\n+                iter::zip(\n+                    decl.inputs,\n+                    supplied_sig.inputs().skip_binder(), // binder moved to (*) below\n+                ),\n+                expected_sigs.liberated_sig.inputs(), // `liberated_sig` is E'.\n+            ) {\n                 // Instantiate (this part of..) S to S', i.e., with fresh variables.\n                 let (supplied_ty, _) = self.infcx.replace_bound_vars_with_fresh_vars(\n                     hir_ty.span,"}, {"sha": "70f850084a89ffbf1176c5a409e70c6abf6c68f9", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -14,6 +14,7 @@ use rustc_middle::ty::{GenericParamDefKind, ToPredicate, TyCtxt};\n use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n+use std::iter;\n \n use super::{potentially_plural_count, FnCtxt, Inherited};\n \n@@ -410,8 +411,7 @@ fn extract_spans_for_error_reporting<'a, 'tcx>(\n                     _ => bug!(\"{:?} is not a TraitItemKind::Fn\", trait_m),\n                 };\n \n-                impl_m_iter\n-                    .zip(trait_m_iter)\n+                iter::zip(impl_m_iter, trait_m_iter)\n                     .find(|&(ref impl_arg, ref trait_arg)| {\n                         match (&impl_arg.kind, &trait_arg.kind) {\n                             (\n@@ -443,11 +443,8 @@ fn extract_spans_for_error_reporting<'a, 'tcx>(\n \n                 let impl_iter = impl_sig.inputs().iter();\n                 let trait_iter = trait_sig.inputs().iter();\n-                impl_iter\n-                    .zip(trait_iter)\n-                    .zip(impl_m_iter)\n-                    .zip(trait_m_iter)\n-                    .find_map(|(((&impl_arg_ty, &trait_arg_ty), impl_arg), trait_arg)| match infcx\n+                iter::zip(iter::zip(impl_iter, trait_iter), iter::zip(impl_m_iter, trait_m_iter))\n+                    .find_map(|((&impl_arg_ty, &trait_arg_ty), (impl_arg, trait_arg))| match infcx\n                         .at(&cause, param_env)\n                         .sub(trait_arg_ty, impl_arg_ty)\n                     {\n@@ -799,7 +796,7 @@ fn compare_synthetic_generics<'tcx>(\n         GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => None,\n     });\n     for ((impl_def_id, impl_synthetic), (trait_def_id, trait_synthetic)) in\n-        impl_m_type_params.zip(trait_m_type_params)\n+        iter::zip(impl_m_type_params, trait_m_type_params)\n     {\n         if impl_synthetic != trait_synthetic {\n             let impl_hir_id = tcx.hir().local_def_id_to_hir_id(impl_def_id.expect_local());"}, {"sha": "e64d8367676b0e90ae94d1fb4985d684795aaef0", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -42,6 +42,7 @@ use rustc_trait_selection::traits::{\n };\n \n use std::collections::hash_map::Entry;\n+use std::iter;\n use std::slice;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -1146,7 +1147,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     (\n                         hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds: last_bounds, .. }),\n                         hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds: exp_bounds, .. }),\n-                    ) if last_bounds.iter().zip(exp_bounds.iter()).all(|(left, right)| {\n+                    ) if iter::zip(*last_bounds, *exp_bounds).all(|(left, right)| {\n                         match (left, right) {\n                             (\n                                 hir::GenericBound::Trait(tl, ml),"}, {"sha": "80b5a9d4e621a60a1d67c1f4ed8ff9a190dc7abd", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -23,6 +23,7 @@ use rustc_span::{self, MultiSpan, Span};\n use rustc_trait_selection::traits::{self, ObligationCauseCode, StatementAsExpression};\n \n use crate::structured_errors::StructuredDiagnostic;\n+use std::iter;\n use std::slice;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -108,7 +109,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // All the input types from the fn signature must outlive the call\n         // so as to validate implied bounds.\n-        for (&fn_input_ty, arg_expr) in fn_inputs.iter().zip(args.iter()) {\n+        for (&fn_input_ty, arg_expr) in iter::zip(fn_inputs, args) {\n             self.register_wf_obligation(fn_input_ty.into(), arg_expr.span, traits::MiscObligation);\n         }\n "}, {"sha": "bd89c7274e77bed93cb6ee0b8bfe282bd95d5d93", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -218,8 +218,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.is_hir_id_from_struct_pattern_shorthand_field(expr.hir_id, expr.span);\n             let methods = self.get_conversion_methods(expr.span, expected, found, expr.hir_id);\n             if let Ok(expr_text) = self.sess().source_map().span_to_snippet(expr.span) {\n-                let mut suggestions = iter::repeat(&expr_text)\n-                    .zip(methods.iter())\n+                let mut suggestions = iter::zip(iter::repeat(&expr_text), &methods)\n                     .filter_map(|(receiver, method)| {\n                         let method_call = format!(\".{}()\", method.ident);\n                         if receiver.ends_with(&method_call) {"}, {"sha": "fff659a91adfc861cb83ef90ee98e4216f364522", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -15,6 +15,7 @@ use rustc_middle::ty::{self, GenericParamDefKind, Ty};\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n \n+use std::iter;\n use std::ops::Deref;\n \n struct ConfirmContext<'a, 'tcx> {\n@@ -496,10 +497,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n             // We don't care about regions here.\n             .filter_map(|obligation| match obligation.predicate.kind().skip_binder() {\n                 ty::PredicateKind::Trait(trait_pred, _) if trait_pred.def_id() == sized_def_id => {\n-                    let span = predicates\n-                        .predicates\n-                        .iter()\n-                        .zip(predicates.spans.iter())\n+                    let span = iter::zip(&predicates.predicates, &predicates.spans)\n                         .find_map(\n                             |(p, span)| {\n                                 if *p == obligation.predicate { Some(*span) } else { None }"}, {"sha": "91021b3f6f5899b5cc9201c086687add87511396", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -49,6 +49,8 @@ use rustc_span::{MultiSpan, Span, Symbol};\n use rustc_index::vec::Idx;\n use rustc_target::abi::VariantIdx;\n \n+use std::iter;\n+\n /// Describe the relationship between the paths of two places\n /// eg:\n /// - `foo` is ancestor of `foo.bar.baz`\n@@ -1631,7 +1633,7 @@ fn determine_place_ancestry_relation(\n     let projections_b = &place_b.projections;\n \n     let same_initial_projections =\n-        projections_a.iter().zip(projections_b.iter()).all(|(proj_a, proj_b)| proj_a == proj_b);\n+        iter::zip(projections_a, projections_b).all(|(proj_a, proj_b)| proj_a == proj_b);\n \n     if same_initial_projections {\n         // First min(n, m) projections are the same"}, {"sha": "e7e603c8bd510a00245f8aadce028ca6a6f959bc", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -24,6 +24,7 @@ use rustc_trait_selection::opaque_types::may_define_opaque_type;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode};\n \n+use std::iter;\n use std::ops::ControlFlow;\n \n /// Helper type of a temporary returned by `.for_item(...)`.\n@@ -863,7 +864,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n     debug!(\"check_where_clauses: predicates={:?}\", predicates.predicates);\n     assert_eq!(predicates.predicates.len(), predicates.spans.len());\n     let wf_obligations =\n-        predicates.predicates.iter().zip(predicates.spans.iter()).flat_map(|(&p, &sp)| {\n+        iter::zip(&predicates.predicates, &predicates.spans).flat_map(|(&p, &sp)| {\n             traits::wf::predicate_obligations(fcx, fcx.param_env, fcx.body_id, p, sp)\n         });\n \n@@ -885,8 +886,8 @@ fn check_fn_or_method<'fcx, 'tcx>(\n     let sig = fcx.normalize_associated_types_in(span, sig);\n     let sig = fcx.tcx.liberate_late_bound_regions(def_id, sig);\n \n-    for (&input_ty, span) in sig.inputs().iter().zip(hir_decl.inputs.iter().map(|t| t.span)) {\n-        fcx.register_wf_obligation(input_ty.into(), span, ObligationCauseCode::MiscObligation);\n+    for (&input_ty, ty) in iter::zip(sig.inputs(), hir_decl.inputs) {\n+        fcx.register_wf_obligation(input_ty.into(), ty.span, ObligationCauseCode::MiscObligation);\n     }\n     implied_bounds.extend(sig.inputs());\n "}, {"sha": "9b3a933beb13eefcded293b2c0f1365d56987dee", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -50,6 +50,7 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use rustc_trait_selection::traits::error_reporting::suggestions::NextTypeParamName;\n+use std::iter;\n \n mod item_bounds;\n mod type_of;\n@@ -2439,7 +2440,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n                     .emit();\n             }\n         };\n-        for (input, ty) in decl.inputs.iter().zip(fty.inputs().skip_binder()) {\n+        for (input, ty) in iter::zip(decl.inputs, fty.inputs().skip_binder()) {\n             check(&input, ty)\n         }\n         if let hir::FnRetTy::Return(ref ty) = decl.output {"}, {"sha": "ab286bacd81893342ac266ffb765cb8b407fcead", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -18,6 +18,7 @@ use rustc_middle::hir::place::ProjectionKind;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::{self, adjustment, TyCtxt};\n use rustc_target::abi::VariantIdx;\n+use std::iter;\n \n use crate::mem_categorization as mc;\n \n@@ -333,7 +334,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n             }\n \n             hir::ExprKind::LlvmInlineAsm(ref ia) => {\n-                for (o, output) in ia.inner.outputs.iter().zip(ia.outputs_exprs) {\n+                for (o, output) in iter::zip(&ia.inner.outputs, ia.outputs_exprs) {\n                     if o.is_indirect {\n                         self.consume_expr(output);\n                     } else {"}, {"sha": "cb442344fa21c99e4fcbbb44ea83603a2e611d86", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ebebe474aae7203a27fdc1296617edd01321f1/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=72ebebe474aae7203a27fdc1296617edd01321f1", "patch": "@@ -63,6 +63,7 @@ This API is completely unstable and subject to change.\n #![feature(format_args_capture)]\n #![feature(in_band_lifetimes)]\n #![feature(is_sorted)]\n+#![feature(iter_zip)]\n #![feature(nll)]\n #![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(try_blocks)]"}]}