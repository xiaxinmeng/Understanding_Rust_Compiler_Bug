{"sha": "b4f5e78b467fff62bcb5287f34940fd0037f2216", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZjVlNzhiNDY3ZmZmNjJiY2I1Mjg3ZjM0OTQwZmQwMDM3ZjIyMTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-15T16:06:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-15T16:06:04Z"}, "message": "Auto merge of #23387 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #23375, #23379, #23382, #23384\n- Failed merges:", "tree": {"sha": "a91e930a9aca1a86adfb130b82779b9c78a2cb40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a91e930a9aca1a86adfb130b82779b9c78a2cb40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4f5e78b467fff62bcb5287f34940fd0037f2216", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f5e78b467fff62bcb5287f34940fd0037f2216", "html_url": "https://github.com/rust-lang/rust/commit/b4f5e78b467fff62bcb5287f34940fd0037f2216", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4f5e78b467fff62bcb5287f34940fd0037f2216/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95018eec69679681acdfae8608779c1e2674322d", "url": "https://api.github.com/repos/rust-lang/rust/commits/95018eec69679681acdfae8608779c1e2674322d", "html_url": "https://github.com/rust-lang/rust/commit/95018eec69679681acdfae8608779c1e2674322d"}, {"sha": "9f1240b665f2157bc2c74701761131ce6e288002", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1240b665f2157bc2c74701761131ce6e288002", "html_url": "https://github.com/rust-lang/rust/commit/9f1240b665f2157bc2c74701761131ce6e288002"}], "stats": {"total": 37, "additions": 12, "deletions": 25}, "files": [{"sha": "27f78906ec2d0f3cb34c0dfea16effb9b0b56cee", "filename": "src/libstd/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4f5e78b467fff62bcb5287f34940fd0037f2216/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f5e78b467fff62bcb5287f34940fd0037f2216/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=b4f5e78b467fff62bcb5287f34940fd0037f2216", "patch": "@@ -452,7 +452,7 @@ pub fn get_exit_status() -> i32 {\n     EXIT_STATUS.load(Ordering::SeqCst) as i32\n }\n \n-/// An iterator over the arguments of a process, yielding an `String` value\n+/// An iterator over the arguments of a process, yielding a `String` value\n /// for each argument.\n ///\n /// This structure is created through the `std::env::args` method."}, {"sha": "821a0a0b06efffd6f264d3c49938b4ed096c9620", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4f5e78b467fff62bcb5287f34940fd0037f2216/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f5e78b467fff62bcb5287f34940fd0037f2216/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=b4f5e78b467fff62bcb5287f34940fd0037f2216", "patch": "@@ -9,10 +9,6 @@\n // except according to those terms.\n \n //! Traits, helpers, and type definitions for core I/O functionality.\n-//!\n-//! > **NOTE**: This module is very much a work in progress and is under active\n-//! > development. At this time it is still recommended to use the `old_io`\n-//! > module while the details of this module shake out.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "0e68be8d9e25b5feb3f84e2b3c269a15de8c7117", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b4f5e78b467fff62bcb5287f34940fd0037f2216/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f5e78b467fff62bcb5287f34940fd0037f2216/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=b4f5e78b467fff62bcb5287f34940fd0037f2216", "patch": "@@ -21,20 +21,20 @@ use sys::stdio;\n /// A handle to a raw instance of the standard input stream of this process.\n ///\n /// This handle is not synchronized or buffered in any fashion. Constructed via\n-/// the `std::io::stdin_raw` function.\n-pub struct StdinRaw(stdio::Stdin);\n+/// the `std::io::stdio::stdin_raw` function.\n+struct StdinRaw(stdio::Stdin);\n \n /// A handle to a raw instance of the standard output stream of this process.\n ///\n /// This handle is not synchronized or buffered in any fashion. Constructed via\n-/// the `std::io::stdout_raw` function.\n-pub struct StdoutRaw(stdio::Stdout);\n+/// the `std::io::stdio::stdout_raw` function.\n+struct StdoutRaw(stdio::Stdout);\n \n /// A handle to a raw instance of the standard output stream of this process.\n ///\n /// This handle is not synchronized or buffered in any fashion. Constructed via\n-/// the `std::io::stderr_raw` function.\n-pub struct StderrRaw(stdio::Stderr);\n+/// the `std::io::stdio::stderr_raw` function.\n+struct StderrRaw(stdio::Stderr);\n \n /// Construct a new raw handle to the standard input of this process.\n ///\n@@ -43,7 +43,7 @@ pub struct StderrRaw(stdio::Stderr);\n /// handles is **not** available to raw handles returned from this function.\n ///\n /// The returned handle has no external synchronization or buffering.\n-pub fn stdin_raw() -> StdinRaw { StdinRaw(stdio::Stdin::new()) }\n+fn stdin_raw() -> StdinRaw { StdinRaw(stdio::Stdin::new()) }\n \n /// Construct a new raw handle to the standard input stream of this process.\n ///\n@@ -54,7 +54,7 @@ pub fn stdin_raw() -> StdinRaw { StdinRaw(stdio::Stdin::new()) }\n ///\n /// The returned handle has no external synchronization or buffering layered on\n /// top.\n-pub fn stdout_raw() -> StdoutRaw { StdoutRaw(stdio::Stdout::new()) }\n+fn stdout_raw() -> StdoutRaw { StdoutRaw(stdio::Stdout::new()) }\n \n /// Construct a new raw handle to the standard input stream of this process.\n ///\n@@ -63,7 +63,7 @@ pub fn stdout_raw() -> StdoutRaw { StdoutRaw(stdio::Stdout::new()) }\n ///\n /// The returned handle has no external synchronization or buffering layered on\n /// top.\n-pub fn stderr_raw() -> StderrRaw { StderrRaw(stdio::Stderr::new()) }\n+fn stderr_raw() -> StderrRaw { StderrRaw(stdio::Stderr::new()) }\n \n impl Read for StdinRaw {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }\n@@ -109,9 +109,6 @@ pub struct StdinLock<'a> {\n /// The `Read` trait is implemented for the returned value but the `BufRead`\n /// trait is not due to the global nature of the standard input stream. The\n /// locked version, `StdinLock`, implements both `Read` and `BufRead`, however.\n-///\n-/// To avoid locking and buffering altogether, it is recommended to use the\n-/// `stdin_raw` constructor.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stdin() -> Stdin {\n     static INSTANCE: Lazy<Mutex<BufReader<StdinRaw>>> = lazy_init!(stdin_init);\n@@ -224,9 +221,6 @@ pub struct StdoutLock<'a> {\n /// provided via the `lock` method.\n ///\n /// The returned handle implements the `Write` trait.\n-///\n-/// To avoid locking and buffering altogether, it is recommended to use the\n-/// `stdout_raw` constructor.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stdout() -> Stdout {\n     static INSTANCE: Lazy<Mutex<LineWriter<StdoutRaw>>> = lazy_init!(stdout_init);\n@@ -297,9 +291,6 @@ pub struct StderrLock<'a> {\n /// this function. No handles are buffered, however.\n ///\n /// The returned handle implements the `Write` trait.\n-///\n-/// To avoid locking altogether, it is recommended to use the `stderr_raw`\n-/// constructor.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stderr() -> Stderr {\n     static INSTANCE: Lazy<Mutex<StderrRaw>> = lazy_init!(stderr_init);"}, {"sha": "2159e3007442660693f884f55c1697d5f1c58e3f", "filename": "src/libstd/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4f5e78b467fff62bcb5287f34940fd0037f2216/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f5e78b467fff62bcb5287f34940fd0037f2216/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=b4f5e78b467fff62bcb5287f34940fd0037f2216", "patch": "@@ -86,8 +86,8 @@\n //!\n //! * Occurrences of `.` are normalized away, *except* if they are at\n //! the beginning of the path (in which case they are often meaningful\n-//! in terms of path searching). So, fore xample, `a/./b`, `a/b/`,\n-//! `/a/b/.` and `a/b` all ahve components `a` and `b`, but `./a/b`\n+//! in terms of path searching). So, for example, `a/./b`, `a/b/`,\n+//! `/a/b/.` and `a/b` all have components `a` and `b`, but `./a/b`\n //! has a leading current directory component.\n //!\n //! No other normalization takes place by default. In particular,"}]}