{"sha": "679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3OWI1YTlmYWFlZDg0NWJmNGE0YmQ4ZmUyN2EyYTk4ZGY3OGI3YWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-27T14:25:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-27T14:25:57Z"}, "message": "Auto merge of #29327 - sanxiyn:argument, r=nrc\n\nFix #24114.", "tree": {"sha": "27eb4af7bc55419ba66729cc3fbeeb0b6be7b666", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27eb4af7bc55419ba66729cc3fbeeb0b6be7b666"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad", "html_url": "https://github.com/rust-lang/rust/commit/679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eab5ad529bf1d0406b25c52cc1b5281bc54c5679", "url": "https://api.github.com/repos/rust-lang/rust/commits/eab5ad529bf1d0406b25c52cc1b5281bc54c5679", "html_url": "https://github.com/rust-lang/rust/commit/eab5ad529bf1d0406b25c52cc1b5281bc54c5679"}, {"sha": "4e2189fe457e246654f6da6152da1609b392aeea", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e2189fe457e246654f6da6152da1609b392aeea", "html_url": "https://github.com/rust-lang/rust/commit/4e2189fe457e246654f6da6152da1609b392aeea"}], "stats": {"total": 112, "additions": 74, "deletions": 38}, "files": [{"sha": "f255949a9f5198327eafffeb57a746f8020db5eb", "filename": "src/librustc/front/map/collector.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs?ref=679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad", "patch": "@@ -104,12 +104,6 @@ impl<'ast> NodeCollector<'ast> {\n         let entry = MapEntry::from_node(self.parent_node, node);\n         self.insert_entry(id, entry);\n     }\n-\n-    fn visit_fn_decl(&mut self, decl: &'ast FnDecl) {\n-        for a in &decl.inputs {\n-            self.insert(a.id, NodeArg(&*a.pat));\n-        }\n-    }\n }\n \n impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n@@ -295,20 +289,9 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n     fn visit_fn(&mut self, fk: visit::FnKind<'ast>, fd: &'ast FnDecl,\n                 b: &'ast Block, s: Span, id: NodeId) {\n         assert_eq!(self.parent_node, id);\n-        self.visit_fn_decl(fd);\n         visit::walk_fn(self, fk, fd, b, s);\n     }\n \n-    fn visit_ty(&mut self, ty: &'ast Ty) {\n-        match ty.node {\n-            TyBareFn(ref fd) => {\n-                self.visit_fn_decl(&*fd.decl);\n-            }\n-            _ => {}\n-        }\n-        visit::walk_ty(self, ty);\n-    }\n-\n     fn visit_block(&mut self, block: &'ast Block) {\n         self.insert(block.id, NodeBlock(block));\n         let parent_node = self.parent_node;"}, {"sha": "94800db184e988b97a0db42e1355c2978e34eb8b", "filename": "src/librustc/front/map/mod.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs?ref=679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad", "patch": "@@ -118,7 +118,6 @@ pub enum Node<'ast> {\n     NodeVariant(&'ast Variant),\n     NodeExpr(&'ast Expr),\n     NodeStmt(&'ast Stmt),\n-    NodeArg(&'ast Pat),\n     NodeLocal(&'ast Pat),\n     NodePat(&'ast Pat),\n     NodeBlock(&'ast Block),\n@@ -145,7 +144,6 @@ pub enum MapEntry<'ast> {\n     EntryVariant(NodeId, &'ast Variant),\n     EntryExpr(NodeId, &'ast Expr),\n     EntryStmt(NodeId, &'ast Stmt),\n-    EntryArg(NodeId, &'ast Pat),\n     EntryLocal(NodeId, &'ast Pat),\n     EntryPat(NodeId, &'ast Pat),\n     EntryBlock(NodeId, &'ast Block),\n@@ -180,7 +178,6 @@ impl<'ast> MapEntry<'ast> {\n             NodeVariant(n) => EntryVariant(p, n),\n             NodeExpr(n) => EntryExpr(p, n),\n             NodeStmt(n) => EntryStmt(p, n),\n-            NodeArg(n) => EntryArg(p, n),\n             NodeLocal(n) => EntryLocal(p, n),\n             NodePat(n) => EntryPat(p, n),\n             NodeBlock(n) => EntryBlock(p, n),\n@@ -199,7 +196,6 @@ impl<'ast> MapEntry<'ast> {\n             EntryVariant(id, _) => id,\n             EntryExpr(id, _) => id,\n             EntryStmt(id, _) => id,\n-            EntryArg(id, _) => id,\n             EntryLocal(id, _) => id,\n             EntryPat(id, _) => id,\n             EntryBlock(id, _) => id,\n@@ -219,7 +215,6 @@ impl<'ast> MapEntry<'ast> {\n             EntryVariant(_, n) => NodeVariant(n),\n             EntryExpr(_, n) => NodeExpr(n),\n             EntryStmt(_, n) => NodeStmt(n),\n-            EntryArg(_, n) => NodeArg(n),\n             EntryLocal(_, n) => NodeLocal(n),\n             EntryPat(_, n) => NodePat(n),\n             EntryBlock(_, n) => NodeBlock(n),\n@@ -348,6 +343,27 @@ impl<'ast> Map<'ast> {\n         self.find_entry(id).and_then(|x| x.parent_node()).unwrap_or(id)\n     }\n \n+    /// Check if the node is an argument. An argument is a local variable whose\n+    /// immediate parent is an item or a closure.\n+    pub fn is_argument(&self, id: NodeId) -> bool {\n+        match self.find(id) {\n+            Some(NodeLocal(_)) => (),\n+            _ => return false,\n+        }\n+        match self.find(self.get_parent_node(id)) {\n+            Some(NodeItem(_)) |\n+            Some(NodeTraitItem(_)) |\n+            Some(NodeImplItem(_)) => true,\n+            Some(NodeExpr(e)) => {\n+                match e.node {\n+                    ExprClosure(..) => true,\n+                    _ => false,\n+                }\n+            }\n+            _ => false,\n+        }\n+    }\n+\n     /// If there is some error when walking the parents (e.g., a node does not\n     /// have a parent in the map or a node can't be found), then we return the\n     /// last good node id we found. Note that reaching the crate root (id == 0),\n@@ -628,7 +644,7 @@ impl<'ast> Map<'ast> {\n             Some(NodeVariant(variant)) => variant.span,\n             Some(NodeExpr(expr)) => expr.span,\n             Some(NodeStmt(stmt)) => stmt.span,\n-            Some(NodeArg(pat)) | Some(NodeLocal(pat)) => pat.span,\n+            Some(NodeLocal(pat)) => pat.span,\n             Some(NodePat(pat)) => pat.span,\n             Some(NodeBlock(block)) => block.span,\n             Some(NodeStructCtor(_)) => self.expect_item(self.get_parent(id)).span,\n@@ -886,7 +902,6 @@ impl<'a> NodePrinter for pprust::State<'a> {\n             // ast_map to reconstruct their full structure for pretty\n             // printing.\n             NodeLocal(_)       => panic!(\"cannot print isolated Local\"),\n-            NodeArg(_)         => panic!(\"cannot print isolated Arg\"),\n             NodeStructCtor(_)  => panic!(\"cannot print isolated StructCtor\"),\n         }\n     }\n@@ -965,9 +980,6 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n         Some(NodeStmt(ref stmt)) => {\n             format!(\"stmt {}{}\", pprust::stmt_to_string(&**stmt), id_str)\n         }\n-        Some(NodeArg(ref pat)) => {\n-            format!(\"arg {}{}\", pprust::pat_to_string(&**pat), id_str)\n-        }\n         Some(NodeLocal(ref pat)) => {\n             format!(\"local {}{}\", pprust::pat_to_string(&**pat), id_str)\n         }"}, {"sha": "fb3a6b0f4202713ac303307d2a8e709d22fd3747", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad", "patch": "@@ -278,7 +278,7 @@ enum PassArgs {\n impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n     pub fn new(delegate: &'d mut (Delegate<'tcx>),\n                typer: &'t infer::InferCtxt<'a, 'tcx>)\n-               -> ExprUseVisitor<'d,'t,'a,'tcx> where 'tcx:'a\n+               -> ExprUseVisitor<'d,'t,'a,'tcx> where 'tcx:'a+'d\n     {\n         let mc: mc::MemCategorizationContext<'t, 'a, 'tcx> =\n             mc::MemCategorizationContext::new(typer);"}, {"sha": "1fcd6e92305f5f154ce70ff4372c0341413fec0f", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad", "patch": "@@ -305,7 +305,7 @@ impl MutabilityCategory {\n \n     fn from_local(tcx: &ty::ctxt, id: ast::NodeId) -> MutabilityCategory {\n         let ret = match tcx.map.get(id) {\n-            ast_map::NodeLocal(p) | ast_map::NodeArg(p) => match p.node {\n+            ast_map::NodeLocal(p) => match p.node {\n                 hir::PatIdent(bind_mode, _, _) => {\n                     if bind_mode == hir::BindByValue(hir::MutMutable) {\n                         McDeclared\n@@ -1463,11 +1463,10 @@ impl<'tcx> cmt_<'tcx> {\n                 \"non-lvalue\".to_string()\n             }\n             cat_local(vid) => {\n-                match tcx.map.find(vid) {\n-                    Some(ast_map::NodeArg(_)) => {\n-                        \"argument\".to_string()\n-                    }\n-                    _ => \"local variable\".to_string()\n+                if tcx.map.is_argument(vid) {\n+                    \"argument\".to_string()\n+                } else {\n+                    \"local variable\".to_string()\n                 }\n             }\n             cat_deref(_, _, pk) => {"}, {"sha": "2e7b1f31ba9bc8f73935d3ccbda82da1b99092e2", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad", "patch": "@@ -1976,7 +1976,7 @@ pub fn create_captured_var_metadata<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         None => {\n             cx.sess().span_bug(span, \"debuginfo::create_captured_var_metadata: node not found\");\n         }\n-        Some(hir_map::NodeLocal(pat)) | Some(hir_map::NodeArg(pat)) => {\n+        Some(hir_map::NodeLocal(pat)) => {\n             match pat.node {\n                 hir::PatIdent(_, ref path1, _) => {\n                     path1.node.name"}, {"sha": "1f9116f7491d16b4ece898c79418c5dc5bc337cb", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad", "patch": "@@ -262,7 +262,6 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         hir_map::NodeTyParam(..) |\n         hir_map::NodeExpr(..) |\n         hir_map::NodeStmt(..) |\n-        hir_map::NodeArg(..) |\n         hir_map::NodeBlock(..) |\n         hir_map::NodePat(..) |\n         hir_map::NodeLocal(..) => {"}, {"sha": "3230689e53c8a5611fab1af16dc3e4669df15b0f", "filename": "src/test/compile-fail/borrowck-argument.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad/src%2Ftest%2Fcompile-fail%2Fborrowck-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad/src%2Ftest%2Fcompile-fail%2Fborrowck-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-argument.rs?ref=679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[derive(Copy, Clone)]\n+struct S;\n+\n+impl S {\n+    fn mutate(&mut self) {\n+    }\n+}\n+\n+fn func(arg: S) {\n+    arg.mutate(); //~ ERROR: cannot borrow immutable argument\n+}\n+\n+impl S {\n+    fn method(&self, arg: S) {\n+        arg.mutate(); //~ ERROR: cannot borrow immutable argument\n+    }\n+}\n+\n+trait T {\n+    fn default(&self, arg: S) {\n+        arg.mutate(); //~ ERROR: cannot borrow immutable argument\n+    }\n+}\n+\n+impl T for S {}\n+\n+fn main() {\n+    let s = S;\n+    func(s);\n+    s.method(s);\n+    s.default(s);\n+    (|arg: S| { arg.mutate() })(s); //~ ERROR: cannot borrow immutable argument\n+}"}, {"sha": "3646a68f06fd745ed09fb0f41df2a2c971339559", "filename": "src/test/compile-fail/borrowck-closures-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs?ref=679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad", "patch": "@@ -43,7 +43,7 @@ fn d(x: &mut isize) {\n }\n \n fn e(x: &mut isize) {\n-    let c1 = || x = panic!(); //~ ERROR closure cannot assign to immutable local variable\n+    let c1 = || x = panic!(); //~ ERROR closure cannot assign to immutable argument\n }\n \n fn main() {"}, {"sha": "1c12ca9c1de76234a3e4d72554992b55048d8074", "filename": "src/test/compile-fail/borrowck-unboxed-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad/src%2Ftest%2Fcompile-fail%2Fborrowck-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad/src%2Ftest%2Fcompile-fail%2Fborrowck-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-unboxed-closures.rs?ref=679b5a9faaed845bf4a4bd8fe27a2a98df78b7ad", "patch": "@@ -17,7 +17,7 @@ fn a<F:Fn(isize, isize) -> isize>(mut f: F) {\n }\n \n fn b<F:FnMut(isize, isize) -> isize>(f: F) {\n-    f(1, 2);    //~ ERROR cannot borrow immutable local variable\n+    f(1, 2);    //~ ERROR cannot borrow immutable argument\n }\n \n fn c<F:FnOnce(isize, isize) -> isize>(f: F) {"}]}