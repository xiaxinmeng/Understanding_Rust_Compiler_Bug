{"sha": "8e0293137f895a417fa043b9817c455150769406", "node_id": "C_kwDOAAsO6NoAKDhlMDI5MzEzN2Y4OTVhNDE3ZmEwNDNiOTgxN2M0NTUxNTA3Njk0MDY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-10T23:13:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-10T23:13:06Z"}, "message": "Auto merge of #90784 - matthiaskrgr:rollup-car8g12, r=matthiaskrgr\n\nRollup of 3 pull requests\n\nSuccessful merges:\n\n - #89930 (Only use `clone3` when needed for pidfd)\n - #90736 (adjust documented inline-asm register constraints)\n - #90783 (Update Miri)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e0dfacec7128e642c33c5ca05b9eddee46b05d0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0dfacec7128e642c33c5ca05b9eddee46b05d0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e0293137f895a417fa043b9817c455150769406", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e0293137f895a417fa043b9817c455150769406", "html_url": "https://github.com/rust-lang/rust/commit/8e0293137f895a417fa043b9817c455150769406", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e0293137f895a417fa043b9817c455150769406/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82af160c2cb9c349a0373cba98d8ad7f911f0d34", "url": "https://api.github.com/repos/rust-lang/rust/commits/82af160c2cb9c349a0373cba98d8ad7f911f0d34", "html_url": "https://github.com/rust-lang/rust/commit/82af160c2cb9c349a0373cba98d8ad7f911f0d34"}, {"sha": "17cb2b6f433aab56e9bac214946683349aa574cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/17cb2b6f433aab56e9bac214946683349aa574cd", "html_url": "https://github.com/rust-lang/rust/commit/17cb2b6f433aab56e9bac214946683349aa574cd"}], "stats": {"total": 70, "additions": 23, "deletions": 47}, "files": [{"sha": "326382d9038a8a1e2c9c36361e07e58a89bcc4f1", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8e0293137f895a417fa043b9817c455150769406/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0293137f895a417fa043b9817c455150769406/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=8e0293137f895a417fa043b9817c455150769406", "patch": "@@ -166,21 +166,22 @@ impl Command {\n             fn clone3(cl_args: *mut clone_args, len: libc::size_t) -> libc::c_long\n         }\n \n+        // Bypassing libc for `clone3` can make further libc calls unsafe,\n+        // so we use it sparingly for now. See #89522 for details.\n+        // Some tools (e.g. sandboxing tools) may also expect `fork`\n+        // rather than `clone3`.\n+        let want_clone3_pidfd = self.get_create_pidfd();\n+\n         // If we fail to create a pidfd for any reason, this will\n         // stay as -1, which indicates an error.\n         let mut pidfd: pid_t = -1;\n \n         // Attempt to use the `clone3` syscall, which supports more arguments\n         // (in particular, the ability to create a pidfd). If this fails,\n         // we will fall through this block to a call to `fork()`\n-        if HAS_CLONE3.load(Ordering::Relaxed) {\n-            let mut flags = 0;\n-            if self.get_create_pidfd() {\n-                flags |= CLONE_PIDFD;\n-            }\n-\n+        if want_clone3_pidfd && HAS_CLONE3.load(Ordering::Relaxed) {\n             let mut args = clone_args {\n-                flags,\n+                flags: CLONE_PIDFD,\n                 pidfd: &mut pidfd as *mut pid_t as u64,\n                 child_tid: 0,\n                 parent_tid: 0,\n@@ -212,8 +213,8 @@ impl Command {\n             }\n         }\n \n-        // If we get here, the 'clone3' syscall does not exist\n-        // or we do not have permission to call it\n+        // Generally, we just call `fork`. If we get here after wanting `clone3`,\n+        // then the syscall does not exist or we do not have permission to call it.\n         cvt(libc::fork()).map(|res| (res, pidfd))\n     }\n "}, {"sha": "c4e8c6e5eb86c8889548b50e1fc89ab058ac3cda", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e0293137f895a417fa043b9817c455150769406/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/8e0293137f895a417fa043b9817c455150769406/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=8e0293137f895a417fa043b9817c455150769406", "patch": "@@ -562,9 +562,12 @@ Here is the list of currently supported register classes:\n | AArch64 | `vreg` | `v[0-31]` | `w` |\n | AArch64 | `vreg_low16` | `v[0-15]` | `x` |\n | AArch64 | `preg` | `p[0-15]`, `ffr` | Only clobbers |\n-| ARM | `reg` | `r[0-12]`, `r14` | `r` |\n-| ARM (Thumb) | `reg_thumb` | `r[0-r7]` | `l` |\n+| ARM (ARM) | `reg` | `r[0-12]`, `r14` | `r` |\n+| ARM (Thumb2) | `reg` | `r[0-12]`, `r14` | `r` |\n+| ARM (Thumb1) | `reg` | `r[0-7]` | `r` |\n | ARM (ARM) | `reg_thumb` | `r[0-r12]`, `r14` | `l` |\n+| ARM (Thumb2) | `reg_thumb` | `r[0-7]` | `l` |\n+| ARM (Thumb1) | `reg_thumb` | `r[0-7]` | `l` |\n | ARM | `sreg` | `s[0-31]` | `t` |\n | ARM | `sreg_low16` | `s[0-15]` | `x` |\n | ARM | `dreg` | `d[0-31]` | `w` |"}, {"sha": "61914e2293070459c03ee0a6c66edf2975e7829a", "filename": "src/test/ui/command/command-pre-exec.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8e0293137f895a417fa043b9817c455150769406/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0293137f895a417fa043b9817c455150769406/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs?ref=8e0293137f895a417fa043b9817c455150769406", "patch": "@@ -8,30 +8,15 @@\n // ignore-sgx no processes\n #![feature(process_exec, rustc_private)]\n \n+extern crate libc;\n+\n use std::env;\n use std::io::Error;\n use std::os::unix::process::CommandExt;\n use std::process::Command;\n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::sync::Arc;\n \n-#[cfg(not(target_os = \"linux\"))]\n-fn getpid() -> u32 {\n-    use std::process;\n-    process::id()\n-}\n-\n-/// We need to directly use the getpid syscall instead of using `process::id()`\n-/// because the libc wrapper might return incorrect values after a process was\n-/// forked.\n-#[cfg(target_os = \"linux\")]\n-fn getpid() -> u32 {\n-    extern crate libc;\n-    unsafe {\n-        libc::syscall(libc::SYS_getpid) as _\n-    }\n-}\n-\n fn main() {\n     if let Some(arg) = env::args().nth(1) {\n         match &arg[..] {\n@@ -83,12 +68,14 @@ fn main() {\n     };\n     assert_eq!(output.raw_os_error(), Some(102));\n \n-    let pid = getpid();\n+    let pid = unsafe { libc::getpid() };\n+    assert!(pid >= 0);\n     let output = unsafe {\n         Command::new(&me)\n             .arg(\"empty\")\n             .pre_exec(move || {\n-                let child = getpid();\n+                let child = libc::getpid();\n+                assert!(child >= 0);\n                 assert!(pid != child);\n                 Ok(())\n             })"}, {"sha": "1ccf6bb051c20593c0e4d6f90f04669fbe8673e3", "filename": "src/test/ui/process/process-panic-after-fork.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8e0293137f895a417fa043b9817c455150769406/src%2Ftest%2Fui%2Fprocess%2Fprocess-panic-after-fork.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0293137f895a417fa043b9817c455150769406/src%2Ftest%2Fui%2Fprocess%2Fprocess-panic-after-fork.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fprocess-panic-after-fork.rs?ref=8e0293137f895a417fa043b9817c455150769406", "patch": "@@ -23,21 +23,6 @@ use std::sync::atomic::{AtomicU32, Ordering};\n \n use libc::c_int;\n \n-#[cfg(not(target_os = \"linux\"))]\n-fn getpid() -> u32 {\n-    process::id()\n-}\n-\n-/// We need to directly use the getpid syscall instead of using `process::id()`\n-/// because the libc wrapper might return incorrect values after a process was\n-/// forked.\n-#[cfg(target_os = \"linux\")]\n-fn getpid() -> u32 {\n-    unsafe {\n-        libc::syscall(libc::SYS_getpid) as _\n-    }\n-}\n-\n /// This stunt allocator allows us to spot heap allocations in the child.\n struct PidChecking<A> {\n     parent: A,\n@@ -59,7 +44,7 @@ impl<A> PidChecking<A> {\n     fn check(&self) {\n         let require_pid = self.require_pid.load(Ordering::Acquire);\n         if require_pid != 0 {\n-            let actual_pid = getpid();\n+            let actual_pid = process::id();\n             if require_pid != actual_pid {\n                 unsafe {\n                     libc::raise(libc::SIGUSR1);"}, {"sha": "a8b976eb350acec83280a0cd1ca3ac99faff67bc", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=8e0293137f895a417fa043b9817c455150769406", "patch": "@@ -1 +1 @@\n-Subproject commit 9c18177cd36fe07a3c251234240a9c77a4e66785\n+Subproject commit a8b976eb350acec83280a0cd1ca3ac99faff67bc"}]}