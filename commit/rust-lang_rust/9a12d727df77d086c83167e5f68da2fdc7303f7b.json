{"sha": "9a12d727df77d086c83167e5f68da2fdc7303f7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMTJkNzI3ZGY3N2QwODZjODMxNjdlNWY2OGRhMmZkYzczMDNmN2I=", "commit": {"author": {"name": "Beno\u00eet du Garreau", "email": "benoit.dugarreau@platform.sh", "date": "2020-11-04T10:41:57Z"}, "committer": {"name": "Beno\u00eet du Garreau", "email": "benoit.dugarreau@platform.sh", "date": "2020-11-04T10:41:57Z"}, "message": "Constantify `UnsafeCell::into_inner` and related\n\nAlso includes:\n- Cell::into_inner\n- RefCell::into_inner\n- Atomic*::into_inner", "tree": {"sha": "3e2a072888494d5d639d1dc2a42c26bae78c444e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e2a072888494d5d639d1dc2a42c26bae78c444e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a12d727df77d086c83167e5f68da2fdc7303f7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a12d727df77d086c83167e5f68da2fdc7303f7b", "html_url": "https://github.com/rust-lang/rust/commit/9a12d727df77d086c83167e5f68da2fdc7303f7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a12d727df77d086c83167e5f68da2fdc7303f7b/comments", "author": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56293097f7f877f1350a6cd00f79d03132f16515", "url": "https://api.github.com/repos/rust-lang/rust/commits/56293097f7f877f1350a6cd00f79d03132f16515", "html_url": "https://github.com/rust-lang/rust/commit/56293097f7f877f1350a6cd00f79d03132f16515"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "d753b2a02f7a2dbbc37266a13345e9270c9392d1", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9a12d727df77d086c83167e5f68da2fdc7303f7b/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a12d727df77d086c83167e5f68da2fdc7303f7b/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=9a12d727df77d086c83167e5f68da2fdc7303f7b", "patch": "@@ -406,7 +406,8 @@ impl<T> Cell<T> {\n     /// assert_eq!(five, 5);\n     /// ```\n     #[stable(feature = \"move_cell\", since = \"1.17.0\")]\n-    pub fn into_inner(self) -> T {\n+    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"none\")]\n+    pub const fn into_inner(self) -> T {\n         self.value.into_inner()\n     }\n }\n@@ -668,12 +669,11 @@ impl<T> RefCell<T> {\n     /// let five = c.into_inner();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"none\")]\n     #[inline]\n-    pub fn into_inner(self) -> T {\n+    pub const fn into_inner(self) -> T {\n         // Since this function takes `self` (the `RefCell`) by value, the\n         // compiler statically verifies that it is not currently borrowed.\n-        // Therefore the following assertion is just a `debug_assert!`.\n-        debug_assert!(self.borrow.get() == UNUSED);\n         self.value.into_inner()\n     }\n \n@@ -1682,7 +1682,8 @@ impl<T> UnsafeCell<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn into_inner(self) -> T {\n+    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"none\")]\n+    pub const fn into_inner(self) -> T {\n         self.value\n     }\n }"}, {"sha": "ee63f1ab1f6572422bac0327d5e4d415b5aac0c7", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a12d727df77d086c83167e5f68da2fdc7303f7b/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a12d727df77d086c83167e5f68da2fdc7303f7b/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=9a12d727df77d086c83167e5f68da2fdc7303f7b", "patch": "@@ -70,6 +70,7 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(const_alloc_layout)]\n #![feature(const_discriminant)]\n+#![feature(const_cell_into_inner)]\n #![feature(const_checked_int_methods)]\n #![feature(const_euclidean_int_methods)]\n #![feature(const_float_classify)]"}, {"sha": "3283736c4feda51a2d05b20509b1e0787b579066", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a12d727df77d086c83167e5f68da2fdc7303f7b/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a12d727df77d086c83167e5f68da2fdc7303f7b/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=9a12d727df77d086c83167e5f68da2fdc7303f7b", "patch": "@@ -365,7 +365,8 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"atomic_access\", since = \"1.15.0\")]\n-    pub fn into_inner(self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"none\")]\n+    pub const fn into_inner(self) -> bool {\n         self.v.into_inner() != 0\n     }\n \n@@ -941,7 +942,8 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"atomic_access\", since = \"1.15.0\")]\n-    pub fn into_inner(self) -> *mut T {\n+    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"none\")]\n+    pub const fn into_inner(self) -> *mut T {\n         self.p.into_inner()\n     }\n \n@@ -1462,7 +1464,8 @@ assert_eq!(some_var.into_inner(), 5);\n ```\"),\n                 #[inline]\n                 #[$stable_access]\n-                pub fn into_inner(self) -> $int_type {\n+                #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"none\")]\n+                pub const fn into_inner(self) -> $int_type {\n                     self.v.into_inner()\n                 }\n             }"}, {"sha": "77517879dd2507f20df999d24caf294e5599042d", "filename": "library/core/tests/cell.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a12d727df77d086c83167e5f68da2fdc7303f7b/library%2Fcore%2Ftests%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a12d727df77d086c83167e5f68da2fdc7303f7b/library%2Fcore%2Ftests%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fcell.rs?ref=9a12d727df77d086c83167e5f68da2fdc7303f7b", "patch": "@@ -422,3 +422,15 @@ fn refcell_format() {\n     let msg = format!(\"{name} {}\", &*what.borrow(), name = &*name.borrow());\n     assert_eq!(msg, \"rust rocks\".to_string());\n }\n+\n+#[allow(dead_code)]\n+fn const_cells() {\n+    const UNSAFE_CELL: UnsafeCell<i32> = UnsafeCell::new(3);\n+    const _: i32 = UNSAFE_CELL.into_inner();\n+\n+    const REF_CELL: RefCell<i32> = RefCell::new(3);\n+    const _: i32 = REF_CELL.into_inner();\n+\n+    const CELL: Cell<i32> = Cell::new(3);\n+    const _: i32 = CELL.into_inner();\n+}"}, {"sha": "31aa46305641a6c9c25636d347484c135598edbe", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a12d727df77d086c83167e5f68da2fdc7303f7b/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a12d727df77d086c83167e5f68da2fdc7303f7b/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=9a12d727df77d086c83167e5f68da2fdc7303f7b", "patch": "@@ -9,6 +9,7 @@\n #![feature(box_syntax)]\n #![feature(cell_update)]\n #![feature(const_assume)]\n+#![feature(const_cell_into_inner)]\n #![feature(core_intrinsics)]\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]"}]}