{"sha": "1789430a49d7ce0f59b76b4f07a2d8ba6be3d03e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ODk0MzBhNDlkN2NlMGY1OWI3NmI0ZjA3YTJkOGJhNmJlM2QwM2U=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-04-14T15:25:31Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-04-14T15:26:07Z"}, "message": "Add a `TEMPORARY_CSTRING_AS_PTR` lint", "tree": {"sha": "b2102e12e2f1463035f6b386cd431ef47c6ecabc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2102e12e2f1463035f6b386cd431ef47c6ecabc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1789430a49d7ce0f59b76b4f07a2d8ba6be3d03e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1789430a49d7ce0f59b76b4f07a2d8ba6be3d03e", "html_url": "https://github.com/rust-lang/rust/commit/1789430a49d7ce0f59b76b4f07a2d8ba6be3d03e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1789430a49d7ce0f59b76b4f07a2d8ba6be3d03e/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "831b8fc1b5e78673a2dd855556c03b756819e5b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/831b8fc1b5e78673a2dd855556c03b756819e5b3", "html_url": "https://github.com/rust-lang/rust/commit/831b8fc1b5e78673a2dd855556c03b756819e5b3"}], "stats": {"total": 73, "additions": 68, "deletions": 5}, "files": [{"sha": "c7cee794db453d551735c08160015dc1234e8ebe", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1789430a49d7ce0f59b76b4f07a2d8ba6be3d03e/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/1789430a49d7ce0f59b76b4f07a2d8ba6be3d03e/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=1789430a49d7ce0f59b76b4f07a2d8ba6be3d03e", "patch": "@@ -14,7 +14,7 @@ Table of contents:\n * [License](#license)\n \n ##Lints\n-There are 140 lints included in this crate:\n+There are 141 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -135,6 +135,7 @@ name\n [suspicious_assignment_formatting](https://github.com/Manishearth/rust-clippy/wiki#suspicious_assignment_formatting) | warn    | suspicious formatting of `*=`, `-=` or `!=`\n [suspicious_else_formatting](https://github.com/Manishearth/rust-clippy/wiki#suspicious_else_formatting)             | warn    | suspicious formatting of `else if`\n [temporary_assignment](https://github.com/Manishearth/rust-clippy/wiki#temporary_assignment)                         | warn    | assignments to temporaries\n+[temporary_cstring_as_ptr](https://github.com/Manishearth/rust-clippy/wiki#temporary_cstring_as_ptr)                 | warn    | getting the inner pointer of a temporary `CString`\n [too_many_arguments](https://github.com/Manishearth/rust-clippy/wiki#too_many_arguments)                             | warn    | functions with too many arguments\n [toplevel_ref_arg](https://github.com/Manishearth/rust-clippy/wiki#toplevel_ref_arg)                                 | warn    | An entire binding was declared as `ref`, in a function argument (`fn foo(ref x: Bar)`), or a `let` statement (`let ref x = foo()`). In such cases, it is preferred to take references with `&`.\n [transmute_ptr_to_ref](https://github.com/Manishearth/rust-clippy/wiki#transmute_ptr_to_ref)                         | warn    | transmutes from a pointer to a reference type"}, {"sha": "c1a7732e3f5b1c62babd839883915d5f1311bcb5", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1789430a49d7ce0f59b76b4f07a2d8ba6be3d03e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1789430a49d7ce0f59b76b4f07a2d8ba6be3d03e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1789430a49d7ce0f59b76b4f07a2d8ba6be3d03e", "patch": "@@ -325,6 +325,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         methods::SEARCH_IS_SOME,\n         methods::SHOULD_IMPLEMENT_TRAIT,\n         methods::SINGLE_CHAR_PATTERN,\n+        methods::TEMPORARY_CSTRING_AS_PTR,\n         methods::WRONG_SELF_CONVENTION,\n         minmax::MIN_MAX,\n         misc::CMP_NAN,"}, {"sha": "8a51b576b3df031b031056d12695e588b7977146", "filename": "src/methods.rs", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1789430a49d7ce0f59b76b4f07a2d8ba6be3d03e/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1789430a49d7ce0f59b76b4f07a2d8ba6be3d03e/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=1789430a49d7ce0f59b76b4f07a2d8ba6be3d03e", "patch": "@@ -13,8 +13,8 @@ use syntax::ptr::P;\n use utils::{get_trait_def_id, implements_trait, in_external_macro, in_macro, match_path, match_trait_method,\n             match_type, method_chain_args, return_ty, same_tys, snippet, snippet_opt, span_lint,\n             span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth};\n-use utils::{BTREEMAP_ENTRY_PATH, DEFAULT_TRAIT_PATH, HASHMAP_ENTRY_PATH, OPTION_PATH, RESULT_PATH,\n-            VEC_PATH};\n+use utils::{CSTRING_NEW_PATH, BTREEMAP_ENTRY_PATH, DEFAULT_TRAIT_PATH, HASHMAP_ENTRY_PATH,\n+            OPTION_PATH, RESULT_PATH, VEC_PATH};\n use utils::MethodArgs;\n \n #[derive(Clone)]\n@@ -286,6 +286,33 @@ declare_lint! {\n      `_.split(\\\"x\\\")`\"\n }\n \n+/// **What it does:** This lint checks for getting the inner pointer of a temporary `CString`.\n+///\n+/// **Why is this bad?** The inner pointer of a `CString` is only valid as long as the `CString` is\n+/// alive.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust,ignore\n+/// let c_str = CString::new(\"foo\").unwrap().as_ptr();\n+/// unsafe {\n+/// call_some_ffi_func(c_str);\n+/// }\n+/// ```\n+/// Here `c_str` point to a freed address. The correct use would be:\n+/// ```rust,ignore\n+/// let c_str = CString::new(\"foo\").unwrap();\n+/// unsafe {\n+/// call_some_ffi_func(c_str.as_ptr());\n+/// }\n+/// ```\n+declare_lint! {\n+    pub TEMPORARY_CSTRING_AS_PTR,\n+    Warn,\n+    \"getting the inner pointer of a temporary `CString`\"\n+}\n+\n impl LintPass for MethodsPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(EXTEND_FROM_SLICE,\n@@ -303,7 +330,8 @@ impl LintPass for MethodsPass {\n                     CLONE_DOUBLE_REF,\n                     NEW_RET_NO_SELF,\n                     SINGLE_CHAR_PATTERN,\n-                    SEARCH_IS_SOME)\n+                    SEARCH_IS_SOME,\n+                    TEMPORARY_CSTRING_AS_PTR)\n     }\n }\n \n@@ -334,7 +362,11 @@ impl LateLintPass for MethodsPass {\n                     lint_search_is_some(cx, expr, \"rposition\", arglists[0], arglists[1]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"extend\"]) {\n                     lint_extend(cx, expr, arglists[0]);\n+                } else if let Some(arglists) = method_chain_args(expr, &[\"unwrap\", \"as_ptr\"]) {\n+                    lint_cstring_as_ptr(cx, expr, &arglists[0][0], &arglists[1][0]);\n                 }\n+\n+\n                 lint_or_fun_call(cx, expr, &name.node.as_str(), &args);\n                 if args.len() == 1 && name.node.as_str() == \"clone\" {\n                     lint_clone_on_copy(cx, expr);\n@@ -554,6 +586,22 @@ fn lint_extend(cx: &LateContext, expr: &Expr, args: &MethodArgs) {\n     }\n }\n \n+fn lint_cstring_as_ptr(cx: &LateContext, expr: &Expr, new: &Expr, unwrap: &Expr) {\n+    if_let_chain!{[\n+        let ExprCall(ref fun, ref args) = new.node,\n+        args.len() == 1,\n+        let ExprPath(None, ref path) = fun.node,\n+        match_path(path, &CSTRING_NEW_PATH),\n+    ], {\n+        span_lint_and_then(cx, TEMPORARY_CSTRING_AS_PTR, expr.span,\n+                           \"you are getting the inner pointer of a temporary `CString`\",\n+                           |db| {\n+                               db.fileline_note(expr.span, \"that pointer will be invalid outside this expression\");\n+                               db.span_help(unwrap.span, \"assign the `CString` to a variable to extend its lifetime\");\n+                           });\n+    }}\n+}\n+\n fn derefs_to_slice(cx: &LateContext, expr: &Expr, ty: &ty::Ty) -> Option<(Span, &'static str)> {\n     fn may_slice(cx: &LateContext, ty: &ty::Ty) -> bool {\n         match ty.sty {"}, {"sha": "75637b67d9dcc95a9979ee7ec7b89b322c17fe87", "filename": "src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1789430a49d7ce0f59b76b4f07a2d8ba6be3d03e/src%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1789430a49d7ce0f59b76b4f07a2d8ba6be3d03e/src%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fmod.rs?ref=1789430a49d7ce0f59b76b4f07a2d8ba6be3d03e", "patch": "@@ -28,11 +28,13 @@ pub type MethodArgs = HirVec<P<Expr>>;\n // module DefPaths for certain structs/enums we check for\n pub const BEGIN_UNWIND: [&'static str; 3] = [\"std\", \"rt\", \"begin_unwind\"];\n pub const BOX_NEW_PATH: [&'static str; 4] = [\"std\", \"boxed\", \"Box\", \"new\"];\n+pub const BOX_PATH: [&'static str; 3] = [\"std\", \"boxed\", \"Box\"];\n pub const BTREEMAP_ENTRY_PATH: [&'static str; 4] = [\"collections\", \"btree\", \"map\", \"Entry\"];\n pub const BTREEMAP_PATH: [&'static str; 4] = [\"collections\", \"btree\", \"map\", \"BTreeMap\"];\n pub const CLONE_PATH: [&'static str; 3] = [\"clone\", \"Clone\", \"clone\"];\n pub const CLONE_TRAIT_PATH: [&'static str; 2] = [\"clone\", \"Clone\"];\n pub const COW_PATH: [&'static str; 3] = [\"collections\", \"borrow\", \"Cow\"];\n+pub const CSTRING_NEW_PATH: [&'static str; 4] = [\"std\", \"ffi\", \"CString\", \"new\"];\n pub const DEBUG_FMT_METHOD_PATH: [&'static str; 4] = [\"std\", \"fmt\", \"Debug\", \"fmt\"];\n pub const DEFAULT_TRAIT_PATH: [&'static str; 3] = [\"core\", \"default\", \"Default\"];\n pub const DISPLAY_FMT_METHOD_PATH: [&'static str; 4] = [\"std\", \"fmt\", \"Display\", \"fmt\"];\n@@ -59,7 +61,6 @@ pub const STRING_PATH: [&'static str; 3] = [\"collections\", \"string\", \"String\"];\n pub const TRANSMUTE_PATH: [&'static str; 4] = [\"core\", \"intrinsics\", \"\", \"transmute\"];\n pub const VEC_FROM_ELEM_PATH: [&'static str; 3] = [\"std\", \"vec\", \"from_elem\"];\n pub const VEC_PATH: [&'static str; 3] = [\"collections\", \"vec\", \"Vec\"];\n-pub const BOX_PATH: [&'static str; 3] = [\"std\", \"boxed\", \"Box\"];\n \n /// Produce a nested chain of if-lets and ifs from the patterns:\n ///"}, {"sha": "1869fd12a69b32adab8295ffe43afb95a4ca7331", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1789430a49d7ce0f59b76b4f07a2d8ba6be3d03e/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1789430a49d7ce0f59b76b4f07a2d8ba6be3d03e/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=1789430a49d7ce0f59b76b4f07a2d8ba6be3d03e", "patch": "@@ -470,3 +470,15 @@ fn single_char_pattern() {\n     //~| HELP try using a char instead:\n     //~| SUGGESTION x.trim_right_matches('x');\n }\n+\n+#[allow(result_unwrap_used)]\n+fn temporary_cstring() {\n+    use std::ffi::CString;\n+\n+    ( // extra parenthesis to better test spans\n+    //~^ ERROR you are getting the inner pointer of a temporary `CString`\n+    //~| NOTE that pointer will be invalid outside this expression\n+        CString::new(\"foo\").unwrap()\n+        //~^ HELP assign the `CString` to a variable to extend its lifetime\n+    ).as_ptr();\n+}"}]}