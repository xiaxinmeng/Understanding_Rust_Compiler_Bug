{"sha": "6648134434fe4ac69132852e6d58f15578bfc022", "node_id": "C_kwDOAAsO6NoAKDY2NDgxMzQ0MzRmZTRhYzY5MTMyODUyZTZkNThmMTU1NzhiZmMwMjI", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-12-09T06:08:55Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-12-09T06:08:55Z"}, "message": "Apply review feedback; Fix no_global_oom_handling build", "tree": {"sha": "40605477eac0123c6dcc369a997bedf9f3b6d871", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40605477eac0123c6dcc369a997bedf9f3b6d871"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6648134434fe4ac69132852e6d58f15578bfc022", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6648134434fe4ac69132852e6d58f15578bfc022", "html_url": "https://github.com/rust-lang/rust/commit/6648134434fe4ac69132852e6d58f15578bfc022", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6648134434fe4ac69132852e6d58f15578bfc022/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58e60ac211aa7555b949016cb795989ccedd8939", "url": "https://api.github.com/repos/rust-lang/rust/commits/58e60ac211aa7555b949016cb795989ccedd8939", "html_url": "https://github.com/rust-lang/rust/commit/58e60ac211aa7555b949016cb795989ccedd8939"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "4b9bd74d3924f49a93abb03a3e56b645566de6cf", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6648134434fe4ac69132852e6d58f15578bfc022/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648134434fe4ac69132852e6d58f15578bfc022/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=6648134434fe4ac69132852e6d58f15578bfc022", "patch": "@@ -590,6 +590,9 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         VecDeque { head: 0, len: 0, buf: RawVec::with_capacity_in(capacity, alloc) }\n     }\n \n+    /// Creates a `VecDeque` from a raw allocation, when the initialized\n+    /// part of that allocation forms a *contiguous* subslice thereof.\n+    ///\n     /// For use by `vec::IntoIter::into_vecdeque`\n     ///\n     /// # Safety"}, {"sha": "6bcde6d899ce81776fe8dc55c20d528daec84472", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6648134434fe4ac69132852e6d58f15578bfc022/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648134434fe4ac69132852e6d58f15578bfc022/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=6648134434fe4ac69132852e6d58f15578bfc022", "patch": "@@ -1,6 +1,7 @@\n #[cfg(not(no_global_oom_handling))]\n use super::AsVecIntoIter;\n use crate::alloc::{Allocator, Global};\n+#[cfg(not(no_global_oom_handling))]\n use crate::collections::VecDeque;\n use crate::raw_vec::RawVec;\n use core::array;\n@@ -134,6 +135,7 @@ impl<T, A: Allocator> IntoIter<T, A> {\n         self.ptr = self.end;\n     }\n \n+    #[cfg(not(no_global_oom_handling))]\n     #[inline]\n     pub(crate) fn into_vecdeque(self) -> VecDeque<T, A> {\n         // Keep our `Drop` impl from dropping the elements and the allocator"}, {"sha": "0b8f5281b785cab4af103238d5125bc1660f358c", "filename": "library/alloc/tests/vec_deque.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6648134434fe4ac69132852e6d58f15578bfc022/library%2Falloc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6648134434fe4ac69132852e6d58f15578bfc022/library%2Falloc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec_deque.rs?ref=6648134434fe4ac69132852e6d58f15578bfc022", "patch": "@@ -1741,22 +1741,32 @@ fn test_resize_keeps_reserved_space_from_item() {\n fn test_collect_from_into_iter_keeps_allocation() {\n     let mut v = Vec::with_capacity(13);\n     v.extend(0..7);\n-    check(v.into_iter());\n+    check(v.as_ptr(), v.last().unwrap(), v.into_iter());\n \n     let mut v = VecDeque::with_capacity(13);\n     v.extend(0..7);\n-    check(v.into_iter());\n+    check(&v[0], &v[v.len() - 1], v.into_iter());\n \n-    fn check(mut it: impl Iterator<Item = i32>) {\n+    fn check(buf: *const i32, last: *const i32, mut it: impl Iterator<Item = i32>) {\n         assert_eq!(it.next(), Some(0));\n         assert_eq!(it.next(), Some(1));\n+\n         let mut v: VecDeque<i32> = it.collect();\n         assert_eq!(v.capacity(), 13);\n+        assert_eq!(v.as_slices().0.as_ptr(), buf.wrapping_add(2));\n+        assert_eq!(&v[v.len() - 1] as *const _, last);\n+\n         assert_eq!(v.as_slices(), ([2, 3, 4, 5, 6].as_slice(), [].as_slice()));\n         v.push_front(7);\n         assert_eq!(v.as_slices(), ([7, 2, 3, 4, 5, 6].as_slice(), [].as_slice()));\n         v.push_front(8);\n         assert_eq!(v.as_slices(), ([8, 7, 2, 3, 4, 5, 6].as_slice(), [].as_slice()));\n+\n+        // Now that we've adding thing in place of the two that we removed from\n+        // the front of the iterator, we're back to matching the buffer pointer.\n+        assert_eq!(v.as_slices().0.as_ptr(), buf);\n+        assert_eq!(&v[v.len() - 1] as *const _, last);\n+\n         v.push_front(9);\n         assert_eq!(v.as_slices(), ([9].as_slice(), [8, 7, 2, 3, 4, 5, 6].as_slice()));\n         assert_eq!(v.capacity(), 13);"}]}