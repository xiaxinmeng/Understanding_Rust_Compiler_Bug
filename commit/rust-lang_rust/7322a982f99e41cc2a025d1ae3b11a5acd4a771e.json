{"sha": "7322a982f99e41cc2a025d1ae3b11a5acd4a771e", "node_id": "C_kwDOAAsO6NoAKDczMjJhOTgyZjk5ZTQxY2MyYTAyNWQxYWUzYjExYTVhY2Q0YTc3MWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-16T12:48:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-16T12:48:33Z"}, "message": "Auto merge of #12554 - XFFXFF:fix_11959, r=Veykril\n\nfix: local items should not be completed in parent signature\n\nfixes #11959\n\n> We get a Bar completion for the following snippet which is wrong as the item is not visible in that position.\n> ``` rust\n> fn foo() -> $0 {\n>    struct Bar;\n> }\n> ```\n\nI investigated the problem and found that the scope of the cursor offset, also `CompletionContext.scope` is the body of the function", "tree": {"sha": "0f539d4e6cf6a46d5edcbdd296d4c505aa2795f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f539d4e6cf6a46d5edcbdd296d4c505aa2795f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7322a982f99e41cc2a025d1ae3b11a5acd4a771e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7322a982f99e41cc2a025d1ae3b11a5acd4a771e", "html_url": "https://github.com/rust-lang/rust/commit/7322a982f99e41cc2a025d1ae3b11a5acd4a771e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7322a982f99e41cc2a025d1ae3b11a5acd4a771e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ade4d49fc59ec939294897890375a8b86c743e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ade4d49fc59ec939294897890375a8b86c743e2", "html_url": "https://github.com/rust-lang/rust/commit/7ade4d49fc59ec939294897890375a8b86c743e2"}, {"sha": "6df969f5f4e9dffd19024962e051e6f9f94e9805", "url": "https://api.github.com/repos/rust-lang/rust/commits/6df969f5f4e9dffd19024962e051e6f9f94e9805", "html_url": "https://github.com/rust-lang/rust/commit/6df969f5f4e9dffd19024962e051e6f9f94e9805"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "d624d3757747fe1e1939d80f293a201655f9abbf", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7322a982f99e41cc2a025d1ae3b11a5acd4a771e/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7322a982f99e41cc2a025d1ae3b11a5acd4a771e/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=7322a982f99e41cc2a025d1ae3b11a5acd4a771e", "patch": "@@ -67,7 +67,10 @@ impl SourceAnalyzer {\n         let scopes = db.expr_scopes(def);\n         let scope = match offset {\n             None => scope_for(&scopes, &source_map, node),\n-            Some(offset) => scope_for_offset(db, &scopes, &source_map, node.with_value(offset)),\n+            Some(offset) => {\n+                let file_id = node.file_id.original_file(db.upcast());\n+                scope_for_offset(db, &scopes, &source_map, InFile::new(file_id.into(), offset))\n+            }\n         };\n         let resolver = resolver_for_scope(db.upcast(), def, scope);\n         SourceAnalyzer {\n@@ -88,7 +91,10 @@ impl SourceAnalyzer {\n         let scopes = db.expr_scopes(def);\n         let scope = match offset {\n             None => scope_for(&scopes, &source_map, node),\n-            Some(offset) => scope_for_offset(db, &scopes, &source_map, node.with_value(offset)),\n+            Some(offset) => {\n+                let file_id = node.file_id.original_file(db.upcast());\n+                scope_for_offset(db, &scopes, &source_map, InFile::new(file_id.into(), offset))\n+            }\n         };\n         let resolver = resolver_for_scope(db.upcast(), def, scope);\n         SourceAnalyzer { resolver, def: Some((def, body, source_map)), infer: None, file_id }\n@@ -600,13 +606,11 @@ fn scope_for_offset(\n             .filter(|it| it.value.kind() == SyntaxKind::MACRO_CALL)?;\n             Some((source.value.text_range(), scope))\n         })\n-        // find containing scope\n-        .min_by_key(|(expr_range, _scope)| {\n-            (\n-                !(expr_range.start() <= offset.value && offset.value <= expr_range.end()),\n-                expr_range.len(),\n-            )\n+        .filter(|(expr_range, _scope)| {\n+            expr_range.start() <= offset.value && offset.value <= expr_range.end()\n         })\n+        // find containing scope\n+        .min_by_key(|(expr_range, _scope)| expr_range.len())\n         .map(|(expr_range, scope)| {\n             adjust(db, scopes, source_map, expr_range, offset).unwrap_or(*scope)\n         })"}, {"sha": "8943d303b60a58b26c254908cd39624467d40f80", "filename": "crates/ide-completion/src/tests/type_pos.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7322a982f99e41cc2a025d1ae3b11a5acd4a771e/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7322a982f99e41cc2a025d1ae3b11a5acd4a771e/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs?ref=7322a982f99e41cc2a025d1ae3b11a5acd4a771e", "patch": "@@ -89,6 +89,37 @@ fn x<'lt, T, const C: usize>() -> $0\n     );\n }\n \n+#[test]\n+fn fn_return_type_no_local_items() {\n+    check(\n+        r#\"\n+fn foo() -> B$0 {\n+    struct Bar;\n+    enum Baz {}\n+    union Bax {\n+        i: i32,\n+        f: f32\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+        en Enum\n+        ma makro!(\u2026) macro_rules! makro\n+        md module\n+        st Record\n+        st Tuple\n+        st Unit\n+        tt Trait\n+        un Union\n+        bt u32\n+        it ()\n+        kw crate::\n+        kw self::\n+        kw super::\n+    \"#]],\n+    )\n+}\n+\n #[test]\n fn inferred_type_const() {\n     check("}]}