{"sha": "9d27028391c2e0fcb72527f2bc3aa4107d123a87", "node_id": "C_kwDOAAsO6NoAKDlkMjcwMjgzOTFjMmUwZmNiNzI1MjdmMmJjM2FhNDEwN2QxMjNhODc", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-03-04T03:23:00Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-03-04T16:05:57Z"}, "message": "rustdoc: function signature search with traits in `where` clause", "tree": {"sha": "cbfe05b5de166997ba2cc8e2da585bf17e77c8da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbfe05b5de166997ba2cc8e2da585bf17e77c8da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d27028391c2e0fcb72527f2bc3aa4107d123a87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d27028391c2e0fcb72527f2bc3aa4107d123a87", "html_url": "https://github.com/rust-lang/rust/commit/9d27028391c2e0fcb72527f2bc3aa4107d123a87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d27028391c2e0fcb72527f2bc3aa4107d123a87/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "url": "https://api.github.com/repos/rust-lang/rust/commits/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281", "html_url": "https://github.com/rust-lang/rust/commit/70adb4e5b4c8f8bde4ade0edcb0435ff7bf31281"}], "stats": {"total": 76, "additions": 55, "deletions": 21}, "files": [{"sha": "e22ac6ec19b008c0a7f8e3d83ea633722529a614", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9d27028391c2e0fcb72527f2bc3aa4107d123a87/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d27028391c2e0fcb72527f2bc3aa4107d123a87/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=9d27028391c2e0fcb72527f2bc3aa4107d123a87", "patch": "@@ -7,9 +7,7 @@ use rustc_span::symbol::Symbol;\n use serde::ser::{Serialize, SerializeStruct, Serializer};\n \n use crate::clean;\n-use crate::clean::types::{\n-    FnRetTy, Function, GenericBound, Generics, ItemId, Type, WherePredicate,\n-};\n+use crate::clean::types::{FnRetTy, Function, Generics, ItemId, Type, WherePredicate};\n use crate::formats::cache::{Cache, OrphanImplItem};\n use crate::formats::item_type::ItemType;\n use crate::html::format::join_with_double_colon;\n@@ -482,29 +480,23 @@ fn add_generics_and_bounds_as_types<'tcx, 'a>(\n     if let Type::Generic(arg_s) = *arg {\n         // First we check if the bounds are in a `where` predicate...\n         if let Some(where_pred) = generics.where_predicates.iter().find(|g| match g {\n-            WherePredicate::BoundPredicate { ty, .. } => ty.def_id(cache) == arg.def_id(cache),\n+            WherePredicate::BoundPredicate { ty: Type::Generic(ty_s), .. } => *ty_s == arg_s,\n             _ => false,\n         }) {\n             let mut ty_generics = Vec::new();\n             let bounds = where_pred.get_bounds().unwrap_or_else(|| &[]);\n             for bound in bounds.iter() {\n-                if let GenericBound::TraitBound(poly_trait, _) = bound {\n-                    for param_def in poly_trait.generic_params.iter() {\n-                        match &param_def.kind {\n-                            clean::GenericParamDefKind::Type { default: Some(ty), .. } => {\n-                                add_generics_and_bounds_as_types(\n-                                    self_,\n-                                    generics,\n-                                    ty,\n-                                    tcx,\n-                                    recurse + 1,\n-                                    &mut ty_generics,\n-                                    cache,\n-                                )\n-                            }\n-                            _ => {}\n-                        }\n-                    }\n+                if let Some(path) = bound.get_trait_path() {\n+                    let ty = Type::Path { path };\n+                    add_generics_and_bounds_as_types(\n+                        self_,\n+                        generics,\n+                        &ty,\n+                        tcx,\n+                        recurse + 1,\n+                        &mut ty_generics,\n+                        cache,\n+                    );\n                 }\n             }\n             insert_ty(res, arg.clone(), ty_generics);"}, {"sha": "dee4819e81a9f43116110074227c0df4e7a5d20f", "filename": "tests/rustdoc-js-std/option-type-signatures.js", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9d27028391c2e0fcb72527f2bc3aa4107d123a87/tests%2Frustdoc-js-std%2Foption-type-signatures.js", "raw_url": "https://github.com/rust-lang/rust/raw/9d27028391c2e0fcb72527f2bc3aa4107d123a87/tests%2Frustdoc-js-std%2Foption-type-signatures.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Foption-type-signatures.js?ref=9d27028391c2e0fcb72527f2bc3aa4107d123a87", "patch": "@@ -0,0 +1,7 @@\n+const QUERY = 'option, fnonce -> option';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std::option::Option', 'name': 'map' },\n+    ],\n+};"}, {"sha": "6cb42a455a36901707485c81eb36eb1ac6369b1e", "filename": "tests/rustdoc-js/where-clause.js", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9d27028391c2e0fcb72527f2bc3aa4107d123a87/tests%2Frustdoc-js%2Fwhere-clause.js", "raw_url": "https://github.com/rust-lang/rust/raw/9d27028391c2e0fcb72527f2bc3aa4107d123a87/tests%2Frustdoc-js%2Fwhere-clause.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fwhere-clause.js?ref=9d27028391c2e0fcb72527f2bc3aa4107d123a87", "patch": "@@ -0,0 +1,19 @@\n+const QUERY = ['trait<nested>', '-> trait<nested>', 't1, t2'];\n+\n+const EXPECTED = [\n+    {\n+        'in_args': [\n+           { 'path': 'where_clause', 'name': 'abracadabra' },\n+        ],\n+    },\n+    {\n+        'others': [\n+            { 'path': 'where_clause', 'name': 'alacazam' },\n+        ],\n+    },\n+    {\n+        'others': [\n+            { 'path': 'where_clause', 'name': 'presto' },\n+        ],\n+    },\n+];"}, {"sha": "808561feee227674592d0c292540247526b663c1", "filename": "tests/rustdoc-js/where-clause.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9d27028391c2e0fcb72527f2bc3aa4107d123a87/tests%2Frustdoc-js%2Fwhere-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d27028391c2e0fcb72527f2bc3aa4107d123a87/tests%2Frustdoc-js%2Fwhere-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fwhere-clause.rs?ref=9d27028391c2e0fcb72527f2bc3aa4107d123a87", "patch": "@@ -0,0 +1,16 @@\n+pub struct Nested;\n+\n+pub trait Trait<T> {\n+    fn thank_you(x: T);\n+}\n+\n+pub fn abracadabra<X>(_: X) where X: Trait<Nested> {}\n+\n+pub fn alacazam<X>() -> X where X: Trait<Nested> {}\n+\n+pub trait T1 {}\n+pub trait T2<'a, T> {\n+    fn please(_: &'a T);\n+}\n+\n+pub fn presto<A, B>(_: A, _: B) where A: T1, B: for <'b> T2<'b, Nested> {}"}]}