{"sha": "c5a3c9736a93476e48750d2bc346a5a64bbd7c26", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1YTNjOTczNmE5MzQ3NmU0ODc1MGQyYmMzNDZhNWE2NGJiZDdjMjY=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-07-03T01:33:09Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-07-03T01:33:09Z"}, "message": "Clarify manual's explanation of unwinding during failure.  Add bit about soft vs. hard failure.", "tree": {"sha": "ad62ac66ee3a3061c9a0afa545aa826408698965", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad62ac66ee3a3061c9a0afa545aa826408698965"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5a3c9736a93476e48750d2bc346a5a64bbd7c26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5a3c9736a93476e48750d2bc346a5a64bbd7c26", "html_url": "https://github.com/rust-lang/rust/commit/c5a3c9736a93476e48750d2bc346a5a64bbd7c26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5a3c9736a93476e48750d2bc346a5a64bbd7c26/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "667d46bef9a17616e7aabfdd80f9646b6bde6191", "url": "https://api.github.com/repos/rust-lang/rust/commits/667d46bef9a17616e7aabfdd80f9646b6bde6191", "html_url": "https://github.com/rust-lang/rust/commit/667d46bef9a17616e7aabfdd80f9646b6bde6191"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "c36a099babcd17c2c4f8d94caeca5c93278723f9", "filename": "doc/rust.texi", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c5a3c9736a93476e48750d2bc346a5a64bbd7c26/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/c5a3c9736a93476e48750d2bc346a5a64bbd7c26/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=c5a3c9736a93476e48750d2bc346a5a64bbd7c26", "patch": "@@ -1352,7 +1352,8 @@ channel is equal to the message type of the port it is bound to.\n \n Messages are sent asynchronously or semi-synchronously. A channel contains a\n message queue and asynchronously sending a message merely inserts it into the\n-channel's queue; message receipt is the responsibility of the receiving task.\n+sending channel's queue; message receipt is the responsibility of the\n+receiving task.\n \n Queued messages in channels are charged to the domain of the @emph{sending}\n task. If too many messages are queued for transmission from a single sending\n@@ -1399,12 +1400,20 @@ un-trapped signal or the execution of a @code{fail} statement. Once\n @emph{failing}, a task unwinds its stack and transitions to the @emph{dead}\n state. Unwinding the stack of a task is done by the task itself, on its own\n control stack. If a value with a destructor is freed during unwinding, the\n-code for the destructor is run, also on the task's control stack. If the\n-destructor code causes any subsequent state transitions, the task of unwinding\n-and failing may suspend temporarily, and may involve (recursive) unwinding of\n-the stack of a failed destructor. Nonetheless, the outermost unwinding\n-activity will continue until the stack is unwound and the task transitions to\n-the @emph{dead} state. There is no way to ``recover'' from task failure.\n+code for the destructor is run, also on the task's control\n+stack. Running the destructor code causes a temporary transition to a\n+@emph{running} state, and allows the destructor code to cause any\n+subsequent state transitions.  The original task of unwinding and\n+failing thereby may suspend temporarily, and may involve (recursive)\n+unwinding of the stack of a failed destructor. Nonetheless, the\n+outermost unwinding activity will continue until the stack is unwound\n+and the task transitions to the @emph{dead} state. There is no way to\n+``recover'' from task failure.  Once a task has temporarily suspended\n+its unwinding in the @emph{failing} state, failure occurring from\n+within this destructor results in @emph{hard} failure.  The unwinding\n+procedure of hard failure frees resources but does not execute\n+destructors.  The original (soft) failure is still resumed at the\n+point where it was temporarily suspended.\n \n A task in the @emph{dead} state cannot transition to other states; it exists\n only to have its termination status inspected by other tasks, and/or to await\n@@ -1454,7 +1463,7 @@ An @dfn{item} is a component of a module. Items are entirely determined at\n compile-time, remain constant during execution, and may reside in read-only\n memory.\n \n-There are 5 primary kinds of item: modules, functions, iterators, objects and\n+There are five primary kinds of item: modules, functions, iterators, objects and\n types.\n \n All items form an implicit scope for the declaration of sub-items. In other"}]}