{"sha": "ce636f25e55493f42e7339cb533cb523879b62a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNjM2ZjI1ZTU1NDkzZjQyZTczMzljYjUzM2NiNTIzODc5YjYyYTU=", "commit": {"author": {"name": "Michael Watzko", "email": "michael@watzko.de", "date": "2021-08-28T11:39:09Z"}, "committer": {"name": "Michael Watzko", "email": "michael@watzko.de", "date": "2021-08-28T11:39:09Z"}, "message": "Unimpl Shl{Assign} for signed Saturating types until the correct impl is clear", "tree": {"sha": "ed0f1e4fd620154ea003a10b17c44a92043630f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed0f1e4fd620154ea003a10b17c44a92043630f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce636f25e55493f42e7339cb533cb523879b62a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce636f25e55493f42e7339cb533cb523879b62a5", "html_url": "https://github.com/rust-lang/rust/commit/ce636f25e55493f42e7339cb533cb523879b62a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce636f25e55493f42e7339cb533cb523879b62a5/comments", "author": {"login": "kellerkindt", "id": 1133787, "node_id": "MDQ6VXNlcjExMzM3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1133787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kellerkindt", "html_url": "https://github.com/kellerkindt", "followers_url": "https://api.github.com/users/kellerkindt/followers", "following_url": "https://api.github.com/users/kellerkindt/following{/other_user}", "gists_url": "https://api.github.com/users/kellerkindt/gists{/gist_id}", "starred_url": "https://api.github.com/users/kellerkindt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kellerkindt/subscriptions", "organizations_url": "https://api.github.com/users/kellerkindt/orgs", "repos_url": "https://api.github.com/users/kellerkindt/repos", "events_url": "https://api.github.com/users/kellerkindt/events{/privacy}", "received_events_url": "https://api.github.com/users/kellerkindt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kellerkindt", "id": 1133787, "node_id": "MDQ6VXNlcjExMzM3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1133787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kellerkindt", "html_url": "https://github.com/kellerkindt", "followers_url": "https://api.github.com/users/kellerkindt/followers", "following_url": "https://api.github.com/users/kellerkindt/following{/other_user}", "gists_url": "https://api.github.com/users/kellerkindt/gists{/gist_id}", "starred_url": "https://api.github.com/users/kellerkindt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kellerkindt/subscriptions", "organizations_url": "https://api.github.com/users/kellerkindt/orgs", "repos_url": "https://api.github.com/users/kellerkindt/repos", "events_url": "https://api.github.com/users/kellerkindt/events{/privacy}", "received_events_url": "https://api.github.com/users/kellerkindt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "977ae5ac2c5f0a53c8b0e979bd1b2450d66e1030", "url": "https://api.github.com/repos/rust-lang/rust/commits/977ae5ac2c5f0a53c8b0e979bd1b2450d66e1030", "html_url": "https://github.com/rust-lang/rust/commit/977ae5ac2c5f0a53c8b0e979bd1b2450d66e1030"}], "stats": {"total": 122, "additions": 63, "deletions": 59}, "files": [{"sha": "f6dd3603c491431cc9b31931d7fdf0a51f73fe0f", "filename": "library/core/src/num/saturating.rs", "status": "modified", "additions": 63, "deletions": 59, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/ce636f25e55493f42e7339cb533cb523879b62a5/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce636f25e55493f42e7339cb533cb523879b62a5/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs?ref=ce636f25e55493f42e7339cb533cb523879b62a5", "patch": "@@ -81,30 +81,32 @@ impl<T: fmt::UpperHex> fmt::UpperHex for Saturating<T> {\n #[allow(unused_macros)]\n macro_rules! sh_impl_signed {\n     ($t:ident, $f:ident) => {\n-        #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n-        impl Shl<$f> for Saturating<$t> {\n-            type Output = Saturating<$t>;\n-\n-            #[inline]\n-            fn shl(self, other: $f) -> Saturating<$t> {\n-                if other < 0 {\n-                    Saturating(self.0.shr((-other & self::shift_max::$t as $f) as u32))\n-                } else {\n-                    Saturating(self.0.shl((other & self::shift_max::$t as $f) as u32))\n-                }\n-            }\n-        }\n-        forward_ref_binop! { impl Shl, shl for Saturating<$t>, $f,\n-        #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n-\n-        #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n-        impl ShlAssign<$f> for Saturating<$t> {\n-            #[inline]\n-            fn shl_assign(&mut self, other: $f) {\n-                *self = *self << other;\n-            }\n-        }\n-        forward_ref_op_assign! { impl ShlAssign, shl_assign for Saturating<$t>, $f }\n+        // FIXME what is the correct implementation here? see discussion https://github.com/rust-lang/rust/pull/87921#discussion_r695870065\n+        //\n+        // #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+        // impl Shl<$f> for Saturating<$t> {\n+        //     type Output = Saturating<$t>;\n+        //\n+        //     #[inline]\n+        //     fn shl(self, other: $f) -> Saturating<$t> {\n+        //         if other < 0 {\n+        //             Saturating(self.0.shr((-other & self::shift_max::$t as $f) as u32))\n+        //         } else {\n+        //             Saturating(self.0.shl((other & self::shift_max::$t as $f) as u32))\n+        //         }\n+        //     }\n+        // }\n+        // forward_ref_binop! { impl Shl, shl for Saturating<$t>, $f,\n+        // #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n+        //\n+        // #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n+        // impl ShlAssign<$f> for Saturating<$t> {\n+        //     #[inline]\n+        //     fn shl_assign(&mut self, other: $f) {\n+        //         *self = *self << other;\n+        //     }\n+        // }\n+        // forward_ref_op_assign! { impl ShlAssign, shl_assign for Saturating<$t>, $f }\n \n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl Shr<$f> for Saturating<$t> {\n@@ -935,38 +937,40 @@ macro_rules! saturating_int_impl_unsigned {\n \n saturating_int_impl_unsigned! { usize u8 u16 u32 u64 u128 }\n \n-mod shift_max {\n-    #![allow(non_upper_case_globals)]\n-\n-    #[cfg(target_pointer_width = \"16\")]\n-    mod platform {\n-        pub const usize: u32 = super::u16;\n-        pub const isize: u32 = super::i16;\n-    }\n-\n-    #[cfg(target_pointer_width = \"32\")]\n-    mod platform {\n-        pub const usize: u32 = super::u32;\n-        pub const isize: u32 = super::i32;\n-    }\n-\n-    #[cfg(target_pointer_width = \"64\")]\n-    mod platform {\n-        pub const usize: u32 = super::u64;\n-        pub const isize: u32 = super::i64;\n-    }\n-\n-    pub const i8: u32 = (1 << 3) - 1;\n-    pub const i16: u32 = (1 << 4) - 1;\n-    pub const i32: u32 = (1 << 5) - 1;\n-    pub const i64: u32 = (1 << 6) - 1;\n-    pub const i128: u32 = (1 << 7) - 1;\n-    pub use self::platform::isize;\n-\n-    pub const u8: u32 = i8;\n-    pub const u16: u32 = i16;\n-    pub const u32: u32 = i32;\n-    pub const u64: u32 = i64;\n-    pub const u128: u32 = i128;\n-    pub use self::platform::usize;\n-}\n+// Related to potential Shl and ShlAssign implementation\n+//\n+// mod shift_max {\n+//     #![allow(non_upper_case_globals)]\n+//\n+//     #[cfg(target_pointer_width = \"16\")]\n+//     mod platform {\n+//         pub const usize: u32 = super::u16;\n+//         pub const isize: u32 = super::i16;\n+//     }\n+//\n+//     #[cfg(target_pointer_width = \"32\")]\n+//     mod platform {\n+//         pub const usize: u32 = super::u32;\n+//         pub const isize: u32 = super::i32;\n+//     }\n+//\n+//     #[cfg(target_pointer_width = \"64\")]\n+//     mod platform {\n+//         pub const usize: u32 = super::u64;\n+//         pub const isize: u32 = super::i64;\n+//     }\n+//\n+//     pub const i8: u32 = (1 << 3) - 1;\n+//     pub const i16: u32 = (1 << 4) - 1;\n+//     pub const i32: u32 = (1 << 5) - 1;\n+//     pub const i64: u32 = (1 << 6) - 1;\n+//     pub const i128: u32 = (1 << 7) - 1;\n+//     pub use self::platform::isize;\n+//\n+//     pub const u8: u32 = i8;\n+//     pub const u16: u32 = i16;\n+//     pub const u32: u32 = i32;\n+//     pub const u64: u32 = i64;\n+//     pub const u128: u32 = i128;\n+//     pub use self::platform::usize;\n+// }"}]}