{"sha": "cda90f55419ce449f3a9db327465d9b2ae7dfce9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYTkwZjU1NDE5Y2U0NDlmM2E5ZGIzMjc0NjVkOWIyYWU3ZGZjZTk=", "commit": {"author": {"name": "lrh2000", "email": "lrh2000@pku.edu.cn", "date": "2021-05-15T11:01:13Z"}, "committer": {"name": "lrh2000", "email": "lrh2000@pku.edu.cn", "date": "2021-07-09T15:09:48Z"}, "message": "Store names of captured variables in `optimized_mir`\n\n- Closures in external crates may get compiled in because of\n  monomorphization. We should store names of captured variables\n  in `optimized_mir`, so that they are written into the metadata\n  file and we can use them to generate debuginfo.\n\n- If there are breakpoints inside closures, the names of captured\n  variables stored in `optimized_mir` can be used to print them.\n  Now the name is more precise when disjoint fields are captured.", "tree": {"sha": "16325f4b16e3865b249ebcc2182eaea1a2ca54b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16325f4b16e3865b249ebcc2182eaea1a2ca54b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cda90f55419ce449f3a9db327465d9b2ae7dfce9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cda90f55419ce449f3a9db327465d9b2ae7dfce9", "html_url": "https://github.com/rust-lang/rust/commit/cda90f55419ce449f3a9db327465d9b2ae7dfce9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cda90f55419ce449f3a9db327465d9b2ae7dfce9/comments", "author": {"login": "lrh2000", "id": 41988959, "node_id": "MDQ6VXNlcjQxOTg4OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/41988959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrh2000", "html_url": "https://github.com/lrh2000", "followers_url": "https://api.github.com/users/lrh2000/followers", "following_url": "https://api.github.com/users/lrh2000/following{/other_user}", "gists_url": "https://api.github.com/users/lrh2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrh2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrh2000/subscriptions", "organizations_url": "https://api.github.com/users/lrh2000/orgs", "repos_url": "https://api.github.com/users/lrh2000/repos", "events_url": "https://api.github.com/users/lrh2000/events{/privacy}", "received_events_url": "https://api.github.com/users/lrh2000/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lrh2000", "id": 41988959, "node_id": "MDQ6VXNlcjQxOTg4OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/41988959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrh2000", "html_url": "https://github.com/lrh2000", "followers_url": "https://api.github.com/users/lrh2000/followers", "following_url": "https://api.github.com/users/lrh2000/following{/other_user}", "gists_url": "https://api.github.com/users/lrh2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrh2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrh2000/subscriptions", "organizations_url": "https://api.github.com/users/lrh2000/orgs", "repos_url": "https://api.github.com/users/lrh2000/repos", "events_url": "https://api.github.com/users/lrh2000/events{/privacy}", "received_events_url": "https://api.github.com/users/lrh2000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29856acffeb87541bb167c33f4fdb13c31ba6de0", "url": "https://api.github.com/repos/rust-lang/rust/commits/29856acffeb87541bb167c33f4fdb13c31ba6de0", "html_url": "https://github.com/rust-lang/rust/commit/29856acffeb87541bb167c33f4fdb13c31ba6de0"}], "stats": {"total": 198, "additions": 132, "deletions": 66}, "files": [{"sha": "bc950778bcc576a497231bb963a68e13bed5be85", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 33, "deletions": 19, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/cda90f55419ce449f3a9db327465d9b2ae7dfce9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cda90f55419ce449f3a9db327465d9b2ae7dfce9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=cda90f55419ce449f3a9db327465d9b2ae7dfce9", "patch": "@@ -1280,6 +1280,31 @@ fn prepare_struct_metadata(\n // Tuples\n //=-----------------------------------------------------------------------------\n \n+/// Returns names of captured upvars for closures and generators.\n+///\n+/// Here are some examples:\n+///  - `name__field1__field2` when the upvar is captured by value.\n+///  - `_ref__name__field` when the upvar is captured by reference.\n+fn closure_saved_names_of_captured_variables(tcx: TyCtxt<'tcx>, def_id: DefId) -> Vec<String> {\n+    let body = tcx.optimized_mir(def_id);\n+\n+    body.var_debug_info\n+        .iter()\n+        .filter_map(|var| {\n+            let is_ref = match var.value {\n+                mir::VarDebugInfoContents::Place(place) if place.local == mir::Local::new(1) => {\n+                    // The projection is either `[.., Field, Deref]` or `[.., Field]`. It\n+                    // implies whether the variable is captured by value or by reference.\n+                    matches!(place.projection.last().unwrap(), mir::ProjectionElem::Deref)\n+                }\n+                _ => return None,\n+            };\n+            let prefix = if is_ref { \"_ref__\" } else { \"\" };\n+            Some(prefix.to_owned() + &var.name.as_str())\n+        })\n+        .collect::<Vec<_>>()\n+}\n+\n /// Creates `MemberDescription`s for the fields of a tuple.\n struct TupleMemberDescriptionFactory<'tcx> {\n     ty: Ty<'tcx>,\n@@ -1289,34 +1314,23 @@ struct TupleMemberDescriptionFactory<'tcx> {\n \n impl<'tcx> TupleMemberDescriptionFactory<'tcx> {\n     fn create_member_descriptions(&self, cx: &CodegenCx<'ll, 'tcx>) -> Vec<MemberDescription<'ll>> {\n-        // For closures and generators, name the captured upvars\n-        // with the help of `CapturedPlace::to_mangled_name`.\n-        let closure_def_id = match *self.ty.kind() {\n-            ty::Generator(def_id, ..) => def_id.as_local(),\n-            ty::Closure(def_id, ..) => def_id.as_local(),\n-            _ => None,\n-        };\n-        let captures = match closure_def_id {\n-            Some(local_def_id) => {\n-                let typeck_results = cx.tcx.typeck(local_def_id);\n-                let captures = typeck_results\n-                    .closure_min_captures_flattened(local_def_id.to_def_id())\n-                    .collect::<Vec<_>>();\n-                Some(captures)\n+        let capture_names = match *self.ty.kind() {\n+            ty::Generator(def_id, ..) | ty::Closure(def_id, ..) => {\n+                Some(closure_saved_names_of_captured_variables(cx.tcx, def_id))\n             }\n             _ => None,\n         };\n-\n         let layout = cx.layout_of(self.ty);\n         self.component_types\n             .iter()\n             .enumerate()\n             .map(|(i, &component_type)| {\n                 let (size, align) = cx.size_and_align_of(component_type);\n-                let name = captures\n-                    .as_ref()\n-                    .map(|c| c[i].to_mangled_name(cx.tcx))\n-                    .unwrap_or_else(|| format!(\"__{}\", i));\n+                let name = if let Some(names) = capture_names.as_ref() {\n+                    names[i].clone()\n+                } else {\n+                    format!(\"__{}\", i)\n+                };\n                 MemberDescription {\n                     name,\n                     type_metadata: type_metadata(cx, component_type, self.span),"}, {"sha": "139846f6dc9740f20ec352613115914e3d4d5617", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cda90f55419ce449f3a9db327465d9b2ae7dfce9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cda90f55419ce449f3a9db327465d9b2ae7dfce9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=cda90f55419ce449f3a9db327465d9b2ae7dfce9", "patch": "@@ -3,10 +3,12 @@ use crate::hir::place::{\n };\n use crate::{mir, ty};\n \n+use std::fmt::Write;\n+\n use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n \n use super::{Ty, TyCtxt};\n \n@@ -159,37 +161,26 @@ impl CapturedPlace<'tcx> {\n         place_to_string_for_capture(tcx, &self.place)\n     }\n \n-    /// Returns mangled names of captured upvars. Here are some examples:\n-    ///  - `_captured_val__name__field`\n-    ///  - `_captured_ref__name__field`\n-    ///\n-    /// The purpose is to use those names in debuginfo. They should be human-understandable.\n-    /// Without the names, the end users may get confused when the debuggers just print some\n-    /// pointers in closures or generators.\n-    pub fn to_mangled_name(&self, tcx: TyCtxt<'tcx>) -> String {\n-        let prefix = match self.info.capture_kind {\n-            ty::UpvarCapture::ByValue(_) => \"_captured_val__\",\n-            ty::UpvarCapture::ByRef(_) => \"_captured_ref__\",\n-        };\n-\n+    /// Returns a symbol of the captured upvar, which looks like `name__field1__field2`.\n+    pub fn to_symbol(&self, tcx: TyCtxt<'tcx>) -> Symbol {\n         let hir_id = match self.place.base {\n             HirPlaceBase::Upvar(upvar_id) => upvar_id.var_path.hir_id,\n             base => bug!(\"Expected an upvar, found {:?}\", base),\n         };\n-        let name = tcx.hir().name(hir_id);\n+        let mut symbol = tcx.hir().name(hir_id).as_str().to_string();\n \n         let mut ty = self.place.base_ty;\n-        let mut fields = String::new();\n         for proj in self.place.projections.iter() {\n             match proj.kind {\n                 HirProjectionKind::Field(idx, variant) => match ty.kind() {\n-                    ty::Tuple(_) => fields = format!(\"{}__{}\", fields, idx),\n+                    ty::Tuple(_) => write!(&mut symbol, \"__{}\", idx).unwrap(),\n                     ty::Adt(def, ..) => {\n-                        fields = format!(\n-                            \"{}__{}\",\n-                            fields,\n+                        write!(\n+                            &mut symbol,\n+                            \"__{}\",\n                             def.variants[variant].fields[idx as usize].ident.name.as_str(),\n-                        );\n+                        )\n+                        .unwrap();\n                     }\n                     ty => {\n                         bug!(\"Unexpected type {:?} for `Field` projection\", ty)\n@@ -204,7 +195,7 @@ impl CapturedPlace<'tcx> {\n             ty = proj.ty;\n         }\n \n-        prefix.to_owned() + &name.to_string() + &fields\n+        Symbol::intern(&symbol)\n     }\n \n     /// Returns the hir-id of the root variable for the captured place."}, {"sha": "e13dcadeb56a91f717508d124092c29f74495ad8", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cda90f55419ce449f3a9db327465d9b2ae7dfce9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cda90f55419ce449f3a9db327465d9b2ae7dfce9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=cda90f55419ce449f3a9db327465d9b2ae7dfce9", "patch": "@@ -16,7 +16,7 @@ use rustc_middle::mir::*;\n use rustc_middle::thir::{BindingMode, Expr, ExprId, LintLevel, PatKind, Thir};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeckResults};\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n use rustc_target::spec::PanicStrategy;\n@@ -974,13 +974,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                     let mutability = captured_place.mutability;\n \n-                    // FIXME(project-rfc-2229#8): Store more precise information\n-                    let mut name = kw::Empty;\n-                    if let Some(Node::Binding(pat)) = tcx_hir.find(var_id) {\n-                        if let hir::PatKind::Binding(_, _, ident, _) = pat.kind {\n-                            name = ident.name;\n-                        }\n-                    }\n+                    let name = captured_place.to_symbol(tcx);\n \n                     let mut projs = closure_env_projs.clone();\n                     projs.push(ProjectionElem::Field(Field::new(i), ty));"}, {"sha": "65f9e5f532279e1770d11c0f86a1c66c5e7ac7eb", "filename": "src/test/debuginfo/captured-fields-1.rs", "status": "renamed", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cda90f55419ce449f3a9db327465d9b2ae7dfce9/src%2Ftest%2Fdebuginfo%2Fcaptured-fields-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cda90f55419ce449f3a9db327465d9b2ae7dfce9/src%2Ftest%2Fdebuginfo%2Fcaptured-fields-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fcaptured-fields-1.rs?ref=cda90f55419ce449f3a9db327465d9b2ae7dfce9", "patch": "@@ -4,38 +4,44 @@\n \n // gdb-command:run\n // gdb-command:print test\n-// gdbr-check:$1 = captured_fields::main::{closure#0} {_captured_ref__my_ref__my_field1: 0x[...]}\n+// gdbr-check:$1 = captured_fields_1::main::{closure#0} {_ref__my_ref__my_field1: 0x[...]}\n // gdb-command:continue\n // gdb-command:print test\n-// gdbr-check:$2 = captured_fields::main::{closure#1} {_captured_ref__my_ref__my_field2: 0x[...]}\n+// gdbr-check:$2 = captured_fields_1::main::{closure#1} {_ref__my_ref__my_field2: 0x[...]}\n // gdb-command:continue\n // gdb-command:print test\n-// gdbr-check:$3 = captured_fields::main::{closure#2} {_captured_ref__my_ref: 0x[...]}\n+// gdbr-check:$3 = captured_fields_1::main::{closure#2} {_ref__my_ref: 0x[...]}\n // gdb-command:continue\n // gdb-command:print test\n-// gdbr-check:$4 = captured_fields::main::{closure#3} {_captured_val__my_ref: 0x[...]}\n+// gdbr-check:$4 = captured_fields_1::main::{closure#3} {my_ref: 0x[...]}\n // gdb-command:continue\n // gdb-command:print test\n-// gdbr-check:$5 = captured_fields::main::{closure#4} {_captured_val__my_var: captured_fields::MyStruct {my_field1: 11, my_field2: 22}}\n+// gdbr-check:$5 = captured_fields_1::main::{closure#4} {my_var__my_field2: 22}\n+// gdb-command:continue\n+// gdb-command:print test\n+// gdbr-check:$6 = captured_fields_1::main::{closure#5} {my_var: captured_fields_1::MyStruct {my_field1: 11, my_field2: 22}}\n // gdb-command:continue\n \n // === LLDB TESTS ==================================================================================\n \n // lldb-command:run\n // lldb-command:print test\n-// lldbg-check:(captured_fields::main::{closure#0}) $0 = { _captured_ref__my_ref__my_field1 = 0x[...] }\n+// lldbg-check:(captured_fields_1::main::{closure#0}) $0 = { _ref__my_ref__my_field1 = 0x[...] }\n+// lldb-command:continue\n+// lldb-command:print test\n+// lldbg-check:(captured_fields_1::main::{closure#1}) $1 = { _ref__my_ref__my_field2 = 0x[...] }\n // lldb-command:continue\n // lldb-command:print test\n-// lldbg-check:(captured_fields::main::{closure#1}) $1 = { _captured_ref__my_ref__my_field2 = 0x[...] }\n+// lldbg-check:(captured_fields_1::main::{closure#2}) $2 = { _ref__my_ref = 0x[...] }\n // lldb-command:continue\n // lldb-command:print test\n-// lldbg-check:(captured_fields::main::{closure#2}) $2 = { _captured_ref__my_ref = 0x[...] }\n+// lldbg-check:(captured_fields_1::main::{closure#3}) $3 = { my_ref = 0x[...] }\n // lldb-command:continue\n // lldb-command:print test\n-// lldbg-check:(captured_fields::main::{closure#3}) $3 = { _captured_val__my_ref = 0x[...] }\n+// lldbg-check:(captured_fields_1::main::{closure#4}) $4 = { my_var__my_field2 = 22 }\n // lldb-command:continue\n // lldb-command:print test\n-// lldbg-check:(captured_fields::main::{closure#4}) $4 = { _captured_val__my_var = { my_field1 = 11 my_field2 = 22 } }\n+// lldbg-check:(captured_fields_1::main::{closure#5}) $5 = { my_var = { my_field1 = 11 my_field2 = 22 } }\n // lldb-command:continue\n \n #![feature(capture_disjoint_fields)]\n@@ -77,6 +83,12 @@ fn main() {\n \n     _zzz(); // #break\n \n+    let test = move || {\n+        let a = my_var.my_field2;\n+    };\n+\n+    _zzz(); // #break\n+\n     let test = || {\n         let a = my_var;\n     };", "previous_filename": "src/test/debuginfo/captured-fields.rs"}, {"sha": "c872354a92489daec52667fd46e14e6b7f781af7", "filename": "src/test/debuginfo/captured-fields-2.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/cda90f55419ce449f3a9db327465d9b2ae7dfce9/src%2Ftest%2Fdebuginfo%2Fcaptured-fields-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cda90f55419ce449f3a9db327465d9b2ae7dfce9/src%2Ftest%2Fdebuginfo%2Fcaptured-fields-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fcaptured-fields-2.rs?ref=cda90f55419ce449f3a9db327465d9b2ae7dfce9", "patch": "@@ -0,0 +1,55 @@\n+// compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n+// gdb-command:run\n+// gdb-command:print my_ref__my_field1\n+// gdbr-check:$1 = 11\n+// gdb-command:continue\n+// gdb-command:print my_var__my_field2\n+// gdbr-check:$2 = 22\n+// gdb-command:continue\n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+// lldb-command:print my_ref__my_field1\n+// lldbg-check:(unsigned int) $0 = 11\n+// lldb-command:continue\n+// lldb-command:print my_var__my_field2\n+// lldbg-check:(unsigned int) $1 = 22\n+// lldb-command:continue\n+\n+#![feature(capture_disjoint_fields)]\n+#![allow(unused)]\n+\n+struct MyStruct {\n+    my_field1: u32,\n+    my_field2: u32,\n+}\n+\n+fn main() {\n+    let mut my_var = MyStruct {\n+        my_field1: 11,\n+        my_field2: 22,\n+    };\n+    let my_ref = &mut my_var;\n+\n+    let test = || {\n+        let a = my_ref.my_field1;\n+\n+        _zzz(); // #break\n+    };\n+\n+    test();\n+\n+    let test = move || {\n+        let a = my_var.my_field2;\n+\n+        _zzz(); // #break\n+    };\n+\n+    test();\n+}\n+\n+fn _zzz() {}"}, {"sha": "9bf33a7bb8796dc98b1357ce80856af632f469b1", "filename": "src/test/debuginfo/generator-objects.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cda90f55419ce449f3a9db327465d9b2ae7dfce9/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cda90f55419ce449f3a9db327465d9b2ae7dfce9/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs?ref=cda90f55419ce449f3a9db327465d9b2ae7dfce9", "patch": "@@ -11,16 +11,16 @@\n \n // gdb-command:run\n // gdb-command:print b\n-// gdb-check:$1 = generator_objects::main::{generator#0}::Unresumed{_captured_ref__a: 0x[...]}\n+// gdb-check:$1 = generator_objects::main::{generator#0}::Unresumed{_ref__a: 0x[...]}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$2 = generator_objects::main::{generator#0}::Suspend0{c: 6, d: 7, _captured_ref__a: 0x[...]}\n+// gdb-check:$2 = generator_objects::main::{generator#0}::Suspend0{c: 6, d: 7, _ref__a: 0x[...]}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$3 = generator_objects::main::{generator#0}::Suspend1{c: 7, d: 8, _captured_ref__a: 0x[...]}\n+// gdb-check:$3 = generator_objects::main::{generator#0}::Suspend1{c: 7, d: 8, _ref__a: 0x[...]}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$4 = generator_objects::main::{generator#0}::Returned{_captured_ref__a: 0x[...]}\n+// gdb-check:$4 = generator_objects::main::{generator#0}::Returned{_ref__a: 0x[...]}\n \n // === LLDB TESTS ==================================================================================\n "}, {"sha": "1a26b0a3255b7da18de8955f1e96638fc974eb54", "filename": "src/test/debuginfo/issue-57822.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cda90f55419ce449f3a9db327465d9b2ae7dfce9/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cda90f55419ce449f3a9db327465d9b2ae7dfce9/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs?ref=cda90f55419ce449f3a9db327465d9b2ae7dfce9", "patch": "@@ -11,17 +11,17 @@\n // gdb-command:run\n \n // gdb-command:print g\n-// gdb-check:$1 = issue_57822::main::{closure#1} {_captured_val__f: issue_57822::main::{closure#0} {_captured_val__x: 1}}\n+// gdb-check:$1 = issue_57822::main::{closure#1} {f: issue_57822::main::{closure#0} {x: 1}}\n \n // gdb-command:print b\n-// gdb-check:$2 = issue_57822::main::{generator#3}::Unresumed{_captured_val__a: issue_57822::main::{generator#2}::Unresumed{_captured_val__y: 2}}\n+// gdb-check:$2 = issue_57822::main::{generator#3}::Unresumed{a: issue_57822::main::{generator#2}::Unresumed{y: 2}}\n \n // === LLDB TESTS ==================================================================================\n \n // lldb-command:run\n \n // lldb-command:print g\n-// lldbg-check:(issue_57822::main::{closure#1}) $0 = { _captured_val__f = { _captured_val__x = 1 } }\n+// lldbg-check:(issue_57822::main::{closure#1}) $0 = { f = { x = 1 } }\n \n // lldb-command:print b\n // lldbg-check:(issue_57822::main::{generator#3}) $1 ="}]}