{"sha": "eaa94c52a12a2692d2a4ac6661a53fe90b3ea022", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYTk0YzUyYTEyYTI2OTJkMmE0YWM2NjYxYTUzZmU5MGIzZWEwMjI=", "commit": {"author": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2015-12-26T21:04:18Z"}, "committer": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2015-12-26T21:04:18Z"}, "message": "Fix links in char docs", "tree": {"sha": "56912342b59d1a4fd713f98d5712199d5637c15e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56912342b59d1a4fd713f98d5712199d5637c15e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaa94c52a12a2692d2a4ac6661a53fe90b3ea022", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaa94c52a12a2692d2a4ac6661a53fe90b3ea022", "html_url": "https://github.com/rust-lang/rust/commit/eaa94c52a12a2692d2a4ac6661a53fe90b3ea022", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaa94c52a12a2692d2a4ac6661a53fe90b3ea022/comments", "author": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fe2a77dd8b8bf29bef0a527339a3dbe4d50b254", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fe2a77dd8b8bf29bef0a527339a3dbe4d50b254", "html_url": "https://github.com/rust-lang/rust/commit/1fe2a77dd8b8bf29bef0a527339a3dbe4d50b254"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "43a1bf6e500c0236de98df585afaacc6c1269db0", "filename": "src/libcore/char.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eaa94c52a12a2692d2a4ac6661a53fe90b3ea022/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaa94c52a12a2692d2a4ac6661a53fe90b3ea022/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=eaa94c52a12a2692d2a4ac6661a53fe90b3ea022", "patch": "@@ -69,7 +69,7 @@ const MAX_THREE_B: u32 =  0x10000;\n /// Point], but only ones within a certain range. `MAX` is the highest valid\n /// code point that's a valid [Unicode Scalar Value].\n ///\n-/// [`char`]: primitive.char.html\n+/// [`char`]: ../primitive.char.html\n /// [Unicode Scalar Value]: http://www.unicode.org/glossary/#unicode_scalar_value\n /// [Code Point]: http://www.unicode.org/glossary/#code_point\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -91,9 +91,9 @@ pub const MAX: char = '\\u{10ffff}';\n /// [`char`]s. `from_u32()` will return `None` if the input is not a valid value\n /// for a [`char`].\n ///\n-/// [`char`]: primitive.char.html\n-/// [`u32`]: primitive.u32.html\n-/// [`as`]: ../book/casting-between-types.html#as\n+/// [`char`]: ../primitive.char.html\n+/// [`u32`]: ../primitive.u32.html\n+/// [`as`]: ../../book/casting-between-types.html#as\n ///\n /// For an unsafe version of this function which ignores these checks, see\n /// [`from_u32_unchecked()`].\n@@ -148,9 +148,9 @@ pub fn from_u32(i: u32) -> Option<char> {\n /// [`char`]s. `from_u32_unchecked()` will ignore this, and blindly cast to\n /// [`char`], possibly creating an invalid one.\n ///\n-/// [`char`]: primitive.char.html\n-/// [`u32`]: primitive.u32.html\n-/// [`as`]: ../book/casting-between-types.html#as\n+/// [`char`]: ../primitive.char.html\n+/// [`u32`]: ../primitive.u32.html\n+/// [`as`]: ../../book/casting-between-types.html#as\n ///\n /// # Safety\n ///\n@@ -414,8 +414,8 @@ pub fn encode_utf16_raw(mut ch: u32, dst: &mut [u16]) -> Option<usize> {\n /// This `struct` is created by the [`escape_unicode()`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`escape_unicode()`]: primitive.char.html#method.escape_unicode\n-/// [`char`]: primitive.char.html\n+/// [`escape_unicode()`]: ../primitive.char.html#method.escape_unicode\n+/// [`char`]: ../primitive.char.html\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct EscapeUnicode {\n@@ -494,8 +494,8 @@ impl Iterator for EscapeUnicode {\n /// This `struct` is created by the [`escape_default()`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`escape_default()`]: primitive.char.html#method.escape_default\n-/// [`char`]: primitive.char.html\n+/// [`escape_default()`]: ../primitive.char.html#method.escape_default\n+/// [`char`]: ../primitive.char.html\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct EscapeDefault {"}]}