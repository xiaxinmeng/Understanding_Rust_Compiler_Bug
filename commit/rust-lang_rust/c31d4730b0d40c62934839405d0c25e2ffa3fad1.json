{"sha": "c31d4730b0d40c62934839405d0c25e2ffa3fad1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMWQ0NzMwYjBkNDBjNjI5MzQ4Mzk0MDVkMGMyNWUyZmZhM2ZhZDE=", "commit": {"author": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2020-09-04T22:55:13Z"}, "committer": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2020-09-04T22:55:13Z"}, "message": "update example to be more idiomatic", "tree": {"sha": "c4903143711fc98e2034c01f10be02b01679c786", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4903143711fc98e2034c01f10be02b01679c786"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c31d4730b0d40c62934839405d0c25e2ffa3fad1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c31d4730b0d40c62934839405d0c25e2ffa3fad1", "html_url": "https://github.com/rust-lang/rust/commit/c31d4730b0d40c62934839405d0c25e2ffa3fad1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c31d4730b0d40c62934839405d0c25e2ffa3fad1/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2387f68e437bf2ff5f117f63936257ce64052cfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/2387f68e437bf2ff5f117f63936257ce64052cfa", "html_url": "https://github.com/rust-lang/rust/commit/2387f68e437bf2ff5f117f63936257ce64052cfa"}], "stats": {"total": 87, "additions": 60, "deletions": 27}, "files": [{"sha": "649de4133e0672d2dfa08ce290dfd1997ab219b0", "filename": "clippy_lints/src/map_err_ignore.rs", "status": "modified", "additions": 60, "deletions": 27, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/c31d4730b0d40c62934839405d0c25e2ffa3fad1/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c31d4730b0d40c62934839405d0c25e2ffa3fad1/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_err_ignore.rs?ref=c31d4730b0d40c62934839405d0c25e2ffa3fad1", "patch": "@@ -14,55 +14,88 @@ declare_clippy_lint! {\n     /// **Example:**\n     /// Before:\n     /// ```rust\n-    /// use std::convert::TryFrom;\n+    /// use std::fmt;\n     ///\n     /// #[derive(Debug)]\n-    /// enum Errors {\n-    ///     Ignored\n+    /// enum Error {\n+    ///     Indivisible,\n+    ///     Remainder(u8),\n+    /// }\n+    ///\n+    /// impl fmt::Display for Error {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         match self {\n+    ///             Error::Indivisible => write!(f, \"could not divide input by three\"),\n+    ///             Error::Remainder(remainder) => write!(\n+    ///                 f,\n+    ///                 \"input is not divisible by three, remainder = {}\",\n+    ///                 remainder\n+    ///             ),\n+    ///         }\n+    ///     }\n     /// }\n     ///\n-    /// fn divisible_by_3(inp: i32) -> Result<u32, Errors> {\n-    ///     let i = u32::try_from(inp).map_err(|_| Errors::Ignored)?;\n+    /// impl std::error::Error for Error {}\n     ///\n-    ///     Ok(i)\n+    /// fn divisible_by_3(input: &str) -> Result<(), Error> {\n+    ///     input\n+    ///         .parse::<i32>()\n+    ///         .map_err(|_| Error::Indivisible)\n+    ///         .map(|v| v % 3)\n+    ///         .and_then(|remainder| {\n+    ///             if remainder == 0 {\n+    ///                 Ok(())\n+    ///             } else {\n+    ///                 Err(Error::Remainder(remainder as u8))\n+    ///             }\n+    ///         })\n     /// }\n     ///  ```\n     ///\n     ///  After:\n     ///  ```rust\n-    /// use std::convert::TryFrom;\n-    /// use std::num::TryFromIntError;\n-    /// use std::fmt;\n-    /// use std::error::Error;\n+    /// use std::{fmt, num::ParseIntError};\n     ///\n     /// #[derive(Debug)]\n-    /// enum ParseError {\n-    ///     Indivisible {\n-    ///         source: TryFromIntError,\n-    ///         input: String,\n-    ///     }\n+    /// enum Error {\n+    ///     Indivisible(ParseIntError),\n+    ///     Remainder(u8),\n     /// }\n     ///\n-    /// impl fmt::Display for ParseError {\n+    /// impl fmt::Display for Error {\n     ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         match &self {\n-    ///             ParseError::Indivisible{source: _, input} => write!(f, \"Error: {}\", input)\n+    ///         match self {\n+    ///             Error::Indivisible(_) => write!(f, \"could not divide input by three\"),\n+    ///             Error::Remainder(remainder) => write!(\n+    ///                 f,\n+    ///                 \"input is not divisible by three, remainder = {}\",\n+    ///                 remainder\n+    ///             ),\n     ///         }\n     ///     }\n     /// }\n     ///\n-    /// impl Error for ParseError {}\n-    ///\n-    /// impl ParseError {\n-    ///     fn new(source: TryFromIntError, input: String) -> ParseError {\n-    ///         ParseError::Indivisible{source, input}\n+    /// impl std::error::Error for Error {\n+    ///     fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {\n+    ///         match self {\n+    ///             Error::Indivisible(source) => Some(source),\n+    ///             _ => None,\n+    ///         }\n     ///     }\n     /// }\n     ///\n-    /// fn divisible_by_3(inp: i32) -> Result<u32, ParseError> {\n-    ///     let i = u32::try_from(inp).map_err(|e| ParseError::new(e, e.to_string()))?;\n-    ///\n-    ///     Ok(i)\n+    /// fn divisible_by_3(input: &str) -> Result<(), Error> {\n+    ///     input\n+    ///         .parse::<i32>()\n+    ///         .map_err(Error::Indivisible)\n+    ///         .map(|v| v % 3)\n+    ///         .and_then(|remainder| {\n+    ///             if remainder == 0 {\n+    ///                 Ok(())\n+    ///             } else {\n+    ///                 Err(Error::Remainder(remainder as u8))\n+    ///             }\n+    ///         })\n     /// }\n     /// ```\n     pub MAP_ERR_IGNORE,"}]}