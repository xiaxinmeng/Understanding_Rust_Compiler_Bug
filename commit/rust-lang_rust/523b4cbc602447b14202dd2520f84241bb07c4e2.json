{"sha": "523b4cbc602447b14202dd2520f84241bb07c4e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyM2I0Y2JjNjAyNDQ3YjE0MjAyZGQyNTIwZjg0MjQxYmIwN2M0ZTI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-29T15:02:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-29T15:02:27Z"}, "message": "Merge #2650\n\n2650: Add macro call support for SourceAnalyzer::type_of r=matklad a=edwin0cheng\n\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "b145912b63ff25ab6130853867698e622ef50fcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b145912b63ff25ab6130853867698e622ef50fcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/523b4cbc602447b14202dd2520f84241bb07c4e2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeCMADCRBK7hj4Ov3rIwAAdHIIABIsiIeukKs6Ln3K0J9kNpKP\nEQZNbKOaPGzW7pXcbPVCD5OwDlBWbuYg08Il4+L3iTMuXlmmVMBU0hnCstP1Ytp3\nyR6Oguu4xGLcd7cvIaGRO2AJWTwipIiTA8qqIsWZtBM51A+45C5frVSOZfGyGamX\n26YwAHpQkM8HYPirWnCY6GPdZybfBeLIVfrIUQ78WsgmM8ON2dBXIrAo2vbs6P14\n19M1N+swUfLc8WP0n/7uZmHM9cLSt0GygGPVan98G3ANiAGRLCCjH/oHdkgz+qeO\nBqnFbgsXKttQVPCNIK95FTMAwr9grxQmLB04wCbgP2cgZLoY0gngb5CTiy2nFHs=\n=Z+0C\n-----END PGP SIGNATURE-----\n", "payload": "tree b145912b63ff25ab6130853867698e622ef50fcc\nparent ada9e16537c22b490d13cdd54b9e1e4885856a4c\nparent 12cc2ed5572e4df8cfbdaef79ed3c865fda0764c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1577631747 +0000\ncommitter GitHub <noreply@github.com> 1577631747 +0000\n\nMerge #2650\n\n2650: Add macro call support for SourceAnalyzer::type_of r=matklad a=edwin0cheng\n\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/523b4cbc602447b14202dd2520f84241bb07c4e2", "html_url": "https://github.com/rust-lang/rust/commit/523b4cbc602447b14202dd2520f84241bb07c4e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/523b4cbc602447b14202dd2520f84241bb07c4e2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ada9e16537c22b490d13cdd54b9e1e4885856a4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ada9e16537c22b490d13cdd54b9e1e4885856a4c", "html_url": "https://github.com/rust-lang/rust/commit/ada9e16537c22b490d13cdd54b9e1e4885856a4c"}, {"sha": "12cc2ed5572e4df8cfbdaef79ed3c865fda0764c", "url": "https://api.github.com/repos/rust-lang/rust/commits/12cc2ed5572e4df8cfbdaef79ed3c865fda0764c", "html_url": "https://github.com/rust-lang/rust/commit/12cc2ed5572e4df8cfbdaef79ed3c865fda0764c"}], "stats": {"total": 70, "additions": 62, "deletions": 8}, "files": [{"sha": "2c602a79eee211dd6d306316ae756fad5a1d407c", "filename": "crates/ra_assists/src/assists/add_explicit_type.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/523b4cbc602447b14202dd2520f84241bb07c4e2/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523b4cbc602447b14202dd2520f84241bb07c4e2/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs?ref=523b4cbc602447b14202dd2520f84241bb07c4e2", "patch": "@@ -73,6 +73,24 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn add_explicit_type_works_for_macro_call() {\n+        check_assist(\n+            add_explicit_type,\n+            \"macro_rules! v { () => {0u64} } fn f() { let a<|> = v!(); }\",\n+            \"macro_rules! v { () => {0u64} } fn f() { let a<|>: u64 = v!(); }\",\n+        );\n+    }\n+\n+    #[test]\n+    fn add_explicit_type_works_for_macro_call_recursive() {\n+        check_assist(\n+            add_explicit_type,\n+            \"macro_rules! u { () => {0u64} } macro_rules! v { () => {u!()} } fn f() { let a<|> = v!(); }\",\n+            \"macro_rules! u { () => {0u64} } macro_rules! v { () => {u!()} } fn f() { let a<|>: u64 = v!(); }\",\n+        );\n+    }\n+\n     #[test]\n     fn add_explicit_type_not_applicable_if_ty_not_inferred() {\n         check_assist_not_applicable(add_explicit_type, \"fn f() { let a<|> = None; }\");"}, {"sha": "2c422af8bd64856833d23fe22ce6c63e22b6d0d5", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/523b4cbc602447b14202dd2520f84241bb07c4e2/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523b4cbc602447b14202dd2520f84241bb07c4e2/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=523b4cbc602447b14202dd2520f84241bb07c4e2", "patch": "@@ -215,8 +215,32 @@ impl SourceAnalyzer {\n         self.body_source_map.as_ref()?.node_pat(src)\n     }\n \n+    fn expand_expr(\n+        &self,\n+        db: &impl HirDatabase,\n+        expr: InFile<&ast::Expr>,\n+    ) -> Option<InFile<ast::Expr>> {\n+        let macro_call = ast::MacroCall::cast(expr.value.syntax().clone())?;\n+        let macro_file =\n+            self.body_source_map.as_ref()?.node_macro_file(expr.with_value(&macro_call))?;\n+        let expanded = db.parse_or_expand(macro_file)?;\n+        let kind = expanded.kind();\n+        let expr = InFile::new(macro_file, ast::Expr::cast(expanded)?);\n+\n+        if ast::MacroCall::can_cast(kind) {\n+            self.expand_expr(db, expr.as_ref())\n+        } else {\n+            Some(expr)\n+        }\n+    }\n+\n     pub fn type_of(&self, db: &impl HirDatabase, expr: &ast::Expr) -> Option<Type> {\n-        let expr_id = self.expr_id(expr)?;\n+        let expr_id = if let Some(expr) = self.expand_expr(db, InFile::new(self.file_id, expr)) {\n+            self.body_source_map.as_ref()?.node_expr(expr.as_ref())?\n+        } else {\n+            self.expr_id(expr)?\n+        };\n+\n         let ty = self.infer.as_ref()?[expr_id].clone();\n         let environment = TraitEnvironment::lower(db, &self.resolver);\n         Some(Type { krate: self.resolver.krate()?, ty: InEnvironment { value: ty, environment } })"}, {"sha": "142c52d35809daf2fee0bb07ed9e5471bcbb31e3", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/523b4cbc602447b14202dd2520f84241bb07c4e2/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523b4cbc602447b14202dd2520f84241bb07c4e2/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=523b4cbc602447b14202dd2520f84241bb07c4e2", "patch": "@@ -163,6 +163,7 @@ pub struct BodySourceMap {\n     pat_map: FxHashMap<PatSource, PatId>,\n     pat_map_back: ArenaMap<PatId, PatSource>,\n     field_map: FxHashMap<(ExprId, usize), AstPtr<ast::RecordField>>,\n+    expansions: FxHashMap<InFile<AstPtr<ast::MacroCall>>, HirFileId>,\n }\n \n impl Body {\n@@ -237,6 +238,11 @@ impl BodySourceMap {\n         self.expr_map.get(&src).cloned()\n     }\n \n+    pub fn node_macro_file(&self, node: InFile<&ast::MacroCall>) -> Option<HirFileId> {\n+        let src = node.map(|it| AstPtr::new(it));\n+        self.expansions.get(&src).cloned()\n+    }\n+\n     pub fn field_init_shorthand_expr(&self, node: InFile<&ast::RecordField>) -> Option<ExprId> {\n         let src = node.map(|it| Either::Right(AstPtr::new(it)));\n         self.expr_map.get(&src).cloned()"}, {"sha": "e656f9a41bca51f3ca0009b14740d833d2fab28c", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/523b4cbc602447b14202dd2520f84241bb07c4e2/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523b4cbc602447b14202dd2520f84241bb07c4e2/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=523b4cbc602447b14202dd2520f84241bb07c4e2", "patch": "@@ -446,14 +446,20 @@ where\n                 }\n             }\n             // FIXME expand to statements in statement position\n-            ast::Expr::MacroCall(e) => match self.expander.enter_expand(self.db, e) {\n-                Some((mark, expansion)) => {\n-                    let id = self.collect_expr(expansion);\n-                    self.expander.exit(self.db, mark);\n-                    id\n+            ast::Expr::MacroCall(e) => {\n+                let macro_call = self.expander.to_source(AstPtr::new(&e));\n+                match self.expander.enter_expand(self.db, e.clone()) {\n+                    Some((mark, expansion)) => {\n+                        self.source_map\n+                            .expansions\n+                            .insert(macro_call, self.expander.current_file_id);\n+                        let id = self.collect_expr(expansion);\n+                        self.expander.exit(self.db, mark);\n+                        id\n+                    }\n+                    None => self.alloc_expr(Expr::Missing, syntax_ptr),\n                 }\n-                None => self.alloc_expr(Expr::Missing, syntax_ptr),\n-            },\n+            }\n \n             // FIXME implement HIR for these:\n             ast::Expr::Label(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),"}]}