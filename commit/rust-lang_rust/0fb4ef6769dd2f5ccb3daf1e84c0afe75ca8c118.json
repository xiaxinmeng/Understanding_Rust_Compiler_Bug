{"sha": "0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118", "node_id": "C_kwDOAAsO6NoAKDBmYjRlZjY3NjlkZDJmNWNjYjNkYWYxZTg0YzBhZmU3NWNhOGMxMTg", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-08-10T12:06:27Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-08-11T21:09:39Z"}, "message": "Suggest path separator when a dot is used on a trait", "tree": {"sha": "2fe698e361932eccceca68e3c5b730db2ca9ba2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fe698e361932eccceca68e3c5b730db2ca9ba2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118", "html_url": "https://github.com/rust-lang/rust/commit/0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20ffea6938b5839c390252e07940b99e3b6a889a", "url": "https://api.github.com/repos/rust-lang/rust/commits/20ffea6938b5839c390252e07940b99e3b6a889a", "html_url": "https://github.com/rust-lang/rust/commit/20ffea6938b5839c390252e07940b99e3b6a889a"}], "stats": {"total": 447, "additions": 394, "deletions": 53}, "files": [{"sha": "09c1f44826fa4b41772c5921931041849d17a6ad", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118", "patch": "@@ -985,27 +985,45 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         let ns = source.namespace();\n         let is_expected = &|res| source.is_expected(res);\n \n-        let path_sep = |err: &mut Diagnostic, expr: &Expr| match expr.kind {\n-            ExprKind::Field(_, ident) => {\n+        let path_sep = |err: &mut Diagnostic, expr: &Expr, kind: DefKind| {\n+            const MESSAGE: &str = \"use the path separator to refer to an item\";\n+\n+            let (lhs_span, rhs_span) = match &expr.kind {\n+                ExprKind::Field(base, ident) => (base.span, ident.span),\n+                ExprKind::MethodCall(_, receiver, _, span) => (receiver.span, *span),\n+                _ => return false,\n+            };\n+\n+            if lhs_span.eq_ctxt(rhs_span) {\n                 err.span_suggestion(\n-                    expr.span,\n-                    \"use the path separator to refer to an item\",\n-                    format!(\"{}::{}\", path_str, ident),\n+                    lhs_span.between(rhs_span),\n+                    MESSAGE,\n+                    \"::\",\n                     Applicability::MaybeIncorrect,\n                 );\n                 true\n-            }\n-            ExprKind::MethodCall(ref segment, ..) => {\n-                let span = expr.span.with_hi(segment.ident.span.hi());\n-                err.span_suggestion(\n-                    span,\n-                    \"use the path separator to refer to an item\",\n-                    format!(\"{}::{}\", path_str, segment.ident),\n+            } else if kind == DefKind::Struct\n+            && let Some(lhs_source_span) = lhs_span.find_ancestor_inside(expr.span)\n+            && let Ok(snippet) = self.r.session.source_map().span_to_snippet(lhs_source_span)\n+            {\n+                // The LHS is a type that originates from a macro call.\n+                // We have to add angle brackets around it.\n+\n+                err.span_suggestion_verbose(\n+                    lhs_source_span.until(rhs_span),\n+                    MESSAGE,\n+                    format!(\"<{snippet}>::\"),\n                     Applicability::MaybeIncorrect,\n                 );\n                 true\n+            } else {\n+                // Either we were unable to obtain the source span / the snippet or\n+                // the LHS originates from a macro call and it is not a type and thus\n+                // there is no way to replace `.` with `::` and still somehow suggest\n+                // valid Rust code.\n+\n+                false\n             }\n-            _ => false,\n         };\n \n         let find_span = |source: &PathSource<'_>, err: &mut Diagnostic| {\n@@ -1027,7 +1045,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             match source {\n                 PathSource::Expr(Some(\n                     parent @ Expr { kind: ExprKind::Field(..) | ExprKind::MethodCall(..), .. },\n-                )) if path_sep(err, &parent) => {}\n+                )) if path_sep(err, &parent, DefKind::Struct) => {}\n                 PathSource::Expr(\n                     None\n                     | Some(Expr {\n@@ -1143,8 +1161,11 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     }\n                 }\n             }\n-            (Res::Def(DefKind::Mod, _), PathSource::Expr(Some(parent))) => {\n-                if !path_sep(err, &parent) {\n+            (\n+                Res::Def(kind @ (DefKind::Mod | DefKind::Trait), _),\n+                PathSource::Expr(Some(parent)),\n+            ) => {\n+                if !path_sep(err, &parent, kind) {\n                     return false;\n                 }\n             }"}, {"sha": "1d8835036065b3e9d85b739eee13463473a88de4", "filename": "src/test/ui/resolve/issue-100365.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118/src%2Ftest%2Fui%2Fresolve%2Fissue-100365.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118/src%2Ftest%2Fui%2Fresolve%2Fissue-100365.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-100365.rs?ref=0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118", "patch": "@@ -0,0 +1,50 @@\n+fn main() {\n+    let addr = Into::<std::net::IpAddr>.into([127, 0, 0, 1]);\n+    //~^ ERROR expected value, found trait `Into`\n+    //~| HELP use the path separator\n+\n+    let _ = Into.into(());\n+    //~^ ERROR expected value, found trait `Into`\n+    //~| HELP use the path separator\n+\n+    let _ = Into::<()>.into;\n+    //~^ ERROR expected value, found trait `Into`\n+    //~| HELP use the path separator\n+}\n+\n+macro_rules! Trait {\n+    () => {\n+        ::std::iter::Iterator\n+        //~^ ERROR expected value, found trait `std::iter::Iterator`\n+        //~| ERROR expected value, found trait `std::iter::Iterator`\n+    };\n+}\n+\n+macro_rules! create {\n+    () => {\n+        Into::<String>.into(\"\")\n+        //~^ ERROR expected value, found trait `Into`\n+        //~| HELP use the path separator\n+    };\n+}\n+\n+fn interaction_with_macros() {\n+    //\n+    // Note that if the receiver is a macro call, we do not want to suggest to replace\n+    // `.` with `::` as that would be a syntax error.\n+    // Since the receiver is a trait and not a type, we cannot suggest to surround\n+    // it with angle brackets. It would be interpreted as a trait object type void of\n+    // `dyn` which is most likely not what the user intended to write.\n+    // `<_ as Trait!()>::` is also not an option as it's equally syntactically invalid.\n+    //\n+\n+    Trait!().map(std::convert::identity); // no `help` here!\n+\n+    Trait!().map; // no `help` here!\n+\n+    //\n+    // Ensure that the suggestion is shown for expressions inside of macro definitions.\n+    //\n+\n+    let _ = create!();\n+}"}, {"sha": "372d7726668044683e848cb7a223b2933fdf90a5", "filename": "src/test/ui/resolve/issue-100365.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118/src%2Ftest%2Fui%2Fresolve%2Fissue-100365.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118/src%2Ftest%2Fui%2Fresolve%2Fissue-100365.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-100365.stderr?ref=0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118", "patch": "@@ -0,0 +1,54 @@\n+error[E0423]: expected value, found trait `Into`\n+  --> $DIR/issue-100365.rs:2:16\n+   |\n+LL |     let addr = Into::<std::net::IpAddr>.into([127, 0, 0, 1]);\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^- help: use the path separator to refer to an item: `::`\n+\n+error[E0423]: expected value, found trait `Into`\n+  --> $DIR/issue-100365.rs:6:13\n+   |\n+LL |     let _ = Into.into(());\n+   |             ^^^^- help: use the path separator to refer to an item: `::`\n+\n+error[E0423]: expected value, found trait `Into`\n+  --> $DIR/issue-100365.rs:10:13\n+   |\n+LL |     let _ = Into::<()>.into;\n+   |             ^^^^^^^^^^- help: use the path separator to refer to an item: `::`\n+\n+error[E0423]: expected value, found trait `std::iter::Iterator`\n+  --> $DIR/issue-100365.rs:17:9\n+   |\n+LL |         ::std::iter::Iterator\n+   |         ^^^^^^^^^^^^^^^^^^^^^ not a value\n+...\n+LL |     Trait!().map(std::convert::identity); // no `help` here!\n+   |     -------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `Trait` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0423]: expected value, found trait `std::iter::Iterator`\n+  --> $DIR/issue-100365.rs:17:9\n+   |\n+LL |         ::std::iter::Iterator\n+   |         ^^^^^^^^^^^^^^^^^^^^^ not a value\n+...\n+LL |     Trait!().map; // no `help` here!\n+   |     -------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `Trait` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0423]: expected value, found trait `Into`\n+  --> $DIR/issue-100365.rs:25:9\n+   |\n+LL |         Into::<String>.into(\"\")\n+   |         ^^^^^^^^^^^^^^- help: use the path separator to refer to an item: `::`\n+...\n+LL |     let _ = create!();\n+   |             --------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `create` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0423`."}, {"sha": "31a76261408ef7021eecf5beac57e5dd24b35255", "filename": "src/test/ui/resolve/issue-22692.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.rs?ref=0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118", "patch": "@@ -1,3 +1,60 @@\n fn main() {\n-    let _ = String.new(); //~ ERROR expected value, found struct `String`\n+    let _ = String.new();\n+    //~^ ERROR expected value, found struct `String`\n+    //~| HELP use the path separator\n+\n+    let _ = String.default;\n+    //~^ ERROR expected value, found struct `String`\n+    //~| HELP use the path separator\n+\n+    let _ = Vec::<()>.with_capacity(1);\n+    //~^ ERROR expected value, found struct `Vec`\n+    //~| HELP use the path separator\n+}\n+\n+macro_rules! Type {\n+    () => {\n+        ::std::cell::Cell\n+        //~^ ERROR expected value, found struct `std::cell::Cell`\n+        //~| ERROR expected value, found struct `std::cell::Cell`\n+        //~| ERROR expected value, found struct `std::cell::Cell`\n+    };\n+}\n+\n+macro_rules! create {\n+    (type method) => {\n+        Vec.new()\n+        //~^ ERROR expected value, found struct `Vec`\n+        //~| HELP use the path separator\n+    };\n+    (type field) => {\n+        Vec.new\n+        //~^ ERROR expected value, found struct `Vec`\n+        //~| HELP use the path separator\n+    };\n+    (macro method) => {\n+        Type!().new(0)\n+        //~^ HELP use the path separator\n+    };\n+}\n+\n+fn interaction_with_macros() {\n+    //\n+    // Verify that we do not only suggest to replace `.` with `::` if the receiver is a\n+    // macro call but that we also correctly suggest to surround it with angle brackets.\n+    //\n+\n+    Type!().get();\n+    //~^ HELP use the path separator\n+\n+    Type! {}.get;\n+    //~^ HELP use the path separator\n+\n+    //\n+    // Ensure that the suggestion is shown for expressions inside of macro definitions.\n+    //\n+\n+    let _ = create!(type method);\n+    let _ = create!(type field);\n+    let _ = create!(macro method);\n }"}, {"sha": "6962aa161e92a5e9ee096220163fa460d91ea1b7", "filename": "src/test/ui/resolve/issue-22692.stderr", "status": "modified", "additions": 81, "deletions": 4, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-22692.stderr?ref=0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118", "patch": "@@ -2,10 +2,87 @@ error[E0423]: expected value, found struct `String`\n   --> $DIR/issue-22692.rs:2:13\n    |\n LL |     let _ = String.new();\n-   |             ^^^^^^----\n-   |             |\n-   |             help: use the path separator to refer to an item: `String::new`\n+   |             ^^^^^^- help: use the path separator to refer to an item: `::`\n \n-error: aborting due to previous error\n+error[E0423]: expected value, found struct `String`\n+  --> $DIR/issue-22692.rs:6:13\n+   |\n+LL |     let _ = String.default;\n+   |             ^^^^^^- help: use the path separator to refer to an item: `::`\n+\n+error[E0423]: expected value, found struct `Vec`\n+  --> $DIR/issue-22692.rs:10:13\n+   |\n+LL |     let _ = Vec::<()>.with_capacity(1);\n+   |             ^^^^^^^^^- help: use the path separator to refer to an item: `::`\n+\n+error[E0423]: expected value, found struct `std::cell::Cell`\n+  --> $DIR/issue-22692.rs:17:9\n+   |\n+LL |         ::std::cell::Cell\n+   |         ^^^^^^^^^^^^^^^^^\n+...\n+LL |     Type!().get();\n+   |     ------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `Type` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: use the path separator to refer to an item\n+   |\n+LL |     <Type!()>::get();\n+   |     ~~~~~~~~~~~\n+\n+error[E0423]: expected value, found struct `std::cell::Cell`\n+  --> $DIR/issue-22692.rs:17:9\n+   |\n+LL |         ::std::cell::Cell\n+   |         ^^^^^^^^^^^^^^^^^\n+...\n+LL |     Type! {}.get;\n+   |     -------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `Type` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: use the path separator to refer to an item\n+   |\n+LL |     <Type! {}>::get;\n+   |     ~~~~~~~~~~~~\n+\n+error[E0423]: expected value, found struct `Vec`\n+  --> $DIR/issue-22692.rs:26:9\n+   |\n+LL |         Vec.new()\n+   |         ^^^- help: use the path separator to refer to an item: `::`\n+...\n+LL |     let _ = create!(type method);\n+   |             -------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `create` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0423]: expected value, found struct `Vec`\n+  --> $DIR/issue-22692.rs:31:9\n+   |\n+LL |         Vec.new\n+   |         ^^^- help: use the path separator to refer to an item: `::`\n+...\n+LL |     let _ = create!(type field);\n+   |             ------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `create` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0423]: expected value, found struct `std::cell::Cell`\n+  --> $DIR/issue-22692.rs:17:9\n+   |\n+LL |         ::std::cell::Cell\n+   |         ^^^^^^^^^^^^^^^^^\n+...\n+LL |     let _ = create!(macro method);\n+   |             --------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `Type` which comes from the expansion of the macro `create` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: use the path separator to refer to an item\n+   |\n+LL |         <Type!()>::new(0)\n+   |         ~~~~~~~~~~~\n+\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0423`."}, {"sha": "4764cf2db20e86ccc94cba2f5baa037797851fc0", "filename": "src/test/ui/resolve/suggest-path-for-tuple-struct.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-for-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-for-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-for-tuple-struct.stderr?ref=0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118", "patch": "@@ -2,17 +2,13 @@ error[E0423]: expected value, found struct `SomeTupleStruct`\n   --> $DIR/suggest-path-for-tuple-struct.rs:22:13\n    |\n LL |     let _ = SomeTupleStruct.new();\n-   |             ^^^^^^^^^^^^^^^----\n-   |             |\n-   |             help: use the path separator to refer to an item: `SomeTupleStruct::new`\n+   |             ^^^^^^^^^^^^^^^- help: use the path separator to refer to an item: `::`\n \n error[E0423]: expected value, found struct `SomeRegularStruct`\n   --> $DIR/suggest-path-for-tuple-struct.rs:24:13\n    |\n LL |     let _ = SomeRegularStruct.new();\n-   |             ^^^^^^^^^^^^^^^^^----\n-   |             |\n-   |             help: use the path separator to refer to an item: `SomeRegularStruct::new`\n+   |             ^^^^^^^^^^^^^^^^^- help: use the path separator to refer to an item: `::`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d5d6b13d62c284aaa400650e2e594fd233d8d058", "filename": "src/test/ui/resolve/suggest-path-instead-of-mod-dot-item.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.rs?ref=0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118", "patch": "@@ -16,44 +16,96 @@ pub mod a {\n fn h1() -> i32 {\n     a.I\n     //~^ ERROR expected value, found module `a`\n+    //~| HELP use the path separator\n }\n \n fn h2() -> i32 {\n     a.g()\n     //~^ ERROR expected value, found module `a`\n+    //~| HELP use the path separator\n }\n \n fn h3() -> i32 {\n     a.b.J\n     //~^ ERROR expected value, found module `a`\n+    //~| HELP use the path separator\n }\n \n fn h4() -> i32 {\n     a::b.J\n     //~^ ERROR expected value, found module `a::b`\n+    //~| HELP a constant with a similar name exists\n+    //~| HELP use the path separator\n }\n \n fn h5() {\n     a.b.f();\n     //~^ ERROR expected value, found module `a`\n+    //~| HELP use the path separator\n     let v = Vec::new();\n     v.push(a::b);\n     //~^ ERROR expected value, found module `a::b`\n+    //~| HELP a constant with a similar name exists\n }\n \n fn h6() -> i32 {\n     a::b.f()\n     //~^ ERROR expected value, found module `a::b`\n+    //~| HELP a constant with a similar name exists\n+    //~| HELP use the path separator\n }\n \n fn h7() {\n     a::b\n     //~^ ERROR expected value, found module `a::b`\n+    //~| HELP a constant with a similar name exists\n }\n \n fn h8() -> i32 {\n     a::b()\n     //~^ ERROR expected function, found module `a::b`\n+    //~| HELP a constant with a similar name exists\n+}\n+\n+macro_rules! module {\n+    () => {\n+        a\n+        //~^ ERROR expected value, found module `a`\n+        //~| ERROR expected value, found module `a`\n+    };\n+}\n+\n+macro_rules! create {\n+    (method) => {\n+        a.f()\n+        //~^ ERROR expected value, found module `a`\n+        //~| HELP use the path separator\n+    };\n+    (field) => {\n+        a.f\n+        //~^ ERROR expected value, found module `a`\n+        //~| HELP use the path separator\n+    };\n+}\n+\n+fn h9() {\n+    //\n+    // Note that if the receiver is a macro call, we do not want to suggest to replace\n+    // `.` with `::` as that would be a syntax error.\n+    // Since the receiver is a module and not a type, we cannot suggest to surround\n+    // it with angle brackets.\n+    //\n+\n+    module!().g::<()>(); // no `help` here!\n+\n+    module!().g; // no `help` here!\n+\n+    //\n+    // Ensure that the suggestion is shown for expressions inside of macro definitions.\n+    //\n+\n+    let _ = create!(method);\n+    let _ = create!(field);\n }\n \n fn main() {}"}, {"sha": "a4ce0deeb70f59b5aee008a41222937340a549b0", "filename": "src/test/ui/resolve/suggest-path-instead-of-mod-dot-item.stderr", "status": "modified", "additions": 59, "deletions": 23, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr?ref=0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118", "patch": "@@ -2,28 +2,22 @@ error[E0423]: expected value, found module `a`\n   --> $DIR/suggest-path-instead-of-mod-dot-item.rs:17:5\n    |\n LL |     a.I\n-   |     ^--\n-   |     |\n-   |     help: use the path separator to refer to an item: `a::I`\n+   |     ^- help: use the path separator to refer to an item: `::`\n \n error[E0423]: expected value, found module `a`\n-  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:22:5\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:23:5\n    |\n LL |     a.g()\n-   |     ^--\n-   |     |\n-   |     help: use the path separator to refer to an item: `a::g`\n+   |     ^- help: use the path separator to refer to an item: `::`\n \n error[E0423]: expected value, found module `a`\n-  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:27:5\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:29:5\n    |\n LL |     a.b.J\n-   |     ^--\n-   |     |\n-   |     help: use the path separator to refer to an item: `a::b`\n+   |     ^- help: use the path separator to refer to an item: `::`\n \n error[E0423]: expected value, found module `a::b`\n-  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:32:5\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:35:5\n    |\n LL |     pub const I: i32 = 1;\n    |     --------------------- similarly named constant `I` defined here\n@@ -34,22 +28,20 @@ LL |     a::b.J\n help: use the path separator to refer to an item\n    |\n LL |     a::b::J\n-   |\n+   |         ~~\n help: a constant with a similar name exists\n    |\n LL |     a::I.J\n    |        ~\n \n error[E0423]: expected value, found module `a`\n-  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:37:5\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:42:5\n    |\n LL |     a.b.f();\n-   |     ^--\n-   |     |\n-   |     help: use the path separator to refer to an item: `a::b`\n+   |     ^- help: use the path separator to refer to an item: `::`\n \n error[E0423]: expected value, found module `a::b`\n-  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:40:12\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:46:12\n    |\n LL |     pub const I: i32 = 1;\n    |     --------------------- similarly named constant `I` defined here\n@@ -60,7 +52,7 @@ LL |     v.push(a::b);\n    |               help: a constant with a similar name exists: `I`\n \n error[E0423]: expected value, found module `a::b`\n-  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:45:5\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:52:5\n    |\n LL |     pub const I: i32 = 1;\n    |     --------------------- similarly named constant `I` defined here\n@@ -71,14 +63,14 @@ LL |     a::b.f()\n help: use the path separator to refer to an item\n    |\n LL |     a::b::f()\n-   |     ~~~~~~~\n+   |         ~~\n help: a constant with a similar name exists\n    |\n LL |     a::I.f()\n    |        ~\n \n error[E0423]: expected value, found module `a::b`\n-  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:50:5\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:59:5\n    |\n LL |     pub const I: i32 = 1;\n    |     --------------------- similarly named constant `I` defined here\n@@ -89,7 +81,7 @@ LL |     a::b\n    |        help: a constant with a similar name exists: `I`\n \n error[E0423]: expected function, found module `a::b`\n-  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:55:5\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:65:5\n    |\n LL |     pub const I: i32 = 1;\n    |     --------------------- similarly named constant `I` defined here\n@@ -99,6 +91,50 @@ LL |     a::b()\n    |        |\n    |        help: a constant with a similar name exists: `I`\n \n-error: aborting due to 9 previous errors\n+error[E0423]: expected value, found module `a`\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:72:9\n+   |\n+LL |         a\n+   |         ^ not a value\n+...\n+LL |     module!().g::<()>(); // no `help` here!\n+   |     --------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `module` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0423]: expected value, found module `a`\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:72:9\n+   |\n+LL |         a\n+   |         ^ not a value\n+...\n+LL |     module!().g; // no `help` here!\n+   |     --------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `module` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0423]: expected value, found module `a`\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:80:9\n+   |\n+LL |         a.f()\n+   |         ^- help: use the path separator to refer to an item: `::`\n+...\n+LL |     let _ = create!(method);\n+   |             --------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `create` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0423]: expected value, found module `a`\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:85:9\n+   |\n+LL |         a.f\n+   |         ^- help: use the path separator to refer to an item: `::`\n+...\n+LL |     let _ = create!(field);\n+   |             -------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `create` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 13 previous errors\n \n For more information about this error, try `rustc --explain E0423`."}, {"sha": "78e5634b2de2a46bfd612a98980a7d5bd2b64222", "filename": "src/test/ui/suggestions/assoc-const-as-field.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118/src%2Ftest%2Fui%2Fsuggestions%2Fassoc-const-as-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118/src%2Ftest%2Fui%2Fsuggestions%2Fassoc-const-as-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fassoc-const-as-field.stderr?ref=0fb4ef6769dd2f5ccb3daf1e84c0afe75ca8c118", "patch": "@@ -2,9 +2,7 @@ error[E0423]: expected value, found struct `Mod::Foo`\n   --> $DIR/assoc-const-as-field.rs:11:9\n    |\n LL |     foo(Mod::Foo.Bar);\n-   |         ^^^^^^^^----\n-   |         |\n-   |         help: use the path separator to refer to an item: `Mod::Foo::Bar`\n+   |         ^^^^^^^^- help: use the path separator to refer to an item: `::`\n \n error: aborting due to previous error\n "}]}