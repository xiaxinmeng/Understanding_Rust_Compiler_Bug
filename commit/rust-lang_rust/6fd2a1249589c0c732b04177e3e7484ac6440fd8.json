{"sha": "6fd2a1249589c0c732b04177e3e7484ac6440fd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZDJhMTI0OTU4OWMwYzczMmIwNDE3N2UzZTc0ODRhYzY0NDBmZDg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-09T16:03:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-09T16:07:16Z"}, "message": "More compact generated code", "tree": {"sha": "ee320b1d4c07205a1f1dbbef16b1c5bfaa2ea3b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee320b1d4c07205a1f1dbbef16b1c5bfaa2ea3b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fd2a1249589c0c732b04177e3e7484ac6440fd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fd2a1249589c0c732b04177e3e7484ac6440fd8", "html_url": "https://github.com/rust-lang/rust/commit/6fd2a1249589c0c732b04177e3e7484ac6440fd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fd2a1249589c0c732b04177e3e7484ac6440fd8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a063e651f0ec0da852ce1f87589d5c0a893c59d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a063e651f0ec0da852ce1f87589d5c0a893c59d", "html_url": "https://github.com/rust-lang/rust/commit/4a063e651f0ec0da852ce1f87589d5c0a893c59d"}], "stats": {"total": 2925, "additions": 736, "deletions": 2189}, "files": [{"sha": "f5199e09f21066cd1b0d38f49737bdfaac53d904", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fd2a1249589c0c732b04177e3e7484ac6440fd8/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd2a1249589c0c732b04177e3e7484ac6440fd8/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=6fd2a1249589c0c732b04177e3e7484ac6440fd8", "patch": "@@ -1,4 +1,6 @@\n //! This file is actually hand-written, but the submodules are indeed generated.\n \n+#[rustfmt::skip]\n pub(super) mod nodes;\n+#[rustfmt::skip]\n pub(super) mod tokens;"}, {"sha": "6e258250c4ad683feaf50a81e827c4ff513aeb13", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 565, "deletions": 1685, "changes": 2250, "blob_url": "https://github.com/rust-lang/rust/blob/6fd2a1249589c0c732b04177e3e7484ac6440fd8/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd2a1249589c0c732b04177e3e7484ac6440fd8/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=6fd2a1249589c0c732b04177e3e7484ac6440fd8"}, {"sha": "ec3ca4a5bb1b20ca1601e7fafa25459e5a915d3b", "filename": "crates/ra_syntax/src/ast/generated/tokens.rs", "status": "modified", "additions": 168, "deletions": 504, "changes": 672, "blob_url": "https://github.com/rust-lang/rust/blob/6fd2a1249589c0c732b04177e3e7484ac6440fd8/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd2a1249589c0c732b04177e3e7484ac6440fd8/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs?ref=6fd2a1249589c0c732b04177e3e7484ac6440fd8", "patch": "@@ -28,9 +28,7 @@ impl AstToken for Semi {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Comma {\n@@ -55,9 +53,7 @@ impl AstToken for Comma {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct LParen {\n@@ -82,9 +78,7 @@ impl AstToken for LParen {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RParen {\n@@ -109,9 +103,7 @@ impl AstToken for RParen {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct LCurly {\n@@ -136,9 +128,7 @@ impl AstToken for LCurly {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RCurly {\n@@ -163,9 +153,7 @@ impl AstToken for RCurly {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct LBrack {\n@@ -190,9 +178,7 @@ impl AstToken for LBrack {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RBrack {\n@@ -217,9 +203,7 @@ impl AstToken for RBrack {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct LAngle {\n@@ -244,9 +228,7 @@ impl AstToken for LAngle {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RAngle {\n@@ -271,9 +253,7 @@ impl AstToken for RAngle {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct At {\n@@ -298,9 +278,7 @@ impl AstToken for At {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Pound {\n@@ -325,9 +303,7 @@ impl AstToken for Pound {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Tilde {\n@@ -352,9 +328,7 @@ impl AstToken for Tilde {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Question {\n@@ -379,9 +353,7 @@ impl AstToken for Question {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Dollar {\n@@ -406,9 +378,7 @@ impl AstToken for Dollar {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Amp {\n@@ -433,9 +403,7 @@ impl AstToken for Amp {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Pipe {\n@@ -460,9 +428,7 @@ impl AstToken for Pipe {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Plus {\n@@ -487,9 +453,7 @@ impl AstToken for Plus {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Star {\n@@ -514,9 +478,7 @@ impl AstToken for Star {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Slash {\n@@ -541,9 +503,7 @@ impl AstToken for Slash {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Caret {\n@@ -568,9 +528,7 @@ impl AstToken for Caret {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Percent {\n@@ -595,9 +553,7 @@ impl AstToken for Percent {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Underscore {\n@@ -622,9 +578,7 @@ impl AstToken for Underscore {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Dot {\n@@ -649,9 +603,7 @@ impl AstToken for Dot {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Dotdot {\n@@ -676,9 +628,7 @@ impl AstToken for Dotdot {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Dotdotdot {\n@@ -703,9 +653,7 @@ impl AstToken for Dotdotdot {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Dotdoteq {\n@@ -730,9 +678,7 @@ impl AstToken for Dotdoteq {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Colon {\n@@ -757,9 +703,7 @@ impl AstToken for Colon {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Coloncolon {\n@@ -784,9 +728,7 @@ impl AstToken for Coloncolon {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Eq {\n@@ -811,9 +753,7 @@ impl AstToken for Eq {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Eqeq {\n@@ -838,9 +778,7 @@ impl AstToken for Eqeq {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct FatArrow {\n@@ -865,9 +803,7 @@ impl AstToken for FatArrow {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Excl {\n@@ -892,9 +828,7 @@ impl AstToken for Excl {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Neq {\n@@ -919,9 +853,7 @@ impl AstToken for Neq {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Minus {\n@@ -946,9 +878,7 @@ impl AstToken for Minus {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ThinArrow {\n@@ -973,9 +903,7 @@ impl AstToken for ThinArrow {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Lteq {\n@@ -1000,9 +928,7 @@ impl AstToken for Lteq {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Gteq {\n@@ -1027,9 +953,7 @@ impl AstToken for Gteq {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Pluseq {\n@@ -1054,9 +978,7 @@ impl AstToken for Pluseq {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Minuseq {\n@@ -1081,9 +1003,7 @@ impl AstToken for Minuseq {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Pipeeq {\n@@ -1108,9 +1028,7 @@ impl AstToken for Pipeeq {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Ampeq {\n@@ -1135,9 +1053,7 @@ impl AstToken for Ampeq {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Careteq {\n@@ -1162,9 +1078,7 @@ impl AstToken for Careteq {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Slasheq {\n@@ -1189,9 +1103,7 @@ impl AstToken for Slasheq {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Stareq {\n@@ -1216,9 +1128,7 @@ impl AstToken for Stareq {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Percenteq {\n@@ -1243,9 +1153,7 @@ impl AstToken for Percenteq {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Ampamp {\n@@ -1270,9 +1178,7 @@ impl AstToken for Ampamp {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Pipepipe {\n@@ -1297,9 +1203,7 @@ impl AstToken for Pipepipe {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Shl {\n@@ -1324,9 +1228,7 @@ impl AstToken for Shl {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Shr {\n@@ -1351,9 +1253,7 @@ impl AstToken for Shr {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Shleq {\n@@ -1378,9 +1278,7 @@ impl AstToken for Shleq {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Shreq {\n@@ -1405,9 +1303,7 @@ impl AstToken for Shreq {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct AsKw {\n@@ -1432,9 +1328,7 @@ impl AstToken for AsKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct AsyncKw {\n@@ -1459,9 +1353,7 @@ impl AstToken for AsyncKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct AwaitKw {\n@@ -1486,9 +1378,7 @@ impl AstToken for AwaitKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct BoxKw {\n@@ -1513,9 +1403,7 @@ impl AstToken for BoxKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct BreakKw {\n@@ -1540,9 +1428,7 @@ impl AstToken for BreakKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ConstKw {\n@@ -1567,9 +1453,7 @@ impl AstToken for ConstKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ContinueKw {\n@@ -1594,9 +1478,7 @@ impl AstToken for ContinueKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct CrateKw {\n@@ -1621,9 +1503,7 @@ impl AstToken for CrateKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct DynKw {\n@@ -1648,9 +1528,7 @@ impl AstToken for DynKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ElseKw {\n@@ -1675,9 +1553,7 @@ impl AstToken for ElseKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct EnumKw {\n@@ -1702,9 +1578,7 @@ impl AstToken for EnumKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ExternKw {\n@@ -1729,9 +1603,7 @@ impl AstToken for ExternKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct FalseKw {\n@@ -1756,9 +1628,7 @@ impl AstToken for FalseKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct FnKw {\n@@ -1783,9 +1653,7 @@ impl AstToken for FnKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ForKw {\n@@ -1810,9 +1678,7 @@ impl AstToken for ForKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct IfKw {\n@@ -1837,9 +1703,7 @@ impl AstToken for IfKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ImplKw {\n@@ -1864,9 +1728,7 @@ impl AstToken for ImplKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct InKw {\n@@ -1891,9 +1753,7 @@ impl AstToken for InKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct LetKw {\n@@ -1918,9 +1778,7 @@ impl AstToken for LetKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct LoopKw {\n@@ -1945,9 +1803,7 @@ impl AstToken for LoopKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MacroKw {\n@@ -1972,9 +1828,7 @@ impl AstToken for MacroKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MatchKw {\n@@ -1999,9 +1853,7 @@ impl AstToken for MatchKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ModKw {\n@@ -2026,9 +1878,7 @@ impl AstToken for ModKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MoveKw {\n@@ -2053,9 +1903,7 @@ impl AstToken for MoveKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MutKw {\n@@ -2080,9 +1928,7 @@ impl AstToken for MutKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct PubKw {\n@@ -2107,9 +1953,7 @@ impl AstToken for PubKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RefKw {\n@@ -2134,9 +1978,7 @@ impl AstToken for RefKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ReturnKw {\n@@ -2161,9 +2003,7 @@ impl AstToken for ReturnKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct SelfKw {\n@@ -2188,9 +2028,7 @@ impl AstToken for SelfKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct StaticKw {\n@@ -2215,9 +2053,7 @@ impl AstToken for StaticKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct StructKw {\n@@ -2242,9 +2078,7 @@ impl AstToken for StructKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct SuperKw {\n@@ -2269,9 +2103,7 @@ impl AstToken for SuperKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TraitKw {\n@@ -2296,9 +2128,7 @@ impl AstToken for TraitKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TrueKw {\n@@ -2323,9 +2153,7 @@ impl AstToken for TrueKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TryKw {\n@@ -2350,9 +2178,7 @@ impl AstToken for TryKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeKw {\n@@ -2377,9 +2203,7 @@ impl AstToken for TypeKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct UnsafeKw {\n@@ -2404,9 +2228,7 @@ impl AstToken for UnsafeKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct UseKw {\n@@ -2431,9 +2253,7 @@ impl AstToken for UseKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct WhereKw {\n@@ -2458,9 +2278,7 @@ impl AstToken for WhereKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct WhileKw {\n@@ -2485,9 +2303,7 @@ impl AstToken for WhileKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct AutoKw {\n@@ -2512,9 +2328,7 @@ impl AstToken for AutoKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct DefaultKw {\n@@ -2539,9 +2353,7 @@ impl AstToken for DefaultKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ExistentialKw {\n@@ -2566,9 +2378,7 @@ impl AstToken for ExistentialKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct UnionKw {\n@@ -2593,9 +2403,7 @@ impl AstToken for UnionKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RawKw {\n@@ -2620,9 +2428,7 @@ impl AstToken for RawKw {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct IntNumber {\n@@ -2647,9 +2453,7 @@ impl AstToken for IntNumber {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct FloatNumber {\n@@ -2674,9 +2478,7 @@ impl AstToken for FloatNumber {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Char {\n@@ -2701,9 +2503,7 @@ impl AstToken for Char {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Byte {\n@@ -2728,9 +2528,7 @@ impl AstToken for Byte {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct String {\n@@ -2755,9 +2553,7 @@ impl AstToken for String {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RawString {\n@@ -2782,9 +2578,7 @@ impl AstToken for RawString {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ByteString {\n@@ -2809,9 +2603,7 @@ impl AstToken for ByteString {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RawByteString {\n@@ -2836,9 +2628,7 @@ impl AstToken for RawByteString {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Error {\n@@ -2863,9 +2653,7 @@ impl AstToken for Error {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Ident {\n@@ -2890,9 +2678,7 @@ impl AstToken for Ident {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Whitespace {\n@@ -2917,9 +2703,7 @@ impl AstToken for Whitespace {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Lifetime {\n@@ -2944,9 +2728,7 @@ impl AstToken for Lifetime {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Comment {\n@@ -2971,9 +2753,7 @@ impl AstToken for Comment {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Shebang {\n@@ -2998,9 +2778,7 @@ impl AstToken for Shebang {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct LDollar {\n@@ -3025,9 +2803,7 @@ impl AstToken for LDollar {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RDollar {\n@@ -3052,9 +2828,7 @@ impl AstToken for RDollar {\n             None\n         }\n     }\n-    fn syntax(&self) -> &SyntaxToken {\n-        &self.syntax\n-    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum LeftDelimiter {\n@@ -3063,19 +2837,13 @@ pub enum LeftDelimiter {\n     LCurly(LCurly),\n }\n impl From<LParen> for LeftDelimiter {\n-    fn from(node: LParen) -> LeftDelimiter {\n-        LeftDelimiter::LParen(node)\n-    }\n+    fn from(node: LParen) -> LeftDelimiter { LeftDelimiter::LParen(node) }\n }\n impl From<LBrack> for LeftDelimiter {\n-    fn from(node: LBrack) -> LeftDelimiter {\n-        LeftDelimiter::LBrack(node)\n-    }\n+    fn from(node: LBrack) -> LeftDelimiter { LeftDelimiter::LBrack(node) }\n }\n impl From<LCurly> for LeftDelimiter {\n-    fn from(node: LCurly) -> LeftDelimiter {\n-        LeftDelimiter::LCurly(node)\n-    }\n+    fn from(node: LCurly) -> LeftDelimiter { LeftDelimiter::LCurly(node) }\n }\n impl std::fmt::Display for LeftDelimiter {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n@@ -3113,19 +2881,13 @@ pub enum RightDelimiter {\n     RCurly(RCurly),\n }\n impl From<RParen> for RightDelimiter {\n-    fn from(node: RParen) -> RightDelimiter {\n-        RightDelimiter::RParen(node)\n-    }\n+    fn from(node: RParen) -> RightDelimiter { RightDelimiter::RParen(node) }\n }\n impl From<RBrack> for RightDelimiter {\n-    fn from(node: RBrack) -> RightDelimiter {\n-        RightDelimiter::RBrack(node)\n-    }\n+    fn from(node: RBrack) -> RightDelimiter { RightDelimiter::RBrack(node) }\n }\n impl From<RCurly> for RightDelimiter {\n-    fn from(node: RCurly) -> RightDelimiter {\n-        RightDelimiter::RCurly(node)\n-    }\n+    fn from(node: RCurly) -> RightDelimiter { RightDelimiter::RCurly(node) }\n }\n impl std::fmt::Display for RightDelimiter {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n@@ -3163,19 +2925,13 @@ pub enum RangeSeparator {\n     Dotdoteq(Dotdoteq),\n }\n impl From<Dotdot> for RangeSeparator {\n-    fn from(node: Dotdot) -> RangeSeparator {\n-        RangeSeparator::Dotdot(node)\n-    }\n+    fn from(node: Dotdot) -> RangeSeparator { RangeSeparator::Dotdot(node) }\n }\n impl From<Dotdotdot> for RangeSeparator {\n-    fn from(node: Dotdotdot) -> RangeSeparator {\n-        RangeSeparator::Dotdotdot(node)\n-    }\n+    fn from(node: Dotdotdot) -> RangeSeparator { RangeSeparator::Dotdotdot(node) }\n }\n impl From<Dotdoteq> for RangeSeparator {\n-    fn from(node: Dotdoteq) -> RangeSeparator {\n-        RangeSeparator::Dotdoteq(node)\n-    }\n+    fn from(node: Dotdoteq) -> RangeSeparator { RangeSeparator::Dotdoteq(node) }\n }\n impl std::fmt::Display for RangeSeparator {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n@@ -3239,149 +2995,91 @@ pub enum BinOp {\n     Careteq(Careteq),\n }\n impl From<Pipepipe> for BinOp {\n-    fn from(node: Pipepipe) -> BinOp {\n-        BinOp::Pipepipe(node)\n-    }\n+    fn from(node: Pipepipe) -> BinOp { BinOp::Pipepipe(node) }\n }\n impl From<Ampamp> for BinOp {\n-    fn from(node: Ampamp) -> BinOp {\n-        BinOp::Ampamp(node)\n-    }\n+    fn from(node: Ampamp) -> BinOp { BinOp::Ampamp(node) }\n }\n impl From<Eqeq> for BinOp {\n-    fn from(node: Eqeq) -> BinOp {\n-        BinOp::Eqeq(node)\n-    }\n+    fn from(node: Eqeq) -> BinOp { BinOp::Eqeq(node) }\n }\n impl From<Neq> for BinOp {\n-    fn from(node: Neq) -> BinOp {\n-        BinOp::Neq(node)\n-    }\n+    fn from(node: Neq) -> BinOp { BinOp::Neq(node) }\n }\n impl From<Lteq> for BinOp {\n-    fn from(node: Lteq) -> BinOp {\n-        BinOp::Lteq(node)\n-    }\n+    fn from(node: Lteq) -> BinOp { BinOp::Lteq(node) }\n }\n impl From<Gteq> for BinOp {\n-    fn from(node: Gteq) -> BinOp {\n-        BinOp::Gteq(node)\n-    }\n+    fn from(node: Gteq) -> BinOp { BinOp::Gteq(node) }\n }\n impl From<LAngle> for BinOp {\n-    fn from(node: LAngle) -> BinOp {\n-        BinOp::LAngle(node)\n-    }\n+    fn from(node: LAngle) -> BinOp { BinOp::LAngle(node) }\n }\n impl From<RAngle> for BinOp {\n-    fn from(node: RAngle) -> BinOp {\n-        BinOp::RAngle(node)\n-    }\n+    fn from(node: RAngle) -> BinOp { BinOp::RAngle(node) }\n }\n impl From<Plus> for BinOp {\n-    fn from(node: Plus) -> BinOp {\n-        BinOp::Plus(node)\n-    }\n+    fn from(node: Plus) -> BinOp { BinOp::Plus(node) }\n }\n impl From<Star> for BinOp {\n-    fn from(node: Star) -> BinOp {\n-        BinOp::Star(node)\n-    }\n+    fn from(node: Star) -> BinOp { BinOp::Star(node) }\n }\n impl From<Minus> for BinOp {\n-    fn from(node: Minus) -> BinOp {\n-        BinOp::Minus(node)\n-    }\n+    fn from(node: Minus) -> BinOp { BinOp::Minus(node) }\n }\n impl From<Slash> for BinOp {\n-    fn from(node: Slash) -> BinOp {\n-        BinOp::Slash(node)\n-    }\n+    fn from(node: Slash) -> BinOp { BinOp::Slash(node) }\n }\n impl From<Percent> for BinOp {\n-    fn from(node: Percent) -> BinOp {\n-        BinOp::Percent(node)\n-    }\n+    fn from(node: Percent) -> BinOp { BinOp::Percent(node) }\n }\n impl From<Shl> for BinOp {\n-    fn from(node: Shl) -> BinOp {\n-        BinOp::Shl(node)\n-    }\n+    fn from(node: Shl) -> BinOp { BinOp::Shl(node) }\n }\n impl From<Shr> for BinOp {\n-    fn from(node: Shr) -> BinOp {\n-        BinOp::Shr(node)\n-    }\n+    fn from(node: Shr) -> BinOp { BinOp::Shr(node) }\n }\n impl From<Caret> for BinOp {\n-    fn from(node: Caret) -> BinOp {\n-        BinOp::Caret(node)\n-    }\n+    fn from(node: Caret) -> BinOp { BinOp::Caret(node) }\n }\n impl From<Pipe> for BinOp {\n-    fn from(node: Pipe) -> BinOp {\n-        BinOp::Pipe(node)\n-    }\n+    fn from(node: Pipe) -> BinOp { BinOp::Pipe(node) }\n }\n impl From<Amp> for BinOp {\n-    fn from(node: Amp) -> BinOp {\n-        BinOp::Amp(node)\n-    }\n+    fn from(node: Amp) -> BinOp { BinOp::Amp(node) }\n }\n impl From<Eq> for BinOp {\n-    fn from(node: Eq) -> BinOp {\n-        BinOp::Eq(node)\n-    }\n+    fn from(node: Eq) -> BinOp { BinOp::Eq(node) }\n }\n impl From<Pluseq> for BinOp {\n-    fn from(node: Pluseq) -> BinOp {\n-        BinOp::Pluseq(node)\n-    }\n+    fn from(node: Pluseq) -> BinOp { BinOp::Pluseq(node) }\n }\n impl From<Slasheq> for BinOp {\n-    fn from(node: Slasheq) -> BinOp {\n-        BinOp::Slasheq(node)\n-    }\n+    fn from(node: Slasheq) -> BinOp { BinOp::Slasheq(node) }\n }\n impl From<Stareq> for BinOp {\n-    fn from(node: Stareq) -> BinOp {\n-        BinOp::Stareq(node)\n-    }\n+    fn from(node: Stareq) -> BinOp { BinOp::Stareq(node) }\n }\n impl From<Percenteq> for BinOp {\n-    fn from(node: Percenteq) -> BinOp {\n-        BinOp::Percenteq(node)\n-    }\n+    fn from(node: Percenteq) -> BinOp { BinOp::Percenteq(node) }\n }\n impl From<Shreq> for BinOp {\n-    fn from(node: Shreq) -> BinOp {\n-        BinOp::Shreq(node)\n-    }\n+    fn from(node: Shreq) -> BinOp { BinOp::Shreq(node) }\n }\n impl From<Shleq> for BinOp {\n-    fn from(node: Shleq) -> BinOp {\n-        BinOp::Shleq(node)\n-    }\n+    fn from(node: Shleq) -> BinOp { BinOp::Shleq(node) }\n }\n impl From<Minuseq> for BinOp {\n-    fn from(node: Minuseq) -> BinOp {\n-        BinOp::Minuseq(node)\n-    }\n+    fn from(node: Minuseq) -> BinOp { BinOp::Minuseq(node) }\n }\n impl From<Pipeeq> for BinOp {\n-    fn from(node: Pipeeq) -> BinOp {\n-        BinOp::Pipeeq(node)\n-    }\n+    fn from(node: Pipeeq) -> BinOp { BinOp::Pipeeq(node) }\n }\n impl From<Ampeq> for BinOp {\n-    fn from(node: Ampeq) -> BinOp {\n-        BinOp::Ampeq(node)\n-    }\n+    fn from(node: Ampeq) -> BinOp { BinOp::Ampeq(node) }\n }\n impl From<Careteq> for BinOp {\n-    fn from(node: Careteq) -> BinOp {\n-        BinOp::Careteq(node)\n-    }\n+    fn from(node: Careteq) -> BinOp { BinOp::Careteq(node) }\n }\n impl std::fmt::Display for BinOp {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n@@ -3473,19 +3171,13 @@ pub enum PrefixOp {\n     Star(Star),\n }\n impl From<Minus> for PrefixOp {\n-    fn from(node: Minus) -> PrefixOp {\n-        PrefixOp::Minus(node)\n-    }\n+    fn from(node: Minus) -> PrefixOp { PrefixOp::Minus(node) }\n }\n impl From<Excl> for PrefixOp {\n-    fn from(node: Excl) -> PrefixOp {\n-        PrefixOp::Excl(node)\n-    }\n+    fn from(node: Excl) -> PrefixOp { PrefixOp::Excl(node) }\n }\n impl From<Star> for PrefixOp {\n-    fn from(node: Star) -> PrefixOp {\n-        PrefixOp::Star(node)\n-    }\n+    fn from(node: Star) -> PrefixOp { PrefixOp::Star(node) }\n }\n impl std::fmt::Display for PrefixOp {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n@@ -3522,14 +3214,10 @@ pub enum RangeOp {\n     Dotdoteq(Dotdoteq),\n }\n impl From<Dotdot> for RangeOp {\n-    fn from(node: Dotdot) -> RangeOp {\n-        RangeOp::Dotdot(node)\n-    }\n+    fn from(node: Dotdot) -> RangeOp { RangeOp::Dotdot(node) }\n }\n impl From<Dotdoteq> for RangeOp {\n-    fn from(node: Dotdoteq) -> RangeOp {\n-        RangeOp::Dotdoteq(node)\n-    }\n+    fn from(node: Dotdoteq) -> RangeOp { RangeOp::Dotdoteq(node) }\n }\n impl std::fmt::Display for RangeOp {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n@@ -3572,54 +3260,34 @@ pub enum LiteralToken {\n     Byte(Byte),\n }\n impl From<IntNumber> for LiteralToken {\n-    fn from(node: IntNumber) -> LiteralToken {\n-        LiteralToken::IntNumber(node)\n-    }\n+    fn from(node: IntNumber) -> LiteralToken { LiteralToken::IntNumber(node) }\n }\n impl From<FloatNumber> for LiteralToken {\n-    fn from(node: FloatNumber) -> LiteralToken {\n-        LiteralToken::FloatNumber(node)\n-    }\n+    fn from(node: FloatNumber) -> LiteralToken { LiteralToken::FloatNumber(node) }\n }\n impl From<String> for LiteralToken {\n-    fn from(node: String) -> LiteralToken {\n-        LiteralToken::String(node)\n-    }\n+    fn from(node: String) -> LiteralToken { LiteralToken::String(node) }\n }\n impl From<RawString> for LiteralToken {\n-    fn from(node: RawString) -> LiteralToken {\n-        LiteralToken::RawString(node)\n-    }\n+    fn from(node: RawString) -> LiteralToken { LiteralToken::RawString(node) }\n }\n impl From<TrueKw> for LiteralToken {\n-    fn from(node: TrueKw) -> LiteralToken {\n-        LiteralToken::TrueKw(node)\n-    }\n+    fn from(node: TrueKw) -> LiteralToken { LiteralToken::TrueKw(node) }\n }\n impl From<FalseKw> for LiteralToken {\n-    fn from(node: FalseKw) -> LiteralToken {\n-        LiteralToken::FalseKw(node)\n-    }\n+    fn from(node: FalseKw) -> LiteralToken { LiteralToken::FalseKw(node) }\n }\n impl From<ByteString> for LiteralToken {\n-    fn from(node: ByteString) -> LiteralToken {\n-        LiteralToken::ByteString(node)\n-    }\n+    fn from(node: ByteString) -> LiteralToken { LiteralToken::ByteString(node) }\n }\n impl From<RawByteString> for LiteralToken {\n-    fn from(node: RawByteString) -> LiteralToken {\n-        LiteralToken::RawByteString(node)\n-    }\n+    fn from(node: RawByteString) -> LiteralToken { LiteralToken::RawByteString(node) }\n }\n impl From<Char> for LiteralToken {\n-    fn from(node: Char) -> LiteralToken {\n-        LiteralToken::Char(node)\n-    }\n+    fn from(node: Char) -> LiteralToken { LiteralToken::Char(node) }\n }\n impl From<Byte> for LiteralToken {\n-    fn from(node: Byte) -> LiteralToken {\n-        LiteralToken::Byte(node)\n-    }\n+    fn from(node: Byte) -> LiteralToken { LiteralToken::Byte(node) }\n }\n impl std::fmt::Display for LiteralToken {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n@@ -3671,14 +3339,10 @@ pub enum NameRefToken {\n     IntNumber(IntNumber),\n }\n impl From<Ident> for NameRefToken {\n-    fn from(node: Ident) -> NameRefToken {\n-        NameRefToken::Ident(node)\n-    }\n+    fn from(node: Ident) -> NameRefToken { NameRefToken::Ident(node) }\n }\n impl From<IntNumber> for NameRefToken {\n-    fn from(node: IntNumber) -> NameRefToken {\n-        NameRefToken::IntNumber(node)\n-    }\n+    fn from(node: IntNumber) -> NameRefToken { NameRefToken::IntNumber(node) }\n }\n impl std::fmt::Display for NameRefToken {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {"}, {"sha": "ec824a5183d498bd5f14ade7609862499732dea6", "filename": "xtask/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fd2a1249589c0c732b04177e3e7484ac6440fd8/xtask%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd2a1249589c0c732b04177e3e7484ac6440fd8/xtask%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Flib.rs?ref=6fd2a1249589c0c732b04177e3e7484ac6440fd8", "patch": "@@ -67,6 +67,7 @@ fn reformat(text: impl std::fmt::Display) -> Result<String> {\n     let mut rustfmt = Command::new(\"rustup\")\n         .args(&[\"run\", TOOLCHAIN, \"--\", \"rustfmt\", \"--config-path\"])\n         .arg(project_root().join(\"rustfmt.toml\"))\n+        .args(&[\"--config\", \"fn_single_line=true\"])\n         .stdin(Stdio::piped())\n         .stdout(Stdio::piped())\n         .spawn()?;"}]}