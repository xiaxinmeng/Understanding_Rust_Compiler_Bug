{"sha": "7f93d4aa0dc4ac071c617e0e07d2758e3bb388f9", "node_id": "C_kwDOAAsO6NoAKDdmOTNkNGFhMGRjNGFjMDcxYzYxN2UwZTA3ZDI3NThlM2JiMzg4Zjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-25T05:27:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-25T05:27:17Z"}, "message": "Auto merge of #98770 - klensy:no-string-dupes-ugly, r=cjgillot\n\nrmeta: avoid embedding `StabilityLevel::Unstable` reason multiple times into .rmeta\\.rlib files\n\nAvoids bloating size of some rmeta\\rlib files by not placing default string for `StabilityLevel::Unstable` reason multiple times, affects only stdlib\\rustc artifacts. For stdlib cuts about 3% (diff of total size for patched\\unpatched *.rmeta files of stage1-std) of file size, depending on crates.\n\nfixes #88180", "tree": {"sha": "2b340fb2aace0ff4b884e6c15e1a2f3fd31cc6e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b340fb2aace0ff4b884e6c15e1a2f3fd31cc6e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f93d4aa0dc4ac071c617e0e07d2758e3bb388f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f93d4aa0dc4ac071c617e0e07d2758e3bb388f9", "html_url": "https://github.com/rust-lang/rust/commit/7f93d4aa0dc4ac071c617e0e07d2758e3bb388f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f93d4aa0dc4ac071c617e0e07d2758e3bb388f9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "530c0a81d50c6e1c9b1bdee0970d27af02ca49be", "url": "https://api.github.com/repos/rust-lang/rust/commits/530c0a81d50c6e1c9b1bdee0970d27af02ca49be", "html_url": "https://github.com/rust-lang/rust/commit/530c0a81d50c6e1c9b1bdee0970d27af02ca49be"}, {"sha": "b38c94857df02a402ba46bc559d5bc8dc5256023", "url": "https://api.github.com/repos/rust-lang/rust/commits/b38c94857df02a402ba46bc559d5bc8dc5256023", "html_url": "https://github.com/rust-lang/rust/commit/b38c94857df02a402ba46bc559d5bc8dc5256023"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "10a9cfb626e63391ae7ae22a439f1d13d9f2a907", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7f93d4aa0dc4ac071c617e0e07d2758e3bb388f9/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f93d4aa0dc4ac071c617e0e07d2758e3bb388f9/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=7f93d4aa0dc4ac071c617e0e07d2758e3bb388f9", "patch": "@@ -138,7 +138,7 @@ pub enum StabilityLevel {\n     /// `#[unstable]`\n     Unstable {\n         /// Reason for the current stability level.\n-        reason: Option<Symbol>,\n+        reason: UnstableReason,\n         /// Relevant `rust-lang/rust` issue.\n         issue: Option<NonZeroU32>,\n         is_soft: bool,\n@@ -182,6 +182,32 @@ impl StabilityLevel {\n     }\n }\n \n+#[derive(Encodable, Decodable, PartialEq, Copy, Clone, Debug, Eq, Hash)]\n+#[derive(HashStable_Generic)]\n+pub enum UnstableReason {\n+    None,\n+    Default,\n+    Some(Symbol),\n+}\n+\n+impl UnstableReason {\n+    fn from_opt_reason(reason: Option<Symbol>) -> Self {\n+        // UnstableReason::Default constructed manually\n+        match reason {\n+            Some(r) => Self::Some(r),\n+            None => Self::None,\n+        }\n+    }\n+\n+    pub fn to_opt_reason(&self) -> Option<Symbol> {\n+        match self {\n+            Self::None => None,\n+            Self::Default => Some(sym::unstable_location_reason_default),\n+            Self::Some(r) => Some(*r),\n+        }\n+    }\n+}\n+\n /// Collects stability info from all stability attributes in `attrs`.\n /// Returns `None` if no stability attributes are found.\n pub fn find_stability(\n@@ -371,7 +397,12 @@ where\n                                 );\n                                 continue;\n                             }\n-                            let level = Unstable { reason, issue: issue_num, is_soft, implied_by };\n+                            let level = Unstable {\n+                                reason: UnstableReason::from_opt_reason(reason),\n+                                issue: issue_num,\n+                                is_soft,\n+                                implied_by,\n+                            };\n                             if sym::unstable == meta_name {\n                                 stab = Some((Stability { level, feature }, attr.span));\n                             } else {"}, {"sha": "414912dd0f7d897bdbaee48eda11d8b733be1519", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f93d4aa0dc4ac071c617e0e07d2758e3bb388f9/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f93d4aa0dc4ac071c617e0e07d2758e3bb388f9/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=7f93d4aa0dc4ac071c617e0e07d2758e3bb388f9", "patch": "@@ -475,7 +475,13 @@ impl<'tcx> TyCtxt<'tcx> {\n                 }\n \n                 let suggestion = suggestion_for_allocator_api(self, def_id, span, feature);\n-                EvalResult::Deny { feature, reason, issue, suggestion, is_soft }\n+                EvalResult::Deny {\n+                    feature,\n+                    reason: reason.to_opt_reason(),\n+                    issue,\n+                    suggestion,\n+                    is_soft,\n+                }\n             }\n             Some(_) => {\n                 // Stable APIs are always ok to call and deprecated APIs are"}, {"sha": "ca6a2ac3db34cde86ea97f27e3333a8c08276473", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f93d4aa0dc4ac071c617e0e07d2758e3bb388f9/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f93d4aa0dc4ac071c617e0e07d2758e3bb388f9/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=7f93d4aa0dc4ac071c617e0e07d2758e3bb388f9", "patch": "@@ -2,7 +2,7 @@\n //! propagating default levels lexically from parent to children ast nodes.\n \n use attr::StabilityLevel;\n-use rustc_attr::{self as attr, ConstStability, Stability, Unstable};\n+use rustc_attr::{self as attr, ConstStability, Stability, Unstable, UnstableReason};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n@@ -634,12 +634,9 @@ fn stability_index(tcx: TyCtxt<'_>, (): ()) -> Index {\n         // while maintaining the invariant that all sysroot crates are unstable\n         // by default and are unable to be used.\n         if tcx.sess.opts.unstable_opts.force_unstable_if_unmarked {\n-            let reason = \"this crate is being loaded from the sysroot, an \\\n-                          unstable location; did you mean to load this crate \\\n-                          from crates.io via `Cargo.toml` instead?\";\n             let stability = Stability {\n                 level: attr::StabilityLevel::Unstable {\n-                    reason: Some(Symbol::intern(reason)),\n+                    reason: UnstableReason::Default,\n                     issue: NonZeroU32::new(27812),\n                     is_soft: false,\n                     implied_by: None,"}, {"sha": "070fb9c721b401b1287fde73e37972e04e38ea97", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f93d4aa0dc4ac071c617e0e07d2758e3bb388f9/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f93d4aa0dc4ac071c617e0e07d2758e3bb388f9/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=7f93d4aa0dc4ac071c617e0e07d2758e3bb388f9", "patch": "@@ -812,7 +812,7 @@ impl<'a> Resolver<'a> {\n                     stability::report_unstable(\n                         self.session,\n                         feature,\n-                        reason,\n+                        reason.to_opt_reason(),\n                         issue,\n                         None,\n                         is_soft,"}, {"sha": "54d67c5254188c2714d8a52b132e38a52b0bb11e", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f93d4aa0dc4ac071c617e0e07d2758e3bb388f9/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f93d4aa0dc4ac071c617e0e07d2758e3bb388f9/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=7f93d4aa0dc4ac071c617e0e07d2758e3bb388f9", "patch": "@@ -1528,6 +1528,9 @@ symbols! {\n         unsized_locals,\n         unsized_tuple_coercion,\n         unstable,\n+        unstable_location_reason_default: \"this crate is being loaded from the sysroot, an \\\n+                          unstable location; did you mean to load this crate \\\n+                          from crates.io via `Cargo.toml` instead?\",\n         untagged_unions,\n         unused_imports,\n         unused_qualifications,"}]}