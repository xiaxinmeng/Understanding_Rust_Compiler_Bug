{"sha": "e5e92753cc3e12c3c468b6badaf340fe4443145c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZTkyNzUzY2MzZTEyYzNjNDY4YjZiYWRhZjM0MGZlNDQ0MzE0NWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-06T06:07:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-06T06:07:42Z"}, "message": "Auto merge of #41102 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 5 pull requests\n\n- Successful merges: #40908, #41011, #41026, #41037, #41050\n- Failed merges:", "tree": {"sha": "ad85ffcb0203d3ff2468ce31afb4ef0cd03759f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad85ffcb0203d3ff2468ce31afb4ef0cd03759f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5e92753cc3e12c3c468b6badaf340fe4443145c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e92753cc3e12c3c468b6badaf340fe4443145c", "html_url": "https://github.com/rust-lang/rust/commit/e5e92753cc3e12c3c468b6badaf340fe4443145c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5e92753cc3e12c3c468b6badaf340fe4443145c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a9b382168cbf405589fbba7215ace700c067879", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a9b382168cbf405589fbba7215ace700c067879", "html_url": "https://github.com/rust-lang/rust/commit/1a9b382168cbf405589fbba7215ace700c067879"}, {"sha": "89b364d687b7a3d16fb9553f7b5b0c034c406d91", "url": "https://api.github.com/repos/rust-lang/rust/commits/89b364d687b7a3d16fb9553f7b5b0c034c406d91", "html_url": "https://github.com/rust-lang/rust/commit/89b364d687b7a3d16fb9553f7b5b0c034c406d91"}], "stats": {"total": 458, "additions": 285, "deletions": 173}, "files": [{"sha": "526beb41aae5b6dc3a63e13173dd247a6c9058bd", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "patch": "@@ -600,16 +600,19 @@ def bootstrap():\n \n def main():\n     start_time = time()\n+    help_triggered = ('-h' in sys.argv) or ('--help' in sys.argv) or (len(sys.argv) == 1)\n     try:\n         bootstrap()\n-        print(\"Build completed successfully in %s\" % format_build_time(time() - start_time))\n+        if not help_triggered:\n+            print(\"Build completed successfully in %s\" % format_build_time(time() - start_time))\n     except (SystemExit, KeyboardInterrupt) as e:\n         if hasattr(e, 'code') and isinstance(e.code, int):\n             exit_code = e.code\n         else:\n             exit_code = 1\n             print(e)\n-        print(\"Build completed unsuccessfully in %s\" % format_build_time(time() - start_time))\n+        if not help_triggered:\n+            print(\"Build completed unsuccessfully in %s\" % format_build_time(time() - start_time))\n         sys.exit(exit_code)\n \n if __name__ == '__main__':"}, {"sha": "308a0ab3076dd5421f90d17efe36562364214b8d", "filename": "src/bootstrap/clean.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Fbootstrap%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Fbootstrap%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fclean.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "patch": "@@ -44,36 +44,38 @@ pub fn clean(build: &Build) {\n }\n \n fn rm_rf(path: &Path) {\n-    if !path.exists() {\n-        return\n-    }\n-    if path.is_file() {\n-        return do_op(path, \"remove file\", |p| fs::remove_file(p));\n-    }\n-\n-    for file in t!(fs::read_dir(path)) {\n-        let file = t!(file).path();\n+    match path.symlink_metadata() {\n+        Err(e) => {\n+            if e.kind() == ErrorKind::NotFound {\n+                return;\n+            }\n+            panic!(\"failed to get metadata for file {}: {}\", path.display(), e);\n+        },\n+        Ok(metadata) => {\n+            if metadata.file_type().is_file() || metadata.file_type().is_symlink() {\n+                do_op(path, \"remove file\", |p| fs::remove_file(p));\n+                return;\n+            }\n \n-        if file.is_dir() {\n-            rm_rf(&file);\n-        } else {\n-            // On windows we can't remove a readonly file, and git will\n-            // often clone files as readonly. As a result, we have some\n-            // special logic to remove readonly files on windows.\n-            do_op(&file, \"remove file\", |p| fs::remove_file(p));\n-        }\n-    }\n-    do_op(path, \"remove dir\", |p| fs::remove_dir(p));\n+            for file in t!(fs::read_dir(path)) {\n+                rm_rf(&t!(file).path());\n+            }\n+            do_op(path, \"remove dir\", |p| fs::remove_dir(p));\n+        },\n+    };\n }\n \n fn do_op<F>(path: &Path, desc: &str, mut f: F)\n     where F: FnMut(&Path) -> io::Result<()>\n {\n     match f(path) {\n         Ok(()) => {}\n+        // On windows we can't remove a readonly file, and git will often clone files as readonly.\n+        // As a result, we have some special logic to remove readonly files on windows.\n+        // This is also the reason that we can't use things like fs::remove_dir_all().\n         Err(ref e) if cfg!(windows) &&\n                       e.kind() == ErrorKind::PermissionDenied => {\n-            let mut p = t!(path.metadata()).permissions();\n+            let mut p = t!(path.symlink_metadata()).permissions();\n             p.set_readonly(false);\n             t!(fs::set_permissions(path, p));\n             f(path).unwrap_or_else(|e| {"}, {"sha": "a1466d68a135aa4950b13eb9771c182626c162a8", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 155, "deletions": 131, "changes": 286, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "patch": "@@ -18,7 +18,7 @@ use std::fs;\n use std::path::PathBuf;\n use std::process;\n \n-use getopts::{Matches, Options};\n+use getopts::Options;\n \n use Build;\n use config::Config;\n@@ -75,7 +75,22 @@ pub enum Subcommand {\n \n impl Flags {\n     pub fn parse(args: &[String]) -> Flags {\n+        let mut extra_help = String::new();\n+        let mut subcommand_help = format!(\"\\\n+Usage: x.py <subcommand> [options] [<paths>...]\n+\n+Subcommands:\n+    build       Compile either the compiler or libraries\n+    test        Build and run some test suites\n+    bench       Build and run some benchmarks\n+    doc         Build documentation\n+    clean       Clean out build directories\n+    dist        Build and/or install distribution artifacts\n+\n+To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n+\n         let mut opts = Options::new();\n+        // Options common to all subcommands\n         opts.optflagmulti(\"v\", \"verbose\", \"use verbose output (-vv for very verbose)\");\n         opts.optflag(\"i\", \"incremental\", \"use incremental compilation\");\n         opts.optopt(\"\", \"config\", \"TOML configuration file for build\", \"FILE\");\n@@ -89,21 +104,83 @@ impl Flags {\n         opts.optopt(\"j\", \"jobs\", \"number of jobs to run in parallel\", \"JOBS\");\n         opts.optflag(\"h\", \"help\", \"print this help message\");\n \n-        let usage = |n, opts: &Options| -> ! {\n-            let command = args.get(0).map(|s| &**s);\n-            let brief = format!(\"Usage: x.py {} [options] [<args>...]\",\n-                                command.unwrap_or(\"<command>\"));\n+        // fn usage()\n+        let usage = |exit_code: i32, opts: &Options, subcommand_help: &str, extra_help: &str| -> ! {\n+            println!(\"{}\", opts.usage(subcommand_help));\n+            if !extra_help.is_empty() {\n+                println!(\"{}\", extra_help);\n+            }\n+            process::exit(exit_code);\n+        };\n+\n+        // We can't use getopt to parse the options until we have completed specifying which\n+        // options are valid, but under the current implementation, some options are conditional on\n+        // the subcommand. Therefore we must manually identify the subcommand first, so that we can\n+        // complete the definition of the options.  Then we can use the getopt::Matches object from\n+        // there on out.\n+        let mut possible_subcommands = args.iter().collect::<Vec<_>>();\n+        possible_subcommands.retain(|&s|\n+                                           (s == \"build\")\n+                                        || (s == \"test\")\n+                                        || (s == \"bench\")\n+                                        || (s == \"doc\")\n+                                        || (s == \"clean\")\n+                                        || (s == \"dist\"));\n+        let subcommand = match possible_subcommands.first() {\n+            Some(s) => s,\n+            None => {\n+                // No subcommand -- show the general usage and subcommand help\n+                println!(\"{}\\n\", subcommand_help);\n+                process::exit(0);\n+            }\n+        };\n \n-            println!(\"{}\", opts.usage(&brief));\n-            match command {\n-                Some(\"build\") => {\n-                    println!(\"\\\n+        // Some subcommands get extra options\n+        match subcommand.as_str() {\n+            \"test\"  => { opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\"); },\n+            \"bench\" => { opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\"); },\n+            \"dist\"  => { opts.optflag(\"\", \"install\", \"run installer as well\"); },\n+            _ => { },\n+        };\n+\n+        // Done specifying what options are possible, so do the getopts parsing\n+        let matches = opts.parse(&args[..]).unwrap_or_else(|e| {\n+            // Invalid argument/option format\n+            println!(\"\\n{}\\n\", e);\n+            usage(1, &opts, &subcommand_help, &extra_help);\n+        });\n+        // Extra sanity check to make sure we didn't hit this crazy corner case:\n+        //\n+        //     ./x.py --frobulate clean build\n+        //            ^-- option  ^     ^- actual subcommand\n+        //                        \\_ arg to option could be mistaken as subcommand\n+        let mut pass_sanity_check = true;\n+        match matches.free.get(0) {\n+            Some(check_subcommand) => {\n+                if &check_subcommand != subcommand {\n+                    pass_sanity_check = false;\n+                }\n+            },\n+            None => {\n+                pass_sanity_check = false;\n+            }\n+        }\n+        if !pass_sanity_check {\n+            println!(\"{}\\n\", subcommand_help);\n+            println!(\"Sorry, I couldn't figure out which subcommand you were trying to specify.\\n\\\n+                      You may need to move some options to after the subcommand.\\n\");\n+            process::exit(1);\n+        }\n+        // Extra help text for some commands\n+        match subcommand.as_str() {\n+            \"build\" => {\n+                subcommand_help.push_str(\"\\n\n Arguments:\n-    This subcommand accepts a number of positional arguments of directories to\n-    the crates and/or artifacts to compile. For example:\n+    This subcommand accepts a number of paths to directories to the crates\n+    and/or artifacts to compile. For example:\n \n         ./x.py build src/libcore\n-        ./x.py build src/libproc_macro\n+        ./x.py build src/libcore src/libproc_macro\n         ./x.py build src/libstd --stage 1\n \n     If no arguments are passed then the complete artifacts for that stage are\n@@ -114,15 +191,13 @@ Arguments:\n \n     For a quick build with a usable compile, you can pass:\n \n-        ./x.py build --stage 1 src/libtest\n-\");\n-                }\n-\n-                Some(\"test\") => {\n-                    println!(\"\\\n+        ./x.py build --stage 1 src/libtest\");\n+            }\n+            \"test\" => {\n+                subcommand_help.push_str(\"\\n\n Arguments:\n-    This subcommand accepts a number of positional arguments of directories to\n-    tests that should be compiled and run. For example:\n+    This subcommand accepts a number of paths to directories to tests that\n+    should be compiled and run. For example:\n \n         ./x.py test src/test/run-pass\n         ./x.py test src/libstd --test-args hash_map\n@@ -132,171 +207,120 @@ Arguments:\n     compiled and tested.\n \n         ./x.py test\n-        ./x.py test --stage 1\n-\");\n-                }\n-\n-                Some(\"doc\") => {\n-                    println!(\"\\\n+        ./x.py test --stage 1\");\n+            }\n+            \"doc\" => {\n+                subcommand_help.push_str(\"\\n\n Arguments:\n-    This subcommand accepts a number of positional arguments of directories of\n-    documentation to build. For example:\n+    This subcommand accepts a number of paths to directories of documentation\n+    to build. For example:\n \n         ./x.py doc src/doc/book\n         ./x.py doc src/doc/nomicon\n-        ./x.py doc src/libstd\n+        ./x.py doc src/doc/book src/libstd\n \n     If no arguments are passed then everything is documented:\n \n         ./x.py doc\n-        ./x.py doc --stage 1\n-\");\n-                }\n-\n-                _ => {}\n+        ./x.py doc --stage 1\");\n             }\n-\n-            if let Some(command) = command {\n-                if command == \"build\" ||\n-                   command == \"dist\" ||\n-                   command == \"doc\" ||\n-                   command == \"test\" ||\n-                   command == \"bench\" ||\n-                   command == \"clean\"  {\n-                    println!(\"Available invocations:\");\n-                    if args.iter().any(|a| a == \"-v\") {\n-                        let flags = Flags::parse(&[\"build\".to_string()]);\n-                        let mut config = Config::default();\n-                        config.build = flags.build.clone();\n-                        let mut build = Build::new(flags, config);\n-                        metadata::build(&mut build);\n-                        step::build_rules(&build).print_help(command);\n-                    } else {\n-                        println!(\"    ... elided, run `./x.py {} -h -v` to see\",\n-                                 command);\n-                    }\n-\n-                    println!(\"\");\n-                }\n-            }\n-\n-println!(\"\\\n-Subcommands:\n-    build       Compile either the compiler or libraries\n-    test        Build and run some test suites\n-    bench       Build and run some benchmarks\n-    doc         Build documentation\n-    clean       Clean out build directories\n-    dist        Build and/or install distribution artifacts\n-\n-To learn more about a subcommand, run `./x.py <command> -h`\n-\");\n-\n-            process::exit(n);\n+            _ => { }\n         };\n-        if args.len() == 0 {\n-            println!(\"a command must be passed\");\n-            usage(1, &opts);\n-        }\n-        let parse = |opts: &Options| {\n-            let m = opts.parse(&args[1..]).unwrap_or_else(|e| {\n-                println!(\"failed to parse options: {}\", e);\n-                usage(1, opts);\n-            });\n-            if m.opt_present(\"h\") {\n-                usage(0, opts);\n+        // Get any optional paths which occur after the subcommand\n+        let cwd = t!(env::current_dir());\n+        let paths = matches.free[1..].iter().map(|p| cwd.join(p)).collect::<Vec<_>>();\n+\n+\n+        // All subcommands can have an optional \"Available paths\" section\n+        if matches.opt_present(\"verbose\") {\n+            let flags = Flags::parse(&[\"build\".to_string()]);\n+            let mut config = Config::default();\n+            config.build = flags.build.clone();\n+            let mut build = Build::new(flags, config);\n+            metadata::build(&mut build);\n+            let maybe_rules_help = step::build_rules(&build).get_help(subcommand);\n+            if maybe_rules_help.is_some() {\n+                extra_help.push_str(maybe_rules_help.unwrap().as_str());\n             }\n-            return m\n-        };\n+        } else {\n+            extra_help.push_str(format!(\"Run `./x.py {} -h -v` to see a list of available paths.\",\n+                     subcommand).as_str());\n+        }\n \n-        let cwd = t!(env::current_dir());\n-        let remaining_as_path = |m: &Matches| {\n-            m.free.iter().map(|p| cwd.join(p)).collect::<Vec<_>>()\n-        };\n+        // User passed in -h/--help?\n+        if matches.opt_present(\"help\") {\n+            usage(0, &opts, &subcommand_help, &extra_help);\n+        }\n \n-        let m: Matches;\n-        let cmd = match &args[0][..] {\n+        let cmd = match subcommand.as_str() {\n             \"build\" => {\n-                m = parse(&opts);\n-                Subcommand::Build { paths: remaining_as_path(&m) }\n-            }\n-            \"doc\" => {\n-                m = parse(&opts);\n-                Subcommand::Doc { paths: remaining_as_path(&m) }\n+                Subcommand::Build { paths: paths }\n             }\n             \"test\" => {\n-                opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\");\n-                m = parse(&opts);\n                 Subcommand::Test {\n-                    paths: remaining_as_path(&m),\n-                    test_args: m.opt_strs(\"test-args\"),\n+                    paths: paths,\n+                    test_args: matches.opt_strs(\"test-args\"),\n                 }\n             }\n             \"bench\" => {\n-                opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\");\n-                m = parse(&opts);\n                 Subcommand::Bench {\n-                    paths: remaining_as_path(&m),\n-                    test_args: m.opt_strs(\"test-args\"),\n+                    paths: paths,\n+                    test_args: matches.opt_strs(\"test-args\"),\n                 }\n             }\n+            \"doc\" => {\n+                Subcommand::Doc { paths: paths }\n+            }\n             \"clean\" => {\n-                m = parse(&opts);\n-                if m.free.len() > 0 {\n-                    println!(\"clean takes no arguments\");\n-                    usage(1, &opts);\n+                if paths.len() > 0 {\n+                    println!(\"\\nclean takes no arguments\\n\");\n+                    usage(1, &opts, &subcommand_help, &extra_help);\n                 }\n                 Subcommand::Clean\n             }\n             \"dist\" => {\n-                opts.optflag(\"\", \"install\", \"run installer as well\");\n-                m = parse(&opts);\n                 Subcommand::Dist {\n-                    paths: remaining_as_path(&m),\n-                    install: m.opt_present(\"install\"),\n+                    paths: paths,\n+                    install: matches.opt_present(\"install\"),\n                 }\n             }\n-            \"--help\" => usage(0, &opts),\n-            cmd => {\n-                println!(\"unknown command: {}\", cmd);\n-                usage(1, &opts);\n+            _ => {\n+                usage(1, &opts, &subcommand_help, &extra_help);\n             }\n         };\n \n \n-        let cfg_file = m.opt_str(\"config\").map(PathBuf::from).or_else(|| {\n+        let cfg_file = matches.opt_str(\"config\").map(PathBuf::from).or_else(|| {\n             if fs::metadata(\"config.toml\").is_ok() {\n                 Some(PathBuf::from(\"config.toml\"))\n             } else {\n                 None\n             }\n         });\n \n-        let mut stage = m.opt_str(\"stage\").map(|j| j.parse().unwrap());\n-\n-        let incremental = m.opt_present(\"i\");\n+        let mut stage = matches.opt_str(\"stage\").map(|j| j.parse().unwrap());\n \n-        if incremental {\n+        if matches.opt_present(\"incremental\") {\n             if stage.is_none() {\n                 stage = Some(1);\n             }\n         }\n \n         Flags {\n-            verbose: m.opt_count(\"v\"),\n+            verbose: matches.opt_count(\"verbose\"),\n             stage: stage,\n-            on_fail: m.opt_str(\"on-fail\"),\n-            keep_stage: m.opt_str(\"keep-stage\").map(|j| j.parse().unwrap()),\n-            build: m.opt_str(\"build\").unwrap_or_else(|| {\n+            on_fail: matches.opt_str(\"on-fail\"),\n+            keep_stage: matches.opt_str(\"keep-stage\").map(|j| j.parse().unwrap()),\n+            build: matches.opt_str(\"build\").unwrap_or_else(|| {\n                 env::var(\"BUILD\").unwrap()\n             }),\n-            host: split(m.opt_strs(\"host\")),\n-            target: split(m.opt_strs(\"target\")),\n+            host: split(matches.opt_strs(\"host\")),\n+            target: split(matches.opt_strs(\"target\")),\n             config: cfg_file,\n-            src: m.opt_str(\"src\").map(PathBuf::from),\n-            jobs: m.opt_str(\"jobs\").map(|j| j.parse().unwrap()),\n+            src: matches.opt_str(\"src\").map(PathBuf::from),\n+            jobs: matches.opt_str(\"jobs\").map(|j| j.parse().unwrap()),\n             cmd: cmd,\n-            incremental: incremental,\n+            incremental: matches.opt_present(\"incremental\"),\n         }\n     }\n }"}, {"sha": "5560b5b0333c862b3c7b64bb23c00e7fcfb5f6c5", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "patch": "@@ -978,26 +978,25 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n         }\n     }\n \n-    pub fn print_help(&self, command: &str) {\n+    pub fn get_help(&self, command: &str) -> Option<String> {\n         let kind = match command {\n             \"build\" => Kind::Build,\n             \"doc\" => Kind::Doc,\n             \"test\" => Kind::Test,\n             \"bench\" => Kind::Bench,\n             \"dist\" => Kind::Dist,\n-            _ => return,\n+            _ => return None,\n         };\n         let rules = self.rules.values().filter(|r| r.kind == kind);\n         let rules = rules.filter(|r| !r.path.contains(\"nowhere\"));\n         let mut rules = rules.collect::<Vec<_>>();\n         rules.sort_by_key(|r| r.path);\n \n-        println!(\"Available paths:\\n\");\n+        let mut help_string = String::from(\"Available paths:\\n\");\n         for rule in rules {\n-            print!(\"    ./x.py {} {}\", command, rule.path);\n-\n-            println!(\"\");\n+            help_string.push_str(format!(\"    ./x.py {} {}\\n\", command, rule.path).as_str());\n         }\n+        Some(help_string)\n     }\n \n     /// Construct the top-level build steps that we're going to be executing,"}, {"sha": "7e92404bc0d6f3dce905231c980c41af9d7ec228", "filename": "src/libcollections/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2FCargo.toml?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "patch": "@@ -13,8 +13,8 @@ core = { path = \"../libcore\" }\n std_unicode = { path = \"../libstd_unicode\" }\n \n [[test]]\n-name = \"collectionstest\"\n-path = \"../libcollectionstest/lib.rs\"\n+name = \"collectionstests\"\n+path = \"../libcollections/tests/lib.rs\"\n \n [[bench]]\n name = \"collectionsbenches\""}, {"sha": "d284937a9e676a0a56ce4824c3b8abb2dd62f8b1", "filename": "src/libcollections/tests/binary_heap.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fbinary_heap.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcollectionstest/binary_heap.rs"}, {"sha": "2c899d96940ece9e222adc3ff21600f7f164c708", "filename": "src/libcollections/tests/btree/map.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fbtree%2Fmap.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcollectionstest/btree/map.rs"}, {"sha": "ae8b18d0c9fd92203fef9cc2bfd826aad5883bcc", "filename": "src/libcollections/tests/btree/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fbtree%2Fmod.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcollectionstest/btree/mod.rs"}, {"sha": "6171b8ba624cd5581b505d3eb47cfc43d8e81c7c", "filename": "src/libcollections/tests/btree/set.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fbtree%2Fset.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcollectionstest/btree/set.rs"}, {"sha": "b29245121daadeb52d6c206130090d43e9406008", "filename": "src/libcollections/tests/cow_str.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Fcow_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Fcow_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fcow_str.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcollectionstest/cow_str.rs"}, {"sha": "70e21c65a1806549eb10764d5bbb67ddfb616a6e", "filename": "src/libcollections/tests/fmt.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Ffmt.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcollectionstest/fmt.rs"}, {"sha": "618eb386c0f4c88887b1baab32c2cc553ce64a69", "filename": "src/libcollections/tests/lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Flib.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcollectionstest/lib.rs"}, {"sha": "a59724a017b1241de3e9995727a719782b76ea7f", "filename": "src/libcollections/tests/linked_list.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Flinked_list.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcollectionstest/linked_list.rs"}, {"sha": "c3e5304fb2b3544b855e7441d7ab32d88e0b7b09", "filename": "src/libcollections/tests/slice.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fslice.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcollectionstest/slice.rs"}, {"sha": "c9b7104fec4f0072d2256f2b0de70153fd4648a9", "filename": "src/libcollections/tests/str.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fstr.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcollectionstest/str.rs"}, {"sha": "2f021b9935d6abc9b74daea6fdba81de54e9e765", "filename": "src/libcollections/tests/string.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fstring.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcollectionstest/string.rs"}, {"sha": "63df0eb73050971b86dad86fe7e4814f53d23d32", "filename": "src/libcollections/tests/vec.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fvec.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcollectionstest/vec.rs"}, {"sha": "f2935c05d4f7a90ac3112b0481fdac7057562652", "filename": "src/libcollections/tests/vec_deque.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcollections%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fvec_deque.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcollectionstest/vec_deque.rs"}, {"sha": "5af63aa970f2c7cb50a720298b73dbc875e5b4c9", "filename": "src/libcore/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2FCargo.toml?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "patch": "@@ -10,8 +10,8 @@ test = false\n bench = false\n \n [[test]]\n-name = \"coretest\"\n-path = \"../libcoretest/lib.rs\"\n+name = \"coretests\"\n+path = \"../libcore/tests/lib.rs\"\n \n [[bench]]\n name = \"corebenches\""}, {"sha": "b5553fb29475b9481251e62d0d9eea761f9599b3", "filename": "src/libcore/num/bignum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fbignum.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "patch": "@@ -19,7 +19,7 @@\n //! inputs, but we don't do so to avoid the code bloat. Each bignum is still\n //! tracked for the actual usages, so it normally doesn't matter.\n \n-// This module is only for dec2flt and flt2dec, and only public because of libcoretest.\n+// This module is only for dec2flt and flt2dec, and only public because of coretests.\n // It is not intended to ever be stabilized.\n #![doc(hidden)]\n #![unstable(feature = \"core_private_bignum\","}, {"sha": "6635d95155f4baa4537a0cce133ff8f10bb806a6", "filename": "src/libcore/num/diy_float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Fnum%2Fdiy_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Fnum%2Fdiy_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdiy_float.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "patch": "@@ -10,7 +10,7 @@\n \n //! Extended precision \"soft float\", for internal use only.\n \n-// This module is only for dec2flt and flt2dec, and only public because of libcoretest.\n+// This module is only for dec2flt and flt2dec, and only public because of coretests.\n // It is not intended to ever be stabilized.\n #![doc(hidden)]\n #![unstable(feature = \"core_private_diy_float\","}, {"sha": "5123e42df61ca8e013943c5d2be7f1f561d57299", "filename": "src/libcore/num/flt2dec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "patch": "@@ -118,7 +118,7 @@ provide a large enough buffer and `Part` array, and to assemble the final\n string from resulting `Part`s itself.\n \n All algorithms and formatting functions are accompanied by extensive tests\n-in `coretest::num::flt2dec` module. It also shows how to use individual\n+in `coretests::num::flt2dec` module. It also shows how to use individual\n functions.\n \n */"}, {"sha": "f665cfdee77aeaaaadc9513dda03b45fac286578", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "patch": "@@ -90,7 +90,7 @@ impl<T: fmt::UpperHex> fmt::UpperHex for Wrapping<T> {\n \n mod wrapping;\n \n-// All these modules are technically private and only exposed for libcoretest:\n+// All these modules are technically private and only exposed for coretests:\n pub mod flt2dec;\n pub mod dec2flt;\n pub mod bignum;"}, {"sha": "2d3e81aa131ed4ceb5fc7d2696af966b9d9c660b", "filename": "src/libcore/tests/any.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fany.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/any.rs"}, {"sha": "6af031dee5845b9875776ef0933cff27f97dc187", "filename": "src/libcore/tests/array.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Farray.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/array.rs"}, {"sha": "b6bb5fddf4a4bdc4fed02347bfc312cc53636f0e", "filename": "src/libcore/tests/atomic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fatomic.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/atomic.rs"}, {"sha": "8585f2f08711332a3e5af0fa53145df9e1b657ec", "filename": "src/libcore/tests/cell.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fcell.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/cell.rs"}, {"sha": "e4012ec91e2b3f1fdd8a0132d934e01dac18ee03", "filename": "src/libcore/tests/char.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fchar.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/char.rs"}, {"sha": "91d68ba33447aa99115bd3491a932a625f8315b7", "filename": "src/libcore/tests/clone.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fclone.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/clone.rs"}, {"sha": "e3c65ad8b33c019378ad6e53cbcbdb3295f0ec71", "filename": "src/libcore/tests/cmp.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fcmp.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/cmp.rs"}, {"sha": "e71e61bda5efdec258bf7a5d81f302d17b66ba38", "filename": "src/libcore/tests/fmt/builders.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/fmt/builders.rs"}, {"sha": "695001312e4d5aeac1a40c15f9b0b9397906a8bd", "filename": "src/libcore/tests/fmt/float.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Ffloat.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/fmt/float.rs"}, {"sha": "5d204c7d523d681a937b5f3d540c889cb7920948", "filename": "src/libcore/tests/fmt/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/fmt/mod.rs"}, {"sha": "4ddedd9100486ea8640a712a390310f89b7305a2", "filename": "src/libcore/tests/fmt/num.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/fmt/num.rs"}, {"sha": "53ac17c052f6af89a27831ba50f2f7d1686bb4ba", "filename": "src/libcore/tests/hash/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/hash/mod.rs"}, {"sha": "4a9657e03404af4f6d02cf79a05c92e8a05c8ebb", "filename": "src/libcore/tests/hash/sip.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fhash%2Fsip.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/hash/sip.rs"}, {"sha": "2b380abf63c58dddab364dcb64be682279d9df87", "filename": "src/libcore/tests/intrinsics.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fintrinsics.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/intrinsics.rs"}, {"sha": "08442f9bcbff522d498b826d3dda8d1faf1b011e", "filename": "src/libcore/tests/iter.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/iter.rs"}, {"sha": "d92c378160d2e0e4ba3eabcc5fcdc813675b07c4", "filename": "src/libcore/tests/lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/lib.rs"}, {"sha": "86e59c736ba4a133b8d3257a2c56661c1fa07e33", "filename": "src/libcore/tests/mem.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fmem.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/mem.rs"}, {"sha": "7a367ddeec8d4599ec8543a712306059061edd91", "filename": "src/libcore/tests/nonzero.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnonzero.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/nonzero.rs"}, {"sha": "58a9dd1b128ce8c96cd398a9c1f4f4628c49ea16", "filename": "src/libcore/tests/num/bignum.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fbignum.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/num/bignum.rs"}, {"sha": "5d546c643e7ee5248ee42b42cc481d24a0d0bd3a", "filename": "src/libcore/tests/num/dec2flt/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/num/dec2flt/mod.rs"}, {"sha": "09acf2bc517b086decd12413e4399c84e6cce8a9", "filename": "src/libcore/tests/num/dec2flt/parse.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fparse.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/num/dec2flt/parse.rs"}, {"sha": "1a3533317dae68c57aed2528469ed575e738e58d", "filename": "src/libcore/tests/num/dec2flt/rawfp.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Frawfp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Frawfp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Frawfp.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/num/dec2flt/rawfp.rs"}, {"sha": "0bca616ea9abcc99e5fc604ee4d91f2472b2985d", "filename": "src/libcore/tests/num/flt2dec/estimator.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Festimator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Festimator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Festimator.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/num/flt2dec/estimator.rs"}, {"sha": "0f4d19e7092571495405338fb31ef9f3a1f5fd9b", "filename": "src/libcore/tests/num/flt2dec/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/num/flt2dec/mod.rs"}, {"sha": "4edb0f3df60c44ea3d0b1aa7c76c379cb5d37de5", "filename": "src/libcore/tests/num/flt2dec/strategy/dragon.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/num/flt2dec/strategy/dragon.rs"}, {"sha": "79e66ee669e146d13e9addfaf635d1eee5670db4", "filename": "src/libcore/tests/num/flt2dec/strategy/grisu.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/num/flt2dec/strategy/grisu.rs"}, {"sha": "7435831ac6dba26fa851d9ae98f962e467a47437", "filename": "src/libcore/tests/num/i16.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fi16.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/num/i16.rs"}, {"sha": "3b3407e1ada520a373f5163bebc829742fbfa944", "filename": "src/libcore/tests/num/i32.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fi32.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/num/i32.rs"}, {"sha": "9e1aec256eed0ad4afe35b811a99385f465c002a", "filename": "src/libcore/tests/num/i64.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fi64.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/num/i64.rs"}, {"sha": "f72244239b2606fee16fecd4bfae67ff637cef47", "filename": "src/libcore/tests/num/i8.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fi8.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/num/i8.rs"}, {"sha": "8d791283ab87ebd22846667445f7414dc53a60b9", "filename": "src/libcore/tests/num/int_macros.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/num/int_macros.rs"}, {"sha": "51737c9c3b485e42b74b47e3671ee5eecc53a90d", "filename": "src/libcore/tests/num/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/num/mod.rs"}, {"sha": "8455207583cc182d162cdbccbaa53b8eb6029280", "filename": "src/libcore/tests/num/u16.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fu16.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/num/u16.rs"}, {"sha": "b44e60f6529791036b5e02483e9d0c0eb9ecf4ee", "filename": "src/libcore/tests/num/u32.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fu32.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/num/u32.rs"}, {"sha": "ffcd1015d58d63f10049f2a234869eed26375095", "filename": "src/libcore/tests/num/u64.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fu64.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/num/u64.rs"}, {"sha": "4ee14e22f2d576fbe0cf31b9857d8e07cfafe6c5", "filename": "src/libcore/tests/num/u8.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fu8.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/num/u8.rs"}, {"sha": "daa1cc3a7f4fb860b90335063f72bcbfefab31d8", "filename": "src/libcore/tests/num/uint_macros.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fuint_macros.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/num/uint_macros.rs"}, {"sha": "1c6c13b0d02e8b6e5417bbfbc900d4ca78f21f67", "filename": "src/libcore/tests/ops.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fops.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/ops.rs"}, {"sha": "51b0655f680f6186857c7e07cdedaa640326ab16", "filename": "src/libcore/tests/option.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Foption.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/option.rs"}, {"sha": "7f6f472bfbb78ea5588f7a770a61792f95bc6f1a", "filename": "src/libcore/tests/ptr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fptr.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/ptr.rs"}, {"sha": "4c5f19dee12935efbbeb6b09f12ecbabf5b6765e", "filename": "src/libcore/tests/result.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fresult.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/result.rs"}, {"sha": "ec38345030fa5897423ff55d2f4f882dcff4c1ee", "filename": "src/libcore/tests/slice.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/slice.rs"}, {"sha": "08daafccc5404e523ffa85bf953122d2c2de4cf4", "filename": "src/libcore/tests/str.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fstr.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// All `str` tests live in libcollectiontest::str\n+// All `str` tests live in collectionstests::str", "previous_filename": "src/libcoretest/str.rs"}, {"sha": "4fe5e0a740bf7007c37f08c1da63f4ffc11e5702", "filename": "src/libcore/tests/tuple.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibcore%2Ftests%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ftuple.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "previous_filename": "src/libcoretest/tuple.rs"}, {"sha": "966cb7ee8d8d83c6299955357d2a2306469c1328", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "patch": "@@ -222,8 +222,10 @@ impl<'a> base::Resolver for Resolver<'a> {\n             let name = unwrap_or!(attrs[i].name(), continue);\n \n             if name == \"derive\" {\n-                let result = attrs[i].parse_list(&self.session.parse_sess,\n-                                                 |parser| parser.parse_path(PathStyle::Mod));\n+                let result = attrs[i].parse_list(&self.session.parse_sess, |parser| {\n+                    parser.parse_path_allowing_meta(PathStyle::Mod)\n+                });\n+\n                 let mut traits = match result {\n                     Ok(traits) => traits,\n                     Err(mut e) => {"}, {"sha": "d69f31a45048d48721e669e0c9af3cfcd56bb18d", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "patch": "@@ -762,7 +762,6 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             let llretty = Type::struct_(ccx, &[Type::i8p(ccx), Type::i32(ccx)], false);\n             let slot = bcx.alloca(llretty, \"personalityslot\");\n             self.llpersonalityslot = Some(slot);\n-            Lifetime::Start.call(bcx, slot);\n             slot\n         }\n     }\n@@ -794,6 +793,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n         let llretval = bcx.landing_pad(llretty, llpersonality, 1, self.llfn);\n         bcx.set_cleanup(llretval);\n         let slot = self.get_personality_slot(&bcx);\n+        Lifetime::Start.call(&bcx, slot);\n         bcx.store(llretval, slot, None);\n         bcx.br(target_bb);\n         bcx.llbb()"}, {"sha": "e7c5d8278d9775065d1c800633ceaba2458e7e17", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "patch": "@@ -26,7 +26,8 @@ pub fn collect_derives(cx: &mut ExtCtxt, attrs: &mut Vec<ast::Attribute>) -> Vec\n             return true;\n         }\n \n-        match attr.parse_list(cx.parse_sess, |parser| parser.parse_path(PathStyle::Mod)) {\n+        match attr.parse_list(cx.parse_sess,\n+                              |parser| parser.parse_path_allowing_meta(PathStyle::Mod)) {\n             Ok(ref traits) if traits.is_empty() => {\n                 cx.span_warn(attr.span, \"empty trait list in `derive`\");\n                 false"}, {"sha": "0dd2c03acb654b8eee67693b3d561381b65afcd0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "patch": "@@ -1767,6 +1767,26 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n+    /// Like `parse_path`, but also supports parsing `Word` meta items into paths for back-compat.\n+    /// This is used when parsing derive macro paths in `#[derive]` attributes.\n+    pub fn parse_path_allowing_meta(&mut self, mode: PathStyle) -> PResult<'a, ast::Path> {\n+        let meta_ident = match self.token {\n+            token::Interpolated(ref nt) => match **nt {\n+                token::NtMeta(ref meta) => match meta.node {\n+                    ast::MetaItemKind::Word => Some(ast::Ident::with_empty_ctxt(meta.name)),\n+                    _ => None,\n+                },\n+                _ => None,\n+            },\n+            _ => None,\n+        };\n+        if let Some(ident) = meta_ident {\n+            self.bump();\n+            return Ok(ast::Path::from_ident(self.prev_span, ident));\n+        }\n+        self.parse_path(mode)\n+    }\n+\n     /// Examples:\n     /// - `a::b<T,U>::c<V,W>`\n     /// - `a::b<T,U>::c(V) -> W`"}, {"sha": "e0de64b26df471fe857689099f1e9d62d94a91df", "filename": "src/test/codegen/personality_lifetimes.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Ftest%2Fcodegen%2Fpersonality_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Ftest%2Fcodegen%2Fpersonality_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpersonality_lifetimes.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-msvc\n+\n+// compile-flags: -O -C no-prepopulate-passes\n+\n+#![crate_type=\"lib\"]\n+\n+struct S;\n+\n+impl Drop for S {\n+    fn drop(&mut self) {\n+    }\n+}\n+\n+fn might_unwind() {\n+}\n+\n+// CHECK-LABEL: @test\n+#[no_mangle]\n+pub fn test() {\n+    let _s = S;\n+    // Check that the personality slot alloca gets a lifetime start in each cleanup block, not just\n+    // in the first one.\n+    // CHECK-LABEL: cleanup:\n+    // CHECK: bitcast{{.*}}personalityslot\n+    // CHECK-NEXT: call void @llvm.lifetime.start\n+    // CHECK-LABEL: cleanup1:\n+    // CHECK: bitcast{{.*}}personalityslot\n+    // CHECK-NEXT: call void @llvm.lifetime.start\n+    might_unwind();\n+    might_unwind();\n+}"}, {"sha": "b35cfa12eab189d5b913c8344517ca846e51fd1e", "filename": "src/test/run-pass/issue-40962.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Ftest%2Frun-pass%2Fissue-40962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Ftest%2Frun-pass%2Fissue-40962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-40962.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! m {\n+    ($i:meta) => {\n+        #[derive($i)]\n+        struct S;\n+    }\n+}\n+\n+m!(Clone);\n+\n+fn main() {}"}, {"sha": "0dbf0d4316abd9c2cdc92ee7794747168f7b69c7", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e92753cc3e12c3c468b6badaf340fe4443145c/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=e5e92753cc3e12c3c468b6badaf340fe4443145c", "patch": "@@ -75,7 +75,7 @@ const EXCEPTION_PATHS: &'static [&'static str] = &[\n     \"src/libtest\", // Probably should defer to unstable std::sys APIs\n \n     // std testing crates, ok for now at least\n-    \"src/libcoretest\",\n+    \"src/libcore/tests\",\n \n     // non-std crates\n     \"src/test\","}]}