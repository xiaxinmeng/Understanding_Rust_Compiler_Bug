{"sha": "6f257bf26fb32cc72d4229b9bde6916562478165", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMjU3YmYyNmZiMzJjYzcyZDQyMjliOWJkZTY5MTY1NjI0NzgxNjU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-14T23:22:29Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:21:03Z"}, "message": "Correct variable renaming fallout", "tree": {"sha": "af831890c569aa6683f1636f6c9ae74574c6227b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af831890c569aa6683f1636f6c9ae74574c6227b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f257bf26fb32cc72d4229b9bde6916562478165", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f257bf26fb32cc72d4229b9bde6916562478165", "html_url": "https://github.com/rust-lang/rust/commit/6f257bf26fb32cc72d4229b9bde6916562478165", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f257bf26fb32cc72d4229b9bde6916562478165/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b8b14f6f50575a515e1f9472eff410c6e140e9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b8b14f6f50575a515e1f9472eff410c6e140e9c", "html_url": "https://github.com/rust-lang/rust/commit/0b8b14f6f50575a515e1f9472eff410c6e140e9c"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "ad1e5ad7992320f55075f5d7c5799011f424439e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f257bf26fb32cc72d4229b9bde6916562478165/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f257bf26fb32cc72d4229b9bde6916562478165/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6f257bf26fb32cc72d4229b9bde6916562478165", "patch": "@@ -5094,8 +5094,8 @@ pub fn check_bounds_are_used<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     for param in generics.params.iter() {\n         let key = match param {\n-            hir::GenericParamDef::Type(_) => ty::Kind::Type,\n-            hir::GenericParamDef::Lifetime(_) => ty::Kind::Lifetime,\n+            hir::GenericParam::Type(_) => ty::Kind::Type,\n+            hir::GenericParam::Lifetime(_) => ty::Kind::Lifetime,\n         };\n         *param_counts.get_mut(&key).unwrap() += 1;\n     }"}, {"sha": "1922a48d04a3769609c3d4aa89f0b8a892acce83", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f257bf26fb32cc72d4229b9bde6916562478165/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f257bf26fb32cc72d4229b9bde6916562478165/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=6f257bf26fb32cc72d4229b9bde6916562478165", "patch": "@@ -119,13 +119,13 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                               .zip(impl_hir_generics.params.iter()) {\n         match (ty_param, hir_param) {\n             // Disallow ANY unconstrained type parameters.\n-            (ty::GenericParamDef::Type(ty_ty), hir::GenericParamDef::Type(hir_ty)) => {\n+            (ty::GenericParamDef::Type(ty_ty), hir::GenericParam::Type(hir_ty)) => {\n                 let param_ty = ty::ParamTy::for_def(ty_ty);\n                 if !input_parameters.contains(&ctp::Parameter::from(param_ty)) {\n                     report_unused_parameter(tcx, hir_ty.span, \"type\", &param_ty.to_string());\n                 }\n             }\n-            (ty::GenericParamDef::Lifetime(ty_lt), hir::GenericParamDef::Lifetime(hir_lt)) => {\n+            (ty::GenericParamDef::Lifetime(ty_lt), hir::GenericParam::Lifetime(hir_lt)) => {\n                 let param = ctp::Parameter::from(ty_lt.to_early_bound_region_data());\n                 if lifetimes_in_associated_types.contains(&param) && // (*)\n                     !input_parameters.contains(&param) {"}, {"sha": "667d7f1e1605d1261bde12ae6664b5558040d066", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f257bf26fb32cc72d4229b9bde6916562478165/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f257bf26fb32cc72d4229b9bde6916562478165/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6f257bf26fb32cc72d4229b9bde6916562478165", "patch": "@@ -2687,7 +2687,7 @@ impl Clean<Type> for hir::Ty {\n                         let mut indices = FxHashMap();\n                         for param in generics.params.iter() {\n                             match param {\n-                                GenericParamDef::Type(ty_param) => {\n+                                hir::GenericParam::Type(ty_param) => {\n                                     let i = indices.entry(Kind::Type).or_insert(0);\n                                     let ty_param_def =\n                                         Def::TyParam(cx.tcx.hir.local_def_id(ty_param.id));\n@@ -2699,7 +2699,7 @@ impl Clean<Type> for hir::Ty {\n                                     }\n                                     *i += 1;\n                                 }\n-                                GenericParamDef::Lifetime(lt_param) => {\n+                                hir::GenericParam::Lifetime(lt_param) => {\n                                     let i = indices.entry(Kind::Type).or_insert(0);\n                                     if let Some(lt) = provided_params.lifetimes.get(*i).cloned() {\n                                         if !lt.is_elided() {"}]}