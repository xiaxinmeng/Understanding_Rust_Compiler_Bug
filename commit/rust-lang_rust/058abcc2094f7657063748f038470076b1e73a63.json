{"sha": "058abcc2094f7657063748f038470076b1e73a63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1OGFiY2MyMDk0Zjc2NTcwNjM3NDhmMDM4NDcwMDc2YjFlNzNhNjM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-15T21:04:04Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-18T17:26:04Z"}, "message": "Place parenthetical notation under the `unboxed_closure` feature-gate.\nConsolidate the `unboxed_closure_sugar` and `unboxed_closure` feature gates.", "tree": {"sha": "744fd3bfa7d6cb02ef95eacb4558f6b14d91315e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/744fd3bfa7d6cb02ef95eacb4558f6b14d91315e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/058abcc2094f7657063748f038470076b1e73a63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/058abcc2094f7657063748f038470076b1e73a63", "html_url": "https://github.com/rust-lang/rust/commit/058abcc2094f7657063748f038470076b1e73a63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/058abcc2094f7657063748f038470076b1e73a63/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "html_url": "https://github.com/rust-lang/rust/commit/618bd5d1c550cbdaac369b01716cc009b9e4d1e7"}], "stats": {"total": 60, "additions": 39, "deletions": 21}, "files": [{"sha": "dcf3f9826c22f05d7e879e6613e964c7890a1d99", "filename": "src/doc/reference.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -2560,10 +2560,6 @@ The currently implemented features of the reference compiler are:\n * `trace_macros` - Allows use of the `trace_macros` macro, which is a nasty\n                    hack that will certainly be removed.\n \n-* `unboxed_closure_sugar` - Allows using `|Foo| -> Bar` as a trait bound\n-                            meaning one of the `Fn` traits. Still\n-                            experimental.\n-\n * `unboxed_closures` - A work in progress feature with many known bugs.\n \n * `unsafe_destructor` - Allows use of the `#[unsafe_destructor]` attribute,"}, {"sha": "a36a0fbc82621ec414af88433e8e38f4fd536b49", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -59,7 +59,6 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"linkage\", Active),\n     (\"struct_inherit\", Removed),\n     (\"overloaded_calls\", Active),\n-    (\"unboxed_closure_sugar\", Active),\n \n     (\"quad_precision_float\", Removed),\n \n@@ -381,7 +380,7 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n                 fn_decl: &'v ast::FnDecl,\n                 block: &'v ast::Block,\n                 span: Span,\n-                _: NodeId) {\n+                _node_id: NodeId) {\n         match fn_kind {\n             visit::FkItemFn(_, _, _, abi) if abi == RustIntrinsic => {\n                 self.gate_feature(\"intrinsics\",\n@@ -392,6 +391,19 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n         }\n         visit::walk_fn(self, fn_kind, fn_decl, block, span);\n     }\n+\n+    fn visit_path_parameters(&mut self, path_span: Span, parameters: &'v ast::PathParameters) {\n+        match *parameters {\n+            ast::ParenthesizedParameters(..) => {\n+                self.gate_feature(\"unboxed_closures\",\n+                                  path_span,\n+                                  \"parenthetical parameter notation is subject to change\");\n+            }\n+            ast::AngleBracketedParameters(..) => { }\n+        }\n+\n+        visit::walk_path_parameters(self, path_span, parameters)\n+    }\n }\n \n pub fn check_crate(span_handler: &SpanHandler, krate: &ast::Crate) -> (Features, Vec<Span>) {"}, {"sha": "cca3dcb8b34dbd328bc55c36024785cdf4f77839", "filename": "src/test/compile-fail/borrowck-unboxed-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Fborrowck-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Fborrowck-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-unboxed-closures.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(overloaded_calls)]\n+#![feature(overloaded_calls, unboxed_closures)]\n \n fn a<F:Fn(int, int) -> int>(mut f: F) {\n     let g = &mut f;"}, {"sha": "7ec3fef5c878eb05a060356e60fa5b169b03392c", "filename": "src/test/compile-fail/issue-16939.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Fissue-16939.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Fissue-16939.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16939.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(overloaded_calls)]\n+#![feature(overloaded_calls, unboxed_closures)]\n \n // Make sure we don't ICE when making an overloaded call with the\n // wrong arity."}, {"sha": "75e9e55138e06a45a5bffa1068188d797b01e447", "filename": "src/test/compile-fail/regionck-unboxed-closure-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Fregionck-unboxed-closure-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Fregionck-unboxed-closure-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregionck-unboxed-closure-lifetimes.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closure_sugar, unboxed_closures, overloaded_calls)]\n+#![feature(unboxed_closures, overloaded_calls)]\n \n use std::ops::FnMut;\n "}, {"sha": "d015f8195c5351fff659ac1e3a2c6aca06fcbd6b", "filename": "src/test/compile-fail/unboxed-closure-sugar-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -11,7 +11,7 @@\n // Test interaction between unboxed closure sugar and default type\n // parameters (should be exactly as if angle brackets were used).\n \n-#![feature(default_type_params)]\n+#![feature(default_type_params, unboxed_closures)]\n #![allow(dead_code)]\n \n struct Foo<T,U,V=T> {"}, {"sha": "f858793b9ecc3a994424e2bd1a72e613fe0da52d", "filename": "src/test/compile-fail/unboxed-closure-sugar-equiv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -13,6 +13,7 @@\n // angle brackets. This test covers only simple types and in\n // particular doesn't test bound regions.\n \n+#![feature(unboxed_closures)]\n #![allow(dead_code)]\n \n struct Foo<T,U> {"}, {"sha": "23e2d2f4365afdbe53039e2000c2bed0677b5f0f", "filename": "src/test/compile-fail/unboxed-closure-sugar-nonexistent-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-nonexistent-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-nonexistent-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-nonexistent-trait.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(unboxed_closures)]\n+\n fn f<F:Nonexist(int) -> int>(x: F) {} //~ ERROR nonexistent trait `Nonexist`\n \n type Typedef = int;"}, {"sha": "9cef2d951bfeaa80d3c6b0f5c3d32c1c92e9f518", "filename": "src/test/compile-fail/unboxed-closure-sugar-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-region.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -12,7 +12,7 @@\n // parameters (should be exactly as if angle brackets were used\n // and regions omitted).\n \n-#![feature(default_type_params)]\n+#![feature(default_type_params, unboxed_closures)]\n #![allow(dead_code)]\n \n use std::kinds::marker;"}, {"sha": "5e3ebc70b864216a1e41131d934fb3e2d808d96b", "filename": "src/test/compile-fail/unboxed-closure-sugar-wrong-number-number-type-parameters-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n struct One<A>;\n+#![feature(unboxed_closures)]\n \n fn foo(_: One()) //~ ERROR wrong number of type arguments\n {}"}, {"sha": "c34f55ed4f9e440aaae9742b078a32bf797166aa", "filename": "src/test/compile-fail/unboxed-closure-sugar-wrong-number-number-type-parameters-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n struct Three<A,B,C>;\n+#![feature(unboxed_closures)]\n \n fn foo(_: Three()) //~ ERROR wrong number of type arguments\n {}"}, {"sha": "f7ff53310b06c50643b8a87c50ace62d7ef28816", "filename": "src/test/compile-fail/unboxed-closure-sugar-wrong-number-number-type-parameters.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-number-number-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-number-number-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-number-number-type-parameters.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n struct Zero;\n+#![feature(unboxed_closures)]\n \n fn foo(_: Zero()) //~ ERROR wrong number of type arguments\n {}"}, {"sha": "ba1e931ac64344cdadc84e5c7af9ed97fda9466a", "filename": "src/test/compile-fail/unboxed-closure-sugar-wrong-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-trait.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(unboxed_closures)]\n+\n trait Trait {}\n \n fn f<F:Trait(int) -> int>(x: F) {}"}, {"sha": "9fbb8a18ae93a4b55227bb292a33a3d4c5b918f3", "filename": "src/test/compile-fail/unboxed-closures-fnmut-as-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Funboxed-closures-fnmut-as-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Fcompile-fail%2Funboxed-closures-fnmut-as-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-fnmut-as-fn.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -11,7 +11,7 @@\n // Checks that the Fn trait hierarchy rules do not permit\n // Fn to be used where FnMut is implemented.\n \n-#![feature(unboxed_closure_sugar)]\n+#![feature(unboxed_closures)]\n #![feature(overloaded_calls)]\n \n use std::ops::{Fn,FnMut,FnOnce};"}, {"sha": "6716c3468d0f84b67635c4fe94609021ffa2eb38", "filename": "src/test/run-pass/closure-syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Frun-pass%2Fclosure-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Frun-pass%2Fclosure-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-syntax.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(dead_code)]\n-#![feature(unboxed_closures, unboxed_closure_sugar)]\n+#![feature(unboxed_closures)]\n \n // compile-flags:-g\n "}, {"sha": "02d3bc120da8c84a7ca5184678c34fa702dc3034", "filename": "src/test/run-pass/hrtb-parse.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Frun-pass%2Fhrtb-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Frun-pass%2Fhrtb-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-parse.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -11,6 +11,7 @@\n // Test that we can parse all the various places that a `for` keyword\n // can appear representing universal quantification.\n \n+#![feature(unboxed_closures)]\n #![allow(unused_variables)]\n #![allow(dead_code)]\n "}, {"sha": "6bade86fd3e42ecad11f83ae4c3c689dc7f26f8c", "filename": "src/test/run-pass/issue-18661.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Frun-pass%2Fissue-18661.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Frun-pass%2Fissue-18661.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18661.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -11,7 +11,7 @@\n // Test that param substitutions from the correct environment are\n // used when translating unboxed closure calls.\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, unboxed_closures)]\n \n pub fn inside<F: Fn()>(c: F) {\n     c.call(());"}, {"sha": "e8eeab3e4f34d2b2985745d3ecdceb83b310621a", "filename": "src/test/run-pass/unboxed-closures-all-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, overloaded_calls, unboxed_closures)]\n+#![feature(lang_items, overloaded_calls, unboxed_closures, unboxed_closures)]\n \n fn a<F:Fn(int, int) -> int>(f: F) -> int {\n     f(1, 2)"}, {"sha": "516787ae570cb259fbb03ac10f136e1fd367f14d", "filename": "src/test/run-pass/unboxed-closures-extern-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Frun-pass%2Funboxed-closures-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Frun-pass%2Funboxed-closures-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-extern-fn.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -10,7 +10,7 @@\n \n // Checks that extern fn points implement the full range of Fn traits.\n \n-#![feature(unboxed_closure_sugar)]\n+#![feature(unboxed_closures)]\n #![feature(overloaded_calls)]\n \n use std::ops::{Fn,FnMut,FnOnce};"}, {"sha": "a62712b3a4ec0b24e39fad7d041b6cc7f272a4f9", "filename": "src/test/run-pass/unboxed-closures-fn-as-fnmut-and-fnonce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -11,7 +11,7 @@\n // Checks that the Fn trait hierarchy rules permit\n // any Fn trait to be used where Fn is implemented.\n \n-#![feature(unboxed_closure_sugar)]\n+#![feature(unboxed_closures)]\n #![feature(overloaded_calls)]\n \n use std::ops::{Fn,FnMut,FnOnce};"}, {"sha": "8e639d23aeb367e3fdff38a62897190629c2cfaf", "filename": "src/test/run-pass/unboxed-closures-fnmut-as-fnonce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -11,7 +11,7 @@\n // Checks that the Fn trait hierarchy rules permit\n // FnMut or FnOnce to be used where FnMut is implemented.\n \n-#![feature(unboxed_closure_sugar)]\n+#![feature(unboxed_closures)]\n #![feature(overloaded_calls)]\n \n use std::ops::{FnMut,FnOnce};"}, {"sha": "3a750dadb911c4ca2e30e7746798131b3e9f26b4", "filename": "src/test/run-pass/unboxed-closures-manual-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -9,7 +9,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closure_sugar)]\n+#![feature(unboxed_closures)]\n \n use std::ops::FnMut;\n "}, {"sha": "6f672f2f2828c98fe8bf0182438b64405d11e7ff", "filename": "src/test/run-pass/unboxed-closures-prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -10,7 +10,7 @@\n \n // Tests that the reexports of `FnOnce` et al from the prelude work.\n \n-#![feature(unboxed_closures, unboxed_closure_sugar)]\n+#![feature(unboxed_closures)]\n \n fn main() {\n     let task: Box<FnOnce(int) -> int> = box |: x| x;"}, {"sha": "d65de438514f5cdc1f0e8e1d0eaf437fc256084a", "filename": "src/test/run-pass/unboxed-closures-sugar-object.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Frun-pass%2Funboxed-closures-sugar-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Frun-pass%2Funboxed-closures-sugar-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-sugar-object.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -11,6 +11,7 @@\n // Test unboxed closure sugar used in object types.\n \n #![allow(dead_code)]\n+#![feature(unboxed_closures)]\n \n struct Foo<T,U> {\n     t: T, u: U"}, {"sha": "c41aeaa673f80cb87a230e63d85e8cfd3eadc376", "filename": "src/test/run-pass/unboxed-closures-unboxing-shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Frun-pass%2Funboxed-closures-unboxing-shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058abcc2094f7657063748f038470076b1e73a63/src%2Ftest%2Frun-pass%2Funboxed-closures-unboxing-shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-unboxing-shim.rs?ref=058abcc2094f7657063748f038470076b1e73a63", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures, unboxed_closure_sugar)]\n+#![feature(unboxed_closures)]\n \n use std::ops::FnOnce;\n "}]}