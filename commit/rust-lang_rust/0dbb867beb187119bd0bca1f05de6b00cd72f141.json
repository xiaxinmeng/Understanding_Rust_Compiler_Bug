{"sha": "0dbb867beb187119bd0bca1f05de6b00cd72f141", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYmI4NjdiZWIxODcxMTliZDBiY2ExZjA1ZGU2YjAwY2Q3MmYxNDE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-14T07:24:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-14T07:24:14Z"}, "message": "Rollup merge of #58371 - davidtwco:issue-58299, r=arielb1\n\nCheck user type annotations for range patterns.\n\nFixes #58299.\n\nThis PR builds on the fix from #58161 (which fixed miscompilation\ncaused by the introduction of `AscribeUserType` patterns for associated\nconstants) to start checking these patterns are well-formed for ranges\n(previous fix just ignored them so that miscompilation wouldn't occur).\n\nr? @arielb1", "tree": {"sha": "2aab1d3beb0330bdc8908d729609fb28ce7168ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2aab1d3beb0330bdc8908d729609fb28ce7168ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dbb867beb187119bd0bca1f05de6b00cd72f141", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcZReeCRBK7hj4Ov3rIwAAdHIIABI6+47ejQkd0jvgrig+wNSo\nziOhD6HC2desLA7L4S6VX0/5jjwat5xvoxMq2GXnNrlP2ofJScsQBoCWIspl5Uv8\nS/RaLqAdD6sathbsv7hAlNV57k18SBGe6Gq+y4XOtCzzdJ79g9SxWvZ3pAQH3sQK\nx1lREkDhou/2Zd7U3EV/9Lga3JFNTyWpG2hylZZP/OFeI++VVppC0t6rt2EXBHQS\nWTCr9mlAYCSLEF3oM55F0WqBGWwrd6AwPoV5LtJr/it2ZB+A+DDgRX4rnIvbM/yf\nMoxQcGXy78IJP1TVAAyI607Kg3s6Ucgvl5FMHi3Zs6FaEMgqeUfIoPH4s8mfwLI=\n=7aKg\n-----END PGP SIGNATURE-----\n", "payload": "tree 2aab1d3beb0330bdc8908d729609fb28ce7168ab\nparent 0431857770beb1f084865a8056a5117bb2f132c7\nparent ee82d09b6c8516b460432ebe5dd718c3353c3084\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1550129054 +0100\ncommitter GitHub <noreply@github.com> 1550129054 +0100\n\nRollup merge of #58371 - davidtwco:issue-58299, r=arielb1\n\nCheck user type annotations for range patterns.\n\nFixes #58299.\n\nThis PR builds on the fix from #58161 (which fixed miscompilation\ncaused by the introduction of `AscribeUserType` patterns for associated\nconstants) to start checking these patterns are well-formed for ranges\n(previous fix just ignored them so that miscompilation wouldn't occur).\n\nr? @arielb1\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dbb867beb187119bd0bca1f05de6b00cd72f141", "html_url": "https://github.com/rust-lang/rust/commit/0dbb867beb187119bd0bca1f05de6b00cd72f141", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dbb867beb187119bd0bca1f05de6b00cd72f141/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0431857770beb1f084865a8056a5117bb2f132c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0431857770beb1f084865a8056a5117bb2f132c7", "html_url": "https://github.com/rust-lang/rust/commit/0431857770beb1f084865a8056a5117bb2f132c7"}, {"sha": "ee82d09b6c8516b460432ebe5dd718c3353c3084", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee82d09b6c8516b460432ebe5dd718c3353c3084", "html_url": "https://github.com/rust-lang/rust/commit/ee82d09b6c8516b460432ebe5dd718c3353c3084"}], "stats": {"total": 261, "additions": 176, "deletions": 85}, "files": [{"sha": "28d2a397f3ed61bc9b15811e7b5f34210612d97a", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0dbb867beb187119bd0bca1f05de6b00cd72f141/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dbb867beb187119bd0bca1f05de6b00cd72f141/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=0dbb867beb187119bd0bca1f05de6b00cd72f141", "patch": "@@ -7,7 +7,7 @@ use crate::build::scope::{CachedBlock, DropKind};\n use crate::build::ForGuard::{self, OutsideGuard, RefWithinGuard, ValWithinGuard};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::build::{GuardFrame, GuardFrameLocal, LocalsForNode};\n-use crate::hair::*;\n+use crate::hair::{self, *};\n use rustc::mir::*;\n use rustc::ty::{self, CanonicalUserTypeAnnotation, Ty};\n use rustc::ty::layout::VariantIdx;\n@@ -283,9 +283,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     },\n                     ..\n                 },\n-                user_ty: pat_ascription_ty,\n-                variance: _,\n-                user_ty_span,\n+                ascription: hair::pattern::Ascription {\n+                    user_ty: pat_ascription_ty,\n+                    variance: _,\n+                    user_ty_span,\n+                },\n             } => {\n                 let place =\n                     self.storage_live_binding(block, var, irrefutable_pat.span, OutsideGuard);\n@@ -560,9 +562,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n             PatternKind::AscribeUserType {\n                 ref subpattern,\n-                ref user_ty,\n-                user_ty_span,\n-                variance: _,\n+                ascription: hair::pattern::Ascription {\n+                    ref user_ty,\n+                    user_ty_span,\n+                    variance: _,\n+                },\n             } => {\n                 // This corresponds to something like\n                 //"}, {"sha": "b8e38e40b63474f479024aa3cc7e650a85c117c7", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0dbb867beb187119bd0bca1f05de6b00cd72f141/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dbb867beb187119bd0bca1f05de6b00cd72f141/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=0dbb867beb187119bd0bca1f05de6b00cd72f141", "patch": "@@ -14,7 +14,7 @@\n \n use crate::build::Builder;\n use crate::build::matches::{Ascription, Binding, MatchPair, Candidate};\n-use crate::hair::*;\n+use crate::hair::{self, *};\n use rustc::ty;\n use rustc::ty::layout::{Integer, IntegerExt, Size};\n use syntax::attr::{SignedInt, UnsignedInt};\n@@ -58,9 +58,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         match *match_pair.pattern.kind {\n             PatternKind::AscribeUserType {\n                 ref subpattern,\n-                variance,\n-                ref user_ty,\n-                user_ty_span\n+                ascription: hair::pattern::Ascription {\n+                    variance,\n+                    ref user_ty,\n+                    user_ty_span,\n+                },\n             } => {\n                 // Apply the type ascription to the value at `match_pair.place`, which is the\n                 // value being matched, taking the variance field into account."}, {"sha": "4a64ddb73fc2ee8fe81a5f23264c890c38ba1d5b", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0dbb867beb187119bd0bca1f05de6b00cd72f141/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dbb867beb187119bd0bca1f05de6b00cd72f141/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=0dbb867beb187119bd0bca1f05de6b00cd72f141", "patch": "@@ -1,4 +1,4 @@\n-use crate::hair::*;\n+use crate::hair::{self, *};\n use crate::hair::cx::Cx;\n use crate::hair::cx::to_ref::ToRef;\n use rustc::middle::region;\n@@ -83,10 +83,12 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                             ty: pattern.ty,\n                             span: pattern.span,\n                             kind: Box::new(PatternKind::AscribeUserType {\n-                                user_ty: PatternTypeProjection::from_user_type(user_ty),\n-                                user_ty_span: ty.span,\n+                                ascription: hair::pattern::Ascription {\n+                                    user_ty: PatternTypeProjection::from_user_type(user_ty),\n+                                    user_ty_span: ty.span,\n+                                    variance: ty::Variance::Covariant,\n+                                },\n                                 subpattern: pattern,\n-                                variance: ty::Variance::Covariant,\n                             })\n                         };\n                     }"}, {"sha": "1c7e1aa4d71e0a5bdca22031e3bd56ee9ff16055", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0dbb867beb187119bd0bca1f05de6b00cd72f141/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dbb867beb187119bd0bca1f05de6b00cd72f141/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=0dbb867beb187119bd0bca1f05de6b00cd72f141", "patch": "@@ -871,18 +871,24 @@ impl<'tcx> IntRange<'tcx> {\n     }\n \n     fn from_pat(tcx: TyCtxt<'_, 'tcx, 'tcx>,\n-                pat: &Pattern<'tcx>)\n+                mut pat: &Pattern<'tcx>)\n                 -> Option<IntRange<'tcx>> {\n-        Self::from_ctor(tcx, &match pat.kind {\n-            box PatternKind::Constant { value } => ConstantValue(value),\n-            box PatternKind::Range(PatternRange { lo, hi, ty, end }) => ConstantRange(\n-                lo.to_bits(tcx, ty::ParamEnv::empty().and(ty)).unwrap(),\n-                hi.to_bits(tcx, ty::ParamEnv::empty().and(ty)).unwrap(),\n-                ty,\n-                end,\n-            ),\n-            _ => return None,\n-        })\n+        let range = loop {\n+            match pat.kind {\n+                box PatternKind::Constant { value } => break ConstantValue(value),\n+                box PatternKind::Range(PatternRange { lo, hi, ty, end }) => break ConstantRange(\n+                    lo.to_bits(tcx, ty::ParamEnv::empty().and(ty)).unwrap(),\n+                    hi.to_bits(tcx, ty::ParamEnv::empty().and(ty)).unwrap(),\n+                    ty,\n+                    end,\n+                ),\n+                box PatternKind::AscribeUserType { ref subpattern, .. } => {\n+                    pat = subpattern;\n+                },\n+                _ => return None,\n+            }\n+        };\n+        Self::from_ctor(tcx, &range)\n     }\n \n     // The return value of `signed_bias` should be XORed with an endpoint to encode/decode it."}, {"sha": "2012086ea664937584234cc38ad07eec82418467", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 86, "deletions": 59, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/0dbb867beb187119bd0bca1f05de6b00cd72f141/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dbb867beb187119bd0bca1f05de6b00cd72f141/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=0dbb867beb187119bd0bca1f05de6b00cd72f141", "patch": "@@ -58,7 +58,7 @@ pub struct Pattern<'tcx> {\n }\n \n \n-#[derive(Clone, Debug)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n pub struct PatternTypeProjection<'tcx> {\n     pub user_ty: CanonicalUserType<'tcx>,\n }\n@@ -87,33 +87,38 @@ impl<'tcx> PatternTypeProjection<'tcx> {\n     }\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq)]\n+pub struct Ascription<'tcx> {\n+    pub user_ty: PatternTypeProjection<'tcx>,\n+    /// Variance to use when relating the type `user_ty` to the **type of the value being\n+    /// matched**. Typically, this is `Variance::Covariant`, since the value being matched must\n+    /// have a type that is some subtype of the ascribed type.\n+    ///\n+    /// Note that this variance does not apply for any bindings within subpatterns. The type\n+    /// assigned to those bindings must be exactly equal to the `user_ty` given here.\n+    ///\n+    /// The only place where this field is not `Covariant` is when matching constants, where\n+    /// we currently use `Contravariant` -- this is because the constant type just needs to\n+    /// be \"comparable\" to the type of the input value. So, for example:\n+    ///\n+    /// ```text\n+    /// match x { \"foo\" => .. }\n+    /// ```\n+    ///\n+    /// requires that `&'static str <: T_x`, where `T_x` is the type of `x`. Really, we should\n+    /// probably be checking for a `PartialEq` impl instead, but this preserves the behavior\n+    /// of the old type-check for now. See #57280 for details.\n+    pub variance: ty::Variance,\n+    pub user_ty_span: Span,\n+}\n+\n #[derive(Clone, Debug)]\n pub enum PatternKind<'tcx> {\n     Wild,\n \n     AscribeUserType {\n-        user_ty: PatternTypeProjection<'tcx>,\n+        ascription: Ascription<'tcx>,\n         subpattern: Pattern<'tcx>,\n-        /// Variance to use when relating the type `user_ty` to the **type of the value being\n-        /// matched**. Typically, this is `Variance::Covariant`, since the value being matched must\n-        /// have a type that is some subtype of the ascribed type.\n-        ///\n-        /// Note that this variance does not apply for any bindings within subpatterns. The type\n-        /// assigned to those bindings must be exactly equal to the `user_ty` given here.\n-        ///\n-        /// The only place where this field is not `Covariant` is when matching constants, where\n-        /// we currently use `Contravariant` -- this is because the constant type just needs to\n-        /// be \"comparable\" to the type of the input value. So, for example:\n-        ///\n-        /// ```text\n-        /// match x { \"foo\" => .. }\n-        /// ```\n-        ///\n-        /// requires that `&'static str <: T_x`, where `T_x` is the type of `x`. Really, we should\n-        /// probably be checking for a `PartialEq` impl instead, but this preserves the behavior\n-        /// of the old type-check for now. See #57280 for details.\n-        variance: ty::Variance,\n-        user_ty_span: Span,\n     },\n \n     /// `x`, `ref x`, `x @ P`, etc.\n@@ -169,18 +174,7 @@ pub enum PatternKind<'tcx> {\n     },\n }\n \n-impl<'tcx> PatternKind<'tcx> {\n-    /// If this is a `PatternKind::AscribeUserType` then return the subpattern kind, otherwise\n-    /// return this pattern kind.\n-    fn with_user_type_ascription_subpattern(self) -> Self {\n-        match self {\n-            PatternKind::AscribeUserType { subpattern: Pattern { box kind, ..  }, ..  } => kind,\n-            kind => kind,\n-        }\n-    }\n-}\n-\n-#[derive(Clone, Copy, Debug, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n pub struct PatternRange<'tcx> {\n     pub lo: ty::Const<'tcx>,\n     pub hi: ty::Const<'tcx>,\n@@ -407,6 +401,19 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             )\n     }\n \n+    fn lower_range_expr(\n+        &mut self,\n+        expr: &'tcx hir::Expr,\n+    ) -> (PatternKind<'tcx>, Option<Ascription<'tcx>>) {\n+        match self.lower_lit(expr) {\n+            PatternKind::AscribeUserType {\n+                ascription: lo_ascription,\n+                subpattern: Pattern { kind: box kind, .. },\n+            } => (kind, Some(lo_ascription)),\n+            kind => (kind, None),\n+        }\n+    }\n+\n     fn lower_pattern_unadjusted(&mut self, pat: &'tcx hir::Pat) -> Pattern<'tcx> {\n         let mut ty = self.tables.node_type(pat.hir_id);\n \n@@ -416,14 +423,10 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             PatKind::Lit(ref value) => self.lower_lit(value),\n \n             PatKind::Range(ref lo_expr, ref hi_expr, end) => {\n-                match (\n-                    // Look for `PatternKind::Constant` patterns inside of any\n-                    // `PatternKind::AscribeUserType` patterns. Type ascriptions can be safely\n-                    // ignored for the purposes of lowering a range correctly - these are checked\n-                    // elsewhere for well-formedness.\n-                    self.lower_lit(lo_expr).with_user_type_ascription_subpattern(),\n-                    self.lower_lit(hi_expr).with_user_type_ascription_subpattern(),\n-                ) {\n+                let (lo, lo_ascription) = self.lower_range_expr(lo_expr);\n+                let (hi, hi_ascription) = self.lower_range_expr(hi_expr);\n+\n+                let mut kind = match (lo, hi) {\n                     (PatternKind::Constant { value: lo }, PatternKind::Constant { value: hi }) => {\n                         use std::cmp::Ordering;\n                         let cmp = compare_const_vals(\n@@ -472,17 +475,33 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                                 PatternKind::Wild\n                             }\n                         }\n-                    }\n+                    },\n                     ref pats => {\n                         self.tcx.sess.delay_span_bug(\n                             pat.span,\n-                            &format!(\"found bad range pattern `{:?}` outside of error recovery\",\n-                                     pats),\n+                            &format!(\n+                                \"found bad range pattern `{:?}` outside of error recovery\",\n+                                pats,\n+                            ),\n                         );\n \n                         PatternKind::Wild\n+                    },\n+                };\n+\n+                // If we are handling a range with associated constants (e.g.\n+                // `Foo::<'a>::A..=Foo::B`), we need to put the ascriptions for the associated\n+                // constants somewhere. Have them on the range pattern.\n+                for ascription in &[lo_ascription, hi_ascription] {\n+                    if let Some(ascription) = ascription {\n+                        kind = PatternKind::AscribeUserType {\n+                            ascription: *ascription,\n+                            subpattern: Pattern { span: pat.span, ty, kind: Box::new(kind), },\n+                        };\n                     }\n                 }\n+\n+                kind\n             }\n \n             PatKind::Path(ref qpath) => {\n@@ -758,9 +777,11 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                     ty,\n                     kind: Box::new(kind),\n                 },\n-                user_ty: PatternTypeProjection::from_user_type(user_ty),\n-                user_ty_span: span,\n-                variance: ty::Variance::Covariant,\n+                ascription: Ascription {\n+                    user_ty: PatternTypeProjection::from_user_type(user_ty),\n+                    user_ty_span: span,\n+                    variance: ty::Variance::Covariant,\n+                },\n             };\n         }\n \n@@ -810,11 +831,13 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                                         kind: Box::new(\n                                             PatternKind::AscribeUserType {\n                                                 subpattern: pattern,\n-                                                /// Note that use `Contravariant` here. See the\n-                                                /// `variance` field documentation for details.\n-                                                variance: ty::Variance::Contravariant,\n-                                                user_ty,\n-                                                user_ty_span: span,\n+                                                ascription: Ascription {\n+                                                    /// Note that use `Contravariant` here. See the\n+                                                    /// `variance` field documentation for details.\n+                                                    variance: ty::Variance::Contravariant,\n+                                                    user_ty,\n+                                                    user_ty_span: span,\n+                                                },\n                                             }\n                                         ),\n                                         ty: value.ty,\n@@ -1107,14 +1130,18 @@ impl<'tcx> PatternFoldable<'tcx> for PatternKind<'tcx> {\n             PatternKind::Wild => PatternKind::Wild,\n             PatternKind::AscribeUserType {\n                 ref subpattern,\n-                variance,\n-                ref user_ty,\n-                user_ty_span,\n+                ascription: Ascription {\n+                    variance,\n+                    ref user_ty,\n+                    user_ty_span,\n+                },\n             } => PatternKind::AscribeUserType {\n                 subpattern: subpattern.fold_with(folder),\n-                user_ty: user_ty.fold_with(folder),\n-                variance,\n-                user_ty_span,\n+                ascription: Ascription {\n+                    user_ty: user_ty.fold_with(folder),\n+                    variance,\n+                    user_ty_span,\n+                },\n             },\n             PatternKind::Binding {\n                 mutability,"}, {"sha": "9267cac5dd3d75c559ee6d3c8beb45ce15259452", "filename": "src/test/ui/nll/issue-58299.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0dbb867beb187119bd0bca1f05de6b00cd72f141/src%2Ftest%2Fui%2Fnll%2Fissue-58299.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dbb867beb187119bd0bca1f05de6b00cd72f141/src%2Ftest%2Fui%2Fnll%2Fissue-58299.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-58299.rs?ref=0dbb867beb187119bd0bca1f05de6b00cd72f141", "patch": "@@ -0,0 +1,30 @@\n+#![allow(dead_code)]\n+#![feature(nll)]\n+\n+struct A<'a>(&'a ());\n+\n+trait Y {\n+    const X: i32;\n+}\n+\n+impl Y for A<'static> {\n+    const X: i32 = 10;\n+}\n+\n+fn foo<'a>(x: i32) {\n+    match x {\n+        // This uses <A<'a> as Y>::X, but `A<'a>` does not implement `Y`.\n+        A::<'a>::X..=A::<'static>::X => (), //~ ERROR lifetime may not live long enough\n+        _ => (),\n+    }\n+}\n+\n+fn bar<'a>(x: i32) {\n+    match x {\n+        // This uses <A<'a> as Y>::X, but `A<'a>` does not implement `Y`.\n+        A::<'static>::X..=A::<'a>::X => (), //~ ERROR lifetime may not live long enough\n+        _ => (),\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "b87d0de51a37e216ad5a8a2edc7991cdd31a456e", "filename": "src/test/ui/nll/issue-58299.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0dbb867beb187119bd0bca1f05de6b00cd72f141/src%2Ftest%2Fui%2Fnll%2Fissue-58299.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dbb867beb187119bd0bca1f05de6b00cd72f141/src%2Ftest%2Fui%2Fnll%2Fissue-58299.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-58299.stderr?ref=0dbb867beb187119bd0bca1f05de6b00cd72f141", "patch": "@@ -0,0 +1,20 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-58299.rs:17:9\n+   |\n+LL | fn foo<'a>(x: i32) {\n+   |        -- lifetime `'a` defined here\n+...\n+LL |         A::<'a>::X..=A::<'static>::X => (), //~ ERROR lifetime may not live long enough\n+   |         ^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-58299.rs:25:27\n+   |\n+LL | fn bar<'a>(x: i32) {\n+   |        -- lifetime `'a` defined here\n+...\n+LL |         A::<'static>::X..=A::<'a>::X => (), //~ ERROR lifetime may not live long enough\n+   |                           ^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: aborting due to 2 previous errors\n+"}]}