{"sha": "a5cdff3bd42e82f58de45dd49d468a6d4c54b54b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1Y2RmZjNiZDQyZTgyZjU4ZGU0NWRkNDlkNDY4YTZkNGM1NGI1NGI=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-08-02T18:28:31Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-08-02T18:28:31Z"}, "message": "Add convenience for handling ipv4-mapped addresses by canonicalizing them\n\nThis simplifies checking common properties in an address-family-agnostic\nway since since #86335 commits to not checking IPv4 semantics\nof IPv4-mapped addresses in the `Ipv6Addr` property methods.", "tree": {"sha": "abcb43994f9234e202a3ab27ea7992f1c4b748ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abcb43994f9234e202a3ab27ea7992f1c4b748ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5cdff3bd42e82f58de45dd49d468a6d4c54b54b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5cdff3bd42e82f58de45dd49d468a6d4c54b54b", "html_url": "https://github.com/rust-lang/rust/commit/a5cdff3bd42e82f58de45dd49d468a6d4c54b54b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5cdff3bd42e82f58de45dd49d468a6d4c54b54b/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a985d8e6c7f0519fa1e147854430a381ac4eadf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a985d8e6c7f0519fa1e147854430a381ac4eadf8", "html_url": "https://github.com/rust-lang/rust/commit/a985d8e6c7f0519fa1e147854430a381ac4eadf8"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "2108c62b4cdf45b96805d15ffbc0bc68271d9b5a", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a5cdff3bd42e82f58de45dd49d468a6d4c54b54b/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cdff3bd42e82f58de45dd49d468a6d4c54b54b/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=a5cdff3bd42e82f58de45dd49d468a6d4c54b54b", "patch": "@@ -291,6 +291,29 @@ impl IpAddr {\n     pub const fn is_ipv6(&self) -> bool {\n         matches!(self, IpAddr::V6(_))\n     }\n+\n+    /// Converts this address to an `IpAddr::V4` if it is a IPv4-mapped IPv6 addresses, otherwise it\n+    /// return `self` as-is.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    /// use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n+    ///\n+    /// assert_eq!(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)).to_canonical().is_loopback(), true);\n+    /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0x7f00, 0x1)).is_loopback(), false);\n+    /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0x7f00, 0x1)).to_canonical().is_loopback(), true);\n+    /// ```\n+    #[inline]\n+    #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n+    pub const fn to_canonical(&self) -> IpAddr {\n+        match self {\n+            &v4 @ IpAddr::V4(_) => v4,\n+            IpAddr::V6(v6) => v6.to_canonical(),\n+        }\n+    }\n }\n \n impl Ipv4Addr {\n@@ -1532,6 +1555,28 @@ impl Ipv6Addr {\n         }\n     }\n \n+    /// Converts this address to an `IpAddr::V4` if it is a IPv4-mapped addresses, otherwise it\n+    /// returns self wrapped in a `IpAddr::V6`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0x7f00, 0x1).is_loopback(), false);\n+    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0x7f00, 0x1).to_canonical().is_loopback(), true);\n+    /// ```\n+    #[inline]\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n+    pub const fn to_canonical(&self) -> IpAddr {\n+        if let Some(mapped) = self.to_ipv4_mapped() {\n+            return IpAddr::V4(mapped);\n+        }\n+        IpAddr::V6(*self)\n+    }\n+\n     /// Returns the sixteen eight-bit integers the IPv6 address consists of.\n     ///\n     /// ```"}]}