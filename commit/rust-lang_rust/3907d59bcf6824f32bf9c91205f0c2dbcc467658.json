{"sha": "3907d59bcf6824f32bf9c91205f0c2dbcc467658", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MDdkNTliY2Y2ODI0ZjMyYmY5YzkxMjA1ZjBjMmRiY2M0Njc2NTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-29T05:04:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-29T05:04:51Z"}, "message": "Auto merge of #66547 - leo60228:procfs-fallback, r=dtolnay\n\nFallback to .init_array when no arguments are available on glibc Linux\n\nLinux is one of the only platforms where `std::env::args` doesn't work in a cdylib.", "tree": {"sha": "e136b73a01468cbac8f3e9b6c1666f9dd9927cd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e136b73a01468cbac8f3e9b6c1666f9dd9927cd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3907d59bcf6824f32bf9c91205f0c2dbcc467658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3907d59bcf6824f32bf9c91205f0c2dbcc467658", "html_url": "https://github.com/rust-lang/rust/commit/3907d59bcf6824f32bf9c91205f0c2dbcc467658", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3907d59bcf6824f32bf9c91205f0c2dbcc467658/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "861e96f2e9fabe04965899f30598115dd3a163e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/861e96f2e9fabe04965899f30598115dd3a163e9", "html_url": "https://github.com/rust-lang/rust/commit/861e96f2e9fabe04965899f30598115dd3a163e9"}, {"sha": "c6bcea965d3efd57b87ef590ad3b593a89253d96", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6bcea965d3efd57b87ef590ad3b593a89253d96", "html_url": "https://github.com/rust-lang/rust/commit/c6bcea965d3efd57b87ef590ad3b593a89253d96"}], "stats": {"total": 63, "additions": 62, "deletions": 1}, "files": [{"sha": "651010d136611895921a3dea1200a461d58ce831", "filename": "src/libstd/env.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3907d59bcf6824f32bf9c91205f0c2dbcc467658/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3907d59bcf6824f32bf9c91205f0c2dbcc467658/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=3907d59bcf6824f32bf9c91205f0c2dbcc467658", "patch": "@@ -702,6 +702,11 @@ pub struct ArgsOs { inner: sys::args::Args }\n /// (such as `*` and `?`). On Windows this is not done, and such arguments are\n /// passed as-is.\n ///\n+/// On glibc Linux, arguments are retrieved by placing a function in .init_array.\n+/// glibc passes argc, argv, and envp to functions in .init_array, as a non-standard extension.\n+/// This allows `std::env::args` to work even in a `cdylib` or `staticlib`, as it does on macOS\n+/// and Windows.\n+///\n /// # Panics\n ///\n /// The returned iterator will panic during iteration if any argument to the\n@@ -732,6 +737,11 @@ pub fn args() -> Args {\n /// set to arbitrary text, and it may not even exist, so this property should\n /// not be relied upon for security purposes.\n ///\n+/// On glibc Linux, arguments are retrieved by placing a function in .init_array.\n+/// glibc passes argc, argv, and envp to functions in .init_array, as a non-standard extension.\n+/// This allows `std::env::args` to work even in a `cdylib` or `staticlib`, as it does on macOS\n+/// and Windows.\n+///\n /// # Examples\n ///\n /// ```"}, {"sha": "15dafb1bcf96444cf5dda16210a96d5102bc5418", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3907d59bcf6824f32bf9c91205f0c2dbcc467658/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3907d59bcf6824f32bf9c91205f0c2dbcc467658/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=3907d59bcf6824f32bf9c91205f0c2dbcc467658", "patch": "@@ -72,12 +72,40 @@ mod imp {\n     // acquire this mutex reentrantly!\n     static LOCK: Mutex = Mutex::new();\n \n-    pub unsafe fn init(argc: isize, argv: *const *const u8) {\n+    unsafe fn really_init(argc: isize, argv: *const *const u8) {\n         let _guard = LOCK.lock();\n         ARGC = argc;\n         ARGV = argv;\n     }\n \n+    #[inline(always)]\n+    pub unsafe fn init(_argc: isize, _argv: *const *const u8) {\n+        #[cfg(not(all(target_os = \"linux\", target_env = \"gnu\")))]\n+        really_init(_argc, _argv);\n+    }\n+\n+    /// glibc passes argc, argv, and envp to functions in .init_array, as a non-standard extension.\n+    /// This allows `std::env::args` to work even in a `cdylib`, as it does on macOS and Windows.\n+    #[cfg(all(target_os = \"linux\", target_env = \"gnu\"))]\n+    #[used]\n+    #[link_section = \".init_array.00099\"]\n+    static ARGV_INIT_ARRAY: extern \"C\" fn(\n+        crate::os::raw::c_int,\n+        *const *const u8,\n+        *const *const u8,\n+    ) = {\n+        extern \"C\" fn init_wrapper(\n+            argc: crate::os::raw::c_int,\n+            argv: *const *const u8,\n+            _envp: *const *const u8,\n+        ) {\n+            unsafe {\n+                really_init(argc as isize, argv);\n+            }\n+        }\n+        init_wrapper\n+    };\n+\n     pub unsafe fn cleanup() {\n         let _guard = LOCK.lock();\n         ARGC = 0;"}, {"sha": "ad841ec6101cd73a95c715c658c4e2280218144f", "filename": "src/test/run-make-fulldeps/glibc-staticlib-args/Makefile", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3907d59bcf6824f32bf9c91205f0c2dbcc467658/src%2Ftest%2Frun-make-fulldeps%2Fglibc-staticlib-args%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3907d59bcf6824f32bf9c91205f0c2dbcc467658/src%2Ftest%2Frun-make-fulldeps%2Fglibc-staticlib-args%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fglibc-staticlib-args%2FMakefile?ref=3907d59bcf6824f32bf9c91205f0c2dbcc467658", "patch": "@@ -0,0 +1,12 @@\n+# only-gnu\n+# only-linux\n+\n+-include ../tools.mk\n+\n+# This ensures that std::env::args works in a library called from C on glibc Linux.\n+\n+all:\n+\t$(RUSTC) --crate-type=staticlib library.rs\n+\t$(CC) program.c $(call STATICLIB,library) $(call OUT_EXE,program) \\\n+\t\t$(EXTRACFLAGS) $(EXTRACXXFLAGS)\n+\t$(call RUN,program)"}, {"sha": "991981dc09666c0afa99563bb2e9962e8ef15bd0", "filename": "src/test/run-make-fulldeps/glibc-staticlib-args/library.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3907d59bcf6824f32bf9c91205f0c2dbcc467658/src%2Ftest%2Frun-make-fulldeps%2Fglibc-staticlib-args%2Flibrary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3907d59bcf6824f32bf9c91205f0c2dbcc467658/src%2Ftest%2Frun-make-fulldeps%2Fglibc-staticlib-args%2Flibrary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fglibc-staticlib-args%2Flibrary.rs?ref=3907d59bcf6824f32bf9c91205f0c2dbcc467658", "patch": "@@ -0,0 +1,4 @@\n+#[no_mangle]\n+pub extern fn args_check() {\n+    assert_ne!(std::env::args_os().count(), 0);\n+}"}, {"sha": "d704c39d5c42f096effc85cb4001e21c4e6826fc", "filename": "src/test/run-make-fulldeps/glibc-staticlib-args/program.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3907d59bcf6824f32bf9c91205f0c2dbcc467658/src%2Ftest%2Frun-make-fulldeps%2Fglibc-staticlib-args%2Fprogram.c", "raw_url": "https://github.com/rust-lang/rust/raw/3907d59bcf6824f32bf9c91205f0c2dbcc467658/src%2Ftest%2Frun-make-fulldeps%2Fglibc-staticlib-args%2Fprogram.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fglibc-staticlib-args%2Fprogram.c?ref=3907d59bcf6824f32bf9c91205f0c2dbcc467658", "patch": "@@ -0,0 +1,7 @@\n+// ignore-license\n+void args_check();\n+\n+int main() {\n+    args_check();\n+    return 0;\n+}"}]}