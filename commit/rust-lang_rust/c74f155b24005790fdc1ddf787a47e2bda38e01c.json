{"sha": "c74f155b24005790fdc1ddf787a47e2bda38e01c", "node_id": "C_kwDOAAsO6NoAKGM3NGYxNTViMjQwMDU3OTBmZGMxZGRmNzg3YTQ3ZTJiZGEzOGUwMWM", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-07-13T18:13:07Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-11-18T06:16:20Z"}, "message": "Adding more tests", "tree": {"sha": "a167b6de8f2763fb12c8978d63bae16ef6911211", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a167b6de8f2763fb12c8978d63bae16ef6911211"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c74f155b24005790fdc1ddf787a47e2bda38e01c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c74f155b24005790fdc1ddf787a47e2bda38e01c", "html_url": "https://github.com/rust-lang/rust/commit/c74f155b24005790fdc1ddf787a47e2bda38e01c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c74f155b24005790fdc1ddf787a47e2bda38e01c/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1c6b797deafbc9d3311a1e02db9623e75419218", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1c6b797deafbc9d3311a1e02db9623e75419218", "html_url": "https://github.com/rust-lang/rust/commit/d1c6b797deafbc9d3311a1e02db9623e75419218"}], "stats": {"total": 226, "additions": 114, "deletions": 112}, "files": [{"sha": "5b185082d4d87f839f31e472c7bdb5475b9a934d", "filename": "src/test/mir-opt/deref-patterns/string.foo.PreCodegen.after.mir", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/c74f155b24005790fdc1ddf787a47e2bda38e01c/src%2Ftest%2Fmir-opt%2Fderef-patterns%2Fstring.foo.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c74f155b24005790fdc1ddf787a47e2bda38e01c/src%2Ftest%2Fmir-opt%2Fderef-patterns%2Fstring.foo.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderef-patterns%2Fstring.foo.PreCodegen.after.mir?ref=c74f155b24005790fdc1ddf787a47e2bda38e01c", "patch": "@@ -0,0 +1,74 @@\n+// MIR for `foo` after PreCodegen\n+\n+fn foo(_1: Option<String>) -> i32 {\n+    debug s => _1;                       // in scope 0 at $DIR/string.rs:+0:12: +0:13\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/string.rs:+0:34: +0:37\n+    let mut _2: &std::string::String;    // in scope 0 at $DIR/string.rs:+2:14: +2:17\n+    let mut _3: &str;                    // in scope 0 at $DIR/string.rs:+2:14: +2:17\n+    let mut _4: bool;                    // in scope 0 at $DIR/string.rs:+2:14: +2:17\n+    let mut _5: isize;                   // in scope 0 at $DIR/string.rs:+2:9: +2:18\n+    let _6: std::option::Option<std::string::String>; // in scope 0 at $DIR/string.rs:+3:9: +3:10\n+    let mut _7: bool;                    // in scope 0 at $DIR/string.rs:+5:1: +5:2\n+    scope 1 {\n+        debug s => _6;                   // in scope 1 at $DIR/string.rs:+3:9: +3:10\n+    }\n+\n+    bb0: {\n+        _7 = const false;                // scope 0 at $DIR/string.rs:+1:11: +1:12\n+        _7 = const true;                 // scope 0 at $DIR/string.rs:+1:11: +1:12\n+        _5 = discriminant(_1);           // scope 0 at $DIR/string.rs:+1:11: +1:12\n+        switchInt(move _5) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/string.rs:+1:5: +1:12\n+    }\n+\n+    bb1: {\n+        StorageLive(_6);                 // scope 0 at $DIR/string.rs:+3:9: +3:10\n+        _7 = const false;                // scope 0 at $DIR/string.rs:+3:9: +3:10\n+        _6 = move _1;                    // scope 0 at $DIR/string.rs:+3:9: +3:10\n+        _0 = const 4321_i32;             // scope 1 at $DIR/string.rs:+3:14: +3:18\n+        drop(_6) -> bb6;                 // scope 0 at $DIR/string.rs:+3:17: +3:18\n+    }\n+\n+    bb2: {\n+        _2 = &((_1 as Some).0: std::string::String); // scope 0 at $DIR/string.rs:+2:14: +2:17\n+        _3 = <String as Deref>::deref(move _2) -> bb3; // scope 0 at $DIR/string.rs:+2:14: +2:17\n+                                         // mir::Constant\n+                                         // + span: $DIR/string.rs:9:14: 9:17\n+                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }\n+    }\n+\n+    bb3: {\n+        _4 = <str as PartialEq>::eq(_3, const \"a\") -> bb4; // scope 0 at $DIR/string.rs:+2:14: +2:17\n+                                         // mir::Constant\n+                                         // + span: $DIR/string.rs:9:14: 9:17\n+                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }\n+                                         // mir::Constant\n+                                         // + span: $DIR/string.rs:9:14: 9:17\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n+    }\n+\n+    bb4: {\n+        switchInt(move _4) -> [false: bb1, otherwise: bb5]; // scope 0 at $DIR/string.rs:+2:14: +2:17\n+    }\n+\n+    bb5: {\n+        _0 = const 1234_i32;             // scope 0 at $DIR/string.rs:+2:22: +2:26\n+        goto -> bb9;                     // scope 0 at $DIR/string.rs:+2:22: +2:26\n+    }\n+\n+    bb6: {\n+        StorageDead(_6);                 // scope 0 at $DIR/string.rs:+3:17: +3:18\n+        goto -> bb9;                     // scope 0 at $DIR/string.rs:+3:17: +3:18\n+    }\n+\n+    bb7: {\n+        return;                          // scope 0 at $DIR/string.rs:+5:2: +5:2\n+    }\n+\n+    bb8: {\n+        drop(_1) -> bb7;                 // scope 0 at $DIR/string.rs:+5:1: +5:2\n+    }\n+\n+    bb9: {\n+        switchInt(_7) -> [false: bb7, otherwise: bb8]; // scope 0 at $DIR/string.rs:+5:1: +5:2\n+    }\n+}"}, {"sha": "2557f75b267a6e58928f1af1fd8f9d2ca0f77230", "filename": "src/test/mir-opt/deref-patterns/string.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c74f155b24005790fdc1ddf787a47e2bda38e01c/src%2Ftest%2Fmir-opt%2Fderef-patterns%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74f155b24005790fdc1ddf787a47e2bda38e01c/src%2Ftest%2Fmir-opt%2Fderef-patterns%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderef-patterns%2Fstring.rs?ref=c74f155b24005790fdc1ddf787a47e2bda38e01c", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags: -Z mir-opt-level=0 -C panic=abort\n+\n+#![feature(deref_patterns)]\n+#![crate_type = \"lib\"]\n+\n+// EMIT_MIR string.foo.PreCodegen.after.mir\n+pub fn foo(s: Option<String>) -> i32 {\n+    match s {\n+        Some(\"a\") => 1234,\n+        s => 4321,\n+    }\n+}"}, {"sha": "b7155b7efffeee9f90b01fd3d71101e3b96ca9bf", "filename": "src/test/ui/deref-patterns/default-infer.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c74f155b24005790fdc1ddf787a47e2bda38e01c/src%2Ftest%2Fui%2Fderef-patterns%2Fdefault-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74f155b24005790fdc1ddf787a47e2bda38e01c/src%2Ftest%2Fui%2Fderef-patterns%2Fdefault-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-patterns%2Fdefault-infer.rs?ref=c74f155b24005790fdc1ddf787a47e2bda38e01c", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+#![feature(deref_patterns)]\n+\n+fn main() {\n+    match <_ as Default>::default() {\n+        \"\" => (),\n+        _ => unreachable!(),\n+    }\n+}"}, {"sha": "993468b5e826bf9e2ecead481144468c6731c5ab", "filename": "src/test/ui/deref-patterns/gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c74f155b24005790fdc1ddf787a47e2bda38e01c/src%2Ftest%2Fui%2Fderef-patterns%2Fgate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c74f155b24005790fdc1ddf787a47e2bda38e01c/src%2Ftest%2Fui%2Fderef-patterns%2Fgate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-patterns%2Fgate.stderr?ref=c74f155b24005790fdc1ddf787a47e2bda38e01c", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/gate.rs:3:9\n+  --> $DIR/gate.rs:4:9\n    |\n LL |     match String::new() {\n    |           ------------- this expression has type `String`"}, {"sha": "2e7d26d0dfd9617d7e287e92d8e3d5570b1fc779", "filename": "src/test/ui/deref-patterns/mir.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1c6b797deafbc9d3311a1e02db9623e75419218/src%2Ftest%2Fui%2Fderef-patterns%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c6b797deafbc9d3311a1e02db9623e75419218/src%2Ftest%2Fui%2Fderef-patterns%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-patterns%2Fmir.rs?ref=d1c6b797deafbc9d3311a1e02db9623e75419218", "patch": "@@ -1,12 +0,0 @@\n-// compile-flags: -Z unpretty=mir\n-// build-pass\n-#![feature(deref_patterns)]\n-\n-fn main() {\n-    let s = Some(String::new());\n-    let a;\n-    match s {\n-        Some(\"a\") => a = 1234,\n-        s => a = 4321,\n-    }\n-}"}, {"sha": "e73d37efb24a23ece528210ba4b6f8c1461e87d8", "filename": "src/test/ui/deref-patterns/mir.stdout", "status": "removed", "additions": 0, "deletions": 99, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/d1c6b797deafbc9d3311a1e02db9623e75419218/src%2Ftest%2Fui%2Fderef-patterns%2Fmir.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d1c6b797deafbc9d3311a1e02db9623e75419218/src%2Ftest%2Fui%2Fderef-patterns%2Fmir.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-patterns%2Fmir.stdout?ref=d1c6b797deafbc9d3311a1e02db9623e75419218", "patch": "@@ -1,99 +0,0 @@\n-// WARNING: This output format is intended for human consumers only\n-// and is subject to change without notice. Knock yourself out.\n-fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/mir.rs:5:11: 5:11\n-    let _1: std::option::Option<std::string::String>; // in scope 0 at $DIR/mir.rs:6:9: 6:10\n-    let mut _2: std::string::String;     // in scope 0 at $DIR/mir.rs:6:18: 6:31\n-    let mut _4: &std::string::String;    // in scope 0 at $DIR/mir.rs:9:14: 9:17\n-    let mut _5: &str;                    // in scope 0 at $DIR/mir.rs:9:14: 9:17\n-    let mut _6: bool;                    // in scope 0 at $DIR/mir.rs:9:14: 9:17\n-    let mut _7: isize;                   // in scope 0 at $DIR/mir.rs:9:9: 9:18\n-    let mut _9: bool;                    // in scope 0 at $DIR/mir.rs:12:1: 12:2\n-    scope 1 {\n-        debug s => _1;                   // in scope 1 at $DIR/mir.rs:6:9: 6:10\n-        let _3: i32;                     // in scope 1 at $DIR/mir.rs:7:9: 7:10\n-        scope 2 {\n-            debug a => _3;               // in scope 2 at $DIR/mir.rs:7:9: 7:10\n-            let _8: std::option::Option<std::string::String>; // in scope 2 at $DIR/mir.rs:10:9: 10:10\n-            scope 3 {\n-                debug s => _8;           // in scope 3 at $DIR/mir.rs:10:9: 10:10\n-            }\n-        }\n-    }\n-\n-    bb0: {\n-        _9 = const false;                // scope 0 at $DIR/mir.rs:6:9: 6:10\n-        _2 = String::new() -> bb1;       // scope 0 at $DIR/mir.rs:6:18: 6:31\n-                                         // mir::Constant\n-                                         // + span: $DIR/mir.rs:6:18: 6:29\n-                                         // + literal: Const { ty: fn() -> String {String::new}, val: Value(Scalar(<ZST>)) }\n-    }\n-\n-    bb1: {\n-        _9 = const true;                 // scope 0 at $DIR/mir.rs:6:13: 6:32\n-        Deinit(_1);                      // scope 0 at $DIR/mir.rs:6:13: 6:32\n-        ((_1 as Some).0: std::string::String) = move _2; // scope 0 at $DIR/mir.rs:6:13: 6:32\n-        discriminant(_1) = 1;            // scope 0 at $DIR/mir.rs:6:13: 6:32\n-        _7 = discriminant(_1);           // scope 2 at $DIR/mir.rs:8:11: 8:12\n-        switchInt(move _7) -> [1_isize: bb3, otherwise: bb2]; // scope 2 at $DIR/mir.rs:8:5: 8:12\n-    }\n-\n-    bb2: {\n-        _9 = const false;                // scope 2 at $DIR/mir.rs:10:9: 10:10\n-        _8 = move _1;                    // scope 2 at $DIR/mir.rs:10:9: 10:10\n-        _3 = const 4321_i32;             // scope 3 at $DIR/mir.rs:10:14: 10:22\n-        drop(_8) -> [return: bb7, unwind: bb12]; // scope 2 at $DIR/mir.rs:10:21: 10:22\n-    }\n-\n-    bb3: {\n-        _4 = &((_1 as Some).0: std::string::String); // scope 2 at $DIR/mir.rs:9:14: 9:17\n-        _5 = <String as Deref>::deref(move _4) -> bb4; // scope 2 at $DIR/mir.rs:9:14: 9:17\n-                                         // mir::Constant\n-                                         // + span: $DIR/mir.rs:9:14: 9:17\n-                                         // + literal: Const { ty: for<'r> fn(&'r String) -> &'r <String as Deref>::Target {<String as Deref>::deref}, val: Value(Scalar(<ZST>)) }\n-    }\n-\n-    bb4: {\n-        _6 = <str as PartialEq>::eq(_5, const \"a\") -> [return: bb5, unwind: bb12]; // scope 2 at $DIR/mir.rs:9:14: 9:17\n-                                         // mir::Constant\n-                                         // + span: $DIR/mir.rs:9:14: 9:17\n-                                         // + literal: Const { ty: for<'r, 's> fn(&'r str, &'s str) -> bool {<str as PartialEq>::eq}, val: Value(Scalar(<ZST>)) }\n-                                         // mir::Constant\n-                                         // + span: $DIR/mir.rs:9:14: 9:17\n-                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-    }\n-\n-    bb5: {\n-        switchInt(move _6) -> [false: bb2, otherwise: bb6]; // scope 2 at $DIR/mir.rs:9:14: 9:17\n-    }\n-\n-    bb6: {\n-        _3 = const 1234_i32;             // scope 2 at $DIR/mir.rs:9:22: 9:30\n-        goto -> bb7;                     // scope 2 at $DIR/mir.rs:9:22: 9:30\n-    }\n-\n-    bb7: {\n-        switchInt(_9) -> [false: bb8, otherwise: bb10]; // scope 0 at $DIR/mir.rs:12:1: 12:2\n-    }\n-\n-    bb8: {\n-        _9 = const false;                // scope 0 at $DIR/mir.rs:12:1: 12:2\n-        return;                          // scope 0 at $DIR/mir.rs:12:2: 12:2\n-    }\n-\n-    bb9 (cleanup): {\n-        resume;                          // scope 0 at $DIR/mir.rs:5:1: 12:2\n-    }\n-\n-    bb10: {\n-        drop(_1) -> bb8;                 // scope 0 at $DIR/mir.rs:12:1: 12:2\n-    }\n-\n-    bb11 (cleanup): {\n-        drop(_1) -> bb9;                 // scope 0 at $DIR/mir.rs:12:1: 12:2\n-    }\n-\n-    bb12 (cleanup): {\n-        switchInt(_9) -> [false: bb9, otherwise: bb11]; // scope 0 at $DIR/mir.rs:12:1: 12:2\n-    }\n-}"}, {"sha": "6dac46c05fd0871c36020192c9273e7ddd805d81", "filename": "src/test/ui/deref-patterns/refs.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c74f155b24005790fdc1ddf787a47e2bda38e01c/src%2Ftest%2Fui%2Fderef-patterns%2Frefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74f155b24005790fdc1ddf787a47e2bda38e01c/src%2Ftest%2Fui%2Fderef-patterns%2Frefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-patterns%2Frefs.rs?ref=c74f155b24005790fdc1ddf787a47e2bda38e01c", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+#![feature(deref_patterns)]\n+\n+fn foo(s: &String) -> i32 {\n+    match *s {\n+        \"a\" => 42,\n+        _ => -1,\n+    }\n+}\n+\n+fn bar(s: Option<&&&&String>) -> i32 {\n+    match s {\n+        Some(&&&&\"&&&&\") => 1,\n+        _ => -1,\n+    }\n+}\n+\n+fn main() {}"}]}