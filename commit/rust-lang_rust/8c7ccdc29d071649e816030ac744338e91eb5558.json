{"sha": "8c7ccdc29d071649e816030ac744338e91eb5558", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjN2NjZGMyOWQwNzE2NDllODE2MDMwYWM3NDQzMzhlOTFlYjU1NTg=", "commit": {"author": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2021-01-01T21:11:08Z"}, "committer": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2021-01-23T07:40:25Z"}, "message": "Identify methods using functions ids rather than string names", "tree": {"sha": "a44984b99925dd7a5dd83ac8e8fbe9e3d42bc1cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a44984b99925dd7a5dd83ac8e8fbe9e3d42bc1cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c7ccdc29d071649e816030ac744338e91eb5558", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c7ccdc29d071649e816030ac744338e91eb5558", "html_url": "https://github.com/rust-lang/rust/commit/8c7ccdc29d071649e816030ac744338e91eb5558", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c7ccdc29d071649e816030ac744338e91eb5558/comments", "author": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "920e57bd153fdafeddb1dc34a11c6ef05ace2f70", "url": "https://api.github.com/repos/rust-lang/rust/commits/920e57bd153fdafeddb1dc34a11c6ef05ace2f70", "html_url": "https://github.com/rust-lang/rust/commit/920e57bd153fdafeddb1dc34a11c6ef05ace2f70"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "84ea09b5387bc2a95c8148ba8adfc33d7c853211", "filename": "crates/hir_def/src/path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c7ccdc29d071649e816030ac744338e91eb5558/crates%2Fhir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7ccdc29d071649e816030ac744338e91eb5558/crates%2Fhir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath.rs?ref=8c7ccdc29d071649e816030ac744338e91eb5558", "patch": "@@ -304,6 +304,7 @@ pub use hir_expand::name as __name;\n #[macro_export]\n macro_rules! __known_path {\n     (core::iter::IntoIterator) => {};\n+    (core::iter::Iterator) => {};\n     (core::result::Result) => {};\n     (core::option::Option) => {};\n     (core::ops::Range) => {};"}, {"sha": "c7609e90d98016d75232a88a4e448a8c7f50dcd5", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c7ccdc29d071649e816030ac744338e91eb5558/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7ccdc29d071649e816030ac744338e91eb5558/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=8c7ccdc29d071649e816030ac744338e91eb5558", "patch": "@@ -186,6 +186,9 @@ pub mod known {\n         Neg,\n         Not,\n         Index,\n+        // Components of known path (function name)\n+        filter_map,\n+        next,\n         // Builtin macros\n         file,\n         column,"}, {"sha": "16bbd48fb5a92ff2228b3ba499e83ec37d72f822", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8c7ccdc29d071649e816030ac744338e91eb5558/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7ccdc29d071649e816030ac744338e91eb5558/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=8c7ccdc29d071649e816030ac744338e91eb5558", "patch": "@@ -2,8 +2,8 @@\n \n use std::sync::Arc;\n \n-use hir_def::{expr::Statement, path::path, resolver::HasResolver, AdtId, DefWithBodyId};\n-use hir_expand::diagnostics::DiagnosticSink;\n+use hir_def::{AdtId, AssocItemId, DefWithBodyId, expr::Statement, path::path, resolver::HasResolver};\n+use hir_expand::{diagnostics::DiagnosticSink, name};\n use rustc_hash::FxHashSet;\n use syntax::{ast, AstPtr};\n \n@@ -155,19 +155,39 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n     }\n \n     fn check_for_filter_map_next(&mut self, db: &dyn HirDatabase) {\n+        // Find the FunctionIds for Iterator::filter_map and Iterator::next\n+        let iterator_path = path![core::iter::Iterator];\n+        let resolver = self.owner.resolver(db.upcast());\n+        let iterator_trait_id = match resolver.resolve_known_trait(db.upcast(), &iterator_path) {\n+            Some(id) => id,\n+            None => return,\n+        };\n+        let iterator_trait_items = &db.trait_data(iterator_trait_id).items;\n+        let filter_map_function_id = match iterator_trait_items.iter().find(|item| item.0 == name![filter_map]) {\n+            Some((_, AssocItemId::FunctionId(id))) => id,\n+            _ => return,\n+        };\n+        let next_function_id = match iterator_trait_items.iter().find(|item| item.0 == name![next]) {\n+            Some((_, AssocItemId::FunctionId(id))) => id,\n+            _ => return,\n+        };\n+\n+        // Search function body for instances of .filter_map(..).next()\n         let body = db.body(self.owner.into());\n         let mut prev = None;\n-\n         for (id, expr) in body.exprs.iter() {\n-            if let Expr::MethodCall { receiver, method_name, args, .. } = expr {\n-                let method_name = format!(\"{}\", method_name);\n+            if let Expr::MethodCall { receiver, .. } = expr {\n+                let function_id = match self.infer.method_resolution(id) {\n+                    Some(id) => id,\n+                    None => continue,\n+                };\n \n-                if method_name == \"filter_map\" && args.len() == 1 {\n+                if function_id == *filter_map_function_id {\n                     prev = Some(id);\n                     continue;\n                 }\n \n-                if method_name == \"next\" {\n+                if function_id == *next_function_id {\n                     if let Some(filter_map_id) = prev {\n                         if *receiver == filter_map_id {\n                             let (_, source_map) = db.body_with_source_map(self.owner.into());"}]}