{"sha": "045014c17e4d65c7479c8ba5237af1a10b0784d7", "node_id": "C_kwDOAAsO6NoAKDA0NTAxNGMxN2U0ZDY1Yzc0NzljOGJhNTIzN2FmMWExMGIwNzg0ZDc", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-03T23:16:47Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-03T23:27:29Z"}, "message": "minor: Shorten spans of mismatched_arg_count diag", "tree": {"sha": "1cdb6d8245b9327d5f82e80106c882ef23d34a80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cdb6d8245b9327d5f82e80106c882ef23d34a80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/045014c17e4d65c7479c8ba5237af1a10b0784d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/045014c17e4d65c7479c8ba5237af1a10b0784d7", "html_url": "https://github.com/rust-lang/rust/commit/045014c17e4d65c7479c8ba5237af1a10b0784d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/045014c17e4d65c7479c8ba5237af1a10b0784d7/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4691a0647b2c96cc475d8bbe7c31fe194d1443e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4691a0647b2c96cc475d8bbe7c31fe194d1443e7", "html_url": "https://github.com/rust-lang/rust/commit/4691a0647b2c96cc475d8bbe7c31fe194d1443e7"}], "stats": {"total": 46, "additions": 22, "deletions": 24}, "files": [{"sha": "78716fc09936d6d0ed342b94729d2617470b5abe", "filename": "crates/ide_diagnostics/src/handlers/mismatched_arg_count.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/045014c17e4d65c7479c8ba5237af1a10b0784d7/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmismatched_arg_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/045014c17e4d65c7479c8ba5237af1a10b0784d7/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmismatched_arg_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmismatched_arg_count.rs?ref=045014c17e4d65c7479c8ba5237af1a10b0784d7", "patch": "@@ -2,7 +2,7 @@ use ide_db::base_db::{FileRange, SourceDatabase};\n use syntax::{\n     algo::find_node_at_range,\n     ast::{self, HasArgList},\n-    AstNode,\n+    AstNode, TextRange,\n };\n \n use crate::{Diagnostic, DiagnosticsContext};\n@@ -16,46 +16,44 @@ pub(crate) fn mismatched_arg_count(\n ) -> Diagnostic {\n     let s = if d.expected == 1 { \"\" } else { \"s\" };\n     let message = format!(\"expected {} argument{}, found {}\", d.expected, s, d.found);\n-    Diagnostic::new(\n-        \"mismatched-arg-count\",\n-        message,\n-        invalid_args_range(ctx, d).unwrap_or_else(|it| it).range,\n-    )\n+    Diagnostic::new(\"mismatched-arg-count\", message, invalid_args_range(ctx, d))\n }\n \n-fn invalid_args_range(\n-    ctx: &DiagnosticsContext<'_>,\n-    d: &hir::MismatchedArgCount,\n-) -> Result<FileRange, FileRange> {\n-    let full_range = ctx.sema.diagnostics_display_range(d.call_expr.clone().map(|it| it.into()));\n+fn invalid_args_range(ctx: &DiagnosticsContext<'_>, d: &hir::MismatchedArgCount) -> TextRange {\n+    let FileRange { file_id, range } =\n+        ctx.sema.diagnostics_display_range(d.call_expr.clone().map(|it| it.into()));\n \n-    let source_file = ctx.sema.db.parse(full_range.file_id);\n-    let expr = find_node_at_range::<ast::Expr>(&source_file.syntax_node(), full_range.range)\n-        .filter(|it| it.syntax().text_range() == full_range.range);\n+    let source_file = ctx.sema.db.parse(file_id);\n+    let expr = find_node_at_range::<ast::Expr>(&source_file.syntax_node(), range)\n+        .filter(|it| it.syntax().text_range() == range);\n     let arg_list = match expr {\n         Some(ast::Expr::CallExpr(call)) => call.arg_list(),\n         Some(ast::Expr::MethodCallExpr(call)) => call.arg_list(),\n         _ => None,\n     };\n     let arg_list = match arg_list {\n         Some(it) => it,\n-        None => return Err(full_range),\n+        None => return range,\n     };\n-    let arg_list_range =\n-        FileRange { file_id: full_range.file_id, range: arg_list.syntax().text_range() };\n     if d.found < d.expected {\n         if d.found == 0 {\n-            return Ok(arg_list_range);\n+            return arg_list.syntax().text_range();\n         }\n         if let Some(r_paren) = arg_list.r_paren_token() {\n-            return Ok(FileRange { file_id: full_range.file_id, range: r_paren.text_range() });\n+            return r_paren.text_range();\n         }\n     }\n     if d.expected < d.found {\n-        return Ok(arg_list_range);\n+        if d.expected == 0 {\n+            return arg_list.syntax().text_range();\n+        }\n+        let zip = arg_list.args().nth(d.expected).zip(arg_list.r_paren_token());\n+        if let Some((arg, r_paren)) = zip {\n+            return arg.syntax().text_range().cover(r_paren.text_range());\n+        }\n     }\n \n-    Err(full_range)\n+    range\n }\n \n #[cfg(test)]\n@@ -204,7 +202,7 @@ impl Foo {\n     fn new() {\n         Foo::Bar(0);\n         Foo::Bar(0, 1);\n-              //^^^^^^ error: expected 1 argument, found 2\n+                  //^^ error: expected 1 argument, found 2\n         Foo::Bar();\n               //^^ error: expected 1 argument, found 0\n     }\n@@ -227,7 +225,7 @@ fn f() {\n     unsafe {\n         fixed(0);\n         fixed(0, 1);\n-           //^^^^^^ error: expected 1 argument, found 2\n+               //^^ error: expected 1 argument, found 2\n         varargs(0);\n         varargs(0, 1);\n         varargs2();\n@@ -249,7 +247,7 @@ fn main() {\n    //^^ error: expected 1 argument, found 0\n     f(());\n     f((), ());\n-   //^^^^^^^^ error: expected 1 argument, found 2\n+        //^^^ error: expected 1 argument, found 2\n }\n \"#,\n         )"}]}