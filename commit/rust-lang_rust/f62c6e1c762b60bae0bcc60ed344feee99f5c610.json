{"sha": "f62c6e1c762b60bae0bcc60ed344feee99f5c610", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MmM2ZTFjNzYyYjYwYmFlMGJjYzYwZWQzNDRmZWVlOTlmNWM2MTA=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-08T13:53:06Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-10T11:13:54Z"}, "message": "librustc_middle: return LocalDefId instead of DefId in body_owner_def_id", "tree": {"sha": "ab9374227204cbbafa2c4c39011d43ede7b6fd0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab9374227204cbbafa2c4c39011d43ede7b6fd0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f62c6e1c762b60bae0bcc60ed344feee99f5c610", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f62c6e1c762b60bae0bcc60ed344feee99f5c610", "html_url": "https://github.com/rust-lang/rust/commit/f62c6e1c762b60bae0bcc60ed344feee99f5c610", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f62c6e1c762b60bae0bcc60ed344feee99f5c610/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dc363bce1f02ed9863f9b9cdc10532b95a64fbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc363bce1f02ed9863f9b9cdc10532b95a64fbb", "html_url": "https://github.com/rust-lang/rust/commit/1dc363bce1f02ed9863f9b9cdc10532b95a64fbb"}], "stats": {"total": 62, "additions": 30, "deletions": 32}, "files": [{"sha": "942d76e3202b91a65cc47a995a7398b207606cd2", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f62c6e1c762b60bae0bcc60ed344feee99f5c610", "patch": "@@ -59,7 +59,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err};\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::Node;\n use rustc_middle::middle::region;\n use rustc_middle::ty::error::TypeError;\n@@ -1589,16 +1589,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         // it's a actual definition. According to the comments (e.g. in\n         // librustc_typeck/check/compare_method.rs:compare_predicate_entailment) the latter\n         // is relied upon by some other code. This might (or might not) need cleanup.\n-        let body_owner_def_id = self\n-            .tcx\n-            .hir()\n-            .opt_local_def_id(cause.body_id)\n-            .map(LocalDefId::to_def_id)\n-            .unwrap_or_else(|| {\n+        let body_owner_def_id =\n+            self.tcx.hir().opt_local_def_id(cause.body_id).unwrap_or_else(|| {\n                 self.tcx.hir().body_owner_def_id(hir::BodyId { hir_id: cause.body_id })\n             });\n         self.check_and_note_conflicting_crates(diag, terr);\n-        self.tcx.note_and_explain_type_err(diag, terr, span, body_owner_def_id);\n+        self.tcx.note_and_explain_type_err(diag, terr, span, body_owner_def_id.to_def_id());\n \n         // It reads better to have the error origin as the final\n         // thing."}, {"sha": "4c054795136b9b90852962dcd271c73e4377aec8", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=f62c6e1c762b60bae0bcc60ed344feee99f5c610", "patch": "@@ -812,7 +812,7 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n             {\n                 sess.time(\"match_checking\", || {\n                     tcx.par_body_owners(|def_id| {\n-                        tcx.ensure().check_match(def_id);\n+                        tcx.ensure().check_match(def_id.to_def_id());\n                     });\n                 });\n             },\n@@ -834,7 +834,7 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n     });\n \n     sess.time(\"MIR_borrow_checking\", || {\n-        tcx.par_body_owners(|def_id| tcx.ensure().mir_borrowck(def_id));\n+        tcx.par_body_owners(|def_id| tcx.ensure().mir_borrowck(def_id.to_def_id()));\n     });\n \n     sess.time(\"dumping_chalk_like_clauses\", || {\n@@ -843,7 +843,7 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n \n     sess.time(\"MIR_effect_checking\", || {\n         for def_id in tcx.body_owners() {\n-            mir::transform::check_unsafety::check_unsafety(tcx, def_id)\n+            mir::transform::check_unsafety::check_unsafety(tcx, def_id.to_def_id())\n         }\n     });\n "}, {"sha": "910d53880f22d548c1176b78d8e2908a06a8b3a9", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=f62c6e1c762b60bae0bcc60ed344feee99f5c610", "patch": "@@ -1166,7 +1166,7 @@ declare_lint_pass!(\n );\n \n fn check_const(cx: &LateContext<'_, '_>, body_id: hir::BodyId) {\n-    let def_id = cx.tcx.hir().body_owner_def_id(body_id);\n+    let def_id = cx.tcx.hir().body_owner_def_id(body_id).to_def_id();\n     // trigger the query once for all constants since that will already report the errors\n     // FIXME: Use ensure here\n     let _ = cx.tcx.const_eval_poly(def_id);"}, {"sha": "c4180c3e9c74b36a163002c4ba5e23f70465b39b", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=f62c6e1c762b60bae0bcc60ed344feee99f5c610", "patch": "@@ -370,9 +370,8 @@ impl<'hir> Map<'hir> {\n         parent\n     }\n \n-    // FIXME(eddyb) this function can and should return `LocalDefId`.\n-    pub fn body_owner_def_id(&self, id: BodyId) -> DefId {\n-        self.local_def_id(self.body_owner(id))\n+    pub fn body_owner_def_id(&self, id: BodyId) -> LocalDefId {\n+        self.local_def_id(self.body_owner(id)).expect_local()\n     }\n \n     /// Given a `HirId`, returns the `BodyId` associated with it,"}, {"sha": "b4c80f623f38a405afaa28ac0872d3d4437f8607", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=f62c6e1c762b60bae0bcc60ed344feee99f5c610", "patch": "@@ -2678,21 +2678,21 @@ pub enum ImplOverlapKind {\n \n impl<'tcx> TyCtxt<'tcx> {\n     pub fn body_tables(self, body: hir::BodyId) -> &'tcx TypeckTables<'tcx> {\n-        self.typeck_tables_of(self.hir().body_owner_def_id(body))\n+        self.typeck_tables_of(self.hir().body_owner_def_id(body).to_def_id())\n     }\n \n     /// Returns an iterator of the `DefId`s for all body-owners in this\n     /// crate. If you would prefer to iterate over the bodies\n     /// themselves, you can do `self.hir().krate().body_ids.iter()`.\n-    pub fn body_owners(self) -> impl Iterator<Item = DefId> + Captures<'tcx> + 'tcx {\n+    pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + Captures<'tcx> + 'tcx {\n         self.hir()\n             .krate()\n             .body_ids\n             .iter()\n             .map(move |&body_id| self.hir().body_owner_def_id(body_id))\n     }\n \n-    pub fn par_body_owners<F: Fn(DefId) + sync::Sync + sync::Send>(self, f: F) {\n+    pub fn par_body_owners<F: Fn(LocalDefId) + sync::Sync + sync::Send>(self, f: F) {\n         par_iter(&self.hir().krate().body_ids)\n             .for_each(|&body_id| f(self.hir().body_owner_def_id(body_id)));\n     }"}, {"sha": "81ea57e4c004c28d0671ae9e8277c4f9f0fa6f95", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=f62c6e1c762b60bae0bcc60ed344feee99f5c610", "patch": "@@ -1,7 +1,7 @@\n use crate::{shim, util};\n use rustc_ast::ast;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdSet, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdSet, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::{BodyAndCache, ConstQualifs, MirPhase, Promoted};\n@@ -62,7 +62,7 @@ fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> &DefIdSet {\n     let mut set = DefIdSet::default();\n \n     // All body-owners have MIR associated with them.\n-    set.extend(tcx.body_owners());\n+    set.extend(tcx.body_owners().map(LocalDefId::to_def_id));\n \n     // Additionally, tuple struct/variant constructors have MIR, but\n     // they don't have a BodyId, so we need to build them separately."}, {"sha": "ad5a649a24a9feaf880c296df492e80ae46c1075", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=f62c6e1c762b60bae0bcc60ed344feee99f5c610", "patch": "@@ -131,8 +131,8 @@ impl Visitor<'tcx> for ItemVisitor<'tcx> {\n     fn visit_nested_body(&mut self, body_id: hir::BodyId) {\n         let owner_def_id = self.tcx.hir().body_owner_def_id(body_id);\n         let body = self.tcx.hir().body(body_id);\n-        let param_env = self.tcx.param_env(owner_def_id);\n-        let tables = self.tcx.typeck_tables_of(owner_def_id);\n+        let param_env = self.tcx.param_env(owner_def_id.to_def_id());\n+        let tables = self.tcx.typeck_tables_of(owner_def_id.to_def_id());\n         ExprVisitor { tcx: self.tcx, param_env, tables }.visit_body(body);\n         self.visit_body(body);\n     }"}, {"sha": "b2c9d9956cb1a3969ced72f3cddc4b94a032de65", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=f62c6e1c762b60bae0bcc60ed344feee99f5c610", "patch": "@@ -14,7 +14,7 @@ use crate::infer::{self, InferCtxt, TyCtxtInferExt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::{Node, QPath, TyKind, WhereBoundPredicate, WherePredicate};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::error::ExpectedFound;\n@@ -354,12 +354,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             let enclosing_scope_span = tcx.def_span(\n                                 tcx.hir()\n                                     .opt_local_def_id(obligation.cause.body_id)\n-                                    .map(LocalDefId::to_def_id)\n                                     .unwrap_or_else(|| {\n                                         tcx.hir().body_owner_def_id(hir::BodyId {\n                                             hir_id: obligation.cause.body_id,\n                                         })\n-                                    }),\n+                                    })\n+                                    .to_def_id(),\n                             );\n \n                             err.span_label(enclosing_scope_span, s.as_str());"}, {"sha": "4754f495ca79eb8ee2cdb6d8b2297da21ff7067d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f62c6e1c762b60bae0bcc60ed344feee99f5c610", "patch": "@@ -751,7 +751,7 @@ fn check_mod_item_types(tcx: TyCtxt<'_>, module_def_id: DefId) {\n fn typeck_item_bodies(tcx: TyCtxt<'_>, crate_num: CrateNum) {\n     debug_assert!(crate_num == LOCAL_CRATE);\n     tcx.par_body_owners(|body_owner_def_id| {\n-        tcx.ensure().typeck_tables_of(body_owner_def_id);\n+        tcx.ensure().typeck_tables_of(body_owner_def_id.to_def_id());\n     });\n }\n "}, {"sha": "f7564623946d8684a17de035993acc0f2187ed4c", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=f62c6e1c762b60bae0bcc60ed344feee99f5c610", "patch": "@@ -109,7 +109,7 @@ macro_rules! ignore_err {\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn regionck_expr(&self, body: &'tcx hir::Body<'tcx>) {\n-        let subject = self.tcx.hir().body_owner_def_id(body.id());\n+        let subject = self.tcx.hir().body_owner_def_id(body.id()).to_def_id();\n         let id = body.value.hir_id;\n         let mut rcx =\n             RegionCtxt::new(self, RepeatingScope(id), id, Subject(subject), self.param_env);\n@@ -154,7 +154,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// constraints to add.\n     pub fn regionck_fn(&self, fn_id: hir::HirId, body: &'tcx hir::Body<'tcx>) {\n         debug!(\"regionck_fn(id={})\", fn_id);\n-        let subject = self.tcx.hir().body_owner_def_id(body.id());\n+        let subject = self.tcx.hir().body_owner_def_id(body.id()).to_def_id();\n         let hir_id = body.value.hir_id;\n         let mut rcx =\n             RegionCtxt::new(self, RepeatingScope(hir_id), hir_id, Subject(subject), self.param_env);\n@@ -290,7 +290,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n \n         let body_id = body.id();\n         self.body_id = body_id.hir_id;\n-        self.body_owner = self.tcx.hir().body_owner_def_id(body_id);\n+        self.body_owner = self.tcx.hir().body_owner_def_id(body_id).to_def_id();\n \n         let call_site =\n             region::Scope { id: body.value.hir_id.local_id, data: region::ScopeData::CallSite };"}, {"sha": "2c9e23d8095cad73f1bceb0881911c3d3188fd8e", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=f62c6e1c762b60bae0bcc60ed344feee99f5c610", "patch": "@@ -146,7 +146,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n-        let body_owner_def_id = self.tcx.hir().body_owner_def_id(body.id());\n+        let body_owner_def_id = self.tcx.hir().body_owner_def_id(body.id()).to_def_id();\n         assert_eq!(body_owner_def_id, closure_def_id);\n         let mut delegate = InferBorrowKind {\n             fcx: self,"}, {"sha": "cc99ae201993921d93a322758b7af8bafd1c6e81", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=f62c6e1c762b60bae0bcc60ed344feee99f5c610", "patch": "@@ -12,7 +12,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n     let mut used_trait_imports = DefIdSet::default();\n     for &body_id in tcx.hir().krate().bodies.keys() {\n         let item_def_id = tcx.hir().body_owner_def_id(body_id);\n-        let imports = tcx.used_trait_imports(item_def_id);\n+        let imports = tcx.used_trait_imports(item_def_id.to_def_id());\n         debug!(\"GatherVisitor: item_def_id={:?} with imports {:#?}\", item_def_id, imports);\n         used_trait_imports.extend(imports.iter());\n     }"}, {"sha": "3ab906b807e81ef08e01d422896e77f02271e5f8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62c6e1c762b60bae0bcc60ed344feee99f5c610/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f62c6e1c762b60bae0bcc60ed344feee99f5c610", "patch": "@@ -419,7 +419,10 @@ impl Clean<Lifetime> for hir::GenericParam<'_> {\n impl Clean<Constant> for hir::ConstArg {\n     fn clean(&self, cx: &DocContext<'_>) -> Constant {\n         Constant {\n-            type_: cx.tcx.type_of(cx.tcx.hir().body_owner_def_id(self.value.body)).clean(cx),\n+            type_: cx\n+                .tcx\n+                .type_of(cx.tcx.hir().body_owner_def_id(self.value.body).to_def_id())\n+                .clean(cx),\n             expr: print_const_expr(cx, self.value.body),\n             value: None,\n             is_literal: is_literal_expr(cx, self.value.body.hir_id),"}]}