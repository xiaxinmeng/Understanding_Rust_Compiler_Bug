{"sha": "7a0fb902bc3c02f7832f8fed074d8dfd21bf7ea8", "node_id": "C_kwDOAAsO6NoAKDdhMGZiOTAyYmMzYzAyZjc4MzJmOGZlZDA3NGQ4ZGZkMjFiZjdlYTg", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-03-18T02:18:39Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-04-12T22:50:10Z"}, "message": "Tweak output for 'add line' suggestion", "tree": {"sha": "7858f7ffdcccdde67528c67fd3f0c63daf4bfe73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7858f7ffdcccdde67528c67fd3f0c63daf4bfe73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a0fb902bc3c02f7832f8fed074d8dfd21bf7ea8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a0fb902bc3c02f7832f8fed074d8dfd21bf7ea8", "html_url": "https://github.com/rust-lang/rust/commit/7a0fb902bc3c02f7832f8fed074d8dfd21bf7ea8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a0fb902bc3c02f7832f8fed074d8dfd21bf7ea8/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b95029f176e5cdaa88de8ca7f5f59fd15a6d850", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b95029f176e5cdaa88de8ca7f5f59fd15a6d850", "html_url": "https://github.com/rust-lang/rust/commit/6b95029f176e5cdaa88de8ca7f5f59fd15a6d850"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "3c7e08ebeae8524c3d8c631f6776288034f37545", "filename": "tests/ui/crashes/ice-6252.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a0fb902bc3c02f7832f8fed074d8dfd21bf7ea8/tests%2Fui%2Fcrashes%2Fice-6252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0fb902bc3c02f7832f8fed074d8dfd21bf7ea8/tests%2Fui%2Fcrashes%2Fice-6252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6252.stderr?ref=7a0fb902bc3c02f7832f8fed074d8dfd21bf7ea8", "patch": "@@ -6,11 +6,14 @@ LL |     _n: PhantomData,\n    |\n help: consider importing one of these items\n    |\n-LL | use core::marker::PhantomData;\n+LL + use core::marker::PhantomData;\n+LL | trait TypeVal<T> {\n    |\n-LL | use serde::__private::PhantomData;\n+LL + use serde::__private::PhantomData;\n+LL | trait TypeVal<T> {\n    |\n-LL | use std::marker::PhantomData;\n+LL + use std::marker::PhantomData;\n+LL | trait TypeVal<T> {\n    |\n \n error[E0412]: cannot find type `VAL` in this scope"}, {"sha": "8089f5ea0fcb2ec15891dc4fdb4b77ffa11074e8", "filename": "tests/ui/derivable_impls.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7a0fb902bc3c02f7832f8fed074d8dfd21bf7ea8/tests%2Fui%2Fderivable_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0fb902bc3c02f7832f8fed074d8dfd21bf7ea8/tests%2Fui%2Fderivable_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderivable_impls.stderr?ref=7a0fb902bc3c02f7832f8fed074d8dfd21bf7ea8", "patch": "@@ -14,7 +14,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | struct FooDefault<'a> {\n    |\n \n error: this `impl` can be derived\n@@ -30,7 +31,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | struct TupleDefault(bool, i32, u64);\n    |\n \n error: this `impl` can be derived\n@@ -46,7 +48,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | struct StrDefault<'a>(&'a str);\n    |\n \n error: this `impl` can be derived\n@@ -62,7 +65,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | struct Y(u32);\n    |\n \n error: this `impl` can be derived\n@@ -78,7 +82,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | struct WithoutSelfCurly {\n    |\n \n error: this `impl` can be derived\n@@ -94,7 +99,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | struct WithoutSelfParan(bool);\n    |\n \n error: this `impl` can be derived\n@@ -110,7 +116,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | pub struct RepeatDefault1 {\n    |\n \n error: this `impl` can be derived\n@@ -126,7 +133,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it...\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | pub enum SimpleEnum {\n    |\n help: ...and mark the default variant\n    |"}, {"sha": "9b0a2f6ca5bf240ccd19144f5b537ec40ed122a6", "filename": "tests/ui/new_without_default.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a0fb902bc3c02f7832f8fed074d8dfd21bf7ea8/tests%2Fui%2Fnew_without_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0fb902bc3c02f7832f8fed074d8dfd21bf7ea8/tests%2Fui%2Fnew_without_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.stderr?ref=7a0fb902bc3c02f7832f8fed074d8dfd21bf7ea8", "patch": "@@ -14,6 +14,7 @@ LL +     fn default() -> Self {\n LL +         Self::new()\n LL +     }\n LL + }\n+LL | impl Foo {\n    |\n \n error: you should consider adding a `Default` implementation for `Bar`\n@@ -31,6 +32,7 @@ LL +     fn default() -> Self {\n LL +         Self::new()\n LL +     }\n LL + }\n+LL | impl Bar {\n    |\n \n error: you should consider adding a `Default` implementation for `LtKo<'c>`\n@@ -48,6 +50,7 @@ LL +     fn default() -> Self {\n LL +         Self::new()\n LL +     }\n LL + }\n+LL | impl<'c> LtKo<'c> {\n    |\n \n error: you should consider adding a `Default` implementation for `NewNotEqualToDerive`\n@@ -65,6 +68,7 @@ LL +     fn default() -> Self {\n LL +         Self::new()\n LL +     }\n LL + }\n+LL | impl NewNotEqualToDerive {\n    |\n \n error: you should consider adding a `Default` implementation for `FooGenerics<T>`\n@@ -82,6 +86,7 @@ LL +     fn default() -> Self {\n LL +         Self::new()\n LL +     }\n LL + }\n+LL | impl<T> FooGenerics<T> {\n    |\n \n error: you should consider adding a `Default` implementation for `BarGenerics<T>`\n@@ -99,6 +104,7 @@ LL +     fn default() -> Self {\n LL +         Self::new()\n LL +     }\n LL + }\n+LL | impl<T: Copy> BarGenerics<T> {\n    |\n \n error: you should consider adding a `Default` implementation for `Foo<T>`"}]}