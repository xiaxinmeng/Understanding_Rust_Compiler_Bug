{"sha": "9664122b1ff04dd8a853de602cd64d86a6473248", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NjQxMjJiMWZmMDRkZDhhODUzZGU2MDJjZDY0ZDg2YTY0NzMyNDg=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-26T20:46:38Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-14T20:12:46Z"}, "message": "Simplify function signature in opaque_types", "tree": {"sha": "7fe489340d61e5aaa18421070739d163b0967e4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fe489340d61e5aaa18421070739d163b0967e4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9664122b1ff04dd8a853de602cd64d86a6473248", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9664122b1ff04dd8a853de602cd64d86a6473248", "html_url": "https://github.com/rust-lang/rust/commit/9664122b1ff04dd8a853de602cd64d86a6473248", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9664122b1ff04dd8a853de602cd64d86a6473248/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43dae91821afd70eeea46bfe0a793321b7e77526", "url": "https://api.github.com/repos/rust-lang/rust/commits/43dae91821afd70eeea46bfe0a793321b7e77526", "html_url": "https://github.com/rust-lang/rust/commit/43dae91821afd70eeea46bfe0a793321b7e77526"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "1d69f598256f25f652012cb2f69b6357aa1a910b", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9664122b1ff04dd8a853de602cd64d86a6473248/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9664122b1ff04dd8a853de602cd64d86a6473248/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=9664122b1ff04dd8a853de602cd64d86a6473248", "patch": "@@ -550,13 +550,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// # Parameters\n     ///\n     /// - `def_id`, the `impl Trait` type\n-    /// - `opaque_defn`, the opaque definition created in `instantiate_opaque_types`\n+    /// - `substs`, the substs  used to instantiate this opaque type\n     /// - `instantiated_ty`, the inferred type C1 -- fully resolved, lifted version of\n     ///   `opaque_defn.concrete_ty`\n     pub fn infer_opaque_definition_from_instantiation(\n         &self,\n         def_id: DefId,\n-        opaque_defn: &OpaqueTypeDecl<'tcx>,\n+        substs: SubstsRef<'tcx>,\n         instantiated_ty: Ty<'tcx>,\n         span: Span,\n     ) -> Ty<'tcx> {\n@@ -572,12 +572,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         // `impl Trait` return type, resulting in the parameters\n         // shifting.\n         let id_substs = InternalSubsts::identity_for_item(self.tcx, def_id);\n-        let map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>> = opaque_defn\n-            .substs\n-            .iter()\n-            .enumerate()\n-            .map(|(index, subst)| (*subst, id_substs[index]))\n-            .collect();\n+        let map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>> =\n+            substs.iter().enumerate().map(|(index, subst)| (*subst, id_substs[index])).collect();\n \n         // Convert the type from the function into a type valid outside\n         // the function, by replacing invalid regions with 'static,"}, {"sha": "758ce6b5222f87dfa26febd677d2c1b7e3039978", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9664122b1ff04dd8a853de602cd64d86a6473248/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9664122b1ff04dd8a853de602cd64d86a6473248/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=9664122b1ff04dd8a853de602cd64d86a6473248", "patch": "@@ -444,7 +444,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             // figures out the concrete type with `U`, but the stored type is with `T`.\n             let definition_ty = self.fcx.infer_opaque_definition_from_instantiation(\n                 def_id,\n-                opaque_defn,\n+                opaque_defn.substs,\n                 instantiated_ty,\n                 span,\n             );"}]}