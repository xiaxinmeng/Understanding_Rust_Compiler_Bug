{"sha": "b93843e1c9fa15d29c71fa96834e232c856b5bb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5Mzg0M2UxYzlmYTE1ZDI5YzcxZmE5NjgzNGUyMzJjODU2YjViYjY=", "commit": {"author": {"name": "Jeff Belgum", "email": "jeffbelgum@gmail.com", "date": "2015-01-25T01:23:26Z"}, "committer": {"name": "Jeff Belgum", "email": "jeffbelgum@gmail.com", "date": "2015-01-26T22:08:38Z"}, "message": "add split_off method to vec with tests", "tree": {"sha": "a2dca38a236e7514f76e8fe0efe6d8c9e63143ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2dca38a236e7514f76e8fe0efe6d8c9e63143ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b93843e1c9fa15d29c71fa96834e232c856b5bb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b93843e1c9fa15d29c71fa96834e232c856b5bb6", "html_url": "https://github.com/rust-lang/rust/commit/b93843e1c9fa15d29c71fa96834e232c856b5bb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b93843e1c9fa15d29c71fa96834e232c856b5bb6/comments", "author": {"login": "JeffBelgum", "id": 4001770, "node_id": "MDQ6VXNlcjQwMDE3NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/4001770?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffBelgum", "html_url": "https://github.com/JeffBelgum", "followers_url": "https://api.github.com/users/JeffBelgum/followers", "following_url": "https://api.github.com/users/JeffBelgum/following{/other_user}", "gists_url": "https://api.github.com/users/JeffBelgum/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffBelgum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffBelgum/subscriptions", "organizations_url": "https://api.github.com/users/JeffBelgum/orgs", "repos_url": "https://api.github.com/users/JeffBelgum/repos", "events_url": "https://api.github.com/users/JeffBelgum/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffBelgum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeffBelgum", "id": 4001770, "node_id": "MDQ6VXNlcjQwMDE3NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/4001770?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffBelgum", "html_url": "https://github.com/JeffBelgum", "followers_url": "https://api.github.com/users/JeffBelgum/followers", "following_url": "https://api.github.com/users/JeffBelgum/following{/other_user}", "gists_url": "https://api.github.com/users/JeffBelgum/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffBelgum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffBelgum/subscriptions", "organizations_url": "https://api.github.com/users/JeffBelgum/orgs", "repos_url": "https://api.github.com/users/JeffBelgum/repos", "events_url": "https://api.github.com/users/JeffBelgum/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffBelgum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16286f5cf921a9de463d8a744c33f49837698c3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/16286f5cf921a9de463d8a744c33f49837698c3d", "html_url": "https://github.com/rust-lang/rust/commit/16286f5cf921a9de463d8a744c33f49837698c3d"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "03736b3a3ff0d9d5d1748844a68ec9b4afc1ae53", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b93843e1c9fa15d29c71fa96834e232c856b5bb6/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b93843e1c9fa15d29c71fa96834e232c856b5bb6/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=b93843e1c9fa15d29c71fa96834e232c856b5bb6", "patch": "@@ -989,6 +989,42 @@ impl<T> Vec<T> {\n             result\n         }\n     }\n+\n+    /// Splits the collection into two at the given index.\n+    ///\n+    /// Returns a newly allocated `Self`. `self` contains elements `[0, at)`,\n+    /// and the returned `Self` contains elements `[at, len)`.\n+    ///\n+    /// Note that the capacity of `self` does not change.\n+    ///\n+    /// # Examples\n+    /// ```rust\n+    /// let mut vec = vec![1,2,3];\n+    /// let vec2 = vec.split_off(1);\n+    /// assert_eq!(vec, vec![1]);\n+    /// assert_eq!(vec2, vec![2, 3]);\n+    /// ```\n+    #[inline]\n+    #[unstable = \"new API, waiting for dust to settle\"]\n+    pub fn split_off(&mut self, at: usize) -> Self {\n+        assert!(at < self.len(), \"`at` out of bounds\");\n+\n+        let other_len = self.len - at;\n+        let mut other = Vec::with_capacity(other_len);\n+\n+        // Unsafely `set_len` and copy items to `other`.\n+        unsafe {\n+            self.set_len(at);\n+            other.set_len(other_len);\n+\n+            ptr::copy_nonoverlapping_memory(\n+                other.as_mut_ptr(),\n+                self.as_ptr().offset(at as isize),\n+                other.len());\n+        }\n+        other\n+    }\n+\n }\n \n impl<T: Clone> Vec<T> {\n@@ -1956,7 +1992,7 @@ mod tests {\n     fn test_slice_from_mut() {\n         let mut values = vec![1u8,2,3,4,5];\n         {\n-            let slice = values.slice_from_mut(2);\n+            let slice = &mut values[2 ..];\n             assert!(slice == [3, 4, 5]);\n             for p in slice.iter_mut() {\n                 *p += 2;\n@@ -1970,7 +2006,7 @@ mod tests {\n     fn test_slice_to_mut() {\n         let mut values = vec![1u8,2,3,4,5];\n         {\n-            let slice = values.slice_to_mut(2);\n+            let slice = &mut values[.. 2];\n             assert!(slice == [1, 2]);\n             for p in slice.iter_mut() {\n                 *p += 1;\n@@ -2344,6 +2380,14 @@ mod tests {\n         assert_eq!(vec2, vec![]);\n     }\n \n+    #[test]\n+    fn test_split_off() {\n+        let mut vec = vec![1, 2, 3, 4, 5, 6];\n+        let vec2 = vec.split_off(4);\n+        assert_eq!(vec, vec![1, 2, 3, 4]);\n+        assert_eq!(vec2, vec![5, 6]);\n+    }\n+\n     #[bench]\n     fn bench_new(b: &mut Bencher) {\n         b.iter(|| {"}]}