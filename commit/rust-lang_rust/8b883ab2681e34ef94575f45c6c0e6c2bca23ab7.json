{"sha": "8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiODgzYWIyNjgxZTM0ZWY5NDU3NWY0NWM2YzBlNmMyYmNhMjNhYjc=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-12-28T22:33:18Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-01-04T22:16:13Z"}, "message": "Add syntax for negative implementations of traits\n\nThis commit introduces the syntax for negative implmenetations of traits\nas shown below:\n\n`impl !Trait for Type {}`\n\ncc #13231\nPart of RFC #3", "tree": {"sha": "899739abf4baa17ccbc570add56eca1987d030f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/899739abf4baa17ccbc570add56eca1987d030f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "html_url": "https://github.com/rust-lang/rust/commit/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/470118f3e915cdc8f936aca0640b28a7a3d8dc6c", "html_url": "https://github.com/rust-lang/rust/commit/470118f3e915cdc8f936aca0640b28a7a3d8dc6c"}], "stats": {"total": 215, "additions": 176, "deletions": 39}, "files": [{"sha": "bd3c22065c1d013a506cdacfca15d50fac343da9", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -1762,7 +1762,7 @@ impl LintPass for Stability {\n                     }\n                 }\n             }\n-            ast::ItemImpl(_, _, Some(ref t), _, _) => {\n+            ast::ItemImpl(_, _, _, Some(ref t), _, _) => {\n                 let id = ty::trait_ref_to_def_id(cx.tcx, t);\n                 self.lint(cx, id, t.path.span);\n             }"}, {"sha": "ca7c65c8e2bc220223d2845e4832206e7fed0b9b", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -259,3 +259,5 @@ pub const tag_unsafety: uint = 0xb1;\n \n pub const tag_associated_type_names: uint = 0xb2;\n pub const tag_associated_type_name: uint = 0xb3;\n+\n+pub const tag_polarity: uint = 0xb4;"}, {"sha": "59679f0bc7cd0ec0a6fee4585a6c05f66a4dc7ed", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -1207,7 +1207,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             None => {}\n         }\n       }\n-      ast::ItemImpl(unsafety, _, ref opt_trait, ref ty, ref ast_items) => {\n+      ast::ItemImpl(unsafety, polarity, _, ref opt_trait, ref ty, ref ast_items) => {\n         // We need to encode information about the default methods we\n         // have inherited, so we drive this based on the impl structure.\n         let impl_items = tcx.impl_items.borrow();\n@@ -1221,6 +1221,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_name(rbml_w, item.ident.name);\n         encode_attributes(rbml_w, item.attrs[]);\n         encode_unsafety(rbml_w, unsafety);\n+        encode_polarity(rbml_w, polarity);\n         match ty.node {\n             ast::TyPath(ref path, _) if path.segments.len() == 1 => {\n                 let ident = path.segments.last().unwrap().identifier;\n@@ -1704,6 +1705,14 @@ fn encode_associated_type_names(rbml_w: &mut Encoder, names: &[ast::Name]) {\n     rbml_w.end_tag();\n }\n \n+fn encode_polarity(rbml_w: &mut Encoder, polarity: ast::ImplPolarity) {\n+    let byte: u8 = match polarity {\n+        ast::ImplPolarity::Positive => 0,\n+        ast::ImplPolarity::Negative => 1,\n+    };\n+    rbml_w.wr_tagged_u8(tag_polarity, byte);\n+}\n+\n fn encode_crate_deps(rbml_w: &mut Encoder, cstore: &cstore::CStore) {\n     fn get_ordered_deps(cstore: &cstore::CStore) -> Vec<decoder::CrateDep> {\n         // Pull the cnums and name,vers,hash out of cstore\n@@ -1885,7 +1894,7 @@ struct ImplVisitor<'a, 'b:'a, 'c:'a, 'tcx:'b> {\n \n impl<'a, 'b, 'c, 'tcx, 'v> Visitor<'v> for ImplVisitor<'a, 'b, 'c, 'tcx> {\n     fn visit_item(&mut self, item: &ast::Item) {\n-        if let ast::ItemImpl(_, _, Some(ref trait_ref), _, _) = item.node {\n+        if let ast::ItemImpl(_, _, _, Some(ref trait_ref), _, _) = item.node {\n             let def_map = &self.ecx.tcx.def_map;\n             let trait_def = def_map.borrow()[trait_ref.ref_id].clone();\n             let def_id = trait_def.def_id();"}, {"sha": "2e40bdd001a1748404e5948ceb4375c1771a232b", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -355,7 +355,7 @@ impl<'v> Visitor<'v> for LifeSeeder {\n             ast::ItemEnum(ref enum_def, _) if allow_dead_code => {\n                 self.worklist.extend(enum_def.variants.iter().map(|variant| variant.node.id));\n             }\n-            ast::ItemImpl(_, _, Some(ref _trait_ref), _, ref impl_items) => {\n+            ast::ItemImpl(_, _, _, Some(ref _trait_ref), _, ref impl_items) => {\n                 for impl_item in impl_items.iter() {\n                     match *impl_item {\n                         ast::MethodImplItem(ref method) => {"}, {"sha": "c015c2307f65ed9f1169fb5fd63366635bccab2f", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -1712,7 +1712,7 @@ fn lifetimes_in_scope(tcx: &ty::ctxt,\n         match tcx.map.find(parent) {\n             Some(node) => match node {\n                 ast_map::NodeItem(item) => match item.node {\n-                    ast::ItemImpl(_, ref gen, _, _, _) => {\n+                    ast::ItemImpl(_, _, ref gen, _, _, _) => {\n                         taken.push_all(gen.lifetimes.as_slice());\n                     }\n                     _ => ()"}, {"sha": "ace0882a12c598df61c18c58d32d2559b3e4a33f", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -287,7 +287,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n             //   undefined symbols at linkage time if this case is not handled.\n             //\n             // * Private trait impls for private types can be completely ignored\n-            ast::ItemImpl(_, _, _, ref ty, ref impl_items) => {\n+            ast::ItemImpl(_, _, _, _, ref ty, ref impl_items) => {\n                 let public_ty = match ty.node {\n                     ast::TyPath(_, id) => {\n                         match self.tcx.def_map.borrow()[id].clone() {\n@@ -657,7 +657,7 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n                     // invoked, and the struct/enum itself is private. Crawl\n                     // back up the chains to find the relevant struct/enum that\n                     // was private.\n-                    ast::ItemImpl(_, _, _, ref ty, _) => {\n+                    ast::ItemImpl(_, _, _, _, ref ty, _) => {\n                         let id = match ty.node {\n                             ast::TyPath(_, id) => id,\n                             _ => return Some((err_span, err_msg, None)),\n@@ -1137,7 +1137,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n         match item.node {\n             // implementations of traits don't need visibility qualifiers because\n             // that's controlled by having the trait in scope.\n-            ast::ItemImpl(_, _, Some(..), _, ref impl_items) => {\n+            ast::ItemImpl(_, _, _, Some(..), _, ref impl_items) => {\n                 check_inherited(item.span, item.vis,\n                                 \"visibility qualifiers have no effect on trait \\\n                                  impls\");\n@@ -1216,7 +1216,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n         };\n         check_inherited(tcx, item.span, item.vis);\n         match item.node {\n-            ast::ItemImpl(_, _, _, _, ref impl_items) => {\n+            ast::ItemImpl(_, _, _, _, _, ref impl_items) => {\n                 for impl_item in impl_items.iter() {\n                     match *impl_item {\n                         ast::MethodImplItem(ref m) => {\n@@ -1361,7 +1361,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n             // (i.e. we could just return here to not check them at\n             // all, or some worse estimation of whether an impl is\n             // publicly visible.\n-            ast::ItemImpl(_, ref g, ref trait_ref, ref self_, ref impl_items) => {\n+            ast::ItemImpl(_, _, ref g, ref trait_ref, ref self_, ref impl_items) => {\n                 // `impl [... for] Private` is never visible.\n                 let self_contains_private;\n                 // impl [... for] Public<...>, but not `impl [... for]"}, {"sha": "5736e3072862aadc9b195f79e8829970cb9439f2", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -55,7 +55,7 @@ fn item_might_be_inlined(item: &ast::Item) -> bool {\n     }\n \n     match item.node {\n-        ast::ItemImpl(_, ref generics, _, _, _) |\n+        ast::ItemImpl(_, _, ref generics, _, _, _) |\n         ast::ItemFn(_, _, _, ref generics, _) => {\n             generics_require_inlining(generics)\n         }\n@@ -216,7 +216,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                                       .map\n                                       .expect_item(impl_did.node)\n                                       .node {\n-                                ast::ItemImpl(_, ref generics, _, _, _) => {\n+                                ast::ItemImpl(_, _, ref generics, _, _, _) => {\n                                     generics_require_inlining(generics)\n                                 }\n                                 _ => false"}, {"sha": "c9273e0b8d5b13747dec1d79965693326df390c2", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -106,7 +106,7 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n                 ast::ItemEnum(_, ref generics) |\n                 ast::ItemStruct(_, ref generics) |\n                 ast::ItemTrait(_, ref generics, _, _) |\n-                ast::ItemImpl(_, ref generics, _, _, _) => {\n+                ast::ItemImpl(_, _, ref generics, _, _, _) => {\n                     // These kinds of items have only early bound lifetime parameters.\n                     let lifetimes = &generics.lifetimes;\n                     let early_scope = EarlyScope(subst::TypeSpace, lifetimes, &ROOT_SCOPE);"}, {"sha": "362d5fedaa376f7463d235e7255947d0df1db1cb", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -82,7 +82,7 @@ impl<'v> Visitor<'v> for Annotator {\n         // stability of the trait. This is WRONG, but expedient to get\n         // libstd stabilized for the 1.0 release.\n         let use_parent = match i.node {\n-            ast::ItemImpl(_, _, Some(_), _, _) => false,\n+            ast::ItemImpl(_, _, _, Some(_), _, _) => false,\n             _ => true,\n         };\n "}, {"sha": "9b85d8d2290f0dd1ac78de4320f82d149270ae1a", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -5128,7 +5128,7 @@ pub fn impl_trait_ref<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId)\n             match cx.map.find(id.node) {\n                 Some(ast_map::NodeItem(item)) => {\n                     match item.node {\n-                        ast::ItemImpl(_, _, ref opt_trait, _, _) => {\n+                        ast::ItemImpl(_, _, _, ref opt_trait, _, _) => {\n                             match opt_trait {\n                                 &Some(ref t) => {\n                                     let trait_ref = ty::node_id_to_trait_ref(cx, t.ref_id);"}, {"sha": "10788f9f7cb83e67c296651d0273dc7c22af7161", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -386,7 +386,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 parent.clone()\n             }\n \n-            ItemImpl(_, _, None, ref ty, ref impl_items) => {\n+            ItemImpl(_, _, _, None, ref ty, ref impl_items) => {\n                 // If this implements an anonymous trait, then add all the\n                 // methods within to a new module, if the type was defined\n                 // within this module.\n@@ -527,7 +527,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 parent.clone()\n             }\n \n-            ItemImpl(_, _, Some(_), _, _) => parent.clone(),\n+            ItemImpl(_, _, _, Some(_), _, _) => parent.clone(),\n \n             ItemTrait(_, _, _, ref items) => {\n                 let name_bindings ="}, {"sha": "59f0964a230c37c7c4732c0a0105915f6d14236a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -972,7 +972,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n     }\n \n-\n     // Import resolution\n     //\n     // This is a fixed-point algorithm. We resolve imports until our efforts\n@@ -2841,7 +2840,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 });\n             }\n \n-            ItemImpl(_,\n+            ItemImpl(_, _,\n                      ref generics,\n                      ref implemented_traits,\n                      ref self_type,"}, {"sha": "8e6276b61f949eecfe4afdae958965bcfc5d63e7", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -283,7 +283,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                 NodeItem(item) => {\n                     scope_id = item.id;\n                     match item.node {\n-                        ast::ItemImpl(_, _, _, ref ty, _) => {\n+                        ast::ItemImpl(_, _, _, _, ref ty, _) => {\n                             let mut result = String::from_str(\"<\");\n                             result.push_str(ty_to_string(&**ty)[]);\n \n@@ -1040,7 +1040,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n                 self.process_const(item, &**typ, &**expr),\n             ast::ItemStruct(ref def, ref ty_params) => self.process_struct(item, &**def, ty_params),\n             ast::ItemEnum(ref def, ref ty_params) => self.process_enum(item, def, ty_params),\n-            ast::ItemImpl(_,\n+            ast::ItemImpl(_, _,\n                           ref ty_params,\n                           ref trait_ref,\n                           ref typ,"}, {"sha": "8c6697f0e9d154426774910d02065504af8b669f", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -2317,7 +2317,7 @@ pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n         let mut v = TransItemVisitor{ ccx: ccx };\n         v.visit_block(&**body);\n       }\n-      ast::ItemImpl(_, ref generics, _, _, ref impl_items) => {\n+      ast::ItemImpl(_, _, ref generics, _, _, ref impl_items) => {\n         meth::trans_impl(ccx,\n                          item.ident,\n                          impl_items[],"}, {"sha": "9cd43e9182b93067edd21ac3cf806511aab90bc3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -699,7 +699,7 @@ pub fn check_item(ccx: &CrateCtxt, it: &ast::Item) {\n         let param_env = ParameterEnvironment::for_item(ccx.tcx, it.id);\n         check_bare_fn(ccx, &**decl, &**body, it.id, fn_pty.ty, param_env);\n       }\n-      ast::ItemImpl(_, _, _, _, ref impl_items) => {\n+      ast::ItemImpl(_, _, _, _, _, ref impl_items) => {\n         debug!(\"ItemImpl {} with id {}\", token::get_ident(it.ident), it.id);\n \n         let impl_pty = ty::lookup_item_type(ccx.tcx, ast_util::local_def(it.id));"}, {"sha": "bb2c6221e2162b179294db022c207a96ca537d4c", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -102,7 +102,7 @@ impl<'a, 'tcx, 'v> visit::Visitor<'v> for CoherenceCheckVisitor<'a, 'tcx> {\n         //debug!(\"(checking coherence) item '{}'\", token::get_ident(item.ident));\n \n         match item.node {\n-            ItemImpl(_, _, ref opt_trait, _, _) => {\n+            ItemImpl(_, _, _, ref opt_trait, _, _) => {\n                 match opt_trait.clone() {\n                     Some(opt_trait) => {\n                         self.cc.check_implementation(item, &[opt_trait]);\n@@ -283,7 +283,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n     // Converts an implementation in the AST to a vector of items.\n     fn create_impl_from_item(&self, item: &Item) -> Vec<ImplOrTraitItemId> {\n         match item.node {\n-            ItemImpl(_, _, ref trait_refs, _, ref ast_items) => {\n+            ItemImpl(_, _, _, ref trait_refs, _, ref ast_items) => {\n                 let mut items: Vec<ImplOrTraitItemId> =\n                         ast_items.iter()\n                                  .map(|ast_item| {"}, {"sha": "d90bfe04ea1e78ceaa700c888b7a604a2e21f71e", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -44,7 +44,7 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n     fn visit_item(&mut self, item: &'v ast::Item) {\n         let def_id = ast_util::local_def(item.id);\n         match item.node {\n-            ast::ItemImpl(_, _, None, _, _) => {\n+            ast::ItemImpl(_, _, _, None, _, _) => {\n                 // For inherent impls, self type must be a nominal type\n                 // defined in this crate.\n                 debug!(\"coherence2::orphan check: inherent impl {}\", item.repr(self.tcx));\n@@ -69,7 +69,7 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n                     }\n                 }\n             }\n-            ast::ItemImpl(_, _, Some(_), _, _) => {\n+            ast::ItemImpl(_, _, _, Some(_), _, _) => {\n                 // \"Trait\" impl\n                 debug!(\"coherence2::orphan check: trait impl {}\", item.repr(self.tcx));\n                 match traits::orphan_check(self.tcx, def_id) {"}, {"sha": "1acea6fd58179eac948cd3085b65f8247ffa2981", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -30,7 +30,7 @@ struct UnsafetyChecker<'cx, 'tcx:'cx> {\n impl<'cx, 'tcx,'v> visit::Visitor<'v> for UnsafetyChecker<'cx, 'tcx> {\n     fn visit_item(&mut self, item: &'v ast::Item) {\n         match item.node {\n-            ast::ItemImpl(unsafety, _, _, _, _) => {\n+            ast::ItemImpl(unsafety, _, _, _, _, _) => {\n                 match ty::impl_trait_ref(self.tcx, ast_util::local_def(item.id)) {\n                     None => {\n                         // Inherent impl."}, {"sha": "7c88404eb64e4959ca0f8811b8a6e72ece0a637b", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -549,7 +549,7 @@ pub fn convert(ccx: &CrateCtxt, it: &ast::Item) {\n                                    enum_definition.variants.as_slice(),\n                                    generics);\n         },\n-        ast::ItemImpl(_,\n+        ast::ItemImpl(_, _,\n                       ref generics,\n                       ref opt_trait_ref,\n                       ref selfty,"}, {"sha": "99afef4173fdd9213433c00cf236078b7e7db50f", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -182,6 +182,7 @@ pub struct Trait {\n \n pub struct Impl {\n     pub unsafety: ast::Unsafety,\n+    pub polarity: ast::ImplPolarity,\n     pub generics: ast::Generics,\n     pub trait_: Option<ast::TraitRef>,\n     pub for_: P<ast::Ty>,"}, {"sha": "c98ec97ab87f0b806eb83c297b8428f78e186835", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -337,9 +337,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 };\n                 om.traits.push(t);\n             },\n-            ast::ItemImpl(unsafety, ref gen, ref tr, ref ty, ref items) => {\n+            ast::ItemImpl(unsafety, polarity, ref gen, ref tr, ref ty, ref items) => {\n                 let i = Impl {\n                     unsafety: unsafety,\n+                    polarity: polarity,\n                     generics: gen.clone(),\n                     trait_: tr.clone(),\n                     for_: ty.clone(),"}, {"sha": "c9c3ce45f207cdb9c803db1e136d7b788478c833", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -1299,6 +1299,24 @@ impl fmt::Show for Unsafety {\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash)]\n+pub enum ImplPolarity {\n+    /// impl Trait for Type\n+    Positive,\n+    /// impl !Trait for Type\n+    Negative,\n+}\n+\n+impl fmt::Show for ImplPolarity {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            ImplPolarity::Positive => \"positive\".fmt(f),\n+            ImplPolarity::Negative => \"negative\".fmt(f),\n+        }\n+    }\n+}\n+\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum FunctionRetTy {\n     /// Functions with return type ! that always\n@@ -1587,6 +1605,7 @@ pub enum Item_ {\n               TyParamBounds,\n               Vec<TraitItem>),\n     ItemImpl(Unsafety,\n+             ImplPolarity,\n              Generics,\n              Option<TraitRef>, // (optional) trait this impl implements\n              P<Ty>, // self"}, {"sha": "ce7b964959f119268bb749329d75e882c9bf1b20", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -755,7 +755,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n         let parent = self.parent;\n         self.parent = i.id;\n         match i.node {\n-            ItemImpl(_, _, _, _, ref impl_items) => {\n+            ItemImpl(_, _, _, _, _, ref impl_items) => {\n                 for impl_item in impl_items.iter() {\n                     match *impl_item {\n                         MethodImplItem(ref m) => {"}, {"sha": "3f91831a5df76c85f2dd4b1c62164008bac1da11", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -133,11 +133,11 @@ fn fold_item_underscore<F>(cx: &mut Context<F>, item: ast::Item_) -> ast::Item_\n     F: FnMut(&[ast::Attribute]) -> bool\n {\n     let item = match item {\n-        ast::ItemImpl(u, a, b, c, impl_items) => {\n+        ast::ItemImpl(u, o, a, b, c, impl_items) => {\n             let impl_items = impl_items.into_iter()\n                                        .filter(|ii| impl_item_in_cfg(cx, ii))\n                                        .collect();\n-            ast::ItemImpl(u, a, b, c, impl_items)\n+            ast::ItemImpl(u, o, a, b, c, impl_items)\n         }\n         ast::ItemTrait(u, a, b, methods) => {\n             let methods = methods.into_iter()"}, {"sha": "459abf15b33dac93276359ef742e0c6ce84d91fa", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -488,6 +488,7 @@ impl<'a> TraitDef<'a> {\n             ident,\n             a,\n             ast::ItemImpl(ast::Unsafety::Normal,\n+                          ast::ImplPolarity::Positive,\n                           trait_generics,\n                           opt_trait_ref,\n                           self_type,"}, {"sha": "b3f30dd4581c9ed6edd5453a7621df805fc61cc7", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -1111,7 +1111,7 @@ impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n \n     fn fold_item(&mut self, item: P<ast::Item>) -> SmallVector<P<ast::Item>> {\n         let prev_type = self.current_impl_type.clone();\n-        if let ast::Item_::ItemImpl(_, _, _, ref ty, _) = item.node {\n+        if let ast::Item_::ItemImpl(_, _, _, _, ref ty, _) = item.node {\n             self.current_impl_type = Some(ty.clone());\n         }\n "}, {"sha": "29f8ff9e8126d08d5454a7c7e7424d4ef459588e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -291,7 +291,7 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                 }\n             }\n \n-            ast::ItemImpl(_, _, _, _, ref items) => {\n+            ast::ItemImpl(_, _, _, _, _, ref items) => {\n                 if attr::contains_name(i.attrs[],\n                                        \"unsafe_destructor\") {\n                     self.gate_feature(\"unsafe_destructor\","}, {"sha": "35b2e5dbc5381b995bf8845e3c4edaad0c9fa8ee", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -1014,7 +1014,7 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n             let struct_def = folder.fold_struct_def(struct_def);\n             ItemStruct(struct_def, folder.fold_generics(generics))\n         }\n-        ItemImpl(unsafety, generics, ifce, ty, impl_items) => {\n+        ItemImpl(unsafety, polarity, generics, ifce, ty, impl_items) => {\n             let mut new_impl_items = Vec::new();\n             for impl_item in impl_items.iter() {\n                 match *impl_item {\n@@ -1037,6 +1037,7 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n                 }\n             };\n             ItemImpl(unsafety,\n+                     polarity,\n                      folder.fold_generics(generics),\n                      ifce,\n                      folder.fold_ty(ty),\n@@ -1166,7 +1167,7 @@ pub fn noop_fold_item_simple<T: Folder>(Item {id, ident, attrs, node, vis, span}\n     let node = folder.fold_item_underscore(node);\n     let ident = match node {\n         // The node may have changed, recompute the \"pretty\" impl name.\n-        ItemImpl(_, _, ref maybe_trait, ref ty, _) => {\n+        ItemImpl(_, _, _, ref maybe_trait, ref ty, _) => {\n             ast_util::impl_pretty_name(maybe_trait, &**ty)\n         }\n         _ => ident"}, {"sha": "b4223a989ba1fd296c5103779d711ef75ca9923f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -4802,6 +4802,13 @@ impl<'a> Parser<'a> {\n         // allow this to be parsed as a trait.\n         let could_be_trait = self.token != token::OpenDelim(token::Paren);\n \n+        let neg_span = self.span;\n+        let polarity = if self.eat(&token::Not) {\n+            ast::ImplPolarity::Negative\n+        } else {\n+            ast::ImplPolarity::Positive\n+        };\n+\n         // Parse the trait.\n         let mut ty = self.parse_ty_sum();\n \n@@ -4824,6 +4831,14 @@ impl<'a> Parser<'a> {\n             ty = self.parse_ty_sum();\n             opt_trait_ref\n         } else {\n+            match polarity {\n+                ast::ImplPolarity::Negative => {\n+                    // This is a negated type implementation\n+                    // `impl !MyType {}`, which is not allowed.\n+                    self.span_err(neg_span, \"inherent implementation can't be negated\");\n+                },\n+                _ => {}\n+            }\n             None\n         };\n \n@@ -4833,7 +4848,7 @@ impl<'a> Parser<'a> {\n         let ident = ast_util::impl_pretty_name(&opt_trait, &*ty);\n \n         (ident,\n-         ItemImpl(unsafety, generics, opt_trait, ty, impl_items),\n+         ItemImpl(unsafety, polarity, generics, opt_trait, ty, impl_items),\n          Some(attrs))\n     }\n "}, {"sha": "61b7aa408a8d5a56aa4734c35a2f694e57abf2f4", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -917,6 +917,7 @@ impl<'a> State<'a> {\n             }\n \n             ast::ItemImpl(unsafety,\n+                          polarity,\n                           ref generics,\n                           ref opt_trait,\n                           ref ty,\n@@ -931,6 +932,13 @@ impl<'a> State<'a> {\n                     try!(space(&mut self.s));\n                 }\n \n+                match polarity {\n+                    ast::ImplPolarity::Negative => {\n+                        try!(word(&mut self.s, \"!\"));\n+                    },\n+                    _ => {}\n+                }\n+\n                 match opt_trait {\n                     &Some(ref t) => {\n                         try!(self.print_trait_ref(t));"}, {"sha": "054a288a69e6d3a5f942b5e5df0bcbb83bd5f2f2", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -297,7 +297,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_generics(type_parameters);\n             walk_enum_def(visitor, enum_definition, type_parameters)\n         }\n-        ItemImpl(_,\n+        ItemImpl(_, _,\n                  ref type_parameters,\n                  ref trait_reference,\n                  ref typ,"}, {"sha": "dc01fbaefbdce70f87b6e927eb46ca7a93236984", "filename": "src/test/compile-fail/syntax-trait-polarity.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Ftest%2Fcompile-fail%2Fsyntax-trait-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Ftest%2Fcompile-fail%2Fsyntax-trait-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-trait-polarity.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::kinds::Send;\n+\n+struct TestType;\n+\n+impl !TestType {}\n+//~^ ERROR inherent implementation can't be negated\n+\n+trait TestTrait {}\n+\n+unsafe impl !Send for TestType {}\n+impl !TestTrait for TestType {}\n+\n+struct TestType2<T>;\n+\n+impl<T> !TestType2<T> {}\n+//~^ ERROR inherent implementation can't be negated\n+\n+unsafe impl<T> !Send for TestType2<T> {}\n+impl<T> !TestTrait for TestType2<T> {}\n+\n+fn main() {}"}, {"sha": "dbc4c263571eca097761f9c1316f89152a3e27c8", "filename": "src/test/pretty/trait-polarity.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Ftest%2Fpretty%2Ftrait-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Ftest%2Fpretty%2Ftrait-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ftrait-polarity.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pp-exact\n+\n+trait UnsafeTrait {\n+    fn foo(&self);\n+}\n+\n+impl !UnsafeTrait for int {\n+    fn foo(&self) { }\n+}\n+\n+pub fn main() { }"}, {"sha": "263fc4c02317b2cb69b9700de2efc679ba639325", "filename": "src/test/run-pass/syntax-trait-polarity.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Ftest%2Frun-pass%2Fsyntax-trait-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b883ab2681e34ef94575f45c6c0e6c2bca23ab7/src%2Ftest%2Frun-pass%2Fsyntax-trait-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-trait-polarity.rs?ref=8b883ab2681e34ef94575f45c6c0e6c2bca23ab7", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::kinds::Send;\n+\n+struct TestType;\n+\n+impl TestType {}\n+\n+trait TestTrait {}\n+\n+unsafe impl !Send for TestType {}\n+impl !TestTrait for TestType {}\n+\n+struct TestType2<T>;\n+\n+impl<T> TestType2<T> {}\n+\n+unsafe impl<T> !Send for TestType2<T> {}\n+impl<T> !TestTrait for TestType2<T> {}\n+\n+fn main() {}"}]}