{"sha": "5c63bffe2d893123da0a54410fe7b9bad324c58c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNjNiZmZlMmQ4OTMxMjNkYTBhNTQ0MTBmZTdiOWJhZDMyNGM1OGM=", "commit": {"author": {"name": "Lokathor", "email": "zefria@gmail.com", "date": "2020-07-18T00:59:24Z"}, "committer": {"name": "Lokathor", "email": "zefria@gmail.com", "date": "2020-07-18T00:59:24Z"}, "message": "Make the new target a general thumbv4t target.", "tree": {"sha": "e25a0aeb9801f843fb109da22d768d375cf1c1cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e25a0aeb9801f843fb109da22d768d375cf1c1cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c63bffe2d893123da0a54410fe7b9bad324c58c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c63bffe2d893123da0a54410fe7b9bad324c58c", "html_url": "https://github.com/rust-lang/rust/commit/5c63bffe2d893123da0a54410fe7b9bad324c58c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c63bffe2d893123da0a54410fe7b9bad324c58c/comments", "author": {"login": "Lokathor", "id": 5456384, "node_id": "MDQ6VXNlcjU0NTYzODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5456384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lokathor", "html_url": "https://github.com/Lokathor", "followers_url": "https://api.github.com/users/Lokathor/followers", "following_url": "https://api.github.com/users/Lokathor/following{/other_user}", "gists_url": "https://api.github.com/users/Lokathor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lokathor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lokathor/subscriptions", "organizations_url": "https://api.github.com/users/Lokathor/orgs", "repos_url": "https://api.github.com/users/Lokathor/repos", "events_url": "https://api.github.com/users/Lokathor/events{/privacy}", "received_events_url": "https://api.github.com/users/Lokathor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Lokathor", "id": 5456384, "node_id": "MDQ6VXNlcjU0NTYzODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5456384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lokathor", "html_url": "https://github.com/Lokathor", "followers_url": "https://api.github.com/users/Lokathor/followers", "following_url": "https://api.github.com/users/Lokathor/following{/other_user}", "gists_url": "https://api.github.com/users/Lokathor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lokathor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lokathor/subscriptions", "organizations_url": "https://api.github.com/users/Lokathor/orgs", "repos_url": "https://api.github.com/users/Lokathor/repos", "events_url": "https://api.github.com/users/Lokathor/events{/privacy}", "received_events_url": "https://api.github.com/users/Lokathor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fba90f9c3f6fb6eb66b661708f569e8c15c0b282", "url": "https://api.github.com/repos/rust-lang/rust/commits/fba90f9c3f6fb6eb66b661708f569e8c15c0b282", "html_url": "https://github.com/rust-lang/rust/commit/fba90f9c3f6fb6eb66b661708f569e8c15c0b282"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "7605fa3bab951b8f87f4ce6493e2a082cb025cbb", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c63bffe2d893123da0a54410fe7b9bad324c58c/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c63bffe2d893123da0a54410fe7b9bad324c58c/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=5c63bffe2d893123da0a54410fe7b9bad324c58c", "patch": "@@ -676,7 +676,7 @@ supported_targets! {\n     (\"powerpc64-wrs-vxworks\", powerpc64_wrs_vxworks),\n \n     (\"mipsel-sony-psp\", mipsel_sony_psp),\n-    (\"thumbv4t-nintendo-gba\", thumbv4t_nintendo_gba),\n+    (\"thumbv4t-none-eabi\", thumbv4t_none_eabi),\n }\n \n /// Everything `rustc` knows about how to compile for a specific target."}, {"sha": "04a272cb4ae775b580068168ea00502d6cd2cbbc", "filename": "src/librustc_target/spec/thumbv4t_none_eabi.rs", "status": "renamed", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5c63bffe2d893123da0a54410fe7b9bad324c58c/src%2Flibrustc_target%2Fspec%2Fthumbv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c63bffe2d893123da0a54410fe7b9bad324c58c/src%2Flibrustc_target%2Fspec%2Fthumbv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv4t_none_eabi.rs?ref=5c63bffe2d893123da0a54410fe7b9bad324c58c", "patch": "@@ -1,11 +1,12 @@\n-//! Targets the Nintendo Game Boy Advance (GBA),\n-//! a handheld game device from 2001.\n+//! Targets the ARMv4T, with code as `t32` code by default.\n+//!\n+//! Primarily of use for the GBA, but usable with other devices too.\n //!\n //! Please ping @Lokathor if changes are needed.\n //!\n-//! The target profile assumes that you have the ARM binutils in your path (specifically the linker, `arm-none-eabi-ld`). They can be obtained for free for all major OSes from the ARM developer's website, and they may also be available in your system's package manager\n+//! This target profile assumes that you have the ARM binutils in your path (specifically the linker, `arm-none-eabi-ld`). They can be obtained for free for all major OSes from the ARM developer's website, and they may also be available in your system's package manager. Unfortunately, the standard linker that Rust uses (`lld`) only supports as far back as `ARMv5TE`, so we must use the GNU `ld` linker.\n //!\n-//! **Important:** This target profile **does not** specify a linker script or the ROM header. You'll still need to provide these yourself to construct a final  binary. Generally you'd do this with something like `-Clink-arg=-Tmy_script.ld` and `-Clink-arg=my_crt.o`.\n+//! **Important:** This target profile **does not** specify a linker script. You just get the default link script when you build a binary for this target. The default link script is very likely wrong, so you should use `-Clink-arg=-Tmy_script.ld` to override that with a correct linker script.\n \n use crate::spec::{LinkerFlavor, PanicStrategy, RelocModel, Target, TargetOptions, TargetResult};\n \n@@ -16,8 +17,8 @@ pub fn target() -> TargetResult {\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n         target_os: \"none\".to_string(),\n-        target_env: \"gba\".to_string(),\n-        target_vendor: \"nintendo\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"\".to_string(),\n         arch: \"arm\".to_string(),\n         /* Data layout args are '-' separated:\n          * little endian\n@@ -34,10 +35,15 @@ pub fn target() -> TargetResult {\n             linker: Some(\"arm-none-eabi-ld\".to_string()),\n             linker_is_gnu: true,\n \n-            // extra args passed to the external assembler\n-            asm_args: vec![\"-mcpu=arm7tdmi\".to_string(), \"-mthumb-interwork\".to_string()],\n-\n-            cpu: \"arm7tdmi\".to_string(),\n+            // extra args passed to the external assembler (assuming `arm-none-eabi-as`):\n+            // * activate t32/a32 interworking\n+            // * use arch ARMv4T\n+            // * use little-endian\n+            asm_args: vec![\n+                \"-mthumb-interwork\".to_string(),\n+                \"-march=armv4t\".to_string(),\n+                \"-mlittle-endian\".to_string(),\n+            ],\n \n             // minimum extra features, these cannot be disabled via -C\n             features: \"+soft-float,+strict-align\".to_string(),\n@@ -48,7 +54,7 @@ pub fn target() -> TargetResult {\n \n             main_needs_argc_argv: false,\n \n-            // if we have thread-local storage\n+            // No thread-local storage (just use a static Cell)\n             has_elf_tls: false,\n \n             // don't have atomic compare-and-swap\n@@ -60,7 +66,7 @@ pub fn target() -> TargetResult {\n             // ABIs to not use\n             unsupported_abis: super::arm_base::unsupported_abis(),\n \n-            // this is off just like in the `thumb_base`\n+            // this is turned off just like in the `thumb_base` module\n             emit_debug_gdb_scripts: false,\n \n             ..TargetOptions::default()", "previous_filename": "src/librustc_target/spec/thumbv4t_nintendo_gba.rs"}]}