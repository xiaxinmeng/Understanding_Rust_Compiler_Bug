{"sha": "12d4c069bbeb6574c8b0d595eac115d4c5bb98b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZDRjMDY5YmJlYjY1NzRjOGIwZDU5NWVhYzExNWQ0YzViYjk4Yjc=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-30T13:30:43Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-30T13:30:43Z"}, "message": "Merge #364\n\n364: Parens r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "6afb582a118bd97690ad46b21d231b117202cf2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6afb582a118bd97690ad46b21d231b117202cf2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12d4c069bbeb6574c8b0d595eac115d4c5bb98b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12d4c069bbeb6574c8b0d595eac115d4c5bb98b7", "html_url": "https://github.com/rust-lang/rust/commit/12d4c069bbeb6574c8b0d595eac115d4c5bb98b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12d4c069bbeb6574c8b0d595eac115d4c5bb98b7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "0e90e0436a5433c61f932c254d1cc7400022a940", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e90e0436a5433c61f932c254d1cc7400022a940", "html_url": "https://github.com/rust-lang/rust/commit/0e90e0436a5433c61f932c254d1cc7400022a940"}, {"sha": "c182aab5460fb5dc14b8c0e47fae45a09ccf0ac8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c182aab5460fb5dc14b8c0e47fae45a09ccf0ac8", "html_url": "https://github.com/rust-lang/rust/commit/c182aab5460fb5dc14b8c0e47fae45a09ccf0ac8"}], "stats": {"total": 56, "additions": 39, "deletions": 17}, "files": [{"sha": "4723a65a6b0645f197233ab397b7001fce944fb7", "filename": "crates/ra_analysis/src/completion/complete_path.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/12d4c069bbeb6574c8b0d595eac115d4c5bb98b7/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d4c069bbeb6574c8b0d595eac115d4c5bb98b7/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=12d4c069bbeb6574c8b0d595eac115d4c5bb98b7", "patch": "@@ -17,7 +17,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) -> C\n             let module_scope = module.scope(ctx.db)?;\n             module_scope.entries().for_each(|(name, res)| {\n                 CompletionItem::new(CompletionKind::Reference, name.to_string())\n-                    .from_resolution(ctx.db, res)\n+                    .from_resolution(ctx, res)\n                     .add_to(acc)\n             });\n         }\n@@ -113,4 +113,16 @@ mod tests {\n             \"Foo;Bar\",\n         );\n     }\n+\n+    #[test]\n+    fn dont_render_function_parens_in_use_item() {\n+        check_reference_completion(\n+            \"\n+            //- /lib.rs\n+            mod m { pub fn foo() {} }\n+            use crate::m::f<|>;\n+            \",\n+            \"foo\",\n+        )\n+    }\n }"}, {"sha": "daf666505dced096ffad96c7e989558f993f061a", "filename": "crates/ra_analysis/src/completion/complete_scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12d4c069bbeb6574c8b0d595eac115d4c5bb98b7/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d4c069bbeb6574c8b0d595eac115d4c5bb98b7/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=12d4c069bbeb6574c8b0d595eac115d4c5bb98b7", "patch": "@@ -34,7 +34,7 @@ pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) ->\n         })\n         .for_each(|(name, res)| {\n             CompletionItem::new(CompletionKind::Reference, name.to_string())\n-                .from_resolution(ctx.db, res)\n+                .from_resolution(ctx, res)\n                 .add_to(acc)\n         });\n     Ok(())"}, {"sha": "949b8135e0735c2bf452724bf26bb4b415ec42f3", "filename": "crates/ra_analysis/src/completion/completion_context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12d4c069bbeb6574c8b0d595eac115d4c5bb98b7/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d4c069bbeb6574c8b0d595eac115d4c5bb98b7/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=12d4c069bbeb6574c8b0d595eac115d4c5bb98b7", "patch": "@@ -24,6 +24,7 @@ pub(super) struct CompletionContext<'a> {\n     pub(super) module: Option<hir::Module>,\n     pub(super) function: Option<hir::Function>,\n     pub(super) function_syntax: Option<ast::FnDef<'a>>,\n+    pub(super) use_item_syntax: Option<ast::UseItem<'a>>,\n     pub(super) is_param: bool,\n     /// A single-indent path, like `foo`.\n     pub(super) is_trivial_path: bool,\n@@ -55,6 +56,7 @@ impl<'a> CompletionContext<'a> {\n             module,\n             function: None,\n             function_syntax: None,\n+            use_item_syntax: None,\n             is_param: false,\n             is_trivial_path: false,\n             path_prefix: None,\n@@ -114,6 +116,8 @@ impl<'a> CompletionContext<'a> {\n             _ => (),\n         }\n \n+        self.use_item_syntax = self.leaf.ancestors().find_map(ast::UseItem::cast);\n+\n         self.function_syntax = self\n             .leaf\n             .ancestors()"}, {"sha": "cd4d529f919db13ba43b88c37c62cacb812085ec", "filename": "crates/ra_analysis/src/completion/completion_item.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/12d4c069bbeb6574c8b0d595eac115d4c5bb98b7/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d4c069bbeb6574c8b0d595eac115d4c5bb98b7/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=12d4c069bbeb6574c8b0d595eac115d4c5bb98b7", "patch": "@@ -1,7 +1,7 @@\n-use crate::db;\n-\n use hir::PerNs;\n \n+use crate::completion::CompletionContext;\n+\n /// `CompletionItem` describes a single completion variant in the editor pop-up.\n /// It is basically a POD with various properties. To construct a\n /// `CompletionItem`, use `new` method and the `Builder` struct.\n@@ -118,12 +118,12 @@ impl Builder {\n         self.kind = Some(kind);\n         self\n     }\n-    pub(crate) fn from_resolution(\n+    pub(super) fn from_resolution(\n         mut self,\n-        db: &db::RootDatabase,\n+        ctx: &CompletionContext,\n         resolution: &hir::Resolution,\n     ) -> Builder {\n-        let resolved = resolution.def_id.and_then(|d| d.resolve(db).ok());\n+        let resolved = resolution.def_id.and_then(|d| d.resolve(ctx.db).ok());\n         let kind = match resolved {\n             PerNs {\n                 types: Some(hir::Def::Module(..)),\n@@ -140,21 +140,27 @@ impl Builder {\n             PerNs {\n                 values: Some(hir::Def::Function(function)),\n                 ..\n-            } => {\n-                if let Some(sig_info) = function.signature_info(db) {\n-                    if sig_info.params.is_empty() {\n-                        self.snippet = Some(format!(\"{}()$0\", self.label));\n-                    } else {\n-                        self.snippet = Some(format!(\"{}($0)\", self.label));\n-                    }\n-                }\n-                CompletionItemKind::Function\n-            }\n+            } => return self.from_function(ctx, function),\n             _ => return self,\n         };\n         self.kind = Some(kind);\n         self\n     }\n+\n+    fn from_function(mut self, ctx: &CompletionContext, function: hir::Function) -> Builder {\n+        // If not an import, add parenthesis automatically.\n+        if ctx.use_item_syntax.is_none() {\n+            if let Some(sig_info) = function.signature_info(ctx.db) {\n+                if sig_info.params.is_empty() {\n+                    self.snippet = Some(format!(\"{}()$0\", self.label));\n+                } else {\n+                    self.snippet = Some(format!(\"{}($0)\", self.label));\n+                }\n+            }\n+        }\n+        self.kind = Some(CompletionItemKind::Function);\n+        self\n+    }\n }\n \n impl Into<CompletionItem> for Builder {"}]}