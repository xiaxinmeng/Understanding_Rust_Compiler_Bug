{"sha": "bd6758a2b5781599d1e4eb48a897616d1b0cf8a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNjc1OGEyYjU3ODE1OTlkMWU0ZWI0OGE4OTc2MTZkMWIwY2Y4YTA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-09-30T21:31:01Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-09-30T21:31:01Z"}, "message": "rustc: Don't lint about isize/usize in FFI\n\nThis lint warning was originally intended to help against misuse of the old Rust\n`int` and `uint` types in FFI bindings where the Rust `int` was not equal to the\nC `int`. This confusion no longer exists (as Rust's types are now `isize` and\n`usize`), and as a result the need for this lint has become much less over time.\n\nAdditionally, starting with [the RFC for libc][rfc] it's likely that `isize` and\n`usize` will be quite common in FFI bindings (e.g. they're the definition of\n`size_t` and `ssize_t` on many platforms).\n\n[rfc]: https://github.com/rust-lang/rfcs/pull/1291\n\nThis commit disables these lints to instead consider `isize` and `usize` valid\ntypes to have in FFI signatures.", "tree": {"sha": "8e30dc43b8cf7a38f0f7bbe8a5c99a42dcb828a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e30dc43b8cf7a38f0f7bbe8a5c99a42dcb828a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd6758a2b5781599d1e4eb48a897616d1b0cf8a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd6758a2b5781599d1e4eb48a897616d1b0cf8a0", "html_url": "https://github.com/rust-lang/rust/commit/bd6758a2b5781599d1e4eb48a897616d1b0cf8a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd6758a2b5781599d1e4eb48a897616d1b0cf8a0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e6d7243ae9749eff27fd320cb422e42291e79d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e6d7243ae9749eff27fd320cb422e42291e79d4", "html_url": "https://github.com/rust-lang/rust/commit/3e6d7243ae9749eff27fd320cb422e42291e79d4"}], "stats": {"total": 26, "additions": 10, "deletions": 16}, "files": [{"sha": "c95d8b7bf3e885e25b97819357d0f32c7723a2d3", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd6758a2b5781599d1e4eb48a897616d1b0cf8a0/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd6758a2b5781599d1e4eb48a897616d1b0cf8a0/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=bd6758a2b5781599d1e4eb48a897616d1b0cf8a0", "patch": "@@ -497,14 +497,6 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                 FfiSafe\n             }\n \n-            ty::TyInt(ast::TyIs) => {\n-                FfiUnsafe(\"found Rust type `isize` in foreign module, while \\\n-                          `libc::c_int` or `libc::c_long` should be used\")\n-            }\n-            ty::TyUint(ast::TyUs) => {\n-                FfiUnsafe(\"found Rust type `usize` in foreign module, while \\\n-                          `libc::c_uint` or `libc::c_ulong` should be used\")\n-            }\n             ty::TyChar => {\n                 FfiUnsafe(\"found Rust type `char` in foreign module, while \\\n                            `u32` or `libc::wchar_t` should be used\")"}, {"sha": "288fe4a9abb82494e1efb7a858f238195c3beb2b", "filename": "src/test/compile-fail/issue-16250.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd6758a2b5781599d1e4eb48a897616d1b0cf8a0/src%2Ftest%2Fcompile-fail%2Fissue-16250.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd6758a2b5781599d1e4eb48a897616d1b0cf8a0/src%2Ftest%2Fcompile-fail%2Fissue-16250.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16250.rs?ref=bd6758a2b5781599d1e4eb48a897616d1b0cf8a0", "patch": "@@ -10,8 +10,10 @@\n \n #![deny(warnings)]\n \n+pub struct Foo;\n+\n extern {\n-    pub fn foo(x: (isize)); //~ ERROR found Rust type `isize` in foreign module\n+    pub fn foo(x: (Foo)); //~ ERROR found struct without\n }\n \n fn main() {"}, {"sha": "5c49098d870536efef5c1c25450429455963577c", "filename": "src/test/compile-fail/lint-ctypes.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bd6758a2b5781599d1e4eb48a897616d1b0cf8a0/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd6758a2b5781599d1e4eb48a897616d1b0cf8a0/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs?ref=bd6758a2b5781599d1e4eb48a897616d1b0cf8a0", "patch": "@@ -27,12 +27,11 @@ pub struct ZeroSize;\n pub type RustFn = fn();\n pub type RustBadRet = extern fn() -> Box<u32>;\n pub type CVoidRet = ();\n+pub struct Foo;\n \n extern {\n-    pub fn bare_type1(size: isize); //~ ERROR: found Rust type\n-    pub fn bare_type2(size: usize); //~ ERROR: found Rust type\n-    pub fn ptr_type1(size: *const isize); //~ ERROR: found Rust type\n-    pub fn ptr_type2(size: *const usize); //~ ERROR: found Rust type\n+    pub fn ptr_type1(size: *const Foo); //~ ERROR: found struct without\n+    pub fn ptr_type2(size: *const Foo); //~ ERROR: found struct without\n     pub fn slice_type(p: &[u32]); //~ ERROR: found Rust slice type\n     pub fn str_type(p: &str); //~ ERROR: found Rust type\n     pub fn box_type(p: Box<u32>); //~ ERROR found Rust type\n@@ -55,6 +54,8 @@ extern {\n     pub fn good8(fptr: extern fn() -> !);\n     pub fn good9() -> ();\n     pub fn good10() -> CVoidRet;\n+    pub fn good11(size: isize);\n+    pub fn good12(size: usize);\n }\n \n fn main() {"}, {"sha": "5ea0ef6c7ba3b784905339b5073ac3bc74d782f4", "filename": "src/test/run-pass/foreign-int-types.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd6758a2b5781599d1e4eb48a897616d1b0cf8a0/src%2Ftest%2Frun-pass%2Fforeign-int-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd6758a2b5781599d1e4eb48a897616d1b0cf8a0/src%2Ftest%2Frun-pass%2Fforeign-int-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-int-types.rs?ref=bd6758a2b5781599d1e4eb48a897616d1b0cf8a0", "patch": "@@ -13,9 +13,8 @@\n \n mod xx {\n     extern {\n-        pub fn strlen(str: *const u8) -> usize; //~ ERROR found Rust type `usize`\n-        pub fn foo(x: isize, y: usize); //~ ERROR found Rust type `isize`\n-        //~^ ERROR found Rust type `usize`\n+        pub fn strlen(str: *const u8) -> usize;\n+        pub fn foo(x: isize, y: usize);\n     }\n }\n ", "previous_filename": "src/test/compile-fail/warn-foreign-int-types.rs"}]}