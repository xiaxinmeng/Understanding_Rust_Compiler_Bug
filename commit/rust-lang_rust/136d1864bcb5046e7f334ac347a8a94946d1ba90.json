{"sha": "136d1864bcb5046e7f334ac347a8a94946d1ba90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNmQxODY0YmNiNTA0NmU3ZjMzNGFjMzQ3YThhOTQ5NDZkMWJhOTA=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "github@adolfo.ochagavia.xyz", "date": "2018-11-15T16:34:05Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2018-11-16T11:15:50Z"}, "message": "Support UTF-16 chars in LineIndex", "tree": {"sha": "94be94eff9265d0e41cb847be2190e35416eb0a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94be94eff9265d0e41cb847be2190e35416eb0a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/136d1864bcb5046e7f334ac347a8a94946d1ba90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/136d1864bcb5046e7f334ac347a8a94946d1ba90", "html_url": "https://github.com/rust-lang/rust/commit/136d1864bcb5046e7f334ac347a8a94946d1ba90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/136d1864bcb5046e7f334ac347a8a94946d1ba90/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9aebd9e6caf49467ca20caf2583c47cf5092c788", "url": "https://api.github.com/repos/rust-lang/rust/commits/9aebd9e6caf49467ca20caf2583c47cf5092c788", "html_url": "https://github.com/rust-lang/rust/commit/9aebd9e6caf49467ca20caf2583c47cf5092c788"}], "stats": {"total": 305, "additions": 197, "deletions": 108}, "files": [{"sha": "0b3a28cd4187bd5b3f58a832de0960b8f7b073f1", "filename": "crates/ra_editor/src/line_index.rs", "status": "modified", "additions": 197, "deletions": 106, "changes": 303, "blob_url": "https://github.com/rust-lang/rust/blob/136d1864bcb5046e7f334ac347a8a94946d1ba90/crates%2Fra_editor%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136d1864bcb5046e7f334ac347a8a94946d1ba90/crates%2Fra_editor%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fline_index.rs?ref=136d1864bcb5046e7f334ac347a8a94946d1ba90", "patch": "@@ -1,149 +1,240 @@\n use crate::TextUnit;\n+use rustc_hash::FxHashMap;\n use superslice::Ext;\n \n-#[derive(Clone, Debug, Hash, PartialEq, Eq)]\n+#[derive(Clone, Debug, PartialEq, Eq)]\n pub struct LineIndex {\n     newlines: Vec<TextUnit>,\n+    utf16_lines: FxHashMap<u32, Vec<Utf16Char>>,\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct LineCol {\n     pub line: u32,\n-    pub col: TextUnit,\n+    pub col: u32,\n+}\n+\n+#[derive(Clone, Debug, Hash, PartialEq, Eq)]\n+struct Utf16Char {\n+    start: TextUnit,\n+    end: TextUnit,\n+}\n+\n+impl Utf16Char {\n+    fn len(&self) -> TextUnit {\n+        self.end - self.start\n+    }\n }\n \n impl LineIndex {\n     pub fn new(text: &str) -> LineIndex {\n+        let mut utf16_lines = FxHashMap::default();\n+        let mut utf16_chars = Vec::new();\n+\n         let mut newlines = vec![0.into()];\n-        let mut curr = 0.into();\n+        let mut curr_row = 0.into();\n+        let mut curr_col = 0.into();\n+        let mut line = 0;\n         for c in text.chars() {\n-            curr += TextUnit::of_char(c);\n+            curr_row += TextUnit::of_char(c);\n             if c == '\\n' {\n-                newlines.push(curr);\n+                newlines.push(curr_row);\n+\n+                // Save any utf-16 characters seen in the previous line\n+                if utf16_chars.len() > 0 {\n+                    utf16_lines.insert(line, utf16_chars);\n+                    utf16_chars = Vec::new();\n+                }\n+\n+                // Prepare for processing the next line\n+                curr_col = 0.into();\n+                line += 1;\n+                continue;\n             }\n+\n+            let char_len = TextUnit::of_char(c);\n+            if char_len.to_usize() > 1 {\n+                utf16_chars.push(Utf16Char {\n+                    start: curr_col,\n+                    end: curr_col + char_len,\n+                });\n+            }\n+\n+            curr_col += char_len;\n+        }\n+        LineIndex {\n+            newlines,\n+            utf16_lines,\n         }\n-        LineIndex { newlines }\n     }\n \n     pub fn line_col(&self, offset: TextUnit) -> LineCol {\n         let line = self.newlines.upper_bound(&offset) - 1;\n         let line_start_offset = self.newlines[line];\n         let col = offset - line_start_offset;\n+\n         LineCol {\n             line: line as u32,\n-            col,\n+            col: self.utf8_to_utf16_col(line as u32, col) as u32,\n         }\n     }\n \n     pub fn offset(&self, line_col: LineCol) -> TextUnit {\n         //TODO: return Result\n-        self.newlines[line_col.line as usize] + line_col.col\n+        let col = self.utf16_to_utf8_col(line_col.line, line_col.col);\n+        self.newlines[line_col.line as usize] + col\n+    }\n+\n+    fn utf8_to_utf16_col(&self, line: u32, mut col: TextUnit) -> usize {\n+        if let Some(utf16_chars) = self.utf16_lines.get(&line) {\n+            let mut correction = TextUnit::from_usize(0);\n+            for c in utf16_chars {\n+                if col >= c.end {\n+                    correction += c.len() - TextUnit::from_usize(1);\n+                } else {\n+                    // From here on, all utf16 characters come *after* the character we are mapping,\n+                    // so we don't need to take them into account\n+                    break;\n+                }\n+            }\n+\n+            col -= correction;\n+        }\n+\n+        col.to_usize()\n+    }\n+\n+    fn utf16_to_utf8_col(&self, line: u32, col: u32) -> TextUnit {\n+        let mut col: TextUnit = col.into();\n+        if let Some(utf16_chars) = self.utf16_lines.get(&line) {\n+            for c in utf16_chars {\n+                if col >= c.start {\n+                    col += c.len() - TextUnit::from_usize(1);\n+                } else {\n+                    // From here on, all utf16 characters come *after* the character we are mapping,\n+                    // so we don't need to take them into account\n+                    break;\n+                }\n+            }\n+        }\n+\n+        col\n     }\n }\n \n #[test]\n fn test_line_index() {\n     let text = \"hello\\nworld\";\n     let index = LineIndex::new(text);\n-    assert_eq!(\n-        index.line_col(0.into()),\n-        LineCol {\n-            line: 0,\n-            col: 0.into()\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(1.into()),\n-        LineCol {\n-            line: 0,\n-            col: 1.into()\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(5.into()),\n-        LineCol {\n-            line: 0,\n-            col: 5.into()\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(6.into()),\n-        LineCol {\n-            line: 1,\n-            col: 0.into()\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(7.into()),\n-        LineCol {\n-            line: 1,\n-            col: 1.into()\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(8.into()),\n-        LineCol {\n-            line: 1,\n-            col: 2.into()\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(10.into()),\n-        LineCol {\n-            line: 1,\n-            col: 4.into()\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(11.into()),\n-        LineCol {\n-            line: 1,\n-            col: 5.into()\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(12.into()),\n-        LineCol {\n-            line: 1,\n-            col: 6.into()\n-        }\n-    );\n+    assert_eq!(index.line_col(0.into()), LineCol { line: 0, col: 0 });\n+    assert_eq!(index.line_col(1.into()), LineCol { line: 0, col: 1 });\n+    assert_eq!(index.line_col(5.into()), LineCol { line: 0, col: 5 });\n+    assert_eq!(index.line_col(6.into()), LineCol { line: 1, col: 0 });\n+    assert_eq!(index.line_col(7.into()), LineCol { line: 1, col: 1 });\n+    assert_eq!(index.line_col(8.into()), LineCol { line: 1, col: 2 });\n+    assert_eq!(index.line_col(10.into()), LineCol { line: 1, col: 4 });\n+    assert_eq!(index.line_col(11.into()), LineCol { line: 1, col: 5 });\n+    assert_eq!(index.line_col(12.into()), LineCol { line: 1, col: 6 });\n \n     let text = \"\\nhello\\nworld\";\n     let index = LineIndex::new(text);\n-    assert_eq!(\n-        index.line_col(0.into()),\n-        LineCol {\n-            line: 0,\n-            col: 0.into()\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(1.into()),\n-        LineCol {\n-            line: 1,\n-            col: 0.into()\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(2.into()),\n-        LineCol {\n-            line: 1,\n-            col: 1.into()\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(6.into()),\n-        LineCol {\n-            line: 1,\n-            col: 5.into()\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(7.into()),\n-        LineCol {\n-            line: 2,\n-            col: 0.into()\n-        }\n-    );\n+    assert_eq!(index.line_col(0.into()), LineCol { line: 0, col: 0 });\n+    assert_eq!(index.line_col(1.into()), LineCol { line: 1, col: 0 });\n+    assert_eq!(index.line_col(2.into()), LineCol { line: 1, col: 1 });\n+    assert_eq!(index.line_col(6.into()), LineCol { line: 1, col: 5 });\n+    assert_eq!(index.line_col(7.into()), LineCol { line: 2, col: 0 });\n+}\n+\n+#[cfg(test)]\n+mod test_utf8_utf16_conv {\n+    use super::*;\n+\n+    #[test]\n+    fn test_char_len() {\n+        assert_eq!('\u30e1'.len_utf8(), 3);\n+        assert_eq!('\u30e1'.len_utf16(), 1);\n+    }\n+\n+    #[test]\n+    fn test_empty_index() {\n+        let col_index = LineIndex::new(\n+            \"\n+const C: char = 'x';\n+\",\n+        );\n+        assert_eq!(col_index.utf16_lines.len(), 0);\n+    }\n+\n+    #[test]\n+    fn test_single_char() {\n+        let col_index = LineIndex::new(\n+            \"\n+const C: char = '\u30e1';\n+\",\n+        );\n+\n+        assert_eq!(col_index.utf16_lines.len(), 1);\n+        assert_eq!(col_index.utf16_lines[&1].len(), 1);\n+        assert_eq!(\n+            col_index.utf16_lines[&1][0],\n+            Utf16Char {\n+                start: 17.into(),\n+                end: 20.into()\n+            }\n+        );\n+\n+        // UTF-8 to UTF-16, no changes\n+        assert_eq!(col_index.utf8_to_utf16_col(1, 15.into()), 15);\n+\n+        // UTF-8 to UTF-16\n+        assert_eq!(col_index.utf8_to_utf16_col(1, 22.into()), 20);\n+\n+        // UTF-16 to UTF-8, no changes\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 15), TextUnit::from(15));\n+\n+        // UTF-16 to UTF-8\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 19), TextUnit::from(21));\n+    }\n+\n+    #[test]\n+    fn test_string() {\n+        let col_index = LineIndex::new(\n+            \"\n+const C: char = \\\"\u30e1 \u30e1\\\";\n+\",\n+        );\n+\n+        assert_eq!(col_index.utf16_lines.len(), 1);\n+        assert_eq!(col_index.utf16_lines[&1].len(), 2);\n+        assert_eq!(\n+            col_index.utf16_lines[&1][0],\n+            Utf16Char {\n+                start: 17.into(),\n+                end: 20.into()\n+            }\n+        );\n+        assert_eq!(\n+            col_index.utf16_lines[&1][1],\n+            Utf16Char {\n+                start: 21.into(),\n+                end: 24.into()\n+            }\n+        );\n+\n+        // UTF-8 to UTF-16\n+        assert_eq!(col_index.utf8_to_utf16_col(1, 15.into()), 15);\n+\n+        assert_eq!(col_index.utf8_to_utf16_col(1, 21.into()), 19);\n+        assert_eq!(col_index.utf8_to_utf16_col(1, 25.into()), 21);\n+\n+        assert!(col_index.utf8_to_utf16_col(2, 15.into()) == 15);\n+\n+        // UTF-16 to UTF-8\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 15), TextUnit::from_usize(15));\n+\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 18), TextUnit::from_usize(20));\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 19), TextUnit::from_usize(23));\n+\n+        assert_eq!(col_index.utf16_to_utf8_col(2, 15), TextUnit::from_usize(15));\n+    }\n }"}, {"sha": "a102b91050fc7626234d04cc9732f69b3c17087b", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/136d1864bcb5046e7f334ac347a8a94946d1ba90/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136d1864bcb5046e7f334ac347a8a94946d1ba90/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=136d1864bcb5046e7f334ac347a8a94946d1ba90", "patch": "@@ -49,7 +49,6 @@ impl ConvWith for Position {\n     type Output = TextUnit;\n \n     fn conv_with(self, line_index: &LineIndex) -> TextUnit {\n-        // TODO: UTF-16\n         let line_col = LineCol {\n             line: self.line as u32,\n             col: (self.character as u32).into(),\n@@ -64,7 +63,6 @@ impl ConvWith for TextUnit {\n \n     fn conv_with(self, line_index: &LineIndex) -> Position {\n         let line_col = line_index.line_col(self);\n-        // TODO: UTF-16\n         Position::new(u64::from(line_col.line), u64::from(u32::from(line_col.col)))\n     }\n }"}]}