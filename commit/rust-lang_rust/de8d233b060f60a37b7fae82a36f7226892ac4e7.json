{"sha": "de8d233b060f60a37b7fae82a36f7226892ac4e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlOGQyMzNiMDYwZjYwYTM3YjdmYWU4MmEzNmY3MjI2ODkyYWM0ZTc=", "commit": {"author": {"name": "ms2300", "email": "matt.sewall@gmail.com", "date": "2018-09-13T00:14:48Z"}, "committer": {"name": "ms2300", "email": "matt.sewall@gmail.com", "date": "2018-09-24T02:53:25Z"}, "message": "#3006 : Fixing for .get().unwrap().foo()", "tree": {"sha": "78f991ed64c1792c075d21baa207778fcf5fbc7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78f991ed64c1792c075d21baa207778fcf5fbc7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de8d233b060f60a37b7fae82a36f7226892ac4e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de8d233b060f60a37b7fae82a36f7226892ac4e7", "html_url": "https://github.com/rust-lang/rust/commit/de8d233b060f60a37b7fae82a36f7226892ac4e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de8d233b060f60a37b7fae82a36f7226892ac4e7/comments", "author": {"login": "ms2300", "id": 15894971, "node_id": "MDQ6VXNlcjE1ODk0OTcx", "avatar_url": "https://avatars.githubusercontent.com/u/15894971?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ms2300", "html_url": "https://github.com/ms2300", "followers_url": "https://api.github.com/users/ms2300/followers", "following_url": "https://api.github.com/users/ms2300/following{/other_user}", "gists_url": "https://api.github.com/users/ms2300/gists{/gist_id}", "starred_url": "https://api.github.com/users/ms2300/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ms2300/subscriptions", "organizations_url": "https://api.github.com/users/ms2300/orgs", "repos_url": "https://api.github.com/users/ms2300/repos", "events_url": "https://api.github.com/users/ms2300/events{/privacy}", "received_events_url": "https://api.github.com/users/ms2300/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ms2300", "id": 15894971, "node_id": "MDQ6VXNlcjE1ODk0OTcx", "avatar_url": "https://avatars.githubusercontent.com/u/15894971?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ms2300", "html_url": "https://github.com/ms2300", "followers_url": "https://api.github.com/users/ms2300/followers", "following_url": "https://api.github.com/users/ms2300/following{/other_user}", "gists_url": "https://api.github.com/users/ms2300/gists{/gist_id}", "starred_url": "https://api.github.com/users/ms2300/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ms2300/subscriptions", "organizations_url": "https://api.github.com/users/ms2300/orgs", "repos_url": "https://api.github.com/users/ms2300/repos", "events_url": "https://api.github.com/users/ms2300/events{/privacy}", "received_events_url": "https://api.github.com/users/ms2300/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc6d85ceafdec687f3d5c25777a661724cae77de", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc6d85ceafdec687f3d5c25777a661724cae77de", "html_url": "https://github.com/rust-lang/rust/commit/bc6d85ceafdec687f3d5c25777a661724cae77de"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "32e6a83e535d3d09120b4e798897d306203487d1", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de8d233b060f60a37b7fae82a36f7226892ac4e7/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8d233b060f60a37b7fae82a36f7226892ac4e7/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=de8d233b060f60a37b7fae82a36f7226892ac4e7", "patch": "@@ -1431,7 +1431,7 @@ fn lint_get_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr, get_args: &[hir::\n         ),\n         \"try this\",\n         format!(\n-            \"{}{}[{}]\",\n+            \"({}{}[{}])\",\n             borrow_str,\n             snippet(cx, get_args[0].span, \"_\"),\n             snippet(cx, get_args[1].span, \"_\")"}, {"sha": "141233e0d8ad65d02c19a3653e28df0aa20619be", "filename": "tests/ui/get_unwrap.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de8d233b060f60a37b7fae82a36f7226892ac4e7/tests%2Fui%2Fget_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8d233b060f60a37b7fae82a36f7226892ac4e7/tests%2Fui%2Fget_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.rs?ref=de8d233b060f60a37b7fae82a36f7226892ac4e7", "patch": "@@ -43,4 +43,9 @@ fn main() {\n         *some_btreemap.get_mut(&1).unwrap() = 'b';\n         *false_positive.get_mut(0).unwrap() = 1;\n     }\n+\n+    { // Test `get().unwrap().foo()` and `get_mut().unwrap().bar()`\n+        let _ = some_vec.get(0..1).unwrap().to_vec();\n+        let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n+    }\n }"}, {"sha": "6b9a360f332f09723dbbe36d3d05649bf0af5a17", "filename": "tests/ui/get_unwrap.stderr", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/de8d233b060f60a37b7fae82a36f7226892ac4e7/tests%2Fui%2Fget_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de8d233b060f60a37b7fae82a36f7226892ac4e7/tests%2Fui%2Fget_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.stderr?ref=de8d233b060f60a37b7fae82a36f7226892ac4e7", "patch": "@@ -2,63 +2,75 @@ error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more co\n   --> $DIR/get_unwrap.rs:27:17\n    |\n 27 |         let _ = boxed_slice.get(1).unwrap();\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&boxed_slice[1]`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&boxed_slice[1])`\n    |\n    = note: `-D clippy::get-unwrap` implied by `-D warnings`\n \n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:28:17\n    |\n 28 |         let _ = some_slice.get(0).unwrap();\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_slice[0]`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&some_slice[0])`\n \n error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:29:17\n    |\n 29 |         let _ = some_vec.get(0).unwrap();\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vec[0]`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&some_vec[0])`\n \n error: called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:30:17\n    |\n 30 |         let _ = some_vecdeque.get(0).unwrap();\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vecdeque[0]`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&some_vecdeque[0])`\n \n error: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:31:17\n    |\n 31 |         let _ = some_hashmap.get(&1).unwrap();\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_hashmap[&1]`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&some_hashmap[&1])`\n \n error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:32:17\n    |\n 32 |         let _ = some_btreemap.get(&1).unwrap();\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_btreemap[&1]`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&some_btreemap[&1])`\n \n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:37:10\n    |\n 37 |         *boxed_slice.get_mut(0).unwrap() = 1;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut boxed_slice[0]`\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&mut boxed_slice[0])`\n \n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:38:10\n    |\n 38 |         *some_slice.get_mut(0).unwrap() = 1;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_slice[0]`\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&mut some_slice[0])`\n \n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:39:10\n    |\n 39 |         *some_vec.get_mut(0).unwrap() = 1;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vec[0]`\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&mut some_vec[0])`\n \n error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:40:10\n    |\n 40 |         *some_vecdeque.get_mut(0).unwrap() = 1;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vecdeque[0]`\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&mut some_vecdeque[0])`\n \n-error: aborting due to 10 previous errors\n+error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:48:17\n+   |\n+48 |         let _ = some_vec.get(0..1).unwrap().to_vec();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&some_vec[0..1])`\n+\n+error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:49:17\n+   |\n+49 |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&mut some_vec[0..1])`\n+\n+error: aborting due to 12 previous errors\n "}]}