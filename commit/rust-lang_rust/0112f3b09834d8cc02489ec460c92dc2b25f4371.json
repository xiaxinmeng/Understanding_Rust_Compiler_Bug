{"sha": "0112f3b09834d8cc02489ec460c92dc2b25f4371", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMTJmM2IwOTgzNGQ4Y2MwMjQ4OWVjNDYwYzkyZGMyYjI1ZjQzNzE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-16T18:49:35Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-16T18:55:56Z"}, "message": "move other attribute check to visit_attribute", "tree": {"sha": "a01db363f0d232fff0bbcdb95ce450a1c4dad06f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a01db363f0d232fff0bbcdb95ce450a1c4dad06f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0112f3b09834d8cc02489ec460c92dc2b25f4371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0112f3b09834d8cc02489ec460c92dc2b25f4371", "html_url": "https://github.com/rust-lang/rust/commit/0112f3b09834d8cc02489ec460c92dc2b25f4371", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0112f3b09834d8cc02489ec460c92dc2b25f4371/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ffb7db42307226503242dececdcfd7c52063d7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ffb7db42307226503242dececdcfd7c52063d7c", "html_url": "https://github.com/rust-lang/rust/commit/5ffb7db42307226503242dececdcfd7c52063d7c"}], "stats": {"total": 30, "additions": 10, "deletions": 20}, "files": [{"sha": "8aab41baeb565595a5e694f3c4f7fd427bfc3774", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0112f3b09834d8cc02489ec460c92dc2b25f4371/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0112f3b09834d8cc02489ec460c92dc2b25f4371/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=0112f3b09834d8cc02489ec460c92dc2b25f4371", "patch": "@@ -202,6 +202,16 @@ pub static KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n                      \"no_std is experimental\")),\n     (\"lang\", Gated(\"lang_items\",\n                      \"language items are subject to change\")),\n+    (\"rustc_on_unimplemented\", Gated(\"on_unimplemented\",\n+                                     \"the `#[rustc_on_unimplemented]` attribute \\\n+                                      is an experimental feature\")),\n+    (\"linkage\", Gated(\"linkage\",\n+                      \"the `linkage` attribute is experimental \\\n+                       and not portable across platforms\")),\n+    (\"thread_local\", Gated(\"thread_local\",\n+                            \"`#[thread_local]` is an experimental feature, and does not \\\n+                             currently handle destructors. There is no corresponding \\\n+                             `#[task_local]` mapping to the task model\")),\n \n     // FIXME: #14408 whitelist docs since rustdoc looks at them\n     (\"doc\", Whitelisted),\n@@ -214,14 +224,12 @@ pub static KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n     (\"link\", Whitelisted),\n     (\"link_name\", Whitelisted),\n     (\"link_section\", Whitelisted),\n-    (\"linkage\", Whitelisted),\n     (\"no_builtins\", Whitelisted),\n     (\"no_mangle\", Whitelisted),\n     (\"no_split_stack\", Whitelisted),\n     (\"no_stack_check\", Whitelisted),\n     (\"packed\", Whitelisted),\n     (\"static_assert\", Whitelisted),\n-    (\"thread_local\", Whitelisted),\n     (\"no_debug\", Whitelisted),\n     (\"omit_gdb_pretty_printer_section\", Whitelisted),\n     (\"unsafe_no_drop_flag\", Whitelisted),\n@@ -235,7 +243,6 @@ pub static KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n     (\"must_use\", Whitelisted),\n     (\"stable\", Whitelisted),\n     (\"unstable\", Whitelisted),\n-    (\"rustc_on_unimplemented\", Whitelisted),\n     (\"rustc_error\", Whitelisted),\n \n     // FIXME: #19470 this shouldn't be needed forever\n@@ -395,22 +402,6 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n     }\n \n     fn visit_item(&mut self, i: &ast::Item) {\n-        for attr in &i.attrs {\n-            if attr.name() == \"thread_local\" {\n-                self.gate_feature(\"thread_local\", i.span,\n-                                  \"`#[thread_local]` is an experimental feature, and does not \\\n-                                  currently handle destructors. There is no corresponding \\\n-                                  `#[task_local]` mapping to the task model\");\n-            } else if attr.name() == \"linkage\" {\n-                self.gate_feature(\"linkage\", i.span,\n-                                  \"the `linkage` attribute is experimental \\\n-                                   and not portable across platforms\")\n-            } else if attr.name() == \"rustc_on_unimplemented\" {\n-                self.gate_feature(\"on_unimplemented\", i.span,\n-                                  \"the `#[rustc_on_unimplemented]` attribute \\\n-                                  is an experimental feature\")\n-            }\n-        }\n         match i.node {\n             ast::ItemExternCrate(_) => {\n                 if attr::contains_name(&i.attrs[], \"macro_reexport\") {\n@@ -592,7 +583,6 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                 }\n                 return;\n             }\n-            \n         }\n         self.gate_feature(\"custom_attribute\", attr.span,\n                    format!(\"The attribute `{}` is currently \\"}]}