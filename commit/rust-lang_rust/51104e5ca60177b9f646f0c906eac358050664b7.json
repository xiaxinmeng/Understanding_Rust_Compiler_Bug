{"sha": "51104e5ca60177b9f646f0c906eac358050664b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMTA0ZTVjYTYwMTc3YjlmNjQ2ZjBjOTA2ZWFjMzU4MDUwNjY0Yjc=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-04T09:07:00Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-04T09:07:00Z"}, "message": "Fix fallout in tests.", "tree": {"sha": "61caef4bedee35dc832f6cf59bc968371572d752", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61caef4bedee35dc832f6cf59bc968371572d752"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51104e5ca60177b9f646f0c906eac358050664b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51104e5ca60177b9f646f0c906eac358050664b7", "html_url": "https://github.com/rust-lang/rust/commit/51104e5ca60177b9f646f0c906eac358050664b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51104e5ca60177b9f646f0c906eac358050664b7/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7eed53b55d43c8d63ede9e8e45c532e9cc83cc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7eed53b55d43c8d63ede9e8e45c532e9cc83cc2", "html_url": "https://github.com/rust-lang/rust/commit/b7eed53b55d43c8d63ede9e8e45c532e9cc83cc2"}], "stats": {"total": 61, "additions": 33, "deletions": 28}, "files": [{"sha": "6ac0d5ad1a3bc89e9f145548c16511f60afbebbb", "filename": "src/test/run-pass-fulldeps/auxiliary/procedural_mbe_matching.rs", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/51104e5ca60177b9f646f0c906eac358050664b7/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fprocedural_mbe_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51104e5ca60177b9f646f0c906eac358050664b7/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fprocedural_mbe_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fprocedural_mbe_matching.rs?ref=51104e5ca60177b9f646f0c906eac358050664b7", "patch": "@@ -18,10 +18,10 @@ extern crate syntax_pos;\n extern crate rustc;\n extern crate rustc_plugin;\n \n-use syntax::parse::token::{self, str_to_ident, NtExpr, NtPat};\n+use syntax::parse::token::{str_to_ident, NtExpr, NtPat};\n use syntax::ast::{Pat};\n use syntax::tokenstream::{TokenTree};\n-use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n+use syntax::ext::base::{ExtCtxt, MacResult, MacEager};\n use syntax::ext::build::AstBuilder;\n use syntax::ext::tt::macro_parser::{MatchedSeq, MatchedNonterminal};\n use syntax::ext::tt::macro_parser::{Success, Failure, Error};\n@@ -30,35 +30,12 @@ use syntax::ptr::P;\n use syntax_pos::Span;\n use rustc_plugin::Registry;\n \n-fn expand_mbe_matches(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n+fn expand_mbe_matches(cx: &mut ExtCtxt, _: Span, args: &[TokenTree])\n         -> Box<MacResult + 'static> {\n \n     let mbe_matcher = quote_matcher!(cx, $matched:expr, $($pat:pat)|+);\n-\n-    let mac_expr = match TokenTree::parse(cx, &mbe_matcher[..], args) {\n-        Success(map) => {\n-            match (&*map[&str_to_ident(\"matched\")], &*map[&str_to_ident(\"pat\")]) {\n-                (&MatchedNonterminal(NtExpr(ref matched_expr)),\n-                 &MatchedSeq(ref pats, seq_sp)) => {\n-                    let pats: Vec<P<Pat>> = pats.iter().map(|pat_nt|\n-                        if let &MatchedNonterminal(NtPat(ref pat)) = &**pat_nt {\n-                            pat.clone()\n-                        } else {\n-                            unreachable!()\n-                        }\n-                    ).collect();\n-                    let arm = cx.arm(seq_sp, pats, cx.expr_bool(seq_sp, true));\n-\n-                    quote_expr!(cx,\n-                        match $matched_expr {\n-                            $arm\n-                            _ => false\n-                        }\n-                    )\n-                }\n-                _ => unreachable!()\n-            }\n-        }\n+    let map = match TokenTree::parse(cx, &mbe_matcher, args) {\n+        Success(map) => map,\n         Failure(_, tok) => {\n             panic!(\"expected Success, but got Failure: {}\", parse_failure_msg(tok));\n         }\n@@ -67,6 +44,34 @@ fn expand_mbe_matches(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n         }\n     };\n \n+    let matched_nt = match *map[&str_to_ident(\"matched\")] {\n+        MatchedNonterminal(ref nt) => nt.clone(),\n+        _ => unreachable!(),\n+    };\n+\n+    let mac_expr = match (&*matched_nt, &*map[&str_to_ident(\"pat\")]) {\n+        (&NtExpr(ref matched_expr), &MatchedSeq(ref pats, seq_sp)) => {\n+            let pats: Vec<P<Pat>> = pats.iter().map(|pat_nt| {\n+                match **pat_nt {\n+                    MatchedNonterminal(ref nt) => match **nt {\n+                        NtPat(ref pat) => pat.clone(),\n+                        _ => unreachable!(),\n+                    },\n+                    _ => unreachable!(),\n+                }\n+            }).collect();\n+            let arm = cx.arm(seq_sp, pats, cx.expr_bool(seq_sp, true));\n+\n+            quote_expr!(cx,\n+                match $matched_expr {\n+                    $arm\n+                    _ => false\n+                }\n+            )\n+        }\n+        _ => unreachable!()\n+    };\n+\n     MacEager::expr(mac_expr)\n }\n "}]}