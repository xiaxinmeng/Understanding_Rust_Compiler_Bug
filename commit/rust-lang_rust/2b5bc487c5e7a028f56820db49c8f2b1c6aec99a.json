{"sha": "2b5bc487c5e7a028f56820db49c8f2b1c6aec99a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiNWJjNDg3YzVlN2EwMjhmNTY4MjBkYjQ5YzhmMmIxYzZhZWM5OWE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-10-13T16:08:50Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-01T18:08:56Z"}, "message": "improve early lint to use multispan from diagnostic", "tree": {"sha": "352e118345e753f0753beabfcb21fd404ad56ad0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/352e118345e753f0753beabfcb21fd404ad56ad0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b5bc487c5e7a028f56820db49c8f2b1c6aec99a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b5bc487c5e7a028f56820db49c8f2b1c6aec99a", "html_url": "https://github.com/rust-lang/rust/commit/2b5bc487c5e7a028f56820db49c8f2b1c6aec99a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b5bc487c5e7a028f56820db49c8f2b1c6aec99a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0aeab9a390b00f83b535f001ab9156638021ff99", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aeab9a390b00f83b535f001ab9156638021ff99", "html_url": "https://github.com/rust-lang/rust/commit/0aeab9a390b00f83b535f001ab9156638021ff99"}], "stats": {"total": 82, "additions": 36, "deletions": 46}, "files": [{"sha": "f08aa2eb49f72bd0b8a5701ad7450a7249faf5ea", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 15, "deletions": 34, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2b5bc487c5e7a028f56820db49c8f2b1c6aec99a/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5bc487c5e7a028f56820db49c8f2b1c6aec99a/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=2b5bc487c5e7a028f56820db49c8f2b1c6aec99a", "patch": "@@ -83,15 +83,11 @@ pub struct LintStore {\n \n /// When you call `add_lint` on the session, you wind up storing one\n /// of these, which records a \"potential lint\" at a particular point.\n+#[derive(PartialEq)]\n pub struct EarlyLint {\n     /// what lint is this? (e.g., `dead_code`)\n     pub id: LintId,\n \n-    /// what span was it attached to (this is used for Eq comparisons;\n-    /// it duplicates to some extent the information in\n-    /// `diagnostic.span`)\n-    pub span: MultiSpan,\n-\n     /// the main message\n     pub diagnostic: Diagnostic,\n }\n@@ -106,38 +102,22 @@ impl fmt::Debug for EarlyLint {\n     }\n }\n \n-impl EarlyLint {\n-    pub fn new<M: EarlyLintMessage>(id: LintId, span: Span, msg: M) -> Self {\n-        let diagnostic = msg.into_diagnostic(span);\n-        EarlyLint { id: id, span: MultiSpan::from(span), diagnostic: diagnostic }\n-    }\n-\n-    pub fn with_diagnostic(id: LintId, span: Span, diagnostic: Diagnostic) -> Self {\n-        EarlyLint { id: id, span: MultiSpan::from(span), diagnostic: diagnostic }\n-    }\n-\n-    pub fn matches(&self, other: &EarlyLint) -> bool {\n-        self.id == other.id &&\n-            self.span == other.span &&\n-            self.diagnostic.message == other.diagnostic.message\n-    }\n-}\n-\n-pub trait EarlyLintMessage {\n-    fn into_diagnostic(self, span: Span) -> Diagnostic;\n+pub trait IntoEarlyLint {\n+    fn into_early_lint(self, id: LintId) -> EarlyLint;\n }\n \n-impl EarlyLintMessage for String {\n-    fn into_diagnostic(self, span: Span) -> Diagnostic {\n-        let mut diagnostic = Diagnostic::new(errors::Level::Warning, &self);\n+impl<'a> IntoEarlyLint for (Span, &'a str) {\n+    fn into_early_lint(self, id: LintId) -> EarlyLint {\n+        let (span, msg) = self;\n+        let mut diagnostic = Diagnostic::new(errors::Level::Warning, msg);\n         diagnostic.set_span(span);\n-        diagnostic\n+        EarlyLint { id: id, diagnostic: diagnostic }\n     }\n }\n \n-impl EarlyLintMessage for Diagnostic {\n-    fn into_diagnostic(self, _span: Span) -> Diagnostic {\n-        self\n+impl IntoEarlyLint for Diagnostic {\n+    fn into_early_lint(self, id: LintId) -> EarlyLint {\n+        EarlyLint { id: id, diagnostic: self }\n     }\n }\n \n@@ -578,8 +558,9 @@ pub trait LintContext: Sized {\n     }\n \n     fn early_lint(&self, early_lint: EarlyLint) {\n+        let span = early_lint.diagnostic.span.primary_span().expect(\"early lint w/o primary span\");\n         let mut err = self.struct_span_lint(early_lint.id.lint,\n-                                            early_lint.span,\n+                                            span,\n                                             &early_lint.diagnostic.message);\n         err.copy_details_not_message(&early_lint.diagnostic);\n         err.emit();\n@@ -1283,7 +1264,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // in the iteration code.\n     for (id, v) in tcx.sess.lints.borrow().iter() {\n         for early_lint in v {\n-            span_bug!(early_lint.span.clone(),\n+            span_bug!(early_lint.diagnostic.span.clone(),\n                       \"unprocessed lint {:?} at {}\",\n                       early_lint, tcx.map.node_to_string(*id));\n         }\n@@ -1321,7 +1302,7 @@ pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) {\n     // in the iteration code.\n     for (_, v) in sess.lints.borrow().iter() {\n         for early_lint in v {\n-            span_bug!(early_lint.span.clone(), \"unprocessed lint {:?}\", early_lint);\n+            span_bug!(early_lint.diagnostic.span.clone(), \"unprocessed lint {:?}\", early_lint);\n         }\n     }\n }"}, {"sha": "34e0ce7da14613b1a87011c5a59892616cc0fa3b", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5bc487c5e7a028f56820db49c8f2b1c6aec99a/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5bc487c5e7a028f56820db49c8f2b1c6aec99a/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=2b5bc487c5e7a028f56820db49c8f2b1c6aec99a", "patch": "@@ -41,7 +41,7 @@ use hir;\n \n pub use lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n                         raw_emit_lint, check_crate, check_ast_crate, gather_attrs,\n-                        raw_struct_lint, FutureIncompatibleInfo, EarlyLint, EarlyLintMessage};\n+                        raw_struct_lint, FutureIncompatibleInfo, EarlyLint, IntoEarlyLint};\n \n /// Specification of a single lint.\n #[derive(Copy, Clone, Debug)]"}, {"sha": "b4dadbf7961fb46593dacd228cabef4a327d572e", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2b5bc487c5e7a028f56820db49c8f2b1c6aec99a/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5bc487c5e7a028f56820db49c8f2b1c6aec99a/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=2b5bc487c5e7a028f56820db49c8f2b1c6aec99a", "patch": "@@ -258,16 +258,25 @@ impl Session {\n     pub fn unimpl(&self, msg: &str) -> ! {\n         self.diagnostic().unimpl(msg)\n     }\n-    pub fn add_lint<M: lint::EarlyLintMessage>(&self,\n-                                               lint: &'static lint::Lint,\n-                                               id: ast::NodeId,\n-                                               sp: Span,\n-                                               msg: M) {\n+    pub fn add_lint(&self,\n+                    lint: &'static lint::Lint,\n+                    id: ast::NodeId,\n+                    sp: Span,\n+                    msg: String)\n+    {\n+        self.add_lint_diagnostic(lint, id, (sp, &msg[..]))\n+    }\n+    pub fn add_lint_diagnostic<M>(&self,\n+                                  lint: &'static lint::Lint,\n+                                  id: ast::NodeId,\n+                                  msg: M)\n+        where M: lint::IntoEarlyLint,\n+    {\n         let lint_id = lint::LintId::of(lint);\n         let mut lints = self.lints.borrow_mut();\n-        let early_lint = lint::EarlyLint::new(lint_id, sp, msg);\n+        let early_lint = msg.into_early_lint(lint_id);\n         if let Some(arr) = lints.get_mut(&id) {\n-            if !arr.iter().any(|l| l.matches(&early_lint)) {\n+            if !arr.contains(&early_lint) {\n                 arr.push(early_lint);\n             }\n             return;"}, {"sha": "0f37daa51964ba699df236af6982f93c6a4ee3a0", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b5bc487c5e7a028f56820db49c8f2b1c6aec99a/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5bc487c5e7a028f56820db49c8f2b1c6aec99a/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=2b5bc487c5e7a028f56820db49c8f2b1c6aec99a", "patch": "@@ -6,7 +6,7 @@ use std::fmt;\n use syntax_pos::{MultiSpan, Span};\n \n #[must_use]\n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, PartialEq)]\n pub struct Diagnostic {\n     pub level: Level,\n     pub message: String,\n@@ -16,7 +16,7 @@ pub struct Diagnostic {\n }\n \n /// For example a note attached to an error.\n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, PartialEq)]\n pub struct SubDiagnostic {\n     pub level: Level,\n     pub message: String,"}, {"sha": "badee66b83dea3de14e591632a5dfd59b121d652", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b5bc487c5e7a028f56820db49c8f2b1c6aec99a/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5bc487c5e7a028f56820db49c8f2b1c6aec99a/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=2b5bc487c5e7a028f56820db49c8f2b1c6aec99a", "patch": "@@ -57,7 +57,7 @@ mod lock;\n use syntax_pos::{BytePos, Loc, FileLinesResult, FileName, MultiSpan, Span, NO_EXPANSION};\n use syntax_pos::MacroBacktrace;\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, PartialEq)]\n pub enum RenderSpan {\n     /// A FullSpan renders with both with an initial line for the\n     /// message, prefixed by file:linenum, followed by a summary of\n@@ -71,7 +71,7 @@ pub enum RenderSpan {\n     Suggestion(CodeSuggestion),\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, PartialEq)]\n pub struct CodeSuggestion {\n     pub msp: MultiSpan,\n     pub substitutes: Vec<String>,"}]}