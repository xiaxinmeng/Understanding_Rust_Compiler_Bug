{"sha": "c50a9d5b664478e533ba1d1d353213d70c8ad589", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MGE5ZDViNjY0NDc4ZTUzM2JhMWQxZDM1MzIxM2Q3MGM4YWQ1ODk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-06T15:16:17Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-06T15:18:59Z"}, "message": "Use rust_try_get_task for compat with new rt, and strenghten assumptions about borrow list", "tree": {"sha": "9c89c53d3823652b674a484b1fbd685da7bb8a59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c89c53d3823652b674a484b1fbd685da7bb8a59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c50a9d5b664478e533ba1d1d353213d70c8ad589", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c50a9d5b664478e533ba1d1d353213d70c8ad589", "html_url": "https://github.com/rust-lang/rust/commit/c50a9d5b664478e533ba1d1d353213d70c8ad589", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c50a9d5b664478e533ba1d1d353213d70c8ad589/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84f7ecce5c8b727309d0d48e84a965a5a3437fd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/84f7ecce5c8b727309d0d48e84a965a5a3437fd1", "html_url": "https://github.com/rust-lang/rust/commit/84f7ecce5c8b727309d0d48e84a965a5a3437fd1"}], "stats": {"total": 62, "additions": 32, "deletions": 30}, "files": [{"sha": "934874968d716592bdcf7e5cdb7d294dc483a154", "filename": "src/libcore/unstable/lang.rs", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/c50a9d5b664478e533ba1d1d353213d70c8ad589/src%2Flibcore%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c50a9d5b664478e533ba1d1d353213d70c8ad589/src%2Flibcore%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Flang.rs?ref=c50a9d5b664478e533ba1d1d353213d70c8ad589", "patch": "@@ -22,7 +22,6 @@ use rt::{context, OldTaskContext};\n use rt::local_services::borrow_local_services;\n use option::{Option, Some, None};\n use io;\n-use task::rt::rust_get_task;\n \n #[allow(non_camel_case_types)]\n pub type rust_task = c_void;\n@@ -56,6 +55,9 @@ pub mod rustrt {\n         #[rust_stack]\n         fn rust_set_task_borrow_list(task: *rust_task, map: *c_void);\n \n+        #[rust_stack]\n+        fn rust_try_get_task() -> *rust_task;\n+\n         fn rust_dbg_breakpoint();\n     }\n }\n@@ -84,26 +86,32 @@ struct BorrowRecord {\n \n fn try_take_task_borrow_list() -> Option<~[BorrowRecord]> {\n     unsafe {\n-        let cur_task = rust_get_task();\n-        let ptr = rustrt::rust_take_task_borrow_list(cur_task);\n-        if ptr.is_null() {\n-            None\n+        let cur_task: *rust_task = rustrt::rust_try_get_task();\n+        if cur_task.is_not_null() {\n+            let ptr = rustrt::rust_take_task_borrow_list(cur_task);\n+            if ptr.is_null() {\n+                None\n+            } else {\n+                let v: ~[BorrowRecord] = transmute(ptr);\n+                Some(v)\n+            }\n         } else {\n-            let v: ~[BorrowRecord] = transmute(ptr);\n-            Some(v)\n+            None\n         }\n     }\n }\n \n fn swap_task_borrow_list(f: &fn(~[BorrowRecord]) -> ~[BorrowRecord]) {\n     unsafe {\n-        let cur_task = rust_get_task();\n-        let mut borrow_list: ~[BorrowRecord] = {\n-            let ptr = rustrt::rust_take_task_borrow_list(cur_task);\n-            if ptr.is_null() { ~[] } else { transmute(ptr) }\n-        };\n-        borrow_list = f(borrow_list);\n-        rustrt::rust_set_task_borrow_list(cur_task, transmute(borrow_list));\n+        let cur_task: *rust_task = rustrt::rust_try_get_task();\n+        if cur_task.is_not_null() {\n+            let mut borrow_list: ~[BorrowRecord] = {\n+                let ptr = rustrt::rust_take_task_borrow_list(cur_task);\n+                if ptr.is_null() { ~[] } else { transmute(ptr) }\n+            };\n+            borrow_list = f(borrow_list);\n+            rustrt::rust_set_task_borrow_list(cur_task, transmute(borrow_list));\n+        }\n     }\n }\n \n@@ -128,9 +136,7 @@ unsafe fn fail_borrowed(box: *mut BoxRepr, file: *c_char, line: size_t) {\n             for borrow_list.each_reverse |entry| {\n                 if entry.box == box {\n                     str::push_str(&mut msg, sep);\n-                    let filename = unsafe {\n-                        str::raw::from_c_str(entry.file)\n-                    };\n+                    let filename = str::raw::from_c_str(entry.file);\n                     str::push_str(&mut msg, filename);\n                     str::push_str(&mut msg, fmt!(\":%u\", entry.line as uint));\n                     sep = \" and at \";\n@@ -351,25 +357,21 @@ pub unsafe fn record_borrow(a: *u8, old_ref_count: uint,\n pub unsafe fn unrecord_borrow(a: *u8, old_ref_count: uint,\n                               file: *c_char, line: size_t) {\n     if (old_ref_count & ALL_BITS) == 0 {\n-        // was not borrowed before\n+        // was not borrowed before, so we should find the record at\n+        // the end of the list\n         let a: *mut BoxRepr = transmute(a);\n         debug_borrow(\"unrecord_borrow:\", a, old_ref_count, 0, file, line);\n         do swap_task_borrow_list |borrow_list| {\n             let mut borrow_list = borrow_list;\n-            let br = BorrowRecord {box: a, file: file, line: line};\n-            match borrow_list.rposition_elem(&br) {\n-                Some(idx) => {\n-                    borrow_list.remove(idx);\n-                    borrow_list\n-                }\n-                None => {\n-                    let err = fmt!(\"no borrow found, br=%?, borrow_list=%?\",\n-                                   br, borrow_list);\n-                    do str::as_buf(err) |msg_p, _| {\n-                        fail_(msg_p as *c_char, file, line)\n-                    }\n+            assert!(!borrow_list.is_empty());\n+            let br = borrow_list.pop();\n+            if br.box != a || br.file != file || br.line != line {\n+                let err = fmt!(\"wrong borrow found, br=%?\", br);\n+                do str::as_buf(err) |msg_p, _| {\n+                    fail_(msg_p as *c_char, file, line)\n                 }\n             }\n+            borrow_list\n         }\n     }\n }"}]}