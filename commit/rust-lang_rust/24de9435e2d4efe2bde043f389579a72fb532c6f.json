{"sha": "24de9435e2d4efe2bde043f389579a72fb532c6f", "node_id": "C_kwDOAAsO6NoAKDI0ZGU5NDM1ZTJkNGVmZTJiZGUwNDNmMzg5NTc5YTcyZmI1MzJjNmY", "commit": {"author": {"name": "Luis Cardoso", "email": "61982523+LuisCardosoOliveira@users.noreply.github.com", "date": "2022-09-05T05:58:05Z"}, "committer": {"name": "Luis Cardoso", "email": "61982523+LuisCardosoOliveira@users.noreply.github.com", "date": "2022-09-08T06:30:57Z"}, "message": "translations(rustc_session): remove lint allow rule to the methods marked with rustc_lint_diagnostic\n\nThis commit removes the allows rules for the SessionDiagnostic lint\nthat were being used in the session.rs file.\n\nThanks to the PR #101230 we do not need to annotate the methods with\nthe allow rule as they are part of the diagnostic machinery.", "tree": {"sha": "3f1607f9011bed186b4f38f645844f69e569c930", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f1607f9011bed186b4f38f645844f69e569c930"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24de9435e2d4efe2bde043f389579a72fb532c6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24de9435e2d4efe2bde043f389579a72fb532c6f", "html_url": "https://github.com/rust-lang/rust/commit/24de9435e2d4efe2bde043f389579a72fb532c6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24de9435e2d4efe2bde043f389579a72fb532c6f/comments", "author": {"login": "LuisCardosoOliveira", "id": 61982523, "node_id": "MDQ6VXNlcjYxOTgyNTIz", "avatar_url": "https://avatars.githubusercontent.com/u/61982523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LuisCardosoOliveira", "html_url": "https://github.com/LuisCardosoOliveira", "followers_url": "https://api.github.com/users/LuisCardosoOliveira/followers", "following_url": "https://api.github.com/users/LuisCardosoOliveira/following{/other_user}", "gists_url": "https://api.github.com/users/LuisCardosoOliveira/gists{/gist_id}", "starred_url": "https://api.github.com/users/LuisCardosoOliveira/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LuisCardosoOliveira/subscriptions", "organizations_url": "https://api.github.com/users/LuisCardosoOliveira/orgs", "repos_url": "https://api.github.com/users/LuisCardosoOliveira/repos", "events_url": "https://api.github.com/users/LuisCardosoOliveira/events{/privacy}", "received_events_url": "https://api.github.com/users/LuisCardosoOliveira/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LuisCardosoOliveira", "id": 61982523, "node_id": "MDQ6VXNlcjYxOTgyNTIz", "avatar_url": "https://avatars.githubusercontent.com/u/61982523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LuisCardosoOliveira", "html_url": "https://github.com/LuisCardosoOliveira", "followers_url": "https://api.github.com/users/LuisCardosoOliveira/followers", "following_url": "https://api.github.com/users/LuisCardosoOliveira/following{/other_user}", "gists_url": "https://api.github.com/users/LuisCardosoOliveira/gists{/gist_id}", "starred_url": "https://api.github.com/users/LuisCardosoOliveira/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LuisCardosoOliveira/subscriptions", "organizations_url": "https://api.github.com/users/LuisCardosoOliveira/orgs", "repos_url": "https://api.github.com/users/LuisCardosoOliveira/repos", "events_url": "https://api.github.com/users/LuisCardosoOliveira/events{/privacy}", "received_events_url": "https://api.github.com/users/LuisCardosoOliveira/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f06320c2491acc8cf9e61c976041785acb06aca", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f06320c2491acc8cf9e61c976041785acb06aca", "html_url": "https://github.com/rust-lang/rust/commit/0f06320c2491acc8cf9e61c976041785acb06aca"}], "stats": {"total": 73, "additions": 12, "deletions": 61}, "files": [{"sha": "a9ed8b4835b77fcc00383ae0eb9d32804e1336c2", "filename": "compiler/rustc_error_messages/locales/en-US/session.ftl", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24de9435e2d4efe2bde043f389579a72fb532c6f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/24de9435e2d4efe2bde043f389579a72fb532c6f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl?ref=24de9435e2d4efe2bde043f389579a72fb532c6f", "patch": "@@ -19,13 +19,13 @@ session_target_data_layout_parse_error = {$err}\n \n session_not_circumvent_feature = `-Zunleash-the-miri-inside-of-you` may not be used to circumvent feature gates, except when testing error paths in the CTFE engine\n \n-session_profile_use_file_does_not_exist = File `{$path}` passed to `-C profile-use` does not exist.\n+session_profile_use_file_does_not_exist = file `{$path}` passed to `-C profile-use` does not exist.\n \n-session_linker_plugin_lto_windows_not_supported = Linker plugin based LTO is not supported together with `-C prefer-dynamic` when targeting Windows-like targets\"\n+session_linker_plugin_lto_windows_not_supported = linker plugin based LTO is not supported together with `-C prefer-dynamic` when targeting Windows-like targets\n \n-session_profile_sample_use_file_does_not_exist = File `{$path}` passed to `-C profile-sample-use` does not exist.\n+session_profile_sample_use_file_does_not_exist = file `{$path}` passed to `-C profile-sample-use` does not exist.\n \n-session_target_requires_unwind_tables = target requires unwind tables, they cannot be disabled with `-C force-unwind-tables=no`.\"\n+session_target_requires_unwind_tables = target requires unwind tables, they cannot be disabled with `-C force-unwind-tables=no`\n \n session_sanitizer_not_supported = {$us} sanitizer is not supported for this target\n "}, {"sha": "ccdcf47b46885e2157776a88beb1bd6dc1d19060", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24de9435e2d4efe2bde043f389579a72fb532c6f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24de9435e2d4efe2bde043f389579a72fb532c6f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=24de9435e2d4efe2bde043f389579a72fb532c6f", "patch": "@@ -52,7 +52,6 @@ use rustc_query_system::ich::StableHashingContext;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use rustc_session::config::{CrateType, OutputFilenames};\n use rustc_session::cstore::CrateStoreDyn;\n-use rustc_session::errors::TargetDataLayoutParseError;\n use rustc_session::lint::{Level, Lint};\n use rustc_session::Limit;\n use rustc_session::Session;\n@@ -1252,7 +1251,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         output_filenames: OutputFilenames,\n     ) -> GlobalCtxt<'tcx> {\n         let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {\n-            s.emit_fatal(TargetDataLayoutParseError { err });\n+            s.emit_fatal(err);\n         });\n         let interners = CtxtInterners::new(arena);\n         let common_types = CommonTypes::new("}, {"sha": "8bb3878fbbb4752c8d7f4371cab537ba6b39a658", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24de9435e2d4efe2bde043f389579a72fb532c6f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24de9435e2d4efe2bde043f389579a72fb532c6f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=24de9435e2d4efe2bde043f389579a72fb532c6f", "patch": "@@ -1,7 +1,6 @@\n //! Contains infrastructure for configuring the compiler, including parsing\n //! command-line options.\n \n-use crate::errors::TargetDataLayoutParseError;\n pub use crate::options::*;\n \n use crate::search_paths::SearchPath;\n@@ -899,7 +898,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     let max_atomic_width = sess.target.max_atomic_width();\n     let atomic_cas = sess.target.atomic_cas;\n     let layout = TargetDataLayout::parse(&sess.target).unwrap_or_else(|err| {\n-        sess.emit_fatal(TargetDataLayoutParseError { err });\n+        sess.emit_fatal(err);\n     });\n \n     let mut ret = CrateConfig::default();"}, {"sha": "a4e13e22ae221c56cd391b12feb4178ff346891a", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/24de9435e2d4efe2bde043f389579a72fb532c6f/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24de9435e2d4efe2bde043f389579a72fb532c6f/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=24de9435e2d4efe2bde043f389579a72fb532c6f", "patch": "@@ -1,9 +1,8 @@\n use std::num::NonZeroU32;\n \n use crate::cgu_reuse_tracker::CguReuse;\n-use crate::parse::ParseSess;\n-use crate::{self as rustc_session};\n-use rustc_errors::{fluent, MultiSpan};\n+use crate::{self as rustc_session, SessionDiagnostic};\n+use rustc_errors::{fluent, DiagnosticBuilder, Handler, MultiSpan};\n use rustc_macros::SessionDiagnostic;\n use rustc_span::{Span, Symbol};\n use rustc_target::abi::TargetDataLayoutErrors;\n@@ -46,14 +45,10 @@ pub struct FeatureDiagnosticHelp {\n     pub feature: Symbol,\n }\n \n-pub struct TargetDataLayoutParseError<'a> {\n-    pub err: TargetDataLayoutErrors<'a>,\n-}\n-\n-impl crate::SessionDiagnostic<'_, !> for TargetDataLayoutParseError<'_> {\n-    fn into_diagnostic(self, sess: &ParseSess) -> rustc_errors::DiagnosticBuilder<'_, !> {\n+impl SessionDiagnostic<'_, !> for TargetDataLayoutErrors<'_> {\n+    fn into_diagnostic(self, sess: &Handler) -> DiagnosticBuilder<'_, !> {\n         let mut diag;\n-        match self.err {\n+        match self {\n             TargetDataLayoutErrors::InvalidAddressSpace { addr_space, err, cause } => {\n                 diag = sess.struct_fatal(fluent::session::target_invalid_address_space);\n                 diag.set_arg(\"addr_space\", addr_space);"}, {"sha": "6add576cdff3543a544c152c2fe07e1966f8803c", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 43, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/24de9435e2d4efe2bde043f389579a72fb532c6f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24de9435e2d4efe2bde043f389579a72fb532c6f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=24de9435e2d4efe2bde043f389579a72fb532c6f", "patch": "@@ -241,7 +241,7 @@ impl Session {\n         if !unleashed_features.is_empty() {\n             let mut must_err = false;\n             // Create a diagnostic pointing at where things got unleashed.\n-            // FIXME: We need to correctly migrate this. I couldn't find a way to migrate this.\n+            // FIXME(#100717): needs eager translation/lists\n             #[allow(rustc::untranslatable_diagnostic)]\n             #[allow(rustc::diagnostic_outside_of_impl)]\n             let mut diag = self.struct_warn(\"skipping const checks\");\n@@ -296,8 +296,6 @@ impl Session {\n     }\n \n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_warn<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -306,8 +304,6 @@ impl Session {\n         self.diagnostic().struct_span_warn(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_warn_with_expectation<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -317,8 +313,6 @@ impl Session {\n         self.diagnostic().struct_span_warn_with_expectation(sp, msg, id)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_warn_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -328,8 +322,6 @@ impl Session {\n         self.diagnostic().struct_span_warn_with_code(sp, msg, code)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_warn(msg)\n     }\n@@ -342,8 +334,6 @@ impl Session {\n         self.diagnostic().struct_warn_with_expectation(msg, id)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_allow<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -352,14 +342,10 @@ impl Session {\n         self.diagnostic().struct_span_allow(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_allow(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_allow(msg)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_expect(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -368,8 +354,6 @@ impl Session {\n         self.diagnostic().struct_expect(msg, id)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -378,8 +362,6 @@ impl Session {\n         self.diagnostic().struct_span_err(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -390,17 +372,13 @@ impl Session {\n     }\n     // FIXME: This method should be removed (every error should have an associated error code).\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.parse_sess.struct_err(msg)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_err_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -409,8 +387,6 @@ impl Session {\n         self.diagnostic().struct_err_with_code(msg, code)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_warn_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -419,8 +395,6 @@ impl Session {\n         self.diagnostic().struct_warn_with_code(msg, code)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_fatal<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -429,8 +403,6 @@ impl Session {\n         self.diagnostic().struct_span_fatal(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_fatal_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -440,21 +412,15 @@ impl Session {\n         self.diagnostic().struct_span_fatal_with_code(sp, msg, code)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_fatal(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, !> {\n         self.diagnostic().struct_fatal(msg)\n     }\n \n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.diagnostic().span_fatal(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_fatal_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -464,14 +430,10 @@ impl Session {\n         self.diagnostic().span_fatal_with_code(sp, msg, code)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn fatal(&self, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.diagnostic().fatal(msg).raise()\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_err_or_warn<S: Into<MultiSpan>>(\n         &self,\n         is_warning: bool,\n@@ -485,8 +447,6 @@ impl Session {\n         }\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -495,8 +455,6 @@ impl Session {\n         self.diagnostic().span_err(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,"}]}