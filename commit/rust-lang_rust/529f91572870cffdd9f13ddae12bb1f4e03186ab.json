{"sha": "529f91572870cffdd9f13ddae12bb1f4e03186ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyOWY5MTU3Mjg3MGNmZmRkOWYxM2RkYWUxMmJiMWY0ZTAzMTg2YWI=", "commit": {"author": {"name": "Chris Morgan", "email": "me@chrismorgan.info", "date": "2013-12-14T12:22:01Z"}, "committer": {"name": "Chris Morgan", "email": "me@chrismorgan.info", "date": "2013-12-14T12:22:01Z"}, "message": "Remove {As,Into,To}{Option,Either,Result} traits.\n\nExpanded, that is:\n\n- `AsOption`\n- `IntoOption`\n- `ToOption`\n- `AsEither`\n- `IntoEither`\n- `ToEither`\n- `AsResult`\n- `IntoResult`\n- `ToResult`\n\nThese were defined for each other but never *used* anywhere. They are\nall trivial and so removal will have negligible effect upon anyone.\n`Either` has fallen out of favour (and its implementation of these\ntraits of dubious semantics), `Option<T>` \u2192 `Result<T, ()>` was never\nreally useful and `Result<T, E>` \u2192 `Option<T>` should now be done with\n`Result.ok()` (mirrored with `Result.err()` for even more usefulness).\n\nIn summary, there's really no point in any of these remaining.", "tree": {"sha": "e690f31fa381a416efa9d713230fb3f018917703", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e690f31fa381a416efa9d713230fb3f018917703"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/529f91572870cffdd9f13ddae12bb1f4e03186ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/529f91572870cffdd9f13ddae12bb1f4e03186ab", "html_url": "https://github.com/rust-lang/rust/commit/529f91572870cffdd9f13ddae12bb1f4e03186ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/529f91572870cffdd9f13ddae12bb1f4e03186ab/comments", "author": {"login": "chris-morgan", "id": 392868, "node_id": "MDQ6VXNlcjM5Mjg2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/392868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-morgan", "html_url": "https://github.com/chris-morgan", "followers_url": "https://api.github.com/users/chris-morgan/followers", "following_url": "https://api.github.com/users/chris-morgan/following{/other_user}", "gists_url": "https://api.github.com/users/chris-morgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-morgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-morgan/subscriptions", "organizations_url": "https://api.github.com/users/chris-morgan/orgs", "repos_url": "https://api.github.com/users/chris-morgan/repos", "events_url": "https://api.github.com/users/chris-morgan/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-morgan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chris-morgan", "id": 392868, "node_id": "MDQ6VXNlcjM5Mjg2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/392868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-morgan", "html_url": "https://github.com/chris-morgan", "followers_url": "https://api.github.com/users/chris-morgan/followers", "following_url": "https://api.github.com/users/chris-morgan/following{/other_user}", "gists_url": "https://api.github.com/users/chris-morgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-morgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-morgan/subscriptions", "organizations_url": "https://api.github.com/users/chris-morgan/orgs", "repos_url": "https://api.github.com/users/chris-morgan/repos", "events_url": "https://api.github.com/users/chris-morgan/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-morgan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "844003683beb236616a069a233e66bfbe504427e", "url": "https://api.github.com/repos/rust-lang/rust/commits/844003683beb236616a069a233e66bfbe504427e", "html_url": "https://github.com/rust-lang/rust/commit/844003683beb236616a069a233e66bfbe504427e"}], "stats": {"total": 441, "additions": 0, "deletions": 441}, "files": [{"sha": "96f4e524852d11e012b2de0c0828b87361a9157a", "filename": "src/libstd/either.rs", "status": "modified", "additions": 0, "deletions": 187, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/529f91572870cffdd9f13ddae12bb1f4e03186ab/src%2Flibstd%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529f91572870cffdd9f13ddae12bb1f4e03186ab/src%2Flibstd%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Feither.rs?ref=529f91572870cffdd9f13ddae12bb1f4e03186ab", "patch": "@@ -13,13 +13,10 @@\n #[allow(missing_doc)];\n \n use option::{Some, None};\n-use option;\n use clone::Clone;\n use container::Container;\n use cmp::Eq;\n use iter::{Iterator, FilterMap};\n-use result::Result;\n-use result;\n use str::StrSlice;\n use vec;\n use vec::{OwnedVector, ImmutableVector};\n@@ -105,101 +102,6 @@ impl<L, R> Either<L, R> {\n     }\n }\n \n-/// A generic trait for converting a value to a `Either`\n-pub trait ToEither<L, R> {\n-    /// Convert to the `either` type\n-    fn to_either(&self) -> Either<L, R>;\n-}\n-\n-/// A generic trait for converting a value to a `Either`\n-pub trait IntoEither<L, R> {\n-    /// Convert to the `either` type\n-    fn into_either(self) -> Either<L, R>;\n-}\n-\n-/// A generic trait for converting a value to a `Either`\n-pub trait AsEither<L, R> {\n-    /// Convert to the `either` type\n-    fn as_either<'a>(&'a self) -> Either<&'a L, &'a R>;\n-}\n-\n-impl<L, R: Clone> option::ToOption<R> for Either<L, R> {\n-    #[inline]\n-    fn to_option(&self)-> option::Option<R> {\n-        match *self {\n-            Left(_) => None,\n-            Right(ref r) => Some(r.clone()),\n-        }\n-    }\n-}\n-\n-impl<L, R> option::IntoOption<R> for Either<L, R> {\n-    #[inline]\n-    fn into_option(self)-> option::Option<R> {\n-        match self {\n-            Left(_) => None,\n-            Right(r) => Some(r),\n-        }\n-    }\n-}\n-\n-impl<L, R> option::AsOption<R> for Either<L, R> {\n-    #[inline]\n-    fn as_option<'a>(&'a self) -> option::Option<&'a R> {\n-        match *self {\n-            Left(_) => None,\n-            Right(ref r) => Some(r),\n-        }\n-    }\n-}\n-\n-impl<L: Clone, R: Clone> result::ToResult<R, L> for Either<L, R> {\n-    #[inline]\n-    fn to_result(&self)-> result::Result<R, L> {\n-        match *self {\n-            Left(ref l) => result::Err(l.clone()),\n-            Right(ref r) => result::Ok(r.clone()),\n-        }\n-    }\n-}\n-\n-impl<L, R> result::IntoResult<R, L> for Either<L, R> {\n-    #[inline]\n-    fn into_result(self)-> result::Result<R, L> {\n-        match self {\n-            Left(l) => result::Err(l),\n-            Right(r) => result::Ok(r),\n-        }\n-    }\n-}\n-\n-impl<L, R> result::AsResult<R, L> for Either<L, R> {\n-    #[inline]\n-    fn as_result<'a>(&'a self) -> result::Result<&'a R, &'a L> {\n-        match *self {\n-            Left(ref l) => result::Err(l),\n-            Right(ref r) => result::Ok(r),\n-        }\n-    }\n-}\n-\n-impl<L: Clone, R: Clone> ToEither<L, R> for Either<L, R> {\n-    fn to_either(&self) -> Either<L, R> { self.clone() }\n-}\n-\n-impl<L, R> IntoEither<L, R> for Either<L, R> {\n-    fn into_either(self) -> Either<L, R> { self }\n-}\n-\n-impl<L, R> AsEither<L, R> for Either<L, R> {\n-    fn as_either<'a>(&'a self) -> Either<&'a L, &'a R> {\n-        match *self {\n-            Left(ref l) => Left(l),\n-            Right(ref r) => Right(r),\n-        }\n-    }\n-}\n-\n /// An iterator yielding the `Left` values of its source\n pub type Lefts<L, R, Iter> = FilterMap<'static, Either<L, R>, L, Iter>;\n \n@@ -251,11 +153,6 @@ pub fn partition<L, R>(eithers: ~[Either<L, R>]) -> (~[L], ~[R]) {\n mod tests {\n     use super::*;\n \n-    use option::{IntoOption, ToOption, AsOption};\n-    use option;\n-    use result::{IntoResult, ToResult, AsResult};\n-    use result;\n-\n     #[test]\n     fn test_either_left() {\n         let val = Left(10);\n@@ -348,88 +245,4 @@ mod tests {\n         assert_eq!(lefts.len(), 0u);\n         assert_eq!(rights.len(), 0u);\n     }\n-\n-    #[test]\n-    pub fn test_to_option() {\n-        let right: Either<int, int> = Right(100);\n-        let left: Either<int, int> = Left(404);\n-\n-        assert_eq!(right.to_option(), option::Some(100));\n-        assert_eq!(left.to_option(), option::None);\n-    }\n-\n-    #[test]\n-    pub fn test_into_option() {\n-        let right: Either<int, int> = Right(100);\n-        let left: Either<int, int> = Left(404);\n-\n-        assert_eq!(right.into_option(), option::Some(100));\n-        assert_eq!(left.into_option(), option::None);\n-    }\n-\n-    #[test]\n-    pub fn test_as_option() {\n-        let right: Either<int, int> = Right(100);\n-        let left: Either<int, int> = Left(404);\n-\n-        assert_eq!(right.as_option().unwrap(), &100);\n-        assert_eq!(left.as_option(), option::None);\n-    }\n-\n-    #[test]\n-    pub fn test_to_result() {\n-        let right: Either<int, int> = Right(100);\n-        let left: Either<int, int> = Left(404);\n-\n-        assert_eq!(right.to_result(), result::Ok(100));\n-        assert_eq!(left.to_result(), result::Err(404));\n-    }\n-\n-    #[test]\n-    pub fn test_into_result() {\n-        let right: Either<int, int> = Right(100);\n-        let left: Either<int, int> = Left(404);\n-\n-        assert_eq!(right.into_result(), result::Ok(100));\n-        assert_eq!(left.into_result(), result::Err(404));\n-    }\n-\n-    #[test]\n-    pub fn test_as_result() {\n-        let right: Either<int, int> = Right(100);\n-        let left: Either<int, int> = Left(404);\n-\n-        let x = 100;\n-        assert_eq!(right.as_result(), result::Ok(&x));\n-\n-        let x = 404;\n-        assert_eq!(left.as_result(), result::Err(&x));\n-    }\n-\n-    #[test]\n-    pub fn test_to_either() {\n-        let right: Either<int, int> = Right(100);\n-        let left: Either<int, int> = Left(404);\n-\n-        assert_eq!(right.to_either(), Right(100));\n-        assert_eq!(left.to_either(), Left(404));\n-    }\n-\n-    #[test]\n-    pub fn test_into_either() {\n-        let right: Either<int, int> = Right(100);\n-        let left: Either<int, int> = Left(404);\n-\n-        assert_eq!(right.into_either(), Right(100));\n-        assert_eq!(left.into_either(), Left(404));\n-    }\n-\n-    #[test]\n-    pub fn test_as_either() {\n-        let right: Either<int, int> = Right(100);\n-        let left: Either<int, int> = Left(404);\n-\n-        assert_eq!(right.as_either().unwrap_right(), &100);\n-        assert_eq!(left.as_either().unwrap_left(), &404);\n-    }\n }"}, {"sha": "87f6c8608fdfbe8cd2a86d32aae7103d07b06d09", "filename": "src/libstd/option.rs", "status": "modified", "additions": 0, "deletions": 122, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/529f91572870cffdd9f13ddae12bb1f4e03186ab/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529f91572870cffdd9f13ddae12bb1f4e03186ab/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=529f91572870cffdd9f13ddae12bb1f4e03186ab", "patch": "@@ -45,8 +45,6 @@ use default::Default;\n use fmt;\n use iter::{Iterator, DoubleEndedIterator, ExactSize};\n use kinds::Send;\n-use result::{IntoResult, ToResult, AsResult};\n-use result::{Result, Ok, Err};\n use str::OwnedStr;\n use to_str::ToStr;\n use util;\n@@ -359,83 +357,10 @@ impl<T: Default> Option<T> {\n     }\n }\n \n-/////////////////////////////////////////////////////////////////////////////\n-// Constructor extension trait\n-/////////////////////////////////////////////////////////////////////////////\n-\n-/// A generic trait for converting a value to a `Option`\n-pub trait ToOption<T> {\n-    /// Convert to the `option` type\n-    fn to_option(&self) -> Option<T>;\n-}\n-\n-/// A generic trait for converting a value to a `Option`\n-pub trait IntoOption<T> {\n-    /// Convert to the `option` type\n-    fn into_option(self) -> Option<T>;\n-}\n-\n-/// A generic trait for converting a value to a `Option`\n-pub trait AsOption<T> {\n-    /// Convert to the `option` type\n-    fn as_option<'a>(&'a self) -> Option<&'a T>;\n-}\n-\n-impl<T: Clone> ToOption<T> for Option<T> {\n-    #[inline]\n-    fn to_option(&self) -> Option<T> { self.clone() }\n-}\n-\n-impl<T> IntoOption<T> for Option<T> {\n-    #[inline]\n-    fn into_option(self) -> Option<T> { self }\n-}\n-\n-impl<T> AsOption<T> for Option<T> {\n-    #[inline]\n-    fn as_option<'a>(&'a self) -> Option<&'a T> {\n-        match *self {\n-            Some(ref x) => Some(x),\n-            None => None,\n-        }\n-    }\n-}\n-\n /////////////////////////////////////////////////////////////////////////////\n // Trait implementations\n /////////////////////////////////////////////////////////////////////////////\n \n-impl<T: Clone> ToResult<T, ()> for Option<T> {\n-    #[inline]\n-    fn to_result(&self) -> Result<T, ()> {\n-        match *self {\n-            Some(ref x) => Ok(x.clone()),\n-            None => Err(()),\n-        }\n-    }\n-}\n-\n-impl<T> IntoResult<T, ()> for Option<T> {\n-    #[inline]\n-    fn into_result(self) -> Result<T, ()> {\n-        match self {\n-            Some(x) => Ok(x),\n-            None => Err(()),\n-        }\n-    }\n-}\n-\n-impl<T> AsResult<T, ()> for Option<T> {\n-    #[inline]\n-    fn as_result<'a>(&'a self) -> Result<&'a T, &'a ()> {\n-        static UNIT: () = ();\n-        match *self {\n-            Some(ref t) => Ok(t),\n-            None => Err(&UNIT),\n-        }\n-    }\n-}\n-\n impl<T: fmt::Default> fmt::Default for Option<T> {\n     #[inline]\n     fn fmt(s: &Option<T>, f: &mut fmt::Formatter) {\n@@ -493,8 +418,6 @@ impl<A> ExactSize<A> for OptionIterator<A> {}\n mod tests {\n     use super::*;\n \n-    use result::{IntoResult, ToResult};\n-    use result::{Ok, Err};\n     use str::StrSlice;\n     use util;\n \n@@ -732,49 +655,4 @@ mod tests {\n         assert!(!x.mutate_default(0i, |i| i+1));\n         assert_eq!(x, Some(0i));\n     }\n-\n-    #[test]\n-    pub fn test_to_option() {\n-        let some: Option<int> = Some(100);\n-        let none: Option<int> = None;\n-\n-        assert_eq!(some.to_option(), Some(100));\n-        assert_eq!(none.to_option(), None);\n-    }\n-\n-    #[test]\n-    pub fn test_into_option() {\n-        let some: Option<int> = Some(100);\n-        let none: Option<int> = None;\n-\n-        assert_eq!(some.into_option(), Some(100));\n-        assert_eq!(none.into_option(), None);\n-    }\n-\n-    #[test]\n-    pub fn test_as_option() {\n-        let some: Option<int> = Some(100);\n-        let none: Option<int> = None;\n-\n-        assert_eq!(some.as_option().unwrap(), &100);\n-        assert_eq!(none.as_option(), None);\n-    }\n-\n-    #[test]\n-    pub fn test_to_result() {\n-        let some: Option<int> = Some(100);\n-        let none: Option<int> = None;\n-\n-        assert_eq!(some.to_result(), Ok(100));\n-        assert_eq!(none.to_result(), Err(()));\n-    }\n-\n-    #[test]\n-    pub fn test_into_result() {\n-        let some: Option<int> = Some(100);\n-        let none: Option<int> = None;\n-\n-        assert_eq!(some.into_result(), Ok(100));\n-        assert_eq!(none.into_result(), Err(()));\n-    }\n }"}, {"sha": "79198d0314f87b047048e53ad9accb1f3bf1c011", "filename": "src/libstd/result.rs", "status": "modified", "additions": 0, "deletions": 132, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/529f91572870cffdd9f13ddae12bb1f4e03186ab/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529f91572870cffdd9f13ddae12bb1f4e03186ab/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=529f91572870cffdd9f13ddae12bb1f4e03186ab", "patch": "@@ -15,7 +15,6 @@ use cmp::Eq;\n use fmt;\n use iter::Iterator;\n use option::{None, Option, Some};\n-use option::{ToOption, IntoOption, AsOption};\n use str::OwnedStr;\n use to_str::ToStr;\n use vec::OwnedVector;\n@@ -204,82 +203,10 @@ impl<T, E> Result<T, E> {\n     }\n }\n \n-/////////////////////////////////////////////////////////////////////////////\n-// Constructor extension trait\n-/////////////////////////////////////////////////////////////////////////////\n-\n-/// A generic trait for converting a value to a `Result`\n-pub trait ToResult<T, E> {\n-    /// Convert to the `result` type\n-    fn to_result(&self) -> Result<T, E>;\n-}\n-\n-/// A generic trait for converting a value to a `Result`\n-pub trait IntoResult<T, E> {\n-    /// Convert to the `result` type\n-    fn into_result(self) -> Result<T, E>;\n-}\n-\n-/// A generic trait for converting a value to a `Result`\n-pub trait AsResult<T, E> {\n-    /// Convert to the `result` type\n-    fn as_result<'a>(&'a self) -> Result<&'a T, &'a E>;\n-}\n-\n-impl<T: Clone, E: Clone> ToResult<T, E> for Result<T, E> {\n-    #[inline]\n-    fn to_result(&self) -> Result<T, E> { self.clone() }\n-}\n-\n-impl<T, E> IntoResult<T, E> for Result<T, E> {\n-    #[inline]\n-    fn into_result(self) -> Result<T, E> { self }\n-}\n-\n-impl<T, E> AsResult<T, E> for Result<T, E> {\n-    #[inline]\n-    fn as_result<'a>(&'a self) -> Result<&'a T, &'a E> {\n-        match *self {\n-            Ok(ref t) => Ok(t),\n-            Err(ref e) => Err(e),\n-        }\n-    }\n-}\n-\n /////////////////////////////////////////////////////////////////////////////\n // Trait implementations\n /////////////////////////////////////////////////////////////////////////////\n \n-impl<T: Clone, E> ToOption<T> for Result<T, E> {\n-    #[inline]\n-    fn to_option(&self) -> Option<T> {\n-        match *self {\n-            Ok(ref t) => Some(t.clone()),\n-            Err(_) => None,\n-        }\n-    }\n-}\n-\n-impl<T, E> IntoOption<T> for Result<T, E> {\n-    #[inline]\n-    fn into_option(self) -> Option<T> {\n-        match self {\n-            Ok(t) => Some(t),\n-            Err(_) => None,\n-        }\n-    }\n-}\n-\n-impl<T, E> AsOption<T> for Result<T, E> {\n-    #[inline]\n-    fn as_option<'a>(&'a self) -> Option<&'a T> {\n-        match *self {\n-            Ok(ref t) => Some(t),\n-            Err(_) => None,\n-        }\n-    }\n-}\n-\n impl<T: fmt::Default, E: fmt::Default> fmt::Default for Result<T, E> {\n     #[inline]\n     fn fmt(s: &Result<T, E>, f: &mut fmt::Formatter) {\n@@ -364,8 +291,6 @@ mod tests {\n     use super::*;\n \n     use iter::range;\n-    use option::{IntoOption, ToOption, AsOption};\n-    use option::{Some, None};\n     use vec::ImmutableVector;\n     use to_str::ToStr;\n \n@@ -460,63 +385,6 @@ mod tests {\n                    Err(1));\n     }\n \n-    #[test]\n-    pub fn test_to_option() {\n-        let ok: Result<int, int> = Ok(100);\n-        let err: Result<int, int> = Err(404);\n-\n-        assert_eq!(ok.to_option(), Some(100));\n-        assert_eq!(err.to_option(), None);\n-    }\n-\n-    #[test]\n-    pub fn test_into_option() {\n-        let ok: Result<int, int> = Ok(100);\n-        let err: Result<int, int> = Err(404);\n-\n-        assert_eq!(ok.into_option(), Some(100));\n-        assert_eq!(err.into_option(), None);\n-    }\n-\n-    #[test]\n-    pub fn test_as_option() {\n-        let ok: Result<int, int> = Ok(100);\n-        let err: Result<int, int> = Err(404);\n-\n-        assert_eq!(ok.as_option().unwrap(), &100);\n-        assert_eq!(err.as_option(), None);\n-    }\n-\n-    #[test]\n-    pub fn test_to_result() {\n-        let ok: Result<int, int> = Ok(100);\n-        let err: Result<int, int> = Err(404);\n-\n-        assert_eq!(ok.to_result(), Ok(100));\n-        assert_eq!(err.to_result(), Err(404));\n-    }\n-\n-    #[test]\n-    pub fn test_into_result() {\n-        let ok: Result<int, int> = Ok(100);\n-        let err: Result<int, int> = Err(404);\n-\n-        assert_eq!(ok.into_result(), Ok(100));\n-        assert_eq!(err.into_result(), Err(404));\n-    }\n-\n-    #[test]\n-    pub fn test_as_result() {\n-        let ok: Result<int, int> = Ok(100);\n-        let err: Result<int, int> = Err(404);\n-\n-        let x = 100;\n-        assert_eq!(ok.as_result(), Ok(&x));\n-\n-        let x = 404;\n-        assert_eq!(err.as_result(), Err(&x));\n-    }\n-\n     #[test]\n     pub fn test_to_str() {\n         let ok: Result<int, ~str> = Ok(100);"}]}