{"sha": "375c13cd44a4aef7f7c99269bd621017ee9d7aeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NWMxM2NkNDRhNGFlZjdmN2M5OTI2OWJkNjIxMDE3ZWU5ZDdhZWI=", "commit": {"author": {"name": "Domantas Jadenkus", "email": "djadenkus@gmail.com", "date": "2021-02-13T12:57:06Z"}, "committer": {"name": "Domantas Jadenkus", "email": "djadenkus@gmail.com", "date": "2021-02-13T12:57:06Z"}, "message": "make it work for record-style variants", "tree": {"sha": "7e7cee184a7c82a577bc6a89359cd982fd9207e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e7cee184a7c82a577bc6a89359cd982fd9207e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/375c13cd44a4aef7f7c99269bd621017ee9d7aeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/375c13cd44a4aef7f7c99269bd621017ee9d7aeb", "html_url": "https://github.com/rust-lang/rust/commit/375c13cd44a4aef7f7c99269bd621017ee9d7aeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/375c13cd44a4aef7f7c99269bd621017ee9d7aeb/comments", "author": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6799088579fec4400eee897aba13e9d6a3ac8f29", "url": "https://api.github.com/repos/rust-lang/rust/commits/6799088579fec4400eee897aba13e9d6a3ac8f29", "html_url": "https://github.com/rust-lang/rust/commit/6799088579fec4400eee897aba13e9d6a3ac8f29"}], "stats": {"total": 60, "additions": 46, "deletions": 14}, "files": [{"sha": "c28eeff51c8adface3496da79563ff233cdde7e6", "filename": "crates/assists/src/handlers/generate_from_impl_for_enum.rs", "status": "modified", "additions": 46, "deletions": 14, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/375c13cd44a4aef7f7c99269bd621017ee9d7aeb/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375c13cd44a4aef7f7c99269bd621017ee9d7aeb/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs?ref=375c13cd44a4aef7f7c99269bd621017ee9d7aeb", "patch": "@@ -30,14 +30,22 @@ pub(crate) fn generate_from_impl_for_enum(acc: &mut Assists, ctx: &AssistContext\n     let variant_name = variant.name()?;\n     let enum_name = variant.parent_enum().name()?;\n     let enum_type_params = variant.parent_enum().generic_param_list();\n-    let field_list = match variant.kind() {\n-        ast::StructKind::Tuple(field_list) => field_list,\n-        _ => return None,\n+    let (field_name, field_type) = match variant.kind() {\n+        ast::StructKind::Tuple(field_list) => {\n+            if field_list.fields().count() != 1 {\n+                return None;\n+            }\n+            (None, field_list.fields().next()?.ty()?)\n+        }\n+        ast::StructKind::Record(field_list) => {\n+            if field_list.fields().count() != 1 {\n+                return None;\n+            }\n+            let field = field_list.fields().next()?;\n+            (Some(field.name()?), field.ty()?)\n+        }\n+        ast::StructKind::Unit => return None,\n     };\n-    if field_list.fields().count() != 1 {\n-        return None;\n-    }\n-    let field_type = field_list.fields().next()?.ty()?;\n \n     if existing_from_impl(&ctx.sema, &variant).is_some() {\n         mark::hit!(test_add_from_impl_already_exists);\n@@ -69,16 +77,30 @@ pub(crate) fn generate_from_impl_for_enum(acc: &mut Assists, ctx: &AssistContext\n                 let generic_params = lifetime_params.chain(type_params).format(\", \");\n                 format_to!(buf, \"<{}>\", generic_params)\n             }\n-            format_to!(\n-                buf,\n-                r#\" {{\n+            if let Some(name) = field_name {\n+                format_to!(\n+                    buf,\n+                    r#\" {{\n+    fn from({0}: {1}) -> Self {{\n+        Self::{2} {{ {0} }}\n+    }}\n+}}\"#,\n+                    name.text(),\n+                    field_type.syntax(),\n+                    variant_name,\n+                );\n+            } else {\n+                format_to!(\n+                    buf,\n+                    r#\" {{\n     fn from(v: {}) -> Self {{\n         Self::{}(v)\n     }}\n }}\"#,\n-                field_type.syntax(),\n-                variant_name,\n-            );\n+                    field_type.syntax(),\n+                    variant_name,\n+                );\n+            }\n             edit.insert(start_offset, buf);\n         },\n     )\n@@ -161,7 +183,17 @@ impl From<foo::bar::baz::Boo> for A {\n \n     #[test]\n     fn test_add_from_impl_struct_variant() {\n-        check_not_applicable(\"enum A { $0One { x: u32 } }\");\n+        check_assist(\n+            generate_from_impl_for_enum,\n+            \"enum A { $0One { x: u32 } }\",\n+            r#\"enum A { One { x: u32 } }\n+\n+impl From<u32> for A {\n+    fn from(x: u32) -> Self {\n+        Self::One { x }\n+    }\n+}\"#,\n+        );\n     }\n \n     #[test]"}]}