{"sha": "1facd4a77b181ad44b9c9a64f0fd21b6d5180458", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmYWNkNGE3N2IxODFhZDQ0YjljOWE2NGYwZmQyMWI2ZDUxODA0NTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-08T18:15:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-08T18:15:50Z"}, "message": "Auto merge of #75163 - canova:map_into_keys_values, r=dtolnay\n\nImplement `into_keys` and `into_values` for associative maps\n\nThis PR implements `into_keys` and `into_values` for HashMap and BTreeMap types. They are implemented as unstable, under `map_into_keys_values` feature.\nFixes #55214.\nr? @dtolnay", "tree": {"sha": "7a6d23bbe24da2aad5152aeca15d9a3e2c493d16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a6d23bbe24da2aad5152aeca15d9a3e2c493d16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1facd4a77b181ad44b9c9a64f0fd21b6d5180458", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1facd4a77b181ad44b9c9a64f0fd21b6d5180458", "html_url": "https://github.com/rust-lang/rust/commit/1facd4a77b181ad44b9c9a64f0fd21b6d5180458", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1facd4a77b181ad44b9c9a64f0fd21b6d5180458/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f091baba4fa656adb4c1a57b64aa831002d801d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f091baba4fa656adb4c1a57b64aa831002d801d", "html_url": "https://github.com/rust-lang/rust/commit/3f091baba4fa656adb4c1a57b64aa831002d801d"}, {"sha": "4cd2637e2bf1016c95a401a4d5cc70406fbacf08", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cd2637e2bf1016c95a401a4d5cc70406fbacf08", "html_url": "https://github.com/rust-lang/rust/commit/4cd2637e2bf1016c95a401a4d5cc70406fbacf08"}], "stats": {"total": 325, "additions": 325, "deletions": 0}, "files": [{"sha": "7e27aeb85392c05c813c7d63e9eb26294e2785fc", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/1facd4a77b181ad44b9c9a64f0fd21b6d5180458/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1facd4a77b181ad44b9c9a64f0fd21b6d5180458/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=1facd4a77b181ad44b9c9a64f0fd21b6d5180458", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n use core::borrow::Borrow;\n use core::cmp::Ordering;\n use core::fmt::Debug;\n@@ -355,6 +357,30 @@ pub struct ValuesMut<'a, K: 'a, V: 'a> {\n     inner: IterMut<'a, K, V>,\n }\n \n+/// An owning iterator over the keys of a `BTreeMap`.\n+///\n+/// This `struct` is created by the [`into_keys`] method on [`BTreeMap`].\n+/// See its documentation for more.\n+///\n+/// [`into_keys`]: BTreeMap::into_keys\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[derive(Debug)]\n+pub struct IntoKeys<K, V> {\n+    inner: IntoIter<K, V>,\n+}\n+\n+/// An owning iterator over the values of a `BTreeMap`.\n+///\n+/// This `struct` is created by the [`into_values`] method on [`BTreeMap`].\n+/// See its documentation for more.\n+///\n+/// [`into_values`]: BTreeMap::into_values\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[derive(Debug)]\n+pub struct IntoValues<K, V> {\n+    inner: IntoIter<K, V>,\n+}\n+\n /// An iterator over a sub-range of entries in a `BTreeMap`.\n ///\n /// This `struct` is created by the [`range`] method on [`BTreeMap`]. See its\n@@ -1291,6 +1317,52 @@ impl<K: Ord, V> BTreeMap<K, V> {\n \n         self.length = dfs(self.root.as_ref().unwrap().as_ref());\n     }\n+\n+    /// Creates a consuming iterator visiting all the keys, in sorted order.\n+    /// The map cannot be used after calling this.\n+    /// The iterator element type is `K`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(map_into_keys_values)]\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut a = BTreeMap::new();\n+    /// a.insert(2, \"b\");\n+    /// a.insert(1, \"a\");\n+    ///\n+    /// let keys: Vec<i32> = a.into_keys().collect();\n+    /// assert_eq!(keys, [1, 2]);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+    pub fn into_keys(self) -> IntoKeys<K, V> {\n+        IntoKeys { inner: self.into_iter() }\n+    }\n+\n+    /// Creates a consuming iterator visiting all the values, in order by key.\n+    /// The map cannot be used after calling this.\n+    /// The iterator element type is `V`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(map_into_keys_values)]\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut a = BTreeMap::new();\n+    /// a.insert(1, \"hello\");\n+    /// a.insert(2, \"goodbye\");\n+    ///\n+    /// let values: Vec<&str> = a.into_values().collect();\n+    /// assert_eq!(values, [\"hello\", \"goodbye\"]);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+    pub fn into_values(self) -> IntoValues<K, V> {\n+        IntoValues { inner: self.into_iter() }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1780,6 +1852,82 @@ impl<'a, K, V> Range<'a, K, V> {\n     }\n }\n \n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+impl<K, V> Iterator for IntoKeys<K, V> {\n+    type Item = K;\n+\n+    fn next(&mut self) -> Option<K> {\n+        self.inner.next().map(|(k, _)| k)\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.inner.size_hint()\n+    }\n+\n+    fn last(mut self) -> Option<K> {\n+        self.next_back()\n+    }\n+\n+    fn min(mut self) -> Option<K> {\n+        self.next()\n+    }\n+\n+    fn max(mut self) -> Option<K> {\n+        self.next_back()\n+    }\n+}\n+\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+impl<K, V> DoubleEndedIterator for IntoKeys<K, V> {\n+    fn next_back(&mut self) -> Option<K> {\n+        self.inner.next_back().map(|(k, _)| k)\n+    }\n+}\n+\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+impl<K, V> ExactSizeIterator for IntoKeys<K, V> {\n+    fn len(&self) -> usize {\n+        self.inner.len()\n+    }\n+}\n+\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+impl<K, V> FusedIterator for IntoKeys<K, V> {}\n+\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+impl<K, V> Iterator for IntoValues<K, V> {\n+    type Item = V;\n+\n+    fn next(&mut self) -> Option<V> {\n+        self.inner.next().map(|(_, v)| v)\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.inner.size_hint()\n+    }\n+\n+    fn last(mut self) -> Option<V> {\n+        self.next_back()\n+    }\n+}\n+\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+impl<K, V> DoubleEndedIterator for IntoValues<K, V> {\n+    fn next_back(&mut self) -> Option<V> {\n+        self.inner.next_back().map(|(_, v)| v)\n+    }\n+}\n+\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+impl<K, V> ExactSizeIterator for IntoValues<K, V> {\n+    fn len(&self) -> usize {\n+        self.inner.len()\n+    }\n+}\n+\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+impl<K, V> FusedIterator for IntoValues<K, V> {}\n+\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n impl<'a, K, V> DoubleEndedIterator for Range<'a, K, V> {\n     fn next_back(&mut self) -> Option<(&'a K, &'a V)> {"}, {"sha": "5777bd60907144b9ccac9c0f30b973977a35761a", "filename": "library/alloc/tests/btree/map.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1facd4a77b181ad44b9c9a64f0fd21b6d5180458/library%2Falloc%2Ftests%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1facd4a77b181ad44b9c9a64f0fd21b6d5180458/library%2Falloc%2Ftests%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fbtree%2Fmap.rs?ref=1facd4a77b181ad44b9c9a64f0fd21b6d5180458", "patch": "@@ -1461,3 +1461,27 @@ fn test_into_iter_drop_leak_height_1() {\n         assert_eq!(DROPS.load(Ordering::SeqCst), size);\n     }\n }\n+\n+#[test]\n+fn test_into_keys() {\n+    let vec = vec![(1, 'a'), (2, 'b'), (3, 'c')];\n+    let map: BTreeMap<_, _> = vec.into_iter().collect();\n+    let keys: Vec<_> = map.into_keys().collect();\n+\n+    assert_eq!(keys.len(), 3);\n+    assert!(keys.contains(&1));\n+    assert!(keys.contains(&2));\n+    assert!(keys.contains(&3));\n+}\n+\n+#[test]\n+fn test_into_values() {\n+    let vec = vec![(1, 'a'), (2, 'b'), (3, 'c')];\n+    let map: BTreeMap<_, _> = vec.into_iter().collect();\n+    let values: Vec<_> = map.into_values().collect();\n+\n+    assert_eq!(values.len(), 3);\n+    assert!(values.contains(&'a'));\n+    assert!(values.contains(&'b'));\n+    assert!(values.contains(&'c'));\n+}"}, {"sha": "3aacd4a687e384b454ab9eb12a83b732022208a7", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1facd4a77b181ad44b9c9a64f0fd21b6d5180458/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1facd4a77b181ad44b9c9a64f0fd21b6d5180458/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=1facd4a77b181ad44b9c9a64f0fd21b6d5180458", "patch": "@@ -4,6 +4,7 @@\n #![feature(drain_filter)]\n #![feature(exact_size_is_empty)]\n #![feature(map_first_last)]\n+#![feature(map_into_keys_values)]\n #![feature(new_uninit)]\n #![feature(pattern)]\n #![feature(str_split_once)]"}, {"sha": "70f7214e2f1d78d3c5f2e1d3a5c798f43fe5ecf3", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/1facd4a77b181ad44b9c9a64f0fd21b6d5180458/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1facd4a77b181ad44b9c9a64f0fd21b6d5180458/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=1facd4a77b181ad44b9c9a64f0fd21b6d5180458", "patch": "@@ -872,6 +872,52 @@ where\n     {\n         self.base.retain(f)\n     }\n+\n+    /// Creates a consuming iterator visiting all the keys in arbitrary order.\n+    /// The map cannot be used after calling this.\n+    /// The iterator element type is `K`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(map_into_keys_values)]\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map = HashMap::new();\n+    /// map.insert(\"a\", 1);\n+    /// map.insert(\"b\", 2);\n+    /// map.insert(\"c\", 3);\n+    ///\n+    /// let vec: Vec<&str> = map.into_keys().collect();\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+    pub fn into_keys(self) -> IntoKeys<K, V> {\n+        IntoKeys { inner: self.into_iter() }\n+    }\n+\n+    /// Creates a consuming iterator visiting all the values in arbitrary order.\n+    /// The map cannot be used after calling this.\n+    /// The iterator element type is `V`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(map_into_keys_values)]\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map = HashMap::new();\n+    /// map.insert(\"a\", 1);\n+    /// map.insert(\"b\", 2);\n+    /// map.insert(\"c\", 3);\n+    ///\n+    /// let vec: Vec<i32> = map.into_values().collect();\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+    pub fn into_values(self) -> IntoValues<K, V> {\n+        IntoValues { inner: self.into_iter() }\n+    }\n }\n \n impl<K, V, S> HashMap<K, V, S>\n@@ -1154,6 +1200,28 @@ pub struct ValuesMut<'a, K: 'a, V: 'a> {\n     inner: IterMut<'a, K, V>,\n }\n \n+/// An owning iterator over the keys of a `HashMap`.\n+///\n+/// This `struct` is created by the [`into_keys`] method on [`HashMap`].\n+/// See its documentation for more.\n+///\n+/// [`into_keys`]: HashMap::into_keys\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+pub struct IntoKeys<K, V> {\n+    inner: IntoIter<K, V>,\n+}\n+\n+/// An owning iterator over the values of a `HashMap`.\n+///\n+/// This `struct` is created by the [`into_values`] method on [`HashMap`].\n+/// See its documentation for more.\n+///\n+/// [`into_values`]: HashMap::into_values\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+pub struct IntoValues<K, V> {\n+    inner: IntoIter<K, V>,\n+}\n+\n /// A builder for computing where in a HashMap a key-value pair would be stored.\n ///\n /// See the [`HashMap::raw_entry_mut`] docs for usage examples.\n@@ -1827,6 +1895,66 @@ where\n     }\n }\n \n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+impl<K, V> Iterator for IntoKeys<K, V> {\n+    type Item = K;\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<K> {\n+        self.inner.next().map(|(k, _)| k)\n+    }\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.inner.size_hint()\n+    }\n+}\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+impl<K, V> ExactSizeIterator for IntoKeys<K, V> {\n+    #[inline]\n+    fn len(&self) -> usize {\n+        self.inner.len()\n+    }\n+}\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+impl<K, V> FusedIterator for IntoKeys<K, V> {}\n+\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+impl<K: Debug, V: Debug> fmt::Debug for IntoKeys<K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_list().entries(self.inner.iter().map(|(k, _)| k)).finish()\n+    }\n+}\n+\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+impl<K, V> Iterator for IntoValues<K, V> {\n+    type Item = V;\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<V> {\n+        self.inner.next().map(|(_, v)| v)\n+    }\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.inner.size_hint()\n+    }\n+}\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+impl<K, V> ExactSizeIterator for IntoValues<K, V> {\n+    #[inline]\n+    fn len(&self) -> usize {\n+        self.inner.len()\n+    }\n+}\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+impl<K, V> FusedIterator for IntoValues<K, V> {}\n+\n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+impl<K: Debug, V: Debug> fmt::Debug for IntoValues<K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_list().entries(self.inner.iter().map(|(_, v)| v)).finish()\n+    }\n+}\n+\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, K, V> Iterator for Drain<'a, K, V> {\n     type Item = (K, V);\n@@ -3084,6 +3212,30 @@ mod test_map {\n         assert!(values.contains(&6));\n     }\n \n+    #[test]\n+    fn test_into_keys() {\n+        let vec = vec![(1, 'a'), (2, 'b'), (3, 'c')];\n+        let map: HashMap<_, _> = vec.into_iter().collect();\n+        let keys: Vec<_> = map.into_keys().collect();\n+\n+        assert_eq!(keys.len(), 3);\n+        assert!(keys.contains(&1));\n+        assert!(keys.contains(&2));\n+        assert!(keys.contains(&3));\n+    }\n+\n+    #[test]\n+    fn test_into_values() {\n+        let vec = vec![(1, 'a'), (2, 'b'), (3, 'c')];\n+        let map: HashMap<_, _> = vec.into_iter().collect();\n+        let values: Vec<_> = map.into_values().collect();\n+\n+        assert_eq!(values.len(), 3);\n+        assert!(values.contains(&'a'));\n+        assert!(values.contains(&'b'));\n+        assert!(values.contains(&'c'));\n+    }\n+\n     #[test]\n     fn test_find() {\n         let mut m = HashMap::new();"}]}