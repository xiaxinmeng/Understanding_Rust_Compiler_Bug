{"sha": "341d8b8a2c290b4535e965867e876b095461ff6e", "node_id": "C_kwDOAAsO6NoAKDM0MWQ4YjhhMmMyOTBiNDUzNWU5NjU4NjdlODc2YjA5NTQ2MWZmNmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-24T06:32:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-24T06:32:23Z"}, "message": "Auto merge of #103808 - cjgillot:vec-cache, r=TaKO8Ki\n\nUse an IndexVec to cache queries with index-like key\n\nRevival of an old idea. Let's see if it has more effect.\n\nr? `@ghost`", "tree": {"sha": "57731825f51d1ad80d31fdab31d3b70b8e0551e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57731825f51d1ad80d31fdab31d3b70b8e0551e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/341d8b8a2c290b4535e965867e876b095461ff6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/341d8b8a2c290b4535e965867e876b095461ff6e", "html_url": "https://github.com/rust-lang/rust/commit/341d8b8a2c290b4535e965867e876b095461ff6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/341d8b8a2c290b4535e965867e876b095461ff6e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd815a5091eb4d49cd317f8ad272f17b7a5f550d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd815a5091eb4d49cd317f8ad272f17b7a5f550d", "html_url": "https://github.com/rust-lang/rust/commit/fd815a5091eb4d49cd317f8ad272f17b7a5f550d"}, {"sha": "bc9a202a222da3d421f63d3960a871f239dae609", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc9a202a222da3d421f63d3960a871f239dae609", "html_url": "https://github.com/rust-lang/rust/commit/bc9a202a222da3d421f63d3960a871f239dae609"}], "stats": {"total": 257, "additions": 232, "deletions": 25}, "files": [{"sha": "33f02a115ef38639019453ff23630ed239863ef3", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/341d8b8a2c290b4535e965867e876b095461ff6e/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341d8b8a2c290b4535e965867e876b095461ff6e/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=341d8b8a2c290b4535e965867e876b095461ff6e", "patch": "@@ -1,4 +1,4 @@\n-use crate::def_id::{DefId, LocalDefId, CRATE_DEF_ID};\n+use crate::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_ID};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_span::{def_id::DefPathHash, HashStableContext};\n use std::fmt;\n@@ -22,6 +22,18 @@ impl OwnerId {\n     }\n }\n \n+impl rustc_index::vec::Idx for OwnerId {\n+    #[inline]\n+    fn new(idx: usize) -> Self {\n+        OwnerId { def_id: LocalDefId { local_def_index: DefIndex::from_usize(idx) } }\n+    }\n+\n+    #[inline]\n+    fn index(self) -> usize {\n+        self.def_id.local_def_index.as_usize()\n+    }\n+}\n+\n impl<CTX: HashStableContext> HashStable<CTX> for OwnerId {\n     #[inline]\n     fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {"}, {"sha": "1519258c79430949e6fd7657bc258574749cc673", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/341d8b8a2c290b4535e965867e876b095461ff6e/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341d8b8a2c290b4535e965867e876b095461ff6e/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=341d8b8a2c290b4535e965867e876b095461ff6e", "patch": "@@ -17,10 +17,12 @@ pub trait Idx: Copy + 'static + Eq + PartialEq + Debug + Hash {\n \n     fn index(self) -> usize;\n \n+    #[inline]\n     fn increment_by(&mut self, amount: usize) {\n         *self = self.plus(amount);\n     }\n \n+    #[inline]\n     fn plus(self, amount: usize) -> Self {\n         Self::new(self.index() + amount)\n     }"}, {"sha": "880632561b9e8e2ba75ee46aac677f9932f879f2", "filename": "compiler/rustc_middle/src/query/keys.rs", "status": "renamed", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/341d8b8a2c290b4535e965867e876b095461ff6e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341d8b8a2c290b4535e965867e876b095461ff6e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs?ref=341d8b8a2c290b4535e965867e876b095461ff6e", "patch": "@@ -1,19 +1,22 @@\n //! Defines the set of legal keys that can be used in queries.\n \n+use crate::infer::canonical::Canonical;\n+use crate::mir;\n+use crate::traits;\n+use crate::ty::fast_reject::SimplifiedType;\n+use crate::ty::subst::{GenericArg, SubstsRef};\n+use crate::ty::{self, layout::TyAndLayout, Ty, TyCtxt};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::hir_id::{HirId, OwnerId};\n-use rustc_middle::infer::canonical::Canonical;\n-use rustc_middle::mir;\n-use rustc_middle::traits;\n-use rustc_middle::ty::fast_reject::SimplifiedType;\n-use rustc_middle::ty::subst::{GenericArg, SubstsRef};\n-use rustc_middle::ty::{self, layout::TyAndLayout, Ty, TyCtxt};\n+use rustc_query_system::query::{DefaultCacheSelector, VecCacheSelector};\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n /// The `Key` trait controls what types can legally be used as the key\n /// for a query.\n-pub trait Key {\n+pub trait Key: Sized {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     /// Given an instance of this key, what crate is it referring to?\n     /// This is used to find the provider.\n     fn query_crate_is_local(&self) -> bool;\n@@ -100,6 +103,8 @@ impl<'tcx> Key for mir::interpret::LitToConstInput<'tcx> {\n }\n \n impl Key for CrateNum {\n+    type CacheSelector = VecCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         *self == LOCAL_CRATE\n@@ -110,6 +115,8 @@ impl Key for CrateNum {\n }\n \n impl Key for OwnerId {\n+    type CacheSelector = VecCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -123,6 +130,8 @@ impl Key for OwnerId {\n }\n \n impl Key for LocalDefId {\n+    type CacheSelector = VecCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true", "previous_filename": "compiler/rustc_query_impl/src/keys.rs"}, {"sha": "d86bdbd63d88dc1c67192efdd3f8758db3cc221f", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/341d8b8a2c290b4535e965867e876b095461ff6e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341d8b8a2c290b4535e965867e876b095461ff6e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=341d8b8a2c290b4535e965867e876b095461ff6e", "patch": "@@ -7,6 +7,9 @@\n use crate::ty::{self, print::describe_as_module, TyCtxt};\n use rustc_span::def_id::LOCAL_CRATE;\n \n+mod keys;\n+pub use keys::Key;\n+\n // Each of these queries corresponds to a function pointer field in the\n // `Providers` struct for requesting a value of that type, and a method\n // on `tcx: TyCtxt` (and `tcx.at(span)`) for doing that request in a way"}, {"sha": "0f62da9992f31444b382b7e9a560a83e1c0921aa", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/341d8b8a2c290b4535e965867e876b095461ff6e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341d8b8a2c290b4535e965867e876b095461ff6e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=341d8b8a2c290b4535e965867e876b095461ff6e", "patch": "@@ -15,6 +15,7 @@ use crate::mir::interpret::{\n };\n use crate::mir::interpret::{LitToConstError, LitToConstInput};\n use crate::mir::mono::CodegenUnit;\n+use crate::query::Key;\n use crate::thir;\n use crate::traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal,\n@@ -121,10 +122,10 @@ macro_rules! query_helper_param_ty {\n \n macro_rules! query_storage {\n     ([][$K:ty, $V:ty]) => {\n-        <DefaultCacheSelector as CacheSelector<$K, $V>>::Cache\n+        <<$K as Key>::CacheSelector as CacheSelector<'tcx, $V>>::Cache\n     };\n     ([(arena_cache) $($rest:tt)*][$K:ty, $V:ty]) => {\n-        <ArenaCacheSelector<'tcx> as CacheSelector<$K, $V>>::Cache\n+        <<$K as Key>::CacheSelector as CacheSelector<'tcx, $V>>::ArenaCache\n     };\n     ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n         query_storage!([$($modifiers)*][$($args)*])"}, {"sha": "e6df6956158bf66ee67a8106e8b86cdbb98b9775", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/341d8b8a2c290b4535e965867e876b095461ff6e/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341d8b8a2c290b4535e965867e876b095461ff6e/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=341d8b8a2c290b4535e965867e876b095461ff6e", "patch": "@@ -32,8 +32,7 @@ use rustc_query_system::query::*;\n #[cfg(parallel_compiler)]\n pub use rustc_query_system::query::{deadlock, QueryContext};\n \n-mod keys;\n-use keys::Key;\n+use rustc_middle::query::Key;\n \n pub use rustc_query_system::query::QueryConfig;\n pub(crate) use rustc_query_system::query::QueryVTable;"}, {"sha": "99edaa0416274fcb754df9abd9d71f486a7b8b35", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/341d8b8a2c290b4535e965867e876b095461ff6e/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341d8b8a2c290b4535e965867e876b095461ff6e/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=341d8b8a2c290b4535e965867e876b095461ff6e", "patch": "@@ -2,7 +2,6 @@\n //! generate the actual methods on tcx which find and execute the provider,\n //! manage the caches, and so forth.\n \n-use crate::keys::Key;\n use crate::on_disk_cache::{CacheDecoder, CacheEncoder, EncodedDepNodeIndex};\n use crate::profiling_support::QueryKeyStringCache;\n use crate::{on_disk_cache, Queries};\n@@ -12,6 +11,7 @@ use rustc_errors::{Diagnostic, Handler};\n use rustc_middle::dep_graph::{\n     self, DepKind, DepKindStruct, DepNode, DepNodeIndex, SerializedDepNodeIndex,\n };\n+use rustc_middle::query::Key;\n use rustc_middle::ty::tls::{self, ImplicitCtxt};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_query_system::dep_graph::{DepNodeParams, HasDepContext};"}, {"sha": "cdd4357242215e54f4cc5293c700869134f944ec", "filename": "compiler/rustc_query_system/src/query/caches.rs", "status": "modified", "additions": 192, "deletions": 11, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/341d8b8a2c290b4535e965867e876b095461ff6e/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341d8b8a2c290b4535e965867e876b095461ff6e/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs?ref=341d8b8a2c290b4535e965867e876b095461ff6e", "patch": "@@ -8,13 +8,17 @@ use rustc_data_structures::sharded::Sharded;\n #[cfg(not(parallel_compiler))]\n use rustc_data_structures::sync::Lock;\n use rustc_data_structures::sync::WorkerLocal;\n+use rustc_index::vec::{Idx, IndexVec};\n use std::default::Default;\n use std::fmt::Debug;\n use std::hash::Hash;\n use std::marker::PhantomData;\n \n-pub trait CacheSelector<K, V> {\n-    type Cache;\n+pub trait CacheSelector<'tcx, V> {\n+    type Cache\n+    where\n+        V: Clone;\n+    type ArenaCache;\n }\n \n pub trait QueryStorage {\n@@ -47,10 +51,13 @@ pub trait QueryCache: QueryStorage + Sized {\n     fn iter(&self, f: &mut dyn FnMut(&Self::Key, &Self::Value, DepNodeIndex));\n }\n \n-pub struct DefaultCacheSelector;\n+pub struct DefaultCacheSelector<K>(PhantomData<K>);\n \n-impl<K: Eq + Hash, V: Clone> CacheSelector<K, V> for DefaultCacheSelector {\n-    type Cache = DefaultCache<K, V>;\n+impl<'tcx, K: Eq + Hash, V: 'tcx> CacheSelector<'tcx, V> for DefaultCacheSelector<K> {\n+    type Cache = DefaultCache<K, V>\n+    where\n+        V: Clone;\n+    type ArenaCache = ArenaCache<'tcx, K, V>;\n }\n \n pub struct DefaultCache<K, V> {\n@@ -134,12 +141,6 @@ where\n     }\n }\n \n-pub struct ArenaCacheSelector<'tcx>(PhantomData<&'tcx ()>);\n-\n-impl<'tcx, K: Eq + Hash, V: 'tcx> CacheSelector<K, V> for ArenaCacheSelector<'tcx> {\n-    type Cache = ArenaCache<'tcx, K, V>;\n-}\n-\n pub struct ArenaCache<'tcx, K, V> {\n     arena: WorkerLocal<TypedArena<(V, DepNodeIndex)>>,\n     #[cfg(parallel_compiler)]\n@@ -224,3 +225,183 @@ where\n         }\n     }\n }\n+\n+pub struct VecCacheSelector<K>(PhantomData<K>);\n+\n+impl<'tcx, K: Idx, V: 'tcx> CacheSelector<'tcx, V> for VecCacheSelector<K> {\n+    type Cache = VecCache<K, V>\n+    where\n+        V: Clone;\n+    type ArenaCache = VecArenaCache<'tcx, K, V>;\n+}\n+\n+pub struct VecCache<K: Idx, V> {\n+    #[cfg(parallel_compiler)]\n+    cache: Sharded<IndexVec<K, Option<(V, DepNodeIndex)>>>,\n+    #[cfg(not(parallel_compiler))]\n+    cache: Lock<IndexVec<K, Option<(V, DepNodeIndex)>>>,\n+}\n+\n+impl<K: Idx, V> Default for VecCache<K, V> {\n+    fn default() -> Self {\n+        VecCache { cache: Default::default() }\n+    }\n+}\n+\n+impl<K: Eq + Idx, V: Clone + Debug> QueryStorage for VecCache<K, V> {\n+    type Value = V;\n+    type Stored = V;\n+\n+    #[inline]\n+    fn store_nocache(&self, value: Self::Value) -> Self::Stored {\n+        // We have no dedicated storage\n+        value\n+    }\n+}\n+\n+impl<K, V> QueryCache for VecCache<K, V>\n+where\n+    K: Eq + Idx + Clone + Debug,\n+    V: Clone + Debug,\n+{\n+    type Key = K;\n+\n+    #[inline(always)]\n+    fn lookup<R, OnHit>(&self, key: &K, on_hit: OnHit) -> Result<R, ()>\n+    where\n+        OnHit: FnOnce(&V, DepNodeIndex) -> R,\n+    {\n+        #[cfg(parallel_compiler)]\n+        let lock = self.cache.get_shard_by_hash(key.index() as u64).lock();\n+        #[cfg(not(parallel_compiler))]\n+        let lock = self.cache.lock();\n+        if let Some(Some(value)) = lock.get(*key) {\n+            let hit_result = on_hit(&value.0, value.1);\n+            Ok(hit_result)\n+        } else {\n+            Err(())\n+        }\n+    }\n+\n+    #[inline]\n+    fn complete(&self, key: K, value: V, index: DepNodeIndex) -> Self::Stored {\n+        #[cfg(parallel_compiler)]\n+        let mut lock = self.cache.get_shard_by_hash(key.index() as u64).lock();\n+        #[cfg(not(parallel_compiler))]\n+        let mut lock = self.cache.lock();\n+        lock.insert(key, (value.clone(), index));\n+        value\n+    }\n+\n+    fn iter(&self, f: &mut dyn FnMut(&Self::Key, &Self::Value, DepNodeIndex)) {\n+        #[cfg(parallel_compiler)]\n+        {\n+            let shards = self.cache.lock_shards();\n+            for shard in shards.iter() {\n+                for (k, v) in shard.iter_enumerated() {\n+                    if let Some(v) = v {\n+                        f(&k, &v.0, v.1);\n+                    }\n+                }\n+            }\n+        }\n+        #[cfg(not(parallel_compiler))]\n+        {\n+            let map = self.cache.lock();\n+            for (k, v) in map.iter_enumerated() {\n+                if let Some(v) = v {\n+                    f(&k, &v.0, v.1);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+pub struct VecArenaCache<'tcx, K: Idx, V> {\n+    arena: WorkerLocal<TypedArena<(V, DepNodeIndex)>>,\n+    #[cfg(parallel_compiler)]\n+    cache: Sharded<IndexVec<K, Option<&'tcx (V, DepNodeIndex)>>>,\n+    #[cfg(not(parallel_compiler))]\n+    cache: Lock<IndexVec<K, Option<&'tcx (V, DepNodeIndex)>>>,\n+}\n+\n+impl<'tcx, K: Idx, V> Default for VecArenaCache<'tcx, K, V> {\n+    fn default() -> Self {\n+        VecArenaCache {\n+            arena: WorkerLocal::new(|_| TypedArena::default()),\n+            cache: Default::default(),\n+        }\n+    }\n+}\n+\n+impl<'tcx, K: Eq + Idx, V: Debug + 'tcx> QueryStorage for VecArenaCache<'tcx, K, V> {\n+    type Value = V;\n+    type Stored = &'tcx V;\n+\n+    #[inline]\n+    fn store_nocache(&self, value: Self::Value) -> Self::Stored {\n+        let value = self.arena.alloc((value, DepNodeIndex::INVALID));\n+        let value = unsafe { &*(&value.0 as *const _) };\n+        &value\n+    }\n+}\n+\n+impl<'tcx, K, V: 'tcx> QueryCache for VecArenaCache<'tcx, K, V>\n+where\n+    K: Eq + Idx + Clone + Debug,\n+    V: Debug,\n+{\n+    type Key = K;\n+\n+    #[inline(always)]\n+    fn lookup<R, OnHit>(&self, key: &K, on_hit: OnHit) -> Result<R, ()>\n+    where\n+        OnHit: FnOnce(&&'tcx V, DepNodeIndex) -> R,\n+    {\n+        #[cfg(parallel_compiler)]\n+        let lock = self.cache.get_shard_by_hash(key.index() as u64).lock();\n+        #[cfg(not(parallel_compiler))]\n+        let lock = self.cache.lock();\n+        if let Some(Some(value)) = lock.get(*key) {\n+            let hit_result = on_hit(&&value.0, value.1);\n+            Ok(hit_result)\n+        } else {\n+            Err(())\n+        }\n+    }\n+\n+    #[inline]\n+    fn complete(&self, key: K, value: V, index: DepNodeIndex) -> Self::Stored {\n+        let value = self.arena.alloc((value, index));\n+        let value = unsafe { &*(value as *const _) };\n+        #[cfg(parallel_compiler)]\n+        let mut lock = self.cache.get_shard_by_hash(key.index() as u64).lock();\n+        #[cfg(not(parallel_compiler))]\n+        let mut lock = self.cache.lock();\n+        lock.insert(key, value);\n+        &value.0\n+    }\n+\n+    fn iter(&self, f: &mut dyn FnMut(&Self::Key, &Self::Value, DepNodeIndex)) {\n+        #[cfg(parallel_compiler)]\n+        {\n+            let shards = self.cache.lock_shards();\n+            for shard in shards.iter() {\n+                for (k, v) in shard.iter_enumerated() {\n+                    if let Some(v) = v {\n+                        f(&k, &v.0, v.1);\n+                    }\n+                }\n+            }\n+        }\n+        #[cfg(not(parallel_compiler))]\n+        {\n+            let map = self.cache.lock();\n+            for (k, v) in map.iter_enumerated() {\n+                if let Some(v) = v {\n+                    f(&k, &v.0, v.1);\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "7f3dc50d234fc9fd3ddd8b78064a57d512f4c44c", "filename": "compiler/rustc_query_system/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/341d8b8a2c290b4535e965867e876b095461ff6e/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341d8b8a2c290b4535e965867e876b095461ff6e/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs?ref=341d8b8a2c290b4535e965867e876b095461ff6e", "patch": "@@ -8,7 +8,7 @@ pub use self::job::{print_query_stack, QueryInfo, QueryJob, QueryJobId, QueryJob\n \n mod caches;\n pub use self::caches::{\n-    ArenaCacheSelector, CacheSelector, DefaultCacheSelector, QueryCache, QueryStorage,\n+    CacheSelector, DefaultCacheSelector, QueryCache, QueryStorage, VecCacheSelector,\n };\n \n mod config;"}]}