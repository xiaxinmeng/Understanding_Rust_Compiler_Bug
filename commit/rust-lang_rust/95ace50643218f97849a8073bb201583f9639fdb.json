{"sha": "95ace50643218f97849a8073bb201583f9639fdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1YWNlNTA2NDMyMThmOTc4NDlhODA3M2JiMjAxNTgzZjk2MzlmZGI=", "commit": {"author": {"name": "Adrien T\u00e9tar", "email": "adri-from-59@hotmail.fr", "date": "2014-01-02T12:35:08Z"}, "committer": {"name": "Adrien T\u00e9tar", "email": "adri-from-59@hotmail.fr", "date": "2014-01-04T12:07:11Z"}, "message": "std: io: add some code examples\n\nCloses #11232.", "tree": {"sha": "8656d15f674bb9fb41a94979c174e19ff8bf51b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8656d15f674bb9fb41a94979c174e19ff8bf51b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95ace50643218f97849a8073bb201583f9639fdb", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95ace50643218f97849a8073bb201583f9639fdb", "html_url": "https://github.com/rust-lang/rust/commit/95ace50643218f97849a8073bb201583f9639fdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95ace50643218f97849a8073bb201583f9639fdb/comments", "author": {"login": "adrientetar", "id": 1250894, "node_id": "MDQ6VXNlcjEyNTA4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1250894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adrientetar", "html_url": "https://github.com/adrientetar", "followers_url": "https://api.github.com/users/adrientetar/followers", "following_url": "https://api.github.com/users/adrientetar/following{/other_user}", "gists_url": "https://api.github.com/users/adrientetar/gists{/gist_id}", "starred_url": "https://api.github.com/users/adrientetar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adrientetar/subscriptions", "organizations_url": "https://api.github.com/users/adrientetar/orgs", "repos_url": "https://api.github.com/users/adrientetar/repos", "events_url": "https://api.github.com/users/adrientetar/events{/privacy}", "received_events_url": "https://api.github.com/users/adrientetar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "adrientetar", "id": 1250894, "node_id": "MDQ6VXNlcjEyNTA4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1250894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adrientetar", "html_url": "https://github.com/adrientetar", "followers_url": "https://api.github.com/users/adrientetar/followers", "following_url": "https://api.github.com/users/adrientetar/following{/other_user}", "gists_url": "https://api.github.com/users/adrientetar/gists{/gist_id}", "starred_url": "https://api.github.com/users/adrientetar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adrientetar/subscriptions", "organizations_url": "https://api.github.com/users/adrientetar/orgs", "repos_url": "https://api.github.com/users/adrientetar/repos", "events_url": "https://api.github.com/users/adrientetar/events{/privacy}", "received_events_url": "https://api.github.com/users/adrientetar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba801577b909cf1123846bb425d5f489db8325b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba801577b909cf1123846bb425d5f489db8325b8", "html_url": "https://github.com/rust-lang/rust/commit/ba801577b909cf1123846bb425d5f489db8325b8"}], "stats": {"total": 66, "additions": 45, "deletions": 21}, "files": [{"sha": "86bad7a228b0acfbff3f9587866dce1470c05226", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 45, "deletions": 21, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/95ace50643218f97849a8073bb201583f9639fdb/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95ace50643218f97849a8073bb201583f9639fdb/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=95ace50643218f97849a8073bb201583f9639fdb", "patch": "@@ -186,23 +186,29 @@ while still providing feedback about errors. The basic strategy:\n   so that nullable values do not have to be 'unwrapped' before use.\n \n These features combine in the API to allow for expressions like\n-`File::new(\"diary.txt\").write_line(\"met a girl\")` without having to\n-worry about whether \"diary.txt\" exists or whether the write\n-succeeds. As written, if either `new` or `write_line` encounters\n-an error the task will fail.\n-\n-If you wanted to handle the error though you might write\n-\n-    let mut error = None;\n-    do io_error::cond(|e: IoError| {\n-        error = Some(e);\n-    }).in {\n-        File::new(\"diary.txt\").write_line(\"met a girl\");\n-    }\n-\n-    if error.is_some() {\n-        println(\"failed to write my diary\");\n-    }\n+`File::create(&Path::new(\"diary.txt\")).write(bytes!(\"Met a girl.\\n\"))`\n+without having to worry about whether \"diary.txt\" exists or whether\n+the write succeeds. As written, if either `new` or `write_line`\n+encounters an error the task will fail.\n+\n+If you wanted to handle the error though you might write:\n+\n+```rust\n+use std::io::File;\n+use std::io::{IoError, io_error};\n+\n+let mut error = None;\n+io_error::cond.trap(|e: IoError| {\n+    error = Some(e);\n+}).inside(|| {\n+    File::create(&Path::new(\"diary.txt\")).write(bytes!(\"Met a girl.\\n\"));\n+});\n+\n+if error.is_some() {\n+    println(\"failed to write my diary\");\n+}\n+# ::std::io::fs::unlink(&Path::new(\"diary.txt\"));\n+```\n \n XXX: Need better condition handling syntax\n \n@@ -498,10 +504,16 @@ pub trait Reader {\n     ///\n     /// # Example\n     ///\n-    ///     let mut reader = BufferedReader::new(File::open(&Path::new(\"foo.txt\")));\n-    ///     for line in reader.lines() {\n-    ///         println(line);\n-    ///     }\n+    /// ```rust\n+    /// use std::io;\n+    /// # let _g = ::std::io::ignore_io_error();\n+    /// let mut reader = io::stdin();\n+    ///\n+    /// let mut bytes = [0, .. 10];\n+    /// reader.read(bytes);\n+    ///\n+    /// if reader.eof() { println(\"stdin() had at most 10 bytes of data.\"); }\n+    /// ```\n     ///\n     /// # Failure\n     ///\n@@ -1057,6 +1069,18 @@ pub trait Buffer: Reader {\n     /// encoded unicode codepoints. If a newline is encountered, then the\n     /// newline is contained in the returned string.\n     ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::io::buffered::BufferedReader;\n+    /// use std::io;\n+    /// # let _g = ::std::io::ignore_io_error();\n+    ///\n+    /// let mut reader = BufferedReader::new(io::stdin());\n+    ///\n+    /// let input = reader.read_line().unwrap_or(~\"nothing\");\n+    /// ```\n+    ///\n     /// # Failure\n     ///\n     /// This function will raise on the `io_error` condition (except for"}]}