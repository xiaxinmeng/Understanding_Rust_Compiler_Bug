{"sha": "fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkYjRlZjMyMWVkNWVlZTY4MWMyYjcyM2RjYjE1N2MyODBhYTcyZjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-18T01:45:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-18T01:45:58Z"}, "message": "auto merge of #5726 : brson/rust/struct-return, r=brson\n\nr? @nikomatsakis\r\n\r\nThis doesn't completely fix the x86 ABI for structs, but it does fix some cases. On linux, structs appear to be returned correctly now. On windows, structs are only returned by pointer when they are greater than 8 bytes. That scenario works now.\r\n\r\nIn the case where the struct is less than 8 bytes our generated code looks peculiar. When returning a pair of u16, C packs both variables into %eax to return them. Our generated code though expects to find one of the pair in %ax and the other in %dx. Similar for u8. I haven't looked into it yet.\r\n\r\nThere appears to also be struct passing problems on linux, where my `extern-pass-TwoU8s` and `extern-pass-TwoU16s` tests are failing.", "tree": {"sha": "7f38fcabd13cba2ff4577b32360abe43720490fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f38fcabd13cba2ff4577b32360abe43720490fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "html_url": "https://github.com/rust-lang/rust/commit/fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68dea752967fa2c7e0c4b82f476086457c93fff7", "url": "https://api.github.com/repos/rust-lang/rust/commits/68dea752967fa2c7e0c4b82f476086457c93fff7", "html_url": "https://github.com/rust-lang/rust/commit/68dea752967fa2c7e0c4b82f476086457c93fff7"}, {"sha": "a5ddc009829bef149a9e2f127e80609589604443", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5ddc009829bef149a9e2f127e80609589604443", "html_url": "https://github.com/rust-lang/rust/commit/a5ddc009829bef149a9e2f127e80609589604443"}], "stats": {"total": 642, "additions": 484, "deletions": 158}, "files": [{"sha": "015992abf7821f98f59b8e35e88192b5f844eb9f", "filename": "mk/rt.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "patch": "@@ -76,7 +76,8 @@ RUNTIME_CXXS_$(1) := \\\n               rt/boxed_region.cpp \\\n               rt/arch/$$(HOST_$(1))/context.cpp \\\n               rt/arch/$$(HOST_$(1))/gpr.cpp \\\n-              rt/rust_android_dummy.cpp\n+              rt/rust_android_dummy.cpp \\\n+              rt/rust_test_helpers.cpp\n \n RUNTIME_CS_$(1) := rt/linenoise/linenoise.c rt/linenoise/utf8.c\n "}, {"sha": "4b9ff4504ddac9e35a22a9db4b2420f4a4fb51f6", "filename": "src/libcore/rt/uv/net.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fnet.rs?ref=fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "patch": "@@ -356,7 +356,6 @@ impl NativeHandle<*uvll::uv_write_t> for WriteRequest {\n \n \n #[test]\n-#[ignore(reason = \"ffi struct issues\")]\n fn connect_close() {\n     do run_in_bare_thread() {\n         let mut loop_ = Loop::new();\n@@ -409,7 +408,6 @@ fn connect_read() {\n }\n \n #[test]\n-#[ignore(reason = \"ffi struct issues\")]\n fn listen() {\n     do run_in_bare_thread() {\n         static MAX: int = 10;"}, {"sha": "06f7261040c5d60d77542791f5813a9f5177b878", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "patch": "@@ -125,27 +125,25 @@ pub enum RealPredicate {\n     RealPredicateTrue = 15,\n }\n \n-// enum for the LLVM TypeKind type - must stay in sync with the def of\n+// The LLVM TypeKind type - must stay in sync with the def of\n // LLVMTypeKind in llvm/include/llvm-c/Core.h\n-#[deriving(Eq)]\n-pub enum TypeKind {\n-    Void      = 0,\n-    Half      = 1,\n-    Float     = 2,\n-    Double    = 3,\n-    X86_FP80  = 4,\n-    FP128     = 5,\n-    PPC_FP128 = 6,\n-    Label     = 7,\n-    Integer   = 8,\n-    Function  = 9,\n-    Struct    = 10,\n-    Array     = 11,\n-    Pointer   = 12,\n-    Vector    = 13,\n-    Metadata  = 14,\n-    X86_MMX   = 15\n-}\n+pub type TypeKind = u32;\n+pub static Void: TypeKind      = 0;\n+pub static Half: TypeKind      = 1;\n+pub static Float: TypeKind     = 2;\n+pub static Double: TypeKind    = 3;\n+pub static X86_FP80: TypeKind  = 4;\n+pub static FP128: TypeKind     = 5;\n+pub static PPC_FP128: TypeKind = 6;\n+pub static Label: TypeKind     = 7;\n+pub static Integer: TypeKind   = 8;\n+pub static Function: TypeKind  = 9;\n+pub static Struct: TypeKind    = 10;\n+pub static Array: TypeKind     = 11;\n+pub static Pointer: TypeKind   = 12;\n+pub static Vector: TypeKind    = 13;\n+pub static Metadata: TypeKind  = 14;\n+pub static X86_MMX: TypeKind   = 15;\n \n pub enum AtomicBinOp {\n     Xchg = 0,\n@@ -1582,7 +1580,8 @@ pub fn type_to_str_inner(names: @TypeNames, +outer0: &[TypeRef], ty: TypeRef)\n           }\n           Vector => return @\"Vector\",\n           Metadata => return @\"Metadata\",\n-          X86_MMX => return @\"X86_MMAX\"\n+          X86_MMX => return @\"X86_MMAX\",\n+          _ => fail!()\n         }\n     }\n }"}, {"sha": "60b502873e2d55f553958b8696bead4489967712", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "patch": "@@ -180,37 +180,3 @@ pub impl FnType {\n         Ret(bcx, llretval);\n     }\n }\n-\n-enum LLVM_ABIInfo { LLVM_ABIInfo }\n-\n-impl ABIInfo for LLVM_ABIInfo {\n-    fn compute_info(&self,\n-                    atys: &[TypeRef],\n-                    rty: TypeRef,\n-                    _ret_def: bool) -> FnType {\n-        let arg_tys = do atys.map |a| {\n-            LLVMType { cast: false, ty: *a }\n-        };\n-        let ret_ty = LLVMType {\n-            cast: false,\n-            ty: rty\n-        };\n-        let attrs = do atys.map |_| {\n-            option::None\n-        };\n-        let sret = false;\n-\n-        return FnType {\n-            arg_tys: arg_tys,\n-            ret_ty: ret_ty,\n-            attrs: attrs,\n-            sret: sret\n-        };\n-    }\n-}\n-\n-pub fn llvm_abi_info() -> @ABIInfo {\n-    return @LLVM_ABIInfo as @ABIInfo;\n-}\n-\n-"}, {"sha": "9a1c95e5184c00cec5014f3282f83e957c953ab3", "filename": "src/librustc/middle/trans/cabi_mips.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs?ref=fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "patch": "@@ -227,6 +227,6 @@ impl ABIInfo for MIPS_ABIInfo {\n     }\n }\n \n-pub fn mips_abi_info() -> @ABIInfo {\n+pub fn abi_info() -> @ABIInfo {\n     return @MIPS_ABIInfo as @ABIInfo;\n }"}, {"sha": "a549f9121716fcaa333f8a79933b389b9a7339d6", "filename": "src/librustc/middle/trans/cabi_x86.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs?ref=fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "patch": "@@ -0,0 +1,77 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use driver::session::os_win32;\n+use core::option::*;\n+use lib::llvm::*;\n+use lib::llvm::llvm::*;\n+use super::cabi::*;\n+use super::common::*;\n+use super::machine::*;\n+\n+struct X86_ABIInfo {\n+    ccx: @CrateContext\n+}\n+\n+impl ABIInfo for X86_ABIInfo {\n+    fn compute_info(&self,\n+                    atys: &[TypeRef],\n+                    rty: TypeRef,\n+                    ret_def: bool) -> FnType {\n+        let mut arg_tys = do atys.map |a| {\n+            LLVMType { cast: false, ty: *a }\n+        };\n+        let mut ret_ty = LLVMType {\n+            cast: false,\n+            ty: rty\n+        };\n+        let mut attrs = do atys.map |_| {\n+            None\n+        };\n+\n+        // Rules for returning structs taken from\n+        // http://www.angelcode.com/dev/callconv/callconv.html\n+        let sret = {\n+            let returning_a_struct = unsafe { LLVMGetTypeKind(rty) == Struct && ret_def };\n+            let big_struct = if self.ccx.sess.targ_cfg.os != os_win32 {\n+                true\n+            } else {\n+                llsize_of_alloc(self.ccx, rty) > 8\n+            };\n+            returning_a_struct && big_struct\n+        };\n+\n+        if sret {\n+            let ret_ptr_ty = LLVMType {\n+                cast: false,\n+                ty: T_ptr(ret_ty.ty)\n+            };\n+            arg_tys = ~[ret_ptr_ty] + arg_tys;\n+            attrs = ~[Some(StructRetAttribute)] + attrs;\n+            ret_ty = LLVMType {\n+                cast: false,\n+                ty: T_void(),\n+            };\n+        }\n+\n+        return FnType {\n+            arg_tys: arg_tys,\n+            ret_ty: ret_ty,\n+            attrs: attrs,\n+            sret: sret\n+        };\n+    }\n+}\n+\n+pub fn abi_info(ccx: @CrateContext) -> @ABIInfo {\n+    return @X86_ABIInfo {\n+        ccx: ccx\n+    } as @ABIInfo;\n+}"}, {"sha": "31ac4534462a5d539595f63b31eca0da4d3b18ce", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "patch": "@@ -410,6 +410,6 @@ impl ABIInfo for X86_64_ABIInfo {\n     }\n }\n \n-pub fn x86_64_abi_info() -> @ABIInfo {\n+pub fn abi_info() -> @ABIInfo {\n     return @X86_64_ABIInfo as @ABIInfo;\n }"}, {"sha": "1037a4c071041115e88f157533a6650bfff2c878", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "patch": "@@ -16,9 +16,10 @@ use lib::llvm::{TypeRef, ValueRef};\n use lib;\n use middle::trans::base::*;\n use middle::trans::cabi;\n-use middle::trans::cabi_x86_64::*;\n+use middle::trans::cabi_x86;\n+use middle::trans::cabi_x86_64;\n use middle::trans::cabi_arm;\n-use middle::trans::cabi_mips::*;\n+use middle::trans::cabi_mips;\n use middle::trans::build::*;\n use middle::trans::callee::*;\n use middle::trans::common::*;\n@@ -42,12 +43,12 @@ use syntax::abi::{Architecture, X86, X86_64, Arm, Mips};\n use syntax::abi::{RustIntrinsic, Rust, Stdcall, Fastcall,\n                   Cdecl, Aapcs, C};\n \n-fn abi_info(arch: Architecture) -> @cabi::ABIInfo {\n-    return match arch {\n-        X86_64 => x86_64_abi_info(),\n+fn abi_info(ccx: @CrateContext) -> @cabi::ABIInfo {\n+    return match ccx.sess.targ_cfg.arch {\n+        X86 => cabi_x86::abi_info(ccx),\n+        X86_64 => cabi_x86_64::abi_info(),\n         Arm => cabi_arm::abi_info(),\n-        Mips => mips_abi_info(),\n-        X86 => cabi::llvm_abi_info()\n+        Mips => cabi_mips::abi_info(),\n     }\n }\n \n@@ -112,7 +113,7 @@ fn shim_types(ccx: @CrateContext, id: ast::node_id) -> ShimTypes {\n         !ty::type_is_bot(fn_sig.output) &&\n         !ty::type_is_nil(fn_sig.output);\n     let fn_ty =\n-        abi_info(ccx.sess.targ_cfg.arch).compute_info(\n+        abi_info(ccx).compute_info(\n             llsig.llarg_tys,\n             llsig.llret_ty,\n             ret_def);"}, {"sha": "3fbe1b96ef7aa69a0013ebb7afd3912c8abdafeb", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "patch": "@@ -69,6 +69,7 @@ pub mod middle {\n         pub mod tvec;\n         pub mod meth;\n         pub mod cabi;\n+        pub mod cabi_x86;\n         pub mod cabi_x86_64;\n         pub mod cabi_arm;\n         pub mod cabi_mips;"}, {"sha": "475c030e8f25022a22bc6977c5da04491bd5d338", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "patch": "@@ -589,50 +589,6 @@ rust_log_console_off() {\n     log_console_off(task->kernel->env);\n }\n \n-extern \"C\" CDECL lock_and_signal *\n-rust_dbg_lock_create() {\n-    return new lock_and_signal();\n-}\n-\n-extern \"C\" CDECL void\n-rust_dbg_lock_destroy(lock_and_signal *lock) {\n-    assert(lock);\n-    delete lock;\n-}\n-\n-extern \"C\" CDECL void\n-rust_dbg_lock_lock(lock_and_signal *lock) {\n-    assert(lock);\n-    lock->lock();\n-}\n-\n-extern \"C\" CDECL void\n-rust_dbg_lock_unlock(lock_and_signal *lock) {\n-    assert(lock);\n-    lock->unlock();\n-}\n-\n-extern \"C\" CDECL void\n-rust_dbg_lock_wait(lock_and_signal *lock) {\n-    assert(lock);\n-    lock->wait();\n-}\n-\n-extern \"C\" CDECL void\n-rust_dbg_lock_signal(lock_and_signal *lock) {\n-    assert(lock);\n-    lock->signal();\n-}\n-\n-typedef void *(*dbg_callback)(void*);\n-\n-extern \"C\" CDECL void *\n-rust_dbg_call(dbg_callback cb, void *data) {\n-    return cb(data);\n-}\n-\n-extern \"C\" CDECL void rust_dbg_do_nothing() { }\n-\n extern \"C\" CDECL void\n rust_dbg_breakpoint() {\n     BREAKPOINT_AWESOME;\n@@ -844,48 +800,6 @@ rust_readdir() {\n \n #endif\n \n-// These functions are used in the unit tests for C ABI calls.\n-\n-extern \"C\" CDECL uint32_t\n-rust_dbg_extern_identity_u32(uint32_t u) {\n-    return u;\n-}\n-\n-extern \"C\" CDECL uint64_t\n-rust_dbg_extern_identity_u64(uint64_t u) {\n-    return u;\n-}\n-\n-struct TwoU64s {\n-    uint64_t one;\n-    uint64_t two;\n-};\n-\n-extern \"C\" CDECL TwoU64s\n-rust_dbg_extern_identity_TwoU64s(TwoU64s u) {\n-    return u;\n-}\n-\n-struct TwoDoubles {\n-    double one;\n-    double two;\n-};\n-\n-extern \"C\" CDECL TwoDoubles\n-rust_dbg_extern_identity_TwoDoubles(TwoDoubles u) {\n-    return u;\n-}\n-\n-extern \"C\" CDECL double\n-rust_dbg_extern_identity_double(double u) {\n-    return u;\n-}\n-\n-extern \"C\" CDECL char\n-rust_dbg_extern_identity_u8(char u) {\n-    return u;\n-}\n-\n extern \"C\" rust_env*\n rust_get_rt_env() {\n     rust_task *task = rust_get_current_task();"}, {"sha": "64966bd34548916b84e057c198781f2c8b901edf", "filename": "src/rt/rust_test_helpers.cpp", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Frt%2Frust_test_helpers.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Frt%2Frust_test_helpers.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_test_helpers.cpp?ref=fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "patch": "@@ -0,0 +1,167 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Helper functions used only in tests\n+\n+#include \"rust_sched_loop.h\"\n+#include \"rust_task.h\"\n+#include \"rust_util.h\"\n+#include \"rust_scheduler.h\"\n+#include \"sync/timer.h\"\n+#include \"sync/rust_thread.h\"\n+#include \"rust_abi.h\"\n+\n+// These functions are used in the unit tests for C ABI calls.\n+\n+extern \"C\" CDECL uint32_t\n+rust_dbg_extern_identity_u32(uint32_t u) {\n+    return u;\n+}\n+\n+extern \"C\" CDECL uint64_t\n+rust_dbg_extern_identity_u64(uint64_t u) {\n+    return u;\n+}\n+\n+extern \"C\" CDECL double\n+rust_dbg_extern_identity_double(double u) {\n+    return u;\n+}\n+\n+extern \"C\" CDECL char\n+rust_dbg_extern_identity_u8(char u) {\n+    return u;\n+}\n+\n+extern \"C\" CDECL lock_and_signal *\n+rust_dbg_lock_create() {\n+    return new lock_and_signal();\n+}\n+\n+extern \"C\" CDECL void\n+rust_dbg_lock_destroy(lock_and_signal *lock) {\n+    assert(lock);\n+    delete lock;\n+}\n+\n+extern \"C\" CDECL void\n+rust_dbg_lock_lock(lock_and_signal *lock) {\n+    assert(lock);\n+    lock->lock();\n+}\n+\n+extern \"C\" CDECL void\n+rust_dbg_lock_unlock(lock_and_signal *lock) {\n+    assert(lock);\n+    lock->unlock();\n+}\n+\n+extern \"C\" CDECL void\n+rust_dbg_lock_wait(lock_and_signal *lock) {\n+    assert(lock);\n+    lock->wait();\n+}\n+\n+extern \"C\" CDECL void\n+rust_dbg_lock_signal(lock_and_signal *lock) {\n+    assert(lock);\n+    lock->signal();\n+}\n+\n+typedef void *(*dbg_callback)(void*);\n+\n+extern \"C\" CDECL void *\n+rust_dbg_call(dbg_callback cb, void *data) {\n+    return cb(data);\n+}\n+\n+extern \"C\" CDECL void rust_dbg_do_nothing() { }\n+\n+struct TwoU8s {\n+    uint8_t one;\n+    uint8_t two;\n+};\n+\n+extern \"C\" CDECL TwoU8s\n+rust_dbg_extern_return_TwoU8s() {\n+    struct TwoU8s s;\n+    s.one = 10;\n+    s.two = 20;\n+    return s;\n+}\n+\n+extern \"C\" CDECL TwoU8s\n+rust_dbg_extern_identity_TwoU8s(TwoU8s u) {\n+    return u;\n+}\n+\n+struct TwoU16s {\n+    uint16_t one;\n+    uint16_t two;\n+};\n+\n+extern \"C\" CDECL TwoU16s\n+rust_dbg_extern_return_TwoU16s() {\n+    struct TwoU16s s;\n+    s.one = 10;\n+    s.two = 20;\n+    return s;\n+}\n+\n+extern \"C\" CDECL TwoU16s\n+rust_dbg_extern_identity_TwoU16s(TwoU16s u) {\n+    return u;\n+}\n+\n+struct TwoU32s {\n+    uint32_t one;\n+    uint32_t two;\n+};\n+\n+extern \"C\" CDECL TwoU32s\n+rust_dbg_extern_return_TwoU32s() {\n+    struct TwoU32s s;\n+    s.one = 10;\n+    s.two = 20;\n+    return s;\n+}\n+\n+extern \"C\" CDECL TwoU32s\n+rust_dbg_extern_identity_TwoU32s(TwoU32s u) {\n+    return u;\n+}\n+\n+struct TwoU64s {\n+    uint64_t one;\n+    uint64_t two;\n+};\n+\n+extern \"C\" CDECL TwoU64s\n+rust_dbg_extern_return_TwoU64s() {\n+    struct TwoU64s s;\n+    s.one = 10;\n+    s.two = 20;\n+    return s;\n+}\n+\n+extern \"C\" CDECL TwoU64s\n+rust_dbg_extern_identity_TwoU64s(TwoU64s u) {\n+    return u;\n+}\n+\n+struct TwoDoubles {\n+    double one;\n+    double two;\n+};\n+\n+extern \"C\" CDECL TwoDoubles\n+rust_dbg_extern_identity_TwoDoubles(TwoDoubles u) {\n+    return u;\n+}"}, {"sha": "f63e3f53a7caf1ebf94efc986d3a0bf98f682beb", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "patch": "@@ -198,8 +198,15 @@ rust_readdir\n rust_opendir\n rust_dbg_extern_identity_u32\n rust_dbg_extern_identity_u64\n+rust_dbg_extern_identity_TwoU8s\n+rust_dbg_extern_identity_TwoU16s\n+rust_dbg_extern_identity_TwoU32s\n rust_dbg_extern_identity_TwoU64s\n rust_dbg_extern_identity_TwoDoubles\n+rust_dbg_extern_return_TwoU8s\n+rust_dbg_extern_return_TwoU16s\n+rust_dbg_extern_return_TwoU32s\n+rust_dbg_extern_return_TwoU64s\n rust_dbg_extern_identity_double\n rust_dbg_extern_identity_u8\n rust_get_rt_env\n@@ -214,4 +221,3 @@ rust_uv_free_ip6_addr\n rust_call_nullary_fn\n rust_initialize_global_state\n \n-"}, {"sha": "f0343c4d2a267ad87694f678e35c42939357eee9", "filename": "src/test/run-pass/extern-pass-TwoU16s.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs?ref=fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test a foreign function that accepts and returns a struct\n+// by value.\n+\n+// xfail-test #5744\n+\n+#[deriving(Eq)]\n+struct TwoU16s {\n+    one: u16, two: u16\n+}\n+\n+pub extern {\n+    pub fn rust_dbg_extern_identity_TwoU16s(v: TwoU16s) -> TwoU16s;\n+}\n+\n+pub fn main() {\n+    unsafe {\n+        let x = TwoU16s {one: 22, two: 23};\n+        let y = rust_dbg_extern_identity_TwoU16s(x);\n+        assert!(x == y);\n+    }\n+}\n+"}, {"sha": "16d14a96cfe4f64cd2089b83f549ead34c7a1d63", "filename": "src/test/run-pass/extern-pass-TwoU32s.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs?ref=fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test a foreign function that accepts and returns a struct\n+// by value.\n+\n+#[deriving(Eq)]\n+struct TwoU32s {\n+    one: u32, two: u32\n+}\n+\n+pub extern {\n+    pub fn rust_dbg_extern_identity_TwoU32s(v: TwoU32s) -> TwoU32s;\n+}\n+\n+pub fn main() {\n+    unsafe {\n+        let x = TwoU32s {one: 22, two: 23};\n+        let y = rust_dbg_extern_identity_TwoU32s(x);\n+        assert!(x == y);\n+    }\n+}\n+"}, {"sha": "56d3f8ebbff7f28c0fe9bdc55aa9ba8f55989451", "filename": "src/test/run-pass/extern-pass-TwoU64s-ref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s-ref.rs?ref=fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "patch": "@@ -10,8 +10,6 @@\n \n // Test that we ignore modes when calling extern functions.\n \n-// xfail-test --- broken on 32-bit ABIs! (#5347)\n-\n #[deriving(Eq)]\n struct TwoU64s {\n     one: u64, two: u64"}, {"sha": "eb2e3b1158f1c42bd50391c554f9773af1af84e1", "filename": "src/test/run-pass/extern-pass-TwoU64s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs?ref=fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "patch": "@@ -11,7 +11,7 @@\n // Test a foreign function that accepts and returns a struct\n // by value.\n \n-// xfail-test --- broken on 32-bit ABIs! (#5347)\n+// xfail-fast This works standalone on windows but not with check-fast. don't know why\n \n #[deriving(Eq)]\n struct TwoU64s {"}, {"sha": "213e9a68a7f89137477f085ac869dd959b5adbbd", "filename": "src/test/run-pass/extern-pass-TwoU8s.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs?ref=fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test a foreign function that accepts and returns a struct\n+// by value.\n+\n+// xfail-test #5744\n+\n+#[deriving(Eq)]\n+struct TwoU8s {\n+    one: u8, two: u8\n+}\n+\n+pub extern {\n+    pub fn rust_dbg_extern_identity_TwoU8s(v: TwoU8s) -> TwoU8s;\n+}\n+\n+pub fn main() {\n+    unsafe {\n+        let x = TwoU8s {one: 22, two: 23};\n+        let y = rust_dbg_extern_identity_TwoU8s(x);\n+        assert!(x == y);\n+    }\n+}\n+"}, {"sha": "0ea649a65b05fcac070aa9f8970041a89adf4767", "filename": "src/test/run-pass/extern-return-TwoU16s.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Ftest%2Frun-pass%2Fextern-return-TwoU16s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Ftest%2Frun-pass%2Fextern-return-TwoU16s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU16s.rs?ref=fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-win32 #5745\n+\n+struct TwoU16s {\n+    one: u16, two: u16\n+}\n+\n+pub extern {\n+    pub fn rust_dbg_extern_return_TwoU16s() -> TwoU16s;\n+}\n+\n+pub fn main() {\n+    unsafe {\n+        let y = rust_dbg_extern_return_TwoU16s();\n+        assert!(y.one == 10);\n+        assert!(y.two == 20);\n+    }\n+}"}, {"sha": "9e374687855b0aea2c6fbad15b4ab94df15ec07e", "filename": "src/test/run-pass/extern-return-TwoU32s.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Ftest%2Frun-pass%2Fextern-return-TwoU32s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Ftest%2Frun-pass%2Fextern-return-TwoU32s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU32s.rs?ref=fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct TwoU32s {\n+    one: u32, two: u32\n+}\n+\n+pub extern {\n+    pub fn rust_dbg_extern_return_TwoU32s() -> TwoU32s;\n+}\n+\n+pub fn main() {\n+    unsafe {\n+        let y = rust_dbg_extern_return_TwoU32s();\n+        assert!(y.one == 10);\n+        assert!(y.two == 20);\n+    }\n+}"}, {"sha": "250d3b8f562b067d5c6215b23d2671b80344098f", "filename": "src/test/run-pass/extern-return-TwoU64s.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Ftest%2Frun-pass%2Fextern-return-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Ftest%2Frun-pass%2Fextern-return-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU64s.rs?ref=fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct TwoU64s {\n+    one: u64, two: u64\n+}\n+\n+pub extern {\n+    pub fn rust_dbg_extern_return_TwoU64s() -> TwoU64s;\n+}\n+\n+pub fn main() {\n+    unsafe {\n+        let y = rust_dbg_extern_return_TwoU64s();\n+        assert!(y.one == 10);\n+        assert!(y.two == 20);\n+    }\n+}"}, {"sha": "9007d12a4514ff271ab921aef6f0bd0dd003f944", "filename": "src/test/run-pass/extern-return-TwoU8s.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Ftest%2Frun-pass%2Fextern-return-TwoU8s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb4ef321ed5eee681c2b723dcb157c280aa72f2/src%2Ftest%2Frun-pass%2Fextern-return-TwoU8s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU8s.rs?ref=fdb4ef321ed5eee681c2b723dcb157c280aa72f2", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-win32 #5745\n+\n+struct TwoU8s {\n+    one: u8, two: u8\n+}\n+\n+pub extern {\n+    pub fn rust_dbg_extern_return_TwoU8s() -> TwoU8s;\n+}\n+\n+pub fn main() {\n+    unsafe {\n+        let y = rust_dbg_extern_return_TwoU8s();\n+        assert!(y.one == 10);\n+        assert!(y.two == 20);\n+    }\n+}"}]}