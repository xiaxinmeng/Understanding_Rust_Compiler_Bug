{"sha": "6fac7f089f8e209ec2181900a322294896cfbcbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYWM3ZjA4OWY4ZTIwOWVjMjE4MTkwMGEzMjIyOTQ4OTZjZmJjYmY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-08T16:27:26Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-14T13:01:07Z"}, "message": "Don't unregister unwind tables after the JIT is done", "tree": {"sha": "8205e3a8651a29653fb95adeb3645ebd8a2e2142", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8205e3a8651a29653fb95adeb3645ebd8a2e2142"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fac7f089f8e209ec2181900a322294896cfbcbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fac7f089f8e209ec2181900a322294896cfbcbf", "html_url": "https://github.com/rust-lang/rust/commit/6fac7f089f8e209ec2181900a322294896cfbcbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fac7f089f8e209ec2181900a322294896cfbcbf/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86530f889ead9f422a621f89e888f19d42cdc34f", "url": "https://api.github.com/repos/rust-lang/rust/commits/86530f889ead9f422a621f89e888f19d42cdc34f", "html_url": "https://github.com/rust-lang/rust/commit/86530f889ead9f422a621f89e888f19d42cdc34f"}], "stats": {"total": 61, "additions": 18, "deletions": 43}, "files": [{"sha": "ca7083cccb88f22d9a146281ad44576db1e110f4", "filename": "src/debuginfo/unwind.rs", "status": "modified", "additions": 9, "deletions": 39, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6fac7f089f8e209ec2181900a322294896cfbcbf/src%2Fdebuginfo%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fac7f089f8e209ec2181900a322294896cfbcbf/src%2Fdebuginfo%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Funwind.rs?ref=6fac7f089f8e209ec2181900a322294896cfbcbf", "patch": "@@ -72,32 +72,32 @@ impl UnwindContext {\n     }\n \n     #[cfg(feature = \"jit\")]\n-    pub(crate) unsafe fn register_jit(\n-        self,\n-        jit_module: &cranelift_jit::JITModule,\n-    ) -> Option<UnwindRegistry> {\n+    pub(crate) unsafe fn register_jit(self, jit_module: &cranelift_jit::JITModule) {\n         let mut eh_frame = EhFrame::from(super::emit::WriterRelocate::new(self.endian));\n         self.frame_table.write_eh_frame(&mut eh_frame).unwrap();\n \n         if eh_frame.0.writer.slice().is_empty() {\n-            return None;\n+            return;\n         }\n \n         let mut eh_frame = eh_frame.0.relocate_for_jit(jit_module);\n \n         // GCC expects a terminating \"empty\" length, so write a 0 length at the end of the table.\n         eh_frame.extend(&[0, 0, 0, 0]);\n \n-        let mut registrations = Vec::new();\n+        // FIXME support unregistering unwind tables once cranelift-jit supports deallocating\n+        // individual functions\n+        #[allow(unused_variables)]\n+        let (eh_frame, eh_frame_len, _) = Vec::into_raw_parts(eh_frame);\n \n         // =======================================================================\n         // Everything after this line up to the end of the file is loosly based on\n         // https://github.com/bytecodealliance/wasmtime/blob/4471a82b0c540ff48960eca6757ccce5b1b5c3e4/crates/jit/src/unwind/systemv.rs\n         #[cfg(target_os = \"macos\")]\n         {\n             // On macOS, `__register_frame` takes a pointer to a single FDE\n-            let start = eh_frame.as_ptr();\n-            let end = start.add(eh_frame.len());\n+            let start = eh_frame;\n+            let end = start.add(eh_frame_len);\n             let mut current = start;\n \n             // Walk all of the entries in the frame table and register them\n@@ -107,7 +107,6 @@ impl UnwindContext {\n                 // Skip over the CIE\n                 if current != start {\n                     __register_frame(current);\n-                    registrations.push(current as usize);\n                 }\n \n                 // Move to the next table entry (+4 because the length itself is not inclusive)\n@@ -117,41 +116,12 @@ impl UnwindContext {\n         #[cfg(not(target_os = \"macos\"))]\n         {\n             // On other platforms, `__register_frame` will walk the FDEs until an entry of length 0\n-            let ptr = eh_frame.as_ptr();\n-            __register_frame(ptr);\n-            registrations.push(ptr as usize);\n+            __register_frame(eh_frame);\n         }\n-\n-        Some(UnwindRegistry { _frame_table: eh_frame, registrations })\n     }\n }\n \n-/// Represents a registry of function unwind information for System V ABI.\n-pub(crate) struct UnwindRegistry {\n-    _frame_table: Vec<u8>,\n-    registrations: Vec<usize>,\n-}\n-\n extern \"C\" {\n     // libunwind import\n     fn __register_frame(fde: *const u8);\n-    fn __deregister_frame(fde: *const u8);\n-}\n-\n-impl Drop for UnwindRegistry {\n-    fn drop(&mut self) {\n-        unsafe {\n-            // libgcc stores the frame entries as a linked list in decreasing sort order\n-            // based on the PC value of the registered entry.\n-            //\n-            // As we store the registrations in increasing order, it would be O(N^2) to\n-            // deregister in that order.\n-            //\n-            // To ensure that we just pop off the first element in the list upon every\n-            // deregistration, walk our list of registrations backwards.\n-            for fde in self.registrations.iter().rev() {\n-                __deregister_frame(*fde as *const _);\n-            }\n-        }\n-    }\n }"}, {"sha": "99d8cd57ba6b3ffa49251afaee56e2b34170807c", "filename": "src/driver/jit.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6fac7f089f8e209ec2181900a322294896cfbcbf/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fac7f089f8e209ec2181900a322294896cfbcbf/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=6fac7f089f8e209ec2181900a322294896cfbcbf", "patch": "@@ -80,12 +80,17 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n     }\n \n     crate::allocator::codegen(tcx, &mut jit_module, &mut cx.unwind_context);\n-    crate::main_shim::maybe_create_entry_wrapper(tcx, &mut jit_module, &mut cx.unwind_context, true);\n+    crate::main_shim::maybe_create_entry_wrapper(\n+        tcx,\n+        &mut jit_module,\n+        &mut cx.unwind_context,\n+        true,\n+    );\n \n     tcx.sess.abort_if_errors();\n \n     jit_module.finalize_definitions();\n-    let _unwind_register_guard = unsafe { cx.unwind_context.register_jit(&jit_module) };\n+    unsafe { cx.unwind_context.register_jit(&jit_module) };\n \n     println!(\n         \"Rustc codegen cranelift will JIT run the executable, because -Cllvm-args=mode=jit was passed\"\n@@ -147,7 +152,7 @@ extern \"C\" fn __clif_jit_fn(instance_ptr: *const Instance<'static>) -> *const u8\n \n             assert!(cx.global_asm.is_empty());\n             jit_module.finalize_definitions();\n-            std::mem::forget(unsafe { cx.unwind_context.register_jit(&jit_module) });\n+            unsafe { cx.unwind_context.register_jit(&jit_module) };\n             jit_module.get_finalized_function(func_id)\n         })\n     })"}, {"sha": "12d8f9c1d73f721f5a2cd45863a3056640d05ce8", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fac7f089f8e209ec2181900a322294896cfbcbf/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fac7f089f8e209ec2181900a322294896cfbcbf/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=6fac7f089f8e209ec2181900a322294896cfbcbf", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_private, decl_macro, never_type, hash_drain_filter)]\n+#![feature(rustc_private, decl_macro, never_type, hash_drain_filter, vec_into_raw_parts)]\n #![warn(rust_2018_idioms)]\n #![warn(unused_lifetimes)]\n #![warn(unreachable_pub)]"}]}