{"sha": "7cd96ae2d7b596a95f53e3edabed589b899e5407", "node_id": "C_kwDOAAsO6NoAKDdjZDk2YWUyZDdiNTk2YTk1ZjUzZTNlZGFiZWQ1ODliODk5ZTU0MDc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-30T19:42:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-30T19:42:20Z"}, "message": "Rollup merge of #109739 - compiler-errors:new-solver-closure-fnonce, r=lcnr\n\nClosures always implement `FnOnce` in new solver\n\nWe should process `[closure]: FnOnce(Tys...) -> Ty` obligations *before* fallback and closure analysis. We can do this by taking advantage of the fact that `FnOnce` is always implemented by closures, even before we definitely know the closure kind.\n\nFixes compiler-errors/next-solver-hir-issues#15\n\nr? ``@oli-obk`` (trying to spread the reviewer load for new trait solver prs, and this one is pretty self-contained, though feel free to reassign \ud83d\ude38)", "tree": {"sha": "3ffe8d58607b409032fffb1e179ab8f639f48485", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ffe8d58607b409032fffb1e179ab8f639f48485"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cd96ae2d7b596a95f53e3edabed589b899e5407", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkJeYcCRBK7hj4Ov3rIwAANjEIAGtvxMU3wOuTrILR0FBEk+WK\nwhjcNiX44KZwEcQEben0Qd5SJIeY+tNReQLXtm2bVkefk2SKctw3JAAU/slqZsvj\nDJhnsyL88E3QowSaOjCCH/2fZeHyPLFpIhpHJ+Go+CtKGk0uyjYxI49KbV0ynFgm\nRTQUUDnMZb2P8njj3gVJJfL6M+bKaorPEp1PlhmjSmFNYE4MEw/wiXainpuUmVpz\n2yAoxS6SMyfg3StVuoRFMkE1BMxEfgMdCmQLxIaJtu543EKYQjQCFtRqAbCUFaTq\n+++zDHKzBCKvEz1BUsKxBdmv84aI5WxF5Qz6QP5X1MXXTbfBlfSYj7q1ZYSYKlQ=\n=4J/2\n-----END PGP SIGNATURE-----\n", "payload": "tree 3ffe8d58607b409032fffb1e179ab8f639f48485\nparent fbe738345cfe845f0d3b7b0961258187c3d26550\nparent 177997e3833d48973e7856e14f2935340b1862f1\nauthor Michael Goulet <michael@errs.io> 1680205340 -0700\ncommitter GitHub <noreply@github.com> 1680205340 -0700\n\nRollup merge of #109739 - compiler-errors:new-solver-closure-fnonce, r=lcnr\n\nClosures always implement `FnOnce` in new solver\n\nWe should process `[closure]: FnOnce(Tys...) -> Ty` obligations *before* fallback and closure analysis. We can do this by taking advantage of the fact that `FnOnce` is always implemented by closures, even before we definitely know the closure kind.\n\nFixes compiler-errors/next-solver-hir-issues#15\n\nr? ``@oli-obk`` (trying to spread the reviewer load for new trait solver prs, and this one is pretty self-contained, though feel free to reassign \ud83d\ude38)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cd96ae2d7b596a95f53e3edabed589b899e5407", "html_url": "https://github.com/rust-lang/rust/commit/7cd96ae2d7b596a95f53e3edabed589b899e5407", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cd96ae2d7b596a95f53e3edabed589b899e5407/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbe738345cfe845f0d3b7b0961258187c3d26550", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe738345cfe845f0d3b7b0961258187c3d26550", "html_url": "https://github.com/rust-lang/rust/commit/fbe738345cfe845f0d3b7b0961258187c3d26550"}, {"sha": "177997e3833d48973e7856e14f2935340b1862f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/177997e3833d48973e7856e14f2935340b1862f1", "html_url": "https://github.com/rust-lang/rust/commit/177997e3833d48973e7856e14f2935340b1862f1"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "fcb965dd725af297d4e5565d7017d733214f666f", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7cd96ae2d7b596a95f53e3edabed589b899e5407/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd96ae2d7b596a95f53e3edabed589b899e5407/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=7cd96ae2d7b596a95f53e3edabed589b899e5407", "patch": "@@ -214,9 +214,20 @@ pub(crate) fn extract_tupled_inputs_and_output_from_callable<'tcx>(\n         ty::Closure(_, substs) => {\n             let closure_substs = substs.as_closure();\n             match closure_substs.kind_ty().to_opt_closure_kind() {\n-                Some(closure_kind) if closure_kind.extends(goal_kind) => {}\n-                None => return Ok(None),\n-                _ => return Err(NoSolution),\n+                // If the closure's kind doesn't extend the goal kind,\n+                // then the closure doesn't implement the trait.\n+                Some(closure_kind) => {\n+                    if !closure_kind.extends(goal_kind) {\n+                        return Err(NoSolution);\n+                    }\n+                }\n+                // Closure kind is not yet determined, so we return ambiguity unless\n+                // the expected kind is `FnOnce` as that is always implemented.\n+                None => {\n+                    if goal_kind != ty::ClosureKind::FnOnce {\n+                        return Ok(None);\n+                    }\n+                }\n             }\n             Ok(Some(closure_substs.sig().map_bound(|sig| (sig.inputs()[0], sig.output()))))\n         }"}, {"sha": "d2ad0cc0316e3d4925f6f03eca422bd043567de1", "filename": "tests/ui/traits/new-solver/closure-inference-guidance.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7cd96ae2d7b596a95f53e3edabed589b899e5407/tests%2Fui%2Ftraits%2Fnew-solver%2Fclosure-inference-guidance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd96ae2d7b596a95f53e3edabed589b899e5407/tests%2Fui%2Ftraits%2Fnew-solver%2Fclosure-inference-guidance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fclosure-inference-guidance.rs?ref=7cd96ae2d7b596a95f53e3edabed589b899e5407", "patch": "@@ -0,0 +1,11 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+fn foo(i: isize) -> isize { i + 1 }\n+\n+fn apply<A, F>(f: F, v: A) -> A where F: FnOnce(A) -> A { f(v) }\n+\n+pub fn main() {\n+    let f = |i| foo(i);\n+    assert_eq!(apply(f, 2), 3);\n+}"}]}