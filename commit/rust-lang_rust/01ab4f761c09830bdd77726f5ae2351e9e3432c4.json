{"sha": "01ab4f761c09830bdd77726f5ae2351e9e3432c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYWI0Zjc2MWMwOTgzMGJkZDc3NzI2ZjVhZTIzNTFlOWUzNDMyYzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-10T22:37:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-10T22:37:38Z"}, "message": "Auto merge of #25777 - shepmaster:cstring-return-to-c, r=alexcrichton\n\nAs far as I was able to determine, it's currently *impossible* to allocate a C NUL-terminated string in Rust and then return it to C (transferring ownership), without leaking memory. There is support for passing the string to C (borrowing).\r\n\r\nTo complicate matters, it's not possible for the C code to just call `free` on the allocated string, due to the different allocators in use.\r\n\r\n`CString` has no way to recreate itself from a pointer. This commit adds one. This is complicated a bit because Rust `Vec`s want the pointer, size, and capacity.\r\n\r\nTo deal with that, another method to shrink and \"leak\" the `CString` to a `char *` is also provided. \r\n\r\nWe can then use `strlen` to determine the length of the string, which must match the capacity. \r\n\r\n**TODO**\r\n\r\n- [x] Improve documentation\r\n- [x] Add stability markers\r\n- [x] Convert to `Box<[u8]>`\r\n\r\n### Example code\r\n\r\nWith this example code:\r\n\r\n```rust\r\n#![feature(libc)]\r\n#![feature(cstr_to_str)]\r\n#![feature(c_str_memory)]\r\n\r\nextern crate libc;\r\n\r\nuse std::ffi::{CStr,CString};\r\n\r\n#[no_mangle]\r\npub extern fn reverse(s: *const libc::c_char) -> *const libc::c_char {\r\n    let s = unsafe { CStr::from_ptr(s) };\r\n    let s2 = s.to_str().unwrap();\r\n    let s3: String = s2.chars().rev().collect();\r\n    let s4 = CString::new(s3).unwrap();\r\n    s4.into_ptr()\r\n}\r\n\r\n#[no_mangle]\r\npub extern fn cleanup(s: *const libc::c_char) {\r\n    unsafe { CString::from_ptr(s) };\r\n}\r\n```\r\n\r\nCompiled using `rustc --crate-type dylib str.rs`, I was able to link against it from C (`gcc -L. -l str str.c -o str`):\r\n \r\n```c\r\n#include <stdio.h>\r\n\r\nextern char *reverse(char *);\r\nextern void cleanup(char *);\r\n\r\nint main() {\r\n  char *s = reverse(\"Hello, world!\");\r\n  printf(\"%s\\n\", s);\r\n  cleanup(s);\r\n}\r\n```\r\n\r\nAs well as dynamically link via Ruby:\r\n\r\n```ruby\r\nrequire 'fiddle'\r\nrequire 'fiddle/import'\r\n\r\nmodule LibSum\r\n  extend Fiddle::Importer\r\n\r\n  dlload './libstr.dylib'\r\n  extern 'char* reverse(char *)'\r\n  extern 'void cleanup(char *)'\r\nend\r\n\r\ns = LibSum.reverse(\"hello, world!\")\r\nputs s\r\nLibSum.cleanup(s)\r\n```", "tree": {"sha": "4974ad2f22af5f67ed695d20f9848d28e4561cf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4974ad2f22af5f67ed695d20f9848d28e4561cf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01ab4f761c09830bdd77726f5ae2351e9e3432c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01ab4f761c09830bdd77726f5ae2351e9e3432c4", "html_url": "https://github.com/rust-lang/rust/commit/01ab4f761c09830bdd77726f5ae2351e9e3432c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01ab4f761c09830bdd77726f5ae2351e9e3432c4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db0c1cb13c9a1e68c09e2074b6d3a7b38122fb76", "url": "https://api.github.com/repos/rust-lang/rust/commits/db0c1cb13c9a1e68c09e2074b6d3a7b38122fb76", "html_url": "https://github.com/rust-lang/rust/commit/db0c1cb13c9a1e68c09e2074b6d3a7b38122fb76"}, {"sha": "e20a6dbeed095427e5d5487844f65e7eb1599651", "url": "https://api.github.com/repos/rust-lang/rust/commits/e20a6dbeed095427e5d5487844f65e7eb1599651", "html_url": "https://github.com/rust-lang/rust/commit/e20a6dbeed095427e5d5487844f65e7eb1599651"}], "stats": {"total": 45, "additions": 41, "deletions": 4}, "files": [{"sha": "433bb335a805bbb4c4091cd06db4523b41f1ce60", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 41, "deletions": 4, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/01ab4f761c09830bdd77726f5ae2351e9e3432c4/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ab4f761c09830bdd77726f5ae2351e9e3432c4/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=01ab4f761c09830bdd77726f5ae2351e9e3432c4", "patch": "@@ -10,7 +10,9 @@\n \n #![unstable(feature = \"std_misc\")]\n \n-use borrow::Cow;\n+use borrow::{Cow, ToOwned};\n+use boxed::{self, Box};\n+use clone::Clone;\n use convert::{Into, From};\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use error::Error;\n@@ -61,10 +63,10 @@ use vec::Vec;\n /// }\n /// # }\n /// ```\n-#[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash)]\n+#[derive(PartialEq, PartialOrd, Eq, Ord, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct CString {\n-    inner: Vec<u8>,\n+    inner: Box<[u8]>,\n }\n \n /// Representation of a borrowed C string.\n@@ -197,7 +199,35 @@ impl CString {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_vec_unchecked(mut v: Vec<u8>) -> CString {\n         v.push(0);\n-        CString { inner: v }\n+        CString { inner: v.into_boxed_slice() }\n+    }\n+\n+    /// Retakes ownership of a CString that was transferred to C.\n+    ///\n+    /// The only appropriate argument is a pointer obtained by calling\n+    /// `into_ptr`. The length of the string will be recalculated\n+    /// using the pointer.\n+    #[unstable(feature = \"cstr_memory\", reason = \"recently added\")]\n+    pub unsafe fn from_ptr(ptr: *const libc::c_char) -> CString {\n+        let len = libc::strlen(ptr) + 1; // Including the NUL byte\n+        let slice = slice::from_raw_parts(ptr, len as usize);\n+        CString { inner: mem::transmute(slice) }\n+    }\n+\n+    /// Transfers ownership of the string to a C caller.\n+    ///\n+    /// The pointer must be returned to Rust and reconstituted using\n+    /// `from_ptr` to be properly deallocated. Specifically, one\n+    /// should *not* use the standard C `free` function to deallocate\n+    /// this string.\n+    ///\n+    /// Failure to call `from_ptr` will lead to a memory leak.\n+    #[unstable(feature = \"cstr_memory\", reason = \"recently added\")]\n+    pub fn into_ptr(self) -> *const libc::c_char {\n+        // It is important that the bytes be sized to fit - we need\n+        // the capacity to be determinable from the string length, and\n+        // shrinking to fit is the only way to be sure.\n+        boxed::into_raw(self.inner) as *const libc::c_char\n     }\n \n     /// Returns the contents of this `CString` as a slice of bytes.\n@@ -217,6 +247,13 @@ impl CString {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl Clone for CString {\n+    fn clone(&self) -> Self {\n+        CString { inner: self.inner.to_owned().into_boxed_slice() }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Deref for CString {\n     type Target = CStr;"}]}