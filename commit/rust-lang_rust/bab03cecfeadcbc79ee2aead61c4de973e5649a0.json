{"sha": "bab03cecfeadcbc79ee2aead61c4de973e5649a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhYjAzY2VjZmVhZGNiYzc5ZWUyYWVhZDYxYzRkZTk3M2U1NjQ5YTA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-14T20:00:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-14T20:00:09Z"}, "message": "Rollup merge of #60130 - khuey:efficient_last, r=sfackler\n\nAdd implementations of last in terms of next_back on a bunch of DoubleEndedIterators\n\nProvided a `DoubleEndedIterator` has finite length, `Iterator::last` is equivalent to `DoubleEndedIterator::next_back`. But searching forwards through the iterator when it's unnecessary is obviously not good for performance. I ran into this on one of the collection iterators.\n\nI tried adding appropriate overloads for a bunch of the iterator adapters like filter, map, etc, but I ran into a lot of type inference failures after doing so.\n\nThe other interesting case is what to do with `Repeat`. Do we consider it part of the contract that `Iterator::last` will loop forever on it? The docs do say that the iterator will be evaluated until it returns None. This is also relevant for the adapters, it's trivially easy to observe whether a `Map` adapter invoked its closure a zillion times or just once for the last element.", "tree": {"sha": "c21019d74e135ab2045e9adc8bd65bc61453d0aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c21019d74e135ab2045e9adc8bd65bc61453d0aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bab03cecfeadcbc79ee2aead61c4de973e5649a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc2x5JCRBK7hj4Ov3rIwAAdHIIABSiUuNfcVajP+6Lrf4TmEct\n0nhf+f4wRQ9sbdRClYwa0Ah4G+7fOZLTEwFN+L30cR/SqlcUe2p1iEDMrj7oLoPs\nobFSYEhhLr20mBp8FhhnAv99aUBc/jL2BTrumFwFVq9nadlnEdN6xgsTBnUc1O8F\nv5l6kZfgk8zaH5W0567OUCjACwtnfcOl23lf4f3AZ1kK+F79VEvyBC6iU/f/+TYh\nigeVIzhijarUdUZGTZ2E9/GyDPNWPgjvT/wsjlM7qk+0bwgnHPfJOE/W0iW+uivx\n3dyQNKIG3fdLwxGjGeZhUGHJEPFo8MzdDJ4uOhAG7DHmL7seco0Bx3ATKvAAAbw=\n=FM7k\n-----END PGP SIGNATURE-----\n", "payload": "tree c21019d74e135ab2045e9adc8bd65bc61453d0aa\nparent f59c71eb8ed808347c1e4245b842d673c75daeb6\nparent 3e86cf36b5114f201868bf459934fe346a76a2d4\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1557864009 +0200\ncommitter GitHub <noreply@github.com> 1557864009 +0200\n\nRollup merge of #60130 - khuey:efficient_last, r=sfackler\n\nAdd implementations of last in terms of next_back on a bunch of DoubleEndedIterators\n\nProvided a `DoubleEndedIterator` has finite length, `Iterator::last` is equivalent to `DoubleEndedIterator::next_back`. But searching forwards through the iterator when it's unnecessary is obviously not good for performance. I ran into this on one of the collection iterators.\n\nI tried adding appropriate overloads for a bunch of the iterator adapters like filter, map, etc, but I ran into a lot of type inference failures after doing so.\n\nThe other interesting case is what to do with `Repeat`. Do we consider it part of the contract that `Iterator::last` will loop forever on it? The docs do say that the iterator will be evaluated until it returns None. This is also relevant for the adapters, it's trivially easy to observe whether a `Map` adapter invoked its closure a zillion times or just once for the last element.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bab03cecfeadcbc79ee2aead61c4de973e5649a0", "html_url": "https://github.com/rust-lang/rust/commit/bab03cecfeadcbc79ee2aead61c4de973e5649a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bab03cecfeadcbc79ee2aead61c4de973e5649a0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f59c71eb8ed808347c1e4245b842d673c75daeb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f59c71eb8ed808347c1e4245b842d673c75daeb6", "html_url": "https://github.com/rust-lang/rust/commit/f59c71eb8ed808347c1e4245b842d673c75daeb6"}, {"sha": "3e86cf36b5114f201868bf459934fe346a76a2d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e86cf36b5114f201868bf459934fe346a76a2d4", "html_url": "https://github.com/rust-lang/rust/commit/3e86cf36b5114f201868bf459934fe346a76a2d4"}], "stats": {"total": 159, "additions": 159, "deletions": 0}, "files": [{"sha": "39fcfaa789377bb575fabda5be8fccc790468885", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=bab03cecfeadcbc79ee2aead61c4de973e5649a0", "patch": "@@ -992,6 +992,11 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1047,6 +1052,11 @@ impl<T> Iterator for IntoIter<T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1093,6 +1103,11 @@ impl<T> Iterator for Drain<'_, T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]"}, {"sha": "414abb00ef1fa760161d49cbaa0327939675ce94", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=bab03cecfeadcbc79ee2aead61c4de973e5649a0", "patch": "@@ -1193,6 +1193,11 @@ impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (self.length, Some(self.length))\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<(&'a K, &'a V)> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -1253,6 +1258,11 @@ impl<'a, K: 'a, V: 'a> Iterator for IterMut<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (self.length, Some(self.length))\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<(&'a K, &'a mut V)> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1359,6 +1369,11 @@ impl<K, V> Iterator for IntoIter<K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (self.length, Some(self.length))\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<(K, V)> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1421,6 +1436,11 @@ impl<'a, K, V> Iterator for Keys<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a K> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1458,6 +1478,11 @@ impl<'a, K, V> Iterator for Values<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a V> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1495,6 +1520,11 @@ impl<'a, K, V> Iterator for Range<'a, K, V> {\n             unsafe { Some(self.next_unchecked()) }\n         }\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<(&'a K, &'a V)> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n@@ -1508,6 +1538,11 @@ impl<'a, K, V> Iterator for ValuesMut<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a mut V> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n@@ -1626,6 +1661,11 @@ impl<'a, K, V> Iterator for RangeMut<'a, K, V> {\n             unsafe { Some(self.next_unchecked()) }\n         }\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<(&'a K, &'a mut V)> {\n+        self.next_back()\n+    }\n }\n \n impl<'a, K, V> RangeMut<'a, K, V> {"}, {"sha": "6f2467dfd6b513de6b41e7fec1a95a85f61feed9", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=bab03cecfeadcbc79ee2aead61c4de973e5649a0", "patch": "@@ -1019,6 +1019,11 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a T> {\n+        self.next_back()\n+    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n@@ -1044,6 +1049,11 @@ impl<T> Iterator for IntoIter<T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<T> {\n+        self.next_back()\n+    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> DoubleEndedIterator for IntoIter<T> {\n@@ -1073,6 +1083,11 @@ impl<'a, T> Iterator for Range<'a, T> {\n     fn next(&mut self) -> Option<&'a T> {\n         self.iter.next().map(|(k, _)| k)\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"btree_range\", since = \"1.17.0\")]"}, {"sha": "63f7769fee56a794583404c020b421c6354373e7", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=bab03cecfeadcbc79ee2aead61c4de973e5649a0", "patch": "@@ -2377,6 +2377,10 @@ impl Iterator for Drain<'_> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+    #[inline]\n+    fn last(mut self) -> Option<char> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]"}, {"sha": "c0cdffe596babc85e61fce4813ef1616682df183", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=bab03cecfeadcbc79ee2aead61c4de973e5649a0", "patch": "@@ -2395,6 +2395,11 @@ impl<T> Iterator for IntoIter<T> {\n     fn count(self) -> usize {\n         self.len()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2514,6 +2519,11 @@ impl<T> Iterator for Drain<'_, T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n@@ -2583,6 +2593,10 @@ impl<I: Iterator> Iterator for Splice<'_, I> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.drain.size_hint()\n     }\n+\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"vec_splice\", since = \"1.21.0\")]"}, {"sha": "ddee02ea232d1cf43f6428b8f82440ba21b4c943", "filename": "src/libcore/ascii.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Flibcore%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Flibcore%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fascii.rs?ref=bab03cecfeadcbc79ee2aead61c4de973e5649a0", "patch": "@@ -117,6 +117,8 @@ impl Iterator for EscapeDefault {\n     type Item = u8;\n     fn next(&mut self) -> Option<u8> { self.range.next().map(|i| self.data[i]) }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.range.size_hint() }\n+    #[inline]\n+    fn last(mut self) -> Option<u8> { self.next_back() }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl DoubleEndedIterator for EscapeDefault {"}, {"sha": "64e588f65b4688b5800b4c616455fc2a17b66c35", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=bab03cecfeadcbc79ee2aead61c4de973e5649a0", "patch": "@@ -73,6 +73,11 @@ impl<I> Iterator for Rev<I> where I: DoubleEndedIterator {\n     {\n         self.iter.position(predicate)\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "4066e2f0a8412070aeb535e25eb75a14d08f6a25", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=bab03cecfeadcbc79ee2aead61c4de973e5649a0", "patch": "@@ -3541,6 +3541,11 @@ impl<'a, T, P> Iterator for Split<'a, T, P> where P: FnMut(&T) -> bool {\n             (1, Some(self.v.len() + 1))\n         }\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -3639,6 +3644,11 @@ impl<'a, T, P> Iterator for SplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n             (1, Some(self.v.len() + 1))\n         }\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -3704,6 +3714,11 @@ impl<'a, T, P> Iterator for RSplit<'a, T, P> where P: FnMut(&T) -> bool {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n@@ -3768,6 +3783,11 @@ impl<'a, T, P> Iterator for RSplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]"}, {"sha": "84079a7a433f5d03a64c813723b2314e33a4c213", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=bab03cecfeadcbc79ee2aead61c4de973e5649a0", "patch": "@@ -1333,6 +1333,11 @@ impl<'a> Iterator for Lines<'a> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.0.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1379,6 +1384,11 @@ impl<'a> Iterator for LinesAny<'a> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.0.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -4217,6 +4227,11 @@ impl<'a> Iterator for SplitWhitespace<'a> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n@@ -4243,6 +4258,11 @@ impl<'a> Iterator for SplitAsciiWhitespace<'a> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"}, {"sha": "39896ac2fcd272bc49e7f876a4976dd8f056488b", "filename": "src/libstd/env.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=bab03cecfeadcbc79ee2aead61c4de973e5649a0", "patch": "@@ -746,6 +746,10 @@ impl Iterator for Args {\n         self.inner.next().map(|s| s.into_string().unwrap())\n     }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n+    #[inline]\n+    fn last(mut self) -> Option<String> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"env\", since = \"1.0.0\")]\n@@ -781,6 +785,8 @@ impl Iterator for ArgsOs {\n     type Item = OsString;\n     fn next(&mut self) -> Option<OsString> { self.inner.next() }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n+    #[inline]\n+    fn last(mut self) -> Option<OsString> { self.next_back() }\n }\n \n #[stable(feature = \"env\", since = \"1.0.0\")]"}, {"sha": "59f9e439add244a4955c74191188b02d15740582", "filename": "src/libstd/path.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=bab03cecfeadcbc79ee2aead61c4de973e5649a0", "patch": "@@ -888,6 +888,11 @@ impl<'a> Iterator for Iter<'a> {\n     fn next(&mut self) -> Option<&'a OsStr> {\n         self.inner.next().map(Component::as_os_str)\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a OsStr> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -951,6 +956,11 @@ impl<'a> Iterator for Components<'a> {\n         }\n         None\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "f0594bb21bd83245969f91011b9360574accb538", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=bab03cecfeadcbc79ee2aead61c4de973e5649a0", "patch": "@@ -35,6 +35,8 @@ impl Iterator for Args {\n     type Item = OsString;\n     fn next(&mut self) -> Option<OsString> { self.iter.next() }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n+    #[inline]\n+    fn last(mut self) -> Option<OsString> { self.next_back() }\n }\n \n impl ExactSizeIterator for Args {"}, {"sha": "6766099c1ece13d05520f6f5ba04ed1c453f7adc", "filename": "src/libstd/sys/wasm/args.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Flibstd%2Fsys%2Fwasm%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Flibstd%2Fsys%2Fwasm%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fargs.rs?ref=bab03cecfeadcbc79ee2aead61c4de973e5649a0", "patch": "@@ -37,6 +37,10 @@ impl Iterator for Args {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+    #[inline]\n+    fn last(mut self) -> Option<OsString> {\n+        self.next_back()\n+    }\n }\n \n impl ExactSizeIterator for Args {"}, {"sha": "744d7ec59d3a3e76303da40a4589bf099af936d1", "filename": "src/libstd/sys/windows/args.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Flibstd%2Fsys%2Fwindows%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab03cecfeadcbc79ee2aead61c4de973e5649a0/src%2Flibstd%2Fsys%2Fwindows%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fargs.rs?ref=bab03cecfeadcbc79ee2aead61c4de973e5649a0", "patch": "@@ -181,6 +181,8 @@ impl Iterator for Args {\n     type Item = OsString;\n     fn next(&mut self) -> Option<OsString> { self.parsed_args_list.next() }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.parsed_args_list.size_hint() }\n+    #[inline]\n+    fn last(mut self) -> Option<OsString> { self.next_back() }\n }\n \n impl DoubleEndedIterator for Args {"}]}