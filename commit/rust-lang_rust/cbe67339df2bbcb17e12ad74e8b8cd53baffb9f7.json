{"sha": "cbe67339df2bbcb17e12ad74e8b8cd53baffb9f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZTY3MzM5ZGYyYmJjYjE3ZTEyYWQ3NGU4YjhjZDUzYmFmZmI5Zjc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-21T17:55:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-21T17:55:00Z"}, "message": "more completion components", "tree": {"sha": "633f0e84927f8747b1349ac345e606654cb7a572", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/633f0e84927f8747b1349ac345e606654cb7a572"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbe67339df2bbcb17e12ad74e8b8cd53baffb9f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe67339df2bbcb17e12ad74e8b8cd53baffb9f7", "html_url": "https://github.com/rust-lang/rust/commit/cbe67339df2bbcb17e12ad74e8b8cd53baffb9f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbe67339df2bbcb17e12ad74e8b8cd53baffb9f7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2bf174e9c3f994d83e7e72b6e15c9b26c5b31a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2bf174e9c3f994d83e7e72b6e15c9b26c5b31a2", "html_url": "https://github.com/rust-lang/rust/commit/c2bf174e9c3f994d83e7e72b6e15c9b26c5b31a2"}], "stats": {"total": 199, "additions": 104, "deletions": 95}, "files": [{"sha": "883b3e8510d5f4e29954f1881cc3cbc9a0806028", "filename": "crates/ra_analysis/src/completion.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cbe67339df2bbcb17e12ad74e8b8cd53baffb9f7/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe67339df2bbcb17e12ad74e8b8cd53baffb9f7/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs?ref=cbe67339df2bbcb17e12ad74e8b8cd53baffb9f7", "patch": "@@ -2,7 +2,8 @@ mod completion_item;\n mod reference_completion;\n \n mod complete_fn_param;\n-mod complete_keywords;\n+mod complete_keyword;\n+mod complete_snippet;\n \n use ra_editor::find_node_at_offset;\n use ra_text_edit::AtomTextEdit;\n@@ -49,7 +50,9 @@ pub(crate) fn completions(\n \n     let ctx = ctry!(SyntaxContext::new(&original_file, position.offset));\n     complete_fn_param::complete_fn_param(&mut acc, &ctx);\n-    complete_keywords::complete_expr_keyword(&mut acc, &ctx);\n+    complete_keyword::complete_expr_keyword(&mut acc, &ctx);\n+    complete_snippet::complete_expr_snippet(&mut acc, &ctx);\n+    complete_snippet::complete_item_snippet(&mut acc, &ctx);\n \n     Ok(Some(acc))\n }\n@@ -61,10 +64,12 @@ pub(super) struct SyntaxContext<'a> {\n     leaf: SyntaxNodeRef<'a>,\n     enclosing_fn: Option<ast::FnDef<'a>>,\n     is_param: bool,\n-    /// a single-indent path, like `foo`.\n+    /// A single-indent path, like `foo`.\n     is_trivial_path: bool,\n     after_if: bool,\n     is_stmt: bool,\n+    /// Something is typed at the \"top\" level, in module or impl/trait.\n+    is_new_item: bool,\n }\n \n impl SyntaxContext<'_> {\n@@ -77,6 +82,7 @@ impl SyntaxContext<'_> {\n             is_trivial_path: false,\n             after_if: false,\n             is_stmt: false,\n+            is_new_item: false,\n         };\n         ctx.fill(original_file, offset);\n         Some(ctx)\n@@ -112,17 +118,22 @@ impl SyntaxContext<'_> {\n         }\n     }\n     fn classify_name_ref(&mut self, file: &SourceFileNode, name_ref: ast::NameRef) {\n-        // let name_range = name_ref.syntax().range();\n-        // let top_node = name_ref\n-        //     .syntax()\n-        //     .ancestors()\n-        //     .take_while(|it| it.range() == name_range)\n-        //     .last()\n-        //     .unwrap();\n-        // match top_node.parent().map(|it| it.kind()) {\n-        //     Some(SOURCE_FILE) | Some(ITEM_LIST) => return Some(NameRefKind::BareIdentInMod),\n-        //     _ => (),\n-        // }\n+        let name_range = name_ref.syntax().range();\n+        let top_node = name_ref\n+            .syntax()\n+            .ancestors()\n+            .take_while(|it| it.range() == name_range)\n+            .last()\n+            .unwrap();\n+\n+        match top_node.parent().map(|it| it.kind()) {\n+            Some(SOURCE_FILE) | Some(ITEM_LIST) => {\n+                self.is_new_item = true;\n+                return;\n+            }\n+            _ => (),\n+        }\n+\n         let parent = match name_ref.syntax().parent() {\n             Some(it) => it,\n             None => return,"}, {"sha": "d0a6ec19e3c3a5350168756bb818c4650b3d258d", "filename": "crates/ra_analysis/src/completion/complete_keyword.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cbe67339df2bbcb17e12ad74e8b8cd53baffb9f7/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe67339df2bbcb17e12ad74e8b8cd53baffb9f7/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=cbe67339df2bbcb17e12ad74e8b8cd53baffb9f7", "previous_filename": "crates/ra_analysis/src/completion/complete_keywords.rs"}, {"sha": "5d6cc5dc9a7056437d131650bc7636fd42e58b77", "filename": "crates/ra_analysis/src/completion/complete_snippet.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/cbe67339df2bbcb17e12ad74e8b8cd53baffb9f7/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe67339df2bbcb17e12ad74e8b8cd53baffb9f7/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs?ref=cbe67339df2bbcb17e12ad74e8b8cd53baffb9f7", "patch": "@@ -0,0 +1,78 @@\n+use crate::{\n+    completion::{CompletionItem, Completions, CompletionKind::*, SyntaxContext},\n+};\n+\n+pub(super) fn complete_expr_snippet(acc: &mut Completions, ctx: &SyntaxContext) {\n+    if !(ctx.is_trivial_path && ctx.enclosing_fn.is_some()) {\n+        return;\n+    }\n+    CompletionItem::new(\"pd\")\n+        .snippet(\"eprintln!(\\\"$0 = {:?}\\\", $0);\")\n+        .kind(Snippet)\n+        .add_to(acc);\n+    CompletionItem::new(\"ppd\")\n+        .snippet(\"eprintln!(\\\"$0 = {:#?}\\\", $0);\")\n+        .kind(Snippet)\n+        .add_to(acc);\n+}\n+\n+pub(super) fn complete_item_snippet(acc: &mut Completions, ctx: &SyntaxContext) {\n+    if !ctx.is_new_item {\n+        return;\n+    }\n+    CompletionItem::new(\"Test function\")\n+        .lookup_by(\"tfn\")\n+        .snippet(\n+            \"\\\n+#[test]\n+fn ${1:feature}() {\n+    $0\n+}\",\n+        )\n+        .kind(Snippet)\n+        .add_to(acc);\n+    CompletionItem::new(\"pub(crate)\")\n+        .snippet(\"pub(crate) $0\")\n+        .kind(Snippet)\n+        .add_to(acc);\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::completion::{CompletionKind, check_completion};\n+    fn check_snippet_completion(code: &str, expected_completions: &str) {\n+        check_completion(code, expected_completions, CompletionKind::Snippet);\n+    }\n+\n+    #[test]\n+    fn completes_snippets_in_expressions() {\n+        check_snippet_completion(\n+            r\"fn foo(x: i32) { <|> }\",\n+            r##\"\n+            pd \"eprintln!(\\\"$0 = {:?}\\\", $0);\"\n+            ppd \"eprintln!(\\\"$0 = {:#?}\\\", $0);\"\n+            \"##,\n+        );\n+    }\n+\n+    #[test]\n+    fn completes_snippets_in_items() {\n+        // check_snippet_completion(r\"\n+        //     <|>\n+        //     \",\n+        //     r##\"[CompletionItem { label: \"Test function\", lookup: None, snippet: Some(\"#[test]\\nfn test_${1:feature}() {\\n$0\\n}\"##,\n+        // );\n+        check_snippet_completion(\n+            r\"\n+            #[cfg(test)]\n+            mod tests {\n+                <|>\n+            }\n+            \",\n+            r##\"\n+            tfn \"Test function\" \"#[test]\\nfn ${1:feature}() {\\n    $0\\n}\"\n+            pub(crate) \"pub(crate) $0\"\n+            \"##,\n+        );\n+    }\n+}"}, {"sha": "46d3819277fcd7112ae17d972f915b48a53cc28b", "filename": "crates/ra_analysis/src/completion/reference_completion.rs", "status": "modified", "additions": 1, "deletions": 81, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/cbe67339df2bbcb17e12ad74e8b8cd53baffb9f7/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe67339df2bbcb17e12ad74e8b8cd53baffb9f7/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs?ref=cbe67339df2bbcb17e12ad74e8b8cd53baffb9f7", "patch": "@@ -32,8 +32,6 @@ pub(super) fn completions(\n             if let Some(fn_def) = enclosing_fn {\n                 let scopes = FnScopes::new(fn_def);\n                 complete_fn(name_ref, &scopes, acc);\n-                // complete_expr_keywords(&file, fn_def, name_ref, acc);\n-                complete_expr_snippets(acc);\n             }\n \n             let module_scope = module.scope(db)?;\n@@ -56,19 +54,7 @@ pub(super) fn completions(\n                 });\n         }\n         NameRefKind::Path(path) => complete_path(acc, db, module, path)?,\n-        NameRefKind::BareIdentInMod => {\n-            let name_range = name_ref.syntax().range();\n-            let top_node = name_ref\n-                .syntax()\n-                .ancestors()\n-                .take_while(|it| it.range() == name_range)\n-                .last()\n-                .unwrap();\n-            match top_node.parent().map(|it| it.kind()) {\n-                Some(SOURCE_FILE) | Some(ITEM_LIST) => complete_mod_item_snippets(acc),\n-                _ => (),\n-            }\n-        }\n+        NameRefKind::BareIdentInMod => (),\n     }\n     Ok(())\n }\n@@ -162,35 +148,6 @@ fn complete_path(\n     Ok(())\n }\n \n-fn complete_mod_item_snippets(acc: &mut Completions) {\n-    CompletionItem::new(\"Test function\")\n-        .lookup_by(\"tfn\")\n-        .snippet(\n-            \"\\\n-#[test]\n-fn ${1:feature}() {\n-    $0\n-}\",\n-        )\n-        .kind(Snippet)\n-        .add_to(acc);\n-    CompletionItem::new(\"pub(crate)\")\n-        .snippet(\"pub(crate) $0\")\n-        .kind(Snippet)\n-        .add_to(acc);\n-}\n-\n-fn complete_expr_snippets(acc: &mut Completions) {\n-    CompletionItem::new(\"pd\")\n-        .snippet(\"eprintln!(\\\"$0 = {:?}\\\", $0);\")\n-        .kind(Snippet)\n-        .add_to(acc);\n-    CompletionItem::new(\"ppd\")\n-        .snippet(\"eprintln!(\\\"$0 = {:#?}\\\", $0);\")\n-        .kind(Snippet)\n-        .add_to(acc);\n-}\n-\n #[cfg(test)]\n mod tests {\n     use crate::completion::{CompletionKind, check_completion};\n@@ -199,10 +156,6 @@ mod tests {\n         check_completion(code, expected_completions, CompletionKind::Reference);\n     }\n \n-    fn check_snippet_completion(code: &str, expected_completions: &str) {\n-        check_completion(code, expected_completions, CompletionKind::Snippet);\n-    }\n-\n     #[test]\n     fn test_completion_let_scope() {\n         check_reference_completion(\n@@ -378,37 +331,4 @@ mod tests {\n             \"Spam\",\n         );\n     }\n-\n-    #[test]\n-    fn completes_snippets_in_expressions() {\n-        check_snippet_completion(\n-            r\"fn foo(x: i32) { <|> }\",\n-            r##\"\n-            pd \"eprintln!(\\\"$0 = {:?}\\\", $0);\"\n-            ppd \"eprintln!(\\\"$0 = {:#?}\\\", $0);\"\n-            \"##,\n-        );\n-    }\n-\n-    #[test]\n-    fn completes_snippets_in_items() {\n-        // check_snippet_completion(r\"\n-        //     <|>\n-        //     \",\n-        //     r##\"[CompletionItem { label: \"Test function\", lookup: None, snippet: Some(\"#[test]\\nfn test_${1:feature}() {\\n$0\\n}\"##,\n-        // );\n-        check_snippet_completion(\n-            r\"\n-            #[cfg(test)]\n-            mod tests {\n-                <|>\n-            }\n-            \",\n-            r##\"\n-            tfn \"Test function\" \"#[test]\\nfn ${1:feature}() {\\n    $0\\n}\"\n-            pub(crate) \"pub(crate) $0\"\n-            \"##,\n-        );\n-    }\n-\n }"}]}