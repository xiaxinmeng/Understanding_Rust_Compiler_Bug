{"sha": "0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNWI1MmU0YThkMzAwNGVmMmQ2OWIyZWM3ZjQxMGQ0YjJjOTQ5NGM=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-03-22T01:32:44Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-03-26T08:43:03Z"}, "message": "Stabilize conservative_impl_trait", "tree": {"sha": "817fd01d71545cf02b1d662698fcf07aa0c68b19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/817fd01d71545cf02b1d662698fcf07aa0c68b19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "html_url": "https://github.com/rust-lang/rust/commit/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c393db67baf3a15ec61351ffb0e3811e07b8a467", "url": "https://api.github.com/repos/rust-lang/rust/commits/c393db67baf3a15ec61351ffb0e3811e07b8a467", "html_url": "https://github.com/rust-lang/rust/commit/c393db67baf3a15ec61351ffb0e3811e07b8a467"}], "stats": {"total": 302, "additions": 62, "deletions": 240}, "files": [{"sha": "c45f18360b9bd99f08e8506eb157e95127413875", "filename": "src/Cargo.lock", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -271,11 +271,11 @@ dependencies = [\n \n [[package]]\n name = \"clippy\"\n-version = \"0.0.188\"\n+version = \"0.0.189\"\n dependencies = [\n  \"cargo_metadata 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clippy-mini-macro-test 0.2.0\",\n- \"clippy_lints 0.0.188\",\n+ \"clippy_lints 0.0.189\",\n  \"compiletest_rs 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"derive-new 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -289,29 +289,9 @@ dependencies = [\n name = \"clippy-mini-macro-test\"\n version = \"0.2.0\"\n \n-[[package]]\n-name = \"clippy_lints\"\n-version = \"0.0.188\"\n-dependencies = [\n- \"if_chain 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itertools 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quine-mc_cluskey 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex-syntax 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-normalization 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 1.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"clippy_lints\"\n version = \"0.0.189\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"if_chain 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1419,7 +1399,7 @@ version = \"0.126.0\"\n dependencies = [\n  \"cargo 0.27.0\",\n  \"cargo_metadata 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"clippy_lints 0.0.189 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clippy_lints 0.0.189\",\n  \"env_logger 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"json 0.11.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2638,7 +2618,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n \"checksum chrono 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7c20ebe0b2b08b0aeddba49c609fe7957ba2e33449882cb186a180bc60682fa9\"\n \"checksum clap 2.31.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f0f16b89cbb9ee36d87483dc939fe9f1e13c05898d56d7b230a0d4dff033a536\"\n-\"checksum clippy_lints 0.0.189 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fef652630bbf8c5e89601220abd000f5057e8fa9db608484b5ebaad98e9bce53\"\n \"checksum cmake 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\" = \"56d741ea7a69e577f6d06b36b7dff4738f680593dc27a701ffa8506b73ce28bb\"\n \"checksum commoncrypto 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d056a8586ba25a1e4d61cb090900e495952c7886786fc55f909ab2f819b69007\"\n \"checksum commoncrypto-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1fed34f46747aa73dfaa578069fd8279d2818ade2b55f38f22a9401c7f4083e2\""}, {"sha": "0be6a321103f0858b9e0d70981b6a6414e72a47c", "filename": "src/doc/unstable-book/src/language-features/conservative-impl-trait.md", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c393db67baf3a15ec61351ffb0e3811e07b8a467/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconservative-impl-trait.md", "raw_url": "https://github.com/rust-lang/rust/raw/c393db67baf3a15ec61351ffb0e3811e07b8a467/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconservative-impl-trait.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconservative-impl-trait.md?ref=c393db67baf3a15ec61351ffb0e3811e07b8a467", "patch": "@@ -1,66 +0,0 @@\n-# `conservative_impl_trait`\n-\n-The tracking issue for this feature is: [#34511]\n-\n-[#34511]: https://github.com/rust-lang/rust/issues/34511\n-\n-------------------------\n-\n-The `conservative_impl_trait` feature allows a conservative form of abstract\n-return types.\n-\n-Abstract return types allow a function to hide a concrete return type behind a\n-trait interface similar to trait objects, while still generating the same\n-statically dispatched code as with concrete types.\n-\n-## Examples\n-\n-```rust\n-#![feature(conservative_impl_trait)]\n-\n-fn even_iter() -> impl Iterator<Item=u32> {\n-    (0..).map(|n| n * 2)\n-}\n-\n-fn main() {\n-    let first_four_even_numbers = even_iter().take(4).collect::<Vec<_>>();\n-    assert_eq!(first_four_even_numbers, vec![0, 2, 4, 6]);\n-}\n-```\n-\n-## Background\n-\n-In today's Rust, you can write function signatures like:\n-\n-````rust,ignore\n-fn consume_iter_static<I: Iterator<Item=u8>>(iter: I) { }\n-\n-fn consume_iter_dynamic(iter: Box<Iterator<Item=u8>>) { }\n-````\n-\n-In both cases, the function does not depend on the exact type of the argument.\n-The type held is \"abstract\", and is assumed only to satisfy a trait bound.\n-\n-* In the `_static` version using generics, each use of the function is\n-  specialized to a concrete, statically-known type, giving static dispatch,\n-  inline layout, and other performance wins.\n-* In the `_dynamic` version using trait objects, the concrete argument type is\n-  only known at runtime using a vtable.\n-\n-On the other hand, while you can write:\n-\n-````rust,ignore\n-fn produce_iter_dynamic() -> Box<Iterator<Item=u8>> { }\n-````\n-\n-...but you _cannot_ write something like:\n-\n-````rust,ignore\n-fn produce_iter_static() -> Iterator<Item=u8> { }\n-````\n-\n-That is, in today's Rust, abstract return types can only be written using trait\n-objects, which can be a significant performance penalty. This RFC proposes\n-\"unboxed abstract types\" as a way of achieving signatures like\n-`produce_iter_static`. Like generics, unboxed abstract types guarantee static\n-dispatch and inline data layout."}, {"sha": "1c71669abb16b20f2f490bb6f721b029e3bba91a", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -27,7 +27,7 @@\n #![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(iterator_try_fold)]\n #![feature(iterator_flatten)]\n-#![feature(conservative_impl_trait)]\n+#![cfg_attr(stage0, feature(conservative_impl_trait))]\n #![feature(iter_rfind)]\n #![feature(iter_rfold)]\n #![feature(iterator_repeat_with)]"}, {"sha": "f95c355012a213354dc64f1493767cee611b9d6b", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -1789,8 +1789,6 @@ allowed as function return types.\n Erroneous code example:\n \n ```compile_fail,E0562\n-#![feature(conservative_impl_trait)]\n-\n fn main() {\n     let count_to_ten: impl Iterator<Item=usize> = 0..10;\n     // error: `impl Trait` not allowed outside of function and inherent method\n@@ -1804,8 +1802,6 @@ fn main() {\n Make sure `impl Trait` only appears in return-type position.\n \n ```\n-#![feature(conservative_impl_trait)]\n-\n fn count_to_n(n: usize) -> impl Iterator<Item=usize> {\n     0..n\n }\n@@ -2081,8 +2077,6 @@ appear within the `impl Trait` itself.\n Erroneous code example:\n \n ```compile-fail,E0909\n-#![feature(conservative_impl_trait)]\n-\n use std::cell::Cell;\n \n trait Trait<'a> { }\n@@ -2109,8 +2103,6 @@ type. For example, changing the return type to `impl Trait<'y> + 'x`\n would work:\n \n ```\n-#![feature(conservative_impl_trait)]\n-\n use std::cell::Cell;\n \n trait Trait<'a> { }"}, {"sha": "536d682566a720c636359416d1d52887309b4052", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -1108,20 +1108,9 @@ impl<'a> LoweringContext<'a> {\n                 hir::TyTraitObject(bounds, lifetime_bound)\n             }\n             TyKind::ImplTrait(ref bounds) => {\n-                use syntax::feature_gate::{emit_feature_err, GateIssue};\n                 let span = t.span;\n                 match itctx {\n                     ImplTraitContext::Existential => {\n-                        let has_feature = self.sess.features_untracked().conservative_impl_trait;\n-                        if !t.span.allows_unstable() && !has_feature {\n-                            emit_feature_err(\n-                                &self.sess.parse_sess,\n-                                \"conservative_impl_trait\",\n-                                t.span,\n-                                GateIssue::Language,\n-                                \"`impl Trait` in return position is experimental\",\n-                            );\n-                        }\n                         let def_index = self.resolver.definitions().opt_def_index(t.id).unwrap();\n                         let hir_bounds = self.lower_bounds(bounds, itctx);\n                         let (lifetimes, lifetime_defs) ="}, {"sha": "1bb903c0627b05d2c98c597b3357078f10cf58d0", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -43,7 +43,7 @@\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(conservative_impl_trait)]\n+#![cfg_attr(stage0, feature(conservative_impl_trait))]\n #![feature(const_fn)]\n #![cfg_attr(stage0, feature(copy_closures, clone_closures))]\n #![feature(core_intrinsics)]"}, {"sha": "ff8690728713a6b439a8169f947c9a824cb8f697", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -28,7 +28,7 @@\n #![feature(unsize)]\n #![feature(i128_type)]\n #![feature(i128)]\n-#![feature(conservative_impl_trait)]\n+#![cfg_attr(stage0, feature(conservative_impl_trait))]\n #![feature(specialization)]\n #![feature(optin_builtin_traits)]\n #![feature(underscore_lifetimes)]"}, {"sha": "1152c9c574eccc6a8f51f07b13a74c708d5b140b", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -17,7 +17,7 @@\n #![allow(unused_attributes)]\n #![feature(range_contains)]\n #![cfg_attr(unix, feature(libc))]\n-#![feature(conservative_impl_trait)]\n+#![cfg_attr(stage0, feature(conservative_impl_trait))]\n #![feature(i128_type)]\n #![feature(optin_builtin_traits)]\n "}, {"sha": "6adb950fe4efc5074cedae7705af582ecee2c9e1", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -15,7 +15,7 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![deny(warnings)]\n \n-#![feature(conservative_impl_trait)]\n+#![cfg_attr(stage0, feature(conservative_impl_trait))]\n #![feature(fs_read_write)]\n #![feature(i128_type)]\n #![cfg_attr(stage0, feature(inclusive_range_syntax))]"}, {"sha": "902dd87c57435930ec3644fb66916bcebda63b39", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -14,7 +14,7 @@\n #![deny(warnings)]\n \n #![feature(box_patterns)]\n-#![feature(conservative_impl_trait)]\n+#![cfg_attr(stage0, feature(conservative_impl_trait))]\n #![feature(fs_read_write)]\n #![feature(i128_type)]\n #![feature(libc)]"}, {"sha": "750839f8b0014024cde74b3abc473e395a0010b8", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -21,7 +21,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(catch_expr)]\n-#![feature(conservative_impl_trait)]\n+#![cfg_attr(stage0, feature(conservative_impl_trait))]\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n #![feature(decl_macro)]"}, {"sha": "38adc603628e20ae2775f353530860f2771498a8", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -31,7 +31,7 @@\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![cfg_attr(stage0, feature(slice_patterns))]\n-#![feature(conservative_impl_trait)]\n+#![cfg_attr(stage0, feature(conservative_impl_trait))]\n #![feature(optin_builtin_traits)]\n #![feature(inclusive_range_fields)]\n "}, {"sha": "9e4addd1ed1b3d693e9731d73f3adebf25f2cf30", "filename": "src/librustc_trans_utils/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibrustc_trans_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibrustc_trans_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flib.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -24,7 +24,7 @@\n #![feature(i128_type)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(conservative_impl_trait)]\n+#![cfg_attr(stage0, feature(conservative_impl_trait))]\n \n extern crate ar;\n extern crate flate2;"}, {"sha": "e466ef392348674d83a6a2f4bd60115274faf2a1", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -75,7 +75,7 @@ This API is completely unstable and subject to change.\n #![cfg_attr(stage0, feature(advanced_slice_patterns))]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(conservative_impl_trait)]\n+#![cfg_attr(stage0, feature(conservative_impl_trait))]\n #![cfg_attr(stage0, feature(copy_closures, clone_closures))]\n #![feature(crate_visibility_modifier)]\n #![feature(from_ref)]"}, {"sha": "1bb369b551dbce766785db0846700d46b75b1a13", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -276,9 +276,6 @@ declare_features! (\n     // Allows cfg(target_has_atomic = \"...\").\n     (active, cfg_target_has_atomic, \"1.9.0\", Some(32976), None),\n \n-    // Allows `impl Trait` in function return types.\n-    (active, conservative_impl_trait, \"1.12.0\", Some(34511), None),\n-\n     // Allows exhaustive pattern matching on types that contain uninhabited types.\n     (active, exhaustive_patterns, \"1.13.0\", None, None),\n \n@@ -565,6 +562,8 @@ declare_features! (\n     (accepted, copy_closures, \"1.26.0\", Some(44490), None),\n     // Allows `impl Trait` in function arguments.\n     (accepted, universal_impl_trait, \"1.26.0\", Some(34511), None),\n+    // Allows `impl Trait` in function return types.\n+    (accepted, conservative_impl_trait, \"1.26.0\", Some(34511), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must"}, {"sha": "30895bce357bb8f47698af2be6715f22e9326455", "filename": "src/test/compile-fail/conservative_impl_trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fconservative_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fconservative_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconservative_impl_trait.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -10,7 +10,6 @@\n \n // #39872, #39553\n \n-#![feature(conservative_impl_trait)]\n fn will_ice(something: &u32) -> impl Iterator<Item = &u32> {\n     //~^ ERROR the trait bound `(): std::iter::Iterator` is not satisfied [E0277]\n }"}, {"sha": "653ef1723e0b6ccc6db2228217652aa563ed4f64", "filename": "src/test/compile-fail/impl-trait/infinite-impl-trait-issue-38064.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Finfinite-impl-trait-issue-38064.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Finfinite-impl-trait-issue-38064.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Finfinite-impl-trait-issue-38064.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -15,8 +15,6 @@\n \n // error-pattern:overflow evaluating the requirement `impl Quux`\n \n-#![feature(conservative_impl_trait)]\n-\n trait Quux {}\n \n fn foo() -> impl Quux {"}, {"sha": "537fc975bcf92c03e4dca7be13a17abf1f3651a0", "filename": "src/test/compile-fail/impl-trait/must_outlive_least_region_or_bound.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait)]\n-\n use std::fmt::Debug;\n \n fn elided(x: &i32) -> impl Copy { x }"}, {"sha": "6c0a0b800ce334cdbbf0afb7b2ebd6124b81e047", "filename": "src/test/compile-fail/impl-trait/needs_least_region_or_bound.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fneeds_least_region_or_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fneeds_least_region_or_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fneeds_least_region_or_bound.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait)]\n-\n use std::fmt::Debug;\n \n trait MultiRegionTrait<'a, 'b> {}"}, {"sha": "5299ba297d0a628a314ae62c307c7340810c4ca3", "filename": "src/test/compile-fail/impl-trait/no-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fno-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fno-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fno-trait.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait)]\n-\n fn f() -> impl 'static {} //~ ERROR at least one trait must be specified\n \n fn main() {}"}, {"sha": "7c3430ab90e5279a0d89be65a65835c1771491e0", "filename": "src/test/compile-fail/impl-trait/type_parameters_captured.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Ftype_parameters_captured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Ftype_parameters_captured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Ftype_parameters_captured.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait)]\n-\n use std::fmt::Debug;\n \n trait Any {}"}, {"sha": "038eacaf1103ef31aa322f8abdee4a5fc5ac2da1", "filename": "src/test/compile-fail/impl-trait/where-allowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -10,7 +10,7 @@\n \n //! A simple test for testing many permutations of allowedness of\n //! impl Trait\n-#![feature(conservative_impl_trait, dyn_trait)]\n+#![feature(dyn_trait)]\n use std::fmt::Debug;\n \n // Allowed"}, {"sha": "18424fcc9e0afd151698925ad56162f0a98dcc21", "filename": "src/test/compile-fail/issue-32995-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fissue-32995-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fissue-32995-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32995-2.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait)]\n #![allow(unused)]\n \n fn main() {"}, {"sha": "17fd77b6df3a2add83cb216bc1824516c4e79d0f", "filename": "src/test/compile-fail/issue-35668.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fissue-35668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fissue-35668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-35668.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait)]\n-\n fn func<'a, T>(a: &'a [T]) -> impl Iterator<Item=&'a T> {\n     a.iter().map(|a| a*a)\n     //~^ ERROR binary operation `*` cannot be applied to type `&T`"}, {"sha": "b20765815e0b2e10aa2cb3b126c7edbbdd9f2587", "filename": "src/test/compile-fail/issue-36379.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fissue-36379.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fissue-36379.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-36379.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait, rustc_attrs)]\n+#![feature(rustc_attrs)]\n \n fn _test() -> impl Default { }\n "}, {"sha": "5af8b063c1629f12e0fb6c3f348337b1bef51357", "filename": "src/test/compile-fail/private-inferred-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![feature(associated_consts)]\n-#![feature(conservative_impl_trait)]\n #![feature(decl_macro)]\n #![allow(private_in_public)]\n "}, {"sha": "1842790a1405faef0c81ebe26214e07f98beee46", "filename": "src/test/compile-fail/private-type-in-interface.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fprivate-type-in-interface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fcompile-fail%2Fprivate-type-in-interface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-type-in-interface.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:private-inferred-type.rs\n \n-#![feature(conservative_impl_trait)]\n #![allow(warnings)]\n \n extern crate private_inferred_type as ext;"}, {"sha": "6c4e11be1e43e3e5757ff30b917490250a86b4d5", "filename": "src/test/incremental/hashes/function_interfaces.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -22,7 +22,6 @@\n \n \n #![allow(warnings)]\n-#![feature(conservative_impl_trait)]\n #![feature(intrinsics)]\n #![feature(linkage)]\n #![feature(rustc_attrs)]"}, {"sha": "14e1ca612c087b1aa8acc1b76ac57f8959cf2a36", "filename": "src/test/run-pass/conservative_impl_trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fconservative_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fconservative_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconservative_impl_trait.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -10,8 +10,6 @@\n \n // #39665\n \n-#![feature(conservative_impl_trait)]\n-\n fn batches(n: &u32) -> impl Iterator<Item=&u32> {\n     std::iter::once(n)\n }"}, {"sha": "91e43537cc21d24a7d6c3c156a6e5a8f9be6d921", "filename": "src/test/run-pass/generator/auxiliary/xcrate-reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fgenerator%2Fauxiliary%2Fxcrate-reachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fgenerator%2Fauxiliary%2Fxcrate-reachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fauxiliary%2Fxcrate-reachable.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait, generators, generator_trait)]\n+#![feature(generators, generator_trait)]\n \n use std::ops::Generator;\n "}, {"sha": "fcfe0b754b68cc40d844293c3d637d95a3bf2b74", "filename": "src/test/run-pass/generator/auxiliary/xcrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fgenerator%2Fauxiliary%2Fxcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fgenerator%2Fauxiliary%2Fxcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fauxiliary%2Fxcrate.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(generators, generator_trait, conservative_impl_trait)]\n+#![feature(generators, generator_trait)]\n \n use std::ops::Generator;\n "}, {"sha": "272b7eb7bfdd0f78ecef9991d362e29be576183d", "filename": "src/test/run-pass/generator/issue-44197.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fgenerator%2Fissue-44197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fgenerator%2Fissue-44197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fissue-44197.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait, generators, generator_trait)]\n+#![feature(generators, generator_trait)]\n \n use std::ops::{ Generator, GeneratorState };\n "}, {"sha": "3564ddaa8068e8679783a0808fe709f788464197", "filename": "src/test/run-pass/generator/iterator-count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fgenerator%2Fiterator-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fgenerator%2Fiterator-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fiterator-count.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(generators, generator_trait, conservative_impl_trait)]\n+#![feature(generators, generator_trait)]\n \n use std::ops::{GeneratorState, Generator};\n "}, {"sha": "2fc39ba186916dbf76dc2b4d6f64fcf76c21476b", "filename": "src/test/run-pass/generator/xcrate-reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fgenerator%2Fxcrate-reachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fgenerator%2Fxcrate-reachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fxcrate-reachable.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:xcrate-reachable.rs\n \n-#![feature(conservative_impl_trait, generator_trait)]\n+#![feature(generator_trait)]\n \n extern crate xcrate_reachable as foo;\n "}, {"sha": "62fbae7b40c03af842e80ac78555d6e54d7a8a92", "filename": "src/test/run-pass/impl-trait/auto-trait-leak.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fauto-trait-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fauto-trait-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fauto-trait-leak.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait)]\n-\n // Fast path, main can see the concrete type returned.\n fn before() -> impl FnMut(i32) {\n     let mut p = Box::new(0);"}, {"sha": "c27a2dd89d52473584e980064b357d59a204e218", "filename": "src/test/run-pass/impl-trait/auxiliary/xcrate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fauxiliary%2Fxcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fauxiliary%2Fxcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fauxiliary%2Fxcrate.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait)]\n-\n // NOTE commented out due to issue #45994\n //pub fn fourway_add(a: i32) -> impl Fn(i32) -> impl Fn(i32) -> impl Fn(i32) -> i32 {\n //    move |b| move |c| move |d| a + b + c + d"}, {"sha": "034d3d7c80f3611ecf9da60af25747a8e008bb1b", "filename": "src/test/run-pass/impl-trait/equality.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fequality.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait, specialization)]\n+#![feature(specialization)]\n \n trait Foo: std::fmt::Debug + Eq {}\n "}, {"sha": "b1db203071788cce72e3acf9e271c41897cdea06", "filename": "src/test/run-pass/impl-trait/example-calendar.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -11,8 +11,7 @@\n // revisions: normal nll\n //[nll] compile-flags: -Znll -Zborrowck=mir\n \n-#![feature(conservative_impl_trait,\n-           fn_traits,\n+#![feature(fn_traits,\n            step_trait,\n            unboxed_closures,\n            copy_closures,"}, {"sha": "a06bde7f532d3ccab60ca533529d4580e8932215", "filename": "src/test/run-pass/impl-trait/example-st.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-st.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-st.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-st.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait)]\n-\n struct State;\n type Error = ();\n "}, {"sha": "df7a6c1309220b493fbe115ee02623d2ba399520", "filename": "src/test/run-pass/impl-trait/issue-42479.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fissue-42479.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fissue-42479.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fissue-42479.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait)]\n-\n use std::iter::once;\n \n struct Foo {"}, {"sha": "1b50ceefbe1ae068c53b9d21db00a996b2dae6b5", "filename": "src/test/run-pass/impl-trait/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait, underscore_lifetimes)]\n+#![feature(underscore_lifetimes)]\n #![allow(warnings)]\n \n use std::fmt::Debug;"}, {"sha": "6edd0d686eff89838aa0284a1f2dc989fbf62ff4", "filename": "src/test/run-pass/in-band-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fin-band-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fin-band-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fin-band-lifetimes.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(warnings)]\n-#![feature(in_band_lifetimes, conservative_impl_trait)]\n+#![feature(in_band_lifetimes)]\n \n fn foo(x: &'x u8) -> &'x u8 { x }\n fn foo2(x: &'a u8, y: &u8) -> &'a u8 { x }"}, {"sha": "f2755ec3f84666d8757d2e199b44754287bcc1ef", "filename": "src/test/run-pass/issue-36792.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fissue-36792.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fissue-36792.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-36792.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait)]\n fn foo() -> impl Copy {\n     foo\n }"}, {"sha": "7f050c055b0ced7a03d39d97cebee3feb34b5952", "filename": "src/test/run-pass/issue-46959.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fissue-46959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frun-pass%2Fissue-46959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-46959.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait)]\n #![deny(non_camel_case_types)]\n \n #[allow(dead_code)]"}, {"sha": "a5ed3d892ce9263be755c38df79869189c3753bb", "filename": "src/test/rustdoc/issue-43869.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frustdoc%2Fissue-43869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Frustdoc%2Fissue-43869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-43869.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait)]\n-\n pub fn g() -> impl Iterator<Item=u8> {\n     Some(1u8).into_iter()\n }"}, {"sha": "05a03d3b17961772ca1eb24fc52a71fb672876f2", "filename": "src/test/ui/casts-differing-anon.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fcasts-differing-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fcasts-differing-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcasts-differing-anon.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait)]\n-\n use std::fmt;\n \n fn foo() -> Box<impl fmt::Debug+?Sized> {"}, {"sha": "dac24af671cf1586ec46575534ca4c5fb53584c8", "filename": "src/test/ui/casts-differing-anon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fcasts-differing-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fcasts-differing-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcasts-differing-anon.stderr?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -1,5 +1,5 @@\n error[E0606]: casting `*mut impl std::fmt::Debug+?Sized` as `*mut impl std::fmt::Debug+?Sized` is invalid\n-  --> $DIR/casts-differing-anon.rs:33:13\n+  --> $DIR/casts-differing-anon.rs:31:13\n    |\n LL |     b_raw = f_raw as *mut _; //~ ERROR is invalid\n    |             ^^^^^^^^^^^^^^^"}, {"sha": "c23aa40ee3790d54a055fb2e5177f454bcd5eac6", "filename": "src/test/ui/error-codes/E0657.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Ferror-codes%2FE0657.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Ferror-codes%2FE0657.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0657.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n #![allow(warnings)]\n-#![feature(conservative_impl_trait)]\n \n trait Id<T> {}\n trait Lt<'a> {}"}, {"sha": "737ae3a163ac20c219e2ed3db3929f9a4f184aae", "filename": "src/test/ui/error-codes/E0657.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -1,11 +1,11 @@\n error[E0657]: `impl Trait` can only capture lifetimes bound at the fn or impl level\n-  --> $DIR/E0657.rs:20:31\n+  --> $DIR/E0657.rs:19:31\n    |\n LL |     -> Box<for<'a> Id<impl Lt<'a>>>\n    |                               ^^\n \n error[E0657]: `impl Trait` can only capture lifetimes bound at the fn or impl level\n-  --> $DIR/E0657.rs:29:35\n+  --> $DIR/E0657.rs:28:35\n    |\n LL |         -> Box<for<'a> Id<impl Lt<'a>>>\n    |                                   ^^"}, {"sha": "7a3ae639bfc8927ddddcc13207fa423dd535d40f", "filename": "src/test/ui/feature-gate-conservative_impl_trait.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c393db67baf3a15ec61351ffb0e3811e07b8a467/src%2Ftest%2Fui%2Ffeature-gate-conservative_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c393db67baf3a15ec61351ffb0e3811e07b8a467/src%2Ftest%2Fui%2Ffeature-gate-conservative_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-conservative_impl_trait.rs?ref=c393db67baf3a15ec61351ffb0e3811e07b8a467", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn foo() -> impl Fn() { || {} }\n-//~^ ERROR `impl Trait` in return position is experimental\n-\n-fn main() {}"}, {"sha": "5400226450bfc36224b6e3a9913fce854394978f", "filename": "src/test/ui/feature-gate-conservative_impl_trait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c393db67baf3a15ec61351ffb0e3811e07b8a467/src%2Ftest%2Fui%2Ffeature-gate-conservative_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c393db67baf3a15ec61351ffb0e3811e07b8a467/src%2Ftest%2Fui%2Ffeature-gate-conservative_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-conservative_impl_trait.stderr?ref=c393db67baf3a15ec61351ffb0e3811e07b8a467", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: `impl Trait` in return position is experimental (see issue #34511)\n-  --> $DIR/feature-gate-conservative_impl_trait.rs:11:13\n-   |\n-LL | fn foo() -> impl Fn() { || {} }\n-   |             ^^^^^^^^^\n-   |\n-   = help: add #![feature(conservative_impl_trait)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "99a7dd5e7852b22caa618ac8a78e3ec1a79faee6", "filename": "src/test/ui/impl-trait/auto-trait-leak.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-tidy-linelength\n \n-#![feature(conservative_impl_trait)]\n-\n use std::cell::Cell;\n use std::rc::Rc;\n "}, {"sha": "ca639f1076d3c814ff082ff765d47e81e38c1390", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -1,56 +1,56 @@\n error[E0277]: the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied in `impl std::ops::Fn<(i32,)>`\n-  --> $DIR/auto-trait-leak.rs:27:5\n+  --> $DIR/auto-trait-leak.rs:25:5\n    |\n LL |     send(before());\n    |     ^^^^ `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n    |\n    = help: within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n-   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak.rs:21:5: 21:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n+   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak.rs:19:5: 19:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n    = note: required because it appears within the type `impl std::ops::Fn<(i32,)>`\n note: required by `send`\n-  --> $DIR/auto-trait-leak.rs:24:1\n+  --> $DIR/auto-trait-leak.rs:22:1\n    |\n LL | fn send<T: Send>(_: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied in `impl std::ops::Fn<(i32,)>`\n-  --> $DIR/auto-trait-leak.rs:30:5\n+  --> $DIR/auto-trait-leak.rs:28:5\n    |\n LL |     send(after());\n    |     ^^^^ `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n    |\n    = help: within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n-   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak.rs:38:5: 38:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n+   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak.rs:36:5: 36:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n    = note: required because it appears within the type `impl std::ops::Fn<(i32,)>`\n note: required by `send`\n-  --> $DIR/auto-trait-leak.rs:24:1\n+  --> $DIR/auto-trait-leak.rs:22:1\n    |\n LL | fn send<T: Send>(_: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0391]: cyclic dependency detected\n-  --> $DIR/auto-trait-leak.rs:44:1\n+  --> $DIR/auto-trait-leak.rs:42:1\n    |\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic reference\n    |\n note: the cycle begins when processing `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:44:1\n+  --> $DIR/auto-trait-leak.rs:42:1\n    |\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which then requires processing `cycle2::{{impl-Trait}}`...\n-  --> $DIR/auto-trait-leak.rs:52:16\n+  --> $DIR/auto-trait-leak.rs:50:16\n    |\n LL | fn cycle2() -> impl Clone {\n    |                ^^^^^^^^^^\n note: ...which then requires processing `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:52:1\n+  --> $DIR/auto-trait-leak.rs:50:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which then requires processing `cycle1::{{impl-Trait}}`...\n-  --> $DIR/auto-trait-leak.rs:44:16\n+  --> $DIR/auto-trait-leak.rs:42:16\n    |\n LL | fn cycle1() -> impl Clone {\n    |                ^^^^^^^^^^"}, {"sha": "b65e477f21f9002ccd62ba3314a34d207d1ddb77", "filename": "src/test/ui/impl-trait/equality.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait, specialization)]\n+#![feature(specialization)]\n \n trait Foo: Copy + ToString {}\n "}, {"sha": "78ae922c7512636c61e0a2c962b83d6e8597dfe3", "filename": "src/test/ui/impl-trait/region-escape-via-bound-contravariant-closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant-closure.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -18,7 +18,6 @@\n // run-pass\n \n #![allow(dead_code)]\n-#![feature(conservative_impl_trait)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n "}, {"sha": "972461c2ffd964778e476b9a4c91c65b9a59a4c5", "filename": "src/test/ui/impl-trait/region-escape-via-bound-contravariant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound-contravariant.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -18,7 +18,6 @@\n // run-pass\n \n #![allow(dead_code)]\n-#![feature(conservative_impl_trait)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n "}, {"sha": "e73f15606dc5a3551471f0ffce6caf968643e8f1", "filename": "src/test/ui/impl-trait/region-escape-via-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -14,7 +14,6 @@\n // See https://github.com/rust-lang/rust/issues/46541 for more details.\n \n #![allow(dead_code)]\n-#![feature(conservative_impl_trait)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n "}, {"sha": "4281a4c10adfa8973d1f3f4c7af39735563e3de8", "filename": "src/test/ui/impl-trait/region-escape-via-bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -1,11 +1,11 @@\n error[E0909]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/region-escape-via-bound.rs:27:29\n+  --> $DIR/region-escape-via-bound.rs:26:29\n    |\n LL | fn foo(x: Cell<&'x u32>) -> impl Trait<'y>\n    |                             ^^^^^^^^^^^^^^\n    |\n-note: hidden type `std::cell::Cell<&'x u32>` captures the lifetime 'x as defined on the function body at 27:1\n-  --> $DIR/region-escape-via-bound.rs:27:1\n+note: hidden type `std::cell::Cell<&'x u32>` captures the lifetime 'x as defined on the function body at 26:1\n+  --> $DIR/region-escape-via-bound.rs:26:1\n    |\n LL | / fn foo(x: Cell<&'x u32>) -> impl Trait<'y>\n LL | |     //~^ ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds [E0909]"}, {"sha": "6a7279422710932d85d80ce1e0403f4f0cfb1d90", "filename": "src/test/ui/impl_trait_projections.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fimpl_trait_projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fimpl_trait_projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl_trait_projections.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(dyn_trait, conservative_impl_trait)]\n+#![feature(dyn_trait)]\n \n use std::fmt::Debug;\n use std::option;"}, {"sha": "7bab22edcf68424eee191b65f168181050ffb13d", "filename": "src/test/ui/issue-35869.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fissue-35869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fissue-35869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35869.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait)]\n-\n trait Foo {\n     fn foo(_: fn(u8) -> ());\n     fn bar(_: Option<u8>);"}, {"sha": "1930dd5bbcb8e1ee4aa6e5a91054381f41e66892", "filename": "src/test/ui/issue-35869.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fissue-35869.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fissue-35869.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35869.stderr?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -1,5 +1,5 @@\n error[E0053]: method `foo` has an incompatible type for trait\n-  --> $DIR/issue-35869.rs:23:15\n+  --> $DIR/issue-35869.rs:21:15\n    |\n LL |     fn foo(_: fn(u8) -> ());\n    |               ------------ type in trait\n@@ -11,7 +11,7 @@ LL |     fn foo(_: fn(u16) -> ()) {}\n               found type `fn(fn(u16))`\n \n error[E0053]: method `bar` has an incompatible type for trait\n-  --> $DIR/issue-35869.rs:25:15\n+  --> $DIR/issue-35869.rs:23:15\n    |\n LL |     fn bar(_: Option<u8>);\n    |               ---------- type in trait\n@@ -23,7 +23,7 @@ LL |     fn bar(_: Option<u16>) {}\n               found type `fn(std::option::Option<u16>)`\n \n error[E0053]: method `baz` has an incompatible type for trait\n-  --> $DIR/issue-35869.rs:27:15\n+  --> $DIR/issue-35869.rs:25:15\n    |\n LL |     fn baz(_: (u8, u16));\n    |               --------- type in trait\n@@ -35,7 +35,7 @@ LL |     fn baz(_: (u16, u16)) {}\n               found type `fn((u16, u16))`\n \n error[E0053]: method `qux` has an incompatible type for trait\n-  --> $DIR/issue-35869.rs:29:17\n+  --> $DIR/issue-35869.rs:27:17\n    |\n LL |     fn qux() -> u8;\n    |                 -- type in trait"}, {"sha": "be0454472dd0b7d03af9c2be960b3372fe7b730b", "filename": "src/test/ui/nested_impl_trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fnested_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fnested_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnested_impl_trait.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(conservative_impl_trait)]\n-\n use std::fmt::Debug;\n \n fn fine(x: impl Into<u32>) -> impl Into<u32> { x }"}, {"sha": "ee53194e2b484700b2d6dec0da7b64dce0061429", "filename": "src/test/ui/nested_impl_trait.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fnested_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fnested_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnested_impl_trait.stderr?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -1,5 +1,5 @@\n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/nested_impl_trait.rs:16:56\n+  --> $DIR/nested_impl_trait.rs:14:56\n    |\n LL | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                              ----------^^^^^^^^^^-\n@@ -8,7 +8,7 @@ LL | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                              outer `impl Trait`\n \n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/nested_impl_trait.rs:19:42\n+  --> $DIR/nested_impl_trait.rs:17:42\n    |\n LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n    |                                ----------^^^^^^^^^^-\n@@ -17,7 +17,7 @@ LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n    |                                outer `impl Trait`\n \n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/nested_impl_trait.rs:23:37\n+  --> $DIR/nested_impl_trait.rs:21:37\n    |\n LL | fn bad_in_arg_position(_: impl Into<impl Debug>) { }\n    |                           ----------^^^^^^^^^^-\n@@ -26,7 +26,7 @@ LL | fn bad_in_arg_position(_: impl Into<impl Debug>) { }\n    |                           outer `impl Trait`\n \n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/nested_impl_trait.rs:28:44\n+  --> $DIR/nested_impl_trait.rs:26:44\n    |\n LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                  ----------^^^^^^^^^^-\n@@ -35,13 +35,13 @@ LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                  outer `impl Trait`\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/nested_impl_trait.rs:19:32\n+  --> $DIR/nested_impl_trait.rs:17:32\n    |\n LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/nested_impl_trait.rs:36:42\n+  --> $DIR/nested_impl_trait.rs:34:42\n    |\n LL | fn allowed_in_ret_type() -> impl Fn() -> impl Into<u32> {\n    |                                          ^^^^^^^^^^^^^^"}, {"sha": "571bd9fd76e86eb011759b94af1a452c73105a34", "filename": "src/test/ui/nll/ty-outlives/impl-trait-captures.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -11,7 +11,6 @@\n // compile-flags:-Znll -Zborrowck=mir -Zverbose\n \n #![allow(warnings)]\n-#![feature(conservative_impl_trait)]\n \n trait Foo<'a> {\n }"}, {"sha": "92e4f72da3a10ddb0b0ae837cce397de916c10ef", "filename": "src/test/ui/nll/ty-outlives/impl-trait-captures.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -1,11 +1,11 @@\n warning: not reporting region error due to -Znll\n-  --> $DIR/impl-trait-captures.rs:22:5\n+  --> $DIR/impl-trait-captures.rs:21:5\n    |\n LL |     x\n    |     ^\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/impl-trait-captures.rs:22:5\n+  --> $DIR/impl-trait-captures.rs:21:5\n    |\n LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n    |               - consider changing the type of `x` to `&ReEarlyBound(0, 'a) T`"}, {"sha": "2e0671f1a51e84a0b1dec72ef66f33d20164b24c", "filename": "src/test/ui/nll/ty-outlives/impl-trait-outlives.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.rs?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -11,7 +11,6 @@\n // compile-flags:-Znll -Zborrowck=mir -Zverbose\n \n #![allow(warnings)]\n-#![feature(conservative_impl_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "2b90d53774e6515df02bb16b962063ead42c0a6c", "filename": "src/test/ui/nll/ty-outlives/impl-trait-outlives.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -1,25 +1,25 @@\n warning: not reporting region error due to -Znll\n-  --> $DIR/impl-trait-outlives.rs:18:35\n+  --> $DIR/impl-trait-outlives.rs:17:35\n    |\n LL | fn no_region<'a, T>(x: Box<T>) -> impl Debug + 'a\n    |                                   ^^^^^^^^^^^^^^^\n \n warning: not reporting region error due to -Znll\n-  --> $DIR/impl-trait-outlives.rs:34:42\n+  --> $DIR/impl-trait-outlives.rs:33:42\n    |\n LL | fn wrong_region<'a, 'b, T>(x: Box<T>) -> impl Debug + 'a\n    |                                          ^^^^^^^^^^^^^^^\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/impl-trait-outlives.rs:23:5\n+  --> $DIR/impl-trait-outlives.rs:22:5\n    |\n LL |     x\n    |     ^\n    |\n    = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/impl-trait-outlives.rs:39:5\n+  --> $DIR/impl-trait-outlives.rs:38:5\n    |\n LL |     x\n    |     ^"}, {"sha": "eafd09010815da43302ac947afee45b0f5219e6b", "filename": "src/tools/clippy", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy?ref=0f5b52e4a8d3004ef2d69b2ec7f410d4b2c9494c", "patch": "@@ -1 +1 @@\n-Subproject commit 4edd140e57cce900fa930e1439bab469f5bbce46\n+Subproject commit eafd09010815da43302ac947afee45b0f5219e6b"}]}