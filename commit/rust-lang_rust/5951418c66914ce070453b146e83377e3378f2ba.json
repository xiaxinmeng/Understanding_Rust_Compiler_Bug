{"sha": "5951418c66914ce070453b146e83377e3378f2ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NTE0MThjNjY5MTRjZTA3MDQ1M2IxNDZlODMzNzdlMzM3OGYyYmE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2015-11-20T14:39:50Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2015-11-27T15:46:11Z"}, "message": "revert test to check runtime evaluation instead of constant evaluation\n\nsee https://github.com/rust-lang/rust/pull/26848/files#r43151926", "tree": {"sha": "21d4b0f61bc5d092a24dbe3072a001ab71c8b11f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21d4b0f61bc5d092a24dbe3072a001ab71c8b11f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5951418c66914ce070453b146e83377e3378f2ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5951418c66914ce070453b146e83377e3378f2ba", "html_url": "https://github.com/rust-lang/rust/commit/5951418c66914ce070453b146e83377e3378f2ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5951418c66914ce070453b146e83377e3378f2ba/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5aa92a0df5cd90ed2dc364e0d335c87b23355bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5aa92a0df5cd90ed2dc364e0d335c87b23355bf", "html_url": "https://github.com/rust-lang/rust/commit/e5aa92a0df5cd90ed2dc364e0d335c87b23355bf"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "527ced54c42988a2fb54d2515201cd7eda96c4f0", "filename": "src/test/run-pass/shift-near-oflo.rs", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5951418c66914ce070453b146e83377e3378f2ba/src%2Ftest%2Frun-pass%2Fshift-near-oflo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5951418c66914ce070453b146e83377e3378f2ba/src%2Ftest%2Frun-pass%2Fshift-near-oflo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshift-near-oflo.rs?ref=5951418c66914ce070453b146e83377e3378f2ba", "patch": "@@ -18,39 +18,51 @@ fn main() {\n     test_right_shift();\n }\n \n+pub static mut HACK: i32 = 0;\n+\n+// Work around constant-evaluation\n+// The point of this test is to exercise the code generated for execution at runtime,\n+// `id` can never be flagged as a const fn by future aggressive analyses...\n+// due to the modification of the static\n+#[inline(never)]\n+fn id<T>(x: T) -> T {\n+    unsafe { HACK += 1; }\n+    x\n+}\n+\n fn test_left_shift() {\n     // negative rhs can panic, but values in [0,N-1] are okay for iN\n \n     macro_rules! tests {\n         ($iN:ty, $uN:ty, $max_rhs:expr, $expect_i:expr, $expect_u:expr) => { {\n-            let x = (1 as $iN) << 0;\n+            let x = (1 as $iN) << id(0);\n             assert_eq!(x, 1);\n-            let x = (1 as $uN) << 0;\n+            let x = (1 as $uN) << id(0);\n             assert_eq!(x, 1);\n-            let x = (1 as $iN) << $max_rhs;\n+            let x = (1 as $iN) << id($max_rhs);\n             assert_eq!(x, $expect_i);\n-            let x = (1 as $uN) << $max_rhs;\n+            let x = (1 as $uN) << id($max_rhs);\n             assert_eq!(x, $expect_u);\n             // high-order bits on LHS are silently discarded without panic.\n-            let x = (3 as $iN) << $max_rhs;\n+            let x = (3 as $iN) << id($max_rhs);\n             assert_eq!(x, $expect_i);\n-            let x = (3 as $uN) << $max_rhs;\n+            let x = (3 as $uN) << id($max_rhs);\n             assert_eq!(x, $expect_u);\n         } }\n     }\n \n-    let x = 1_i8 << 0;\n+    let x = 1_i8 << id(0);\n     assert_eq!(x, 1);\n-    let x = 1_u8 << 0;\n+    let x = 1_u8 << id(0);\n     assert_eq!(x, 1);\n-    let x = 1_i8 << 7;\n+    let x = 1_i8 << id(7);\n     assert_eq!(x, std::i8::MIN);\n-    let x = 1_u8 << 7;\n+    let x = 1_u8 << id(7);\n     assert_eq!(x, 0x80);\n     // high-order bits on LHS are silently discarded without panic.\n-    let x = 3_i8 << 7;\n+    let x = 3_i8 << id(7);\n     assert_eq!(x, std::i8::MIN);\n-    let x = 3_u8 << 7;\n+    let x = 3_u8 << id(7);\n     assert_eq!(x, 0x80);\n \n     // above is (approximately) expanded from:\n@@ -68,23 +80,23 @@ fn test_right_shift() {\n         ($iN:ty, $uN:ty, $max_rhs:expr,\n          $signbit_i:expr, $highbit_i:expr, $highbit_u:expr) =>\n         { {\n-            let x = (1 as $iN) >> 0;\n+            let x = (1 as $iN) >> id(0);\n             assert_eq!(x, 1);\n-            let x = (1 as $uN) >> 0;\n+            let x = (1 as $uN) >> id(0);\n             assert_eq!(x, 1);\n-            let x = ($highbit_i) >> $max_rhs-1;\n+            let x = ($highbit_i) >> id($max_rhs-1);\n             assert_eq!(x, 1);\n-            let x = ($highbit_u) >> $max_rhs;\n+            let x = ($highbit_u) >> id($max_rhs);\n             assert_eq!(x, 1);\n             // sign-bit is carried by arithmetic right shift\n-            let x = ($signbit_i) >> $max_rhs;\n+            let x = ($signbit_i) >> id($max_rhs);\n             assert_eq!(x, -1);\n             // low-order bits on LHS are silently discarded without panic.\n-            let x = ($highbit_i + 1) >> $max_rhs-1;\n+            let x = ($highbit_i + 1) >> id($max_rhs-1);\n             assert_eq!(x, 1);\n-            let x = ($highbit_u + 1) >> $max_rhs;\n+            let x = ($highbit_u + 1) >> id($max_rhs);\n             assert_eq!(x, 1);\n-            let x = ($signbit_i + 1) >> $max_rhs;\n+            let x = ($signbit_i + 1) >> id($max_rhs);\n             assert_eq!(x, -1);\n         } }\n     }"}]}