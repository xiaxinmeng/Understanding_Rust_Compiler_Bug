{"sha": "e0fab632f1bd7473a08d4bb682f1bcc329efe01f", "node_id": "C_kwDOAAsO6NoAKGUwZmFiNjMyZjFiZDc0NzNhMDhkNGJiNjgyZjFiY2MzMjllZmUwMWY", "commit": {"author": {"name": "Afonso Bordado", "email": "afonsobordado@az8.co", "date": "2022-08-01T10:38:56Z"}, "committer": {"name": "Afonso Bordado", "email": "afonsobordado@az8.co", "date": "2022-08-01T10:49:53Z"}, "message": "Add windows support to mini_core tests", "tree": {"sha": "b05a0c064d606927b8fc32248a8f98ec79ddbadb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b05a0c064d606927b8fc32248a8f98ec79ddbadb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0fab632f1bd7473a08d4bb682f1bcc329efe01f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0fab632f1bd7473a08d4bb682f1bcc329efe01f", "html_url": "https://github.com/rust-lang/rust/commit/e0fab632f1bd7473a08d4bb682f1bcc329efe01f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0fab632f1bd7473a08d4bb682f1bcc329efe01f/comments", "author": {"login": "afonso360", "id": 1357143, "node_id": "MDQ6VXNlcjEzNTcxNDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1357143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/afonso360", "html_url": "https://github.com/afonso360", "followers_url": "https://api.github.com/users/afonso360/followers", "following_url": "https://api.github.com/users/afonso360/following{/other_user}", "gists_url": "https://api.github.com/users/afonso360/gists{/gist_id}", "starred_url": "https://api.github.com/users/afonso360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/afonso360/subscriptions", "organizations_url": "https://api.github.com/users/afonso360/orgs", "repos_url": "https://api.github.com/users/afonso360/repos", "events_url": "https://api.github.com/users/afonso360/events{/privacy}", "received_events_url": "https://api.github.com/users/afonso360/received_events", "type": "User", "site_admin": false}, "committer": {"login": "afonso360", "id": 1357143, "node_id": "MDQ6VXNlcjEzNTcxNDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1357143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/afonso360", "html_url": "https://github.com/afonso360", "followers_url": "https://api.github.com/users/afonso360/followers", "following_url": "https://api.github.com/users/afonso360/following{/other_user}", "gists_url": "https://api.github.com/users/afonso360/gists{/gist_id}", "starred_url": "https://api.github.com/users/afonso360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/afonso360/subscriptions", "organizations_url": "https://api.github.com/users/afonso360/orgs", "repos_url": "https://api.github.com/users/afonso360/repos", "events_url": "https://api.github.com/users/afonso360/events{/privacy}", "received_events_url": "https://api.github.com/users/afonso360/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f5330e28c0f694958044752aaea75fa5aeaa211", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f5330e28c0f694958044752aaea75fa5aeaa211", "html_url": "https://github.com/rust-lang/rust/commit/8f5330e28c0f694958044752aaea75fa5aeaa211"}], "stats": {"total": 100, "additions": 85, "deletions": 15}, "files": [{"sha": "42f8aa50ba1a99d73f84d9de07eb550d1c778637", "filename": "example/mini_core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0fab632f1bd7473a08d4bb682f1bcc329efe01f/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0fab632f1bd7473a08d4bb682f1bcc329efe01f/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=e0fab632f1bd7473a08d4bb682f1bcc329efe01f", "patch": "@@ -535,7 +535,7 @@ unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n }\n \n #[lang = \"box_free\"]\n-unsafe fn box_free<T: ?Sized>(ptr: Unique<T>, alloc: ()) {\n+unsafe fn box_free<T: ?Sized>(ptr: Unique<T>, _alloc: ()) {\n     libc::free(ptr.pointer.0 as *mut u8);\n }\n "}, {"sha": "412320997d5079cd7386df1369755eaebf1db29c", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 84, "deletions": 14, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/e0fab632f1bd7473a08d4bb682f1bcc329efe01f/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0fab632f1bd7473a08d4bb682f1bcc329efe01f/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=e0fab632f1bd7473a08d4bb682f1bcc329efe01f", "patch": "@@ -139,7 +139,7 @@ pub struct bool_11 {\n     field10: bool,\n }\n \n-extern \"C\" fn bool_struct_in_11(arg0: bool_11) {}\n+extern \"C\" fn bool_struct_in_11(_arg0: bool_11) {}\n \n #[allow(unreachable_code)] // FIXME false positive\n fn main() {\n@@ -375,6 +375,7 @@ struct pthread_attr_t {\n }\n \n #[link(name = \"pthread\")]\n+#[cfg(not(target_env=\"msvc\"))]\n extern \"C\" {\n     fn pthread_attr_init(attr: *mut pthread_attr_t) -> c_int;\n \n@@ -391,6 +392,86 @@ extern \"C\" {\n     ) -> c_int;\n }\n \n+type DWORD = u32;\n+type LPDWORD = *mut u32;\n+\n+type LPVOID = *mut c_void;\n+type HANDLE = *mut c_void;\n+\n+#[link(name = \"msvcrt\")]\n+#[cfg(target_env=\"msvc\")]\n+extern \"C\" {\n+    fn WaitForSingleObject(\n+        hHandle: LPVOID,\n+        dwMilliseconds: DWORD\n+    ) -> DWORD;\n+\n+    fn  CreateThread(\n+        lpThreadAttributes: LPVOID, // Technically LPSECURITY_ATTRIBUTES, but we don't use it anyway\n+        dwStackSize: usize,\n+        lpStartAddress: extern \"C\" fn(_: *mut c_void) -> *mut c_void,\n+        lpParameter: LPVOID,\n+        dwCreationFlags: DWORD,\n+        lpThreadId: LPDWORD\n+    ) -> HANDLE;\n+}\n+\n+enum Thread {\n+    Windows(HANDLE),\n+    Pthread(pthread_t)\n+}\n+\n+impl Thread {\n+    unsafe fn create(f: extern \"C\" fn(_: *mut c_void) -> *mut c_void) -> Self {\n+        #[cfg(not(target_env=\"msvc\"))]\n+        {\n+            let mut attr: pthread_attr_t = zeroed();\n+            let mut thread: pthread_t = 0;\n+\n+            if pthread_attr_init(&mut attr) != 0 {\n+                assert!(false);\n+            }\n+\n+            if pthread_create(&mut thread, &attr, f, 0 as *mut c_void) != 0 {\n+                assert!(false);\n+            }\n+\n+            Thread::Pthread(thread)\n+        }\n+\n+        #[cfg(target_env=\"msvc\")]\n+        {\n+            let handle = CreateThread(0 as *mut c_void, 0, f, 0 as *mut c_void, 0, 0 as *mut u32);\n+\n+            if (handle as u64) == 0 {\n+                assert!(false);\n+            }\n+\n+            Thread::Windows(handle)\n+        }\n+    }\n+\n+\n+    unsafe fn join(self) {\n+        match self {\n+            #[cfg(not(target_env=\"msvc\"))]\n+            Thread::Pthread(thread) => {\n+                let mut res = 0 as *mut c_void;\n+                pthread_join(thread, &mut res);\n+            }\n+            #[cfg(target_env=\"msvc\")]\n+            Thread::Windows(handle) => {\n+                let wait_time = 5000; // in milliseconds\n+                assert!(WaitForSingleObject(handle, wait_time) == 0);\n+            }\n+            _ => assert!(false),\n+        }\n+    }\n+}\n+\n+\n+\n+\n #[thread_local]\n #[cfg(not(jit))]\n static mut TLS: u8 = 42;\n@@ -404,21 +485,10 @@ extern \"C\" fn mutate_tls(_: *mut c_void) -> *mut c_void {\n #[cfg(not(jit))]\n fn test_tls() {\n     unsafe {\n-        let mut attr: pthread_attr_t = zeroed();\n-        let mut thread: pthread_t = 0;\n-\n         assert_eq!(TLS, 42);\n \n-        if pthread_attr_init(&mut attr) != 0 {\n-            assert!(false);\n-        }\n-\n-        if pthread_create(&mut thread, &attr, mutate_tls, 0 as *mut c_void) != 0 {\n-            assert!(false);\n-        }\n-\n-        let mut res = 0 as *mut c_void;\n-        pthread_join(thread, &mut res);\n+        let thread = Thread::create(mutate_tls);\n+        thread.join();\n \n         // TLS of main thread must not have been changed by the other thread.\n         assert_eq!(TLS, 42);"}]}