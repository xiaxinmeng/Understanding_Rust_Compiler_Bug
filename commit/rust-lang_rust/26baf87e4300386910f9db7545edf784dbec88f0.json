{"sha": "26baf87e4300386910f9db7545edf784dbec88f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2YmFmODdlNDMwMDM4NjkxMGY5ZGI3NTQ1ZWRmNzg0ZGJlYzg4ZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-22T21:44:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-22T21:44:14Z"}, "message": "Auto merge of #1348 - RalfJung:raw-addr-of-align, r=RalfJung\n\nStacked Borrows: alignment does not matter\n\nFixes https://github.com/rust-lang/miri/issues/1339\nRequires https://github.com/rust-lang/rust/pull/71280", "tree": {"sha": "a8c1b8a5f7d29a5c137473698d8b8e916dd5f8b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8c1b8a5f7d29a5c137473698d8b8e916dd5f8b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26baf87e4300386910f9db7545edf784dbec88f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26baf87e4300386910f9db7545edf784dbec88f0", "html_url": "https://github.com/rust-lang/rust/commit/26baf87e4300386910f9db7545edf784dbec88f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26baf87e4300386910f9db7545edf784dbec88f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f844eb2fe822cdf3f770ccbe6526be71d3ad66d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f844eb2fe822cdf3f770ccbe6526be71d3ad66d0", "html_url": "https://github.com/rust-lang/rust/commit/f844eb2fe822cdf3f770ccbe6526be71d3ad66d0"}, {"sha": "4b9abdaa504bdf375c09afd9e994f3d066466d3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9abdaa504bdf375c09afd9e994f3d066466d3c", "html_url": "https://github.com/rust-lang/rust/commit/4b9abdaa504bdf375c09afd9e994f3d066466d3c"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "871e50b995be219f61477b34896e36e46a042e7f", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26baf87e4300386910f9db7545edf784dbec88f0/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/26baf87e4300386910f9db7545edf784dbec88f0/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=26baf87e4300386910f9db7545edf784dbec88f0", "patch": "@@ -1 +1 @@\n-9b2f8dbba39dd4167f22a7026674a585c3d907d8\n+b2e36e6c2d229126b59e892c9147fbb68115d292"}, {"sha": "61a5b71f0bdbf7c1e0081a9e134479bb67b14ced", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26baf87e4300386910f9db7545edf784dbec88f0/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26baf87e4300386910f9db7545edf784dbec88f0/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=26baf87e4300386910f9db7545edf784dbec88f0", "patch": "@@ -98,6 +98,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         start_id,\n         tcx.mk_substs(::std::iter::once(ty::subst::GenericArg::from(main_ret_ty))),\n     )\n+    .unwrap()\n     .unwrap();\n \n     // First argument: pointer to `main()`."}, {"sha": "03140c867b2d07d19dca3025ad198de6f1bffe8d", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26baf87e4300386910f9db7545edf784dbec88f0/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26baf87e4300386910f9db7545edf784dbec88f0/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=26baf87e4300386910f9db7545edf784dbec88f0", "patch": "@@ -11,7 +11,7 @@ use log::trace;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_middle::mir::RetagKind;\n use rustc_middle::ty;\n-use rustc_target::abi::{LayoutOf, Size};\n+use rustc_target::abi::{Align, LayoutOf, Size};\n use rustc_hir::Mutability;\n \n use crate::*;\n@@ -577,11 +577,13 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             .size_and_align_of_mplace(place)?\n             .map(|(size, _)| size)\n             .unwrap_or_else(|| place.layout.size);\n+        // `reborrow` relies on getting a `Pointer` and everything being in-bounds,\n+        // so let's ensure that. However, we do not care about alignment.\n         // We can see dangling ptrs in here e.g. after a Box's `Unique` was\n-        // updated using \"self.0 = ...\" (can happen in Box::from_raw); see miri#1050.\n-        let place = this.mplace_access_checked(place)?;\n+        // updated using \"self.0 = ...\" (can happen in Box::from_raw) so we cannot ICE; see miri#1050.\n+        let place = this.mplace_access_checked(place, Some(Align::from_bytes(1).unwrap()))?;\n+        // Nothing to do for ZSTs.\n         if size == Size::ZERO {\n-            // Nothing to do for ZSTs.\n             return Ok(val);\n         }\n "}, {"sha": "5582caaf37ea5fdb9e3a9ef9033d282763384818", "filename": "tests/run-pass/packed_struct.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26baf87e4300386910f9db7545edf784dbec88f0/tests%2Frun-pass%2Fpacked_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26baf87e4300386910f9db7545edf784dbec88f0/tests%2Frun-pass%2Fpacked_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpacked_struct.rs?ref=26baf87e4300386910f9db7545edf784dbec88f0", "patch": "@@ -1,11 +1,12 @@\n-#![feature(unsize, coerce_unsized)]\n+#![feature(unsize, coerce_unsized, raw_ref_op)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::Hash;\n \n fn test_basic() {\n     #[repr(packed)]\n     struct S {\n+        fill: u8,\n         a: i32,\n         b: i64,\n     }\n@@ -30,16 +31,21 @@ fn test_basic() {\n     }\n \n     let mut x = S {\n+        fill: 0,\n         a: 42,\n         b: 99,\n     };\n     let a = x.a;\n     let b = x.b;\n     assert_eq!(a, 42);\n     assert_eq!(b, 99);\n+    assert_eq!(&x.fill, &0); // `fill` just requirs 1-byte-align, so this is fine\n     // can't do `assert_eq!(x.a, 42)`, because `assert_eq!` takes a reference\n     assert_eq!({x.a}, 42);\n     assert_eq!({x.b}, 99);\n+    // but we *can* take a raw pointer!\n+    assert_eq!(unsafe { (&raw const x.a).read_unaligned() }, 42);\n+    assert_eq!(unsafe { (&raw const x.b).read_unaligned() }, 99);\n \n     x.b = 77;\n     assert_eq!({x.b}, 77);"}]}