{"sha": "b4fe479236f592fcbfa1422dda54253b77d8b0e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZmU0NzkyMzZmNTkyZmNiZmExNDIyZGRhNTQyNTNiNzdkOGIwZTE=", "commit": {"author": {"name": "Lukas Tobias Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-18T18:21:47Z"}, "committer": {"name": "Lukas Tobias Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-19T13:57:10Z"}, "message": "Replace ImportGranularity::Guess with guessing boolean flag", "tree": {"sha": "0ce721228484783514b8948a0a64e3e4ca38ea95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ce721228484783514b8948a0a64e3e4ca38ea95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4fe479236f592fcbfa1422dda54253b77d8b0e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4fe479236f592fcbfa1422dda54253b77d8b0e1", "html_url": "https://github.com/rust-lang/rust/commit/b4fe479236f592fcbfa1422dda54253b77d8b0e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4fe479236f592fcbfa1422dda54253b77d8b0e1/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fd9f6c7b9944638e4781e3d9384638942f84456", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd9f6c7b9944638e4781e3d9384638942f84456", "html_url": "https://github.com/rust-lang/rust/commit/5fd9f6c7b9944638e4781e3d9384638942f84456"}], "stats": {"total": 252, "additions": 219, "deletions": 33}, "files": [{"sha": "1739302bf099a1d6029632d2daeeaf489c130af5", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4fe479236f592fcbfa1422dda54253b77d8b0e1/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4fe479236f592fcbfa1422dda54253b77d8b0e1/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=b4fe479236f592fcbfa1422dda54253b77d8b0e1", "patch": "@@ -26,6 +26,7 @@ pub(crate) const TEST_CONFIG: AssistConfig = AssistConfig {\n     insert_use: InsertUseConfig {\n         granularity: ImportGranularity::Crate,\n         prefix_kind: hir::PrefixKind::Plain,\n+        enforce_granularity: true,\n         group: true,\n     },\n };"}, {"sha": "37be575e55bf636006d778a71eb045f8433dcf23", "filename": "crates/ide_completion/src/test_utils.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4fe479236f592fcbfa1422dda54253b77d8b0e1/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4fe479236f592fcbfa1422dda54253b77d8b0e1/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs?ref=b4fe479236f592fcbfa1422dda54253b77d8b0e1", "patch": "@@ -25,6 +25,7 @@ pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n     insert_use: InsertUseConfig {\n         granularity: ImportGranularity::Crate,\n         prefix_kind: PrefixKind::Plain,\n+        enforce_granularity: true,\n         group: true,\n     },\n };"}, {"sha": "e7ae69302ad9683ff770ddc3f7b64d95935b015b", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 67, "deletions": 18, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/b4fe479236f592fcbfa1422dda54253b77d8b0e1/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4fe479236f592fcbfa1422dda54253b77d8b0e1/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=b4fe479236f592fcbfa1422dda54253b77d8b0e1", "patch": "@@ -4,12 +4,14 @@ use std::cmp::Ordering;\n use hir::Semantics;\n use syntax::{\n     algo,\n-    ast::{self, make, AstNode, ModuleItemOwner, PathSegmentKind},\n+    ast::{self, make, AstNode, ModuleItemOwner, PathSegmentKind, VisibilityOwner},\n     ted, AstToken, Direction, NodeOrToken, SyntaxNode, SyntaxToken,\n };\n \n use crate::{\n-    helpers::merge_imports::{try_merge_imports, use_tree_path_cmp, MergeBehavior},\n+    helpers::merge_imports::{\n+        common_prefix, eq_visibility, try_merge_imports, use_tree_path_cmp, MergeBehavior,\n+    },\n     RootDatabase,\n };\n \n@@ -18,8 +20,6 @@ pub use hir::PrefixKind;\n /// How imports should be grouped into use statements.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum ImportGranularity {\n-    /// Try to guess the granularity of imports on a per module basis by observing the existing imports.\n-    Guess,\n     /// Do not change the granularity of any imports and preserve the original structure written by the developer.\n     Preserve,\n     /// Merge imports from the same crate into a single use statement.\n@@ -33,6 +33,7 @@ pub enum ImportGranularity {\n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub struct InsertUseConfig {\n     pub granularity: ImportGranularity,\n+    pub enforce_granularity: bool,\n     pub prefix_kind: PrefixKind,\n     pub group: bool,\n }\n@@ -81,40 +82,88 @@ impl ImportScope {\n         }\n     }\n \n-    fn guess_merge_behavior_from_scope(&self) -> Option<MergeBehavior> {\n+    fn guess_granularity_from_scope(&self) -> ImportGranularityGuess {\n+        // The idea is simple, just check each import as well as the import and its precedent together for\n+        // whether they fulfill a granularity criteria.\n         let use_stmt = |item| match item {\n-            ast::Item::Use(use_) => use_.use_tree(),\n+            ast::Item::Use(use_) => {\n+                let use_tree = use_.use_tree()?;\n+                Some((use_tree, use_.visibility()))\n+            }\n             _ => None,\n         };\n-        let use_stmts = match self {\n+        let mut use_stmts = match self {\n             ImportScope::File(f) => f.items(),\n             ImportScope::Module(m) => m.items(),\n         }\n         .filter_map(use_stmt);\n-        let mut res = None;\n-        for tree in use_stmts {\n-            if let Some(list) = tree.use_tree_list() {\n-                if list.use_trees().any(|tree| tree.use_tree_list().is_some()) {\n-                    // double nested tree list, can only be a crate style import at this point\n-                    return Some(MergeBehavior::Crate);\n+        let mut res = ImportGranularityGuess::Unknown;\n+        let (mut prev, mut prev_vis) = match use_stmts.next() {\n+            Some(it) => it,\n+            None => return res,\n+        };\n+        loop {\n+            if let Some(use_tree_list) = prev.use_tree_list() {\n+                if use_tree_list.use_trees().any(|tree| tree.use_tree_list().is_some()) {\n+                    // Nested tree lists can only occur in crate style, or with no proper style being enforced in the file.\n+                    break ImportGranularityGuess::Crate;\n+                } else {\n+                    // Could still be crate-style so continue looking.\n+                    res = ImportGranularityGuess::CrateOrModule;\n                 }\n-                // has to be at least a module style based import, might be crate style tho so look further\n-                res = Some(MergeBehavior::Module);\n             }\n+\n+            let (curr, curr_vis) = match use_stmts.next() {\n+                Some(it) => it,\n+                None => break res,\n+            };\n+            if eq_visibility(prev_vis, curr_vis.clone()) {\n+                if let Some((prev_path, curr_path)) = prev.path().zip(curr.path()) {\n+                    if let Some(_) = common_prefix(&prev_path, &curr_path) {\n+                        if prev.use_tree_list().is_none() && curr.use_tree_list().is_none() {\n+                            // Same prefix but no use tree lists so this has to be of item style.\n+                            break ImportGranularityGuess::Item; // this overwrites CrateOrModule, technically the file doesn't adhere to anything here.\n+                        } else {\n+                            // Same prefix with item tree lists, has to be module style as it\n+                            // can't be crate style since the trees wouldn't share a prefix then.\n+                            break ImportGranularityGuess::Module;\n+                        }\n+                    }\n+                }\n+            }\n+            prev = curr;\n+            prev_vis = curr_vis;\n         }\n-        res\n     }\n }\n \n+#[derive(PartialEq, PartialOrd, Debug, Clone, Copy)]\n+enum ImportGranularityGuess {\n+    Unknown,\n+    Item,\n+    Module,\n+    Crate,\n+    CrateOrModule,\n+}\n+\n /// Insert an import path into the given file/node. A `merge` value of none indicates that no import merging is allowed to occur.\n pub fn insert_use<'a>(scope: &ImportScope, path: ast::Path, cfg: InsertUseConfig) {\n     let _p = profile::span(\"insert_use\");\n-    let mb = match cfg.granularity {\n-        ImportGranularity::Guess => scope.guess_merge_behavior_from_scope(),\n+    let mut mb = match cfg.granularity {\n         ImportGranularity::Crate => Some(MergeBehavior::Crate),\n         ImportGranularity::Module => Some(MergeBehavior::Module),\n         ImportGranularity::Item | ImportGranularity::Preserve => None,\n     };\n+    if !cfg.enforce_granularity {\n+        let file_granularity = scope.guess_granularity_from_scope();\n+        mb = match file_granularity {\n+            ImportGranularityGuess::Unknown => mb,\n+            ImportGranularityGuess::Item => None,\n+            ImportGranularityGuess::Module => Some(MergeBehavior::Module),\n+            ImportGranularityGuess::Crate => Some(MergeBehavior::Crate),\n+            ImportGranularityGuess::CrateOrModule => mb.or(Some(MergeBehavior::Crate)),\n+        };\n+    }\n \n     let use_item =\n         make::use_(None, make::use_tree(path.clone(), None, None, false)).clone_for_update();"}, {"sha": "f795bbf00b3476bdbc1b29659e10edf864020162", "filename": "crates/ide_db/src/helpers/insert_use/tests.rs", "status": "modified", "additions": 114, "deletions": 1, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/b4fe479236f592fcbfa1422dda54253b77d8b0e1/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4fe479236f592fcbfa1422dda54253b77d8b0e1/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs?ref=b4fe479236f592fcbfa1422dda54253b77d8b0e1", "patch": "@@ -631,6 +631,104 @@ fn merge_last_fail3() {\n     );\n }\n \n+#[test]\n+fn guess_empty() {\n+    check_guess(\"\", ImportGranularityGuess::Unknown);\n+}\n+\n+#[test]\n+fn guess_single() {\n+    check_guess(r\"use foo::{baz::{qux, quux}, bar};\", ImportGranularityGuess::Crate);\n+    check_guess(r\"use foo::bar;\", ImportGranularityGuess::Unknown);\n+    check_guess(r\"use foo::bar::{baz, qux};\", ImportGranularityGuess::CrateOrModule);\n+}\n+\n+#[test]\n+fn guess_unknown() {\n+    check_guess(\n+        r\"\n+use foo::bar::baz;\n+use oof::rab::xuq;\n+\",\n+        ImportGranularityGuess::Unknown,\n+    );\n+}\n+\n+#[test]\n+fn guess_item() {\n+    check_guess(\n+        r\"\n+use foo::bar::baz;\n+use foo::bar::qux;\n+\",\n+        ImportGranularityGuess::Item,\n+    );\n+}\n+\n+#[test]\n+fn guess_module() {\n+    check_guess(\n+        r\"\n+use foo::bar::baz;\n+use foo::bar::{qux, quux};\n+\",\n+        ImportGranularityGuess::Module,\n+    );\n+    // this is a rather odd case, technically this file isn't following any style properly.\n+    check_guess(\n+        r\"\n+use foo::bar::baz;\n+use foo::{baz::{qux, quux}, bar};\n+\",\n+        ImportGranularityGuess::Module,\n+    );\n+}\n+\n+#[test]\n+fn guess_crate_or_module() {\n+    check_guess(\n+        r\"\n+use foo::bar::baz;\n+use oof::bar::{qux, quux};\n+\",\n+        ImportGranularityGuess::CrateOrModule,\n+    );\n+}\n+\n+#[test]\n+fn guess_crate() {\n+    check_guess(\n+        r\"\n+use frob::bar::baz;\n+use foo::{baz::{qux, quux}, bar};\n+\",\n+        ImportGranularityGuess::Crate,\n+    );\n+}\n+\n+#[test]\n+fn guess_skips_differing_vis() {\n+    check_guess(\n+        r\"\n+use foo::bar::baz;\n+pub use foo::bar::qux;\n+\",\n+        ImportGranularityGuess::Unknown,\n+    );\n+}\n+\n+#[test]\n+fn guess_grouping_matters() {\n+    check_guess(\n+        r\"\n+use foo::bar::baz;\n+use oof::bar::baz;\n+use foo::bar::qux;\n+\",\n+        ImportGranularityGuess::Unknown,\n+    );\n+}\n+\n fn check(\n     path: &str,\n     ra_fixture_before: &str,\n@@ -651,7 +749,16 @@ fn check(\n         .find_map(ast::Path::cast)\n         .unwrap();\n \n-    insert_use(&file, path, InsertUseConfig { granularity, prefix_kind: PrefixKind::Plain, group });\n+    insert_use(\n+        &file,\n+        path,\n+        InsertUseConfig {\n+            granularity,\n+            enforce_granularity: true,\n+            prefix_kind: PrefixKind::Plain,\n+            group,\n+        },\n+    );\n     let result = file.as_syntax_node().to_string();\n     assert_eq_text!(ra_fixture_after, &result);\n }\n@@ -686,3 +793,9 @@ fn check_merge_only_fail(ra_fixture0: &str, ra_fixture1: &str, mb: MergeBehavior\n     let result = try_merge_imports(&use0, &use1, mb);\n     assert_eq!(result.map(|u| u.to_string()), None);\n }\n+\n+fn check_guess(ra_fixture: &str, expected: ImportGranularityGuess) {\n+    let syntax = ast::SourceFile::parse(ra_fixture).tree().syntax().clone();\n+    let file = super::ImportScope::from(syntax).unwrap();\n+    assert_eq!(file.guess_granularity_from_scope(), expected);\n+}"}, {"sha": "546f2d0c45d8c67b5caed042713d6f125b90d882", "filename": "crates/ide_db/src/helpers/merge_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4fe479236f592fcbfa1422dda54253b77d8b0e1/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4fe479236f592fcbfa1422dda54253b77d8b0e1/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs?ref=b4fe479236f592fcbfa1422dda54253b77d8b0e1", "patch": "@@ -181,7 +181,7 @@ fn recursive_merge(\n }\n \n /// Traverses both paths until they differ, returning the common prefix of both.\n-fn common_prefix(lhs: &ast::Path, rhs: &ast::Path) -> Option<(ast::Path, ast::Path)> {\n+pub fn common_prefix(lhs: &ast::Path, rhs: &ast::Path) -> Option<(ast::Path, ast::Path)> {\n     let mut res = None;\n     let mut lhs_curr = lhs.first_qualifier_or_self();\n     let mut rhs_curr = rhs.first_qualifier_or_self();\n@@ -289,7 +289,7 @@ fn path_segment_cmp(a: &ast::PathSegment, b: &ast::PathSegment) -> Ordering {\n     a.as_ref().map(ast::NameRef::text).cmp(&b.as_ref().map(ast::NameRef::text))\n }\n \n-fn eq_visibility(vis0: Option<ast::Visibility>, vis1: Option<ast::Visibility>) -> bool {\n+pub fn eq_visibility(vis0: Option<ast::Visibility>, vis1: Option<ast::Visibility>) -> bool {\n     match (vis0, vis1) {\n         (None, None) => true,\n         // FIXME: Don't use the string representation to check for equality"}, {"sha": "867d72ea4e9d43c2009ecc8c3e423f3d99ffe018", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b4fe479236f592fcbfa1422dda54253b77d8b0e1/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4fe479236f592fcbfa1422dda54253b77d8b0e1/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=b4fe479236f592fcbfa1422dda54253b77d8b0e1", "patch": "@@ -33,16 +33,18 @@ use crate::{\n // be specified directly in `package.json`.\n config_data! {\n     struct ConfigData {\n-        /// The strategy to use when inserting new imports or merging imports.\n+        /// How imports should be grouped into use statements.\n         assist_importGranularity |\n         assist_importMergeBehavior |\n-        assist_importMergeBehaviour: ImportGranularityDef  = \"\\\"guess\\\"\",\n+        assist_importMergeBehaviour: ImportGranularityDef  = \"\\\"crate\\\"\",\n+        /// Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.\n+        assist_importEnforceGranularity: bool              = \"false\",\n         /// The path structure for newly inserted paths to use.\n-        assist_importPrefix: ImportPrefixDef           = \"\\\"plain\\\"\",\n+        assist_importPrefix: ImportPrefixDef               = \"\\\"plain\\\"\",\n         /// Group inserted imports by the [following order](https://rust-analyzer.github.io/manual.html#auto-import). Groups are separated by newlines.\n-        assist_importGroup: bool                       = \"true\",\n+        assist_importGroup: bool                           = \"true\",\n         /// Show function name and docs in parameter hints.\n-        callInfo_full: bool = \"true\",\n+        callInfo_full: bool                                = \"true\",\n \n         /// Automatically refresh project info via `cargo metadata` on\n         /// `Cargo.toml` changes.\n@@ -610,12 +612,12 @@ impl Config {\n     fn insert_use_config(&self) -> InsertUseConfig {\n         InsertUseConfig {\n             granularity: match self.data.assist_importGranularity {\n-                ImportGranularityDef::Guess => ImportGranularity::Guess,\n                 ImportGranularityDef::Preserve => ImportGranularity::Preserve,\n                 ImportGranularityDef::Item => ImportGranularity::Item,\n                 ImportGranularityDef::Crate => ImportGranularity::Crate,\n                 ImportGranularityDef::Module => ImportGranularity::Module,\n             },\n+            enforce_granularity: self.data.assist_importEnforceGranularity,\n             prefix_kind: match self.data.assist_importPrefix {\n                 ImportPrefixDef::Plain => PrefixKind::Plain,\n                 ImportPrefixDef::ByCrate => PrefixKind::ByCrate,\n@@ -721,7 +723,6 @@ enum ManifestOrProjectJson {\n #[serde(rename_all = \"snake_case\")]\n enum ImportGranularityDef {\n     Preserve,\n-    Guess,\n     #[serde(alias = \"none\")]\n     Item,\n     #[serde(alias = \"full\")]\n@@ -891,6 +892,16 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n                 \"Merge imports from the same module into a single `use` statement.\"\n             ],\n         },\n+        \"ImportGranularityDef\" => set! {\n+            \"type\": \"string\",\n+            \"enum\": [\"preserve\", \"crate\", \"module\", \"item\"],\n+            \"enumDescriptions\": [\n+                \"Do not change the granularity of any imports and preserve the original structure written by the developer.\",\n+                \"Merge imports from the same crate into a single use statement. Conversely, imports from different crates are split into separate statements.\",\n+                \"Merge imports from the same module into a single use statement. Conversely, imports from different modules are split into separate statements.\",\n+                \"Flatten imports so that each has its own use statement.\"\n+            ],\n+        },\n         \"ImportPrefixDef\" => set! {\n             \"type\": \"string\",\n             \"enum\": ["}, {"sha": "781073fe5b8b6382ea94ec7280d96fcea483ee0c", "filename": "crates/rust-analyzer/src/integrated_benchmarks.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4fe479236f592fcbfa1422dda54253b77d8b0e1/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4fe479236f592fcbfa1422dda54253b77d8b0e1/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs?ref=b4fe479236f592fcbfa1422dda54253b77d8b0e1", "patch": "@@ -138,6 +138,7 @@ fn integrated_completion_benchmark() {\n             insert_use: InsertUseConfig {\n                 granularity: ImportGranularity::Crate,\n                 prefix_kind: hir::PrefixKind::ByCrate,\n+                enforce_granularity: true,\n                 group: true,\n             },\n         };\n@@ -171,6 +172,7 @@ fn integrated_completion_benchmark() {\n             insert_use: InsertUseConfig {\n                 granularity: ImportGranularity::Crate,\n                 prefix_kind: hir::PrefixKind::ByCrate,\n+                enforce_granularity: true,\n                 group: true,\n             },\n         };"}, {"sha": "ef9e0aee9b9efd0ac93acb37ce147293073b0d20", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4fe479236f592fcbfa1422dda54253b77d8b0e1/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4fe479236f592fcbfa1422dda54253b77d8b0e1/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=b4fe479236f592fcbfa1422dda54253b77d8b0e1", "patch": "@@ -1179,6 +1179,7 @@ mod tests {\n                     insert_use: InsertUseConfig {\n                         granularity: ImportGranularity::Item,\n                         prefix_kind: PrefixKind::Plain,\n+                        enforce_granularity: true,\n                         group: true,\n                     },\n                 },"}, {"sha": "b2c1f626133f13667433fe2d2a80229ef432f133", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4fe479236f592fcbfa1422dda54253b77d8b0e1/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/b4fe479236f592fcbfa1422dda54253b77d8b0e1/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=b4fe479236f592fcbfa1422dda54253b77d8b0e1", "patch": "@@ -1,7 +1,12 @@\n-[[rust-analyzer.assist.importMergeBehavior]]rust-analyzer.assist.importMergeBehavior (default: `\"crate\"`)::\n+[[rust-analyzer.assist.importGranularity]]rust-analyzer.assist.importGranularity (default: `\"crate\"`)::\n +\n --\n-The strategy to use when inserting new imports or merging imports.\n+How imports should be grouped into use statements.\n+--\n+[[rust-analyzer.assist.importEnforceGranularity]]rust-analyzer.assist.importEnforceGranularity (default: `false`)::\n++\n+--\n+Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.\n --\n [[rust-analyzer.assist.importPrefix]]rust-analyzer.assist.importPrefix (default: `\"plain\"`)::\n +"}, {"sha": "48d12b35afc8896baecd6ca36d81bbcbc6dc096f", "filename": "editors/code/package.json", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4fe479236f592fcbfa1422dda54253b77d8b0e1/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/b4fe479236f592fcbfa1422dda54253b77d8b0e1/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=b4fe479236f592fcbfa1422dda54253b77d8b0e1", "patch": "@@ -387,23 +387,26 @@\n                 \"$generated-start\": false,\n                 \"rust-analyzer.assist.importGranularity\": {\n                     \"markdownDescription\": \"How imports should be grouped into use statements.\",\n-                    \"default\": \"guess\",\n+                    \"default\": \"crate\",\n                     \"type\": \"string\",\n                     \"enum\": [\n-                        \"guess\",\n                         \"preserve\",\n                         \"crate\",\n                         \"module\",\n                         \"item\"\n                     ],\n                     \"enumDescriptions\": [\n-                        \"Try to guess the granularity of imports on a per module basis by observing the existing imports.\",\n                         \"Do not change the granularity of any imports and preserve the original structure written by the developer.\",\n                         \"Merge imports from the same crate into a single use statement. Conversely, imports from different crates are split into separate statements.\",\n                         \"Merge imports from the same module into a single use statement. Conversely, imports from different modules are split into separate statements.\",\n                         \"Flatten imports so that each has its own use statement.\"\n                     ]\n                 },\n+                \"rust-analyzer.assist.importEnforceGranularity\": {\n+                    \"markdownDescription\": \"Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.assist.importPrefix\": {\n                     \"markdownDescription\": \"The path structure for newly inserted paths to use.\",\n                     \"default\": \"plain\","}]}