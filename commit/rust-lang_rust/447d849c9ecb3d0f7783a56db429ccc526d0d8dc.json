{"sha": "447d849c9ecb3d0f7783a56db429ccc526d0d8dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0N2Q4NDljOWVjYjNkMGY3NzgzYTU2ZGI0MjljY2M1MjZkMGQ4ZGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-14T19:44:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-14T19:44:59Z"}, "message": "Merge #9277\n\n9277: internal: more natural order of sources for TypeParam r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "b6325f21f742f55d225caebad4d5ac057f683855", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6325f21f742f55d225caebad4d5ac057f683855"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/447d849c9ecb3d0f7783a56db429ccc526d0d8dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgx7G7CRBK7hj4Ov3rIwAAizgIAHOLZ1gDUSfjAwhOlbSe0DXp\nDrdtRM0EKpJ/DLY1SyEUR/hh+6VwWEEFWBf6zyFj9d0L5YuHoOsDnLFPCauL8Ftx\nZtKxhd0/Jxh7yNjerLMVcd83ZC00UhfQgxxyql+K4mui7A/O3ktXm5VzWVj9Q1hu\nQN+CdMMJSbTx4ClvkWKLZzhb9qysV0cZdV5vyJg5EKUVT0SoCmEBLUHCmC3Y2TSz\nzswGJDn5q/fuUfWM/nSi/nrUSRUCwMIpHEi0VYuXDfM8sBo3LfUjAfzEwVNHvdRe\nwfc6xBdpt40eFeIm1fYTxToEiDNUa41pO4D7hKZkPesRd2Q7Yr54PsOzXtiP7vk=\n=cDzH\n-----END PGP SIGNATURE-----\n", "payload": "tree b6325f21f742f55d225caebad4d5ac057f683855\nparent ce8fdf3ab05b59b517dee985e4b3828c6e373a91\nparent c2015e7d182f3cb2cebe686127dd6a3e683df9e6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623699899 +0000\ncommitter GitHub <noreply@github.com> 1623699899 +0000\n\nMerge #9277\n\n9277: internal: more natural order of sources for TypeParam r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/447d849c9ecb3d0f7783a56db429ccc526d0d8dc", "html_url": "https://github.com/rust-lang/rust/commit/447d849c9ecb3d0f7783a56db429ccc526d0d8dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/447d849c9ecb3d0f7783a56db429ccc526d0d8dc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce8fdf3ab05b59b517dee985e4b3828c6e373a91", "html_url": "https://github.com/rust-lang/rust/commit/ce8fdf3ab05b59b517dee985e4b3828c6e373a91"}, {"sha": "c2015e7d182f3cb2cebe686127dd6a3e683df9e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2015e7d182f3cb2cebe686127dd6a3e683df9e6", "html_url": "https://github.com/rust-lang/rust/commit/c2015e7d182f3cb2cebe686127dd6a3e683df9e6"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "197149c5ebb60fe48a3929998ac4d7381e110c25", "filename": "crates/hir/src/has_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/447d849c9ecb3d0f7783a56db429ccc526d0d8dc/crates%2Fhir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/447d849c9ecb3d0f7783a56db429ccc526d0d8dc/crates%2Fhir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fhas_source.rs?ref=447d849c9ecb3d0f7783a56db429ccc526d0d8dc", "patch": "@@ -127,7 +127,7 @@ impl HasSource for Impl {\n }\n \n impl HasSource for TypeParam {\n-    type Ast = Either<ast::Trait, ast::TypeParam>;\n+    type Ast = Either<ast::TypeParam, ast::Trait>;\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n         let child_source = self.id.parent.child_source(db.upcast());\n         Some(child_source.map(|it| it[self.id.local_id].clone()))"}, {"sha": "0f04b2bae29ffd356eea8f893c47a28213d5092f", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/447d849c9ecb3d0f7783a56db429ccc526d0d8dc/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/447d849c9ecb3d0f7783a56db429ccc526d0d8dc/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=447d849c9ecb3d0f7783a56db429ccc526d0d8dc", "patch": "@@ -92,7 +92,7 @@ pub enum WherePredicateTypeTarget {\n \n #[derive(Default)]\n pub(crate) struct SourceMap {\n-    pub(crate) type_params: ArenaMap<LocalTypeParamId, Either<ast::Trait, ast::TypeParam>>,\n+    pub(crate) type_params: ArenaMap<LocalTypeParamId, Either<ast::TypeParam, ast::Trait>>,\n     lifetime_params: ArenaMap<LocalLifetimeParamId, ast::LifetimeParam>,\n     const_params: ArenaMap<LocalConstParamId, ast::ConstParam>,\n }\n@@ -199,7 +199,7 @@ impl GenericParams {\n                     default: None,\n                     provenance: TypeParamProvenance::TraitSelf,\n                 });\n-                sm.type_params.insert(self_param_id, Either::Left(src.value.clone()));\n+                sm.type_params.insert(self_param_id, Either::Right(src.value.clone()));\n                 // add super traits as bounds on Self\n                 // i.e., trait Foo: Bar is equivalent to trait Foo where Self: Bar\n                 let self_param = TypeRef::Path(name![Self].into());\n@@ -277,7 +277,7 @@ impl GenericParams {\n                 provenance: TypeParamProvenance::TypeParamList,\n             };\n             let param_id = self.types.alloc(param);\n-            sm.type_params.insert(param_id, Either::Right(type_param.clone()));\n+            sm.type_params.insert(param_id, Either::Left(type_param.clone()));\n \n             let type_ref = TypeRef::Path(name.into());\n             self.fill_bounds(lower_ctx, &type_param, Either::Left(type_ref));\n@@ -413,7 +413,7 @@ impl GenericParams {\n }\n \n impl HasChildSource<LocalTypeParamId> for GenericDefId {\n-    type Value = Either<ast::Trait, ast::TypeParam>;\n+    type Value = Either<ast::TypeParam, ast::Trait>;\n     fn child_source(\n         &self,\n         db: &dyn DefDatabase,\n@@ -449,7 +449,7 @@ impl ChildBySource for GenericDefId {\n         let sm = sm.as_ref();\n         for (local_id, src) in sm.value.type_params.iter() {\n             let id = TypeParamId { parent: *self, local_id };\n-            if let Either::Right(type_param) = src {\n+            if let Either::Left(type_param) = src {\n                 res[keys::TYPE_PARAM].insert(sm.with_value(type_param.clone()), id)\n             }\n         }"}, {"sha": "5b1386406b8f59dafbadcb61bb2f218deea9a1f4", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/447d849c9ecb3d0f7783a56db429ccc526d0d8dc/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/447d849c9ecb3d0f7783a56db429ccc526d0d8dc/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=447d849c9ecb3d0f7783a56db429ccc526d0d8dc", "patch": "@@ -674,7 +674,7 @@ impl<'a> Ctx<'a> {\n                     default: None,\n                     provenance: TypeParamProvenance::TraitSelf,\n                 });\n-                sm.type_params.insert(self_param_id, Either::Left(trait_def.clone()));\n+                sm.type_params.insert(self_param_id, Either::Right(trait_def.clone()));\n                 // add super traits as bounds on Self\n                 // i.e., trait Foo: Bar is equivalent to trait Foo where Self: Bar\n                 let self_param = TypeRef::Path(name![Self].into());"}, {"sha": "455b324569103b4e7b6f106cb3800ce2c55a4e37", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/447d849c9ecb3d0f7783a56db429ccc526d0d8dc/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/447d849c9ecb3d0f7783a56db429ccc526d0d8dc/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=447d849c9ecb3d0f7783a56db429ccc526d0d8dc", "patch": "@@ -442,10 +442,10 @@ impl TryToNav for hir::TypeParam {\n     fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n         let src = self.source(db)?;\n         let full_range = match &src.value {\n-            Either::Left(it) => it\n+            Either::Left(type_param) => type_param.syntax().text_range(),\n+            Either::Right(trait_) => trait_\n                 .name()\n-                .map_or_else(|| it.syntax().text_range(), |name| name.syntax().text_range()),\n-            Either::Right(it) => it.syntax().text_range(),\n+                .map_or_else(|| trait_.syntax().text_range(), |name| name.syntax().text_range()),\n         };\n         let focus_range = match &src.value {\n             Either::Left(it) => it.name(),"}, {"sha": "643e6778129f564ad524a17ee459d00067228fb3", "filename": "crates/ide_db/src/rename.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/447d849c9ecb3d0f7783a56db429ccc526d0d8dc/crates%2Fide_db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/447d849c9ecb3d0f7783a56db429ccc526d0d8dc/crates%2Fide_db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Frename.rs?ref=447d849c9ecb3d0f7783a56db429ccc526d0d8dc", "patch": "@@ -143,8 +143,8 @@ impl Definition {\n                 hir::GenericParam::TypeParam(type_param) => {\n                     let src = type_param.source(sema.db)?;\n                     let name = match &src.value {\n-                        Either::Left(_) => return None,\n-                        Either::Right(type_param) => type_param.name()?,\n+                        Either::Left(type_param) => type_param.name()?,\n+                        Either::Right(_trait) => return None,\n                     };\n                     src.with_value(name.syntax()).original_file_range(sema.db)\n                 }"}]}