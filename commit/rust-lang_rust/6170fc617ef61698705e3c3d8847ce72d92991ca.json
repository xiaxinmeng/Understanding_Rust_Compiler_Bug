{"sha": "6170fc617ef61698705e3c3d8847ce72d92991ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNzBmYzYxN2VmNjE2OTg3MDVlM2MzZDg4NDdjZTcyZDkyOTkxY2E=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-01-25T09:57:59Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-01-25T09:57:59Z"}, "message": "Split abi adjustments out", "tree": {"sha": "7d03d347e23b401dcb362185d104ec691ec61732", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d03d347e23b401dcb362185d104ec691ec61732"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6170fc617ef61698705e3c3d8847ce72d92991ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6170fc617ef61698705e3c3d8847ce72d92991ca", "html_url": "https://github.com/rust-lang/rust/commit/6170fc617ef61698705e3c3d8847ce72d92991ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6170fc617ef61698705e3c3d8847ce72d92991ca/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d39b4411296585895b1111d14c1459ea3e9bf9be", "url": "https://api.github.com/repos/rust-lang/rust/commits/d39b4411296585895b1111d14c1459ea3e9bf9be", "html_url": "https://github.com/rust-lang/rust/commit/d39b4411296585895b1111d14c1459ea3e9bf9be"}], "stats": {"total": 131, "additions": 74, "deletions": 57}, "files": [{"sha": "2d2410f2d6ca16062073fbe516b619392c6cab24", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 74, "deletions": 57, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/6170fc617ef61698705e3c3d8847ce72d92991ca/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6170fc617ef61698705e3c3d8847ce72d92991ca/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=6170fc617ef61698705e3c3d8847ce72d92991ca", "patch": "@@ -80,69 +80,86 @@ impl PassMode {\n }\n \n pub(super) fn get_pass_mode<'tcx>(tcx: TyCtxt<'tcx>, layout: TyAndLayout<'tcx>) -> PassMode {\n+    let mut arg_abi = ArgAbi::new(&tcx, layout, |_, _, _| ArgAttributes::new());\n     if layout.is_zst() {\n         // WARNING zst arguments must never be passed, as that will break CastKind::ClosureFnPointer\n-        PassMode::NoPass\n-    } else {\n-        let arg_abi = ArgAbi::new(&tcx, layout, |_, _, _| ArgAttributes::new());\n-        match arg_abi.mode {\n-            RustcPassMode::Ignore => PassMode::NoPass,\n-            RustcPassMode::Direct(_) => match &arg_abi.layout.abi {\n-                Abi::Scalar(scalar) => PassMode::ByVal(scalar_to_clif_type(tcx, scalar.clone())),\n-                // FIXME implement Vector Abi in a cg_llvm compatible way\n-                Abi::Vector { .. } => {\n-                    if let Some(vector_ty) = crate::intrinsics::clif_vector_type(tcx, arg_abi.layout) {\n-                        PassMode::ByVal(vector_ty)\n-                    } else {\n-                        PassMode::ByRef {\n-                            size: Some(arg_abi.layout.size),\n-                        }\n-                    }\n-                }\n-                _ => unreachable!(\"{:?}\", arg_abi.layout.abi)\n-            },\n-            RustcPassMode::Pair(_, _) => match &arg_abi.layout.abi {\n-                Abi::ScalarPair(a, b) => {\n-                    let a = scalar_to_clif_type(tcx, a.clone());\n-                    let b = scalar_to_clif_type(tcx, b.clone());\n-                    if a == types::I128 && b == types::I128 {\n-                        // Returning (i128, i128) by-val-pair would take 4 regs, while only 3 are\n-                        // available on x86_64. Cranelift gets confused when too many return params\n-                        // are used.\n-                        PassMode::ByRef {\n-                            size: Some(arg_abi.layout.size),\n-                        }\n-                    } else {\n-                        PassMode::ByValPair(a, b)\n-                    }\n+        arg_abi.mode = RustcPassMode::Ignore;\n+    }\n+    match arg_abi.mode {\n+        RustcPassMode::Ignore => {}\n+        RustcPassMode::Direct(_) => match &arg_abi.layout.abi {\n+            Abi::Scalar(_) => {},\n+            // FIXME implement Vector Abi in a cg_llvm compatible way\n+            Abi::Vector { .. } => {\n+                if crate::intrinsics::clif_vector_type(tcx, arg_abi.layout).is_none() {\n+                    arg_abi.mode = RustcPassMode::Indirect {\n+                        attrs: ArgAttributes::new(),\n+                        extra_attrs: None,\n+                        on_stack: false,\n+                    };\n                 }\n-                _ => unreachable!(\"{:?}\", arg_abi.layout.abi)\n-            },\n-            RustcPassMode::Cast(_) | RustcPassMode::Indirect {\n-                attrs: _,\n-                extra_attrs: None,\n-                on_stack: false,\n-            } => PassMode::ByRef {\n-                size: Some(arg_abi.layout.size),\n-            },\n-            RustcPassMode::Indirect {\n-                attrs: _,\n-                extra_attrs,\n-                on_stack: true,\n-            } => {\n-                assert!(extra_attrs.is_none());\n-                PassMode::ByRef {\n-                    size: Some(arg_abi.layout.size)\n+            }\n+            _ => unreachable!(\"{:?}\", arg_abi.layout.abi)\n+        },\n+        RustcPassMode::Pair(_, _) => match &arg_abi.layout.abi {\n+            Abi::ScalarPair(a, b) => {\n+                let a = scalar_to_clif_type(tcx, a.clone());\n+                let b = scalar_to_clif_type(tcx, b.clone());\n+                if a == types::I128 && b == types::I128 {\n+                    arg_abi.mode = RustcPassMode::Indirect {\n+                        attrs: ArgAttributes::new(),\n+                        extra_attrs: None,\n+                        on_stack: false,\n+                    };\n                 }\n             }\n-            RustcPassMode::Indirect {\n-                attrs: _,\n-                extra_attrs: Some(_),\n-                on_stack: false,\n-            } => PassMode::ByRef {\n-                size: None,\n-            },\n+            _ => unreachable!(\"{:?}\", arg_abi.layout.abi)\n+        },\n+        _ => {}\n+    }\n+    match arg_abi.mode {\n+        RustcPassMode::Ignore => PassMode::NoPass,\n+        RustcPassMode::Direct(_) => match &arg_abi.layout.abi {\n+            Abi::Scalar(scalar) => PassMode::ByVal(scalar_to_clif_type(tcx, scalar.clone())),\n+            // FIXME implement Vector Abi in a cg_llvm compatible way\n+            Abi::Vector { .. } => {\n+                let vector_ty = crate::intrinsics::clif_vector_type(tcx, arg_abi.layout).unwrap();\n+                PassMode::ByVal(vector_ty)\n+            }\n+            _ => unreachable!(\"{:?}\", arg_abi.layout.abi)\n+        },\n+        RustcPassMode::Pair(_, _) => match &arg_abi.layout.abi {\n+            Abi::ScalarPair(a, b) => {\n+                let a = scalar_to_clif_type(tcx, a.clone());\n+                let b = scalar_to_clif_type(tcx, b.clone());\n+                PassMode::ByValPair(a, b)\n+            }\n+            _ => unreachable!(\"{:?}\", arg_abi.layout.abi)\n+        },\n+        RustcPassMode::Cast(_) | RustcPassMode::Indirect {\n+            attrs: _,\n+            extra_attrs: None,\n+            on_stack: false,\n+        } => PassMode::ByRef {\n+            size: Some(arg_abi.layout.size),\n+        },\n+        RustcPassMode::Indirect {\n+            attrs: _,\n+            extra_attrs,\n+            on_stack: true,\n+        } => {\n+            assert!(extra_attrs.is_none());\n+            PassMode::ByRef {\n+                size: Some(arg_abi.layout.size)\n+            }\n         }\n+        RustcPassMode::Indirect {\n+            attrs: _,\n+            extra_attrs: Some(_),\n+            on_stack: false,\n+        } => PassMode::ByRef {\n+            size: None,\n+        },\n     }\n }\n "}]}