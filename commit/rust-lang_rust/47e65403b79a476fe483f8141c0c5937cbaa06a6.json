{"sha": "47e65403b79a476fe483f8141c0c5937cbaa06a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ZTY1NDAzYjc5YTQ3NmZlNDgzZjgxNDFjMGM1OTM3Y2JhYTA2YTY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-08T12:32:27Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-15T07:59:29Z"}, "message": "Disallow calling generic methods through a boxed iface", "tree": {"sha": "ad07549213759d650fa2bf7807f1e5f2e55b61cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad07549213759d650fa2bf7807f1e5f2e55b61cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47e65403b79a476fe483f8141c0c5937cbaa06a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47e65403b79a476fe483f8141c0c5937cbaa06a6", "html_url": "https://github.com/rust-lang/rust/commit/47e65403b79a476fe483f8141c0c5937cbaa06a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47e65403b79a476fe483f8141c0c5937cbaa06a6/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e647d799e36f6f9b11c495ba4900bf43483d4cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e647d799e36f6f9b11c495ba4900bf43483d4cf", "html_url": "https://github.com/rust-lang/rust/commit/5e647d799e36f6f9b11c495ba4900bf43483d4cf"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "caa0d3b73fef38714f8913a1a0606651876e7669", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47e65403b79a476fe483f8141c0c5937cbaa06a6/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47e65403b79a476fe483f8141c0c5937cbaa06a6/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=47e65403b79a476fe483f8141c0c5937cbaa06a6", "patch": "@@ -1849,6 +1849,10 @@ fn lookup_method_inner(fcx: @fn_ctxt, expr: @ast::expr,\n                     tcx.sess.span_fatal(\n                         expr.span, \"can not call a method that contains a \\\n                                     self type through a boxed iface\");\n+                } else if (*m.tps).len() > 0u {\n+                    tcx.sess.span_fatal(\n+                        expr.span, \"can not call a generic method through a \\\n+                                    boxed iface\");\n                 }\n                 ret some({method_ty: fty,\n                           n_tps: vec::len(*m.tps),"}]}