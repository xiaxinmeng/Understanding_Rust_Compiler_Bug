{"sha": "95fc3f47672a417d9027b61a4604d42e462f311e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZmMzZjQ3NjcyYTQxN2Q5MDI3YjYxYTQ2MDRkNDJlNDYyZjMxMWU=", "commit": {"author": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2019-03-10T06:02:38Z"}, "committer": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2019-03-12T00:55:23Z"}, "message": "Standardize `Range*` documentation\n\nThis updates the final example in the documentation for the types\n`Range`, `RangeFrom`, `RangeFull`, `RangeInclusive`, `RangeTo`,\n`RangeToInclusive`.", "tree": {"sha": "d1acf8495eb5345ad4cea56b04619c4bbf76a341", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1acf8495eb5345ad4cea56b04619c4bbf76a341"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95fc3f47672a417d9027b61a4604d42e462f311e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95fc3f47672a417d9027b61a4604d42e462f311e", "html_url": "https://github.com/rust-lang/rust/commit/95fc3f47672a417d9027b61a4604d42e462f311e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95fc3f47672a417d9027b61a4604d42e462f311e/comments", "author": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26b4cb48484382032522384318e70ceb0fbc4a41", "url": "https://api.github.com/repos/rust-lang/rust/commits/26b4cb48484382032522384318e70ceb0fbc4a41", "html_url": "https://github.com/rust-lang/rust/commit/26b4cb48484382032522384318e70ceb0fbc4a41"}], "stats": {"total": 68, "additions": 42, "deletions": 26}, "files": [{"sha": "2552cf3a97480ef7c7a220f999f42a9fcccf8a58", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 42, "deletions": 26, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/95fc3f47672a417d9027b61a4604d42e462f311e/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95fc3f47672a417d9027b61a4604d42e462f311e/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=95fc3f47672a417d9027b61a4604d42e462f311e", "patch": "@@ -26,11 +26,13 @@ use hash::{Hash, Hasher};\n /// Used as a [slicing index], `RangeFull` produces the full array as a slice.\n ///\n /// ```\n-/// let arr = [0, 1, 2, 3];\n-/// assert_eq!(arr[ .. ], [0,1,2,3]);  // RangeFull\n-/// assert_eq!(arr[ ..3], [0,1,2  ]);\n-/// assert_eq!(arr[1.. ], [  1,2,3]);\n-/// assert_eq!(arr[1..3], [  1,2  ]);\n+/// let arr = [0, 1, 2, 3, 4];\n+/// assert_eq!(arr[ ..  ], [0,1,2,3,4]);  // RangeFull\n+/// assert_eq!(arr[ .. 3], [0,1,2    ]);\n+/// assert_eq!(arr[ ..=3], [0,1,2,3  ]);\n+/// assert_eq!(arr[1..  ], [  1,2,3,4]);\n+/// assert_eq!(arr[1.. 3], [  1,2    ]);\n+/// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n ///\n /// [`IntoIterator`]: ../iter/trait.Iterator.html\n@@ -60,11 +62,13 @@ impl fmt::Debug for RangeFull {\n /// assert_eq!((3..5), std::ops::Range { start: 3, end: 5 });\n /// assert_eq!(3 + 4 + 5, (3..6).sum());\n ///\n-/// let arr = ['a', 'b', 'c', 'd'];\n-/// assert_eq!(arr[ .. ], ['a', 'b', 'c', 'd']);\n-/// assert_eq!(arr[ ..3], ['a', 'b', 'c',    ]);\n-/// assert_eq!(arr[1.. ], [     'b', 'c', 'd']);\n-/// assert_eq!(arr[1..3], [     'b', 'c'     ]);  // Range\n+/// let arr = [0, 1, 2, 3, 4];\n+/// assert_eq!(arr[ ..  ], [0,1,2,3,4]);\n+/// assert_eq!(arr[ .. 3], [0,1,2    ]);\n+/// assert_eq!(arr[ ..=3], [0,1,2,3  ]);\n+/// assert_eq!(arr[1..  ], [  1,2,3,4]);\n+/// assert_eq!(arr[1.. 3], [  1,2    ]);  // Range\n+/// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n #[doc(alias = \"..\")]\n #[derive(Clone, PartialEq, Eq, Hash)]  // not Copy -- see #27186\n@@ -160,11 +164,13 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n /// assert_eq!((2..), std::ops::RangeFrom { start: 2 });\n /// assert_eq!(2 + 3 + 4, (2..).take(3).sum());\n ///\n-/// let arr = [0, 1, 2, 3];\n-/// assert_eq!(arr[ .. ], [0,1,2,3]);\n-/// assert_eq!(arr[ ..3], [0,1,2  ]);\n-/// assert_eq!(arr[1.. ], [  1,2,3]);  // RangeFrom\n-/// assert_eq!(arr[1..3], [  1,2  ]);\n+/// let arr = [0, 1, 2, 3, 4];\n+/// assert_eq!(arr[ ..  ], [0,1,2,3,4]);\n+/// assert_eq!(arr[ .. 3], [0,1,2    ]);\n+/// assert_eq!(arr[ ..=3], [0,1,2,3  ]);\n+/// assert_eq!(arr[1..  ], [  1,2,3,4]);  // RangeFrom\n+/// assert_eq!(arr[1.. 3], [  1,2    ]);\n+/// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n ///\n /// [`Iterator`]: ../iter/trait.IntoIterator.html\n@@ -240,11 +246,13 @@ impl<Idx: PartialOrd<Idx>> RangeFrom<Idx> {\n /// elements before the index indicated by `end`.\n ///\n /// ```\n-/// let arr = [0, 1, 2, 3];\n-/// assert_eq!(arr[ .. ], [0,1,2,3]);\n-/// assert_eq!(arr[ ..3], [0,1,2  ]);  // RangeTo\n-/// assert_eq!(arr[1.. ], [  1,2,3]);\n-/// assert_eq!(arr[1..3], [  1,2  ]);\n+/// let arr = [0, 1, 2, 3, 4];\n+/// assert_eq!(arr[ ..  ], [0,1,2,3,4]);\n+/// assert_eq!(arr[ .. 3], [0,1,2    ]);  // RangeTo\n+/// assert_eq!(arr[ ..=3], [0,1,2,3  ]);\n+/// assert_eq!(arr[1..  ], [  1,2,3,4]);\n+/// assert_eq!(arr[1.. 3], [  1,2    ]);\n+/// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n ///\n /// [`IntoIterator`]: ../iter/trait.Iterator.html\n@@ -312,9 +320,13 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// assert_eq!((3..=5), std::ops::RangeInclusive::new(3, 5));\n /// assert_eq!(3 + 4 + 5, (3..=5).sum());\n ///\n-/// let arr = [0, 1, 2, 3];\n-/// assert_eq!(arr[ ..=2], [0,1,2  ]);\n-/// assert_eq!(arr[1..=2], [  1,2  ]);  // RangeInclusive\n+/// let arr = [0, 1, 2, 3, 4];\n+/// assert_eq!(arr[ ..  ], [0,1,2,3,4]);\n+/// assert_eq!(arr[ .. 3], [0,1,2    ]);\n+/// assert_eq!(arr[ ..=3], [0,1,2,3  ]);\n+/// assert_eq!(arr[1..  ], [  1,2,3,4]);\n+/// assert_eq!(arr[1.. 3], [  1,2    ]);\n+/// assert_eq!(arr[1..=3], [  1,2,3  ]);  // RangeInclusive\n /// ```\n #[doc(alias = \"..=\")]\n #[derive(Clone)]  // not Copy -- see #27186\n@@ -569,9 +581,13 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n /// array elements up to and including the index indicated by `end`.\n ///\n /// ```\n-/// let arr = [0, 1, 2, 3];\n-/// assert_eq!(arr[ ..=2], [0,1,2  ]);  // RangeToInclusive\n-/// assert_eq!(arr[1..=2], [  1,2  ]);\n+/// let arr = [0, 1, 2, 3, 4];\n+/// assert_eq!(arr[ ..  ], [0,1,2,3,4]);\n+/// assert_eq!(arr[ .. 3], [0,1,2    ]);\n+/// assert_eq!(arr[ ..=3], [0,1,2,3  ]);  // RangeToInclusive\n+/// assert_eq!(arr[1..  ], [  1,2,3,4]);\n+/// assert_eq!(arr[1.. 3], [  1,2    ]);\n+/// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n ///\n /// [`IntoIterator`]: ../iter/trait.Iterator.html"}]}