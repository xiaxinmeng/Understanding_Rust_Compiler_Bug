{"sha": "52fa9daa645772603dc170a3f3bed5cab73d646d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZmE5ZGFhNjQ1NzcyNjAzZGMxNzBhM2YzYmVkNWNhYjczZDY0NmQ=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-04-28T13:51:14Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-04-28T13:51:14Z"}, "message": "Rework `wasm::thread` to `thread_atomics`", "tree": {"sha": "68c6619cbae3b50e7837424ec6ff34c8783f9f89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68c6619cbae3b50e7837424ec6ff34c8783f9f89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52fa9daa645772603dc170a3f3bed5cab73d646d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52fa9daa645772603dc170a3f3bed5cab73d646d", "html_url": "https://github.com/rust-lang/rust/commit/52fa9daa645772603dc170a3f3bed5cab73d646d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52fa9daa645772603dc170a3f3bed5cab73d646d/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/76a04dd3f8b2500d9e524dca122814fd5a3e25e4", "html_url": "https://github.com/rust-lang/rust/commit/76a04dd3f8b2500d9e524dca122814fd5a3e25e4"}], "stats": {"total": 27, "additions": 8, "deletions": 19}, "files": [{"sha": "71877fce9934e5c462fe08e2ebd8f26948fd4c14", "filename": "library/std/src/sys/wasm/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/52fa9daa645772603dc170a3f3bed5cab73d646d/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52fa9daa645772603dc170a3f3bed5cab73d646d/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs?ref=52fa9daa645772603dc170a3f3bed5cab73d646d", "patch": "@@ -37,7 +37,6 @@ pub mod pipe;\n pub mod process;\n #[path = \"../unsupported/stdio.rs\"]\n pub mod stdio;\n-pub mod thread;\n #[path = \"../unsupported/thread_local_dtor.rs\"]\n pub mod thread_local_dtor;\n #[path = \"../unsupported/thread_local_key.rs\"]\n@@ -57,13 +56,17 @@ cfg_if::cfg_if! {\n         pub mod rwlock;\n         #[path = \"futex_atomics.rs\"]\n         pub mod futex;\n+        #[path = \"thread_atomics.rs\"]\n+        pub mod thread;\n     } else {\n         #[path = \"../unsupported/condvar.rs\"]\n         pub mod condvar;\n         #[path = \"../unsupported/mutex.rs\"]\n         pub mod mutex;\n         #[path = \"../unsupported/rwlock.rs\"]\n         pub mod rwlock;\n+        #[path = \"../unsupported/thread.rs\"]\n+        pub mod thread;\n     }\n }\n "}, {"sha": "54bc877aa7de720cbaeddd21b977f3bc804db777", "filename": "library/std/src/sys/wasm/thread_atomics.rs", "status": "renamed", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/52fa9daa645772603dc170a3f3bed5cab73d646d/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fthread_atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52fa9daa645772603dc170a3f3bed5cab73d646d/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fthread_atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fthread_atomics.rs?ref=52fa9daa645772603dc170a3f3bed5cab73d646d", "patch": "@@ -13,20 +13,10 @@ impl Thread {\n         unsupported()\n     }\n \n-    pub fn yield_now() {\n-        // do nothing\n-    }\n+    pub fn yield_now() {}\n \n-    pub fn set_name(_name: &CStr) {\n-        // nope\n-    }\n+    pub fn set_name(_name: &CStr) {}\n \n-    #[cfg(not(target_feature = \"atomics\"))]\n-    pub fn sleep(_dur: Duration) {\n-        panic!(\"can't sleep\");\n-    }\n-\n-    #[cfg(target_feature = \"atomics\")]\n     pub fn sleep(dur: Duration) {\n         use crate::arch::wasm32;\n         use crate::cmp;\n@@ -46,9 +36,7 @@ impl Thread {\n         }\n     }\n \n-    pub fn join(self) {\n-        self.0\n-    }\n+    pub fn join(self) {}\n }\n \n pub mod guard {\n@@ -61,11 +49,9 @@ pub mod guard {\n     }\n }\n \n-// This is only used by atomics primitives when the `atomics` feature is\n-// enabled. In that mode we currently just use our own thread-local to store our\n+// We currently just use our own thread-local to store our\n // current thread's ID, and then we lazily initialize it to something allocated\n // from a global counter.\n-#[cfg(target_feature = \"atomics\")]\n pub fn my_id() -> u32 {\n     use crate::sync::atomic::{AtomicU32, Ordering::SeqCst};\n ", "previous_filename": "library/std/src/sys/wasm/thread.rs"}]}