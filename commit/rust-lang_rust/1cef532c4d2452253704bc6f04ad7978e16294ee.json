{"sha": "1cef532c4d2452253704bc6f04ad7978e16294ee", "node_id": "C_kwDOAAsO6NoAKDFjZWY1MzJjNGQyNDUyMjUzNzA0YmM2ZjA0YWQ3OTc4ZTE2Mjk0ZWU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-13T15:32:57Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-13T15:42:21Z"}, "message": "minor: fixup generate assist priorities", "tree": {"sha": "b7b844c047bd0a2719ba53cfa44def36dfdf4dea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7b844c047bd0a2719ba53cfa44def36dfdf4dea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cef532c4d2452253704bc6f04ad7978e16294ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cef532c4d2452253704bc6f04ad7978e16294ee", "html_url": "https://github.com/rust-lang/rust/commit/1cef532c4d2452253704bc6f04ad7978e16294ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cef532c4d2452253704bc6f04ad7978e16294ee/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d03397fe1173eaeb2e04c9e55ac223289e7e08ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/d03397fe1173eaeb2e04c9e55ac223289e7e08ee", "html_url": "https://github.com/rust-lang/rust/commit/d03397fe1173eaeb2e04c9e55ac223289e7e08ee"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "31b438b15ec4b74785b8cb17206a3fd6495a9757", "filename": "crates/ide_assists/src/handlers/generate_delegate_methods.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1cef532c4d2452253704bc6f04ad7978e16294ee/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cef532c4d2452253704bc6f04ad7978e16294ee/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs?ref=1cef532c4d2452253704bc6f04ad7978e16294ee", "patch": "@@ -47,18 +47,18 @@ pub(crate) fn generate_delegate_methods(acc: &mut Assists, ctx: &AssistContext)\n     let strukt_name = strukt.name()?;\n     let current_module = ctx.sema.scope(strukt.syntax()).module()?;\n \n-    let (field_name, field_ty) = match ctx.find_node_at_offset::<ast::RecordField>() {\n+    let (field_name, field_ty, target) = match ctx.find_node_at_offset::<ast::RecordField>() {\n         Some(field) => {\n             let field_name = field.name()?;\n             let field_ty = field.ty()?;\n-            (format!(\"{}\", field_name), field_ty)\n+            (format!(\"{}\", field_name), field_ty, field.syntax().text_range())\n         }\n         None => {\n             let field = ctx.find_node_at_offset::<ast::TupleField>()?;\n             let field_list = ctx.find_node_at_offset::<ast::TupleFieldList>()?;\n             let field_list_index = field_list.fields().position(|it| it == field)?;\n             let field_ty = field.ty()?;\n-            (format!(\"{}\", field_list_index), field_ty)\n+            (format!(\"{}\", field_list_index), field_ty, field.syntax().text_range())\n         }\n     };\n \n@@ -74,7 +74,6 @@ pub(crate) fn generate_delegate_methods(acc: &mut Assists, ctx: &AssistContext)\n         Option::<()>::None\n     });\n \n-    let target = field_ty.syntax().text_range();\n     for method in methods {\n         let adt = ast::Adt::Struct(strukt.clone());\n         let name = method.name(ctx.db()).to_string();"}, {"sha": "3086addac34666cadbd076b5ba20cd8b6d8ebaef", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cef532c4d2452253704bc6f04ad7978e16294ee/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cef532c4d2452253704bc6f04ad7978e16294ee/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=1cef532c4d2452253704bc6f04ad7978e16294ee", "patch": "@@ -216,8 +216,6 @@ mod handlers {\n             generate_constant::generate_constant,\n             generate_default_from_enum_variant::generate_default_from_enum_variant,\n             generate_default_from_new::generate_default_from_new,\n-            generate_delegate_methods::generate_delegate_methods,\n-            generate_deref::generate_deref,\n             generate_derive::generate_derive,\n             generate_enum_is_method::generate_enum_is_method,\n             generate_enum_projection_method::generate_enum_as_method,\n@@ -285,6 +283,8 @@ mod handlers {\n             generate_getter::generate_getter,\n             generate_getter::generate_getter_mut,\n             generate_setter::generate_setter,\n+            generate_delegate_methods::generate_delegate_methods,\n+            generate_deref::generate_deref,\n             // Are you sure you want to add new assist here, and not to the\n             // sorted list above?\n         ]"}, {"sha": "08947e4ecd8fb0a3b3387b916d6fc1cbd5c22c2e", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cef532c4d2452253704bc6f04ad7978e16294ee/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cef532c4d2452253704bc6f04ad7978e16294ee/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=1cef532c4d2452253704bc6f04ad7978e16294ee", "patch": "@@ -222,10 +222,10 @@ fn assist_order_field_struct() {\n     let mut assists = assists.iter();\n \n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Change visibility to pub(crate)\");\n-    assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate `Deref` impl using `bar`\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a getter method\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a mut getter method\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a setter method\");\n+    assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate `Deref` impl using `bar`\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Add `#[derive]`\");\n }\n "}]}