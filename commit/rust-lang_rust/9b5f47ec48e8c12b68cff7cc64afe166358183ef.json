{"sha": "9b5f47ec48e8c12b68cff7cc64afe166358183ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNWY0N2VjNDhlOGMxMmI2OGNmZjdjYzY0YWZlMTY2MzU4MTgzZWY=", "commit": {"author": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2018-02-12T00:08:48Z"}, "committer": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2018-02-15T17:10:54Z"}, "message": "[improper_ctypes] Overhaul primary label\n\n- Always name the non-FFI-safe\n- Explain *why* the type is not FFI-safe\n- Stop vaguely gesturing at structs/enums/unions if the non-FFI-safe types occured in a field.\n\nThe last part is arguably a regression, but it's minor now that the non-FFI-safe type is actually named. Removing it avoids some code duplication.", "tree": {"sha": "4a9c37d51203f70b4ff57893b569355a58105abe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a9c37d51203f70b4ff57893b569355a58105abe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b5f47ec48e8c12b68cff7cc64afe166358183ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b5f47ec48e8c12b68cff7cc64afe166358183ef", "html_url": "https://github.com/rust-lang/rust/commit/9b5f47ec48e8c12b68cff7cc64afe166358183ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b5f47ec48e8c12b68cff7cc64afe166358183ef/comments", "author": null, "committer": null, "parents": [{"sha": "ae92dfac5019643b8fb310de9e92f0889b0106ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae92dfac5019643b8fb310de9e92f0889b0106ca", "html_url": "https://github.com/rust-lang/rust/commit/ae92dfac5019643b8fb310de9e92f0889b0106ca"}], "stats": {"total": 398, "additions": 171, "deletions": 227}, "files": [{"sha": "7203b1b1e7daef472b153c1fa057d1ee7c14e150", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 91, "deletions": 147, "changes": 238, "blob_url": "https://github.com/rust-lang/rust/blob/9b5f47ec48e8c12b68cff7cc64afe166358183ef/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5f47ec48e8c12b68cff7cc64afe166358183ef/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=9b5f47ec48e8c12b68cff7cc64afe166358183ef", "patch": "@@ -10,7 +10,6 @@\n \n #![allow(non_snake_case)]\n \n-use rustc::hir::def_id::DefId;\n use rustc::hir::map as hir_map;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, AdtKind, Ty, TyCtxt};\n@@ -352,18 +351,14 @@ struct ImproperCTypesVisitor<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,\n }\n \n-struct FfiError {\n-    message: &'static str,\n-    help: Option<&'static str>,\n-}\n-\n-enum FfiResult {\n+enum FfiResult<'tcx> {\n     FfiSafe,\n-    FfiPhantom,\n-    FfiUnsafe(FfiError),\n-    FfiBadStruct(DefId, FfiError),\n-    FfiBadUnion(DefId, FfiError),\n-    FfiBadEnum(DefId, FfiError),\n+    FfiPhantom(Ty<'tcx>),\n+    FfiUnsafe {\n+        ty: Ty<'tcx>,\n+        reason: &'static str,\n+        help: Option<&'static str>,\n+    },\n }\n \n /// Check if this enum can be safely exported based on the\n@@ -406,7 +401,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     /// representation which can be exported to C code).\n     fn check_type_for_ffi(&self,\n                           cache: &mut FxHashSet<Ty<'tcx>>,\n-                          ty: Ty<'tcx>) -> FfiResult {\n+                          ty: Ty<'tcx>) -> FfiResult<'tcx> {\n         use self::FfiResult::*;\n \n         let cx = self.cx.tcx;\n@@ -422,23 +417,24 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         match ty.sty {\n             ty::TyAdt(def, substs) => {\n                 if def.is_phantom_data() {\n-                    return FfiPhantom;\n+                    return FfiPhantom(ty);\n                 }\n                 match def.adt_kind() {\n                     AdtKind::Struct => {\n                         if !def.repr.c() && !def.repr.transparent() {\n-                            return FfiUnsafe(FfiError {\n-                                message: \"found struct without foreign-function-safe \\\n-                                          representation annotation in foreign module\",\n-                                help: Some(\"consider adding a #[repr(C)] attribute to the type\"),\n-                            });\n+                            return FfiUnsafe {\n+                                ty: ty,\n+                                reason: \"this struct has unspecified layout\",\n+                                help: Some(\"consider adding a #[repr(C)] attribute to this struct\"),\n+                            };\n                         }\n \n                         if def.non_enum_variant().fields.is_empty() {\n-                            return FfiUnsafe(FfiError {\n-                                message: \"found zero-size struct in foreign module\",\n+                            return FfiUnsafe {\n+                                ty: ty,\n+                                reason: \"this struct has no fields\",\n                                 help: Some(\"consider adding a member to this struct\"),\n-                            });\n+                            };\n                         }\n \n                         // We can't completely trust repr(C) and repr(transparent) markings;\n@@ -464,32 +460,30 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                 FfiSafe => {\n                                     all_phantom = false;\n                                 }\n-                                FfiPhantom => {}\n-                                FfiBadStruct(..) | FfiBadUnion(..) | FfiBadEnum(..) => {\n+                                FfiPhantom(..) => {}\n+                                FfiUnsafe { .. } => {\n                                     return r;\n                                 }\n-                                FfiUnsafe(err) => {\n-                                    return FfiBadStruct(def.did, err);\n-                                }\n                             }\n                         }\n \n-                        if all_phantom { FfiPhantom } else { FfiSafe }\n+                        if all_phantom { FfiPhantom(ty) } else { FfiSafe }\n                     }\n                     AdtKind::Union => {\n                         if !def.repr.c() {\n-                            return FfiUnsafe(FfiError {\n-                                message: \"found union without foreign-function-safe \\\n-                                          representation annotation in foreign module\",\n-                                help: Some(\"consider adding a #[repr(C)] attribute to the type\"),\n-                            });\n+                            return FfiUnsafe {\n+                                ty: ty,\n+                                reason: \"this union has unspecified layout\",\n+                                help: Some(\"consider adding a #[repr(C)] attribute to this union\"),\n+                            };\n                         }\n \n                         if def.non_enum_variant().fields.is_empty() {\n-                            return FfiUnsafe(FfiError {\n-                                message: \"found zero-size union in foreign module\",\n-                                help: Some(\"consider adding a member to this union\"),\n-                            });\n+                            return FfiUnsafe {\n+                                ty: ty,\n+                                reason: \"this union has no fields\",\n+                                help: Some(\"consider adding a field to this union\"),\n+                            };\n                         }\n \n                         let mut all_phantom = true;\n@@ -502,17 +496,14 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                 FfiSafe => {\n                                     all_phantom = false;\n                                 }\n-                                FfiPhantom => {}\n-                                FfiBadStruct(..) | FfiBadUnion(..) | FfiBadEnum(..) => {\n+                                FfiPhantom(..) => {}\n+                                FfiUnsafe { .. } => {\n                                     return r;\n                                 }\n-                                FfiUnsafe(err) => {\n-                                    return FfiBadUnion(def.did, err);\n-                                }\n                             }\n                         }\n \n-                        if all_phantom { FfiPhantom } else { FfiSafe }\n+                        if all_phantom { FfiPhantom(ty) } else { FfiSafe }\n                     }\n                     AdtKind::Enum => {\n                         if def.variants.is_empty() {\n@@ -525,12 +516,12 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                         if !def.repr.c() && def.repr.int.is_none() {\n                             // Special-case types like `Option<extern fn()>`.\n                             if !is_repr_nullable_ptr(cx, def, substs) {\n-                                return FfiUnsafe(FfiError {\n-                                    message: \"found enum without foreign-function-safe \\\n-                                              representation annotation in foreign module\",\n+                                return FfiUnsafe {\n+                                    ty: ty,\n+                                    reason: \"enum has no representation hint\",\n                                     help: Some(\"consider adding a #[repr(...)] attribute \\\n-                                                to the type\"),\n-                                });\n+                                                to this enum\"),\n+                                };\n                             }\n                         }\n \n@@ -543,17 +534,15 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                 let r = self.check_type_for_ffi(cache, arg);\n                                 match r {\n                                     FfiSafe => {}\n-                                    FfiBadStruct(..) | FfiBadUnion(..) | FfiBadEnum(..) => {\n+                                    FfiUnsafe { .. } => {\n                                         return r;\n                                     }\n-                                    FfiPhantom => {\n-                                        return FfiBadEnum(def.did, FfiError {\n-                                            message: \"Found phantom data in enum variant\",\n+                                    FfiPhantom(..) => {\n+                                        return FfiUnsafe {\n+                                            ty: ty,\n+                                            reason: \"this enum contains a PhantomData field\",\n                                             help: None,\n-                                        });\n-                                    }\n-                                    FfiUnsafe(err) => {\n-                                        return FfiBadEnum(def.did, err);\n+                                        };\n                                     }\n                                 }\n                             }\n@@ -563,59 +552,44 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                 }\n             }\n \n-            ty::TyChar => {\n-                FfiUnsafe(FfiError {\n-                    message: \"found Rust type `char` in foreign module\",\n-                    help: Some(\"consider using `u32` or `libc::wchar_t`\"),\n-                })\n-            }\n+            ty::TyChar => FfiUnsafe {\n+                ty: ty,\n+                reason: \"the `char` type has no C equivalent\",\n+                help: Some(\"consider using `u32` or `libc::wchar_t` instead\"),\n+            },\n \n-            ty::TyInt(ast::IntTy::I128) => {\n-                FfiUnsafe(FfiError {\n-                    message: \"found Rust type `i128` in foreign module, but 128-bit \\\n-                              integers don't currently have a known stable ABI\",\n-                    help: None,\n-                })\n-            }\n-\n-            ty::TyUint(ast::UintTy::U128) => {\n-                FfiUnsafe(FfiError {\n-                    message: \"found Rust type `u128` in foreign module, but 128-bit \\\n-                              integers don't currently have a known stable ABI\",\n-                    help: None,\n-                })\n-            }\n+            ty::TyInt(ast::IntTy::I128) | ty::TyUint(ast::UintTy::U128) => FfiUnsafe {\n+                ty: ty,\n+                reason: \"128-bit integers don't currently have a known stable ABI\",\n+                help: None,\n+            },\n \n             // Primitive types with a stable representation.\n             ty::TyBool | ty::TyInt(..) | ty::TyUint(..) | ty::TyFloat(..) | ty::TyNever => FfiSafe,\n \n-            ty::TySlice(_) => {\n-                FfiUnsafe(FfiError {\n-                    message: \"found Rust slice type in foreign module\",\n-                    help: Some(\"consider using a raw pointer instead\"),\n-                })\n-            }\n-\n-            ty::TyDynamic(..) => {\n-                FfiUnsafe(FfiError {\n-                    message: \"found Rust trait type in foreign module\",\n-                    help: Some(\"consider using a raw pointer instead\"),\n-                })\n-            }\n-\n-            ty::TyStr => {\n-                FfiUnsafe(FfiError {\n-                    message: \"found Rust type `str` in foreign module\",\n-                    help: Some(\"consider using a `*const libc::c_char`\"),\n-                })\n-            }\n-\n-            ty::TyTuple(..) => {\n-                FfiUnsafe(FfiError {\n-                    message: \"found Rust tuple type in foreign module\",\n-                    help: Some(\"consider using a struct instead\"),\n-                })\n-            }\n+            ty::TySlice(_) => FfiUnsafe {\n+                ty: ty,\n+                reason: \"slices have no C equivalent\",\n+                help: Some(\"consider using a raw pointer instead\"),\n+            },\n+\n+            ty::TyDynamic(..) => FfiUnsafe {\n+                ty: ty,\n+                reason: \"trait objects have no C equivalent\",\n+                help: Some(\"consider using a raw pointer instead\"),\n+            },\n+\n+            ty::TyStr => FfiUnsafe {\n+                ty: ty,\n+                reason: \"string slices have no C equivalent\",\n+                help: Some(\"consider using `*const u8` and a length instead\"),\n+            },\n+\n+            ty::TyTuple(..) => FfiUnsafe {\n+                ty: ty,\n+                reason: \"tuples have unspecified layout\",\n+                help: Some(\"consider using a struct instead\"),\n+            },\n \n             ty::TyRawPtr(ref m) |\n             ty::TyRef(_, ref m) => self.check_type_for_ffi(cache, m.ty),\n@@ -625,11 +599,12 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             ty::TyFnPtr(sig) => {\n                 match sig.abi() {\n                     Abi::Rust | Abi::RustIntrinsic | Abi::PlatformIntrinsic | Abi::RustCall => {\n-                        return FfiUnsafe(FfiError {\n-                            message: \"found function pointer with Rust calling convention in \\\n-                                      foreign module\",\n-                            help: Some(\"consider using an `extern` function pointer\"),\n-                        })\n+                        return FfiUnsafe {\n+                            ty: ty,\n+                            reason: \"this function pointer has Rust-specific calling convention\",\n+                            help: Some(\"consider using an `fn \\\"extern\\\"(...) -> ...` \\\n+                                        function pointer instead\"),\n+                        }\n                     }\n                     _ => {}\n                 }\n@@ -677,48 +652,17 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n         match self.check_type_for_ffi(&mut FxHashSet(), ty) {\n             FfiResult::FfiSafe => {}\n-            FfiResult::FfiPhantom => {\n+            FfiResult::FfiPhantom(ty) => {\n                 self.cx.span_lint(IMPROPER_CTYPES,\n                                   sp,\n-                                  &format!(\"found zero-sized type composed only \\\n-                                            of phantom-data in a foreign-function.\"));\n-            }\n-            FfiResult::FfiUnsafe(err) => {\n-                let mut diag = self.cx.struct_span_lint(IMPROPER_CTYPES, sp, err.message);\n-                if let Some(s) = err.help {\n-                    diag.help(s);\n-                }\n-                diag.emit();\n-            }\n-            FfiResult::FfiBadStruct(_, err) => {\n-                // FIXME: This diagnostic is difficult to read, and doesn't\n-                // point at the relevant field.\n-                let msg = format!(\"found non-foreign-function-safe member in struct \\\n-                                   marked #[repr(C)]: {}\", err.message);\n-                let mut diag = self.cx.struct_span_lint(IMPROPER_CTYPES, sp, &msg);\n-                if let Some(s) = err.help {\n-                    diag.help(s);\n-                }\n-                diag.emit();\n-            }\n-            FfiResult::FfiBadUnion(_, err) => {\n-                // FIXME: This diagnostic is difficult to read, and doesn't\n-                // point at the relevant field.\n-                let msg = format!(\"found non-foreign-function-safe member in union \\\n-                                   marked #[repr(C)]: {}\", err.message);\n-                let mut diag = self.cx.struct_span_lint(IMPROPER_CTYPES, sp, &msg);\n-                if let Some(s) = err.help {\n-                    diag.help(s);\n-                }\n-                diag.emit();\n+                                  &format!(\"`extern` block uses type `{}` which is not FFI-safe: \\\n+                                            composed only of PhantomData\", ty));\n             }\n-            FfiResult::FfiBadEnum(_, err) => {\n-                // FIXME: This diagnostic is difficult to read, and doesn't\n-                // point at the relevant variant.\n-                let msg = format!(\"found non-foreign-function-safe member in enum: {}\",\n-                                  err.message);\n+            FfiResult::FfiUnsafe { ty: unsafe_ty, reason, help } => {\n+                let msg = format!(\"`extern` block uses type `{}` which is not FFI-safe: {}\",\n+                                  unsafe_ty, reason);\n                 let mut diag = self.cx.struct_span_lint(IMPROPER_CTYPES, sp, &msg);\n-                if let Some(s) = err.help {\n+                if let Some(s) = help {\n                     diag.help(s);\n                 }\n                 diag.emit();"}, {"sha": "f76fa3e4a8ecec2f2029951958a52861b13d851d", "filename": "src/test/compile-fail/issue-14309.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b5f47ec48e8c12b68cff7cc64afe166358183ef/src%2Ftest%2Fcompile-fail%2Fissue-14309.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5f47ec48e8c12b68cff7cc64afe166358183ef/src%2Ftest%2Fcompile-fail%2Fissue-14309.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14309.rs?ref=9b5f47ec48e8c12b68cff7cc64afe166358183ef", "patch": "@@ -37,13 +37,13 @@ struct D {\n }\n \n extern \"C\" {\n-    fn foo(x: A); //~ ERROR found struct without foreign-function-safe\n-    fn bar(x: B); //~ ERROR foreign-function-safe\n+    fn foo(x: A); //~ ERROR type `A` which is not FFI-safe\n+    fn bar(x: B); //~ ERROR type `A`\n     fn baz(x: C);\n-    fn qux(x: A2); //~ ERROR foreign-function-safe\n-    fn quux(x: B2); //~ ERROR foreign-function-safe\n+    fn qux(x: A2); //~ ERROR type `A`\n+    fn quux(x: B2); //~ ERROR type `A`\n     fn corge(x: C2);\n-    fn fred(x: D); //~ ERROR foreign-function-safe\n+    fn fred(x: D); //~ ERROR type `A`\n }\n \n fn main() { }"}, {"sha": "f9d01003005e4c045dc6cf16586eb46ae4566216", "filename": "src/test/compile-fail/issue-16250.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b5f47ec48e8c12b68cff7cc64afe166358183ef/src%2Ftest%2Fcompile-fail%2Fissue-16250.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5f47ec48e8c12b68cff7cc64afe166358183ef/src%2Ftest%2Fcompile-fail%2Fissue-16250.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16250.rs?ref=9b5f47ec48e8c12b68cff7cc64afe166358183ef", "patch": "@@ -13,7 +13,7 @@\n pub struct Foo;\n \n extern {\n-    pub fn foo(x: (Foo)); //~ ERROR found struct without\n+    pub fn foo(x: (Foo)); //~ ERROR unspecified layout\n }\n \n fn main() {"}, {"sha": "7b7ffd8fc107cfe108cc1395654bdcf7a296f97c", "filename": "src/test/compile-fail/lint-ctypes-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b5f47ec48e8c12b68cff7cc64afe166358183ef/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5f47ec48e8c12b68cff7cc64afe166358183ef/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs?ref=9b5f47ec48e8c12b68cff7cc64afe166358183ef", "patch": "@@ -27,9 +27,9 @@ enum Isize { A, B, C }\n \n extern {\n    fn zf(x: Z);\n-   fn uf(x: U); //~ ERROR found enum without foreign-function-safe\n-   fn bf(x: B); //~ ERROR found enum without foreign-function-safe\n-   fn tf(x: T); //~ ERROR found enum without foreign-function-safe\n+   fn uf(x: U); //~ ERROR enum has no representation hint\n+   fn bf(x: B); //~ ERROR enum has no representation hint\n+   fn tf(x: T); //~ ERROR enum has no representation hint\n    fn reprc(x: ReprC);\n    fn u8(x: U8);\n    fn isize(x: Isize);"}, {"sha": "36c42ce1104e0bfbc08ed5ab99b2e1a5171410cf", "filename": "src/test/compile-fail/union/union-repr-c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b5f47ec48e8c12b68cff7cc64afe166358183ef/src%2Ftest%2Fcompile-fail%2Funion%2Funion-repr-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5f47ec48e8c12b68cff7cc64afe166358183ef/src%2Ftest%2Fcompile-fail%2Funion%2Funion-repr-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-repr-c.rs?ref=9b5f47ec48e8c12b68cff7cc64afe166358183ef", "patch": "@@ -22,7 +22,7 @@ union W {\n \n extern \"C\" {\n     static FOREIGN1: U; // OK\n-    static FOREIGN2: W; //~ ERROR found union without foreign-function-safe representation\n+    static FOREIGN2: W; //~ ERROR union has unspecified layout\n }\n \n fn main() {}"}, {"sha": "77cb1ef0f5130a29197a9cc53a0d1d3bf61f41fd", "filename": "src/test/ui/lint-ctypes.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9b5f47ec48e8c12b68cff7cc64afe166358183ef/src%2Ftest%2Fui%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5f47ec48e8c12b68cff7cc64afe166358183ef/src%2Ftest%2Fui%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-ctypes.rs?ref=9b5f47ec48e8c12b68cff7cc64afe166358183ef", "patch": "@@ -51,27 +51,27 @@ pub struct TransparentCustomZst(i32, ZeroSize);\n pub struct ZeroSizeWithPhantomData(::std::marker::PhantomData<i32>);\n \n extern {\n-    pub fn ptr_type1(size: *const Foo); //~ ERROR: found struct without\n-    pub fn ptr_type2(size: *const Foo); //~ ERROR: found struct without\n-    pub fn slice_type(p: &[u32]); //~ ERROR: found Rust slice type\n-    pub fn str_type(p: &str); //~ ERROR: found Rust type\n-    pub fn box_type(p: Box<u32>); //~ ERROR found struct without\n-    pub fn char_type(p: char); //~ ERROR found Rust type\n-    pub fn i128_type(p: i128); //~ ERROR found Rust type\n-    pub fn u128_type(p: u128); //~ ERROR found Rust type\n-    pub fn trait_type(p: &Clone); //~ ERROR found Rust trait type\n-    pub fn tuple_type(p: (i32, i32)); //~ ERROR found Rust tuple type\n-    pub fn tuple_type2(p: I32Pair); //~ ERROR found Rust tuple type\n-    pub fn zero_size(p: ZeroSize); //~ ERROR found zero-size struct\n-    pub fn zero_size_phantom(p: ZeroSizeWithPhantomData); //~ ERROR found zero-sized type\n+    pub fn ptr_type1(size: *const Foo); //~ ERROR: uses type `Foo`\n+    pub fn ptr_type2(size: *const Foo); //~ ERROR: uses type `Foo`\n+    pub fn slice_type(p: &[u32]); //~ ERROR: uses type `[u32]`\n+    pub fn str_type(p: &str); //~ ERROR: uses type `str`\n+    pub fn box_type(p: Box<u32>); //~ ERROR uses type `std::boxed::Box<u32>`\n+    pub fn char_type(p: char); //~ ERROR uses type `char`\n+    pub fn i128_type(p: i128); //~ ERROR uses type `i128`\n+    pub fn u128_type(p: u128); //~ ERROR uses type `u128`\n+    pub fn trait_type(p: &Clone); //~ ERROR uses type `std::clone::Clone`\n+    pub fn tuple_type(p: (i32, i32)); //~ ERROR uses type `(i32, i32)`\n+    pub fn tuple_type2(p: I32Pair); //~ ERROR uses type `(i32, i32)`\n+    pub fn zero_size(p: ZeroSize); //~ ERROR struct has no fields\n+    pub fn zero_size_phantom(p: ZeroSizeWithPhantomData); //~ ERROR composed only of PhantomData\n     pub fn zero_size_phantom_toplevel()\n-        -> ::std::marker::PhantomData<bool>; //~ ERROR: found zero-sized type\n-    pub fn fn_type(p: RustFn); //~ ERROR found function pointer with Rust\n-    pub fn fn_type2(p: fn()); //~ ERROR found function pointer with Rust\n-    pub fn fn_contained(p: RustBadRet); //~ ERROR: found struct without\n-    pub fn transparent_i128(p: TransparentI128); //~ ERROR: found Rust type `i128`\n-    pub fn transparent_str(p: TransparentStr); //~ ERROR: found Rust type `str`\n-    pub fn transparent_fn(p: TransparentBadFn); //~ ERROR: found struct without\n+        -> ::std::marker::PhantomData<bool>; //~ ERROR: composed only of PhantomData\n+    pub fn fn_type(p: RustFn); //~ ERROR function pointer has Rust-specific\n+    pub fn fn_type2(p: fn()); //~ ERROR function pointer has Rust-specific\n+    pub fn fn_contained(p: RustBadRet); //~ ERROR: uses type `std::boxed::Box<u32>`\n+    pub fn transparent_i128(p: TransparentI128); //~ ERROR: uses type `i128`\n+    pub fn transparent_str(p: TransparentStr); //~ ERROR: uses type `str`\n+    pub fn transparent_fn(p: TransparentBadFn); //~ ERROR: uses type `std::boxed::Box<u32>`\n \n     pub fn good3(fptr: Option<extern fn()>);\n     pub fn good4(aptr: &[u8; 4 as usize]);"}, {"sha": "8ecdae07a532912b996c9ffd50cd36ebcc411956", "filename": "src/test/ui/lint-ctypes.stderr", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/9b5f47ec48e8c12b68cff7cc64afe166358183ef/src%2Ftest%2Fui%2Flint-ctypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b5f47ec48e8c12b68cff7cc64afe166358183ef/src%2Ftest%2Fui%2Flint-ctypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-ctypes.stderr?ref=9b5f47ec48e8c12b68cff7cc64afe166358183ef", "patch": "@@ -1,157 +1,157 @@\n-error: found struct without foreign-function-safe representation annotation in foreign module\n+error: `extern` block uses type `Foo` which is not FFI-safe: this struct has unspecified layout\n   --> $DIR/lint-ctypes.rs:54:28\n    |\n-54 |     pub fn ptr_type1(size: *const Foo); //~ ERROR: found struct without\n+54 |     pub fn ptr_type1(size: *const Foo); //~ ERROR: uses type `Foo`\n    |                            ^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/lint-ctypes.rs:11:9\n    |\n 11 | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n-   = help: consider adding a #[repr(C)] attribute to the type\n+   = help: consider adding a #[repr(C)] attribute to this struct\n \n-error: found struct without foreign-function-safe representation annotation in foreign module\n+error: `extern` block uses type `Foo` which is not FFI-safe: this struct has unspecified layout\n   --> $DIR/lint-ctypes.rs:55:28\n    |\n-55 |     pub fn ptr_type2(size: *const Foo); //~ ERROR: found struct without\n+55 |     pub fn ptr_type2(size: *const Foo); //~ ERROR: uses type `Foo`\n    |                            ^^^^^^^^^^\n    |\n-   = help: consider adding a #[repr(C)] attribute to the type\n+   = help: consider adding a #[repr(C)] attribute to this struct\n \n-error: found Rust slice type in foreign module\n+error: `extern` block uses type `[u32]` which is not FFI-safe: slices have no C equivalent\n   --> $DIR/lint-ctypes.rs:56:26\n    |\n-56 |     pub fn slice_type(p: &[u32]); //~ ERROR: found Rust slice type\n+56 |     pub fn slice_type(p: &[u32]); //~ ERROR: uses type `[u32]`\n    |                          ^^^^^^\n    |\n    = help: consider using a raw pointer instead\n \n-error: found Rust type `str` in foreign module\n+error: `extern` block uses type `str` which is not FFI-safe: string slices have no C equivalent\n   --> $DIR/lint-ctypes.rs:57:24\n    |\n-57 |     pub fn str_type(p: &str); //~ ERROR: found Rust type\n+57 |     pub fn str_type(p: &str); //~ ERROR: uses type `str`\n    |                        ^^^^\n    |\n-   = help: consider using a `*const libc::c_char`\n+   = help: consider using `*const u8` and a length instead\n \n-error: found struct without foreign-function-safe representation annotation in foreign module\n+error: `extern` block uses type `std::boxed::Box<u32>` which is not FFI-safe: this struct has unspecified layout\n   --> $DIR/lint-ctypes.rs:58:24\n    |\n-58 |     pub fn box_type(p: Box<u32>); //~ ERROR found struct without\n+58 |     pub fn box_type(p: Box<u32>); //~ ERROR uses type `std::boxed::Box<u32>`\n    |                        ^^^^^^^^\n    |\n-   = help: consider adding a #[repr(C)] attribute to the type\n+   = help: consider adding a #[repr(C)] attribute to this struct\n \n-error: found Rust type `char` in foreign module\n+error: `extern` block uses type `char` which is not FFI-safe: the `char` type has no C equivalent\n   --> $DIR/lint-ctypes.rs:59:25\n    |\n-59 |     pub fn char_type(p: char); //~ ERROR found Rust type\n+59 |     pub fn char_type(p: char); //~ ERROR uses type `char`\n    |                         ^^^^\n    |\n-   = help: consider using `u32` or `libc::wchar_t`\n+   = help: consider using `u32` or `libc::wchar_t` instead\n \n-error: found Rust type `i128` in foreign module, but 128-bit integers don't currently have a known stable ABI\n+error: `extern` block uses type `i128` which is not FFI-safe: 128-bit integers don't currently have a known stable ABI\n   --> $DIR/lint-ctypes.rs:60:25\n    |\n-60 |     pub fn i128_type(p: i128); //~ ERROR found Rust type\n+60 |     pub fn i128_type(p: i128); //~ ERROR uses type `i128`\n    |                         ^^^^\n \n-error: found Rust type `u128` in foreign module, but 128-bit integers don't currently have a known stable ABI\n+error: `extern` block uses type `u128` which is not FFI-safe: 128-bit integers don't currently have a known stable ABI\n   --> $DIR/lint-ctypes.rs:61:25\n    |\n-61 |     pub fn u128_type(p: u128); //~ ERROR found Rust type\n+61 |     pub fn u128_type(p: u128); //~ ERROR uses type `u128`\n    |                         ^^^^\n \n-error: found Rust trait type in foreign module\n+error: `extern` block uses type `std::clone::Clone` which is not FFI-safe: trait objects have no C equivalent\n   --> $DIR/lint-ctypes.rs:62:26\n    |\n-62 |     pub fn trait_type(p: &Clone); //~ ERROR found Rust trait type\n+62 |     pub fn trait_type(p: &Clone); //~ ERROR uses type `std::clone::Clone`\n    |                          ^^^^^^\n    |\n    = help: consider using a raw pointer instead\n \n-error: found Rust tuple type in foreign module\n+error: `extern` block uses type `(i32, i32)` which is not FFI-safe: tuples have unspecified layout\n   --> $DIR/lint-ctypes.rs:63:26\n    |\n-63 |     pub fn tuple_type(p: (i32, i32)); //~ ERROR found Rust tuple type\n+63 |     pub fn tuple_type(p: (i32, i32)); //~ ERROR uses type `(i32, i32)`\n    |                          ^^^^^^^^^^\n    |\n    = help: consider using a struct instead\n \n-error: found Rust tuple type in foreign module\n+error: `extern` block uses type `(i32, i32)` which is not FFI-safe: tuples have unspecified layout\n   --> $DIR/lint-ctypes.rs:64:27\n    |\n-64 |     pub fn tuple_type2(p: I32Pair); //~ ERROR found Rust tuple type\n+64 |     pub fn tuple_type2(p: I32Pair); //~ ERROR uses type `(i32, i32)`\n    |                           ^^^^^^^\n    |\n    = help: consider using a struct instead\n \n-error: found zero-size struct in foreign module\n+error: `extern` block uses type `ZeroSize` which is not FFI-safe: this struct has no fields\n   --> $DIR/lint-ctypes.rs:65:25\n    |\n-65 |     pub fn zero_size(p: ZeroSize); //~ ERROR found zero-size struct\n+65 |     pub fn zero_size(p: ZeroSize); //~ ERROR struct has no fields\n    |                         ^^^^^^^^\n    |\n    = help: consider adding a member to this struct\n \n-error: found zero-sized type composed only of phantom-data in a foreign-function.\n+error: `extern` block uses type `ZeroSizeWithPhantomData` which is not FFI-safe: composed only of PhantomData\n   --> $DIR/lint-ctypes.rs:66:33\n    |\n-66 |     pub fn zero_size_phantom(p: ZeroSizeWithPhantomData); //~ ERROR found zero-sized type\n+66 |     pub fn zero_size_phantom(p: ZeroSizeWithPhantomData); //~ ERROR composed only of PhantomData\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: found zero-sized type composed only of phantom-data in a foreign-function.\n+error: `extern` block uses type `std::marker::PhantomData<bool>` which is not FFI-safe: composed only of PhantomData\n   --> $DIR/lint-ctypes.rs:68:12\n    |\n-68 |         -> ::std::marker::PhantomData<bool>; //~ ERROR: found zero-sized type\n+68 |         -> ::std::marker::PhantomData<bool>; //~ ERROR: composed only of PhantomData\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: found function pointer with Rust calling convention in foreign module\n+error: `extern` block uses type `fn()` which is not FFI-safe: this function pointer has Rust-specific calling convention\n   --> $DIR/lint-ctypes.rs:69:23\n    |\n-69 |     pub fn fn_type(p: RustFn); //~ ERROR found function pointer with Rust\n+69 |     pub fn fn_type(p: RustFn); //~ ERROR function pointer has Rust-specific\n    |                       ^^^^^^\n    |\n-   = help: consider using an `extern` function pointer\n+   = help: consider using an `fn \"extern\"(...) -> ...` function pointer instead\n \n-error: found function pointer with Rust calling convention in foreign module\n+error: `extern` block uses type `fn()` which is not FFI-safe: this function pointer has Rust-specific calling convention\n   --> $DIR/lint-ctypes.rs:70:24\n    |\n-70 |     pub fn fn_type2(p: fn()); //~ ERROR found function pointer with Rust\n+70 |     pub fn fn_type2(p: fn()); //~ ERROR function pointer has Rust-specific\n    |                        ^^^^\n    |\n-   = help: consider using an `extern` function pointer\n+   = help: consider using an `fn \"extern\"(...) -> ...` function pointer instead\n \n-error: found struct without foreign-function-safe representation annotation in foreign module\n+error: `extern` block uses type `std::boxed::Box<u32>` which is not FFI-safe: this struct has unspecified layout\n   --> $DIR/lint-ctypes.rs:71:28\n    |\n-71 |     pub fn fn_contained(p: RustBadRet); //~ ERROR: found struct without\n+71 |     pub fn fn_contained(p: RustBadRet); //~ ERROR: uses type `std::boxed::Box<u32>`\n    |                            ^^^^^^^^^^\n    |\n-   = help: consider adding a #[repr(C)] attribute to the type\n+   = help: consider adding a #[repr(C)] attribute to this struct\n \n-error: found non-foreign-function-safe member in struct marked #[repr(C)]: found Rust type `i128` in foreign module, but 128-bit integers don't currently have a known stable ABI\n+error: `extern` block uses type `i128` which is not FFI-safe: 128-bit integers don't currently have a known stable ABI\n   --> $DIR/lint-ctypes.rs:72:32\n    |\n-72 |     pub fn transparent_i128(p: TransparentI128); //~ ERROR: found Rust type `i128`\n+72 |     pub fn transparent_i128(p: TransparentI128); //~ ERROR: uses type `i128`\n    |                                ^^^^^^^^^^^^^^^\n \n-error: found non-foreign-function-safe member in struct marked #[repr(C)]: found Rust type `str` in foreign module\n+error: `extern` block uses type `str` which is not FFI-safe: string slices have no C equivalent\n   --> $DIR/lint-ctypes.rs:73:31\n    |\n-73 |     pub fn transparent_str(p: TransparentStr); //~ ERROR: found Rust type `str`\n+73 |     pub fn transparent_str(p: TransparentStr); //~ ERROR: uses type `str`\n    |                               ^^^^^^^^^^^^^^\n    |\n-   = help: consider using a `*const libc::c_char`\n+   = help: consider using `*const u8` and a length instead\n \n-error: found non-foreign-function-safe member in struct marked #[repr(C)]: found struct without foreign-function-safe representation annotation in foreign module\n+error: `extern` block uses type `std::boxed::Box<u32>` which is not FFI-safe: this struct has unspecified layout\n   --> $DIR/lint-ctypes.rs:74:30\n    |\n-74 |     pub fn transparent_fn(p: TransparentBadFn); //~ ERROR: found struct without\n+74 |     pub fn transparent_fn(p: TransparentBadFn); //~ ERROR: uses type `std::boxed::Box<u32>`\n    |                              ^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding a #[repr(C)] attribute to the type\n+   = help: consider adding a #[repr(C)] attribute to this struct\n \n error: aborting due to 20 previous errors\n "}]}