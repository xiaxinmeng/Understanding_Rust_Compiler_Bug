{"sha": "365ff62fca0e1fb6511a47f5f50c4af4df250dfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NWZmNjJmY2EwZTFmYjY1MTFhNDdmNWY1MGM0YWY0ZGYyNTBkZmE=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-08-24T17:25:34Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-08-24T17:25:34Z"}, "message": "Don't unwrap the result of `span_to_snippet`\n\nIt can return `Err` due to macros being expanded across crates or\nfiles.", "tree": {"sha": "fef7c6fd187e5fcf713a24bee0982aebb9a3a66e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fef7c6fd187e5fcf713a24bee0982aebb9a3a66e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/365ff62fca0e1fb6511a47f5f50c4af4df250dfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/365ff62fca0e1fb6511a47f5f50c4af4df250dfa", "html_url": "https://github.com/rust-lang/rust/commit/365ff62fca0e1fb6511a47f5f50c4af4df250dfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/365ff62fca0e1fb6511a47f5f50c4af4df250dfa/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "478464570e60523adc6d303577d1782229ca1f93", "url": "https://api.github.com/repos/rust-lang/rust/commits/478464570e60523adc6d303577d1782229ca1f93", "html_url": "https://github.com/rust-lang/rust/commit/478464570e60523adc6d303577d1782229ca1f93"}], "stats": {"total": 133, "additions": 90, "deletions": 43}, "files": [{"sha": "f10ff71b15e6810a41e48f3ddb38823de3ad4284", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 43, "deletions": 41, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/365ff62fca0e1fb6511a47f5f50c4af4df250dfa/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365ff62fca0e1fb6511a47f5f50c4af4df250dfa/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=365ff62fca0e1fb6511a47f5f50c4af4df250dfa", "patch": "@@ -415,20 +415,21 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             \"{:?}\",\n             move_place.ty(self.body, self.infcx.tcx).ty,\n         );\n-        let snippet = self.infcx.tcx.sess.source_map().span_to_snippet(span).unwrap();\n-        let is_option = move_ty.starts_with(\"std::option::Option\");\n-        let is_result = move_ty.starts_with(\"std::result::Result\");\n-        if  is_option || is_result {\n-            err.span_suggestion(\n-                span,\n-                &format!(\"consider borrowing the `{}`'s content\", if is_option {\n-                    \"Option\"\n-                } else {\n-                    \"Result\"\n-                }),\n-                format!(\"{}.as_ref()\", snippet),\n-                Applicability::MaybeIncorrect,\n-            );\n+        if let Ok(snippet) = self.infcx.tcx.sess.source_map().span_to_snippet(span) {\n+            let is_option = move_ty.starts_with(\"std::option::Option\");\n+            let is_result = move_ty.starts_with(\"std::result::Result\");\n+            if is_option || is_result {\n+                err.span_suggestion(\n+                    span,\n+                    &format!(\"consider borrowing the `{}`'s content\", if is_option {\n+                        \"Option\"\n+                    } else {\n+                        \"Result\"\n+                    }),\n+                    format!(\"{}.as_ref()\", snippet),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n         }\n         err\n     }\n@@ -439,19 +440,20 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'a>,\n         span: Span,\n     ) {\n-        let snippet = self.infcx.tcx.sess.source_map().span_to_snippet(span).unwrap();\n         match error {\n             GroupedMoveError::MovesFromPlace {\n                 mut binds_to,\n                 move_from,\n                 ..\n             } => {\n-                err.span_suggestion(\n-                    span,\n-                    \"consider borrowing here\",\n-                    format!(\"&{}\", snippet),\n-                    Applicability::Unspecified,\n-                );\n+                if let Ok(snippet) = self.infcx.tcx.sess.source_map().span_to_snippet(span) {\n+                    err.span_suggestion(\n+                        span,\n+                        \"consider borrowing here\",\n+                        format!(\"&{}\", snippet),\n+                        Applicability::Unspecified,\n+                    );\n+                }\n \n                 if binds_to.is_empty() {\n                     let place_ty = move_from.ty(self.body, self.infcx.tcx).ty;\n@@ -517,27 +519,27 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     ..\n                 }))\n             ) = bind_to.is_user_variable {\n-                let pat_snippet = self.infcx.tcx.sess.source_map()\n-                    .span_to_snippet(pat_span)\n-                    .unwrap();\n-                if pat_snippet.starts_with('&') {\n-                    let pat_snippet = pat_snippet[1..].trim_start();\n-                    let suggestion;\n-                    let to_remove;\n-                    if pat_snippet.starts_with(\"mut\")\n-                        && pat_snippet[\"mut\".len()..].starts_with(Pattern_White_Space)\n-                    {\n-                        suggestion = pat_snippet[\"mut\".len()..].trim_start();\n-                        to_remove = \"&mut\";\n-                    } else {\n-                        suggestion = pat_snippet;\n-                        to_remove = \"&\";\n+                if let Ok(pat_snippet) = self.infcx.tcx.sess.source_map().span_to_snippet(pat_span)\n+                {\n+                    if pat_snippet.starts_with('&') {\n+                        let pat_snippet = pat_snippet[1..].trim_start();\n+                        let suggestion;\n+                        let to_remove;\n+                        if pat_snippet.starts_with(\"mut\")\n+                            && pat_snippet[\"mut\".len()..].starts_with(Pattern_White_Space)\n+                        {\n+                            suggestion = pat_snippet[\"mut\".len()..].trim_start();\n+                            to_remove = \"&mut\";\n+                        } else {\n+                            suggestion = pat_snippet;\n+                            to_remove = \"&\";\n+                        }\n+                        suggestions.push((\n+                            pat_span,\n+                            to_remove,\n+                            suggestion.to_owned(),\n+                        ));\n                     }\n-                    suggestions.push((\n-                        pat_span,\n-                        to_remove,\n-                        suggestion.to_owned(),\n-                    ));\n                 }\n             }\n         }"}, {"sha": "e7f37431e50092228df0ca00b0134b1a9d50086e", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/365ff62fca0e1fb6511a47f5f50c4af4df250dfa/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365ff62fca0e1fb6511a47f5f50c4af4df250dfa/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=365ff62fca0e1fb6511a47f5f50c4af4df250dfa", "patch": "@@ -711,8 +711,8 @@ fn annotate_struct_field(\n }\n \n /// If possible, suggest replacing `ref` with `ref mut`.\n-fn suggest_ref_mut(tcx: TyCtxt<'_>, binding_span: Span) -> Option<(String)> {\n-    let hi_src = tcx.sess.source_map().span_to_snippet(binding_span).unwrap();\n+fn suggest_ref_mut(tcx: TyCtxt<'_>, binding_span: Span) -> Option<String> {\n+    let hi_src = tcx.sess.source_map().span_to_snippet(binding_span).ok()?;\n     if hi_src.starts_with(\"ref\")\n         && hi_src[\"ref\".len()..].starts_with(Pattern_White_Space)\n     {"}, {"sha": "c77f6c8276e7064fa230582a12566f7870eb07c9", "filename": "src/test/ui/borrowck/move-error-snippets-ext.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/365ff62fca0e1fb6511a47f5f50c4af4df250dfa/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets-ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365ff62fca0e1fb6511a47f5f50c4af4df250dfa/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets-ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets-ext.rs?ref=365ff62fca0e1fb6511a47f5f50c4af4df250dfa", "patch": "@@ -0,0 +1,7 @@\n+// ignore-test\n+\n+macro_rules! aaa {\n+    ($c:ident) => {{\n+        let a = $c;\n+    }}\n+}"}, {"sha": "64f9565382886d3ac355f905881ec8ea18720c35", "filename": "src/test/ui/borrowck/move-error-snippets.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/365ff62fca0e1fb6511a47f5f50c4af4df250dfa/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365ff62fca0e1fb6511a47f5f50c4af4df250dfa/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.rs?ref=365ff62fca0e1fb6511a47f5f50c4af4df250dfa", "patch": "@@ -0,0 +1,23 @@\n+// Test that we don't ICE after trying to construct a cross-file snippet #63800.\n+\n+// compile-flags: --test\n+\n+#[macro_use]\n+#[path = \"move-error-snippets-ext.rs\"]\n+mod move_error_snippets_ext;\n+\n+struct A;\n+\n+macro_rules! sss {\n+    () => {\n+        #[test]\n+        fn fff() {\n+            static D: A = A;\n+            aaa!(D);         //~ ERROR cannot move\n+        }\n+    };\n+}\n+\n+sss!();\n+\n+fn main() {}"}, {"sha": "77463c48591bc101388e25eb659662514dc692de", "filename": "src/test/ui/borrowck/move-error-snippets.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/365ff62fca0e1fb6511a47f5f50c4af4df250dfa/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/365ff62fca0e1fb6511a47f5f50c4af4df250dfa/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr?ref=365ff62fca0e1fb6511a47f5f50c4af4df250dfa", "patch": "@@ -0,0 +1,15 @@\n+error[E0507]: cannot move out of static item `D`\n+  --> $DIR/move-error-snippets.rs:16:18\n+   |\n+LL | | #[macro_use]\n+   | |__________________^ move occurs because `D` has type `A`, which does not implement the `Copy` trait\n+...\n+LL |               aaa!(D);\n+   |  __________________^\n+...\n+LL |   sss!();\n+   |   ------- in this macro invocation\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}]}