{"sha": "8e9774ffcf892c85d2e29030c17af1c246e6aa73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOTc3NGZmY2Y4OTJjODVkMmUyOTAzMGMxN2FmMWMyNDZlNmFhNzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-22T05:42:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-22T05:42:11Z"}, "message": "Auto merge of #57475 - SimonSapin:signed, r=estebank\n\nAdd signed num::NonZeroI* types\n\nMultiple people have asked for them in https://github.com/rust-lang/rust/issues/49137. Given that the unsigned ones already exist, they are very easy to add and not an additional maintenance burden.", "tree": {"sha": "38724b06007cd3fa373607c8b4044d9df5329fa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38724b06007cd3fa373607c8b4044d9df5329fa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e9774ffcf892c85d2e29030c17af1c246e6aa73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9774ffcf892c85d2e29030c17af1c246e6aa73", "html_url": "https://github.com/rust-lang/rust/commit/8e9774ffcf892c85d2e29030c17af1c246e6aa73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e9774ffcf892c85d2e29030c17af1c246e6aa73/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7", "html_url": "https://github.com/rust-lang/rust/commit/51cc3cdcf060c1bf3e4d45947f7a6bc20f9960f7"}, {"sha": "e195ce654a570606a85ead6cefb36042a206205a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e195ce654a570606a85ead6cefb36042a206205a", "html_url": "https://github.com/rust-lang/rust/commit/e195ce654a570606a85ead6cefb36042a206205a"}], "stats": {"total": 66, "additions": 42, "deletions": 24}, "files": [{"sha": "41caa1788fbb867eae50c06936540eec3f397aa9", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8e9774ffcf892c85d2e29030c17af1c246e6aa73/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9774ffcf892c85d2e29030c17af1c246e6aa73/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=8e9774ffcf892c85d2e29030c17af1c246e6aa73", "patch": "@@ -10,9 +10,9 @@ use ops;\n use str::FromStr;\n \n macro_rules! impl_nonzero_fmt {\n-    ( ( $( $Trait: ident ),+ ) for $Ty: ident ) => {\n+    ( #[$stability: meta] ( $( $Trait: ident ),+ ) for $Ty: ident ) => {\n         $(\n-            #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n+            #[$stability]\n             impl fmt::$Trait for $Ty {\n                 #[inline]\n                 fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -31,7 +31,7 @@ macro_rules! doc_comment {\n }\n \n macro_rules! nonzero_integers {\n-    ( $( $Ty: ident($Int: ty); )+ ) => {\n+    ( $( #[$stability: meta] $Ty: ident($Int: ty); )+ ) => {\n         $(\n             doc_comment! {\n                 concat!(\"An integer that is known not to equal zero.\n@@ -41,10 +41,10 @@ For example, `Option<\", stringify!($Ty), \">` is the same size as `\", stringify!(\n \n ```rust\n use std::mem::size_of;\n-assert_eq!(size_of::<Option<std::num::\", stringify!($Ty), \">>(), size_of::<\", stringify!($Int),\n+assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", stringify!($Int),\n \">());\n ```\"),\n-                #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n+                #[$stability]\n                 #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n                 #[repr(transparent)]\n                 #[rustc_layout_scalar_valid_range_start(1)]\n@@ -57,14 +57,14 @@ assert_eq!(size_of::<Option<std::num::\", stringify!($Ty), \">>(), size_of::<\", st\n                 /// # Safety\n                 ///\n                 /// The value must not be zero.\n-                #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n+                #[$stability]\n                 #[inline]\n                 pub const unsafe fn new_unchecked(n: $Int) -> Self {\n                     $Ty(n)\n                 }\n \n                 /// Create a non-zero if the given value is not zero.\n-                #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n+                #[$stability]\n                 #[inline]\n                 pub fn new(n: $Int) -> Option<Self> {\n                     if n != 0 {\n@@ -75,7 +75,7 @@ assert_eq!(size_of::<Option<std::num::\", stringify!($Ty), \">>(), size_of::<\", st\n                 }\n \n                 /// Returns the value as a primitive type.\n-                #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n+                #[$stability]\n                 #[inline]\n                 pub const fn get(self) -> $Int {\n                     self.0\n@@ -91,19 +91,25 @@ assert_eq!(size_of::<Option<std::num::\", stringify!($Ty), \">>(), size_of::<\", st\n             }\n \n             impl_nonzero_fmt! {\n-                (Debug, Display, Binary, Octal, LowerHex, UpperHex) for $Ty\n+                #[$stability] (Debug, Display, Binary, Octal, LowerHex, UpperHex) for $Ty\n             }\n         )+\n     }\n }\n \n nonzero_integers! {\n-    NonZeroU8(u8);\n-    NonZeroU16(u16);\n-    NonZeroU32(u32);\n-    NonZeroU64(u64);\n-    NonZeroU128(u128);\n-    NonZeroUsize(usize);\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU8(u8);\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU16(u16);\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU32(u32);\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU64(u64);\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU128(u128);\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroUsize(usize);\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI8(i8);\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI16(i16);\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI32(i32);\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI64(i64);\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI128(i128);\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroIsize(isize);\n }\n \n /// Provides intentionally-wrapped arithmetic on `T`."}, {"sha": "4532568ee0c1630179c64b008abc99278be1aac4", "filename": "src/libcore/tests/nonzero.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e9774ffcf892c85d2e29030c17af1c246e6aa73/src%2Flibcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9774ffcf892c85d2e29030c17af1c246e6aa73/src%2Flibcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnonzero.rs?ref=8e9774ffcf892c85d2e29030c17af1c246e6aa73", "patch": "@@ -1,4 +1,4 @@\n-use core::num::NonZeroU32;\n+use core::num::{NonZeroU32, NonZeroI32};\n use core::option::Option;\n use core::option::Option::{Some, None};\n use std::mem::size_of;\n@@ -13,6 +13,7 @@ fn test_create_nonzero_instance() {\n #[test]\n fn test_size_nonzero_in_option() {\n     assert_eq!(size_of::<NonZeroU32>(), size_of::<Option<NonZeroU32>>());\n+    assert_eq!(size_of::<NonZeroI32>(), size_of::<Option<NonZeroI32>>());\n }\n \n #[test]\n@@ -118,3 +119,10 @@ fn test_from_nonzero() {\n     let num: u32 = nz.into();\n     assert_eq!(num, 1u32);\n }\n+\n+#[test]\n+fn test_from_signed_nonzero() {\n+    let nz = NonZeroI32::new(1).unwrap();\n+    let num: i32 = nz.into();\n+    assert_eq!(num, 1i32);\n+}"}, {"sha": "1c92e2da588a0a19caac1dacf3af6ce851ee7f11", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e9774ffcf892c85d2e29030c17af1c246e6aa73/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9774ffcf892c85d2e29030c17af1c246e6aa73/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=8e9774ffcf892c85d2e29030c17af1c246e6aa73", "patch": "@@ -471,7 +471,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn report_similar_impl_candidates(&self,\n-                                      mut impl_candidates: Vec<ty::TraitRef<'tcx>>,\n+                                      impl_candidates: Vec<ty::TraitRef<'tcx>>,\n                                       err: &mut DiagnosticBuilder<'_>)\n     {\n         if impl_candidates.is_empty() {\n@@ -497,14 +497,18 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         });\n \n         // Sort impl candidates so that ordering is consistent for UI tests.\n-        let normalized_impl_candidates = &mut impl_candidates[0..end]\n+        let mut normalized_impl_candidates = impl_candidates\n             .iter()\n             .map(normalize)\n             .collect::<Vec<String>>();\n+\n+        // Sort before taking the `..end` range,\n+        // because the ordering of `impl_candidates` may not be deterministic:\n+        // https://github.com/rust-lang/rust/pull/57475#issuecomment-455519507\n         normalized_impl_candidates.sort();\n \n         err.help(&format!(\"the following implementations were found:{}{}\",\n-                          normalized_impl_candidates.join(\"\"),\n+                          normalized_impl_candidates[..end].join(\"\"),\n                           if len > 5 {\n                               format!(\"\\nand {} others\", len - 4)\n                           } else {"}, {"sha": "d6d5ce4d1a7d2b34c5249323e91e2d9123fd338a", "filename": "src/test/ui/did_you_mean/issue-21659-show-relevant-trait-impls-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e9774ffcf892c85d2e29030c17af1c246e6aa73/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e9774ffcf892c85d2e29030c17af1c246e6aa73/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr?ref=8e9774ffcf892c85d2e29030c17af1c246e6aa73", "patch": "@@ -8,7 +8,7 @@ LL |     f1.foo(1usize);\n              <Bar as Foo<i16>>\n              <Bar as Foo<i32>>\n              <Bar as Foo<i8>>\n-             <Bar as Foo<u8>>\n+             <Bar as Foo<u16>>\n            and 2 others\n \n error: aborting due to previous error"}, {"sha": "3411958be62a93b46600719561ba42521d5678f3", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e9774ffcf892c85d2e29030c17af1c246e6aa73/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e9774ffcf892c85d2e29030c17af1c246e6aa73/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr?ref=8e9774ffcf892c85d2e29030c17af1c246e6aa73", "patch": "@@ -40,10 +40,10 @@ LL |     Foo::<i32>::bar(&true); //~ ERROR is not satisfied\n    |     ^^^^^^^^^^^^^^^ the trait `Foo<i32>` is not implemented for `bool`\n    |\n    = help: the following implementations were found:\n+             <bool as Foo<bool>>\n+             <bool as Foo<i8>>\n              <bool as Foo<u16>>\n              <bool as Foo<u32>>\n-             <bool as Foo<u64>>\n-             <bool as Foo<u8>>\n            and 2 others\n note: required by `Foo::bar`\n   --> $DIR/issue-39802-show-5-trait-impls.rs:2:5"}, {"sha": "df8e646280c9a5d8e0092ff03bdee0401fe9339f", "filename": "src/test/ui/try-block/try-block-bad-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e9774ffcf892c85d2e29030c17af1c246e6aa73/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e9774ffcf892c85d2e29030c17af1c246e6aa73/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr?ref=8e9774ffcf892c85d2e29030c17af1c246e6aa73", "patch": "@@ -6,10 +6,10 @@ LL |         Err(\"\")?; //~ ERROR the trait bound `i32: std::convert::From<&str>`\n    |\n    = help: the following implementations were found:\n              <i32 as std::convert::From<bool>>\n+             <i32 as std::convert::From<core::num::NonZeroI32>>\n              <i32 as std::convert::From<i16>>\n              <i32 as std::convert::From<i8>>\n-             <i32 as std::convert::From<u16>>\n-             <i32 as std::convert::From<u8>>\n+           and 2 others\n    = note: required by `std::convert::From::from`\n \n error[E0271]: type mismatch resolving `<std::result::Result<i32, i32> as std::ops::Try>::Ok == &str`"}]}