{"sha": "1dc2015a9d71f3ef8191f6e0ca39b9154c87adfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYzIwMTVhOWQ3MWYzZWY4MTkxZjZlMGNhMzliOTE1NGM4N2FkZmU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-02-19T19:53:04Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-02-25T11:14:43Z"}, "message": "Update tools code", "tree": {"sha": "bb9cf1432a333b07a6a59c354ed850acc9164e02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb9cf1432a333b07a6a59c354ed850acc9164e02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dc2015a9d71f3ef8191f6e0ca39b9154c87adfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc2015a9d71f3ef8191f6e0ca39b9154c87adfe", "html_url": "https://github.com/rust-lang/rust/commit/1dc2015a9d71f3ef8191f6e0ca39b9154c87adfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dc2015a9d71f3ef8191f6e0ca39b9154c87adfe/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b597a154240b9d46b57c3013a529bcd11f2a961", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b597a154240b9d46b57c3013a529bcd11f2a961", "html_url": "https://github.com/rust-lang/rust/commit/9b597a154240b9d46b57c3013a529bcd11f2a961"}], "stats": {"total": 59, "additions": 21, "deletions": 38}, "files": [{"sha": "8e9cd1a12faacf79d96fa2f1bb6b909cf3e9d7f6", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1dc2015a9d71f3ef8191f6e0ca39b9154c87adfe/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc2015a9d71f3ef8191f6e0ca39b9154c87adfe/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=1dc2015a9d71f3ef8191f6e0ca39b9154c87adfe", "patch": "@@ -57,25 +57,6 @@ struct DiagnosticCode {\n     explanation: Option<String>,\n }\n \n-pub fn extract_rendered(output: &str, proc_res: &ProcRes) -> String {\n-    output.lines()\n-        .filter_map(|line| if line.starts_with('{') {\n-            match json::decode::<Diagnostic>(line) {\n-                Ok(diagnostic) => diagnostic.rendered,\n-                Err(error) => {\n-                    proc_res.fatal(Some(&format!(\"failed to decode compiler output as json: \\\n-                                                `{}`\\noutput: {}\\nline: {}\",\n-                                                error,\n-                                                line,\n-                                                output)));\n-                }\n-            }\n-        } else {\n-            None\n-        })\n-        .collect()\n-}\n-\n pub fn parse_output(file_name: &str, output: &str, proc_res: &ProcRes) -> Vec<Error> {\n     output.lines()\n         .flat_map(|line| parse_line(file_name, line, output, proc_res))"}, {"sha": "e5bee56de803515969be0d1f7d529c4157f77f69", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1dc2015a9d71f3ef8191f6e0ca39b9154c87adfe/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc2015a9d71f3ef8191f6e0ca39b9154c87adfe/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=1dc2015a9d71f3ef8191f6e0ca39b9154c87adfe", "patch": "@@ -248,7 +248,7 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn run_cfail_test(&self) {\n-        let proc_res = self.compile_test();\n+        let proc_res = self.compile_test(&[]);\n         self.check_if_test_should_compile(&proc_res);\n         self.check_no_compiler_crash(&proc_res);\n \n@@ -267,7 +267,7 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn run_rfail_test(&self) {\n-        let proc_res = self.compile_test();\n+        let proc_res = self.compile_test(&[]);\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n@@ -309,7 +309,7 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn run_rpass_test(&self) {\n-        let proc_res = self.compile_test();\n+        let proc_res = self.compile_test(&[]);\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n@@ -336,7 +336,7 @@ impl<'test> TestCx<'test> {\n             return self.run_rpass_test();\n         }\n \n-        let mut proc_res = self.compile_test();\n+        let mut proc_res = self.compile_test(&[]);\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n@@ -578,7 +578,7 @@ impl<'test> TestCx<'test> {\n         let mut cmds = commands.join(\"\\n\");\n \n         // compile test file (it should have 'compile-flags:-g' in the header)\n-        let compiler_run_result = self.compile_test();\n+        let compiler_run_result = self.compile_test(&[]);\n         if !compiler_run_result.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &compiler_run_result);\n         }\n@@ -835,7 +835,7 @@ impl<'test> TestCx<'test> {\n \n     fn run_debuginfo_lldb_test_no_opt(&self) {\n         // compile test file (it should have 'compile-flags:-g' in the header)\n-        let compile_result = self.compile_test();\n+        let compile_result = self.compile_test(&[]);\n         if !compile_result.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &compile_result);\n         }\n@@ -1272,12 +1272,15 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n-    fn compile_test(&self) -> ProcRes {\n+    fn compile_test(&self, extra_args: &[&'static str]) -> ProcRes {\n         let mut rustc = self.make_compile_args(\n             &self.testpaths.file,\n             TargetLocation::ThisFile(self.make_exe_name()),\n         );\n \n+        if !extra_args.is_empty() {\n+            rustc.args(extra_args);\n+        }\n         rustc.arg(\"-L\").arg(&self.aux_output_dir_name());\n \n         match self.config.mode {\n@@ -1629,8 +1632,11 @@ impl<'test> TestCx<'test> {\n                 .iter()\n                 .any(|s| s.starts_with(\"--error-format\"))\n             {\n-                rustc.args(&[\"--error-format\", \"json\"]);\n-            },\n+                // In case no \"--error-format\" has been given in the test, we'll compile\n+                // a first time to get the compiler's output then compile with\n+                // \"--error-format json\" to check if all expected errors are actually there\n+                // and that no new one appeared.\n+            }\n             MirOpt => {\n                 rustc.args(&[\n                     \"-Zdump-mir=all\",\n@@ -2109,7 +2115,7 @@ impl<'test> TestCx<'test> {\n     fn run_codegen_units_test(&self) {\n         assert!(self.revision.is_none(), \"revisions not relevant here\");\n \n-        let proc_res = self.compile_test();\n+        let proc_res = self.compile_test(&[]);\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n@@ -2493,7 +2499,7 @@ impl<'test> TestCx<'test> {\n             .iter()\n             .any(|s| s.contains(\"--error-format\"));\n \n-        let proc_res = self.compile_test();\n+        let proc_res = self.compile_test(&[]);\n         self.check_if_test_should_compile(&proc_res);\n \n         let expected_stderr_path = self.expected_output_path(UI_STDERR);\n@@ -2505,13 +2511,8 @@ impl<'test> TestCx<'test> {\n         let normalized_stdout =\n             self.normalize_output(&proc_res.stdout, &self.props.normalize_stdout);\n \n-        let stderr = if explicit {\n-            proc_res.stderr.clone()\n-        } else {\n-            json::extract_rendered(&proc_res.stderr, &proc_res)\n-        };\n-\n-        let normalized_stderr = self.normalize_output(&stderr, &self.props.normalize_stderr);\n+        let normalized_stderr = self.normalize_output(&proc_res.stderr,\n+                                                      &self.props.normalize_stderr);\n \n         let mut errors = 0;\n         errors += self.compare_output(\"stdout\", &normalized_stdout, &expected_stdout);\n@@ -2544,6 +2545,7 @@ impl<'test> TestCx<'test> {\n             }\n         }\n         if !explicit {\n+            let proc_res = self.compile_test(&[\"--error-format\", \"json\"]);\n             if !expected_errors.is_empty() || !proc_res.status.success() {\n                 // \"// error-pattern\" comments\n                 self.check_expected_errors(expected_errors, &proc_res);\n@@ -2555,7 +2557,7 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn run_mir_opt_test(&self) {\n-        let proc_res = self.compile_test();\n+        let proc_res = self.compile_test(&[]);\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);"}]}