{"sha": "22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZTMxZjEwYzIyMTEyYjQ4NmY0OTk5ZjkwZTRiYTljN2UyM2I5YjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-18T19:49:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-18T19:49:33Z"}, "message": "Auto merge of #29083 - petrochenkov:stability3, r=alexcrichton\n\nWhat this patch does:\n- Stability annotations are now based on \"exported items\" supplied by rustc_privacy and not \"public items\". Exported items are as accessible for external crates as directly public items and should be annotated with stability attributes.\n- Trait impls require annotations now.\n- Reexports require annotations now.\n- Crates themselves didn't require annotations, now they do.\n- Exported macros are annotated now, but these annotations are not used yet.\n- Some useless annotations are detected and result in errors\n- Finally, some small bugs are fixed - deprecation propagates from stable deprecated parents, items in blocks are traversed correctly (fixes https://github.com/rust-lang/rust/issues/29034) + some code cleanup.", "tree": {"sha": "28e9ca0bf181ccff4f1e5fa6e929c1c714df9ce7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28e9ca0bf181ccff4f1e5fa6e929c1c714df9ce7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "html_url": "https://github.com/rust-lang/rust/commit/22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c68f646e957065fe5fabd4af850abaa8c4ee0af", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c68f646e957065fe5fabd4af850abaa8c4ee0af", "html_url": "https://github.com/rust-lang/rust/commit/3c68f646e957065fe5fabd4af850abaa8c4ee0af"}, {"sha": "64b90f81c3ec2cf5564ed8456d836516491b9d01", "url": "https://api.github.com/repos/rust-lang/rust/commits/64b90f81c3ec2cf5564ed8456d836516491b9d01", "html_url": "https://github.com/rust-lang/rust/commit/64b90f81c3ec2cf5564ed8456d836516491b9d01"}], "stats": {"total": 801, "additions": 633, "deletions": 168}, "files": [{"sha": "7863f1018116a2149ca57aaf0362426fe175bb09", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -130,10 +130,13 @@ pub struct Arc<T: ?Sized> {\n     _ptr: Shared<ArcInner<T>>,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: ?Sized + Sync + Send> Send for Arc<T> { }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: ?Sized + Sync + Send> Sync for Arc<T> { }\n \n #[cfg(not(stage0))] // remove cfg after new snapshot\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Arc<U>> for Arc<T> {}\n \n /// A weak pointer to an `Arc`.\n@@ -148,10 +151,13 @@ pub struct Weak<T: ?Sized> {\n     _ptr: Shared<ArcInner<T>>,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: ?Sized + Sync + Send> Send for Weak<T> { }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: ?Sized + Sync + Send> Sync for Weak<T> { }\n \n #[cfg(not(stage0))] // remove cfg after new snapshot\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Weak<U>> for Weak<T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1157,6 +1163,7 @@ mod tests {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> borrow::Borrow<T> for Arc<T> {\n     fn borrow(&self) -> &T {\n         &**self"}, {"sha": "65c66ebe768f5459c945f13fe98ef87cc7ac3fde", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -136,6 +136,9 @@ pub struct IntermediateBox<T: ?Sized> {\n     marker: marker::PhantomData<*mut T>,\n }\n \n+#[unstable(feature = \"placement_in\",\n+           reason = \"placement box design is still being worked out.\",\n+           issue = \"27779\")]\n impl<T> Place<T> for IntermediateBox<T> {\n     fn pointer(&mut self) -> *mut T {\n         self.ptr as *mut T\n@@ -170,19 +173,26 @@ fn make_place<T>() -> IntermediateBox<T> {\n     }\n }\n \n+#[unstable(feature = \"placement_in\",\n+           reason = \"placement box design is still being worked out.\",\n+           issue = \"27779\")]\n impl<T> BoxPlace<T> for IntermediateBox<T> {\n     fn make_place() -> IntermediateBox<T> {\n         make_place()\n     }\n }\n \n+#[unstable(feature = \"placement_in\",\n+           reason = \"placement box design is still being worked out.\",\n+           issue = \"27779\")]\n impl<T> InPlace<T> for IntermediateBox<T> {\n     type Owner = Box<T>;\n     unsafe fn finalize(self) -> Box<T> {\n         finalize(self)\n     }\n }\n \n+#[unstable(feature = \"placement_new_protocol\", issue = \"27779\")]\n impl<T> Boxed for Box<T> {\n     type Data = T;\n     type Place = IntermediateBox<T>;\n@@ -191,6 +201,9 @@ impl<T> Boxed for Box<T> {\n     }\n }\n \n+#[unstable(feature = \"placement_in\",\n+           reason = \"placement box design is still being worked out.\",\n+           issue = \"27779\")]\n impl<T> Placer<T> for ExchangeHeapSingleton {\n     type Place = IntermediateBox<T>;\n \n@@ -199,6 +212,9 @@ impl<T> Placer<T> for ExchangeHeapSingleton {\n     }\n }\n \n+#[unstable(feature = \"placement_in\",\n+           reason = \"placement box design is still being worked out.\",\n+           issue = \"27779\")]\n impl<T: ?Sized> Drop for IntermediateBox<T> {\n     fn drop(&mut self) {\n         if self.size > 0 {\n@@ -518,6 +534,7 @@ pub trait FnBox<A> {\n     fn call_box(self: Box<Self>, args: A) -> Self::Output;\n }\n \n+#[unstable(feature = \"fnbox\", reason = \"Newly introduced\", issue = \"0\")]\n impl<A,F> FnBox<A> for F\n     where F: FnOnce<A>\n {\n@@ -528,6 +545,7 @@ impl<A,F> FnBox<A> for F\n     }\n }\n \n+#[unstable(feature = \"fnbox\", reason = \"Newly introduced\", issue = \"0\")]\n impl<'a,A,R> FnOnce<A> for Box<FnBox<A,Output=R>+'a> {\n     type Output = R;\n \n@@ -536,6 +554,7 @@ impl<'a,A,R> FnOnce<A> for Box<FnBox<A,Output=R>+'a> {\n     }\n }\n \n+#[unstable(feature = \"fnbox\", reason = \"Newly introduced\", issue = \"0\")]\n impl<'a,A,R> FnOnce<A> for Box<FnBox<A,Output=R>+Send+'a> {\n     type Output = R;\n \n@@ -544,6 +563,7 @@ impl<'a,A,R> FnOnce<A> for Box<FnBox<A,Output=R>+Send+'a> {\n     }\n }\n \n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<Box<U>> for Box<T> {}\n \n #[stable(feature = \"box_slice_clone\", since = \"1.3.0\")]\n@@ -597,12 +617,14 @@ impl<T: Clone> Clone for Box<[T]> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> borrow::Borrow<T> for Box<T> {\n     fn borrow(&self) -> &T {\n         &**self\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> borrow::BorrowMut<T> for Box<T> {\n     fn borrow_mut(&mut self) -> &mut T {\n         &mut **self"}, {"sha": "7abdc447ee5561790a4b0f3534f588b51e65d850", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -191,10 +191,13 @@ pub struct Rc<T: ?Sized> {\n     _ptr: Shared<RcBox<T>>,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> !marker::Send for Rc<T> {}\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> !marker::Sync for Rc<T> {}\n \n #[cfg(not(stage0))] // remove cfg after new snapshot\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<Rc<U>> for Rc<T> {}\n \n impl<T> Rc<T> {\n@@ -723,10 +726,13 @@ pub struct Weak<T: ?Sized> {\n     _ptr: Shared<RcBox<T>>,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> !marker::Send for Weak<T> {}\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> !marker::Sync for Weak<T> {}\n \n #[cfg(not(stage0))] // remove cfg after new snapshot\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<Weak<U>> for Weak<T> {}\n \n impl<T: ?Sized> Weak<T> {\n@@ -1126,6 +1132,7 @@ mod tests {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> borrow::Borrow<T> for Rc<T> {\n     fn borrow(&self) -> &T {\n         &**self"}, {"sha": "db555fe61aa374a23be219361f58979c92678caf", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -731,6 +731,7 @@ impl<'a, T: 'a> DoubleEndedIterator for Drain<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> From<Vec<T>> for BinaryHeap<T> {\n     fn from(vec: Vec<T>) -> BinaryHeap<T> {\n         let mut heap = BinaryHeap { data: vec };\n@@ -743,6 +744,7 @@ impl<T: Ord> From<Vec<T>> for BinaryHeap<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> From<BinaryHeap<T>> for Vec<T> {\n     fn from(heap: BinaryHeap<T>) -> Vec<T> {\n         heap.data"}, {"sha": "c26b42d016a815400ccba10b803df54049f55fbf", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -24,6 +24,7 @@ use fmt;\n \n use self::Cow::*;\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::borrow::{Borrow, BorrowMut};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "dc4b7a1c3f7f388933926dae684cc2e32a581c10", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -451,7 +451,6 @@ impl<K, V> Node<K, V> {\n }\n \n // FIXME(gereeter) Write an efficient clone_from\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Clone, V: Clone> Clone for Node<K, V> {\n     fn clone(&self) -> Node<K, V> {\n         let mut ret = if self.is_leaf() {"}, {"sha": "1450b8efb0fb28bab46869444afb6f7756ffdfd2", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -475,13 +475,23 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-pub use core::fmt::{Formatter, Result, Write, rt};\n+#[unstable(feature = \"fmt_internals\", issue = \"0\")]\n+pub use core::fmt::rt;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use core::fmt::{Formatter, Result, Write};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::fmt::{Octal, Binary};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::fmt::{Display, Debug};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::fmt::{LowerHex, UpperHex, Pointer};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::fmt::{LowerExp, UpperExp};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::fmt::Error;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::fmt::{ArgumentV1, Arguments, write, radix, Radix, RadixFmt};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::fmt::{DebugList, DebugMap, DebugSet, DebugStruct, DebugTuple};\n \n use string;"}, {"sha": "dfdf36e6f605beaafc615208a1a606f5d01112f1", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -107,11 +107,13 @@ pub mod vec_deque;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod btree_map {\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use btree::map::*;\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod btree_set {\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use btree::set::*;\n }\n "}, {"sha": "a689c66eeaff59c6de17e747932306f3debb2a3d", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -857,6 +857,7 @@ impl<A> DoubleEndedIterator for IntoIter<A> {\n     fn next_back(&mut self) -> Option<A> { self.list.pop_back() }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A> ExactSizeIterator for IntoIter<A> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -890,6 +891,7 @@ impl<'a, T> IntoIterator for &'a LinkedList<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> IntoIterator for &'a mut LinkedList<T> {\n     type Item = &'a mut T;\n     type IntoIter = IterMut<'a, T>;"}, {"sha": "ec8881279831a24c902eede8ce7163553a6f98f0", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -102,12 +102,18 @@ use core::slice as core_slice;\n use borrow::{Borrow, BorrowMut, ToOwned};\n use vec::Vec;\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::slice::{Chunks, Windows};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::slice::{Iter, IterMut};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::slice::{SplitMut, ChunksMut, Split};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::slice::{SplitN, RSplitN, SplitNMut, RSplitNMut};\n+#[unstable(feature = \"ref_slice\", issue = \"27774\")]\n #[allow(deprecated)]\n pub use core::slice::{bytes, mut_ref_slice, ref_slice};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::slice::{from_raw_parts, from_raw_parts_mut};\n \n ////////////////////////////////////////////////////////////////////////////////\n@@ -860,6 +866,9 @@ pub trait SliceConcatExt<T: ?Sized> {\n     fn connect(&self, sep: &T) -> Self::Output;\n }\n \n+#[unstable(feature = \"slice_concat_ext\",\n+           reason = \"trait should not have to exist\",\n+           issue = \"27747\")]\n impl<T: Clone, V: Borrow<[T]>> SliceConcatExt<T> for [V] {\n     type Output = Vec<T>;\n "}, {"sha": "c16ce61a1365a3aceb2888aa1eeba7908d9bf77c", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -37,19 +37,33 @@ use vec::Vec;\n use slice::SliceConcatExt;\n use boxed::Box;\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::{FromStr, Utf8Error};\n #[allow(deprecated)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::{Lines, LinesAny, CharRange};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::{Split, RSplit};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::{SplitN, RSplitN};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::{SplitTerminator, RSplitTerminator};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::{Matches, RMatches};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::{MatchIndices, RMatchIndices};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::{from_utf8, Chars, CharIndices, Bytes};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::{from_utf8_unchecked, ParseBoolError};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use rustc_unicode::str::{SplitWhitespace};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::pattern;\n \n+#[unstable(feature = \"slice_concat_ext\",\n+           reason = \"trait should not have to exist\",\n+           issue = \"27747\")]\n impl<S: Borrow<str>> SliceConcatExt<str> for [S] {\n     type Output = String;\n "}, {"sha": "84667e04e04cbc2fcaeefb5e2c199312ba502fa1", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -949,6 +949,9 @@ impl Extend<String> for String {\n }\n \n /// A convenience impl that delegates to the impl for `&str`\n+#[unstable(feature = \"pattern\",\n+           reason = \"API not fully fleshed out and ready to be stabilized\",\n+           issue = \"27721\")]\n impl<'a, 'b> Pattern<'a> for &'b String {\n     type Searcher = <&'b str as Pattern<'a>>::Searcher;\n \n@@ -1143,24 +1146,28 @@ impl FromStr for String {\n     }\n }\n \n+#[stable(feature = \"str_parse_error\", since = \"1.5.0\")]\n impl Clone for ParseError {\n     fn clone(&self) -> ParseError {\n         match *self {}\n     }\n }\n \n+#[stable(feature = \"str_parse_error\", since = \"1.5.0\")]\n impl fmt::Debug for ParseError {\n     fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {\n         match *self {}\n     }\n }\n \n+#[stable(feature = \"str_parse_error\", since = \"1.5.0\")]\n impl PartialEq for ParseError {\n     fn eq(&self, _: &ParseError) -> bool {\n         match *self {}\n     }\n }\n \n+#[stable(feature = \"str_parse_error\", since = \"1.5.0\")]\n impl Eq for ParseError {}\n \n /// A generic trait for converting a value to a string\n@@ -1287,7 +1294,9 @@ pub struct Drain<'a> {\n     iter: Chars<'a>,\n }\n \n+#[unstable(feature = \"drain\", reason = \"recently added\", issue = \"27711\")]\n unsafe impl<'a> Sync for Drain<'a> {}\n+#[unstable(feature = \"drain\", reason = \"recently added\", issue = \"27711\")]\n unsafe impl<'a> Send for Drain<'a> {}\n \n #[unstable(feature = \"drain\", reason = \"recently added\", issue = \"27711\")]"}, {"sha": "a6d0de18eb6edd2347bb7fa4acdb0e4d97e61819", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -1471,12 +1471,14 @@ impl<'a, T> FromIterator<T> for Cow<'a, [T]> where T: Clone {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: 'a> IntoCow<'a, [T]> for Vec<T> where T: Clone {\n     fn into_cow(self) -> Cow<'a, [T]> {\n         Cow::Owned(self)\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> IntoCow<'a, [T]> for &'a [T] where T: Clone {\n     fn into_cow(self) -> Cow<'a, [T]> {\n         Cow::Borrowed(self)\n@@ -1495,7 +1497,9 @@ pub struct IntoIter<T> {\n     end: *const T\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: Send> Send for IntoIter<T> { }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: Sync> Sync for IntoIter<T> { }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1590,7 +1594,9 @@ pub struct Drain<'a, T: 'a> {\n     vec: *mut Vec<T>,\n }\n \n+#[unstable(feature = \"drain\", reason = \"recently added\", issue = \"27711\")]\n unsafe impl<'a, T: Sync> Sync for Drain<'a, T> {}\n+#[unstable(feature = \"drain\", reason = \"recently added\", issue = \"27711\")]\n unsafe impl<'a, T: Send> Send for Drain<'a, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "1064fcdd9178bf805eeb0566e022901487b34dd7", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -1662,6 +1662,7 @@ pub struct Iter<'a, T:'a> {\n }\n \n // FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n     fn clone(&self) -> Iter<'a, T> {\n         Iter {\n@@ -1805,7 +1806,9 @@ pub struct Drain<'a, T: 'a> {\n     deque: *mut VecDeque<T>,\n }\n \n+#[unstable(feature = \"drain\", issue = \"27711\")]\n unsafe impl<'a, T: Sync> Sync for Drain<'a, T> {}\n+#[unstable(feature = \"drain\", issue = \"27711\")]\n unsafe impl<'a, T: Send> Send for Drain<'a, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "61c64ab8deebd709ba1d75522ba3154d81a538be", "filename": "src/libcore/any.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -97,6 +97,7 @@ pub trait Any: Reflect + 'static {\n     fn get_type_id(&self) -> TypeId;\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Reflect + 'static> Any for T {\n     fn get_type_id(&self) -> TypeId { TypeId::of::<T>() }\n }"}, {"sha": "789b75836d0a70a43db847db7014d03f804e5c92", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -791,6 +791,7 @@ pub struct UnsafeCell<T: ?Sized> {\n     value: T,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> !Sync for UnsafeCell<T> {}\n \n impl<T> UnsafeCell<T> {"}, {"sha": "525f9490b17df10b6f1902269c03a2e73455010d", "filename": "src/libcore/char.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -152,6 +152,9 @@ pub trait CharExt {\n     fn encode_utf16(self, dst: &mut [u16]) -> Option<usize>;\n }\n \n+#[unstable(feature = \"core_char_ext\",\n+           reason = \"the stable interface is `impl char` in later crate\",\n+           issue = \"27701\")]\n impl CharExt for char {\n     #[inline]\n     fn is_digit(self, radix: u32) -> bool {"}, {"sha": "dfd79895747f44363747313a4ce4a40c08262d38", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -24,10 +24,13 @@ use slice;\n use str;\n use self::rt::v1::Alignment;\n \n+#[unstable(feature = \"fmt_radix\", issue = \"27728\")]\n pub use self::num::radix;\n+#[unstable(feature = \"fmt_radix\", issue = \"27728\")]\n pub use self::num::Radix;\n+#[unstable(feature = \"fmt_radix\", issue = \"27728\")]\n pub use self::num::RadixFmt;\n-\n+#[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n pub use self::builders::{DebugStruct, DebugTuple, DebugSet, DebugList, DebugMap};\n \n mod num;\n@@ -170,6 +173,8 @@ pub struct ArgumentV1<'a> {\n     formatter: fn(&Void, &mut Formatter) -> Result,\n }\n \n+#[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n+           issue = \"0\")]\n impl<'a> Clone for ArgumentV1<'a> {\n     fn clone(&self) -> ArgumentV1<'a> {\n         *self\n@@ -1568,6 +1573,7 @@ impl Debug for () {\n         f.pad(\"()\")\n     }\n }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Debug for PhantomData<T> {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         f.pad(\"PhantomData\")"}, {"sha": "bfae64f24cfe6fc56434a33100565ee07ab44b59", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -264,6 +264,7 @@ const DEC_DIGITS_LUT: &'static[u8] =\n \n macro_rules! impl_Display {\n     ($($t:ident),*: $conv_fn:ident) => ($(\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl fmt::Display for $t {\n         #[allow(unused_comparisons)]\n         fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "3cb0691b4216046ddd6aff1962863b6d2d099f47", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -75,6 +75,7 @@ use prelude::v1::*;\n \n use mem;\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::sip::SipHasher;\n \n mod sip;"}, {"sha": "80774fc2acf1a40869663e69c36c4d67d6202cdf", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -3604,6 +3604,7 @@ impl<I: Iterator> Peekable<I> {\n     ///\n     /// assert_eq!(iter.is_empty(), true);\n     /// ```\n+    #[unstable(feature = \"core\", issue = \"27701\")]\n     #[inline]\n     pub fn is_empty(&mut self) -> bool {\n         self.peek().is_none()\n@@ -4107,6 +4108,9 @@ pub trait Step: PartialOrd + Sized {\n \n macro_rules! step_impl_unsigned {\n     ($($t:ty)*) => ($(\n+        #[unstable(feature = \"step_trait\",\n+                   reason = \"likely to be replaced by finer-grained traits\",\n+                   issue = \"27741\")]\n         impl Step for $t {\n             #[inline]\n             fn step(&self, by: &$t) -> Option<$t> {\n@@ -4134,6 +4138,9 @@ macro_rules! step_impl_unsigned {\n }\n macro_rules! step_impl_signed {\n     ($($t:ty)*) => ($(\n+        #[unstable(feature = \"step_trait\",\n+                   reason = \"likely to be replaced by finer-grained traits\",\n+                   issue = \"27741\")]\n         impl Step for $t {\n             #[inline]\n             fn step(&self, by: &$t) -> Option<$t> {\n@@ -4173,6 +4180,9 @@ macro_rules! step_impl_signed {\n \n macro_rules! step_impl_no_between {\n     ($($t:ty)*) => ($(\n+        #[unstable(feature = \"step_trait\",\n+                   reason = \"likely to be replaced by finer-grained traits\",\n+                   issue = \"27741\")]\n         impl Step for $t {\n             #[inline]\n             fn step(&self, by: &$t) -> Option<$t> {"}, {"sha": "e41d63c7e6ee08f0c89327d0d624c1f6c0ca6b2f", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -31,9 +31,12 @@ pub unsafe trait Send {\n     // empty.\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl Send for .. { }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> !Send for *const T { }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> !Send for *mut T { }\n \n /// Types with a constant size known at compile-time.\n@@ -223,48 +226,59 @@ pub unsafe trait Sync {\n     // Empty\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl Sync for .. { }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> !Sync for *const T { }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> !Sync for *mut T { }\n \n macro_rules! impls{\n     ($t: ident) => (\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<T:?Sized> Hash for $t<T> {\n             #[inline]\n             fn hash<H: Hasher>(&self, _: &mut H) {\n             }\n         }\n \n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<T:?Sized> cmp::PartialEq for $t<T> {\n             fn eq(&self, _other: &$t<T>) -> bool {\n                 true\n             }\n         }\n \n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<T:?Sized> cmp::Eq for $t<T> {\n         }\n \n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<T:?Sized> cmp::PartialOrd for $t<T> {\n             fn partial_cmp(&self, _other: &$t<T>) -> Option<cmp::Ordering> {\n                 Option::Some(cmp::Ordering::Equal)\n             }\n         }\n \n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<T:?Sized> cmp::Ord for $t<T> {\n             fn cmp(&self, _other: &$t<T>) -> cmp::Ordering {\n                 cmp::Ordering::Equal\n             }\n         }\n \n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<T:?Sized> Copy for $t<T> { }\n \n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<T:?Sized> Clone for $t<T> {\n             fn clone(&self) -> $t<T> {\n                 $t\n             }\n         }\n \n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<T:?Sized> Default for $t<T> {\n             fn default() -> $t<T> {\n                 $t\n@@ -387,7 +401,9 @@ impls! { PhantomData }\n mod impls {\n     use super::{Send, Sync, Sized};\n \n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     unsafe impl<'a, T: Sync + ?Sized> Send for &'a T {}\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     unsafe impl<'a, T: Send + ?Sized> Send for &'a mut T {}\n }\n \n@@ -433,4 +449,7 @@ mod impls {\n                             ensure all type parameters are bounded by `Any`\"]\n pub trait Reflect {}\n \n+#[unstable(feature = \"reflect_marker\",\n+           reason = \"requires RFC and more experience\",\n+           issue = \"27749\")]\n impl Reflect for .. { }"}, {"sha": "1261bd0388cc9329162727388d299feb2020a77b", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -141,6 +141,9 @@ pub mod consts {\n     pub const LN_10: f32 = 2.30258509299404568401799145468436421_f32;\n }\n \n+#[unstable(feature = \"core_float\",\n+           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n+           issue = \"27702\")]\n impl Float for f32 {\n     #[inline]\n     fn nan() -> f32 { NAN }"}, {"sha": "c4a24631552b030008b4817cfcea21ef6c3c1348", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -141,6 +141,9 @@ pub mod consts {\n     pub const LN_10: f64 = 2.30258509299404568401799145468436421_f64;\n }\n \n+#[unstable(feature = \"core_float\",\n+           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n+           issue = \"27702\")]\n impl Float for f64 {\n     #[inline]\n     fn nan() -> f64 { NAN }"}, {"sha": "fdff49b1a5779b7c1b54cec8b12a92c36fbfef43", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -77,10 +77,16 @@ pub trait One: Sized {\n \n macro_rules! zero_one_impl {\n     ($($t:ty)*) => ($(\n+        #[unstable(feature = \"zero_one\",\n+                   reason = \"unsure of placement, wants to use associated constants\",\n+                   issue = \"27739\")]\n         impl Zero for $t {\n             #[inline]\n             fn zero() -> Self { 0 }\n         }\n+        #[unstable(feature = \"zero_one\",\n+                   reason = \"unsure of placement, wants to use associated constants\",\n+                   issue = \"27739\")]\n         impl One for $t {\n             #[inline]\n             fn one() -> Self { 1 }\n@@ -91,10 +97,16 @@ zero_one_impl! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n \n macro_rules! zero_one_impl_float {\n     ($($t:ty)*) => ($(\n+        #[unstable(feature = \"zero_one\",\n+                   reason = \"unsure of placement, wants to use associated constants\",\n+                   issue = \"27739\")]\n         impl Zero for $t {\n             #[inline]\n             fn zero() -> Self { 0.0 }\n         }\n+        #[unstable(feature = \"zero_one\",\n+                   reason = \"unsure of placement, wants to use associated constants\",\n+                   issue = \"27739\")]\n         impl One for $t {\n             #[inline]\n             fn one() -> Self { 1.0 }\n@@ -1938,6 +1950,7 @@ impl fmt::Display for ParseIntError {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use num::dec2flt::ParseFloatError;\n \n // Conversion traits for primitive integer and float types"}, {"sha": "c379b8744acd4bf2201ef62e5d53405804a01aed", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -894,6 +894,7 @@ pub trait Shr<RHS> {\n \n macro_rules! shr_impl {\n     ($t:ty, $f:ty) => (\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Shr<$f> for $t {\n             type Output = $t;\n \n@@ -1731,6 +1732,7 @@ impl<'a, T: ?Sized> DerefMut for &'a mut T {\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n pub trait Fn<Args> : FnMut<Args> {\n     /// This is called when the call operator is used.\n+    #[unstable(feature = \"core\", issue = \"27701\")]\n     extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\n }\n \n@@ -1741,6 +1743,7 @@ pub trait Fn<Args> : FnMut<Args> {\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n pub trait FnMut<Args> : FnOnce<Args> {\n     /// This is called when the call operator is used.\n+    #[unstable(feature = \"core\", issue = \"27701\")]\n     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n }\n \n@@ -1751,16 +1754,19 @@ pub trait FnMut<Args> : FnOnce<Args> {\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n pub trait FnOnce<Args> {\n     /// The returned type after the call operator is used.\n+    #[unstable(feature = \"core\", issue = \"27701\")]\n     type Output;\n \n     /// This is called when the call operator is used.\n+    #[unstable(feature = \"core\", issue = \"27701\")]\n     extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n }\n \n mod impls {\n     use marker::Sized;\n     use super::{Fn, FnMut, FnOnce};\n \n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<'a,A,F:?Sized> Fn<A> for &'a F\n         where F : Fn<A>\n     {\n@@ -1769,6 +1775,7 @@ mod impls {\n         }\n     }\n \n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<'a,A,F:?Sized> FnMut<A> for &'a F\n         where F : Fn<A>\n     {\n@@ -1777,6 +1784,7 @@ mod impls {\n         }\n     }\n \n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<'a,A,F:?Sized> FnOnce<A> for &'a F\n         where F : Fn<A>\n     {\n@@ -1787,6 +1795,7 @@ mod impls {\n         }\n     }\n \n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<'a,A,F:?Sized> FnMut<A> for &'a mut F\n         where F : FnMut<A>\n     {\n@@ -1795,6 +1804,7 @@ mod impls {\n         }\n     }\n \n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<'a,A,F:?Sized> FnOnce<A> for &'a mut F\n         where F : FnMut<A>\n     {\n@@ -1814,25 +1824,34 @@ pub trait CoerceUnsized<T> {\n }\n \n // &mut T -> &mut U\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<&'a mut U> for &'a mut T {}\n // &mut T -> &U\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<'a, 'b: 'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b mut T {}\n // &mut T -> *mut U\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for &'a mut T {}\n // &mut T -> *const U\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for &'a mut T {}\n \n // &T -> &U\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<'a, 'b: 'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b T {}\n // &T -> *const U\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for &'a T {}\n \n // *mut T -> *mut U\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\n // *mut T -> *const U\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *mut T {}\n \n // *const T -> *const U\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *const T {}\n \n /// Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions"}, {"sha": "75db6fceab9b7eaaf9a2e6db2c2903b51782e3f1", "filename": "src/libcore/prelude/v1.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fv1.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -17,23 +17,37 @@\n #![stable(feature = \"core_prelude\", since = \"1.4.0\")]\n \n // Reexported core operators\n+#[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)] pub use marker::{Copy, Send, Sized, Sync};\n+#[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)] pub use ops::{Drop, Fn, FnMut, FnOnce};\n \n // Reexported functions\n+#[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)] pub use mem::drop;\n \n // Reexported types and traits\n+#[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)] pub use clone::Clone;\n+#[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)] pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n+#[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)] pub use convert::{AsRef, AsMut, Into, From};\n+#[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)] pub use default::Default;\n+#[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)] pub use iter::{Iterator, Extend, IntoIterator};\n+#[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)] pub use iter::{DoubleEndedIterator, ExactSizeIterator};\n+#[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)] pub use option::Option::{self, Some, None};\n+#[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)] pub use result::Result::{self, Ok, Err};\n \n // Reexported extension traits for primitive types\n+#[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)] pub use slice::SliceExt;\n+#[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)] pub use str::StrExt;\n+#[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)] pub use char::CharExt;"}, {"sha": "53ef9cd09026b2764dea77af2859e570b33e6260", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -40,6 +40,7 @@ pub use intrinsics::copy;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use intrinsics::write_bytes;\n \n+#[unstable(feature = \"drop_in_place\", reason = \"just exposed, needs FCP\", issue = \"27908\")]\n pub use intrinsics::drop_in_place;\n \n /// Creates a null raw pointer."}, {"sha": "d6b6a79d6a869c0a50471efcce32b1e2f022a34e", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -870,6 +870,7 @@ impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n     fn clone(&self) -> Iter<'a, T> { Iter { inner: self.inner } }\n }"}, {"sha": "efb782fece851f11327c0abe704cdfbb2d7bfdd3", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -154,6 +154,9 @@ macro_rules! slice_ref {\n     }};\n }\n \n+#[unstable(feature = \"core_slice_ext\",\n+           reason = \"stable interface provided by `impl [T]` in later crates\",\n+           issue = \"27701\")]\n impl<T> SliceExt for [T] {\n     type Item = T;\n \n@@ -796,7 +799,9 @@ pub struct Iter<'a, T: 'a> {\n     _marker: marker::PhantomData<&'a T>,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<'a, T: Sync> Sync for Iter<'a, T> {}\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<'a, T: Sync> Send for Iter<'a, T> {}\n \n impl<'a, T> Iter<'a, T> {\n@@ -842,7 +847,9 @@ pub struct IterMut<'a, T: 'a> {\n     _marker: marker::PhantomData<&'a mut T>,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<'a, T: Sync> Sync for IterMut<'a, T> {}\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<'a, T: Send> Send for IterMut<'a, T> {}\n \n impl<'a, T> IterMut<'a, T> {"}, {"sha": "f82b9d79d5cd482f41d907584f3ccc6a834f8ae4", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -1440,6 +1440,9 @@ fn slice_error_fail(s: &str, begin: usize, end: usize) -> ! {\n           begin, end, s);\n }\n \n+#[unstable(feature = \"core_str_ext\",\n+           reason = \"stable interface provided by `impl str` in later crates\",\n+           issue = \"27701\")]\n impl StrExt for str {\n     #[inline]\n     fn contains<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool {"}, {"sha": "21b76c1f4bec15f8ac37c049c351da5d1f3a25d7", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -86,13 +86,15 @@ pub struct AtomicBool {\n     v: UnsafeCell<usize>,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Default for AtomicBool {\n     fn default() -> Self {\n         Self::new(Default::default())\n     }\n }\n \n // Send is implicitly implemented for AtomicBool.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl Sync for AtomicBool {}\n \n /// A signed integer type which can be safely shared between threads.\n@@ -101,13 +103,15 @@ pub struct AtomicIsize {\n     v: UnsafeCell<isize>,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Default for AtomicIsize {\n     fn default() -> Self {\n         Self::new(Default::default())\n     }\n }\n \n // Send is implicitly implemented for AtomicIsize.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl Sync for AtomicIsize {}\n \n /// An unsigned integer type which can be safely shared between threads.\n@@ -116,13 +120,15 @@ pub struct AtomicUsize {\n     v: UnsafeCell<usize>,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Default for AtomicUsize {\n     fn default() -> Self {\n         Self::new(Default::default())\n     }\n }\n \n // Send is implicitly implemented for AtomicUsize.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl Sync for AtomicUsize {}\n \n /// A raw pointer type which can be safely shared between threads.\n@@ -131,13 +137,16 @@ pub struct AtomicPtr<T> {\n     p: UnsafeCell<*mut T>,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for AtomicPtr<T> {\n     fn default() -> AtomicPtr<T> {\n         AtomicPtr::new(::ptr::null_mut())\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T> Send for AtomicPtr<T> {}\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T> Sync for AtomicPtr<T> {}\n \n /// Atomic memory orderings"}, {"sha": "4127e182e1d0f8567152c043f5702854cca531f2", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -27,8 +27,6 @@\n //! * `Ord`\n //! * `Default`\n \n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n use clone::Clone;\n use cmp::*;\n use cmp::Ordering::*;"}, {"sha": "02e1c7739c4e45c6cb9c6b4de380108624b4584a", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 152, "deletions": 130, "changes": 282, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -30,8 +30,8 @@ use syntax::attr::{self, Stability, AttrMetaMethods};\n use util::nodemap::{DefIdMap, FnvHashSet, FnvHashMap};\n \n use rustc_front::hir;\n-use rustc_front::hir::{FnDecl, Block, Crate, Item, Generics, StructField, Variant};\n-use rustc_front::visit::{self, FnKind, Visitor};\n+use rustc_front::hir::{Block, Crate, Item, Generics, StructField, Variant};\n+use rustc_front::visit::{self, Visitor};\n \n use std::mem::replace;\n use std::cmp::Ordering;\n@@ -48,6 +48,16 @@ impl StabilityLevel {\n     }\n }\n \n+#[derive(PartialEq)]\n+enum AnnotationKind {\n+    // Annotation is required if not inherited from unstable parents\n+    Required,\n+    // Annotation is useless, reject it\n+    Prohibited,\n+    // Annotation itself is useless, but it can be propagated to children\n+    Container,\n+}\n+\n /// A stability index, giving the stability level for items and methods.\n pub struct Index<'tcx> {\n     /// This is mostly a cache, except the stabilities of local items\n@@ -64,174 +74,186 @@ struct Annotator<'a, 'tcx: 'a> {\n     index: &'a mut Index<'tcx>,\n     parent: Option<&'tcx Stability>,\n     export_map: &'a PublicItems,\n+    in_trait_impl: bool,\n+    in_enum: bool,\n }\n \n impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n     // Determine the stability for a node based on its attributes and inherited\n     // stability. The stability is recorded in the index and used as the parent.\n-    fn annotate<F>(&mut self, id: NodeId, use_parent: bool,\n-                   attrs: &Vec<Attribute>, item_sp: Span, f: F, required: bool) where\n-        F: FnOnce(&mut Annotator),\n+    fn annotate<F>(&mut self, id: NodeId, attrs: &Vec<Attribute>,\n+                   item_sp: Span, kind: AnnotationKind, visit_children: F)\n+        where F: FnOnce(&mut Annotator)\n     {\n         if self.index.staged_api[&LOCAL_CRATE] {\n             debug!(\"annotate(id = {:?}, attrs = {:?})\", id, attrs);\n-            match attr::find_stability(self.tcx.sess.diagnostic(), attrs, item_sp) {\n-                Some(mut stab) => {\n-                    debug!(\"annotate: found {:?}\", stab);\n-                    // if parent is deprecated and we're not, inherit this by merging\n-                    // deprecated_since and its reason.\n-                    if let Some(parent_stab) = self.parent {\n-                        if parent_stab.depr.is_some()\n-                        && stab.depr.is_none() {\n-                            stab.depr = parent_stab.depr.clone()\n-                        }\n+            if let Some(mut stab) = attr::find_stability(self.tcx.sess.diagnostic(),\n+                                                         attrs, item_sp) {\n+                // Error if prohibited, or can't inherit anything from a container\n+                if kind == AnnotationKind::Prohibited ||\n+                   (kind == AnnotationKind::Container &&\n+                    stab.level.is_stable() &&\n+                    stab.depr.is_none()) {\n+                    self.tcx.sess.span_err(item_sp, \"This stability annotation is useless\");\n+                }\n+\n+                debug!(\"annotate: found {:?}\", stab);\n+                // If parent is deprecated and we're not, inherit this by merging\n+                // deprecated_since and its reason.\n+                if let Some(parent_stab) = self.parent {\n+                    if parent_stab.depr.is_some() && stab.depr.is_none() {\n+                        stab.depr = parent_stab.depr.clone()\n                     }\n+                }\n \n-                    let stab = self.tcx.intern_stability(stab);\n-\n-                    // Check if deprecated_since < stable_since. If it is,\n-                    // this is *almost surely* an accident.\n-                    let deprecated_predates_stable = match (&stab.depr, &stab.level) {\n-                        (&Some(attr::Deprecation {since: ref dep_since, ..}),\n-                               &attr::Stable {since: ref stab_since}) => {\n-                            // explicit version of iter::order::lt to handle parse errors properly\n-                            let mut is_less = false;\n-                            for (dep_v, stab_v) in dep_since.split(\".\").zip(stab_since.split(\".\")) {\n-                                match (dep_v.parse::<u64>(), stab_v.parse::<u64>()) {\n-                                    (Ok(dep_v), Ok(stab_v)) => match dep_v.cmp(&stab_v) {\n-                                        Ordering::Less => {\n-                                            is_less = true;\n-                                            break;\n-                                        }\n-                                        Ordering::Equal => { continue; }\n-                                        Ordering::Greater => { break; }\n-                                    },\n-                                    _ => {\n-                                        self.tcx.sess.span_err(item_sp,\n-                                            \"Invalid stability or deprecation version found\");\n-                                        // act like it isn't less because the question is now\n-                                        // nonsensical, and this makes us not do anything else\n-                                        // interesting.\n-                                        break;\n-                                    }\n+                let stab = self.tcx.intern_stability(stab);\n+\n+                // Check if deprecated_since < stable_since. If it is,\n+                // this is *almost surely* an accident.\n+                if let (&Some(attr::Deprecation {since: ref dep_since, ..}),\n+                        &attr::Stable {since: ref stab_since}) = (&stab.depr, &stab.level) {\n+                    // Explicit version of iter::order::lt to handle parse errors properly\n+                    for (dep_v, stab_v) in dep_since.split(\".\").zip(stab_since.split(\".\")) {\n+                        if let (Ok(dep_v), Ok(stab_v)) = (dep_v.parse::<u64>(), stab_v.parse()) {\n+                            match dep_v.cmp(&stab_v) {\n+                                Ordering::Less => {\n+                                    self.tcx.sess.span_err(item_sp, \"An API can't be stabilized \\\n+                                                                     after it is deprecated\");\n+                                    break\n                                 }\n+                                Ordering::Equal => continue,\n+                                Ordering::Greater => break,\n                             }\n-                            is_less\n-                        },\n-                        _ => false,\n-                    };\n-\n-                    if deprecated_predates_stable {\n-                        self.tcx.sess.span_err(item_sp,\n-                            \"An API can't be stabilized after it is deprecated\");\n+                        } else {\n+                            // Act like it isn't less because the question is now nonsensical,\n+                            // and this makes us not do anything else interesting.\n+                            self.tcx.sess.span_err(item_sp, \"Invalid stability or deprecation \\\n+                                                             version found\");\n+                            break\n+                        }\n                     }\n+                }\n \n-                    let def_id = self.tcx.map.local_def_id(id);\n-                    self.index.map.insert(def_id, Some(stab));\n-\n-                    // Don't inherit #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-                    if !stab.level.is_stable() {\n-                        let parent = replace(&mut self.parent, Some(stab));\n-                        f(self);\n-                        self.parent = parent;\n-                    } else {\n-                        f(self);\n+                let def_id = self.tcx.map.local_def_id(id);\n+                self.index.map.insert(def_id, Some(stab));\n+\n+                let parent = replace(&mut self.parent, Some(stab));\n+                visit_children(self);\n+                self.parent = parent;\n+            } else {\n+                debug!(\"annotate: not found, parent = {:?}\", self.parent);\n+                let mut is_error = kind == AnnotationKind::Required &&\n+                                   self.export_map.contains(&id) &&\n+                                   !self.tcx.sess.opts.test;\n+                if let Some(stab) = self.parent {\n+                    if stab.level.is_unstable() {\n+                        let def_id = self.tcx.map.local_def_id(id);\n+                        self.index.map.insert(def_id, Some(stab));\n+                        is_error = false;\n                     }\n                 }\n-                None => {\n-                    debug!(\"annotate: not found, use_parent = {:?}, parent = {:?}\",\n-                           use_parent, self.parent);\n-                    if use_parent {\n-                        if let Some(stab) = self.parent {\n-                            let def_id = self.tcx.map.local_def_id(id);\n-                            self.index.map.insert(def_id, Some(stab));\n-                        } else if self.index.staged_api[&LOCAL_CRATE] && required\n-                            && self.export_map.contains(&id)\n-                            && !self.tcx.sess.opts.test {\n-                                self.tcx.sess.span_err(item_sp,\n-                                                       \"This node does not \\\n-                                                        have a stability attribute\");\n-                            }\n-                    }\n-                    f(self);\n+                if is_error {\n+                    self.tcx.sess.span_err(item_sp, \"This node does not have \\\n+                                                     a stability attribute\");\n                 }\n+                visit_children(self);\n             }\n         } else {\n-            // Emit warnings for non-staged-api crates. These should be errors.\n+            // Emit errors for non-staged-api crates.\n             for attr in attrs {\n                 let tag = attr.name();\n                 if tag == \"unstable\" || tag == \"stable\" || tag == \"deprecated\" {\n                     attr::mark_used(attr);\n-                    self.tcx.sess.span_err(attr.span(),\n-                                       \"stability attributes may not be used outside \\\n-                                        of the standard library\");\n+                    self.tcx.sess.span_err(attr.span(), \"stability attributes may not be used \\\n+                                                         outside of the standard library\");\n                 }\n             }\n-            f(self);\n+            visit_children(self);\n         }\n     }\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for Annotator<'a, 'tcx> {\n     fn visit_item(&mut self, i: &Item) {\n-        // FIXME (#18969): the following is a hack around the fact\n-        // that we cannot currently annotate the stability of\n-        // `deriving`.  Basically, we do *not* allow stability\n-        // inheritance on trait implementations, so that derived\n-        // implementations appear to be unannotated. This then allows\n-        // derived implementations to be automatically tagged with the\n-        // stability of the trait. This is WRONG, but expedient to get\n-        // libstd stabilized for the 1.0 release.\n-        let use_parent = match i.node {\n-            hir::ItemImpl(_, _, _, Some(_), _, _) => false,\n-            _ => true,\n-        };\n-\n-        // In case of a `pub use <mod>;`, we should not error since the stability\n-        // is inherited from the module itself\n-        let required = match i.node {\n-            hir::ItemUse(_) => i.vis != hir::Public,\n-            _ => true\n-        };\n-\n-        self.annotate(i.id, use_parent, &i.attrs, i.span,\n-                      |v| visit::walk_item(v, i), required);\n-\n-        if let hir::ItemStruct(ref sd, _) = i.node {\n-            if !sd.is_struct() {\n-                self.annotate(sd.id(), true, &i.attrs, i.span, |_| {}, true)\n+        let orig_in_trait_impl = self.in_trait_impl;\n+        let orig_in_enum = self.in_enum;\n+        let mut kind = AnnotationKind::Required;\n+        match i.node {\n+            // Inherent impls and foreign modules serve only as containers for other items,\n+            // they don't have their own stability. They still can be annotated as unstable\n+            // and propagate this unstability to children, but this annotation is completely\n+            // optional. They inherit stability from their parents when unannotated.\n+            hir::ItemImpl(_, _, _, None, _, _) | hir::ItemForeignMod(..) => {\n+                self.in_trait_impl = false;\n+                kind = AnnotationKind::Container;\n+            }\n+            hir::ItemImpl(_, _, _, Some(_), _, _) => {\n+                self.in_trait_impl = true;\n+            }\n+            hir::ItemStruct(ref sd, _) => {\n+                self.in_enum = false;\n+                if !sd.is_struct() {\n+                    self.annotate(sd.id(), &i.attrs, i.span, AnnotationKind::Required, |_| {})\n+                }\n             }\n+            hir::ItemEnum(..) => {\n+                self.in_enum = true;\n+            }\n+            _ => {}\n         }\n-    }\n \n-    fn visit_fn(&mut self, _: FnKind<'v>, _: &'v FnDecl,\n-                _: &'v Block, _: Span, _: NodeId) {\n-        // Items defined in a function body have no reason to have\n-        // a stability attribute, so we don't recurse.\n+        self.annotate(i.id, &i.attrs, i.span, kind, |v| {\n+            visit::walk_item(v, i)\n+        });\n+        self.in_trait_impl = orig_in_trait_impl;\n+        self.in_enum = orig_in_enum;\n     }\n \n     fn visit_trait_item(&mut self, ti: &hir::TraitItem) {\n-        self.annotate(ti.id, true, &ti.attrs, ti.span,\n-                      |v| visit::walk_trait_item(v, ti), true);\n+        self.annotate(ti.id, &ti.attrs, ti.span, AnnotationKind::Required, |v| {\n+            visit::walk_trait_item(v, ti);\n+        });\n     }\n \n     fn visit_impl_item(&mut self, ii: &hir::ImplItem) {\n-        self.annotate(ii.id, true, &ii.attrs, ii.span,\n-                      |v| visit::walk_impl_item(v, ii), false);\n+        let kind = if self.in_trait_impl {\n+            AnnotationKind::Prohibited\n+        } else {\n+            AnnotationKind::Required\n+        };\n+        self.annotate(ii.id, &ii.attrs, ii.span, kind, |v| {\n+            visit::walk_impl_item(v, ii);\n+        });\n     }\n \n     fn visit_variant(&mut self, var: &Variant, g: &'v Generics, item_id: NodeId) {\n-        self.annotate(var.node.data.id(), true, &var.node.attrs, var.span,\n-                      |v| visit::walk_variant(v, var, g, item_id), true)\n+        self.annotate(var.node.data.id(), &var.node.attrs, var.span, AnnotationKind::Required, |v| {\n+            visit::walk_variant(v, var, g, item_id);\n+        })\n     }\n \n     fn visit_struct_field(&mut self, s: &StructField) {\n-        self.annotate(s.node.id, true, &s.node.attrs, s.span,\n-                      |v| visit::walk_struct_field(v, s), !s.node.kind.is_unnamed());\n+        // FIXME: This is temporary, can't use attributes with tuple variant fields until snapshot\n+        let kind = if self.in_enum && s.node.kind.is_unnamed() {\n+            AnnotationKind::Prohibited\n+        } else {\n+            AnnotationKind::Required\n+        };\n+        self.annotate(s.node.id, &s.node.attrs, s.span, kind, |v| {\n+            visit::walk_struct_field(v, s);\n+        });\n     }\n \n     fn visit_foreign_item(&mut self, i: &hir::ForeignItem) {\n-        self.annotate(i.id, true, &i.attrs, i.span, |_| {}, true);\n+        self.annotate(i.id, &i.attrs, i.span, AnnotationKind::Required, |v| {\n+            visit::walk_foreign_item(v, i);\n+        });\n+    }\n+\n+    fn visit_macro_def(&mut self, md: &'v hir::MacroDef) {\n+        if md.imported_from.is_none() {\n+            self.annotate(md.id, &md.attrs, md.span, AnnotationKind::Required, |_| {});\n+        }\n     }\n }\n \n@@ -243,21 +265,21 @@ impl<'tcx> Index<'tcx> {\n             index: self,\n             parent: None,\n             export_map: export_map,\n+            in_trait_impl: false,\n+            in_enum: false,\n         };\n-        annotator.annotate(ast::CRATE_NODE_ID, true, &krate.attrs, krate.span,\n-                           |v| visit::walk_crate(v, krate), true);\n+        annotator.annotate(ast::CRATE_NODE_ID, &krate.attrs, krate.span, AnnotationKind::Required,\n+                           |v| visit::walk_crate(v, krate));\n     }\n \n     pub fn new(krate: &Crate) -> Index {\n         let mut is_staged_api = false;\n         for attr in &krate.attrs {\n-            if &attr.name()[..] == \"staged_api\" {\n-                match attr.node.value.node {\n-                    ast::MetaWord(_) => {\n-                        attr::mark_used(attr);\n-                        is_staged_api = true;\n-                    }\n-                    _ => (/*pass*/)\n+            if attr.name() == \"staged_api\" {\n+                if let ast::MetaWord(_) = attr.node.value.node {\n+                    attr::mark_used(attr);\n+                    is_staged_api = true;\n+                    break\n                 }\n             }\n         }"}, {"sha": "5db3ee59cae4f609c097fc54e3ac88be130e58dc", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -739,7 +739,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n                                lang_items,\n                                stability::Index::new(krate),\n                                |tcx| {\n-\n                                    // passes are timed inside typeck\n                                    typeck::check_crate(tcx, trait_map);\n \n@@ -756,7 +755,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n                                    // Do not move this check past lint\n                                    time(time_passes, \"stability index\", || {\n-                                       tcx.stability.borrow_mut().build(tcx, krate, &public_items)\n+                                       tcx.stability.borrow_mut().build(tcx, krate, &exported_items)\n                                    });\n \n                                    time(time_passes,"}, {"sha": "09503bec0c360e8580bf1075b1be668e6cba5239", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -221,9 +221,12 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n         let orig_all_exported = self.prev_exported;\n         match item.node {\n             // impls/extern blocks do not break the \"public chain\" because they\n-            // cannot have visibility qualifiers on them anyway. They are also not\n+            // cannot have visibility qualifiers on them anyway. Impls are also not\n             // added to public/exported sets based on inherited publicity.\n-            hir::ItemImpl(..) | hir::ItemDefaultImpl(..) | hir::ItemForeignMod(..) => {}\n+            hir::ItemImpl(..) | hir::ItemDefaultImpl(..) => {}\n+            hir::ItemForeignMod(..) => {\n+                self.maybe_insert_id(item.id);\n+            }\n \n             // Private by default, hence we only retain the \"public chain\" if\n             // `pub` is explicitly listed.\n@@ -249,12 +252,17 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                 }\n             }\n \n-            // Public items in inherent impls for public/exported types are public/exported\n-            // Inherent impls themselves are not public/exported, they are nothing more than\n-            // containers for other items\n+            // Inherent impls for public/exported types and their public items are public/exported\n             hir::ItemImpl(_, _, _, None, ref ty, ref impl_items) => {\n                 let (public_ty, exported_ty) = self.is_public_exported_ty(&ty);\n \n+                if public_ty {\n+                    self.public_items.insert(item.id);\n+                }\n+                if exported_ty {\n+                    self.exported_items.insert(item.id);\n+                }\n+\n                 for impl_item in impl_items {\n                     if impl_item.vis == hir::Public {\n                         if public_ty {\n@@ -1512,6 +1520,8 @@ pub fn check_crate(tcx: &ty::ctxt,\n         prev_exported: true,\n         prev_public: true,\n     };\n+    visitor.exported_items.insert(ast::CRATE_NODE_ID);\n+    visitor.public_items.insert(ast::CRATE_NODE_ID);\n     loop {\n         let before = (visitor.exported_items.len(), visitor.public_items.len());\n         visit::walk_crate(&mut visitor, krate);"}, {"sha": "597c517e859e209e9888a23d1b399126b5043830", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -35,9 +35,11 @@ use core::iter::Iterator;\n use tables::{derived_property, property, general_category, conversions};\n \n // stable reexports\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::char::{MAX, from_u32, from_u32_unchecked, from_digit, EscapeUnicode, EscapeDefault};\n \n // unstable reexports\n+#[unstable(feature = \"unicode\", issue = \"27783\")]\n pub use tables::UNICODE_VERSION;\n \n /// An iterator over the lowercase mapping of a given character, returned from"}, {"sha": "c8b377ba3be6c14789e6fd6b07c2aac1cef8fc95", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -1215,6 +1215,7 @@ fn search_entry_hashed<'a, K: Eq, V>(table: &'a mut RawTable<K,V>, hash: SafeHas\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K, V, S> PartialEq for HashMap<K, V, S>\n     where K: Eq + Hash, V: PartialEq, S: HashState\n {\n@@ -1272,6 +1273,7 @@ pub struct Iter<'a, K: 'a, V: 'a> {\n }\n \n // FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Clone for Iter<'a, K, V> {\n     fn clone(&self) -> Iter<'a, K, V> {\n         Iter {\n@@ -1299,6 +1301,7 @@ pub struct Keys<'a, K: 'a, V: 'a> {\n }\n \n // FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Clone for Keys<'a, K, V> {\n     fn clone(&self) -> Keys<'a, K, V> {\n         Keys {\n@@ -1314,6 +1317,7 @@ pub struct Values<'a, K: 'a, V: 'a> {\n }\n \n // FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Clone for Values<'a, K, V> {\n     fn clone(&self) -> Values<'a, K, V> {\n         Values {"}, {"sha": "0021155b00ab7ca0303d7410b3548cc45fca1d6e", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -901,6 +901,7 @@ impl<T, S> IntoIterator for HashSet<T, S>\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K> Clone for Iter<'a, K> {\n     fn clone(&self) -> Iter<'a, K> { Iter { iter: self.iter.clone() } }\n }\n@@ -940,6 +941,7 @@ impl<'a, K> ExactSizeIterator for Drain<'a, K> {\n     fn len(&self) -> usize { self.iter.len() }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T, S> Clone for Intersection<'a, T, S> {\n     fn clone(&self) -> Intersection<'a, T, S> {\n         Intersection { iter: self.iter.clone(), ..*self }\n@@ -969,6 +971,7 @@ impl<'a, T, S> Iterator for Intersection<'a, T, S>\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T, S> Clone for Difference<'a, T, S> {\n     fn clone(&self) -> Difference<'a, T, S> {\n         Difference { iter: self.iter.clone(), ..*self }\n@@ -998,6 +1001,7 @@ impl<'a, T, S> Iterator for Difference<'a, T, S>\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T, S> Clone for SymmetricDifference<'a, T, S> {\n     fn clone(&self) -> SymmetricDifference<'a, T, S> {\n         SymmetricDifference { iter: self.iter.clone() }\n@@ -1014,6 +1018,7 @@ impl<'a, T, S> Iterator for SymmetricDifference<'a, T, S>\n     fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T, S> Clone for Union<'a, T, S> {\n     fn clone(&self) -> Union<'a, T, S> { Union { iter: self.iter.clone() } }\n }"}, {"sha": "07ddfe237be93f91dcba8f71c5b7a60ffa737b72", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -408,27 +408,35 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core_collections::Bound;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core_collections::{BinaryHeap, BTreeMap, BTreeSet};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core_collections::{LinkedList, VecDeque};\n-\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core_collections::{binary_heap, btree_map, btree_set};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core_collections::{linked_list, vec_deque};\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::hash_map::HashMap;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::hash_set::HashSet;\n \n mod hash;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod hash_map {\n     //! A hashmap\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::hash::map::*;\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod hash_set {\n     //! A hashset\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::hash::set::*;\n }\n "}, {"sha": "e00b02f518c5bf3ca60c4eaf578fd18e624117b3", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -324,6 +324,7 @@ impl IntoInner<fs_imp::File> for File {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for File {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.inner.fmt(f)\n@@ -1230,6 +1231,7 @@ pub trait PathExt {\n }\n \n #[allow(deprecated)]\n+#[unstable(feature = \"path_ext_deprecated\", issue = \"27725\")]\n impl PathExt for Path {\n     fn metadata(&self) -> io::Result<Metadata> { metadata(self) }\n     fn symlink_metadata(&self) -> io::Result<Metadata> { symlink_metadata(self) }"}, {"sha": "90a79da34835443e7dbfc03b53f221207a014082", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -485,6 +485,7 @@ impl<W: Write + Seek> Seek for BufWriter<W> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<W: Write> Drop for BufWriter<W> {\n     fn drop(&mut self) {\n         if self.inner.is_some() {"}, {"sha": "ebf322fab4d18bbe4a5902a3eccc9a0ec45bda26", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -255,13 +255,21 @@ use string::String;\n use str;\n use vec::Vec;\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::buffered::{BufReader, BufWriter, LineWriter};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::buffered::IntoInnerError;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::cursor::Cursor;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::error::{Result, Error, ErrorKind};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::util::{copy, sink, Sink, empty, Empty, repeat, Repeat};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::stdio::{stdin, stdout, stderr, _print, Stdin, Stdout, Stderr};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::stdio::{StdoutLock, StderrLock, StdinLock};\n+#[unstable(feature = \"libstd_io_internals\", issue = \"0\")]\n #[doc(no_inline, hidden)]\n pub use self::stdio::{set_panic, set_print};\n "}, {"sha": "f588ec60589e915d1332d970221d205574725b16", "filename": "src/libstd/io/prelude.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fio%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fio%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprelude.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -20,6 +20,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use super::{Read, Write, BufRead, Seek};\n #[allow(deprecated)]\n+#[unstable(feature = \"path_ext_deprecated\", issue = \"27725\")]\n pub use fs::PathExt;"}, {"sha": "6d8d6f82f073693a23a707aca1c72403a0e189fd", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -303,36 +303,63 @@ extern crate libc;\n \n // NB: These reexports are in the order they should be listed in rustdoc\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::any;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::cell;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::clone;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::cmp;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::convert;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::default;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::hash;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::intrinsics;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::iter;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::marker;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::mem;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::ops;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::ptr;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::raw;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated)]\n pub use core::simd;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::result;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::option;\n+\n pub mod error;\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use alloc::boxed;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use alloc::rc;\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core_collections::borrow;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core_collections::fmt;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core_collections::slice;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core_collections::str;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core_collections::string;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core_collections::vec;\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use rustc_unicode::char;\n \n /* Exported macros */\n@@ -353,16 +380,26 @@ pub mod prelude;\n // doc pages are inlined from the public re-exports of core_collections::{slice,\n // str} above.\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::isize;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::i8;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::i16;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::i32;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::i64;\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::usize;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::u8;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::u16;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::u32;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::u64;\n \n #[path = \"num/f32.rs\"]   pub mod f32;"}, {"sha": "efeb59b4ac74cb8e2d6cbcb01b60ae3ea3affdbb", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -259,6 +259,7 @@ pub mod builtin {\n     /// assert_eq!(s, format!(\"hello {}\", \"world\"));\n     ///\n     /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     macro_rules! format_args { ($fmt:expr, $($args:tt)*) => ({\n         /* compiler built-in */\n@@ -279,6 +280,7 @@ pub mod builtin {\n     /// let path: &'static str = env!(\"PATH\");\n     /// println!(\"the $PATH variable at the time of compiling was: {}\", path);\n     /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     macro_rules! env { ($name:expr) => ({ /* compiler built-in */ }) }\n \n@@ -298,6 +300,7 @@ pub mod builtin {\n     /// let key: Option<&'static str> = option_env!(\"SECRET_KEY\");\n     /// println!(\"the secret key might be: {:?}\", key);\n     /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     macro_rules! option_env { ($name:expr) => ({ /* compiler built-in */ }) }\n \n@@ -322,6 +325,7 @@ pub mod builtin {\n     /// println!(\"{}\", f());\n     /// # }\n     /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     macro_rules! concat_idents {\n         ($($e:ident),*) => ({ /* compiler built-in */ })\n@@ -342,6 +346,7 @@ pub mod builtin {\n     /// let s = concat!(\"test\", 10, 'b', true);\n     /// assert_eq!(s, \"test10btrue\");\n     /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     macro_rules! concat { ($($e:expr),*) => ({ /* compiler built-in */ }) }\n \n@@ -357,6 +362,7 @@ pub mod builtin {\n     /// let current_line = line!();\n     /// println!(\"defined on line: {}\", current_line);\n     /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     macro_rules! line { () => ({ /* compiler built-in */ }) }\n \n@@ -372,6 +378,7 @@ pub mod builtin {\n     /// let current_col = column!();\n     /// println!(\"defined on column: {}\", current_col);\n     /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     macro_rules! column { () => ({ /* compiler built-in */ }) }\n \n@@ -388,6 +395,7 @@ pub mod builtin {\n     /// let this_file = file!();\n     /// println!(\"defined in file: {}\", this_file);\n     /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     macro_rules! file { () => ({ /* compiler built-in */ }) }\n \n@@ -403,6 +411,7 @@ pub mod builtin {\n     /// let one_plus_one = stringify!(1 + 1);\n     /// assert_eq!(one_plus_one, \"1 + 1\");\n     /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     macro_rules! stringify { ($t:tt) => ({ /* compiler built-in */ }) }\n \n@@ -417,6 +426,7 @@ pub mod builtin {\n     /// ```rust,ignore\n     /// let secret_key = include_str!(\"secret-key.ascii\");\n     /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     macro_rules! include_str { ($file:expr) => ({ /* compiler built-in */ }) }\n \n@@ -431,6 +441,7 @@ pub mod builtin {\n     /// ```rust,ignore\n     /// let secret_key = include_bytes!(\"secret-key.bin\");\n     /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     macro_rules! include_bytes { ($file:expr) => ({ /* compiler built-in */ }) }\n \n@@ -451,6 +462,7 @@ pub mod builtin {\n     ///\n     /// test::foo();\n     /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     macro_rules! module_path { () => ({ /* compiler built-in */ }) }\n \n@@ -472,6 +484,7 @@ pub mod builtin {\n     ///     \"unix-directory\"\n     /// };\n     /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     macro_rules! cfg { ($cfg:tt) => ({ /* compiler built-in */ }) }\n \n@@ -486,6 +499,7 @@ pub mod builtin {\n     ///     include!(\"/path/to/a/file\")\n     /// }\n     /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     macro_rules! include { ($cfg:tt) => ({ /* compiler built-in */ }) }\n }"}, {"sha": "22bb5ff874d3d82cc9e89fcd6187144532ba6cc6", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -448,6 +448,7 @@ impl ToSocketAddrs for str {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: ToSocketAddrs + ?Sized> ToSocketAddrs for &'a T {\n     type Iter = T::Iter;\n     fn to_socket_addrs(&self) -> io::Result<T::Iter> {"}, {"sha": "383dce737f511142b75860d579765bafe56505e9", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -17,10 +17,15 @@ use prelude::v1::*;\n use io::{self, Error, ErrorKind};\n use sys_common::net as net_imp;\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::ip::{IpAddr, Ipv4Addr, Ipv6Addr, Ipv6MulticastScope};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::addr::{SocketAddr, SocketAddrV4, SocketAddrV6, ToSocketAddrs};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::tcp::{TcpStream, TcpListener, Incoming};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::udp::UdpSocket;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::parser::AddrParseError;\n \n mod ip;"}, {"sha": "fd2e61473f9c0547b9ebf4f24831f95498a9c3fc", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -219,6 +219,7 @@ impl IntoInner<net_imp::TcpStream> for TcpStream {\n     fn into_inner(self) -> net_imp::TcpStream { self.0 }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for TcpStream {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.0.fmt(f)\n@@ -301,6 +302,7 @@ impl IntoInner<net_imp::TcpListener> for TcpListener {\n     fn into_inner(self) -> net_imp::TcpListener { self.0 }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for TcpListener {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.0.fmt(f)"}, {"sha": "b212d4d32aadfcfa55e6034c8da055f83fb5ff73", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -153,6 +153,7 @@ impl IntoInner<net_imp::UdpSocket> for UdpSocket {\n     fn into_inner(self) -> net_imp::UdpSocket { self.0 }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for UdpSocket {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.0.fmt(f)"}, {"sha": "ab25fe17c2c474cfaf2afafc6cbda170e08bb3a6", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -20,10 +20,15 @@ use intrinsics;\n use libc::c_int;\n use num::{FpCategory, ParseFloatError};\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::f32::{RADIX, MANTISSA_DIGITS, DIGITS, EPSILON};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::f32::{MIN_EXP, MAX_EXP, MIN_10_EXP};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::f32::{MAX_10_EXP, NAN, INFINITY, NEG_INFINITY};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::f32::{MIN, MIN_POSITIVE, MAX};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::f32::consts;\n \n #[allow(dead_code)]"}, {"sha": "b392ab0c8daeeb4d86b44dc9fab6891a38b0cf22", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -20,10 +20,15 @@ use intrinsics;\n use libc::c_int;\n use num::{FpCategory, ParseFloatError};\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::f64::{RADIX, MANTISSA_DIGITS, DIGITS, EPSILON};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::f64::{MIN_EXP, MAX_EXP, MIN_10_EXP};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::f64::{MAX_10_EXP, NAN, INFINITY, NEG_INFINITY};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::f64::{MIN, MIN_POSITIVE, MAX};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::f64::consts;\n \n #[allow(dead_code)]"}, {"sha": "8e207f5e6cfc5e5f4c002b5e3263f974921c8d2c", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -16,8 +16,11 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::num::{Zero, One};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::num::{FpCategory, ParseIntError, ParseFloatError};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::num::{wrapping, Wrapping};\n \n #[cfg(test)] use cmp::PartialEq;"}, {"sha": "15380dc350e67d4437eae6aa196daf598a3bbeef", "filename": "src/libstd/os/android/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Fandroid%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Fandroid%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fandroid%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -14,7 +14,8 @@\n \n pub mod raw;\n \n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub mod fs {\n-    #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub use sys::fs::MetadataExt;\n }"}, {"sha": "fe28a73875696959505878e7f032270f6c53392a", "filename": "src/libstd/os/android/raw.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Fandroid%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Fandroid%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fandroid%2Fraw.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -13,6 +13,7 @@\n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n \n #[doc(inline)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub use self::arch::{dev_t, mode_t, blkcnt_t, blksize_t, ino_t, nlink_t, off_t, stat, time_t};\n \n #[cfg(any(target_arch = \"arm\", target_arch = \"x86\"))]"}, {"sha": "126eab92fe34bef3f0db1e93805a23cfb6c3d5b8", "filename": "src/libstd/os/bitrig/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Fbitrig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Fbitrig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fbitrig%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -14,7 +14,8 @@\n \n pub mod raw;\n \n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub mod fs {\n-    #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub use sys::fs::MetadataExt;\n }"}, {"sha": "b48604fa83f1cd66759f1962ed5f2acac685884d", "filename": "src/libstd/os/dragonfly/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Fdragonfly%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Fdragonfly%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fdragonfly%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -14,7 +14,8 @@\n \n pub mod raw;\n \n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub mod fs {\n-    #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub use sys::fs::MetadataExt;\n }"}, {"sha": "b1d61f8ae12d3ef6b3c0b488a4637e1230f2ed4b", "filename": "src/libstd/os/freebsd/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Ffreebsd%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Ffreebsd%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffreebsd%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -14,7 +14,8 @@\n \n pub mod raw;\n \n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub mod fs {\n-    #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub use sys::fs::MetadataExt;\n }"}, {"sha": "cb8fadbfd6edf1f30e97a7b5514aefc7f7744eec", "filename": "src/libstd/os/freebsd/raw.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Ffreebsd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Ffreebsd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffreebsd%2Fraw.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -22,6 +22,7 @@\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type fflags_t = u32;\n \n #[doc(inline)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub use self::arch::{stat, time_t};\n \n #[cfg(target_arch = \"x86\")]"}, {"sha": "07fba4b182be166525224c8354cfe98e33bb8f1d", "filename": "src/libstd/os/ios/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Fios%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Fios%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fios%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -14,7 +14,8 @@\n \n pub mod raw;\n \n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub mod fs {\n-    #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub use sys::fs::MetadataExt;\n }"}, {"sha": "ea0b00c9998b260a19feb05eb60862f9e03407cf", "filename": "src/libstd/os/linux/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Flinux%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Flinux%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -14,7 +14,8 @@\n \n pub mod raw;\n \n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub mod fs {\n-    #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub use sys::fs::MetadataExt;\n }"}, {"sha": "35de9bfc194d615cc96c7b19a5de2824fcc8a59f", "filename": "src/libstd/os/linux/raw.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fraw.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -16,6 +16,7 @@\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n \n #[doc(inline)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub use self::arch::{off_t, ino_t, nlink_t, blksize_t, blkcnt_t, stat, time_t};\n \n #[cfg(any(target_arch = \"x86\","}, {"sha": "703b64ceb24843eeb1181ae498c677076b1e1ab4", "filename": "src/libstd/os/macos/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Fmacos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Fmacos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmacos%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -14,7 +14,8 @@\n \n pub mod raw;\n \n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub mod fs {\n-    #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub use sys::fs::MetadataExt;\n }"}, {"sha": "84b7d9fbeec932c8198cc0bc9e6551fb3937b60b", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -13,8 +13,12 @@\n #![stable(feature = \"os\", since = \"1.0.0\")]\n #![allow(missing_docs, bad_style)]\n \n-#[cfg(unix)]    pub use sys::ext as unix;\n-#[cfg(windows)] pub use sys::ext as windows;\n+#[cfg(unix)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use sys::ext as unix;\n+#[cfg(windows)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use sys::ext as windows;\n \n #[cfg(target_os = \"android\")]   pub mod android;\n #[cfg(target_os = \"bitrig\")]    pub mod bitrig;"}, {"sha": "b87ee4beb2cbdcd328aa3acc8a17963b091ba69e", "filename": "src/libstd/os/nacl/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Fnacl%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Fnacl%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnacl%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -14,7 +14,8 @@\n \n pub mod raw;\n \n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub mod fs {\n-    #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub use sys::fs::MetadataExt;\n }"}, {"sha": "ff6f76ba1d5b340fe3dac6f02464496a9ab85097", "filename": "src/libstd/os/netbsd/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Fnetbsd%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Fnetbsd%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnetbsd%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -14,7 +14,8 @@\n \n pub mod raw;\n \n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub mod fs {\n-    #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub use sys::fs::MetadataExt;\n }"}, {"sha": "ff6f76ba1d5b340fe3dac6f02464496a9ab85097", "filename": "src/libstd/os/openbsd/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Fopenbsd%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fos%2Fopenbsd%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fopenbsd%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -14,7 +14,8 @@\n \n pub mod raw;\n \n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub mod fs {\n-    #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub use sys::fs::MetadataExt;\n }"}, {"sha": "4df6ca5f0b88e0aa2ca49c5485f78d460cc6fb40", "filename": "src/libstd/sync/barrier.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fbarrier.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -46,6 +46,7 @@ struct BarrierState {\n ///\n /// Currently this opaque structure only has one method, `.is_leader()`. Only\n /// one thread will receive a result that will return `true` from this function.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BarrierWaitResult(bool);\n \n impl Barrier {"}, {"sha": "e1b7930b6d82efdadf80053489835e7f56fce6ce", "filename": "src/libstd/sync/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -17,17 +17,28 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use alloc::arc::{Arc, Weak};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::sync::atomic;\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::barrier::{Barrier, BarrierWaitResult};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::condvar::{Condvar, StaticCondvar, WaitTimeoutResult, CONDVAR_INIT};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::mutex::MUTEX_INIT;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::mutex::{Mutex, MutexGuard, StaticMutex};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::once::{Once, ONCE_INIT};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use sys_common::poison::{PoisonError, TryLockError, TryLockResult, LockResult};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::rwlock::{RwLockReadGuard, RwLockWriteGuard};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::rwlock::{RwLock, StaticRwLock, RW_LOCK_INIT};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::semaphore::{Semaphore, SemaphoreGuard};\n \n pub mod mpsc;"}, {"sha": "e87ae19c583f761c5fd3e792707e0d29f889530f", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -272,6 +272,7 @@ use mem;\n use cell::UnsafeCell;\n use marker::Reflect;\n \n+#[unstable(feature = \"mpsc_select\", issue = \"27800\")]\n pub use self::select::{Select, Handle};\n use self::select::StartResult;\n use self::select::StartResult::*;\n@@ -295,6 +296,7 @@ pub struct Receiver<T> {\n \n // The receiver port can be sent from place to place, so long as it\n // is not used to receive non-sendable things.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: Send> Send for Receiver<T> { }\n \n /// An iterator over messages on a receiver, this iterator will block\n@@ -322,6 +324,7 @@ pub struct Sender<T> {\n \n // The send port can be sent from place to place, so long as it\n // is not used to send non-sendable things.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: Send> Send for Sender<T> { }\n \n /// The sending-half of Rust's synchronous channel type. This half can only be\n@@ -331,8 +334,10 @@ pub struct SyncSender<T> {\n     inner: Arc<UnsafeCell<sync::Packet<T>>>,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: Send> Send for SyncSender<T> {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> !Sync for SyncSender<T> {}\n \n /// An error returned from the `send` function on channels.\n@@ -954,6 +959,7 @@ impl<'a, T> IntoIterator for &'a Receiver<T> {\n     fn into_iter(self) -> Iter<'a, T> { self.iter() }\n }\n \n+#[stable(feature = \"receiver_into_iter\", since = \"1.1.0\")]\n impl<T> Iterator for IntoIter<T> {\n     type Item = T;\n     fn next(&mut self) -> Option<T> { self.rx.recv().ok() }"}, {"sha": "6a6c19cfcc308662bd09240da247fa93a3ef11cf", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -133,7 +133,6 @@ impl<T> Queue<T> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Drop for Queue<T> {\n     fn drop(&mut self) {\n         unsafe {"}, {"sha": "5677c5538c45b361f79abd36b98fc1026f8efc2c", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -125,8 +125,9 @@ pub struct Mutex<T: ?Sized> {\n \n // these are the only places where `T: Send` matters; all other\n // functionality works fine on a single thread.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: ?Sized + Send> Send for Mutex<T> { }\n-\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: ?Sized + Send> Sync for Mutex<T> { }\n \n /// The static mutex type is provided to allow for static allocation of mutexes.\n@@ -175,6 +176,7 @@ pub struct MutexGuard<'a, T: ?Sized + 'a> {\n     __poison: poison::Guard,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: ?Sized> !marker::Send for MutexGuard<'a, T> {}\n \n /// Static initialization of a mutex. This constant can be used to initialize"}, {"sha": "4c236d215455db5cc49dac95702c8cb8a9dc10e4", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -71,7 +71,9 @@ pub struct RwLock<T: ?Sized> {\n     data: UnsafeCell<T>,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: ?Sized + Send + Sync> Send for RwLock<T> {}\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n \n /// Structure representing a statically allocated RwLock.\n@@ -122,6 +124,7 @@ pub struct RwLockReadGuard<'a, T: ?Sized + 'a> {\n     __data: &'a UnsafeCell<T>,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: ?Sized> !marker::Send for RwLockReadGuard<'a, T> {}\n \n /// RAII structure used to release the exclusive write access of a lock when\n@@ -134,6 +137,7 @@ pub struct RwLockWriteGuard<'a, T: ?Sized + 'a> {\n     __poison: poison::Guard,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: ?Sized> !marker::Send for RwLockWriteGuard<'a, T> {}\n \n impl<T> RwLock<T> {"}, {"sha": "446a4445b2d3a568a07068acb8756ab3fdc90542", "filename": "src/libstd/sys/common/poison.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -110,6 +110,7 @@ impl<T> fmt::Display for PoisonError<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Send + Reflect> Error for PoisonError<T> {\n     fn description(&self) -> &str {\n         \"poisoned lock: another task failed inside\"\n@@ -139,6 +140,7 @@ impl<T> PoisonError<T> {\n     pub fn get_mut(&mut self) -> &mut T { &mut self.guard }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> From<PoisonError<T>> for TryLockError<T> {\n     fn from(err: PoisonError<T>) -> TryLockError<T> {\n         TryLockError::Poisoned(err)\n@@ -162,6 +164,7 @@ impl<T: Send + Reflect> fmt::Display for TryLockError<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Send + Reflect> Error for TryLockError<T> {\n     fn description(&self) -> &str {\n         match *self {"}, {"sha": "e9f2afbf55e5e2a6b88e3252c987b67eef27b626", "filename": "src/libstd/sys/common/unwind/gcc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fgcc.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -253,12 +253,14 @@ pub mod eh_frame_registry {\n     }\n     #[cfg(not(test))]\n     #[no_mangle]\n+    #[unstable(feature = \"libstd_sys_internals\", issue = \"0\")]\n     pub unsafe extern fn rust_eh_register_frames(eh_frame_begin: *const u8,\n                                                  object: *mut u8) {\n         __register_frame_info(eh_frame_begin, object);\n     }\n     #[cfg(not(test))]\n     #[no_mangle]\n+    #[unstable(feature = \"libstd_sys_internals\", issue = \"0\")]\n     pub  unsafe extern fn rust_eh_unregister_frames(eh_frame_begin: *const u8,\n                                                    object: *mut u8) {\n         __deregister_frame_info(eh_frame_begin, object);"}, {"sha": "aea5acc90717645412a179590b990eb176356a08", "filename": "src/libstd/sys/common/unwind/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -203,6 +203,9 @@ pub extern fn rust_begin_unwind(msg: fmt::Arguments,\n /// site as much as possible (so that `panic!()` has as low an impact\n /// on (e.g.) the inlining of other functions as possible), by moving\n /// the actual formatting into this shared place.\n+#[unstable(feature = \"libstd_sys_internals\",\n+           reason = \"used by the panic! macro\",\n+           issue = \"0\")]\n #[inline(never)] #[cold]\n pub fn begin_unwind_fmt(msg: fmt::Arguments, file_line: &(&'static str, u32)) -> ! {\n     use fmt::Write;\n@@ -218,6 +221,9 @@ pub fn begin_unwind_fmt(msg: fmt::Arguments, file_line: &(&'static str, u32)) ->\n }\n \n /// This is the entry point of unwinding for panic!() and assert!().\n+#[unstable(feature = \"libstd_sys_internals\",\n+           reason = \"used by the panic! macro\",\n+           issue = \"0\")]\n #[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n pub fn begin_unwind<M: Any + Send>(msg: M, file_line: &(&'static str, u32)) -> ! {\n     // Note that this should be the only allocation performed in this code path."}, {"sha": "702a34633dc250493e10d31c9bc1479f29292501", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -715,13 +715,15 @@ impl<'a> Iterator for Wtf8CodePoints<'a> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct EncodeWide<'a> {\n     code_points: Wtf8CodePoints<'a>,\n     extra: u16\n }\n \n // Copied from libunicode/u_str.rs\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Iterator for EncodeWide<'a> {\n     type Item = u16;\n "}, {"sha": "d2a16b5de97755e3ff2fef08cac539768e0d7e56", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -153,6 +153,7 @@ pub trait MetadataExt {\n     fn blocks(&self) -> raw::blkcnt_t;\n }\n \n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n impl MetadataExt for fs::Metadata {\n     fn dev(&self) -> raw::dev_t { self.as_raw_stat().st_dev as raw::dev_t }\n     fn ino(&self) -> raw::ino_t { self.as_raw_stat().st_ino as raw::ino_t }\n@@ -211,6 +212,7 @@ pub trait DirEntryExt {\n     fn ino(&self) -> raw::ino_t;\n }\n \n+#[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n impl DirEntryExt for fs::DirEntry {\n     fn ino(&self) -> raw::ino_t { self.as_inner().ino() }\n }\n@@ -253,6 +255,8 @@ pub trait DirBuilderExt {\n     fn mode(&mut self, mode: raw::mode_t) -> &mut Self;\n }\n \n+#[unstable(feature = \"dir_builder\", reason = \"recently added API\",\n+           issue = \"27710\")]\n impl DirBuilderExt for fs::DirBuilder {\n     fn mode(&mut self, mode: raw::mode_t) -> &mut fs::DirBuilder {\n         self.as_inner_mut().set_mode(mode);"}, {"sha": "b57e325089d26bb4c7495a2728dc628dd9bd9e5c", "filename": "src/libstd/sys/unix/ext/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -40,13 +40,13 @@ pub mod raw;\n /// Includes all extension traits, and some important type definitions.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod prelude {\n-    #[doc(no_inline)]\n+    #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::io::{RawFd, AsRawFd, FromRawFd, IntoRawFd};\n     #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::ffi::{OsStrExt, OsStringExt};\n-    #[doc(no_inline)]\n+    #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::fs::{PermissionsExt, OpenOptionsExt, MetadataExt, FileTypeExt};\n-    #[doc(no_inline)]\n+    #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::fs::{DirEntryExt};\n     #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::process::{CommandExt, ExitStatusExt};"}, {"sha": "e1111f25db7211ccdf222aa0749870d8755ad423", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -107,18 +107,21 @@ impl AsRawFd for process::ChildStderr {\n     }\n }\n \n+#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl IntoRawFd for process::ChildStdin {\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()\n     }\n }\n \n+#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl IntoRawFd for process::ChildStdout {\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()\n     }\n }\n \n+#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl IntoRawFd for process::ChildStderr {\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()"}, {"sha": "8377e53f4178bda7d89d70cc545b02bbfea146e8", "filename": "src/libstd/sys/unix/ext/raw.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Funix%2Fext%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Funix%2Fext%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fraw.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -17,6 +17,8 @@\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type pid_t = i32;\n \n #[doc(inline)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub use sys::platform::raw::{dev_t, ino_t, mode_t, nlink_t, off_t, blksize_t};\n #[doc(inline)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub use sys::platform::raw::{blkcnt_t, time_t};"}, {"sha": "5b60b821c3445574240c3b35cf60b7a465a1f375", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -47,6 +47,7 @@ mod inner {\n         }\n     }\n \n+    #[unstable(feature = \"libstd_sys_internals\", issue = \"0\")]\n     impl<'a> Sub for &'a SteadyTime {\n         type Output = Duration;\n \n@@ -98,6 +99,7 @@ mod inner {\n         }\n     }\n \n+    #[unstable(feature = \"libstd_sys_internals\", issue = \"0\")]\n     impl<'a> Sub for &'a SteadyTime {\n         type Output = Duration;\n "}, {"sha": "253787546c1dc75c3d7340a107b52777eacd4263", "filename": "src/libstd/sys/windows/ext/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -17,6 +17,7 @@ use sys::os_str::Buf;\n use sys_common::wtf8::Wtf8Buf;\n use sys_common::{FromInner, AsInner};\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use sys_common::wtf8::EncodeWide;\n \n /// Windows-specific extensions to `OsString`."}, {"sha": "0d78d4de42b299a2e1dcf4557743250ec5ede742", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -49,6 +49,9 @@ pub trait OpenOptionsExt {\n     fn share_mode(&mut self, val: u32) -> &mut Self;\n }\n \n+#[unstable(feature = \"open_options_ext\",\n+           reason = \"may require more thought/methods\",\n+           issue = \"27720\")]\n impl OpenOptionsExt for OpenOptions {\n     fn desired_access(&mut self, access: u32) -> &mut OpenOptions {\n         self.as_inner_mut().desired_access(access); self"}, {"sha": "7f095ae7ff6b51ca3fd82ced9933a8a14528c5a1", "filename": "src/libstd/sys/windows/ext/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -27,12 +27,12 @@ pub mod process;\n /// Includes all extension traits, and some important type definitions.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod prelude {\n-    #[doc(no_inline)]\n+    #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::io::{RawSocket, RawHandle, AsRawSocket, AsRawHandle};\n-    #[doc(no_inline)]\n+    #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::io::{FromRawSocket, FromRawHandle, IntoRawSocket, IntoRawHandle};\n     #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::ffi::{OsStrExt, OsStringExt};\n-    #[doc(no_inline)]\n+    #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::fs::{OpenOptionsExt, MetadataExt};\n }"}, {"sha": "dffe68915fb452aebebb1abd52cc4c74cbce0c8e", "filename": "src/libstd/sys/windows/ext/process.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -32,6 +32,7 @@ impl AsRawHandle for process::Child {\n     }\n }\n \n+#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl IntoRawHandle for process::Child {\n     fn into_raw_handle(self) -> RawHandle {\n         self.into_inner().into_handle().into_raw() as *mut _\n@@ -59,18 +60,21 @@ impl AsRawHandle for process::ChildStderr {\n     }\n }\n \n+#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl IntoRawHandle for process::ChildStdin {\n     fn into_raw_handle(self) -> RawHandle {\n         self.into_inner().into_handle().into_raw() as *mut _\n     }\n }\n \n+#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl IntoRawHandle for process::ChildStdout {\n     fn into_raw_handle(self) -> RawHandle {\n         self.into_inner().into_handle().into_raw() as *mut _\n     }\n }\n \n+#[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl IntoRawHandle for process::ChildStderr {\n     fn into_raw_handle(self) -> RawHandle {\n         self.into_inner().into_handle().into_raw() as *mut _"}, {"sha": "707e8c05e17c85c4d282ab28737a3f9a30fad914", "filename": "src/libstd/sys/windows/time.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -39,6 +39,7 @@ fn frequency() -> c::LARGE_INTEGER {\n     }\n }\n \n+#[unstable(feature = \"libstd_sys_internals\", issue = \"0\")]\n impl<'a> Sub for &'a SteadyTime {\n     type Output = Duration;\n "}, {"sha": "84ceb9b0a51133f64bda7d55105050ec65f9a68d", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -189,7 +189,9 @@ pub use self::local::{LocalKey, LocalKeyState};\n            issue = \"27715\")]\n pub use self::scoped_tls::ScopedKey;\n \n+#[unstable(feature = \"libstd_thread_internals\", issue = \"0\")]\n #[doc(hidden)] pub use self::local::__KeyInner as __LocalKeyInner;\n+#[unstable(feature = \"libstd_thread_internals\", issue = \"0\")]\n #[doc(hidden)] pub use self::scoped_tls::__KeyInner as __ScopedKeyInner;\n \n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "2c92bc504c896bb5854139f1902a4098896b3c17", "filename": "src/libstd/thread/scoped_tls.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fscoped_tls.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -65,6 +65,9 @@ pub struct ScopedKey<T:'static> { inner: fn() -> &'static imp::KeyInner<T> }\n ///\n /// See [ScopedKey documentation](thread/struct.ScopedKey.html) for more\n /// information.\n+#[unstable(feature = \"thread_local_internals\",\n+           reason = \"should not be necessary\",\n+           issue = \"0\")]\n #[macro_export]\n #[allow_internal_unstable]\n macro_rules! scoped_thread_local {\n@@ -80,7 +83,8 @@ macro_rules! scoped_thread_local {\n \n #[doc(hidden)]\n #[unstable(feature = \"thread_local_internals\",\n-           reason = \"should not be necessary\")]\n+           reason = \"should not be necessary\",\n+           issue = \"0\")]\n #[macro_export]\n #[allow_internal_unstable]\n #[cfg(no_elf_tls)]\n@@ -95,7 +99,8 @@ macro_rules! __scoped_thread_local_inner {\n \n #[doc(hidden)]\n #[unstable(feature = \"thread_local_internals\",\n-           reason = \"should not be necessary\")]\n+           reason = \"should not be necessary\",\n+           issue = \"0\")]\n #[macro_export]\n #[allow_internal_unstable]\n #[cfg(not(no_elf_tls))]"}, {"sha": "ca04ec81a288ce8e9951821850bdc7e92aee348e", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -102,6 +102,7 @@ impl Duration {\n     pub fn subsec_nanos(&self) -> u32 { self.nanos }\n }\n \n+#[stable(feature = \"duration\", since = \"1.3.0\")]\n impl Add for Duration {\n     type Output = Duration;\n \n@@ -118,6 +119,7 @@ impl Add for Duration {\n     }\n }\n \n+#[stable(feature = \"duration\", since = \"1.3.0\")]\n impl Sub for Duration {\n     type Output = Duration;\n \n@@ -136,6 +138,7 @@ impl Sub for Duration {\n     }\n }\n \n+#[stable(feature = \"duration\", since = \"1.3.0\")]\n impl Mul<u32> for Duration {\n     type Output = Duration;\n \n@@ -152,6 +155,7 @@ impl Mul<u32> for Duration {\n     }\n }\n \n+#[stable(feature = \"duration\", since = \"1.3.0\")]\n impl Div<u32> for Duration {\n     type Output = Duration;\n "}, {"sha": "446fbae52f6bbb2c68c455facae19a2fbe6d7d55", "filename": "src/libstd/time/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Ftime%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Flibstd%2Ftime%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fmod.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -12,6 +12,7 @@\n \n #![stable(feature = \"time\", since = \"1.3.0\")]\n \n+#[stable(feature = \"time\", since = \"1.3.0\")]\n pub use self::duration::Duration;\n \n mod duration;"}, {"sha": "2a3f6aa49628fd92e66952042c202833b5ce91ef", "filename": "src/test/auxiliary/inherited_stability.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Ftest%2Fauxiliary%2Finherited_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Ftest%2Fauxiliary%2Finherited_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Finherited_stability.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -20,6 +20,7 @@ pub fn stable() {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod stable_mod {\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     pub fn unstable() {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -37,6 +38,7 @@ pub mod unstable_mod {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Stable {\n+    #[unstable(feature = \"test_feature\", issue = \"0\")]\n     fn unstable(&self);\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "20eb99fe91cc7665045eaacd12feab7fb69fbb1a", "filename": "src/test/auxiliary/internal_unstable.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Ftest%2Fauxiliary%2Finternal_unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Ftest%2Fauxiliary%2Finternal_unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Finternal_unstable.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -33,12 +33,14 @@ pub struct Bar {\n     pub x: u8\n }\n \n+#[stable(feature = \"stable\", since = \"1.0.0\")]\n #[allow_internal_unstable]\n #[macro_export]\n macro_rules! call_unstable_allow {\n     () => { $crate::unstable() }\n }\n \n+#[stable(feature = \"stable\", since = \"1.0.0\")]\n #[allow_internal_unstable]\n #[macro_export]\n macro_rules! construct_unstable_allow {\n@@ -47,46 +49,54 @@ macro_rules! construct_unstable_allow {\n     }\n }\n \n+#[stable(feature = \"stable\", since = \"1.0.0\")]\n #[allow_internal_unstable]\n #[macro_export]\n macro_rules! call_method_allow {\n     ($e: expr) => { $e.method() }\n }\n \n+#[stable(feature = \"stable\", since = \"1.0.0\")]\n #[allow_internal_unstable]\n #[macro_export]\n macro_rules! access_field_allow {\n     ($e: expr) => { $e.x }\n }\n \n+#[stable(feature = \"stable\", since = \"1.0.0\")]\n #[allow_internal_unstable]\n #[macro_export]\n macro_rules! pass_through_allow {\n     ($e: expr) => { $e }\n }\n \n+#[stable(feature = \"stable\", since = \"1.0.0\")]\n #[macro_export]\n macro_rules! call_unstable_noallow {\n     () => { $crate::unstable() }\n }\n \n+#[stable(feature = \"stable\", since = \"1.0.0\")]\n #[macro_export]\n macro_rules! construct_unstable_noallow {\n     ($e: expr) => {\n         $crate::Foo { x: $e }\n     }\n }\n \n+#[stable(feature = \"stable\", since = \"1.0.0\")]\n #[macro_export]\n macro_rules! call_method_noallow {\n     ($e: expr) => { $e.method() }\n }\n \n+#[stable(feature = \"stable\", since = \"1.0.0\")]\n #[macro_export]\n macro_rules! access_field_noallow {\n     ($e: expr) => { $e.x }\n }\n \n+#[stable(feature = \"stable\", since = \"1.0.0\")]\n #[macro_export]\n macro_rules! pass_through_noallow {\n     ($e: expr) => { $e }"}, {"sha": "92c98cb7d3518c3f6a4f884961324849170d10d2", "filename": "src/test/auxiliary/lint_stability.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_stability.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -93,6 +93,7 @@ pub trait Trait {\n     fn trait_stable_text(&self) {}\n }\n \n+#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n impl Trait for MethodTester {}\n \n #[unstable(feature = \"test_feature\", issue = \"0\")]\n@@ -154,16 +155,19 @@ pub struct UnstableTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StableTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);\n \n+#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n #[macro_export]\n macro_rules! macro_test {\n     () => (deprecated());\n }\n \n+#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n #[macro_export]\n macro_rules! macro_test_arg {\n     ($func:expr) => ($func);\n }\n \n+#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n #[macro_export]\n macro_rules! macro_test_arg_nested {\n     ($func:ident) => (macro_test_arg!($func()));"}, {"sha": "831462601386f0d780d9c8cf5279190cca592b7f", "filename": "src/test/compile-fail/issue-17337.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Ftest%2Fcompile-fail%2Fissue-17337.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Ftest%2Fcompile-fail%2Fissue-17337.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17337.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -12,6 +12,8 @@\n #![staged_api]\n #![deny(deprecated)]\n \n+#![unstable(feature = \"test_feature\", issue = \"0\")]\n+\n struct Foo;\n \n impl Foo {"}, {"sha": "35013a13e98548beb7750b1bbedbcd23606e9778", "filename": "src/test/compile-fail/lint-stability-fields.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability-fields.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -14,6 +14,8 @@\n #![feature(staged_api)]\n #![staged_api]\n \n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n mod cross_crate {\n     extern crate lint_stability_fields;\n "}, {"sha": "b96f460688007ad2a55c826e8111fb9bca27dc83", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -18,6 +18,8 @@\n #![feature(staged_api)]\n #![staged_api]\n \n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n #[macro_use]\n extern crate lint_stability;\n \n@@ -127,7 +129,9 @@ mod cross_crate {\n         <Foo>::trait_stable_text(&foo);\n         <Foo as Trait>::trait_stable_text(&foo);\n \n-        let _ = DeprecatedStruct { i: 0 }; //~ ERROR use of deprecated item\n+        let _ = DeprecatedStruct { //~ ERROR use of deprecated item\n+            i: 0 //~ ERROR use of deprecated item\n+        };\n         let _ = DeprecatedUnstableStruct {\n             //~^ ERROR use of deprecated item\n             //~^^ ERROR use of unstable library feature\n@@ -475,15 +479,15 @@ mod this_crate {\n     #[deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn test_fn_body() {\n         fn fn_in_body() {}\n-        fn_in_body();\n+        fn_in_body(); //~ ERROR use of deprecated item: text\n     }\n \n     impl MethodTester {\n         #[unstable(feature = \"test_feature\", issue = \"0\")]\n         #[deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn test_method_body(&self) {\n             fn fn_in_body() {}\n-            fn_in_body();\n+            fn_in_body(); //~ ERROR use of deprecated item: text\n         }\n     }\n "}, {"sha": "83ba9d95daf7332d66ff9db2df82f999cbd5a3b0", "filename": "src/test/compile-fail/missing-stability.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Ftest%2Fcompile-fail%2Fmissing-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Ftest%2Fcompile-fail%2Fmissing-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-stability.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -14,6 +14,8 @@\n #![feature(staged_api)]\n #![staged_api]\n \n+#![stable(feature = \"test_feature\", since = \"1.0.0\")]\n+\n pub fn unmarked() {\n     //~^ ERROR This node does not have a stability attribute\n     ()"}, {"sha": "82627daf7fffd54f34672346acd518175c7fa62d", "filename": "src/test/compile-fail/stability-attribute-sanity-2.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity-2.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -13,6 +13,8 @@\n #![feature(staged_api)]\n #![staged_api]\n \n+#![stable(feature = \"test_feature\", since = \"1.0.0\")]\n+\n #[stable(feature = \"a\", feature = \"b\", since = \"1.0.0\")] //~ ERROR multiple 'feature' items\n fn f1() { }\n \n@@ -22,4 +24,9 @@ fn f2() { }\n #[unstable(feature = \"a\", issue = \"no\")] //~ ERROR incorrect 'issue'\n fn f3() { }\n \n+#[macro_export]\n+macro_rules! mac { //~ ERROR This node does not have a stability attribute\n+    () => ()\n+}\n+\n fn main() { }"}, {"sha": "e53ba3e17dd31a0b0e7d77a9e426343a0a290a06", "filename": "src/test/compile-fail/stability-attribute-sanity.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -13,6 +13,8 @@\n #![feature(staged_api)]\n #![staged_api]\n \n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n mod bogus_attribute_types_1 {\n     #[stable(feature = \"a\", since = \"a\", reason)] //~ ERROR unknown meta item 'reason'\n     fn f1() { }"}, {"sha": "27e6e17a79c07d046a8dbd8cb97786a8bf47bbcc", "filename": "src/test/rustdoc/issue-18199.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Ftest%2Frustdoc%2Fissue-18199.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Ftest%2Frustdoc%2Fissue-18199.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-18199.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -14,6 +14,7 @@\n \n /// ```\n /// #![staged_api]\n+/// #![unstable(feature=\"test\", issue=\"18199\")]\n /// fn main() {}\n /// ```\n pub fn foo() {}"}, {"sha": "dbe12b80b3e3a9198f4e9192d8db4793f62eddf2", "filename": "src/test/rustdoc/issue-27759.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Ftest%2Frustdoc%2Fissue-27759.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e31f10c22112b486f4999f90e4ba9c7e23b9b6/src%2Ftest%2Frustdoc%2Fissue-27759.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-27759.rs?ref=22e31f10c22112b486f4999f90e4ba9c7e23b9b6", "patch": "@@ -12,6 +12,8 @@\n #![staged_api]\n #![doc(issue_tracker_base_url = \"http://issue_url/\")]\n \n+#![unstable(feature=\"test\", issue=\"27759\")]\n+\n // @has issue_27759/unstable/index.html\n // @has - '<code>test</code>'\n // @has - '<a href=\"http://issue_url/27759\">#27759</a>'"}]}