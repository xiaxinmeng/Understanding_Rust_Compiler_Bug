{"sha": "9e66f2c6b4d102a47aa596e0dda7ba64f28bac6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNjZmMmM2YjRkMTAyYTQ3YWE1OTZlMGRkYTdiYTY0ZjI4YmFjNmE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-20T22:06:34Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-20T22:06:34Z"}, "message": "std: Update atomic documentation to remove 'mut'\n\nIt's all no longer necessary", "tree": {"sha": "a3a893f15f5437452fdd96e7558fb3a4099ffb6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3a893f15f5437452fdd96e7558fb3a4099ffb6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e66f2c6b4d102a47aa596e0dda7ba64f28bac6a", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e66f2c6b4d102a47aa596e0dda7ba64f28bac6a", "html_url": "https://github.com/rust-lang/rust/commit/9e66f2c6b4d102a47aa596e0dda7ba64f28bac6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e66f2c6b4d102a47aa596e0dda7ba64f28bac6a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61622dd20cec5d3ec599414cc4720b86d14fd4b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/61622dd20cec5d3ec599414cc4720b86d14fd4b1", "html_url": "https://github.com/rust-lang/rust/commit/61622dd20cec5d3ec599414cc4720b86d14fd4b1"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "32e0ec3ad9d6f324bc16d671da2d937fce1d97ef", "filename": "src/libstd/sync/atomics.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9e66f2c6b4d102a47aa596e0dda7ba64f28bac6a/src%2Flibstd%2Fsync%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e66f2c6b4d102a47aa596e0dda7ba64f28bac6a/src%2Flibstd%2Fsync%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fatomics.rs?ref=9e66f2c6b4d102a47aa596e0dda7ba64f28bac6a", "patch": "@@ -288,15 +288,15 @@ impl AtomicBool {\n     /// ```\n     /// use std::sync::atomics::{AtomicBool, SeqCst};\n     ///\n-    /// let mut foo = AtomicBool::new(true);\n+    /// let foo = AtomicBool::new(true);\n     /// assert_eq!(true, foo.fetch_and(false, SeqCst));\n     /// assert_eq!(false, foo.load(SeqCst));\n     ///\n-    /// let mut foo = AtomicBool::new(true);\n+    /// let foo = AtomicBool::new(true);\n     /// assert_eq!(true, foo.fetch_and(true, SeqCst));\n     /// assert_eq!(true, foo.load(SeqCst));\n     ///\n-    /// let mut foo = AtomicBool::new(false);\n+    /// let foo = AtomicBool::new(false);\n     /// assert_eq!(false, foo.fetch_and(false, SeqCst));\n     /// assert_eq!(false, foo.load(SeqCst));\n     /// ```\n@@ -318,16 +318,16 @@ impl AtomicBool {\n     /// ```\n     /// use std::sync::atomics::{AtomicBool, SeqCst};\n     ///\n-    /// let mut foo = AtomicBool::new(true);\n+    /// let foo = AtomicBool::new(true);\n     /// assert_eq!(true, foo.fetch_nand(false, SeqCst));\n     /// assert_eq!(true, foo.load(SeqCst));\n     ///\n-    /// let mut foo = AtomicBool::new(true);\n+    /// let foo = AtomicBool::new(true);\n     /// assert_eq!(true, foo.fetch_nand(true, SeqCst));\n     /// assert_eq!(0, foo.load(SeqCst) as int);\n     /// assert_eq!(false, foo.load(SeqCst));\n     ///\n-    /// let mut foo = AtomicBool::new(false);\n+    /// let foo = AtomicBool::new(false);\n     /// assert_eq!(false, foo.fetch_nand(false, SeqCst));\n     /// assert_eq!(true, foo.load(SeqCst));\n     /// ```\n@@ -349,15 +349,15 @@ impl AtomicBool {\n     /// ```\n     /// use std::sync::atomics::{AtomicBool, SeqCst};\n     ///\n-    /// let mut foo = AtomicBool::new(true);\n+    /// let foo = AtomicBool::new(true);\n     /// assert_eq!(true, foo.fetch_or(false, SeqCst));\n     /// assert_eq!(true, foo.load(SeqCst));\n     ///\n-    /// let mut foo = AtomicBool::new(true);\n+    /// let foo = AtomicBool::new(true);\n     /// assert_eq!(true, foo.fetch_or(true, SeqCst));\n     /// assert_eq!(true, foo.load(SeqCst));\n     ///\n-    /// let mut foo = AtomicBool::new(false);\n+    /// let foo = AtomicBool::new(false);\n     /// assert_eq!(false, foo.fetch_or(false, SeqCst));\n     /// assert_eq!(false, foo.load(SeqCst));\n     /// ```\n@@ -379,15 +379,15 @@ impl AtomicBool {\n     /// ```\n     /// use std::sync::atomics::{AtomicBool, SeqCst};\n     ///\n-    /// let mut foo = AtomicBool::new(true);\n+    /// let foo = AtomicBool::new(true);\n     /// assert_eq!(true, foo.fetch_xor(false, SeqCst));\n     /// assert_eq!(true, foo.load(SeqCst));\n     ///\n-    /// let mut foo = AtomicBool::new(true);\n+    /// let foo = AtomicBool::new(true);\n     /// assert_eq!(true, foo.fetch_xor(true, SeqCst));\n     /// assert_eq!(false, foo.load(SeqCst));\n     ///\n-    /// let mut foo = AtomicBool::new(false);\n+    /// let foo = AtomicBool::new(false);\n     /// assert_eq!(false, foo.fetch_xor(false, SeqCst));\n     /// assert_eq!(false, foo.load(SeqCst));\n     /// ```\n@@ -440,7 +440,7 @@ impl AtomicInt {\n     /// ```\n     /// use std::sync::atomics::{AtomicInt, SeqCst};\n     ///\n-    /// let mut foo = AtomicInt::new(0);\n+    /// let foo = AtomicInt::new(0);\n     /// assert_eq!(0, foo.fetch_add(10, SeqCst));\n     /// assert_eq!(10, foo.load(SeqCst));\n     /// ```\n@@ -456,7 +456,7 @@ impl AtomicInt {\n     /// ```\n     /// use std::sync::atomics::{AtomicInt, SeqCst};\n     ///\n-    /// let mut foo = AtomicInt::new(0);\n+    /// let foo = AtomicInt::new(0);\n     /// assert_eq!(0, foo.fetch_sub(10, SeqCst));\n     /// assert_eq!(-10, foo.load(SeqCst));\n     /// ```\n@@ -507,7 +507,7 @@ impl AtomicUint {\n     /// ```\n     /// use std::sync::atomics::{AtomicUint, SeqCst};\n     ///\n-    /// let mut foo = AtomicUint::new(0);\n+    /// let foo = AtomicUint::new(0);\n     /// assert_eq!(0, foo.fetch_add(10, SeqCst));\n     /// assert_eq!(10, foo.load(SeqCst));\n     /// ```\n@@ -523,7 +523,7 @@ impl AtomicUint {\n     /// ```\n     /// use std::sync::atomics::{AtomicUint, SeqCst};\n     ///\n-    /// let mut foo = AtomicUint::new(10);\n+    /// let foo = AtomicUint::new(10);\n     /// assert_eq!(10, foo.fetch_sub(10, SeqCst));\n     /// assert_eq!(0, foo.load(SeqCst));\n     /// ```\n@@ -790,7 +790,7 @@ mod test {\n \n     #[test]\n     fn bool_() {\n-        let mut a = AtomicBool::new(false);\n+        let a = AtomicBool::new(false);\n         assert_eq!(a.compare_and_swap(false, true, SeqCst), false);\n         assert_eq!(a.compare_and_swap(false, true, SeqCst), true);\n \n@@ -800,13 +800,13 @@ mod test {\n \n     #[test]\n     fn option_empty() {\n-        let mut option: AtomicOption<()> = AtomicOption::empty();\n+        let option: AtomicOption<()> = AtomicOption::empty();\n         assert!(option.is_empty(SeqCst));\n     }\n \n     #[test]\n     fn option_swap() {\n-        let mut p = AtomicOption::new(~1);\n+        let p = AtomicOption::new(~1);\n         let a = ~2;\n \n         let b = p.swap(a, SeqCst);\n@@ -817,7 +817,7 @@ mod test {\n \n     #[test]\n     fn option_take() {\n-        let mut p = AtomicOption::new(~1);\n+        let p = AtomicOption::new(~1);\n \n         assert_eq!(p.take(SeqCst), Some(~1));\n         assert_eq!(p.take(SeqCst), None);\n@@ -830,7 +830,7 @@ mod test {\n \n     #[test]\n     fn option_fill() {\n-        let mut p = AtomicOption::new(~1);\n+        let p = AtomicOption::new(~1);\n         assert!(p.fill(~2, SeqCst).is_some()); // should fail; shouldn't leak!\n         assert_eq!(p.take(SeqCst), Some(~1));\n \n@@ -840,7 +840,7 @@ mod test {\n \n     #[test]\n     fn bool_and() {\n-        let mut a = AtomicBool::new(true);\n+        let a = AtomicBool::new(true);\n         assert_eq!(a.fetch_and(false, SeqCst),true);\n         assert_eq!(a.load(SeqCst),false);\n     }\n@@ -867,7 +867,7 @@ mod test {\n             let mut slot = 0u8;\n             assert_eq!(super::atomic_compare_and_swap(&mut slot, 1, 2, SeqCst), 0);\n \n-            let mut slot = 0u32;\n+            let slot = 0u32;\n             assert_eq!(super::atomic_load(&slot, SeqCst), 0);\n \n             let mut slot = 0u64;"}]}