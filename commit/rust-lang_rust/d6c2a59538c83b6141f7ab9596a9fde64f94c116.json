{"sha": "d6c2a59538c83b6141f7ab9596a9fde64f94c116", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YzJhNTk1MzhjODNiNjE0MWY3YWI5NTk2YTlmZGU2NGY5NGMxMTY=", "commit": {"author": {"name": "Michal Terepeta", "email": "michal.terepeta@gmail.com", "date": "2020-01-03T16:02:08Z"}, "committer": {"name": "Michal Terepeta", "email": "michal.terepeta@gmail.com", "date": "2020-01-03T18:58:11Z"}, "message": "Split `infer` query into two for better profiling\n\nThis is the same change as we did with `crate_def_map` and it does seem\nthat we mostly spend time in salsa, without recomputing much on\nrust-analyzer side.\n\nExample output:\n\n```\n 233ms - handle_inlay_hints\n      163ms - get_inlay_hints\n          163ms - SourceAnalyzer::new\n               67ms - def_with_body_from_child_node\n                   67ms - analyze_container\n                       67ms - analyze_container\n                           67ms - Module::from_definition\n                               67ms - Module::from_file\n                                   67ms - crate_def_map\n                                        0ms - parse_macro_query (6 calls)\n                                        0ms - raw_items_query (1 calls)\n                                       66ms - ???\n                            0ms - crate_def_map (1 calls)\n                        0ms - crate_def_map (1 calls)\n               96ms - infer\n                    2ms - trait_solve_query (2 calls)\n                   94ms - ???\n                0ms - body_with_source_map_query (1 calls)\n                0ms - crate_def_map (1 calls)\n      [...]\n```\n\nSigned-off-by: Michal Terepeta <michal.terepeta@gmail.com>", "tree": {"sha": "77ce23e02956f78d7f9efe1a4eb6a7515ae3344c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77ce23e02956f78d7f9efe1a4eb6a7515ae3344c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6c2a59538c83b6141f7ab9596a9fde64f94c116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c2a59538c83b6141f7ab9596a9fde64f94c116", "html_url": "https://github.com/rust-lang/rust/commit/d6c2a59538c83b6141f7ab9596a9fde64f94c116", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6c2a59538c83b6141f7ab9596a9fde64f94c116/comments", "author": {"login": "michalt", "id": 119711, "node_id": "MDQ6VXNlcjExOTcxMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/119711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michalt", "html_url": "https://github.com/michalt", "followers_url": "https://api.github.com/users/michalt/followers", "following_url": "https://api.github.com/users/michalt/following{/other_user}", "gists_url": "https://api.github.com/users/michalt/gists{/gist_id}", "starred_url": "https://api.github.com/users/michalt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michalt/subscriptions", "organizations_url": "https://api.github.com/users/michalt/orgs", "repos_url": "https://api.github.com/users/michalt/repos", "events_url": "https://api.github.com/users/michalt/events{/privacy}", "received_events_url": "https://api.github.com/users/michalt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michalt", "id": 119711, "node_id": "MDQ6VXNlcjExOTcxMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/119711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michalt", "html_url": "https://github.com/michalt", "followers_url": "https://api.github.com/users/michalt/followers", "following_url": "https://api.github.com/users/michalt/following{/other_user}", "gists_url": "https://api.github.com/users/michalt/gists{/gist_id}", "starred_url": "https://api.github.com/users/michalt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michalt/subscriptions", "organizations_url": "https://api.github.com/users/michalt/orgs", "repos_url": "https://api.github.com/users/michalt/repos", "events_url": "https://api.github.com/users/michalt/events{/privacy}", "received_events_url": "https://api.github.com/users/michalt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15d94cbffcb07fa910d715b2acef88109ae24d39", "url": "https://api.github.com/repos/rust-lang/rust/commits/15d94cbffcb07fa910d715b2acef88109ae24d39", "html_url": "https://github.com/rust-lang/rust/commit/15d94cbffcb07fa910d715b2acef88109ae24d39"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "e6079b88dadbde627d3f9a1fd69580901e93a059", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6c2a59538c83b6141f7ab9596a9fde64f94c116/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c2a59538c83b6141f7ab9596a9fde64f94c116/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=d6c2a59538c83b6141f7ab9596a9fde64f94c116", "patch": "@@ -12,10 +12,10 @@ pub use hir_expand::db::{\n     ParseMacroQuery,\n };\n pub use hir_ty::db::{\n-    AssociatedTyDataQuery, CallableItemSignatureQuery, FieldTypesQuery, GenericDefaultsQuery,\n-    GenericPredicatesQuery, HirDatabase, HirDatabaseStorage, ImplDatumQuery, ImplsForTraitQuery,\n-    ImplsInCrateQuery, InferQuery, StructDatumQuery, TraitDatumQuery, TraitSolveQuery, TyQuery,\n-    ValueTyQuery,\n+    AssociatedTyDataQuery, CallableItemSignatureQuery, DoInferQuery, FieldTypesQuery,\n+    GenericDefaultsQuery, GenericPredicatesQuery, HirDatabase, HirDatabaseStorage, ImplDatumQuery,\n+    ImplsForTraitQuery, ImplsInCrateQuery, StructDatumQuery, TraitDatumQuery, TraitSolveQuery,\n+    TyQuery, ValueTyQuery,\n };\n \n #[test]"}, {"sha": "eb521c7a0648f9500c071ede9fafd2382aef837a", "filename": "crates/ra_hir_ty/src/db.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d6c2a59538c83b6141f7ab9596a9fde64f94c116/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c2a59538c83b6141f7ab9596a9fde64f94c116/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs?ref=d6c2a59538c83b6141f7ab9596a9fde64f94c116", "patch": "@@ -7,6 +7,7 @@ use hir_def::{\n };\n use ra_arena::map::ArenaMap;\n use ra_db::{salsa, CrateId};\n+use ra_prof::profile;\n \n use crate::{\n     method_resolution::CrateImplBlocks,\n@@ -18,9 +19,12 @@ use crate::{\n #[salsa::query_group(HirDatabaseStorage)]\n #[salsa::requires(salsa::Database)]\n pub trait HirDatabase: DefDatabase {\n-    #[salsa::invoke(crate::infer_query)]\n+    #[salsa::transparent]\n     fn infer(&self, def: DefWithBodyId) -> Arc<InferenceResult>;\n \n+    #[salsa::invoke(crate::do_infer_query)]\n+    fn do_infer(&self, def: DefWithBodyId) -> Arc<InferenceResult>;\n+\n     #[salsa::invoke(crate::lower::ty_query)]\n     #[salsa::cycle(crate::lower::ty_recover)]\n     fn ty(&self, def: TyDefId) -> Ty;\n@@ -104,6 +108,11 @@ pub trait HirDatabase: DefDatabase {\n     ) -> Option<crate::traits::Solution>;\n }\n \n+fn infer(db: &impl HirDatabase, def: DefWithBodyId) -> Arc<InferenceResult> {\n+    let _p = profile(\"infer\");\n+    db.do_infer(def)\n+}\n+\n #[test]\n fn hir_database_is_object_safe() {\n     fn _assert_object_safe(_: &dyn HirDatabase) {}"}, {"sha": "e2eda3134b74834cf839fbd58fbd7b7ae8039183", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6c2a59538c83b6141f7ab9596a9fde64f94c116/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c2a59538c83b6141f7ab9596a9fde64f94c116/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=d6c2a59538c83b6141f7ab9596a9fde64f94c116", "patch": "@@ -62,8 +62,8 @@ mod pat;\n mod coerce;\n \n /// The entry point of type inference.\n-pub fn infer_query(db: &impl HirDatabase, def: DefWithBodyId) -> Arc<InferenceResult> {\n-    let _p = profile(\"infer_query\");\n+pub fn do_infer_query(db: &impl HirDatabase, def: DefWithBodyId) -> Arc<InferenceResult> {\n+    let _p = profile(\"do_infer\");\n     let resolver = def.resolver(db);\n     let mut ctx = InferenceContext::new(db, def, resolver);\n "}, {"sha": "d63f862dc97a55db36f002708df44d6cec3b1db4", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6c2a59538c83b6141f7ab9596a9fde64f94c116/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c2a59538c83b6141f7ab9596a9fde64f94c116/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=d6c2a59538c83b6141f7ab9596a9fde64f94c116", "patch": "@@ -58,7 +58,7 @@ use crate::{\n use display::{HirDisplay, HirFormatter};\n \n pub use autoderef::autoderef;\n-pub use infer::{infer_query, InferTy, InferenceResult};\n+pub use infer::{do_infer_query, InferTy, InferenceResult};\n pub use lower::CallableDef;\n pub use lower::{callable_item_sig, TyDefId, ValueTyDefId};\n pub use traits::{InEnvironment, Obligation, ProjectionPredicate, TraitEnvironment};"}, {"sha": "f92950b71d8232f648b147c1d8200e240e458fa8", "filename": "crates/ra_ide/src/change.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6c2a59538c83b6141f7ab9596a9fde64f94c116/crates%2Fra_ide%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c2a59538c83b6141f7ab9596a9fde64f94c116/crates%2Fra_ide%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fchange.rs?ref=d6c2a59538c83b6141f7ab9596a9fde64f94c116", "patch": "@@ -273,7 +273,7 @@ impl RootDatabase {\n         self.query(hir::db::BodyWithSourceMapQuery).sweep(sweep);\n \n         self.query(hir::db::ExprScopesQuery).sweep(sweep);\n-        self.query(hir::db::InferQuery).sweep(sweep);\n+        self.query(hir::db::DoInferQuery).sweep(sweep);\n         self.query(hir::db::BodyQuery).sweep(sweep);\n     }\n \n@@ -320,7 +320,7 @@ impl RootDatabase {\n             hir::db::LangItemQuery\n             hir::db::DocumentationQuery\n             hir::db::ExprScopesQuery\n-            hir::db::InferQuery\n+            hir::db::DoInferQuery\n             hir::db::TyQuery\n             hir::db::ValueTyQuery\n             hir::db::FieldTypesQuery"}]}