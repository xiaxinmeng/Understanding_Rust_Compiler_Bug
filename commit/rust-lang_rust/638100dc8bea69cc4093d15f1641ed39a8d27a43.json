{"sha": "638100dc8bea69cc4093d15f1641ed39a8d27a43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzODEwMGRjOGJlYTY5Y2M0MDkzZDE1ZjE2NDFlZDM5YThkMjdhNDM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-06-29T15:40:00Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-07-08T19:20:17Z"}, "message": "Refactor a bit & introduce Environment struct", "tree": {"sha": "bb7cf46f4095e9e427f7d4277f28693a3bd671a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb7cf46f4095e9e427f7d4277f28693a3bd671a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/638100dc8bea69cc4093d15f1641ed39a8d27a43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/638100dc8bea69cc4093d15f1641ed39a8d27a43", "html_url": "https://github.com/rust-lang/rust/commit/638100dc8bea69cc4093d15f1641ed39a8d27a43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/638100dc8bea69cc4093d15f1641ed39a8d27a43/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32100022010ecfefd1ea06caa71d1a508d2eb75d", "url": "https://api.github.com/repos/rust-lang/rust/commits/32100022010ecfefd1ea06caa71d1a508d2eb75d", "html_url": "https://github.com/rust-lang/rust/commit/32100022010ecfefd1ea06caa71d1a508d2eb75d"}], "stats": {"total": 128, "additions": 107, "deletions": 21}, "files": [{"sha": "9d46f9025a5e218e3149e6284ae1eee3d54c4e0d", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638100dc8bea69cc4093d15f1641ed39a8d27a43/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638100dc8bea69cc4093d15f1641ed39a8d27a43/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=638100dc8bea69cc4093d15f1641ed39a8d27a43", "patch": "@@ -217,7 +217,7 @@ pub trait HirDatabase: DefDatabase + AstDatabase {\n     fn implements(\n         &self,\n         krate: Crate,\n-        goal: crate::ty::Canonical<crate::ty::TraitRef>,\n+        goal: crate::ty::Canonical<crate::ty::InEnvironment<crate::ty::TraitRef>>,\n     ) -> Option<crate::ty::traits::Solution>;\n \n     #[salsa::invoke(crate::ty::traits::normalize_query)]"}, {"sha": "b45a188d116352e36ebbe1b625108497e4a3c8cd", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638100dc8bea69cc4093d15f1641ed39a8d27a43/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638100dc8bea69cc4093d15f1641ed39a8d27a43/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=638100dc8bea69cc4093d15f1641ed39a8d27a43", "patch": "@@ -26,7 +26,7 @@ pub(crate) use lower::{\n     callable_item_sig, generic_defaults_query, generic_predicates_query, type_for_def,\n     type_for_field, TypableDef,\n };\n-pub(crate) use traits::ProjectionPredicate;\n+pub(crate) use traits::{Environment, InEnvironment, ProjectionPredicate};\n \n /// A type constructor or type name: this might be something like the primitive\n /// type `bool`, a struct like `Vec`, or things like function pointers or"}, {"sha": "84edd3d46d0d8c01d94a0ce14d07c8d0f944d8c6", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/638100dc8bea69cc4093d15f1641ed39a8d27a43/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638100dc8bea69cc4093d15f1641ed39a8d27a43/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=638100dc8bea69cc4093d15f1641ed39a8d27a43", "patch": "@@ -29,7 +29,8 @@ use test_utils::tested_by;\n use super::{\n     autoderef, method_resolution, op, primitive,\n     traits::{Guidance, Obligation, ProjectionPredicate, Solution},\n-    ApplicationTy, CallableDef, ProjectionTy, Substs, TraitRef, Ty, TypableDef, TypeCtor,\n+    ApplicationTy, CallableDef, InEnvironment, ProjectionTy, Substs, TraitRef, Ty, TypableDef,\n+    TypeCtor,\n };\n use crate::{\n     adt::VariantDef,\n@@ -330,7 +331,9 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         for obligation in obligations {\n             match &obligation {\n                 Obligation::Trait(tr) => {\n-                    let canonicalized = self.canonicalizer().canonicalize_trait_ref(tr.clone());\n+                    let env = Arc::new(super::Environment); // FIXME add environment\n+                    let in_env = InEnvironment::new(env, tr.clone());\n+                    let canonicalized = self.canonicalizer().canonicalize_trait_ref(in_env);\n                     let solution = self\n                         .db\n                         .implements(self.resolver.krate().unwrap(), canonicalized.value.clone());"}, {"sha": "ad2eefcaf0613caf13bd10f236f0ffdf1991d10b", "filename": "crates/ra_hir/src/ty/infer/unify.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/638100dc8bea69cc4093d15f1641ed39a8d27a43/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638100dc8bea69cc4093d15f1641ed39a8d27a43/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs?ref=638100dc8bea69cc4093d15f1641ed39a8d27a43", "patch": "@@ -2,7 +2,9 @@\n \n use super::InferenceContext;\n use crate::db::HirDatabase;\n-use crate::ty::{Canonical, InferTy, ProjectionPredicate, ProjectionTy, TraitRef, Ty};\n+use crate::ty::{\n+    Canonical, InEnvironment, InferTy, ProjectionPredicate, ProjectionTy, TraitRef, Ty,\n+};\n \n impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     pub(super) fn canonicalizer<'b>(&'b mut self) -> Canonicalizer<'a, 'b, D>\n@@ -105,14 +107,24 @@ where\n         ProjectionPredicate { ty, projection_ty }\n     }\n \n+    // FIXME: add some point, we need to introduce a `Fold` trait that abstracts\n+    // over all the things that can be canonicalized (like Chalk and rustc have)\n+\n     pub fn canonicalize_ty(mut self, ty: Ty) -> Canonicalized<Ty> {\n         let result = self.do_canonicalize_ty(ty);\n         self.into_canonicalized(result)\n     }\n \n-    pub fn canonicalize_trait_ref(mut self, trait_ref: TraitRef) -> Canonicalized<TraitRef> {\n-        let result = self.do_canonicalize_trait_ref(trait_ref);\n-        self.into_canonicalized(result)\n+    pub fn canonicalize_trait_ref(\n+        mut self,\n+        trait_ref_in_env: InEnvironment<TraitRef>,\n+    ) -> Canonicalized<InEnvironment<TraitRef>> {\n+        let result = self.do_canonicalize_trait_ref(trait_ref_in_env.value);\n+        // FIXME canonicalize env\n+        self.into_canonicalized(InEnvironment {\n+            value: result,\n+            environment: trait_ref_in_env.environment,\n+        })\n     }\n \n     pub fn canonicalize_projection("}, {"sha": "770e1964ed337c17032e25f82c84b36dc3fdb876", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/638100dc8bea69cc4093d15f1641ed39a8d27a43/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638100dc8bea69cc4093d15f1641ed39a8d27a43/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=638100dc8bea69cc4093d15f1641ed39a8d27a43", "patch": "@@ -7,7 +7,7 @@ use std::sync::Arc;\n use arrayvec::ArrayVec;\n use rustc_hash::FxHashMap;\n \n-use super::{autoderef, Canonical, TraitRef};\n+use super::{autoderef, Canonical, Environment, InEnvironment, TraitRef};\n use crate::{\n     generics::HasGenericParams,\n     impl_block::{ImplBlock, ImplId, ImplItem},\n@@ -209,7 +209,8 @@ fn iterate_trait_method_candidates<T>(\n                 let data = m.data(db);\n                 if name.map_or(true, |name| data.name() == name) && data.has_self_param() {\n                     if !known_implemented {\n-                        let trait_ref = canonical_trait_ref(db, t, ty.clone());\n+                        let env = Arc::new(super::Environment); // FIXME add environment\n+                        let trait_ref = canonical_trait_ref(db, env, t, ty.clone());\n                         if db.implements(krate, trait_ref).is_none() {\n                             continue 'traits;\n                         }\n@@ -279,9 +280,10 @@ impl Ty {\n /// for all other parameters, to query Chalk with it.\n fn canonical_trait_ref(\n     db: &impl HirDatabase,\n+    env: Arc<Environment>,\n     trait_: Trait,\n     self_ty: Canonical<Ty>,\n-) -> Canonical<TraitRef> {\n+) -> Canonical<InEnvironment<TraitRef>> {\n     let mut substs = Vec::new();\n     let generics = trait_.generic_params(db);\n     let num_vars = self_ty.num_vars;\n@@ -296,6 +298,6 @@ fn canonical_trait_ref(\n     );\n     Canonical {\n         num_vars: substs.len() - 1 + self_ty.num_vars,\n-        value: TraitRef { trait_, substs: substs.into() },\n+        value: InEnvironment::new(env, TraitRef { trait_, substs: substs.into() }),\n     }\n }"}, {"sha": "718970553b10110447971e007e048b396538250b", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/638100dc8bea69cc4093d15f1641ed39a8d27a43/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638100dc8bea69cc4093d15f1641ed39a8d27a43/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=638100dc8bea69cc4093d15f1641ed39a8d27a43", "patch": "@@ -67,6 +67,27 @@ fn solve(\n     solution\n }\n \n+/// A set of clauses that we assume to be true. E.g. if we are inside this function:\n+/// ```rust\n+/// fn foo<T: Default>(t: T) {}\n+/// ```\n+/// we assume that `T: Default`.\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n+pub struct Environment;\n+\n+/// Something (usually a goal), along with an environment.\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n+pub struct InEnvironment<T> {\n+    pub environment: Arc<Environment>,\n+    pub value: T,\n+}\n+\n+impl<T> InEnvironment<T> {\n+    pub fn new(environment: Arc<Environment>, value: T) -> InEnvironment<T> {\n+        InEnvironment { environment, value }\n+    }\n+}\n+\n /// Something that needs to be proven (by Chalk) during type checking, e.g. that\n /// a certain type implements a certain trait. Proving the Obligation might\n /// result in additional information about inference variables.\n@@ -97,16 +118,10 @@ pub struct ProjectionPredicate {\n pub(crate) fn implements_query(\n     db: &impl HirDatabase,\n     krate: Crate,\n-    trait_ref: Canonical<TraitRef>,\n+    trait_ref: Canonical<InEnvironment<TraitRef>>,\n ) -> Option<Solution> {\n     let _p = profile(\"implements_query\");\n-    let goal: chalk_ir::Goal = trait_ref.value.to_chalk(db).cast();\n-    debug!(\"goal: {:?}\", goal);\n-    let env = chalk_ir::Environment::new();\n-    let in_env = chalk_ir::InEnvironment::new(&env, goal);\n-    let parameter = chalk_ir::ParameterKind::Ty(chalk_ir::UniverseIndex::ROOT);\n-    let canonical =\n-        chalk_ir::Canonical { value: in_env, binders: vec![parameter; trait_ref.num_vars] };\n+    let canonical = trait_ref.to_chalk(db).cast();\n     // We currently don't deal with universes (I think / hope they're not yet\n     // relevant for our use cases?)\n     let u_canonical = chalk_ir::UCanonical { canonical, universes: 1 };"}, {"sha": "bee35fa628790610efe8b8bc5c00b311a3ac740e", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/638100dc8bea69cc4093d15f1641ed39a8d27a43/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638100dc8bea69cc4093d15f1641ed39a8d27a43/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=638100dc8bea69cc4093d15f1641ed39a8d27a43", "patch": "@@ -12,7 +12,7 @@ use chalk_rust_ir::{AssociatedTyDatum, ImplDatum, StructDatum, TraitDatum};\n use ra_db::salsa::{InternId, InternKey};\n use test_utils::tested_by;\n \n-use super::ChalkContext;\n+use super::{Canonical, ChalkContext};\n use crate::{\n     db::HirDatabase,\n     generics::GenericDef,\n@@ -218,6 +218,60 @@ impl ToChalk for ProjectionTy {\n     }\n }\n \n+impl<T> ToChalk for Canonical<T>\n+where\n+    T: ToChalk,\n+{\n+    type Chalk = chalk_ir::Canonical<T::Chalk>;\n+\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Canonical<T::Chalk> {\n+        let parameter = chalk_ir::ParameterKind::Ty(chalk_ir::UniverseIndex::ROOT);\n+        let value = self.value.to_chalk(db);\n+        let canonical = chalk_ir::Canonical { value, binders: vec![parameter; self.num_vars] };\n+        canonical\n+    }\n+\n+    fn from_chalk(db: &impl HirDatabase, canonical: chalk_ir::Canonical<T::Chalk>) -> Canonical<T> {\n+        Canonical { num_vars: canonical.binders.len(), value: from_chalk(db, canonical.value) }\n+    }\n+}\n+\n+impl ToChalk for Arc<super::Environment> {\n+    type Chalk = Arc<chalk_ir::Environment>;\n+\n+    fn to_chalk(self, _db: &impl HirDatabase) -> Arc<chalk_ir::Environment> {\n+        chalk_ir::Environment::new()\n+    }\n+\n+    fn from_chalk(\n+        _db: &impl HirDatabase,\n+        _env: Arc<chalk_ir::Environment>,\n+    ) -> Arc<super::Environment> {\n+        Arc::new(super::Environment)\n+    }\n+}\n+\n+impl<T: ToChalk> ToChalk for super::InEnvironment<T> {\n+    type Chalk = chalk_ir::InEnvironment<T::Chalk>;\n+\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::InEnvironment<T::Chalk> {\n+        chalk_ir::InEnvironment {\n+            environment: self.environment.to_chalk(db),\n+            goal: self.value.to_chalk(db),\n+        }\n+    }\n+\n+    fn from_chalk(\n+        db: &impl HirDatabase,\n+        in_env: chalk_ir::InEnvironment<T::Chalk>,\n+    ) -> super::InEnvironment<T> {\n+        super::InEnvironment {\n+            environment: from_chalk(db, in_env.environment),\n+            value: from_chalk(db, in_env.goal),\n+        }\n+    }\n+}\n+\n fn make_binders<T>(value: T, num_vars: usize) -> chalk_ir::Binders<T> {\n     chalk_ir::Binders {\n         value,"}]}