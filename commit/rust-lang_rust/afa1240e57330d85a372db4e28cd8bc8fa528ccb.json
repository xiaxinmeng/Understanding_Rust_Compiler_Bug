{"sha": "afa1240e57330d85a372db4e28cd8bc8fa528ccb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYTEyNDBlNTczMzBkODVhMzcyZGI0ZTI4Y2Q4YmM4ZmE1MjhjY2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-29T20:38:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-29T20:38:15Z"}, "message": "Auto merge of #41544 - alexcrichton:bump-bootstrap, r=brson\n\nUpdate stage0 bootstrap compiler\n\nWe've got a freshly minted beta compiler, let's update to use that on nightly!\nThis has a few other changes associated with it as well\n\n* A bump to the rustc version number (to 1.19.0)\n* Movement of the `cargo` and `rls` submodules to their \"proper\" location in\n  `src/tools/{cargo,rls}`. Now that Cargo workspaces support the `exclude`\n  option this can work.\n* Updates of the `cargo` and `rls` submodules to their master branches.\n* Tweak to the `src/stage0.txt` format to be more amenable for Cargo version\n  numbers. On the beta channel Cargo will bootstrap from a different version\n  than rustc (e.g. the version numbers are different), so we need different\n  configuration for this.\n* Addition of `dev` as a readable key in the `src/stage0.txt` format. If present\n  then stage0 compilers are downloaded from `dev-static.rust-lang.org` instead\n  of `static.rust-lang.org`. This is added to accomodate our updated release\n  process with Travis and AppVeyor.", "tree": {"sha": "196d279b28389512c66dd2facdf615604ac51d1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/196d279b28389512c66dd2facdf615604ac51d1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afa1240e57330d85a372db4e28cd8bc8fa528ccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afa1240e57330d85a372db4e28cd8bc8fa528ccb", "html_url": "https://github.com/rust-lang/rust/commit/afa1240e57330d85a372db4e28cd8bc8fa528ccb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afa1240e57330d85a372db4e28cd8bc8fa528ccb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4d3ed64ec7f6d7a9fa0530377a29520a90a451f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4d3ed64ec7f6d7a9fa0530377a29520a90a451f", "html_url": "https://github.com/rust-lang/rust/commit/b4d3ed64ec7f6d7a9fa0530377a29520a90a451f"}, {"sha": "5daf557a77391f14a26038d7ab70d424cfe5b040", "url": "https://api.github.com/repos/rust-lang/rust/commits/5daf557a77391f14a26038d7ab70d424cfe5b040", "html_url": "https://github.com/rust-lang/rust/commit/5daf557a77391f14a26038d7ab70d424cfe5b040"}], "stats": {"total": 252, "additions": 100, "deletions": 152}, "files": [{"sha": "7cd896b763f543fe87345089b5432036b6c24952", "filename": ".gitmodules", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/afa1240e57330d85a372db4e28cd8bc8fa528ccb/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/afa1240e57330d85a372db4e28cd8bc8fa528ccb/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=afa1240e57330d85a372db4e28cd8bc8fa528ccb", "patch": "@@ -22,15 +22,14 @@\n \tpath = src/doc/nomicon\n \turl = https://github.com/rust-lang-nursery/nomicon.git\n [submodule \"src/tools/cargo\"]\n-\tpath = cargo\n-\turl = https://github.com/rust-lang/cargo.git\n+\tpath = src/tools/cargo\n+\turl = https://github.com/rust-lang/cargo\n [submodule \"reference\"]\n \tpath = src/doc/reference\n \turl = https://github.com/rust-lang-nursery/reference.git\n [submodule \"book\"]\n \tpath = src/doc/book\n \turl = https://github.com/rust-lang/book.git\n-[submodule \"rls\"]\n-\tpath = rls\n-\turl = https://github.com/rust-lang-nursery/rls.git\n-\n+[submodule \"src/tools/rls\"]\n+\tpath = src/tools/rls\n+\turl = https://github.com/rust-lang-nursery/rls"}, {"sha": "03efb7fc8b0dbb54973ee1b6188f3faf14fffe36", "filename": "cargo", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo?ref=b4d3ed64ec7f6d7a9fa0530377a29520a90a451f", "patch": "@@ -1 +0,0 @@\n-Subproject commit 03efb7fc8b0dbb54973ee1b6188f3faf14fffe36"}, {"sha": "6ecff95fdc3ee7ceed2b9b0cc1a3a64876860bce", "filename": "rls", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rls?ref=b4d3ed64ec7f6d7a9fa0530377a29520a90a451f", "patch": "@@ -1 +0,0 @@\n-Subproject commit 6ecff95fdc3ee7ceed2b9b0cc1a3a64876860bce"}, {"sha": "9aca3e134d6555aa6cd220675174267d3596cf11", "filename": "src/Cargo.toml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.toml?ref=afa1240e57330d85a372db4e28cd8bc8fa528ccb", "patch": "@@ -15,6 +15,12 @@ members = [\n   \"tools/remote-test-server\",\n ]\n \n+# These projects have their own Cargo.lock\n+exclude = [\n+  \"tools/cargo\",\n+  \"tools/rls\",\n+]\n+\n # Curiously, compiletest will segfault if compiled with opt-level=3 on 64-bit\n # MSVC when running the compile-fail test suite when a should-fail test panics.\n # But hey if this is removed and it gets past the bots, sounds good to me."}, {"sha": "2bccdef9b0ac4f5afc48155be8cfb40ffc8d77bb", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=afa1240e57330d85a372db4e28cd8bc8fa528ccb", "patch": "@@ -159,40 +159,41 @@ def format_build_time(duration):\n class RustBuild(object):\n     def download_stage0(self):\n         cache_dst = os.path.join(self.build_dir, \"cache\")\n-        rustc_cache = os.path.join(cache_dst, self.stage0_rustc_date())\n+        rustc_cache = os.path.join(cache_dst, self.stage0_date())\n         if not os.path.exists(rustc_cache):\n             os.makedirs(rustc_cache)\n \n-        channel = self.stage0_rustc_channel()\n+        rustc_channel = self.stage0_rustc_channel()\n+        cargo_channel = self.stage0_cargo_channel()\n \n         if self.rustc().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.rustc()) or self.rustc_out_of_date()):\n             self.print_what_it_means_to_bootstrap()\n             if os.path.exists(self.bin_root()):\n                 shutil.rmtree(self.bin_root())\n-            filename = \"rust-std-{}-{}.tar.gz\".format(channel, self.build)\n-            url = \"https://static.rust-lang.org/dist/\" + self.stage0_rustc_date()\n+            filename = \"rust-std-{}-{}.tar.gz\".format(rustc_channel, self.build)\n+            url = self._download_url + \"/dist/\" + self.stage0_date()\n             tarball = os.path.join(rustc_cache, filename)\n             if not os.path.exists(tarball):\n                 get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n             unpack(tarball, self.bin_root(),\n                    match=\"rust-std-\" + self.build,\n                    verbose=self.verbose)\n \n-            filename = \"rustc-{}-{}.tar.gz\".format(channel, self.build)\n-            url = \"https://static.rust-lang.org/dist/\" + self.stage0_rustc_date()\n+            filename = \"rustc-{}-{}.tar.gz\".format(rustc_channel, self.build)\n+            url = self._download_url + \"/dist/\" + self.stage0_date()\n             tarball = os.path.join(rustc_cache, filename)\n             if not os.path.exists(tarball):\n                 get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n             unpack(tarball, self.bin_root(), match=\"rustc\", verbose=self.verbose)\n             self.fix_executable(self.bin_root() + \"/bin/rustc\")\n             self.fix_executable(self.bin_root() + \"/bin/rustdoc\")\n             with open(self.rustc_stamp(), 'w') as f:\n-                f.write(self.stage0_rustc_date())\n+                f.write(self.stage0_date())\n \n             if \"pc-windows-gnu\" in self.build:\n-                filename = \"rust-mingw-{}-{}.tar.gz\".format(channel, self.build)\n-                url = \"https://static.rust-lang.org/dist/\" + self.stage0_rustc_date()\n+                filename = \"rust-mingw-{}-{}.tar.gz\".format(rustc_channel, self.build)\n+                url = self._download_url + \"/dist/\" + self.stage0_date()\n                 tarball = os.path.join(rustc_cache, filename)\n                 if not os.path.exists(tarball):\n                     get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n@@ -201,15 +202,15 @@ def download_stage0(self):\n         if self.cargo().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.cargo()) or self.cargo_out_of_date()):\n             self.print_what_it_means_to_bootstrap()\n-            filename = \"cargo-{}-{}.tar.gz\".format(channel, self.build)\n-            url = \"https://static.rust-lang.org/dist/\" + self.stage0_rustc_date()\n+            filename = \"cargo-{}-{}.tar.gz\".format(cargo_channel, self.build)\n+            url = self._download_url + \"/dist/\" + self.stage0_date()\n             tarball = os.path.join(rustc_cache, filename)\n             if not os.path.exists(tarball):\n                 get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n             unpack(tarball, self.bin_root(), match=\"cargo\", verbose=self.verbose)\n             self.fix_executable(self.bin_root() + \"/bin/cargo\")\n             with open(self.cargo_stamp(), 'w') as f:\n-                f.write(self.stage0_rustc_date())\n+                f.write(self.stage0_date())\n \n     def fix_executable(self, fname):\n         # If we're on NixOS we need to change the path to the dynamic loader\n@@ -264,12 +265,15 @@ def fix_executable(self, fname):\n             print(\"warning: failed to call patchelf: %s\" % e)\n             return\n \n-    def stage0_rustc_date(self):\n-        return self._rustc_date\n+    def stage0_date(self):\n+        return self._date\n \n     def stage0_rustc_channel(self):\n         return self._rustc_channel\n \n+    def stage0_cargo_channel(self):\n+        return self._cargo_channel\n+\n     def rustc_stamp(self):\n         return os.path.join(self.bin_root(), '.rustc-stamp')\n \n@@ -280,13 +284,13 @@ def rustc_out_of_date(self):\n         if not os.path.exists(self.rustc_stamp()) or self.clean:\n             return True\n         with open(self.rustc_stamp(), 'r') as f:\n-            return self.stage0_rustc_date() != f.read()\n+            return self.stage0_date() != f.read()\n \n     def cargo_out_of_date(self):\n         if not os.path.exists(self.cargo_stamp()) or self.clean:\n             return True\n         with open(self.cargo_stamp(), 'r') as f:\n-            return self.stage0_rustc_date() != f.read()\n+            return self.stage0_date() != f.read()\n \n     def bin_root(self):\n         return os.path.join(self.build_dir, self.build, \"stage0\")\n@@ -585,7 +589,13 @@ def bootstrap():\n             shutil.rmtree('.cargo')\n \n     data = stage0_data(rb.rust_root)\n-    rb._rustc_channel, rb._rustc_date = data['rustc'].split('-', 1)\n+    rb._date = data['date']\n+    rb._rustc_channel = data['rustc']\n+    rb._cargo_channel = data['cargo']\n+    if 'dev' in data:\n+        rb._download_url = 'https://dev-static.rust-lang.org'\n+    else:\n+        rb._download_url = 'https://static.rust-lang.org'\n \n     # Fetch/build the bootstrap\n     rb.build = rb.build_triple()"}, {"sha": "1b9536fba357aa2f840fbaf7ead73a590aefbd78", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=afa1240e57330d85a372db4e28cd8bc8fa528ccb", "patch": "@@ -23,7 +23,7 @@ use build_helper::output;\n use Build;\n \n // The version number\n-pub const CFG_RELEASE_NUM: &'static str = \"1.18.0\";\n+pub const CFG_RELEASE_NUM: &'static str = \"1.19.0\";\n \n // An optional number to put after the label, e.g. '.2' -> '-beta.2'\n // Be sure to make this starts with a dot to conform to semver pre-release"}, {"sha": "4e9f5913b496741beedf5a0ab0af4a2beb352e25", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=afa1240e57330d85a372db4e28cd8bc8fa528ccb", "patch": "@@ -106,7 +106,7 @@ pub fn cargo(build: &Build, stage: u32, host: &str) {\n     let ref newpath = format!(\"{}{}{}\", path.display(), sep, old_path);\n \n     let mut cargo = build.cargo(compiler, Mode::Tool, host, \"test\");\n-    cargo.arg(\"--manifest-path\").arg(build.src.join(\"cargo/Cargo.toml\"));\n+    cargo.arg(\"--manifest-path\").arg(build.src.join(\"src/tools/cargo/Cargo.toml\"));\n \n     // Don't build tests dynamically, just a pain to work with\n     cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");"}, {"sha": "c810a0e05d4d2c528b99e000eb2284632a191d50", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=afa1240e57330d85a372db4e28cd8bc8fa528ccb", "patch": "@@ -461,10 +461,7 @@ pub fn tool(build: &Build, stage: u32, target: &str, tool: &str) {\n     let compiler = Compiler::new(stage, &build.config.build);\n \n     let mut cargo = build.cargo(&compiler, Mode::Tool, target, \"build\");\n-    let mut dir = build.src.join(tool);\n-    if !dir.exists() {\n-        dir = build.src.join(\"src/tools\").join(tool);\n-    }\n+    let dir = build.src.join(\"src/tools\").join(tool);\n     cargo.arg(\"--manifest-path\").arg(dir.join(\"Cargo.toml\"));\n \n     // We don't want to build tools dynamically as they'll be running across"}, {"sha": "5e8d0f4e0c3693d88d139e1caf13ac07677d8e4a", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=afa1240e57330d85a372db4e28cd8bc8fa528ccb", "patch": "@@ -394,8 +394,6 @@ pub fn rust_src(build: &Build) {\n     let src_dirs = [\n         \"man\",\n         \"src\",\n-        \"cargo\",\n-        \"rls\",\n     ];\n \n     let filter_fn = move |path: &Path| {\n@@ -576,7 +574,7 @@ pub fn cargo(build: &Build, stage: u32, target: &str) {\n     println!(\"Dist cargo stage{} ({})\", stage, target);\n     let compiler = Compiler::new(stage, &build.config.build);\n \n-    let src = build.src.join(\"cargo\");\n+    let src = build.src.join(\"src/tools/cargo\");\n     let etc = src.join(\"src/etc\");\n     let release_num = build.release_num(\"cargo\");\n     let name = pkgname(build, \"cargo\");\n@@ -637,7 +635,7 @@ pub fn rls(build: &Build, stage: u32, target: &str) {\n     println!(\"Dist RLS stage{} ({})\", stage, target);\n     let compiler = Compiler::new(stage, &build.config.build);\n \n-    let src = build.src.join(\"rls\");\n+    let src = build.src.join(\"src/tools/rls\");\n     let release_num = build.release_num(\"rls\");\n     let name = pkgname(build, \"rls\");\n     let version = build.rls_info.version(build, &release_num);"}, {"sha": "017d4015134d0371e209157938c184a707d46a99", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=afa1240e57330d85a372db4e28cd8bc8fa528ccb", "patch": "@@ -234,8 +234,8 @@ impl Build {\n             None => false,\n         };\n         let rust_info = channel::GitInfo::new(&src);\n-        let cargo_info = channel::GitInfo::new(&src.join(\"cargo\"));\n-        let rls_info = channel::GitInfo::new(&src.join(\"rls\"));\n+        let cargo_info = channel::GitInfo::new(&src.join(\"src/tools/cargo\"));\n+        let rls_info = channel::GitInfo::new(&src.join(\"src/tools/rls\"));\n         let src_is_git = src.join(\".git\").exists();\n \n         Build {\n@@ -1071,7 +1071,7 @@ impl Build {\n     /// Returns the `a.b.c` version that the given package is at.\n     fn release_num(&self, package: &str) -> String {\n         let mut toml = String::new();\n-        let toml_file_name = self.src.join(&format!(\"{}/Cargo.toml\", package));\n+        let toml_file_name = self.src.join(&format!(\"src/tools/{}/Cargo.toml\", package));\n         t!(t!(File::open(toml_file_name)).read_to_string(&mut toml));\n         for line in toml.lines() {\n             let prefix = \"version = \\\"\";"}, {"sha": "f69b68a9545f163e520c6d0e5557d3e6ab0ef627", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=afa1240e57330d85a372db4e28cd8bc8fa528ccb", "patch": "@@ -574,7 +574,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .dep(|s| s.name(\"maybe-clean-tools\"))\n          .dep(|s| s.name(\"libstd-tool\"))\n          .run(move |s| compile::tool(build, s.stage, s.target, \"remote-test-client\"));\n-    rules.build(\"tool-cargo\", \"cargo\")\n+    rules.build(\"tool-cargo\", \"src/tools/cargo\")\n          .host(true)\n          .default(build.config.extended)\n          .dep(|s| s.name(\"maybe-clean-tools\"))\n@@ -588,7 +588,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n               .host(&build.config.build)\n          })\n          .run(move |s| compile::tool(build, s.stage, s.target, \"cargo\"));\n-    rules.build(\"tool-rls\", \"rls\")\n+    rules.build(\"tool-rls\", \"src/tools/rls\")\n          .host(true)\n          .default(build.config.extended)\n          .dep(|s| s.name(\"librustc-tool\"))"}, {"sha": "418a084da67878ff2c375b78cdf7153f70ed051c", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=afa1240e57330d85a372db4e28cd8bc8fa528ccb", "patch": "@@ -87,7 +87,6 @@\n #![feature(needs_allocator)]\n #![feature(optin_builtin_traits)]\n #![feature(placement_in_syntax)]\n-#![cfg_attr(stage0, feature(pub_restricted))]\n #![feature(shared)]\n #![feature(staged_api)]\n #![feature(unboxed_closures)]"}, {"sha": "9f1870e56d38af2d504c0fbfc64913163078a58a", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=afa1240e57330d85a372db4e28cd8bc8fa528ccb", "patch": "@@ -46,7 +46,6 @@\n             issue = \"0\")]\n #![allow(missing_docs)]\n \n-#[cfg(not(stage0))]\n #[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n #[rustc_deprecated(reason = \"no longer an intrinsic - use `ptr::drop_in_place` directly\",\n                    since = \"1.18.0\")]\n@@ -645,27 +644,6 @@ extern \"rust-intrinsic\" {\n     pub fn size_of_val<T: ?Sized>(_: &T) -> usize;\n     pub fn min_align_of_val<T: ?Sized>(_: &T) -> usize;\n \n-    #[cfg(stage0)]\n-    /// Executes the destructor (if any) of the pointed-to value.\n-    ///\n-    /// This has two use cases:\n-    ///\n-    /// * It is *required* to use `drop_in_place` to drop unsized types like\n-    ///   trait objects, because they can't be read out onto the stack and\n-    ///   dropped normally.\n-    ///\n-    /// * It is friendlier to the optimizer to do this over `ptr::read` when\n-    ///   dropping manually allocated memory (e.g. when writing Box/Rc/Vec),\n-    ///   as the compiler doesn't need to prove that it's sound to elide the\n-    ///   copy.\n-    ///\n-    /// # Undefined Behavior\n-    ///\n-    /// This has all the same safety problems as `ptr::read` with respect to\n-    /// invalid pointers, types, and double drops.\n-    #[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n-    pub fn drop_in_place<T: ?Sized>(to_drop: *mut T);\n-\n     /// Gets a static string slice containing the name of a type.\n     pub fn type_name<T: ?Sized>() -> &'static str;\n \n@@ -1261,11 +1239,9 @@ extern \"rust-intrinsic\" {\n \n     /// Performs an unchecked left shift, resulting in undefined behavior when\n     /// y < 0 or y >= N, where N is the width of T in bits.\n-    #[cfg(not(stage0))]\n     pub fn unchecked_shl<T>(x: T, y: T) -> T;\n     /// Performs an unchecked right shift, resulting in undefined behavior when\n     /// y < 0 or y >= N, where N is the width of T in bits.\n-    #[cfg(not(stage0))]\n     pub fn unchecked_shr<T>(x: T, y: T) -> T;\n \n     /// Returns (a + b) mod 2<sup>N</sup>, where N is the width of T in bits."}, {"sha": "3f32db122351c2ddbeaf13d25741442b59d8d62b", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=afa1240e57330d85a372db4e28cd8bc8fa528ccb", "patch": "@@ -559,7 +559,7 @@ mod impls {\n /// any `UnsafeCell` internally, but not through an indirection.\n /// This affects, for example, whether a `static` of that type is\n /// placed in read-only static memory or writable static memory.\n-#[cfg_attr(not(stage0), lang = \"freeze\")]\n+#[lang = \"freeze\"]\n unsafe trait Freeze {}\n \n unsafe impl Freeze for .. {}"}, {"sha": "18e2c1d5c73fd84cf1b1f1d6630e5133342979b7", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=afa1240e57330d85a372db4e28cd8bc8fa528ccb", "patch": "@@ -778,21 +778,12 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n-        #[cfg(not(stage0))]\n         pub fn wrapping_shl(self, rhs: u32) -> Self {\n             unsafe {\n                 intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)\n             }\n         }\n \n-        /// Stage 0\n-        #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[inline(always)]\n-        #[cfg(stage0)]\n-        pub fn wrapping_shl(self, rhs: u32) -> Self {\n-            self.overflowing_shl(rhs).0\n-        }\n-\n         /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,\n         /// where `mask` removes any high-order bits of `rhs` that\n         /// would cause the shift to exceed the bitwidth of the type.\n@@ -814,21 +805,12 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n-        #[cfg(not(stage0))]\n         pub fn wrapping_shr(self, rhs: u32) -> Self {\n             unsafe {\n                 intrinsics::unchecked_shr(self, (rhs & ($BITS - 1)) as $SelfT)\n             }\n         }\n \n-        /// Stage 0\n-        #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[inline(always)]\n-        #[cfg(stage0)]\n-        pub fn wrapping_shr(self, rhs: u32) -> Self {\n-            self.overflowing_shr(rhs).0\n-        }\n-\n         /// Wrapping (modular) absolute value. Computes `self.abs()`,\n         /// wrapping around at the boundary of the type.\n         ///\n@@ -1039,19 +1021,10 @@ macro_rules! int_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[cfg(not(stage0))]\n         pub fn overflowing_shl(self, rhs: u32) -> (Self, bool) {\n             (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))\n         }\n \n-        /// Stage 0\n-        #[inline]\n-        #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[cfg(stage0)]\n-        pub fn overflowing_shl(self, rhs: u32) -> (Self, bool) {\n-            (self << (rhs & ($BITS - 1)), (rhs > ($BITS - 1)))\n-        }\n-\n         /// Shifts self right by `rhs` bits.\n         ///\n         /// Returns a tuple of the shifted version of self along with a boolean\n@@ -1070,19 +1043,10 @@ macro_rules! int_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[cfg(not(stage0))]\n         pub fn overflowing_shr(self, rhs: u32) -> (Self, bool) {\n             (self.wrapping_shr(rhs), (rhs > ($BITS - 1)))\n         }\n \n-        /// Stage 0\n-        #[inline]\n-        #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[cfg(stage0)]\n-        pub fn overflowing_shr(self, rhs: u32) -> (Self, bool) {\n-            (self >> (rhs & ($BITS - 1)), (rhs > ($BITS - 1)))\n-        }\n-\n         /// Computes the absolute value of `self`.\n         ///\n         /// Returns a tuple of the absolute version of self along with a\n@@ -1946,21 +1910,12 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n-        #[cfg(not(stage0))]\n         pub fn wrapping_shl(self, rhs: u32) -> Self {\n             unsafe {\n                 intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)\n             }\n         }\n \n-        /// Stage 0\n-        #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[inline(always)]\n-        #[cfg(stage0)]\n-        pub fn wrapping_shl(self, rhs: u32) -> Self {\n-            self.overflowing_shl(rhs).0\n-        }\n-\n         /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,\n         /// where `mask` removes any high-order bits of `rhs` that\n         /// would cause the shift to exceed the bitwidth of the type.\n@@ -1982,21 +1937,12 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n-        #[cfg(not(stage0))]\n         pub fn wrapping_shr(self, rhs: u32) -> Self {\n             unsafe {\n                 intrinsics::unchecked_shr(self, (rhs & ($BITS - 1)) as $SelfT)\n             }\n         }\n \n-        /// Stage 0\n-        #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-        #[inline(always)]\n-        #[cfg(stage0)]\n-        pub fn wrapping_shr(self, rhs: u32) -> Self {\n-            self.overflowing_shr(rhs).0\n-        }\n-\n         /// Calculates `self` + `rhs`\n         ///\n         /// Returns a tuple of the addition along with a boolean indicating\n@@ -2160,19 +2106,10 @@ macro_rules! uint_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[cfg(not(stage0))]\n         pub fn overflowing_shl(self, rhs: u32) -> (Self, bool) {\n             (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))\n         }\n \n-        /// Stage 0\n-        #[inline]\n-        #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[cfg(stage0)]\n-        pub fn overflowing_shl(self, rhs: u32) -> (Self, bool) {\n-            (self << (rhs & ($BITS - 1)), (rhs > ($BITS - 1)))\n-        }\n-\n         /// Shifts self right by `rhs` bits.\n         ///\n         /// Returns a tuple of the shifted version of self along with a boolean\n@@ -2191,20 +2128,11 @@ macro_rules! uint_impl {\n         /// ```\n         #[inline]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[cfg(not(stage0))]\n         pub fn overflowing_shr(self, rhs: u32) -> (Self, bool) {\n             (self.wrapping_shr(rhs), (rhs > ($BITS - 1)))\n \n         }\n \n-        /// Stage 0\n-        #[inline]\n-        #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[cfg(stage0)]\n-        pub fn overflowing_shr(self, rhs: u32) -> (Self, bool) {\n-            (self >> (rhs & ($BITS - 1)), (rhs > ($BITS - 1)))\n-        }\n-\n         /// Raises self to the power of `exp`, using exponentiation by squaring.\n         ///\n         /// # Examples"}, {"sha": "115326bb9169a91e5dd5df8240b4b2c41d789694", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=afa1240e57330d85a372db4e28cd8bc8fa528ccb", "patch": "@@ -37,11 +37,6 @@ pub use intrinsics::copy;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use intrinsics::write_bytes;\n \n-#[cfg(stage0)]\n-#[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n-pub use intrinsics::drop_in_place;\n-\n-#[cfg(not(stage0))]\n /// Executes the destructor (if any) of the pointed-to value.\n ///\n /// This has two use cases:"}, {"sha": "a3e5a14dbac7f96ddecb2f46c4f72d4a2f21eeec", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=afa1240e57330d85a372db4e28cd8bc8fa528ccb", "patch": "@@ -34,7 +34,6 @@\n #![feature(loop_break_value)]\n #![feature(never_type)]\n #![feature(nonzero)]\n-#![cfg_attr(stage0, feature(pub_restricted))]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]"}, {"sha": "95f0a96fdf965c4940c2ffeb56e74ab528a74596", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=afa1240e57330d85a372db4e28cd8bc8fa528ccb", "patch": "@@ -24,7 +24,6 @@\n #![feature(rand)]\n #![feature(conservative_impl_trait)]\n #![feature(sort_unstable)]\n-#![cfg_attr(stage0, feature(pub_restricted))]\n \n extern crate graphviz;\n #[macro_use] extern crate rustc;"}, {"sha": "a4c3b276efdd2b2446b8e93c2f7774364f7c1f11", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=afa1240e57330d85a372db4e28cd8bc8fa528ccb", "patch": "@@ -318,7 +318,6 @@\n #![feature(unwind_attributes)]\n #![feature(vec_push_all)]\n #![cfg_attr(test, feature(update_panic_count))]\n-#![cfg_attr(stage0, feature(pub_restricted))]\n #![cfg_attr(test, feature(float_bits_conv))]\n \n // Explicitly import the prelude. The compiler uses this same unstable attribute"}, {"sha": "335817fddbbe276c84e081f93496154e3bfa27e3", "filename": "src/rtstartup/rsbegin.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Frtstartup%2Frsbegin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Frtstartup%2Frsbegin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frtstartup%2Frsbegin.rs?ref=afa1240e57330d85a372db4e28cd8bc8fa528ccb", "patch": "@@ -34,10 +34,17 @@ trait Sync {}\n impl Sync for .. {}\n #[lang = \"copy\"]\n trait Copy {}\n-#[cfg_attr(not(stage0), lang = \"freeze\")]\n+#[lang = \"freeze\"]\n trait Freeze {}\n impl Freeze for .. {}\n \n+#[lang=\"drop_in_place\"]\n+#[inline]\n+#[allow(unconditional_recursion)]\n+pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+    drop_in_place(to_drop);\n+}\n+\n #[cfg(all(target_os=\"windows\", target_arch = \"x86\", target_env=\"gnu\"))]\n pub mod eh_frames {\n     #[no_mangle]"}, {"sha": "9229b4e31289f727ee80cbe94c6c9a924fbe1cc7", "filename": "src/rtstartup/rsend.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Frtstartup%2Frsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Frtstartup%2Frsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frtstartup%2Frsend.rs?ref=afa1240e57330d85a372db4e28cd8bc8fa528ccb", "patch": "@@ -10,7 +10,7 @@\n \n // See rsbegin.rs for details.\n \n-#![feature(no_core, lang_items)]\n+#![feature(no_core, lang_items, optin_builtin_traits)]\n #![crate_type=\"rlib\"]\n #![no_core]\n \n@@ -19,6 +19,18 @@ trait Sized {}\n #[lang = \"sync\"]\n trait Sync {}\n impl<T> Sync for T {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+#[lang = \"freeze\"]\n+trait Freeze {}\n+impl Freeze for .. {}\n+\n+#[lang=\"drop_in_place\"]\n+#[inline]\n+#[allow(unconditional_recursion)]\n+pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+    drop_in_place(to_drop);\n+}\n \n #[cfg(all(target_os=\"windows\", target_arch = \"x86\", target_env=\"gnu\"))]\n pub mod eh_frames {"}, {"sha": "974be1256511863a3435ddcb31e41fc9a94f544a", "filename": "src/stage0.txt", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=afa1240e57330d85a372db4e28cd8bc8fa528ccb", "patch": "@@ -8,8 +8,30 @@\n # release.\n #\n # If you're looking at this file on the master branch, you'll likely see that\n-# rustc bootstraps from `beta-$date`, whereas if you're looking at a source\n-# tarball for a stable release you'll likely see `1.x.0-$date` where `1.x.0` was\n-# released on `$date`\n+# rustc and cargo are configured to `beta`, whereas if you're looking at a\n+# source tarball for a stable release you'll likely see `1.x.0` for rustc and\n+# `0.x.0` for Cargo where they were released on `date`.\n \n-rustc: beta-2017-04-05\n+date: 2017-04-25\n+rustc: beta\n+cargo: beta\n+\n+# When making a stable release the process currently looks like:\n+#\n+#   1. Produce stable build, upload it to dev-static\n+#   2. Produce a beta build from the previous stable build, upload to static\n+#   3. Produce a nightly build from previous beta, upload to static\n+#   4. Upload stable build to static, publish full release\n+#\n+# This means that there's a small window of time (a few days) where artifacts\n+# are downloaded from dev-static.rust-lang.org instead of static.rust-lang.org.\n+# In order to ease this transition we have an extra key is in this configuration\n+# file below. When uncommented this will instruct the bootstrap.py script to\n+# download from dev-static.rust-lang.org.\n+#\n+# This key is typically commented out at all times. If you're looking at a\n+# stable release tarball it should *definitely* be commented out. If you're\n+# looking at a beta source tarball and it's uncommented we'll shortly comment it\n+# out.\n+\n+#dev: 1"}, {"sha": "fa7584c1495c2d9c04a6416f8e7b546abfa88a52", "filename": "src/tools/cargo", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=afa1240e57330d85a372db4e28cd8bc8fa528ccb", "patch": "@@ -0,0 +1 @@\n+Subproject commit fa7584c1495c2d9c04a6416f8e7b546abfa88a52"}, {"sha": "67babd2d63710444a3071dfd9184648fd85a6a3d", "filename": "src/tools/rls", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frls?ref=afa1240e57330d85a372db4e28cd8bc8fa528ccb", "patch": "@@ -0,0 +1 @@\n+Subproject commit 67babd2d63710444a3071dfd9184648fd85a6a3d"}, {"sha": "f14a6a03893b39cd1313b789febc938c42d83252", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa1240e57330d85a372db4e28cd8bc8fa528ccb/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=afa1240e57330d85a372db4e28cd8bc8fa528ccb", "patch": "@@ -85,6 +85,8 @@ fn filter_dirs(path: &Path) -> bool {\n         \"src/liblibc\",\n         \"src/vendor\",\n         \"src/rt/hoedown\",\n+        \"src/tools/cargo\",\n+        \"src/tools/rls\",\n     ];\n     skip.iter().any(|p| path.ends_with(p))\n }"}]}