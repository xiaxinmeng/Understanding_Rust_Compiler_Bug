{"sha": "db1acaac7f8c84d8fb46211f5e96f678c28628a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMWFjYWFjN2Y4Yzg0ZDhmYjQ2MjExZjVlOTZmNjc4YzI4NjI4YTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-10T00:14:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-10T00:14:52Z"}, "message": "Auto merge of #53073 - Mark-Simulacrum:data-structures, r=pnkfelix\n\nCleanup to librustc::session and related code\n\nNo functional changes, just some cleanup.\n\nThis also creates the `rustc_fs_util` crate, but I can remove that change if desired. It felt a little odd to force crates to depend on librustc for some fs utilities; and also seemed good to generally keep the size of librustc lower (for compile times); fs_util will compile in parallel with essentially the first crate since it has no dependencies beyond std.", "tree": {"sha": "972e8bbf160423e6ad3cf8a4797ff1a9de33bf3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/972e8bbf160423e6ad3cf8a4797ff1a9de33bf3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db1acaac7f8c84d8fb46211f5e96f678c28628a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db1acaac7f8c84d8fb46211f5e96f678c28628a8", "html_url": "https://github.com/rust-lang/rust/commit/db1acaac7f8c84d8fb46211f5e96f678c28628a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db1acaac7f8c84d8fb46211f5e96f678c28628a8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb65d7563c93509c343a98e5cccf8e5ab4506924", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb65d7563c93509c343a98e5cccf8e5ab4506924", "html_url": "https://github.com/rust-lang/rust/commit/fb65d7563c93509c343a98e5cccf8e5ab4506924"}, {"sha": "a8e19bec373a0a6e673969fed2ded5ec4e53761d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8e19bec373a0a6e673969fed2ded5ec4e53761d", "html_url": "https://github.com/rust-lang/rust/commit/a8e19bec373a0a6e673969fed2ded5ec4e53761d"}], "stats": {"total": 354, "additions": 185, "deletions": 169}, "files": [{"sha": "1ef6b2a571e9ca18453ee37ecb1f64d96fa1bf43", "filename": "src/Cargo.lock", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -1887,6 +1887,7 @@ dependencies = [\n  \"rustc_apfloat 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n+ \"rustc_fs_util 0.0.0\",\n  \"rustc_target 0.0.0\",\n  \"scoped-tls 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n@@ -2185,6 +2186,10 @@ dependencies = [\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rustc_fs_util\"\n+version = \"0.0.0\"\n+\n [[package]]\n name = \"rustc_incremental\"\n version = \"0.0.0\"\n@@ -2194,6 +2199,7 @@ dependencies = [\n  \"rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n+ \"rustc_fs_util 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\","}, {"sha": "088b9436d0fc9c74b70fd09c741637451498b6a1", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -32,6 +32,7 @@ backtrace = \"0.3.3\"\n parking_lot = \"0.5.5\"\n byteorder = { version = \"1.1\", features = [\"i128\"]}\n chalk-engine = { version = \"0.6.0\", default-features=false }\n+rustc_fs_util = { path = \"../librustc_fs_util\" }\n \n # Note that these dependencies are a lie, they're just here to get linkage to\n # work."}, {"sha": "3934475bea90c88c8d65212f9a607a1fe6022b09", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -12,7 +12,7 @@ use super::*;\n use dep_graph::{DepGraph, DepKind, DepNodeIndex};\n use hir::def_id::{LOCAL_CRATE, CrateNum};\n use hir::intravisit::{Visitor, NestedVisitorMap};\n-use hir::svh::Svh;\n+use rustc_data_structures::svh::Svh;\n use ich::Fingerprint;\n use middle::cstore::CrateStore;\n use session::CrateDisambiguator;"}, {"sha": "81897322b6f6be6bb01c8233eaa58b3fa564dc0b", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -22,14 +22,14 @@ use hir::def_id::{CRATE_DEF_INDEX, DefId, LocalDefId, DefIndexAddressSpace};\n use middle::cstore::CrateStore;\n \n use rustc_target::spec::abi::Abi;\n+use rustc_data_structures::svh::Svh;\n use syntax::ast::{self, Name, NodeId, CRATE_NODE_ID};\n use syntax::codemap::Spanned;\n use syntax::ext::base::MacroKind;\n use syntax_pos::{Span, DUMMY_SP};\n \n use hir::*;\n use hir::print::Nested;\n-use hir::svh::Svh;\n use util::nodemap::FxHashMap;\n \n use std::io;"}, {"sha": "521499e4766892f6207664365a0093a47f0e0d7b", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -70,7 +70,6 @@ pub mod lowering;\n pub mod map;\n pub mod pat_util;\n pub mod print;\n-pub mod svh;\n \n /// A HirId uniquely identifies a node in the HIR of the current crate. It is\n /// composed of the `owner`, which is the DefIndex of the directly enclosing"}, {"sha": "329cc2216a498105a7d8bc20f04499b34070281f", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -37,7 +37,7 @@ use rustc_data_structures::stable_hasher::{HashStable,\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n \n-pub fn compute_ignored_attr_names() -> FxHashSet<Symbol> {\n+fn compute_ignored_attr_names() -> FxHashSet<Symbol> {\n     debug_assert!(ich::IGNORED_ATTRIBUTES.len() > 0);\n     ich::IGNORED_ATTRIBUTES.iter().map(|&s| Symbol::intern(s)).collect()\n }\n@@ -183,7 +183,10 @@ impl<'a> StableHashingContext<'a> {\n \n     #[inline]\n     pub fn is_ignored_attr(&self, name: Symbol) -> bool {\n-        self.sess.ignored_attr_names.contains(&name)\n+        thread_local! {\n+            static IGNORED_ATTRIBUTES: FxHashSet<Symbol> = compute_ignored_attr_names();\n+        }\n+        IGNORED_ATTRIBUTES.with(|attrs| attrs.contains(&name))\n     }\n \n     pub fn hash_hir_item_like<F: FnOnce(&mut Self)>(&mut self, f: F) {"}, {"sha": "b00d8c565694a374091eff71a397ac9f14ecaaba", "filename": "src/librustc/ich/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fich%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fich%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fmod.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -10,11 +10,10 @@\n \n //! ICH - Incremental Compilation Hash\n \n-pub use self::fingerprint::Fingerprint;\n+crate use rustc_data_structures::fingerprint::Fingerprint;\n pub use self::caching_codemap_view::CachingCodemapView;\n pub use self::hcx::{StableHashingContextProvider, StableHashingContext, NodeIdHashingMode,\n-                    hash_stable_trait_impls, compute_ignored_attr_names};\n-mod fingerprint;\n+                    hash_stable_trait_impls};\n mod caching_codemap_view;\n mod hcx;\n "}, {"sha": "55a5e342947fb461c2ff4dc96f9a37432295c182", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -72,6 +72,7 @@\n #![feature(in_band_lifetimes)]\n #![feature(macro_at_most_once_rep)]\n #![feature(crate_in_paths)]\n+#![feature(crate_visibility_modifier)]\n \n #![recursion_limit=\"512\"]\n \n@@ -99,6 +100,7 @@ extern crate syntax_pos;\n extern crate jobserver;\n extern crate proc_macro;\n extern crate chalk_engine;\n+extern crate rustc_fs_util;\n \n extern crate serialize as rustc_serialize; // used by deriving\n \n@@ -162,9 +164,9 @@ pub mod util {\n     pub mod common;\n     pub mod ppaux;\n     pub mod nodemap;\n-    pub mod fs;\n     pub mod time_graph;\n     pub mod profiling;\n+    pub mod bug;\n }\n \n // A private module so that macro-expanded idents like"}, {"sha": "e599b0704f957bde8ae6c6d526d9a6df661a9b53", "filename": "src/librustc/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmacros.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -51,14 +51,14 @@ macro_rules! enum_from_u32 {\n macro_rules! bug {\n     () => ( bug!(\"impossible case reached\") );\n     ($($message:tt)*) => ({\n-        $crate::session::bug_fmt(file!(), line!(), format_args!($($message)*))\n+        $crate::util::bug::bug_fmt(file!(), line!(), format_args!($($message)*))\n     })\n }\n \n #[macro_export]\n macro_rules! span_bug {\n     ($span:expr, $($message:tt)*) => ({\n-        $crate::session::span_bug_fmt(file!(), line!(), $span, format_args!($($message)*))\n+        $crate::util::bug::span_bug_fmt(file!(), line!(), $span, format_args!($($message)*))\n     })\n }\n "}, {"sha": "b91a9644b211a3a73d3bc75c917c3c9978b78443", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -25,7 +25,7 @@\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use hir::map as hir_map;\n use hir::map::definitions::{DefKey, DefPathTable};\n-use hir::svh::Svh;\n+use rustc_data_structures::svh::Svh;\n use ty::{self, TyCtxt};\n use session::{Session, CrateDisambiguator};\n use session::search_paths::PathKind;"}, {"sha": "32865acb298fa7153bbe65e3ae4a7e9a665acc32", "filename": "src/librustc/session/code_stats.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fsession%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fsession%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fcode_stats.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -8,11 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ty::AdtKind;\n-use ty::layout::{Align, Size};\n-\n+use rustc_target::abi::{Align, Size};\n use rustc_data_structures::fx::{FxHashSet};\n-\n use std::cmp::{self, Ordering};\n \n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n@@ -38,16 +35,6 @@ pub struct FieldInfo {\n     pub align: u64,\n }\n \n-impl From<AdtKind> for DataTypeKind {\n-    fn from(kind: AdtKind) -> Self {\n-        match kind {\n-            AdtKind::Struct => DataTypeKind::Struct,\n-            AdtKind::Enum => DataTypeKind::Enum,\n-            AdtKind::Union => DataTypeKind::Union,\n-        }\n-    }\n-}\n-\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub enum DataTypeKind {\n     Struct,"}, {"sha": "ef1052d562e5584db33003e9672eb28d6f42bc9a", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 4, "deletions": 32, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -16,10 +16,8 @@ use std::str::FromStr;\n use session::{early_error, early_warn, Session};\n use session::search_paths::SearchPaths;\n \n-use ich::StableHashingContext;\n use rustc_target::spec::{LinkerFlavor, PanicStrategy, RelroLevel};\n use rustc_target::spec::{Target, TargetTriple};\n-use rustc_data_structures::stable_hasher::ToStableHashKey;\n use lint;\n use middle::cstore;\n \n@@ -126,25 +124,7 @@ pub enum OutputType {\n     DepInfo,\n }\n \n-\n-impl_stable_hash_for!(enum self::OutputType {\n-    Bitcode,\n-    Assembly,\n-    LlvmAssembly,\n-    Mir,\n-    Metadata,\n-    Object,\n-    Exe,\n-    DepInfo\n-});\n-\n-impl<'a, 'tcx> ToStableHashKey<StableHashingContext<'a>> for OutputType {\n-    type KeyType = OutputType;\n-    #[inline]\n-    fn to_stable_hash_key(&self, _: &StableHashingContext<'a>) -> Self::KeyType {\n-        *self\n-    }\n-}\n+impl_stable_hash_via_hash!(OutputType);\n \n impl OutputType {\n     fn is_compatible_with_codegen_units_and_single_output_file(&self) -> bool {\n@@ -233,9 +213,7 @@ impl Default for ErrorOutputType {\n #[derive(Clone, Hash)]\n pub struct OutputTypes(BTreeMap<OutputType, Option<PathBuf>>);\n \n-impl_stable_hash_for!(tuple_struct self::OutputTypes {\n-    map\n-});\n+impl_stable_hash_via_hash!(OutputTypes);\n \n impl OutputTypes {\n     pub fn new(entries: &[(OutputType, Option<PathBuf>)]) -> OutputTypes {\n@@ -512,7 +490,7 @@ impl Input {\n     }\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, Hash)]\n pub struct OutputFilenames {\n     pub out_directory: PathBuf,\n     pub out_filestem: String,\n@@ -521,13 +499,7 @@ pub struct OutputFilenames {\n     pub outputs: OutputTypes,\n }\n \n-impl_stable_hash_for!(struct self::OutputFilenames {\n-    out_directory,\n-    out_filestem,\n-    single_output_file,\n-    extra,\n-    outputs\n-});\n+impl_stable_hash_via_hash!(OutputFilenames);\n \n pub const RUST_CGU_EXT: &str = \"rcgu\";\n "}, {"sha": "32044fdf2a8cb2fa9df336d949ca3b9fc24d5dce", "filename": "src/librustc/session/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -19,7 +19,7 @@ use std::fs;\n use std::path::{Path, PathBuf};\n \n use session::search_paths::{SearchPaths, PathKind};\n-use util::fs as rustcfs;\n+use rustc_fs_util::fix_windows_verbatim_for_gcc;\n \n #[derive(Copy, Clone)]\n pub enum FileMatch {\n@@ -151,7 +151,7 @@ pub fn get_or_default_sysroot() -> PathBuf {\n                 // See comments on this target function, but the gist is that\n                 // gcc chokes on verbatim paths which fs::canonicalize generates\n                 // so we try to avoid those kinds of paths.\n-                Ok(canon) => Some(rustcfs::fix_windows_verbatim_for_gcc(&canon)),\n+                Ok(canon) => Some(fix_windows_verbatim_for_gcc(&canon)),\n                 Err(e) => bug!(\"failed to get realpath: {}\", e),\n             }\n         })"}, {"sha": "f474f214305449f7740dc1684928d4a78e596fc5", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 46, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -12,16 +12,14 @@ pub use self::code_stats::{DataTypeKind, SizeKind, FieldInfo, VariantInfo};\n use self::code_stats::CodeStats;\n \n use hir::def_id::CrateNum;\n-use ich::Fingerprint;\n+use rustc_data_structures::fingerprint::Fingerprint;\n \n-use ich;\n use lint;\n use lint::builtin::BuiltinLintDiagnostics;\n use middle::allocator::AllocatorKind;\n use middle::dependency_format;\n use session::search_paths::PathKind;\n use session::config::{OutputType, Lto};\n-use ty::tls;\n use util::nodemap::{FxHashMap, FxHashSet};\n use util::common::{duration_to_secs_str, ErrorReported};\n use util::common::ProfileQueriesMsg;\n@@ -34,7 +32,6 @@ use errors::emitter::{Emitter, EmitterWriter};\n use syntax::edition::Edition;\n use syntax::json::JsonEmitter;\n use syntax::feature_gate;\n-use syntax::symbol::Symbol;\n use syntax::parse;\n use syntax::parse::ParseSess;\n use syntax::{ast, codemap};\n@@ -51,7 +48,6 @@ use std;\n use std::cell::{self, Cell, RefCell};\n use std::collections::HashMap;\n use std::env;\n-use std::fmt;\n use std::io::Write;\n use std::path::{Path, PathBuf};\n use std::time::Duration;\n@@ -128,9 +124,6 @@ pub struct Session {\n \n     incr_comp_session: OneThread<RefCell<IncrCompSession>>,\n \n-    /// A cache of attributes ignored by StableHashingContext\n-    pub ignored_attr_names: FxHashSet<Symbol>,\n-\n     /// Used by -Z profile-queries in util::common\n     pub profile_channel: Lock<Option<mpsc::Sender<ProfileQueriesMsg>>>,\n \n@@ -1143,7 +1136,6 @@ pub fn build_session_(\n         injected_panic_runtime: Once::new(),\n         imported_macro_spans: OneThread::new(RefCell::new(HashMap::new())),\n         incr_comp_session: OneThread::new(RefCell::new(IncrCompSession::NotInitialized)),\n-        ignored_attr_names: ich::compute_ignored_attr_names(),\n         self_profiling: Lock::new(SelfProfiler::new()),\n         profile_channel: Lock::new(None),\n         perf_stats: PerfStats {\n@@ -1235,7 +1227,7 @@ impl From<Fingerprint> for CrateDisambiguator {\n     }\n }\n \n-impl_stable_hash_for!(tuple_struct CrateDisambiguator { fingerprint });\n+impl_stable_hash_via_hash!(CrateDisambiguator);\n \n /// Holds data on the current incremental compilation session, if there is one.\n #[derive(Debug)]\n@@ -1307,39 +1299,3 @@ pub fn compile_result_from_err_count(err_count: usize) -> CompileResult {\n         Err(CompileIncomplete::Errored(ErrorReported))\n     }\n }\n-\n-#[cold]\n-#[inline(never)]\n-pub fn bug_fmt(file: &'static str, line: u32, args: fmt::Arguments) -> ! {\n-    // this wrapper mostly exists so I don't have to write a fully\n-    // qualified path of None::<Span> inside the bug!() macro definition\n-    opt_span_bug_fmt(file, line, None::<Span>, args);\n-}\n-\n-#[cold]\n-#[inline(never)]\n-pub fn span_bug_fmt<S: Into<MultiSpan>>(\n-    file: &'static str,\n-    line: u32,\n-    span: S,\n-    args: fmt::Arguments,\n-) -> ! {\n-    opt_span_bug_fmt(file, line, Some(span), args);\n-}\n-\n-fn opt_span_bug_fmt<S: Into<MultiSpan>>(\n-    file: &'static str,\n-    line: u32,\n-    span: Option<S>,\n-    args: fmt::Arguments,\n-) -> ! {\n-    tls::with_opt(move |tcx| {\n-        let msg = format!(\"{}:{}: {}\", file, line, args);\n-        match (tcx, span) {\n-            (Some(tcx), Some(span)) => tcx.sess.diagnostic().span_bug(span, &msg),\n-            (Some(tcx), None) => tcx.sess.diagnostic().bug(&msg),\n-            (None, _) => panic!(msg),\n-        }\n-    });\n-    unreachable!();\n-}"}, {"sha": "0c962fff272fb361c23160783948b2aca22782d3", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -18,7 +18,7 @@ use hir::{map as hir_map, FreevarMap, TraitMap};\n use hir::def::{Def, CtorKind, ExportMap};\n use hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use hir::map::DefPathData;\n-use hir::svh::Svh;\n+use rustc_data_structures::svh::Svh;\n use ich::Fingerprint;\n use ich::StableHashingContext;\n use infer::canonical::Canonical;\n@@ -37,6 +37,7 @@ use ty::walk::TypeWalker;\n use util::captures::Captures;\n use util::nodemap::{NodeSet, DefIdMap, FxHashMap};\n use arena::SyncDroplessArena;\n+use session::DataTypeKind;\n \n use serialize::{self, Encodable, Encoder};\n use std::cell::RefCell;\n@@ -1810,6 +1811,16 @@ impl<'a> HashStable<StableHashingContext<'a>> for AdtDef {\n #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]\n pub enum AdtKind { Struct, Union, Enum }\n \n+impl Into<DataTypeKind> for AdtKind {\n+    fn into(self) -> DataTypeKind {\n+        match self {\n+            AdtKind::Struct => DataTypeKind::Struct,\n+            AdtKind::Union => DataTypeKind::Union,\n+            AdtKind::Enum => DataTypeKind::Enum,\n+        }\n+    }\n+}\n+\n bitflags! {\n     #[derive(RustcEncodable, RustcDecodable, Default)]\n     pub struct ReprFlags: u8 {"}, {"sha": "ef22ebef9d7d4867fd5c79443f48d0f973854d8f", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -13,7 +13,7 @@ use errors::DiagnosticBuilder;\n use hir::def_id::{CrateNum, DefId, DefIndex};\n use hir::def::{Def, Export};\n use hir::{self, TraitCandidate, ItemLocalId, CodegenFnAttrs};\n-use hir::svh::Svh;\n+use rustc_data_structures::svh::Svh;\n use infer::canonical::{self, Canonical};\n use lint;\n use middle::borrowck::BorrowCheckResult;"}, {"sha": "f2593e4d4b5eeaa5aa0cf22b78cf6ba480f7840d", "filename": "src/librustc/util/bug.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Futil%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Futil%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fbug.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// These functions are used by macro expansion for bug! and span_bug!\n+\n+use ty::tls;\n+use std::fmt;\n+use syntax_pos::{Span, MultiSpan};\n+\n+#[cold]\n+#[inline(never)]\n+pub fn bug_fmt(file: &'static str, line: u32, args: fmt::Arguments) -> ! {\n+    // this wrapper mostly exists so I don't have to write a fully\n+    // qualified path of None::<Span> inside the bug!() macro definition\n+    opt_span_bug_fmt(file, line, None::<Span>, args);\n+}\n+\n+#[cold]\n+#[inline(never)]\n+pub fn span_bug_fmt<S: Into<MultiSpan>>(\n+    file: &'static str,\n+    line: u32,\n+    span: S,\n+    args: fmt::Arguments,\n+) -> ! {\n+    opt_span_bug_fmt(file, line, Some(span), args);\n+}\n+\n+fn opt_span_bug_fmt<S: Into<MultiSpan>>(\n+    file: &'static str,\n+    line: u32,\n+    span: Option<S>,\n+    args: fmt::Arguments,\n+) -> ! {\n+    tls::with_opt(move |tcx| {\n+        let msg = format!(\"{}:{}: {}\", file, line, args);\n+        match (tcx, span) {\n+            (Some(tcx), Some(span)) => tcx.sess.diagnostic().span_bug(span, &msg),\n+            (Some(tcx), None) => tcx.sess.diagnostic().bug(&msg),\n+            (None, _) => panic!(msg),\n+        }\n+    });\n+    unreachable!();\n+}"}, {"sha": "1ec025f78c9aca3cdab2dbe0b63bb3bf3ce8345b", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -14,12 +14,10 @@ use rustc_data_structures::sync::Lock;\n \n use std::cell::{RefCell, Cell};\n use std::collections::HashMap;\n-use std::ffi::CString;\n use std::fmt::Debug;\n use std::hash::{Hash, BuildHasher};\n use std::panic;\n use std::env;\n-use std::path::Path;\n use std::time::{Duration, Instant};\n \n use std::sync::mpsc::{Sender};\n@@ -376,19 +374,6 @@ impl<K, V, S> MemoizationMap for RefCell<HashMap<K,V,S>>\n     }\n }\n \n-#[cfg(unix)]\n-pub fn path2cstr(p: &Path) -> CString {\n-    use std::os::unix::prelude::*;\n-    use std::ffi::OsStr;\n-    let p: &OsStr = p.as_ref();\n-    CString::new(p.as_bytes()).unwrap()\n-}\n-#[cfg(windows)]\n-pub fn path2cstr(p: &Path) -> CString {\n-    CString::new(p.to_str().unwrap()).unwrap()\n-}\n-\n-\n #[test]\n fn test_to_readable_str() {\n     assert_eq!(\"0\", to_readable_str(0));"}, {"sha": "bbe1ccf3696f4219ab0a56707bfb9e2bb381efbc", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -26,7 +26,7 @@ use rustc::middle::cstore::{NativeLibrary, LibSource, NativeLibraryKind};\n use rustc::middle::dependency_format::Linkage;\n use {CodegenResults, CrateInfo};\n use rustc::util::common::time;\n-use rustc::util::fs::fix_windows_verbatim_for_gcc;\n+use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc::hir::def_id::CrateNum;\n use tempfile::{Builder as TempFileBuilder, TempDir};\n use rustc_target::spec::{PanicStrategy, RelroLevel, LinkerFlavor};"}, {"sha": "c78d061a39badc0c8ca9e69585a5db3c8b849607", "filename": "src/librustc_codegen_llvm/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_codegen_llvm%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_codegen_llvm%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fsymbol_export.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -15,7 +15,7 @@ use monomorphize::Instance;\n use rustc::hir;\n use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE, CRATE_DEF_INDEX};\n-use rustc::ich::Fingerprint;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc::middle::exported_symbols::{SymbolExportLevel, ExportedSymbol, metadata_symbol_name};\n use rustc::session::config;\n use rustc::ty::{TyCtxt, SymbolName};"}, {"sha": "cdfa874b1772a5b8d2aaff5dd5d49adf149f3cff", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -30,8 +30,7 @@ use CrateInfo;\n use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc::ty::TyCtxt;\n use rustc::util::common::{time_ext, time_depth, set_time_depth, print_time_passes_entry};\n-use rustc::util::common::path2cstr;\n-use rustc::util::fs::{link_or_copy};\n+use rustc_fs_util::{path2cstr, link_or_copy};\n use errors::{self, Handler, Level, DiagnosticBuilder, FatalError, DiagnosticId};\n use errors::emitter::{Emitter};\n use syntax::attr;"}, {"sha": "8ee2404e10cdfe0ee65829ffc9ca71055df7d291", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -28,14 +28,15 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::def::CtorKind;\n use rustc::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n-use rustc::ich::{Fingerprint, NodeIdHashingMode};\n+use rustc::ich::NodeIdHashingMode;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc::ty::Instance;\n use common::CodegenCx;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n use rustc::ty::layout::{self, Align, LayoutOf, PrimitiveExt, Size, TyLayout};\n use rustc::session::config;\n use rustc::util::nodemap::FxHashMap;\n-use rustc::util::common::path2cstr;\n+use rustc_fs_util::path2cstr;\n \n use libc::{c_uint, c_longlong};\n use std::ffi::CString;"}, {"sha": "4572f5891a420a20c1e77acd1542fffd04c2e114", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -55,6 +55,7 @@ extern crate rustc_incremental;\n extern crate rustc_llvm;\n extern crate rustc_platform_intrinsics as intrinsics;\n extern crate rustc_codegen_utils;\n+extern crate rustc_fs_util;\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "a4526a53769ba786838c7765a3266bbd19f4b80c", "filename": "src/librustc_codegen_llvm/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_codegen_llvm%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_codegen_llvm%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmetadata.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::util::common;\n use rustc::middle::cstore::MetadataLoader;\n use rustc_target::spec::Target;\n use llvm;\n@@ -19,6 +18,7 @@ use rustc_data_structures::owning_ref::OwningRef;\n use std::path::Path;\n use std::ptr;\n use std::slice;\n+use rustc_fs_util::path2cstr;\n \n pub use rustc_data_structures::sync::MetadataRef;\n \n@@ -57,7 +57,7 @@ impl MetadataLoader for LlvmMetadataLoader {\n                           filename: &Path)\n                           -> Result<MetadataRef, String> {\n         unsafe {\n-            let buf = common::path2cstr(filename);\n+            let buf = path2cstr(filename);\n             let mb = llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf.as_ptr())\n                 .ok_or_else(|| format!(\"error reading library: '{}'\", filename.display()))?;\n             let of = ObjectFile::new(mb)"}, {"sha": "a0d88ccae0f135d1ec0263b62b534bbbb2fa7031", "filename": "src/librustc_codegen_utils/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_codegen_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_codegen_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flink.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -11,7 +11,7 @@\n use rustc::session::config::{self, OutputFilenames, Input, OutputType};\n use rustc::session::Session;\n use rustc::middle::cstore::LinkMeta;\n-use rustc::hir::svh::Svh;\n+use rustc_data_structures::svh::Svh;\n use std::path::{Path, PathBuf};\n use syntax::{ast, attr};\n use syntax_pos::Span;"}, {"sha": "aa9ddda2b9364e424c580418ffa3dc3e6e5a2ccc", "filename": "src/librustc_data_structures/fingerprint.rs", "status": "renamed", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_data_structures%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_data_structures%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ffingerprint.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::mem;\n-use rustc_data_structures::stable_hasher;\n+use stable_hasher;\n use serialize;\n use serialize::opaque::{EncodeResult, Encoder, Decoder};\n \n@@ -92,14 +92,7 @@ impl stable_hasher::StableHasherResult for Fingerprint {\n     }\n }\n \n-impl<CTX> stable_hasher::HashStable<CTX> for Fingerprint {\n-    #[inline]\n-    fn hash_stable<W: stable_hasher::StableHasherResult>(&self,\n-                                          _: &mut CTX,\n-                                          hasher: &mut stable_hasher::StableHasher<W>) {\n-        ::std::hash::Hash::hash(self, hasher);\n-    }\n-}\n+impl_stable_hash_via_hash!(Fingerprint);\n \n impl serialize::UseSpecializedEncodable for Fingerprint { }\n ", "previous_filename": "src/librustc/ich/fingerprint.rs"}, {"sha": "3aa15f472a2740f5538ff8ae49514922f07d4f17", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -46,13 +46,15 @@ extern crate stable_deref_trait;\n extern crate rustc_rayon as rayon;\n extern crate rustc_rayon_core as rayon_core;\n extern crate rustc_hash;\n+extern crate serialize;\n \n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this.\n #[allow(unused_extern_crates)]\n extern crate rustc_cratesio_shim;\n \n pub use rustc_serialize::hex::ToHex;\n \n+pub mod svh;\n pub mod accumulate_vec;\n pub mod array_vec;\n pub mod base_n;\n@@ -71,13 +73,14 @@ pub mod small_vec;\n pub mod snapshot_map;\n pub use ena::snapshot_vec;\n pub mod sorted_map;\n-pub mod stable_hasher;\n+#[macro_use] pub mod stable_hasher;\n pub mod sync;\n pub mod tiny_list;\n pub mod transitive_relation;\n pub mod tuple_slice;\n pub use ena::unify;\n pub mod work_queue;\n+pub mod fingerprint;\n \n pub struct OnDrop<F: Fn()>(pub F);\n "}, {"sha": "9f1c7dac1194ef3c48f20b46a11e092232204642", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -183,13 +183,16 @@ pub trait ToStableHashKey<HCX> {\n \n // Implement HashStable by just calling `Hash::hash()`. This works fine for\n // self-contained values that don't depend on the hashing context `CTX`.\n+#[macro_export]\n macro_rules! impl_stable_hash_via_hash {\n     ($t:ty) => (\n-        impl<CTX> HashStable<CTX> for $t {\n+        impl<CTX> $crate::stable_hasher::HashStable<CTX> for $t {\n             #[inline]\n-            fn hash_stable<W: StableHasherResult>(&self,\n-                                                  _: &mut CTX,\n-                                                  hasher: &mut StableHasher<W>) {\n+            fn hash_stable<W: $crate::stable_hasher::StableHasherResult>(\n+                &self,\n+                _: &mut CTX,\n+                hasher: &mut $crate::stable_hasher::StableHasher<W>\n+            ) {\n                 ::std::hash::Hash::hash(self, hasher);\n             }\n         }"}, {"sha": "94f132562b5ea460cadae948fb116de58e46e0d6", "filename": "src/librustc_data_structures/svh.rs", "status": "renamed", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_data_structures%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_data_structures%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsvh.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -19,6 +19,8 @@ use std::fmt;\n use std::hash::{Hash, Hasher};\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n+use stable_hasher;\n+\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub struct Svh {\n     hash: u64,\n@@ -67,6 +69,16 @@ impl Decodable for Svh {\n     }\n }\n \n-impl_stable_hash_for!(struct Svh {\n-    hash\n-});\n+impl<T> stable_hasher::HashStable<T> for Svh {\n+    #[inline]\n+    fn hash_stable<W: stable_hasher::StableHasherResult>(\n+        &self,\n+        ctx: &mut T,\n+        hasher: &mut stable_hasher::StableHasher<W>\n+    ) {\n+        let Svh {\n+            hash\n+        } = *self;\n+        hash.hash_stable(ctx, hasher);\n+    }\n+}", "previous_filename": "src/librustc/hir/svh.rs"}, {"sha": "b6e03b66510e50965fa724b37f14e35c961c116d", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -11,7 +11,7 @@\n use rustc::dep_graph::DepGraph;\n use rustc::hir::{self, map as hir_map};\n use rustc::hir::lowering::lower_crate;\n-use rustc::ich::Fingerprint;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_mir as mir;\n use rustc::session::{CompileResult, CrateDisambiguator, Session};"}, {"sha": "e40b44204b349c03020656918d1a8eb6c23470a0", "filename": "src/librustc_fs_util/Cargo.toml", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_fs_util%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_fs_util%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_fs_util%2FCargo.toml?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -0,0 +1,11 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_fs_util\"\n+version = \"0.0.0\"\n+\n+[lib]\n+name = \"rustc_fs_util\"\n+path = \"lib.rs\"\n+crate-type = [\"dylib\"]\n+\n+[dependencies]"}, {"sha": "ffe420b109d3ecf6cea04f377e53f357a4c6b58f", "filename": "src/librustc_fs_util/lib.rs", "status": "renamed", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_fs_util%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_fs_util%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_fs_util%2Flib.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::path::{self, Path, PathBuf};\n-use std::ffi::OsString;\n+use std::path::{Path, PathBuf};\n+use std::ffi::CString;\n use std::fs;\n use std::io;\n \n@@ -29,10 +29,10 @@ use std::io;\n //\n // For some more information, see this comment:\n //   https://github.com/rust-lang/rust/issues/25505#issuecomment-102876737\n+#[cfg(windows)]\n pub fn fix_windows_verbatim_for_gcc(p: &Path) -> PathBuf {\n-    if !cfg!(windows) {\n-        return p.to_path_buf();\n-    }\n+    use std::path;\n+    use std::ffi::OsString;\n     let mut components = p.components();\n     let prefix = match components.next() {\n         Some(path::Component::Prefix(p)) => p,\n@@ -56,6 +56,11 @@ pub fn fix_windows_verbatim_for_gcc(p: &Path) -> PathBuf {\n     }\n }\n \n+#[cfg(not(windows))]\n+pub fn fix_windows_verbatim_for_gcc(p: &Path) -> PathBuf {\n+    p.to_path_buf()\n+}\n+\n pub enum LinkOrCopy {\n     Link,\n     Copy,\n@@ -109,3 +114,15 @@ pub fn rename_or_copy_remove<P: AsRef<Path>, Q: AsRef<Path>>(p: P,\n         }\n     }\n }\n+\n+#[cfg(unix)]\n+pub fn path2cstr(p: &Path) -> CString {\n+    use std::os::unix::prelude::*;\n+    use std::ffi::OsStr;\n+    let p: &OsStr = p.as_ref();\n+    CString::new(p.as_bytes()).unwrap()\n+}\n+#[cfg(windows)]\n+pub fn path2cstr(p: &Path) -> CString {\n+    CString::new(p.to_str().unwrap()).unwrap()\n+}", "previous_filename": "src/librustc/util/fs.rs"}, {"sha": "c3f6062e799d96b6b3628363820df819922c5f7e", "filename": "src/librustc_incremental/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_incremental%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_incremental%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2FCargo.toml?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -17,3 +17,4 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n+rustc_fs_util = { path = \"../librustc_fs_util\" }"}, {"sha": "ad8714fa4d52dc2a6e806e0f878853acac510860", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -24,6 +24,7 @@ extern crate graphviz;\n extern crate rustc_data_structures;\n extern crate serialize as rustc_serialize;\n extern crate rand;\n+extern crate rustc_fs_util;\n \n #[macro_use] extern crate log;\n extern crate syntax;"}, {"sha": "28d53dc7fb3c47a1fe5d2fa5406c1bb60a8b6622", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -114,11 +114,11 @@\n //! unsupported file system and emit a warning in that case. This is not yet\n //! implemented.\n \n-use rustc::hir::svh::Svh;\n use rustc::session::{Session, CrateDisambiguator};\n-use rustc::util::fs as fs_util;\n+use rustc_fs_util::{link_or_copy, LinkOrCopy};\n use rustc_data_structures::{flock, base_n};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n+use rustc_data_structures::svh::Svh;\n \n use std::fs as std_fs;\n use std::io;\n@@ -429,11 +429,11 @@ fn copy_files(sess: &Session,\n                 let source_path = entry.path();\n \n                 debug!(\"copying into session dir: {}\", source_path.display());\n-                match fs_util::link_or_copy(source_path, target_file_path) {\n-                    Ok(fs_util::LinkOrCopy::Link) => {\n+                match link_or_copy(source_path, target_file_path) {\n+                    Ok(LinkOrCopy::Link) => {\n                         files_linked += 1\n                     }\n-                    Ok(fs_util::LinkOrCopy::Copy) => {\n+                    Ok(LinkOrCopy::Copy) => {\n                         files_copied += 1\n                     }\n                     Err(_) => return Err(())"}, {"sha": "cfe59b1f672623d59a884283d87f8c075cca9939", "filename": "src/librustc_incremental/persist/work_product.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -13,7 +13,7 @@\n use persist::fs::*;\n use rustc::dep_graph::{WorkProduct, WorkProductId, WorkProductFileKind};\n use rustc::session::Session;\n-use rustc::util::fs::link_or_copy;\n+use rustc_fs_util::link_or_copy;\n use std::path::PathBuf;\n use std::fs as std_fs;\n "}, {"sha": "d3b70933e2cd416a25d816865d5816805c3e9ed9", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -16,7 +16,7 @@ use schema::CrateRoot;\n use rustc_data_structures::sync::{Lrc, RwLock, Lock};\n \n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX};\n-use rustc::hir::svh::Svh;\n+use rustc_data_structures::svh::Svh;\n use rustc::middle::allocator::AllocatorKind;\n use rustc::middle::cstore::DepKind;\n use rustc::mir::interpret::AllocDecodingState;"}, {"sha": "4926da3b880e768276df764e7390d9c8a371bd45", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -30,6 +30,7 @@ use rustc::hir::map::{DefKey, DefPath, DefPathHash};\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::util::nodemap::DefIdMap;\n+use rustc_data_structures::svh::Svh;\n \n use std::any::Any;\n use rustc_data_structures::sync::Lrc;\n@@ -515,7 +516,7 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(cnum).root.disambiguator\n     }\n \n-    fn crate_hash_untracked(&self, cnum: CrateNum) -> hir::svh::Svh\n+    fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh\n     {\n         self.get_crate_data(cnum).root.hash\n     }"}, {"sha": "33d4cf26c039551a5e0c8e5b66bd97e8716b5ad6", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -22,7 +22,7 @@ use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc::hir::def::{self, Def, CtorKind};\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex,\n                          CRATE_DEF_INDEX, LOCAL_CRATE, LocalDefId};\n-use rustc::ich::Fingerprint;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc::middle::lang_items;\n use rustc::mir::{self, interpret};\n use rustc::mir::interpret::AllocDecodingSession;"}, {"sha": "7c445cb715e7cd4d8ed8da3239a52766a67246c9", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -18,7 +18,7 @@ use rustc::middle::cstore::{LinkMeta, LinkagePreference, NativeLibrary,\n use rustc::hir::def::CtorKind;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefIndex, DefId, LocalDefId, LOCAL_CRATE};\n use rustc::hir::map::definitions::DefPathTable;\n-use rustc::ich::Fingerprint;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc::middle::dependency_format::Linkage;\n use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel,\n                                       metadata_symbol_name};"}, {"sha": "52777e5f6b90df7452eabe701565dcdcae660e83", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -226,7 +226,7 @@ use cstore::{MetadataRef, MetadataBlob};\n use creader::Library;\n use schema::{METADATA_HEADER, rustc_version};\n \n-use rustc::hir::svh::Svh;\n+use rustc_data_structures::svh::Svh;\n use rustc::middle::cstore::MetadataLoader;\n use rustc::session::{config, Session};\n use rustc::session::filesearch::{FileSearch, FileMatches, FileDoesntMatch};"}, {"sha": "781652e1985d6fe6304815861c775932adb0a8d2", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1acaac7f8c84d8fb46211f5e96f678c28628a8/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=db1acaac7f8c84d8fb46211f5e96f678c28628a8", "patch": "@@ -20,6 +20,7 @@ use rustc::mir;\n use rustc::session::CrateDisambiguator;\n use rustc::ty::{self, Ty, ReprOptions};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n+use rustc_data_structures::svh::Svh;\n \n use rustc_serialize as serialize;\n use syntax::{ast, attr};\n@@ -187,7 +188,7 @@ pub struct CrateRoot {\n     pub name: Symbol,\n     pub triple: TargetTriple,\n     pub extra_filename: String,\n-    pub hash: hir::svh::Svh,\n+    pub hash: Svh,\n     pub disambiguator: CrateDisambiguator,\n     pub panic_strategy: PanicStrategy,\n     pub edition: Edition,\n@@ -223,7 +224,7 @@ pub struct CrateRoot {\n #[derive(RustcEncodable, RustcDecodable)]\n pub struct CrateDep {\n     pub name: ast::Name,\n-    pub hash: hir::svh::Svh,\n+    pub hash: Svh,\n     pub kind: DepKind,\n     pub extra_filename: String,\n }"}]}