{"sha": "694ae77bf6becaa085bb6a0ce0eb1fe29082721c", "node_id": "C_kwDOAAsO6NoAKDY5NGFlNzdiZjZiZWNhYTA4NWJiNmEwY2UwZWIxZmUyOTA4MjcyMWM", "commit": {"author": {"name": "Brent Westbrook", "email": "brentrwestbrook@gmail.com", "date": "2022-12-20T16:27:19Z"}, "committer": {"name": "Brent Westbrook", "email": "brentrwestbrook@gmail.com", "date": "2022-12-20T16:27:19Z"}, "message": "pass `snippet_cap` to `format_literal_label`, return early if None", "tree": {"sha": "1235607a2b51ead7ea8f922cb0372bc2e1fda274", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1235607a2b51ead7ea8f922cb0372bc2e1fda274"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/694ae77bf6becaa085bb6a0ce0eb1fe29082721c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/694ae77bf6becaa085bb6a0ce0eb1fe29082721c", "html_url": "https://github.com/rust-lang/rust/commit/694ae77bf6becaa085bb6a0ce0eb1fe29082721c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/694ae77bf6becaa085bb6a0ce0eb1fe29082721c/comments", "author": {"login": "ntBre", "id": 36778786, "node_id": "MDQ6VXNlcjM2Nzc4Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/36778786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ntBre", "html_url": "https://github.com/ntBre", "followers_url": "https://api.github.com/users/ntBre/followers", "following_url": "https://api.github.com/users/ntBre/following{/other_user}", "gists_url": "https://api.github.com/users/ntBre/gists{/gist_id}", "starred_url": "https://api.github.com/users/ntBre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ntBre/subscriptions", "organizations_url": "https://api.github.com/users/ntBre/orgs", "repos_url": "https://api.github.com/users/ntBre/repos", "events_url": "https://api.github.com/users/ntBre/events{/privacy}", "received_events_url": "https://api.github.com/users/ntBre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ntBre", "id": 36778786, "node_id": "MDQ6VXNlcjM2Nzc4Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/36778786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ntBre", "html_url": "https://github.com/ntBre", "followers_url": "https://api.github.com/users/ntBre/followers", "following_url": "https://api.github.com/users/ntBre/following{/other_user}", "gists_url": "https://api.github.com/users/ntBre/gists{/gist_id}", "starred_url": "https://api.github.com/users/ntBre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ntBre/subscriptions", "organizations_url": "https://api.github.com/users/ntBre/orgs", "repos_url": "https://api.github.com/users/ntBre/repos", "events_url": "https://api.github.com/users/ntBre/events{/privacy}", "received_events_url": "https://api.github.com/users/ntBre/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1116cc93ec29fb7db3515afed6a99ab7d70917ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/1116cc93ec29fb7db3515afed6a99ab7d70917ff", "html_url": "https://github.com/rust-lang/rust/commit/1116cc93ec29fb7db3515afed6a99ab7d70917ff"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "3aeb69258ee7c9d520f2151a43513b863670ca12", "filename": "crates/ide-completion/src/render/literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/694ae77bf6becaa085bb6a0ce0eb1fe29082721c/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/694ae77bf6becaa085bb6a0ce0eb1fe29082721c/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs?ref=694ae77bf6becaa085bb6a0ce0eb1fe29082721c", "patch": "@@ -96,7 +96,7 @@ fn render(\n     if !should_add_parens {\n         kind = StructKind::Unit;\n     }\n-    let label = format_literal_label(&qualified_name, kind);\n+    let label = format_literal_label(&qualified_name, kind, snippet_cap);\n     let lookup = if qualified {\n         format_literal_lookup(&short_qualified_name.to_string(), kind)\n     } else {"}, {"sha": "21b4bc2174bee1886af6aa0de75d2a3e9c170068", "filename": "crates/ide-completion/src/render/pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/694ae77bf6becaa085bb6a0ce0eb1fe29082721c/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/694ae77bf6becaa085bb6a0ce0eb1fe29082721c/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs?ref=694ae77bf6becaa085bb6a0ce0eb1fe29082721c", "patch": "@@ -33,7 +33,7 @@ pub(crate) fn render_struct_pat(\n     let name = local_name.unwrap_or_else(|| strukt.name(ctx.db()));\n     let (name, escaped_name) = (name.unescaped().to_smol_str(), name.to_smol_str());\n     let kind = strukt.kind(ctx.db());\n-    let label = format_literal_label(name.as_str(), kind);\n+    let label = format_literal_label(name.as_str(), kind, ctx.snippet_cap());\n     let lookup = format_literal_lookup(name.as_str(), kind);\n     let pat = render_pat(&ctx, pattern_ctx, &escaped_name, kind, &visible_fields, fields_omitted)?;\n \n@@ -67,7 +67,7 @@ pub(crate) fn render_variant_pat(\n         }\n         _ => {\n             let kind = variant.kind(ctx.db());\n-            let label = format_literal_label(name.as_str(), kind);\n+            let label = format_literal_label(name.as_str(), kind, ctx.snippet_cap());\n             let lookup = format_literal_lookup(name.as_str(), kind);\n             let pat = render_pat(\n                 &ctx,"}, {"sha": "2d55a1bade3d0c42dcc119c9ff84adf0a7ba2ff6", "filename": "crates/ide-completion/src/render/union_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/694ae77bf6becaa085bb6a0ce0eb1fe29082721c/crates%2Fide-completion%2Fsrc%2Frender%2Funion_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/694ae77bf6becaa085bb6a0ce0eb1fe29082721c/crates%2Fide-completion%2Fsrc%2Frender%2Funion_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Funion_literal.rs?ref=694ae77bf6becaa085bb6a0ce0eb1fe29082721c", "patch": "@@ -24,7 +24,7 @@ pub(crate) fn render_union_literal(\n         Some(p) => (p.unescaped().to_string(), p.to_string()),\n         None => (name.unescaped().to_string(), name.to_string()),\n     };\n-    let label = format_literal_label(&name.to_smol_str(), StructKind::Record);\n+    let label = format_literal_label(&name.to_smol_str(), StructKind::Record, ctx.snippet_cap());\n     let lookup = format_literal_lookup(&name.to_smol_str(), StructKind::Record);\n     let mut item = CompletionItem::new(\n         CompletionItemKind::SymbolKind(SymbolKind::Union),"}, {"sha": "d69906a7065735d50b1bf32d6911272f6418d84b", "filename": "crates/ide-completion/src/render/variant.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/694ae77bf6becaa085bb6a0ce0eb1fe29082721c/crates%2Fide-completion%2Fsrc%2Frender%2Fvariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/694ae77bf6becaa085bb6a0ce0eb1fe29082721c/crates%2Fide-completion%2Fsrc%2Frender%2Fvariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fvariant.rs?ref=694ae77bf6becaa085bb6a0ce0eb1fe29082721c", "patch": "@@ -90,7 +90,14 @@ pub(crate) fn visible_fields(\n }\n \n /// Format a struct, etc. literal option for display in the completions menu.\n-pub(crate) fn format_literal_label(name: &str, kind: StructKind) -> SmolStr {\n+pub(crate) fn format_literal_label(\n+    name: &str,\n+    kind: StructKind,\n+    snippet_cap: Option<SnippetCap>,\n+) -> SmolStr {\n+    if snippet_cap.is_none() {\n+        return name.into();\n+    }\n     match kind {\n         StructKind::Tuple => SmolStr::from_iter([name, \"(\u2026)\"]),\n         StructKind::Record => SmolStr::from_iter([name, \" {\u2026}\"]),"}]}