{"sha": "8aa740dab46f138cacdf6391d46c87d6df810161", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYTc0MGRhYjQ2ZjEzOGNhY2RmNjM5MWQ0NmM4N2Q2ZGY4MTAxNjE=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-09-03T23:25:00Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-09-09T22:42:20Z"}, "message": "Happy path implemented", "tree": {"sha": "09e2067cc9480dd500fdd648123ae9076ae0d4d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09e2067cc9480dd500fdd648123ae9076ae0d4d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8aa740dab46f138cacdf6391d46c87d6df810161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa740dab46f138cacdf6391d46c87d6df810161", "html_url": "https://github.com/rust-lang/rust/commit/8aa740dab46f138cacdf6391d46c87d6df810161", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8aa740dab46f138cacdf6391d46c87d6df810161/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0de71f7bc9482c9d1ef7e9d36ec5d6c5fd378781", "url": "https://api.github.com/repos/rust-lang/rust/commits/0de71f7bc9482c9d1ef7e9d36ec5d6c5fd378781", "html_url": "https://github.com/rust-lang/rust/commit/0de71f7bc9482c9d1ef7e9d36ec5d6c5fd378781"}], "stats": {"total": 64, "additions": 38, "deletions": 26}, "files": [{"sha": "3e0b6637d2d40001a5334b51ba94eef6a2727489", "filename": "crates/base_db/src/lib.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8aa740dab46f138cacdf6391d46c87d6df810161/crates%2Fbase_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa740dab46f138cacdf6391d46c87d6df810161/crates%2Fbase_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Flib.rs?ref=8aa740dab46f138cacdf6391d46c87d6df810161", "patch": "@@ -96,7 +96,7 @@ pub trait FileLoader {\n     /// `#[path = \"C://no/way\"]`\n     fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId>;\n     fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>>;\n-    fn possible_sudmobules(&self, module_file: FileId) -> Vec<(FileId, String)>;\n+    fn possible_sudmobule_names(&self, module_file: FileId) -> Vec<String>;\n }\n \n /// Database which stores all significant input facts: source code and project\n@@ -166,11 +166,11 @@ impl<T: SourceDatabaseExt> FileLoader for FileLoaderDelegate<&'_ T> {\n         self.0.source_root_crates(source_root)\n     }\n \n-    fn possible_sudmobules(&self, module_file: FileId) -> Vec<(FileId, String)> {\n+    fn possible_sudmobule_names(&self, module_file: FileId) -> Vec<String> {\n         fn possible_sudmobules_opt(\n             module_files: &FileSet,\n             module_file: FileId,\n-        ) -> Option<Vec<(FileId, String)>> {\n+        ) -> Option<Vec<FileId>> {\n             match module_files.file_name_and_extension(module_file)? {\n                 (\"mod\", Some(\"rs\")) | (\"lib\", Some(\"rs\")) => {\n                     module_files.list_files(module_file, None)\n@@ -181,8 +181,16 @@ impl<T: SourceDatabaseExt> FileLoader for FileLoaderDelegate<&'_ T> {\n             }\n         }\n \n-        possible_sudmobules_opt(&self.source_root(module_file).file_set, module_file)\n+        let module_files = &self.source_root(module_file).file_set;\n+        possible_sudmobules_opt(module_files, module_file)\n             .unwrap_or_default()\n+            .into_iter()\n+            .filter_map(|submodule_file| module_files.file_name_and_extension(submodule_file))\n+            .map(|(file_name, extension)| match extension {\n+                Some(extension) => format!(\"{}.{}\", file_name, extension),\n+                None => file_name.to_owned(),\n+            })\n+            .collect()\n     }\n }\n "}, {"sha": "5bcfaf464e1f4f5358c4a310a7b99a83ddca0c13", "filename": "crates/hir_def/src/test_db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8aa740dab46f138cacdf6391d46c87d6df810161/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa740dab46f138cacdf6391d46c87d6df810161/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftest_db.rs?ref=8aa740dab46f138cacdf6391d46c87d6df810161", "patch": "@@ -63,8 +63,8 @@ impl FileLoader for TestDB {\n     fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n-    fn possible_sudmobules(&self, module_file: FileId) -> Vec<(FileId, String)> {\n-        FileLoaderDelegate(self).possible_sudmobules(module_file)\n+    fn possible_sudmobule_names(&self, module_file: FileId) -> Vec<String> {\n+        FileLoaderDelegate(self).possible_sudmobule_names(module_file)\n     }\n }\n "}, {"sha": "cf42dde7a4176fdef36afd53b37dadcf6a87bcd7", "filename": "crates/hir_expand/src/test_db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8aa740dab46f138cacdf6391d46c87d6df810161/crates%2Fhir_expand%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa740dab46f138cacdf6391d46c87d6df810161/crates%2Fhir_expand%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Ftest_db.rs?ref=8aa740dab46f138cacdf6391d46c87d6df810161", "patch": "@@ -46,7 +46,7 @@ impl FileLoader for TestDB {\n     fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n-    fn possible_sudmobules(&self, module_file: FileId) -> Vec<(FileId, String)> {\n-        FileLoaderDelegate(self).possible_sudmobules(module_file)\n+    fn possible_sudmobule_names(&self, module_file: FileId) -> Vec<String> {\n+        FileLoaderDelegate(self).possible_sudmobule_names(module_file)\n     }\n }"}, {"sha": "0696f41dd3c577c4d328ddb9b1231ac4c811e596", "filename": "crates/hir_ty/src/test_db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8aa740dab46f138cacdf6391d46c87d6df810161/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa740dab46f138cacdf6391d46c87d6df810161/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs?ref=8aa740dab46f138cacdf6391d46c87d6df810161", "patch": "@@ -73,8 +73,8 @@ impl FileLoader for TestDB {\n     fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n-    fn possible_sudmobules(&self, module_file: FileId) -> Vec<(FileId, String)> {\n-        FileLoaderDelegate(self).possible_sudmobules(module_file)\n+    fn possible_sudmobule_names(&self, module_file: FileId) -> Vec<String> {\n+        FileLoaderDelegate(self).possible_sudmobule_names(module_file)\n     }\n }\n "}, {"sha": "b4c6eeb35c84c586261aae8f2ca5e19a18df7598", "filename": "crates/ide/src/completion/completion_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aa740dab46f138cacdf6391d46c87d6df810161/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa740dab46f138cacdf6391d46c87d6df810161/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=8aa740dab46f138cacdf6391d46c87d6df810161", "patch": "@@ -122,7 +122,7 @@ impl<'a> CompletionContext<'a> {\n                     }\n                     let module_definition_source_file = definition_source.file_id.original_file(db);\n                     let mod_declaration_candidates =\n-                        db.possible_sudmobules(module_definition_source_file);\n+                        db.possible_sudmobule_names(module_definition_source_file);\n                     dbg!(mod_declaration_candidates);\n                     // TODO kb exlude existing children from the candidates\n                     let existing_children = current_module.children(db).collect::<Vec<_>>();"}, {"sha": "9f3be8601d3641068200ad023aa05a770b8721ea", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8aa740dab46f138cacdf6391d46c87d6df810161/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa740dab46f138cacdf6391d46c87d6df810161/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=8aa740dab46f138cacdf6391d46c87d6df810161", "patch": "@@ -74,8 +74,8 @@ impl FileLoader for RootDatabase {\n     fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n-    fn possible_sudmobules(&self, module_file: FileId) -> Vec<(FileId, String)> {\n-        FileLoaderDelegate(self).possible_sudmobules(module_file)\n+    fn possible_sudmobule_names(&self, module_file: FileId) -> Vec<String> {\n+        FileLoaderDelegate(self).possible_sudmobule_names(module_file)\n     }\n }\n "}, {"sha": "956cffb29b5dabcfcfc5621c7795ceb6c8bc8b89", "filename": "crates/vfs/src/file_set.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8aa740dab46f138cacdf6391d46c87d6df810161/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa740dab46f138cacdf6391d46c87d6df810161/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Ffile_set.rs?ref=8aa740dab46f138cacdf6391d46c87d6df810161", "patch": "@@ -34,22 +34,27 @@ impl FileSet {\n         &self,\n         anchor: FileId,\n         anchor_relative_path: Option<&str>,\n-    ) -> Option<Vec<(FileId, String)>> {\n+    ) -> Option<Vec<FileId>> {\n         let anchor_directory = {\n             let path = self.paths[&anchor].clone();\n             match anchor_relative_path {\n                 Some(anchor_relative_path) => path.join(anchor_relative_path),\n-                None => path.join(\"../\"),\n+                None => path.parent(),\n             }\n         }?;\n \n         Some(\n             self.paths\n                 .iter()\n-                .filter(|(_, path)| path.starts_with(&anchor_directory))\n-                // TODO kb need to ensure that no / exists after the anchor_directory\n-                .filter(|(_, path)| path.ends_with(\".rs\"))\n-                .map(|(&file_id, path)| (file_id, path.to_string()))\n+                .filter_map(|(&file_id, path)| {\n+                    if path.parent()? == anchor_directory\n+                        && matches!(path.file_name_and_extension(), Some((_, Some(\"rs\"))))\n+                    {\n+                        Some(file_id)\n+                    } else {\n+                        None\n+                    }\n+                })\n                 .collect(),\n         )\n     }"}, {"sha": "9a3690a8979f5a08817b0f52a86cd048df095a1a", "filename": "crates/vfs/src/vfs_path.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8aa740dab46f138cacdf6391d46c87d6df810161/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa740dab46f138cacdf6391d46c87d6df810161/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Fvfs_path.rs?ref=8aa740dab46f138cacdf6391d46c87d6df810161", "patch": "@@ -48,10 +48,12 @@ impl VfsPath {\n             (VfsPathRepr::VirtualPath(_), _) => false,\n         }\n     }\n-    pub fn ends_with(&self, suffix: &str) -> bool {\n-        match &self.0 {\n-            VfsPathRepr::PathBuf(p) => p.ends_with(suffix),\n-            VfsPathRepr::VirtualPath(p) => p.ends_with(suffix),\n+    pub fn parent(&self) -> Option<VfsPath> {\n+        let mut parent = self.clone();\n+        if parent.pop() {\n+            Some(parent)\n+        } else {\n+            None\n         }\n     }\n \n@@ -265,9 +267,6 @@ impl VirtualPath {\n     fn starts_with(&self, other: &VirtualPath) -> bool {\n         self.0.starts_with(&other.0)\n     }\n-    fn ends_with(&self, suffix: &str) -> bool {\n-        self.0.ends_with(suffix)\n-    }\n     fn pop(&mut self) -> bool {\n         let pos = match self.0.rfind('/') {\n             Some(pos) => pos,"}]}