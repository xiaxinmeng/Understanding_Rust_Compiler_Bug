{"sha": "78a8d615b51195c9154f95afdd5f870857ae512b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4YThkNjE1YjUxMTk1YzkxNTRmOTVhZmRkNWY4NzA4NTdhZTUxMmI=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-11-22T20:18:31Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-12-14T05:00:02Z"}, "message": "Implement missing traits on opaque masks, fix tests", "tree": {"sha": "de38c7edfeb7797be782ef56f8e8385adca3fd8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de38c7edfeb7797be782ef56f8e8385adca3fd8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78a8d615b51195c9154f95afdd5f870857ae512b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78a8d615b51195c9154f95afdd5f870857ae512b", "html_url": "https://github.com/rust-lang/rust/commit/78a8d615b51195c9154f95afdd5f870857ae512b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78a8d615b51195c9154f95afdd5f870857ae512b/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bc5d7f0d12bc8d6e0175177e14b38e8c7c3d240", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bc5d7f0d12bc8d6e0175177e14b38e8c7c3d240", "html_url": "https://github.com/rust-lang/rust/commit/5bc5d7f0d12bc8d6e0175177e14b38e8c7c3d240"}], "stats": {"total": 319, "additions": 233, "deletions": 86}, "files": [{"sha": "676a5560d2ff7f1f79b5289a64c6d6428f2aba26", "filename": "crates/core_simd/src/masks/mod.rs", "status": "modified", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/78a8d615b51195c9154f95afdd5f870857ae512b/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a8d615b51195c9154f95afdd5f870857ae512b/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs?ref=78a8d615b51195c9154f95afdd5f870857ae512b", "patch": "@@ -158,6 +158,136 @@ macro_rules! define_opaque_mask {\n                 self.0.partial_cmp(&other.0)\n             }\n         }\n+\n+        impl core::fmt::Debug for $name {\n+            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n+                f.debug_list()\n+                    .entries((0..$lanes).map(|i| self.test(i)))\n+                    .finish()\n+            }\n+        }\n+\n+        impl core::ops::BitAnd for $name {\n+            type Output = Self;\n+            #[inline]\n+            fn bitand(self, rhs: Self) -> Self {\n+                Self(self.0 & rhs.0)\n+            }\n+        }\n+\n+        impl core::ops::BitAnd<bool> for $name {\n+            type Output = Self;\n+            #[inline]\n+            fn bitand(self, rhs: bool) -> Self {\n+                self & Self::splat(rhs)\n+            }\n+        }\n+\n+        impl core::ops::BitAnd<$name> for bool {\n+            type Output = $name;\n+            #[inline]\n+            fn bitand(self, rhs: $name) -> $name {\n+                $name::splat(self) & rhs\n+            }\n+        }\n+\n+        impl core::ops::BitOr for $name {\n+            type Output = Self;\n+            #[inline]\n+            fn bitor(self, rhs: Self) -> Self {\n+                Self(self.0 | rhs.0)\n+            }\n+        }\n+\n+        impl core::ops::BitOr<bool> for $name {\n+            type Output = Self;\n+            #[inline]\n+            fn bitor(self, rhs: bool) -> Self {\n+                self | Self::splat(rhs)\n+            }\n+        }\n+\n+        impl core::ops::BitOr<$name> for bool {\n+            type Output = $name;\n+            #[inline]\n+            fn bitor(self, rhs: $name) -> $name {\n+                $name::splat(self) | rhs\n+            }\n+        }\n+\n+        impl core::ops::BitXor for $name {\n+            type Output = Self;\n+            #[inline]\n+            fn bitxor(self, rhs: Self) -> Self::Output {\n+                Self(self.0 ^ rhs.0)\n+            }\n+        }\n+\n+        impl core::ops::BitXor<bool> for $name {\n+            type Output = Self;\n+            #[inline]\n+            fn bitxor(self, rhs: bool) -> Self::Output {\n+                self ^ Self::splat(rhs)\n+            }\n+        }\n+\n+        impl core::ops::BitXor<$name> for bool {\n+            type Output = $name;\n+            #[inline]\n+            fn bitxor(self, rhs: $name) -> Self::Output {\n+                $name::splat(self) ^ rhs\n+            }\n+        }\n+\n+        impl core::ops::Not for $name {\n+            type Output = $name;\n+            #[inline]\n+            fn not(self) -> Self::Output {\n+                Self(!self.0)\n+            }\n+        }\n+\n+        impl core::ops::BitAndAssign for $name {\n+            #[inline]\n+            fn bitand_assign(&mut self, rhs: Self) {\n+                self.0 &= rhs.0;\n+            }\n+        }\n+\n+        impl core::ops::BitAndAssign<bool> for $name {\n+            #[inline]\n+            fn bitand_assign(&mut self, rhs: bool) {\n+                *self &= Self::splat(rhs);\n+            }\n+        }\n+\n+        impl core::ops::BitOrAssign for $name {\n+            #[inline]\n+            fn bitor_assign(&mut self, rhs: Self) {\n+                self.0 |= rhs.0;\n+            }\n+        }\n+\n+        impl core::ops::BitOrAssign<bool> for $name {\n+            #[inline]\n+            fn bitor_assign(&mut self, rhs: bool) {\n+                *self |= Self::splat(rhs);\n+            }\n+        }\n+\n+        impl core::ops::BitXorAssign for $name {\n+            #[inline]\n+            fn bitxor_assign(&mut self, rhs: Self) {\n+                self.0 ^= rhs.0;\n+            }\n+        }\n+\n+        impl core::ops::BitXorAssign<bool> for $name {\n+            #[inline]\n+            fn bitxor_assign(&mut self, rhs: bool) {\n+                *self ^= Self::splat(rhs);\n+            }\n+        }\n     };\n     { new [$width:ty; $lanes:tt] $($var:ident)* } => {\n         /// Construct a vector by setting each lane to the given values."}, {"sha": "00fc31f3d05f8a94231f04d606039b5821de7ad3", "filename": "crates/core_simd/tests/helpers/biteq.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/78a8d615b51195c9154f95afdd5f870857ae512b/crates%2Fcore_simd%2Ftests%2Fhelpers%2Fbiteq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a8d615b51195c9154f95afdd5f870857ae512b/crates%2Fcore_simd%2Ftests%2Fhelpers%2Fbiteq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fhelpers%2Fbiteq.rs?ref=78a8d615b51195c9154f95afdd5f870857ae512b", "patch": "@@ -70,7 +70,12 @@ impl_biteq! {\n     integer impl BitEq for\n         u8, u16, u32, u64, u128, usize,\n         i8, i16, i32, i64, i128, isize,\n-        core_simd::mask8, core_simd::mask16, core_simd::mask32, core_simd::mask64, core_simd::mask128, core_simd::masksize,\n+        core_simd::masks::wide::m8,\n+        core_simd::masks::wide::m16,\n+        core_simd::masks::wide::m32,\n+        core_simd::masks::wide::m64,\n+        core_simd::masks::wide::m128,\n+        core_simd::masks::wide::msize,\n }\n \n impl_biteq! {\n@@ -93,12 +98,12 @@ impl_biteq! {\n         core_simd::isizex2, core_simd::isizex4, core_simd::isizex8,\n         core_simd::f32x2, core_simd::f32x4, core_simd::f32x8, core_simd::f32x16,\n         core_simd::f64x2, core_simd::f64x4, core_simd::f64x8,\n-        core_simd::mask8x8,    core_simd::mask8x16,   core_simd::mask8x32,   core_simd::mask8x64,\n-        core_simd::mask16x4,   core_simd::mask16x8,   core_simd::mask16x16,  core_simd::mask16x32,\n-        core_simd::mask32x2,   core_simd::mask32x4,   core_simd::mask32x8,   core_simd::mask32x16,\n-        core_simd::mask64x2,   core_simd::mask64x4,   core_simd::mask64x8,\n-        core_simd::mask128x2,  core_simd::mask128x4,\n-        core_simd::masksizex2, core_simd::masksizex4, core_simd::masksizex8,\n+        core_simd::masks::wide::m8x8,    core_simd::masks::wide::m8x16,   core_simd::masks::wide::m8x32,   core_simd::masks::wide::m8x64,\n+        core_simd::masks::wide::m16x4,   core_simd::masks::wide::m16x8,   core_simd::masks::wide::m16x16,  core_simd::masks::wide::m16x32,\n+        core_simd::masks::wide::m32x2,   core_simd::masks::wide::m32x4,   core_simd::masks::wide::m32x8,   core_simd::masks::wide::m32x16,\n+        core_simd::masks::wide::m64x2,   core_simd::masks::wide::m64x4,   core_simd::masks::wide::m64x8,\n+        core_simd::masks::wide::m128x2,  core_simd::masks::wide::m128x4,\n+        core_simd::masks::wide::msizex2, core_simd::masks::wide::msizex4, core_simd::masks::wide::msizex8,\n }\n \n pub(crate) struct BitEqWrapper<'a, T>(pub(crate) &'a T);"}, {"sha": "27ba4e2d29fe683b1cc3db9cfb03efe52c3446be", "filename": "crates/core_simd/tests/ops_impl/mask128.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78a8d615b51195c9154f95afdd5f870857ae512b/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmask128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a8d615b51195c9154f95afdd5f870857ae512b/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmask128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmask128.rs?ref=78a8d615b51195c9154f95afdd5f870857ae512b", "patch": "@@ -1,4 +1,2 @@\n-use super::helpers;\n-\n-mask_tests! { mask128x2, mask128 }\n-mask_tests! { mask128x4, mask128 }\n+mask_tests! { mask128x2, 2 }\n+mask_tests! { mask128x4, 4 }"}, {"sha": "0fe82fa680479a457a7e37852a2d5f0fed94e7bc", "filename": "crates/core_simd/tests/ops_impl/mask16.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78a8d615b51195c9154f95afdd5f870857ae512b/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmask16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a8d615b51195c9154f95afdd5f870857ae512b/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmask16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmask16.rs?ref=78a8d615b51195c9154f95afdd5f870857ae512b", "patch": "@@ -1,6 +1,4 @@\n-use super::helpers;\n-\n-mask_tests! { mask16x4, mask16 }\n-mask_tests! { mask16x8, mask16 }\n-mask_tests! { mask16x16, mask16 }\n-mask_tests! { mask16x32, mask16 }\n+mask_tests! { mask16x4, 4 }\n+mask_tests! { mask16x8, 8 }\n+mask_tests! { mask16x16, 16 }\n+mask_tests! { mask16x32, 32 }"}, {"sha": "66d987a43ce83c295a96e014c3fce7e839ee435a", "filename": "crates/core_simd/tests/ops_impl/mask32.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78a8d615b51195c9154f95afdd5f870857ae512b/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmask32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a8d615b51195c9154f95afdd5f870857ae512b/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmask32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmask32.rs?ref=78a8d615b51195c9154f95afdd5f870857ae512b", "patch": "@@ -1,6 +1,4 @@\n-use super::helpers;\n-\n-mask_tests! { mask32x2, mask32 }\n-mask_tests! { mask32x4, mask32 }\n-mask_tests! { mask32x8, mask32 }\n-mask_tests! { mask32x16, mask32 }\n+mask_tests! { mask32x2, 2 }\n+mask_tests! { mask32x4, 4 }\n+mask_tests! { mask32x8, 8 }\n+mask_tests! { mask32x16, 16 }"}, {"sha": "a1f1f67b23887641de455b53796d1e323e038c8b", "filename": "crates/core_simd/tests/ops_impl/mask64.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78a8d615b51195c9154f95afdd5f870857ae512b/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmask64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a8d615b51195c9154f95afdd5f870857ae512b/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmask64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmask64.rs?ref=78a8d615b51195c9154f95afdd5f870857ae512b", "patch": "@@ -1,5 +1,3 @@\n-use super::helpers;\n-\n-mask_tests! { mask64x2, mask64 }\n-mask_tests! { mask64x4, mask64 }\n-mask_tests! { mask64x8, mask64 }\n+mask_tests! { mask64x2, 2 }\n+mask_tests! { mask64x4, 4 }\n+mask_tests! { mask64x8, 8 }"}, {"sha": "218fa9fe895e5a9706790ab25f94290a744c82b6", "filename": "crates/core_simd/tests/ops_impl/mask8.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78a8d615b51195c9154f95afdd5f870857ae512b/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmask8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a8d615b51195c9154f95afdd5f870857ae512b/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmask8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmask8.rs?ref=78a8d615b51195c9154f95afdd5f870857ae512b", "patch": "@@ -1,6 +1,4 @@\n-use super::helpers;\n-\n-mask_tests! { mask8x8, mask8 }\n-mask_tests! { mask8x16, mask8 }\n-mask_tests! { mask8x32, mask8 }\n-mask_tests! { mask8x64, mask8 }\n+mask_tests! { mask8x8, 8 }\n+mask_tests! { mask8x16, 16 }\n+mask_tests! { mask8x32, 32 }\n+mask_tests! { mask8x64, 64 }"}, {"sha": "795f9e27c4458fa1dcefeb5e23ece1f66d4d859e", "filename": "crates/core_simd/tests/ops_impl/mask_macros.rs", "status": "modified", "additions": 71, "deletions": 47, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/78a8d615b51195c9154f95afdd5f870857ae512b/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmask_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a8d615b51195c9154f95afdd5f870857ae512b/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmask_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmask_macros.rs?ref=78a8d615b51195c9154f95afdd5f870857ae512b", "patch": "@@ -1,25 +1,54 @@\n macro_rules! mask_tests {\n-    { $vector:ident, $scalar:ident } => {\n+    { $vector:ident, $lanes:literal } => {\n         #[cfg(test)]\n         mod $vector {\n-            use super::*;\n-            use helpers::lanewise::*;\n+            use core_simd::$vector as Vector;\n+            const LANES: usize = $lanes;\n \n             #[cfg(target_arch = \"wasm32\")]\n             use wasm_bindgen_test::*;\n \n             #[cfg(target_arch = \"wasm32\")]\n             wasm_bindgen_test_configure!(run_in_browser);\n \n-            fn from_slice(slice: &[bool]) -> core_simd::$vector {\n-                let mut value = core_simd::$vector::default();\n-                let value_slice: &mut [_] = value.as_mut();\n-                for (m, b) in value_slice.iter_mut().zip(slice.iter()) {\n-                    *m = (*b).into();\n+            fn from_slice(slice: &[bool]) -> Vector {\n+                let mut value = Vector::default();\n+                for (i, b) in slice.iter().take(LANES).enumerate() {\n+                    value.set(i, *b);\n                 }\n                 value\n             }\n \n+            fn apply_unary_lanewise(x: Vector, f: impl Fn(bool) -> bool) -> Vector {\n+                let mut value = Vector::default();\n+                for i in 0..LANES {\n+                    value.set(i, f(x.test(i)));\n+                }\n+                value\n+            }\n+\n+            fn apply_binary_lanewise(x: Vector, y: Vector, f: impl Fn(bool, bool) -> bool) -> Vector {\n+                let mut value = Vector::default();\n+                for i in 0..LANES {\n+                    value.set(i, f(x.test(i), y.test(i)));\n+                }\n+                value\n+            }\n+\n+            fn apply_binary_scalar_lhs_lanewise(x: bool, mut y: Vector, f: impl Fn(bool, bool) -> bool) -> Vector {\n+                for i in 0..LANES {\n+                    y.set(i, f(x, y.test(i)));\n+                }\n+                y\n+            }\n+\n+            fn apply_binary_scalar_rhs_lanewise(mut x: Vector, y: bool, f: impl Fn(bool, bool) -> bool) -> Vector {\n+                for i in 0..LANES {\n+                    x.set(i, f(x.test(i), y));\n+                }\n+                x\n+            }\n+\n             const A: [bool; 64] = [\n                 false, true, false, true, false, false, true, true,\n                 false, true, false, true, false, false, true, true,\n@@ -41,18 +70,13 @@ macro_rules! mask_tests {\n                 false, false, true, true, false, true, false, true,\n             ];\n \n-            const SET_SCALAR: core_simd::$scalar = core_simd::$scalar::new(true);\n-            const UNSET_SCALAR: core_simd::$scalar = core_simd::$scalar::new(false);\n-            const SET_VECTOR: core_simd::$vector = core_simd::$vector::splat(SET_SCALAR);\n-            const UNSET_VECTOR: core_simd::$vector = core_simd::$vector::splat(UNSET_SCALAR);\n-\n             #[test]\n             #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitand() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n                 let expected = apply_binary_lanewise(a, b, core::ops::BitAnd::bitand);\n-                assert_biteq!(a & b, expected);\n+                assert_eq!(a & b, expected);\n             }\n \n             #[test]\n@@ -62,36 +86,36 @@ macro_rules! mask_tests {\n                 let b = from_slice(&B);\n                 let expected = apply_binary_lanewise(a, b, core::ops::BitAnd::bitand);\n                 a &= b;\n-                assert_biteq!(a, expected);\n+                assert_eq!(a, expected);\n             }\n \n             #[test]\n             #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitand_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let expected = a;\n-                assert_biteq!(a & SET_SCALAR, expected);\n-                assert_biteq!(a & UNSET_SCALAR, UNSET_VECTOR);\n+                assert_eq!(a & true, expected);\n+                assert_eq!(a & false, Vector::splat(false));\n             }\n \n             #[test]\n             #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitand_scalar_lhs() {\n                 let a = from_slice(&A);\n                 let expected = a;\n-                assert_biteq!(SET_SCALAR & a, expected);\n-                assert_biteq!(UNSET_SCALAR & a, UNSET_VECTOR);\n+                assert_eq!(true & a, expected);\n+                assert_eq!(false & a, Vector::splat(false));\n             }\n \n             #[test]\n             #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitand_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let expected = a;\n-                a &= SET_SCALAR;\n-                assert_biteq!(a, expected);\n-                a &= UNSET_SCALAR;\n-                assert_biteq!(a, UNSET_VECTOR);\n+                a &= true;\n+                assert_eq!(a, expected);\n+                a &= false;\n+                assert_eq!(a, Vector::splat(false));\n             }\n \n             #[test]\n@@ -100,7 +124,7 @@ macro_rules! mask_tests {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n                 let expected = apply_binary_lanewise(a, b, core::ops::BitOr::bitor);\n-                assert_biteq!(a | b, expected);\n+                assert_eq!(a | b, expected);\n             }\n \n             #[test]\n@@ -110,34 +134,34 @@ macro_rules! mask_tests {\n                 let b = from_slice(&B);\n                 let expected = apply_binary_lanewise(a, b, core::ops::BitOr::bitor);\n                 a |= b;\n-                assert_biteq!(a, expected);\n+                assert_eq!(a, expected);\n             }\n \n             #[test]\n             #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitor_scalar_rhs() {\n                 let a = from_slice(&A);\n-                assert_biteq!(a | UNSET_SCALAR, a);\n-                assert_biteq!(a | SET_SCALAR, SET_VECTOR);\n+                assert_eq!(a | false, a);\n+                assert_eq!(a | true, Vector::splat(true));\n             }\n \n             #[test]\n             #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitor_scalar_lhs() {\n                 let a = from_slice(&A);\n-                assert_biteq!(UNSET_SCALAR | a, a);\n-                assert_biteq!(SET_SCALAR | a, SET_VECTOR);\n+                assert_eq!(false | a, a);\n+                assert_eq!(true | a, Vector::splat(true));\n             }\n \n             #[test]\n             #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitor_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let expected = a;\n-                a |= UNSET_SCALAR;\n-                assert_biteq!(a, expected);\n-                a |= SET_SCALAR;\n-                assert_biteq!(a, SET_VECTOR);\n+                a |= false;\n+                assert_eq!(a, expected);\n+                a |= true;\n+                assert_eq!(a, Vector::splat(true));\n             }\n \n             #[test]\n@@ -146,7 +170,7 @@ macro_rules! mask_tests {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n                 let expected = apply_binary_lanewise(a, b, core::ops::BitXor::bitxor);\n-                assert_biteq!(a ^ b, expected);\n+                assert_eq!(a ^ b, expected);\n             }\n \n             #[test]\n@@ -156,45 +180,45 @@ macro_rules! mask_tests {\n                 let b = from_slice(&B);\n                 let expected = apply_binary_lanewise(a, b, core::ops::BitXor::bitxor);\n                 a ^= b;\n-                assert_biteq!(a, expected);\n+                assert_eq!(a, expected);\n             }\n \n             #[test]\n             #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitxor_scalar_rhs() {\n                 let a = from_slice(&A);\n-                let expected = apply_binary_scalar_rhs_lanewise(a, SET_SCALAR, core::ops::BitXor::bitxor);\n-                assert_biteq!(a ^ UNSET_SCALAR, a);\n-                assert_biteq!(a ^ SET_SCALAR, expected);\n+                let expected = apply_binary_scalar_rhs_lanewise(a, true, core::ops::BitXor::bitxor);\n+                assert_eq!(a ^ false, a);\n+                assert_eq!(a ^ true, expected);\n             }\n \n             #[test]\n             #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitxor_scalar_lhs() {\n                 let a = from_slice(&A);\n-                let expected = apply_binary_scalar_lhs_lanewise(SET_SCALAR, a, core::ops::BitXor::bitxor);\n-                assert_biteq!(UNSET_SCALAR ^ a, a);\n-                assert_biteq!(SET_SCALAR ^ a, expected);\n+                let expected = apply_binary_scalar_lhs_lanewise(true, a, core::ops::BitXor::bitxor);\n+                assert_eq!(false ^ a, a);\n+                assert_eq!(true ^ a, expected);\n             }\n \n             #[test]\n             #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitxor_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let expected_unset = a;\n-                let expected_set = apply_binary_scalar_rhs_lanewise(a, SET_SCALAR, core::ops::BitXor::bitxor);\n-                a ^= UNSET_SCALAR;\n-                assert_biteq!(a, expected_unset);\n-                a ^= SET_SCALAR;\n-                assert_biteq!(a, expected_set);\n+                let expected_set = apply_binary_scalar_rhs_lanewise(a, true, core::ops::BitXor::bitxor);\n+                a ^= false;\n+                assert_eq!(a, expected_unset);\n+                a ^= true;\n+                assert_eq!(a, expected_set);\n             }\n \n             #[test]\n             #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn not() {\n                 let v = from_slice(&A);\n                 let expected = apply_unary_lanewise(v, core::ops::Not::not);\n-                assert_biteq!(!v, expected);\n+                assert_eq!(!v, expected);\n             }\n         }\n     }"}, {"sha": "e0a44d870ca56b9bdd2e73085e6f9e59e3ac14c1", "filename": "crates/core_simd/tests/ops_impl/masksize.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78a8d615b51195c9154f95afdd5f870857ae512b/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmasksize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a8d615b51195c9154f95afdd5f870857ae512b/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmasksize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmasksize.rs?ref=78a8d615b51195c9154f95afdd5f870857ae512b", "patch": "@@ -1,5 +1,3 @@\n-use super::helpers;\n-\n-mask_tests! { masksizex2, masksize }\n-mask_tests! { masksizex4, masksize }\n-mask_tests! { masksizex8, masksize }\n+mask_tests! { masksizex2, 2 }\n+mask_tests! { masksizex4, 4 }\n+mask_tests! { masksizex8, 8 }"}]}